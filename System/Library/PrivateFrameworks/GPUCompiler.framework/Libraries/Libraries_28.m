uint64_t sub_22F18AFD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18B00C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F18B058(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const char *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  void **v28;
  size_t v29;
  int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *p_p;
  size_t v48;
  _QWORD v49[3];
  __int16 v50;
  void *__p;
  size_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;

  v6 = *a4;
  v7 = *(_QWORD *)(a2 + 1088);
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) != 21)
  {
    v11 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v11 + 312) = *a4;
    *(_DWORD *)(v11 + 316) = 1355;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v12 = (unsigned __int8 *)(v11 + 320);
    v54 = (unsigned __int8 *)(v11 + 320);
    v55 = 0;
    v56 = v11;
    v57 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v13 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v11 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
      LODWORD(v13) = *v12;
    }
    *(_DWORD *)(v11 + 776) = 0;
    v12[v13 + 1] = 1;
    *(_BYTE *)(v11 + 320) = v13 + 1;
    v16 = &v12[8 * v13];
    v17 = "(";
    goto LABEL_20;
  }
  sub_22F18FB4C(a2, a4);
  v8 = *((unsigned __int16 *)a4 + 8);
  if ((v8 - 7) < 6)
    goto LABEL_8;
  if ((v8 - 13) < 6 || v8 == 1)
    goto LABEL_8;
  v22 = *((_QWORD *)a4 + 1);
  if (!v22)
    goto LABEL_8;
  v23 = *(_QWORD *)(v22 + 16);
  if (*(_DWORD *)v23 == 3)
  {
    v30 = *(unsigned __int16 *)(v23 + 16);
    v31 = *(unsigned __int8 *)(v23 + 18);
    if (v30 == 28528 && v31 == 112)
    {
      sub_22F18FB4C(a2, a4);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 200))(v7, v6);
      goto LABEL_64;
    }
LABEL_8:
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = *a4;
    *(_DWORD *)(v10 + 316) = 1357;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v49[0] = v10 + 320;
    v49[1] = 0;
    v49[2] = v10;
    v50 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v19 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v10 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v18 = (unsigned __int8 **)v49;
    goto LABEL_28;
  }
  if (*(_DWORD *)v23 != 4 || *(_DWORD *)(v23 + 16) != 1752397168)
    goto LABEL_8;
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) == 65)
  {
    sub_22F18FB4C(a2, a4);
    __p = 0;
    v52 = 0;
    v53 = 0;
    if (sub_22F190300(a2, (unint64_t)a4, (uint64_t)&__p, (uint64_t)"pragma execution_character_set", 0))
    {
      v24 = HIBYTE(v53);
      if (v53 >= 0)
        v25 = HIBYTE(v53) & 0x7F;
      else
        v25 = v52;
      if (v25 == 5)
      {
        v26 = __p;
        v27 = v53 >= 0 ? HIBYTE(v53) : v52;
        v28 = v53 >= 0 ? &__p : (void **)__p;
        v29 = v27 >= 5 ? 5 : v27;
        if (!memcmp(v28, "UTF-8", v29) && v27 == 5 || !memcmp(v28, "utf-8", v29) && v27 == 5)
        {
          if (v24 < 0)
            operator delete(v26);
          goto LABEL_55;
        }
      }
      v39 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v39 + 312) = *a4;
      *(_DWORD *)(v39 + 316) = 1356;
      if (*(char *)(v39 + 311) < 0)
      {
        **(_BYTE **)(v39 + 288) = 0;
        *(_QWORD *)(v39 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v39 + 288) = 0;
        *(_BYTE *)(v39 + 311) = 0;
      }
      v54 = (unsigned __int8 *)(v39 + 320);
      v55 = 0;
      v56 = v39;
      v57 = 1;
      *(_BYTE *)(v39 + 320) = 0;
      *(_DWORD *)(v39 + 664) = 0;
      v44 = *(unsigned int *)(v39 + 776);
      if ((_DWORD)v44)
      {
        v45 = *(_QWORD *)(v39 + 768);
        v46 = 56 * v44;
        do
        {
          if (*(char *)(v45 + v46 - 9) < 0)
            operator delete(*(void **)(v45 + v46 - 32));
          v46 -= 56;
        }
        while (v46);
      }
      *(_DWORD *)(v39 + 776) = 0;
      if (v53 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v53 >= 0)
        v48 = HIBYTE(v53) & 0x7F;
      else
        v48 = v52;
      sub_22E3B89A8(&v54, p_p, v48);
      sub_22E3BB0B8((uint64_t)&v54);
    }
    if (SHIBYTE(v53) < 0)
      operator delete(__p);
    return;
  }
LABEL_55:
  if (v7)
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v7 + 192))(v7, v6, "UTF-8", 5);
LABEL_64:
  if (*((_WORD *)a4 + 8) != 22)
  {
    v34 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v34 + 312) = *a4;
    *(_DWORD *)(v34 + 316) = 1355;
    if (*(char *)(v34 + 311) < 0)
    {
      **(_BYTE **)(v34 + 288) = 0;
      *(_QWORD *)(v34 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v34 + 288) = 0;
      *(_BYTE *)(v34 + 311) = 0;
    }
    v35 = (unsigned __int8 *)(v34 + 320);
    v54 = (unsigned __int8 *)(v34 + 320);
    v55 = 0;
    v56 = v34;
    v57 = 1;
    *(_BYTE *)(v34 + 320) = 0;
    *(_DWORD *)(v34 + 664) = 0;
    v36 = *(unsigned int *)(v34 + 776);
    if ((_DWORD)v36)
    {
      v37 = *(_QWORD *)(v34 + 768);
      v38 = 56 * v36;
      do
      {
        if (*(char *)(v37 + v38 - 9) < 0)
          operator delete(*(void **)(v37 + v38 - 32));
        v38 -= 56;
      }
      while (v38);
      LODWORD(v36) = *v35;
    }
    *(_DWORD *)(v34 + 776) = 0;
    v35[v36 + 1] = 1;
    *(_BYTE *)(v34 + 320) = v36 + 1;
    v16 = &v35[8 * v36];
    v17 = ")";
    goto LABEL_20;
  }
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) != 2)
  {
    v33 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v33 + 312) = *a4;
    *(_DWORD *)(v33 + 316) = 1223;
    if (*(char *)(v33 + 311) < 0)
    {
      **(_BYTE **)(v33 + 288) = 0;
      *(_QWORD *)(v33 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v33 + 288) = 0;
      *(_BYTE *)(v33 + 311) = 0;
    }
    v40 = (unsigned __int8 *)(v33 + 320);
    v54 = (unsigned __int8 *)(v33 + 320);
    v55 = 0;
    v56 = v33;
    v57 = 1;
    *(_BYTE *)(v33 + 320) = 0;
    *(_DWORD *)(v33 + 664) = 0;
    v41 = *(unsigned int *)(v33 + 776);
    if ((_DWORD)v41)
    {
      v42 = *(_QWORD *)(v33 + 768);
      v43 = 56 * v41;
      do
      {
        if (*(char *)(v42 + v43 - 9) < 0)
          operator delete(*(void **)(v42 + v43 - 32));
        v43 -= 56;
      }
      while (v43);
      LODWORD(v41) = *v40;
    }
    *(_DWORD *)(v33 + 776) = 0;
    v40[v41 + 1] = 1;
    *(_BYTE *)(v33 + 320) = v41 + 1;
    v16 = &v40[8 * v41];
    v17 = "pragma execution_character_set";
LABEL_20:
    *((_QWORD *)v16 + 2) = v17;
    v18 = &v54;
LABEL_28:
    sub_22E3BB0B8((uint64_t)v18);
  }
}

uint64_t sub_22F18B5DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18B618(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F18B664(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  int v11;
  size_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *p_dst;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::StringMapImpl *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *__src;
  size_t __len;
  int v64[4];
  __int16 v65;
  __int128 __dst;
  unint64_t v67;
  __int16 v68;
  unsigned __int8 *v69;
  size_t v70;
  int v71[4];
  __int16 v72;
  void *v73;
  __int128 v74;
  _WORD v75[64];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) == 21)
  {
    if ((sub_22F18FE0C(a2, (uint64_t)v71, 1) & 1) != 0)
      return;
    v69 = 0;
    v70 = 0;
    v73 = v75;
    v74 = xmmword_22F44E310;
    if (v72 == 15)
    {
      v6 = (unsigned __int8 *)sub_22F18E170(a2, (uint64_t)v71, (uint64_t *)&v73, 0);
      v8 = v7;
      v69 = v6;
      v70 = v7;
      *(_QWORD *)&v74 = 0;
      sub_22F18FB4C(a2, (unsigned int *)a4);
      if (*(_WORD *)(a4 + 16) != 65)
      {
        v21 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v21 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v21 + 316) = 1360;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v25 = (unsigned __int8 *)(v21 + 320);
        __dst = v21 + 320;
        v67 = v21;
        v68 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v26 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v26)
        {
          v27 = *(_QWORD *)(v21 + 768);
          v28 = 56 * v26;
          do
          {
            if (*(char *)(v27 + v28 - 9) < 0)
              operator delete(*(void **)(v27 + v28 - 32));
            v28 -= 56;
          }
          while (v28);
          LODWORD(v26) = *v25;
        }
        *(_DWORD *)(v21 + 776) = 0;
        v25[v26 + 1] = 1;
        *(_BYTE *)(v21 + 320) = v26 + 1;
        v29 = &v25[8 * v26];
        v30 = ",";
LABEL_45:
        *((_QWORD *)v29 + 2) = v30;
        goto LABEL_46;
      }
      if ((sub_22F18FE0C(a2, (uint64_t)v64, 1) & 1) != 0)
        goto LABEL_47;
      if (v65 == 15)
      {
        __src = (void *)sub_22F18E170(a2, (uint64_t)v64, (uint64_t *)&v73, 0);
        __len = v9;
        sub_22F18FB4C(a2, (unsigned int *)a4);
        if (*(_WORD *)(a4 + 16) == 22)
        {
          v10 = sub_22F16B514(a2, v71[0], &v69);
          v11 = sub_22F16B514(a2, v64[0], (unsigned __int8 **)&__src);
          v12 = __len;
          if (v70 && __len && v10 != v11)
          {
            if (v10)
              v13 = 1362;
            else
              v13 = 1363;
            v14 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v14 + 312) = v71[0];
            *(_DWORD *)(v14 + 316) = v13;
            if (*(char *)(v14 + 311) < 0)
            {
              **(_BYTE **)(v14 + 288) = 0;
              *(_QWORD *)(v14 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v14 + 288) = 0;
              *(_BYTE *)(v14 + 311) = 0;
            }
            __dst = v14 + 320;
            v67 = v14;
            v68 = 1;
            *(_BYTE *)(v14 + 320) = 0;
            *(_DWORD *)(v14 + 664) = 0;
            v59 = *(unsigned int *)(v14 + 776);
            if ((_DWORD)v59)
            {
              v60 = *(_QWORD *)(v14 + 768);
              v61 = 56 * v59;
              do
              {
                if (*(char *)(v60 + v61 - 9) < 0)
                  operator delete(*(void **)(v60 + v61 - 32));
                v61 -= 56;
              }
              while (v61);
            }
            *(_DWORD *)(v14 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&__dst, v69, v70);
            sub_22E3B89A8((unsigned __int8 **)&__dst, __src, __len);
            goto LABEL_46;
          }
          v35 = *(_QWORD *)(a2 + 104);
          v36 = __src;
          if (!*(_QWORD *)(v35 + 456))
          {
            v37 = (_QWORD *)operator new();
            *v37 = 0;
            v37[1] = 0;
            v37[2] = 0x2000000000;
            v37[3] = 0;
            v37[4] = 0;
            v37[5] = v37 + 7;
            v37[6] = 0x400000000;
            v37[13] = 0;
            v37[11] = v37 + 13;
            v37[12] = 0;
            v37[14] = 1;
            v38 = *(_QWORD *)(v35 + 456);
            *(_QWORD *)(v35 + 456) = v37;
            if (v38)
            {
              v39 = sub_22E6C693C(v38);
              MEMORY[0x2348A0E9C](v39, 0x1090C404A2D5703);
            }
          }
          if (v12 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v12 >= 0x17)
          {
            v45 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v12 | 7) != 0x17)
              v45 = v12 | 7;
            v46 = v45 + 1;
            p_dst = (__int128 *)operator new(v45 + 1);
            *((_QWORD *)&__dst + 1) = v12;
            v67 = v46 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v67) = v12;
            p_dst = &__dst;
            if (!v12)
            {
LABEL_80:
              *((_BYTE *)p_dst + v12) = 0;
              v47 = *(llvm::StringMapImpl **)(v35 + 456);
              v48 = llvm::StringMapImpl::LookupBucketFor();
              v49 = *(_QWORD *)v47;
              v50 = v48;
              v51 = *(_QWORD *)(*(_QWORD *)v47 + 8 * v48);
              if (v51 == -8)
              {
                --*((_DWORD *)v47 + 4);
              }
              else if (v51)
              {
LABEL_82:
                v52 = v51 + 8;
                if (*(char *)(v51 + 31) < 0)
                  operator delete(*(void **)v52);
                v53 = __dst;
                *(_QWORD *)(v52 + 16) = v67;
                *(_OWORD *)v52 = v53;
                goto LABEL_47;
              }
              v54 = sub_22E3CD3D4((uint64_t)v47 + 24, v8 + 33, 3);
              v55 = (_QWORD *)v54;
              v56 = v54 + 32;
              if (v8)
                memcpy((void *)(v54 + 32), v6, v8);
              *(_BYTE *)(v56 + v8) = 0;
              *v55 = v8;
              v55[1] = 0;
              v55[2] = 0;
              v55[3] = 0;
              *(_QWORD *)(v49 + 8 * v50) = v55;
              ++*((_DWORD *)v47 + 3);
              for (i = (uint64_t *)(*(_QWORD *)v47 + 8 * llvm::StringMapImpl::RehashTable(v47)); ; ++i)
              {
                v51 = *i;
                if (*i && v51 != -8)
                  break;
              }
              goto LABEL_82;
            }
          }
          memmove(p_dst, v36, v12);
          goto LABEL_80;
        }
        v31 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v31 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v31 + 316) = 1360;
        if (*(char *)(v31 + 311) < 0)
        {
          **(_BYTE **)(v31 + 288) = 0;
          *(_QWORD *)(v31 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v31 + 288) = 0;
          *(_BYTE *)(v31 + 311) = 0;
        }
        v41 = (unsigned __int8 *)(v31 + 320);
        __dst = v31 + 320;
        v67 = v31;
        v68 = 1;
        *(_BYTE *)(v31 + 320) = 0;
        *(_DWORD *)(v31 + 664) = 0;
        v42 = *(unsigned int *)(v31 + 776);
        if ((_DWORD)v42)
        {
          v43 = *(_QWORD *)(v31 + 768);
          v44 = 56 * v42;
          do
          {
            if (*(char *)(v43 + v44 - 9) < 0)
              operator delete(*(void **)(v43 + v44 - 32));
            v44 -= 56;
          }
          while (v44);
          LODWORD(v42) = *v41;
        }
        *(_DWORD *)(v31 + 776) = 0;
        v41[v42 + 1] = 1;
        *(_BYTE *)(v31 + 320) = v42 + 1;
        v29 = &v41[8 * v42];
        v30 = ")";
        goto LABEL_45;
      }
      v20 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v20 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v20 + 316) = 1361;
      if (*(char *)(v20 + 311) < 0)
      {
        **(_BYTE **)(v20 + 288) = 0;
        *(_QWORD *)(v20 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v20 + 288) = 0;
        *(_BYTE *)(v20 + 311) = 0;
      }
      __dst = v20 + 320;
      v67 = v20;
      v68 = 1;
      *(_BYTE *)(v20 + 320) = 0;
      *(_DWORD *)(v20 + 664) = 0;
      v32 = *(unsigned int *)(v20 + 776);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v20 + 768);
        v34 = 56 * v32;
        do
        {
          if (*(char *)(v33 + v34 - 9) < 0)
            operator delete(*(void **)(v33 + v34 - 32));
          v34 -= 56;
        }
        while (v34);
      }
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v20 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v20 + 316) = 1361;
      if (*(char *)(v20 + 311) < 0)
      {
        **(_BYTE **)(v20 + 288) = 0;
        *(_QWORD *)(v20 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v20 + 288) = 0;
        *(_BYTE *)(v20 + 311) = 0;
      }
      __dst = v20 + 320;
      v67 = v20;
      v68 = 1;
      *(_BYTE *)(v20 + 320) = 0;
      *(_DWORD *)(v20 + 664) = 0;
      v22 = *(unsigned int *)(v20 + 776);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v20 + 768);
        v24 = 56 * v22;
        do
        {
          if (*(char *)(v23 + v24 - 9) < 0)
            operator delete(*(void **)(v23 + v24 - 32));
          v24 -= 56;
        }
        while (v24);
      }
    }
    *(_DWORD *)(v20 + 776) = 0;
LABEL_46:
    sub_22E3BB0B8((uint64_t)&__dst);
LABEL_47:
    if (v73 != v75)
      free(v73);
    return;
  }
  v15 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v15 + 312) = *(_DWORD *)a4;
  *(_DWORD *)(v15 + 316) = 1360;
  if (*(char *)(v15 + 311) < 0)
  {
    **(_BYTE **)(v15 + 288) = 0;
    *(_QWORD *)(v15 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v15 + 288) = 0;
    *(_BYTE *)(v15 + 311) = 0;
  }
  v16 = (unsigned __int8 *)(v15 + 320);
  v73 = (void *)(v15 + 320);
  *(_QWORD *)&v74 = 0;
  *((_QWORD *)&v74 + 1) = v15;
  v75[0] = 1;
  *(_BYTE *)(v15 + 320) = 0;
  *(_DWORD *)(v15 + 664) = 0;
  v17 = *(unsigned int *)(v15 + 776);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(v15 + 768);
    v19 = 56 * v17;
    do
    {
      if (*(char *)(v18 + v19 - 9) < 0)
        operator delete(*(void **)(v18 + v19 - 32));
      v19 -= 56;
    }
    while (v19);
    LODWORD(v17) = *v16;
  }
  *(_DWORD *)(v15 + 776) = 0;
  v16[v17 + 1] = 1;
  *(_BYTE *)(v15 + 320) = v17 + 1;
  *(_QWORD *)&v16[8 * v17 + 16] = "(";
  sub_22E3BB0B8((uint64_t)&v73);
}

uint64_t sub_22F18BDA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18BDE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F18BE2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_22F183EE8(a2, a4);
}

uint64_t sub_22F18BE38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = (llvm *)((char *)v5 + 8) == 0;
        else
          v6 = 1;
        if (!v6)
        {
          v8 = *(_QWORD *)v5;
          v7 = *((_QWORD *)v5 + 1);
          *((_QWORD *)v5 + 1) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          llvm::deallocate_buffer(v5, (void *)(v8 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

char *sub_22F18BED8(char **a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  char *v29;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v9)
  {
    if (v8 == v5)
    {
      *(_QWORD *)v8 = *(_QWORD *)a3;
      a1[1] = v8 + 8;
    }
    else
    {
      v10 = v8 + 8;
      v11 = v5 - 8;
      v12 = a1[1];
      while (v11 < v5)
      {
        v13 = *(_QWORD *)v11;
        v11 += 8;
        *(_QWORD *)v12 = v13;
        v12 += 8;
      }
      a1[1] = v12;
      if (v5 != v10)
        memmove(&v5[-8 * ((v5 - v10) >> 3)], v8, v5 - v10);
      if (v8 <= v3)
        v3 += 8 * (a1[1] > v3);
      *(_QWORD *)v8 = *(_QWORD *)v3;
    }
    return v8;
  }
  v14 = ((v5 - v6) >> 3) + 1;
  if (v14 >> 61)
    abort();
  v16 = v9 - (_QWORD)v6;
  if (v16 >> 2 > v14)
    v14 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  if (v17)
  {
    if (v17 >> 61)
      goto LABEL_44;
    v18 = (char *)operator new(8 * v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = v7 >> 3;
  v20 = &v18[8 * (v7 >> 3)];
  v21 = &v18[8 * v17];
  if (v7 >> 3 == v17)
  {
    if (v7 >= 1)
    {
      if (v19 >= -1)
        v22 = v19 + 1;
      else
        v22 = v19 + 2;
      v20 -= 8 * (v22 >> 1);
      goto LABEL_34;
    }
    if (v6 == a2)
      v23 = 1;
    else
      v23 = v7 >> 2;
    if (!(v23 >> 61))
    {
      v20 = (char *)operator new(8 * v23);
      v21 = &v20[8 * v23];
      if (v18)
      {
        operator delete(v18);
        v6 = *a1;
      }
      goto LABEL_34;
    }
LABEL_44:
    sub_22E3B3F8C();
  }
LABEL_34:
  *(_QWORD *)v20 = *(_QWORD *)v3;
  v24 = v20;
  if (v8 != v6)
  {
    v25 = v8;
    v24 = v20;
    do
    {
      v26 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *((_QWORD *)v24 - 1) = v26;
      v24 -= 8;
    }
    while (v25 != v6);
  }
  v27 = a1[1];
  v28 = v27 - v8;
  if (v27 != v8)
    memmove(v20 + 8, v8, v27 - v8);
  v29 = *a1;
  *a1 = v24;
  a1[1] = &v20[v28 + 8];
  a1[2] = v21;
  if (v29)
    operator delete(v29);
  return v20;
}

char *sub_22F18C0E8(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*(_DWORD *)a2 & 0x80000000) == 0)
  {
    v5 = result;
    if ((*(_WORD *)(a3 + 36) & 0x10) != 0)
    {
      v9 = sub_22E3CD3D4((uint64_t)(result + 16), 24, 3);
      v10 = *(unsigned __int16 *)(a2 + 16);
      if ((v10 - 7) < 6 || ((v10 - 13) >= 6 ? (v11 = v10 == 1) : (v11 = 1), v11))
        v12 = 0;
      else
        v12 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 4) = a4;
      *(_QWORD *)(v9 + 16) = v12;
      return sub_22F417A38(v5, (_DWORD *)v9);
    }
    else
    {
      v13 = a3;
      v14 = 0;
      result = (char *)sub_22F246C54((uint64_t *)result + 23, &v13, &v14);
      if ((_DWORD)result && v14 != *((_QWORD *)v5 + 23) + 16 * *((unsigned int *)v5 + 50))
      {
        v6 = *(_QWORD *)(v14 + 8);
        if (v6)
        {
          v7 = sub_22E3CD3D4((uint64_t)(v5 + 16), 24, 3);
          *(_DWORD *)v7 = 1;
          *(_QWORD *)(v7 + 4) = a4;
          *(_QWORD *)(v7 + 16) = v6 | 1;
          return sub_22F417A38(v5, (_DWORD *)v7);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22F18C204(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t *v12;

  v12 = (uint64_t *)sub_22F14FEA4(a3)[2];
  v5 = *v12;
  v6 = sub_22E3CD3D4(a1 + 16, 24, 3);
  v7 = v6;
  v8 = *(unsigned __int16 *)(a2 + 16);
  if ((v8 - 7) < 6 || ((v8 - 13) >= 6 ? (v9 = v8 == 1) : (v9 = 1), v9))
    v11 = 0;
  else
    v11 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v6 = 2;
  *(_QWORD *)(v6 + 4) = v5;
  *(_QWORD *)(v6 + 16) = v11;
  sub_22F417A38((char *)a1, (_DWORD *)v6);
  result = sub_22F37065C((uint64_t *)(a1 + 184), &v12);
  result[1] = v7;
  return result;
}

char *sub_22F18C2B4(char *a1, unsigned int a2, uint64_t a3, const void *a4, size_t a5, int a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;

  v20 = *(unsigned __int16 *)(a3 + 16);
  if ((v20 - 7) < 6 || ((v20 - 13) >= 6 ? (v21 = v20 == 1) : (v21 = 1), v21))
    v27 = 0;
  else
    v27 = *(_QWORD *)(a3 + 8);
  v22 = byte_22F4ACE36[(int)sub_22F1D32AC(v27) - 10];
  if (a6)
    v23 = HIDWORD(a7) - (a8 == 0);
  else
    v23 = a7;
  v24 = sub_22E3CD3D4((uint64_t)(a1 + 16), 48, 3);
  *(_DWORD *)v24 = 3;
  *(_QWORD *)(v24 + 4) = a2 | ((unint64_t)v23 << 32);
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_BYTE *)(v24 + 32) = a6 ^ 1 | (8 * (a14 != 0)) | v22 | *(_BYTE *)(v24 + 32) & 0xF0;
  *(_QWORD *)(v24 + 40) = a9;
  v25 = (void *)sub_22E3CD3D4((uint64_t)(a1 + 16), (a5 + 1), 0);
  memcpy(v25, a4, a5);
  *((_BYTE *)v25 + a5) = 0;
  *(_QWORD *)(v24 + 16) = v25;
  *(_QWORD *)(v24 + 24) = a5;
  return sub_22F417A38(a1, (_DWORD *)v24);
}

void sub_22F18C3FC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    v9 = v4 - v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        sub_22E3B3F8C();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * (v7 >> 3)];
    v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    if (v5 != v6)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[8 * a2 + v7];
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

char *sub_22F18C520(char **a1, int a2, int a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 2 > v6)
    v6 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 61)
    sub_22E3B3F8C();
  v12 = (char *)operator new(8 * v9);
  v13 = &v12[8 * v5];
  *(_DWORD *)v13 = a2;
  *((_DWORD *)v13 + 1) = a3;
  v14 = v13 + 8;
  while (v4 != v3)
  {
    v15 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *((_QWORD *)v13 - 1) = v15;
    v13 -= 8;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[8 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t sub_22F18C5EC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10)
{
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int16 v17;
  __int16 v18;
  _OWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *a2;
  *a2 = 0u;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a6 + 48);
  *(_QWORD *)(a1 + 88) = a5;
  v14 = (_QWORD *)operator new();
  *v14 = *(_QWORD *)(a1 + 88);
  v14[1] = 0;
  v14[2] = 0xFDC00000000;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = a6;
  *(_QWORD *)(a1 + 112) = a7;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x400000000;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 1;
  *(_OWORD *)(a1 + 512) = xmmword_22F463A40;
  *(_QWORD *)(a1 + 528) = 3;
  sub_22F41B58C((llvm::StringMapImpl *)(a1 + 544), a8);
  sub_22F41FB08((_QWORD *)(a1 + 672));
  *(_QWORD *)(a1 + 680) = 0;
  v15 = operator new();
  *(_BYTE *)(v15 + 31) = 0;
  *(_BYTE *)(v15 + 8) = 0;
  *(_QWORD *)v15 = off_24FAC8888;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_QWORD *)(v15 + 48) = 0x1000000000;
  *(_QWORD *)(a1 + 688) = v15;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 721) = 0u;
  *(_DWORD *)(a1 + 740) = a10;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 776) = a1 + 792;
  *(_QWORD *)(a1 + 784) = 0x200000000;
  *(_BYTE *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 828) = -1;
  *(_BYTE *)(a1 + 832) = 0;
  *(_BYTE *)(a1 + 836) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_DWORD *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_BYTE *)(a1 + 900) = 1;
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 908) = 0;
  *(_BYTE *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 952) = a1 + 968;
  *(_QWORD *)(a1 + 960) = 0x400000000;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1036) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1104) = a1 + 1120;
  *(_QWORD *)(a1 + 1112) = 0x200000000;
  *(_QWORD *)(a1 + 1232) = a1 + 1248;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_QWORD *)(a1 + 1240) = 0x800000000;
  *(_QWORD *)(a1 + 1504) = a1 + 1512;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_DWORD *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_QWORD *)(a1 + 1584) = a1 + 1528;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_DWORD *)(a1 + 1608) = 0;
  *(_QWORD *)(a1 + 1616) = 1;
  *(int64x2_t *)(a1 + 1624) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_QWORD *)(a1 + 1640) = a1 + 1656;
  *(_QWORD *)(a1 + 1648) = 0x200000000;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1672));
  *(_QWORD *)(a1 + 1688) = a1 + 1704;
  *(_QWORD *)(a1 + 1696) = 0x2000000000;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_DWORD *)(a1 + 1976) = 0;
  *(_QWORD *)(a1 + 1984) = 1;
  *(_QWORD *)&v16 = -1;
  *((_QWORD *)&v16 + 1) = -1;
  *(_OWORD *)(a1 + 1992) = v16;
  *(_OWORD *)(a1 + 2008) = v16;
  *(_OWORD *)(a1 + 2024) = v16;
  *(_OWORD *)(a1 + 2040) = v16;
  *(_OWORD *)(a1 + 2056) = v16;
  *(_OWORD *)(a1 + 2072) = v16;
  *(_OWORD *)(a1 + 2088) = v16;
  *(_OWORD *)(a1 + 2104) = v16;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_DWORD *)(a1 + 2136) = 0;
  *(_DWORD *)(a1 + 2168) = 0;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_WORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2344) = a1 + 2360;
  *(_QWORD *)(a1 + 2352) = 0x1000000000;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_QWORD *)(a1 + 2776) = a1 + 2792;
  *(_QWORD *)(a1 + 2784) = 0x100000000;
  *(_OWORD *)(a1 + 2841) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_DWORD *)(a1 + 2880) = 0;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_DWORD *)(a1 + 2904) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  v17 = *(_WORD *)(a1 + 536) & 0xFC00;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 2276) = 0;
  if (a9)
    v18 = 272;
  else
    v18 = 256;
  *(_WORD *)(a1 + 538) = 0;
  *(_BYTE *)(a1 + 540) = 0;
  *(_WORD *)(a1 + 536) = v18 | v17;
  v19 = (_OWORD *)operator new();
  *v19 = 0u;
  v19[1] = 0u;
  v20 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v19;
  if (v20)
    MEMORY[0x2348A0E9C](v20, 0x1060C40B8E061ACLL);
  v21 = (_QWORD *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "__VA_ARGS__", 0xBuLL);
  *(_QWORD *)(a1 + 320) = v21;
  *v21 |= 0xA0000000uLL;
  v26 = *(_QWORD *)(a1 + 320);
  *((_DWORD *)sub_22E669BD0((uint64_t *)(a1 + 2888), &v26) + 2) = 1220;
  v22 = (_QWORD *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "__VA_OPT__", 0xAuLL);
  *(_QWORD *)(a1 + 328) = v22;
  *v22 |= 0xA0000000uLL;
  v26 = *(_QWORD *)(a1 + 328);
  *((_DWORD *)sub_22E669BD0((uint64_t *)(a1 + 2888), &v26) + 2) = 1221;
  sub_22F4168A4(a1);
  sub_22F415ECC((_QWORD *)a1);
  if ((**(_BYTE **)(a1 + 56) & 0x80) != 0)
  {
    *(_QWORD *)(a1 + 2936) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "_exception_info", 0xFuLL);
    *(_QWORD *)(a1 + 2944) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "__exception_info", 0x10uLL);
    *(_QWORD *)(a1 + 2952) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "GetExceptionInformation", 0x17uLL);
    *(_QWORD *)(a1 + 2912) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "_exception_code", 0xFuLL);
    *(_QWORD *)(a1 + 2920) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "__exception_code", 0x10uLL);
    *(_QWORD *)(a1 + 2928) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "GetExceptionCode", 0x10uLL);
    *(_QWORD *)(a1 + 2960) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "_abnormal_termination", 0x15uLL);
    *(_QWORD *)(a1 + 2968) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "__abnormal_termination", 0x16uLL);
    v23 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "AbnormalTermination", 0x13uLL);
  }
  else
  {
    v23 = 0;
    *(_OWORD *)(a1 + 2960) = 0u;
    *(_OWORD *)(a1 + 2944) = 0u;
    *(_OWORD *)(a1 + 2928) = 0u;
    *(_OWORD *)(a1 + 2912) = 0u;
  }
  *(_QWORD *)(a1 + 2976) = v23;
  v24 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 740) != 1 && *(_BYTE *)(v24 + 74))
    *(_BYTE *)(a1 + 2272) = 1;
  if (*(char *)(v24 + 103) < 0)
  {
    if (!*(_QWORD *)(v24 + 88))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v24 + 103))
  {
    goto LABEL_19;
  }
  if ((*(char *)(v24 + 127) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v24 + 127))
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*(_QWORD *)(v24 + 112))
LABEL_18:
    *(_BYTE *)(a1 + 2273) = 1;
LABEL_19:
  if (*(_BYTE *)(v24 + 192))
    *(_DWORD *)(a1 + 1000) = 1;
  *(_DWORD *)(a1 + 920) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 208);
  return a1;
}

llvm **sub_22F18CBE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  llvm *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  llvm *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;

  v2 = *(_QWORD *)(a1 + 1072);
  v3 = *(_QWORD *)(a1 + 1064);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 - 24);
    *(_QWORD *)(v2 - 24) = 0;
    if (v4)
    {
      v6 = v2;
      sub_22F192684(v4);
      MEMORY[0x2348A0E9C](v4, 0x1060C40B318AEC2);
      v2 = v6;
    }
    v5 = *(_QWORD *)(v2 - 40);
    *(_QWORD *)(v2 - 40) = 0;
    if (v5)
    {
      v7 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v2 = v7;
    }
    v2 -= 56;
  }
  *(_QWORD *)(a1 + 1072) = v3;
  v8 = *(_QWORD *)(a1 + 2848);
  if (v8)
  {
    do
      v8 = *(_QWORD *)(v8 + 40);
    while (v8);
    *(_QWORD *)(a1 + 2848) = 0;
  }
  v9 = *(unsigned int *)(a1 + 2276);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)(a1 + 2280);
    v11 = v9 + 1;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        sub_22F192684(v12);
        MEMORY[0x2348A0E9C](v12, 0x1060C40B318AEC2);
      }
      ++v10;
      --v11;
    }
    while (v11 > 1);
  }
  v13 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = 0;
  if (v13)
  {
    sub_22F192684(v13);
    MEMORY[0x2348A0E9C](v13, 0x1060C40B318AEC2);
  }
  for (i = *(_QWORD *)(a1 + 2144); i; i = sub_22F41200C(i))
    ;
  if ((*(_WORD *)(a1 + 536) & 0x10) != 0)
  {
    v15 = *(_QWORD *)(a1 + 104);
    if (v15)
    {
      v16 = sub_22E6C6660(v15);
      MEMORY[0x2348A0E9C](v16, 0x10F2C40BAE81D25);
    }
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 2888), (void *)(16 * *(unsigned int *)(a1 + 2904)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2864), (void *)(16 * *(unsigned int *)(a1 + 2880)));
  v17 = *(void **)(a1 + 2824);
  if (v17)
  {
    *(_QWORD *)(a1 + 2832) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 2776);
  if (v18 != (void *)(a1 + 2792))
    free(v18);
  v19 = *(void **)(a1 + 2744);
  if (v19)
  {
    *(_QWORD *)(a1 + 2752) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 2344);
  if (v20 != (void *)(a1 + 2360))
    free(v20);
  for (j = 2336; j != 2272; j -= 8)
  {
    v22 = *(_QWORD *)(a1 + j);
    *(_QWORD *)(a1 + j) = 0;
    if (v22)
    {
      sub_22F192684(v22);
      MEMORY[0x2348A0E9C](v22, 0x1060C40B318AEC2);
    }
  }
  if (*(char *)(a1 + 2263) < 0)
    operator delete(*(void **)(a1 + 2240));
  sub_22F36FED8((unsigned int *)(a1 + 2152));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2152), (void *)(32 * *(unsigned int *)(a1 + 2168)));
  v23 = *(unsigned int *)(a1 + 2136);
  v24 = *(llvm **)(a1 + 2120);
  if ((_DWORD)v23)
  {
    v26 = (void **)((char *)v24 + 40);
    v27 = 96 * v23;
    do
    {
      if (((unint64_t)*(v26 - 5) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*((_BYTE *)v26 + 40))
        {
          if (*((char *)v26 + 39) < 0)
            operator delete(v26[2]);
          *((_BYTE *)v26 + 40) = 0;
        }
        if (*(_BYTE *)v26)
        {
          if (*((char *)v26 - 1) < 0)
            operator delete(*(v26 - 3));
          *(_BYTE *)v26 = 0;
        }
      }
      v26 += 12;
      v27 -= 96;
    }
    while (v27);
    v24 = *(llvm **)(a1 + 2120);
    v25 = 96 * *(unsigned int *)(a1 + 2136);
  }
  else
  {
    v25 = 0;
  }
  llvm::deallocate_buffer(v24, (void *)v25);
  sub_22F1911F0(a1 + 1984);
  v28 = *(unsigned int *)(a1 + 1976);
  v29 = *(llvm **)(a1 + 1960);
  if ((_DWORD)v28)
  {
    v31 = (_QWORD *)((char *)v29 + 8);
    v32 = 16 * v28;
    do
    {
      if ((*(v31 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v31 = sub_22E8BB820(v31);
      v31 += 2;
      v32 -= 16;
    }
    while (v32);
    v29 = *(llvm **)(a1 + 1960);
    v30 = (void *)(16 * *(unsigned int *)(a1 + 1976));
  }
  else
  {
    v30 = 0;
  }
  llvm::deallocate_buffer(v29, v30);
  v33 = *(void **)(a1 + 1688);
  if (v33 != (void *)(a1 + 1704))
    free(v33);
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1672));
  v34 = *(void **)(a1 + 1640);
  if (v34 != (void *)(a1 + 1656))
    free(v34);
  if ((*(_BYTE *)(a1 + 1616) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 1624), (void *)(8 * *(unsigned int *)(a1 + 1632)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1592), (void *)(8 * *(unsigned int *)(a1 + 1608)));
  sub_22F175D04(a1 + 1528);
  sub_22F4187B0(*(_QWORD **)(a1 + 1512));
  v35 = *(void **)(a1 + 1232);
  if (v35 != (void *)(a1 + 1248))
    free(v35);
  v36 = *(void **)(a1 + 1104);
  if (v36 != (void *)(a1 + 1120))
    free(v36);
  v37 = *(_QWORD *)(a1 + 1096);
  *(_QWORD *)(a1 + 1096) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  v38 = *(_QWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(_QWORD *)(a1 + 1064);
  if (v39)
  {
    v40 = *(_QWORD *)(a1 + 1072);
    v41 = *(void **)(a1 + 1064);
    if (v40 != v39)
    {
      do
      {
        v42 = *(_QWORD *)(v40 - 24);
        *(_QWORD *)(v40 - 24) = 0;
        if (v42)
        {
          v44 = v39;
          sub_22F192684(v42);
          MEMORY[0x2348A0E9C](v42, 0x1060C40B318AEC2);
          v39 = v44;
        }
        v43 = *(_QWORD *)(v40 - 40);
        *(_QWORD *)(v40 - 40) = 0;
        if (v43)
        {
          v45 = v39;
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          v39 = v45;
        }
        v40 -= 56;
      }
      while (v40 != v39);
      v41 = *(void **)(a1 + 1064);
    }
    *(_QWORD *)(a1 + 1072) = v39;
    operator delete(v41);
  }
  v46 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = 0;
  if (v46)
  {
    sub_22F192684(v46);
    MEMORY[0x2348A0E9C](v46, 0x1060C40B318AEC2);
  }
  v47 = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
  v48 = *(void **)(a1 + 952);
  if (v48 != (void *)(a1 + 968))
    free(v48);
  v49 = *(void **)(a1 + 776);
  if (v49 != (void *)(a1 + 792))
    free(v49);
  v50 = *(void **)(a1 + 704);
  if (v50)
  {
    *(_QWORD *)(a1 + 712) = v50;
    operator delete(v50);
  }
  v51 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = 0;
  if (v53)
    MEMORY[0x2348A0E9C](v53, 0x1060C40B8E061ACLL);
  sub_22F41FB98((llvm::FoldingSetBase **)(a1 + 672));
  free(*(void **)(a1 + 544));
  sub_22E3B4EF4(a1 + 568);
  sub_22E3B4EF4(a1 + 128);
  v54 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v54)
    MEMORY[0x2348A0E9C](v54, 0x1030C4013764637);
  v55 = *(std::__shared_weak_count **)(a1 + 40);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return sub_22E3BACF8((llvm *)a1);
}

llvm::raw_ostream *sub_22F18D1A8(uint64_t a1)
{
  llvm::raw_ostream *v2;
  void *v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _WORD *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  llvm::raw_ostream *v18;
  void *v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  llvm::raw_ostream *v22;
  void *v23;
  llvm::raw_ostream *v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  void *v27;
  llvm::raw_ostream *v28;
  _WORD *v29;
  llvm::raw_ostream *v30;
  void *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _WORD *v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  void *v41;
  llvm::raw_ostream *v42;
  _BYTE *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  llvm::raw_ostream *v46;
  void *v47;
  llvm::raw_ostream *v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  void *v51;
  llvm::raw_ostream *v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64x2_t v59;
  int64x2_t v60;
  uint64_t v61;
  int8x16_t v62;
  unint64_t v63;
  uint64x2_t v64;
  int64x2_t v65;
  uint32x2_t v66;
  uint64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  llvm::raw_ostream *v73;
  _DWORD *v74;
  llvm::raw_ostream *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64x2_t v80;
  int64x2_t v81;
  uint64_t v82;
  int8x16_t v83;
  unint64_t v84;
  uint64x2_t v85;
  int64x2_t v86;
  uint32x2_t v87;
  uint64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  llvm *v94;
  llvm::raw_ostream *v95;
  void *v96;
  llvm *v97;
  llvm::raw_ostream *v98;
  void *v99;
  llvm *v100;
  llvm::raw_ostream *v101;
  uint64_t v102;
  llvm *v103;
  llvm::raw_ostream *v104;
  void *v105;
  llvm *v106;
  llvm::raw_ostream *v107;
  uint64_t v108;
  llvm *v109;
  llvm::raw_ostream *v110;
  void *v111;
  llvm::raw_ostream *result;
  _BYTE *v113;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x18uLL)
  {
    qmemcpy(v3, "\n*** Preprocessor Stats:\n", 25);
    *((_QWORD *)v2 + 4) += 25;
  }
  else
  {
    v2 = (llvm::raw_ostream *)llvm::raw_ostream::write(v2, "\n*** Preprocessor Stats:\n");
  }
  llvm::errs(v2);
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x12)
  {
    *(_DWORD *)(v5 + 15) = 171598958;
    *(_OWORD *)v5 = *(_OWORD *)" directives found:\n";
    *((_QWORD *)v4 + 4) += 19;
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, " directives found:\n");
  }
  v6 = (llvm::raw_ostream *)llvm::errs(v4);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 8224;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "  ");
  }
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 9)
  {
    *(_WORD *)(v9 + 8) = 2606;
    *(_QWORD *)v9 = *(_QWORD *)" #define.\n";
    *((_QWORD *)v8 + 4) += 10;
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, " #define.\n");
  }
  v10 = (llvm::raw_ostream *)llvm::errs(v8);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8224;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, "  ");
  }
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 8)
  {
    *(_BYTE *)(v13 + 8) = 10;
    *(_QWORD *)v13 = *(_QWORD *)" #undef.\n";
    *((_QWORD *)v12 + 4) += 9;
  }
  else
  {
    v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, " #undef.\n");
  }
  v14 = (llvm::raw_ostream *)llvm::errs(v12);
  v15 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0x21uLL)
  {
    qmemcpy(v15, "  #include/#include_next/#import:\n", 34);
    *((_QWORD *)v14 + 4) += 34;
  }
  else
  {
    v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, "  #include/#include_next/#import:\n");
  }
  v16 = (llvm::raw_ostream *)llvm::errs(v14);
  v17 = (_DWORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 3uLL)
  {
    *v17 = 538976288;
    *((_QWORD *)v16 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v16, "    ");
  }
  v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v19 = (void *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0x16uLL)
  {
    qmemcpy(v19, " source files entered.\n", 23);
    *((_QWORD *)v18 + 4) += 23;
  }
  else
  {
    v18 = (llvm::raw_ostream *)llvm::raw_ostream::write(v18, " source files entered.\n");
  }
  v20 = (llvm::raw_ostream *)llvm::errs(v18);
  v21 = (_DWORD *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 3uLL)
  {
    *v21 = 538976288;
    *((_QWORD *)v20 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v20, "    ");
  }
  v22 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v23 = (void *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x18uLL)
  {
    qmemcpy(v23, " max include stack depth\n", 25);
    *((_QWORD *)v22 + 4) += 25;
  }
  else
  {
    v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(v22, " max include stack depth\n");
  }
  v24 = (llvm::raw_ostream *)llvm::errs(v22);
  v25 = (_WORD *)*((_QWORD *)v24 + 4);
  if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 1uLL)
  {
    *v25 = 8224;
    *((_QWORD *)v24 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v24, "  ");
  }
  v26 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v27 = (void *)*((_QWORD *)v26 + 4);
  if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 0x14uLL)
  {
    qmemcpy(v27, " #if/#ifndef/#ifdef.\n", 21);
    *((_QWORD *)v26 + 4) += 21;
  }
  else
  {
    v26 = (llvm::raw_ostream *)llvm::raw_ostream::write(v26, " #if/#ifndef/#ifdef.\n");
  }
  v28 = (llvm::raw_ostream *)llvm::errs(v26);
  v29 = (_WORD *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 1uLL)
  {
    *v29 = 8224;
    *((_QWORD *)v28 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v28, "  ");
  }
  v30 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v31 = (void *)*((_QWORD *)v30 + 4);
  if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 0x20uLL)
  {
    qmemcpy(v31, " #else/#elif/#elifdef/#elifndef.\n", 33);
    *((_QWORD *)v30 + 4) += 33;
  }
  else
  {
    v30 = (llvm::raw_ostream *)llvm::raw_ostream::write(v30, " #else/#elif/#elifdef/#elifndef.\n");
  }
  v32 = (llvm::raw_ostream *)llvm::errs(v30);
  v33 = (_WORD *)*((_QWORD *)v32 + 4);
  if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 1uLL)
  {
    *v33 = 8224;
    *((_QWORD *)v32 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v32, "  ");
  }
  v34 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v35 = *((_QWORD *)v34 + 4);
  if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 8)
  {
    *(_BYTE *)(v35 + 8) = 10;
    *(_QWORD *)v35 = *(_QWORD *)" #endif.\n";
    *((_QWORD *)v34 + 4) += 9;
  }
  else
  {
    v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v34, " #endif.\n");
  }
  v36 = (llvm::raw_ostream *)llvm::errs(v34);
  v37 = (_WORD *)*((_QWORD *)v36 + 4);
  if (*((_QWORD *)v36 + 3) - (_QWORD)v37 > 1uLL)
  {
    *v37 = 8224;
    *((_QWORD *)v36 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v36, "  ");
  }
  v38 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v39 = *((_QWORD *)v38 + 4);
  if ((unint64_t)(*((_QWORD *)v38 + 3) - v39) > 9)
  {
    *(_WORD *)(v39 + 8) = 2606;
    *(_QWORD *)v39 = *(_QWORD *)" #pragma.\n";
    *((_QWORD *)v38 + 4) += 10;
  }
  else
  {
    v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, " #pragma.\n");
  }
  llvm::errs(v38);
  v40 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v41 = (void *)*((_QWORD *)v40 + 4);
  if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 0x22uLL)
  {
    qmemcpy(v41, " #if/#ifndef#ifdef regions skipped\n", 35);
    *((_QWORD *)v40 + 4) += 35;
  }
  else
  {
    v40 = (llvm::raw_ostream *)llvm::raw_ostream::write(v40, " #if/#ifndef#ifdef regions skipped\n");
  }
  llvm::errs(v40);
  v42 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v43 = (_BYTE *)*((_QWORD *)v42 + 4);
  if (*((_BYTE **)v42 + 3) == v43)
  {
    llvm::raw_ostream::write(v42, "/");
  }
  else
  {
    *v43 = 47;
    ++*((_QWORD *)v42 + 4);
  }
  v44 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v45 = (_BYTE *)*((_QWORD *)v44 + 4);
  if (*((_BYTE **)v44 + 3) == v45)
  {
    llvm::raw_ostream::write(v44, "/");
  }
  else
  {
    *v45 = 47;
    ++*((_QWORD *)v44 + 4);
  }
  v46 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v47 = (void *)*((_QWORD *)v46 + 4);
  if (*((_QWORD *)v46 + 3) - (_QWORD)v47 > 0x20uLL)
  {
    qmemcpy(v47, " obj/fn/builtin macros expanded, ", 33);
    *((_QWORD *)v46 + 4) += 33;
  }
  else
  {
    llvm::raw_ostream::write(v46, " obj/fn/builtin macros expanded, ");
  }
  v48 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v49 = *((_QWORD *)v48 + 4);
  if ((unint64_t)(*((_QWORD *)v48 + 3) - v49) > 0x12)
  {
    *(_DWORD *)(v49 + 15) = 170813556;
    *(_OWORD *)v49 = *(_OWORD *)" on the fast path.\n";
    *((_QWORD *)v48 + 4) += 19;
  }
  else
  {
    v48 = (llvm::raw_ostream *)llvm::raw_ostream::write(v48, " on the fast path.\n");
  }
  llvm::errs(v48);
  v50 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v51 = (void *)*((_QWORD *)v50 + 4);
  if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 0x27uLL)
  {
    qmemcpy(v51, " token paste (##) operations performed, ", 40);
    *((_QWORD *)v50 + 4) += 40;
  }
  else
  {
    llvm::raw_ostream::write(v50, " token paste (##) operations performed, ");
  }
  v52 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v53 = *((_QWORD *)v52 + 4);
  if ((unint64_t)(*((_QWORD *)v52 + 3) - v53) > 0x12)
  {
    *(_DWORD *)(v53 + 15) = 170813556;
    *(_OWORD *)v53 = *(_OWORD *)" on the fast path.\n";
    *((_QWORD *)v52 + 4) += 19;
  }
  else
  {
    v52 = (llvm::raw_ostream *)llvm::raw_ostream::write(v52, " on the fast path.\n");
  }
  v54 = (llvm::raw_ostream *)llvm::errs(v52);
  v55 = (void *)*((_QWORD *)v54 + 4);
  if (*((_QWORD *)v54 + 3) - (_QWORD)v55 > 0x15uLL)
  {
    qmemcpy(v55, "\nPreprocessor Memory: ", 22);
    *((_QWORD *)v54 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v54, "\nPreprocessor Memory: ");
  }
  v56 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v56)
  {
    v57 = *(_QWORD *)(a1 + 144);
    v58 = v56 + 0x1FFFFFFFFFFFFFFFLL;
    v59 = (uint64x2_t)vdupq_n_s64(v58 & 0x1FFFFFFFFFFFFFFFLL);
    v60 = vdupq_n_s64(v57);
    v61 = (v58 & 0x1FFFFFFFFFFFFFFFLL) - (v58 & 1);
    v62 = 0uLL;
    v63 = -2;
    v64 = (uint64x2_t)vdupq_n_s64(0x1000uLL);
    do
    {
      v65 = (int64x2_t)v62;
      v66 = vmin_u32((uint32x2_t)(*(_QWORD *)&vshrn_n_s64(vaddq_s64(vsubq_s64(vdupq_n_s64(v57), v60), (int64x2_t)xmmword_22F44E360), 0xAuLL) & 0x1FFFFFF01FFFFFFLL), (uint32x2_t)0x1E0000001ELL);
      v67.i64[0] = v66.u32[0];
      v67.i64[1] = v66.u32[1];
      v62 = (int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v64, v67), v65);
      v57 += 16;
      v63 += 2;
    }
    while (v61 != v63);
    v68 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v63), (int8x16_t)xmmword_22F4555C0), v59), (int8x16_t)v65, v62));
  }
  else
  {
    v68 = 0;
  }
  v69 = *(unsigned int *)(a1 + 200);
  if ((_DWORD)v69)
  {
    v70 = 16 * v69;
    v71 = (uint64_t *)(*(_QWORD *)(a1 + 192) + 8);
    do
    {
      v72 = *v71;
      v71 += 2;
      v68 += v72;
      v70 -= 16;
    }
    while (v70);
  }
  v73 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v74 = (_DWORD *)*((_QWORD *)v73 + 4);
  if (*((_QWORD *)v73 + 3) - (_QWORD)v74 > 6uLL)
  {
    *(_DWORD *)((char *)v74 + 3) = 1818326127;
    *v74 = 1869881410;
    *((_QWORD *)v73 + 4) += 7;
  }
  else
  {
    v73 = (llvm::raw_ostream *)llvm::raw_ostream::write(v73, "B total");
  }
  v75 = (llvm::raw_ostream *)llvm::errs(v73);
  v76 = *((_QWORD *)v75 + 4);
  if ((unint64_t)(*((_QWORD *)v75 + 3) - v76) > 0xB)
  {
    *(_DWORD *)(v76 + 8) = 540701300;
    *(_QWORD *)v76 = *(_QWORD *)"\n  BumpPtr: ";
    *((_QWORD *)v75 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v75, "\n  BumpPtr: ");
  }
  v77 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v77)
  {
    v78 = *(_QWORD *)(a1 + 144);
    v79 = v77 + 0x1FFFFFFFFFFFFFFFLL;
    v80 = (uint64x2_t)vdupq_n_s64(v79 & 0x1FFFFFFFFFFFFFFFLL);
    v81 = vdupq_n_s64(v78);
    v82 = (v79 & 0x1FFFFFFFFFFFFFFFLL) - (v79 & 1);
    v83 = 0uLL;
    v84 = -2;
    v85 = (uint64x2_t)vdupq_n_s64(0x1000uLL);
    do
    {
      v86 = (int64x2_t)v83;
      v87 = vmin_u32((uint32x2_t)(*(_QWORD *)&vshrn_n_s64(vaddq_s64(vsubq_s64(vdupq_n_s64(v78), v81), (int64x2_t)xmmword_22F44E360), 0xAuLL) & 0x1FFFFFF01FFFFFFLL), (uint32x2_t)0x1E0000001ELL);
      v88.i64[0] = v87.u32[0];
      v88.i64[1] = v87.u32[1];
      v83 = (int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v85, v88), v86);
      v78 += 16;
      v84 += 2;
    }
    while (v82 != v84);
    v89 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v84), (int8x16_t)xmmword_22F4555C0), v80), (int8x16_t)v86, v83));
  }
  else
  {
    v89 = 0;
  }
  v90 = *(unsigned int *)(a1 + 200);
  if ((_DWORD)v90)
  {
    v91 = 16 * v90;
    v92 = (uint64_t *)(*(_QWORD *)(a1 + 192) + 8);
    do
    {
      v93 = *v92;
      v92 += 2;
      v89 += v93;
      v91 -= 16;
    }
    while (v91);
  }
  v94 = (llvm *)llvm::raw_ostream::operator<<();
  v95 = (llvm::raw_ostream *)llvm::errs(v94);
  v96 = (void *)*((_QWORD *)v95 + 4);
  if (*((_QWORD *)v95 + 3) - (_QWORD)v96 > 0x19uLL)
  {
    qmemcpy(v96, "\n  Macro Expanded Tokens: ", 26);
    *((_QWORD *)v95 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v95, "\n  Macro Expanded Tokens: ");
  }
  v97 = (llvm *)llvm::raw_ostream::operator<<();
  v98 = (llvm::raw_ostream *)llvm::errs(v97);
  v99 = (void *)*((_QWORD *)v98 + 4);
  if (*((_QWORD *)v98 + 3) - (_QWORD)v99 > 0x15uLL)
  {
    qmemcpy(v99, "\n  Predefines Buffer: ", 22);
    *((_QWORD *)v98 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v98, "\n  Predefines Buffer: ");
  }
  v100 = (llvm *)llvm::raw_ostream::operator<<();
  v101 = (llvm::raw_ostream *)llvm::errs(v100);
  v102 = *((_QWORD *)v101 + 4);
  if ((unint64_t)(*((_QWORD *)v101 + 3) - v102) > 0xA)
  {
    *(_DWORD *)(v102 + 7) = 540701551;
    *(_QWORD *)v102 = *(_QWORD *)"\n  Macros: ";
    *((_QWORD *)v101 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v101, "\n  Macros: ");
  }
  v103 = (llvm *)llvm::raw_ostream::operator<<();
  v104 = (llvm::raw_ostream *)llvm::errs(v103);
  v105 = (void *)*((_QWORD *)v104 + 4);
  if (*((_QWORD *)v104 + 3) - (_QWORD)v105 > 0x1BuLL)
  {
    qmemcpy(v105, "\n  #pragma push_macro Info: ", 28);
    *((_QWORD *)v104 + 4) += 28;
  }
  else
  {
    llvm::raw_ostream::write(v104, "\n  #pragma push_macro Info: ");
  }
  v106 = (llvm *)llvm::raw_ostream::operator<<();
  v107 = (llvm::raw_ostream *)llvm::errs(v106);
  v108 = *((_QWORD *)v107 + 4);
  if ((unint64_t)(*((_QWORD *)v107 + 3) - v108) > 0x12)
  {
    *(_DWORD *)(v108 + 15) = 540701550;
    *(_OWORD *)v108 = *(_OWORD *)"\n  Poison Reasons: ";
    *((_QWORD *)v107 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v107, "\n  Poison Reasons: ");
  }
  v109 = (llvm *)llvm::raw_ostream::operator<<();
  v110 = (llvm::raw_ostream *)llvm::errs(v109);
  v111 = (void *)*((_QWORD *)v110 + 4);
  if (*((_QWORD *)v110 + 3) - (_QWORD)v111 > 0x14uLL)
  {
    qmemcpy(v111, "\n  Comment Handlers: ", 21);
    *((_QWORD *)v110 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v110, "\n  Comment Handlers: ");
  }
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v113 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v113)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  *v113 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

_QWORD *sub_22F18DE84(uint64_t a1, int a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (v3)
    {
      v4 = *(_WORD *)(a1 + 536);
      if ((v4 & 0x80) == 0)
      {
        *(_WORD *)(a1 + 536) = v4 | 0x80;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)v15, *(void ***)(a1 + 1672));
  v5 = v15[0];
  v18 = v15[0];
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)v15, (void **)(*(_QWORD *)(a1 + 1672) + 8 * *(unsigned int *)(a1 + 1680)));
  v6 = v15[0];
  if (v5 != v15[0])
  {
    do
    {
      v7 = *(_DWORD **)(a1 + 1584);
      v16 = *(_QWORD *)(v5 + 8);
      v17 = 0;
      sub_22F415BD8(v7, &v16, &v17, (uint64_t)v15);
      if ((v17 & 4) != 0)
      {
        v8 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          sub_22E8BB820((_QWORD *)(v8 + 24));
          sub_22E8BB820((_QWORD *)(v8 + 8));
        }
      }
      llvm::FoldingSetIteratorImpl::advance((llvm::FoldingSetIteratorImpl *)&v18);
      v5 = v18;
    }
    while (v18 != v6);
  }
  v9 = *(_QWORD *)(a1 + 1584);
  v10 = *(_DWORD *)(v9 + 8);
  result = *(_QWORD **)v9;
  v12 = *(unsigned int *)(v9 + 16);
  v13 = &result[2 * v12];
  if (!v10)
    return v13;
  if ((_DWORD)v12)
  {
    v14 = 16 * v12;
    while ((*result | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      result += 2;
      v14 -= 16;
      if (!v14)
        return v13;
    }
  }
  return result;
}

uint64_t sub_22F18DFA4(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v27;
  uint64_t v28;

  v8 = sub_22F18DE84(a1, 1);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 120);
  if (v11)
  {
    v12 = *(_WORD *)(a1 + 536);
    if ((v12 & 0x80) == 0)
    {
      *(_WORD *)(a1 + 536) = v12 | 0x80;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = **(_QWORD **)(a1 + 1584) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 1584) + 16);
  if ((uint64_t *)v13 == v8)
    return 0;
  v14 = 0;
  v28 = 0;
  do
  {
    v15 = sub_22F41827C(v8[1], a2, *(_QWORD **)(a1 + 88));
    if (!v15)
      goto LABEL_26;
    v16 = v15[2];
    if (!v16 || (*(_WORD *)(v16 + 36) & 2) != 0 || a4 != *(_DWORD *)(v16 + 28))
      goto LABEL_26;
    if (!a4)
    {
LABEL_22:
      v24 = *((unsigned int *)v15 + 2);
      if (!v28
        || *((_DWORD *)v15 + 2)
        && (v27 = *((unsigned int *)v15 + 2), v25 = sub_22F1E3C34(*(_QWORD **)(a1 + 88), v28, v24), v24 = v27, v25))
      {
        v14 = *(_QWORD *)(*v8 + 16) + 16;
        v28 = v24;
      }
      goto LABEL_26;
    }
    v17 = (unsigned __int16 *)(*(_QWORD *)(v16 + 16) + 16);
    v18 = a3;
    while (1)
    {
      v19 = *v17;
      if (v19 != *v18)
        break;
      v20 = *((_QWORD *)v18 + 1);
      if (v20)
      {
        if (v19 - 7 < 6)
          break;
        v21 = v19 > 0x12;
        v22 = (1 << v19) & 0x7E002;
        v23 = v21 || v22 == 0;
        if (!v23 || v20 != *((_QWORD *)v17 - 1))
          break;
      }
      v17 += 12;
      v18 += 8;
      if (v18 == &a3[8 * a4])
        goto LABEL_22;
    }
LABEL_26:
    while (1)
    {
      v8 += 2;
      if (v8 == v10)
        break;
      if ((*v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_30;
    }
    v8 = v10;
LABEL_30:
    ;
  }
  while (v8 != (uint64_t *)v13);
  return v14;
}

uint64_t sub_22F18E170(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  int v8;
  __int16 v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v8 = *(unsigned __int16 *)(a2 + 16);
  v9 = *(_WORD *)(a2 + 18);
  if (v8 != 6 && (v8 - 7) >= 6 && (v9 & 0x40) == 0 && (v8 - 13) >= 6 && v8 != 1)
  {
    v15 = *(_QWORD *)(a2 + 8);
    if (v15)
      return *(_QWORD *)(v15 + 16) + 16;
  }
  if ((v9 & 8) != 0)
  {
    v12 = *(unsigned int *)(a2 + 4);
    v13 = a3[1];
    if (v13 != v12)
    {
      if (v13 <= v12)
      {
        if (a3[2] < v12)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v13 = a3[1];
        }
        if (v12 != v13)
          bzero((void *)(*a3 + v13), v12 - v13);
      }
      a3[1] = v12;
    }
  }
  v16 = *a3;
  sub_22F1414C0(a2, &v16, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), a4);
  return v16;
}

uint64_t sub_22F18E27C(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];

  *(_DWORD *)(a4 + 4) = a3;
  v13 = 0;
  result = sub_22F19144C(*(_DWORD **)(a1 + 96), a2, a3, &v13);
  if (a5)
  {
    v12 = *(_QWORD *)(a1 + 88);
    v14[0] = result | ((unint64_t)a5 << 32);
    v14[1] = a6 | 0x100000000;
    result = sub_22F1E1CA0(v12, v14, a3, 0, 0);
  }
  *(_DWORD *)a4 = result;
  if (*(unsigned __int16 *)(a4 + 16) - 6 <= 0xC)
    *(_QWORD *)(a4 + 8) = v13;
  return result;
}

uint64_t sub_22F18E328(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD v13[2];
  char v14;

  v6 = *(_QWORD **)(a1 + 88);
  v8 = a2;
  if ((a2 & 0x80000000) != 0)
    v8 = sub_22F1E238C(v6, a2);
  v9 = sub_22E677168((uint64_t)v6, v8);
  sub_22F1E1E78(v6, v9, (uint64_t)v13);
  if (!v14)
    return 0;
  v10 = v13[0];
  v13[0] = 0;
  v11 = sub_22F19144C(*(_DWORD **)(a1 + 96), (const void *)(v10 + HIDWORD(v9)), a3, v13);
  return sub_22F1E1D7C((uint64_t)v6, v11, a2, a2 + a3);
}

uint64_t sub_22F18E3E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  const void **v4;
  char v5;
  unint64_t v6;
  const void **v7;
  const void **v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v1 + 240) & 0xE0) == 0)
    return 0;
  v3 = *(uint64_t **)(a1 + 104);
  v4 = (const void **)(v1 + 496);
  v5 = *(_BYTE *)(v1 + 519);
  v7 = *(const void ***)(v1 + 496);
  v6 = *(_QWORD *)(v1 + 504);
  if (v5 >= 0)
    v8 = v4;
  else
    v8 = v7;
  if (v5 >= 0)
    v9 = v5 & 0x7F;
  else
    v9 = v6;
  return sub_22F138980(v3, v8, v9, 0, 1, 0);
}

uint64_t sub_22F18E430(unint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  size_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  _BOOL4 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  char v51;
  void *v52;
  size_t v53;
  size_t v54;
  unsigned __int8 *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  unsigned int v67[4];
  __int16 v68;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_DWORD *)(v2 + 344);
  if ((v3 & 0x80000000) == 0)
  {
    sub_22F172FA4(a1, *(_DWORD *)(v2 + 344), 0, 0, 0, 1);
    v4 = *(unsigned int *)(a1 + 896);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(a1 + 1008);
      v6 = *(_BYTE *)(a1 + 900);
      v7 = *(_QWORD *)(v5 + 144) + v4;
      if (v7 > *(_QWORD *)(v5 + 152))
        v7 = *(_QWORD *)(v5 + 152);
      *(_QWORD *)(v5 + 184) = v7;
      *(_BYTE *)(v5 + 192) = v6;
      *(_BYTE *)(v5 + 193) = v6;
    }
    v8 = sub_22E6155EC(*(_QWORD **)(a1 + 88), v3);
    if (v8)
    {
      *(_QWORD *)v67 = v8;
      sub_22F13B0E4(*(_QWORD **)(a1 + 104), v8);
      sub_22E67A2B0((_DWORD *)(a1 + 1592), v67, (uint64_t)&v62);
    }
  }
  v9 = *(_QWORD *)(a1 + 1096);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 24))(v9, a1);
  }
  else
  {
    v62 = "<built-in>";
    v66 = 259;
    llvm::MemoryBuffer::getMemBufferCopy();
    v11 = *(_QWORD **)(a1 + 88);
    v12 = *(_QWORD *)v67;
    *(_QWORD *)v67 = 0;
    v61 = v12;
    v10 = sub_22F1E1980(v11, &v61, 0, 0, 0, 0);
    v13 = v61;
    v61 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)v67;
    *(_QWORD *)v67 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  *(_DWORD *)(a1 + 2264) = v10;
  result = sub_22F172FA4(a1, v10, 0, 0, 0, 1);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(unsigned __int8 *)(v16 + 103);
  if (*(char *)(v16 + 103) < 0)
  {
    if (!*(_QWORD *)(v16 + 88))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(v16 + 103))
  {
    goto LABEL_26;
  }
  v20 = *(void **)(v16 + 80);
  v18 = (_QWORD *)(v16 + 80);
  v19 = v20;
  if ((v17 & 0x80u) == 0)
    v21 = v18;
  else
    v21 = v19;
  v22 = v18[1];
  if ((v17 & 0x80u) == 0)
    v23 = v17;
  else
    v23 = v22;
  v24 = sub_22F16569C(a1, 0, v21, v23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (!v24)
  {
    v26 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v26 + 312) = 0x48E00000000;
    if (*(char *)(v26 + 311) < 0)
    {
      **(_BYTE **)(v26 + 288) = 0;
      *(_QWORD *)(v26 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v26 + 288) = 0;
      *(_BYTE *)(v26 + 311) = 0;
    }
    v62 = (char *)(v26 + 320);
    v63 = 0;
    v64 = v26;
    v65 = 1;
    *(_BYTE *)(v26 + 320) = 0;
    *(_DWORD *)(v26 + 664) = 0;
    v32 = *(unsigned int *)(v26 + 776);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)(v26 + 768);
      v34 = 56 * v32;
      do
      {
        if (*(char *)(v33 + v34 - 9) < 0)
          operator delete(*(void **)(v33 + v34 - 32));
        v34 -= 56;
      }
      while (v34);
    }
    *(_DWORD *)(v26 + 776) = 0;
    v35 = *(_QWORD *)(a1 + 32);
    v38 = *(void **)(v35 + 80);
    v36 = v35 + 80;
    v37 = v38;
    v39 = *(_BYTE *)(v36 + 23);
    if (v39 >= 0)
      v40 = (void *)v36;
    else
      v40 = v37;
    v41 = *(_QWORD *)(v36 + 8);
    if (v39 >= 0)
      v42 = v39 & 0x7F;
    else
      v42 = v41;
    sub_22E3B89A8((unsigned __int8 **)&v62, v40, v42);
    return sub_22E3BB0B8((uint64_t)&v62);
  }
  result = sub_22F1E170C(*(_QWORD *)(a1 + 88), v24, 0, 0, 0, 0);
  *(_DWORD *)(a1 + 2268) = result;
LABEL_26:
  if (*(_DWORD *)(a1 + 740) == 1)
    return result;
  v25 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v25 + 103) < 0)
  {
    if (!*(_QWORD *)(v25 + 88))
      goto LABEL_36;
  }
  else if (!*(_BYTE *)(v25 + 103))
  {
    goto LABEL_36;
  }
  if (*(_DWORD *)(a1 + 2268) && *(_BYTE *)(a1 + 2273))
  {
    v27 = 0;
    v28 = *(_BYTE *)(a1 + 2272) == 0;
    goto LABEL_39;
  }
LABEL_36:
  if (*(_BYTE *)(v25 + 74) && *(_BYTE *)(a1 + 2272))
  {
    v28 = 0;
    v27 = *(_BYTE *)(a1 + 2273) == 0;
LABEL_39:
    while (1)
    {
      result = *(_QWORD *)(a1 + 1008);
      v29 = result && *(_DWORD *)(result + 16) == *(_DWORD *)(a1 + 2264);
      switch(*(_DWORD *)(a1 + 1048))
      {
        case 0:
          result = sub_22F14651C((_BYTE *)result, (uint64_t)v67);
          break;
        case 1:
          result = sub_22F1936D4(*(_QWORD *)(a1 + 1040), v67);
          break;
        case 2:
          result = sub_22F162B44(a1, (unint64_t)v67);
          break;
        case 3:
          result = sub_22F14943C(result, (uint64_t)v67);
          break;
        case 4:
          result = sub_22F18E9BC(a1, (uint64_t)v67);
          break;
        default:
          break;
      }
      if (v68 == 1 && !v29)
        break;
      if (!v27 && !*(_BYTE *)(a1 + 2273) || !v28 && !*(_BYTE *)(a1 + 2272))
        return result;
    }
    if (v27)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 75))
        return result;
      v31 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v31 + 312) = 0x48B00000000;
      if (*(char *)(v31 + 311) < 0)
      {
        **(_BYTE **)(v31 + 288) = 0;
        *(_QWORD *)(v31 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v31 + 288) = 0;
        *(_BYTE *)(v31 + 311) = 0;
      }
      v62 = (char *)(v31 + 320);
      v63 = 0;
      v64 = v31;
      v65 = 1;
      *(_BYTE *)(v31 + 320) = 0;
      *(_DWORD *)(v31 + 664) = 0;
      v58 = *(unsigned int *)(v31 + 776);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(v31 + 768);
        v60 = 56 * v58;
        do
        {
          if (*(char *)(v59 + v60 - 9) < 0)
            operator delete(*(void **)(v59 + v60 - 32));
          v60 -= 56;
        }
        while (v60);
      }
      *(_DWORD *)(v31 + 776) = 0;
    }
    else
    {
      v43 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v43 + 312) = 0x48F00000000;
      if (*(char *)(v43 + 311) < 0)
      {
        **(_BYTE **)(v43 + 288) = 0;
        *(_QWORD *)(v43 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v43 + 288) = 0;
        *(_BYTE *)(v43 + 311) = 0;
      }
      v62 = (char *)(v43 + 320);
      v63 = 0;
      v64 = v43;
      v65 = 1;
      *(_BYTE *)(v43 + 320) = 0;
      *(_DWORD *)(v43 + 664) = 0;
      v44 = *(unsigned int *)(v43 + 776);
      if ((_DWORD)v44)
      {
        v45 = *(_QWORD *)(v43 + 768);
        v46 = 56 * v44;
        do
        {
          if (*(char *)(v45 + v46 - 9) < 0)
            operator delete(*(void **)(v45 + v46 - 32));
          v46 -= 56;
        }
        while (v46);
      }
      *(_DWORD *)(v43 + 776) = 0;
      v47 = *(_QWORD *)(a1 + 32);
      v50 = *(void **)(v47 + 80);
      v48 = v47 + 80;
      v49 = v50;
      v51 = *(_BYTE *)(v48 + 23);
      if (v51 >= 0)
        v52 = (void *)v48;
      else
        v52 = v49;
      v53 = *(_QWORD *)(v48 + 8);
      if (v51 >= 0)
        v54 = v51 & 0x7F;
      else
        v54 = v53;
      sub_22E3B89A8((unsigned __int8 **)&v62, v52, v54);
      v55 = (unsigned __int8 *)v62;
      if (!v62)
      {
        v55 = (unsigned __int8 *)sub_22E3B8AAC(v63);
        v62 = (char *)v55;
      }
      v55[*v55 + 1] = 2;
      v56 = v62;
      v57 = *v62;
      *v62 = v57 + 1;
      *(_QWORD *)&v56[8 * v57 + 16] = 1;
    }
    return sub_22E3BB0B8((uint64_t)&v62);
  }
  return result;
}

BOOL sub_22F18E9BC(unint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _BOOL8 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type size;
  uint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  BOOL v33;
  std::string *p_p;
  size_t v35;
  size_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  void *v59;
  uint64_t v60;
  size_t v61;
  _BYTE *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  void *v67;
  std::string __p;
  _QWORD v70[3];
  __int16 v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[97];

  v2 = (char *)a2;
  v74[96] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 1008);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 224))
      v5 = 3;
    else
      v5 = 0;
  }
  else if (*(_QWORD *)(a1 + 1040))
  {
    v5 = 1;
  }
  else
  {
    v5 = 2;
  }
  *(_DWORD *)(a1 + 1048) = v5;
  if (!*(_DWORD *)(a1 + 784) && (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x800000000000) != 0)
  {
    v11 = 1;
    if ((sub_22F18FE0C(a1, a2, 1) & 1) != 0)
      return v11;
  }
  else
  {
    sub_22F18FB4C(a1, a2);
  }
  v72 = v74;
  v73 = 0x2000000000;
  v6 = *((unsigned __int16 *)v2 + 8);
  if (v6 == 15)
  {
    v21 = sub_22E4EF088((uint64_t)&v72, (unint64_t)v2, 1);
    v22 = (char *)v72 + 24 * v73;
    v23 = *(_OWORD *)v21;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v21 + 16);
    *(_OWORD *)v22 = v23;
    LODWORD(v73) = v73 + 1;
    sub_22F418560(a1, (unint64_t)&v72);
    v24 = v72;
    v25 = v73;
    v26 = (char *)v72 + 24 * v73;
    if (*((_WORD *)v26 - 4) != 62)
    {
      v29 = (void *)operator new[]();
      bzero(v29, 24 * v25);
      if ((_DWORD)v25)
        memmove(v29, v24, 24 * v25);
      v30 = a1;
      v31 = v29;
      goto LABEL_85;
    }
    v27 = *((_DWORD *)v26 - 6);
    if ((v27 & 0x80000000) != 0)
    {
      v28 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v28 + 312) = v27;
      *(_DWORD *)(v28 + 316) = 1045;
      if (*(char *)(v28 + 311) < 0)
      {
        **(_BYTE **)(v28 + 288) = 0;
        *(_QWORD *)(v28 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v28 + 288) = 0;
        *(_BYTE *)(v28 + 311) = 0;
      }
      v70[0] = v28 + 320;
      v70[1] = 0;
      v70[2] = v28;
      v71 = 1;
      *(_BYTE *)(v28 + 320) = 0;
      *(_DWORD *)(v28 + 664) = 0;
      v51 = *(unsigned int *)(v28 + 776);
      if ((_DWORD)v51)
      {
        v52 = *(_QWORD *)(v28 + 768);
        v53 = 56 * v51;
        do
        {
          if (*(char *)(v52 + v53 - 9) < 0)
            operator delete(*(void **)(v52 + v53 - 32));
          v53 -= 56;
        }
        while (v53);
      }
      *(_DWORD *)(v28 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v70);
    }
    v54 = *(_DWORD *)(a1 + 772);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 173;
    __p.__r_.__value_.__r.__words[0] = v54 | 0x600000000;
    __p.__r_.__value_.__l.__size_ = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "import", 6uLL);
    v55 = sub_22F16BDD4(a1, 0, (unsigned int *)&__p, (uint64_t)v72, v27, 0, 0, 0);
    v57 = v56;
    if ((v55 - 2) >= 2)
    {
      if (v55 == 4)
      {
        *((_WORD *)v2 + 8) = 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 184) = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 152);
        v59 = v72;
        v60 = v73;
        v61 = 24 * v73;
        v62 = (_BYTE *)operator new[]();
        bzero(v62, v61);
        if ((_DWORD)v60)
          memmove(v62, v59, v61);
        v11 = 1;
        sub_22F1735E4(a1, v62, v60, 1, 1, 0);
        goto LABEL_87;
      }
      if (v55 != 1)
      {
        v58 = v72;
LABEL_82:
        v25 = v73;
        v66 = 24 * v73;
        v67 = (void *)operator new[]();
        bzero(v67, v66);
        if ((_DWORD)v25)
          memmove(v67, v58, v66);
        v30 = a1;
        v31 = v67;
LABEL_85:
        v64 = v25;
LABEL_86:
        sub_22F1735E4(v30, v31, v64, 1, 1, 0);
        v11 = 0;
        goto LABEL_87;
      }
      sub_22F418628((unint64_t)&v72);
      v65 = (char *)v72 + 24 * v73;
      *((_DWORD *)v65 - 2) = 437;
      *((_DWORD *)v65 - 6) = v27;
      *((_DWORD *)v65 - 5) = v27;
      *((_QWORD *)v65 - 2) = v57;
    }
    v58 = v72;
    *((_WORD *)v72 + 8) = 439;
    v58[1] = *v58;
    *((_QWORD *)v58 + 1) = v57;
    goto LABEL_82;
  }
  if (v6 == 5 && *(_BYTE *)(a1 + 836))
  {
    v7 = *((_QWORD *)v2 + 1);
    v8 = *(unsigned int *)v2;
    v9 = *(_DWORD *)(a1 + 784);
    if (v9 >= *(_DWORD *)(a1 + 788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a1 + 784);
    }
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 776) + 16 * v9);
    *v10 = v7;
    v10[1] = v8;
    ++*(_DWORD *)(a1 + 784);
    *(_BYTE *)(a1 + 836) = 0;
    *(_DWORD *)(a1 + 1048) = 4;
    v11 = 1;
    goto LABEL_87;
  }
  if (v6 == 25 && !*(_BYTE *)(a1 + 836))
  {
    v11 = 1;
    *(_BYTE *)(a1 + 836) = 1;
    *(_DWORD *)(a1 + 1048) = 4;
    goto LABEL_87;
  }
  v11 = 1;
  if (v6 != 1 && *(_DWORD *)(a1 + 784))
  {
    if (v6 == 62)
    {
LABEL_23:
      v12 = *(_DWORD *)v2;
      memset(&__p, 0, sizeof(__p));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 20);
      if ((v13 & 0xC00000000000) != 0)
      {
        v14 = *(uint64_t **)(a1 + 776);
        v15 = *(unsigned int *)(a1 + 784);
        if ((_DWORD)v15)
        {
          v16 = 16 * v15;
          do
          {
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            if (size)
              std::string::append(&__p, ".");
            v18 = *v14;
            v14 += 2;
            std::string::append(&__p, (const std::string::value_type *)(*(_QWORD *)(v18 + 16) + 16), **(unsigned int **)(v18 + 16));
            v16 -= 16;
          }
          while (v16);
          v14 = *(uint64_t **)(a1 + 776);
          LOBYTE(v15) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
          v19 = __p.__r_.__value_.__l.__size_;
          v20 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v19 = 0;
          v20 = 0;
        }
        v32 = *((unsigned int *)v14 + 2);
        *(_DWORD *)(a1 + 784) = 0;
        v33 = (v15 & 0x80u) != 0;
        if ((v15 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)v20;
        v35 = v15 & 0x7F;
        if (v33)
          v36 = v19;
        else
          v36 = v35;
        v37 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), p_p, v36);
        v38 = *(_DWORD *)(a1 + 784);
        if (v38 >= *(_DWORD *)(a1 + 788))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = *(_DWORD *)(a1 + 784);
        }
        v39 = (uint64_t *)(*(_QWORD *)(a1 + 776) + 16 * v38);
        *v39 = v37;
        v39[1] = v32;
        ++*(_DWORD *)(a1 + 784);
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 20);
      }
      if ((v13 & 0x200000000000) != 0)
      {
        v40 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 16))(*(_QWORD *)(a1 + 112), *(unsigned int *)(a1 + 772), *(_QWORD *)(a1 + 776), *(unsigned int *)(a1 + 784), 0, 0) & 0xFFFFFFFFFFFFFFF8;
        if (v40)
          sub_22F190280(a1, v40, v12);
      }
      else
      {
        v40 = 0;
      }
      v41 = *(_QWORD *)(a1 + 1088);
      if (v41)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, unint64_t))(*(_QWORD *)v41 + 64))(v41, *(unsigned int *)(a1 + 772), *(_QWORD *)(a1 + 776), *(unsigned int *)(a1 + 784), v40);
      v42 = v73;
      v11 = (_DWORD)v73 == 0;
      if ((_DWORD)v73)
      {
        v43 = v72;
        v44 = (_BYTE *)operator new[]();
        memmove(v44, v43, 24 * v42);
        sub_22F1735E4(a1, v44, v42, 1, 1, 0);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_87;
    }
    v45 = sub_22E4EF088((uint64_t)&v72, (unint64_t)v2, 1);
    v46 = (char *)v72 + 24 * v73;
    v47 = *(_OWORD *)v45;
    *((_QWORD *)v46 + 2) = *(_QWORD *)(v45 + 16);
    *(_OWORD *)v46 = v47;
    LODWORD(v73) = v73 + 1;
    sub_22F418560(a1, (unint64_t)&v72);
    v48 = v72;
    v49 = v73;
    v50 = (char *)v72 + 24 * v73;
    if (*((_WORD *)v50 - 4) == 62)
    {
      v2 = v50 - 24;
      goto LABEL_23;
    }
    v63 = (void *)operator new[]();
    bzero(v63, 24 * v49);
    if ((_DWORD)v49)
      memmove(v63, v48, 24 * v49);
    v30 = a1;
    v31 = v63;
    v64 = v49;
    goto LABEL_86;
  }
LABEL_87:
  if (v72 != v74)
    free(v72);
  return v11;
}

_WORD *sub_22F18F0FC(uint64_t a1, uint64_t a2)
{
  _WORD *result;
  char **v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  _BYTE v10[64];
  void *v11;
  __int128 v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a2 + 18) & 0x48) != 0)
  {
    v11 = v13;
    v12 = xmmword_22F44E300;
    v6 = (unsigned __int8 *)sub_22F18E170(a1, a2, (uint64_t *)&v11, 0);
    if ((*(_WORD *)(a2 + 18) & 0x40) != 0)
    {
      v8 = v10;
      v9 = xmmword_22F44E300;
      sub_22F411C48((uint64_t)&v8, v6, v5);
      v7 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), v8, v9);
      if (v8 != v10)
        free(v8);
    }
    else
    {
      v7 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), v6, (size_t)v5);
    }
    if (v11 != v13)
      free(v11);
    result = (_WORD *)v7;
  }
  else
  {
    result = (_WORD *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), *(const void **)(a2 + 8), *(unsigned int *)(a2 + 4));
  }
  *(_QWORD *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = *result & 0x1FF;
  return result;
}

uint64_t sub_22F18F23C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  __int16 v24;
  _QWORD v25[3];
  __int16 v26;
  uint64_t v27;

  v4 = (uint64_t *)(a1 + 2888);
  v5 = *(unsigned __int16 *)(a2 + 16);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v21 = 0;
  else
    v21 = *(_QWORD *)(a2 + 8);
  v27 = v21;
  v23[0] = 0;
  if (!sub_22F246C54(v4, &v27, v23)
    || v23[0] == *(_QWORD *)(a1 + 2888) + 16 * *(unsigned int *)(a1 + 2904))
  {
    v9 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v9 + 316) = 1171;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v25[0] = v9 + 320;
    v25[1] = 0;
    v25[2] = v9;
    v26 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v10 = *(unsigned int *)(v9 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v9 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
    }
    *(_DWORD *)(v9 + 776) = 0;
    v13 = v25;
  }
  else
  {
    v7 = *(_DWORD *)(v23[0] + 8);
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v8 + 316) = v7;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v23[0] = v8 + 320;
    v23[1] = 0;
    v23[2] = v8;
    v24 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v14 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v8 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
    }
    *(_DWORD *)(v8 + 776) = 0;
    v17 = *(unsigned __int16 *)(a2 + 16);
    if ((v17 - 7) < 6 || ((v17 - 13) >= 6 ? (v18 = v17 == 1) : (v18 = 1), v18))
      v22 = 0;
    else
      v22 = *(_QWORD *)(a2 + 8);
    v19 = *(unsigned __int8 *)(v8 + 320);
    *(_BYTE *)(v8 + 320 + v19 + 1) = 5;
    *(_BYTE *)(v8 + 320) = v19 + 1;
    *(_QWORD *)(v8 + 320 + 8 * v19 + 16) = v22;
    v13 = v23;
  }
  return sub_22E3BB0B8((uint64_t)v13);
}

uint64_t sub_22F18F434(unint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  __int16 v16;
  __int16 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int v31;
  BOOL v32;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  __int16 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  _QWORD v58[3];
  __int16 v59;

  v4 = *(unsigned __int16 *)(a2 + 16);
  if ((v4 - 7) < 6 || ((v4 - 13) >= 6 ? (v5 = v4 == 1) : (v5 = 1), v5))
    v20 = 0;
  else
    v20 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)v20;
  if ((*(_QWORD *)v20 & 0x800000000) != 0)
  {
    if (v20 == *(_QWORD *)(a1 + 320) || v20 == *(_QWORD *)(a1 + 328))
    {
      v8 = (v6 >> 29) & 1;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      LODWORD(v8) = 0;
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120), v20);
    *(_WORD *)(a2 + 16) = *(_WORD *)v20 & 0x1FF;
    v6 = *(_QWORD *)v20;
    if (v7)
    {
      v9 = 0x20000000;
      if (!(_DWORD)v8)
        v9 = 0;
      v10 = v6 & 0xFFFFFFFFDFFFFFFFLL | v9;
      v11 = (v6 >> 5) & 0x80000000;
      if ((v10 & 0x83A000000) != 0)
        v11 = 0x80000000;
      v6 = v11 | v10 & 0xFFFFFFFF7FFFFFFFLL;
      v12 = v10 | 0x80000000;
      if ((_DWORD)v8)
        v6 = v12;
      *(_QWORD *)v20 = v6;
    }
  }
  if ((v6 & 0x20000000) != 0 && *(_QWORD *)(a1 + 1016))
    sub_22F18F23C(a1, a2);
  sub_22E6D719C(a1, (llvm *)v20, (uint64_t *)&v54);
  if (v54 <= 7 && !v56)
    goto LABEL_50;
  if (v56)
  {
    v13 = (uint64_t *)(*(_QWORD *)(v55 + 8 * v56 - 8) + 16);
LABEL_28:
    v14 = *v13;
    goto LABEL_33;
  }
  if ((v54 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v15 = sub_22F14FEA4((uint64_t *)(v54 & 0xFFFFFFFFFFFFFFF8));
    if (v15)
    {
      v13 = v15 + 2;
      goto LABEL_28;
    }
  }
  v14 = 0;
LABEL_33:
  if ((*(_WORD *)(a1 + 536) & 0x20) == 0)
  {
    v16 = *(_WORD *)(a2 + 18);
    if ((v16 & 4) != 0 || (v17 = *(_WORD *)(v14 + 36), (v17 & 0x40) != 0))
    {
      *(_WORD *)(a2 + 18) = v16 | 4;
      if ((*(_BYTE *)(v14 + 36) & 2) == 0 || sub_22F1776A8((_QWORD *)a1))
      {
        v19 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v19 + 312) = *(_DWORD *)a2;
        *(_DWORD *)(v19 + 316) = 1263;
        if (*(char *)(v19 + 311) < 0)
        {
          **(_BYTE **)(v19 + 288) = 0;
          *(_QWORD *)(v19 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v19 + 288) = 0;
          *(_BYTE *)(v19 + 311) = 0;
        }
        v58[0] = v19 + 320;
        v58[1] = 0;
        v58[2] = v19;
        v59 = 1;
        *(_BYTE *)(v19 + 320) = 0;
        *(_DWORD *)(v19 + 664) = 0;
        v21 = *(unsigned int *)(v19 + 776);
        if ((_DWORD)v21)
        {
          v22 = *(_QWORD *)(v19 + 768);
          v23 = 56 * v21;
          do
          {
            if (*(char *)(v22 + v23 - 9) < 0)
              operator delete(*(void **)(v22 + v23 - 32));
            v23 -= 56;
          }
          while (v23);
        }
        *(_DWORD *)(v19 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v58);
      }
    }
    else if ((v17 & 2) == 0 || sub_22F1776A8((_QWORD *)a1))
    {
      return sub_22F17776C(a1, a2, &v54);
    }
  }
LABEL_50:
  v24 = *(_QWORD *)v20;
  if ((*(_QWORD *)v20 & 0x10000000) != 0 && (*(_WORD *)(a1 + 536) & 0x20) == 0)
  {
    v25 = *(unsigned int **)(v20 + 16);
    v26 = *v25;
    if (v26 == 7)
    {
      v27 = v25[4] == 1734962273 && *(unsigned int *)((char *)v25 + 19) == 1935765095;
      if (v27
        || (v25[4] == 1734962273 ? (v28 = *(unsigned int *)((char *)v25 + 19) == 1718578791) : (v28 = 0),
            v28 || (v25[4] == 1819047278 ? (v29 = *(unsigned int *)((char *)v25 + 19) == 1920233580) : (v29 = 0), v29)))
      {
LABEL_105:
        v31 = 1296;
      }
      else
      {
        v30 = v25[4] == 1668181859 && *(unsigned int *)((char *)v25 + 19) == 1953523043;
        v31 = 1302;
        if (!v30)
        {
          v32 = (v25[4] ^ 0x72616863 | *(unsigned int *)((char *)v25 + 19) ^ 0x745F3872) == 0;
LABEL_92:
          if (v32)
            v31 = 1302;
          else
            v31 = 0;
        }
      }
    }
    else
    {
      switch((int)v26)
      {
        case 8:
          if (*((_QWORD *)v25 + 2) == 0x745F363172616863
            || *((_QWORD *)v25 + 2) == 0x745F323372616863
            || *((_QWORD *)v25 + 2) == 0x657079746C636564
            || *((_QWORD *)v25 + 2) == 0x7470656378656F6ELL)
          {
            goto LABEL_105;
          }
          if (*((_QWORD *)v25 + 2) != 0x7365726975716572
            && *((_QWORD *)v25 + 2) != 0x74696177615F6F63
            && *((_QWORD *)v25 + 2) != 0x646C6569795F6F63)
          {
            goto LABEL_99;
          }
          goto LABEL_138;
        case 9:
          if (*((_QWORD *)v25 + 2) == 0x70786574736E6F63 && *((_BYTE *)v25 + 24) == 114)
            goto LABEL_105;
          if (*((_QWORD *)v25 + 2) == 0x72757465725F6F63 && *((_BYTE *)v25 + 24) == 110)
          {
LABEL_138:
            v31 = 1302;
          }
          else
          {
            v35 = *((_QWORD *)v25 + 2) == 0x61766574736E6F63 && *((_BYTE *)v25 + 24) == 108;
            v31 = 1302;
            if (!v35)
            {
              v32 = (*((_QWORD *)v25 + 2) ^ 0x696E6974736E6F63 | *((unsigned __int8 *)v25 + 24) ^ 0x74) == 0;
              goto LABEL_92;
            }
          }
          break;
        case 12:
          v36 = *((_QWORD *)v25 + 2);
          v37 = v25[6];
          if (v36 == 0x6C5F646165726874 && v37 == 1818321775)
            goto LABEL_105;
          goto LABEL_99;
        case 13:
          v39 = *((_QWORD *)v25 + 2);
          v40 = *(_QWORD *)((char *)v25 + 21);
          if (v39 == 0x615F636974617473 && v40 == 0x7472657373615F63)
            goto LABEL_105;
          goto LABEL_99;
        default:
LABEL_99:
          v31 = 0;
          break;
      }
    }
    v42 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v42 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v42 + 316) = v31;
    if (*(char *)(v42 + 311) < 0)
    {
      **(_BYTE **)(v42 + 288) = 0;
      *(_QWORD *)(v42 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v42 + 288) = 0;
      *(_BYTE *)(v42 + 311) = 0;
    }
    v54 = v42 + 320;
    v55 = 0;
    v56 = v42;
    v57 = 1;
    *(_BYTE *)(v42 + 320) = 0;
    *(_DWORD *)(v42 + 664) = 0;
    v43 = *(unsigned int *)(v42 + 776);
    if ((_DWORD)v43)
    {
      v44 = *(_QWORD *)(v42 + 768);
      v45 = 56 * v43;
      do
      {
        if (*(char *)(v44 + v45 - 9) < 0)
          operator delete(*(void **)(v44 + v45 - 32));
        v45 -= 56;
      }
      while (v45);
    }
    *(_DWORD *)(v42 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&v54, (void *)(*(_QWORD *)(v20 + 16) + 16), **(unsigned int **)(v20 + 16));
    sub_22E3BB0B8((uint64_t)&v54);
    v46 = (*(_QWORD *)v20 >> 5) & 0x80000000;
    if ((*(_QWORD *)v20 & 0x82A000000) != 0)
      v46 = 0x80000000;
    v24 = v46 | *(_QWORD *)v20 & 0xFFFFFFFF6FFFFFFFLL;
    *(_QWORD *)v20 = v24;
  }
  if ((v24 & 0x8000000) != 0 && (*(_WORD *)(a1 + 536) & 0x20) == 0)
  {
    v47 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v47 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v47 + 316) = 1239;
    if (*(char *)(v47 + 311) < 0)
    {
      **(_BYTE **)(v47 + 288) = 0;
      *(_QWORD *)(v47 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v47 + 288) = 0;
      *(_BYTE *)(v47 + 311) = 0;
    }
    v52[0] = v47 + 320;
    v52[1] = 0;
    v52[2] = v47;
    v53 = 1;
    *(_BYTE *)(v47 + 320) = 0;
    *(_DWORD *)(v47 + 664) = 0;
    v48 = *(unsigned int *)(v47 + 776);
    if ((_DWORD)v48)
    {
      v49 = *(_QWORD *)(v47 + 768);
      v50 = 56 * v48;
      do
      {
        if (*(char *)(v49 + v50 - 9) < 0)
          operator delete(*(void **)(v49 + v50 - 32));
        v50 -= 56;
      }
      while (v50);
    }
    *(_DWORD *)(v47 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v52);
  }
  if ((!*(_BYTE *)(a1 + 824) || (*(_BYTE *)(v20 + 4) & 0x10) == 0) && *(_WORD *)(a2 + 16) != 173)
    return 1;
  if ((*(_WORD *)(a1 + 536) & 0x28) != 0)
    return 1;
  v51 = *(_QWORD *)(a1 + 56);
  if ((*(_QWORD *)(v51 + 20) & 0x200000000000) == 0 && (*(_QWORD *)(v51 + 140) & 0x20000000000000) == 0)
    return 1;
  result = 1;
  if (*(_DWORD *)(a1 + 1048) != 2)
  {
    *(_DWORD *)(a1 + 772) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 784) = 0;
    *(_BYTE *)(a1 + 836) = 1;
    *(_DWORD *)(a1 + 1048) = 4;
  }
  return result;
}

uint64_t sub_22F18FB4C(unint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;

  v3 = a1;
  ++*(_DWORD *)(a1 + 908);
  while (2)
  {
    switch(*(_DWORD *)(v3 + 1048))
    {
      case 0:
        result = sub_22F14651C(*(_QWORD *)(v3 + 1008), a2);
        if ((result & 1) == 0)
          continue;
        break;
      case 1:
        result = sub_22F1936D4(*(_QWORD *)(v3 + 1040), a2);
        if ((result & 1) == 0)
          continue;
        break;
      case 2:
        result = sub_22F162B44(v3, (unint64_t)a2);
        break;
      case 3:
        result = sub_22F14943C(*(_QWORD *)(v3 + 1008), (uint64_t)a2);
        if ((result & 1) == 0)
          continue;
        break;
      case 4:
        result = sub_22F18E9BC(v3, (uint64_t)a2);
        if (!(_DWORD)result)
          continue;
        break;
      default:
        continue;
    }
    break;
  }
  if (*((_WORD *)a2 + 8) == 3)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (v5)
    {
      *(_QWORD *)(v3 + 872) = v5;
      *(_QWORD *)(v3 + 880) = *a2 | ((unint64_t)(a2[1] + *a2) << 32);
      *((_QWORD *)a2 + 1) = 0;
    }
  }
  else if (!*((_WORD *)a2 + 8) && *(_BYTE *)(*(_QWORD *)(v3 + 112) + 9))
  {
    return result;
  }
  v6 = *(_DWORD *)(v3 + 908);
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 56) + 20) & 0x800000000000) != 0
    && v6 == 1
    && (*((_WORD *)a2 + 9) & 0x800) == 0)
  {
    v7 = *((unsigned __int16 *)a2 + 8);
    if (v7 <= 0x3D)
    {
      switch(*((_WORD *)a2 + 8))
      {
        case 5:
          if ((*(_BYTE *)(*((_QWORD *)a2 + 1) + 4) & 0x10) == 0)
            goto LABEL_34;
          v9 = *(_DWORD *)(v3 + 828);
          if (v9 <= 0xFFFFFFFD)
            goto LABEL_46;
          *(_DWORD *)(v3 + 828) = -3;
          *(_DWORD *)(v3 + 772) = *a2;
          *(_DWORD *)(v3 + 784) = 0;
          *(_BYTE *)(v3 + 836) = 1;
          *(_DWORD *)(v3 + 1048) = 4;
          goto LABEL_48;
        case 0xF:
          goto LABEL_27;
        case 0x13:
        case 0x15:
        case 0x17:
          v8 = (*(_DWORD *)(v3 + 828) & ~(*(int *)(v3 + 828) >> 31)) + 1;
          goto LABEL_32;
        case 0x14:
        case 0x16:
          v10 = *(_DWORD *)(v3 + 828);
          if (v10 <= 1)
            v10 = 1;
          v8 = v10 - 1;
          goto LABEL_32;
        case 0x18:
          v11 = *(_DWORD *)(v3 + 828);
          if (v11 <= 1)
            v11 = 1;
          v12 = v11 - 1;
          *(_DWORD *)(v3 + 828) = v12;
          if (v12 || *(_BYTE *)(v3 + 832))
            goto LABEL_48;
          v8 = -1;
          goto LABEL_32;
        default:
          goto LABEL_34;
      }
    }
    switch(v7)
    {
      case 0x3Eu:
        if (*(int *)(v3 + 828) <= 0)
        {
          *(_DWORD *)(v3 + 828) = -1;
          *(_BYTE *)(v3 + 832) = 0;
        }
        goto LABEL_48;
      case 0x87u:
        v9 = *(_DWORD *)(v3 + 828);
        if (v9 == -1)
        {
          v8 = -2;
LABEL_32:
          *(_DWORD *)(v3 + 828) = v8;
          goto LABEL_48;
        }
        break;
      case 0x1B7u:
LABEL_27:
        v9 = *(_DWORD *)(v3 + 828);
        if (v9 == -3)
        {
          *(_BYTE *)(v3 + 832) = 1;
LABEL_47:
          *(_DWORD *)(v3 + 828) = 0;
          goto LABEL_48;
        }
        break;
      default:
LABEL_34:
        v9 = *(_DWORD *)(v3 + 828);
        break;
    }
LABEL_46:
    if (v9 <= 0)
      goto LABEL_47;
  }
LABEL_48:
  *(_BYTE *)(v3 + 824) = *((unsigned __int16 *)a2 + 8) == 72;
  v13 = v6 - 1;
  *(_DWORD *)(v3 + 908) = v13;
  if (v13)
  {
    if (!*(_BYTE *)(v3 + 916) || (*((_WORD *)a2 + 9) & 0x800) != 0)
      return result;
  }
  else
  {
    if ((*((_WORD *)a2 + 9) & 0x800) != 0)
      return result;
    ++*(_DWORD *)(v3 + 912);
  }
  v14 = *(_QWORD *)(v3 + 24);
  if (v14 >= 8)
  {
    if ((v14 & 2) == 0)
      v3 = *(_QWORD *)v3;
    return (*(uint64_t (**)(unint64_t, unsigned int *))(v14 & 0xFFFFFFFFFFFFFFF8))(v3, a2);
  }
  return result;
}

uint64_t sub_22F18FE0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  BOOL v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__src;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  void *v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 1016);
  if (v6)
    sub_22F191400(v6, a2);
  else
    sub_22F18FB4C(a1, a2);
  v42 = v44;
  v43 = xmmword_22F44E310;
  v7 = *(unsigned __int16 *)(a2 + 16);
  if (v7 != 46 || a3 == 0)
  {
    v9 = v7 != 13 || a3 == 0;
    if (!v9
      && (v10 = (_BYTE *)sub_22F18E170(a1, a2, (uint64_t *)&v42, 0), v11 >= 2)
      && *v10 == 34
      && v10[v11 - 1] == 34)
    {
      v12 = 0;
      *(_WORD *)(a2 + 16) = 15;
    }
    else
    {
LABEL_45:
      v12 = 0;
    }
  }
  else
  {
    v13 = *(_WORD *)(a2 + 18);
    v14 = *(_DWORD *)a2;
    v44[0] = 60;
    *(_QWORD *)&v43 = 1;
    while (1)
    {
      sub_22F18FB4C(a1, a2);
      v15 = *(unsigned __int16 *)(a2 + 16);
      if ((v15 - 1) <= 1)
        break;
      v16 = *(_DWORD *)a2;
      if (v15 == 3)
      {
        *(_BYTE *)(a1 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 6) = 1;
        sub_22F18FB4C(a1, a2);
      }
      else
      {
        v17 = v43;
        if ((*(_WORD *)(a2 + 18) & 2) != 0)
        {
          if ((unint64_t)(v43 + 1) > *((_QWORD *)&v43 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v17 = v43;
          }
          *((_BYTE *)v42 + v17) = 32;
          v17 = v43 + 1;
          *(_QWORD *)&v43 = v43 + 1;
        }
        v18 = *(unsigned int *)(a2 + 4);
        if ((_DWORD)v18)
        {
          v22 = v17 + v18;
          if (v17 <= v17 + v18)
          {
            v23 = v17;
            if (*((_QWORD *)&v43 + 1) < v22)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v23 = v43;
            }
            if (v22 != v23)
              bzero((char *)v42 + v23, v22 - v23);
          }
          *(_QWORD *)&v43 = v22;
        }
        __src = (char *)v42 + v17;
        v19 = sub_22F1414C0(a2, (uint64_t *)&__src, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), 0);
        if (__src != (char *)v42 + v17)
          memcpy((char *)v42 + v17, __src, v19);
        if (*(_DWORD *)(a2 + 4) != v19)
        {
          v20 = v17 + v19;
          v21 = v43;
          if ((_QWORD)v43 != v20)
          {
            if ((unint64_t)v43 <= v20)
            {
              if (*((_QWORD *)&v43 + 1) < v20)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v21 = v43;
              }
              if (v20 != v21)
                bzero((char *)v42 + v21, v20 - v21);
            }
            *(_QWORD *)&v43 = v20;
          }
        }
      }
      if (*(_WORD *)(a2 + 16) == 51)
      {
        v26 = v42;
        v27 = v43;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_WORD *)(a2 + 16) = 15;
        *(_WORD *)(a2 + 18) = v13 & 0x13;
        sub_22F18E27C(a1, v26, v27, a2, v14, v16);
        goto LABEL_45;
      }
    }
    v24 = *(_DWORD *)a2;
    v25 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v25 + 312) = v24;
    *(_DWORD *)(v25 + 316) = 15;
    if (*(char *)(v25 + 311) < 0)
    {
      **(_BYTE **)(v25 + 288) = 0;
      *(_QWORD *)(v25 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 288) = 0;
      *(_BYTE *)(v25 + 311) = 0;
    }
    v28 = (unsigned __int8 *)(v25 + 320);
    __src = (void *)(v25 + 320);
    v39 = 0;
    v40 = v25;
    v41 = 1;
    *(_BYTE *)(v25 + 320) = 0;
    *(_DWORD *)(v25 + 664) = 0;
    v29 = *(unsigned int *)(v25 + 776);
    if ((_DWORD)v29)
    {
      v30 = *(_QWORD *)(v25 + 768);
      v31 = 56 * v29;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
      LODWORD(v29) = *v28;
    }
    *(_DWORD *)(v25 + 776) = 0;
    v28[v29 + 1] = 4;
    *(_BYTE *)(v25 + 320) = v29 + 1;
    *(_QWORD *)&v28[8 * v29 + 16] = 51;
    sub_22E3BB0B8((uint64_t)&__src);
    v32 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v32 + 312) = v14;
    *(_DWORD *)(v32 + 316) = 104;
    if (*(char *)(v32 + 311) < 0)
    {
      **(_BYTE **)(v32 + 288) = 0;
      *(_QWORD *)(v32 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v32 + 288) = 0;
      *(_BYTE *)(v32 + 311) = 0;
    }
    v33 = (unsigned __int8 *)(v32 + 320);
    __src = (void *)(v32 + 320);
    v39 = 0;
    v40 = v32;
    v41 = 1;
    *(_BYTE *)(v32 + 320) = 0;
    *(_DWORD *)(v32 + 664) = 0;
    v34 = *(unsigned int *)(v32 + 776);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(v32 + 768);
      v36 = 56 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 9) < 0)
          operator delete(*(void **)(v35 + v36 - 32));
        v36 -= 56;
      }
      while (v36);
      LODWORD(v34) = *v33;
    }
    *(_DWORD *)(v32 + 776) = 0;
    v33[v34 + 1] = 4;
    *(_BYTE *)(v32 + 320) = v34 + 1;
    *(_QWORD *)&v33[8 * v34 + 16] = 46;
    sub_22E3BB0B8((uint64_t)&__src);
    v12 = 1;
  }
  if (v42 != v44)
    free(v42);
  return v12;
}

uint64_t sub_22F190280(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;

  v11 = a2;
  v5 = *(_QWORD *)(a1 + 1584) + 24;
  v9 = a1;
  result = sub_22F1DB478(v5, a2, a3, (uint64_t)nullsub_768, (uint64_t)&v10, (uint64_t)sub_22F191288, (uint64_t)&v9);
  v7 = *(unsigned int *)(a1 + 1240);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1232) + 32 * v7 - 32);
    if (v8 != a2)
      return sub_22E6D6C48(v8 + 1360, (uint64_t *)&v11);
  }
  return result;
}

uint64_t sub_22F190300(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  __int128 *p_dst;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  __int128 __dst;
  uint64_t v36;
  __int16 v37;
  _QWORD v38[3];
  __int16 v39;
  _QWORD v40[3];
  __int16 v41;
  void *__src;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE v46[48];
  char *v47;
  uint64_t v48;
  _QWORD v49[14];

  v49[12] = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a2 + 16) == 13)
  {
    v47 = (char *)v49;
    v48 = 0x400000000;
    do
    {
      v10 = sub_22E4EF088((uint64_t)&v47, a2, 1);
      v11 = &v47[24 * v48];
      v12 = *(_OWORD *)v10;
      *((_QWORD *)v11 + 2) = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v11 = v12;
      LODWORD(v48) = v48 + 1;
      if ((*(_BYTE *)(a2 + 18) & 0x20) != 0)
      {
        v13 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v13 + 312) = *(_DWORD *)a2;
        *(_DWORD *)(v13 + 316) = 32;
        if (*(char *)(v13 + 311) < 0)
        {
          **(_BYTE **)(v13 + 288) = 0;
          *(_QWORD *)(v13 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v13 + 288) = 0;
          *(_BYTE *)(v13 + 311) = 0;
        }
        v38[0] = v13 + 320;
        v38[1] = 0;
        v38[2] = v13;
        v39 = 1;
        *(_BYTE *)(v13 + 320) = 0;
        *(_DWORD *)(v13 + 664) = 0;
        v14 = *(unsigned int *)(v13 + 776);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v13 + 768);
          v16 = 56 * v14;
          do
          {
            if (*(char *)(v15 + v16 - 9) < 0)
              operator delete(*(void **)(v15 + v16 - 32));
            v16 -= 56;
          }
          while (v16);
        }
        *(_DWORD *)(v13 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v38);
      }
      if (a5)
      {
        sub_22F18FB4C(a1, a2);
      }
      else
      {
        v17 = *(_WORD *)(a1 + 536);
        *(_WORD *)(a1 + 536) = v17 | 0x20;
        sub_22F18FB4C(a1, a2);
        *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v17 & 0x20;
      }
    }
    while (*(_WORD *)(a2 + 16) == 13);
    sub_22F14E1D0((uint64_t)v40, (uint64_t)v47, v48, (_QWORD *)a1);
    if (v46[40])
      goto LABEL_42;
    if (v46[41])
    {
      v18 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v18 + 312) = *(_DWORD *)v47;
      *(_DWORD *)(v18 + 316) = 20;
      if (*(char *)(v18 + 311) < 0)
      {
        **(_BYTE **)(v18 + 288) = 0;
        *(_QWORD *)(v18 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v18 + 288) = 0;
        *(_BYTE *)(v18 + 311) = 0;
      }
      __dst = (unint64_t)(v18 + 320);
      v36 = v18;
      v37 = 1;
      *(_BYTE *)(v18 + 320) = 0;
      *(_DWORD *)(v18 + 664) = 0;
      v28 = *(unsigned int *)(v18 + 776);
      if ((_DWORD)v28)
      {
        v29 = *(_QWORD *)(v18 + 768);
        v30 = 56 * v28;
        do
        {
          if (*(char *)(v29 + v30 - 9) < 0)
            operator delete(*(void **)(v29 + v30 - 32));
          v30 -= 56;
        }
        while (v30);
        LODWORD(v28) = *(unsigned __int8 *)(v18 + 320);
      }
      *(_BYTE *)(v18 + 321 + v28) = 2;
      *(_DWORD *)(v18 + 776) = 0;
      *(_QWORD *)(v18 + 336 + 8 * v28) = 0;
      v31 = (v28 + 1);
      *(_BYTE *)(v18 + 321 + v31) = 1;
      *(_BYTE *)(v18 + 320) = v28 + 2;
      *(_QWORD *)(v18 + 336 + 8 * v31) = a4;
      sub_22E3BB0B8((uint64_t)&__dst);
LABEL_42:
      v24 = 0;
LABEL_43:
      if (v45 != v46)
        free(v45);
      if (__src != &v43)
        free(__src);
      if (v47 != (char *)v49)
        free(v47);
      return v24;
    }
    v25 = __src;
    v26 = (v44 - (_DWORD)__src);
    if (v26 >= 0x17)
    {
      if ((v26 | 7) == 0x17)
        v33 = (((_DWORD)v44 - (_DWORD)__src) & 0xFFFFFFF8) + 8;
      else
        v33 = v26 | 7;
      p_dst = (__int128 *)operator new(v33 + 1);
      *((_QWORD *)&__dst + 1) = v26;
      v36 = v33 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v36) = v44 - (_BYTE)__src;
      p_dst = &__dst;
      if ((_DWORD)v44 == (_DWORD)__src)
        goto LABEL_55;
    }
    memmove(p_dst, v25, v26);
LABEL_55:
    *((_BYTE *)p_dst + v26) = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v36;
    v24 = 1;
    goto LABEL_43;
  }
  v19 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v19 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v19 + 316) = 20;
  if (*(char *)(v19 + 311) < 0)
  {
    **(_BYTE **)(v19 + 288) = 0;
    *(_QWORD *)(v19 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v19 + 288) = 0;
    *(_BYTE *)(v19 + 311) = 0;
  }
  v40[0] = v19 + 320;
  v40[1] = 0;
  v40[2] = v19;
  v41 = 1;
  *(_BYTE *)(v19 + 320) = 0;
  *(_DWORD *)(v19 + 664) = 0;
  v20 = *(unsigned int *)(v19 + 776);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(v19 + 768);
    v22 = 56 * v20;
    do
    {
      if (*(char *)(v21 + v22 - 9) < 0)
        operator delete(*(void **)(v21 + v22 - 32));
      v22 -= 56;
    }
    while (v22);
    LODWORD(v20) = *(unsigned __int8 *)(v19 + 320);
  }
  *(_BYTE *)(v19 + 321 + v20) = 2;
  *(_DWORD *)(v19 + 776) = 0;
  *(_QWORD *)(v19 + 336 + 8 * v20) = 0;
  v23 = (v20 + 1);
  *(_BYTE *)(v19 + 321 + v23) = 1;
  *(_BYTE *)(v19 + 320) = v20 + 2;
  *(_QWORD *)(v19 + 336 + 8 * v23) = a4;
  sub_22E3BB0B8((uint64_t)v40);
  return 0;
}

uint64_t sub_22F190750(unint64_t a1, int *a2, uint64_t **a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t **v12;
  unsigned int v13;
  unsigned __int8 v14;
  _BYTE v15[72];
  void *v16;
  _BYTE v17[40];
  _QWORD *v18;
  __int128 v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = xmmword_22F44E360;
  v14 = 0;
  v6 = (unsigned __int8 *)sub_22F18E170(a1, (uint64_t)a2, (uint64_t *)&v18, &v14);
  v8 = 0;
  if (!v14)
  {
    sub_22F1497C4((uint64_t)v15, v6, v7, *a2, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));
    if ((v17[32] & 1) != 0)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      if (!v15[69] && !v15[68] && !v15[70])
      {
        v13 = 64;
        v12 = 0;
        sub_22F14AEF4((uint64_t)v15);
        v10 = v9;
        if ((v9 & 1) == 0)
        {
          sub_22F18FB4C(a1, (unsigned int *)a2);
          *a3 = sub_22E5FA634(&v12, 0xFFFFFFFFFFFFFFFFLL);
        }
        v8 = v10 ^ 1u;
        if (v13 >= 0x41 && v12)
          MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
      }
    }
    if (v16 != v17)
      free(v16);
  }
  if (v18 != v20)
    free(v18);
  return v8;
}

uint64_t sub_22F1908DC(unint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v8;
  uint64_t v9;

  v3 = *(uint64_t **)(a1 + 704);
  v4 = *(uint64_t **)(a1 + 712);
  if (v3 == v4)
    return 0;
  v8 = 0;
  do
  {
    v9 = *v3++;
    v8 |= (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a1, a3);
  }
  while (v3 != v4);
  if ((v8 & 1) == 0 || (*(_WORD *)(a1 + 536) & 1) != 0)
    return 0;
  sub_22F18FB4C(a1, a2);
  return 1;
}

uint64_t sub_22F19096C(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  v4 = *(unsigned __int16 *)(a2 + 16);
  if ((v4 - 7) < 6 || ((v4 - 13) >= 6 ? (v5 = v4 == 1) : (v5 = 1), v5))
    v35 = 0;
  else
    v35 = *(_QWORD *)(a2 + 8);
  v6 = sub_22F191234(a1 + 2120, v35);
  v7 = v6;
  if (*(char *)(v6 + 39) < 0)
  {
    if (*(_QWORD *)(v6 + 24))
      goto LABEL_10;
  }
  else if (*(_BYTE *)(v6 + 39))
  {
LABEL_10:
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v8 + 316) = 1349;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v38 = (unsigned __int8 *)(v8 + 320);
    v39 = 0;
    v40 = v8;
    v41 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v10 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v8 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
    }
    *(_DWORD *)(v8 + 776) = 0;
    v13 = *(unsigned __int16 *)(a2 + 16);
    if ((v13 - 7) < 6 || ((v13 - 13) >= 6 ? (v14 = v13 == 1) : (v14 = 1), v14))
      v36 = 0;
    else
      v36 = *(_QWORD *)(a2 + 8);
    v15 = *(unsigned __int8 *)(v8 + 320);
    v16 = v8 + 321;
    *(_BYTE *)(v16 + v15) = 5;
    *(_QWORD *)(v8 + 336 + 8 * v15) = v36;
    v17 = (v15 + 1);
    *(_BYTE *)(v16 + v17) = 2;
    *(_BYTE *)(v8 + 320) = v15 + 2;
    *(_QWORD *)(v8 + 336 + 8 * v17) = 1;
    v18 = *(_BYTE *)(v7 + 39);
    if (v18 >= 0)
      v19 = (void *)(v7 + 16);
    else
      v19 = *(void **)(v7 + 16);
    if (v18 >= 0)
      v20 = v18 & 0x7F;
    else
      v20 = *(_QWORD *)(v7 + 24);
    sub_22E3B89A8(&v38, v19, v20);
    goto LABEL_49;
  }
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v9 + 316) = 1349;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v38 = (unsigned __int8 *)(v9 + 320);
  v39 = 0;
  v40 = v9;
  v41 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v21 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(v9 + 768);
    v23 = 56 * v21;
    do
    {
      if (*(char *)(v22 + v23 - 9) < 0)
        operator delete(*(void **)(v22 + v23 - 32));
      v23 -= 56;
    }
    while (v23);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v24 = *(unsigned __int16 *)(a2 + 16);
  if ((v24 - 7) < 6 || ((v24 - 13) >= 6 ? (v25 = v24 == 1) : (v25 = 1), v25))
    v37 = 0;
  else
    v37 = *(_QWORD *)(a2 + 8);
  v26 = *(unsigned __int8 *)(v9 + 320);
  v27 = v9 + 321;
  *(_BYTE *)(v27 + v26) = 5;
  *(_QWORD *)(v9 + 336 + 8 * v26) = v37;
  v28 = (v26 + 1);
  *(_BYTE *)(v27 + v28) = 2;
  *(_BYTE *)(v9 + 320) = v26 + 2;
  *(_QWORD *)(v9 + 336 + 8 * v28) = 0;
LABEL_49:
  sub_22E3BB0B8((uint64_t)&v38);
  v29 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v29 + 312) = *(_DWORD *)(v7 + 8);
  *(_DWORD *)(v29 + 316) = 1257;
  if (*(char *)(v29 + 311) < 0)
  {
    **(_BYTE **)(v29 + 288) = 0;
    *(_QWORD *)(v29 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v29 + 288) = 0;
    *(_BYTE *)(v29 + 311) = 0;
  }
  v30 = (unsigned __int8 *)(v29 + 320);
  v38 = (unsigned __int8 *)(v29 + 320);
  v39 = 0;
  v40 = v29;
  v41 = 1;
  *(_BYTE *)(v29 + 320) = 0;
  *(_DWORD *)(v29 + 664) = 0;
  v31 = *(unsigned int *)(v29 + 776);
  if ((_DWORD)v31)
  {
    v32 = *(_QWORD *)(v29 + 768);
    v33 = 56 * v31;
    do
    {
      if (*(char *)(v32 + v33 - 9) < 0)
        operator delete(*(void **)(v32 + v33 - 32));
      v33 -= 56;
    }
    while (v33);
    LODWORD(v31) = *v30;
  }
  *(_DWORD *)(v29 + 776) = 0;
  v30[v31 + 1] = 2;
  *(_BYTE *)(v29 + 320) = v31 + 1;
  *(_QWORD *)&v30[8 * v31 + 16] = 0;
  return sub_22E3BB0B8((uint64_t)&v38);
}

uint64_t sub_22F190CA0(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  v4 = *(unsigned __int16 *)(a2 + 16);
  if ((v4 - 7) < 6 || ((v4 - 13) >= 6 ? (v5 = v4 == 1) : (v5 = 1), v5))
    v35 = 0;
  else
    v35 = *(_QWORD *)(a2 + 8);
  v6 = sub_22F191234(a1 + 2120, v35);
  v7 = v6;
  if (*(char *)(v6 + 79) < 0)
  {
    if (*(_QWORD *)(v6 + 64))
      goto LABEL_10;
  }
  else if (*(_BYTE *)(v6 + 79))
  {
LABEL_10:
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v8 + 316) = 1366;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v38 = (unsigned __int8 *)(v8 + 320);
    v39 = 0;
    v40 = v8;
    v41 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v10 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v8 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
    }
    *(_DWORD *)(v8 + 776) = 0;
    v13 = *(unsigned __int16 *)(a2 + 16);
    if ((v13 - 7) < 6 || ((v13 - 13) >= 6 ? (v14 = v13 == 1) : (v14 = 1), v14))
      v36 = 0;
    else
      v36 = *(_QWORD *)(a2 + 8);
    v15 = *(unsigned __int8 *)(v8 + 320);
    v16 = v8 + 321;
    *(_BYTE *)(v16 + v15) = 5;
    *(_QWORD *)(v8 + 336 + 8 * v15) = v36;
    v17 = (v15 + 1);
    *(_BYTE *)(v16 + v17) = 2;
    *(_BYTE *)(v8 + 320) = v15 + 2;
    *(_QWORD *)(v8 + 336 + 8 * v17) = 1;
    v18 = *(_BYTE *)(v7 + 79);
    if (v18 >= 0)
      v19 = (void *)(v7 + 56);
    else
      v19 = *(void **)(v7 + 56);
    if (v18 >= 0)
      v20 = v18 & 0x7F;
    else
      v20 = *(_QWORD *)(v7 + 64);
    sub_22E3B89A8(&v38, v19, v20);
    goto LABEL_49;
  }
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v9 + 316) = 1366;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v38 = (unsigned __int8 *)(v9 + 320);
  v39 = 0;
  v40 = v9;
  v41 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v21 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(v9 + 768);
    v23 = 56 * v21;
    do
    {
      if (*(char *)(v22 + v23 - 9) < 0)
        operator delete(*(void **)(v22 + v23 - 32));
      v23 -= 56;
    }
    while (v23);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v24 = *(unsigned __int16 *)(a2 + 16);
  if ((v24 - 7) < 6 || ((v24 - 13) >= 6 ? (v25 = v24 == 1) : (v25 = 1), v25))
    v37 = 0;
  else
    v37 = *(_QWORD *)(a2 + 8);
  v26 = *(unsigned __int8 *)(v9 + 320);
  v27 = v9 + 321;
  *(_BYTE *)(v27 + v26) = 5;
  *(_QWORD *)(v9 + 336 + 8 * v26) = v37;
  v28 = (v26 + 1);
  *(_BYTE *)(v27 + v28) = 2;
  *(_BYTE *)(v9 + 320) = v26 + 2;
  *(_QWORD *)(v9 + 336 + 8 * v28) = 0;
LABEL_49:
  sub_22E3BB0B8((uint64_t)&v38);
  v29 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v29 + 312) = *(_DWORD *)(v7 + 48);
  *(_DWORD *)(v29 + 316) = 1257;
  if (*(char *)(v29 + 311) < 0)
  {
    **(_BYTE **)(v29 + 288) = 0;
    *(_QWORD *)(v29 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v29 + 288) = 0;
    *(_BYTE *)(v29 + 311) = 0;
  }
  v30 = (unsigned __int8 *)(v29 + 320);
  v38 = (unsigned __int8 *)(v29 + 320);
  v39 = 0;
  v40 = v29;
  v41 = 1;
  *(_BYTE *)(v29 + 320) = 0;
  *(_DWORD *)(v29 + 664) = 0;
  v31 = *(unsigned int *)(v29 + 776);
  if ((_DWORD)v31)
  {
    v32 = *(_QWORD *)(v29 + 768);
    v33 = 56 * v31;
    do
    {
      if (*(char *)(v32 + v33 - 9) < 0)
        operator delete(*(void **)(v32 + v33 - 32));
      v33 -= 56;
    }
    while (v33);
    LODWORD(v31) = *v30;
  }
  *(_DWORD *)(v29 + 776) = 0;
  v30[v31 + 1] = 2;
  *(_BYTE *)(v29 + 320) = v31 + 1;
  *(_QWORD *)&v30[8 * v31 + 16] = 1;
  return sub_22E3BB0B8((uint64_t)&v38);
}

uint64_t sub_22F190FD8(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v6 = *(unsigned __int16 *)(a2 + 16);
  if ((v6 - 7) < 6 || ((v6 - 13) >= 6 ? (v7 = v6 == 1) : (v7 = 1), v7))
    v24 = 0;
  else
    v24 = *(_QWORD *)(a2 + 8);
  v8 = sub_22F191234(a1 + 2120, v24);
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v9 + 316) = 1358;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v26 = v9 + 320;
  v27 = 0;
  v28 = v9;
  v29 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v13 = *(unsigned __int16 *)(a2 + 16);
  if ((v13 - 7) < 6 || ((v13 - 13) >= 6 ? (v14 = v13 == 1) : (v14 = 1), v14))
    v25 = 0;
  else
    v25 = *(_QWORD *)(a2 + 8);
  v15 = *(unsigned __int8 *)(v9 + 320);
  v16 = v9 + 321;
  *(_BYTE *)(v16 + v15) = 5;
  *(_QWORD *)(v9 + 336 + 8 * v15) = v25;
  v17 = (v15 + 1);
  *(_BYTE *)(v16 + v17) = 2;
  *(_BYTE *)(v9 + 320) = v15 + 2;
  *(_QWORD *)(v9 + 336 + 8 * v17) = a3 ^ 1u;
  sub_22E3BB0B8((uint64_t)&v26);
  v18 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v18 + 312) = *(_DWORD *)(v8 + 88);
  *(_DWORD *)(v18 + 316) = 1257;
  if (*(char *)(v18 + 311) < 0)
  {
    **(_BYTE **)(v18 + 288) = 0;
    *(_QWORD *)(v18 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v18 + 288) = 0;
    *(_BYTE *)(v18 + 311) = 0;
  }
  v19 = (unsigned __int8 *)(v18 + 320);
  v26 = v18 + 320;
  v27 = 0;
  v28 = v18;
  v29 = 1;
  *(_BYTE *)(v18 + 320) = 0;
  *(_DWORD *)(v18 + 664) = 0;
  v20 = *(unsigned int *)(v18 + 776);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(v18 + 768);
    v22 = 56 * v20;
    do
    {
      if (*(char *)(v21 + v22 - 9) < 0)
        operator delete(*(void **)(v21 + v22 - 32));
      v22 -= 56;
    }
    while (v22);
    LODWORD(v20) = *v19;
  }
  *(_DWORD *)(v18 + 776) = 0;
  v19[v20 + 1] = 2;
  *(_BYTE *)(v18 + 320) = v20 + 1;
  *(_QWORD *)&v19[8 * v20 + 16] = 2;
  return sub_22E3BB0B8((uint64_t)&v26);
}

uint64_t sub_22F1911F0(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)result & 1) == 0)
  {
    v1 = result;
    llvm::deallocate_buffer(*(llvm **)(result + 8), (void *)(4 * *(unsigned int *)(result + 16)));
    return v1;
  }
  return result;
}

uint64_t sub_22F191234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_22F4175A8((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_22F191288(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4, void *a5, size_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  size_t v15;
  void **v16;
  size_t v17;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  unsigned __int8 *v23[3];
  __int16 v24;

  v10 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_DWORD *)(v10 + 312) = *(_DWORD *)(*(_QWORD *)a1 + 772);
  *(_DWORD *)(v10 + 316) = 1327;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  v23[0] = (unsigned __int8 *)(v10 + 320);
  v23[1] = 0;
  v23[2] = (unsigned __int8 *)v10;
  v24 = 1;
  *(_BYTE *)(v10 + 320) = 0;
  *(_DWORD *)(v10 + 664) = 0;
  v11 = *(unsigned int *)(v10 + 776);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v10 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
  }
  *(_DWORD *)(v10 + 776) = 0;
  sub_22F1D8A24(*a2, 0, v21);
  if (v22 >= 0)
    v14 = v21;
  else
    v14 = (void **)v21[0];
  if (v22 >= 0)
    v15 = v22 & 0x7F;
  else
    v15 = (size_t)v21[1];
  sub_22E3B89A8(v23, v14, v15);
  sub_22F1D8A24(a4, 0, __p);
  if (v20 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v20 >= 0)
    v17 = v20 & 0x7F;
  else
    v17 = (size_t)__p[1];
  sub_22E3B89A8(v23, v16, v17);
  sub_22E3B89A8(v23, a5, a6);
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  return sub_22E3BB0B8((uint64_t)v23);
}

uint64_t sub_22F191400(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 25) = 1;
  if (*(_BYTE *)(a1 + 26))
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  else
    result = sub_22F18FB4C(*(_QWORD *)(a1 + 8), a2);
  *(_BYTE *)(a1 + 25) = 0;
  return result;
}

uint64_t sub_22F19144C(_DWORD *a1, const void *a2, unsigned int a3, _QWORD *a4)
{
  const char *v8;
  _QWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  const char *v31;
  __int16 v32;
  uint64_t v33;

  if (a3 + a1[5] - 4059 > 0xFFFFF022)
  {
    v13 = *(_QWORD *)a1;
    v14 = a1[4] & 0x7FFFFFFF;
    v15 = *(_DWORD *)(*(_QWORD *)a1 + 304);
    v16 = v15 + 1;
    if (v15 + 1 > 1)
    {
      if ((v15 & 0x80000000) != 0)
      {
        v19 = -2 - v15;
        if (((*(_QWORD *)(*(_QWORD *)(v13 + 224) + 8 * ((-2 - v15) >> 6)) >> (-2 - v15)) & 1) != 0)
          v17 = (_DWORD *)(*(_QWORD *)(v13 + 200) + 24 * v19);
        else
          v17 = (_DWORD *)sub_22F1E1134(*(_QWORD *)a1, v19, 0);
      }
      else
      {
        v17 = (_DWORD *)(*(_QWORD *)(v13 + 184) + 24 * v15);
      }
    }
    else
    {
      v17 = *(_DWORD **)(v13 + 184);
    }
    if ((*v17 & 0x7FFFFFFFu) <= v14
      && (v15 == -2
       || (v16 != *(_DWORD *)(v13 + 192)
         ? ((v16 & 0x80000000) != 0
          ? ((v23 = -3 - v15,
              ((*(_QWORD *)(*(_QWORD *)(v13 + 224) + 8 * ((-3 - v15) >> 6)) >> (-3 - v15)) & 1) == 0)
           ? (v22 = (_DWORD *)sub_22F1E1134(v13, v23, 0))
           : (v22 = (_DWORD *)(*(_QWORD *)(v13 + 200) + 24 * v23)))
          : (v22 = (_DWORD *)(*(_QWORD *)(v13 + 184) + 24 * v16)),
            v21 = *v22 & 0x7FFFFFFF)
         : (v21 = *(_DWORD *)(v13 + 216)),
           v21 > v14)))
    {
      v20 = *(_DWORD *)(v13 + 304);
    }
    else
    {
      v20 = sub_22F1E1EE8(v13, v14);
    }
    if (v20 + 1 > 1)
    {
      if ((v20 & 0x80000000) != 0)
      {
        v25 = -2 - v20;
        if (((*(_QWORD *)(*(_QWORD *)(v13 + 224) + 8 * ((-2 - v20) >> 6)) >> (-2 - v20)) & 1) != 0)
          v24 = *(_QWORD *)(v13 + 200) + 24 * v25;
        else
          v24 = sub_22F1E1134(v13, v25, 0);
      }
      else
      {
        v24 = *(_QWORD *)(v13 + 184) + 24 * v20;
      }
    }
    else
    {
      v24 = *(_QWORD *)(v13 + 184);
    }
    *(_QWORD *)((*(_QWORD *)(v24 + 16) & 0xFFFFFFFFFFFFFFF8) + 40) = 0;
  }
  else
  {
    v31 = "<scratch space>";
    v32 = 259;
    llvm::WritableMemoryBuffer::getNewMemBuffer();
    v8 = (const char *)v33;
    *((_QWORD *)a1 + 1) = *(_QWORD *)(v33 + 8);
    v9 = *(_QWORD **)a1;
    v33 = 0;
    v31 = v8;
    v10 = sub_22F1E1980(v9, (uint64_t *)&v31, 0, 0, 0, 0);
    if (v31)
      (*(void (**)(const char *))(*(_QWORD *)v31 + 8))(v31);
    v11 = sub_22E49F3DC(*(_QWORD **)a1, v10);
    if (v11)
      v12 = *v11 & 0x7FFFFFFF;
    else
      v12 = 0;
    a1[4] = v12;
    a1[5] = 0;
    v18 = v33;
    v33 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v26 = *((_QWORD *)a1 + 1);
  v27 = a1[5];
  a1[5] = v27 + 1;
  *(_BYTE *)(v26 + v27) = 10;
  v28 = a1[5];
  *a4 = *((_QWORD *)a1 + 1) + v28;
  memcpy((void *)(*((_QWORD *)a1 + 1) + v28), a2, a3);
  v29 = a1[5] + a3;
  a1[5] = v29 + 1;
  *(_BYTE *)(*((_QWORD *)a1 + 1) + v29) = 0;
  return a1[5] + ~a3 + a1[4];
}

void sub_22F19173C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _BOOL4 v46;
  BOOL v47;
  _BOOL4 v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v53;
  unsigned int v54;
  unsigned int v56;
  uint64_t v57;
  uint64_t i;
  _BOOL4 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  unsigned __int8 v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  unsigned int v73;
  unsigned int v74;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v80;
  char *v81;
  __int128 v82;
  int v83;
  unint64_t v85;
  char *v86;
  __int128 v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  char *v95;
  char *v96;
  __int128 v97;
  unint64_t v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  unsigned int v117;
  char v118;
  _BOOL4 v119;
  char *v120;
  __int16 v121;
  __int16 v122;
  __int16 v123;
  __int16 v124;
  unsigned int v126;
  char *v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _WORD *v140;
  unsigned int v141;
  char *v142;
  uint64_t v143;
  _WORD *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL4 v152;
  int v153;
  _BOOL4 v154;
  unsigned int v155;
  char v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _QWORD v160[3];
  __int16 v161;
  __int128 v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  _BYTE v166[32];
  uint64_t v167;
  _QWORD v168[2];
  int v169;
  unint64_t v170;
  unsigned __int8 v171;
  void *__src;
  uint64_t v173;
  _BYTE v174[3072];
  void *v175;
  uint64_t v176;
  _QWORD v177[194];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v177[192] = *MEMORY[0x24BDAC8D0];
  sub_22F192684(v0);
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = v2;
  *(_DWORD *)(v9 + 36) = 0;
  *(_DWORD *)(v9 + 40) = *(_DWORD *)v8;
  *(_DWORD *)(v9 + 44) = v6;
  v10 = *(_BYTE *)(v9 + 64) & 0xFE | *(_BYTE *)(v8 + 18) & 1;
  *(_BYTE *)(v9 + 64) = v10;
  v11 = *(_BYTE *)(v8 + 18) & 2 | v10 & 0xF9;
  *(_BYTE *)(v9 + 64) = v11;
  v12 = *(unsigned int **)(v4 + 16);
  *(_QWORD *)(v9 + 24) = v12;
  *(_BYTE *)(v9 + 64) = v11 & 0xC7;
  v13 = *(_DWORD *)(v4 + 28);
  *(_DWORD *)(v9 + 32) = v13;
  *(_DWORD *)(v9 + 48) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 88);
  *(_DWORD *)(v9 + 52) = *(_DWORD *)(v14 + 216);
  if (v13)
  {
    v15 = *v12;
    if ((*v12 & 0x80000000) != 0)
    {
      v15 = sub_22F1E22F0((_QWORD *)v14, v15);
      v4 = *(_QWORD *)v9;
    }
    *(_DWORD *)(v9 + 56) = v15;
    if ((*(_WORD *)(v4 + 36) & 1) != 0)
    {
      v16 = *(_DWORD *)(v4 + 32);
    }
    else
    {
      v16 = sub_22F14F450(v4, v14);
      v15 = *(_DWORD *)(v9 + 56);
    }
    *(_DWORD *)(v9 + 60) = v16;
    v17 = *(unsigned int *)(v9 + 44) | 0x100000000;
    __src = (void *)(v15 | ((unint64_t)*(unsigned int *)(v9 + 40) << 32));
    v173 = v17;
    *(_DWORD *)(v9 + 48) = sub_22F1E1CA0(v14, (uint64_t *)&__src, v16, 0, 0);
    v4 = *(_QWORD *)v9;
  }
  v18 = *(_WORD *)(v4 + 36);
  if ((v18 & 2) == 0 || !*(_DWORD *)(v4 + 24))
    goto LABEL_157;
  __src = v174;
  v173 = 0x8000000000;
  v19 = *(_QWORD *)(v9 + 16);
  v164 = v166;
  v165 = 0x800000000;
  v20 = *(_QWORD *)(v19 + 328);
  v170 = 0xFFFFFFFF00000000;
  v171 = 0;
  v168[0] = 0;
  v168[1] = 0;
  v167 = v20;
  v169 = 1;
  v21 = *(_DWORD *)(v9 + 32);
  if (!v21)
    goto LABEL_152;
  v156 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v153 = *(_DWORD *)(v9 + 32);
  do
  {
    v25 = *(_QWORD *)(v9 + 24);
    if (v22 && *(_WORD *)(v25 + 24 * (v22 - 1) + 16) != 67 && (*(_WORD *)(v25 + 24 * v22 + 18) & 2) != 0)
      *(_BYTE *)(v9 + 64) |= 4u;
    v26 = (int *)(v25 + 24 * v22);
    if (v167)
    {
      v27 = *(unsigned __int16 *)(v25 + 24 * v22 + 16);
      if ((v27 - 7) < 6 || ((v27 - 13) >= 6 ? (v28 = v27 == 1) : (v28 = 1), v28))
        v91 = 0;
      else
        v91 = *(_QWORD *)(v25 + 24 * v22 + 8);
      v29 = v165;
      if (v91 == v167)
      {
        v43 = *v26;
        v44 = v173;
        if (v165 >= HIDWORD(v165))
        {
          v145 = v23;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = v145;
          v29 = v165;
        }
        ++v22;
        *((_DWORD *)v164 + v29) = 0;
        LODWORD(v165) = v165 + 1;
        v170 = __PAIR64__(v44, v43);
        goto LABEL_60;
      }
    }
    else
    {
      v29 = v165;
    }
    if (v29)
    {
      v30 = *(unsigned __int16 *)(v25 + 24 * v22 + 16);
      if (v30 == 21)
      {
        v31 = *v26;
        if (v29 >= HIDWORD(v165))
        {
          v135 = v23;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = v135;
          v29 = v165;
        }
        *((_DWORD *)v164 + v29) = v31;
        v29 = v165 + 1;
        LODWORD(v165) = v165 + 1;
        v32 = *(_QWORD *)(v9 + 24);
        v30 = *(unsigned __int16 *)(v32 + 24 * v22 + 16);
      }
      else
      {
        v32 = v25;
      }
      if (v30 == 22)
      {
        LODWORD(v165) = v29 - 1;
        if (v29 == 1)
        {
          v65 = v171;
          v66 = SHIDWORD(v170);
          if ((v171 & 6) != 0)
          {
            v158 = v23;
            v155 = v24;
            v67 = *(_DWORD *)(v32 + 24 * v22);
            v68 = (char *)__src + 24 * SHIDWORD(v170);
            v175 = v177;
            v176 = 0x4000000000;
            LODWORD(v162) = 0;
            if ((_DWORD)v173 == HIDWORD(v170))
              v69 = 0;
            else
              v69 = (char *)__src + 24 * SHIDWORD(v170);
            if ((_DWORD)v173 != HIDWORD(v170))
            {
              v92 = 0;
              v93 = (v173 - HIDWORD(v170));
              do
              {
                v94 = v92;
                if (*(_WORD *)&v69[24 * v92 + 16] == 67)
                {
                  v95 = &v69[24 * (v92 - 1)];
                  sub_22F19295C(v9, (unsigned int *)v95, (uint64_t)v68, v93, &v162);
                  v96 = (char *)v175 + 24 * v176;
                  v97 = *(_OWORD *)v95;
                  *((_QWORD *)v96 - 1) = *((_QWORD *)v95 + 2);
                  *(_OWORD *)(v96 - 24) = v97;
                  v94 = v162;
                  if ((_DWORD)v162 == (_DWORD)v93)
                    break;
                }
                v98 = sub_22E4EF088((uint64_t)&v175, (unint64_t)&v69[24 * v94], 1);
                v99 = (char *)v175 + 24 * v176;
                v100 = *(_OWORD *)v98;
                *((_QWORD *)v99 + 2) = *(_QWORD *)(v98 + 16);
                *(_OWORD *)v99 = v100;
                LODWORD(v176) = v176 + 1;
                v92 = v162 + 1;
                LODWORD(v162) = v92;
              }
              while (v92 != (_DWORD)v93);
            }
            v70 = sub_22E4EF088((uint64_t)&v175, (unint64_t)v168, 1);
            v71 = (char *)v175 + 24 * v176;
            v72 = *(_OWORD *)v70;
            *((_QWORD *)v71 + 2) = *(_QWORD *)(v70 + 16);
            *(_OWORD *)v71 = v72;
            LODWORD(v176) = v176 + 1;
            v73 = *(_DWORD *)(v9 + 56) & 0x7FFFFFFF;
            v74 = v73 + *(_DWORD *)(v9 + 60);
            if ((v170 & 0x7FFFFFFF) < v74 && (v170 & 0x7FFFFFFF) >= v73)
              v76 = (v170 & 0x7FFFFFFF) - v73;
            else
              v76 = 0;
            v77 = *(_DWORD *)(v9 + 48);
            v78 = v76 + v77;
            if ((v67 & 0x7FFFFFFFu) < v74 && (v67 & 0x7FFFFFFFu) >= v73)
              v80 = (v67 & 0x7FFFFFFF) - v73;
            else
              v80 = 0;
            v162 = 0uLL;
            v163 = 0;
            sub_22F14EC2C((uint64_t)v175, *(_QWORD *)(v9 + 16), (v171 >> 2) & 1, v78, v80 + v77, (uint64_t)&v162);
            WORD1(v163) |= (unsigned __int16)(2 * (v171 & 1)) | 0x100;
            sub_22F17C0FC((uint64_t)&__src, v66 + 1);
            v81 = (char *)__src + 24 * v173;
            v82 = v162;
            *((_QWORD *)v81 - 1) = v163;
            *(_OWORD *)(v81 - 24) = v82;
            v24 = v155;
            if (v175 != v177)
              free(v175);
            v65 = v171;
            v23 = v158;
          }
          else if ((_DWORD)v173 == HIDWORD(v170))
          {
            if (HIDWORD(v170) && *((_WORD *)__src + 12 * v173 - 4) == 67)
            {
              LODWORD(v173) = HIDWORD(v170) - 1;
            }
            else if (v22 + 1 != v21 && *(_WORD *)(v32 + 24 * (v22 + 1) + 16) == 67)
            {
              ++v22;
            }
          }
          else
          {
            if ((v171 & 8) != 0)
            {
              v102 = v23;
              memmove((char *)__src + 24 * HIDWORD(v170) - 24, (char *)__src + 24 * HIDWORD(v170), 24 * v173 - 24 * HIDWORD(v170));
              v23 = v102;
              LODWORD(v173) = v173 - 1;
              v65 = v171;
            }
            if ((v65 & 0x10) != 0 && v22 + 1 != v21 && *(_WORD *)(*(_QWORD *)(v9 + 24) + 24 * (v22 + 1) + 16) == 67)
              ++v22;
          }
          v170 = 0xFFFFFFFF00000000;
          LOBYTE(v42) = v65 & 0xE0;
          goto LABEL_54;
        }
      }
      if (!(_DWORD)v23)
        LOBYTE(v24) = sub_22F412050(*(_QWORD *)(v9 + 8), *(_QWORD *)v9, *(_QWORD *)(v9 + 16));
      v23 = 1;
      if (!(_BYTE)v24)
      {
        v24 = 0;
        goto LABEL_55;
      }
      v24 = 1;
    }
    v33 = *(unsigned __int16 *)(v25 + 24 * v22 + 16);
    if (v33 == 68 || v33 == 66)
    {
      v34 = *(_QWORD *)(v9 + 24);
      v35 = v22 + 1;
      v36 = *(unsigned __int16 *)(v34 + 24 * (v22 + 1) + 16);
      if ((v36 - 7) < 6 || ((v36 - 13) >= 6 ? (v37 = v36 == 1) : (v37 = 1), v37))
        v101 = 0;
      else
        v101 = *(_QWORD *)(v34 + 24 * v35 + 8);
      v38 = *(unsigned int *)(*(_QWORD *)v9 + 24);
      if (!(_DWORD)v38)
        goto LABEL_50;
      v39 = 0;
      v40 = 8 * v38;
      while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) + 8 * v39) != v101)
      {
        ++v39;
        v40 -= 8;
        if (!v40)
          goto LABEL_50;
      }
      if ((_DWORD)v39 == -1)
      {
LABEL_50:
        if (v33 == 68)
          v41 = 4;
        else
          v41 = 2;
        v42 = v171 & 0xF8 | v41 & 0xFFFFFFFE | (*(unsigned __int8 *)(v9 + 64) >> 2) & 1;
LABEL_54:
        v171 = v42;
        goto LABEL_55;
      }
      v49 = *v26 & 0x7FFFFFFF;
      v50 = *(_DWORD *)(v9 + 56) & 0x7FFFFFFF;
      v51 = v50 + *(_DWORD *)(v9 + 60);
      if (v49 < v51 && v49 >= v50)
        v53 = v49 - v50;
      else
        v53 = 0;
      v54 = *(_DWORD *)(v34 + 24 * v35) & 0x7FFFFFFF;
      if (v54 < v51 && v54 >= v50)
        v56 = v54 - v50;
      else
        v56 = 0;
      v57 = *(_QWORD *)(v9 + 8) + 48;
      for (i = v23; (_DWORD)v39; LODWORD(v39) = v39 - v59)
      {
        v59 = *(unsigned __int16 *)(v57 + 16) == 1;
        v57 += 24;
      }
      v60 = *(_DWORD *)(v9 + 48);
      v176 = 0;
      v175 = 0;
      v177[0] = 0;
      sub_22F14EC2C(v57, *(_QWORD *)(v9 + 16), v33 == 68, v53 + v60, v56 + v60, (uint64_t)&v175);
      v61 = WORD1(v177[0]);
      WORD1(v177[0]) |= 0x100u;
      if ((*(_BYTE *)(v9 + 64) & 4) != 0)
        WORD1(v177[0]) = v61 | 0x102;
      v156 = 1;
      v62 = sub_22E4EF088((uint64_t)&__src, (unint64_t)&v175, 1);
      v63 = (char *)__src + 24 * v173;
      v64 = *(_OWORD *)v62;
      *((_QWORD *)v63 + 2) = *(_QWORD *)(v62 + 16);
      *(_OWORD *)v63 = v64;
      LODWORD(v173) = v173 + 1;
      *(_BYTE *)(v9 + 64) &= ~4u;
      ++v22;
      v23 = i;
    }
    else
    {
      if ((_DWORD)v173)
        v154 = *((unsigned __int16 *)__src + 12 * v173 - 4) == 67;
      else
        v154 = 0;
      v45 = v24;
      if (v22)
        v46 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 24) + 24 * (v22 - 1) + 16) == 67;
      else
        v46 = 0;
      if (v22 + 1 == v21)
      {
        v47 = 0;
        v48 = 0;
      }
      else
      {
        v83 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 24) + 24 * (v22 + 1) + 16);
        v47 = v83 == 67;
        v48 = v83 == 22;
      }
      v159 = v23;
      if ((v33 - 7) < 6)
        goto LABEL_115;
      if ((v33 - 13) < 6 || v33 == 1)
        goto LABEL_115;
      v104 = *(_QWORD *)(v25 + 24 * v22 + 8);
      if (!v104)
        goto LABEL_115;
      v105 = *(_QWORD *)v9;
      v106 = *(unsigned int *)(*(_QWORD *)v9 + 24);
      if (!(_DWORD)v106)
        goto LABEL_115;
      v89 = 0;
      v90 = 8 * v106;
      while (*(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v89) != v104)
      {
        ++v89;
        v90 -= 8;
        if (!v90)
          goto LABEL_115;
      }
      if ((_DWORD)v89 == -1)
      {
LABEL_115:
        v85 = sub_22E4EF088((uint64_t)&__src, v25 + 24 * v22, 1);
        v86 = (char *)__src + 24 * v173;
        v87 = *(_OWORD *)v85;
        *((_QWORD *)v86 + 2) = *(_QWORD *)(v85 + 16);
        *(_OWORD *)v86 = v87;
        v88 = v173 + 1;
        LODWORD(v173) = v173 + 1;
        if ((*(_BYTE *)(v9 + 64) & 4) != 0)
        {
          *((_WORD *)__src + 12 * v88 - 3) |= 2u;
          *(_BYTE *)(v9 + 64) &= ~4u;
          v21 = v153;
          v24 = v45;
LABEL_120:
          v23 = v159;
          goto LABEL_55;
        }
        v21 = v153;
        v23 = v159;
        if (v46 && !v154)
          *((_WORD *)__src + 12 * v88 - 3) &= ~2u;
        v24 = v45;
      }
      else
      {
        v108 = *(_QWORD *)(v9 + 8);
        if (!v46)
        {
          v24 = v45;
          if (*(_BYTE *)(v108 + 4))
          {
            v119 = v48;
            if ((sub_22F1927DC(v9, (uint64_t *)&__src, 0, v105, v89, *(_QWORD *)(*(_QWORD *)(v9 + 16) + 48), *(_QWORD **)(*(_QWORD *)(v9 + 16) + 56)) & 1) != 0)
            {
              v156 = 1;
              v21 = v153;
              goto LABEL_120;
            }
            v108 = *(_QWORD *)(v9 + 8);
            v48 = v119;
          }
          if (!v47)
          {
            v129 = (char *)(v108 + 48);
            v152 = v48;
            if ((_DWORD)v89)
            {
              v130 = v89;
              v21 = v153;
              do
              {
                v131 = *((unsigned __int16 *)v129 + 8) == 1;
                v129 += 24;
                v130 -= v131;
              }
              while (v130);
            }
            else
            {
              v21 = v153;
            }
            v132 = v108;
            v133 = *(_QWORD *)(v9 + 16);
            if (sub_22F14EBCC(v108, (uint64_t)v129))
              v129 = *sub_22F14E94C(v132, v89, v133);
            if (*((_WORD *)v129 + 8) == 1)
            {
              v23 = v159;
              if (v154)
                v171 |= 8u;
              v134 = v152;
              if ((_DWORD)v165 != 1)
                v134 = 0;
              if (v134)
                v171 |= 0x10u;
            }
            else
            {
              v136 = 0;
              v137 = v173;
              v138 = 40;
              do
              {
                ++v136;
                v139 = *(unsigned __int16 *)&v129[v138];
                v138 += 24;
              }
              while (v139 != 1);
              sub_22F16351C((uint64_t)&__src, v129, &v129[24 * v136]);
              v140 = __src;
              v141 = v173;
              if (v136 == 1 && (**(_QWORD **)(*(_QWORD *)(v9 + 16) + 56) & 0x10) != 0)
              {
                v142 = (char *)__src + 24 * v173;
                if (*((_WORD *)v142 - 4) == 65)
                  *((_WORD *)v142 - 3) |= 0x80u;
              }
              if ((_DWORD)v137 != v141)
              {
                v143 = 24 * v141 - 24 * v137;
                v144 = &v140[12 * v137 + 8];
                do
                {
                  if (*v144 == 67)
                    *v144 = 0;
                  v144 += 12;
                  v143 -= 24;
                }
                while (v143);
              }
              if (*(_DWORD *)(v9 + 40))
              {
                sub_22F1934B8(v9, *v26, (unint64_t)&v140[12 * v137], (unint64_t)&v140[12 * v141]);
                v140 = __src;
              }
              v23 = v159;
              v140[12 * v137 + 9] = v140[12 * v137 + 9] & 0xFFFC | (*(_BYTE *)(v9 + 64) >> 1) & 2;
              *(_BYTE *)(v9 + 64) &= ~4u;
            }
LABEL_60:
            v156 = 1;
            goto LABEL_55;
          }
        }
        v23 = v159;
        v109 = v108 + 48;
        if ((_DWORD)v89)
        {
          v110 = v89;
          v24 = v45;
          do
          {
            v111 = *(unsigned __int16 *)(v109 + 16) == 1;
            v109 += 24;
            v110 -= v111;
          }
          while (v110);
        }
        else
        {
          v24 = v45;
        }
        if (*(_WORD *)(v109 + 16) != 1)
        {
          LODWORD(v112) = 0;
          v113 = 1;
          v114 = 40;
          do
          {
            v115 = v113;
            v112 = (v112 + 1);
            v116 = *(unsigned __int16 *)(v109 + v114);
            v114 += 24;
            ++v113;
          }
          while (v116 != 1);
          if ((_DWORD)v112)
          {
            if (v154)
            {
              v21 = v153;
              if (v173 >= 2
                && *((_WORD *)__src + 12 * v173 - 16) == 65
                && (_DWORD)v89 - *(_DWORD *)(*(_QWORD *)v9 + 24) == -1
                && (*(_WORD *)(*(_QWORD *)v9 + 36) & 0xC) != 0)
              {
                v117 = v115;
                v157 = v109;
                v146 = *(_QWORD *)(v9 + 16);
                v147 = *((_DWORD *)__src + 6 * v173 - 6);
                LODWORD(v173) = v173 - 1;
                v148 = *(_QWORD *)(v146 + 48);
                *(_DWORD *)(v148 + 312) = v147;
                *(_DWORD *)(v148 + 316) = 1218;
                if (*(char *)(v148 + 311) < 0)
                {
                  **(_BYTE **)(v148 + 288) = 0;
                  *(_QWORD *)(v148 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v148 + 288) = 0;
                  *(_BYTE *)(v148 + 311) = 0;
                }
                v160[0] = v148 + 320;
                v160[1] = 0;
                v160[2] = v148;
                v161 = 1;
                *(_BYTE *)(v148 + 320) = 0;
                *(_DWORD *)(v148 + 664) = 0;
                v149 = *(unsigned int *)(v148 + 776);
                if ((_DWORD)v149)
                {
                  v150 = *(_QWORD *)(v148 + 768);
                  v151 = 56 * v149;
                  do
                  {
                    if (*(char *)(v150 + v151 - 9) < 0)
                      operator delete(*(void **)(v150 + v151 - 32));
                    v151 -= 56;
                  }
                  while (v151);
                }
                *(_DWORD *)(v148 + 776) = 0;
                sub_22E3BB0B8((uint64_t)v160);
                v118 = 1;
                v109 = v157;
                v21 = v153;
                v24 = v45;
              }
              else
              {
                v117 = v115;
                v118 = 0;
              }
            }
            else
            {
              v117 = v115;
              v118 = 0;
              v21 = v153;
            }
            sub_22F16351C((uint64_t)&__src, (_BYTE *)v109, (_BYTE *)(v109 + 24 * v112));
            v127 = (char *)__src + 24 * v173;
            v103 = -24 * v117;
            v128 = v127 + 16;
            do
            {
              if (*(_WORD *)&v128[v103] == 67)
                *(_WORD *)&v128[v103] = 0;
              v103 += 24;
            }
            while (v103);
            if (*(_DWORD *)(v9 + 40))
              sub_22F1934B8(v9, *v26, (unint64_t)&v127[-24 * v112], (unint64_t)v127);
            if ((v118 & 1) == 0)
            {
              v120 = (char *)__src + 24 * (v173 - v112);
              v121 = *((_WORD *)v120 + 9);
              v122 = v121 & 0xFFFE;
              *((_WORD *)v120 + 9) = v121 & 0xFFFE;
              v123 = v121 & 0xFFFC;
              v124 = v122 | 2;
              if ((*(_BYTE *)(v9 + 64) & 4) != 0)
                v123 = v124;
              *((_WORD *)v120 + 9) = v123;
            }
            *(_BYTE *)(v9 + 64) &= ~4u;
            v156 = 1;
            goto LABEL_120;
          }
        }
        if (!v47)
        {
          if ((_DWORD)v165 == 1 && v48)
          {
            v171 |= 0x10u;
            v21 = v153;
            if (v154)
            {
              v126 = v173;
              goto LABEL_194;
            }
          }
          else
          {
            v21 = v153;
            if (v154)
            {
              v126 = v173;
              if ((_DWORD)v165)
              {
LABEL_194:
                if (v126 <= HIDWORD(v170))
                {
                  v171 |= 8u;
                  goto LABEL_196;
                }
              }
              LODWORD(v173) = v126 - 1;
            }
          }
LABEL_196:
          if (!*(_BYTE *)(v108 + 4))
            goto LABEL_60;
          v156 = 1;
          sub_22F1927DC(v9, (uint64_t *)&__src, 1, *(_QWORD *)v9, v89, *(_QWORD *)(*(_QWORD *)(v9 + 16) + 48), *(_QWORD **)(*(_QWORD *)(v9 + 16) + 56));
          goto LABEL_120;
        }
        v156 = 1;
        ++v22;
        v21 = v153;
      }
    }
LABEL_55:
    ++v22;
  }
  while (v22 != v21);
  if ((v156 & 1) != 0)
  {
    v107 = v173;
    *(_DWORD *)(v9 + 32) = v173;
    *(_QWORD *)(v9 + 24) = sub_22F17ACC8(*(_QWORD *)(v9 + 16), v9, __src, v107);
    *(_BYTE *)(v9 + 64) &= ~8u;
  }
LABEL_152:
  if (v164 != v166)
    free(v164);
  if (__src != v174)
    free(__src);
  v4 = *(_QWORD *)v9;
  v18 = *(_WORD *)(*(_QWORD *)v9 + 36);
LABEL_157:
  *(_WORD *)(v4 + 36) = v18 | 0x40;
}

uint64_t sub_22F192684(uint64_t result)
{
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_BYTE *)(result + 64);
  if ((v2 & 8) != 0)
  {
    result = *(_QWORD *)(result + 24);
    if (result)
    {
      result = MEMORY[0x2348A0E84](result, 0x1080C809070E284);
      v2 = *(_BYTE *)(v1 + 64);
    }
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 64) = v2 & 0xF7;
  }
  v3 = *(_QWORD **)(v1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 16);
    v5 = v3[1];
    v6 = -1431655765 * ((unint64_t)(v3[2] - v5) >> 3);
    if ((_DWORD)v6)
    {
      v7 = (_QWORD *)(v5 + 8);
      do
      {
        *v7 = *(v7 - 1);
        v7 += 3;
        --v6;
      }
      while (v6);
    }
    v3[4] = *(_QWORD *)(v4 + 2144);
    *(_QWORD *)(v4 + 2144) = v3;
  }
  return result;
}

uint64_t sub_22F192724(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t result;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  result = sub_22F192684(a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  if (a5)
    v13 = 8;
  else
    v13 = 0;
  if (a4)
    v14 = 16;
  else
    v14 = 0;
  if (a6)
    v15 = 32;
  else
    v15 = 0;
  v16 = v13 | v14 | v15 | *(_BYTE *)(a1 + 64) & 0xC0;
  *(_BYTE *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = 0;
  if (a3)
  {
    v17 = *(_BYTE *)(a2 + 18) & 1 | v16;
    *(_BYTE *)(a1 + 64) = v17;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 18) & 2 | v17;
  }
  return result;
}

uint64_t sub_22F1927DC(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5, uint64_t a6, _QWORD *a7)
{
  unsigned int v7;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  if ((*(_WORD *)(a4 + 36) & 0xC) == 0)
    return 0;
  v7 = *(_DWORD *)(a4 + 24);
  if (v7 - 1 != a5 || (a3 & 1) == 0 && (*a7 & 0x10) == 0)
    return 0;
  if (v7 <= 1 && (*a7 & 0x80000001) == 1)
    return 0;
  v12 = *((_DWORD *)a2 + 2);
  if (!v12)
    return 0;
  v13 = *a2 + 24 * v12;
  if (*(_WORD *)(v13 - 8) != 65)
    return 0;
  if (a3)
  {
    *(_DWORD *)(a6 + 312) = *(_DWORD *)(v13 - 24);
    *(_DWORD *)(a6 + 316) = 1218;
    if (*(char *)(a6 + 311) < 0)
    {
      **(_BYTE **)(a6 + 288) = 0;
      *(_QWORD *)(a6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a6 + 288) = 0;
      *(_BYTE *)(a6 + 311) = 0;
    }
    v20[0] = a6 + 320;
    v20[1] = 0;
    v20[2] = a6;
    v21 = 1;
    *(_BYTE *)(a6 + 320) = 0;
    *(_DWORD *)(a6 + 664) = 0;
    v15 = *(unsigned int *)(a6 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(a6 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *(_DWORD *)(a6 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v20);
    v12 = *((_DWORD *)a2 + 2);
  }
  v18 = v12 - 1;
  *((_DWORD *)a2 + 2) = v12 - 1;
  if (v12 != 1)
  {
    v19 = *a2;
    if (*(_WORD *)(*a2 + 24 * v18 - 8) == 67)
    {
      v18 = v12 - 2;
      *((_DWORD *)a2 + 2) = v12 - 2;
    }
    *(_WORD *)(v19 + 24 * v18 - 6) |= 0x200u;
  }
  *(_BYTE *)(a1 + 64) &= ~4u;
  return 1;
}

uint64_t sub_22F19295C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int16 *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 *v40;
  _DWORD *v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v68;
  unsigned int v69;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  _DWORD *v77;
  unsigned int v78;
  unsigned int v79;
  _DWORD *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  _DWORD *v85;
  unsigned int v86;
  unsigned int v87;
  _DWORD *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  _DWORD *v93;
  unsigned int v94;
  unsigned int v95;
  _DWORD *v96;
  unsigned int v97;
  int v98;
  int v99;
  uint64_t v104;
  __int128 v106;
  uint64_t v107;
  unsigned __int8 v108;
  void *__src;
  unsigned __int8 *v110;
  unint64_t v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114[2];
  char v115;
  void *v116;
  uint64_t v117;
  _QWORD v118[16];
  char *v119;
  __int128 v120;
  _QWORD v121[18];

  v5 = a3;
  v6 = (uint64_t)a2;
  v121[16] = *MEMORY[0x24BDAC8D0];
  LODWORD(v8) = *a5;
  if ((**(_BYTE **)(*(_QWORD *)(a1 + 16) + 56) & 0x20) != 0
    && v8 >= 2
    && *(_WORD *)(a3 + 24 * (v8 - 2) + 16) == 67)
  {
    *((_WORD *)a2 + 9) &= ~2u;
  }
  v119 = (char *)v121;
  v120 = xmmword_22F44E310;
  v9 = *a2;
  v10 = *(unsigned __int16 *)(a3 + 24 * v8 + 16);
  while (1)
  {
    v11 = v8;
    v12 = *(unsigned int *)(v5 + 24 * v8);
    if (v10 == 67)
    {
      v11 = v8 + 1;
      *a5 = v8 + 1;
    }
    v13 = v5 + 24 * v11;
    v14 = (*(_DWORD *)(v13 + 4) + *(_DWORD *)(v6 + 4));
    v15 = v120;
    if ((_QWORD)v120 != v14)
    {
      if ((unint64_t)v120 <= v14)
      {
        if (*((_QWORD *)&v120 + 1) < v14)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v15 = v120;
        }
        if (v14 != v15)
          bzero(&v119[v15], v14 - v15);
      }
      *(_QWORD *)&v120 = v14;
    }
    __src = v119;
    v108 = 0;
    v16 = sub_22F1414C0(v6, (uint64_t *)&__src, *(uint64_t **)(*(_QWORD *)(a1 + 16) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 16) + 56), &v108);
    if (__src != v119)
      memcpy(v119, __src, v16);
    if (v108)
      goto LABEL_117;
    __src = &v119[v16];
    v17 = sub_22F1414C0(v13, (uint64_t *)&__src, *(uint64_t **)(*(_QWORD *)(a1 + 16) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 16) + 56), &v108);
    if (v108)
      goto LABEL_117;
    v18 = v17;
    v104 = v12;
    v19 = v16;
    if (v17)
    {
      v20 = &v119[v16];
      if (__src != v20)
        memcpy(v20, __src, v18);
    }
    v21 = v18 + v16;
    v22 = v120;
    if ((_QWORD)v120 != v21)
    {
      if ((unint64_t)v120 <= v21)
      {
        if (*((_QWORD *)&v120 + 1) < v21)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v22 = v120;
        }
        if (v21 != v22)
          bzero(&v119[v22], v21 - v22);
      }
      *(_QWORD *)&v120 = v18 + v16;
    }
    v23 = *(_QWORD *)(a1 + 16);
    v114[0] = 0;
    v24 = sub_22F19144C(*(_DWORD **)(v23 + 96), v119, v18 + v16, v114);
    v25 = v24;
    v26 = (unsigned __int16 *)v114[0];
    if (*(unsigned __int16 *)(v6 + 16) - 5 <= 1
      && *(unsigned __int16 *)(v5 + 24 * v11 + 16) - 5 <= 1)
    {
      v27 = 0;
      ++*(_DWORD *)(*(_QWORD *)(a1 + 16) + 2232);
      LOWORD(v107) = 6;
      *((_QWORD *)&v106 + 1) = v26;
      *(_QWORD *)&v106 = __PAIR64__(v21, v24);
      goto LABEL_82;
    }
    v28 = *(_QWORD *)(a1 + 16);
    ++*(_DWORD *)(v28 + 2228);
    v29 = *(_QWORD *)(v28 + 88);
    v30 = *(_DWORD *)(v29 + 304);
    v31 = v30 + 1;
    if (v30 + 1 > 1)
    {
      if ((v30 & 0x80000000) != 0)
      {
        v33 = -2 - v30;
        if (((*(_QWORD *)(*(_QWORD *)(v29 + 224) + 8 * ((-2 - v30) >> 6)) >> (-2 - v30)) & 1) != 0)
          v32 = (_DWORD *)(*(_QWORD *)(v29 + 200) + 24 * v33);
        else
          v32 = (_DWORD *)sub_22F1E1134(v29, v33, 0);
      }
      else
      {
        v32 = (_DWORD *)(*(_QWORD *)(v29 + 184) + 24 * v30);
      }
    }
    else
    {
      v32 = *(_DWORD **)(v29 + 184);
    }
    v34 = v25 & 0x7FFFFFFF;
    if ((*v32 & 0x7FFFFFFFu) <= v34
      && (v30 == -2
       || (v31 != *(_DWORD *)(v29 + 192)
         ? ((v31 & 0x80000000) != 0
          ? ((v38 = -3 - v30,
              ((*(_QWORD *)(*(_QWORD *)(v29 + 224) + 8 * ((-3 - v30) >> 6)) >> (-3 - v30)) & 1) == 0)
           ? (v37 = (_DWORD *)sub_22F1E1134(v29, v38, 0))
           : (v37 = (_DWORD *)(*(_QWORD *)(v29 + 200) + 24 * v38)))
          : (v37 = (_DWORD *)(*(_QWORD *)(v29 + 184) + 24 * v31)),
            v36 = *v37 & 0x7FFFFFFF)
         : (v36 = *(_DWORD *)(v29 + 216)),
           v36 > v34)))
    {
      v35 = *(_DWORD *)(v29 + 304);
    }
    else
    {
      v35 = sub_22F1E1EE8(v29, v34);
    }
    v39 = v35;
    sub_22F1E1E78((_QWORD *)v29, v35, (uint64_t)v114);
    if (!v115)
      goto LABEL_183;
    v40 = (unsigned __int16 *)v114[0];
    v41 = sub_22E49F3DC((_QWORD *)v29, v39);
    if (v41)
      v42 = *v41 & 0x7FFFFFFF;
    else
      v42 = 0;
    v6 = (uint64_t)a2;
    sub_22F140DA4((uint64_t)v114, v42, *(_DWORD **)(*(_QWORD *)(a1 + 16) + 56), v40, v26, (uint64_t)v26 + v19 + v18, 1);
    sub_22F14651C(v114, &v106);
    v43 = v118[9] != v118[5] || (unsigned __int16)v107 == 1;
    v44 = !v43;
    if (!v43)
    {
      if ((unsigned __int16)v107 == 67)
      {
        v45 = 0;
        LOWORD(v107) = 0;
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
    v47 = v104 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    v48 = *(unsigned int *)(a1 + 44) | 0x100000000;
    LODWORD(v110) = *(_DWORD *)(v46 + 216) | 0x80000000;
    v111 = v47;
    v112 = v48;
    v49 = sub_22E4EF088(v46 + 184, (unint64_t)&v110, 1);
    v50 = *(_QWORD *)(v46 + 184) + 24 * *(unsigned int *)(v46 + 192);
    v51 = *(_OWORD *)v49;
    *(_QWORD *)(v50 + 16) = *(_QWORD *)(v49 + 16);
    *(_OWORD *)v50 = v51;
    ++*(_DWORD *)(v46 + 192);
    LODWORD(v50) = *(_DWORD *)(v46 + 216);
    *(_DWORD *)(v46 + 216) = v50 + 3;
    v52 = v50 | 0x80000000;
    v53 = *(_QWORD *)(a1 + 16);
    v54 = **(_QWORD **)(v53 + 56);
    if ((v54 & 0x20) != 0 && *((_WORD *)a2 + 8) == 42 && *(_WORD *)(a3 + 24 * v11 + 16) == 42)
    {
      v55 = *(_QWORD *)(v53 + 48);
      *(_DWORD *)(v55 + 312) = v52;
      *(_DWORD *)(v55 + 316) = 1200;
      if (*(char *)(v55 + 311) < 0)
      {
        **(_BYTE **)(v55 + 288) = 0;
        *(_QWORD *)(v55 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v55 + 288) = 0;
        *(_BYTE *)(v55 + 311) = 0;
      }
      v110 = (unsigned __int8 *)(v55 + 320);
      v111 = 0;
      v112 = v55;
      v113 = 1;
      *(_BYTE *)(v55 + 320) = 0;
      *(_DWORD *)(v55 + 664) = 0;
      v61 = *(unsigned int *)(v55 + 776);
      if ((_DWORD)v61)
      {
        v62 = *(_QWORD *)(v55 + 768);
        v63 = 56 * v61;
        do
        {
          if (*(char *)(v62 + v63 - 9) < 0)
            operator delete(*(void **)(v62 + v63 - 32));
          v63 -= 56;
        }
        while (v63);
      }
      *(_DWORD *)(v55 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v110);
      *(_WORD *)(*(_QWORD *)a1 + 36) &= ~0x40u;
      sub_22F175808(*(_QWORD *)(a1 + 16), (uint64_t)a2);
LABEL_77:
      v45 = 0;
      goto LABEL_78;
    }
    if ((v54 & 0x40000000) == 0)
    {
      if ((v54 & 0x20) != 0)
        v56 = 1219;
      else
        v56 = 1104;
      v57 = *(_QWORD *)(v53 + 48);
      *(_DWORD *)(v57 + 312) = v52;
      *(_DWORD *)(v57 + 316) = v56;
      if (*(char *)(v57 + 311) < 0)
      {
        **(_BYTE **)(v57 + 288) = 0;
        *(_QWORD *)(v57 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v57 + 288) = 0;
        *(_BYTE *)(v57 + 311) = 0;
      }
      v110 = (unsigned __int8 *)(v57 + 320);
      v111 = 0;
      v112 = v57;
      v113 = 1;
      *(_BYTE *)(v57 + 320) = 0;
      *(_DWORD *)(v57 + 664) = 0;
      v58 = *(unsigned int *)(v57 + 776);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(v57 + 768);
        v60 = 56 * v58;
        do
        {
          if (*(char *)(v59 + v60 - 9) < 0)
            operator delete(*(void **)(v59 + v60 - 32));
          v60 -= 56;
        }
        while (v60);
      }
      *(_DWORD *)(v57 + 776) = 0;
      sub_22E3B89A8(&v110, v119, v120);
      sub_22E3BB0B8((uint64_t)&v110);
    }
    v45 = 1;
LABEL_78:
    v114[0] = (uint64_t)&unk_24FAC8A48;
    sub_22E730D24((uint64_t)v118);
    if (v116 != &v117)
      free(v116);
    if (!v44)
      break;
    v27 = WORD1(v107);
    v5 = a3;
LABEL_82:
    WORD1(v107) = v27 & 0xFFFC | *(_WORD *)(v6 + 18) & 3;
    ++*a5;
    *(_OWORD *)v6 = v106;
    *(_QWORD *)(v6 + 16) = v107;
    v8 = *a5;
    if (a4 != v8)
    {
      v10 = 67;
      if (*(_WORD *)(v5 + 24 * v8 + 16) == 67)
        continue;
    }
    goto LABEL_101;
  }
  if (!v45)
  {
LABEL_117:
    v73 = 1;
    goto LABEL_184;
  }
  LODWORD(v8) = *a5;
  v5 = a3;
LABEL_101:
  LODWORD(v64) = *(_DWORD *)(v5 + 24 * (v8 - 1));
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
  if ((v9 & 0x80000000) == 0)
  {
    v66 = *(_DWORD *)(a1 + 56) & 0x7FFFFFFF;
    if (v9 < v66 + *(_DWORD *)(a1 + 60) && v9 >= v66)
      v68 = v9 - v66;
    else
      v68 = 0;
    v9 = (v68 + *(_DWORD *)(a1 + 48));
  }
  if ((v64 & 0x80000000) != 0)
  {
    v72 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v69 = *(_DWORD *)(a1 + 56) & 0x7FFFFFFF;
    if (v64 < v69 + *(_DWORD *)(a1 + 60) && v64 >= v69)
      v71 = v64 - v69;
    else
      v71 = 0;
    v72 = *(_DWORD *)(a1 + 48);
    LODWORD(v64) = v71 + v72;
  }
  v74 = v72 & 0x7FFFFFFF;
  v75 = *(_DWORD *)(v65 + 304);
  v76 = v75 + 1;
  if (v75 + 1 > 1)
  {
    if ((v75 & 0x80000000) != 0)
    {
      v78 = -2 - v75;
      if (((*(_QWORD *)(*(_QWORD *)(v65 + 224) + 8 * ((-2 - v75) >> 6)) >> (-2 - v75)) & 1) != 0)
        v77 = (_DWORD *)(*(_QWORD *)(v65 + 200) + 24 * v78);
      else
        v77 = (_DWORD *)sub_22F1E1134(v65, v78, 0);
    }
    else
    {
      v77 = (_DWORD *)(*(_QWORD *)(v65 + 184) + 24 * v75);
    }
  }
  else
  {
    v77 = *(_DWORD **)(v65 + 184);
  }
  if ((*v77 & 0x7FFFFFFFu) <= v74
    && (v75 == -2
     || (v76 != *(_DWORD *)(v65 + 192)
       ? ((v76 & 0x80000000) != 0
        ? ((v81 = -3 - v75,
            ((*(_QWORD *)(*(_QWORD *)(v65 + 224) + 8 * ((-3 - v75) >> 6)) >> (-3 - v75)) & 1) == 0)
         ? (v80 = (_DWORD *)sub_22F1E1134(v65, v81, 0))
         : (v80 = (_DWORD *)(*(_QWORD *)(v65 + 200) + 24 * v81)))
        : (v80 = (_DWORD *)(*(_QWORD *)(v65 + 184) + 24 * v76)),
          v79 = *v80 & 0x7FFFFFFF)
       : (v79 = *(_DWORD *)(v65 + 216)),
         v79 > v74)))
  {
    v82 = *(_DWORD *)(v65 + 304);
  }
  else
  {
    v82 = sub_22F1E1EE8(v65, v74);
  }
  while (1)
  {
    v83 = *(_DWORD *)(v65 + 304);
    v84 = v83 + 1;
    if (v83 + 1 > 1)
    {
      if ((v83 & 0x80000000) != 0)
      {
        v86 = -2 - v83;
        v85 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v65 + 224) + 8 * ((-2 - v83) >> 6)) >> (-2 - v83)) & 1) != 0
                       ? *(_QWORD *)(v65 + 200) + 24 * v86
                       : sub_22F1E1134(v65, v86, 0));
      }
      else
      {
        v85 = (_DWORD *)(*(_QWORD *)(v65 + 184) + 24 * v83);
      }
    }
    else
    {
      v85 = *(_DWORD **)(v65 + 184);
    }
    if ((*v85 & 0x7FFFFFFFu) <= (v9 & 0x7FFFFFFF)
      && (v83 == -2
       || (v84 != *(_DWORD *)(v65 + 192)
         ? ((v84 & 0x80000000) != 0
          ? ((v89 = -3 - v83,
              ((*(_QWORD *)(*(_QWORD *)(v65 + 224) + 8 * ((-3 - v83) >> 6)) >> (-3 - v83)) & 1) == 0)
           ? (v88 = (_DWORD *)sub_22F1E1134(v65, v89, 0))
           : (v88 = (_DWORD *)(*(_QWORD *)(v65 + 200) + 24 * v89)))
          : (v88 = (_DWORD *)(*(_QWORD *)(v65 + 184) + 24 * v84)),
            v87 = *v88 & 0x7FFFFFFF)
         : (v87 = *(_DWORD *)(v65 + 216)),
           v87 > (v9 & 0x7FFFFFFF))))
    {
      v90 = *(_DWORD *)(v65 + 304);
    }
    else
    {
      v90 = sub_22F1E1EE8(v65, v9 & 0x7FFFFFFF);
    }
    if (v90 == v82)
      break;
    v9 = sub_22F1E25A4((_QWORD *)v65, v9);
  }
  while (1)
  {
    v91 = *(_DWORD *)(v65 + 304);
    v92 = v91 + 1;
    if (v91 + 1 > 1)
    {
      if ((v91 & 0x80000000) != 0)
      {
        v94 = -2 - v91;
        v93 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v65 + 224) + 8 * ((-2 - v91) >> 6)) >> (-2 - v91)) & 1) != 0
                       ? *(_QWORD *)(v65 + 200) + 24 * v94
                       : sub_22F1E1134(v65, v94, 0));
      }
      else
      {
        v93 = (_DWORD *)(*(_QWORD *)(v65 + 184) + 24 * v91);
      }
    }
    else
    {
      v93 = *(_DWORD **)(v65 + 184);
    }
    if ((*v93 & 0x7FFFFFFFu) <= (v64 & 0x7FFFFFFF)
      && (v91 == -2
       || (v92 != *(_DWORD *)(v65 + 192)
         ? ((v92 & 0x80000000) != 0
          ? ((v97 = -3 - v91,
              ((*(_QWORD *)(*(_QWORD *)(v65 + 224) + 8 * ((-3 - v91) >> 6)) >> (-3 - v91)) & 1) == 0)
           ? (v96 = (_DWORD *)sub_22F1E1134(v65, v97, 0))
           : (v96 = (_DWORD *)(*(_QWORD *)(v65 + 200) + 24 * v97)))
          : (v96 = (_DWORD *)(*(_QWORD *)(v65 + 184) + 24 * v92)),
            v95 = *v96 & 0x7FFFFFFF)
         : (v95 = *(_DWORD *)(v65 + 216)),
           v95 > (v64 & 0x7FFFFFFF))))
    {
      v98 = *(_DWORD *)(v65 + 304);
    }
    else
    {
      v98 = sub_22F1E1EE8(v65, v64 & 0x7FFFFFFF);
    }
    if (v98 == v82)
      break;
    v64 = (unint64_t)sub_22F1E25A4((_QWORD *)v65, v64) >> 32;
  }
  v99 = a2[1];
  v114[0] = *a2 | (unint64_t)(v9 << 32);
  v114[1] = v64 | 0x100000000;
  v73 = 0;
  *a2 = sub_22F1E1CA0(v65, v114, v99, 0, 0);
  if (*((_WORD *)a2 + 8) == 6)
  {
    sub_22F18F0FC(*(_QWORD *)(a1 + 16), (uint64_t)a2);
LABEL_183:
    v73 = 0;
  }
LABEL_184:
  if (v119 != (char *)v121)
    free(v119);
  return v73;
}

uint64_t sub_22F1934B8(uint64_t result, int a2, unint64_t a3, unint64_t a4)
{
  int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  char v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _BOOL4 v35;
  unsigned int v36;
  unsigned int v37;

  if (a3 < a4)
  {
    v5 = (int *)a3;
    v6 = *(_QWORD *)(*(_QWORD *)(result + 16) + 88);
    v7 = *(_DWORD *)(result + 56) & 0x7FFFFFFF;
    if ((a2 & 0x7FFFFFFFu) < v7 + *(_DWORD *)(result + 60) && (a2 & 0x7FFFFFFFu) >= v7)
      v9 = (a2 & 0x7FFFFFFF) - v7;
    else
      v9 = 0;
    v10 = v9 + *(_DWORD *)(result + 48);
    while (1)
    {
      v11 = *v5;
      if (a4 - (_QWORD)v5 == 24)
        break;
      v12 = v5 + 6;
      if ((unint64_t)(v5 + 6) >= a4 || (v13 = *v12, ((*v12 ^ v11) & 0x80000000) != 0))
      {
        v26 = *v5;
        v18 = v5;
      }
      else
      {
        v14 = *(_DWORD *)(v6 + 220);
        v15 = (v11 & 0x7FFFFFFF) < v14;
        v16 = (v13 & 0x7FFFFFFFu) >= v14;
        if ((v13 & 0x7FFFFFFF) - (v11 & 0x7FFFFFFF) > 0x32)
          v17 = v15 ^ v16;
        else
          v17 = 0;
        v18 = v5;
        if (v15 != v16 && (v17 & 1) == 0)
        {
          v19 = v5 + 12;
          v20 = *v5;
          while (1)
          {
            v12 = v19;
            if (v20 < 0 && !sub_22E670F58(v6, v20, v13))
              break;
            if ((unint64_t)v12 < a4)
            {
              v21 = *v12;
              if (((*v12 ^ v13) & 0x80000000) == 0)
              {
                v22 = *(_DWORD *)(v6 + 220);
                v23 = (v13 & 0x7FFFFFFFu) < v22;
                v24 = (v21 & 0x7FFFFFFFu) >= v22;
                v25 = v23 ^ v24;
                if ((v21 & 0x7FFFFFFF) - (v13 & 0x7FFFFFFFu) <= 0x32)
                  v25 = 0;
                if (v23 != v24)
                {
                  v19 = v12 + 6;
                  v20 = v13;
                  v13 = *v12;
                  if ((v25 & 1) == 0)
                    continue;
                }
              }
            }
            v18 = v12 - 6;
            goto LABEL_27;
          }
          v18 = v12 - 12;
          v12 -= 6;
        }
LABEL_27:
        v26 = *v18;
      }
      v27 = v11 & 0x7FFFFFFF;
      v28 = v26 & 0x7FFFFFFF;
      v29 = *(_DWORD *)(v6 + 220);
      v30 = (v11 & 0x7FFFFFFF) < v29;
      v31 = v28 >= v29;
      v32 = v28 - (v11 & 0x7FFFFFFF);
      if (v30 == v31)
        v32 = 0;
      result = sub_22F1E1C10(v6, v11, v10, v32 + v18[1]);
      if (v5 < v12)
      {
        v33 = *(_DWORD *)(v6 + 220);
        do
        {
          v34 = *v5 & 0x7FFFFFFF;
          v35 = v34 >= v33;
          v36 = v34 - v27;
          if (v27 < v33 != v35)
            v37 = v36;
          else
            v37 = 0;
          *v5 = v37 + result;
          v5 += 6;
        }
        while (v5 < v12);
      }
      if ((unint64_t)v5 >= a4)
        return result;
    }
    result = sub_22F1E1C10(v6, *v5, v10, v5[1]);
    *v5 = result;
  }
  return result;
}

uint64_t sub_22F1936D4(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  char v6;
  __int16 v7;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  int v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v33;
  char v34;
  __int16 v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40[2];

  v4 = (unsigned int *)(a1 + 36);
  v5 = *(_DWORD *)(a1 + 36);
  if (v5 != *(_DWORD *)(a1 + 32))
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
    *(_DWORD *)(a1 + 36) = v5 + 1;
    v11 = (__int128 *)(v9 + 24 * v5);
    v12 = *v11;
    *((_QWORD *)a2 + 2) = *((_QWORD *)v11 + 2);
    *(_OWORD *)a2 = v12;
    if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
      *((_WORD *)a2 + 9) |= 0x800u;
    v13 = *(unsigned int *)(a1 + 32);
    v14 = *(_DWORD *)(a1 + 36);
    if (v14 == (_DWORD)v13 || !*(_QWORD *)a1)
    {
      v17 = 1;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(unsigned __int16 *)(v15 + 24 * v14 + 16);
      if (v16 == 67
        || (v17 = 1, (**(_BYTE **)(*(_QWORD *)(a1 + 16) + 56) & 0x10) != 0)
        && *((_WORD *)a2 + 8) == 5
        && (v30 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16), *(_DWORD *)v30 == 1)
        && (v16 - 7) <= 0xB
        && *(_BYTE *)(v30 + 16) == 76
        && (*(_WORD *)(v15 + 24 * v14 + 18) & 0x100) != 0)
      {
        if ((sub_22F19295C(a1, a2, v15, v13, v4) & 1) != 0)
          return 1;
        v17 = 0;
      }
    }
    v18 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v18)
    {
      v19 = *a2;
      v20 = *(_DWORD *)(a1 + 52);
      v21 = v19 & 0x7FFFFFFF;
      v22 = *(_DWORD *)(v10 + 220);
      v23 = (v19 & 0x7FFFFFFF) >= v22;
      v24 = (v22 > v20) ^ v23;
      v25 = (v19 & 0x7FFFFFFF) < v20;
      if (!v24)
        v25 = v23;
      if (v25)
      {
        if (*((_WORD *)a2 + 8) == 4)
        {
          v26 = a2[1];
          v27 = v19 | (v18 << 32);
          v28 = *(unsigned int *)(a1 + 44) | 0x100000000;
          v40[0] = v27;
          v40[1] = v28;
          v29 = sub_22F1E1CA0(v10, v40, v26, 0, 0);
        }
        else
        {
          v31 = *(_DWORD *)(a1 + 56) & 0x7FFFFFFF;
          if (v21 < v31 + *(_DWORD *)(a1 + 60) && v21 >= v31)
            v33 = v21 - v31;
          else
            v33 = 0;
          v29 = v33 + *(_DWORD *)(a1 + 48);
        }
        *a2 = v29;
      }
    }
    v34 = *(_BYTE *)(a1 + 64);
    if (v5)
    {
      if ((v34 & 1) != 0)
      {
        *((_WORD *)a2 + 9) |= 1u;
        v34 = *(_BYTE *)(a1 + 64);
      }
      if ((v34 & 2) == 0)
      {
LABEL_48:
        *(_BYTE *)(a1 + 64) &= 0xFCu;
        v37 = *((unsigned __int16 *)a2 + 8);
        if ((v37 - 399) >= 0x29
          && (unsigned __int16)(v37 - 7) >= 6u
          && ((v37 - 1) >= 0x12 || ((0x3F001u >> (v37 - 1)) & 1) == 0)
          && *((_QWORD *)a2 + 1))
        {
          v38 = 0;
          if ((v37 - 13) >= 6 && v37 != 1)
            v38 = *((_QWORD *)a2 + 1);
          *((_WORD *)a2 + 8) = *(_WORD *)v38 & 0x1FF;
          if ((*(_BYTE *)(v38 + 3) & 0x20) != 0)
            v39 = v17;
          else
            v39 = 1;
          if ((v39 & 1) == 0)
            sub_22F18F23C(*(_QWORD *)(a1 + 16), (uint64_t)a2);
          if ((*(_BYTE *)(a1 + 64) & 0x10) == 0 && (*(_BYTE *)(v38 + 3) & 0x80) != 0)
            return sub_22F18F434(*(_QWORD *)(a1 + 16), a2);
        }
        return 1;
      }
      v35 = *((_WORD *)a2 + 9);
    }
    else
    {
      v35 = *((_WORD *)a2 + 9) & 0xFFFE | v34 & 1;
      *((_WORD *)a2 + 9) = v35;
      if ((*(_BYTE *)(a1 + 64) & 2) == 0)
      {
        v36 = v35 & 0xFFFD;
LABEL_47:
        *((_WORD *)a2 + 9) = v36;
        goto LABEL_48;
      }
    }
    v36 = v35 | 2;
    goto LABEL_47;
  }
  if (*(_QWORD *)a1)
  {
    *(_WORD *)(*(_QWORD *)a1 + 36) &= ~0x40u;
    v5 = *v4;
  }
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  a2[4] = 0;
  v6 = *(_BYTE *)(a1 + 64);
  *((_WORD *)a2 + 9) = v6 & 1;
  if ((*(_BYTE *)(a1 + 64) & 6) != 0)
    v7 = v6 & 1 | 2;
  else
    v7 = v6 & 1;
  if (!v5)
    v7 |= 0x10u;
  *((_WORD *)a2 + 9) = v7;
  return sub_22F17562C(*(_QWORD *)(a1 + 16), (uint64_t)a2);
}

void sub_22F193A38(std::string *__str, int64_t a2)
{
  std::string *v4;
  char v5;
  uint64_t v6;
  std::string::size_type size;
  std::string::value_type v8;
  int v9;
  std::string::pointer data;
  std::string::value_type *v11;
  std::string *v12;
  char v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string::value_type v16;
  int v17;
  std::string::pointer v18;
  std::string *v19;
  std::string::value_type *v20;
  void **v21;
  std::string *v22;
  std::string::value_type v23;
  int v24;
  size_t v25;
  size_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::string::value_type v34;
  int v35;
  std::string::pointer v36;
  std::string::size_type v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  void **v45;
  size_t v46;
  llvm::cas *v47;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  int64_t v62;
  __int16 v63;
  __int16 v64;
  _QWORD *v65;
  char v66;
  _BYTE v67[24];
  _WORD v68[64];
  _QWORD *v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v4 = (std::string *)((char *)__str + 88);
  v5 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v6 = v5 & 0x7F;
  if (v5 >= 0)
    size = v5 & 0x7F;
  else
    size = __str->__r_.__value_.__l.__size_;
  v8 = __str[4].__r_.__value_.__s.__data_[15];
  v9 = v8;
  data = (std::string::pointer)(v8 & 0x7F);
  if (v9 < 0)
    data = __str[4].__r_.__value_.__l.__data_;
  if ((std::string::pointer)size != data)
    goto LABEL_34;
  if (v9 >= 0)
    v11 = &__str[3].__r_.__value_.__s.__data_[16];
  else
    v11 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__str->__r_.__value_.__l.__data_, v11, __str->__r_.__value_.__l.__size_))
      goto LABEL_34;
  }
  else if ((v5 & 0x7F) != 0)
  {
    v12 = __str;
    while (v12->__r_.__value_.__s.__data_[0] == *v11)
    {
      v12 = (std::string *)((char *)v12 + 1);
      ++v11;
      if (!--v6)
        goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_17:
  v13 = HIBYTE(__str[1].__r_.__value_.__r.__words[2]);
  v14 = v13 & 0x7F;
  if (v13 >= 0)
    v15 = v13 & 0x7F;
  else
    v15 = __str[1].__r_.__value_.__l.__size_;
  v16 = __str[5].__r_.__value_.__s.__data_[15];
  v17 = v16;
  v18 = (std::string::pointer)(v16 & 0x7F);
  if (v17 < 0)
    v18 = __str[5].__r_.__value_.__l.__data_;
  if ((std::string::pointer)v15 == v18)
  {
    v19 = __str + 1;
    if (v17 >= 0)
      v20 = &__str[4].__r_.__value_.__s.__data_[16];
    else
      v20 = (std::string::value_type *)__str[4].__r_.__value_.__r.__words[2];
    if ((*((_BYTE *)&__str[1].__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if ((v13 & 0x7F) != 0)
      {
        while (v19->__r_.__value_.__s.__data_[0] == *v20)
        {
          v19 = (std::string *)((char *)v19 + 1);
          ++v20;
          if (!--v14)
            goto LABEL_32;
        }
        goto LABEL_34;
      }
LABEL_32:
      if (__str[2].__r_.__value_.__l.__size_ && __str[3].__r_.__value_.__r.__words[0])
        return;
      goto LABEL_34;
    }
    if (!memcmp(v19->__r_.__value_.__l.__data_, v20, __str[1].__r_.__value_.__l.__size_))
      goto LABEL_32;
  }
LABEL_34:
  std::string::operator=(v4, __str);
  v21 = (void **)&__str[4].__r_.__value_.__r.__words[2];
  v22 = std::string::operator=((std::string *)((char *)__str + 112), __str + 1);
  __str[5].__r_.__value_.__s.__data_[16] = __str[2].__r_.__value_.__s.__data_[0];
  v23 = __str[4].__r_.__value_.__s.__data_[15];
  v24 = v23;
  v25 = v23 & 0x7F;
  if (v24 >= 0)
    v26 = v25;
  else
    v26 = __str[4].__r_.__value_.__r.__words[0];
  if (v26)
  {
    *(_QWORD *)v67 = v68;
    *(_OWORD *)&v67[8] = xmmword_22F44E310;
    if (v24 < 0)
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    if (v26 == 4)
    {
      if (LODWORD(v4->__r_.__value_.__l.__data_) == 1869903201)
      {
        llvm::cas::getDefaultOnDiskCASPath();
        v4 = *(std::string **)v67;
        v26 = *(_QWORD *)&v67[8];
      }
      else
      {
        v26 = 4;
      }
    }
    v64 = 261;
    __p[0] = v4;
    __p[1] = (void *)v26;
    llvm::cas::createOnDiskCAS();
    sub_22F418AF0((char *)&v69, (uint64_t)&v65);
    v51 = v65;
    v65 = 0;
    if (v51)
    {
      v52 = 8;
      if ((v66 & 1) == 0)
        v52 = 128;
      (*(void (**)(void))(*v51 + v52))();
    }
    if (v70)
    {
      v28 = (std::string::size_type)v69;
      if (v69)
      {
        v29 = (_QWORD *)operator new();
        *v29 = &unk_24FA70100;
        v29[1] = 0;
        v29[2] = 0;
        v29[3] = v28;
      }
      else
      {
        v29 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 312) = 0x20B700000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      __p[0] = (void *)(a2 + 320);
      __p[1] = 0;
      v62 = a2;
      v63 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v58 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(a2 + 768);
        v60 = 56 * v58;
        do
        {
          if (*(char *)(v59 + v60 - 9) < 0)
            operator delete(*(void **)(v59 + v60 - 32));
          v60 -= 56;
        }
        while (v60);
      }
      *(_DWORD *)(a2 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)__p, v4, v26);
      sub_22E3BB0B8((uint64_t)__p);
      v29 = 0;
      v28 = 0;
    }
    v27 = *(_QWORD **)v67;
    if (*(_WORD **)v67 != v68)
      free(*(void **)v67);
  }
  else
  {
    v27 = (_QWORD *)llvm::cas::createInMemoryCAS((llvm::cas *)v22);
    v28 = *(_QWORD *)v67;
    if (*(_QWORD *)v67)
    {
      v27 = (_QWORD *)operator new();
      v29 = v27;
      v30 = *(_QWORD *)v67;
      *v27 = &unk_24FA70100;
      v27[1] = 0;
      v27[2] = 0;
      v27[3] = v30;
    }
    else
    {
      v29 = 0;
    }
  }
  v31 = (std::__shared_weak_count *)__str[2].__r_.__value_.__r.__words[2];
  __str[2].__r_.__value_.__l.__size_ = v28;
  __str[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = __str[5].__r_.__value_.__s.__data_[15];
  v35 = v34;
  v36 = (std::string::pointer)(v34 & 0x7F);
  if (v35 < 0)
    v36 = __str[5].__r_.__value_.__l.__data_;
  if (v36)
  {
    if (v35 < 0)
    {
      sub_22E3BB2B4(__p, *v21, __str[5].__r_.__value_.__r.__words[0]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v21;
      v62 = __str[5].__r_.__value_.__l.__size_;
    }
    if (v62 >= 0)
      v43 = (void *)(HIBYTE(v62) & 0x7F);
    else
      v43 = __p[1];
    if (v43 == (void *)4)
    {
      v44 = v62 >= 0 ? HIBYTE(v62) : (unint64_t)__p[1];
      v45 = v62 >= 0 ? __p : (void **)__p[0];
      v46 = v44 >= 4 ? 4 : v44;
      v47 = (llvm::cas *)memcmp(v45, "auto", v46);
      if (!(_DWORD)v47 && v44 == 4)
      {
        llvm::cas::getDefaultOnDiskActionCachePath(v47);
        if (SHIBYTE(v62) < 0)
          operator delete(__p[0]);
        v62 = *(_QWORD *)&v67[16];
        *(_OWORD *)__p = *(_OWORD *)v67;
      }
    }
    llvm::cas::createOnDiskActionCache();
    sub_22F418AF0(v67, (uint64_t)&v69);
    v49 = v69;
    v69 = 0;
    if (v49)
    {
      v50 = 8;
      if ((v70 & 1) == 0)
        v50 = 16;
      (*(void (**)(void))(*v49 + v50))();
    }
    if (v67[8])
    {
      v37 = *(_QWORD *)v67;
      if (*(_QWORD *)v67)
      {
        v38 = (_QWORD *)operator new();
        *v38 = &off_24FAC8A80;
        v38[1] = 0;
        v38[2] = 0;
        v38[3] = v37;
      }
      else
      {
        v38 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 312) = 0x20B600000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      *(_QWORD *)v67 = a2 + 320;
      *(_QWORD *)&v67[8] = 0;
      *(_QWORD *)&v67[16] = a2;
      v68[0] = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v53 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v53)
      {
        v54 = *(_QWORD *)(a2 + 768);
        v55 = 56 * v53;
        do
        {
          if (*(char *)(v54 + v55 - 9) < 0)
            operator delete(*(void **)(v54 + v55 - 32));
          v55 -= 56;
        }
        while (v55);
      }
      *(_DWORD *)(a2 + 776) = 0;
      if (v62 >= 0)
        v56 = __p;
      else
        v56 = (void **)__p[0];
      if (v62 >= 0)
        v57 = HIBYTE(v62) & 0x7F;
      else
        v57 = (size_t)__p[1];
      sub_22E3B89A8((unsigned __int8 **)v67, v56, v57);
      sub_22E3BB0B8((uint64_t)v67);
      v38 = 0;
      v37 = 0;
    }
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
  }
  else
  {
    llvm::cas::createInMemoryActionCache((llvm::cas *)v27);
    v37 = *(_QWORD *)v67;
    if (*(_QWORD *)v67)
    {
      v38 = (_QWORD *)operator new();
      v39 = *(_QWORD *)v67;
      *v38 = &off_24FAC8A80;
      v38[1] = 0;
      v38[2] = 0;
      v38[3] = v39;
    }
    else
    {
      v38 = 0;
    }
  }
  v40 = (std::__shared_weak_count *)__str[3].__r_.__value_.__l.__size_;
  __str[3].__r_.__value_.__r.__words[0] = v37;
  __str[3].__r_.__value_.__l.__size_ = (std::string::size_type)v38;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

uint64_t sub_22F1940DC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 88))(*a1, a1[2], 0);
  v6 = 4;
  if (v5 < 4)
    v6 = v5;
  v7 = v4 + v6;
  v8 = v5 - v6;
  v9 = 4 * (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 80))(*a1, a1[2]) - 4;
  v10 = v8 > v9;
  if (v8 < v9)
    v9 = v8;
  v11 = v7 + v9;
  if (v10)
    ++v11;
  return (*(unsigned __int8 *)(v11 + (a2 >> 3)) >> (a2 & 7)) & 1;
}

void sub_22F194170(void **a1)
{
  *a1 = &off_24FAC8AB8;
  free(a1[19]);
  free(a1[15]);
  sub_22E3B4EF4((uint64_t)(a1 + 3));
  llvm::vfs::FileSystem::~FileSystem((llvm::vfs::FileSystem *)a1);
}

void sub_22F1941B4(void **a1)
{
  *a1 = &off_24FAC8AB8;
  free(a1[19]);
  free(a1[15]);
  sub_22E3B4EF4((uint64_t)(a1 + 3));
  llvm::vfs::FileSystem::~FileSystem((llvm::vfs::FileSystem *)a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F19420C(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  int Key;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  void *v19;
  uint64_t v20;
  __int16 v21;
  void *v22;
  __int128 v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = xmmword_22F44E310;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v5 = 0;
    v6 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v6 = *a2;
        if (*a2)
          v5 = strlen((const char *)*a2);
        else
          v5 = 0;
        break;
      case 4:
        v11 = *((_BYTE *)*a2 + 23);
        if (v11 >= 0)
          v6 = *a2;
        else
          v6 = **a2;
        if (v11 >= 0)
          v5 = v11 & 0x7F;
        else
          v5 = (uint64_t)(*a2)[1];
        break;
      case 5:
        v6 = *a2;
        v5 = (uint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector();
    v6 = v22;
    v5 = v23;
  }
  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 128))
  {
    v21 = 261;
    v19 = v6;
    v20 = v5;
LABEL_15:
    llvm::vfs::Status::Status();
    *(_BYTE *)(a3 + 80) &= ~1u;
    *(_OWORD *)a3 = v13;
    *(_QWORD *)(a3 + 16) = v14;
    *(_OWORD *)(a3 + 24) = v15;
    *(_OWORD *)(a3 + 40) = v16;
    *(_OWORD *)(a3 + 56) = v17;
    *(_WORD *)(a3 + 72) = v18;
    goto LABEL_16;
  }
  v8 = llvm::StringMapImpl::FindKey();
  if (v8 != -1 && v8 != (unint64_t)*(unsigned int *)(a1 + 160))
  {
    v21 = 261;
    v19 = v6;
    v20 = v5;
    goto LABEL_15;
  }
  sub_22F1947C8(&v12, (uint64_t)v6, v5);
  v9 = llvm::errorToErrorCode();
  *(_BYTE *)(a3 + 80) |= 1u;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_16:
  if (v22 != v24)
    free(v22);
}

void sub_22F194480(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  int Key;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int16 v29;
  void *v30;
  __int128 v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = xmmword_22F44E310;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v5 = 0;
    v6 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v6 = *a2;
        if (*a2)
          v5 = strlen((const char *)*a2);
        else
          v5 = 0;
        break;
      case 4:
        v20 = *((_BYTE *)*a2 + 23);
        if (v20 >= 0)
          v6 = *a2;
        else
          v6 = **a2;
        if (v20 >= 0)
          v5 = v20 & 0x7F;
        else
          v5 = (uint64_t)(*a2)[1];
        break;
      case 5:
        v6 = *a2;
        v5 = (uint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector();
    v6 = v30;
    v5 = v31;
  }
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || (v8 = Key, Key == (unint64_t)*(unsigned int *)(a1 + 128)))
  {
    sub_22F1947C8(v22, (uint64_t)v6, v5);
    v9 = v22[0];
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 120);
    llvm::cas::ObjectStore::getProxy();
    v9 = v24;
    if ((v26 & 1) == 0)
    {
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 88))(v24, *((_QWORD *)&v25 + 1), 0);
      v15 = v14;
      v16 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * v8) + 8);
      v23 = 261;
      v22[0] = (uint64_t)v6;
      v22[1] = v5;
      llvm::vfs::Status::Status();
      v17 = operator new();
      v18 = v25;
      *(_QWORD *)(v17 + 8) = v24;
      *(_QWORD *)(v17 + 16) = v18;
      *(_QWORD *)(v17 + 23) = *(_QWORD *)((char *)&v25 + 7);
      LOBYTE(v18) = HIBYTE(v25);
      v25 = 0uLL;
      v24 = 0;
      v19 = v27;
      *(_OWORD *)(v17 + 32) = v26;
      *(_OWORD *)(v17 + 48) = v19;
      *(_OWORD *)(v17 + 64) = v28;
      *(_WORD *)(v17 + 80) = v29;
      *(_QWORD *)v17 = off_24FAC8B38;
      *(_BYTE *)(v17 + 31) = v18;
      *(_QWORD *)(v17 + 88) = v13;
      *(_QWORD *)(v17 + 96) = v15;
      *(_QWORD *)(v17 + 104) = v16;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v17;
      goto LABEL_14;
    }
  }
  v21 = v9;
  v10 = llvm::errorToErrorCode();
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v11;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_14:
  if (v30 != v32)
    free(v30);
}

const std::error_category *sub_22F194748@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X8>)
{
  const std::error_category *result;

  result = std::generic_category();
  *a1 = 1;
  a1[1] = result;
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_22F194778()
{
  std::generic_category();
  return 1;
}

const std::error_category *sub_22F194794@<X0>(uint64_t a1@<X8>)
{
  const std::error_category *result;

  *(_BYTE *)(a1 + 24) |= 1u;
  result = std::generic_category();
  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22F1947C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  _QWORD *v6;
  _QWORD v7[4];
  __int16 v8;
  _QWORD *v9;
  std::error_code v10;

  v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  *(_QWORD *)&v10.__val_ = std::generic_category();
  v10.__cat_ = (const std::error_category *)"filename not part of include tree list";
  llvm::createStringError((llvm *)2, v10, v4);
  v9 = v6;
  sub_22F419094(a1, (llvm::Twine *)v7, &v9);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return 0;
}

uint64_t sub_22F194858(uint64_t result, _QWORD **a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char **v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = (_QWORD *)result;
  v4 = *a2;
  if (*a2)
  {
    *a2 = 0;
    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v4 + 48))(v4, MEMORY[0x24BED7780]))
    {
      *v3 = 0;
      v6 = (char **)v4[1];
      v7 = (char **)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        v9 = MEMORY[0x24BED5A38];
        do
        {
          v13 = v8;
          v10 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v9))
          {
            v11 = **a3;
            **a3 = (uint64_t)v10;
            if (v11)
              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            v10 = 0;
          }
          v12 = v10;
          sub_22F2436E4(&v13, &v12, &v14);
          v8 = v14;
          *v3 = v14;
          v14 = 0;
          if (v12)
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
          if (v13)
            (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v4 + 48))(v4, MEMORY[0x24BED5A38]);
      if ((_DWORD)result)
      {
        result = **a3;
        **a3 = (uint64_t)v4;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 = 0;
      }
      *v3 = v4;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t sub_22F1949D0(uint64_t a1, llvm::Twine *this, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  v5 = MEMORY[0x24BED8420];
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1 + 8;
  *(_QWORD *)a1 = v5 + 16;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  llvm::Twine::str(this);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  v7 = *a3;
  *a3 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_22F194A7C(void **this)
{
  *this = off_24FAC8B38;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  llvm::vfs::File::~File((llvm::vfs::File *)this);
}

void sub_22F194AB8(void **this)
{
  *this = off_24FAC8B38;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  llvm::vfs::File::~File((llvm::vfs::File *)this);
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22F194B08@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __n128 result;

  *(_BYTE *)(a2 + 80) &= ~1u;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a2, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 24);
  }
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 40) = v4;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 56) = result;
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 80);
  return result;
}

void sub_22F194B7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *p_p;
  size_t v4;
  __int128 *p_dst;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  unint64_t v11;
  void *__p;
  size_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  if ((v15 & 1) != 0)
  {
    v6 = __p;
    v7 = v13;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    return;
  }
  if (v14 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (!p_p)
  {
    __dst = 0uLL;
    v11 = 0;
    goto LABEL_20;
  }
  if (v14 >= 0)
    v4 = v14 & 0x7F;
  else
    v4 = v13;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v11) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_19;
  }
  memmove(p_dst, p_p, v4);
LABEL_19:
  *((_BYTE *)p_dst + v4) = 0;
LABEL_20:
  *(_BYTE *)(a2 + 24) &= ~1u;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v11;
  if ((v15 & 1) == 0 && v14 < 0)
    operator delete(__p);
}

void sub_22F194CEC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 33) == 1)
  {
    switch(*(_BYTE *)(a1 + 32))
    {
      case 1:
      case 4:
      case 5:
        break;
      case 3:
        if (*(_QWORD *)a1)
          strlen(*(const char **)a1);
        break;
      default:
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    llvm::Twine::toVector();
  }
  llvm::MemoryBuffer::getMemBuffer();
  *(_BYTE *)(a2 + 16) &= ~1u;
}

uint64_t sub_22F194E38@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = *(_QWORD *)(result + 104);
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_22F194E58()
{
  std::system_category();
  return 0;
}

uint64_t sub_22F194E74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __int128 *, uint64_t);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  result = sub_22F4191D0((uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    *a2 = v17;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 16);
    v8 = (*v6)++;
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 88))(*v4, v4[2], 0);
    v11 = 4;
    if (v10 < 4)
      v11 = v10;
    v12 = *(unsigned int *)(v9 + v11 + 4 * v8);
    v14 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))v7;
    v13 = *(_QWORD *)(v7 + 8);
    v15 = v17;
    v16 = v18;
    return v14(v13, &v15, v12);
  }
  return result;
}

uint64_t sub_22F194F54@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const void *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  size_t v16;
  llvm::vfs *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::vfs *v21;
  uint64_t NextVirtualUniqueID;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::vfs *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v7 = *a2;
  v8 = a2[2];
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a2 + 72))(*a2, v8, 0);
  llvm::cas::ObjectStore::getProxy();
  result = v35;
  if ((v37 & 1) != 0)
  {
    v35 = 0;
    goto LABEL_3;
  }
  v10 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 88))(v35, v36, 0);
  v12 = v11;
  v13 = llvm::sys::path::parent_path();
  v15 = ".";
  if (v14)
    v15 = (const char *)v13;
  if (v14 <= 1)
    v16 = 1;
  else
    v16 = v14;
  v17 = (llvm::vfs *)sub_22F41926C(**a1 + 152, v15, v16);
  v18 = *(_QWORD *)v17;
  if (!*(_QWORD *)(*(_QWORD *)v17 + 8) && !*(_QWORD *)(v18 + 16))
  {
    *(_QWORD *)(v18 + 8) = llvm::vfs::getNextVirtualUniqueID(v17);
    *(_QWORD *)(v18 + 16) = v19;
  }
  v20 = **a1;
  v21 = (llvm::vfs *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, v8, 1);
  NextVirtualUniqueID = llvm::vfs::getNextVirtualUniqueID(v21);
  v24 = v23;
  v25 = llvm::StringMapImpl::LookupBucketFor();
  v26 = *(_QWORD *)(v20 + 120);
  v27 = *(_QWORD *)(v26 + 8 * v25);
  if (!v27)
    goto LABEL_18;
  if (v27 == -8)
  {
    --*(_DWORD *)(v20 + 136);
LABEL_18:
    v32 = v24;
    v33 = NextVirtualUniqueID;
    v34 = v21;
    v28 = v25;
    v29 = sub_22E3CD3D4(*(_QWORD *)(v20 + 144), v12 + 41, 3);
    v30 = v29;
    v31 = v29 + 40;
    if (v12)
      memcpy((void *)(v29 + 40), v10, v12);
    *(_BYTE *)(v31 + v12) = 0;
    *(_QWORD *)v30 = v12;
    *(_QWORD *)(v30 + 8) = v34;
    *(_DWORD *)(v30 + 16) = a3;
    *(_QWORD *)(v30 + 24) = v33;
    *(_QWORD *)(v30 + 32) = v32;
    *(_QWORD *)(v26 + 8 * v28) = v30;
    ++*(_DWORD *)(v20 + 132);
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v20 + 120));
  }
  result = 0;
LABEL_3:
  *a4 = result;
  if ((v37 & 1) != 0)
  {
    result = v35;
    if (v35)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  return result;
}

#error "22F195174: too big function (funcsize=0)"

BOOL sub_22F1ACCD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 16);
  if (*(_DWORD *)v3 == 7)
  {
    v8 = *(_DWORD *)(v3 + 16);
    v5 = *(_DWORD *)(v3 + 19);
    v6 = v8 == 1852268383;
    v7 = 1600091502;
  }
  else
  {
    if (*(_DWORD *)v3 != 3)
      return 0;
    v4 = *(unsigned __int16 *)(v3 + 16);
    v5 = *(unsigned __int8 *)(v3 + 18);
    v6 = v4 == 28263;
    v7 = 117;
  }
  return v6 && v5 == v7;
}

uint64_t sub_22F1ACD3C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void *v11;
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  __int128 v15;
  _BYTE v16[64];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = xmmword_22F44E300;
  if (a3 == 5)
  {
    if (a4 == 1)
    {
      qmemcpy(v16, "metal", 5);
      v4 = 5;
LABEL_4:
      *(_WORD *)&v16[v4] = 16448;
      *(_QWORD *)&v15 = v4 | 2;
      goto LABEL_5;
    }
    if (a4)
    {
      v4 = 0;
      goto LABEL_4;
    }
  }
LABEL_5:
  sub_22F1ACE98(a1, a2, a3, &v11);
  v6 = v11;
  v5 = v12;
  v7 = v15;
  if (*((_QWORD *)&v15 + 1) < (unint64_t)v15 + v12)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v15;
  }
  if (v5)
  {
    memcpy(&v14[v7], v6, v5);
    v7 = v15;
  }
  *(_QWORD *)&v15 = v7 + v5;
  if (v11 != &v13)
    free(v11);
  v8 = v14;
  v9 = sub_22F1ACFF0(v14);
  if (v8 != v16)
    free(v8);
  return v9;
}

uint64_t sub_22F1ACE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  const char *v7;
  uint64_t v8;
  size_t v9;
  uint64_t result;
  const void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;

  v7 = sub_22F1C9A34(a2, a3);
  v9 = v8;
  result = (uint64_t)sub_22F1C9AF0(a1, (uint64_t)v7, v8, a3);
  v11 = (const void *)result;
  v13 = v12;
  *a4 = a4 + 3;
  *(_OWORD *)(a4 + 1) = xmmword_22F44E300;
  if (v9 >= 0x41)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v14 = a4[1];
  }
  else
  {
    v14 = 0;
    if (!v9)
      goto LABEL_6;
  }
  result = (uint64_t)memcpy((void *)(*a4 + v14), v7, v9);
  v15 = a4[2];
  v16 = a4[1] + v9;
  a4[1] = v16;
  if (v15 < v16 + 2)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = a4[1];
  }
  *(_WORD *)(*a4 + v16) = 14906;
  v14 = a4[1] + 2;
LABEL_6:
  a4[1] = v14;
  if (a4[2] < v14 + v13)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v14 = a4[1];
    if (!v13)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v13)
  {
LABEL_8:
    result = (uint64_t)memcpy((void *)(*a4 + v14), v11, v13);
    v14 = a4[1];
  }
LABEL_9:
  a4[1] = v14 + v13;
  return result;
}

#error "22F1ACFF0: too big function (funcsize=0)"

uint64_t sub_22F1BFAD0(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v41;
  int v42;
  BOOL v44;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  _BOOL4 v50;
  int v51;
  BOOL v52;
  _BOOL4 v55;
  _BOOL4 v58;
  _BOOL4 v60;
  BOOL v63;
  BOOL v66;
  const char *v67;
  BOOL v68;
  BOOL v69;
  int v71;
  int v72;
  BOOL v77;
  _BOOL4 v79;
  int v80;
  int v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  int v92;
  BOOL v93;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  int v108;
  BOOL v109;
  int v110;
  _BOOL4 v112;
  int v113;
  _BOOL4 v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v126;
  _BOOL4 v127;
  int v128;
  BOOL v129;
  BOOL v130;
  BOOL v131;
  int v132;
  BOOL v133;
  int v135;
  BOOL v136;
  int v137;
  BOOL v138;
  int v139;
  BOOL v140;
  int v141;
  int v144;
  BOOL v145;
  int v146;
  int v147;
  BOOL v149;
  int v150;
  int v153;
  BOOL v154;
  int v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  _BOOL4 v162;
  int v163;
  BOOL v169;
  _BOOL4 v170;
  int v171;
  BOOL v172;
  _BOOL4 v175;
  _BOOL4 v178;
  BOOL v181;
  BOOL v182;
  int v183;
  BOOL v184;
  int v185;
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  const char *v189;
  size_t v190;
  BOOL v192;
  BOOL v195;
  BOOL v196;
  int v197;
  uint64_t v207;
  int v208;
  _BOOL4 v209;
  _BOOL4 v210;
  _BOOL4 v213;
  _BOOL4 v217;
  BOOL v219;
  BOOL v221;
  int v223;
  BOOL v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  int v229;
  BOOL v230;
  int v231;
  int v232;
  BOOL v235;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  uint64_t v240;
  BOOL v241;
  uint64_t v242;
  BOOL v243;
  BOOL v244;
  BOOL v245;
  BOOL v246;
  BOOL v247;
  BOOL v248;
  BOOL v251;
  __int128 v252;
  BOOL v254;
  BOOL v256;
  const char *v259;
  size_t v260;
  _BOOL4 v261;
  int v262;
  BOOL v263;
  BOOL v265;
  BOOL v266;
  BOOL v268;
  BOOL v269;
  int v271;
  BOOL v272;
  int v273;
  int v274;
  BOOL v275;
  int v276;
  BOOL v277;
  int v279;
  BOOL v280;
  int v281;
  BOOL v282;
  int v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  BOOL v293;
  uint64_t v294;
  uint64_t v295;
  BOOL v296;
  uint64_t v297;
  uint64_t v298;
  int v300;
  BOOL v301;
  BOOL v302;
  BOOL v303;
  int v305;
  BOOL v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  BOOL v310;
  BOOL v311;
  BOOL v313;
  int v315;
  BOOL v316;
  _BOOL4 v319;
  _BOOL4 v322;
  _BOOL4 v324;
  uint64_t v326;
  uint64_t v327;
  BOOL v328;
  BOOL v332;
  BOOL v338;
  BOOL v339;
  BOOL v340;
  _BOOL4 v341;
  int v342;
  BOOL v343;
  BOOL v345;
  BOOL v346;
  BOOL v347;
  BOOL v348;
  int v349;
  BOOL v350;
  BOOL v354;
  BOOL v363;
  BOOL v369;
  _BOOL4 v370;
  BOOL v371;
  BOOL v373;
  BOOL v375;
  _BOOL4 v376;
  int v377;
  BOOL v378;
  uint64_t v383;
  BOOL v384;
  uint64_t v385;
  uint64_t v386;
  BOOL v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  BOOL v391;
  uint64_t v392;
  uint64_t v395;
  BOOL v397;
  uint64_t v398;
  int v399;
  BOOL v400;
  int v401;
  int v403;
  int v404;
  BOOL v405;
  BOOL v409;
  BOOL v410;
  int v411;
  BOOL v412;
  int v413;
  int v414;
  BOOL v416;
  int v417;
  int v418;
  BOOL v419;
  BOOL v421;
  int v422;
  BOOL v423;
  BOOL v431;
  int v435;
  BOOL v436;
  int v437;
  BOOL v439;
  BOOL v441;
  _BOOL4 v442;
  int v443;
  BOOL v444;
  BOOL v446;
  BOOL v447;
  BOOL v448;
  _BOOL4 v449;
  int v450;
  BOOL v451;
  BOOL v452;
  BOOL v454;
  int v455;
  BOOL v456;
  int v457;
  BOOL v459;
  BOOL v460;
  BOOL v461;
  BOOL v462;
  _BOOL4 v463;
  int v464;
  BOOL v465;
  BOOL v467;
  uint64_t v476;
  BOOL v477;
  uint64_t v478;
  BOOL v479;
  _BOOL4 v480;
  int v481;
  BOOL v482;
  BOOL v486;
  int v487;
  BOOL v488;
  _BOOL4 v492;
  int v493;
  BOOL v494;
  BOOL v498;
  int v499;
  BOOL v500;
  BOOL v504;
  BOOL v505;
  BOOL v506;
  int v507;
  BOOL v510;
  int v511;
  BOOL v514;
  int v515;
  BOOL v516;
  int v521;
  BOOL v525;
  BOOL v526;
  _BOOL4 v527;
  BOOL v529;
  int v530;
  BOOL v531;
  BOOL v538;
  BOOL v539;
  int v540;
  BOOL v541;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  BOOL v548;
  _BOOL4 v549;
  int v550;
  BOOL v551;
  BOOL v554;
  int v555;
  BOOL v556;
  BOOL v560;
  _BOOL4 v561;
  int v562;
  BOOL v563;
  BOOL v566;
  BOOL v567;
  int v568;
  BOOL v569;
  BOOL v572;
  uint64_t v573;
  BOOL v574;
  int v575;
  BOOL v576;
  BOOL v579;
  _BOOL4 v580;
  int v581;
  BOOL v582;
  int v587;
  BOOL v588;
  BOOL v592;
  BOOL v593;
  BOOL v594;
  int v595;
  int v599;
  BOOL v602;
  BOOL v604;
  int v605;
  BOOL v606;
  BOOL v609;
  int v610;
  BOOL v611;
  BOOL v615;
  int v616;
  BOOL v617;
  BOOL v621;
  BOOL v622;
  int v623;
  BOOL v624;
  BOOL v627;
  BOOL v628;
  int v629;
  BOOL v630;
  BOOL v633;
  int v634;
  BOOL v635;
  BOOL v639;
  int v640;
  BOOL v641;
  BOOL v645;
  BOOL v646;
  int v647;
  BOOL v648;
  BOOL v651;
  BOOL v652;
  int v653;
  BOOL v658;
  _BOOL4 v659;
  BOOL v660;
  BOOL v662;
  _BOOL4 v663;
  BOOL v664;
  BOOL v665;
  BOOL v666;
  _BOOL4 v667;
  int v668;
  BOOL v669;
  int v673;
  BOOL v674;
  BOOL v679;
  _BOOL4 v680;
  int v681;
  BOOL v682;
  BOOL v687;
  _BOOL4 v688;
  int v689;
  BOOL v690;
  BOOL v695;
  _BOOL4 v696;
  int v697;
  BOOL v698;
  BOOL v703;
  _BOOL4 v704;
  BOOL v705;
  BOOL v707;
  int v709;
  BOOL v710;
  BOOL v713;
  _BOOL4 v714;
  BOOL v715;
  BOOL v717;
  BOOL v719;
  BOOL v720;
  _BOOL4 v721;
  int v722;
  BOOL v723;
  BOOL v727;
  _BOOL4 v728;
  BOOL v729;
  BOOL v731;
  BOOL v733;
  BOOL v734;
  _BOOL4 v735;
  BOOL v736;
  BOOL v738;
  BOOL v739;
  _BOOL4 v740;
  int v741;
  BOOL v742;
  BOOL v746;
  _BOOL4 v747;
  int v748;
  BOOL v753;
  BOOL v754;
  _BOOL4 v755;
  int v756;
  BOOL v757;
  BOOL v762;
  _BOOL4 v763;
  int v764;
  BOOL v765;
  BOOL v770;
  _BOOL4 v771;
  BOOL v772;
  BOOL v773;
  BOOL v775;
  BOOL v777;
  BOOL v779;
  _BOOL4 v780;
  BOOL v781;
  BOOL v782;
  BOOL v783;
  BOOL v784;
  _BOOL4 v785;
  int v786;
  BOOL v787;
  int v792;
  BOOL v793;
  BOOL v798;
  _BOOL4 v799;
  BOOL v800;
  BOOL v802;
  BOOL v804;
  BOOL v806;
  BOOL v808;
  _BOOL4 v809;
  int v810;
  BOOL v811;
  int v816;
  BOOL v817;
  int v818;
  BOOL v819;
  BOOL v820;
  _BOOL4 v821;
  int v822;
  BOOL v823;
  int v826;
  BOOL v827;
  int v828;
  BOOL v829;
  _BOOL4 v830;
  BOOL v831;
  BOOL v833;
  BOOL v835;
  _BOOL4 v836;
  int v837;
  BOOL v838;
  BOOL v840;
  _BOOL4 v841;
  int v842;
  BOOL v843;
  BOOL v848;
  _BOOL4 v849;
  int v850;
  BOOL v851;
  BOOL v856;
  BOOL v857;
  BOOL v858;
  _BOOL4 v859;
  int v860;
  BOOL v861;
  BOOL v865;
  _BOOL4 v866;
  int v867;
  BOOL v868;
  BOOL v872;
  int v873;
  BOOL v874;
  BOOL v878;
  int v879;
  BOOL v880;
  BOOL v884;
  int v885;
  BOOL v886;
  uint64_t v890;
  BOOL v891;
  uint64_t v892;
  uint64_t v893;
  BOOL v894;
  uint64_t v895;
  BOOL v896;
  BOOL v897;
  BOOL v898;
  BOOL v902;
  _BOOL4 v918;
  _BOOL4 v922;
  int v923;
  BOOL v924;
  BOOL v925;
  BOOL v927;
  _BOOL4 v930;
  int v931;
  BOOL v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  BOOL v938;
  uint64_t v939;
  BOOL v941;
  _BOOL4 v944;
  BOOL v945;
  int v947;
  BOOL v949;
  BOOL v950;
  _BOOL4 v955;
  int v956;
  BOOL v960;
  BOOL v963;
  int v965;
  BOOL v966;
  BOOL v969;
  _BOOL4 v972;
  int v973;
  BOOL v975;
  BOOL v983;
  uint64_t v984;
  int v985;
  uint64_t v986;
  _BOOL4 v988;
  int v989;
  int v994;
  BOOL v995;
  int v996;
  BOOL v997;
  _BOOL4 v1001;
  _BOOL4 v1005;
  int v1006;
  uint64_t v1010;
  int v1011;
  _BOOL4 v1012;
  _BOOL4 v1013;
  BOOL v1019;
  int v1022;
  BOOL v1023;
  BOOL v1024;
  BOOL v1025;
  int v1026;
  BOOL v1027;
  _BOOL4 v1030;
  int v1031;
  BOOL v1035;
  int v1042;
  BOOL v1043;
  int v1044;
  uint64_t v1045;
  BOOL v1046;
  uint64_t v1047;
  BOOL v1048;
  int v1050;
  int v1051;
  BOOL v1056;
  _BOOL4 v1058;
  BOOL v1059;
  int v1060;
  _BOOL4 v1062;
  _BOOL4 v1066;
  _BOOL4 v1068;
  _BOOL4 v1072;
  int v1076;
  BOOL v1077;
  int v1078;
  _BOOL4 v1081;
  _BOOL4 v1087;
  BOOL v1092;
  _BOOL4 v1099;
  _BOOL4 v1103;
  _BOOL4 v1105;
  _BOOL4 v1109;
  _BOOL4 v1111;
  _BOOL4 v1120;
  _BOOL4 v1144;
  _BOOL4 v1158;
  char v1162;
  char v1166;

  v2 = *(unsigned __int8 *)(a1 + 30);
  v3 = *(unsigned __int16 *)(a1 + 28) | (v2 << 16);
  v4 = v2 & 7;
  v5 = sub_22F1C9A34(*(_QWORD *)(a1 + 8), v4);
  v7 = v6;
  v8 = sub_22F1C9AF0(*(_QWORD *)a1, (uint64_t)v5, v6, v4);
  switch((__int16)v3)
  {
    case 0:
      if (v9 != 25)
        return 0;
      v10 = v8[24];
      v11 = *(_QWORD *)v8 == 0x5F34366863726161 && *((_QWORD *)v8 + 1) == 0x726464615F726166;
      v12 = v11 && *((_QWORD *)v8 + 2) == 0x636170735F737365;
      v13 = 101;
      goto LABEL_188;
    case 1:
      if (v9 != 15)
        return 0;
      v14 = *(_QWORD *)(v8 + 7);
      v15 = *(_QWORD *)v8 == 0x5F34366863726161;
      v16 = 0x7363705F6576735FLL;
      goto LABEL_62;
    case 2:
      if (v9 != 18)
        return 0;
      v17 = *((unsigned __int16 *)v8 + 8);
      v18 = *(_QWORD *)v8 == 0x5F34366863726161 && *((_QWORD *)v8 + 1) == 0x705F726F74636576;
      v19 = 29539;
      goto LABEL_153;
    case 3:
      if (v9 != 27)
        return 0;
      v22 = *(_QWORD *)v8 == 0x665F757067646D61
         && *((_QWORD *)v8 + 1) == 0x6B726F775F74616CLL
         && *((_QWORD *)v8 + 2) == 0x735F70756F72675FLL
         && *(_QWORD *)(v8 + 19) == 0x657A69735F70756FLL;
      goto LABEL_224;
    case 4:
      if (v9 != 15)
        return 0;
      v23 = *(_QWORD *)(v8 + 7);
      v24 = *(_QWORD *)v8 == 0x6E5F757067646D61;
      v25 = 0x67735F6D756ELL;
      goto LABEL_31;
    case 5:
      if (v9 != 15)
        return 0;
      v23 = *(_QWORD *)(v8 + 7);
      v24 = *(_QWORD *)v8 == 0x6E5F757067646D61;
      v25 = 0x67765F6D756ELL;
LABEL_31:
      v26 = v25 & 0xFFFFFFFFFFFFLL | 0x7270000000000000;
      goto LABEL_1740;
    case 6:
      if (v9 != 19)
        return 0;
      v29 = *(_QWORD *)v8 != 0x775F757067646D61
         || *((_QWORD *)v8 + 1) != 0x7265705F73657661
         || *(_QWORD *)(v8 + 11) != 0x75655F7265705F73;
      v30 = v3 & 0x70000;
      v31 = (v3 & 0x70000) == 0 && !v29;
      goto LABEL_229;
    case 7:
      if (v9 != 9)
        return 0;
      v32 = v8[8];
      v33 = *(_QWORD *)v8 == 0x7075727265746E69;
      v34 = 116;
      goto LABEL_212;
    case 8:
      if (v9 != 6)
        return 0;
      v32 = *((unsigned __int16 *)v8 + 2);
      v33 = *(_DWORD *)v8 == 1852270963;
      goto LABEL_211;
    case 9:
      if (v9 != 7)
        return 0;
      v35 = *(_DWORD *)v8 == 1600741985 && *(_DWORD *)(v8 + 3) == 1734440031;
      goto LABEL_801;
    case 10:
      switch(v9)
      {
        case 18:
          v36 = *((unsigned __int16 *)v8 + 8);
          v37 = *(_QWORD *)v8 == 0x5F65726975716361 && *((_QWORD *)v8 + 1) == 0x696C696261706163;
          v38 = 31092;
          goto LABEL_221;
        case 20:
          v1081 = *(_QWORD *)v8 != 0x6C5F646572616873
               || *((_QWORD *)v8 + 1) != 0x636E75665F6B636FLL
               || *((_DWORD *)v8 + 4) != 1852795252;
          if ((v3 & 0x70000) != 0)
            return 0;
          goto LABEL_4437;
        case 23:
          v1058 = *(_QWORD *)v8 != 0x766973756C637865
               || *((_QWORD *)v8 + 1) != 0x665F6B636F6C5F65
               || *(_QWORD *)(v8 + 15) != 0x6E6F6974636E7566;
          if ((v3 & 0x70000) != 0)
            return 0;
          goto LABEL_4419;
        case 25:
          v1087 = *(_QWORD *)v8 != 0x5F65726975716361
               || *((_QWORD *)v8 + 1) != 0x635F646572616873
               || *((_QWORD *)v8 + 2) != 0x74696C6962617061
               || v8[24] != 121;
          if ((v3 & 0x70000) == 0 && !v1087 && v7 == 0)
            return 2;
          if ((v3 & 0x70000) != 0x10000)
            return 0;
          v949 = !v1087;
          break;
        default:
          return 0;
      }
      goto LABEL_4121;
    case 11:
      if (v9 != 14)
        return 0;
      v14 = *(_QWORD *)(v8 + 6);
      v15 = *(_QWORD *)v8 == 0x5F65726975716361;
      v16 = 0x656C646E61685F65;
      goto LABEL_62;
    case 14:
      if (v9 != 13)
        return 0;
      v14 = *(_QWORD *)(v8 + 5);
      v15 = *(_QWORD *)v8 == 0x5F73736572646461;
      v16 = 0x65636170735F7373;
LABEL_62:
      v39 = v15 && v14 == v16;
      goto LABEL_270;
    case 15:
      if (v9 != 5)
        return 0;
      v32 = v8[4];
      v33 = *(_DWORD *)v8 == 1634298977;
      v34 = 115;
      goto LABEL_212;
    case 17:
      if (v9 == 5)
      {
        v997 = *(_DWORD *)v8 == 1734962273 && v8[4] == 110;
        goto LABEL_3861;
      }
      if (v9 == 8)
      {
        v1024 = (v3 & 0x70000) == 0x50000 && *(_QWORD *)v8 == 0x73616E67696C415FLL;
        goto LABEL_4438;
      }
      if (v9 != 7)
        return 0;
      v40 = *(_DWORD *)v8 == 1734962273 && *(_DWORD *)(v8 + 3) == 1684368999;
      v41 = !v40;
      v42 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v41 && v7 == 0)
        return 0;
      if (v42 == 0x10000 && (!v41 ? (v44 = v7 == 3) : (v44 = 0), v44))
      {
        if (*(_WORD *)v5 == 28263 && v5[2] == 117)
          return 1;
      }
      else if (v42 == 0x20000 && !v41 && v7 == 3 && *(_WORD *)v5 == 28263 && v5[2] == 117)
      {
        return 2;
      }
      v1058 = *(_DWORD *)v8 != 1734962273 || *(_DWORD *)(v8 + 3) != 1935765095;
      if (v42 != 327680)
        return 0;
      goto LABEL_4419;
    case 18:
      if (v9 != 11)
        return 0;
      v46 = *(_QWORD *)(v8 + 3);
      v47 = *(_QWORD *)v8 == 0x6C615F636F6C6C61;
      v48 = 0x6E67696C615F636FLL;
      goto LABEL_237;
    case 19:
      if (v9 != 10)
        return 0;
      v32 = *((unsigned __int16 *)v8 + 4);
      v33 = *(_QWORD *)v8 == 0x69735F636F6C6C61;
      v34 = 25978;
      goto LABEL_212;
    case 20:
      if (v9 != 14)
        return 0;
      v23 = *(_QWORD *)(v8 + 6);
      v24 = *(_QWORD *)v8 == 0x645F737961776C61;
      v26 = 0x796F72747365645FLL;
      goto LABEL_1740;
    case 21:
      if (v9 != 13)
        return 0;
      v49 = *(_QWORD *)v8 == 0x695F737961776C61 && *(_QWORD *)(v8 + 5) == 0x656E696C6E695F73;
      v50 = !v49;
      v51 = v3 & 0x70000;
      v52 = (v3 & 0x70000) == 0 && !v50;
      if (v52 && v7 == 0)
        return 0;
      v55 = v51 == 0x10000 && !v50;
      if (v55 && v7 == 3)
      {
        if (*(_WORD *)v5 == 28263 && v5[2] == 117)
          return 1;
      }
      else
      {
        v58 = v51 == 0x20000 && !v50;
        if (v58 && v7 == 3)
        {
          if (*(_WORD *)v5 == 28263 && v5[2] == 117)
            return 2;
        }
        else
        {
          v60 = v7 == 5;
          if (v7 != 5)
            v55 = 0;
          if (v55)
          {
            if (*(_DWORD *)v5 == 1851878499 && v5[4] == 103)
              return 3;
            v60 = 1;
          }
          if (v58 && v60 && *(_DWORD *)v5 == 1851878499 && v5[4] == 103)
            return 4;
        }
      }
      v1081 = *(_QWORD *)v8 != 0x696563726F665F5FLL || *(_QWORD *)(v8 + 5) != 0x656E696C6E696563;
      if (v51 != 327680)
        return 0;
LABEL_4437:
      v1024 = !v1081;
LABEL_4438:
      if (!v1024 || v7 != 0)
        return 0;
      return 5;
    case 23:
      if (v9 != 17)
        return 0;
      v17 = v8[16];
      v18 = *(_QWORD *)v8 == 0x72657A796C616E61 && *((_QWORD *)v8 + 1) == 0x736572707075735FLL;
      v19 = 115;
LABEL_153:
      v63 = v18 && v17 == v19;
      goto LABEL_328;
    case 24:
      if (v9 != 8)
        return 0;
      v39 = *(_QWORD *)v8 == 0x657461746F6E6E61;
      goto LABEL_270;
    case 25:
      if (v9 != 25)
        return 0;
      v66 = *(_QWORD *)v8 == 0x656C6C61635F6F6ELL
         && *((_QWORD *)v8 + 1) == 0x5F64657661735F72
         && *((_QWORD *)v8 + 2) == 0x7265747369676572
         && v8[24] == 115;
      goto LABEL_304;
    case 26:
      if (v9 != 10)
        return 0;
      v32 = *((unsigned __int16 *)v8 + 4);
      v33 = *(_QWORD *)v8 == 0x6568635F66636F6ELL;
      v34 = 27491;
      goto LABEL_212;
    case 27:
      if (v9 != 35)
        return 0;
      v67 = "objc_arc_weak_reference_unavailable";
      goto LABEL_193;
    case 28:
      if (v9 == 21)
      {
        v922 = *(_QWORD *)v8 != 0x5F7265746E696F70
            || *((_QWORD *)v8 + 1) != 0x7079745F68746977
            || *(_QWORD *)(v8 + 13) != 0x6761745F65707974;
        v923 = v3 & 0x70000;
        if ((v3 & 0x70000) != 0 || (!v922 ? (v924 = v7 == 0) : (v924 = 0), !v924))
        {
          v925 = v923 == 0x10000 && !v922;
          goto LABEL_3848;
        }
        return 3;
      }
      if (v9 != 22)
        return 0;
      v68 = *(_QWORD *)v8 == 0x746E656D75677261 && *((_QWORD *)v8 + 1) == 0x79745F687469775FLL;
      v69 = v68 && *(_QWORD *)(v8 + 14) == 0x6761745F65707974;
LABEL_356:
      v91 = !v69;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0)
      {
        v99 = !v91;
LABEL_361:
        if (v99 && v7 == 0)
          return 0;
      }
      goto LABEL_3434;
    case 29:
      if (v9 != 25)
        return 0;
      v10 = v8[24];
      v12 = *(_QWORD *)v8 == 0x5F676E616C635F5FLL
         && *((_QWORD *)v8 + 1) == 0x6C6975625F6D7261
         && *((_QWORD *)v8 + 2) == 0x61696C615F6E6974;
      v13 = 115;
LABEL_188:
      v69 = v12 && v10 == v13;
      goto LABEL_356;
    case 30:
      if (v9 != 35)
        return 0;
      v67 = "__clang_arm_mve_strict_polymorphism";
LABEL_193:
      v71 = memcmp(v8, v67, 0x23uLL);
      v72 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && v71 == 0 && v7 == 0)
        return 0;
      if (v72 == 0x10000 && v71 == 0 && v7 == 5)
        goto LABEL_3441;
      if (v72 != 0x20000)
        return 0;
      goto LABEL_653;
    case 32:
      if (v9 != 10)
        return 0;
      v32 = *((unsigned __int16 *)v8 + 4);
      v33 = *(_QWORD *)v8 == 0x6963696669747261;
LABEL_211:
      v34 = 27745;
LABEL_212:
      v77 = v33 && v32 == v34;
      goto LABEL_240;
    case 33:
      if (v9 == 24)
      {
        v927 = *(_QWORD *)v8 == 0x735F747265737361
            && *((_QWORD *)v8 + 1) == 0x61635F6465726168
            && *((_QWORD *)v8 + 2) == 0x7974696C69626170;
        goto LABEL_3592;
      }
      if (v9 != 17)
        return 0;
      v36 = v8[16];
      v37 = *(_QWORD *)v8 == 0x635F747265737361 && *((_QWORD *)v8 + 1) == 0x74696C6962617061;
      v38 = 121;
LABEL_221:
      v22 = v37 && v36 == v38;
LABEL_224:
      v29 = !v22;
      v30 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0)
      {
        v31 = !v29;
LABEL_229:
        if (v31 && v7 == 0)
          return 0;
      }
      if (v30 != 0x10000)
        return 0;
      goto LABEL_852;
    case 36:
      if (v9 != 14)
        return 0;
      v46 = *(_QWORD *)(v8 + 6);
      v47 = *(_QWORD *)v8 == 0x615F656D75737361;
      v48 = 0x64656E67696C615FLL;
LABEL_237:
      v77 = v47 && v46 == v48;
LABEL_240:
      v79 = !v77;
      v80 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0 || v79 || v7 != 0)
        goto LABEL_908;
      return 0;
    case 37:
      if (v9 != 6)
        return 0;
      v83 = *((unsigned __int16 *)v8 + 2);
      v84 = *(_DWORD *)v8 == 1970500449;
      v85 = 25965;
      goto LABEL_267;
    case 38:
      if (v9 != 12)
        return 0;
      v83 = *((_DWORD *)v8 + 2);
      v84 = *(_QWORD *)v8 == 0x6962616C69617661;
      v85 = 2037672300;
      goto LABEL_267;
    case 39:
      if (v9 != 21)
        return 0;
      v86 = *(_QWORD *)(v8 + 13);
      v87 = *(_QWORD *)v8 == 0x6576726573657270 && *((_QWORD *)v8 + 1) == 0x5F7373656363615FLL;
      v88 = 0x7865646E695F7373;
      goto LABEL_325;
    case 40:
      if (v9 != 12)
        return 0;
      v89 = *(_QWORD *)v8;
      v83 = *((_DWORD *)v8 + 2);
      v90 = 0x6C6365645F667462;
      goto LABEL_264;
    case 41:
      if (v9 != 12)
        return 0;
      v89 = *(_QWORD *)v8;
      v83 = *((_DWORD *)v8 + 2);
      v90 = 0x657079745F667462;
LABEL_264:
      v84 = v89 == v90;
      v85 = 1734440031;
      goto LABEL_267;
    case 42:
      if (v9 != 6)
        return 0;
      v83 = *((unsigned __int16 *)v8 + 2);
      v84 = *(_DWORD *)v8 == 1668246626;
      v85 = 29547;
LABEL_267:
      v39 = v84 && v83 == v85;
LABEL_270:
      v91 = !v39;
      v92 = v3 & 0x70000;
      v93 = (v3 & 0x70000) == 0 && !v91;
      goto LABEL_276;
    case 43:
      if (v9 == 19)
      {
        v930 = *(_QWORD *)v8 != 0x75625F676E616C63
            || *((_QWORD *)v8 + 1) != 0x6C615F6E69746C69
            || *(_QWORD *)(v8 + 11) != 0x7361696C615F6E69;
        if ((v3 & 0x70000) == 0)
        {
LABEL_4136:
          v1092 = !v930;
          goto LABEL_4332;
        }
      }
      else if (v9 == 13)
      {
        v95 = *(_QWORD *)v8 == 0x5F6E69746C697562 && *(_QWORD *)(v8 + 5) == 0x7361696C615F6E69;
        v29 = !v95;
        v96 = (v3 & 0x70000) == 0x10000 && !v29;
        v97 = v96 && v7 == 5;
        if (!v97 && (v3 & 0x70000) == 0x20000)
        {
LABEL_852:
          v248 = !v29;
          goto LABEL_2029;
        }
      }
      return 0;
    case 44:
      switch(v9)
      {
        case 7:
          v985 = *(_DWORD *)(v8 + 3);
          v1025 = *(_DWORD *)v8 == 1684234079;
          v1026 = 1818453348;
          goto LABEL_4001;
        case 6:
          v1027 = *(_DWORD *)v8 == 1701077855 && *((_WORD *)v8 + 2) == 27747;
          goto LABEL_4012;
        case 5:
          v66 = *(_DWORD *)v8 == 1667589219 && v8[4] == 108;
LABEL_304:
          v79 = !v66;
          v80 = v3 & 0x70000;
          if ((v3 & 0x70000) != 0)
            goto LABEL_3467;
          if (v79 || v7 != 0)
            goto LABEL_3467;
          break;
      }
      return 0;
    case 45:
      if (v9 != 19)
        return 0;
      v86 = *(_QWORD *)(v8 + 11);
      v87 = *(_QWORD *)v8 == 0x74696475615F6663 && *((_QWORD *)v8 + 1) == 0x736E6172745F6465;
      v88 = 0x726566736E617274;
      goto LABEL_325;
    case 46:
      if (v9 != 11)
        return 0;
      v86 = *(_QWORD *)(v8 + 3);
      v87 = *(_QWORD *)v8 == 0x75736E6F635F6663;
      v88 = 0x64656D75736E6F63;
      goto LABEL_325;
    case 48:
      if (v9 != 24)
        return 0;
      v86 = *((_QWORD *)v8 + 2);
      v87 = *(_QWORD *)v8 == 0x6F6E61635F696663 && *((_QWORD *)v8 + 1) == 0x756A5F6C6163696ELL;
      v88 = 0x656C6261745F706DLL;
LABEL_325:
      v63 = v87 && v86 == v88;
LABEL_328:
      v91 = !v63;
      v92 = v3 & 0x70000;
      v99 = (v3 & 0x70000) == 0 && !v91;
      goto LABEL_361;
    case 49:
      if (v9 != 23)
        return 0;
      v100 = *((_QWORD *)v8 + 1);
      v101 = *(_QWORD *)(v8 + 15);
      v102 = *(_QWORD *)v8 == 0x72757465725F6663;
      v103 = 0x725F746F6E5F736ELL;
      goto LABEL_338;
    case 50:
      if (v9 != 19)
        return 0;
      v100 = *((_QWORD *)v8 + 1);
      v101 = *(_QWORD *)(v8 + 11);
      v102 = *(_QWORD *)v8 == 0x72757465725F6663;
      v103 = 0x69617465725F736ELL;
LABEL_338:
      v91 = !v102 || v100 != v103 || v101 != 0x64656E6961746572;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_3414;
      v93 = !v91;
LABEL_276:
      if (!v93 || v7 != 0)
        goto LABEL_3414;
      return 0;
    case 51:
      if (v9 != 19)
        return 0;
      v69 = *(_QWORD *)v8 == 0x6F6E6B6E755F6663
         && *((_QWORD *)v8 + 1) == 0x736E6172745F6E77
         && *(_QWORD *)(v8 + 11) == 0x726566736E617274;
      goto LABEL_356;
    case 52:
      if (v9 != 12)
        return 0;
      v108 = *((_DWORD *)v8 + 2);
      v109 = *(_QWORD *)v8 == 0x707369645F757063;
      v110 = 1751348321;
      goto LABEL_370;
    case 53:
      if (v9 != 12)
        return 0;
      v108 = *((_DWORD *)v8 + 2);
      v109 = *(_QWORD *)v8 == 0x636570735F757063;
      v110 = 1667851881;
LABEL_370:
      v112 = !v109 || v108 != v110;
      v113 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v112 && v7 == 0)
        return 0;
      if (v113 == 0x10000 && !v112 && v7 == 5)
        goto LABEL_3441;
      if (v113 != 0x20000)
        goto LABEL_1365;
      if (v112 || v7 != 5)
        goto LABEL_1365;
      goto LABEL_3448;
    case 54:
      if (v9 != 12)
        return 0;
      v931 = *((_DWORD *)v8 + 2);
      v932 = *(_QWORD *)v8 == 0x6174736E6F635F5FLL;
      v933 = 1600091246;
      goto LABEL_3576;
    case 55:
      if (v9 != 10)
        return 0;
      v934 = *(_QWORD *)v8;
      v931 = *((unsigned __int16 *)v8 + 4);
      v935 = 0x6563697665645F5FLL;
      goto LABEL_3575;
    case 56:
      if (v9 != 31)
        return 0;
      v936 = *((_QWORD *)v8 + 2);
      v937 = *(_QWORD *)(v8 + 23);
      v938 = *(_QWORD *)v8 == 0x6563697665645F5FLL && *((_QWORD *)v8 + 1) == 0x6E69746C6975625FLL;
      v939 = 0x656361667275735FLL;
      goto LABEL_3560;
    case 57:
      if (v9 != 31)
        return 0;
      v936 = *((_QWORD *)v8 + 2);
      v937 = *(_QWORD *)(v8 + 23);
      v938 = *(_QWORD *)v8 == 0x6563697665645F5FLL && *((_QWORD *)v8 + 1) == 0x6E69746C6975625FLL;
      v939 = 0x657275747865745FLL;
LABEL_3560:
      v941 = v938 && v936 == v939 && v937 == 0x5F5F657079745F65;
      goto LABEL_3648;
    case 58:
      if (v9 != 10)
        return 0;
      v934 = *(_QWORD *)v8;
      v931 = *((unsigned __int16 *)v8 + 4);
      v935 = 0x6C61626F6C675F5FLL;
      goto LABEL_3575;
    case 59:
      if (v9 != 8)
        return 0;
      v941 = *(_QWORD *)v8 == 0x5F5F74736F685F5FLL;
      goto LABEL_3648;
    case 61:
      if (v9 != 17)
        return 0;
      v941 = *(_QWORD *)v8 == 0x68636E75616C5F5FLL && *((_QWORD *)v8 + 1) == 0x5F73646E756F625FLL && v8[16] == 95;
      goto LABEL_3648;
    case 62:
      if (v9 != 10)
        return 0;
      v934 = *(_QWORD *)v8;
      v931 = *((unsigned __int16 *)v8 + 4);
      v935 = 0x6465726168735F5FLL;
LABEL_3575:
      v932 = v934 == v935;
      v933 = 24415;
LABEL_3576:
      v941 = v932 && v931 == v933;
      goto LABEL_3648;
    case 63:
      if (v9 == 9)
      {
        v944 = *(_QWORD *)v8 != 0x72757465726F4E5FLL || v8[8] != 110;
        v945 = (v3 & 0x70000) == 0x20000;
LABEL_4329:
        v1092 = v945 && !v944;
LABEL_4332:
        if (v1092 && v7 == 0)
          return 2;
      }
      else if (v9 == 8)
      {
        v119 = *(_QWORD *)v8 != 0x6E72757465726F6ELL;
        v120 = (v3 & 0x70000) == 0x10000 && *(_QWORD *)v8 == 0x6E72757465726F6ELL;
        v121 = v120 && v7 == 0;
        if (!v121 && (v3 & 0x70000) == 0x20000)
          goto LABEL_4327;
      }
      return 0;
    case 64:
      if (v9 != 13)
        return 0;
      v23 = *(_QWORD *)(v8 + 5);
      v24 = *(_QWORD *)v8 == 0x656C62616C6C6163;
      v26 = 0x6E6568775F656C62;
      goto LABEL_1740;
    case 65:
      if (v9 != 8)
        return 0;
      v122 = *(_QWORD *)v8 == 0x6B6361626C6C6163;
      goto LABEL_744;
    case 66:
      if (v9 != 11)
        return 0;
      v123 = *(_QWORD *)(v8 + 3);
      v124 = *(_QWORD *)v8 == 0x6F5F64656C6C6163;
      v125 = 0x65636E6F5F64656CLL;
      goto LABEL_615;
    case 67:
      if (v9 == 17)
      {
        v927 = *(_QWORD *)v8 == 0x635F646572616873 && *((_QWORD *)v8 + 1) == 0x74696C6962617061 && v8[16] == 121;
LABEL_3592:
        v947 = !v927;
        if ((v3 & 0x70000) == 0 && !v947 && v7 == 0)
          return 2;
        v949 = (v3 & 0x70000) == 0x10000 && v947 == 0;
LABEL_4121:
        if (v949 && v7 == 5)
          goto LABEL_4312;
      }
      else if (v9 == 10)
      {
        v126 = *(_QWORD *)v8 == 0x696C696261706163 && *((_WORD *)v8 + 4) == 31092;
        v127 = !v126;
        v128 = v3 & 0x70000;
        if ((v3 & 0x70000) != 0)
          goto LABEL_1753;
        v129 = !v127;
LABEL_1749:
        if (!v129 || v7 != 0)
        {
LABEL_1753:
          v248 = v128 == 0x10000 && !v127;
          goto LABEL_2029;
        }
      }
      return 0;
    case 68:
      if (v9 == 18)
      {
        v130 = *(_QWORD *)v8 == 0x5F73656972726163 && *((_QWORD *)v8 + 1) == 0x6E65646E65706564;
        v131 = v130 && *((_WORD *)v8 + 8) == 31075;
        v119 = !v131;
        v132 = v3 & 0x70000;
        v133 = (v3 & 0x70000) == 0 && !v119;
        if (!v133 || v7 != 0)
          goto LABEL_984;
      }
      return 0;
    case 69:
      if (v9 != 7)
        return 0;
      v135 = *(_DWORD *)(v8 + 3);
      v136 = *(_DWORD *)v8 == 1634036835;
      v137 = 1886744161;
      goto LABEL_463;
    case 73:
      if (v9 != 4)
        return 0;
      v138 = *(_DWORD *)v8 == 1684828003;
      goto LABEL_475;
    case 74:
      if (v9 != 6)
        return 0;
      v135 = *((unsigned __int16 *)v8 + 2);
      v136 = *(_DWORD *)v8 == 1835888483;
      v137 = 28271;
LABEL_463:
      v138 = v136 && v135 == v137;
      goto LABEL_475;
    case 75:
      if (v9 == 7)
      {
        v950 = *(_DWORD *)v8 == 1868783455 && *(_DWORD *)(v8 + 3) == 1953721967;
        goto LABEL_3628;
      }
      if (v9 != 5)
        return 0;
      v139 = v8[4];
      v140 = *(_DWORD *)v8 == 1936617315;
      v141 = 116;
      goto LABEL_633;
    case 76:
      if (v9 != 31)
        return 0;
      v91 = *(_QWORD *)v8 != 0x5F65726975716572
         || *((_QWORD *)v8 + 1) != 0x746E6174736E6F63
         || *((_QWORD *)v8 + 2) != 0x6C616974696E695FLL
         || *(_QWORD *)(v8 + 23) != 0x6E6F6974617A696CLL;
      if ((v3 & 0x70000) == 0 && !v91 && v7 == 0)
        return 1;
      if ((v3 & 0x70000) != 0x10000)
        return 0;
      goto LABEL_3443;
    case 77:
      if (v9 != 11)
        return 0;
      v138 = *(_QWORD *)v8 == 0x63757274736E6F63 && *(_QWORD *)(v8 + 3) == 0x726F746375727473;
LABEL_475:
      v79 = !v138;
      v80 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0 || v79 || v7 != 0)
        goto LABEL_908;
      return 0;
    case 78:
      if (v9 != 10)
        return 0;
      v144 = *((unsigned __int16 *)v8 + 4);
      v145 = *(_QWORD *)v8 == 0x62616D75736E6F63;
      v146 = 25964;
      goto LABEL_1088;
    case 79:
      if (v9 != 26)
        return 0;
      v147 = *((unsigned __int16 *)v8 + 12);
      v149 = *(_QWORD *)v8 == 0x62616D75736E6F63
          && *((_QWORD *)v8 + 1) == 0x5F6F7475615F656CLL
          && *((_QWORD *)v8 + 2) == 0x6174735F74736163;
      v150 = 25972;
      goto LABEL_504;
    case 80:
      if (v9 != 28)
        return 0;
      v147 = *((_DWORD *)v8 + 6);
      v149 = *(_QWORD *)v8 == 0x62616D75736E6F63
          && *((_QWORD *)v8 + 1) == 0x735F7465735F656CLL
          && *((_QWORD *)v8 + 2) == 0x5F6E6F5F65746174;
      v150 = 1684104562;
LABEL_504:
      v29 = !v149 || v147 != v150;
      v153 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_692;
      v154 = !v29;
      goto LABEL_688;
    case 81:
      if (v9 != 10)
        return 0;
      v155 = *((unsigned __int16 *)v8 + 4);
      v156 = *(_QWORD *)v8 == 0x65677265766E6F63;
      v157 = 29806;
      goto LABEL_741;
    case 82:
      if (v9 != 9)
        return 0;
      v158 = *(_QWORD *)v8;
      v159 = v8[8];
      v160 = 0x7078656C6C64;
      goto LABEL_518;
    case 84:
      if (v9 != 9)
        return 0;
      v158 = *(_QWORD *)v8;
      v159 = v8[8];
      v160 = 0x706D696C6C64;
LABEL_518:
      v162 = v158 != (v160 & 0xFFFFFFFFFFFFLL | 0x726F000000000000) || v159 != 116;
      v163 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0x30000 && !v162 && v7 == 0)
        return 0;
      if (!v163 && !v162 && v7 == 0)
        return 1;
      if (v163 == 0x10000 && !v162 && v7 == 3)
        goto LABEL_3487;
      if (v163 != 0x20000)
        return 0;
      if (v162 || v7 != 3)
        return 0;
      goto LABEL_3766;
    case 87:
      if (v9 != 10)
        return 0;
      v169 = *(_QWORD *)v8 == 0x7461636572706564 && *((_WORD *)v8 + 4) == 25701;
      v170 = !v169;
      v171 = v3 & 0x70000;
      v172 = (v3 & 0x70000) == 0 && !v170;
      if (v172 && v7 == 0)
        return 0;
      v175 = v171 == 0x10000 && !v170;
      if (v175 && v7 == 3)
        goto LABEL_3474;
      v178 = v171 == 0x20000 && !v170;
      if (v178 && v7 == 3)
        goto LABEL_3487;
      if (v171 == 196608 && !v170 && v7 == 0)
        return 3;
      if (v7)
        v181 = 0;
      else
        v181 = v175;
      if (v181)
        return 4;
      if (v7)
        v182 = 0;
      else
        v182 = v178;
      if (v182)
        return 5;
      return 0;
    case 88:
      if (v9 != 10)
        return 0;
      v183 = *((unsigned __int16 *)v8 + 4);
      v184 = *(_QWORD *)v8 == 0x7463757274736564;
      v185 = 29295;
      goto LABEL_761;
    case 89:
      if (v9 != 19)
        return 0;
      v186 = *(_QWORD *)(v8 + 11);
      v187 = *(_QWORD *)v8 == 0x65736F6E67616964 && *((_QWORD *)v8 + 1) == 0x6C6975625F73615FLL;
      v188 = 0x6E69746C6975625FLL;
      goto LABEL_661;
    case 91:
      if (v9 != 33)
        return 0;
      v189 = "disable_sanitizer_instrumentation";
      v190 = 33;
      goto LABEL_638;
    case 92:
      if (v9 != 18)
        return 0;
      v192 = *(_QWORD *)v8 == 0x5F656C6261736964
          && *((_QWORD *)v8 + 1) == 0x6C61635F6C696174
          && *((_WORD *)v8 + 8) == 29548;
      goto LABEL_664;
    case 95:
      if (v9 != 11)
        return 0;
      v123 = *(_QWORD *)(v8 + 3);
      v124 = *(_QWORD *)v8 == 0x5F6563726F666E65;
      v125 = 0x6263745F6563726FLL;
      goto LABEL_615;
    case 96:
      if (v9 != 16)
        return 0;
      v123 = *((_QWORD *)v8 + 1);
      v124 = *(_QWORD *)v8 == 0x5F6563726F666E65;
      v125 = 0x6661656C5F626374;
LABEL_615:
      v122 = v124 && v123 == v125;
      goto LABEL_744;
    case 97:
      if (v9 != 18)
        return 0;
      v91 = *(_QWORD *)v8 != 0x7478655F6D756E65
         || *((_QWORD *)v8 + 1) != 0x696C696269736E65
         || *((_WORD *)v8 + 8) != 31092;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_3414;
      v195 = !v91;
      goto LABEL_750;
    case 98:
      if (v9 != 7)
      {
        if (v9 != 5)
          return 0;
        v139 = v8[4];
        v140 = *(_DWORD *)v8 == 1869771365;
        v141 = 114;
LABEL_633:
        v196 = v140 && v139 == v141;
        goto LABEL_734;
      }
      v950 = *(_DWORD *)v8 == 1852989815 && *(_DWORD *)(v8 + 3) == 1735289198;
LABEL_3628:
      v955 = !v950;
      v956 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v955 && v7 == 0)
        return 3;
      if (v956 == 0x10000 && !v955 && v7 == 3)
        goto LABEL_3930;
      if (v956 == 0x20000)
        goto LABEL_4074;
      return 0;
    case 99:
      if (v9 != 35)
        return 0;
      v189 = "exclude_from_explicit_instantiation";
      v190 = 35;
LABEL_638:
      v71 = memcmp(v8, v189, v190);
      v197 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && v71 == 0 && v7 == 0)
        return 0;
      if (v197 == 0x10000 && v71 == 0 && v7 == 5)
        goto LABEL_3441;
      if (v197 != 0x20000)
        return 0;
LABEL_653:
      if (v71 || v7 != 5)
        return 0;
      goto LABEL_3448;
    case 102:
      if (v9 != 22)
        return 0;
      v186 = *(_QWORD *)(v8 + 14);
      v187 = *(_QWORD *)v8 == 0x6C616E7265747865 && *((_QWORD *)v8 + 1) == 0x5F656372756F735FLL;
      v188 = 0x6C6F626D79735F65;
LABEL_661:
      v192 = v187 && v186 == v188;
LABEL_664:
      v91 = !v192;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0 || v91 || v7 != 0)
        goto LABEL_3434;
      return 0;
    case 103:
      if (v9 != 22)
        return 0;
      v29 = *(_QWORD *)v8 != 0x6C616E7265747865
         || *((_QWORD *)v8 + 1) != 0x6974696E695F796CLL
         || *(_QWORD *)(v8 + 14) != 0x64657A696C616974;
      v153 = v3 & 0x70000;
      v154 = (v3 & 0x70000) == 0 && !v29;
LABEL_688:
      if (v154 && v7 == 0)
        return 0;
LABEL_692:
      if (v153 != 0x10000)
        return 0;
      goto LABEL_852;
    case 104:
      if (v9 != 11)
        return 0;
      v207 = *(_QWORD *)v8 ^ 0x6F7268746C6C6166 | *(_QWORD *)(v8 + 3) ^ 0x6867756F7268746CLL;
      v208 = v3 & 0x70000;
      v209 = (v3 & 0x70000) == 0x10000;
      v210 = v207 != 0;
      if (v207)
        v209 = 0;
      if (v209 && v7 == 0)
        return 0;
      v213 = v208 == 0x20000 && v207 == 0;
      if (v213 && v7 == 0)
        return 1;
      if (v7 == 5 && v209)
        goto LABEL_3448;
      if (!v208 && !v210 && v7 == 0)
        return 3;
      v217 = v7 == 3;
      if (v7 != 3)
        v209 = 0;
      if (!v209)
        goto LABEL_728;
      if (*(_WORD *)v5 == 28263 && v5[2] == 117)
        return 4;
      v217 = 1;
LABEL_728:
      if (!v213 || !v217)
        return 0;
      goto LABEL_4079;
    case 105:
      if (v9 == 10)
      {
        v985 = *((unsigned __int16 *)v8 + 4);
        v1025 = *(_QWORD *)v8 == 0x6163747361665F5FLL;
        v1026 = 27756;
        goto LABEL_4001;
      }
      if (v9 == 9)
      {
        v1027 = *(_QWORD *)v8 == 0x6C6163747361665FLL && v8[8] == 108;
        goto LABEL_4012;
      }
      if (v9 != 8)
        return 0;
      v196 = *(_QWORD *)v8 == 0x6C6C616374736166;
LABEL_734:
      v79 = !v196;
      v80 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0)
      {
        v219 = !v79;
LABEL_770:
        if (v219 && v7 == 0)
          return 0;
      }
LABEL_3467:
      if (v80 == 0x10000)
      {
        v256 = !v79;
LABEL_3469:
        if (v256 && v7 == 3)
          goto LABEL_3474;
      }
      if (v80 != 0x20000)
        return 0;
      goto LABEL_3482;
    case 106:
      if (v9 != 9)
        return 0;
      v155 = v8[8];
      v156 = *(_QWORD *)v8 == 0x756E655F67616C66;
      v157 = 109;
LABEL_741:
      v122 = v156 && v155 == v157;
LABEL_744:
      v91 = !v122;
      v92 = v3 & 0x70000;
      v195 = (v3 & 0x70000) == 0 && !v91;
LABEL_750:
      if (!v195 || v7 != 0)
        goto LABEL_3414;
      return 0;
    case 107:
      if (v9 != 7)
        return 0;
      v221 = *(_DWORD *)v8 == 1952541798 && *(_DWORD *)(v8 + 3) == 1852142708;
      goto LABEL_764;
    case 108:
      if (v9 != 6)
        return 0;
      v183 = *((unsigned __int16 *)v8 + 2);
      v184 = *(_DWORD *)v8 == 1836216166;
      v185 = 29793;
LABEL_761:
      v221 = v184 && v183 == v185;
LABEL_764:
      v79 = !v221;
      v80 = v3 & 0x70000;
      v219 = (v3 & 0x70000) == 0 && !v79;
      goto LABEL_770;
    case 109:
      if (v9 != 10)
        return 0;
      v223 = *((unsigned __int16 *)v8 + 4);
      v224 = *(_QWORD *)v8 == 0x615F74616D726F66;
      v225 = 26482;
      goto LABEL_895;
    case 110:
      if (v9 != 10)
        return 0;
      v223 = *((unsigned __int16 *)v8 + 4);
      v224 = *(_QWORD *)v8 == 0x696C6E695F756E67;
      v225 = 25966;
      goto LABEL_895;
    case 112:
      if (v9 != 11)
        return 0;
      v23 = *(_QWORD *)(v8 + 3);
      v24 = *(_QWORD *)v8 == 0x5F64656472617567;
      v26 = 0x7261765F64656472;
      goto LABEL_1740;
    case 113:
      if (v9 != 11)
        return 0;
      v941 = *(_QWORD *)v8 == 0x6567616E616D5F5FLL && *(_QWORD *)(v8 + 3) == 0x5F5F646567616E61;
LABEL_3648:
      v261 = !v941;
      v960 = (v3 & 0x70000) == 196608;
      goto LABEL_3951;
    case 117:
      if (v9 != 3)
        return 0;
      v223 = v8[2];
      v224 = *(unsigned __int16 *)v8 == 28520;
      goto LABEL_890;
    case 118:
      if (v9 != 8)
        return 0;
      v226 = *(_QWORD *)v8;
      v227 = 0x6E6F697463616269;
      goto LABEL_789;
    case 119:
      if (v9 != 8)
        return 0;
      v226 = *(_QWORD *)v8;
      v227 = 0x74656C74756F6269;
LABEL_789:
      v228 = v226 == v227;
      goto LABEL_916;
    case 120:
      if (v9 != 18)
        return 0;
      v229 = *((unsigned __int16 *)v8 + 8);
      v230 = *(_QWORD *)v8 == 0x74656C74756F6269 && *((_QWORD *)v8 + 1) == 0x697463656C6C6F63;
      v231 = 28271;
      goto LABEL_871;
    case 121:
      if (v9 != 5)
        return 0;
      v223 = v8[4];
      v224 = *(_DWORD *)v8 == 1853187689;
      v225 = 99;
      goto LABEL_895;
    case 122:
      if (v9 != 13)
        return 0;
      v35 = *(_QWORD *)v8 == 0x6972705F74696E69 && *(_QWORD *)(v8 + 5) == 0x797469726F697270;
LABEL_801:
      v232 = !v35;
      if ((v3 & 0x70000) == 0 && v232 == 0 && v7 == 0)
        return 0;
      v235 = (v3 & 0x70000) == 0x10000 && v232 == 0;
      if (!v235 || v7 != 3)
        return 0;
      goto LABEL_3474;
    case 123:
      if (v9 != 14)
        return 0;
      v23 = *(_QWORD *)(v8 + 6);
      v24 = *(_QWORD *)v8 == 0x636F5F6C65746E69;
      v26 = 0x636369625F6C636FLL;
      goto LABEL_1740;
    case 124:
      if (v9 != 16)
        return 0;
      v237 = *((_QWORD *)v8 + 1);
      v238 = *(_QWORD *)v8 == 0x6C616E7265746E69;
      v239 = 0x6567616B6E696C5FLL;
      goto LABEL_830;
    case 125:
      if (v9 != 16)
        return 0;
      v240 = *((_QWORD *)v8 + 1);
      v241 = *(_QWORD *)v8 == 0x6365737265746E69;
      v242 = 0x6C6C61636E6F6974;
      goto LABEL_913;
    case 126:
      if (v9 != 21)
        return 0;
      v237 = *(_QWORD *)(v8 + 13);
      v238 = *(_QWORD *)v8 == 0x697369765F6F746CLL && *((_QWORD *)v8 + 1) == 0x705F7974696C6962;
      v239 = 0x63696C6275705F79;
LABEL_830:
      v243 = v238 && v237 == v239;
      goto LABEL_874;
    case 128:
      if (v9 != 4)
        return 0;
      v244 = *(_DWORD *)v8 == 1717658988;
      goto LABEL_898;
    case 129:
      if (v9 != 13)
        return 0;
      v23 = *(_QWORD *)(v8 + 5);
      v24 = *(_QWORD *)v8 == 0x656D69746566696CLL;
      v26 = 0x646E756F62656D69;
      goto LABEL_1740;
    case 130:
      if (v9 == 6)
      {
        v245 = *(_DWORD *)v8 == 1701538156 && *((_WORD *)v8 + 2) == 31084;
        v29 = !v245;
        v246 = (v3 & 0x70000) == 0x10000 && !v29;
        v247 = v246 && v7 == 0;
        if (!v247 && (v3 & 0x70000) == 0x20000)
          goto LABEL_852;
      }
      return 0;
    case 131:
      if (v9 != 20)
        return 0;
      v91 = *(_QWORD *)v8 != 0x755F726564616F6CLL
         || *((_QWORD *)v8 + 1) != 0x6C616974696E696ELL
         || *((_DWORD *)v8 + 4) != 1684372073;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_3434;
      v251 = !v91;
      goto LABEL_880;
    case 135:
      *((_QWORD *)&v252 + 1) = v9;
      *(_QWORD *)&v252 = v9 - 4;
      switch((unint64_t)(v252 >> 1))
      {
        case 1uLL:
          v119 = *(_DWORD *)v8 != 1869770357 || *((_WORD *)v8 + 2) != 27756;
          if ((v3 & 0x70000) == 0x60000)
            goto LABEL_4327;
          return 0;
        case 2uLL:
          v944 = *(_QWORD *)v8 != 0x6C6C6F726E756F6ELL;
          v945 = (v3 & 0x70000) == 393216;
          goto LABEL_4329;
        case 5uLL:
          v112 = *(_QWORD *)v8 != 0x615F6C6C6F726E75 || *(_QWORD *)(v8 + 6) != 0x6D616A5F646E615FLL;
          if ((v3 & 0x70000) == 0x60000)
            goto LABEL_4344;
          return 0;
        case 6uLL:
          v1058 = *(_QWORD *)v8 != 0x6C6C6F726E756F6ELL || *((_QWORD *)v8 + 1) != 0x6D616A5F646E615FLL;
          if ((v3 & 0x70000) != 0x60000)
            return 0;
          goto LABEL_4419;
        default:
          return 0;
      }
    case 136:
      if (v9 != 18)
        return 0;
      v229 = *((unsigned __int16 *)v8 + 8);
      v230 = *(_QWORD *)v8 == 0x767265735F67696DLL && *((_QWORD *)v8 + 1) == 0x6974756F725F7265;
      v231 = 25966;
LABEL_871:
      v243 = v230 && v229 == v231;
LABEL_874:
      v91 = !v243;
      v92 = v3 & 0x70000;
      v251 = (v3 & 0x70000) == 0 && !v91;
LABEL_880:
      if (!v251 || v7 != 0)
        goto LABEL_3434;
      return 0;
    case 137:
      if (v9 != 6)
        return 0;
      v223 = *((unsigned __int16 *)v8 + 2);
      v224 = *(_DWORD *)v8 == 1633645421;
      v225 = 26978;
      goto LABEL_895;
    case 139:
      switch(v9)
      {
        case 21:
          v930 = *(_QWORD *)v8 != 0x6175747269765F5FLL
              || *((_QWORD *)v8 + 1) != 0x697265686E695F6CLL
              || *(_QWORD *)(v8 + 13) != 0x65636E6174697265;
          if ((v3 & 0x70000) == 0x50000)
            goto LABEL_4136;
          return 0;
        case 22:
          v119 = *(_QWORD *)v8 != 0x7069746C756D5F5FLL
              || *((_QWORD *)v8 + 1) != 0x7265686E695F656CLL
              || *(_QWORD *)(v8 + 14) != 0x65636E6174697265;
          if ((v3 & 0x70000) != 0x50000)
            return 0;
          goto LABEL_4327;
        case 25:
          v112 = *(_QWORD *)v8 != 0x636570736E755F5FLL
              || *((_QWORD *)v8 + 1) != 0x6E695F6465696669
              || *((_QWORD *)v8 + 2) != 0x636E617469726568
              || v8[24] != 101;
          if ((v3 & 0x70000) != 0x50000)
            return 0;
          goto LABEL_4344;
        default:
          return 0;
      }
    case 141:
      if (v9 != 9)
        return 0;
      v223 = v8[8];
      v224 = *(_QWORD *)v8 == 0x63757274735F736DLL;
LABEL_890:
      v225 = 116;
      goto LABEL_895;
    case 142:
      if (v9 != 11)
        return 0;
      v240 = *(_QWORD *)(v8 + 3);
      v241 = *(_QWORD *)v8 == 0x745F78697274616DLL;
      v242 = 0x657079745F786972;
      goto LABEL_913;
    case 143:
      if (v9 != 9)
        return 0;
      v223 = v8[8];
      v224 = *(_QWORD *)v8 == 0x61696C615F79616DLL;
      v225 = 115;
LABEL_895:
      v244 = v224 && v223 == v225;
      goto LABEL_898;
    case 144:
      if (v9 != 11)
        return 0;
      v240 = *(_QWORD *)(v8 + 3);
      v241 = *(_QWORD *)v8 == 0x6E755F656279616DLL;
      v242 = 0x6665646E755F6562;
LABEL_913:
      v228 = v241 && v240 == v242;
LABEL_916:
      v91 = !v228;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0 || v91 || v7 != 0)
        goto LABEL_3414;
      return 0;
    case 167:
      if (v9 != 35)
        return 0;
      v259 = "dispatch_quadgroups_per_threadgroup";
      goto LABEL_931;
    case 168:
      if (v9 != 35)
        return 0;
      v259 = "dispatch_simdgroups_per_threadgroup";
LABEL_931:
      v260 = 35;
      goto LABEL_968;
    case 173:
      if (v9 == 8)
      {
        v261 = *(_QWORD *)v8 != 0x746E656D67617266;
        v262 = v3 & 0x70000;
        v263 = (v3 & 0x70000) == 0x50000 && *(_QWORD *)v8 == 0x746E656D67617266;
        if (!v263 || v7 != 5)
          goto LABEL_3668;
      }
      return 0;
    case 178:
      if (v9 != 43)
        return 0;
      v259 = "geometry_intersection_function_table_offset";
      goto LABEL_947;
    case 181:
      if (v9 != 31)
        return 0;
      v963 = *(_QWORD *)v8 == 0x6D695F7361696C61
          && *((_QWORD *)v8 + 1) == 0x695F746963696C70
          && *((_QWORD *)v8 + 2) == 0x636F6C626567616DLL
          && *(_QWORD *)(v8 + 23) == 0x726F6C6F635F6B63;
      goto LABEL_3664;
    case 184:
      if (v9 != 43)
        return 0;
      v259 = "instance_intersection_function_table_offset";
LABEL_947:
      v260 = 43;
      goto LABEL_968;
    case 187:
      if (v9 == 6)
      {
        v265 = *(_DWORD *)v8 == 1852990827 && *((_WORD *)v8 + 2) == 27749;
        v119 = !v265;
        v132 = v3 & 0x70000;
        v266 = (v3 & 0x70000) == 0x50000 && !v119;
        if (!v266 || v7 != 5)
          goto LABEL_984;
      }
      return 0;
    case 191:
      if (v9 != 36)
        return 0;
      v259 = "max_total_threadgroups_per_mesh_grid";
      v260 = 36;
      goto LABEL_968;
    case 192:
      if (v9 != 33)
        return 0;
      v259 = "max_total_threads_per_threadgroup";
      v260 = 33;
LABEL_968:
      memcmp(v8, v259, v260);
      return 0;
    case 252:
      if (v9 != 6)
        return 0;
      v268 = *(_DWORD *)v8 == 1953654134 && *((_WORD *)v8 + 2) == 30821;
      v119 = !v268;
      v132 = v3 & 0x70000;
      v269 = (v3 & 0x70000) == 0x50000 && !v119;
      if (v269 && v7 == 5)
        return 0;
LABEL_984:
      if (v132 != 0x10000)
        return 0;
      goto LABEL_4327;
    case 255:
      if (v9 != 10)
        return 0;
      v963 = *(_QWORD *)v8 == 0x6261686374697473 && *((_WORD *)v8 + 4) == 25964;
LABEL_3664:
      v261 = !v963;
      v262 = v3 & 0x70000;
LABEL_3668:
      v960 = v262 == 0x10000;
      goto LABEL_3951;
    case 259:
      if (v9 != 9)
        return 0;
      v271 = v8[8];
      v272 = *(_QWORD *)v8 == 0x70696D6F7263696DLL;
      v273 = 115;
      goto LABEL_1078;
    case 260:
      if (v9 != 7)
        return 0;
      v274 = *(_DWORD *)(v8 + 3);
      v275 = *(_DWORD *)v8 == 1936615789;
      v276 = 1702521203;
      goto LABEL_1083;
    case 261:
      if (v9 != 16)
        return 0;
      v277 = *(_QWORD *)v8 == 0x746365765F6E696DLL && *((_QWORD *)v8 + 1) == 0x68746469775F726FLL;
      goto LABEL_1166;
    case 262:
      if (v9 != 6)
        return 0;
      v79 = *(_DWORD *)v8 != 1936746861 || *((_WORD *)v8 + 2) != 13873;
      v279 = v3 & 0x70000;
      v280 = (v3 & 0x70000) == 0 && !v79;
      goto LABEL_1213;
    case 263:
      if (v9 == 3)
      {
        v955 = *(_WORD *)v8 != 24934 || v8[2] != 114;
        v965 = v3 & 0x70000;
        v966 = (v3 & 0x70000) == 0 && !v955;
        goto LABEL_3919;
      }
      if (v9 != 9)
        return 0;
      v281 = v8[8];
      v282 = *(_QWORD *)v8 == 0x6C61635F676E6F6CLL;
      v283 = 108;
      goto LABEL_1013;
    case 264:
      if (v9 == 4)
      {
        v955 = *(_DWORD *)v8 != 1918985582;
        v965 = v3 & 0x70000;
        if ((v3 & 0x70000) != 0 || *(_DWORD *)v8 != 1918985582 || v7 != 0)
        {
          v969 = v965 == 0x10000 && *(_DWORD *)v8 == 1918985582;
          goto LABEL_3925;
        }
        return 3;
      }
      if (v9 == 10)
      {
        v281 = *((unsigned __int16 *)v8 + 4);
        v282 = *(_QWORD *)v8 == 0x61635F74726F6873;
        v283 = 27756;
LABEL_1013:
        v284 = v282 && v281 == v283;
        v79 = !v284;
        v279 = v3 & 0x70000;
        if ((v3 & 0x70000) != 0)
          goto LABEL_1195;
        v285 = !v79;
LABEL_1191:
        if (!v285 || v7 != 0)
        {
LABEL_1195:
          v332 = v279 == 0x10000 && !v79;
LABEL_1219:
          if (v332 && v7 == 3)
            goto LABEL_3474;
LABEL_1223:
          if (v279 == 0x20000)
            goto LABEL_3482;
        }
      }
      return 0;
    case 265:
      if (v9 != 4)
        return 0;
      v286 = *(_DWORD *)v8 == 1701080941;
      goto LABEL_1185;
    case 266:
      if (v9 != 8)
        return 0;
      v287 = *(_QWORD *)v8;
      v288 = 0x6C6961747473756DLL;
      goto LABEL_1098;
    case 267:
      if (v9 != 11)
        return 0;
      v289 = *(_QWORD *)(v8 + 3);
      v290 = *(_QWORD *)v8 == 0x75736E6F635F736ELL;
      v291 = 0x64656D75736E6F63;
      goto LABEL_1093;
    case 268:
      if (v9 != 16)
        return 0;
      v289 = *((_QWORD *)v8 + 1);
      v290 = *(_QWORD *)v8 == 0x75736E6F635F736ELL;
      v291 = 0x666C65735F73656DLL;
      goto LABEL_1093;
    case 270:
      if (v9 != 23)
        return 0;
      v292 = *(_QWORD *)(v8 + 15);
      v293 = *(_QWORD *)v8 == 0x72757465725F736ELL && *((_QWORD *)v8 + 1) == 0x726F7475615F736ELL;
      v294 = 0x7361656C6572;
      goto LABEL_1042;
    case 271:
      if (v9 != 23)
        return 0;
      v295 = *((_QWORD *)v8 + 1);
      v292 = *(_QWORD *)(v8 + 15);
      v296 = *(_QWORD *)v8 == 0x72757465725F736ELL;
      v297 = 0x725F746F6E5F736ELL;
      goto LABEL_1038;
    case 272:
      if (v9 != 19)
        return 0;
      v295 = *((_QWORD *)v8 + 1);
      v292 = *(_QWORD *)(v8 + 11);
      v296 = *(_QWORD *)v8 == 0x72757465725F736ELL;
      v297 = 0x69617465725F736ELL;
LABEL_1038:
      v293 = v296 && v295 == v297;
      v294 = 0x6E6961746572;
LABEL_1042:
      v298 = v294 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
      v91 = !v293 || v292 != v298;
      v300 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_1109;
      v301 = !v91;
      goto LABEL_1105;
    case 273:
      if (v9 == 5)
      {
        v302 = *(_DWORD *)v8 == 1701536110 && v8[4] == 100;
        v112 = !v302;
        v113 = v3 & 0x70000;
        v303 = (v3 & 0x70000) == 0 && !v112;
        if (!v303 || v7 != 0)
          goto LABEL_1353;
      }
      return 0;
    case 274:
      if (v9 != 20)
        return 0;
      v305 = *((_DWORD *)v8 + 4);
      v306 = *(_QWORD *)v8 == 0x6C6F705F6E6F656ELL && *((_QWORD *)v8 + 1) == 0x5F726F7463657679;
      v307 = 1701869940;
      goto LABEL_1163;
    case 275:
      if (v9 != 16)
        return 0;
      v289 = *((_QWORD *)v8 + 1);
      v290 = *(_QWORD *)v8 == 0x6365765F6E6F656ELL;
      v291 = 0x657079745F726F74;
      goto LABEL_1093;
    case 277:
      if (v9 != 10)
        return 0;
      v274 = *((unsigned __int16 *)v8 + 4);
      v275 = *(_QWORD *)v8 == 0x746C6975625F6F6ELL;
      v276 = 28265;
      goto LABEL_1083;
    case 278:
      if (v9 != 8)
        return 0;
      v308 = *(_QWORD *)v8;
      v309 = 0x6E6F6D6D6F636F6ELL;
      goto LABEL_1184;
    case 279:
      if (v9 != 7)
        return 0;
      v271 = *(_DWORD *)(v8 + 3);
      v272 = *(_DWORD *)v8 == 1701080942;
      v273 = 1735746149;
LABEL_1078:
      v286 = v272 && v271 == v273;
      goto LABEL_1185;
    case 280:
      if (v9 != 7)
        return 0;
      v274 = *(_DWORD *)(v8 + 3);
      v275 = *(_DWORD *)v8 == 1701080942;
      v276 = 1717924453;
LABEL_1083:
      v310 = v275 && v274 == v276;
      goto LABEL_1099;
    case 281:
      if (v9 != 10)
        return 0;
      v144 = *((unsigned __int16 *)v8 + 4);
      v145 = *(_QWORD *)v8 == 0x72747365645F6F6ELL;
      v146 = 31087;
LABEL_1088:
      v311 = v145 && v144 == v146;
      goto LABEL_1743;
    case 282:
      if (v9 != 11)
        return 0;
      v289 = *(_QWORD *)(v8 + 3);
      v290 = *(_QWORD *)v8 == 0x63696C7075646F6ELL;
      v291 = 0x65746163696C7075;
LABEL_1093:
      v310 = v290 && v289 == v291;
      goto LABEL_1099;
    case 283:
      if (v9 != 8)
        return 0;
      v287 = *(_QWORD *)v8;
      v288 = 0x6570616373656F6ELL;
LABEL_1098:
      v310 = v287 == v288;
LABEL_1099:
      v91 = !v310;
      v300 = v3 & 0x70000;
      v301 = (v3 & 0x70000) == 0 && !v91;
LABEL_1105:
      if (v301 && v7 == 0)
        return 0;
LABEL_1109:
      v313 = v300 == 0x10000 && !v91;
      goto LABEL_1112;
    case 284:
      if (v9 != 8)
        return 0;
      v315 = v3 & 0x70000;
      v316 = (v3 & 0x70000) == 0 && *(_QWORD *)v8 == 0x656E696C6E696F6ELL;
      if (v316 && v7 == 0)
        return 0;
      v319 = v315 == 0x10000 && *(_QWORD *)v8 == 0x656E696C6E696F6ELL;
      if (v319 && v7 == 3)
        goto LABEL_3474;
      v322 = v315 == 0x20000 && *(_QWORD *)v8 == 0x656E696C6E696F6ELL;
      if (v322 && v7 == 3)
        goto LABEL_3487;
      v324 = v7 == 5;
      if (v7 != 5)
        v319 = 0;
      if (!v319)
        goto LABEL_1154;
      if (*(_DWORD *)v5 == 1851878499 && v5[4] == 103)
        return 3;
      v324 = 1;
LABEL_1154:
      if (v322 && v324)
        goto LABEL_3983;
      if (v315 != 196608 || *(_QWORD *)v8 != 0x656E696C6E696F6ELL || v7)
        return 0;
      return 5;
    case 285:
      if (v9 != 22)
        return 0;
      v326 = *((_QWORD *)v8 + 1);
      v327 = *(_QWORD *)(v8 + 14);
      v328 = *(_QWORD *)v8 == 0x7274736E695F6F6ELL;
      goto LABEL_1202;
    case 286:
      if (v9 != 7)
        return 0;
      v305 = *(_DWORD *)(v8 + 3);
      v306 = *(_DWORD *)v8 == 1701670766;
      v307 = 1701278309;
LABEL_1163:
      v277 = v306 && v305 == v307;
LABEL_1166:
      v91 = !v277;
      v300 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v91 && v7 == 0)
        return 0;
      if (v300 != 0x10000)
        goto LABEL_1116;
      v313 = !v91;
LABEL_1112:
      if (v313 && v7 == 5)
        goto LABEL_3441;
LABEL_1116:
      if (v300 != 0x20000)
        return 0;
      goto LABEL_3443;
    case 287:
      if (v9 != 11)
        return 0;
      v286 = *(_QWORD *)v8 == 0x6D6F7263696D6F6ELL && *(_QWORD *)(v8 + 3) == 0x7370696D6F726369;
      goto LABEL_1185;
    case 288:
      if (v9 != 8)
        return 0;
      v308 = *(_QWORD *)v8;
      v309 = 0x36317370696D6F6ELL;
LABEL_1184:
      v286 = v308 == v309;
LABEL_1185:
      v79 = !v286;
      v279 = v3 & 0x70000;
      v285 = (v3 & 0x70000) == 0 && !v79;
      goto LABEL_1191;
    case 289:
      if (v9 != 30)
        return 0;
      v326 = *((_QWORD *)v8 + 2);
      v327 = *(_QWORD *)(v8 + 22);
      v328 = *(_QWORD *)v8 == 0x69666F72705F6F6ELL && *((_QWORD *)v8 + 1) == 0x7274736E695F656CLL;
LABEL_1202:
      v79 = !v328 || v326 != 0x75665F746E656D75 || v327 != 0x6E6F6974636E7566;
      v279 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0)
      {
        v280 = !v79;
LABEL_1213:
        if (v280 && v7 == 0)
          return 0;
      }
      if (v279 != 0x10000)
        goto LABEL_1223;
      v332 = !v79;
      goto LABEL_1219;
    case 290:
      if (v9 != 19)
        return 0;
      v338 = *(_QWORD *)v8 == 0x6F646E61725F6F6ELL
          && *((_QWORD *)v8 + 1) == 0x79616C5F657A696DLL
          && *(_QWORD *)(v8 + 11) == 0x74756F79616C5F65;
      goto LABEL_1287;
    case 291:
      if (v9 != 8)
        return 0;
      v339 = *(_QWORD *)v8 == 0x6E72757465726F6ELL;
      goto LABEL_1343;
    case 292:
      if (v9 != 11)
        return 0;
      v340 = *(_QWORD *)v8 == 0x74696E61735F6F6ELL && *(_QWORD *)(v8 + 3) == 0x657A6974696E6173;
      v341 = !v340;
      v342 = v3 & 0x70000;
      v343 = (v3 & 0x70000) == 0 && !v341;
      if (v343 && v7 == 0)
        return 0;
      v345 = v342 == 0x10000 && !v341;
      goto LABEL_1323;
    case 293:
      switch(v9)
      {
        case 18:
          v1030 = *(_QWORD *)v8 != 0x74696E61735F6F6ELL
               || *((_QWORD *)v8 + 1) != 0x657268745F657A69
               || *((_WORD *)v8 + 8) != 25697;
          v1031 = v3 & 0x70000;
          if ((v3 & 0x70000) == 0 && !v1030 && v7 == 0)
            return 6;
          if (v1031 == 0x10000 && !v1030 && v7 == 3)
          {
            if (*(_WORD *)v5 == 28263 && v5[2] == 117)
              return 7;
            v1035 = 0;
          }
          else
          {
            v1035 = v1031 == 0x20000;
            if (v1031 == 0x20000 && !v1030 && v7 == 3)
            {
              if (*(_WORD *)v5 == 28263 && v5[2] == 117)
                return 8;
              v1035 = 1;
            }
          }
          v1158 = *(_QWORD *)v8 != 0x74696E61735F6F6ELL
               || *((_QWORD *)v8 + 1) != 0x6F6D656D5F657A69
               || *((_WORD *)v8 + 8) != 31090;
          if (!v1031 && !v1158 && v7 == 0)
            return 9;
          if (v1031 == 0x10000 && !v1158 && v7 == 5 && *(_DWORD *)v5 == 1851878499 && v5[4] == 103)
            return 10;
          v1166 = !v1035;
          if (v1158)
            v1166 = 1;
          if ((v1166 & 1) == 0 && v7 == 5 && *(_DWORD *)v5 == 1851878499 && v5[4] == 103)
            return 11;
          return 0;
        case 19:
          v955 = *(_QWORD *)v8 != 0x74696E61735F6F6ELL
              || *((_QWORD *)v8 + 1) != 0x726464615F657A69
              || *(_QWORD *)(v8 + 11) != 0x737365726464615FLL;
          v965 = v3 & 0x70000;
          if ((v3 & 0x70000) == 0)
          {
            v966 = !v955;
LABEL_3919:
            if (v966 && v7 == 0)
              return 3;
          }
          if (v965 == 0x10000)
          {
            v969 = !v955;
LABEL_3925:
            if (v969 && v7 == 3)
              goto LABEL_3930;
          }
          if (v965 != 0x20000)
            return 0;
LABEL_4074:
          if (!v955 && v7 == 3)
            goto LABEL_4079;
          break;
        case 26:
          v346 = *(_QWORD *)v8 == 0x65726464615F6F6ELL && *((_QWORD *)v8 + 1) == 0x74656661735F7373;
          v347 = v346 && *((_QWORD *)v8 + 2) == 0x73796C616E615F79;
          v348 = v347 && *((_WORD *)v8 + 12) == 29545;
          v79 = !v348;
          v349 = v3 & 0x70000;
          if ((v3 & 0x70000) != 0)
            goto LABEL_1297;
          v350 = !v79;
LABEL_1293:
          if (!v350 || v7 != 0)
          {
LABEL_1297:
            if (v349 == 0x10000 && !v79 && v7 == 3)
              goto LABEL_3474;
            if (v349 != 0x20000)
              return 0;
LABEL_3482:
            if (!v79 && v7 == 3)
              goto LABEL_3487;
          }
          break;
      }
      return 0;
    case 294:
      if (v9 != 29)
        return 0;
      v341 = *(_QWORD *)v8 != 0x75636570735F6F6ELL
          || *((_QWORD *)v8 + 1) != 0x6C5F65766974616CLL
          || *((_QWORD *)v8 + 2) != 0x647261685F64616FLL
          || *(_QWORD *)(v8 + 21) != 0x676E696E65647261;
      v342 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_1321;
      v354 = !v341;
      goto LABEL_1317;
    case 295:
      if (v9 != 14)
        return 0;
      v338 = *(_QWORD *)v8 == 0x74696C70735F6F6ELL && *(_QWORD *)(v8 + 6) == 0x6B636174735F7469;
LABEL_1287:
      v79 = !v338;
      v349 = v3 & 0x70000;
      v350 = (v3 & 0x70000) == 0 && !v79;
      goto LABEL_1293;
    case 296:
      if (v9 != 18)
        return 0;
      v341 = *(_QWORD *)v8 != 0x6B636174735F6F6ELL
          || *((_QWORD *)v8 + 1) != 0x746365746F72705FLL
          || *((_WORD *)v8 + 8) != 29295;
      v342 = v3 & 0x70000;
      v354 = (v3 & 0x70000) == 0 && !v341;
LABEL_1317:
      if (v354 && v7 == 0)
        return 0;
LABEL_1321:
      if (v342 == 0x10000)
      {
        v345 = !v341;
LABEL_1323:
        if (v345 && v7 == 5)
          goto LABEL_3441;
      }
      if (v342 != 0x20000)
        return 0;
      goto LABEL_1654;
    case 297:
      if (v9 != 25)
        return 0;
      v363 = *(_QWORD *)v8 == 0x61657268745F6F6ELL
          && *((_QWORD *)v8 + 1) == 0x7974656661735F64
          && *((_QWORD *)v8 + 2) == 0x6973796C616E615FLL
          && v8[24] == 115;
      goto LABEL_1624;
    case 298:
      if (v9 != 7)
        return 0;
      v339 = *(_DWORD *)v8 == 1752461166 && *(_DWORD *)(v8 + 3) == 2003792488;
LABEL_1343:
      v112 = !v339;
      v113 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v112 && v7 == 0)
        return 0;
LABEL_1353:
      if (v113 == 0x10000 && !v112 && v7 == 3)
        goto LABEL_3474;
      if (v113 == 0x20000 && !v112 && v7 == 3)
        goto LABEL_3487;
LABEL_1365:
      if (v113 != 196608)
        return 0;
LABEL_4344:
      v1059 = !v112;
      goto LABEL_4345;
    case 299:
      if (v9 != 13)
        return 0;
      v369 = *(_QWORD *)v8 == 0x65636172745F6F6ELL && *(_QWORD *)(v8 + 5) == 0x746E696F70656361;
      v370 = !v369;
      v371 = (v3 & 0x70000) == 0 && !v370;
      if (v371 && v7 == 0)
        return 0;
      v373 = (v3 & 0x70000) == 0x10000 && !v370;
      if (!v373 || v7 != 5)
        return 0;
      goto LABEL_3441;
    case 301:
      if (v9 != 7)
        return 0;
      v375 = *(_DWORD *)v8 == 1852731246 && *(_DWORD *)(v8 + 3) == 1819047278;
      v376 = !v375;
      v377 = v3 & 0x70000;
      v378 = (v3 & 0x70000) == 0 && !v376;
      if (v378 && v7 == 0)
        return 0;
      if (v377 == 0x10000 && !v376 && v7 == 3)
        goto LABEL_3474;
      if (v377 != 0x20000)
        return 0;
      if (v376 || v7 != 3)
        return 0;
      goto LABEL_3487;
    case 302:
      if (v9 != 15)
        return 0;
      v383 = *(_QWORD *)(v8 + 7);
      v384 = *(_QWORD *)v8 == 0x6C6961745F746F6ELL;
      v385 = 0x64656C6C61635F6CLL;
      goto LABEL_1536;
    case 303:
      if (v9 != 11)
        return 0;
      v386 = *(_QWORD *)(v8 + 3);
      v387 = *(_QWORD *)v8 == 0x75736E6F635F736FLL;
      v388 = 0x6D75736E6F63;
      goto LABEL_1500;
    case 304:
      if (v9 != 16)
        return 0;
      v386 = *((_QWORD *)v8 + 1);
      v387 = *(_QWORD *)v8 == 0x75736E6F635F736FLL;
      v389 = 0x736968745F73656DLL;
      goto LABEL_1501;
    case 305:
      if (v9 != 23)
        return 0;
      v390 = *((_QWORD *)v8 + 1);
      v386 = *(_QWORD *)(v8 + 15);
      v391 = *(_QWORD *)v8 == 0x72757465725F736FLL;
      v392 = 0x725F746F6E5F736ELL;
      goto LABEL_1496;
    case 306:
      if (v9 != 19)
        return 0;
      v390 = *((_QWORD *)v8 + 1);
      v386 = *(_QWORD *)(v8 + 11);
      v391 = *(_QWORD *)v8 == 0x72757465725F736FLL;
      v392 = 0x69617465725F736ELL;
      goto LABEL_1496;
    case 307:
      if (v9 != 31)
        return 0;
      v363 = *(_QWORD *)v8 == 0x72757465725F736FLL
          && *((_QWORD *)v8 + 1) == 0x69617465725F736ELL
          && *((_QWORD *)v8 + 2) == 0x6E5F6E6F5F64656ELL
          && *(_QWORD *)(v8 + 23) == 0x6F72657A5F6E6F6ELL;
      goto LABEL_1624;
    case 308:
      if (v9 != 27)
        return 0;
      v395 = *(_QWORD *)(v8 + 19);
      v397 = *(_QWORD *)v8 == 0x72757465725F736FLL
          && *((_QWORD *)v8 + 1) == 0x69617465725F736ELL
          && *((_QWORD *)v8 + 2) == 0x7A5F6E6F5F64656ELL;
      v398 = 0x6F72657A5F6E6F5FLL;
      goto LABEL_1621;
    case 309:
      if (v9 != 12)
        return 0;
      v399 = *((_DWORD *)v8 + 2);
      v400 = *(_QWORD *)v8 == 0x786F625F636A626FLL;
      v401 = 1701601889;
      goto LABEL_1506;
    case 310:
      if (v9 != 11)
        return 0;
      v383 = *(_QWORD *)(v8 + 3);
      v384 = *(_QWORD *)v8 == 0x6972625F636A626FLL;
      v385 = 0x6567646972625F63;
      goto LABEL_1536;
    case 311:
      if (v9 != 19)
        return 0;
      v386 = *(_QWORD *)(v8 + 11);
      v387 = *(_QWORD *)v8 == 0x6972625F636A626FLL && *((_QWORD *)v8 + 1) == 0x6174756D5F656764;
      v389 = 0x656C626174756D5FLL;
      goto LABEL_1501;
    case 312:
      if (v9 != 19)
        return 0;
      v386 = *(_QWORD *)(v8 + 11);
      v387 = *(_QWORD *)v8 == 0x6972625F636A626FLL && *((_QWORD *)v8 + 1) == 0x616C65725F656764;
      v388 = 0x74616C65725FLL;
      goto LABEL_1500;
    case 313:
      if (v9 != 15)
        return 0;
      v383 = *(_QWORD *)(v8 + 7);
      v384 = *(_QWORD *)v8 == 0x616C635F636A626FLL;
      v385 = 0x627574735F737361;
      goto LABEL_1536;
    case 315:
      if (v9 != 27)
        return 0;
      v395 = *(_QWORD *)(v8 + 19);
      v397 = *(_QWORD *)v8 == 0x7365645F636A626FLL
          && *((_QWORD *)v8 + 1) == 0x5F646574616E6769
          && *((_QWORD *)v8 + 2) == 0x696C616974696E69;
      v398 = 0x72657A696C616974;
      goto LABEL_1621;
    case 316:
      if (v9 != 11)
        return 0;
      v383 = *(_QWORD *)(v8 + 3);
      v384 = *(_QWORD *)v8 == 0x7269645F636A626FLL;
      v385 = 0x7463657269645F63;
      goto LABEL_1536;
    case 317:
      if (v9 != 19)
        return 0;
      v386 = *(_QWORD *)(v8 + 11);
      v387 = *(_QWORD *)v8 == 0x7269645F636A626FLL && *((_QWORD *)v8 + 1) == 0x626D656D5F746365;
      v389 = 0x737265626D656D5FLL;
      goto LABEL_1501;
    case 318:
      if (v9 != 14)
        return 0;
      v383 = *(_QWORD *)(v8 + 6);
      v384 = *(_QWORD *)v8 == 0x6378655F636A626FLL;
      v385 = 0x6E6F697470656378;
      goto LABEL_1536;
    case 319:
      if (v9 != 46)
        return 0;
      v403 = memcmp(v8, "objc_protocol_requires_explicit_implementation", 0x2EuLL);
      v404 = v3 & 0x70000;
      v405 = (v3 & 0x70000) == 0 && v403 == 0;
      if (v405 && v7 == 0)
        return 0;
      if (v404 == 0x10000 && v403 == 0 && v7 == 5)
        goto LABEL_3441;
      if (v404 != 0x20000)
        return 0;
      goto LABEL_1573;
    case 320:
      if (v9 != 24)
        return 0;
      v390 = *((_QWORD *)v8 + 1);
      v386 = *((_QWORD *)v8 + 2);
      v391 = *(_QWORD *)v8 == 0x7478655F636A626FLL;
      v392 = 0x5F796C6C616E7265;
LABEL_1496:
      v387 = v391 && v390 == v392;
      v388 = 0x6E6961746572;
LABEL_1500:
      v389 = v388 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
      goto LABEL_1501;
    case 321:
      if (v9 != 7)
        return 0;
      v399 = *(_DWORD *)(v8 + 3);
      v400 = *(_DWORD *)v8 == 1667916399;
      v401 = 1667719011;
LABEL_1506:
      v410 = v400 && v399 == v401;
      goto LABEL_1539;
    case 322:
      if (v9 != 22)
        return 0;
      v386 = *(_QWORD *)(v8 + 14);
      v387 = *(_QWORD *)v8 == 0x646E695F636A626FLL && *((_QWORD *)v8 + 1) == 0x746E65646E657065;
      v389 = 0x7373616C635F746ELL;
      goto LABEL_1501;
    case 325:
      if (v9 != 18)
        return 0;
      v411 = *((unsigned __int16 *)v8 + 8);
      v412 = *(_QWORD *)v8 == 0x74656D5F636A626FLL && *((_QWORD *)v8 + 1) == 0x696D61665F646F68;
      v413 = 31084;
      goto LABEL_1634;
    case 326:
      if (v9 != 8)
        return 0;
      v410 = *(_QWORD *)v8 == 0x7463656A624F534ELL;
      goto LABEL_1539;
    case 327:
      if (v9 != 18)
        return 0;
      v411 = *((unsigned __int16 *)v8 + 8);
      v412 = *(_QWORD *)v8 == 0x6E6F6E5F636A626FLL && *((_QWORD *)v8 + 1) == 0x616C635F797A616CLL;
      v413 = 29555;
      goto LABEL_1634;
    case 328:
      if (v9 != 25)
        return 0;
      v414 = v8[24];
      v416 = *(_QWORD *)v8 == 0x6E6F6E5F636A626FLL
          && *((_QWORD *)v8 + 1) == 0x656D69746E75725FLL
          && *((_QWORD *)v8 + 2) == 0x6F636F746F72705FLL;
      v417 = 108;
      goto LABEL_1589;
    case 329:
      if (v9 != 14)
        return 0;
      v383 = *(_QWORD *)(v8 + 6);
      v384 = *(_QWORD *)v8 == 0x6E776F5F636A626FLL;
      v385 = 0x7069687372656E77;
LABEL_1536:
      v410 = v384 && v383 == v385;
LABEL_1539:
      v341 = !v410;
      v418 = v3 & 0x70000;
      v419 = (v3 & 0x70000) == 0 && !v341;
      goto LABEL_1545;
    case 330:
      if (v9 != 21)
        return 0;
      v386 = *(_QWORD *)(v8 + 13);
      v387 = *(_QWORD *)v8 == 0x6572705F636A626FLL && *((_QWORD *)v8 + 1) == 0x66696C5F65736963;
      v389 = 0x656D69746566696CLL;
      goto LABEL_1501;
    case 331:
      if (v9 != 34)
        return 0;
      v403 = memcmp(v8, "objc_requires_property_definitions", 0x22uLL);
      v422 = v3 & 0x70000;
      v423 = (v3 & 0x70000) == 0 && v403 == 0;
      if (v423 && v7 == 0)
        return 0;
      if (v422 == 0x10000 && v403 == 0 && v7 == 5)
        goto LABEL_3441;
      if (v422 != 0x20000)
        return 0;
LABEL_1573:
      if (v403 || v7 != 5)
        return 0;
      goto LABEL_3448;
    case 332:
      if (v9 != 19)
        return 0;
      v386 = *(_QWORD *)(v8 + 11);
      v387 = *(_QWORD *)v8 == 0x7165725F636A626FLL && *((_QWORD *)v8 + 1) == 0x75735F7365726975;
      v389 = 0x72657075735F7365;
LABEL_1501:
      v409 = v387 && v386 == v389;
      goto LABEL_1637;
    case 333:
      if (v9 != 26)
        return 0;
      v414 = *((unsigned __int16 *)v8 + 12);
      v416 = *(_QWORD *)v8 == 0x7465725F636A626FLL
          && *((_QWORD *)v8 + 1) == 0x6E6E695F736E7275
          && *((_QWORD *)v8 + 2) == 0x746E696F705F7265;
      v417 = 29285;
LABEL_1589:
      v363 = v416 && v414 == v417;
      goto LABEL_1624;
    case 334:
      if (v9 != 15)
        return 0;
      v409 = *(_QWORD *)v8 == 0x6F6F725F636A626FLL && *(_QWORD *)(v8 + 7) == 0x7373616C635F746FLL;
      goto LABEL_1637;
    case 335:
      if (v9 != 17)
        return 0;
      v411 = v8[16];
      v412 = *(_QWORD *)v8 == 0x6E75725F636A626FLL && *((_QWORD *)v8 + 1) == 0x6D616E5F656D6974;
      v413 = 101;
      goto LABEL_1634;
    case 336:
      if (v9 != 20)
        return 0;
      v341 = *(_QWORD *)v8 != 0x6E75725F636A626FLL
          || *((_QWORD *)v8 + 1) != 0x7369765F656D6974
          || *((_DWORD *)v8 + 4) != 1701601897;
      v418 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0)
      {
        v419 = !v341;
LABEL_1545:
        if (v419 && v7 == 0)
          return 0;
      }
      v421 = v418 == 0x10000 && !v341;
      goto LABEL_1649;
    case 337:
      if (v9 != 27)
        return 0;
      v395 = *(_QWORD *)(v8 + 19);
      v397 = *(_QWORD *)v8 == 0x6275735F636A626FLL
          && *((_QWORD *)v8 + 1) == 0x676E697373616C63
          && *((_QWORD *)v8 + 2) == 0x636972747365725FLL;
      v398 = 0x6465746369727473;
LABEL_1621:
      v363 = v397 && v395 == v398;
LABEL_1624:
      v341 = !v363;
      v418 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0)
        goto LABEL_1647;
      v431 = !v341;
LABEL_1643:
      if (v431 && v7 == 0)
        return 0;
LABEL_1647:
      if (v418 == 0x10000)
      {
        v421 = !v341;
LABEL_1649:
        if (v421 && v7 == 5)
          goto LABEL_3441;
      }
      if (v418 != 0x20000)
        return 0;
LABEL_1654:
      if (v341 || v7 != 5)
        return 0;
      goto LABEL_3448;
    case 338:
      if (v9 != 20)
        return 0;
      v411 = *((_DWORD *)v8 + 4);
      v412 = *(_QWORD *)v8 == 0x7075735F636A626FLL && *((_QWORD *)v8 + 1) == 0x69645F7373657270;
      v413 = 1952671090;
LABEL_1634:
      v409 = v412 && v411 == v413;
LABEL_1637:
      v341 = !v409;
      v418 = v3 & 0x70000;
      v431 = (v3 & 0x70000) == 0 && !v341;
      goto LABEL_1643;
    case 340:
      switch(v9)
      {
        case 9:
          v435 = v8[8];
          v436 = *(_QWORD *)v8 == 0x6C6E6F5F64616572;
          v437 = 121;
          goto LABEL_3944;
        case 10:
          v1099 = *(_QWORD *)v8 != 0x6E6F5F6574697277 || *((_WORD *)v8 + 4) != 31084;
          if ((v3 & 0x70000) == 0x50000 && !v1099 && v7 == 0)
            return 3;
          v1103 = *(_QWORD *)v8 != 0x6972775F64616572 || *((_WORD *)v8 + 4) != 25972;
          if ((v3 & 0x70000) != 0x50000)
            return 0;
          v1024 = !v1103;
          goto LABEL_4438;
        case 12:
          v1105 = *(_QWORD *)v8 != 0x5F65746972775F5FLL || *((_DWORD *)v8 + 2) != 2037149295;
          if ((v3 & 0x70000) == 0x50000 && !v1105 && v7 == 0)
            return 2;
          v1109 = *(_QWORD *)v8 != 0x775F646165725F5FLL || *((_DWORD *)v8 + 2) != 1702127986;
          if ((v3 & 0x70000) != 0x50000)
            return 0;
          v783 = !v1109;
          goto LABEL_4420;
        default:
          return 0;
      }
    case 341:
      if (v9 == 8)
      {
        v983 = *(_QWORD *)v8 == 0x746E6174736E6F63;
        goto LABEL_3947;
      }
      if (v9 != 15)
        return 0;
      v1045 = *(_QWORD *)(v8 + 7);
      v1046 = *(_QWORD *)v8 == 0x635F6C636E65706FLL;
      v1047 = 0x746E6174736E6F63;
      goto LABEL_3961;
    case 342:
      if (v9 == 7)
      {
        v435 = *(_DWORD *)(v8 + 3);
        v436 = *(_DWORD *)v8 == 1701733735;
        v437 = 1667854949;
        goto LABEL_3944;
      }
      if (v9 != 14)
        return 0;
      v1045 = *(_QWORD *)(v8 + 6);
      v1046 = *(_QWORD *)v8 == 0x675F6C636E65706FLL;
      v1047 = 0x636972656E65675FLL;
      goto LABEL_3961;
    case 343:
      if (v9 == 6)
      {
        v435 = *((unsigned __int16 *)v8 + 2);
        v436 = *(_DWORD *)v8 == 1651469415;
        v437 = 27745;
        goto LABEL_3944;
      }
      if (v9 != 13)
        return 0;
      v1048 = *(_QWORD *)v8 == 0x675F6C636E65706FLL && *(_QWORD *)(v8 + 5) == 0x6C61626F6C675F6CLL;
      goto LABEL_3964;
    case 344:
      if (v9 != 20)
        return 0;
      v439 = *(_QWORD *)v8 == 0x675F6C636E65706FLL
          && *((_QWORD *)v8 + 1) == 0x65645F6C61626F6CLL
          && *((_DWORD *)v8 + 4) == 1701013878;
      goto LABEL_1772;
    case 345:
      if (v9 != 18)
        return 0;
      v441 = *(_QWORD *)v8 == 0x675F6C636E65706FLL
          && *((_QWORD *)v8 + 1) == 0x6F685F6C61626F6CLL
          && *((_WORD *)v8 + 8) == 29811;
      goto LABEL_1696;
    case 351:
      if (v9 != 6)
        return 0;
      v435 = *((unsigned __int16 *)v8 + 2);
      v436 = *(_DWORD *)v8 == 1852990827;
      v437 = 27749;
      goto LABEL_3944;
    case 352:
      if (v9 == 5)
      {
        v435 = v8[4];
        v436 = *(_DWORD *)v8 == 1633906540;
        v437 = 108;
        goto LABEL_3944;
      }
      if (v9 != 12)
        return 0;
      v1048 = *(_QWORD *)v8 == 0x6C5F6C636E65706FLL && *((_DWORD *)v8 + 2) == 1818321775;
      goto LABEL_3964;
    case 354:
      if (v9 == 7)
      {
        v435 = *(_DWORD *)(v8 + 3);
        v436 = *(_DWORD *)v8 == 1986622064;
        v437 = 1702125942;
LABEL_3944:
        v983 = v436 && v435 == v437;
LABEL_3947:
        v261 = !v983;
        v960 = (v3 & 0x70000) == 327680;
LABEL_3951:
        v664 = v960 && !v261;
        goto LABEL_3954;
      }
      if (v9 != 14)
        return 0;
      v1045 = *(_QWORD *)(v8 + 6);
      v1046 = *(_QWORD *)v8 == 0x705F6C636E65706FLL;
      v1047 = 0x657461766972705FLL;
LABEL_3961:
      v1048 = v1046 && v1045 == v1047;
LABEL_3964:
      v1050 = !v1048;
      v1051 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v1050 && v7 == 0)
        return 2;
      if (v1051 == 0x10000 && !v1050 && v7 == 5)
        goto LABEL_4312;
      if (v1051 == 0x20000 && !v1050 && v7 == 5)
        goto LABEL_3983;
      return 0;
    case 356:
      if (v9 != 7)
        return 0;
      v441 = *(_DWORD *)v8 == 1853124719 && *(_DWORD *)(v8 + 3) == 1701736302;
LABEL_1696:
      v442 = !v441;
      v443 = v3 & 0x70000;
      v444 = (v3 & 0x70000) == 0 && !v442;
      goto LABEL_1702;
    case 357:
      if (v9 != 12)
        return 0;
      v447 = *(_QWORD *)v8 == 0x64616F6C7265766FLL && *((_DWORD *)v8 + 2) == 1701601889;
      goto LABEL_1830;
    case 359:
      if (v9 != 17)
      {
        if (v9 == 15)
        {
          v448 = *(_QWORD *)v8 == 0x69687372656E776FLL && *(_QWORD *)(v8 + 7) == 0x73646C6F685F7069;
          v449 = !v448;
          v450 = v3 & 0x70000;
          if ((v3 & 0x70000) != 0 || (!v449 ? (v451 = v7 == 0) : (v451 = 0), !v451))
          {
            if (v450 == 0x10000 && (!v449 ? (v452 = v7 == 5) : (v452 = 0), v452))
            {
              if (*(_DWORD *)v5 == 1851878499 && v5[4] == 103)
                return 1;
              v454 = 0;
            }
            else
            {
              v454 = v450 == 0x20000;
              if (v450 == 0x20000 && !v449 && v7 == 5)
              {
                if (*(_DWORD *)v5 == 1851878499 && v5[4] == 103)
                  return 2;
                v454 = 1;
              }
            }
            v1144 = *(_QWORD *)v8 != 0x69687372656E776FLL || *(_QWORD *)(v8 + 7) != 0x73656B61745F7069;
            if (!v450 && !v1144 && v7 == 0)
              return 6;
            if (v450 == 0x10000 && !v1144 && v7 == 5 && *(_DWORD *)v5 == 1851878499 && v5[4] == 103)
              return 7;
            v1162 = !v454;
            if (v1144)
              v1162 = 1;
            if ((v1162 & 1) == 0 && v7 == 5 && *(_DWORD *)v5 == 1851878499 && v5[4] == 103)
              return 8;
          }
        }
        return 0;
      }
      v972 = *(_QWORD *)v8 != 0x69687372656E776FLL || *((_QWORD *)v8 + 1) != 0x6E72757465725F70 || v8[16] != 115;
      v973 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v972 && v7 == 0)
        return 3;
      if (v973 != 0x10000)
        goto LABEL_3726;
      v975 = !v972;
      goto LABEL_3722;
    case 360:
      if (v9 != 6)
        return 0;
      v455 = *((unsigned __int16 *)v8 + 2);
      v456 = *(_DWORD *)v8 == 1801675120;
      v457 = 25701;
      goto LABEL_1798;
    case 362:
      if (v9 != 15)
        return 0;
      v23 = *(_QWORD *)(v8 + 7);
      v24 = *(_QWORD *)v8 == 0x79745F6D61726170;
      v26 = 0x6574617473657079;
LABEL_1740:
      v311 = v24 && v23 == v26;
LABEL_1743:
      v127 = !v311;
      v128 = v3 & 0x70000;
      v129 = (v3 & 0x70000) == 0 && !v127;
      goto LABEL_1749;
    case 363:
      if (v9 == 8)
      {
        v1056 = *(_QWORD *)v8 == 0x6C61637361705F5FLL;
        goto LABEL_4004;
      }
      if (v9 == 7)
      {
        v1058 = *(_DWORD *)v8 != 1935765599 || *(_DWORD *)(v8 + 3) != 1818321779;
        if ((v3 & 0x70000) == 0x50000)
        {
LABEL_4419:
          v783 = !v1058;
          goto LABEL_4420;
        }
        return 0;
      }
      if (v9 != 6)
        return 0;
      v459 = *(_DWORD *)v8 == 1668505968 && *((_WORD *)v8 + 2) == 27745;
      v442 = !v459;
      v443 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0)
      {
        v444 = !v442;
LABEL_1702:
        if (v444 && v7 == 0)
          return 0;
      }
      if (v443 != 0x10000)
        goto LABEL_1847;
      v446 = !v442;
      goto LABEL_1843;
    case 364:
      if (v9 != 24)
      {
        if (v9 != 16)
          return 0;
        v439 = *(_QWORD *)v8 == 0x6A626F5F73736170 && *((_QWORD *)v8 + 1) == 0x657A69735F746365;
LABEL_1772:
        v442 = !v439;
        v443 = v3 & 0x70000;
        if ((v3 & 0x70000) == 0)
        {
          v460 = !v442;
LABEL_1836:
          if (v460 && v7 == 0)
            return 0;
        }
        v446 = v443 == 0x10000 && !v442;
LABEL_1843:
        if (!v446 || v7 != 5)
        {
LABEL_1847:
          if (v443 == 0x20000 && !v442 && v7 == 5)
            goto LABEL_3448;
          return 0;
        }
        goto LABEL_3441;
      }
      v972 = *(_QWORD *)v8 != 0x6E79645F73736170
          || *((_QWORD *)v8 + 1) != 0x6A626F5F63696D61
          || *((_QWORD *)v8 + 2) != 0x657A69735F746365;
      v973 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v972 && v7 == 0)
        return 3;
      v975 = v973 == 0x10000 && !v972;
LABEL_3722:
      if (!v975 || v7 != 5)
      {
LABEL_3726:
        if (v973 == 0x20000 && !v972 && v7 == 5)
          goto LABEL_4282;
        return 0;
      }
      goto LABEL_3983;
    case 365:
      if (v9 != 24)
        return 0;
      v461 = *(_QWORD *)v8 == 0x6C62616863746170 && *((_QWORD *)v8 + 1) == 0x6974636E75665F65;
      v462 = v461 && *((_QWORD *)v8 + 2) == 0x7972746E655F6E6FLL;
      v463 = !v462;
      v464 = v3 & 0x70000;
      v465 = (v3 & 0x70000) == 0 && !v463;
      if (v465 && v7 == 0)
        return 0;
      if (v464 != 0x10000)
        goto LABEL_1818;
      v467 = !v463;
      goto LABEL_1814;
    case 366:
      if (v9 != 3)
        return 0;
      v455 = v8[2];
      v456 = *(unsigned __int16 *)v8 == 25456;
      v457 = 115;
LABEL_1798:
      v463 = !v456 || v455 != v457;
      v464 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v463 && v7 == 0)
        return 0;
      v467 = v464 == 0x10000 && !v463;
LABEL_1814:
      if (v467 && v7 == 3)
        goto LABEL_3474;
LABEL_1818:
      if (v464 != 0x20000)
        return 0;
      if (v463 || v7 != 3)
        return 0;
      goto LABEL_3487;
    case 368:
      if (v9 != 27)
        return 0;
      v983 = *(_QWORD *)v8 == 0x7475617274705F5FLL
          && *((_QWORD *)v8 + 1) == 0x6972747365725F68
          && *((_QWORD *)v8 + 2) == 0x746E695F64657463
          && *(_QWORD *)(v8 + 19) == 0x727470746E695F64;
      goto LABEL_3947;
    case 369:
      if (v9 != 14)
        return 0;
      v447 = *(_QWORD *)v8 == 0x5F68747561727470 && *(_QWORD *)(v8 + 6) == 0x7463757274735F68;
LABEL_1830:
      v442 = !v447;
      v443 = v3 & 0x70000;
      v460 = (v3 & 0x70000) == 0 && !v442;
      goto LABEL_1836;
    case 375:
      if (v9 != 14)
        return 0;
      v476 = *(_QWORD *)(v8 + 6);
      v477 = *(_QWORD *)v8 == 0x6572726566657270;
      v478 = 0x656D616E5F646572;
      goto LABEL_2013;
    case 376:
      if (v9 != 12)
        return 0;
      v479 = *(_QWORD *)v8 == 0x6576726573657270 && *((_DWORD *)v8 + 2) == 1819042143;
      v480 = !v479;
      v481 = v3 & 0x70000;
      v482 = (v3 & 0x70000) == 0 && !v480;
      if (v482 && v7 == 0)
        return 0;
      if (v481 == 0x10000 && !v480 && v7 == 5)
        goto LABEL_3441;
      if (v481 != 0x20000)
        return 0;
      goto LABEL_2075;
    case 377:
      if (v9 != 13)
        return 0;
      v486 = *(_QWORD *)v8 == 0x6576726573657270 && *(_QWORD *)(v8 + 5) == 0x74736F6D5F657672;
      v480 = !v486;
      v487 = v3 & 0x70000;
      v488 = (v3 & 0x70000) == 0 && !v480;
      if (v488 && v7 == 0)
        return 0;
      if (v487 == 0x10000 && !v480 && v7 == 5)
        goto LABEL_3441;
      if (v487 != 0x20000)
        return 0;
      goto LABEL_2075;
    case 379:
      if (v9 != 14)
        return 0;
      v476 = *(_QWORD *)(v8 + 6);
      v477 = *(_QWORD *)v8 == 0x64726175675F7470;
      v478 = 0x7261765F64656472;
      goto LABEL_2013;
    case 382:
      if (v9 != 4)
        return 0;
      v492 = *(_DWORD *)v8 != 1701999984;
      v493 = v3 & 0x70000;
      v494 = (v3 & 0x70000) == 0 && *(_DWORD *)v8 == 1701999984;
      if (v494 && v7 == 0)
        return 0;
      if (v493 == 0x10000 && *(_DWORD *)v8 == 1701999984 && v7 == 3)
        goto LABEL_3474;
      if (v493 != 0x20000)
        return 0;
      goto LABEL_2119;
    case 383:
      if (v9 != 16)
        return 0;
      v498 = *(_QWORD *)v8 == 0x7A696D6F646E6172 && *((_QWORD *)v8 + 1) == 0x74756F79616C5F65;
      v492 = !v498;
      v499 = v3 & 0x70000;
      v500 = (v3 & 0x70000) == 0 && !v492;
      if (v500 && v7 == 0)
        return 0;
      if (v499 == 0x10000 && !v492 && v7 == 3)
        goto LABEL_3474;
      if (v499 != 0x20000)
        return 0;
      goto LABEL_2119;
    case 384:
      if (v9 != 27)
        return 0;
      v504 = *(_QWORD *)v8 == 0x5F6563726F666E65 && *((_QWORD *)v8 + 1) == 0x6C6E6F5F64616572;
      v505 = v504 && *((_QWORD *)v8 + 2) == 0x6D6563616C705F79;
      v506 = v505 && *(_QWORD *)(v8 + 19) == 0x746E656D6563616CLL;
      v480 = !v506;
      v507 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v480 && v7 == 0)
        return 0;
      if (v507 == 0x10000 && !v480 && v7 == 5)
        goto LABEL_3441;
      if (v507 != 0x20000)
        return 0;
      goto LABEL_2075;
    case 385:
      if (v9 == 9)
      {
        v984 = *(_QWORD *)v8;
        v985 = v8[8];
        v986 = 0x636765725F5FLL;
        goto LABEL_4000;
      }
      if (v9 != 7)
        return 0;
      v510 = *(_DWORD *)v8 == 1667720562 && *(_DWORD *)(v8 + 3) == 1819042147;
      v492 = !v510;
      v511 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v492 && v7 == 0)
        return 0;
      if (v511 == 0x10000 && !v492 && v7 == 3)
        goto LABEL_3474;
      if (v511 != 0x20000)
        return 0;
LABEL_2119:
      if (v492 || v7 != 3)
        return 0;
      goto LABEL_3487;
    case 386:
      if (v9 != 7)
        return 0;
      v514 = *(_DWORD *)v8 == 1885824370 && *(_DWORD *)(v8 + 3) == 1836212592;
      v492 = !v514;
      v515 = v3 & 0x70000;
      v516 = (v3 & 0x70000) == 0 && !v492;
      if (v516 && v7 == 0)
        return 0;
      if (v515 == 0x10000 && !v492 && v7 == 3)
        goto LABEL_3474;
      if (v515 != 0x20000)
        return 0;
      goto LABEL_2119;
    case 387:
      if (v9 != 13)
        return 0;
      v476 = *(_QWORD *)(v8 + 5);
      v477 = *(_QWORD *)v8 == 0x616974696E696572;
      v478 = 0x73657A696C616974;
LABEL_2013:
      v521 = !v477 || v476 != v478;
      if ((v3 & 0x70000) == 0 && v521 == 0 && v7 == 0)
        return 0;
      v248 = (v3 & 0x70000) == 0x10000 && v521 == 0;
      goto LABEL_2029;
    case 388:
      if (v9 > 24)
      {
        if (v9 == 25)
        {
          v1120 = *(_QWORD *)v8 != 0x5F657361656C6572
               || *((_QWORD *)v8 + 1) != 0x635F646572616873
               || *((_QWORD *)v8 + 2) != 0x74696C6962617061
               || v8[24] != 121;
          if ((v3 & 0x70000) == 0 && !v1120 && v7 == 0)
            return 2;
          if ((v3 & 0x70000) != 0x10000)
            return 0;
LABEL_4307:
          if (!v1120 && v7 == 5)
          {
LABEL_4312:
            v994 = *((unsigned __int8 *)v5 + 4);
            v995 = *(_DWORD *)v5 == 1851878499;
            v996 = 103;
            goto LABEL_4313;
          }
          return 0;
        }
        if (v9 != 26)
          return 0;
        v918 = *(_QWORD *)v8 != 0x5F657361656C6572
            || *((_QWORD *)v8 + 1) != 0x5F636972656E6567
            || *((_QWORD *)v8 + 2) != 0x696C696261706163
            || *((_WORD *)v8 + 12) != 31092;
        if ((v3 & 0x70000) == 0 && !v918 && v7 == 0)
          return 4;
        if ((v3 & 0x70000) != 0x10000)
          return 0;
LABEL_4277:
        if (!v918 && v7 == 5)
          goto LABEL_4282;
      }
      else
      {
        if (v9 == 15)
        {
          v1111 = *(_QWORD *)v8 != 0x665F6B636F6C6E75 || *(_QWORD *)(v8 + 7) != 0x6E6F6974636E7566;
          if ((v3 & 0x70000) == 0 && !v1111 && v7 == 0)
            return 6;
          if ((v3 & 0x70000) != 0x10000)
            return 0;
LABEL_4232:
          if (!v1111 && v7 == 5 && *(_DWORD *)v5 == 1851878499 && v5[4] == 103)
            return 7;
          return 0;
        }
        if (v9 != 18)
          return 0;
        v525 = *(_QWORD *)v8 == 0x5F657361656C6572 && *((_QWORD *)v8 + 1) == 0x696C696261706163;
        v526 = v525 && *((_WORD *)v8 + 8) == 31092;
        v527 = !v526;
        if ((v3 & 0x70000) == 0 && !v527 && v7 == 0)
          return 0;
        if ((v3 & 0x70000) != 0x10000)
          return 0;
LABEL_2096:
        v248 = !v527;
LABEL_2029:
        if (v248 && v7 == 5)
          goto LABEL_3441;
      }
      return 0;
    case 389:
      if (v9 != 14)
        return 0;
      v529 = *(_QWORD *)v8 == 0x5F657361656C6572 && *(_QWORD *)(v8 + 6) == 0x656C646E61685F65;
      v480 = !v529;
      v530 = v3 & 0x70000;
      v531 = (v3 & 0x70000) == 0 && !v480;
      if (v531 && v7 == 0)
        return 0;
      if (v530 == 0x10000 && !v480 && v7 == 5)
        goto LABEL_3441;
      if (v530 != 0x20000)
        return 0;
LABEL_2075:
      if (v480 || v7 != 5)
        return 0;
      goto LABEL_3448;
    case 392:
      switch(v9)
      {
        case 19:
          v527 = *(_QWORD *)v8 != 0x7365726975716572
              || *((_QWORD *)v8 + 1) != 0x6C6962617061635FLL
              || *(_QWORD *)(v8 + 11) != 0x7974696C69626170;
          if ((v3 & 0x70000) != 0 || (!v527 ? (v538 = v7 == 0) : (v538 = 0), !v538))
          {
            if ((v3 & 0x70000) == 0x10000)
              goto LABEL_2096;
          }
          return 0;
        case 21:
          v1111 = *(_QWORD *)v8 != 0x6C5F646572616873
               || *((_QWORD *)v8 + 1) != 0x7165725F736B636FLL
               || *(_QWORD *)(v8 + 13) != 0x6465726975716572;
          if ((v3 & 0x70000) == 0 && !v1111 && v7 == 0)
            return 6;
          if ((v3 & 0x70000) == 0x10000)
            goto LABEL_4232;
          return 0;
        case 24:
          v1120 = *(_QWORD *)v8 != 0x766973756C637865
               || *((_QWORD *)v8 + 1) != 0x5F736B636F6C5F65
               || *((_QWORD *)v8 + 2) != 0x6465726975716572;
          if ((v3 & 0x70000) == 0 && !v1120 && v7 == 0)
            return 2;
          if ((v3 & 0x70000) != 0x10000)
            return 0;
          goto LABEL_4307;
        case 26:
          v918 = *(_QWORD *)v8 != 0x7365726975716572
              || *((_QWORD *)v8 + 1) != 0x5F6465726168735FLL
              || *((_QWORD *)v8 + 2) != 0x696C696261706163
              || *((_WORD *)v8 + 12) != 31092;
          if ((v3 & 0x70000) == 0 && !v918 && v7 == 0)
            return 4;
          if ((v3 & 0x70000) == 0x10000)
            goto LABEL_4277;
          return 0;
        default:
          return 0;
      }
    case 393:
      if (v9 != 6)
        return 0;
      v988 = *(_DWORD *)v8 != 1819042157 || *((_WORD *)v8 + 2) != 25455;
      v989 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v988 && v7 == 0)
        return 1;
      if (v989 == 0x10000 && !v988 && v7 == 3)
        goto LABEL_3487;
      if (v989 != 0x20000)
        return 0;
      if (v988 || v7 != 3)
        return 0;
      goto LABEL_3766;
    case 394:
      if (v9 != 6)
        return 0;
      v539 = *(_DWORD *)v8 == 1635018098 && *((_WORD *)v8 + 2) == 28265;
      v492 = !v539;
      v540 = v3 & 0x70000;
      v541 = (v3 & 0x70000) == 0 && !v492;
      if (v541 && v7 == 0)
        return 0;
      if (v540 == 0x10000 && !v492 && v7 == 3)
        goto LABEL_3474;
      if (v540 == 0x20000)
        goto LABEL_2119;
      return 0;
    case 395:
      if (v9 != 16)
        return 0;
      v545 = *(_QWORD *)v8;
      v546 = *((_QWORD *)v8 + 1);
      v547 = 0x745F6E7275746572;
      goto LABEL_2288;
    case 396:
      if (v9 != 15)
        return 0;
      v548 = *(_QWORD *)v8 == 0x5F736E7275746572 && *(_QWORD *)(v8 + 7) == 0x6C6C756E6E6F6E5FLL;
      v549 = !v548;
      v550 = v3 & 0x70000;
      v551 = (v3 & 0x70000) == 0 && !v549;
      if (v551 && v7 == 0)
        return 0;
      if (v550 == 0x10000 && !v549 && v7 == 3)
        goto LABEL_3474;
      if (v550 != 0x20000)
        return 0;
      goto LABEL_2358;
    case 397:
      if (v9 != 13)
        return 0;
      v554 = *(_QWORD *)v8 == 0x5F736E7275746572 && *(_QWORD *)(v8 + 5) == 0x65636977745F736ELL;
      v549 = !v554;
      v555 = v3 & 0x70000;
      v556 = (v3 & 0x70000) == 0 && !v549;
      if (v556 && v7 == 0)
        return 0;
      if (v555 == 0x10000 && !v549 && v7 == 3)
        goto LABEL_3474;
      if (v555 != 0x20000)
        return 0;
      goto LABEL_2358;
    case 399:
      if (v9 != 11)
        return 0;
      v560 = *(_QWORD *)v8 == 0x72656B5F6C637973 && *(_QWORD *)(v8 + 3) == 0x6C656E72656B5F6CLL;
      v561 = !v560;
      v562 = v3 & 0x70000;
      v563 = (v3 & 0x70000) == 0 && !v561;
      if (v563 && v7 == 0)
        return 0;
      if (v562 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v562 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 400:
      if (v9 != 18)
        return 0;
      v566 = *(_QWORD *)v8 == 0x6570735F6C637973 && *((_QWORD *)v8 + 1) == 0x616C635F6C616963;
      v567 = v566 && *((_WORD *)v8 + 8) == 29555;
      v561 = !v567;
      v568 = v3 & 0x70000;
      v569 = (v3 & 0x70000) == 0 && !v561;
      if (v569 && v7 == 0)
        return 0;
      if (v568 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v568 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 401:
      if (v9 != 15)
        return 0;
      v546 = *(_QWORD *)(v8 + 7);
      v572 = *(_QWORD *)v8 == 0x6C5F6465706F6373;
      v573 = 0x656C62616B636F6CLL;
      goto LABEL_2316;
    case 402:
      if (v9 == 8)
      {
        v997 = *(_QWORD *)v8 == 0x657461636F6C6C61;
LABEL_3861:
        v1022 = !v997;
        v1023 = (v3 & 0x70000) == 196608;
        goto LABEL_4008;
      }
      if (v9 == 7)
      {
        v574 = *(_DWORD *)v8 == 1952671091 && *(_DWORD *)(v8 + 3) == 1852795252;
        v549 = !v574;
        v575 = v3 & 0x70000;
        if ((v3 & 0x70000) != 0 || (!v549 ? (v576 = v7 == 0) : (v576 = 0), !v576))
        {
          if (v575 == 0x10000 && !v549 && v7 == 3)
            goto LABEL_3474;
          if (v575 == 0x20000)
            goto LABEL_2358;
        }
      }
      return 0;
    case 403:
      if (v9 != 9)
        return 0;
      v579 = *(_QWORD *)v8 == 0x6E617463656C6573 && v8[8] == 121;
      v580 = !v579;
      v581 = v3 & 0x70000;
      v582 = (v3 & 0x70000) == 0x30000 && !v580;
      if (v582 && v7 == 0)
        return 0;
      if (!v581 && !v580 && v7 == 0)
        return 1;
      if (v581 == 0x10000 && !v580 && v7 == 3)
        goto LABEL_3487;
      if (v581 != 0x20000)
        return 0;
      if (v580 || v7 != 3)
        return 0;
LABEL_3766:
      v994 = *((unsigned __int8 *)v5 + 2);
      v995 = *(unsigned __int16 *)v5 == 28263;
      v996 = 117;
      goto LABEL_4313;
    case 404:
      if (v9 != 8)
        return 0;
      v549 = *(_QWORD *)v8 != 0x6C656E69746E6573;
      v587 = v3 & 0x70000;
      v588 = (v3 & 0x70000) == 0 && *(_QWORD *)v8 == 0x6C656E69746E6573;
      if (v588 && v7 == 0)
        return 0;
      if (v587 == 0x10000 && *(_QWORD *)v8 == 0x6C656E69746E6573 && v7 == 3)
        goto LABEL_3474;
      if (v587 != 0x20000)
        return 0;
      goto LABEL_2358;
    case 405:
      if (v9 != 13)
        return 0;
      v545 = *(_QWORD *)v8;
      v546 = *(_QWORD *)(v8 + 5);
      v547 = 0x657079745F746573;
LABEL_2288:
      v572 = v545 == v547;
      v573 = 0x6574617473657079;
      goto LABEL_2316;
    case 407:
      if (v9 != 26)
        return 0;
      v592 = *(_QWORD *)v8 == 0x74616C7563657073 && *((_QWORD *)v8 + 1) == 0x64616F6C5F657669;
      v593 = v592 && *((_QWORD *)v8 + 2) == 0x696E65647261685FLL;
      v594 = v593 && *((_WORD *)v8 + 12) == 26478;
      v561 = !v594;
      v595 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v561 && v7 == 0)
        return 0;
      if (v595 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v595 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 408:
      if (v9 != 16)
        return 0;
      v546 = *((_QWORD *)v8 + 1);
      v572 = *(_QWORD *)v8 == 0x6F6C61646E617473;
      v573 = 0x67756265645F656ELL;
LABEL_2316:
      v599 = !v572 || v546 != v573;
      if ((v3 & 0x70000) == 0 && v599 == 0 && v7 == 0)
        return 0;
      v602 = (v3 & 0x70000) == 0x10000 && v599 == 0;
      if (!v602 || v7 != 5)
        return 0;
      goto LABEL_3441;
    case 409:
      switch(v9)
      {
        case 9:
          v984 = *(_QWORD *)v8;
          v985 = v8[8];
          v986 = 0x636474735F5FLL;
LABEL_4000:
          v1025 = v984 == (v986 & 0xFFFFFFFFFFFFLL | 0x6C61000000000000);
          v1026 = 108;
LABEL_4001:
          v1056 = v1025 && v985 == v1026;
LABEL_4004:
          v1022 = !v1056;
          v1023 = (v3 & 0x70000) == 327680;
LABEL_4008:
          v1059 = v1023 && v1022 == 0;
LABEL_4345:
          if (v1059 && v7 == 0)
            return 3;
          break;
        case 8:
          v1027 = *(_QWORD *)v8 == 0x6C6C61636474735FLL;
LABEL_4012:
          v1060 = !v1027;
          v783 = (v3 & 0x70000) == 0x50000 && v1060 == 0;
          goto LABEL_4420;
        case 7:
          v604 = *(_DWORD *)v8 == 1667527795 && *(_DWORD *)(v8 + 3) == 1819042147;
          v549 = !v604;
          v605 = v3 & 0x70000;
          if ((v3 & 0x70000) != 0 || (!v549 ? (v606 = v7 == 0) : (v606 = 0), !v606))
          {
            if (v605 == 0x10000 && !v549 && v7 == 3)
            {
LABEL_3474:
              v826 = *((unsigned __int8 *)v5 + 2);
              v827 = *(unsigned __int16 *)v5 == 28263;
              v828 = 117;
              return v827 && v826 == v828;
            }
            if (v605 != 0x20000)
              return 0;
LABEL_2358:
            if (!v549 && v7 == 3)
            {
LABEL_3487:
              v816 = *((unsigned __int8 *)v5 + 2);
              v817 = *(unsigned __int16 *)v5 == 28263;
              v818 = 117;
              goto LABEL_3488;
            }
          }
          break;
      }
      return 0;
    case 412:
      if (v9 != 11)
        return 0;
      v609 = *(_QWORD *)v8 == 0x73615F7466697773 && *(_QWORD *)(v8 + 3) == 0x636E7973615F7466;
      v561 = !v609;
      v610 = v3 & 0x70000;
      v611 = (v3 & 0x70000) == 0 && !v561;
      if (v611 && v7 == 0)
        return 0;
      if (v610 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v610 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 413:
      if (v9 != 14)
        return 0;
      v615 = *(_QWORD *)v8 == 0x7973617466697773 && *(_QWORD *)(v8 + 6) == 0x6C6C6163636E7973;
      v561 = !v615;
      v616 = v3 & 0x70000;
      v617 = (v3 & 0x70000) == 0 && !v561;
      if (v617 && v7 == 0)
        return 0;
      if (v616 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v616 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 414:
      if (v9 != 19)
        return 0;
      v621 = *(_QWORD *)v8 == 0x73615F7466697773 && *((_QWORD *)v8 + 1) == 0x746E6F635F636E79;
      v622 = v621 && *(_QWORD *)(v8 + 11) == 0x747865746E6F635FLL;
      v561 = !v622;
      v623 = v3 & 0x70000;
      v624 = (v3 & 0x70000) == 0 && !v561;
      if (v624 && v7 == 0)
        return 0;
      if (v623 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v623 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 415:
      if (v9 != 17)
        return 0;
      v627 = *(_QWORD *)v8 == 0x73615F7466697773 && *((_QWORD *)v8 + 1) == 0x6F7272655F636E79;
      v628 = v627 && v8[16] == 114;
      v561 = !v628;
      v629 = v3 & 0x70000;
      v630 = (v3 & 0x70000) == 0 && !v561;
      if (v630 && v7 == 0)
        return 0;
      if (v629 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v629 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 420:
      if (v9 != 9)
        return 0;
      v633 = *(_QWORD *)v8 == 0x6C61637466697773 && v8[8] == 108;
      v561 = !v633;
      v634 = v3 & 0x70000;
      v635 = (v3 & 0x70000) == 0 && !v561;
      if (v635 && v7 == 0)
        return 0;
      if (v634 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v634 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 421:
      if (v9 != 13)
        return 0;
      v639 = *(_QWORD *)v8 == 0x6F635F7466697773 && *(_QWORD *)(v8 + 5) == 0x747865746E6F635FLL;
      v561 = !v639;
      v640 = v3 & 0x70000;
      v641 = (v3 & 0x70000) == 0 && !v561;
      if (v641 && v7 == 0)
        return 0;
      if (v640 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v640 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 423:
      if (v9 != 18)
        return 0;
      v645 = *(_QWORD *)v8 == 0x72655F7466697773 && *((_QWORD *)v8 + 1) == 0x757365725F726F72;
      v646 = v645 && *((_WORD *)v8 + 8) == 29804;
      v561 = !v646;
      v647 = v3 & 0x70000;
      v648 = (v3 & 0x70000) == 0 && !v561;
      if (v648 && v7 == 0)
        return 0;
      if (v647 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v647 != 0x20000)
        return 0;
      goto LABEL_2550;
    case 424:
      if (v9 != 21)
        return 0;
      v651 = *(_QWORD *)v8 == 0x6E695F7466697773 && *((_QWORD *)v8 + 1) == 0x725F746365726964;
      v652 = v651 && *(_QWORD *)(v8 + 13) == 0x746C757365725F74;
      v561 = !v652;
      v653 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v561 && v7 == 0)
        return 0;
      if (v653 == 0x10000 && !v561 && v7 == 5)
        goto LABEL_3441;
      if (v653 != 0x20000)
        return 0;
LABEL_2550:
      if (v561 || v7 != 5)
        return 0;
      goto LABEL_3448;
    case 426:
      if (v9 != 13)
        return 0;
      v658 = *(_QWORD *)v8 == 0x656E5F7466697773 && *(_QWORD *)(v8 + 5) == 0x6570797477656E5FLL;
      v659 = !v658;
      v660 = (v3 & 0x70000) == 0 && !v659;
      if (v660 && v7 == 0)
        return 0;
      v662 = *(_QWORD *)v8 == 0x72775F7466697773 && *(_QWORD *)(v8 + 5) == 0x726570706172775FLL;
      v663 = !v662;
      if ((v3 & 0x70000) != 0)
        return 0;
      v664 = !v663;
      goto LABEL_3954;
    case 429:
      if (v9 != 24)
        return 0;
      v665 = *(_QWORD *)v8 == 0x6D5F6C6F626D7973 && *((_QWORD *)v8 + 1) == 0x5F61746164617465;
      v666 = v665 && *((_QWORD *)v8 + 2) == 0x65746F6E746F6F66;
      v667 = !v666;
      v668 = v3 & 0x70000;
      v669 = (v3 & 0x70000) == 0 && !v667;
      if (v669 && v7 == 0)
        return 0;
      if (v668 == 0x10000 && !v667 && v7 == 5)
        goto LABEL_3145;
      if (v668 != 0x20000)
        return 0;
      if (v667 || v7 != 5)
        return 0;
      goto LABEL_3121;
    case 430:
      if (v9 != 8)
        return 0;
      v673 = v3 & 0x70000;
      v674 = (v3 & 0x70000) == 0 && *(_QWORD *)v8 == 0x6962615F76737973;
      if (v674 && v7 == 0)
        return 0;
      if (v673 == 0x10000 && *(_QWORD *)v8 == 0x6962615F76737973 && v7 == 3)
        goto LABEL_3494;
      if (v673 != 0x20000)
        return 0;
      if (*(_QWORD *)v8 != 0x6962615F76737973 || v7 != 3)
        return 0;
      goto LABEL_3811;
    case 431:
      if (v9 != 9)
        return 0;
      v679 = *(_QWORD *)v8 == 0x65646F6D5F736C74 && v8[8] == 108;
      v680 = !v679;
      v681 = v3 & 0x70000;
      v682 = (v3 & 0x70000) == 0 && !v680;
      if (v682 && v7 == 0)
        return 0;
      if (v681 == 0x10000 && !v680 && v7 == 3)
        goto LABEL_3494;
      if (v681 != 0x20000)
        return 0;
      if (v680 || v7 != 3)
        return 0;
      goto LABEL_3811;
    case 432:
      if (v9 != 6)
        return 0;
      v687 = *(_DWORD *)v8 == 1735549300 && *((_WORD *)v8 + 2) == 29797;
      v688 = !v687;
      v689 = v3 & 0x70000;
      v690 = (v3 & 0x70000) == 0 && !v688;
      if (v690 && v7 == 0)
        return 0;
      if (v689 == 0x10000 && !v688 && v7 == 3)
        goto LABEL_3494;
      if (v689 != 0x20000)
        return 0;
      if (v688 || v7 != 3)
        return 0;
      goto LABEL_3811;
    case 433:
      if (v9 != 13)
        return 0;
      v695 = *(_QWORD *)v8 == 0x635F746567726174 && *(_QWORD *)(v8 + 5) == 0x73656E6F6C635F74;
      v696 = !v695;
      v697 = v3 & 0x70000;
      v698 = (v3 & 0x70000) == 0 && !v696;
      if (v698 && v7 == 0)
        return 0;
      if (v697 == 0x10000 && !v696 && v7 == 3)
        goto LABEL_3494;
      if (v697 != 0x20000)
        return 0;
      if (v696 || v7 != 3)
        return 0;
      goto LABEL_3811;
    case 434:
      if (v9 != 14)
        return 0;
      v703 = *(_QWORD *)v8 == 0x7079745F74736574 && *(_QWORD *)(v8 + 6) == 0x6574617473657079;
      v704 = !v703;
      v705 = (v3 & 0x70000) == 0 && !v704;
      if (v705 && v7 == 0)
        return 0;
      v707 = (v3 & 0x70000) == 0x10000 && !v704;
      if (!v707 || v7 != 5)
        return 0;
      goto LABEL_3145;
    case 435:
      switch(v9)
      {
        case 10:
          v1062 = *(_QWORD *)v8 != 0x6163736968745F5FLL || *((_WORD *)v8 + 4) != 27756;
          if ((v3 & 0x70000) == 0x50000 && !v1062 && v7 == 0)
            return 3;
          break;
        case 9:
          v1066 = *(_QWORD *)v8 != 0x6C6163736968745FLL || v8[8] != 108;
          v783 = (v3 & 0x70000) == 0x50000 && !v1066;
          goto LABEL_4420;
        case 8:
          v709 = v3 & 0x70000;
          if ((v3 & 0x70000) != 0 || (*(_QWORD *)v8 == 0x6C6C616373696874 ? (v710 = v7 == 0) : (v710 = 0), !v710))
          {
            if (v709 == 0x10000 && *(_QWORD *)v8 == 0x6C6C616373696874 && v7 == 3)
            {
LABEL_3494:
              v826 = *((unsigned __int8 *)v5 + 2);
              v827 = *(unsigned __int16 *)v5 == 28263;
              v828 = 117;
              return v827 && v826 == v828;
            }
            if (v709 == 0x20000 && *(_QWORD *)v8 == 0x6C6C616373696874 && v7 == 3)
              goto LABEL_3811;
          }
          break;
      }
      return 0;
    case 437:
      if (v9 != 10)
        return 0;
      v713 = *(_QWORD *)v8 == 0x696F706563617274 && *((_WORD *)v8 + 4) == 29806;
      v714 = !v713;
      v715 = (v3 & 0x70000) == 0 && !v714;
      if (v715 && v7 == 0)
        return 0;
      v717 = (v3 & 0x70000) == 0x10000 && !v714;
      if (!v717 || v7 != 5)
        return 0;
      goto LABEL_3145;
    case 438:
      if (v9 != 17)
        return 0;
      v719 = *(_QWORD *)v8 == 0x726170736E617274 && *((_QWORD *)v8 + 1) == 0x6F696E755F746E65;
      v720 = v719 && v8[16] == 110;
      v721 = !v720;
      v722 = v3 & 0x70000;
      v723 = (v3 & 0x70000) == 0 && !v721;
      if (v723 && v7 == 0)
        return 0;
      if (v722 == 0x10000 && !v721 && v7 == 3)
        goto LABEL_3494;
      if (v722 != 0x20000)
        return 0;
      if (v721 || v7 != 3)
        return 0;
      goto LABEL_3811;
    case 439:
      if (v9 != 11)
        return 0;
      v727 = *(_QWORD *)v8 == 0x5F6C616976697274 && *(_QWORD *)(v8 + 3) == 0x6962615F6C616976;
      v728 = !v727;
      v729 = (v3 & 0x70000) == 0 && !v728;
      if (v729 && v7 == 0)
        return 0;
      v731 = (v3 & 0x70000) == 0x10000 && !v728;
      if (!v731 || v7 != 5)
        return 0;
      goto LABEL_3145;
    case 440:
      if (v9 == 29)
      {
        v1001 = *(_QWORD *)v8 != 0x757163615F797274
             || *((_QWORD *)v8 + 1) != 0x726168735F657269
             || *((_QWORD *)v8 + 2) != 0x62617061635F6465
             || *(_QWORD *)(v8 + 21) != 0x7974696C69626170;
        if ((v3 & 0x70000) == 0 && !v1001 && v7 == 0)
          return 2;
        if ((v3 & 0x70000) == 0x10000 && !v1001 && v7 == 5)
        {
          v994 = *((unsigned __int8 *)v5 + 4);
          v995 = *(_DWORD *)v5 == 1851878499;
          v996 = 103;
          goto LABEL_4313;
        }
      }
      else if (v9 == 22)
      {
        v733 = *(_QWORD *)v8 == 0x757163615F797274 && *((_QWORD *)v8 + 1) == 0x617061635F657269;
        v734 = v733 && *(_QWORD *)(v8 + 14) == 0x7974696C69626170;
        v735 = !v734;
        if ((v3 & 0x70000) != 0 || (!v735 ? (v736 = v7 == 0) : (v736 = 0), !v736))
        {
          if ((v3 & 0x70000) == 0x10000 && !v735 && v7 == 5)
          {
LABEL_3145:
            v826 = *((unsigned __int8 *)v5 + 4);
            v827 = *(_DWORD *)v5 == 1851878499;
            v828 = 103;
            return v827 && v826 == v828;
          }
        }
      }
      return 0;
    case 445:
      if (v9 != 21)
        return 0;
      v738 = *(_QWORD *)v8 == 0x6761745F65707974 && *((_QWORD *)v8 + 1) == 0x7461645F726F665FLL;
      v739 = v738 && *(_QWORD *)(v8 + 13) == 0x6570797461746164;
      v740 = !v739;
      v741 = v3 & 0x70000;
      v742 = (v3 & 0x70000) == 0 && !v740;
      if (v742 && v7 == 0)
        return 0;
      if (v741 == 0x10000 && !v740 && v7 == 5)
        goto LABEL_3145;
      if (v741 != 0x20000)
        return 0;
      if (v740 || v7 != 5)
        return 0;
      goto LABEL_3121;
    case 446:
      if (v9 != 15)
        return 0;
      v746 = *(_QWORD *)v8 == 0x7369765F65707974 && *(_QWORD *)(v8 + 7) == 0x7974696C69626973;
      v747 = !v746;
      v748 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v747 && v7 == 0)
        return 0;
      if (v748 == 0x10000 && !v747 && v7 == 5)
        goto LABEL_3145;
      if (v748 != 0x20000)
        return 0;
      if (v747 || v7 != 5)
        return 0;
      goto LABEL_3121;
    case 447:
      if (v9 != 22)
        return 0;
      v753 = *(_QWORD *)v8 == 0x656D5F6465707974 && *((_QWORD *)v8 + 1) == 0x65706F5F79726F6DLL;
      v754 = v753 && *(_QWORD *)(v8 + 14) == 0x6E6F697461726570;
      v755 = !v754;
      v756 = v3 & 0x70000;
      v757 = (v3 & 0x70000) == 0 && !v755;
      if (v757 && v7 == 0)
        return 0;
      if (v756 == 0x10000 && !v755 && v7 == 5)
        goto LABEL_3145;
      if (v756 != 0x20000)
        return 0;
      if (v755 || v7 != 5)
        return 0;
      goto LABEL_3121;
    case 449:
      if (v9 != 11)
        return 0;
      v762 = *(_QWORD *)v8 == 0x616C696176616E75 && *(_QWORD *)(v8 + 3) == 0x656C62616C696176;
      v763 = !v762;
      v764 = v3 & 0x70000;
      v765 = (v3 & 0x70000) == 0 && !v763;
      if (v765 && v7 == 0)
        return 0;
      if (v764 == 0x10000 && !v763 && v7 == 5)
        goto LABEL_3145;
      if (v764 != 0x20000)
        return 0;
      if (v763 || v7 != 5)
        return 0;
      goto LABEL_3121;
    case 450:
      if (v9 != 13)
        return 0;
      v770 = *(_QWORD *)v8 == 0x616974696E696E75 && *(_QWORD *)(v8 + 5) == 0x64657A696C616974;
      v771 = !v770;
      v772 = (v3 & 0x70000) == 0 && !v771;
      v773 = v772 && v7 == 0;
      if (v773 || (v3 & 0x70000) != 0x10000)
        return 0;
      if (v771 || v7 != 5)
        return 0;
      goto LABEL_3145;
    case 451:
      if (v9 != 8)
        return 0;
      v775 = (v3 & 0x70000) == 0x10000 && *(_QWORD *)v8 == 0x796C656B696C6E75;
      if (v775 && v7 == 0)
        return 0;
      v777 = (v3 & 0x70000) == 0x20000 && *(_QWORD *)v8 == 0x796C656B696C6E75;
      if (!v777 || v7 != 5)
        return 0;
      goto LABEL_3145;
    case 452:
      if (v9 == 6)
      {
        v1005 = *(_DWORD *)v8 != 1937075829 || *((_WORD *)v8 + 2) != 25701;
        v1006 = v3 & 0x70000;
        if ((v3 & 0x70000) == 0 && !v1005 && v7 == 0)
          return 1;
        if (v1006 == 0x10000 && !v1005 && v7 == 3)
        {
LABEL_3811:
          v816 = *((unsigned __int8 *)v5 + 2);
          v817 = *(unsigned __int16 *)v5 == 28263;
          v818 = 117;
          goto LABEL_3488;
        }
        if (v1006 == 0x20000 && !v1005 && v7 == 3)
        {
          v994 = *((unsigned __int8 *)v5 + 2);
          v995 = *(unsigned __int16 *)v5 == 28263;
          v996 = 117;
LABEL_4313:
          if (v995 && v994 == v996)
            return 3;
        }
      }
      else if (v9 == 12)
      {
        v779 = *(_QWORD *)v8 == 0x6E755F656279616DLL && *((_DWORD *)v8 + 2) == 1684370293;
        v780 = !v779;
        v781 = (v3 & 0x70000) == 0x10000 && !v780;
        v782 = v781 && v7 == 0;
        if (!v782 && (v3 & 0x70000) == 0x20000)
        {
          v783 = !v780;
LABEL_4420:
          if (v783 && v7 == 0)
            return 4;
        }
      }
      return 0;
    case 453:
      if (v9 != 10)
        return 0;
      v784 = *(_QWORD *)v8 == 0x646E61685F657375 && *((_WORD *)v8 + 4) == 25964;
      v785 = !v784;
      v786 = v3 & 0x70000;
      v787 = (v3 & 0x70000) == 0 && !v785;
      if (v787 && v7 == 0)
        return 0;
      if (v786 == 0x10000 && !v785 && v7 == 5)
        goto LABEL_3145;
      if (v786 != 0x20000)
        return 0;
      if (v785 || v7 != 5)
        return 0;
      goto LABEL_3121;
    case 454:
      if (v9 != 4)
        return 0;
      v792 = v3 & 0x70000;
      v793 = (v3 & 0x70000) == 0 && *(_DWORD *)v8 == 1684370293;
      if (v793 && v7 == 0)
        return 0;
      if (v792 == 0x10000 && *(_DWORD *)v8 == 1684370293 && v7 == 3)
        goto LABEL_3494;
      if (v792 != 0x20000)
        return 0;
      if (*(_DWORD *)v8 != 1684370293 || v7 != 3)
        return 0;
      goto LABEL_3811;
    case 455:
      if (v9 != 15)
        return 0;
      v798 = *(_QWORD *)v8 == 0x66695F676E697375 && *(_QWORD *)(v8 + 7) == 0x7374736978655F66;
      v799 = !v798;
      v800 = (v3 & 0x70000) == 0 && !v799;
      if (v800 && v7 == 0)
        return 0;
      v802 = (v3 & 0x70000) == 0x10000 && !v799;
      if (!v802 || v7 != 5)
        return 0;
      goto LABEL_3145;
    case 456:
      if (v9 != 4)
        return 0;
      v804 = (v3 & 0x70000) == 0x30000 && *(_DWORD *)v8 == 1684632949;
      if (v804 && v7 == 0)
        return 0;
      v806 = (v3 & 0x70000) == 0x40000 && *(_DWORD *)v8 == 1684632949;
      return v806 && v7 == 0;
    case 457:
      if (v9 != 11)
        return 0;
      v808 = *(_QWORD *)v8 == 0x735F7473696C6176 && *(_QWORD *)(v8 + 3) == 0x657A69735F747369;
      v809 = !v808;
      v810 = v3 & 0x70000;
      v811 = (v3 & 0x70000) == 0 && !v809;
      if (v811 && v7 == 0)
        return 0;
      if (v810 == 0x10000 && !v809 && v7 == 5)
        goto LABEL_3145;
      if (v810 != 0x20000)
        return 0;
      if (v809 || v7 != 5)
        return 0;
LABEL_3121:
      v816 = *((unsigned __int8 *)v5 + 4);
      v817 = *(_DWORD *)v5 == 1851878499;
      v818 = 103;
      goto LABEL_3488;
    case 458:
      if (v9 != 22)
        return 0;
      v819 = *(_QWORD *)v8 == 0x5F68747561727470 && *((_QWORD *)v8 + 1) == 0x705F656C62617476;
      v820 = v819 && *(_QWORD *)(v8 + 14) == 0x7265746E696F705FLL;
      v821 = !v820;
      v822 = v3 & 0x70000;
      v823 = (v3 & 0x70000) == 0 && !v821;
      if (v823 && v7 == 0)
        return 0;
      if (v822 == 0x10000 && !v821 && v7 == 5)
        goto LABEL_3145;
      if (v822 != 0x20000)
        return 0;
      if (v821 || v7 != 5)
        return 0;
      goto LABEL_4450;
    case 459:
      if (v9 != 9)
        return 0;
      v829 = *(_QWORD *)v8 == 0x7275746572636576 && v8[8] == 110;
      v830 = !v829;
      v831 = (v3 & 0x70000) == 0 && !v830;
      if (v831 && v7 == 0)
        return 0;
      v833 = (v3 & 0x70000) == 0x10000 && !v830;
      if (!v833 || v7 != 5)
        return 0;
      goto LABEL_3189;
    case 461:
      switch(v9)
      {
        case 12:
          v1068 = *(_QWORD *)v8 != 0x726F746365765F5FLL || *((_DWORD *)v8 + 2) != 1819042147;
          if ((v3 & 0x70000) == 0x50000 && !v1068 && v7 == 0)
            return 3;
          break;
        case 11:
          v1072 = *(_QWORD *)v8 != 0x63726F746365765FLL || *(_QWORD *)(v8 + 3) != 0x6C6C6163726F7463;
          if ((v3 & 0x70000) == 0x50000 && !v1072 && v7 == 0)
            return 4;
          break;
        case 10:
          v835 = *(_QWORD *)v8 == 0x6163726F74636576 && *((_WORD *)v8 + 4) == 27756;
          v836 = !v835;
          v837 = v3 & 0x70000;
          if ((v3 & 0x70000) != 0 || (!v836 ? (v838 = v7 == 0) : (v838 = 0), !v838))
          {
            if (v837 == 0x10000 && !v836 && v7 == 5)
            {
LABEL_3189:
              v826 = *((unsigned __int8 *)v5 + 4);
              v827 = *(_DWORD *)v5 == 1851878499;
              v828 = 103;
              return v827 && v826 == v828;
            }
            if (v837 == 0x20000 && !v836 && v7 == 5)
            {
LABEL_4450:
              v816 = *((unsigned __int8 *)v5 + 4);
              v817 = *(_DWORD *)v5 == 1851878499;
              v818 = 103;
              goto LABEL_3488;
            }
          }
          break;
      }
      return 0;
    case 462:
      if (v9 != 11)
        return 0;
      v840 = *(_QWORD *)v8 == 0x735F726F74636576 && *(_QWORD *)(v8 + 3) == 0x657A69735F726F74;
      v841 = !v840;
      v842 = v3 & 0x70000;
      v843 = (v3 & 0x70000) == 0 && !v841;
      if (v843 && v7 == 0)
        return 0;
      if (v842 == 0x10000 && !v841 && v7 == 3)
        goto LABEL_4072;
      if (v842 != 0x20000)
        return 0;
      if (v841 || v7 != 3)
        return 0;
      goto LABEL_3244;
    case 463:
      if (v9 != 10)
        return 0;
      v848 = *(_QWORD *)v8 == 0x696C696269736976 && *((_WORD *)v8 + 4) == 31092;
      v849 = !v848;
      v850 = v3 & 0x70000;
      v851 = (v3 & 0x70000) == 0 && !v849;
      if (v851 && v7 == 0)
        return 0;
      if (v850 == 0x10000 && !v849 && v7 == 3)
      {
LABEL_4072:
        v826 = *((unsigned __int8 *)v5 + 2);
        v827 = *(unsigned __int16 *)v5 == 28263;
        v828 = 117;
        return v827 && v826 == v828;
      }
      if (v850 == 0x20000 && !v849 && v7 == 3)
      {
LABEL_3244:
        v816 = *((unsigned __int8 *)v5 + 2);
        v817 = *(unsigned __int16 *)v5 == 28263;
        v818 = 117;
        goto LABEL_3488;
      }
      return 0;
    case 464:
      if (v9 != 11)
        return 0;
      v244 = *(_QWORD *)v8 == 0x756E755F6E726177 && *(_QWORD *)(v8 + 3) == 0x646573756E755F6ELL;
LABEL_898:
      v79 = !v244;
      v80 = v3 & 0x70000;
      v254 = (v3 & 0x70000) == 0 && !v79;
      if (v254 && v7 == 0)
        return 0;
LABEL_908:
      v256 = v80 == 0x10000 && !v79;
      goto LABEL_3469;
    case 465:
      if (v9 == 18)
      {
        v1010 = *(_QWORD *)v8 ^ 0x756E755F6E726177 | *((_QWORD *)v8 + 1) ^ 0x757365725F646573 | *((unsigned __int16 *)v8 + 8) ^ 0x746CLL;
        v1011 = v3 & 0x70000;
        v1012 = (v3 & 0x70000) == 0x10000;
        v11 = v1010 == 0;
        v1013 = v1010 != 0;
        if (!v11)
          v1012 = 0;
        if (v1012 && v7 == 5)
          goto LABEL_3448;
        if (!v1011 && !v1013 && v7 == 0)
          return 3;
        if (v7 != 3)
          v1012 = 0;
        if (v1012)
        {
LABEL_3930:
          v1042 = *((unsigned __int8 *)v5 + 2);
          v1043 = *(unsigned __int16 *)v5 == 28263;
          v1044 = 117;
          goto LABEL_3984;
        }
        if (v1011 == 0x20000 && !v1013 && v7 == 3)
        {
LABEL_4079:
          v1076 = *((unsigned __int8 *)v5 + 2);
          v1077 = *(unsigned __int16 *)v5 == 28263;
          v1078 = 117;
          goto LABEL_4283;
        }
      }
      else
      {
        if (v9 != 9)
          return 0;
        v856 = *(_QWORD *)v8 == 0x7261637369646F6ELL && v8[8] == 100;
        v119 = !v856;
        v857 = (v3 & 0x70000) == 0x10000 && !v119;
        v858 = v857 && v7 == 0;
        if (v858 || (v3 & 0x70000) != 0x20000)
          return 0;
LABEL_4327:
        v664 = !v119;
LABEL_3954:
        if (v664 && v7 == 0)
          return 1;
      }
      return 0;
    case 466:
      if (v9 != 4)
        return 0;
      v859 = *(_DWORD *)v8 != 1801545079;
      v860 = v3 & 0x70000;
      v861 = (v3 & 0x70000) == 0 && *(_DWORD *)v8 == 1801545079;
      if (v861 && v7 == 0)
        return 0;
      if (v860 == 0x10000 && *(_DWORD *)v8 == 1801545079 && v7 == 3)
        goto LABEL_3474;
      if (v860 != 0x20000)
        return 0;
      goto LABEL_3326;
    case 467:
      if (v9 != 11)
        return 0;
      v865 = *(_QWORD *)v8 == 0x706D695F6B616577 && *(_QWORD *)(v8 + 3) == 0x74726F706D695F6BLL;
      v866 = !v865;
      v867 = v3 & 0x70000;
      v868 = (v3 & 0x70000) == 0 && !v866;
      if (v868 && v7 == 0)
        return 0;
      if (v867 == 0x10000 && !v866 && v7 == 5)
        goto LABEL_3441;
      if (v867 != 0x20000)
        return 0;
      goto LABEL_3351;
    case 468:
      if (v9 != 7)
        return 0;
      v872 = *(_DWORD *)v8 == 1801545079 && *(_DWORD *)(v8 + 3) == 1717924459;
      v859 = !v872;
      v873 = v3 & 0x70000;
      v874 = (v3 & 0x70000) == 0 && !v859;
      if (v874 && v7 == 0)
        return 0;
      if (v873 == 0x10000 && !v859 && v7 == 3)
        goto LABEL_3474;
      if (v873 != 0x20000)
        return 0;
LABEL_3326:
      if (v859 || v7 != 3)
        return 0;
      goto LABEL_3487;
    case 469:
      if (v9 != 11)
        return 0;
      v878 = *(_QWORD *)v8 == 0x6E5F74726F707865 && *(_QWORD *)(v8 + 3) == 0x656D616E5F74726FLL;
      v866 = !v878;
      v879 = v3 & 0x70000;
      v880 = (v3 & 0x70000) == 0 && !v866;
      if (v880 && v7 == 0)
        return 0;
      if (v879 == 0x10000 && !v866 && v7 == 5)
        goto LABEL_3441;
      if (v879 != 0x20000)
        return 0;
LABEL_3351:
      if (v866 || v7 != 5)
        return 0;
      goto LABEL_3448;
    case 470:
      if (v9 != 13)
        return 0;
      v884 = *(_QWORD *)v8 == 0x6D5F74726F706D69 && *(_QWORD *)(v8 + 5) == 0x656C75646F6D5F74;
      v91 = !v884;
      v885 = v3 & 0x70000;
      v886 = (v3 & 0x70000) == 0 && !v91;
      if (v886 && v7 == 0)
        return 0;
      if (v885 == 0x10000 && !v91 && v7 == 5)
        goto LABEL_3441;
      if (v885 != 0x20000)
        return 0;
      goto LABEL_3443;
    case 471:
      if (v9 != 11)
        return 0;
      v890 = *(_QWORD *)(v8 + 3);
      v891 = *(_QWORD *)v8 == 0x6E5F74726F706D69;
      v892 = 0x656D616E5F74726FLL;
      goto LABEL_3401;
    case 473:
      if (v9 != 23)
        return 0;
      v893 = *(_QWORD *)(v8 + 15);
      v894 = *(_QWORD *)v8 == 0x6C615F6563726F66 && *((_QWORD *)v8 + 1) == 0x5F6772615F6E6769;
      v895 = 0x7265746E696F705FLL;
      goto LABEL_3454;
    case 474:
      if (v9 == 21)
      {
        v922 = *(_QWORD *)v8 != 0x76656E5F79617278
            || *((_QWORD *)v8 + 1) != 0x7274736E695F7265
            || *(_QWORD *)(v8 + 13) != 0x746E656D75727473;
        v923 = v3 & 0x70000;
        if ((v3 & 0x70000) == 0 && (!v922 ? (v1019 = v7 == 0) : (v1019 = 0), v1019))
        {
          return 3;
        }
        else
        {
          if (v923 != 0x10000)
            goto LABEL_3856;
          v925 = !v922;
LABEL_3848:
          if (v925 && v7 == 5)
          {
LABEL_3983:
            v1042 = *((unsigned __int8 *)v5 + 4);
            v1043 = *(_DWORD *)v5 == 1851878499;
            v1044 = 103;
LABEL_3984:
            if (!v1043 || v1042 != v1044)
              return 0;
            return 4;
          }
          else
          {
LABEL_3856:
            if (v923 != 0x20000)
              return 0;
            if (v922 || v7 != 5)
              return 0;
LABEL_4282:
            v1076 = *((unsigned __int8 *)v5 + 4);
            v1077 = *(_DWORD *)v5 == 1851878499;
            v1078 = 103;
LABEL_4283:
            if (!v1077 || v1076 != v1078)
              return 0;
            return 5;
          }
        }
      }
      else
      {
        if (v9 != 22)
          return 0;
        v896 = *(_QWORD *)v8 == 0x776C615F79617278 && *((_QWORD *)v8 + 1) == 0x74736E695F737961;
        v897 = v896 && *(_QWORD *)(v8 + 14) == 0x746E656D75727473;
        v91 = !v897;
        v92 = v3 & 0x70000;
        if ((v3 & 0x70000) == 0)
        {
          v898 = !v91;
LABEL_3430:
          if (v898 && v7 == 0)
            return 0;
        }
        if (v92 != 0x10000)
          goto LABEL_3442;
LABEL_3434:
        v902 = !v91;
LABEL_3436:
        if (v902 && v7 == 5)
        {
LABEL_3441:
          v826 = *((unsigned __int8 *)v5 + 4);
          v827 = *(_DWORD *)v5 == 1851878499;
          v828 = 103;
          return v827 && v826 == v828;
        }
        else
        {
LABEL_3442:
          if (v92 != 0x20000)
            return 0;
LABEL_3443:
          if (v91 || v7 != 5)
            return 0;
LABEL_3448:
          v816 = *((unsigned __int8 *)v5 + 4);
          v817 = *(_DWORD *)v5 == 1851878499;
          v818 = 103;
LABEL_3488:
          if (!v817 || v816 != v818)
            return 0;
          return 2;
        }
      }
    case 475:
      if (v9 != 13)
        return 0;
      v890 = *(_QWORD *)(v8 + 5);
      v891 = *(_QWORD *)v8 == 0x676F6C5F79617278;
      v892 = 0x736772615F676F6CLL;
LABEL_3401:
      v91 = !v891 || v890 != v892;
      v92 = v3 & 0x70000;
      if ((v3 & 0x70000) == 0 && !v91 && v7 == 0)
        return 0;
LABEL_3414:
      v902 = v92 == 0x10000 && !v91;
      goto LABEL_3436;
    case 476:
      if (v9 != 19)
        return 0;
      v91 = *(_QWORD *)v8 != 0x676173755F756E78
         || *((_QWORD *)v8 + 1) != 0x746E616D65735F65
         || *(_QWORD *)(v8 + 11) != 0x736369746E616D65;
      v92 = v3 & 0x70000;
      v898 = (v3 & 0x70000) == 0 && !v91;
      goto LABEL_3430;
    case 477:
      if (v9 != 19)
        return 0;
      v893 = *(_QWORD *)(v8 + 11);
      v894 = *(_QWORD *)v8 == 0x6C61635F6F72657ALL && *((_QWORD *)v8 + 1) == 0x725F646573755F6CLL;
      v895 = 0x736765725F646573;
LABEL_3454:
      v79 = !v894 || v893 != v895;
      v80 = v3 & 0x70000;
      if ((v3 & 0x70000) != 0 || v79 || v7 != 0)
        goto LABEL_3467;
      return 0;
    default:
      return 0;
  }
}

const char *sub_22F1C9A34(uint64_t a1, int a2)
{
  _DWORD *v3;
  const char *result;
  int v5;
  int v6;

  if (!a1)
    return "";
  v3 = *(_DWORD **)(a1 + 16);
  v6 = *v3;
  result = (const char *)(v3 + 4);
  v5 = v6;
  if ((a2 - 1) <= 1)
  {
    if (v5 == 6)
    {
      if (!(*(_DWORD *)result ^ 0x616C435F | *((unsigned __int16 *)result + 2) ^ 0x676E))
        return "clang";
    }
    else if (v5 == 7 && !(*(_DWORD *)result ^ 0x6E675F5F | *(_DWORD *)(result + 3) ^ 0x5F5F756E))
    {
      return "gnu";
    }
  }
  return result;
}

char *sub_22F1C9AF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char *result;
  _BOOL4 v6;
  unsigned int *v7;
  unint64_t v8;
  char *v9;

  if (a4)
  {
    if (a4 > 2)
      return (char *)(*(_QWORD *)(a1 + 16) + 16);
    if (a3)
    {
      if (a3 == 5)
      {
        v6 = *(_DWORD *)a2 == 1851878499 && *(_BYTE *)(a2 + 4) == 103;
        goto LABEL_12;
      }
      if (a3 != 3)
        return (char *)(*(_QWORD *)(a1 + 16) + 16);
      if (*(_WORD *)a2 != 28263 || *(_BYTE *)(a2 + 2) != 117)
        return (char *)(*(_QWORD *)(a1 + 16) + 16);
    }
  }
  v6 = 1;
LABEL_12:
  v7 = *(unsigned int **)(a1 + 16);
  result = (char *)(v7 + 4);
  v8 = *v7;
  if (v6 && v8 >= 4 && *(_WORD *)result == 24415)
  {
    v9 = (char *)v7 + 18;
    if (*(_WORD *)&result[v8 - 2] == 24415)
      return v9;
  }
  return result;
}

BOOL sub_22F1C9BB8(_DWORD *a1, unint64_t a2)
{
  size_t v2;
  const void *v3;
  _BOOL4 v4;
  char **v5;
  uint64_t v6;
  const void *v7;
  char *v8;

  v2 = a2;
  v3 = a1;
  if (a2 >= 4)
  {
    v4 = *a1 == 761558131;
    if (*a1 == 761558131)
    {
      v3 = a1 + 1;
      v2 = a2 - 4;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = &off_24FAC8C80;
  v6 = 2023;
  while (1)
  {
    v7 = *(v5 - 2);
    if (v7)
      break;
    if (!v2)
      goto LABEL_12;
LABEL_13:
    v5 += 6;
    if (!--v6)
      return 0;
  }
  if (v2 != strlen(*(v5 - 2)) || v2 && memcmp(v3, v7, v2))
    goto LABEL_13;
LABEL_12:
  v8 = *v5;
  if (v4 == (strchr(*v5, 122) == 0))
    goto LABEL_13;
  return strchr(v8, 102) != 0;
}

unint64_t sub_22F1C9CA8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const char **v8;
  unint64_t result;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char **v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  uint64_t v23;
  uint64_t i;
  char v25;
  BOOL v26;
  int *v27;
  size_t v28;
  size_t v29;
  int v30;
  int v31;
  unsigned int v33;
  unsigned int v34;

  v6 = 0;
  v7 = 14336;
  v8 = (const char **)off_24FAC8C70;
  do
  {
    result = sub_22F1C9F58((uint64_t)v8, (uint64_t *)a3);
    if ((_DWORD)result && ((v6 - 1806) > 4 || (*(_BYTE *)(a3 + 132) & 0x10) != 0))
    {
      if (*v8)
        v10 = strlen(*v8);
      else
        v10 = 0;
      result = sub_22E3CB704((llvm::StringMapImpl *)a2, *v8, v10);
      *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFE0001FFLL | v7;
    }
    v7 += 512;
    ++v6;
    v8 += 6;
  }
  while (v6 != 2023);
  if (*(_DWORD *)(a1 + 8))
  {
    v11 = 0;
    v12 = 48 * *(unsigned int *)(a1 + 8);
    v13 = 1050112;
    do
    {
      v14 = (const char **)(*(_QWORD *)a1 + v11);
      result = sub_22F1C9F58((uint64_t)v14, (uint64_t *)a3);
      if ((_DWORD)result)
      {
        v15 = *v14;
        if (v15)
          v16 = strlen(v15);
        else
          v16 = 0;
        result = sub_22E3CB704((llvm::StringMapImpl *)a2, v15, v16);
        *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFE0001FFLL | ((unint64_t)(unsigned __int16)(v13 >> 9) << 9);
      }
      v13 += 512;
      v11 += 48;
    }
    while (v12 != v11);
  }
  if (*(_DWORD *)(a1 + 24))
  {
    v17 = 0;
    v18 = 48 * *(unsigned int *)(a1 + 24);
    v19 = 2024;
    do
    {
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(const void **)(v20 + v17);
      if (v21)
        v22 = strlen(*(const char **)(v20 + v17));
      else
        v22 = 0;
      result = sub_22E3CB704((llvm::StringMapImpl *)a2, v21, v22);
      *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFE0001FFLL | ((unint64_t)(unsigned __int16)((unint64_t)((((_DWORD)v19 + *(_DWORD *)(a1 + 8)) << 9) + 13824) >> 9) << 9);
      v17 += 48;
      ++v19;
    }
    while (v18 != v17);
  }
  v23 = *(_QWORD *)(a3 + 576);
  for (i = *(_QWORD *)(a3 + 584); v23 != i; v23 += 24)
  {
    v25 = *(_BYTE *)(v23 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = (int *)v23;
    else
      v27 = *(int **)v23;
    v28 = v25 & 0x7F;
    if (v26)
      v29 = *(_QWORD *)(v23 + 8);
    else
      v29 = v28;
    if (v29 >= 4)
    {
      v31 = *v27;
      v30 = *v27 == 761558131;
      if (*v27 == 761558131)
        ++v27;
      if (v31 == 761558131)
        v29 -= 4;
    }
    else
    {
      v30 = 0;
    }
    result = llvm::StringMapImpl::FindKey();
    if ((_DWORD)result != -1 && (int)result != (unint64_t)a2[2])
    {
      v33 = (unsigned __int16)(**(_DWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 8 * (int)result) + 8) >> 9);
      if (v33 >= 0x1C)
      {
        v34 = v33 - 27;
        result = sub_22F41944C((uint64_t *)a1, v33 - 27);
        if ((_DWORD)result)
        {
          result = sub_22F4194C0((uint64_t *)a1, v34);
          if (v30 == (_DWORD)result)
          {
            result = sub_22E3CB704((llvm::StringMapImpl *)a2, v27, v29);
            *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFE0001FFLL | 0x3600;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_22F1C9F58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unint64_t result;
  BOOL v22;
  char v23;
  BOOL v25;
  int v26;

  v4 = a2[1];
  v5 = (v4 & 0x80000000000000) != 0 && strchr(*(char **)(a1 + 16), 102) != 0;
  v6 = *(_DWORD *)(a1 + 32);
  if ((v4 & 0x400000000000000) != 0)
    v7 = 0;
  else
    v7 = (v6 >> 7) & 1;
  v10 = (v4 & 0x100000000000000) != 0
     && (v8 = *(_QWORD *)(a1 + 24)) != 0
     && strlen((const char *)v8) == 6
     && *(_DWORD *)v8 == 1752457581
     && *(_WORD *)(v8 + 4) == 26670;
  v11 = *a2;
  if ((*a2 & 0x20) != 0)
    LOBYTE(v12) = 0;
  else
    v12 = (v6 >> 4) & 1;
  v14 = (v11 & 0x4000) == 0 && v6 == 8;
  if ((*((_DWORD *)a2 + 13) & 0x40000000) != 0)
    v15 = 0;
  else
    v15 = (v6 >> 11) & 1;
  v17 = a2[7];
  v16 = a2[8];
  v18 = (v6 >> 8) & 1;
  if ((v16 & 0x100000000) != 0)
    v18 = 0;
  v19 = (v6 >> 9) & 1;
  if ((v16 & 0x200000000) != 0)
    v19 = 0;
  if (((v17 & 0x100000000) != 0 || v17 >= 0xC8)
    && (*(uint64_t *)((char *)a2 + 20) & 0x20000000000) != 0)
  {
    v20 = 0;
  }
  else
  {
    v20 = (v6 >> 10) & 1;
  }
  result = 0;
  if (*((_DWORD *)a2 + 18))
    v22 = 0;
  else
    v22 = v6 == 32;
  v23 = v22;
  v25 = (v11 & 0x100) == 0 && v6 == 4;
  if (!((v5 | v7 | v10 | v15 | v18 | v19 | v20) & 1 | v23 & 1 | ((int)*a2 >= 0) & v6 | v12 & 1 | v14)
    && !v25)
  {
    v26 = (*((unsigned __int8 *)a2 + 104) >> 5) & 1;
    if (v6 != 4096)
      v26 = 1;
    return ((v16 >> 37) | (v6 != 64)) & v26;
  }
  return result;
}

BOOL sub_22F1CA0EC(uint64_t *a1, unsigned int a2, _DWORD *a3, BOOL *a4, char *__s2)
{
  char **v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;

  if (a2 > 0x7E7)
  {
    v9 = a1[1];
    if (v9 + 2024 <= (unint64_t)a2)
    {
      v10 = a2 - v9 - 2024;
      v11 = a1[2];
    }
    else
    {
      v10 = a2 - 2024;
      v11 = *a1;
    }
    v8 = (char **)(v11 + 48 * v10);
  }
  else
  {
    v8 = &(&off_24FAC8C40)[6 * a2];
  }
  v12 = strpbrk(v8[2], __s2);
  v13 = v12;
  if (v12)
  {
    *a4 = *v12 == __s2[1];
    *a3 = strtol(v12 + 2, 0, 10);
  }
  return v13 != 0;
}

BOOL sub_22F1CA1AC(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  char **v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  unsigned int v11;
  char *i;
  int v13;
  unint64_t v14;
  char *__endptr;

  if (a2 > 0x7E7)
  {
    v5 = a1[1];
    if (v5 + 2024 <= (unint64_t)a2)
    {
      v6 = a2 - v5 - 2024;
      v7 = a1[2];
    }
    else
    {
      v6 = a2 - 2024;
      v7 = *a1;
    }
    v4 = (char **)(v7 + 48 * v6);
  }
  else
  {
    v4 = &(&off_24FAC8C40)[6 * a2];
  }
  v8 = strchr(v4[2], 67);
  v9 = v8;
  if (v8)
  {
    __endptr = 0;
    v10 = strtol(v8 + 2, &__endptr, 10);
    v11 = *(_DWORD *)(a3 + 8);
    if (v11 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v10;
    ++*(_DWORD *)(a3 + 8);
    for (i = __endptr; *__endptr == 44; i = __endptr)
    {
      v13 = strtol(i + 1, &__endptr, 10);
      v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = v13;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  return v9 != 0;
}

BOOL sub_22F1CA310(uint64_t *a1, unsigned int a2)
{
  BOOL v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL4 v7;
  _BOOL4 v8;

  if (!a2)
    return 1;
  if (a2 == 799)
    return 1;
  v3 = sub_22F4195C0(a1, a2);
  v4 = a2;
  v5 = v3;
  v6 = a1;
  if (v5)
    return sub_22F4194C0(v6, v4);
  v7 = sub_22F419678(a1, a2);
  v4 = a2;
  v8 = v7;
  v6 = a1;
  return !v8 || sub_22F4194C0(v6, v4);
}

uint64_t sub_22F1CA384(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  __int16 v4;
  unsigned int v5;

  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  *(_DWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1156) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_QWORD *)(a1 + 1336) = 0;
  sub_22F4196EC(a1 + 1344);
  *(_DWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_QWORD *)(a1 + 1448) = a1 + 1456;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_BYTE *)(a1 + 1680) = 1;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_BYTE *)(a1 + 1696) = 1;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1704) = 0u;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 32) & 0xC000000000000000 | 0x20000000000048;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0x8000000000000000 | 0x400006601E0;
  *(_QWORD *)(a1 + 8) = 0x1000000C8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x4000200000000000;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v2 & 0xFFFFE00000000000 | 0x400000001F4;
  v4 = *(_WORD *)(a1 + 64) & 0xF000 | 0xA2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00001000;
  *(_WORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 76) &= 0xFFFF800000000000;
  *(_QWORD *)(a1 + 68) = 0;
  v5 = *(_DWORD *)(a1 + 92) & 0xE0000000 | 0x60004;
  *(_QWORD *)(a1 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 92) = v5;
  *(_WORD *)(a1 + 104) = 2560;
  *(_QWORD *)(a1 + 96) = 0xA010000000000;
  *(_DWORD *)(a1 + 656) = 1;
  *(_DWORD *)(a1 + 280) = 708325428;
  return a1;
}

uint64_t sub_22F1CA5D0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = HIDWORD(a1) & 0x7FFFFFFF;
  if (a1 >= 0)
    LODWORD(v1) = 0;
  v2 = v1 + 10 * a1;
  if (v2 <= 89)
  {
    switch(v2)
    {
      case 'F':
        return 1;
      case 'K':
        return 2;
      case 'P':
        return 3;
      default:
        return 0;
    }
  }
  else
  {
    switch(v2)
    {
      case 'Z':
        result = 4;
        break;
      case '[':
        result = 5;
        break;
      case '\\':
        result = 6;
        break;
      case 'd':
        result = 7;
        break;
      case 'e':
        result = 8;
        break;
      case 'f':
        result = 9;
        break;
      case 'n':
        result = 10;
        break;
      case 'o':
        result = 11;
        break;
      case 'p':
        result = 12;
        break;
      case 'q':
        result = 13;
        break;
      case 'r':
        result = 14;
        break;
      case 's':
        result = 15;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_22F1CA6A8(_BYTE *a1)
{
  uint64_t result;
  char v3;
  char v4;

  result = llvm::json::Object::getString();
  if (v4)
  {
    result = llvm::VersionTuple::tryParse();
    if ((_DWORD)result)
    {
      v3 = 0;
      *a1 = 0;
    }
    else
    {
      *(_OWORD *)a1 = 0uLL;
      v3 = 1;
    }
    a1[16] = v3;
  }
  else
  {
    *a1 = 0;
    a1[16] = 0;
  }
  return result;
}

void sub_22F1CA724(void *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  const char **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 __dst;
  unint64_t v39;
  __int128 v40;
  void **v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  llvm *v45;
  int v46;
  char v47;
  void *__p[2];
  void **v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  llvm *v53;
  int v54;
  unsigned int v55;
  char v56;
  void *v57[2];
  char v58;
  const char *v59;
  void *v60;
  int v61;
  __int16 v62;
  __int128 v63;
  unint64_t v64;
  __int16 v65;
  unsigned int v66;
  __int128 v67;
  _QWORD v68[3];
  uint64_t v69[2];
  const char *v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76[2];
  char v77;
  _QWORD v78[4];
  char v79;
  uint64_t v80;
  char v81;
  void *__srca;
  __int128 __len;
  _QWORD v84[35];

  v84[32] = *MEMORY[0x24BDAC8D0];
  __srca = v84;
  __len = xmmword_22F44E320;
  if (__n < 0x101)
  {
    v6 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v6 = __len;
  if (__n)
  {
LABEL_3:
    memcpy((char *)__srca + v6, __src, __n);
    v6 = __len;
  }
LABEL_4:
  *(_QWORD *)&__len = v6 + __n;
  WORD4(v42) = 257;
  v65 = 257;
  v62 = 257;
  llvm::sys::path::append();
  WORD4(v50) = 261;
  __p[0] = __srca;
  __p[1] = (void *)__len;
  llvm::vfs::FileSystem::getBufferForFile();
  if ((v81 & 1) != 0)
  {
    *(_BYTE *)(a3 + 88) &= ~1u;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 80) = 0;
    goto LABEL_36;
  }
  v7 = (llvm *)llvm::json::parse();
  if ((v79 & 1) == 0)
  {
    if (LOWORD(v78[0]) != 7)
      goto LABEL_28;
    if (!__srca)
    {
      __dst = 0uLL;
      v39 = 0;
LABEL_20:
      sub_22F1CA6A8(v76);
      if (!v77 || (sub_22F1CA6A8(&v73), !v75))
      {
        v13 = 0;
        LOBYTE(v40) = 0;
        v47 = 0;
LABEL_23:
        if (SHIBYTE(v39) < 0)
          operator delete((void *)__dst);
        if (v13)
        {
          *(_BYTE *)(a3 + 88) &= ~1u;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 80) = 0;
          sub_22E80B1A8(a3);
          *(_OWORD *)a3 = v40;
          *(_QWORD *)(a3 + 16) = v41;
          v40 = 0uLL;
          *(_OWORD *)(a3 + 24) = v42;
          *(_OWORD *)(a3 + 40) = v43;
          *(_QWORD *)(a3 + 56) = v44;
          v41 = 0;
          *(_QWORD *)(a3 + 64) = v45;
          v44 = 0;
          v45 = 0;
          *(_DWORD *)(a3 + 72) = v46;
          v46 = 0;
          *(_BYTE *)(a3 + 80) = 1;
          sub_22E80B1A8((uint64_t)&v40);
          goto LABEL_29;
        }
        sub_22E80B1A8((uint64_t)&v40);
LABEL_28:
        llvm::inconvertibleErrorCode(v7);
        operator new();
        __p[0] = "invalid SDKSettings.json";
        WORD4(v50) = 259;
        v14 = llvm::StringError::StringError();
        *(_BYTE *)(a3 + 88) |= 1u;
        *(_QWORD *)a3 = v14;
        goto LABEL_29;
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      Object = llvm::json::Object::getObject();
      if (!Object)
      {
        v18 = v73;
LABEL_44:
        v63 = __dst;
        v64 = v39;
        __dst = 0uLL;
        v39 = 0;
        v59 = v70;
        v70 = 0;
        v60 = v71;
        v71 = 0;
        v61 = v72;
        v72 = 0;
        sub_22E80B260(__p, &v63, v76[0], v76[1], v18, v74, (uint64_t)&v59);
        v41 = v49;
        v40 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v42 = v50;
        v43 = v51;
        v44 = v52;
        v49 = 0;
        v52 = 0;
        v45 = v53;
        v53 = 0;
        v46 = v54;
        v54 = 0;
        v47 = 1;
        sub_22F2E0858((uint64_t)&v52);
        if (SHIBYTE(v49) < 0)
          operator delete(__p[0]);
        sub_22F2E0858((uint64_t)&v59);
        if (SHIBYTE(v64) < 0)
          operator delete((void *)v63);
        v13 = 1;
        goto LABEL_89;
      }
      v19 = Object;
      v20 = sub_22F419BC4(Object);
      v69[0] = v20;
      v69[1] = v21;
      v22 = *(_QWORD *)v19 + 56 * *(unsigned int *)(v19 + 16);
      if (v22 != v20)
      {
        v25 = v20;
        do
        {
          *(_OWORD *)__p = *(_OWORD *)(v25 + 8);
          v26 = llvm::StringRef::find();
          if (v26 == -1)
          {
            v29 = 0;
            v30 = 0;
            v67 = *(_OWORD *)__p;
          }
          else
          {
            if (__p[1] >= (void *)v26)
              v27 = (void *)v26;
            else
              v27 = __p[1];
            if (__p[1] >= (void *)(v26 + 1))
              v28 = (void *)(v26 + 1);
            else
              v28 = __p[1];
            v29 = (char *)__p[0] + (unint64_t)v28;
            v30 = (char *)((char *)__p[1] - (char *)v28);
            *(void **)&v67 = __p[0];
            *((_QWORD *)&v67 + 1) = v27;
          }
          v68[0] = v29;
          v68[1] = v30;
          if (!llvm::StringRef::compare_insensitive())
          {
            v59 = "--";
            v62 = 259;
            llvm::StringRef::lower((llvm::StringRef *)v68);
            v31 = v62;
            if ((_BYTE)v62)
            {
              if (v62 == 1)
              {
                __p[0] = v57;
                v32 = 1;
                v31 = 4;
              }
              else
              {
                if (HIBYTE(v62) != 1)
                  v31 = 2;
                v33 = &v59;
                if (HIBYTE(v62) == 1)
                  v33 = (const char **)v59;
                __p[0] = v33;
                __p[1] = v60;
                v49 = v57;
                v32 = 4;
              }
            }
            else
            {
              v32 = 1;
            }
            BYTE8(v50) = v31;
            BYTE9(v50) = v32;
            MEMORY[0x23489F1BC](&v63, __p);
            if (v58 < 0)
              operator delete(v57[0]);
            if (v66)
            {
              v34 = *(_WORD *)(v25 + 24) == 7 ? v25 + 32 : 0;
              sub_22F41993C((uint64_t)__p, v34, v73, v74);
              if (v56)
              {
                v59 = (const char *)((41 * v66) | 0x11F00000000);
                v35 = sub_22F41A034((uint64_t)&v70, (uint64_t *)&v59);
                sub_22F419C0C((uint64_t)(v35 + 1), (__int128 *)__p);
                if (v56)
                  llvm::deallocate_buffer(v53, (void *)(32 * v55));
              }
            }
            if (SHIBYTE(v64) < 0)
              operator delete((void *)v63);
          }
          v69[0] = v25 + 56;
          sub_22F1CAF30(v69);
          v25 = v69[0];
        }
        while (v69[0] != v22);
      }
      v23 = llvm::json::Object::getObject();
      v18 = v73;
      if (v23)
      {
        sub_22F41993C((uint64_t)__p, v23, v73, v74);
        if (!v56)
          goto LABEL_88;
        *(_QWORD *)&v63 = 0x1C300000134;
        v36 = sub_22F41A034((uint64_t)&v70, (uint64_t *)&v63);
        sub_22F419C0C((uint64_t)(v36 + 1), (__int128 *)__p);
        if (v56)
          llvm::deallocate_buffer(v53, (void *)(32 * v55));
      }
      v24 = llvm::json::Object::getObject();
      if (!v24)
        goto LABEL_44;
      sub_22F41993C((uint64_t)__p, v24, v18, v74);
      if (v56)
      {
        *(_QWORD *)&v63 = 0x134000001C3;
        v37 = sub_22F41A034((uint64_t)&v70, (uint64_t *)&v63);
        sub_22F419C0C((uint64_t)(v37 + 1), (__int128 *)__p);
        if (v56)
          llvm::deallocate_buffer(v53, (void *)(32 * v55));
        goto LABEL_44;
      }
LABEL_88:
      v13 = 0;
      LOBYTE(v40) = 0;
      v47 = 0;
LABEL_89:
      sub_22F2E0858((uint64_t)&v70);
      goto LABEL_23;
    }
    v8 = __len;
    if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if ((unint64_t)__len >= 0x17)
    {
      v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v11 = __len | 7;
      v12 = v11 + 1;
      p_dst = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&__dst + 1) = __len;
      v39 = v12 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v39) = __len;
      p_dst = &__dst;
      if (!(_QWORD)__len)
        goto LABEL_19;
    }
    memmove(p_dst, __srca, __len);
LABEL_19:
    *((_BYTE *)p_dst + v8) = 0;
    goto LABEL_20;
  }
  v10 = v78[0];
  v78[0] = 0;
  *(_BYTE *)(a3 + 88) |= 1u;
  *(_QWORD *)a3 = v10;
LABEL_29:
  if ((v79 & 1) != 0)
  {
    v15 = v78[0];
    v78[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    llvm::json::Value::destroy((llvm::json::Value *)v78);
  }
  if ((v81 & 1) == 0)
  {
    v16 = v80;
    v80 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
LABEL_36:
  if (__srca != v84)
    free(__srca);
}

uint64_t *sub_22F1CAF30(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];
  uint64_t v13[3];

  sub_22F094D70(v13, -1, 0);
  result = sub_22F094D70(v12, -2, 0);
  v4 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = (const void *)v13[1];
    v6 = v13[2];
    v7 = (const void *)v12[1];
    v8 = v12[2];
    do
    {
      v9 = *(const void **)(v4 + 8);
      if (v5 == (const void *)-2)
      {
        if (v9 == (const void *)-2)
          goto LABEL_21;
      }
      else if (v5 == (const void *)-1)
      {
        if (v9 == (const void *)-1)
          goto LABEL_21;
      }
      else if (*(_QWORD *)(v4 + 16) == v6)
      {
        if (!v6)
          goto LABEL_21;
        result = (uint64_t *)memcmp(*(const void **)(v4 + 8), v5, v6);
        if (!(_DWORD)result)
          goto LABEL_21;
      }
      if (v7 == (const void *)-2)
      {
        if (v9 != (const void *)-2)
          break;
      }
      else if (v7 == (const void *)-1)
      {
        if (v9 != (const void *)-1)
          break;
      }
      else
      {
        if (*(_QWORD *)(v4 + 16) != v8)
          break;
        if (v8)
        {
          result = (uint64_t *)memcmp(v9, v7, v8);
          if ((_DWORD)result)
            break;
        }
      }
LABEL_21:
      v4 += 56;
      *a1 = v4;
    }
    while (v4 != v3);
  }
  v10 = v12[0];
  v12[0] = 0;
  if (v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    result = (uint64_t *)MEMORY[0x2348A0E9C](v10, 0x1012C40EC159624);
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    return (uint64_t *)MEMORY[0x2348A0E9C](v11, 0x1012C40EC159624);
  }
  return result;
}

unint64_t sub_22F1CB0B4(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if ((result & 0x8000000000000000) != 0)
  {
    v2 = (__ROR8__(result, 32) & 0xFFFFFFFF7FFFFFFFLL) + ~((HIDWORD(result) & 0x7FFFFFFF) << 32);
    v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
    v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
    result = ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
    if ((a2 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a2 & 0x8000000000000000) == 0)
        return result;
LABEL_7:
      v8 = (HIDWORD(a2) & 0x7FFFFFFF) + ~((HIDWORD(a2) & 0x7FFFFFFF) << 32) + (result << 32);
      v9 = 9
         * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      return (v10 >> 31) ^ v10;
    }
  }
  else if ((a2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  v5 = (a2 & 0x7FFFFFFF) + ~((a2 & 0x7FFFFFFF) << 32) + (result << 32);
  v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  result = (v7 >> 31) ^ v7;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_7;
  return result;
}

_OWORD *sub_22F1CB188(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](32 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F419F48(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = xmmword_22F4ADD40;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F1CB24C(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 104 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F41A204(a1, (uint64_t)v4, (uint64_t)v4 + 104 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(104 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 104 * v10;
      do
      {
        *result = -1;
        result += 13;
        v11 -= 104;
      }
      while (v11);
    }
  }
  return result;
}

unsigned __int8 **sub_22F1CB318(unsigned __int8 **a1, char **a2)
{
  std::string *p_p;
  size_t size;
  __n128 v5;
  char *v7;
  std::string __p;

  v7 = *a2;
  *a2 = 0;
  sub_22F2432A8(&v7, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v5.n128_f64[0] = sub_22E3B89A8(a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
    (*(void (**)(char *, __n128))(*(_QWORD *)v7 + 8))(v7, v5);
  return a1;
}

uint64_t sub_22F1CB3A4(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 7) = 1;
  *(_BYTE *)(a1 + 9) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_22F4ADD80;
  *(_DWORD *)(a1 + 28) = 0;
  v6 = *a3;
  *(_QWORD *)(a1 + 32) = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *a3 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 656) = a1 + 672;
  *(_QWORD *)(a1 + 664) = 0x800000000;
  *(_QWORD *)(a1 + 768) = a1 + 784;
  *(_QWORD *)(a1 + 776) = 0x600000000;
  if (a5)
    v7 = a4;
  else
    v7 = 0;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = sub_22F1CB4B0;
  sub_22F1CB520(a1);
  return a1;
}

uint64_t sub_22F1CB4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t result;

  v9 = a9[1];
  if (a9[2] < (unint64_t)(v9 + 23))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v9 = a9[1];
  }
  qmemcpy((void *)(*a9 + v9), "<can't format argument>", 23);
  a9[1] += 23;
  return result;
}

_BYTE *sub_22F1CB520(uint64_t a1)
{
  uint64_t v2;
  _BYTE *result;
  uint64_t v4;

  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 316) = -1;
  *(_QWORD *)(a1 + 184) = 0;
  v2 = a1 + 72;
  *(_DWORD *)(a1 + 208) = 0;
  sub_22F1CE8A0((unsigned int *)(a1 + 72));
  sub_22F1CE848(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  result = operator new(0x30uLL);
  result[40] = 0;
  *((_QWORD *)result + 3) = 0;
  *((_DWORD *)result + 8) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 11) = 1;
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)result = v4;
  *((_QWORD *)result + 1) = v2;
  *(_QWORD *)(v4 + 8) = result;
  *(_QWORD *)(a1 + 72) = result;
  ++*(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 120) = result + 16;
  *(_QWORD *)(a1 + 128) = result + 16;
  *(_DWORD *)(a1 + 136) = 0;
  return result;
}

uint64_t sub_22F1CB5CC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t i;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 48) = 0;
  sub_22E3BB1BC((char **)(a1 + 768));
  v3 = *(void **)(a1 + 656);
  if (v3 != (void *)(a1 + 672))
    free(v3);
  for (i = 0; i != -240; i -= 24)
  {
    if (*(char *)(a1 + i + 655) < 0)
      operator delete(*(void **)(a1 + i + 632));
  }
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  sub_22F1CE848(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_22F1CE8A0((unsigned int *)(a1 + 72));
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_22E3B3C18((uint64_t *)(a1 + 40));
  sub_22E3B3D40((uint64_t *)(a1 + 32));
  return a1;
}

uint64_t sub_22F1CB6D4(int *a1, _QWORD *a2, const void *a3, size_t a4)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  llvm *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  uint64_t result;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  unsigned int ***v16;
  unsigned int ***v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  llvm *v27;
  llvm::raw_ostream *v28;
  _DWORD *v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  void *v32;
  llvm::raw_ostream *v33;
  const char *v34;
  uint64_t v35;
  _BYTE *v36;
  llvm::raw_ostream *v37;
  _WORD *v38;
  int *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  unsigned int *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  int *v55;
  int *v56;
  BOOL v57;
  int *v58;
  _QWORD v61[5];
  char v62;
  _QWORD v63[5];
  char v64;
  int v65;

  v6 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0x13)
  {
    *(_DWORD *)(v7 + 16) = 544497952;
    *(_OWORD *)v7 = *(_OWORD *)"diagnostic state at ";
    *((_QWORD *)v6 + 4) += 20;
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, "diagnostic state at ");
  }
  v8 = (llvm::raw_ostream *)llvm::errs(v6);
  v9 = sub_22F422CEC(a1 + 10, v8, a2);
  v10 = (llvm::raw_ostream *)llvm::errs(v9);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8250;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, ": ");
  }
  result = llvm::raw_ostream::operator<<();
  v13 = *(_BYTE **)(result + 32);
  if (*(_BYTE **)(result + 24) == v13)
  {
    result = llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n");
  }
  else
  {
    *v13 = 10;
    ++*(_QWORD *)(result + 32);
  }
  v14 = *(int **)a1;
  v58 = a1 + 2;
  if (*(int **)a1 != a1 + 2)
  {
    while (1)
    {
      v65 = v14[8];
      v64 = 0;
      v63[0] = &v64;
      v63[1] = v14 + 10;
      v63[2] = &v65;
      v63[3] = a2;
      v63[4] = v14 + 8;
      if (!a4)
        result = (uint64_t)sub_22F1CC728((llvm *)v63);
      v15 = v14[16];
      if ((_DWORD)v15)
        break;
LABEL_93:
      v55 = (int *)*((_QWORD *)v14 + 1);
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = *(int **)v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (int *)*((_QWORD *)v14 + 2);
          v57 = *(_QWORD *)v56 == (_QWORD)v14;
          v14 = v56;
        }
        while (!v57);
      }
      v14 = v56;
      if (v56 == v58)
        return result;
    }
    v16 = (unsigned int ***)*((_QWORD *)v14 + 7);
    v17 = &v16[2 * v15];
LABEL_12:
    v62 = 0;
    v61[0] = &v62;
    v61[1] = v63;
    v61[2] = a2;
    v61[3] = &v65;
    v61[4] = v16;
    if (!a4)
      result = sub_22F1CCA78((uint64_t)v61);
    v18 = **v16;
    v19 = *((unsigned int *)*v16 + 4);
    v20 = &v18[2 * v19];
    if (*((_DWORD *)*v16 + 2))
    {
      if (*((_DWORD *)*v16 + 4))
      {
        v21 = 8 * v19;
        v22 = **v16;
        while (*v22 >= 0xFFFFFFFE)
        {
          v22 += 2;
          v21 -= 8;
          if (!v21)
            goto LABEL_19;
        }
      }
      else
      {
        v22 = **v16;
      }
    }
    else
    {
LABEL_19:
      v22 = &v18[2 * v19];
    }
    v23 = &v18[2 * v19];
    while (1)
    {
LABEL_22:
      if (v22 == v23)
      {
        v16 += 2;
        if (v16 == v17)
          goto LABEL_93;
        goto LABEL_12;
      }
      result = (uint64_t)sub_22F41A9FC(*v22);
      v25 = (const void *)result;
      v26 = v24;
      if (!a4)
        break;
      if (a4 == v24)
      {
        result = memcmp(a3, (const void *)result, a4);
        if (!(_DWORD)result)
          break;
      }
LABEL_69:
      v50 = v22 + 2;
      while (v50 != v20)
      {
        v51 = *v50;
        v50 += 2;
        if (v51 <= 0xFFFFFFFD)
        {
          v22 = v50 - 2;
          goto LABEL_22;
        }
      }
      v22 = v20;
    }
    v27 = (llvm *)sub_22F1CCA78((uint64_t)v61);
    v28 = (llvm::raw_ostream *)llvm::errs(v27);
    v29 = (_DWORD *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 3uLL)
    {
      *v29 = 538976288;
      *((_QWORD *)v28 + 4) += 4;
    }
    else
    {
      v28 = (llvm::raw_ostream *)llvm::raw_ostream::write(v28, "    ");
    }
    v30 = (llvm::raw_ostream *)llvm::errs(v28);
    v31 = v30;
    if (v26)
    {
      v32 = (void *)*((_QWORD *)v30 + 4);
      if (v26 <= *((_QWORD *)v31 + 3) - (_QWORD)v32)
      {
        v33 = (llvm::raw_ostream *)memcpy(v32, v25, v26);
        *((_QWORD *)v31 + 4) += v26;
        goto LABEL_37;
      }
      v33 = v31;
      v34 = (const char *)v25;
    }
    else
    {
      v35 = *((_QWORD *)v30 + 4);
      if ((unint64_t)(*((_QWORD *)v30 + 3) - v35) > 8)
      {
        *(_BYTE *)(v35 + 8) = 32;
        *(_QWORD *)v35 = *(_QWORD *)"<unknown ";
        *((_QWORD *)v30 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v30, "<unknown ");
      }
      v33 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v36 = (_BYTE *)*((_QWORD *)v33 + 4);
      if (*((_BYTE **)v33 + 3) != v36)
      {
        *v36 = 62;
        ++*((_QWORD *)v33 + 4);
        goto LABEL_37;
      }
      v34 = ">";
    }
    v33 = (llvm::raw_ostream *)llvm::raw_ostream::write(v33, v34);
LABEL_37:
    v37 = (llvm::raw_ostream *)llvm::errs(v33);
    v38 = (_WORD *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 1uLL)
    {
      *v38 = 8250;
      *((_QWORD *)v37 + 4) += 2;
    }
    else
    {
      v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, ": ");
    }
    switch(v22[1] & 7)
    {
      case 1u:
        v37 = (llvm::raw_ostream *)llvm::errs(v37);
        v39 = (int *)*((_QWORD *)v37 + 4);
        if (*((_QWORD *)v37 + 3) - (_QWORD)v39 <= 6uLL)
        {
          v40 = "ignored";
          goto LABEL_50;
        }
        *(int *)((char *)v39 + 3) = 1684370031;
        v52 = 1869506409;
        goto LABEL_87;
      case 2u:
        v37 = (llvm::raw_ostream *)llvm::errs(v37);
        v41 = *((_QWORD *)v37 + 4);
        if ((unint64_t)(*((_QWORD *)v37 + 3) - v41) <= 5)
        {
          v40 = "remark";
          goto LABEL_50;
        }
        *(_WORD *)(v41 + 4) = 27506;
        *(_DWORD *)v41 = 1634559346;
        v53 = *((_QWORD *)v37 + 4) + 6;
        goto LABEL_91;
      case 3u:
        v37 = (llvm::raw_ostream *)llvm::errs(v37);
        v39 = (int *)*((_QWORD *)v37 + 4);
        if (*((_QWORD *)v37 + 3) - (_QWORD)v39 <= 6uLL)
        {
          v40 = "warning";
          goto LABEL_50;
        }
        *(int *)((char *)v39 + 3) = 1735289198;
        v52 = 1852989815;
LABEL_87:
        *v39 = v52;
        v53 = *((_QWORD *)v37 + 4) + 7;
        goto LABEL_91;
      case 4u:
        v37 = (llvm::raw_ostream *)llvm::errs(v37);
        v42 = *((_QWORD *)v37 + 4);
        if ((unint64_t)(*((_QWORD *)v37 + 3) - v42) <= 4)
        {
          v40 = "error";
          goto LABEL_50;
        }
        *(_BYTE *)(v42 + 4) = 114;
        v54 = 1869771365;
        goto LABEL_90;
      case 5u:
        v37 = (llvm::raw_ostream *)llvm::errs(v37);
        v42 = *((_QWORD *)v37 + 4);
        if ((unint64_t)(*((_QWORD *)v37 + 3) - v42) > 4)
        {
          *(_BYTE *)(v42 + 4) = 108;
          v54 = 1635017062;
LABEL_90:
          *(_DWORD *)v42 = v54;
          v53 = *((_QWORD *)v37 + 4) + 5;
LABEL_91:
          *((_QWORD *)v37 + 4) = v53;
        }
        else
        {
          v40 = "fatal";
LABEL_50:
          v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, v40);
        }
LABEL_51:
        if ((v22[1] & 8) == 0)
        {
          v37 = (llvm::raw_ostream *)llvm::errs(v37);
          v43 = (_QWORD *)*((_QWORD *)v37 + 4);
          if (*((_QWORD *)v37 + 3) - (_QWORD)v43 > 7uLL)
          {
            *v43 = 0x746C756166656420;
            *((_QWORD *)v37 + 4) += 8;
          }
          else
          {
            v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, " default");
          }
        }
        if ((v22[1] & 0x10) != 0)
        {
          v37 = (llvm::raw_ostream *)llvm::errs(v37);
          v44 = (_DWORD *)*((_QWORD *)v37 + 4);
          if (*((_QWORD *)v37 + 3) - (_QWORD)v44 > 6uLL)
          {
            *(_DWORD *)((char *)v44 + 3) = 1634559841;
            *v44 = 1634889760;
            *((_QWORD *)v37 + 4) += 7;
          }
          else
          {
            v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, " pragma");
          }
        }
        if ((v22[1] & 0x20) != 0)
        {
          v37 = (llvm::raw_ostream *)llvm::errs(v37);
          v45 = *((_QWORD *)v37 + 4);
          if ((unint64_t)(*((_QWORD *)v37 + 3) - v45) > 8)
          {
            *(_BYTE *)(v45 + 8) = 114;
            *(_QWORD *)v45 = *(_QWORD *)" no-error";
            *((_QWORD *)v37 + 4) += 9;
          }
          else
          {
            v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, " no-error");
          }
        }
        v46 = *((_BYTE *)v22 + 4);
        if ((v46 & 0x40) != 0)
        {
          v37 = (llvm::raw_ostream *)llvm::errs(v37);
          v47 = *((_QWORD *)v37 + 4);
          if ((unint64_t)(*((_QWORD *)v37 + 3) - v47) > 8)
          {
            *(_BYTE *)(v47 + 8) = 108;
            *(_QWORD *)v47 = *(_QWORD *)" no-fatal";
            *((_QWORD *)v37 + 4) += 9;
          }
          else
          {
            v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, " no-fatal");
          }
          v46 = *((_BYTE *)v22 + 4);
        }
        if (v46 < 0)
        {
          v37 = (llvm::raw_ostream *)llvm::errs(v37);
          v48 = *((_QWORD *)v37 + 4);
          if ((unint64_t)(*((_QWORD *)v37 + 3) - v48) > 9)
          {
            *(_WORD *)(v48 + 8) = 25701;
            *(_QWORD *)v48 = *(_QWORD *)" overruled";
            *((_QWORD *)v37 + 4) += 10;
          }
          else
          {
            v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, " overruled");
          }
        }
        result = llvm::errs(v37);
        v49 = *(_BYTE **)(result + 32);
        if (*(_BYTE **)(result + 24) == v49)
        {
          result = llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n");
        }
        else
        {
          *v49 = 10;
          ++*(_QWORD *)(result + 32);
        }
        break;
      default:
        goto LABEL_51;
    }
    goto LABEL_69;
  }
  return result;
}

BOOL sub_22F1CBE18(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[18];
  v3 = a1[19];
  if (v2 != v3)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v6 = a1[19];
    if (v5 != a1[16])
    {
      sub_22F1CC1EC((uint64_t)(a1 + 12), a1[8], a2, v5);
      v6 = a1[19];
    }
    a1[19] = v6 - 8;
  }
  return v2 != v3;
}

double sub_22F1CBE80(uint64_t a1, int a2, void *__src, size_t __len, void *a5, size_t a6, void *a7, size_t a8)
{
  __int128 *p_dst;
  size_t v16;
  size_t v17;
  void **v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  double result;
  __int128 __dst;
  unint64_t v29;

  if (*(_DWORD *)(a1 + 208))
    return result;
  *(_DWORD *)(a1 + 208) = a2;
  if (!__src)
  {
    __dst = 0uLL;
    v29 = 0;
    goto LABEL_13;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_43;
  if (__len >= 0x17)
  {
    v16 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v16 = __len | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v29 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_12;
  }
  memmove(p_dst, __src, __len);
LABEL_12:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_13:
  v18 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = __dst;
  *(_QWORD *)(a1 + 232) = v29;
  if (!a5)
  {
    __dst = 0uLL;
    v29 = 0;
    goto LABEL_26;
  }
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_43;
  if (a6 >= 0x17)
  {
    v20 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v20 = a6 | 7;
    v21 = v20 + 1;
    v19 = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = a6;
    v29 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = v19;
  }
  else
  {
    HIBYTE(v29) = a6;
    v19 = &__dst;
    if (!a6)
      goto LABEL_25;
  }
  memmove(v19, a5, a6);
LABEL_25:
  *((_BYTE *)v19 + a6) = 0;
LABEL_26:
  v22 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = __dst;
  *(_QWORD *)(a1 + 256) = v29;
  if (a7)
  {
    if (a8 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a8 >= 0x17)
      {
        v24 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a8 | 7) != 0x17)
          v24 = a8 | 7;
        v25 = v24 + 1;
        v23 = (__int128 *)operator new(v24 + 1);
        *((_QWORD *)&__dst + 1) = a8;
        v29 = v25 | 0x8000000000000000;
        *(_QWORD *)&__dst = v23;
      }
      else
      {
        HIBYTE(v29) = a8;
        v23 = &__dst;
        if (!a8)
          goto LABEL_38;
      }
      memmove(v23, a7, a8);
LABEL_38:
      *((_BYTE *)v23 + a8) = 0;
      goto LABEL_39;
    }
LABEL_43:
    abort();
  }
  __dst = 0uLL;
  v29 = 0;
LABEL_39:
  v26 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v26);
  result = *(double *)&__dst;
  *(_OWORD *)v26 = __dst;
  *(_QWORD *)(a1 + 280) = v29;
  return result;
}

uint64_t sub_22F1CC0BC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  void *v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  int v15;
  void *v16;
  size_t v17;
  size_t v18;
  char v19;
  void *v20;
  size_t v21;
  double v22;
  unsigned __int8 *v24[3];
  __int16 v25;

  v2 = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = v2;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v24[0] = (unsigned __int8 *)(a1 + 320);
  v24[1] = 0;
  v24[2] = (unsigned __int8 *)a1;
  v25 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v3 = *(unsigned int *)(a1 + 776);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 768);
    v5 = 56 * v3;
    do
    {
      if (*(char *)(v4 + v5 - 9) < 0)
        operator delete(*(void **)(v4 + v5 - 32));
      v5 -= 56;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 776) = 0;
  v6 = *(_BYTE *)(a1 + 239);
  v7 = v6;
  if (v6 >= 0)
    v8 = (void *)(a1 + 216);
  else
    v8 = *(void **)(a1 + 216);
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(a1 + 224);
  sub_22E3B89A8(v24, v8, v10);
  v13 = *(void **)(a1 + 240);
  v12 = a1 + 240;
  v11 = v13;
  v14 = *(_BYTE *)(v12 + 23);
  v15 = v14;
  if (v14 >= 0)
    v16 = (void *)v12;
  else
    v16 = v11;
  v17 = v14 & 0x7F;
  if (v15 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(v12 + 8);
  sub_22E3B89A8(v24, v16, v18);
  v19 = *(_BYTE *)(v12 + 47);
  if (v19 >= 0)
    v20 = (void *)(v12 + 24);
  else
    v20 = *(void **)(v12 + 24);
  if (v19 >= 0)
    v21 = v19 & 0x7F;
  else
    v21 = *(_QWORD *)(v12 + 32);
  v22 = sub_22E3B89A8(v24, v20, v21);
  return sub_22E3BB0B8(v24, v22);
}

uint64_t sub_22F1CC1EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = a3;
  v7 = sub_22E677168(a2, a3);
  v8 = HIDWORD(v7);
  v9 = sub_22F1CC2C8((uint64_t **)a1, a2, v7);
  do
  {
    result = (uint64_t)(v9 + 2);
    v11 = v9[2];
    *((_BYTE *)v9 + 12) = 1;
    v12 = *((unsigned int *)v9 + 6);
    v13 = v11 + 16 * v12;
    if (*(_DWORD *)(v13 - 8) == v8)
    {
      if (*(_QWORD *)(v13 - 16) == a4)
        return result;
      *(_QWORD *)(v13 - 16) = a4;
    }
    else
    {
      if (v12 >= *((_DWORD *)v9 + 7))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v9[2];
        v12 = *((unsigned int *)v9 + 6);
      }
      v14 = (_QWORD *)(v11 + 16 * v12);
      *v14 = a4;
      v14[1] = v8;
      ++*((_DWORD *)v9 + 6);
    }
    v8 = *((unsigned int *)v9 + 2);
    v9 = (uint64_t *)*v9;
  }
  while (v9);
  return result;
}

uint64_t *sub_22F1CC2C8(uint64_t **a1, uint64_t a2, signed int a3)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  signed int v11;
  BOOL v12;
  uint64_t *v13;
  signed int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  signed int v27;
  uint64_t *v28;
  signed int v29;
  signed int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t **v42;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 1;
  v6 = (uint64_t)a1[1];
  v8 = a1 + 1;
  v9 = (uint64_t *)(a1 + 1);
  if (!v6)
    goto LABEL_8;
  v10 = a1[1];
  v9 = (uint64_t *)(a1 + 1);
  while (1)
  {
    v11 = *((_DWORD *)v10 + 8);
    v12 = v11 < a3;
    if (v11 <= a3)
      break;
    v13 = v10;
    v9 = v10;
LABEL_7:
    v10 = (uint64_t *)*v13;
    if (!*v13)
      goto LABEL_8;
  }
  v13 = v10 + 1;
  if (v12)
    goto LABEL_7;
  while (1)
  {
    v13 = (uint64_t *)*v13;
    if (!v13)
      break;
    v9 = v13;
  }
  if (v10 != v9)
    return v10 + 5;
  v9 = v10;
LABEL_8:
  if (v7 != (uint64_t **)v9)
  {
    v14 = *((_DWORD *)v9 + 8);
    if (v14 <= a3)
    {
      if (v14 >= a3)
        goto LABEL_58;
      v8 = (uint64_t **)(v9 + 1);
      v19 = (uint64_t *)v9[1];
      if (v19)
      {
        do
        {
          v8 = (uint64_t **)v19;
          v19 = (uint64_t *)*v19;
          v9 = (uint64_t *)v8;
          v20 = v8;
        }
        while (v19);
      }
      else
      {
        v20 = (uint64_t **)v9;
        do
        {
          v28 = (uint64_t *)v20;
          v20 = (uint64_t **)v20[2];
        }
        while (*v20 != v28);
      }
      if (v20 != v7)
      {
        v29 = *((_DWORD *)v20 + 8);
        if (v29 <= a3)
        {
          v8 = a1 + 1;
          v9 = (uint64_t *)(a1 + 1);
        }
        if (v6 && v29 <= a3)
        {
          while (1)
          {
            while (1)
            {
              v9 = (uint64_t *)v6;
              v30 = *(_DWORD *)(v6 + 32);
              if (v30 <= a3)
                break;
              v6 = *v9;
              v8 = (uint64_t **)v9;
              if (!*v9)
                goto LABEL_34;
            }
            if (v30 >= a3)
              goto LABEL_58;
            v6 = v9[1];
            if (!v6)
            {
LABEL_57:
              v8 = (uint64_t **)(v9 + 1);
              goto LABEL_34;
            }
          }
        }
      }
      goto LABEL_34;
    }
  }
  v15 = *v9;
  v16 = v9;
  if (*a1 != v9)
  {
    if (v15)
    {
      v17 = *v9;
      do
      {
        v16 = (uint64_t *)v17;
        v17 = *(_QWORD *)(v17 + 8);
      }
      while (v17);
    }
    else
    {
      v21 = v9;
      do
      {
        v16 = (uint64_t *)v21[2];
        v22 = *v16 == (_QWORD)v21;
        v21 = v16;
      }
      while (v22);
    }
    if (*((_DWORD *)v16 + 8) >= a3)
    {
      v9 = (uint64_t *)(a1 + 1);
      if (v6)
      {
        while (1)
        {
          while (1)
          {
            v9 = (uint64_t *)v6;
            v27 = *(_DWORD *)(v6 + 32);
            if (v27 <= a3)
              break;
            v6 = *v9;
            v8 = (uint64_t **)v9;
            if (!*v9)
              goto LABEL_34;
          }
          if (v27 >= a3)
            goto LABEL_58;
          v6 = v9[1];
          if (!v6)
            goto LABEL_57;
        }
      }
LABEL_34:
      v24 = operator new(0x88uLL);
      v24[5] = 0;
      v18 = v24 + 5;
      *((_DWORD *)v24 + 8) = a3;
      *(_QWORD *)((char *)v24 + 45) = 0;
      v24[7] = v24 + 9;
      v24[8] = 0x400000000;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v9;
      *v8 = v24;
      v25 = (uint64_t *)**a1;
      v26 = v24;
      if (v25)
      {
        *a1 = v25;
        v26 = *v8;
      }
      sub_22E49FD00(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      goto LABEL_59;
    }
  }
  if (v15)
    v23 = v16;
  else
    v23 = v9;
  if (v15)
    v8 = (uint64_t **)(v16 + 1);
  else
    v8 = (uint64_t **)v9;
  v9 = *v8;
  if (!*v8)
  {
    v9 = v23;
    goto LABEL_34;
  }
LABEL_58:
  v18 = v9 + 5;
  v24 = v9;
LABEL_59:
  if (a3)
  {
    v31 = sub_22F1E3A78(a2, a3);
    v32 = HIDWORD(v31);
    v33 = sub_22F1CC2C8(a1, a2, v31);
    *v18 = v33;
    *((_DWORD *)v24 + 12) = v32;
    v34 = *(_QWORD *)(v33 + 16);
    v35 = *(unsigned int *)(v33 + 24);
    if ((_DWORD)v35)
    {
      do
      {
        v36 = v35 >> 1;
        v37 = v34 + 16 * (v35 >> 1);
        v38 = *(_DWORD *)(v37 + 8);
        v39 = v37 + 16;
        v35 += ~(v35 >> 1);
        if (v38 <= v32)
          v34 = v39;
        else
          v35 = v36;
      }
      while (v35);
    }
    v40 = *(uint64_t **)(v34 - 16);
  }
  else
  {
    v40 = a1[3];
  }
  v41 = *((_DWORD *)v24 + 16);
  if (v41 >= *((_DWORD *)v24 + 17))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v41 = *((_DWORD *)v24 + 16);
  }
  v42 = (uint64_t **)(v24[7] + 16 * v41);
  *v42 = v40;
  v42[1] = 0;
  ++*((_DWORD *)v24 + 16);
  return v18;
}

uint64_t sub_22F1CC68C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16))
  {
    v5 = sub_22E677168(a2, a3);
    v6 = sub_22F1CC2C8((uint64_t **)a1, a2, v5);
    v7 = v6[2];
    v8 = *((unsigned int *)v6 + 6);
    if ((_DWORD)v8)
    {
      do
      {
        v9 = v8 >> 1;
        v10 = v7 + 16 * (v8 >> 1);
        v11 = *(_DWORD *)(v10 + 8);
        v12 = v10 + 16;
        v8 += ~(v8 >> 1);
        if (v11 <= HIDWORD(v5))
          v7 = v12;
        else
          v8 = v9;
      }
      while (v8);
    }
    v13 = v7 - 16;
  }
  else
  {
    v13 = a1 + 24;
  }
  return *(_QWORD *)v13;
}

llvm *sub_22F1CC728(llvm *result)
{
  llvm *v1;
  llvm::raw_ostream *v2;
  uint64_t v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  void *v11;
  _BYTE *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  _QWORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  llvm *v20;
  int v21;
  llvm::raw_ostream *v22;
  int v23[4];
  const void *v24;
  size_t v25;

  if (!**(_BYTE **)result)
  {
    v1 = result;
    **(_BYTE **)result = 1;
    v2 = (llvm::raw_ostream *)llvm::errs(result);
    v3 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 4)
    {
      *(_BYTE *)(v3 + 4) = 32;
      *(_DWORD *)v3 = 1701603654;
      *((_QWORD *)v2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v2, "File ");
    }
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 8)
    {
      *(_BYTE *)(v5 + 8) = 32;
      *(_QWORD *)v5 = *(_QWORD *)" <FileID ";
      *((_QWORD *)v4 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v4, " <FileID ");
    }
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v7 = v6;
    v8 = *((_QWORD *)v6 + 4);
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v8) > 2)
    {
      *(_BYTE *)(v8 + 2) = 32;
      *(_WORD *)v8 = 14910;
      *((_QWORD *)v6 + 4) += 3;
    }
    else
    {
      v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, ">: ");
    }
    sub_22E72C63C(*((_QWORD **)v1 + 3), **((_DWORD **)v1 + 2), 0, (llvm::MemoryBufferRef *)v23);
    v9 = v25;
    v10 = (_QWORD *)*((_QWORD *)v7 + 4);
    if (v25 <= *((_QWORD *)v7 + 3) - (_QWORD)v10)
    {
      if (v25)
      {
        v10 = memcpy(v10, v24, v25);
        *((_QWORD *)v7 + 4) += v9;
      }
    }
    else
    {
      v10 = (_QWORD *)llvm::raw_ostream::write(v7, (const char *)v24);
    }
    if (*(_QWORD *)(*((_QWORD *)v1 + 4) + 8))
    {
      v13 = (llvm *)sub_22F1E3A78(*((_QWORD *)v1 + 3), **((_DWORD **)v1 + 2));
      v14 = (llvm::raw_ostream *)llvm::errs(v13);
      v15 = (_QWORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 7uLL)
      {
        *v15 = 0x20746E6572617020;
        *((_QWORD *)v14 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v14, " parent ");
      }
      v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v17 = *((_QWORD *)v16 + 4);
      if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 8)
      {
        *(_BYTE *)(v17 + 8) = 32;
        *(_QWORD *)v17 = *(_QWORD *)" <FileID ";
        *((_QWORD *)v16 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v16, " <FileID ");
      }
      v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v19 = (_WORD *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
      {
        *v19 = 8254;
        *((_QWORD *)v18 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v18, "> ");
      }
      v20 = (llvm *)sub_22E49F3DC(*((_QWORD **)v1 + 3), v13);
      if (v20)
        v21 = *(_DWORD *)v20 & 0x7FFFFFFF;
      else
        v21 = 0;
      v23[0] = v21 + HIDWORD(v13);
      v22 = (llvm::raw_ostream *)llvm::errs(v20);
      v10 = sub_22F422CEC(v23, v22, *((_QWORD **)v1 + 3));
    }
    if (*(_BYTE *)(*((_QWORD *)v1 + 1) + 12))
    {
      v10 = (_QWORD *)llvm::errs((llvm *)v10);
      v11 = (void *)v10[4];
      if (v10[3] - (_QWORD)v11 > 0x15uLL)
      {
        qmemcpy(v11, " has_local_transitions", 22);
        v10[4] += 22;
      }
      else
      {
        v10 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v10, " has_local_transitions");
      }
    }
    result = (llvm *)llvm::errs((llvm *)v10);
    v12 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v12)
    {
      return (llvm *)llvm::raw_ostream::write(result, "\n");
    }
    else
    {
      *v12 = 10;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

uint64_t sub_22F1CCA78(uint64_t result)
{
  uint64_t v1;
  llvm *v2;
  llvm::raw_ostream *v3;
  _WORD *v4;
  llvm *v5;
  int v6;
  llvm::raw_ostream *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  _WORD *v11;
  int v12;

  if (!**(_BYTE **)result)
  {
    v1 = result;
    **(_BYTE **)result = 1;
    v2 = sub_22F1CC728(*(llvm **)(result + 8));
    v3 = (llvm::raw_ostream *)llvm::errs(v2);
    v4 = (_WORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 1uLL)
    {
      *v4 = 8224;
      *((_QWORD *)v3 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v3, "  ");
    }
    v5 = (llvm *)sub_22E49F3DC(*(_QWORD **)(v1 + 16), **(_DWORD **)(v1 + 24));
    if (v5)
      v6 = *(_DWORD *)v5 & 0x7FFFFFFF;
    else
      v6 = 0;
    v12 = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 8) + v6;
    v7 = (llvm::raw_ostream *)llvm::errs(v5);
    v8 = sub_22F422CEC(&v12, v7, *(_QWORD **)(v1 + 16));
    v9 = (llvm::raw_ostream *)llvm::errs(v8);
    v10 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0x206574617473203ALL;
      *((_QWORD *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, ": state ");
    }
    result = llvm::raw_ostream::operator<<();
    v11 = *(_WORD **)(result + 32);
    if (*(_QWORD *)(result + 24) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 2618;
      *(_QWORD *)(result + 32) += 2;
    }
    else
    {
      return llvm::raw_ostream::write((llvm::raw_ostream *)result, ":\n");
    }
  }
  return result;
}

_DWORD *sub_22F1CCBD0(uint64_t a1, unsigned int a2, int a3, int a4)
{
  _BYTE *v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  _DWORD *result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (a3 == 3)
  {
    v7 = (_BYTE *)sub_22F1CEF60(*(_QWORD *)(a1 + 128), a2);
    if ((*v7 & 6) == 4)
      v8 = 0x80;
    else
      v8 = 0;
    if ((*v7 & 6) == 4)
      LOBYTE(a3) = *v7 & 7;
    else
      LOBYTE(a3) = 3;
  }
  else
  {
    v8 = 0;
  }
  if (a4)
    v9 = 120;
  else
    v9 = 8;
  v10 = v9 & 0xD8 | a3 & 7 | v8 | (*(_BYTE *)sub_22F1CEF60(*(_QWORD *)(a1 + 128), a2) | v9) & 0x20;
  if (!a4 || *(_DWORD *)(a1 + 136) == a4)
  {
    v11 = *(_QWORD *)(a1 + 128);
    v14 = a2;
    result = sub_22F1CE918(v11, &v14);
    result[1] = v10;
  }
  else
  {
    sub_22E78DE40((uint64_t *)(a1 + 72), *(_QWORD *)(a1 + 128));
    v13 = *(_QWORD *)(a1 + 72) + 16;
    v15 = a2;
    sub_22F1CE918(v13, &v15)[1] = v10;
    return (_DWORD *)sub_22F1CC1EC(a1 + 96, *(_QWORD *)(a1 + 64), a4, *(_QWORD *)(a1 + 72) + 16);
  }
  return result;
}

uint64_t sub_22F1CCCF4(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5, int a6)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[129];

  v16[128] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x10000000000;
  v9 = sub_22F1CFA08(*(_QWORD *)(a1 + 32), a2, a3, a4, (uint64_t)&v14);
  v10 = (unsigned int *)v14;
  if ((v9 & 1) == 0 && (_DWORD)v15)
  {
    v11 = 4 * v15;
    do
    {
      v12 = *v10++;
      sub_22F1CCBD0(a1, v12, a5, a6);
      v11 -= 4;
    }
    while (v11);
    v10 = (unsigned int *)v14;
  }
  if (v10 != (unsigned int *)v16)
    free(v10);
  return v9;
}

uint64_t sub_22F1CCDDC(uint64_t a1, void *__s2, size_t a3, int a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  if (a4)
    return sub_22F1CCCF4(a1, 0, __s2, a3, 4, 0);
  v12 = v14;
  v13 = 0x800000000;
  v6 = sub_22F1CFA08(*(_QWORD *)(a1 + 32), 0, __s2, a3, (uint64_t)&v12);
  v7 = (unsigned int *)v12;
  if ((v6 & 1) == 0 && (_DWORD)v13)
  {
    v8 = 4 * v13;
    do
    {
      v9 = *v7++;
      v10 = (char *)sub_22F1CEF60(*(_QWORD *)(a1 + 128), v9);
      v11 = *v10;
      if ((*v10 & 6) == 4)
        v11 = *v10 & 0xD8 | 3;
      *v10 = v11 | 0x20;
      v8 -= 4;
    }
    while (v8);
    v7 = (unsigned int *)v12;
  }
  if (v7 != (unsigned int *)v14)
    free(v7);
  return v6;
}

uint64_t sub_22F1CCF1C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v6 = v3;
    v5 = sub_22F1CF5F4(v3, *(_DWORD *)(a1 + 316), *(_DWORD *)(a1 + 312), a1);
    v7 = v5 != 0;
    if ((_DWORD)v5)
      sub_22F1CFF48(v6, a1, v5);
    *(_DWORD *)(a1 + 316) = -1;
    return v7;
  }
  result = sub_22F1CFD24(v3, a1);
  *(_DWORD *)(a1 + 316) = -1;
  if (*(_DWORD *)(a1 + 208))
  {
    v7 = result;
    sub_22F1CC0BC(a1);
    return v7;
  }
  return result;
}

void sub_22F1CCFB4(_QWORD *a1, unsigned __int8 *a2, char *a3, _QWORD *a4)
{
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int16 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char *v60;
  unsigned __int8 *v61;
  char *v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v75;
  uint64_t v76;
  unsigned int v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  const char *v88;
  char *v89;
  llvm::raw_ostream *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  const void *v95;
  size_t v96;
  unsigned int v97;
  char *v98;
  char *v99;
  char *v100;
  size_t v101;
  const char *v102;
  size_t v103;
  void *v104;
  char *v105;
  char v106;
  llvm::raw_ostream *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  const char *v111;
  char *v112;
  llvm::raw_ostream *v113;
  size_t v114;
  void *v115;
  char *v116;
  size_t v117;
  void *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  char *v132;
  _BYTE v133[2];
  void *v134;
  __int128 v135;
  _BYTE v136[64];
  void *v137;
  uint64_t v138;
  _BYTE v139[16];
  char *v140;
  uint64_t v141;
  _QWORD v142[18];

  v6 = a2;
  v7 = a1;
  v142[16] = *MEMORY[0x24BDAC8D0];
  if (a3 - (char *)a2 != 2)
  {
    v8 = *a1;
    goto LABEL_8;
  }
  v8 = *a1;
  if (*(_WORD *)a2 != 12325 || *(_BYTE *)(v8 + 321))
  {
LABEL_8:
    v140 = (char *)v142;
    v141 = 0x800000000;
    v137 = v139;
    v138 = 0x200000000;
    v134 = v136;
    v135 = xmmword_22F44E300;
    v11 = *(unsigned __int8 *)(v8 + 320);
    if (*(_BYTE *)(v8 + 320))
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (*(_BYTE *)(*v7 + v13 + 321) == 9)
        {
          v14 = *(_QWORD *)(*v7 + 8 * v13 + 336);
          if (v12 >= HIDWORD(v138))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v12 = v138;
          }
          *((_QWORD *)v137 + v12) = v14;
          v12 = v138 + 1;
          LODWORD(v138) = v138 + 1;
        }
        ++v13;
      }
      while (v11 != v13);
    }
    if (v6 != (unsigned __int8 *)a3)
    {
      while (1)
      {
        if (*v6 != 37)
        {
          v19 = (unsigned __int8 *)memchr(v6, 37, a3 - (char *)v6);
          if (v19)
            v20 = v19;
          else
            v20 = (unsigned __int8 *)a3;
          v21 = a4[1];
          if (a4[2] < (unint64_t)(v20 - v6 + v21))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v21 = a4[1];
          }
          if (v20 != v6)
          {
            memcpy((void *)(*a4 + v21), v6, v20 - v6);
            v21 = a4[1];
          }
          a4[1] = v21 + v20 - v6;
          v6 = v20;
          goto LABEL_29;
        }
        v16 = v6 + 1;
        v15 = v6[1];
        v17 = word_22F4ADB24[v15];
        if ((v17 & 0x780) != 0)
        {
          v18 = a4[1];
          if ((unint64_t)(v18 + 1) > a4[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v18 = a4[1];
          }
          *(_BYTE *)(*a4 + v18) = v15;
          ++a4[1];
          v6 += 2;
          goto LABEL_29;
        }
        if ((v17 & 8) != 0)
        {
          v16 = 0;
          v30 = 0;
          v33 = 0;
          v31 = 0;
          v6 += 2;
          v34 = ((char)v15 - 48);
          v35 = *v7;
          v36 = *(unsigned __int8 *)(*v7 + v34 + 321);
          goto LABEL_46;
        }
        v22 = v7;
        v23 = 0;
        do
        {
          v24 = v23;
          v25 = v6[++v23];
        }
        while (v25 == 45 || (v25 - 97) < 0x1Au);
        v27 = &v6[v23];
        if (v25 == 123)
        {
          v28 = v27 + 1;
          v29 = sub_22F1CDF2C(v27 + 1, a3, 0x7Du);
          v30 = v28;
          v31 = ~(_DWORD)v6 + (_DWORD)v29 - v23;
          v32 = v29[1];
          v27 = v29 + 1;
          LOBYTE(v25) = v32;
        }
        else
        {
          v31 = 0;
          v30 = 0;
        }
        v6 = v27 + 1;
        v35 = *v22;
        v36 = *(unsigned __int8 *)(*v22 + ((char)v25 - 48) + 321);
        if ((_DWORD)v23 != 5)
          break;
        v34 = ((char)v25 - 48);
        if (*(_DWORD *)v16 != 1717987684)
        {
          v33 = 4;
          v7 = v22;
          goto LABEL_46;
        }
        v6 = v27 + 3;
        v38 = ((char)v27[2] - 48);
        if ((_DWORD)v36 == 9 && *(_BYTE *)(v35 + v38 + 321) == 9)
        {
          v124 = 4;
          v7 = v22;
LABEL_92:
          v128 = *(_QWORD *)(v35 + 336 + 8 * v34);
          v129 = *(_QWORD *)(v35 + 336 + 8 * v38);
          v130 = v130 & 0xFB | (4 * *(_BYTE *)(v35 + 7));
          v59 = v130 & 0xE7 | (8 * *(_BYTE *)(v35 + 9));
          v130 = v59;
          v123 = v31;
          v60 = (char *)&v30[v31];
          v126 = v30;
          v61 = sub_22F1CDF2C(v30, v60, 0x7Cu);
          if (*(_BYTE *)(v35 + 8)
            && !(_QWORD)v135
            && (v130 = v59 | 3,
                (*(void (**)(uint64_t, uint64_t *, unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t, char *, _QWORD, void **, _QWORD, void *, _QWORD))(v35 + 200))(14, &v128, v16, v124, v126, v123, v140, v141, &v134, *(_QWORD *)(v35 + 192), v137, v138), (_QWORD)v135))
          {
            v62 = v60;
          }
          else
          {
            v122 = v61;
            v63 = v7;
            v64 = sub_22F1CDF2C(v126, v60, 0x24u);
            v65 = v64 + 1;
            v66 = sub_22F1CDF2C(v64 + 1, v60, 0x24u);
            v67 = v64;
            v7 = v63;
            sub_22F1CCFB4(v63, v126, v67, a4);
            v130 = v130 & 0xFC | 2;
            (*(void (**)(uint64_t, uint64_t *, unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t, char *, _QWORD, _QWORD *, _QWORD, void *, _QWORD))(*v63 + 200))(14, &v128, v16, v124, v126, v123, v140, v141, a4, *(_QWORD *)(*v63 + 192), v137, v138);
            if ((v130 & 0x10) == 0)
            {
              v68 = v128;
              v69 = v141;
              if (v141 >= (unint64_t)HIDWORD(v141))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v69 = v141;
              }
              v70 = &v140[16 * v69];
              *(_QWORD *)v70 = 9;
              *((_QWORD *)v70 + 1) = v68;
              LODWORD(v141) = v141 + 1;
            }
            v61 = v66;
            sub_22F1CCFB4(v63, v65, v66, a4);
            v130 &= ~2u;
            (*(void (**)(uint64_t, uint64_t *, unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t, char *, _QWORD, _QWORD *, _QWORD, void *, _QWORD))(*v63 + 200))(14, &v128, v16, v124, v126, v123, v140, v141, a4, *(_QWORD *)(*v63 + 192), v137, v138);
            v62 = (char *)v122;
            if ((v130 & 0x10) == 0)
            {
              v71 = v129;
              v72 = v141;
              if (v141 >= (unint64_t)HIDWORD(v141))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v72 = v141;
              }
              v73 = &v140[16 * v72];
              *(_QWORD *)v73 = 9;
              *((_QWORD *)v73 + 1) = v71;
              LODWORD(v141) = v141 + 1;
            }
          }
          sub_22F1CCFB4(v7, v61 + 1, v62, a4);
        }
        else
        {
          v40 = v27[2];
          v41 = v30;
          v42 = sub_22F1CDF2C(v30, (char *)&v30[v31], 0x7Cu);
          v43 = sub_22F1CDF2C(v41, (char *)v42, 0x24u);
          v125 = sub_22F1CDF2C(v43 + 1, (char *)v42, 0x24u);
          LOBYTE(v128) = 37;
          BYTE1(v128) = v25;
          v133[0] = 37;
          v133[1] = v40;
          sub_22F1CCFB4(v22, v41, v43, a4);
          sub_22F1CCFB4(v22, &v128, (char *)&v128 + 2, a4);
          sub_22F1CCFB4(v22, v43 + 1, v125, a4);
          sub_22F1CCFB4(v22, v133, &v134, a4);
          v7 = v22;
          sub_22F1CCFB4(v22, v125 + 1, v42, a4);
        }
LABEL_29:
        if (v6 == (unsigned __int8 *)a3)
          goto LABEL_187;
      }
      v33 = v24;
      v7 = v22;
      v34 = ((char)v25 - 48);
LABEL_46:
      v37 = v36;
      switch((int)v36)
      {
        case 0:
          v84 = v35 + 24 * v34;
          v83 = (char *)(v84 + 416);
          LODWORD(v84) = *(char *)(v84 + 439);
          if ((v84 & 0x80000000) != 0)
          {
            v85 = v83;
            v83 = *(char **)v83;
            v84 = *((_QWORD *)v85 + 1);
          }
          else
          {
            v84 = v84;
          }
          sub_22F24FBF8((uint64_t)a4, v83, &v83[v84]);
          v92 = *v7 + 24 * v34;
          v80 = (_QWORD *)(v92 + 416);
          if (*(char *)(v92 + 439) < 0)
            v80 = (_QWORD *)*v80;
          v93 = v141;
          if (v141 >= (unint64_t)HIDWORD(v141))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v93 = v141;
          }
          v82 = &v140[16 * v93];
          *(_QWORD *)v82 = 1;
          goto LABEL_125;
        case 1:
          v44 = v36;
          if (*(_QWORD *)(v35 + 8 * v34 + 336))
            v45 = *(const char **)(v35 + 8 * v34 + 336);
          else
            v45 = "(null)";
          v46 = strlen(v45);
          v47 = v46;
          v48 = a4[1];
          if (a4[2] >= v48 + v46)
          {
            if (!v46)
              goto LABEL_60;
LABEL_59:
            memcpy((void *)(*a4 + v48), v45, v47);
            v48 = a4[1];
            goto LABEL_60;
          }
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v48 = a4[1];
          if (v47)
            goto LABEL_59;
LABEL_60:
          a4[1] = v48 + v47;
          v37 = v44;
          goto LABEL_122;
        case 2:
          v49 = *(_QWORD *)(v35 + 8 * v34 + 336);
          if (v33 == 1)
          {
            if (*v16 == 115)
              goto LABEL_113;
LABEL_111:
            v75 = v37;
            sub_22F242C48((uint64_t)&v128, (uint64_t)a4);
            llvm::raw_ostream::operator<<();
            goto LABEL_148;
          }
          if (v33 != 7)
          {
            if (v33 != 6)
              goto LABEL_111;
            if (*(_DWORD *)v16 != 1701602675 || *((_WORD *)v16 + 2) != 29795)
            {
              if (*(_DWORD *)v16 != 1920298096 || *((_WORD *)v16 + 2) != 27745)
                goto LABEL_111;
LABEL_85:
              v54 = v49;
              v55 = v37;
              sub_22F1CE0C0((uint64_t)v7, v54, v30, v31, (uint64_t)a4);
LABEL_121:
              v37 = v55;
              goto LABEL_122;
            }
            goto LABEL_120;
          }
          if (*(_DWORD *)v16 != 1768190575 || *(_DWORD *)(v16 + 3) != 1818324585)
            goto LABEL_111;
          goto LABEL_119;
        case 3:
          v49 = *(_QWORD *)(v35 + 8 * v34 + 336);
          if (v33 == 1)
          {
            if (*v16 == 115)
            {
LABEL_113:
              v76 = v49;
              v55 = v37;
              sub_22F1CE05C(v76, a4);
              goto LABEL_121;
            }
LABEL_126:
            v75 = v37;
            sub_22F242C48((uint64_t)&v128, (uint64_t)a4);
            llvm::raw_ostream::operator<<();
            goto LABEL_148;
          }
          if (v33 != 7)
          {
            if (v33 != 6)
              goto LABEL_126;
            if (*(_DWORD *)v16 != 1701602675 || *((_WORD *)v16 + 2) != 29795)
            {
              if (*(_DWORD *)v16 != 1920298096 || *((_WORD *)v16 + 2) != 27745)
                goto LABEL_126;
              goto LABEL_85;
            }
LABEL_120:
            v79 = v49;
            v55 = v37;
            sub_22F1CDFE0((uint64_t)v7, v79, v30, v31, (uint64_t)a4);
            goto LABEL_121;
          }
          if (*(_DWORD *)v16 != 1768190575 || *(_DWORD *)(v16 + 3) != 1818324585)
            goto LABEL_126;
LABEL_119:
          v78 = v49;
          v55 = v37;
          sub_22F1CE23C(v78, (uint64_t)a4);
          goto LABEL_121;
        case 4:
          v127 = v36;
          v86 = *(unsigned __int16 *)(v35 + 8 * v34 + 336);
          sub_22F242C48((uint64_t)&v128, (uint64_t)a4);
          v87 = sub_22F43F6D8(v86);
          if (v87)
          {
            v88 = v87;
            v89 = v132;
            if ((unint64_t)v132 >= v131)
            {
              v90 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v128);
            }
            else
            {
              ++v132;
              *v89 = 39;
              v90 = (llvm::raw_ostream *)&v128;
            }
            v103 = strlen(v88);
            v104 = (void *)*((_QWORD *)v90 + 4);
            if (v103 <= *((_QWORD *)v90 + 3) - (_QWORD)v104)
            {
              if (v103)
              {
                memcpy(v104, v88, v103);
                *((_QWORD *)v90 + 4) += v103;
              }
            }
            else
            {
              v90 = (llvm::raw_ostream *)llvm::raw_ostream::write(v90, v88);
            }
            v105 = (char *)*((_QWORD *)v90 + 4);
            if ((unint64_t)v105 < *((_QWORD *)v90 + 3))
            {
              *((_QWORD *)v90 + 4) = v105 + 1;
              v106 = 39;
LABEL_157:
              *v105 = v106;
              goto LABEL_167;
            }
            v107 = v90;
LABEL_159:
            llvm::raw_ostream::write(v107);
LABEL_167:
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v128);
            v37 = v127;
LABEL_122:
            v80 = *(_QWORD **)(*v7 + 8 * v34 + 336);
            v81 = v141;
            if (v141 >= (unint64_t)HIDWORD(v141))
            {
              v110 = v37;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v37 = v110;
              v81 = v141;
            }
            v82 = &v140[16 * v81];
            *(_QWORD *)v82 = v37;
LABEL_125:
            *((_QWORD *)v82 + 1) = v80;
            LODWORD(v141) = v141 + 1;
            goto LABEL_29;
          }
          v99 = sub_22F20D598(v86);
          if (v99)
          {
            v100 = v99;
            v101 = strlen(v99);
            if (v101 > v131 - (unint64_t)v132)
            {
              v102 = v100;
LABEL_166:
              llvm::raw_ostream::write((llvm::raw_ostream *)&v128, v102);
              goto LABEL_167;
            }
            if (!v101)
              goto LABEL_167;
            memcpy(v132, v100, v101);
            v116 = &v132[v101];
          }
          else if ((_DWORD)v86 == 5)
          {
            v108 = v132;
            if (v131 - (unint64_t)v132 <= 9)
            {
              v102 = "identifier";
              goto LABEL_166;
            }
            *((_WORD *)v132 + 4) = 29285;
            *(_QWORD *)v108 = *(_QWORD *)"identifier";
            v116 = v132 + 10;
          }
          else
          {
            if (v86 != 440)
            {
              v111 = off_24FCAD0E8[v86];
              v112 = v132;
              if ((unint64_t)v132 >= v131)
              {
                v113 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v128);
              }
              else
              {
                ++v132;
                *v112 = 60;
                v113 = (llvm::raw_ostream *)&v128;
              }
              v114 = strlen(v111);
              v115 = (void *)*((_QWORD *)v113 + 4);
              if (v114 <= *((_QWORD *)v113 + 3) - (_QWORD)v115)
              {
                if (v114)
                {
                  memcpy(v115, v111, v114);
                  *((_QWORD *)v113 + 4) += v114;
                }
              }
              else
              {
                v113 = (llvm::raw_ostream *)llvm::raw_ostream::write(v113, v111);
              }
              v105 = (char *)*((_QWORD *)v113 + 4);
              if ((unint64_t)v105 < *((_QWORD *)v113 + 3))
              {
                *((_QWORD *)v113 + 4) = v105 + 1;
                v106 = 62;
                goto LABEL_157;
              }
              v107 = v113;
              goto LABEL_159;
            }
            v109 = v132;
            if (v131 - (unint64_t)v132 <= 5)
            {
              v102 = "(null)";
              goto LABEL_166;
            }
            *((_WORD *)v132 + 2) = 10604;
            *(_DWORD *)v109 = 1819635240;
            v116 = v132 + 6;
          }
          v132 = v116;
          goto LABEL_167;
        case 5:
          v56 = *(_QWORD *)(v35 + 8 * v34 + 336);
          if (!v56)
          {
            v57 = a4[1];
            if (a4[2] < (unint64_t)(v57 + 6))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v57 = a4[1];
            }
            v58 = *a4 + v57;
            *(_WORD *)(v58 + 4) = 10604;
            *(_DWORD *)v58 = 1819635240;
            a4[1] += 6;
            goto LABEL_29;
          }
          v75 = v37;
          sub_22F242C48((uint64_t)&v128, (uint64_t)a4);
          v91 = v132;
          if ((unint64_t)v132 >= v131)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v128);
          }
          else
          {
            ++v132;
            *v91 = 39;
          }
          v94 = *(unsigned int **)(v56 + 16);
          v97 = *v94;
          v95 = v94 + 4;
          v96 = v97;
          v98 = v132;
          if (v97 <= v131 - (unint64_t)v132)
          {
            if (v96)
            {
              memcpy(v132, v95, v96);
              v98 = &v132[v96];
              v132 += v96;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v128, (const char *)v95);
            v98 = v132;
          }
          if ((unint64_t)v98 >= v131)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v128);
          }
          else
          {
            v132 = v98 + 1;
            *v98 = 39;
          }
LABEL_148:
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v128);
          v37 = v75;
          goto LABEL_122;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 15:
          (*(void (**)(uint64_t, _QWORD, unsigned __int8 *, uint64_t, unsigned __int8 *, _QWORD, char *, _QWORD, _QWORD *, _QWORD, void *, _QWORD))(v35 + 200))(v36, *(_QWORD *)(v35 + 8 * v34 + 336), v16, v33, v30, v31, v140, v141, a4, *(_QWORD *)(v35 + 192), v137, v138);
          v37 = v36;
          if ((_DWORD)v36 != 14)
            goto LABEL_122;
          goto LABEL_29;
        case 14:
          v124 = v33;
          v38 = v34;
          goto LABEL_92;
        default:
          goto LABEL_122;
      }
    }
LABEL_187:
    v118 = v134;
    v117 = v135;
    v119 = a4[1];
    if (a4[2] < (unint64_t)(v119 + v135))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v119 = a4[1];
      if (!v117)
        goto LABEL_190;
    }
    else if (!(_QWORD)v135)
    {
LABEL_190:
      a4[1] = v119 + v117;
      if (v134 != v136)
        free(v134);
      if (v137 != v139)
        free(v137);
      if (v140 != (char *)v142)
        free(v140);
      return;
    }
    memcpy((void *)(*a4 + v119), v118, v117);
    v119 = a4[1];
    goto LABEL_190;
  }
  if (*(char *)(v8 + 439) < 0)
  {
    v9 = *(char **)(v8 + 416);
    v10 = *(_QWORD *)(v8 + 424);
    if (!v10)
      return;
  }
  else
  {
    v9 = (char *)(v8 + 416);
    v10 = *(unsigned __int8 *)(v8 + 439);
    if (!*(_BYTE *)(v8 + 439))
      return;
  }
  do
  {
    v120 = *v9;
    if ((llvm::sys::locale::isPrint((llvm::sys::locale *)*v9) & 1) != 0 || v120 == 9)
    {
      v121 = a4[1];
      if ((unint64_t)(v121 + 1) > a4[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v121 = a4[1];
      }
      *(_BYTE *)(*a4 + v121) = v120;
      ++a4[1];
    }
    ++v9;
    --v10;
  }
  while (v10);
}

unsigned __int8 *sub_22F1CDF2C(unsigned __int8 *result, char *a2, unsigned __int8 a3)
{
  int v3;
  int v4;
  uint64_t v5;

  if (result == (unsigned __int8 *)a2)
    return result;
  v3 = 0;
  while (1)
  {
    v4 = (char)*result;
    if (v3)
    {
      v3 -= v4 == 125;
    }
    else
    {
      if (v4 == a3)
        return result;
      v3 = 0;
    }
    if (v4 != 37)
      goto LABEL_21;
    if (result + 1 == (unsigned __int8 *)a2)
      return (unsigned __int8 *)a2;
    if ((word_22F4ADB24[result[1]] & 0x788) == 0)
      break;
    ++result;
LABEL_21:
    if (++result == (unsigned __int8 *)a2)
      return (unsigned __int8 *)a2;
  }
  for (result += 2; result != (unsigned __int8 *)a2; ++result)
  {
    v5 = *result;
    if (v5 == 123 || (word_22F4ADB24[v5] & 8) != 0)
    {
      if ((_DWORD)v5 == 123)
        ++v3;
      goto LABEL_21;
    }
  }
  return (unsigned __int8 *)a2;
}

uint64_t sub_22F1CDFE0(uint64_t a1, int a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v6;
  char *v8;
  int v9;
  unsigned __int8 *v10;

  v6 = a3;
  v8 = (char *)&a3[a4];
  if (a2)
  {
    v9 = a2;
    do
    {
      v6 = sub_22F1CDF2C(v6, v8, 0x7Cu) + 1;
      --v9;
    }
    while (v9);
  }
  v10 = sub_22F1CDF2C(v6, v8, 0x7Cu);
  return sub_22F1CCFB4(a1, v6, v10, a5);
}

uint64_t sub_22F1CE05C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if ((_DWORD)result != 1)
  {
    v3 = a2[1];
    if ((unint64_t)(v3 + 1) > a2[2])
    {
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v3 = a2[1];
    }
    *(_BYTE *)(*a2 + v3) = 115;
    ++a2[1];
  }
  return result;
}

uint64_t sub_22F1CE0C0(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v6;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *i;
  int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  void *__s;

  v6 = a3;
  v9 = (char *)&a3[a4];
LABEL_2:
  v10 = 0;
  do
    v11 = v6[v10++];
  while (v11 != 58);
  __s = v6;
  v12 = *v6;
  v13 = &v6[v10];
  if (v12 != 58)
  {
    v14 = v13 - 1;
    for (i = v6; ; __s = i)
    {
      if (v12 == 37)
      {
        if (v14 == i + 1 || (v16 = i[1], (v16 - 48) > 9))
        {
          v17 = 0;
        }
        else
        {
          v17 = 0;
          v18 = i + 2;
          do
          {
            v19 = v18;
            v17 = v16 + 10 * v17 - 48;
            if (v18 == v14)
              break;
            ++v18;
            v16 = *v19;
          }
          while ((v16 - 48) <= 9);
          i = v19 - 1;
        }
        __s = i + 2;
        v20 = a2 % v17;
      }
      else
      {
        v20 = a2;
      }
      if (sub_22F1CECF4(v20, (unsigned __int8 **)&__s, v13 - 1))
        break;
      v21 = (unsigned __int8 *)memchr(__s, 44, v14 - (_BYTE *)__s);
      if (v21)
        v22 = v21;
      else
        v22 = v13 - 1;
      if (v14 == v22)
      {
        v6 = sub_22F1CDF2C(v6, v9 - 1, 0x7Cu) + 1;
        goto LABEL_2;
      }
      v23 = v22[1];
      i = v22 + 1;
      v12 = v23;
    }
  }
  v24 = sub_22F1CDF2C(v13, v9, 0x7Cu);
  return sub_22F1CCFB4(a1, v13, v24, a5);
}

void sub_22F1CE23C(unsigned int a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  const char *v5;
  _WORD *v6;
  _BYTE v7[72];

  sub_22F242C48((uint64_t)v7, a2);
  v3 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  if (a1 % 0x64 - 11 < 3 || (v4 = a1 % 0xA - 1, v4 > 2))
    v5 = "th";
  else
    v5 = off_24FAE0D08[v4];
  v6 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = *(_WORD *)v5;
    *((_QWORD *)v3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v3, v5);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v7);
}

uint64_t sub_22F1CE30C(uint64_t a1, int a2, _QWORD *a3)
{
  std::string *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  void *v40;
  __int128 v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = *(_DWORD *)(*a3 + 316);
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = 0;
  v5 = (std::string *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v7 = *(_DWORD *)(*a3 + 312);
  if (v7)
  {
    v8 = *(_QWORD *)(*a3 + 64);
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
  }
  v40 = v42;
  v41 = xmmword_22F44E300;
  sub_22F41A758(a3, &v40);
  sub_22E78FE00(v5, (std::string::value_type *)v40, (std::string::value_type *)v40 + v41, v41);
  v9 = *(char **)(*a3 + 656);
  v10 = *(unsigned int *)(*a3 + 664);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(char **)(a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 2) >= v10)
  {
    v18 = *(_BYTE **)(a1 + 56);
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v12) >> 2);
    if (v19 >= v10)
    {
      v17 = 12 * v10;
      if (!(_DWORD)v10)
        goto LABEL_21;
      v20 = v17 - 3;
      v21 = *(void **)(a1 + 48);
      v22 = *(char **)(*a3 + 656);
    }
    else
    {
      if (v18 != v12)
      {
        memmove(*(void **)(a1 + 48), *(const void **)(*a3 + 656), v18 - v12 - 3);
        v12 = *(char **)(a1 + 56);
      }
      v17 = 12 * v10 - 12 * v19;
      if (v19 == v10)
        goto LABEL_21;
      v20 = v17 - 3;
      v21 = v12;
      v22 = &v9[12 * v19];
    }
    memmove(v21, v22, v20);
    goto LABEL_21;
  }
  if (v12)
  {
    *(_QWORD *)(a1 + 56) = v12;
    operator delete(v12);
    v11 = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
  v14 = 2 * v13;
  if (2 * v13 <= v10)
    v14 = v10;
  if (v13 >= 0xAAAAAAAAAAAAAAALL)
    v15 = 0x1555555555555555;
  else
    v15 = v14;
  if (v15 > 0x1555555555555555)
    goto LABEL_47;
  v16 = 3 * v15;
  v12 = (char *)operator new(12 * v15);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = &v12[4 * v16];
  v17 = 12 * v10;
  memcpy(v12, v9, 12 * v10 - 3);
LABEL_21:
  *(_QWORD *)(a1 + 56) = &v12[v17];
  v23 = *a3;
  v24 = *(_QWORD *)(*a3 + 768);
  v25 = *(unsigned int *)(v23 + 776);
  v26 = v24 + 56 * v25;
  v27 = *(_QWORD *)(a1 + 72);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 88) - v27) >> 3) < v25)
  {
    sub_22E6C58D4((void **)(a1 + 72));
    v28 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72)) >> 3);
    if (v28 <= v25)
      v28 = v25;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72)) >> 3)) >= 0x249249249249249)
      v29 = 0x492492492492492;
    else
      v29 = v28;
    if (v29 <= 0x492492492492492)
    {
      v30 = 56 * v29;
      v31 = (char *)operator new(56 * v29);
      *(_QWORD *)(a1 + 72) = v31;
      *(_QWORD *)(a1 + 80) = v31;
      *(_QWORD *)(a1 + 88) = &v31[v30];
      v32 = (_QWORD *)(a1 + 72);
      v33 = v24;
LABEL_33:
      sub_22E6C5F8C(v32, v33, v26);
      goto LABEL_44;
    }
LABEL_47:
    abort();
  }
  v34 = *(_QWORD *)(a1 + 80);
  if (0x6DB6DB6DB6DB6DB7 * ((v34 - v27) >> 3) < v25)
  {
    v35 = v24 + 8 * ((v34 - v27) >> 3);
    if (v34 != v27)
    {
      do
      {
        v36 = *(_OWORD *)v24;
        *(_QWORD *)(v27 + 13) = *(_QWORD *)(v24 + 13);
        *(_OWORD *)v27 = v36;
        std::string::operator=((std::string *)(v27 + 24), (const std::string *)(v24 + 24));
        *(_BYTE *)(v27 + 48) = *(_BYTE *)(v24 + 48);
        v24 += 56;
        v27 += 56;
      }
      while (v24 != v35);
    }
    v32 = (_QWORD *)(a1 + 72);
    v33 = v35;
    goto LABEL_33;
  }
  if ((_DWORD)v25)
  {
    v37 = *(_QWORD *)(a1 + 72);
    do
    {
      v38 = *(_OWORD *)v24;
      *(_QWORD *)(v27 + 13) = *(_QWORD *)(v24 + 13);
      *(_OWORD *)v27 = v38;
      std::string::operator=((std::string *)(v27 + 24), (const std::string *)(v24 + 24));
      *(_BYTE *)(v27 + 48) = *(_BYTE *)(v24 + 48);
      v37 += 56;
      v24 += 56;
      v27 += 56;
    }
    while (v24 != v26);
    v34 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v37 = *(_QWORD *)(a1 + 72);
  }
  while (v34 != v37)
  {
    if (*(char *)(v34 - 9) < 0)
      operator delete(*(void **)(v34 - 32));
    v34 -= 56;
  }
  *(_QWORD *)(a1 + 80) = v37;
LABEL_44:
  if (v40 != v42)
    free(v40);
  return a1;
}

unint64_t sub_22F1CE6F0(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64x2_t v4;
  uint64_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  v1 = 0;
  v2 = 16;
  do
  {
    v3 = result + v1;
    *(_BYTE *)v3 = 0;
    *(_OWORD *)(v3 + 96) = 0uLL;
    *(_OWORD *)(v3 + 112) = 0uLL;
    *(_OWORD *)(v3 + 128) = 0uLL;
    *(_OWORD *)(v3 + 144) = 0uLL;
    *(_OWORD *)(v3 + 160) = 0uLL;
    *(_OWORD *)(v3 + 176) = 0uLL;
    *(_OWORD *)(v3 + 192) = 0uLL;
    *(_OWORD *)(v3 + 208) = 0uLL;
    *(_OWORD *)(v3 + 224) = 0uLL;
    *(_OWORD *)(v3 + 240) = 0uLL;
    *(_OWORD *)(v3 + 256) = 0uLL;
    *(_OWORD *)(v3 + 272) = 0uLL;
    *(_OWORD *)(v3 + 288) = 0uLL;
    *(_OWORD *)(v3 + 304) = 0uLL;
    *(_OWORD *)(v3 + 320) = 0uLL;
    *(_QWORD *)(v3 + 336) = result + v1 + 352;
    *(_QWORD *)(v3 + 344) = 0x800000000;
    *(_QWORD *)(v3 + 448) = result + v1 + 464;
    v1 += 800;
    *(_QWORD *)(v3 + 456) = 0x600000000;
    --v2;
  }
  while (v2);
  v4 = (int64x2_t)xmmword_22F4555C0;
  v5 = -128;
  v6 = vdupq_n_s64(result);
  v7 = vdupq_n_s64(2uLL);
  do
  {
    v8.i64[0] = 800 * v4.i64[0];
    v8.i64[1] = 800 * v4.i64[1];
    *(int64x2_t *)(result + v5 + 12928) = vaddq_s64(v6, v8);
    v4 = vaddq_s64(v4, v7);
    v5 += 16;
  }
  while (v5);
  *(_DWORD *)(result + 12928) = 16;
  return result;
}

uint64_t sub_22F1CE7B0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;

  v2 = a1 + 12800;
  v3 = (char *)(a1 + 12335);
  do
  {
    v4 = v2;
    v2 -= 800;
    sub_22E3BB1BC((char **)(v4 - 352));
    v5 = *(void **)(v2 + 336);
    if (v5 != (void *)(v4 - 448))
      free(v5);
    v6 = -240;
    v7 = v3;
    v8 = v3;
    do
    {
      v9 = *v8;
      v8 -= 24;
      if (v9 < 0)
        operator delete(*(void **)(v7 - 23));
      v7 = v8;
      v6 += 24;
    }
    while (v6);
    v3 -= 800;
  }
  while (v2 != a1);
  return a1;
}

void sub_22F1CE848(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2)
  {
    sub_22F1CE848(a1, *a2);
    sub_22F1CE848(a1, a2[1]);
    v4 = (_QWORD *)a2[7];
    if (v4 != a2 + 9)
      free(v4);
    operator delete(a2);
  }
}

void sub_22F1CE8A0(unsigned int *a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (unsigned int *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v3 + 1);
        llvm::deallocate_buffer(*((llvm **)v3 + 2), (void *)(8 * v3[8]));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

_DWORD *sub_22F1CE918(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;

  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    v12 = a2;
    v13 = 0;
LABEL_17:
    v5 = sub_22F1CE9D8(a1, (uint64_t)v12, v12, v13);
    *(_QWORD *)v5 = *v12;
    return v5;
  }
  v3 = v2 - 1;
  v4 = (37 * *a2) & (v2 - 1);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v4);
  v6 = *v5;
  if (*a2 != *v5)
  {
    v8 = 0;
    v9 = 1;
    while (v6 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v6 == -2;
      if (v10)
        v8 = v5;
      v11 = v4 + v9++;
      v4 = v11 & v3;
      v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v11 & v3));
      v6 = *v5;
      if (*a2 == *v5)
        return v5;
    }
    v12 = a2;
    if (v8)
      v13 = v8;
    else
      v13 = v5;
    goto LABEL_17;
  }
  return v5;
}

_DWORD *sub_22F1CE9D8(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_22F1CEB60(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_21;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_22F1CEB60(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_24;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_21:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_22F1CEB60(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](8 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F1CEC20(a1, v4, &v4[2 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F1CEC20(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD **)result;
    v5 = 8 * v3;
    do
    {
      *v4 = -1;
      v4 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & (37 * v6);
      v9 = (_DWORD *)(*(_QWORD *)result + 8 * v8);
      v10 = *v9;
      if (v6 != *v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -1)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -2;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = (_DWORD *)(*(_QWORD *)result + 8 * (v14 & v7));
          v10 = *v9;
          if (v6 == *v9)
            goto LABEL_11;
        }
        if (v11)
          v9 = v11;
      }
LABEL_11:
      *v9 = v6;
      v9[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

BOOL sub_22F1CECF4(unsigned int a1, unsigned __int8 **a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v3 = *a2;
  if (**a2 == 91)
  {
    v4 = v3 + 1;
    *a2 = v3 + 1;
    if (v3 + 1 == a3)
    {
      v5 = 0;
LABEL_13:
      v4 = a3;
    }
    else
    {
      v5 = 0;
      while (1)
      {
        v6 = *v4;
        if ((v6 - 48) > 9)
          break;
        v5 = v6 + 10 * v5 - 48;
        *a2 = ++v4;
        if (v4 == a3)
          goto LABEL_13;
      }
    }
    *a2 = v4 + 1;
    if (v4 + 1 == a3 || (v9 = v4[1], (v9 - 48) > 9))
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = v4 + 2;
      do
      {
        v12 = v11;
        v10 = v9 + 10 * v10 - 48;
        *a2 = v11;
        if (v11 == a3)
          break;
        ++v11;
        v9 = *v12;
      }
      while ((v9 - 48) <= 9);
      v4 = v12 - 1;
    }
    *a2 = v4 + 2;
    return v5 <= a1 && v10 >= a1;
  }
  else
  {
    if (v3 == a3)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = *v3;
        if ((v8 - 48) > 9)
          break;
        v7 = v8 + 10 * v7 - 48;
        *a2 = ++v3;
      }
      while (v3 != a3);
    }
    return v7 == a1;
  }
}

unsigned __int16 *sub_22F1CEE18(unsigned int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 *v7;

  if (a1 - 8473 < 0xFFFFDEE8)
    return 0;
  if (a1 <= 0x12C)
    v1 = 0;
  else
    v1 = 146;
  if (a1 <= 0x12C)
    v2 = -1;
  else
    v2 = -301;
  v3 = v2 + a1;
  if (a1 > 0x2EE)
  {
    v1 += 271;
    v3 -= 450;
  }
  if (a1 > 0x387)
  {
    v1 += 151;
    v3 -= 153;
  }
  if (a1 > 0x3FF)
  {
    v1 += 46;
    v3 -= 120;
  }
  if (a1 > 0x58F)
  {
    v1 += 357;
    v3 -= 400;
  }
  if (a1 > 0x84B)
  {
    v1 += 607;
    v3 -= 700;
  }
  if (a1 > 0x945)
  {
    v1 += 239;
    v3 -= 250;
  }
  if (a1 > 0x9A9)
  {
    v1 += 35;
    v3 -= 100;
  }
  if (a1 > 0xA0D)
  {
    v1 += 4;
    v3 -= 100;
  }
  v4 = a1 >> 1;
  if (a1 >> 1 > 0xE34)
    v1 += 4606;
  if (v4 > 0xE34)
    v3 -= 4700;
  if (v4 > 0xE66)
    v3 -= 100;
  if (a1 > 0x20B5)
  {
    v1 += 12;
    v3 -= 1000;
  }
  v5 = v3 + v1;
  if (v5 >> 1 > 0xCB2)
    return 0;
  v7 = (unsigned __int16 *)((char *)&unk_22F5396DE + 10 * v5);
  if (*v7 == a1)
    return v7;
  else
    return 0;
}

uint64_t sub_22F1CEF60(uint64_t a1, unsigned int a2)
{
  unsigned __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v6 = a2;
  sub_22F1CFFC0(a1, &v6, (_DWORD *)&v6 + 1, (uint64_t)&v7);
  if (v8)
  {
    v4 = sub_22F1CEE18(a2);
    if (v4)
      v5 = *(_DWORD *)(v4 + 1) & 7 | (32 * ((*(_DWORD *)(v4 + 1) >> 14) & 1));
    else
      v5 = 5;
    *(_DWORD *)(v7 + 4) = v5;
  }
  return v7 + 4;
}

uint64_t *sub_22F1CEFE0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_22E7223A4(*(char **)(v2 + 32));
    v3 = *(void ***)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(void ***)(v2 + 8);
      v5 = *(void ***)v2;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = *(void ***)v2;
      }
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v5);
    }
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F1CF078(_QWORD *a1, int a2, void *__src, size_t __len)
{
  _BYTE *v8;
  size_t v9;
  size_t v10;
  uint64_t **v11;
  uint64_t *v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  int v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  const void **v27;
  unsigned int v28;
  int v29;
  uint64_t **v30;
  size_t v31;
  _BYTE *v32;
  size_t v33;
  int v34;
  size_t v35;
  uint64_t *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  char *v45;
  uint64_t v46;
  char **v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  void **v51;
  _BYTE *v52;
  void **v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  _BYTE *v61;
  char *v62;
  int v63;
  __int128 v64;
  void **v65;
  char v67;
  char **v68;
  unsigned int v69;
  int v70;
  _BYTE __dst[24];
  void *v72;
  unsigned int v73;
  int v74;
  void *__p[2];
  void *v76;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_131;
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)&__dst[8] = __len;
    *(_QWORD *)&__dst[16] = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
  }
  else
  {
    __dst[23] = __len;
    v8 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v8, __src, __len);
LABEL_9:
  v8[__len] = 0;
  v74 = a2;
  v76 = *(void **)&__dst[16];
  *(_OWORD *)__p = *(_OWORD *)__dst;
  v11 = (uint64_t **)(a1 + 4);
  v12 = (uint64_t *)a1[4];
  v70 = __dst[23];
  if (!v12)
    goto LABEL_48;
  v13 = __dst[23] >= 0 ? __p : (void **)__p[0];
  v14 = __dst[23] >= 0 ? (uint64_t *)(HIBYTE(*(_QWORD *)&__dst[16]) & 0x7FLL) : (uint64_t *)__p[1];
  v15 = (uint64_t *)a1[4];
  v16 = (uint64_t **)(a1 + 4);
  do
  {
    v17 = *((_DWORD *)v15 + 8);
    if (v17 >= a2)
    {
      if (v17 <= a2)
      {
        v18 = *((char *)v15 + 63);
        if (v18 >= 0)
          v19 = *((unsigned __int8 *)v15 + 63);
        else
          v19 = v15[6];
        if (v18 >= 0)
          v20 = v15 + 5;
        else
          v20 = (const void *)v15[5];
        if ((unint64_t)v14 >= v19)
          v21 = v19;
        else
          v21 = (size_t)v14;
        v22 = memcmp(v20, v13, v21);
        v23 = v19 < (unint64_t)v14;
        if (v22)
          v23 = v22 < 0;
        if (v23)
          ++v15;
        else
          v16 = (uint64_t **)v15;
      }
      else
      {
        v16 = (uint64_t **)v15;
      }
    }
    else
    {
      ++v15;
    }
    v15 = (uint64_t *)*v15;
  }
  while (v15);
  if (v16 == v11 || *((_DWORD *)v16 + 8) != a2)
    goto LABEL_48;
  v24 = *((_BYTE *)v16 + 63);
  v25 = v24 & 0x7F;
  v26 = v24 >= 0 ? (uint64_t *)(v24 & 0x7F) : v16[6];
  if (v26 != v14)
    goto LABEL_48;
  v27 = (const void **)(v16 + 5);
  if ((*((_BYTE *)v16 + 63) & 0x80) != 0)
  {
    if (memcmp(*v27, v13, (size_t)v16[6]))
      goto LABEL_48;
  }
  else if ((v24 & 0x7F) != 0)
  {
    while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v13)
    {
      v27 = (const void **)((char *)v27 + 1);
      v13 = (void **)((char *)v13 + 1);
      if (!--v25)
        goto LABEL_130;
    }
LABEL_48:
    v28 = ((a1[1] - *a1) >> 5) + 8473;
    *(_DWORD *)__dst = a2;
    v68 = (char **)a1;
    if (v70 < 0)
    {
      sub_22E3BB2B4(&__dst[8], __p[0], (unint64_t)__p[1]);
      v12 = *v11;
      v29 = *(_DWORD *)__dst;
    }
    else
    {
      *(_OWORD *)&__dst[8] = *(_OWORD *)__p;
      v72 = v76;
      v29 = a2;
    }
    v69 = v28;
    v73 = v28;
    v30 = (uint64_t **)(a1 + 4);
    if (v12)
    {
      v67 = HIBYTE(v72);
      if (SHIBYTE(v72) >= 0)
        v31 = HIBYTE(v72);
      else
        v31 = *(_QWORD *)&__dst[16];
      if (SHIBYTE(v72) >= 0)
        v32 = &__dst[8];
      else
        v32 = *(_BYTE **)&__dst[8];
      if (SHIBYTE(v72) >= 0)
        v33 = HIBYTE(v72) & 0x7F;
      else
        v33 = *(_QWORD *)&__dst[16];
      while (1)
      {
        while (1)
        {
          v30 = (uint64_t **)v12;
          v34 = *((_DWORD *)v12 + 8);
          if (v29 >= v34)
            break;
LABEL_75:
          v12 = *v30;
          v11 = v30;
          if (!*v30)
            goto LABEL_87;
        }
        if (v34 >= v29)
        {
          v35 = *((unsigned __int8 *)v12 + 63);
          if ((v35 & 0x80u) == 0)
            v36 = (uint64_t *)(v30 + 5);
          else
            v36 = v30[5];
          v37 = (size_t)v30[6];
          if ((v35 & 0x80u) == 0)
            v38 = v35 & 0x7F;
          else
            v38 = (size_t)v30[6];
          if (v38 >= v31)
            v39 = v31;
          else
            v39 = v38;
          v40 = memcmp(v32, v36, v39);
          v41 = v31 < v38;
          if (v40)
            v41 = v40 < 0;
          if (v41)
            goto LABEL_75;
          if ((v35 & 0x80u) == 0)
            v37 = v35;
          if (v33 >= v37)
            v42 = v37;
          else
            v42 = v33;
          v43 = memcmp(v36, v32, v42);
          v44 = v37 < v33;
          if (v43)
            v44 = v43 < 0;
          if (!v44)
          {
            v47 = v68;
            v46 = v69;
            if (v67 < 0)
              goto LABEL_91;
            goto LABEL_92;
          }
        }
        v12 = v30[1];
        if (!v12)
        {
          v11 = v30 + 1;
          break;
        }
      }
    }
LABEL_87:
    v45 = (char *)operator new(0x48uLL);
    *((_DWORD *)v45 + 8) = v29;
    *(_OWORD *)(v45 + 40) = *(_OWORD *)&__dst[8];
    *((_QWORD *)v45 + 7) = v72;
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = 0;
    v72 = 0;
    v46 = v69;
    *((_DWORD *)v45 + 16) = v69;
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    *((_QWORD *)v45 + 2) = v30;
    *v11 = (uint64_t *)v45;
    v47 = v68;
    v48 = *(char **)v68[3];
    if (v48)
    {
      v68[3] = v48;
      v49 = *v11;
    }
    else
    {
      v49 = (uint64_t *)v45;
    }
    sub_22E49FD00((uint64_t *)v68[4], v49);
    ++v68[5];
    if ((HIBYTE(v72) & 0x80) != 0)
LABEL_91:
      operator delete(*(void **)&__dst[8]);
LABEL_92:
    v51 = (void **)v47[1];
    v50 = (unint64_t)v47[2];
    if ((unint64_t)v51 < v50)
    {
      *(_DWORD *)v51 = a2;
      v52 = v51 + 1;
      if (v70 < 0)
      {
        sub_22E3BB2B4(v52, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v52 = *(_OWORD *)__p;
        v51[3] = v76;
      }
      v59 = (char *)(v51 + 4);
      goto LABEL_121;
    }
    v53 = (void **)*v47;
    v54 = ((char *)v51 - *v47) >> 5;
    v55 = v54 + 1;
    if (!((unint64_t)(v54 + 1) >> 59))
    {
      v56 = v50 - (_QWORD)v53;
      if (v56 >> 4 > v55)
        v55 = v56 >> 4;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0)
        v57 = 0x7FFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        if (v57 >> 59)
          sub_22E3B3F8C();
        v58 = (char *)operator new(32 * v57);
      }
      else
      {
        v58 = 0;
      }
      v60 = &v58[32 * v54];
      *(_DWORD *)v60 = a2;
      v61 = v60 + 8;
      if (SHIBYTE(v76) < 0)
      {
        sub_22E3BB2B4(v61, __p[0], (unint64_t)__p[1]);
        v53 = (void **)*v47;
        v51 = (void **)v47[1];
      }
      else
      {
        *(_OWORD *)v61 = *(_OWORD *)__p;
        *((_QWORD *)v60 + 3) = v76;
      }
      if (v51 == v53)
      {
        v59 = v60 + 32;
        *v47 = v60;
        v47[1] = v60 + 32;
        v47[2] = &v58[32 * v57];
      }
      else
      {
        v62 = v60;
        do
        {
          v63 = *((_DWORD *)v51 - 8);
          v51 -= 4;
          *((_DWORD *)v62 - 8) = v63;
          v62 -= 32;
          v64 = *(_OWORD *)(v51 + 1);
          *((_QWORD *)v62 + 3) = v51[3];
          *(_OWORD *)(v62 + 8) = v64;
          v51[2] = 0;
          v51[3] = 0;
          v51[1] = 0;
        }
        while (v51 != v53);
        v53 = (void **)*v47;
        v65 = (void **)v47[1];
        v59 = v60 + 32;
        *v47 = v62;
        v47[1] = v60 + 32;
        v47[2] = &v58[32 * v57];
        if (v65 != v53)
        {
          v46 = v69;
          do
          {
            if (*((char *)v65 - 1) < 0)
              operator delete(*(v65 - 3));
            v65 -= 4;
          }
          while (v65 != v53);
          if (!v53)
            goto LABEL_120;
LABEL_119:
          operator delete(v53);
LABEL_120:
          LOBYTE(v70) = HIBYTE(v76);
LABEL_121:
          v47[1] = v59;
          goto LABEL_122;
        }
      }
      v46 = v69;
      if (!v53)
        goto LABEL_120;
      goto LABEL_119;
    }
LABEL_131:
    abort();
  }
LABEL_130:
  v46 = *((unsigned int *)v16 + 16);
LABEL_122:
  if ((v70 & 0x80) != 0)
    operator delete(__p[0]);
  return v46;
}

uint64_t sub_22F1CF5F4(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *v7;

  if (a2 >= 0x2119)
    return *(unsigned int *)(**(_QWORD **)(a1 + 8) + 32 * (a2 - 8473));
  v7 = sub_22F1CEE18(a2);
  if (v7 && (*(_DWORD *)(v7 + 1) & 0x38) == 8)
    return 1;
  else
    return dword_22F5494DC[(int)sub_22F1CF68C((uint64_t)v7, a2, a3, a4) - 1];
}

uint64_t sub_22F1CF68C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned __int16 *v12;
  _BOOL4 v13;
  unsigned __int16 *v14;
  int v15;
  unsigned __int16 *v16;
  int v17;
  BOOL v18;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  int v27;

  v7 = *(_QWORD *)(a4 + 64);
  if (v7)
    v8 = sub_22F1CC68C(a4 + 96, v7, a3);
  else
    v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_BYTE *)sub_22F1CEF60(v8, a2);
  if ((v9 & 7) != 0)
    v10 = v9 & 7;
  else
    v10 = 5;
  v11 = *(_BYTE *)(v8 + 24);
  if ((v11 & 2) != 0 && (_DWORD)v10 == 1)
  {
    if ((v9 & 8) != 0)
    {
      v10 = 1;
    }
    else
    {
      v12 = sub_22F1CEE18(a2);
      if (v12)
        v13 = (*(_DWORD *)(v12 + 1) & 0x38) == 16;
      else
        v13 = 0;
      if (a2 - 7107 < 2)
        v13 = 1;
      if (v13)
        v10 = 1;
      else
        v10 = 3;
    }
  }
  if (a2 <= 0x2118)
  {
    v14 = sub_22F1CEE18(a2);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 1);
      if ((v15 & 0x38) == 0x20)
      {
        if ((v15 & 7) == 1 && *(_BYTE *)(a4 + 4) != 0)
          return 1;
        if ((v9 & 8) == 0)
        {
          v27 = *(_DWORD *)(v8 + 28);
          if ((int)v10 <= v27)
            v10 = v27;
          else
            v10 = v10;
        }
      }
    }
  }
  if ((_DWORD)v10 == 1)
    return v10;
  if ((v11 & 1) != 0)
  {
    if ((_DWORD)v10 == 3)
      return 1;
    if (v10 >= 4)
    {
      if (a2 <= 0x2118)
      {
        v16 = sub_22F1CEE18(a2);
        if (!v16 || (*(_DWORD *)(v16 + 1) & 4) != 0)
        {
          if ((_DWORD)v10 != 4)
            goto LABEL_41;
LABEL_35:
          if ((v9 & 0x40) != 0)
            v17 = 4;
          else
            v17 = 5;
          if ((v11 & 8) != 0)
            LODWORD(v10) = v17;
          else
            LODWORD(v10) = 4;
          goto LABEL_41;
        }
      }
      return 1;
    }
  }
  if ((_DWORD)v10 == 4 || (_DWORD)v10 == 3 && (v11 & 4) != 0 && (v9 & 0x20) == 0)
    goto LABEL_35;
LABEL_41:
  if (*(_BYTE *)(a4 + 5))
    v18 = *(_DWORD *)(a4 + 316) == 95;
  else
    v18 = 1;
  if (!v18 && (_DWORD)v10 == 5)
    v10 = 4;
  else
    v10 = v10;
  v20 = sub_22F1CEE18(a2);
  if (v20)
  {
    v21 = v20;
    if ((v11 & 0x10) != 0 && (*(_DWORD *)(v20 + 1) & 0x8000) == 0 && a3)
    {
      v22 = *(_QWORD **)(a4 + 64);
      v23 = a3;
      if ((a3 & 0x80000000) != 0)
        v23 = sub_22F1E22F0(*(_QWORD **)(a4 + 64), a3);
      v24 = sub_22F1E361C(v22, v23);
      if (v24 != 3)
      {
        if (v24)
          return 1;
      }
    }
    if ((*(_BYTE *)(v8 + 24) & 0x10) != 0
      && (*(_DWORD *)(v21 + 1) & 0x10000) == 0
      && a3
      && sub_22E90086C(*(_QWORD **)(a4 + 64), a3))
    {
      return 1;
    }
  }
  return v10;
}

uint64_t sub_22F1CF8D0(void *__s2, size_t a2)
{
  __int16 *v4;
  unint64_t v5;
  __int16 *v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  int v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = word_22F4ADD90;
  v5 = 967;
  do
  {
    v6 = &v4[3 * (v5 >> 1)];
    v7 = (unsigned __int16)*v6;
    v8 = byte_22F4AF43A[v7];
    if (a2 >= v8)
      v9 = byte_22F4AF43A[v7];
    else
      v9 = a2;
    if (v9 && (v10 = memcmp(&byte_22F4AF43A[v7 + 1], __s2, v9)) != 0)
    {
      v11 = (v10 >> 31) | 1;
    }
    else
    {
      if (a2 > v8)
        v11 = -1;
      else
        v11 = 1;
      if (a2 == v8)
        v11 = 0;
    }
    if (v11 == -1)
      v5 += ~(v5 >> 1);
    else
      v5 >>= 1;
    if (v11 == -1)
      v4 = v6 + 3;
  }
  while (v5);
  if (v4 != (__int16 *)byte_22F4AF43A
    && (v12 = &byte_22F4AF43A[(unsigned __int16)*v4], v14 = *v12, v13 = v12 + 1, a2 == v14)
    && (!a2 || !memcmp(v13, __s2, a2)))
  {
    v17 = (-1431655765 * (v4 - word_22F4ADD90)) & 0xFFFFFF00;
    v15 = (-85 * (v4 - word_22F4ADD90));
    v16 = 0x100000000;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  return v16 | v15 | v17;
}

uint64_t sub_22F1CFA08(int a1, uint64_t a2, void *__s2, size_t a4, uint64_t a5)
{
  unint64_t v7;

  v7 = sub_22F1CF8D0(__s2, a4);
  if (HIDWORD(v7))
    return sub_22F1CFA68(a2, (uint64_t)&word_22F4ADD90[3 * v7], a5);
  else
    return 1;
}

uint64_t sub_22F1CFA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  int v16;

  v6 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2) || *(_WORD *)(a2 + 4))
  {
    v7 = word_22F537C6C[v6];
    if (v7 == 0xFFFF)
    {
      v9 = 1;
    }
    else
    {
      v8 = &word_22F537C6C[v6 + 1];
      v9 = 1;
      do
      {
        v10 = (__int16)v7;
        if (((*(_DWORD *)(sub_22F1CEE18((__int16)v7) + 1) & 0x38) == 16) == (_DWORD)a1)
        {
          v11 = *(unsigned int *)(a3 + 8);
          if (v11 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v11 = *(unsigned int *)(a3 + 8);
          }
          v9 = 0;
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v10;
          ++*(_DWORD *)(a3 + 8);
        }
        v12 = *v8++;
        LOWORD(v7) = v12;
      }
      while (v12 != 0xFFFF);
    }
    v13 = *(unsigned __int16 *)(a2 + 4);
    v14 = word_22F53916C[v13];
    if (v14 != 0xFFFF)
    {
      v15 = &word_22F53916C[v13 + 1];
      do
      {
        v9 &= sub_22F1CFA68(a1, &word_22F4ADD90[3 * (__int16)v14], a3);
        v16 = *v15++;
        LOWORD(v14) = v16;
      }
      while (v16 != 0xFFFF);
    }
  }
  else
  {
    LOBYTE(v9) = (_DWORD)a1 == 1;
  }
  return v9 & 1;
}

char *sub_22F1CFBB8(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v3 = 0;
  v4 = 0;
  v24[4] = *MEMORY[0x24BDAC8D0];
  v5 = a3 + 1;
  v6 = word_22F4ADD90;
  v7 = 5802;
  do
  {
    if (v6[1] || v6[2])
    {
      v8 = (unsigned __int16)*v6;
      v10 = &byte_22F4AF43A[v8 + 1];
      v9 = byte_22F4AF43A[v8];
      v22 = v10;
      v23 = v9;
      v11 = llvm::StringRef::edit_distance();
      if (v11 <= v5)
      {
        v12 = v11;
        v22 = v24;
        v23 = 0x800000000;
        v13 = sub_22F1CFA68(a1, (uint64_t)v6, (uint64_t)&v22);
        v14 = (char *)&unk_22F5DF232;
        if (v12 == v5)
        {
          v15 = 0;
        }
        else
        {
          v14 = v10;
          v15 = v9;
        }
        if (v12 == v5)
          v16 = v5;
        else
          v16 = v12;
        if ((_DWORD)v23)
          v17 = v14;
        else
          v17 = v4;
        if ((_DWORD)v23)
          v18 = v15;
        else
          v18 = v3;
        if ((_DWORD)v23)
          v19 = v16;
        else
          v19 = v5;
        if ((v13 & 1) == 0)
        {
          v4 = v17;
          v3 = v18;
          v5 = v19;
        }
        if (v22 != v24)
          free(v22);
      }
    }
    v6 += 3;
    v7 -= 6;
  }
  while (v7);
  return v4;
}

uint64_t sub_22F1CFD24(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  _QWORD v10[3];

  v4 = *(_DWORD *)(a2 + 316);
  v5 = sub_22F1CF5F4(a1, v4, *(_DWORD *)(a2 + 312), a2);
  if ((int)v5 >= 4)
  {
    ++*(_DWORD *)(a2 + 172);
    if (sub_22F41AAC4(a1, v4))
      ++*(_DWORD *)(a2 + 176);
  }
  if (*(_BYTE *)(a2 + 6))
    return 0;
  if ((_DWORD)v5 != 1)
  {
    if (*(_DWORD *)(a2 + 180) == 5)
      *(_BYTE *)(a2 + 170) = 1;
    *(_DWORD *)(a2 + 180) = v5;
  }
  if (*(_BYTE *)(a2 + 170))
  {
    if ((int)v5 >= 4)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48));
      if ((_DWORD)result)
      {
        result = 0;
        ++*(_DWORD *)(a2 + 188);
      }
      return result;
    }
    return 0;
  }
  if (!(_DWORD)v5)
    return 0;
  if ((_DWORD)v5 == 1)
  {
    if (!*(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((int)v5 >= 4)
  {
    if (sub_22F41AAC4(a1, v4))
      *(_BYTE *)(a2 + 171) = 1;
    if (v4 <= 0x2118)
    {
      v8 = sub_22F1CEE18(v4);
      if (!v8 || (*(_DWORD *)(v8 + 1) & 4) != 0)
        *(_BYTE *)(a2 + 169) = 1;
    }
    *(_BYTE *)(a2 + 168) = 1;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48)))
      ++*(_DWORD *)(a2 + 188);
    v9 = *(_DWORD *)(a2 + 20);
    if (v9)
    {
      if ((_DWORD)v5 == 4 && *(_DWORD *)(a2 + 188) > v9)
      {
        sub_22F1CBE80(a2, 95, &unk_22F5DF232, 0, &unk_22F5DF232, 0, &unk_22F5DF232, 0);
        return 0;
      }
    }
  }
  if (*(_DWORD *)(a2 + 316) == 95)
    *(_BYTE *)(a2 + 170) = 1;
  v10[1] = 0;
  v10[2] = 0;
  v10[0] = a2;
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a2 + 48) + 56))(*(_QWORD *)(a2 + 48), v5, v10);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48));
  if ((_DWORD)v5 == 3 && v7)
    ++*(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 316) = -1;
  return 1;
}

uint64_t sub_22F1CFF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  _QWORD v6[3];

  v3 = a3;
  v6[1] = 0;
  v6[2] = 0;
  v6[0] = a2;
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a2 + 48) + 56))(*(_QWORD *)(a2 + 48), a3, v6);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48));
  if (v3 == 3 && (_DWORD)result)
    ++*(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 316) = -1;
  return result;
}

_DWORD *sub_22F1CFFC0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  _DWORD *v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_16:
    result = sub_22F1CE9D8(a1, (uint64_t)a2, a2, v18);
    *result = *a2;
    result[1] = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v17 = 1;
    goto LABEL_12;
  }
  v9 = *(_QWORD *)a1;
  v10 = (37 * *a2) & (v8 - 1);
  result = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -2;
      if (v15)
        v13 = result;
      v16 = v10 + v14++;
      v10 = v16 & (v8 - 1);
      result = (_DWORD *)(v9 + 8 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_11;
    }
    if (v13)
      v18 = v13;
    else
      v18 = result;
    goto LABEL_16;
  }
LABEL_11:
  v17 = 0;
LABEL_12:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 8 * v8;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

char *sub_22F1D00AC(char **a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 2;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 1 > v5)
    v5 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v9 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 62)
      sub_22E3B3F8C();
    v10 = (char *)operator new(4 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[4 * v4];
  *(_DWORD *)v11 = a2;
  v12 = v11 + 4;
  while (v3 != v2)
  {
    v13 = *((_DWORD *)v3 - 1);
    v3 -= 4;
    *((_DWORD *)v11 - 1) = v13;
    v11 -= 4;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t sub_22F1D0178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22F1D01D8(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6;
  const void *v10;
  uint64_t v11;
  int is_separator;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  uint64_t *v16;
  std::error_code v17;
  std::string::size_type **v18;
  unsigned int v19;
  unsigned __int8 v20;
  std::string::size_type *v21;
  std::string::size_type *v22;
  std::string::size_type v23;
  _BYTE *v24;
  std::string::size_type v25;
  unint64_t v26;
  std::error_code v27;
  llvm *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  std::string::size_type v38;
  int Key;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *__p[2];
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51[2];
  char v52;
  uint64_t v53;

  v6 = a3;
  v53 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 2)
  {
    v10 = (const void *)llvm::sys::path::root_path();
    if (v6 != v11 || memcmp(a2, v10, v6))
    {
      is_separator = llvm::sys::path::is_separator((llvm::sys::path *)a2[v6 - 1]);
      v13 = v6 >= v6 - 1 ? v6 - 1 : v6;
      if (is_separator)
        v6 = v13;
    }
  }
  do
    v14 = __ldxr((unsigned int *)&dword_253E4BB38);
  while (__stxr(v14 + 1, (unsigned int *)&dword_253E4BB38));
  v15 = atomic_load(byte_253E4BB3C);
  if ((v15 & 1) == 0)
    llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB20);
  v50[1] = a2;
  v50[2] = v6;
  v52 |= 1u;
  v51[0] = 2;
  v51[1] = (uint64_t)std::generic_category();
  v16 = sub_22F1D23B4((llvm::StringMapImpl *)(a1 + 440), a2, v6, v51);
  v18 = (std::string::size_type **)v16;
  if (LOBYTE(v17.__val_))
  {
    do
      v19 = __ldxr((unsigned int *)&dword_253E4BB58);
    while (__stxr(v19 + 1, (unsigned int *)&dword_253E4BB58));
    v40 = a5;
    v20 = atomic_load(byte_253E4BB5C);
    if ((v20 & 1) == 0)
      llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB40);
    v21 = *v18;
    v22 = *v18;
    v25 = *v22;
    v24 = v22 + 4;
    v23 = v25;
    __p[0] = 0;
    __p[1] = 0;
    v44 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v26 = sub_22F1D05A4(a1, v24, v25, (uint64_t)__p, 0, 0);
    v28 = (llvm *)v26;
    if ((_DWORD)v26)
    {
      v29 = *(_QWORD *)&v27.__val_;
      if (a4)
      {
        *((_BYTE *)v21 + 24) |= 1u;
        v21[1] = v26;
        v21[2] = *(_QWORD *)&v27.__val_;
        v30 = v40;
      }
      else
      {
        Key = llvm::StringMapImpl::FindKey();
        v30 = v40;
        if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 448))
          llvm::StringMapImpl::RemoveKey();
      }
      *(_QWORD *)&v27.__val_ = v29;
      llvm::errorCodeToError(v28, v27);
      *(_BYTE *)(v30 + 8) |= 1u;
      *(_QWORD *)v30 = v42;
      v42 = 0;
      goto LABEL_33;
    }
    v41 = v45;
    v50[0] = 0;
    v32 = sub_22F1D24F4(*(_QWORD *)(a1 + 280), *(_DWORD *)(a1 + 296), &v41, v50);
    v33 = (_QWORD *)v50[0];
    if ((v32 & 1) != 0)
    {
      v36 = v50[0] + 16;
      v38 = *(_QWORD *)(v50[0] + 16);
      if (v38 && !*(_BYTE *)(v38 + 16))
        goto LABEL_28;
      goto LABEL_27;
    }
    v34 = *(_DWORD *)(a1 + 288);
    v35 = *(_DWORD *)(a1 + 296);
    if (4 * v34 + 4 >= 3 * v35)
    {
      v35 *= 2;
    }
    else if (v35 + ~v34 - *(_DWORD *)(a1 + 292) > v35 >> 3)
    {
      goto LABEL_24;
    }
    sub_22F1D25E4(a1 + 280, v35);
    v50[0] = 0;
    sub_22F1D24F4(*(_QWORD *)(a1 + 280), *(_DWORD *)(a1 + 296), &v41, v50);
    v33 = (_QWORD *)v50[0];
LABEL_24:
    ++*(_DWORD *)(a1 + 288);
    if (*v33 != -1 || v33[1] != -1)
      --*(_DWORD *)(a1 + 292);
    *(_OWORD *)v33 = v41;
    v33[2] = 0;
    v36 = (uint64_t)(v33 + 2);
LABEL_27:
    v37 = (_QWORD *)sub_22E3CD3D4(a1 + 184, 24, 3);
    v37[2] = 0;
    *(_QWORD *)v36 = v37;
    *v37 = v24;
    v37[1] = v23;
    v38 = *(_QWORD *)v36;
    *(_BYTE *)(*(_QWORD *)v36 + 16) = 0;
LABEL_28:
    *((_BYTE *)v21 + 24) &= ~1u;
    v21[1] = v38;
    *(_BYTE *)(v40 + 8) &= ~1u;
    *(_QWORD *)v40 = v21;
LABEL_33:
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    return;
  }
  v31 = *v16;
  if ((*(_BYTE *)(*v16 + 24) & 1) != 0)
  {
    *(_QWORD *)&v17.__val_ = *(_QWORD *)(v31 + 16);
    llvm::errorCodeToError(*(llvm **)(v31 + 8), v17);
    *(_BYTE *)(a5 + 8) |= 1u;
    v31 = v49;
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
  }
  *(_QWORD *)a5 = v31;
}

unint64_t sub_22F1D05A4(uint64_t a1, _BYTE *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v9;
  std::string::size_type v10;
  unint64_t v11;
  unsigned int v13;
  char *__s;
  __int128 v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 39) < 0)
    v6 = *(_QWORD *)(a1 + 24);
  else
    v6 = *(unsigned __int8 *)(a1 + 39);
  if (!v6)
    return sub_22F1D2B78((std::string::size_type)a2, a3, a4, a5, a6, *(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 8));
  v13 = a5;
  __s = (char *)v17;
  v16 = xmmword_22F44E310;
  sub_22E61131C((uint64_t)&__s, a2, &a2[a3]);
  sub_22F1D17C8(a1, (void **)&__s);
  v9 = v16;
  if ((unint64_t)(v16 + 1) > *((_QWORD *)&v16 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v9 = v16;
  }
  __s[v9] = 0;
  if (__s)
    v10 = strlen(__s);
  else
    v10 = 0;
  v11 = sub_22F1D2B78((std::string::size_type)__s, v10, a4, v13, a6, *(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 8));
  if (__s != (char *)v17)
    free(__s);
  return v11;
}

void sub_22F1D0728(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_22F1D01D8(a1, a2, a3, a4, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = v10;
    v7 = llvm::errorToErrorCode();
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v6 = *(_QWORD *)(v10 + 8);
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v6;
  }
}

uint64_t sub_22F1D07D8@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = sub_22F1D0894(a1, a2, a3, a4, a5, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v12 = v13;
    v10 = llvm::errorToErrorCode();
    *(_BYTE *)(a6 + 16) |= 1u;
    *(_QWORD *)a6 = v10;
    *(_QWORD *)(a6 + 8) = v11;
    result = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v8 = v13;
    do
    {
      v9 = *(_QWORD *)(v8 + 8);
      v8 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v9 & 2) != 0 && v8);
    *(_BYTE *)(a6 + 16) &= ~1u;
    *(_QWORD *)a6 = v8;
  }
  return result;
}

uint64_t sub_22F1D0894@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  const void *v7;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t result;
  std::error_code v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned __int8 v19;
  _QWORD *v20;
  _QWORD *v21;
  _BYTE *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  std::error_code v28;
  std::string::size_type v29;
  llvm *v30;
  uint64_t v31;
  uint64_t v32;
  std::error_code v33;
  llvm *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *p_p;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  time_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *rep;
  size_t v57;
  uint64_t v58;
  size_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *__p;
  size_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  std::chrono::system_clock::time_point __t[2];
  char v76;
  char v77;
  const void *v78;
  size_t v79;
  uint64_t v80[2];
  char v81;
  uint64_t v82;
  char v83;
  const void *v84;
  size_t v85;
  uint64_t v86[2];
  char v87;
  uint64_t v88;

  LODWORD(v7) = a4;
  v88 = *MEMORY[0x24BDAC8D0];
  do
    v12 = __ldxr((unsigned int *)&dword_253E4BB78);
  while (__stxr(v12 + 1, (unsigned int *)&dword_253E4BB78));
  v13 = atomic_load(byte_253E4BB7C);
  if ((v13 & 1) == 0)
    llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB60);
  v14 = a1 + 560;
  v84 = a2;
  v85 = a3;
  v87 |= 1u;
  v86[0] = 2;
  v86[1] = (uint64_t)std::generic_category();
  result = (uint64_t)sub_22F1D26B0((llvm::StringMapImpl *)(a1 + 560), a2, a3, v86);
  v17 = (_QWORD *)result;
  if (!LOBYTE(v16.__val_))
  {
    v32 = *(_QWORD *)result;
    if ((*(_BYTE *)(*(_QWORD *)result + 24) & 1) != 0)
    {
      *(_QWORD *)&v16.__val_ = *(_QWORD *)(v32 + 16);
      result = llvm::errorCodeToError(*(llvm **)(v32 + 8), v16);
      *(_BYTE *)(a6 + 8) |= 1u;
      v32 = v74;
    }
    else
    {
      *(_BYTE *)(a6 + 8) &= ~1u;
    }
LABEL_25:
    *(_QWORD *)a6 = v32;
    return result;
  }
  do
    v18 = __ldxr((unsigned int *)&dword_253E4BB98);
  while (__stxr(v18 + 1, (unsigned int *)&dword_253E4BB98));
  v19 = atomic_load(byte_253E4BB9C);
  if ((v19 & 1) == 0)
    llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB80);
  v20 = (_QWORD *)*v17;
  v21 = (_QWORD *)*v17;
  v24 = *v21;
  v22 = v21 + 4;
  v23 = v24;
  sub_22F1D0E20((uint64_t)&v82, a1, (uint64_t)a2, a3, a5);
  if ((v83 & 1) != 0)
  {
    v73 = v82;
    v34 = (llvm *)llvm::errorToErrorCode();
    v35 = *(_QWORD *)&v33.__val_;
    if (v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
    if (a5)
    {
      *((_BYTE *)v20 + 24) |= 1u;
      v20[1] = v34;
      v20[2] = v35;
    }
    else
    {
      sub_22F1D0F1C(v14);
    }
    *(_QWORD *)&v33.__val_ = v35;
    result = llvm::errorCodeToError(v34, v33);
    *(_BYTE *)(a6 + 8) |= 1u;
    v32 = v72[1];
    goto LABEL_25;
  }
  v61 = v20;
  v62 = a6;
  v25 = v82;
  v72[0] = 0;
  __p = 0;
  v65 = 0;
  v66 = 0;
  v68 = 0;
  v70 = 0;
  if ((_DWORD)v7)
    v26 = v72;
  else
    v26 = 0;
  v71 = 0;
  v27 = sub_22F1D05A4(a1, v22, v23, (uint64_t)&__p, 1, v26);
  v29 = v23;
  v30 = (llvm *)v27;
  if ((_DWORD)v27)
  {
    v31 = *(_QWORD *)&v28.__val_;
    if (a5)
    {
      *((_BYTE *)v61 + 24) |= 1u;
      v61[1] = v27;
      v61[2] = *(_QWORD *)&v28.__val_;
    }
    else
    {
      sub_22F1D0F1C(a1 + 560);
    }
    *(_QWORD *)&v28.__val_ = v31;
    llvm::errorCodeToError(v30, v28);
    *(_BYTE *)(v62 + 8) |= 1u;
    *(_QWORD *)v62 = v63;
  }
  else
  {
    v60 = (char)v7;
    v59 = v29;
    *(_OWORD *)&__t[0].__d_.__rep_ = v67;
    sub_22F1D2820(a1 + 304, (__int128 *)&__t[0].__d_.__rep_);
    v37 = v36;
    v38 = *(_QWORD *)(v36 + 16);
    v39 = v38;
    if (!v38)
    {
      v39 = sub_22E3CD3D4(a1 + 88, 96, 3);
      *(_OWORD *)v39 = 0u;
      *(_OWORD *)(v39 + 16) = 0u;
      *(_OWORD *)(v39 + 32) = 0u;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_QWORD *)(v39 + 61) = 0;
      *(_QWORD *)(v39 + 80) = 0;
      *(_QWORD *)(v39 + 88) = 0;
      *(_QWORD *)(v39 + 72) = 0;
      *(_QWORD *)(v37 + 16) = v39;
    }
    v58 = v37;
    if (HIBYTE(v71)
      && (v66 >= 0 ? (p_p = &__p) : (p_p = __p),
          v66 >= 0 ? (v41 = HIBYTE(v66) & 0x7F) : (v41 = v65),
          v41 != a3 || a3 && (v7 = p_p, v42 = memcmp(p_p, a2, a3), p_p = v7, LOBYTE(v7) = v60, v42)))
    {
      v78 = p_p;
      v79 = v41;
      v81 &= ~1u;
      v43 = v25;
      v80[0] = v39;
      v80[1] = v25;
      v44 = *sub_22F1D26B0((llvm::StringMapImpl *)(a1 + 560), p_p, v41, v80) | 2;
      *((_BYTE *)v61 + 24) &= ~1u;
      v61[1] = v44;
      v61[2] = 0;
    }
    else
    {
      *((_BYTE *)v61 + 24) &= ~1u;
      v43 = v25;
      v61[1] = v39;
      v61[2] = v25;
    }
    if (v38)
    {
      v45 = *(_QWORD *)(v43 + 8);
      v46 = *(_QWORD *)(v58 + 16);
      if (v45 == *(_QWORD *)(v46 + 40))
      {
        v47 = v62;
      }
      else
      {
        v47 = v62;
        if ((_BYTE)v71)
        {
          *(_QWORD *)(v46 + 40) = v45;
          v46 = *(_QWORD *)(v58 + 16);
        }
      }
      *(_QWORD *)(v46 + 88) = v61;
      *(_BYTE *)(v47 + 8) &= ~1u;
      *(_QWORD *)v47 = v61;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v58 + 16) + 88) = v61;
      *(_QWORD *)(*(_QWORD *)(v58 + 16) + 24) = v69;
      __t[0].__d_.__rep_ = v68 / 1000;
      v48 = std::chrono::system_clock::to_time_t(__t);
      v49 = *(_QWORD *)(v58 + 16);
      *(_QWORD *)(v49 + 32) = v48;
      *(_QWORD *)(v49 + 40) = *(_QWORD *)(v43 + 8);
      LODWORD(v49) = *(_DWORD *)(a1 + 816);
      *(_DWORD *)(a1 + 816) = v49 + 1;
      v50 = *(_QWORD *)(v58 + 16);
      *(_DWORD *)(v50 + 64) = v49;
      *(_OWORD *)(v50 + 48) = v67;
      *(_BYTE *)(v50 + 68) = v70 == 7;
      v51 = v72[0];
      v72[0] = 0;
      v52 = *(_QWORD *)(v50 + 72);
      *(_QWORD *)(v50 + 72) = v51;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      v53 = *(_QWORD *)(v58 + 16);
      v54 = *(_QWORD *)(v53 + 72);
      if (v54)
      {
        (*(void (**)(std::chrono::system_clock::time_point *__return_ptr))(*(_QWORD *)v54 + 24))(__t);
        v55 = v77;
        if ((v77 & 1) == 0)
        {
          if (v76 >= 0)
            rep = __t;
          else
            rep = (void *)__t[0].__d_.__rep_;
          if (v76 >= 0)
            v57 = v76 & 0x7F;
          else
            v57 = __t[1].__d_.__rep_;
          sub_22F1D0F6C(a1, *(_QWORD *)(v58 + 16), rep, v57);
          v55 = v77;
        }
        if ((v55 & 1) == 0 && v76 < 0)
          operator delete((void *)__t[0].__d_.__rep_);
      }
      else if ((v7 & 1) == 0)
      {
        sub_22F1D0F6C(a1, v53, v22, v59);
      }
      *(_BYTE *)(v62 + 8) &= ~1u;
      *(_QWORD *)v62 = v61;
    }
  }
  if (SHIBYTE(v66) < 0)
    operator delete(__p);
  result = v72[0];
  v72[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22F1D0E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::error_code v15;
  std::error_code v16;

  if (!a4)
  {
    *(_QWORD *)&v16.__val_ = std::generic_category();
    llvm::errorCodeToError((llvm *)2, v16);
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = v14;
    goto LABEL_5;
  }
  if (llvm::sys::path::is_separator((llvm::sys::path *)*(char *)(a4 + a3 - 1)))
  {
    *(_QWORD *)&v15.__val_ = std::generic_category();
    llvm::errorCodeToError((llvm *)0x15, v15);
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = v13;
LABEL_5:
    *(_QWORD *)a1 = v8;
    return;
  }
  v9 = llvm::sys::path::parent_path();
  if (v10)
    v11 = (char *)v9;
  else
    v11 = ".";
  if (v10 <= 1)
    v12 = 1;
  else
    v12 = v10;
  sub_22F1D01D8(a2, v11, v12, a5, a1);
}

uint64_t sub_22F1D0F1C(uint64_t a1)
{
  uint64_t result;

  result = llvm::StringMapImpl::FindKey();
  if ((_DWORD)result != -1 && (int)result != (unint64_t)*(unsigned int *)(a1 + 8))
    return llvm::StringMapImpl::RemoveKey();
  return result;
}

void sub_22F1D0F6C(uint64_t a1, uint64_t a2, void *__src, size_t __n)
{
  size_t v8;
  size_t v9;
  void *v10;
  __int128 *p_dst;
  size_t v12;
  size_t v13;
  _QWORD *v14;
  __int128 __dst;
  unint64_t v16;
  void *__srca;
  size_t __len[2];
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  __srca = v19;
  *(_OWORD *)__len = xmmword_22F44E310;
  if (__n < 0x81)
  {
    v8 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v8 = __len[0];
  if (__n)
  {
LABEL_3:
    memcpy((char *)__srca + v8, __src, __n);
    v8 = __len[0];
  }
LABEL_4:
  __len[0] = v8 + __n;
  sub_22F1D1908(a1, &__srca);
  llvm::sys::path::remove_dots();
  v9 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = __srca;
  if (__len[0] >= 0x17)
  {
    v12 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v12 = __len[0] | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v16 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v16) = __len[0];
  p_dst = &__dst;
  if (__len[0])
LABEL_11:
    memmove(p_dst, v10, v9);
  *((_BYTE *)p_dst + v9) = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = __dst;
  v14 = __srca;
  *(_QWORD *)(a2 + 16) = v16;
  if (v14 != v19)
    free(v14);
}

unint64_t sub_22F1D1104(uint64_t a1, const void *a2, size_t a3, uint64_t a4, time_t a5)
{
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  unsigned __int8 v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  std::string::size_type v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  size_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  const void *v47;
  size_t v48;
  uint64_t v49[2];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  do
    v10 = __ldxr((unsigned int *)&dword_253E4BB78);
  while (__stxr(v10 + 1, (unsigned int *)&dword_253E4BB78));
  v11 = atomic_load(byte_253E4BB7C);
  if ((v11 & 1) == 0)
    llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB60);
  v47 = a2;
  v48 = a3;
  v50 |= 1u;
  v49[0] = 2;
  v49[1] = (uint64_t)std::generic_category();
  v12 = sub_22F1D26B0((llvm::StringMapImpl *)(a1 + 560), a2, a3, v49);
  v13 = *v12;
  if ((*(_BYTE *)(*v12 + 24) & 1) == 0)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if ((v14 & 2) != 0)
      return v14 & 0xFFFFFFFFFFFFFFFCLL;
    return v13;
  }
  do
    v16 = __ldxr((unsigned int *)&dword_253E4BB98);
  while (__stxr(v16 + 1, (unsigned int *)&dword_253E4BB98));
  v17 = atomic_load(byte_253E4BB9C);
  if ((v17 & 1) == 0)
    llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB80);
  sub_22F41AEC8(a1);
  if (a3 <= 1)
    v18 = 1;
  else
    v18 = a3;
  if (a3)
    v19 = (const char *)a2;
  else
    v19 = ".";
  sub_22F1D0E20((uint64_t)__p, a1, (uint64_t)v19, v18, 1);
  v20 = sub_22E6D5834(__p);
  if (((uint64_t)__p[1] & 1) != 0)
  {
    v21 = __p[0];
    __p[0] = 0;
    if (v21)
      (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  }
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  *(_QWORD *)&v44 = 0;
  DWORD2(v45) = 0;
  v46 = 0;
  v22 = strlen((const char *)(v13 + 32));
  if (sub_22F1D05A4(a1, (_BYTE *)(v13 + 32), v22, (uint64_t)__p, 1, 0))
  {
    v23 = sub_22E3CD3D4(a1 + 88, 96, 3);
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_OWORD *)(v23 + 48) = 0u;
    *(_QWORD *)(v23 + 61) = 0;
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    *(_QWORD *)(v23 + 72) = 0;
    v24 = *(_DWORD *)(a1 + 384);
    if (v24 >= *(_DWORD *)(a1 + 388))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a1 + 384);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v24) = v23;
    ++*(_DWORD *)(a1 + 384);
  }
  else
  {
    std::chrono::system_clock::from_time_t(a5);
    llvm::vfs::Status::Status();
    if (SHIBYTE(v42) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v35;
    v42 = v36;
    v43 = v37;
    v44 = v38;
    v45 = v39;
    v46 = v40;
    v35 = v37;
    v27 = sub_22F1D2820(a1 + 304, &v35);
    v29 = v28;
    v30 = *(_QWORD *)(v28 + 16);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 72);
      if (v31)
      {
        *(_QWORD *)(v30 + 72) = 0;
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v31 + 8))(v31, v27);
        v30 = *(_QWORD *)(v29 + 16);
      }
      *(_BYTE *)(v13 + 24) &= ~1u;
      *(_QWORD *)(v13 + 8) = v30;
      *(_QWORD *)(v13 + 16) = v20;
      goto LABEL_33;
    }
    v32 = sub_22E3CD3D4(a1 + 88, 96, 3);
    *(_QWORD *)(v32 + 61) = 0;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_QWORD *)(v32 + 80) = 0;
    *(_QWORD *)(v32 + 88) = 0;
    *(_QWORD *)(v32 + 72) = 0;
    *(_QWORD *)(v29 + 16) = v32;
    *(_OWORD *)(v32 + 48) = v43;
    *(_BYTE *)(v32 + 68) = DWORD2(v45) == 7;
    if (v42 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v42 >= 0)
      v34 = HIBYTE(v42) & 0x7F;
    else
      v34 = (size_t)__p[1];
    sub_22F1D0F6C(a1, v32, v33, v34);
    v23 = *(_QWORD *)(v29 + 16);
  }
  *(_BYTE *)(v13 + 24) &= ~1u;
  *(_QWORD *)(v13 + 8) = v23;
  *(_QWORD *)(v13 + 16) = v20;
  *(_QWORD *)(v23 + 88) = v13;
  *(_QWORD *)(v23 + 24) = a4;
  *(_QWORD *)(v23 + 32) = a5;
  *(_QWORD *)(v23 + 40) = *(_QWORD *)(v20 + 8);
  v25 = *(_DWORD *)(a1 + 816);
  *(_DWORD *)(a1 + 816) = v25 + 1;
  *(_DWORD *)(v23 + 64) = v25;
  v26 = *(_QWORD *)(v23 + 72);
  *(_QWORD *)(v23 + 72) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
LABEL_33:
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  return v13;
}

uint64_t sub_22F1D1544(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::StringMapImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t *v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  const std::error_category *v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  std::chrono::system_clock::time_point __t;
  const void *v36;
  size_t v37;
  uint64_t v38[2];
  char v39;
  uint64_t v40;

  v2 = a2;
  v40 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v31 = 0;
  v33 = 0;
  v34 = 0;
  v4 = a2;
  do
  {
    v5 = v4;
    v6 = *(_QWORD *)(v4 + 8);
    if ((v6 & 2) == 0)
      break;
    v4 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v4);
  v7 = 0;
  if (!sub_22F1D05A4(a1, (_BYTE *)(v5 + 32), *(_QWORD *)v5, (uint64_t)__p, 1, 0))
  {
    v9 = *(llvm::StringMapImpl **)(a1 + 680);
    if (!v9)
    {
      v9 = (llvm::StringMapImpl *)operator new();
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0x2000000000;
      v10 = *(_QWORD *)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v9;
      if (v10)
      {
        v11 = sub_22F41B2B8(v10);
        MEMORY[0x2348A0E9C](v11, 0x1080C401BEB856BLL);
        v9 = *(llvm::StringMapImpl **)(a1 + 680);
      }
    }
    v12 = v2;
    do
    {
      v13 = (size_t *)v12;
      v14 = *(_QWORD *)(v12 + 8);
      if ((v14 & 2) == 0)
        break;
      v12 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v12);
    v16 = *v13;
    v15 = v13 + 4;
    v36 = v15;
    v37 = v16;
    v39 = -1;
    v17 = std::generic_category();
    v38[0] = 2;
    v38[1] = (uint64_t)v17;
    v18 = sub_22F41B3F0(v9, v15, v16, v38);
    if (v19)
    {
      v20 = sub_22E3CD3D4(a1 + 88, 96, 3);
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_OWORD *)(v20 + 32) = 0u;
      *(_OWORD *)(v20 + 48) = 0u;
      *(_QWORD *)(v20 + 61) = 0;
      *(_QWORD *)(v20 + 80) = 0;
      *(_QWORD *)(v20 + 88) = 0;
      *(_QWORD *)(v20 + 72) = 0;
      v21 = *(_DWORD *)(a1 + 432);
      if (v21 >= *(_DWORD *)(a1 + 436))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(_DWORD *)(a1 + 432);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v21) = v20;
      ++*(_DWORD *)(a1 + 432);
      v22 = v2;
      do
      {
        v23 = v22;
        v24 = *(_QWORD *)(v22 + 8);
        if ((v24 & 2) == 0)
          break;
        v22 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v22);
      v25 = *(_QWORD *)(v23 + 16);
      v26 = *v18;
      *(_BYTE *)(v26 + 24) = *(_BYTE *)(*v18 + 24) & 0xFE;
      *(_QWORD *)(v26 + 8) = v20;
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v20 + 88) = *v18;
      *(_QWORD *)(v20 + 24) = v32;
      do
      {
        v27 = *(_QWORD *)(v2 + 8);
        v2 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v27 & 2) != 0 && v2);
      *(_QWORD *)(v20 + 40) = *(_QWORD *)(v2 + 40);
      __t.__d_.__rep_ = v31 / 1000;
      *(_QWORD *)(v20 + 32) = std::chrono::system_clock::to_time_t(&__t);
      v28 = *(_DWORD *)(a1 + 816);
      *(_DWORD *)(a1 + 816) = v28 + 1;
      *(_DWORD *)(v20 + 64) = v28;
    }
    v7 = *v18;
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t sub_22F1D17C8(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t result;
  void *v5;
  void *v6;
  char is_absolute;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  void *v12;
  __int128 v13;
  _WORD v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 39) < 0)
    v2 = *(_QWORD *)(a1 + 24);
  else
    v2 = *(unsigned __int8 *)(a1 + 39);
  if (!v2)
    return 0;
  v5 = *a2;
  v6 = a2[1];
  v14[4] = 261;
  v12 = v5;
  *(_QWORD *)&v13 = v6;
  is_absolute = llvm::sys::path::is_absolute();
  result = 0;
  if ((is_absolute & 1) == 0)
  {
    v8 = *(_BYTE *)(a1 + 39);
    if (v8 >= 0)
      v9 = (_BYTE *)(a1 + 16);
    else
      v9 = *(_BYTE **)(a1 + 16);
    v10 = v8 & 0x7F;
    if (v8 < 0)
      v10 = *(_QWORD *)(a1 + 24);
    v12 = v14;
    v13 = xmmword_22F44E310;
    sub_22E61131C((uint64_t)&v12, v9, &v9[v10]);
    llvm::sys::path::append();
    sub_22E3B3B4C((uint64_t)a2, (uint64_t)&v12);
    if (v12 != v14)
      free(v12);
    return 1;
  }
  return result;
}

uint64_t sub_22F1D1908(uint64_t a1, void **a2)
{
  uint64_t v4;

  v4 = sub_22F1D17C8(a1, a2);
  if ((llvm::sys::path::is_absolute() & 1) == 0)
  {
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2);
    return 1;
  }
  return v4;
}

void sub_22F1D1980(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  char v28;
  __int16 v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 80))
  {
    llvm::MemoryBuffer::getMemBufferRef(*(llvm::MemoryBuffer **)(a2 + 80));
    llvm::MemoryBuffer::getMemBuffer();
    *(_BYTE *)(a6 + 16) &= ~1u;
    return;
  }
  if ((a3 & 1) != 0 || *(_BYTE *)(a2 + 68))
    v11 = -1;
  else
    v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 88);
  do
  {
    v13 = (_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    if ((v14 & 2) == 0)
      break;
    v12 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v12);
  v17 = *v13;
  v15 = v13 + 4;
  v16 = v17;
  v18 = *(_QWORD *)(a2 + 72);
  if (!v18)
  {
    sub_22F1D1B6C(a1, v15, v16);
    return;
  }
  v29 = 261;
  *(_QWORD *)&v27 = v15;
  *((_QWORD *)&v27 + 1) = v16;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v30, v18, &v27, v11, a4, a3);
  if (!a5)
    goto LABEL_9;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a2 + 72) + 40))(&v27);
  if ((v28 & 1) == 0)
  {
    *a5 = v27;
LABEL_9:
    v19 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v31;
    v21 = *(_BYTE *)(a6 + 16);
    if ((v31 & 1) != 0)
    {
      *(_BYTE *)(a6 + 16) = v21 | 1;
      v24 = v30[1];
      *(_QWORD *)a6 = v30[0];
      *(_QWORD *)(a6 + 8) = v24;
    }
    else
    {
      *(_BYTE *)(a6 + 16) = v21 & 0xFE;
      v22 = v30[0];
      v30[0] = 0;
      *(_QWORD *)a6 = v22;
    }
    goto LABEL_13;
  }
  v26 = *((_QWORD *)&v27 + 1);
  v25 = v27;
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_OWORD *)a6 = __PAIR128__(v26, v25);
  v20 = v31;
LABEL_13:
  if ((v20 & 1) == 0)
  {
    v23 = v30[0];
    v30[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
}

void sub_22F1D1B6C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  __int128 v6;
  _WORD v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 39) < 0)
    v3 = *(_QWORD *)(a1 + 24);
  else
    v3 = *(unsigned __int8 *)(a1 + 39);
  if (v3)
  {
    v5 = v7;
    v6 = xmmword_22F44E310;
    sub_22E61131C((uint64_t)&v5, a2, &a2[a3]);
    sub_22F1D17C8(a1, &v5);
    llvm::vfs::FileSystem::getBufferForFile();
    if (v5 != v7)
      free(v5);
  }
  else
  {
    v7[4] = 261;
    v5 = a2;
    *(_QWORD *)&v6 = a3;
    llvm::vfs::FileSystem::getBufferForFile();
  }
}

std::string::size_type sub_22F1D1C98(uint64_t a1, void *__src, size_t __n, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string::size_type v12;
  uint64_t data_low;
  void *v15;
  char v16;
  char v17;
  std::string __str;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  char v23;
  void *v24;
  __int128 v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = xmmword_22F44E310;
  if (__n < 0x81)
  {
    v8 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v8 = v25;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v24 + v8, __src, __n);
    v8 = v25;
  }
LABEL_4:
  *(_QWORD *)&v25 = v8 + __n;
  sub_22F1D17C8(a1, &v24);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v25;
  if ((unint64_t)(v25 + 1) > *((_QWORD *)&v25 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v10 = v25;
  }
  *((_BYTE *)v24 + v10) = 0;
  v11 = 1;
  v17 = 1;
  if (*(_BYTE *)v24)
  {
    v15 = v24;
    v11 = 3;
  }
  v16 = v11;
  (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(_QWORD *)v9 + 16))(&__str, v9, &v15);
  if ((v23 & 1) != 0)
  {
    v12 = __str.__r_.__value_.__r.__words[0] & 0xFFFFFFFF00000000;
    data_low = LODWORD(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::operator=((std::string *)a4, &__str);
    *(_OWORD *)(a4 + 24) = v19;
    *(_OWORD *)(a4 + 40) = v20;
    *(_OWORD *)(a4 + 56) = v21;
    *(_WORD *)(a4 + 72) = v22;
    std::system_category();
    v12 = 0;
    data_low = 0;
    if ((v23 & 1) == 0 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 != v26)
    free(v24);
  return data_low | v12;
}

void sub_22F1D1E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)(a2 + 8) = 0;
  sub_22E7ED018(a2, *(unsigned int *)(a1 + 816));
  v4 = *(unsigned int *)(a1 + 568);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t **)(a1 + 560); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 560);
  }
  v7 = *(_QWORD *)(a1 + 560) + 8 * v4;
  if (i != (uint64_t *)v7)
  {
    v8 = *i;
    do
    {
      if ((*(_BYTE *)(v8 + 24) & 1) == 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if ((v9 & 2) == 0)
        {
          v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          if (v10)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(v10 + 64)) = v10;
        }
      }
      do
      {
        v11 = i[1];
        ++i;
        v8 = v11;
        if (v11)
          v12 = v8 == -8;
        else
          v12 = 1;
      }
      while (v12);
    }
    while (i != (uint64_t *)v7);
  }
  v13 = *(unsigned int *)(a1 + 384);
  if ((_DWORD)v13)
  {
    v14 = *(uint64_t **)(a1 + 376);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(v16 + 64)) = v16;
      v15 -= 8;
    }
    while (v15);
  }
}

void **sub_22F1D1F3C()
{
  uint64_t v0;
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v12;
  __int128 v13;
  __int16 v14;
  void *v15;
  __int128 v16;
  _QWORD v17[513];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v17[512] = *MEMORY[0x24BDAC8D0];
  v4 = v0 + 696;
  v12 = v1;
  v15 = 0;
  if (sub_22F251EFC((uint64_t *)(v0 + 696), &v12, &v15)
    && v15 != (void *)(*(_QWORD *)(v3 + 696) + 24 * *(unsigned int *)(v3 + 712)))
  {
    return (void **)*((_QWORD *)v15 + 1);
  }
  v5 = (void **)*v2;
  v7 = (size_t)v2[1];
  v15 = v17;
  v16 = xmmword_22F45FB10;
  v8 = *(_QWORD *)(v3 + 8);
  v14 = 261;
  v12 = v5;
  *(_QWORD *)&v13 = v7;
  if (!(*(unsigned int (**)(uint64_t, void ***, void **))(*(_QWORD *)v8 + 56))(v8, &v12, &v15))
  {
    v7 = v16;
    if ((_QWORD)v16)
    {
      v9 = v3 + 720;
      v10 = v15;
      v5 = (void **)sub_22E3CD3D4(v9, v16, 0);
      memmove(v5, v10, v7);
    }
    else
    {
      v5 = 0;
    }
  }
  v12 = v2;
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v7;
  sub_22F41B4F8(v4, &v12, &v13, (uint64_t)&v11);
  if (v15 != v17)
    free(v15);
  return v5;
}

void *sub_22F1D20B4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v7;
  unint64_t v8;
  size_t *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int16 v20;
  void *v21;
  __int128 v22;
  _QWORD v23[513];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v23[512] = *MEMORY[0x24BDAC8D0];
  v4 = v0 + 696;
  v18 = v1;
  v21 = 0;
  if (sub_22F251EFC((uint64_t *)(v0 + 696), &v18, &v21)
    && v21 != (void *)(*(_QWORD *)(v3 + 696) + 24 * *(unsigned int *)(v3 + 712)))
  {
    return (void *)*((_QWORD *)v21 + 1);
  }
  v7 = v2[11];
  v8 = v7;
  do
  {
    v9 = (size_t *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    if ((v10 & 2) == 0)
      break;
    v8 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v8);
  v11 = *v9;
  v21 = v23;
  v22 = xmmword_22F45FB10;
  v12 = *(_QWORD *)(v3 + 8);
  do
  {
    v13 = (uint64_t *)v7;
    v14 = *(_QWORD *)(v7 + 8);
    if ((v14 & 2) == 0)
      break;
    v7 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v7);
  v15 = *v13;
  v20 = 261;
  v18 = v13 + 4;
  *(_QWORD *)&v19 = v15;
  if ((*(unsigned int (**)(uint64_t, _QWORD **, void **))(*(_QWORD *)v12 + 56))(v12, &v18, &v21))
  {
    v5 = v9 + 4;
  }
  else
  {
    v11 = v22;
    if ((_QWORD)v22)
    {
      v16 = v21;
      v5 = (void *)sub_22E3CD3D4(v3 + 720, v22, 0);
      memmove(v5, v16, v11);
    }
    else
    {
      v5 = 0;
    }
  }
  v18 = v2;
  *(_QWORD *)&v19 = v5;
  *((_QWORD *)&v19 + 1) = v11;
  sub_22F41B4F8(v4, &v18, &v19, (uint64_t)&v17);
  if (v21 != v23)
    free(v21);
  return v5;
}

uint64_t sub_22F1D2268(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22F1D22B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      v10 = v9 + 96;
      while (v10 <= v8)
      {
        v11 = sub_22F1D0178(v9);
        v10 = v11 + 192;
        v9 = v11 + 96;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (*v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 = *v13 + v13[1];
      v17 = v15 + 96;
      while (v17 <= v16)
      {
        v18 = sub_22F1D0178(v15);
        v17 = v18 + 192;
        v15 = v18 + 96;
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return sub_22E6188F4(a1);
}

uint64_t *sub_22F1D23B4(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const std::error_category *v15;
  uint64_t v16;
  uint64_t v18;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v18 = i[1];
        ++i;
        v9 = v18;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v11 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 33, 3);
  v12 = v11;
  v13 = v11 + 32;
  if (a3)
    memcpy((void *)(v11 + 32), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *(_QWORD *)v12 = a3;
  v14 = *(_BYTE *)(v12 + 24);
  if ((a4[2] & 1) != 0)
  {
    *(_BYTE *)(v12 + 24) = v14 | 1;
    if ((a4[2] & 1) != 0)
    {
      v16 = *a4;
      v15 = (const std::error_category *)a4[1];
    }
    else
    {
      v15 = std::system_category();
      v16 = 0;
    }
    *(_QWORD *)(v12 + 8) = v16;
    *(_QWORD *)(v12 + 16) = v15;
  }
  else
  {
    *(_BYTE *)(v12 + 24) = v14 & 0xFE;
    *(_QWORD *)(v12 + 8) = *a4;
  }
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F1D24F4(uint64_t a1, int a2, __int128 *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;
  __int128 v23;

  if (a2)
  {
    v23 = *a3;
    v8 = sub_22E76C1A4((uint64_t *)&v23, (uint64_t *)&v23 + 1);
    v9 = a2 - 1;
    v10 = (a2 - 1) & v8;
    v11 = *((_QWORD *)a3 + 1);
    v12 = (_QWORD *)(a1 + 24 * v10);
    v13 = *v12;
    v14 = v12[1];
    if (*(_QWORD *)a3 == *v12 && v11 == v14)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -1 || v14 != -1)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -2;
        if (v19 && v13 == -2)
          v16 = v12;
        v21 = v10 + v17++;
        v10 = v21 & v9;
        v12 = (_QWORD *)(a1 + 24 * (v21 & v9));
        v13 = *v12;
        v14 = v12[1];
        if (*(_QWORD *)a3 == *v12 && v11 == v14)
          goto LABEL_11;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

_QWORD *sub_22F1D25E4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F41B330(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result[1] = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t *sub_22F1D26B0(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v15 = i[1];
        ++i;
        v9 = v15;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v11 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 33, 3);
  v12 = (_QWORD *)v11;
  v13 = v11 + 32;
  if (a3)
    memcpy((void *)(v11 + 32), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *v12 = a3;
  sub_22F1D27B8((uint64_t)(v12 + 1), a4);
  *i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

__n128 sub_22F1D27B8(uint64_t a1, uint64_t *a2)
{
  char v2;
  const std::error_category *v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v2 = *(_BYTE *)(a1 + 16);
  if ((a2[2] & 1) != 0)
  {
    *(_BYTE *)(a1 + 16) = v2 | 1;
    if ((a2[2] & 1) != 0)
    {
      v4 = *a2;
      v3 = (const std::error_category *)a2[1];
    }
    else
    {
      v6 = a1;
      v3 = std::system_category();
      a1 = v6;
      v4 = 0;
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v2 & 0xFE;
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return result;
}

__n128 sub_22F1D2820(uint64_t a1, __int128 *a2)
{
  char v4;
  __n128 result;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  _QWORD *v10;

  v10 = 0;
  v4 = sub_22F1D2904(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v10);
  v6 = v10;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_12;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_12:
    sub_22F1D29EC(a1, v8);
    v10 = 0;
    sub_22F1D2904(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v10);
    v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -1 || v6[1] != -1)
    --*(_DWORD *)(a1 + 12);
  result = (__n128)*a2;
  *(_OWORD *)v6 = *a2;
  v6[2] = 0;
  return result;
}

uint64_t sub_22F1D2904(uint64_t a1, int a2, __int128 *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;
  __int128 v23;

  if (a2)
  {
    v23 = *a3;
    v8 = sub_22E76C1A4((uint64_t *)&v23, (uint64_t *)&v23 + 1);
    v9 = a2 - 1;
    v10 = (a2 - 1) & v8;
    v11 = *((_QWORD *)a3 + 1);
    v12 = (_QWORD *)(a1 + 24 * v10);
    v13 = *v12;
    v14 = v12[1];
    if (*(_QWORD *)a3 == *v12 && v11 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -1 || v14 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -2;
        if (v18 && v13 == -2)
          v16 = v12;
        v20 = v10 + v17++;
        v10 = v20 & v9;
        v12 = (_QWORD *)(a1 + 24 * (v20 & v9));
        v13 = *v12;
        v14 = v12[1];
        if (*(_QWORD *)a3 == *v12 && v11 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
  *a4 = v12;
  return result;
}

_QWORD *sub_22F1D29EC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F1D2AB8(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result[1] = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F1D2AB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v12;
  _OWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -1;
      v7[1] = -1;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -1 || v9 != -1) && (*(_QWORD *)a2 != -2 || v9 != -2))
    {
      v13 = 0;
      result = sub_22F1D2904(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), (__int128 *)a2, &v13);
      v12 = v13;
      *v13 = *(_OWORD *)a2;
      *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

unint64_t sub_22F1D2B78(std::string::size_type a1, std::string::size_type a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  __int16 v26;
  std::string __str;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::system_category();
  if (a6)
  {
    v14 = (*(uint64_t (**)(uint64_t, std::string::size_type, std::string::size_type, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a6 + 24))(a6, a1, a2, a3, a4, a5, a7);
    v15 = v14 & 0xFFFFFFFF00000000;
    LODWORD(a2) = v14;
  }
  else if (a5 && (a4 & 1) != 0)
  {
    WORD4(v28) = 261;
    __str.__r_.__value_.__r.__words[0] = a1;
    __str.__r_.__value_.__l.__size_ = a2;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a7 + 24))(v24, a7, &__str);
    if ((v25 & 1) != 0)
    {
      LODWORD(a2) = v24[0];
      v15 = v24[0] & 0xFFFFFFFF00000000;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v24[0] + 16))(&__str);
      v17 = v32;
      if ((v32 & 1) != 0)
      {
        v22 = *a5;
        *a5 = 0;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v17 = v32;
        }
        if ((v17 & 1) != 0)
        {
          a2 = __str.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::system_category();
          a2 = 0;
        }
        v15 = a2 & 0xFFFFFFFF00000000;
      }
      else
      {
        std::string::operator=((std::string *)a3, &__str);
        *(_OWORD *)(a3 + 24) = v28;
        *(_OWORD *)(a3 + 40) = v29;
        *(_OWORD *)(a3 + 56) = v30;
        *(_WORD *)(a3 + 72) = v31;
        v18 = v24[0];
        v24[0] = 0;
        v19 = *a5;
        *a5 = v18;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v15 = 0;
        LODWORD(a2) = 0;
      }
      if ((v32 & 1) == 0 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((v25 & 1) == 0)
      {
        v23 = v24[0];
        v24[0] = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
    }
  }
  else
  {
    v26 = 261;
    v24[0] = a1;
    v24[1] = a2;
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a7 + 16))(&__str, a7, v24);
    if ((v32 & 1) != 0)
    {
      LODWORD(a2) = __str.__r_.__value_.__l.__data_;
      v15 = __str.__r_.__value_.__r.__words[0] & 0xFFFFFFFF00000000;
    }
    else
    {
      std::string::operator=((std::string *)a3, &__str);
      v15 = 0;
      LODWORD(a2) = 0;
      *(_OWORD *)(a3 + 24) = v28;
      *(_OWORD *)(a3 + 40) = v29;
      *(_OWORD *)(a3 + 56) = v30;
      *(_WORD *)(a3 + 72) = v31;
      if ((v32 & 1) == 0 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if ((_DWORD)a2)
  {
    v16 = a2;
  }
  else
  {
    if (llvm::vfs::Status::isDirectory((llvm::vfs::Status *)a3) == (_DWORD)a4)
    {
      if (a5)
      {
        v20 = *a5;
        *a5 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      if (llvm::vfs::Status::isDirectory((llvm::vfs::Status *)a3))
        v16 = 21;
      else
        v16 = 20;
      std::generic_category();
    }
    else
    {
      std::system_category();
      v16 = 0;
    }
    v15 = 0;
  }
  return v15 | v16;
}

_QWORD *sub_22F1D2E60(const void *a1, size_t a2, __int16 a3, unsigned int a4, uint64_t a5, llvm::StringMapImpl *a6)
{
  _QWORD *result;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  result = (_QWORD *)sub_22F1D40A0((uint64_t *)a5, a4);
  v13 = (int)result;
  if (((a4 & 0x800) == 0 || (*(_QWORD *)a5 & 0x10) == 0 || *(_DWORD *)(a5 + 192) >= 0xB532B80u)
    && ((a4 & 0x1000) == 0 || (*(_DWORD *)(a5 + 52) & 0x40000000) == 0)
    && ((a4 >> 28) & ((*(_BYTE *)(a5 + 104) & 0x20) >> 5) & 1) == 0
    && (_DWORD)result)
  {
    result = (_QWORD *)sub_22E3CB704(a6, a1, a2);
    v14 = a3 & 0x1FF;
    if (v13 == 3)
      v14 = 5;
    v15 = v14 | ((unint64_t)(v13 == 1) << 27) | *result & 0xFFFFFFFFF7FFFE00;
    if (v13 == 1)
    {
      v16 = v15 | 0x80000000;
      v17 = v16 & 0xFFFFFFFFEFFFFFFFLL;
    }
    else
    {
      v16 = v15 & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)((v15 & 0x83A000000) != 0) << 31);
      v17 = v16 & 0xFFFFFFFFEFFFFFFFLL | ((unint64_t)(v13 == 3) << 28);
      if (v13 == 3)
      {
        v18 = v17 | 0x80000000;
LABEL_17:
        *result = v18;
        return result;
      }
    }
    v19 = (v16 >> 5) & 0x80000000;
    if ((v17 & 0x83A000000) != 0)
      v19 = 0x80000000;
    v18 = v19 | v17 & 0xFFFFFFFF7FFFFFFFLL;
    goto LABEL_17;
  }
  return result;
}

BOOL sub_22F1D2F98(_DWORD *a1, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  int v4;

  switch(*a1 & 0x1FF)
  {
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x75:
    case 0x77:
    case 0x78:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12F:
    case 0x130:
    case 0x131:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x161:
    case 0x162:
    case 0x166:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x183:
    case 0x184:
    case 0x185:
    case 0x187:
      v2 = 2;
      return (v2 - 1) < 2;
    case 0x5C:
      v3 = a2;
      v4 = 11;
      goto LABEL_37;
    case 0x62:
      v3 = a2;
      v4 = 1;
      goto LABEL_37;
    case 0x72:
      v3 = a2;
      v4 = 536868863;
      goto LABEL_37;
    case 0x73:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xC2:
      v3 = a2;
      v4 = 128;
      goto LABEL_37;
    case 0x74:
    case 0x76:
    case 0x79:
      v3 = a2;
      v4 = 536864767;
      goto LABEL_37;
    case 0x7F:
      v3 = a2;
      v4 = 10;
      goto LABEL_37;
    case 0x80:
    case 0x88:
    case 0x96:
      v3 = a2;
      v4 = 32;
      goto LABEL_37;
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0xB8:
    case 0xC1:
    case 0xD7:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x106:
    case 0x107:
    case 0x108:
    case 0x109:
    case 0x10A:
    case 0x10B:
    case 0x10C:
    case 0x10D:
    case 0x10E:
    case 0x10F:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x113:
    case 0x114:
    case 0x115:
    case 0x116:
    case 0x117:
      v3 = a2;
      v4 = 2;
      goto LABEL_37;
    case 0x9C:
      v3 = a2;
      v4 = 0x2000;
      goto LABEL_37;
    case 0x9D:
    case 0x9E:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA6:
      v3 = a2;
      v4 = 4;
      goto LABEL_37;
    case 0x9F:
    case 0xA0:
      v3 = a2;
      v4 = 2052;
      goto LABEL_37;
    case 0xA5:
      v3 = a2;
      v4 = 8388612;
      goto LABEL_37;
    case 0xA7:
    case 0xA8:
      v3 = a2;
      v4 = 2162688;
      goto LABEL_37;
    case 0xA9:
    case 0xAA:
    case 0xAB:
      v3 = a2;
      v4 = 2621440;
      goto LABEL_37;
    case 0xAC:
    case 0xAD:
      v3 = a2;
      v4 = 0x100000;
      goto LABEL_37;
    case 0xAE:
    case 0xAF:
      v3 = a2;
      v4 = 0x200000;
      goto LABEL_37;
    case 0xB0:
      v3 = a2;
      v4 = 0x8000;
      goto LABEL_37;
    case 0xCF:
      v3 = a2;
      v4 = 8;
      goto LABEL_37;
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x180:
    case 0x181:
    case 0x182:
      v3 = a2;
      v4 = 16;
      goto LABEL_37;
    case 0x118:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x123:
    case 0x124:
    case 0x125:
    case 0x13E:
    case 0x13F:
    case 0x140:
    case 0x141:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
      v3 = a2;
      v4 = 0x8000000;
      goto LABEL_37;
    case 0x12E:
    case 0x142:
    case 0x143:
    case 0x144:
    case 0x145:
      v3 = a2;
      v4 = 0;
      goto LABEL_37;
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x14A:
    case 0x14B:
    case 0x14C:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x153:
    case 0x154:
    case 0x155:
    case 0x156:
    case 0x157:
    case 0x158:
    case 0x159:
    case 0x15A:
    case 0x15B:
      v3 = a2;
      v4 = 4194816;
      goto LABEL_37;
    case 0x146:
    case 0x147:
    case 0x148:
    case 0x149:
      v3 = a2;
      v4 = 0x4000000;
      goto LABEL_37;
    case 0x14D:
      v3 = a2;
      v4 = 138412546;
      goto LABEL_37;
    case 0x14E:
      v3 = a2;
      v4 = 4457024;
      goto LABEL_37;
    case 0x15C:
      v3 = a2;
      v4 = 0x400000;
      goto LABEL_37;
    case 0x163:
    case 0x165:
      v3 = a2;
      v4 = 262208;
      goto LABEL_37;
    case 0x164:
      v3 = a2;
      v4 = 64;
      goto LABEL_37;
    case 0x167:
      v3 = a2;
      v4 = 0x4000;
      goto LABEL_37;
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
      v3 = a2;
      v4 = 0x20000;
      goto LABEL_37;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
      v3 = a2;
      v4 = 272;
      goto LABEL_37;
    case 0x186:
      v3 = a2;
      v4 = 0x1000000;
      goto LABEL_37;
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
      v3 = a2;
      v4 = 0x2000000;
LABEL_37:
      v2 = sub_22F1D40A0(v3, v4);
      break;
    default:
      v2 = 0;
      break;
  }
  return (v2 - 1) < 2;
}

uint64_t sub_22F1D31A0(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _BYTE *v3;
  unsigned int v4;
  int v6;

  v2 = *(_DWORD **)(a1 + 16);
  v4 = *v2;
  v3 = v2 + 4;
  if (v4 < 2uLL)
    return 0;
  if (*v3 == 95)
  {
    v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 17);
    if (v6 == 95)
    {
      return 3;
    }
    else if ((v6 - 65) >= 0x1A)
    {
      return 1;
    }
    else
    {
      return 4;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 1) & 1) == 0 || llvm::StringRef::find() == -1)
      return 0;
    return 5;
  }
}

_BYTE *sub_22F1D3238(uint64_t a1)
{
  int *v1;
  _BYTE *result;
  unsigned int v3;
  int v4;
  unint64_t first_not_of;
  unint64_t v7;
  int *v8;
  unint64_t v9;

  v1 = *(int **)(a1 + 16);
  v3 = *v1;
  result = v1 + 4;
  v8 = v1 + 4;
  v9 = v3;
  if (v3 >= 2uLL && *result == 95)
  {
    v4 = *((unsigned __int8 *)v1 + 17);
    if (v4 == 95 || (v4 - 65) <= 0x19)
    {
      first_not_of = llvm::StringRef::find_first_not_of((llvm::StringRef *)&v8);
      if (first_not_of >= v9)
        v7 = v9;
      else
        v7 = first_not_of;
      return (char *)v8 + v7;
    }
  }
  return result;
}

uint64_t sub_22F1D32AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  BOOL v4;
  unsigned int v5;
  int v6;
  int v7;
  _BOOL4 v9;
  int v10;
  int v11;
  _BOOL4 v13;
  int v14;
  int v15;
  _BOOL4 v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v1 < 2u)
    return 0;
  result = 0;
  v3 = (*(_BYTE *)(v1 + 16) + *(_BYTE *)(v1 + 18) + 30) & 0x1F | (32 * *(_DWORD *)v1);
  if (v3 <= 199)
  {
    if (v3 > 149)
    {
      if (v3 >= 171)
      {
        if (v3 > 171)
        {
          switch(v3)
          {
            case 183:
              v4 = (*(_DWORD *)(v1 + 16) ^ 0x65646E75 | *(unsigned __int8 *)(v1 + 20) ^ 0x66) == 0;
              v5 = 13;
              break;
            case 172:
              v4 = (*(_DWORD *)(v1 + 16) ^ 0x6E656469 | *(unsigned __int8 *)(v1 + 20) ^ 0x74) == 0;
              v5 = 20;
              break;
            case 181:
              v4 = (*(_DWORD *)(v1 + 16) ^ 0x6F727265 | *(unsigned __int8 *)(v1 + 20) ^ 0x72) == 0;
              v5 = 15;
              break;
            default:
              return result;
          }
          goto LABEL_6;
        }
        v10 = *(_DWORD *)(v1 + 16);
        v11 = *(unsigned __int8 *)(v1 + 20);
        v13 = v10 == 1701078633 && v11 == 102;
        return (2 * v13);
      }
      else
      {
        if (v3 != 167)
        {
          if (v3 == 150)
          {
            v4 = *(_DWORD *)(v1 + 16) == 1702063205;
            v5 = 7;
          }
          else
          {
            if (v3 != 152)
              return result;
            v4 = *(_DWORD *)(v1 + 16) == 1701734764;
            v5 = 14;
          }
          goto LABEL_6;
        }
        v14 = *(_DWORD *)(v1 + 16);
        v15 = *(unsigned __int8 *)(v1 + 20);
        v17 = v14 == 1768189541 && v15 == 102;
        return (8 * v17);
      }
    }
    else
    {
      switch(v3)
      {
        case 71:
          return *(unsigned __int16 *)(v1 + 16) == 26217;
        case 140:
          return 4 * (*(_DWORD *)(v1 + 16) == 1718185061);
        case 148:
          v4 = *(_DWORD *)(v1 + 16) == 1935893363;
          v5 = 21;
LABEL_6:
          if (v4)
            return v5;
          else
            return 0;
      }
    }
  }
  else
  {
    if (v3 > 230)
    {
      if (v3 > 393)
      {
        if (v3 <= 517)
        {
          switch(v3)
          {
            case 493:
              v4 = (*(_QWORD *)(v1 + 16) ^ 0x7461766972705F5FLL | *(_QWORD *)(v1 + 23) ^ 0x6F7263616D5F6574) == 0;
              v5 = 25;
              break;
            case 394:
              v4 = (*(_QWORD *)(v1 + 16) ^ 0x5F6564756C636E69 | *(unsigned int *)(v1 + 24) ^ 0x7478656ELL) == 0;
              v5 = 18;
              break;
            case 461:
              v4 = (*(_QWORD *)(v1 + 16) ^ 0x63696C6275705F5FLL | *(_QWORD *)(v1 + 22) ^ 0x6F7263616D5F6369) == 0;
              v5 = 24;
              break;
            default:
              return result;
          }
        }
        else
        {
          if (v3 != 518)
            return result;
          v4 = (*(_QWORD *)(v1 + 16) ^ 0x64756C636E695F5FLL | *(_QWORD *)(v1 + 24) ^ 0x736F7263616D5F65) == 0;
          v5 = 11;
        }
      }
      else
      {
        switch(v3)
        {
          case 231:
            v4 = (*(_DWORD *)(v1 + 16) ^ 0x6E726177 | *(_DWORD *)(v1 + 19) ^ 0x676E696E) == 0;
            v5 = 19;
            goto LABEL_6;
          case 232:
            v4 = (*(_DWORD *)(v1 + 16) ^ 0x69666564 | *(_DWORD *)(v1 + 19) ^ 0x64656E69) == 0;
            v5 = 9;
            goto LABEL_6;
          case 233:
          case 235:
            return result;
          case 234:
            v4 = (*(_DWORD *)(v1 + 16) ^ 0x6C636E69 | *(_DWORD *)(v1 + 19) ^ 0x6564756C) == 0;
            v5 = 10;
            goto LABEL_6;
          case 236:
            v4 = (*(_DWORD *)(v1 + 16) ^ 0x66696C65 | *(_DWORD *)(v1 + 19) ^ 0x66656466) == 0;
            v5 = 5;
            goto LABEL_6;
          default:
            if (v3 == 268)
            {
              v4 = *(_QWORD *)(v1 + 16) == 0x6665646E66696C65;
              v5 = 6;
            }
            else
            {
              if (v3 != 276)
                return result;
              v4 = *(_QWORD *)(v1 + 16) == 0x7472657373616E75;
              v5 = 23;
            }
            break;
        }
      }
      goto LABEL_6;
    }
    if (v3 == 200)
    {
      v4 = (*(_DWORD *)(v1 + 16) ^ 0x69666564 | *(unsigned __int16 *)(v1 + 20) ^ 0x656E) == 0;
      v5 = 12;
      goto LABEL_6;
    }
    switch(v3)
    {
      case 207:
        v6 = *(_DWORD *)(v1 + 16);
        v7 = *(unsigned __int16 *)(v1 + 20);
        v9 = v6 == 1734439536 && v7 == 24941;
        result = (16 * v9);
        break;
      case 210:
        v4 = (*(_DWORD *)(v1 + 16) ^ 0x65737361 | *(unsigned __int16 *)(v1 + 20) ^ 0x7472) == 0;
        v5 = 22;
        goto LABEL_6;
      case 213:
        v4 = (*(_DWORD *)(v1 + 16) ^ 0x646E6669 | *(unsigned __int16 *)(v1 + 20) ^ 0x6665) == 0;
        v5 = 3;
        goto LABEL_6;
      case 215:
        v4 = (*(_DWORD *)(v1 + 16) ^ 0x6F706D69 | *(unsigned __int16 *)(v1 + 20) ^ 0x7472) == 0;
        v5 = 17;
        goto LABEL_6;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_22F1D3804(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  BOOL v12;
  double v13;
  FILE **v14;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(unsigned int ***)a1;
  if ((_DWORD)v2)
  {
    while (!*v3 || *v3 + 2 == 0)
      ++v3;
  }
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1 + 8 * v2;
  if (v3 == (unsigned int **)v6)
  {
    v7 = 0;
    v13 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = *v3;
    do
    {
      v10 = *v9;
      do
      {
        v11 = v3[1];
        ++v3;
        v9 = v11;
        if (v11)
          v12 = v9 + 2 == 0;
        else
          v12 = 1;
      }
      while (v12);
      v8 += v10;
      if (v7 <= v10)
        v7 = v10;
    }
    while (v3 != (unsigned int **)v6);
    v13 = (double)v8;
  }
  v14 = (FILE **)MEMORY[0x24BDAC8D8];
  fwrite("\n*** Identifier Table Stats:\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  fprintf(*v14, "# Identifiers:   %d\n", v5);
  fprintf(*v14, "# Empty Buckets: %d\n", v2 - v5);
  fprintf(*v14, "Hash density (#identifiers per bucket): %f\n", (double)v5 / (double)v2);
  fprintf(*v14, "Ave identifier length: %f\n", v13 / (double)v5);
  fprintf(*v14, "Max identifier length: %d\n", v7);
  return sub_22E9006C4(a1 + 24);
}

uint64_t sub_22F1D3958(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  const void *v13;
  size_t v14;
  unsigned int v15;

  v3 = *a1;
  v4 = *a1 & 7;
  if (v4 >= 2)
  {
    if ((_DWORD)v4 == 2)
      v5 = 1;
    else
      v5 = (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8) - 3);
  }
  else
  {
    v5 = 0;
  }
  if (a3 != v5)
    return 0;
  if ((_DWORD)a3)
  {
    v6 = 0;
    v7 = *a1 & 7;
    v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    v9 = (_QWORD *)(a2 + 8);
    v10 = 8 * a3;
    do
    {
      v11 = v8;
      if (v7 == 7)
        v11 = *(_QWORD *)(v8 + v6 + 16);
      if (v11)
      {
        v12 = *(unsigned int **)(v11 + 16);
        v15 = *v12;
        v13 = v12 + 4;
        v14 = v15;
        if (v15 != *v9 || v14 && memcmp(v13, (const void *)*(v9 - 1), v14))
          return 0;
      }
      else if (*v9)
      {
        return 0;
      }
      v9 += 2;
      v6 += 8;
    }
    while (v10 != v6);
  }
  return 1;
}

void sub_22F1D3A38(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int *v7;
  size_t v8;
  const void *v9;
  unsigned int v10;
  unsigned int *v11;
  std::string::size_type v12;
  const void *v13;
  unsigned int v14;
  std::string *p_dst;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::string *v19;
  int *v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  const void *v27;
  size_t v28;
  unsigned int v29;
  size_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE v35[24];
  unint64_t v36;
  void *v37;
  uint64_t v38;
  std::string __dst;
  _QWORD v40[33];

  v40[32] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (!*a1)
  {
    a2[23] = 15;
    strcpy(a2, "<null selector>");
    return;
  }
  v4 = v3 & 7;
  if (v4 != 7)
  {
    v5 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((~*(_DWORD *)a1 & 7) != 0)
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    else
      v6 = 0;
    if (v4 >= 2 && (v4 == 2 || *v5 != 3))
    {
      if (!v6)
      {
        a2[23] = 1;
        *(_WORD *)a2 = 58;
        return;
      }
      v11 = *(unsigned int **)(v6 + 16);
      v14 = *v11;
      v13 = v11 + 4;
      v12 = v14;
      if (v14 >= 0x17uLL)
      {
        if ((v12 | 7) == 0x17)
          v18 = (v12 & 0xFFFFFFF8) + 8;
        else
          v18 = v12 | 7;
        p_dst = (std::string *)operator new(v18 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v18 - 0x7FFFFFFFFFFFFFFFLL;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
        p_dst = &__dst;
        if (!v12)
        {
LABEL_30:
          p_dst->__r_.__value_.__s.__data_[v12] = 0;
          v19 = std::string::append(&__dst, ":");
          *(std::string *)a2 = *v19;
          v19->__r_.__value_.__r.__words[0] = 0;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          return;
        }
      }
      memmove(p_dst, v13, v12);
      goto LABEL_30;
    }
    v7 = *(unsigned int **)(v6 + 16);
    v10 = *v7;
    v9 = v7 + 4;
    v8 = v10;
    if (v10 >= 0x17uLL)
    {
      if ((v8 | 7) == 0x17)
        v16 = (v8 & 0xFFFFFFF8) + 8;
      else
        v16 = v8 | 7;
      v17 = (char *)operator new(v16 + 1);
      *((_QWORD *)a2 + 1) = v8;
      *((_QWORD *)a2 + 2) = v16 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)a2 = v17;
      a2 = v17;
    }
    else
    {
      a2[23] = v8;
      if (!v8)
        goto LABEL_22;
    }
    memmove(a2, v9, v8);
LABEL_22:
    a2[v8] = 0;
    return;
  }
  v20 = (int *)(v3 & 0xFFFFFFFFFFFFFFF8);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v35, (uint64_t)&__dst);
  v22 = *v20;
  v21 = v20 + 4;
  v23 = (v22 - 3);
  if (v22 != 3)
  {
    v24 = 8 * v23;
    do
    {
      v25 = (char *)v37;
      if (*(_QWORD *)v21)
      {
        v26 = *(unsigned int **)(*(_QWORD *)v21 + 16);
        v29 = *v26;
        v27 = v26 + 4;
        v28 = v29;
        if (v29 <= v36 - (unint64_t)v37)
        {
          if (v28)
          {
            memcpy(v37, v27, v28);
            v25 = (char *)v37 + v28;
            v37 = (char *)v37 + v28;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v35, (const char *)v27);
          v25 = (char *)v37;
        }
      }
      if ((unint64_t)v25 >= v36)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v35);
      }
      else
      {
        v37 = v25 + 1;
        *v25 = 58;
      }
      v21 += 2;
      v24 -= 8;
    }
    while (v24);
  }
  v30 = *(_QWORD *)(v38 + 8);
  if (v30 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v31 = *(const void **)v38;
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v34 = (char *)operator new(v32 + 1);
    *((_QWORD *)a2 + 1) = v30;
    *((_QWORD *)a2 + 2) = v33 | 0x8000000000000000;
    *(_QWORD *)a2 = v34;
    a2 = v34;
    goto LABEL_50;
  }
  a2[23] = v30;
  if (v30)
LABEL_50:
    memmove(a2, v31, v30);
  a2[v30] = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v35);
  if (__dst.__r_.__value_.__l.__data_ != (std::string::pointer)v40)
    free(__dst.__r_.__value_.__l.__data_);
}

void sub_22F1D3D6C(uint64_t *a1, llvm::raw_ostream *a2)
{
  const char *p_p;
  void *__p;
  char v5;

  sub_22F1D3A38(a1, (char *)&__p);
  if (v5 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  llvm::raw_ostream::write(a2, p_p);
  if (v5 < 0)
    operator delete(__p);
}

uint64_t sub_22F1D3DD0(uint64_t a1)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  __int16 v9;

  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((~(_BYTE)a1 & 7) == 0)
    v1 = *(_QWORD *)(v1 + 16);
  if (v1)
  {
    v2 = *(unsigned int **)(v1 + 16);
    v4 = *v2;
    v1 = (unint64_t)(v2 + 4);
    v3 = v4;
  }
  else
  {
    v3 = 0;
  }
  v5 = *(unsigned __int8 *)(v1 + 3);
  if ((word_22F4ADB24[v5] & 0x20) != 0)
    LOBYTE(v5) = v5 + 32;
  v6 = 4;
  if (v3 < 4)
    v6 = v3;
  v8[0] = v5;
  v8[2] = v1 + v6;
  v8[3] = v3 - v6;
  v9 = 1287;
  return llvm::Twine::str((llvm::Twine *)v8);
}

uint64_t sub_22F1D3E5C(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  if (a2 <= 1)
    return *a3 | (a2 + 1);
  v5 = *a1;
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22F1D3F9C((uint64_t)v13, a3, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 8;
  }
  else
  {
    v10 = sub_22E3CD3D4(v5 + 16, 8 * a2 + 16, 3);
    v11 = 0;
    *(_DWORD *)v10 = a2 + 3;
    *(_QWORD *)(v10 + 8) = 0;
    do
    {
      *(_QWORD *)(v10 + v11 * 8 + 16) = a3[v11];
      ++v11;
    }
    while (a2 != v11);
    v12 = v10;
    llvm::FoldingSetBase::InsertNode();
    v7 = v12;
  }
  v8 = v7 | 7;
  if (v13[0] != v14)
    free(v13[0]);
  return v8;
}

uint64_t sub_22F1D3F9C(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v4 = result;
  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v11 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v11;
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a3;
  v6 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v6;
  if (a3)
  {
    v7 = a3;
    do
    {
      v8 = *a2;
      if (v6 >= *(_DWORD *)(v4 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = v8;
      v9 = *(_DWORD *)(v4 + 12);
      v10 = *(_DWORD *)(v4 + 8) + 1;
      *(_DWORD *)(v4 + 8) = v10;
      if (v10 >= v9)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v4 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(v4 + 8) + 1;
      *(_DWORD *)(v4 + 8) = v6;
      ++a2;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F1D40A0(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 == 268429311)
    return 2;
  v2 = *a1;
  if ((a2 & 2) != 0 && (v2 & 0x100) != 0)
    return 2;
  if ((a2 & 4) != 0 && (v2 & 0x200) != 0
    || (a2 & 0x200000) != 0 && (v2 & 0x1000) != 0
    || (a2 & 1) != 0 && (v2 & 1) != 0)
  {
    return 2;
  }
  if ((a2 & 8) != 0 && (v2 & 0x100000000) != 0 || (a2 & 0x10) != 0 && (v2 & 0x20) != 0)
    return 1;
  if ((a2 & 0x800000) != 0 && (v2 & 0x10) != 0)
    return 2;
  if ((a2 & 0x100) != 0 && (v2 & 0x80) != 0)
    return 1;
  if ((a2 & 0x20) != 0 && (v2 & 0x800000) != 0)
    return 2;
  if ((a2 & 0x4000) != 0 && (v2 & 0x1000000) != 0)
    return 2;
  if ((a2 & 0x2000) != 0 && (v2 & 0x2000000) != 0)
    return 2;
  if ((a2 & 0x8000) != 0 && (v2 & 0x4000000) != 0)
    return 2;
  if ((a2 & 0x4000000) != 0 && (a1[8] & 0x400000000) != 0)
    return 2;
  v4 = a1[1];
  if ((a2 & 0x40) != 0 && (v4 & 0x40000000000) != 0)
    return 2;
  if ((a2 & 0x40000) != 0 && (v4 & 0x80000000000) != 0)
    return 2;
  v5 = a1[7];
  if ((*((_DWORD *)a1 + 13) & 0x40000000) != 0 && (a2 & 0x200) != 0 && (v5 & 0x100000000) == 0)
    return 2;
  if ((a2 & 0x400000) != 0 && (v5 & 0x100000000) != 0)
    return 2;
  v6 = *(uint64_t *)((char *)a1 + 100);
  if ((a2 & 0x8000000) != 0 && (v6 & 0x2000000000) != 0)
    return 2;
  if ((a2 & 0x80) != 0 && (v2 & 0x100) == 0
    || (a2 & 0x400) != 0 && (v2 & 2) != 0
    || (a2 & 0x20000) != 0 && (v2 & 0x4000) != 0
    || (a2 & 0x10000) != 0 && (v2 & 0x1000) != 0
    || (a2 & 0x80000) != 0 && (v4 & 0x400000000000000) != 0
    || (a2 & 0x100000) != 0 && (*(uint64_t *)((char *)a1 + 20) & 0x400000000000) != 0)
  {
    return 2;
  }
  if ((a2 & 0x200006) != 0 && (v2 & 0x100) != 0 || (a2 & 0x8000) != 0 && (*a1 & 0x1100) == 0x100)
    return 3;
  if ((v6 & 0xC00000000) == 0 || (a2 & 0x1000000) == 0)
    return 0;
  else
    return 2;
}

uint64_t sub_22F1D41EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  sub_22F1D3F9C(a5, (uint64_t *)(v5 + 16), *(_DWORD *)v5 - 3);
  return llvm::FoldingSetNodeID::operator==();
}

int8x16_t sub_22F1D4230(uint64_t a1)
{
  unint64_t v1;
  int8x16_t result;
  unint64_t v3;
  __int16 v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 252) = 58;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_BYTE *)(a1 + 700) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 681) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_QWORD *)(a1 + 824) = 0;
  v1 = *(_QWORD *)a1 & 0xFFFFFFFE00000000 | 0x1A0040000;
  *(_BYTE *)(a1 + 18) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = 0xA18020000000000;
  LOBYTE(v1) = *(_BYTE *)(a1 + 28) & 0xC0;
  *(_QWORD *)(a1 + 20) = 0x1A008E000000000;
  *(_BYTE *)(a1 + 28) = v1;
  LOBYTE(v1) = *(_BYTE *)(a1 + 40) & 0xFE;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = v1;
  LODWORD(v1) = *(_DWORD *)(a1 + 52) & 0x80000000 | 0xC00000;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 52) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 56), (int8x16_t)xmmword_22F549670);
  *(int8x16_t *)(a1 + 56) = result;
  v3 = *(_QWORD *)(a1 + 72) & 0xFFFFFF8000000000 | 0x100000000;
  v4 = *(_WORD *)(a1 + 96) & 0xE000 | 0x200;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 1024;
  *(_QWORD *)(a1 + 72) = v3;
  *(_WORD *)(a1 + 96) = v4;
  v5 = *(_DWORD *)(a1 + 244);
  v6 = *(_DWORD *)(a1 + 240) & 0x80000000;
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a1 + 100) & 0xFFFFFF0000000000 | 0x400;
  v7 = *(_QWORD *)(a1 + 132) & 0xFFFFFF8000000000;
  *(_QWORD *)(a1 + 124) = 0x8000000002000;
  *(_QWORD *)(a1 + 116) = 0x1673000000000;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 132) = v7;
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 150) << 16;
  *(_DWORD *)(a1 + 240) = v6;
  *(_DWORD *)(a1 + 244) = v5 & 0x80000000 | 0x4900610;
  *(_WORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0x100380900000000;
  *(_BYTE *)(a1 + 150) = (v7 & 0xE00000) >> 16;
  LOBYTE(v7) = *(_BYTE *)(a1 + 160) & 0xF0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = v7;
  LOBYTE(v7) = *(_BYTE *)(a1 + 180) & 0xFE;
  *(_QWORD *)(a1 + 172) = 0x10000000000200;
  *(_QWORD *)(a1 + 164) = 0x40000000100;
  *(_BYTE *)(a1 + 180) = v7;
  v8 = *(_QWORD *)(a1 + 200);
  v9 = *(_QWORD *)(a1 + 192) & 0xFFF8000000000000;
  *(_QWORD *)(a1 + 184) = 256;
  *(_QWORD *)(a1 + 192) = v9;
  v10 = v8 & 0xFFFFFFF000000000 | 0x400000000;
  v11 = *(_QWORD *)(a1 + 208) & 0xFFFFFF8000000000;
  *(_QWORD *)(a1 + 200) = v10;
  *(_QWORD *)(a1 + 208) = v11;
  v13 = *(_QWORD *)(a1 + 224);
  v12 = *(_QWORD *)(a1 + 232);
  *(_BYTE *)(a1 + 250) = 1;
  *(_WORD *)(a1 + 248) = 16386;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = v13 & 0xFFFFFFFE00000000;
  *(_QWORD *)(a1 + 232) = v12 & 0x8000000000000000 | 0x1000000000000080;
  return result;
}

void sub_22F1D4458(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t k;

  v2 = *(_QWORD *)(a1 + 8) & 0xFFFFFFB6FFFFFFFFLL;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFF9FF87FFFLL | 0x20040000;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_DWORD *)(a1 + 244);
  LODWORD(v2) = *(_DWORD *)(a1 + 240) & 0xFFFFFF1F;
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a1 + 20) & 0xFE50EB7FFFFFFFFFLL | 0x1A0008000000000;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFF807FFF | 0x400000;
  v4 = *(_QWORD *)(a1 + 116) & 0xFF1BFFFCFFFFFFFFLL;
  *(_QWORD *)(a1 + 132) &= 0xFFFFFFF7FFFFFEFBLL;
  *(_QWORD *)(a1 + 116) = v4;
  LODWORD(v4) = *(unsigned __int16 *)(a1 + 148) | (*(unsigned __int8 *)(a1 + 150) << 16);
  v5 = *(_QWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 240) = v2;
  *(_DWORD *)(a1 + 244) = v3 & 0xFFFFF803 | 0x610;
  *(_QWORD *)(a1 + 140) = v5 & 0xF60E3E01FFFFFFFFLL | 0x100000800000000;
  *(_WORD *)(a1 + 148) = v4 & 0xEFBF;
  *(_BYTE *)(a1 + 150) = (v4 & 0xF9EFBF) >> 16;
  v6 = *(_BYTE *)(a1 + 180) & 0xFE;
  *(_QWORD *)(a1 + 164) = 0x40000000100;
  *(_QWORD *)(a1 + 172) = 0x10000000000200;
  *(_BYTE *)(a1 + 180) = v6;
  v7 = *(_QWORD *)(a1 + 192) & 0xFFFFDFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 184) = 256;
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 208) &= 0xFFFFFFF1FFFFFFFFLL;
  *(_QWORD *)(a1 + 232) &= ~0x400000000uLL;
  v8 = *(_QWORD *)(a1 + 280);
  for (i = *(_QWORD *)(a1 + 288); i != v8; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *(_QWORD *)(a1 + 288) = v8;
  v10 = *(_QWORD *)(a1 + 304);
  for (j = *(_QWORD *)(a1 + 312); j != v10; j -= 24)
  {
    if (*(char *)(j - 1) < 0)
      operator delete(*(void **)(j - 24));
  }
  *(_QWORD *)(a1 + 312) = v10;
  v12 = *(_QWORD *)(a1 + 328);
  for (k = *(_QWORD *)(a1 + 336); k != v12; k -= 24)
  {
    if (*(char *)(k - 1) < 0)
      operator delete(*(void **)(k - 24));
  }
  *(_QWORD *)(a1 + 336) = v12;
  if (*(char *)(a1 + 519) < 0)
  {
    **(_BYTE **)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 504) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 496) = 0;
    *(_BYTE *)(a1 + 519) = 0;
  }
  *(_BYTE *)(a1 + 704) = 0;
}

uint64_t sub_22F1D463C(uint64_t a1, void *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  char v7;
  BOOL v8;
  const void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 576);
  v4 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 584) - v3) >> 3);
  if (!(_DWORD)v4)
    return 0;
  while (1)
  {
    v7 = *(_BYTE *)(v3 + 23);
    v8 = v7 < 0;
    v9 = v7 >= 0 ? (const void *)v3 : *(const void **)v3;
    v10 = v7 & 0x7F;
    if (v8)
      v10 = *(_QWORD *)(v3 + 8);
    if (__n == v10 && (!__n || !memcmp(__s1, v9, __n)))
      break;
    v3 += 24;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t sub_22F1D46D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if ((result & 0x100000000) != 0)
  {
    if (*(_DWORD *)(a1 + 64) == 100)
      return 200;
    else
      return 300;
  }
  return result;
}

uint64_t sub_22F1D46F8(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(result + 600);
  v2 = (_QWORD *)(result + 608);
  if (v1 != (_QWORD *)(result + 608))
  {
    do
    {
      result = llvm::sys::path::replace_path_prefix();
      if ((result & 1) != 0)
        break;
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return result;
}

void sub_22F1D47B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  size_t v5;
  uint64_t *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  const char *p_p;
  _QWORD v13[2];
  void *__p;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v17 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v16 = MEMORY[0x24BED83D8] + 16;
  v24 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v3 = *(_QWORD *)(a1 + 56);
  if ((v3 & 0x100000000) != 0)
    v4 = "C++ for OpenCL";
  else
    v4 = "OpenCL C";
  if ((v3 & 0x100000000) != 0)
    v5 = 14;
  else
    v5 = 8;
  if (v5 <= v19 - (uint64_t)v20)
  {
    v8 = &v20;
    memcpy(v20, v4, v5);
    v7 = &v20[v5];
    v20 += v5;
    v6 = &v16;
  }
  else
  {
    v6 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v16, v4);
    v8 = (char **)(v6 + 4);
    v7 = (char *)v6[4];
  }
  if ((unint64_t)(v6[3] - (_QWORD)v7) > 8)
  {
    v7[8] = 32;
    *(_QWORD *)v7 = *(_QWORD *)" version ";
    *v8 += 9;
  }
  else
  {
    v6 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v6, " version ");
  }
  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 0x100000000) == 0)
    goto LABEL_14;
  v10 = *(_DWORD *)(a1 + 64);
  if (v10 == 100)
  {
    LODWORD(v9) = 100;
LABEL_14:
    v11 = ((int)v9 / 100) | ((unint64_t)((((103 * ((int)v9 % 100)) >> 15) & 1)
                                                            + ((103 * ((int)v9 % 100)) >> 10)) << 32) | 0x8000000000000000;
    goto LABEL_16;
  }
  v11 = (v10 / 100);
LABEL_16:
  v13[0] = v11;
  v13[1] = 0;
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)v13);
  if (v15 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  llvm::raw_ostream::write((llvm::raw_ostream *)v6, p_p);
  if (v15 < 0)
    operator delete(__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
}

uint64_t sub_22F1D49B4(uint64_t a1, int a2, void **a3, _QWORD *a4, int a5, uint64_t a6)
{
  int v7;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  void *v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  _BOOL4 v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  int64x2_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  __int128 v130;
  int64x2_t v131;
  BOOL v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned __int8 *AIRVersion;
  int64x2_t v140;
  unint64_t v141;
  _QWORD *v142;

  v7 = a5;
  if (a2 == 1)
  {
    v12 = 0x40000000;
  }
  else
  {
    if ((a2 - 5) > 1u)
      goto LABEL_6;
    v12 = 0x4000;
  }
  *(_QWORD *)a1 |= v12;
LABEL_6:
  if (a5 == 58)
  {
    sub_22F1D6FB0(a2);
    v7 = v13;
    if (a2 == 13 && a6 && v13 == 58)
    {
      *(_QWORD *)(a6 + 312) = 0x31F00000000;
      if (*(char *)(a6 + 311) < 0)
      {
        **(_BYTE **)(a6 + 288) = 0;
        *(_QWORD *)(a6 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a6 + 288) = 0;
        *(_BYTE *)(a6 + 311) = 0;
      }
      AIRVersion = (unsigned __int8 *)(a6 + 320);
      v140.i64[0] = 0;
      v140.i64[1] = a6;
      LOWORD(v141) = 1;
      *(_BYTE *)(a6 + 320) = 0;
      *(_DWORD *)(a6 + 664) = 0;
      v37 = *(unsigned int *)(a6 + 776);
      if ((_DWORD)v37)
      {
        v38 = *(_QWORD *)(a6 + 768);
        v39 = 56 * v37;
        do
        {
          if (*(char *)(v38 + v39 - 9) < 0)
            operator delete(*(void **)(v38 + v39 - 32));
          v39 -= 56;
        }
        while (v39);
      }
      *(_DWORD *)(a6 + 776) = 0;
      v40 = *((_BYTE *)a3 + 23);
      v41 = v40 < 0;
      if (v40 >= 0)
        v42 = a3;
      else
        v42 = *a3;
      v43 = v40 & 0x7F;
      if (v41)
        v44 = (size_t)a3[1];
      else
        v44 = v43;
      sub_22E3B89A8(&AIRVersion, v42, v44);
      return sub_22E3BB0B8((uint64_t)&AIRVersion);
    }
  }
  result = sub_22F1D5FAC(v7);
  *(_DWORD *)(a1 + 252) = v7;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)a1 & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)(*(_DWORD *)(result + 16) & 1) << 21);
  *(_QWORD *)a1 = v16;
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned int *)(result + 16) >> 1) & 1;
  *(_QWORD *)a1 = v17;
  v18 = v17 & 0xFFFFFFFFFFFFFFFDLL | (2 * (((unint64_t)*(unsigned int *)(result + 16) >> 2) & 1));
  *(_QWORD *)a1 = v18;
  v19 = v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((unint64_t)*(unsigned int *)(result + 16) >> 3) & 1));
  *(_QWORD *)a1 = v19;
  v20 = v19 & 0xFFFFFFFFFFFFFFF7 | (8 * (((unint64_t)*(unsigned int *)(result + 16) >> 4) & 1));
  *(_QWORD *)a1 = v20;
  v21 = *(unsigned int *)(result + 16);
  v22 = v20 & 0xFFFFFFFFFFFFFEFFLL | (((v21 >> 5) & 1) << 8);
  *(_QWORD *)a1 = v22;
  v23 = v22 & 0xFFFFFFFFFFFFFDFFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 6) & 1) << 9);
  *(_QWORD *)a1 = v23;
  v24 = v23 & 0xFFFFFFFFFFFFFBFFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 7) & 1) << 10);
  *(_QWORD *)a1 = v24;
  v25 = v24 & 0xFFFFFFFFFFFFF7FFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 8) & 1) << 11);
  *(_QWORD *)a1 = v25;
  v26 = v25 & 0xFFFFFFFFFFFFEFFFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 9) & 1) << 12);
  *(_QWORD *)a1 = v26;
  v27 = v26 & 0xFFFFFFFFFFFFDFFFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 10) & 1) << 13);
  *(_QWORD *)a1 = v27;
  v28 = v27 & 0xFFFFFFFF7FFFFFFFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 12) & 1) << 31);
  v29 = *(unsigned __int8 *)(a1 + 18);
  v30 = *(unsigned __int16 *)(a1 + 16);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v15 & 0xFFFFFFFF00000000;
  v31 = v15 & 0xFFFFFFF700000000 | ((((unint64_t)(*(_DWORD *)(result + 16) & 0x2000) >> 13) & 1) << 35);
  *(_QWORD *)(a1 + 8) = v31;
  v32 = v31 & 0xFFFFFFFE00000000 | ((((unint64_t)(*(_DWORD *)(result + 16) & 0x4000) >> 14) & 1) << 32);
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)a1 = v28 & 0xFFFFFFFFFDFFFFFFLL | ((((unint64_t)*(unsigned int *)(result + 16) >> 5) & 1) << 25);
  v33 = v32 & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(result + 16) & 0x800) << 23);
  *(_QWORD *)(a1 + 8) = v33;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a1 + 96) & 0xFFBF | ((a2 == 12) << 6);
  v34 = *(_DWORD *)(result + 16) & 0x8000;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xBFFFFFFF | (((v34 >> 15) & 1) << 30);
  switch(v7)
  {
    case 23:
      v36 = 100;
      goto LABEL_41;
    case 24:
      v36 = 110;
      goto LABEL_41;
    case 25:
      v36 = 120;
      goto LABEL_41;
    case 26:
      v36 = 200;
      goto LABEL_41;
    case 27:
      v36 = 300;
LABEL_41:
      *(_DWORD *)(a1 + 56) = v36;
LABEL_42:
      if (v34)
        goto LABEL_43;
      goto LABEL_93;
    case 28:
      v59 = 100;
      goto LABEL_60;
    case 29:
      v59 = 202100;
LABEL_60:
      *(_DWORD *)(a1 + 64) = v59;
      if (!v34)
        goto LABEL_93;
LABEL_43:
      v45 = (8 * (int)v21) & 0x100;
      v46 = v30 | (v29 << 16);
      *(_QWORD *)(a1 + 8) = v33 & 0xFFFFF3FF00000000;
      *(_WORD *)(a1 + 16) = v46;
      *(_BYTE *)(a1 + 18) = BYTE2(v46);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a1 + 244) & 0xFFFFFFF3 | 4;
      v47 = *(_QWORD *)(a1 + 56);
      v48 = *(_QWORD *)(a1 + 64);
      v49 = v47 & 0xFFFFFFFEFFFFFFFFLL | (v45 << 24);
      v50 = v47 == 200;
      if ((_DWORD)v45)
        v51 = v48 == 100;
      else
        v51 = v50;
      v52 = !v51;
      v53 = 0x200000000;
      if (v52)
        v53 = 0;
      v54 = v53 | v48 & 0xFFFFFFFCFFFFFFFFLL;
      v55 = 0x100000000;
      if (v52)
        v55 = 0;
      *(_QWORD *)(a1 + 56) = v49;
      *(_QWORD *)(a1 + 64) = v54 | v55;
      if ((*(_WORD *)(a1 + 148) & 0x400) == 0)
        goto LABEL_93;
      v56 = a4[2];
      v57 = (char *)a4[1];
      if ((*(_WORD *)(a1 + 148) & 0x800) != 0)
      {
        if ((unint64_t)v57 < v56)
        {
          strcpy(v57, "opencl-c-base.h");
          v58 = v57 + 24;
          v57[23] = 15;
          goto LABEL_92;
        }
        v65 = (char *)*a4;
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v57[-*a4] >> 3);
        v67 = v66 + 1;
        if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_237;
        if (0x5555555555555556 * ((uint64_t)(v56 - (_QWORD)v65) >> 3) > v67)
          v67 = 0x5555555555555556 * ((uint64_t)(v56 - (_QWORD)v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)v65) >> 3) >= 0x555555555555555)
          v63 = 0xAAAAAAAAAAAAAAALL;
        else
          v63 = v67;
        v142 = a4 + 2;
        if (v63)
        {
          if (v63 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_238;
          v64 = (char *)operator new(24 * v63);
        }
        else
        {
          v64 = 0;
        }
        v68 = &v64[24 * v66];
        strcpy(v68, "opencl-c-base.h");
        v68[23] = 15;
        if (v57 != v65)
        {
          v69 = &v64[24 * v66];
          do
          {
            v71 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v69 - 1) = *((_QWORD *)v57 - 1);
            *(_OWORD *)(v69 - 24) = v71;
            v69 -= 24;
            *((_QWORD *)v57 - 2) = 0;
            *((_QWORD *)v57 - 1) = 0;
            *((_QWORD *)v57 - 3) = 0;
            v57 -= 24;
          }
          while (v57 != v65);
          goto LABEL_89;
        }
      }
      else
      {
        if ((unint64_t)v57 < v56)
        {
          strcpy(v57, "opencl-c.h");
          v57[23] = 10;
          v58 = v57 + 24;
          goto LABEL_92;
        }
        v60 = (char *)*a4;
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v57[-*a4] >> 3);
        v62 = v61 + 1;
        if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_237;
        if (0x5555555555555556 * ((uint64_t)(v56 - (_QWORD)v60) >> 3) > v62)
          v62 = 0x5555555555555556 * ((uint64_t)(v56 - (_QWORD)v60) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)v60) >> 3) >= 0x555555555555555)
          v63 = 0xAAAAAAAAAAAAAAALL;
        else
          v63 = v62;
        v142 = a4 + 2;
        if (v63)
        {
          if (v63 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_238;
          v64 = (char *)operator new(24 * v63);
        }
        else
        {
          v64 = 0;
        }
        v68 = &v64[24 * v61];
        strcpy(v68, "opencl-c.h");
        v68[23] = 10;
        if (v57 != v60)
        {
          v69 = &v64[24 * v61];
          do
          {
            v70 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v69 - 1) = *((_QWORD *)v57 - 1);
            *(_OWORD *)(v69 - 24) = v70;
            v69 -= 24;
            *((_QWORD *)v57 - 2) = 0;
            *((_QWORD *)v57 - 1) = 0;
            *((_QWORD *)v57 - 3) = 0;
            v57 -= 24;
          }
          while (v57 != v60);
LABEL_89:
          v72 = *(int64x2_t *)a4;
          v56 = a4[2];
          goto LABEL_91;
        }
      }
      v72 = vdupq_n_s64((unint64_t)v57);
      v69 = v68;
LABEL_91:
      v58 = v68 + 24;
      *a4 = v69;
      a4[1] = v68 + 24;
      v140 = v72;
      a4[2] = &v64[24 * v63];
      v141 = v56;
      AIRVersion = (unsigned __int8 *)v72.i64[0];
      result = sub_22E3B8B94((uint64_t)&AIRVersion);
LABEL_92:
      a4[1] = v58;
LABEL_93:
      switch(v7)
      {
        case 30:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 1;
          goto LABEL_123;
        case 31:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_99;
        case 32:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_107;
        case 33:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_109;
        case 34:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_111;
        case 35:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_113;
        case 36:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_115;
        case 37:
          v73 = *(_QWORD *)(a1 + 100) | 0x6000000000;
          goto LABEL_117;
        case 38:
        case 39:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_99:
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 0x100000001;
          goto LABEL_123;
        case 40:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_107:
          *(_QWORD *)(a1 + 100) = v73;
          v75 = 1;
          goto LABEL_122;
        case 41:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_109:
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 2;
          goto LABEL_123;
        case 42:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_111:
          *(_QWORD *)(a1 + 100) = v73;
          v76 = 2;
          goto LABEL_120;
        case 43:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_113:
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 0x200000002;
          goto LABEL_123;
        case 44:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_115:
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 0x300000002;
          goto LABEL_123;
        case 45:
          v73 = *(_QWORD *)(a1 + 100) | 0xA000000000;
LABEL_117:
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 0x400000002;
          goto LABEL_123;
        case 46:
          v73 = *(_QWORD *)(a1 + 100) | 0x2000000000;
          *(_QWORD *)(a1 + 100) = v73;
          v74 = 3;
          goto LABEL_123;
        case 47:
          v73 = *(_QWORD *)(a1 + 100) | 0x2000000000;
          *(_QWORD *)(a1 + 100) = v73;
          v76 = 3;
LABEL_120:
          v74 = v76 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
          goto LABEL_123;
        case 48:
          v73 = *(_QWORD *)(a1 + 100) | 0x2000000000;
          *(_QWORD *)(a1 + 100) = v73;
          v75 = 3;
LABEL_122:
          v74 = v75 & 0xFFFF0000FFFFFFFFLL | 0x200000000;
LABEL_123:
          *(_QWORD *)(a1 + 108) = v74;
          if ((v73 & 0x2000000000) != 0)
            goto LABEL_124;
          goto LABEL_220;
        default:
          if ((*(_QWORD *)(a1 + 100) & 0x2000000000) == 0)
            goto LABEL_220;
LABEL_124:
          *(_DWORD *)(a1 + 244) = *(_DWORD *)(a1 + 244) & 0xFFFFFFF3 | 4;
          if (((_DWORD)a3[3] & 0xFFFFFFFE) == 0x30)
          {
            AIRVersion = (unsigned __int8 *)llvm::Triple::getAIRVersion((llvm::Triple *)a3);
            v140.i64[0] = v77;
            v137 = 0x8000000B00000001;
            v138 = 0;
            if (sub_22E3B38EC(&AIRVersion, &v137))
              *(_DWORD *)(a1 + 244) = *(_DWORD *)(a1 + 244) & 0xFFFFFFF3 | 8;
          }
          v78 = *(_QWORD *)(a1 + 116) & 0x7FFFFFFFLL | 0x80000000;
          AIRVersion = (unsigned __int8 *)(*(_QWORD *)(a1 + 108) | 0x8000000000000000);
          v140.i64[0] = v78;
          v137 = 0x8000000000000001;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0 && (*(_BYTE *)(a1 + 104) & 0x40) != 0)
            *(_QWORD *)(a1 + 116) |= 0x100000000uLL;
          v137 = 0x8000000100000001;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v79 = *(_QWORD *)(a1 + 132);
            v80 = *(_QWORD *)(a1 + 108);
            v81 = *(_QWORD *)(a1 + 124);
            v82 = *(_QWORD *)(a1 + 116) | 0x200000000000000;
            *(_QWORD *)(a1 + 124) = v81 | 0x40000000;
            *(_QWORD *)(a1 + 116) = v82;
            if ((*(_BYTE *)(a1 + 104) & 0x40) == 0)
            {
              *(_QWORD *)(a1 + 108) = v80;
              *(_QWORD *)(a1 + 116) = v82;
              *(_QWORD *)(a1 + 132) = v79;
              *(_QWORD *)(a1 + 124) = v81 | 0x2000040000000;
            }
          }
          v137 = 0x8000000200000001;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v83 = 0xEFEF9CE7FFFFFFFFLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v83 = 0xE7FF9CE7FFFFFFFFLL;
            v84 = 0xEBFFFFFFFFFFFF1FLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v84 = 0x2BFFFFFFFFFFFF2FLL;
            v85 = 0x14000000000000E0;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v85 = 0xD4000000000000D0;
            v86 = 0x1010000800000000;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v86 = 0x1800000800000000;
            v87 = v84 & *(_QWORD *)(a1 + 124);
            v88 = v83 & *(_QWORD *)(a1 + 116) | v86;
            *(_QWORD *)(a1 + 132) |= 0xFFFF0400uLL;
            *(_QWORD *)(a1 + 124) = v87 | v85;
            *(_QWORD *)(a1 + 116) = v88;
          }
          v137 = 0x8000000000000002;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v89 = *(_QWORD *)(a1 + 116);
            v90 = *(_QWORD *)(a1 + 132);
            v91 = 0xFFF567BFFFFFFFFFLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v91 = 0xFFE567BFFFFFFFFFLL;
            v92 = -9;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v92 = -4097;
            v93 = 0x3FFF3FFEFFFB5FEFLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v93 = 0xFFDF3FFFFFEBDFFFLL;
            v94 = 0xC000C00100048010;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v94 = 0x20C00000140000;
            v95 = 8;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v95 = 4096;
            v96 = 0xA984000000000;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v96 = 0x1A984000000000;
            *(_QWORD *)(a1 + 124) = v93 & *(_QWORD *)(a1 + 124) | v94;
            *(_QWORD *)(a1 + 132) = v92 & v90 | v95;
            *(_QWORD *)(a1 + 116) = v91 & v89 | v96;
          }
          v137 = 0x8000000100000002;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v97 = *(_QWORD *)(a1 + 132);
            v98 = -37377;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v98 = -33313;
            v99 = 0xFDF8FFF57DFFBFFELL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v99 = 0xFDFEBFF57DFFFFFELL;
            v100 = 0x207000A82004001;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v100 = 0x201400A82000001;
            v101 = 37376;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v101 = 33312;
            v102 = v99 & *(_QWORD *)(a1 + 124);
            *(_QWORD *)(a1 + 116) &= ~0x1000000000000uLL;
            *(_QWORD *)(a1 + 124) = v102 | v100;
            *(_QWORD *)(a1 + 132) = v98 & v97 | v101;
          }
          v137 = 0x8000000200000002;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v103 = *(_QWORD *)(a1 + 116);
            v104 = 0xFFFFFF5FFFFFFFFFLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v104 = 0xFEFFFF5FFFFFFFFFLL;
            v105 = 0xF7DFFFFFFFEDEFFDLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v105 = 0xF7FFFFFBFFFDEFFFLL;
            v106 = 0x820000000121002;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v106 = 0x800000400021000;
            v107 = 0x8000000000;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v107 = 0x100008000000000;
            v108 = v105 & *(_QWORD *)(a1 + 124);
            *(_QWORD *)(a1 + 132) = *(_QWORD *)(a1 + 132) & 0xFFFFFFFFFFFF7FBFLL | 0x40;
            *(_QWORD *)(a1 + 124) = v108 | v106;
            *(_QWORD *)(a1 + 116) = v104 & v103 | v107;
          }
          v137 = 0x8000000300000002;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v109 = *(_QWORD *)(a1 + 116);
            v110 = *(_QWORD *)(a1 + 132);
            v111 = 0xF6FFFFFFFFFFFFFFLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v111 = 0xFFFFFFFEFFFFFFFFLL;
            v112 = -8228;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v112 = -8204;
            v113 = 0xFEF7FFEBFF7FFCFFLL;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v113 = 0xFEF3FFEEFF7F3CDDLL;
            v114 = 0x100001400800300;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v114 = 0x10400110080C322;
            v115 = 8227;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v115 = 8203;
            v116 = 0x900000000000000;
            if ((*(_QWORD *)(a1 + 100) & 0x4000000000) == 0)
              v116 = 0x100000000;
            *(_QWORD *)(a1 + 124) = v113 & *(_QWORD *)(a1 + 124) | v114;
            *(_QWORD *)(a1 + 132) = v112 & v110 | v115;
            *(_QWORD *)(a1 + 116) = v111 & v109 | v116;
          }
          v137 = 0x8000000400000002;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            v117 = *(_QWORD *)(a1 + 132) | 0x4080;
            *(_QWORD *)(a1 + 124) |= 0x1014C000000000uLL;
            *(_QWORD *)(a1 + 132) = v117;
          }
          v137 = 0x8000000000000003;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
            *(_QWORD *)(a1 + 124) |= 0x80220004000000uLL;
          v137 = 0x8000000100000003;
          v138 = 0;
          if ((sub_22E3B38EC(&AIRVersion, &v137) & 1) == 0)
          {
            *(_QWORD *)a1 |= 0x400000uLL;
            v118 = *(_QWORD *)(a1 + 116) | 0x400000000000000;
            *(_QWORD *)(a1 + 124) |= 0x2000092000000400uLL;
            *(_QWORD *)(a1 + 116) = v118;
          }
          v137 = 0x8000000200000003;
          v138 = 0;
          result = sub_22E3B38EC(&AIRVersion, &v137);
          if ((result & 1) == 0)
          {
            v119 = *(_QWORD *)(a1 + 116) | 0x4000000400000000;
            *(_QWORD *)(a1 + 124) |= 0x200800uLL;
            *(_QWORD *)(a1 + 116) = v119;
          }
          if ((*(_BYTE *)(a1 + 104) & 0x20) == 0 || (*(_WORD *)(a1 + 148) & 0x400) == 0)
            goto LABEL_220;
          v120 = a4[2];
          v121 = (char *)a4[1];
          if ((unint64_t)v121 >= v120)
          {
            v123 = (char *)*a4;
            v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v121[-*a4] >> 3);
            v125 = v124 + 1;
            if (v124 + 1 <= 0xAAAAAAAAAAAAAAALL)
            {
              if (0x5555555555555556 * ((uint64_t)(v120 - (_QWORD)v123) >> 3) > v125)
                v125 = 0x5555555555555556 * ((uint64_t)(v120 - (_QWORD)v123) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - (_QWORD)v123) >> 3) >= 0x555555555555555)
                v126 = 0xAAAAAAAAAAAAAAALL;
              else
                v126 = v125;
              v142 = a4 + 2;
              if (!v126)
              {
                v127 = 0;
                goto LABEL_213;
              }
              if (v126 <= 0xAAAAAAAAAAAAAAALL)
              {
                v127 = (char *)operator new(24 * v126);
LABEL_213:
                v128 = &v127[24 * v124];
                strcpy(v128, "metal_types");
                v128[23] = 11;
                if (v121 == v123)
                {
                  v131 = vdupq_n_s64((unint64_t)v121);
                  v129 = &v127[24 * v124];
                }
                else
                {
                  v129 = &v127[24 * v124];
                  do
                  {
                    v130 = *(_OWORD *)(v121 - 24);
                    *((_QWORD *)v129 - 1) = *((_QWORD *)v121 - 1);
                    *(_OWORD *)(v129 - 24) = v130;
                    v129 -= 24;
                    *((_QWORD *)v121 - 2) = 0;
                    *((_QWORD *)v121 - 1) = 0;
                    *((_QWORD *)v121 - 3) = 0;
                    v121 -= 24;
                  }
                  while (v121 != v123);
                  v131 = *(int64x2_t *)a4;
                  v120 = a4[2];
                }
                v122 = v128 + 24;
                *a4 = v129;
                a4[1] = v128 + 24;
                v140 = v131;
                a4[2] = &v127[24 * v126];
                v141 = v120;
                AIRVersion = (unsigned __int8 *)v131.i64[0];
                result = sub_22E3B8B94((uint64_t)&AIRVersion);
                goto LABEL_219;
              }
LABEL_238:
              sub_22E3B3F8C();
            }
LABEL_237:
            abort();
          }
          strcpy(v121, "metal_types");
          v121[23] = 11;
          v122 = v121 + 24;
LABEL_219:
          a4[1] = v122;
LABEL_220:
          v132 = a2 == 11 || a2 == 9;
          v133 = 0x2000000000;
          if (!v132)
            v133 = 0;
          *(_QWORD *)(a1 + 64) = v133 | ((unint64_t)(a2 == 11) << 38) | *(_QWORD *)(a1 + 64) & 0xFFFFFF9FFFFFFFFFLL;
          if (a2 == 11)
          {
            v134 = *(_DWORD *)(a1 + 244) | 0xC;
LABEL_231:
            *(_DWORD *)(a1 + 244) = v134;
            goto LABEL_232;
          }
          if (a2 == 9)
          {
            if (((_DWORD)a3[3] & 0xFFFFFFFE) == 0x3A)
              *(_DWORD *)(a1 + 56) = 200;
            v134 = *(_DWORD *)(a1 + 244) & 0xFFFFFFF3 | 8;
            goto LABEL_231;
          }
LABEL_232:
          *(_WORD *)(a1 + 96) = *(_WORD *)(a1 + 96) & 0xFFDF | (32 * (a2 == 10));
          v135 = (*(_QWORD *)(a1 + 100) >> 13) & 0x1000000;
          if ((*(_DWORD *)(a1 + 52) & 0x40000000) != 0)
            v135 = 0x1000000;
          v136 = 0x800000;
          if (!(*(_DWORD *)(a1 + 52) & 0x40000000 | *(_QWORD *)a1 & 0x100))
            v136 = (*(_QWORD *)a1 << 20) & 0x800000;
          *(_QWORD *)a1 = v136 | *(_QWORD *)a1 & 0xFFFFFFFFFE7FFFFFLL | v135;
          return result;
      }
    default:
      switch(v7)
      {
        case '4':
          v35 = *(_DWORD *)(a1 + 240) & 0xE0001FFF | 0xFBE000;
          goto LABEL_35;
        case '5':
          v35 = *(_DWORD *)(a1 + 240) & 0xE0001FFF | 0xFC0000;
          goto LABEL_35;
        case '6':
          v35 = (*(_DWORD *)(a1 + 240) & 0xE0001FFF | 0xFBE000) + 0x4000;
          goto LABEL_35;
        case '7':
          v35 = (*(_DWORD *)(a1 + 240) & 0xE0001FFF | 0xFBE000) + 24576;
          goto LABEL_35;
        case '8':
          v35 = (*(_DWORD *)(a1 + 240) & 0xE0001FFF | 0xFBE000) + 49152;
          goto LABEL_35;
        case '9':
          v35 = (*(_DWORD *)(a1 + 240) & 0xE0001FFF | 0xFBE000) + 114688;
LABEL_35:
          *(_DWORD *)(a1 + 240) = v35;
          if (v34)
            goto LABEL_43;
          goto LABEL_93;
        default:
          goto LABEL_42;
      }
  }
}

llvm::raw_ostream *sub_22F1D5A3C(llvm *a1)
{
  llvm *v1;
  int v2;
  llvm::raw_ostream *v3;
  void *v4;
  llvm::raw_ostream *v5;
  void *v6;
  llvm::raw_ostream *v7;
  void *v8;
  llvm::raw_ostream *v9;
  void *v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *v13;
  void *v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  void *v18;
  llvm::raw_ostream *v19;
  void *v20;
  llvm::raw_ostream *v21;
  void *v22;
  llvm::raw_ostream *v23;
  void *v24;
  llvm::raw_ostream *v25;
  void *v26;
  llvm::raw_ostream *result;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  void *v30;

  v1 = a1;
  v2 = *((_DWORD *)a1 + 1);
  if ((v2 & 3) != 0)
  {
    v3 = (llvm::raw_ostream *)llvm::errs(a1);
    v4 = (void *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0x1CuLL)
    {
      qmemcpy(v4, "\n FPContractMode Override is ", 29);
      *((_QWORD *)v3 + 4) += 29;
    }
    else
    {
      llvm::raw_ostream::write(v3, "\n FPContractMode Override is ");
    }
    a1 = (llvm *)llvm::raw_ostream::operator<<();
    v2 = *((_DWORD *)v1 + 1);
  }
  if ((v2 & 0x1C) != 0)
  {
    v29 = (llvm::raw_ostream *)llvm::errs(a1);
    v30 = (void *)*((_QWORD *)v29 + 4);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 0x1AuLL)
    {
      qmemcpy(v30, "\n RoundingMode Override is ", 27);
      *((_QWORD *)v29 + 4) += 27;
    }
    else
    {
      v29 = (llvm::raw_ostream *)llvm::raw_ostream::write(v29, "\n RoundingMode Override is ");
    }
    a1 = sub_22F40326C(v29, (*(unsigned __int8 *)v1 >> 2) & 7);
    v2 = *((_DWORD *)v1 + 1);
  }
  if ((v2 & 0x60) != 0)
  {
    v5 = (llvm::raw_ostream *)llvm::errs(a1);
    v6 = (void *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0x1DuLL)
    {
      qmemcpy(v6, "\n FPExceptionMode Override is ", 30);
      *((_QWORD *)v5 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v5, "\n FPExceptionMode Override is ");
    }
    a1 = (llvm *)llvm::raw_ostream::operator<<();
    v2 = *((_DWORD *)v1 + 1);
  }
  if ((v2 & 0x80) != 0)
  {
    v7 = (llvm::raw_ostream *)llvm::errs(a1);
    v8 = (void *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 0x1DuLL)
    {
      qmemcpy(v8, "\n AllowFEnvAccess Override is ", 30);
      *((_QWORD *)v7 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v7, "\n AllowFEnvAccess Override is ");
    }
    a1 = (llvm *)llvm::raw_ostream::operator<<();
    v2 = *((_DWORD *)v1 + 1);
    if ((v2 & 0x100) == 0)
    {
LABEL_12:
      if ((v2 & 0x200) == 0)
        goto LABEL_13;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v9 = (llvm::raw_ostream *)llvm::errs(a1);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 0x20uLL)
  {
    qmemcpy(v10, "\n AllowFPReassociate Override is ", 33);
    *((_QWORD *)v9 + 4) += 33;
  }
  else
  {
    llvm::raw_ostream::write(v9, "\n AllowFPReassociate Override is ");
  }
  a1 = (llvm *)llvm::raw_ostream::operator<<();
  v2 = *((_DWORD *)v1 + 1);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_24:
  v11 = (llvm::raw_ostream *)llvm::errs(a1);
  v12 = (void *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 0x19uLL)
  {
    qmemcpy(v12, "\n NoHonorNaNs Override is ", 26);
    *((_QWORD *)v11 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v11, "\n NoHonorNaNs Override is ");
  }
  a1 = (llvm *)llvm::raw_ostream::operator<<();
  v2 = *((_DWORD *)v1 + 1);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_27:
  v13 = (llvm::raw_ostream *)llvm::errs(a1);
  v14 = (void *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 0x19uLL)
  {
    qmemcpy(v14, "\n NoHonorInfs Override is ", 26);
    *((_QWORD *)v13 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v13, "\n NoHonorInfs Override is ");
  }
  a1 = (llvm *)llvm::raw_ostream::operator<<();
  v2 = *((_DWORD *)v1 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_30:
  v15 = (llvm::raw_ostream *)llvm::errs(a1);
  v16 = (void *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0x1AuLL)
  {
    qmemcpy(v16, "\n NoSignedZero Override is ", 27);
    *((_QWORD *)v15 + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(v15, "\n NoSignedZero Override is ");
  }
  a1 = (llvm *)llvm::raw_ostream::operator<<();
  v2 = *((_DWORD *)v1 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_36;
  }
LABEL_33:
  v17 = (llvm::raw_ostream *)llvm::errs(a1);
  v18 = (void *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0x1DuLL)
  {
    qmemcpy(v18, "\n AllowReciprocal Override is ", 30);
    *((_QWORD *)v17 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\n AllowReciprocal Override is ");
  }
  a1 = (llvm *)llvm::raw_ostream::operator<<();
  v2 = *((_DWORD *)v1 + 1);
  if ((v2 & 0x2000) != 0)
  {
LABEL_36:
    v19 = (llvm::raw_ostream *)llvm::errs(a1);
    v20 = (void *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0x1DuLL)
    {
      qmemcpy(v20, "\n AllowApproxFunc Override is ", 30);
      *((_QWORD *)v19 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v19, "\n AllowApproxFunc Override is ");
    }
    a1 = (llvm *)llvm::raw_ostream::operator<<();
    v2 = *((_DWORD *)v1 + 1);
  }
LABEL_39:
  if ((v2 & 0xC000) != 0)
  {
    v21 = (llvm::raw_ostream *)llvm::errs(a1);
    v22 = (void *)*((_QWORD *)v21 + 4);
    if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 0x1AuLL)
    {
      qmemcpy(v22, "\n FPEvalMethod Override is ", 27);
      *((_QWORD *)v21 + 4) += 27;
    }
    else
    {
      llvm::raw_ostream::write(v21, "\n FPEvalMethod Override is ");
    }
    a1 = (llvm *)llvm::raw_ostream::operator<<();
    v2 = *((_DWORD *)v1 + 1);
  }
  if ((v2 & 0x30000) != 0)
  {
    v23 = (llvm::raw_ostream *)llvm::errs(a1);
    v24 = (void *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 0x24uLL)
    {
      qmemcpy(v24, "\n Float16ExcessPrecision Override is ", 37);
      *((_QWORD *)v23 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v23, "\n Float16ExcessPrecision Override is ");
    }
    a1 = (llvm *)llvm::raw_ostream::operator<<();
    if ((*((_BYTE *)v1 + 6) & 3) != 0)
    {
      v25 = (llvm::raw_ostream *)llvm::errs(a1);
      v26 = (void *)*((_QWORD *)v25 + 4);
      if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0x25uLL)
      {
        qmemcpy(v26, "\n BFloat16ExcessPrecision Override is ", 38);
        *((_QWORD *)v25 + 4) += 38;
      }
      else
      {
        llvm::raw_ostream::write(v25, "\n BFloat16ExcessPrecision Override is ");
      }
      a1 = (llvm *)llvm::raw_ostream::operator<<();
    }
  }
  result = (llvm::raw_ostream *)llvm::errs(a1);
  v28 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v28)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  *v28 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t sub_22F1D5FAC(int a1)
{
  return ((uint64_t (*)(char **))((char *)sub_22F1D5FD4 + 4 * byte_22F5496A8[a1]))(off_24FAE1150);
}

char **sub_22F1D5FD4()
{
  return off_24FAE1168;
}

char **sub_22F1D5FE0()
{
  return off_24FAE1180;
}

char **sub_22F1D5FEC()
{
  return off_24FAE1198;
}

char **sub_22F1D5FF8()
{
  return off_24FAE11B0;
}

char **sub_22F1D6004()
{
  return off_24FAE11C8;
}

char **sub_22F1D6010()
{
  return off_24FAE11E0;
}

char **sub_22F1D601C()
{
  return off_24FAE11F8;
}

char **sub_22F1D6028()
{
  return off_24FAE1210;
}

char **sub_22F1D6034()
{
  return off_24FAE1228;
}

char **sub_22F1D6040()
{
  return off_24FAE1240;
}

char **sub_22F1D604C()
{
  return off_24FAE1258;
}

char **sub_22F1D6058()
{
  return off_24FAE1270;
}

char **sub_22F1D6064()
{
  return off_24FAE1288;
}

char **sub_22F1D6070()
{
  return off_24FAE12A0;
}

char **sub_22F1D607C()
{
  return off_24FAE12B8;
}

char **sub_22F1D6088()
{
  return off_24FAE12D0;
}

char **sub_22F1D6094()
{
  return off_24FAE12E8;
}

char **sub_22F1D60A0()
{
  return off_24FAE1300;
}

char **sub_22F1D60AC()
{
  return off_24FAE1318;
}

char **sub_22F1D60B8()
{
  return off_24FAE1330;
}

char **sub_22F1D60C4()
{
  return off_24FAE1348;
}

char **sub_22F1D60D0()
{
  return off_24FAE1360;
}

char **sub_22F1D60DC()
{
  return off_24FAE1378;
}

char **sub_22F1D60E8()
{
  return off_24FAE1390;
}

char **sub_22F1D60F4()
{
  return off_24FAE13A8;
}

char **sub_22F1D6100()
{
  return off_24FAE13C0;
}

char **sub_22F1D610C()
{
  return off_24FAE13D8;
}

char **sub_22F1D6118()
{
  return off_24FAE13F0;
}

char **sub_22F1D6124()
{
  return off_24FAE1408;
}

char **sub_22F1D6130()
{
  return off_24FAE1420;
}

char **sub_22F1D613C()
{
  return off_24FAE1438;
}

char **sub_22F1D6148()
{
  return off_24FAE1450;
}

char **sub_22F1D6154()
{
  return off_24FAE1468;
}

char **sub_22F1D6160()
{
  return off_24FAE1480;
}

char **sub_22F1D616C()
{
  return off_24FAE1498;
}

char **sub_22F1D6178()
{
  return off_24FAE14B0;
}

char **sub_22F1D6184()
{
  return off_24FAE14C8;
}

char **sub_22F1D6190()
{
  return off_24FAE14E0;
}

char **sub_22F1D619C()
{
  return off_24FAE14F8;
}

char **sub_22F1D61A8()
{
  return off_24FAE1510;
}

char **sub_22F1D61B4()
{
  return off_24FAE1528;
}

char **sub_22F1D61C0()
{
  return off_24FAE1540;
}

char **sub_22F1D61CC()
{
  return off_24FAE1558;
}

char **sub_22F1D61D8()
{
  return off_24FAE1570;
}

char **sub_22F1D61E4()
{
  return off_24FAE1588;
}

char **sub_22F1D61F0()
{
  return off_24FAE15A0;
}

char **sub_22F1D61FC()
{
  return off_24FAE15B8;
}

char **sub_22F1D6208()
{
  return off_24FAE15D0;
}

char **sub_22F1D6214()
{
  return off_24FAE15E8;
}

char **sub_22F1D6220()
{
  return off_24FAE1600;
}

char **sub_22F1D622C()
{
  return off_24FAE1618;
}

char **sub_22F1D6238()
{
  return off_24FAE1630;
}

char **sub_22F1D6244()
{
  return off_24FAE1648;
}

char **sub_22F1D6250()
{
  return off_24FAE1660;
}

char **sub_22F1D625C()
{
  return off_24FAE1678;
}

char **sub_22F1D6268()
{
  return off_24FAE1690;
}

char **sub_22F1D6274()
{
  return off_24FAE16A8;
}

uint64_t sub_22F1D6280()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::report_fatal_error((llvm *)"getLangStandardForKind() on unspecified kind", (const char *)1);
  return sub_22F1D6298(v0, v1);
}

uint64_t sub_22F1D6298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 58;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 != 27747 && *(_WORD *)a1 != 19523)
        return 58;
      return 23;
    case 3:
      if (*(_WORD *)a1 == 14435 && *(_BYTE *)(a1 + 2) == 57)
        return 0;
      if (*(_WORD *)a1 == 14691 && *(_BYTE *)(a1 + 2) == 48)
        return 0;
      if (*(_WORD *)a1 == 14691 && *(_BYTE *)(a1 + 2) == 57)
        return 3;
      if (*(_WORD *)a1 == 14691 && *(_BYTE *)(a1 + 2) == 120)
        return 3;
      if (*(_WORD *)a1 == 12643 && *(_BYTE *)(a1 + 2) == 49)
        return 5;
      if (*(_WORD *)a1 == 12643 && *(_BYTE *)(a1 + 2) == 120)
        return 5;
      if (*(_WORD *)a1 == 12643 && *(_BYTE *)(a1 + 2) == 55)
        return 7;
      if (*(_WORD *)a1 == 12643 && *(_BYTE *)(a1 + 2) == 56)
        return 7;
      if (*(_WORD *)a1 == 12899 && *(_BYTE *)(a1 + 2) == 120)
        return 9;
      if (*(_WORD *)a1 == 26984 && *(_BYTE *)(a1 + 2) == 112)
        return 50;
      return 58;
    case 4:
      goto LABEL_221;
    case 5:
      if (*(_DWORD *)a1 == 947220071 && *(_BYTE *)(a1 + 4) == 57)
        return 2;
      if (*(_DWORD *)a1 == 963997287 && *(_BYTE *)(a1 + 4) == 48)
        return 2;
      if (*(_DWORD *)a1 == 963997287 && *(_BYTE *)(a1 + 4) == 57)
        return 4;
      if (*(_DWORD *)a1 == 963997287 && *(_BYTE *)(a1 + 4) == 120)
        return 4;
      if (*(_DWORD *)a1 == 829779559 && *(_BYTE *)(a1 + 4) == 49)
        return 6;
      if (*(_DWORD *)a1 == 829779559 && *(_BYTE *)(a1 + 4) == 120)
        return 6;
      if (*(_DWORD *)a1 == 829779559 && *(_BYTE *)(a1 + 4) == 55)
        return 8;
      if (*(_DWORD *)a1 == 829779559 && *(_BYTE *)(a1 + 4) == 56)
        return 8;
      if (*(_DWORD *)a1 == 846556775 && *(_BYTE *)(a1 + 4) == 120)
        return 10;
      if (*(_DWORD *)a1 == 959130467 && *(_BYTE *)(a1 + 4) == 56)
        return 11;
      if (*(_DWORD *)a1 == 808135523 && *(_BYTE *)(a1 + 4) == 51)
        return 11;
      if (*(_DWORD *)a1 == 824912739 && *(_BYTE *)(a1 + 4) == 49)
        return 13;
      if (*(_DWORD *)a1 == 808135523 && *(_BYTE *)(a1 + 4) == 120)
        return 13;
      if (*(_DWORD *)a1 == 824912739 && *(_BYTE *)(a1 + 4) == 52)
        return 15;
      if (*(_DWORD *)a1 == 824912739 && *(_BYTE *)(a1 + 4) == 121)
        return 15;
      if (*(_DWORD *)a1 == 824912739 && *(_BYTE *)(a1 + 4) == 55)
        return 17;
      if (*(_DWORD *)a1 == 824912739 && *(_BYTE *)(a1 + 4) == 122)
        return 17;
      if (*(_DWORD *)a1 == 841689955 && *(_BYTE *)(a1 + 4) == 48)
        return 19;
      if (*(_DWORD *)a1 == 841689955 && *(_BYTE *)(a1 + 4) == 97)
        return 19;
      if (*(_DWORD *)a1 == 841689955 && *(_BYTE *)(a1 + 4) == 98)
        return 21;
      if (*(_DWORD *)a1 == 774990947 && *(_BYTE *)(a1 + 4) == 48)
        return 23;
      if (*(_DWORD *)a1 == 774990947 && *(_BYTE *)(a1 + 4) == 49)
        return 24;
      if (*(_DWORD *)a1 == 774990947 && *(_BYTE *)(a1 + 4) == 50)
        return 25;
      if (*(_DWORD *)a1 == 775056483 && *(_BYTE *)(a1 + 4) == 48)
        return 26;
      if (*(_DWORD *)a1 == 775122019 && *(_BYTE *)(a1 + 4) == 48)
        return 27;
      if (*(_DWORD *)a1 == 727936099 && *(_BYTE *)(a1 + 4) == 43)
        return 28;
      if (*(_DWORD *)a1 == 774982723 && *(_BYTE *)(a1 + 4) == 49)
        return 24;
      if (*(_DWORD *)a1 == 774982723 && *(_BYTE *)(a1 + 4) == 50)
        return 25;
      if (*(_DWORD *)a1 == 775048259 && *(_BYTE *)(a1 + 4) == 48)
        return 26;
      if (*(_DWORD *)a1 == 775113795 && *(_BYTE *)(a1 + 4) == 48)
        return 27;
      if (*(_DWORD *)a1 == 725830723 && *(_BYTE *)(a1 + 4) == 43)
        return 28;
LABEL_217:
      if (a2 != 4)
      {
        if (a2 == 14)
        {
LABEL_327:
          if (*(_QWORD *)a1 != 0x656D2D736F63616DLL || *(_QWORD *)(a1 + 6) != 0x302E316C6174656DLL)
          {
            if (*(_QWORD *)a1 != 0x656D2D736F63616DLL || *(_QWORD *)(a1 + 6) != 0x312E316C6174656DLL)
            {
              if (*(_QWORD *)a1 != 0x656D2D736F63616DLL || *(_QWORD *)(a1 + 6) != 0x322E316C6174656DLL)
              {
                if (*(_QWORD *)a1 != 0x656D2D736F63616DLL || *(_QWORD *)(a1 + 6) != 0x302E326C6174656DLL)
                {
                  if (*(_QWORD *)a1 == 0x656D2D736F63616DLL && *(_QWORD *)(a1 + 6) == 0x312E326C6174656DLL)
                    return 42;
                  if (*(_QWORD *)a1 == 0x656D2D736F63616DLL && *(_QWORD *)(a1 + 6) == 0x322E326C6174656DLL)
                    return 43;
                  if (*(_QWORD *)a1 == 0x656D2D736F63616DLL && *(_QWORD *)(a1 + 6) == 0x332E326C6174656DLL)
                    return 44;
                  if (*(_QWORD *)a1 == 0x656D2D736F63616DLL && *(_QWORD *)(a1 + 6) == 0x342E326C6174656DLL)
                    return 45;
                  return 58;
                }
                return 41;
              }
              return 40;
            }
            return 39;
          }
        }
        else
        {
          if (a2 != 12)
            return 58;
LABEL_273:
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 808333676)
            return 30;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 825110892)
            return 31;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 841888108)
            return 32;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 808333932)
            return 33;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 825111148)
            return 34;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 841888364)
            return 35;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 858665580)
            return 36;
          if (*(_QWORD *)a1 == 0x6174656D2D736F69 && *(_DWORD *)(a1 + 8) == 875442796)
            return 37;
          if (*(_QWORD *)a1 != 0x6174656D2D78736FLL || *(_DWORD *)(a1 + 8) != 808333676)
          {
            if (*(_QWORD *)a1 != 0x6174656D2D78736FLL || *(_DWORD *)(a1 + 8) != 825110892)
            {
              if (*(_QWORD *)a1 != 0x6174656D2D78736FLL || *(_DWORD *)(a1 + 8) != 841888108)
              {
                if (*(_QWORD *)a1 != 0x6174656D2D78736FLL || *(_DWORD *)(a1 + 8) != 808333932)
                  return 58;
                return 41;
              }
              return 40;
            }
            return 39;
          }
        }
        return 38;
      }
LABEL_221:
      if (*(_DWORD *)a1 == 1633973603)
        return 49;
      if (*(_DWORD *)a1 != 1819503720)
        return 58;
      return 51;
    case 7:
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 943270699)
        return 12;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 858794795)
        return 12;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 825305899)
        return 14;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 2016422699)
        return 14;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 875637547)
        return 16;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 2033265451)
        return 16;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 925969195)
        return 18;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 2050042667)
        return 18;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 808594219)
        return 20;
      if (*(_DWORD *)a1 == 729116263 && *(_DWORD *)(a1 + 3) == 1630677803)
        return 20;
      if (*(_DWORD *)a1 != 729116263 || *(_DWORD *)(a1 + 3) != 1647455019)
        goto LABEL_217;
      return 22;
    case 8:
      switch(*(_QWORD *)a1)
      {
        case 0x302E312B2B636C63:
        case 0x302E312B2B434C43:
          return 28;
        case 0x302E336C6174656DLL:
          return 46;
        case 0x312E336C6174656DLL:
          return 47;
        case 0x322E336C6174656DLL:
          return 48;
        case 0x353130326C736C68:
          return 52;
        case 0x363130326C736C68:
          return 53;
        case 0x373130326C736C68:
          return 54;
        case 0x383130326C736C68:
          return 55;
        case 0x313230326C736C68:
          return 56;
      }
      if (*(_QWORD *)a1 != 0x783230326C736C68)
        return 58;
      return 57;
    case 9:
      if ((*(_QWORD *)a1 != 0x3230322B2B636C63 || *(_BYTE *)(a1 + 8) != 49)
        && (*(_QWORD *)a1 != 0x3230322B2B434C43 || *(_BYTE *)(a1 + 8) != 49))
      {
        return 58;
      }
      return 29;
    case 12:
      if (*(_QWORD *)a1 == 0x3A393938396F7369 && *(_DWORD *)(a1 + 8) == 809056561)
        return 0;
      if (*(_QWORD *)a1 == 0x3A393938396F7369 && *(_DWORD *)(a1 + 8) == 960051505)
        return 3;
      if (*(_QWORD *)a1 == 0x3A393938396F7369 && *(_DWORD *)(a1 + 8) == 2017016113)
        return 3;
      if (*(_QWORD *)a1 == 0x3A393938396F7369 && *(_DWORD *)(a1 + 8) == 825307186)
        return 5;
      if (*(_QWORD *)a1 == 0x3A393938396F7369 && *(_DWORD *)(a1 + 8) == 2016489522)
        return 5;
      if ((*(_QWORD *)a1 != 0x3A393938396F7369 || *(_DWORD *)(a1 + 8) != 925970482)
        && (*(_QWORD *)a1 != 0x3A393938396F7369 || *(_DWORD *)(a1 + 8) != 942747698))
      {
        goto LABEL_273;
      }
      return 7;
    case 14:
      if (*(_QWORD *)a1 != 0x3A393938396F7369 || *(_QWORD *)(a1 + 6) != 0x3930343939313A39)
        goto LABEL_327;
      return 1;
    default:
      return v2;
  }
}

void sub_22F1D6FB0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22F1D6FE0(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  v26 = 8;
  if (a2[6] == 42 && a2[8] == 3)
  {
    if (a2[9] == 25)
      return 4;
    else
      return 8;
  }
  return v26;
}

char *sub_22F1D7750(char *__dst, void *__src, size_t __len, int a4, uint64_t a5, int a6, int a7, int a8)
{
  void *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  __int16 v21;
  __int16 v22;
  int64x2_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *i;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_48;
  if (__len >= 0x17)
  {
    v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v17 = __len | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *((_QWORD *)__dst + 1) = __len;
    *((_QWORD *)__dst + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    __dst[23] = __len;
    v16 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v16, __src, __len);
LABEL_9:
  v19 = 0;
  *((_BYTE *)v16 + __len) = 0;
  *((_DWORD *)__dst + 6) = a4;
  *((_DWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 4) = a5;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 136) = 0u;
  *(_OWORD *)(__dst + 152) = 0u;
  *(_OWORD *)(__dst + 168) = 0u;
  *(_OWORD *)(__dst + 184) = 0u;
  *(_OWORD *)(__dst + 200) = 0u;
  *(_OWORD *)(__dst + 216) = 0u;
  *(_OWORD *)(__dst + 228) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  *((_DWORD *)__dst + 61) = 16;
  *((_QWORD *)__dst + 32) = 0;
  __dst[264] = 0;
  __dst[288] = 0;
  __dst[296] = 0;
  __dst[320] = 0;
  *((_QWORD *)__dst + 41) = 1;
  *((int64x2_t *)__dst + 21) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *((_QWORD *)__dst + 44) = __dst + 368;
  *((_QWORD *)__dst + 45) = 0x200000000;
  *(_OWORD *)(__dst + 412) = 0u;
  *((_OWORD *)__dst + 24) = 0u;
  *((_OWORD *)__dst + 25) = 0u;
  *((_DWORD *)__dst + 108) = a8;
  do
  {
    v20 = &__dst[v19];
    *((_QWORD *)v20 + 55) = &__dst[v19 + 456];
    *((_QWORD *)v20 + 56) = 0x200000000;
    v19 += 128;
  }
  while (v19 != 640);
  *((_QWORD *)__dst + 135) = __dst + 1096;
  *((_QWORD *)__dst + 136) = 0x100000000;
  *((_QWORD *)__dst + 146) = __dst + 1184;
  *((_QWORD *)__dst + 147) = 0x100000000;
  *((_QWORD *)__dst + 157) = __dst + 1272;
  *((_QWORD *)__dst + 158) = 0x200000000;
  *((_QWORD *)__dst + 167) = 0;
  if (a7)
    v21 = 32;
  else
    v21 = 0;
  if (a6)
    v22 = 20;
  else
    v22 = 4;
  *((_WORD *)__dst + 672) = v21 | v22;
  *(_QWORD *)(__dst + 1348) = 0;
  *((_QWORD *)__dst + 170) = 1;
  v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(__dst + 1368) = v23;
  *((_QWORD *)__dst + 173) = __dst + 1400;
  *((_QWORD *)__dst + 174) = 0x200000000;
  *((_QWORD *)__dst + 177) = 1;
  *((int64x2_t *)__dst + 89) = v23;
  *((_QWORD *)__dst + 180) = __dst + 1456;
  *((_QWORD *)__dst + 181) = 0x200000000;
  *((_QWORD *)__dst + 184) = __dst + 1488;
  *((_QWORD *)__dst + 185) = 0x200000000;
  *((_QWORD *)__dst + 188) = __dst + 1520;
  *((_QWORD *)__dst + 189) = 0x200000000;
  *((_QWORD *)__dst + 214) = __dst + 1728;
  *((_QWORD *)__dst + 215) = 0x200000000;
  *((_QWORD *)__dst + 218) = __dst + 1760;
  *((_QWORD *)__dst + 219) = 0x200000000;
  *((_QWORD *)__dst + 240) = 1;
  *(int64x2_t *)(__dst + 1928) = v23;
  *((_QWORD *)__dst + 243) = __dst + 1960;
  *((_QWORD *)__dst + 244) = 0x200000000;
  *((_QWORD *)__dst + 247) = __dst + 1992;
  *((_QWORD *)__dst + 248) = 0x200000000;
  __dst[2056] = 0;
  *((_OWORD *)__dst + 129) = 0u;
  *((_OWORD *)__dst + 130) = 0u;
  *((_OWORD *)__dst + 131) = 0u;
  *((_OWORD *)__dst + 132) = 0u;
  *((_QWORD *)__dst + 266) = 0;
  if (a5)
  {
    v24 = *((_WORD *)__dst + 672) & 0xFFFB | (4 * ((*(unsigned __int16 *)(a5 + 1344) >> 2) & 1));
    *((_WORD *)__dst + 672) = v24;
    v25 = v24 & 0xFFFFFFFE | *(_WORD *)(a5 + 1344) & 1;
    *((_WORD *)__dst + 672) = v25;
    v26 = v25 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a5 + 1344) >> 6) & 1) << 6);
    *((_WORD *)__dst + 672) = v26;
    v27 = v26 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a5 + 1344) >> 7) & 1) << 7);
    *((_WORD *)__dst + 672) = v27;
    LOWORD(v27) = v27 & 0xDFFF | (((*(_WORD *)(a5 + 1344) >> 13) & 1) << 13);
    *((_WORD *)__dst + 672) = v27;
    *((_WORD *)__dst + 672) = v27 & 0xBFFF | *(_WORD *)(a5 + 1344) & 0x4000;
    v28 = (*(_QWORD *)(a5 + 208) - *(_QWORD *)(a5 + 200)) >> 3;
    v29 = llvm::StringMapImpl::LookupBucketFor();
    v30 = *(_QWORD *)(a5 + 224);
    v31 = v29;
    v32 = *(_QWORD *)(v30 + 8 * v29);
    if (v32)
    {
      if (v32 != -8)
      {
LABEL_29:
        *(_DWORD *)(v32 + 8) = v28;
        v39 = *(_QWORD **)(a5 + 208);
        v38 = *(_QWORD *)(a5 + 216);
        if ((unint64_t)v39 < v38)
        {
          *v39 = __dst;
          v40 = v39 + 1;
LABEL_46:
          *(_QWORD *)(a5 + 208) = v40;
          return __dst;
        }
        v41 = *(_QWORD **)(a5 + 200);
        v42 = v39 - v41;
        v43 = v42 + 1;
        if (!((unint64_t)(v42 + 1) >> 61))
        {
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_22E3B3F8C();
            v46 = (char *)operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[8 * v42];
          *(_QWORD *)v47 = __dst;
          v40 = v47 + 8;
          if (v39 != v41)
          {
            do
            {
              v48 = *--v39;
              *((_QWORD *)v47 - 1) = v48;
              v47 -= 8;
            }
            while (v39 != v41);
            v39 = *(_QWORD **)(a5 + 200);
          }
          *(_QWORD *)(a5 + 200) = v47;
          *(_QWORD *)(a5 + 208) = v40;
          *(_QWORD *)(a5 + 216) = &v46[8 * v45];
          if (v39)
            operator delete(v39);
          goto LABEL_46;
        }
LABEL_48:
        abort();
      }
      --*(_DWORD *)(a5 + 240);
    }
    v33 = MEMORY[0x23489D23C](__len + 17, 8);
    v34 = v33;
    v35 = v33 + 16;
    if (__len)
      memcpy((void *)(v33 + 16), __src, __len);
    *(_BYTE *)(v35 + __len) = 0;
    *(_QWORD *)v34 = __len;
    *(_DWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v30 + 8 * v31) = v34;
    ++*(_DWORD *)(a5 + 236);
    for (i = (uint64_t *)(*(_QWORD *)(a5 + 224)
                        + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a5 + 224))); ; ++i)
    {
      v32 = *i;
      if (*i && v32 != -8)
        break;
    }
    goto LABEL_29;
  }
  return __dst;
}

uint64_t sub_22F1D7BC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *v32;
  void *v33;
  uint64_t v35;
  char *v36;
  void **v37;

  v2 = *(_QWORD **)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 208);
  while (v2 != v3)
  {
    if (*v2)
    {
      v4 = sub_22F1D7BC4();
      MEMORY[0x2348A0E9C](v4, 0x10F2C40A72A4818);
    }
    ++v2;
  }
  v5 = *(_QWORD *)(a1 + 2112);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 2120);
    v7 = *(void **)(a1 + 2112);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 2112);
    }
    *(_QWORD *)(a1 + 2120) = v5;
    operator delete(v7);
  }
  if (*(_QWORD *)(a1 + 2088))
  {
    sub_22E791220((char **)(a1 + 2088));
    operator delete(*(void **)(a1 + 2088));
  }
  v37 = (void **)(a1 + 2064);
  sub_22E3B3CC8(&v37);
  v8 = *(char **)(a1 + 1976);
  v9 = *(unsigned int *)(a1 + 1984);
  if ((_DWORD)v9)
  {
    v10 = 32 * v9;
    do
    {
      if (v8[v10 - 9] < 0)
        operator delete(*(void **)&v8[v10 - 32]);
      v10 -= 32;
    }
    while (v10);
    v8 = *(char **)(a1 + 1976);
  }
  if (v8 != (char *)(a1 + 1992))
    free(v8);
  v11 = *(void **)(a1 + 1944);
  if (v11 != (void *)(a1 + 1960))
    free(v11);
  if ((*(_BYTE *)(a1 + 1920) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 1928), (void *)(8 * *(unsigned int *)(a1 + 1936)));
  v12 = *(char **)(a1 + 1744);
  v13 = *(unsigned int *)(a1 + 1752);
  if ((_DWORD)v13)
  {
    v35 = 80 * v13;
    v36 = v12 - 80;
    do
    {
      sub_22E5762C8((char **)&v36[v35]);
      v35 -= 80;
    }
    while (v35);
    v12 = *(char **)(a1 + 1744);
  }
  if (v12 != (char *)(a1 + 1760))
    free(v12);
  v14 = *(void **)(a1 + 1712);
  if (v14 != (void *)(a1 + 1728))
    free(v14);
  v15 = *(char **)(a1 + 1504);
  v16 = *(unsigned int *)(a1 + 1512);
  if ((_DWORD)v16)
  {
    v17 = v15 - 88;
    v18 = 96 * v16;
    do
    {
      sub_22E5762C8((char **)&v17[v18]);
      v18 -= 96;
    }
    while (v18);
    v15 = *(char **)(a1 + 1504);
  }
  if (v15 != (char *)(a1 + 1520))
    free(v15);
  v19 = *(void **)(a1 + 1472);
  if (v19 != (void *)(a1 + 1488))
    free(v19);
  v20 = *(void **)(a1 + 1440);
  if (v20 != (void *)(a1 + 1456))
    free(v20);
  if ((*(_BYTE *)(a1 + 1416) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 1424), (void *)(8 * *(unsigned int *)(a1 + 1432)));
  v21 = *(void **)(a1 + 1384);
  if (v21 != (void *)(a1 + 1400))
    free(v21);
  if ((*(_BYTE *)(a1 + 1360) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 1368), (void *)(8 * *(unsigned int *)(a1 + 1376)));
  v22 = *(char **)(a1 + 1256);
  v23 = *(unsigned int *)(a1 + 1264);
  if ((_DWORD)v23)
  {
    v24 = 32 * v23;
    do
    {
      if (v22[v24 - 9] < 0)
        operator delete(*(void **)&v22[v24 - 32]);
      v24 -= 32;
    }
    while (v24);
    v22 = *(char **)(a1 + 1256);
  }
  if (v22 != (char *)(a1 + 1272))
    free(v22);
  sub_22F161D18((char **)(a1 + 1168));
  v25 = (char **)(a1 + 1080);
  sub_22F161D18((char **)(a1 + 1080));
  v26 = (char **)(a1 + 1080);
  do
  {
    v28 = *(v26 - 16);
    v26 -= 16;
    v27 = v28;
    v29 = *((unsigned int *)v26 + 2);
    if ((_DWORD)v29)
    {
      v30 = 56 * v29;
      do
      {
        v31 = (void **)&v27[v30];
        if (v27[v30 - 9] < 0)
          operator delete(*(v31 - 4));
        if (*((char *)v31 - 33) < 0)
          operator delete(*(v31 - 7));
        v30 -= 56;
      }
      while (v30);
      v27 = *v26;
    }
    if (v27 != (char *)(v25 - 14))
      free(v27);
    v25 = v26;
  }
  while (v26 != (char **)(a1 + 440));
  llvm::deallocate_buffer(*(llvm **)(a1 + 408), (void *)(8 * *(unsigned int *)(a1 + 424)));
  v37 = (void **)(a1 + 384);
  sub_22E3B3CC8(&v37);
  v32 = *(void **)(a1 + 352);
  if (v32 != (void *)(a1 + 368))
    free(v32);
  if ((*(_BYTE *)(a1 + 328) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 336), (void *)(8 * *(unsigned int *)(a1 + 344)));
  if (*(_BYTE *)(a1 + 320))
  {
    if (*(char *)(a1 + 319) < 0)
      operator delete(*(void **)(a1 + 296));
    *(_BYTE *)(a1 + 320) = 0;
  }
  if (*(_BYTE *)(a1 + 288))
  {
    if (*(char *)(a1 + 287) < 0)
      operator delete(*(void **)(a1 + 264));
    *(_BYTE *)(a1 + 288) = 0;
  }
  sub_22E6C6358(a1 + 224);
  v33 = *(void **)(a1 + 200);
  if (v33)
  {
    *(_QWORD *)(a1 + 208) = v33;
    operator delete(v33);
  }
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22F1D8008(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int16 *v18;
  size_t v19;
  int v20;
  uint64_t v21;

  v5 = *(_WORD *)(a1 + 1344) & 1;
  if (a1 && (_DWORD)v5)
  {
    v10 = a1;
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 1336);
      if (v11)
      {
        *a5 = v11;
        return v5;
      }
      v12 = *(unsigned int *)(v10 + 1264);
      if ((_DWORD)v12)
        break;
LABEL_15:
      v10 = *(_QWORD *)(v10 + 32);
      if (!v10)
        return v5;
    }
    v13 = 0;
    v14 = *(_QWORD *)(v10 + 1256);
    v15 = 32 * v12;
    while (1)
    {
      v16 = v14 + v13;
      v17 = *(_BYTE *)(v16 + 23);
      v18 = v17 >= 0 ? (unsigned __int16 *)v16 : *(unsigned __int16 **)v16;
      v19 = v17 >= 0 ? v17 & 0x7F : *(_QWORD *)(v16 + 8);
      v20 = sub_22F1D80F8(v18, v19, a2, a3);
      v14 = *(_QWORD *)(v10 + 1256);
      v21 = v14 + v13;
      if (*(unsigned __int8 *)(v14 + v13 + 24) != v20)
        break;
      v13 += 32;
      if (v15 == v13)
        goto LABEL_15;
    }
    std::string::operator=(a4, (const std::string *)(v14 + v13));
    a4[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)(v21 + 24);
  }
  return v5;
}

uint64_t sub_22F1D80F8(unsigned __int16 *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8;
  unint64_t v9;
  _BOOL4 v11;
  _BOOL4 v12;
  char v13;
  int v14;
  unint64_t v17;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *EnvironmentName;
  uint64_t v24;
  uint64_t v25;
  const void *OSName;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  const void *OSAndEnvironmentName;
  size_t v35;
  uint64_t v36;
  size_t v37;
  unsigned int v38;
  BOOL v39;
  _BYTE *v40;
  size_t v41;
  size_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  size_t v47;
  _BYTE *v48;
  size_t v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  char v55;
  BOOL v56;
  const void *v57;
  uint64_t v58;
  _BYTE *v69;
  int v70;
  __int128 v71;
  _BYTE v72[128];
  void *v73;
  __int128 v74;
  _QWORD v75[18];

  v75[16] = *MEMORY[0x24BDAC8D0];
  v8 = *(_WORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 8);
  if (a2 != 7)
  {
    if (a2 == 6)
    {
      if (*(_DWORD *)a1 == 1668246626 && a1[2] == 29547)
      {
        LODWORD(v17) = (*(_QWORD *)(a3 + 20) >> 41) & 0x807FFFFF | (*(unsigned __int8 *)(a3 + 28) << 23);
        goto LABEL_38;
      }
      if (*(_DWORD *)a1 == 1852141679 && a1[2] == 27747)
      {
        v17 = (unint64_t)*(unsigned int *)(a3 + 52) >> 30;
LABEL_38:
        v14 = v17 & 1;
LABEL_39:
        v13 = 1;
        goto LABEL_40;
      }
    }
    else if (a2 == 10)
    {
      if (*(_QWORD *)a1 == 0x6E6974756F726F63 && a1[4] == 29541)
      {
        LOBYTE(v17) = (v9 >> 58) & 0x3F | ((_BYTE)v8 << 6);
        goto LABEL_38;
      }
    }
    else
    {
      v17 = *(_QWORD *)a3;
      switch(a2)
      {
        case 3uLL:
          if (*a1 == 14691 && *((_BYTE *)a1 + 2) == 57)
            goto LABEL_38;
          if (*a1 == 12643 && *((_BYTE *)a1 + 2) == 49)
          {
            LOBYTE(v17) = v17 >> 1;
            goto LABEL_38;
          }
          if (*a1 == 12643 && *((_BYTE *)a1 + 2) == 55)
          {
            LOBYTE(v17) = v17 >> 2;
            goto LABEL_38;
          }
          if (*a1 == 27764 && *((_BYTE *)a1 + 2) == 115)
          {
            v14 = *(unsigned __int8 *)(a4 + 81);
            goto LABEL_39;
          }
          break;
        case 0xBuLL:
          if (*(_QWORD *)a1 == 0x756C7073756C7063 && *(_QWORD *)((char *)a1 + 3) == 0x313173756C707375)
          {
            LOWORD(v17) = (unsigned __int16)v17 >> 9;
            goto LABEL_38;
          }
          if (*(_QWORD *)a1 == 0x756C7073756C7063 && *(_QWORD *)((char *)a1 + 3) == 0x343173756C707375)
          {
            LOWORD(v17) = (unsigned __int16)v17 >> 10;
            goto LABEL_38;
          }
          if (*(_QWORD *)a1 == 0x756C7073756C7063 && *(_QWORD *)((char *)a1 + 3) == 0x373173756C707375)
          {
            LOWORD(v17) = (unsigned __int16)v17 >> 11;
            goto LABEL_38;
          }
          break;
        case 9uLL:
          if (*(_QWORD *)a1 == 0x756C7073756C7063 && *((_BYTE *)a1 + 8) == 115)
          {
            v17 >>= 8;
            goto LABEL_38;
          }
          break;
        case 4uLL:
          if (*(_DWORD *)a1 == 1667916399)
          {
            LOWORD(v17) = (unsigned __int16)v17 >> 14;
            goto LABEL_38;
          }
          break;
        case 0xCuLL:
          if (*(_QWORD *)a1 == 0x6E61747365657266 && *((_DWORD *)a1 + 2) == 1735289188)
          {
            LOBYTE(v17) = v9 >> 54;
            goto LABEL_38;
          }
          if (*(_QWORD *)a1 == 0x6E696C6E69756E67 && *((_DWORD *)a1 + 2) == 1836278117)
          {
            LOBYTE(v17) = (v9 >> 57) & 0x7F | ((_BYTE)v8 << 7);
            goto LABEL_38;
          }
          break;
        case 5uLL:
          if (*(_DWORD *)a1 == 1635018093 && *((_BYTE *)a1 + 4) == 108)
          {
            v17 = *(_QWORD *)(a3 + 100) >> 37;
            goto LABEL_38;
          }
          break;
        default:
          if (a2 == 8 && *(_QWORD *)a1 == 0x6372615F636A626FLL)
          {
            v17 = ((*(unsigned __int16 *)(a3 + 148) | ((unint64_t)*(unsigned __int8 *)(a3 + 150) << 16)) >> 1) & 0x7FFFFF;
            goto LABEL_38;
          }
          break;
      }
    }
    v14 = 0;
    v13 = 0;
    goto LABEL_40;
  }
  if (*(_DWORD *)a1 == 1769237601 && *(_DWORD *)((char *)a1 + 3) == 1667593833)
  {
    LOBYTE(v17) = v9 >> 42;
    goto LABEL_38;
  }
  v11 = *(_DWORD *)((char *)a1 + 3) == 1919906915;
  v12 = *(_DWORD *)a1 == 1667593850;
  v13 = v12 && v11;
  if (v12 && v11)
    v14 = (v9 >> 43) & 1;
  else
    v14 = 0;
LABEL_40:
  if (((*(uint64_t (**)(uint64_t, unsigned __int16 *, size_t))(*(_QWORD *)a4 + 568))(a4, a1, a2) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_107;
  }
  v70 = v14;
  v21 = *(_QWORD **)(a4 + 224);
  v22 = *(_QWORD *)(a4 + 232);
  EnvironmentName = (_QWORD *)llvm::Triple::getEnvironmentName((llvm::Triple *)(a4 + 32));
  v25 = v24;
  if (v22 == a2 && (!a2 || !memcmp(v21, a1, a2))
    || (OSName = (const void *)llvm::Triple::getOSName((llvm::Triple *)(a4 + 32)), v27 == a2)
    && (!a2 || !memcmp(OSName, a1, a2))
    || v25 == a2 && (!a2 || !memcmp(EnvironmentName, a1, a2))
    || a2 == 6
    && ((*(_DWORD *)a1 == 1836281705 ? (v28 = a1[2] == 25441) : (v28 = 0),
         v28
      && v22 == 11
      && (*v21 == 0x6C6174616363616DLL ? (v29 = *(_QWORD *)((char *)v21 + 3) == 0x7473796C61746163) : (v29 = 0), v29))
     || (*(_DWORD *)a1 == 1633902957 ? (v30 = a1[2] == 26978) : (v30 = 0),
         v30 ? (v31 = 0) : (v31 = 1),
         v25 == 11
      && !v31
      && (*EnvironmentName == 0x6C6174616363616DLL
        ? (v32 = *(_QWORD *)((char *)EnvironmentName + 3) == 0x7473796C61746163)
        : (v32 = 0),
          v32))))
  {
    v20 = 1;
    v14 = v70;
    goto LABEL_107;
  }
  OSAndEnvironmentName = (const void *)llvm::Triple::getOSAndEnvironmentName((llvm::Triple *)(a4 + 32));
  v35 = v33;
  v71 = xmmword_22F44E310;
  if (v33 < 0x81)
  {
    v36 = 0;
    if (!v33)
      goto LABEL_77;
    goto LABEL_76;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v36 = v71;
  if (v35)
  {
LABEL_76:
    memcpy(&v72[v36], OSAndEnvironmentName, v35);
    v36 = v71;
  }
LABEL_77:
  v37 = v36 + v35;
  BYTE7(v71) = HIBYTE(v37);
  v38 = *(_DWORD *)(a4 + 68);
  if (v38 > 0x21
    || ((1 << v38) & 0x3F0000888) == 0
    || v37 < 9
    || (*(_QWORD *)&v72[v37 - 9] == 0x6F74616C756D6973 ? (v39 = v72[v37 - 1] == 114) : (v39 = 0), !v39))
  {
    if (v37 == a2)
    {
      v14 = v70;
      if (a2)
        v20 = memcmp(v72, a1, a2) == 0;
      else
        v20 = 1;
      goto LABEL_107;
    }
    v20 = 0;
LABEL_171:
    v14 = v70;
    goto LABEL_107;
  }
  if (v37 == a2 && !memcmp(v72, a1, a2))
  {
    v20 = 1;
    goto LABEL_171;
  }
  v40 = memchr(v72, 45, v37);
  v20 = 0;
  if (!v40)
    goto LABEL_171;
  v41 = v40 - v72;
  if (v40 - v72 == -1)
    goto LABEL_171;
  if (v37 >= v41)
    v42 = v40 - v72;
  else
    v42 = v37;
  v43 = v75;
  v73 = v75;
  v74 = xmmword_22F44E310;
  if (v42 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v43 = v73;
    v44 = v74;
  }
  else
  {
    v44 = 0;
    if (!v42)
    {
      v45 = 128;
      goto LABEL_95;
    }
  }
  memcpy((char *)v43 + v44, v72, v42);
  v45 = *((_QWORD *)&v74 + 1);
  v44 = v74;
LABEL_95:
  v46 = v44 + v42;
  *(_QWORD *)&v74 = v46;
  if (v37 >= v41 + 1)
    v47 = v41 + 1;
  else
    v47 = v37;
  v48 = &v72[v47];
  v49 = v37 - v47;
  if (v45 < v46 + v37 - v47)
  {
    v69 = &v72[v47];
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v48 = v69;
    v46 = v74;
  }
  v50 = v73;
  if (v37 > v41 + 1)
  {
    memcpy((char *)v73 + v46, v48, v49);
    v50 = v73;
    v46 = v74;
  }
  v14 = v70;
  *(_QWORD *)&v74 = v46 + v49;
  if (v46 + v49 == a2)
  {
    if (a2)
      v20 = memcmp(v50, a1, a2) == 0;
    else
      v20 = 1;
  }
  else
  {
    v20 = 0;
  }
  if (v50 != v75)
    free(v50);
LABEL_107:
  v51 = v14 != 0;
  if (!v13)
    v51 = v20;
  if (v51)
    return 1;
  v53 = *(_QWORD *)(a3 + 520);
  v54 = *(_QWORD *)(a3 + 528);
  if (v53 != v54)
  {
    while (1)
    {
      v55 = *(_BYTE *)(v53 + 23);
      v56 = v55 < 0;
      v57 = v55 >= 0 ? (const void *)v53 : *(const void **)v53;
      v58 = v55 & 0x7F;
      if (v56)
        v58 = *(_QWORD *)(v53 + 8);
      if (v58 == a2 && (!a2 || !memcmp(v57, a1, a2)))
        break;
      v53 += 24;
      if (v53 == v54)
      {
        v53 = v54;
        return v53 != v54;
      }
    }
  }
  return v53 != v54;
}

uint64_t sub_22F1D89A8(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, _QWORD *a6)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v6 = *(unsigned __int16 *)(a1 + 1344);
  if ((v6 & 4) == 0)
  {
    v8 = a1;
    if ((sub_22F1D8008(a1, a2, a3, a4, a6) & 1) == 0)
    {
      while (!*(_DWORD *)(v8 + 1176))
      {
        v8 = *(_QWORD *)(v8 + 32);
        if (!v8)
          return (v6 >> 2) & 1;
      }
      v9 = *(_QWORD *)(v8 + 1168);
      *(_QWORD *)a5 = *(_QWORD *)v9;
      std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v9 + 8));
      v10 = *(_QWORD *)(v9 + 64);
      v11 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(a5 + 32) = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(a5 + 48) = v11;
      *(_QWORD *)(a5 + 64) = v10;
    }
  }
  return (v6 >> 2) & 1;
}

void sub_22F1D8A24(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  unsigned int v6;
  char v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  unsigned __int8 *v17;
  size_t v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v31 = v33;
  v32 = 0x200000000;
  if (a1)
  {
    v5 = a1;
    v6 = 0;
    do
    {
      v7 = *((_BYTE *)v5 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = v5;
      else
        v9 = (uint64_t *)*v5;
      v10 = v7 & 0x7F;
      if (v8)
        v11 = v5[1];
      else
        v11 = v10;
      if (v6 >= HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v32;
      }
      v12 = (char *)v31 + 16 * v6;
      *v12 = v9;
      v12[1] = v11;
      v6 = v32 + 1;
      LODWORD(v32) = v32 + 1;
      v5 = (uint64_t *)v5[4];
    }
    while (v5);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = MEMORY[0x24BED83D8] + 16;
  v30 = a3;
  llvm::raw_ostream::SetBufferAndMode();
  if ((_DWORD)v32)
  {
    v13 = (char *)v31;
    v14 = (char *)v31 + 16 * v32;
    v15 = v14;
    do
    {
      if (v15 != v14)
      {
        if (v25 == v26)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v22, ".");
        else
          *v26++ = 46;
      }
      v17 = (unsigned __int8 *)*((_QWORD *)v15 - 2);
      v16 = *((_QWORD *)v15 - 1);
      v15 -= 16;
      if (a2)
      {
        if (v16 && (word_22F4ADB24[*v17] & 0xE0) != 0)
        {
          v18 = v16;
          v19 = v17;
          while ((word_22F4ADB24[*v19] & 0xE8) != 0)
          {
            ++v19;
            if (!--v18)
              goto LABEL_23;
          }
        }
        v20 = v26;
        if (v26 >= v25)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v22);
        }
        else
        {
          ++v26;
          *v20 = 34;
        }
        llvm::raw_ostream::write_escaped();
        v21 = v26;
        if (v26 >= v25)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v22);
        }
        else
        {
          ++v26;
          *v21 = 34;
        }
      }
      else
      {
LABEL_23:
        if (v16 <= v25 - v26)
        {
          if (v16)
          {
            memcpy(v26, v17, v16);
            v26 += v16;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v22, (const char *)v17);
        }
      }
    }
    while (v15 != v13);
  }
  if (v26 != v24)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v22);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (v31 != v33)
    free(v31);
}

BOOL sub_22F1D8D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  BOOL v8;
  const void *v9;
  uint64_t v10;
  size_t v11;

  v3 = a3;
  v4 = a1 == 0;
  if (a1 && a3)
  {
    v5 = a1;
    v6 = (_QWORD *)(a2 + 16 * a3 - 8);
    while (1)
    {
      v7 = *(_BYTE *)(v5 + 23);
      v8 = v7 < 0;
      v9 = v7 >= 0 ? (const void *)v5 : *(const void **)v5;
      v10 = v7 & 0x7F;
      v11 = v8 ? *(_QWORD *)(v5 + 8) : v10;
      if (v11 != *v6 || v11 && memcmp(v9, (const void *)*(v6 - 1), v11))
        break;
      v5 = *(_QWORD *)(v5 + 32);
      v4 = v5 == 0;
      if (--v3)
      {
        v6 -= 2;
        if (v5)
          continue;
      }
      return !v3 && v4;
    }
    v4 = 0;
  }
  return !v3 && v4;
}

void sub_22F1D8DAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;

  sub_22E72D044((char *)a1, (uint64_t)&v6);
  v4 = v10;
  if (v10)
  {
    *(_WORD *)(a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = 0;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(v4 + 40);
  }
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
  {
    operator delete(v6);
    if (v4)
      return;
  }
  else if (v4)
  {
    return;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a2, *(void **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 120);
  }
  v5 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 151) < 0)
  {
    sub_22E3BB2B4(v5, *(void **)(a1 + 128), *(_QWORD *)(a1 + 136));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 144);
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 72) & ((uint64_t)(*(_QWORD *)(a1 + 72) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F1D8E98(_QWORD *a1, uint64_t a2)
{
  const void **v3;
  const void **v4;
  char v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = (const void **)a1[48];
  v4 = (const void **)a1[49];
  if (v3 != v4)
  {
    do
    {
      v6 = *((_BYTE *)v3 + 23);
      v7 = v6 < 0;
      if (v6 >= 0)
        v8 = v3;
      else
        v8 = *v3;
      v9 = v6 & 0x7F;
      if (v7)
        v10 = (size_t)v3[1];
      else
        v10 = v9;
      sub_22F1D07D8(a2, v8, v10, 0, 1, (uint64_t)v14);
      if ((v15 & 1) == 0)
        sub_22F41FE64((uint64_t)(a1 + 41), v14);
      v3 += 3;
    }
    while (v3 != v4);
    v11 = a1[48];
    for (i = a1[49]; i != v11; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    a1[49] = v11;
  }
  return a1[44];
}

uint64_t sub_22F1D8F94(uint64_t a1, _BYTE *__s1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;

  v21 = __s1;
  v3 = a1;
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 32);
  }
  while (v3);
  v5 = &v21;
  do
  {
    v6 = *v5;
    v5 = (_QWORD *)(*v5 + 32);
    if (v6)
      v7 = v6 == v4;
    else
      v7 = 1;
  }
  while (!v7);
  if (v6)
    return 1;
  v9 = *(unsigned int *)(v4 + 1720);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD **)(v4 + 1712);
    v11 = &v10[v9];
    do
    {
      v12 = &v21;
      do
      {
        v13 = *v12;
        v12 = (_QWORD *)(*v12 + 32);
        if (v13)
          v14 = v13 == *v10;
        else
          v14 = 1;
      }
      while (!v14);
      if (v13)
        return 1;
      ++v10;
    }
    while (v10 != v11);
  }
  if (!*((_QWORD *)__s1 + 4))
  {
    v15 = __s1[23];
    v16 = *((_QWORD *)__s1 + 1);
    if (v15 >= 0)
      v17 = v15 & 0x7F;
    else
      v17 = *((_QWORD *)__s1 + 1);
    switch(v17)
    {
      case 7:
        if ((__s1[23] & 0x80) != 0)
          __s1 = *(_BYTE **)__s1;
        else
          v16 = __s1[23];
        if (v16 >= 7)
          v19 = 7;
        else
          v19 = v16;
        if (memcmp(__s1, "ptrauth", v19) || v16 != 7)
          goto LABEL_22;
        break;
      case 20:
        if ((__s1[23] & 0x80) != 0)
          __s1 = *(_BYTE **)__s1;
        else
          v16 = __s1[23];
        if (v16 >= 0x14)
          v20 = 20;
        else
          v20 = v16;
        if (memcmp(__s1, "_Builtin_stddef_null", v20) || v16 != 20)
          goto LABEL_22;
        break;
      case 27:
        if ((__s1[23] & 0x80) != 0)
          __s1 = *(_BYTE **)__s1;
        else
          v16 = __s1[23];
        v18 = v16 >= 0x1B ? 27 : v16;
        if (memcmp(__s1, "_Builtin_stddef_max_align_t", v18) || v16 != 27)
          goto LABEL_22;
        break;
      default:
        goto LABEL_22;
    }
    return 1;
  }
LABEL_22:
  if ((*(_WORD *)(a1 + 1344) & 0x2000) != 0)
    sub_22F2A205C(a1 + 1920, (uint64_t *)&v21);
  return 0;
}

void sub_22F1D9140(uint64_t a1, void *__src, size_t __len, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  __int128 *p_dst;
  size_t v14;
  size_t v15;
  __int128 __dst;
  unint64_t v17;
  void *__p[2];
  unint64_t v19;
  char v20;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = a1 + 1256;
  if (__len >= 0x17)
  {
    v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v14 = __len | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v17 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v17) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  *(_OWORD *)__p = __dst;
  v19 = v17;
  v20 = a4;
  sub_22E780FD4(v12, (__n128 *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (sub_22F1D80F8((unsigned __int16 *)__src, __len, a5, a6) != a4)
    sub_22F1D9260(a1, 1);
}

void sub_22F1D9260(uint64_t a1, int a2)
{
  __int16 v3;
  unsigned int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_WORD *)(a1 + 1344);
  if ((v3 & 4) != 0 || (v3 & 1) == 0 && a2)
  {
    v13 = 2;
    v14[0] = a1;
    v4 = 1;
    do
    {
      v5 = v14[--v4];
      v12 = v4;
      v6 = *(_WORD *)(v5 + 1344);
      if ((v6 & 1) != 0)
        v7 = 0;
      else
        v7 = a2;
      if ((v6 & 4) != 0 || v7)
      {
        *(_WORD *)(v5 + 1344) = (v6 | a2) & 0xFFFB;
        v8 = *(uint64_t **)(v5 + 200);
        v9 = *(uint64_t **)(v5 + 208);
        while (v8 != v9)
        {
          v10 = *v8;
          v11 = *(_WORD *)(*v8 + 1344);
          if ((v11 & 4) != 0 || (v11 & 1) == 0 && a2)
          {
            if (v4 >= v13)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v4 = v12;
            }
            v14[v4] = v10;
            v4 = ++v12;
          }
          ++v8;
        }
      }
    }
    while (v4);
  }
}

void sub_22F1D93A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  unsigned int v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a1 + 200);
  for (i = *(uint64_t **)(a1 + 208); v4 != i; ++v4)
  {
    v6 = *v4;
    if ((*(_WORD *)(*v4 + 1344) & 0x20) == 0)
    {
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  v27 = 0;
  v8 = *(unsigned int *)(a1 + 1480);
  if (!(_DWORD)v8)
    return;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 8 * v8;
  do
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 1472) + v9);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_19;
      if (!v14)
      {
        v27 = 0;
LABEL_19:
        v11 = 1;
        v10 = 1;
        goto LABEL_20;
      }
      v16 = v27;
      if (v27 >= 4uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v27;
      }
      v10 = 0;
      v28[v16] = v14;
      ++v27;
      v11 = 1;
    }
    else
    {
      v15 = *(unsigned int *)(a2 + 8);
      if (v15 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v15) = v14;
      ++*(_DWORD *)(a2 + 8);
    }
LABEL_20:
    v9 += 8;
  }
  while (v12 != v9);
  if ((v11 & 1) != 0)
  {
    v17 = *(unsigned int *)(a1 + 1392);
    if ((_DWORD)v17)
    {
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 8 * v18);
        if ((v10 & 1) != 0)
          goto LABEL_25;
        if (v27)
          break;
LABEL_43:
        if (++v18 == v17)
          return;
      }
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = v28[v21];
        if (v19 == v23)
          break;
        if (v19)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 8 * v18);
          do
          {
            v24 = *(_QWORD *)(v24 + 32);
            v25 = v24 != 0;
          }
          while (v24 != v23 && v24 != 0);
        }
        else
        {
          v25 = 0;
        }
        v22 |= v25;
        if (++v21 == v27 || v25)
        {
          if ((v22 & 1) != 0)
            break;
          goto LABEL_43;
        }
      }
LABEL_25:
      v20 = *(unsigned int *)(a2 + 8);
      if (v20 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = v19;
      ++*(_DWORD *)(a2 + 8);
      goto LABEL_43;
    }
  }
}

uint64_t sub_22F1D9648(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 **v12;
  char v13;
  unsigned __int8 *v14;
  size_t v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _BYTE *v31;
  uint64_t v32;
  const char *v33;
  _BYTE *v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  _WORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  const char *v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned int *v49;
  const void **v50;
  unsigned int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  char *v57;
  char *v58;
  llvm::raw_ostream *v59;
  uint64_t v60;
  llvm::raw_ostream *v61;
  _DWORD *v62;
  llvm::raw_ostream *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  unsigned int *v71;
  const void *v72;
  size_t v73;
  _QWORD *v74;
  llvm::raw_ostream *v75;
  _BYTE *v76;
  _WORD *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  llvm::raw_ostream *v82;
  const char *v83;
  llvm::raw_ostream *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t *v92;
  void **v93;
  _WORD *v94;
  llvm::raw_ostream *v95;
  const char *v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  _BYTE *v106;
  int v107;
  const char *v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t **v112;
  uint64_t *v113;
  llvm *v114;
  llvm::raw_ostream *v115;
  llvm::raw_ostream *v116;
  _DWORD *v117;
  void **v118;
  llvm::raw_ostream *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  void **v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _WORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  _WORD *v150;
  uint64_t v151;
  uint64_t v152;
  _WORD *v153;
  uint64_t result;
  _WORD *v155;
  char v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t *v160;
  void *v161;
  char v162;
  void *__p;
  char v164;
  uint64_t v165;
  void *v166[2];
  char v167;
  void *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
  if ((*(_WORD *)(a1 + 1344) & 0x10) != 0)
  {
    v7 = a2[4];
    if ((unint64_t)(a2[3] - v7) > 9)
    {
      *(_WORD *)(v7 + 8) = 8299;
      *(_QWORD *)v7 = *(_QWORD *)"framework ";
      a2[4] += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "framework ");
    }
  }
  if ((*(_WORD *)(a1 + 1344) & 0x20) != 0)
  {
    v8 = a2[4];
    if ((unint64_t)(a2[3] - v8) > 8)
    {
      *(_BYTE *)(v8 + 8) = 32;
      *(_QWORD *)v8 = *(_QWORD *)"explicit ";
      a2[4] += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "explicit ");
    }
  }
  v9 = (_DWORD *)a2[4];
  v159 = a1;
  v160 = a2 + 4;
  v156 = a4;
  if ((unint64_t)(a2[3] - (_QWORD)v9) > 6)
  {
    *(_DWORD *)((char *)v9 + 3) = 543517813;
    *v9 = 1969516397;
    *v160 += 7;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a2, "module ");
  }
  v10 = 0;
  while (1)
  {
    do
    {
      v12 = (unsigned __int8 **)(v159 + 24 * v10);
      v13 = *((_BYTE *)v12 + 23);
      if (v13 >= 0)
        v14 = (unsigned __int8 *)(v159 + 24 * v10);
      else
        v14 = *v12;
      if (v13 >= 0)
        v15 = v13 & 0x7F;
      else
        v15 = (size_t)v12[1];
      if (v15 && (word_22F4ADB24[*v14] & 0xE0) != 0)
      {
        v16 = 0;
        while ((word_22F4ADB24[v14[v16]] & 0xE8) != 0)
        {
          if (v15 == ++v16)
          {
            v17 = (void *)a2[4];
            if (v15 <= a2[3] - (uint64_t)v17)
            {
              memcpy(v17, v14, v15);
              *v160 += v15;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v14);
            }
            goto LABEL_33;
          }
        }
      }
      v18 = (_BYTE *)a2[4];
      if ((unint64_t)v18 >= a2[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2);
      }
      else
      {
        *v160 = (uint64_t)(v18 + 1);
        *v18 = 34;
      }
      llvm::raw_ostream::write_escaped();
      v19 = (_BYTE *)a2[4];
      if ((unint64_t)v19 >= a2[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2);
      }
      else
      {
        *v160 = (uint64_t)(v19 + 1);
        *v19 = 34;
      }
LABEL_33:
      ++v10;
    }
    while (!v10);
    if (v10 == 1)
      break;
    v11 = (_BYTE *)a2[4];
    if ((_BYTE *)a2[3] == v11)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, ".");
    }
    else
    {
      *v11 = 46;
      ++*v160;
    }
  }
  v20 = v159;
  if ((*(_WORD *)(v159 + 1344) & 0xC0) != 0)
  {
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    if ((*(_WORD *)(v159 + 1344) & 0x40) != 0)
    {
      v21 = a2[4];
      if ((unint64_t)(a2[3] - v21) > 8)
      {
        *(_BYTE *)(v21 + 8) = 93;
        *(_QWORD *)v21 = *(_QWORD *)" [system]";
        *v160 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, " [system]");
      }
    }
    v22 = *(_WORD *)(v159 + 1344);
    if ((v22 & 0x80) != 0)
    {
      v23 = a2[4];
      if ((unint64_t)(a2[3] - v23) > 0xA)
      {
        *(_DWORD *)(v23 + 7) = 1566793582;
        *(_QWORD *)v23 = *(_QWORD *)" [extern_c]";
        *v160 += 11;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, " [extern_c]");
      }
      v22 = *(_WORD *)(v159 + 1344);
    }
    if (v22 < 0)
    {
      v24 = (void *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v24) > 0x1E)
      {
        qmemcpy(v24, " [swift_infer_import_as_member]", 31);
        *v160 += 31;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, " [swift_infer_import_as_member]");
      }
    }
  }
  v25 = a2[4];
  if ((unint64_t)(a2[3] - v25) > 2)
  {
    *(_BYTE *)(v25 + 2) = 10;
    *(_WORD *)v25 = 31520;
    *v160 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a2, " {\n");
  }
  if (*(_DWORD *)(v159 + 1264))
  {
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    v26 = a2[4];
    if ((unint64_t)(a2[3] - v26) > 8)
    {
      *(_BYTE *)(v26 + 8) = 32;
      *(_QWORD *)v26 = *(_QWORD *)"requires ";
      *v160 += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "requires ");
    }
    v27 = *(unsigned int *)(v159 + 1264);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = 32 * v27;
      do
      {
        if (v28)
        {
          v30 = (_WORD *)a2[4];
          if ((unint64_t)(a2[3] - (_QWORD)v30) > 1)
          {
            *v30 = 8236;
            *v160 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, ", ");
          }
        }
        if (!*(_BYTE *)(*(_QWORD *)(v159 + 1256) + v28 + 24))
        {
          v31 = (_BYTE *)a2[4];
          if ((_BYTE *)a2[3] == v31)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, "!");
          }
          else
          {
            *v31 = 33;
            ++*v160;
          }
        }
        v32 = *(_QWORD *)(v159 + 1256) + v28;
        if (*(char *)(v32 + 23) >= 0)
          v33 = (const char *)(*(_QWORD *)(v159 + 1256) + v28);
        else
          v33 = *(const char **)v32;
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, v33);
        v28 += 32;
      }
      while (v29 != v28);
    }
    v34 = (_BYTE *)a2[4];
    if ((_BYTE *)a2[3] == v34)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
    }
    else
    {
      *v34 = 10;
      ++*v160;
    }
  }
  sub_22E72D044((char *)v159, (uint64_t)v166);
  if (v170)
  {
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    v35 = a2[4];
    if ((unint64_t)(a2[3] - v35) > 0x10)
    {
      *(_BYTE *)(v35 + 16) = 34;
      *(_OWORD *)v35 = *(_OWORD *)"umbrella header \"";
      *v160 += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "umbrella header \"");
    }
    llvm::raw_ostream::write_escaped();
    v36 = (_WORD *)a2[4];
    if ((unint64_t)(a2[3] - (_QWORD)v36) > 1)
    {
      *v36 = 2594;
      *v160 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"\n");
    }
  }
  else
  {
    sub_22F1D8DAC(v159, (uint64_t)&v161);
    if (v165)
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v37 = a2[4];
      if ((unint64_t)(a2[3] - v37) > 9)
      {
        *(_WORD *)(v37 + 8) = 8736;
        *(_QWORD *)v37 = *(_QWORD *)"umbrella \"";
        *v160 += 10;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "umbrella \"");
      }
      llvm::raw_ostream::write_escaped();
      v38 = (_WORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v38) > 1)
      {
        *v38 = 2594;
        *v160 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"\n");
      }
    }
    if (v164 < 0)
      operator delete(__p);
    if (v162 < 0)
      operator delete(v161);
  }
  if (v169 < 0)
    operator delete(v168);
  if (v167 < 0)
    operator delete(v166[0]);
  if (*(_QWORD *)(v159 + 2064) != *(_QWORD *)(v159 + 2072) || (*(_WORD *)(v159 + 1344) & 0x1000) != 0)
  {
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    v39 = (void *)a2[4];
    if ((unint64_t)(a2[3] - (_QWORD)v39) > 0xD)
    {
      qmemcpy(v39, "config_macros ", 14);
      *v160 += 14;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "config_macros ");
    }
    if ((*(_WORD *)(v159 + 1344) & 0x1000) != 0)
    {
      v40 = a2[4];
      if ((unint64_t)(a2[3] - v40) > 0xB)
      {
        *(_DWORD *)(v40 + 8) = 1566930537;
        *(_QWORD *)v40 = *(_QWORD *)"[exhaustive]";
        *v160 += 12;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "[exhaustive]");
      }
    }
    v41 = -1431655765 * ((*(_QWORD *)(v159 + 2072) - *(_QWORD *)(v159 + 2064)) >> 3);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = 24 * v41;
      do
      {
        if (v42)
        {
          v44 = (_WORD *)a2[4];
          if ((unint64_t)(a2[3] - (_QWORD)v44) > 1)
          {
            *v44 = 8236;
            *v160 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, ", ");
          }
        }
        v45 = *(_QWORD *)(v159 + 2064) + v42;
        if (*(char *)(v45 + 23) >= 0)
          v46 = (const char *)(*(_QWORD *)(v159 + 2064) + v42);
        else
          v46 = *(const char **)v45;
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, v46);
        v42 += 24;
      }
      while (v43 != v42);
    }
    v47 = (_BYTE *)a2[4];
    if ((_BYTE *)a2[3] == v47)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
    }
    else
    {
      *v47 = 10;
      ++*v160;
    }
  }
  v48 = 0;
  v49 = (unsigned int *)&off_24FAE16C0;
  v50 = (const void **)&off_24FAE16C0;
  do
  {
    v51 = v49;
    v157 = v48;
    v52 = v20 + ((unint64_t)v49[6 * v48 + 4] << 7);
    v53 = *(unsigned int *)(v52 + 448);
    if ((_DWORD)v53)
    {
      v54 = *(_QWORD *)(v52 + 440);
      v55 = 56 * v53;
      do
      {
        llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
        v56 = *v50;
        v57 = (char *)v50[1];
        v58 = (char *)a2[4];
        if ((unint64_t)v57 <= a2[3] - (uint64_t)v58)
        {
          if (v57)
          {
            memcpy(v58, v56, (size_t)v50[1]);
            v58 = &v57[*v160];
            *v160 = (uint64_t)v58;
          }
          v59 = (llvm::raw_ostream *)a2;
        }
        else
        {
          v59 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v56);
          v58 = (char *)*((_QWORD *)v59 + 4);
        }
        if (*((_QWORD *)v59 + 3) - (_QWORD)v58 > 7uLL)
        {
          *(_QWORD *)v58 = 0x2220726564616568;
          *((_QWORD *)v59 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v59, "header \"");
        }
        llvm::raw_ostream::write_escaped();
        v60 = a2[4];
        if ((unint64_t)(a2[3] - v60) > 8)
        {
          *(_BYTE *)(v60 + 8) = 32;
          *(_QWORD *)v60 = *(_QWORD *)"\" { size ";
          *v160 += 9;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\" { size ");
        }
        v61 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v62 = (_DWORD *)*((_QWORD *)v61 + 4);
        if (*((_QWORD *)v61 + 3) - (_QWORD)v62 > 6uLL)
        {
          *(_DWORD *)((char *)v62 + 3) = 543518057;
          *v62 = 1769237792;
          *((_QWORD *)v61 + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(v61, " mtime ");
        }
        v63 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v64 = *((_QWORD *)v63 + 4);
        if ((unint64_t)(*((_QWORD *)v63 + 3) - v64) > 2)
        {
          *(_BYTE *)(v64 + 2) = 10;
          *(_WORD *)v64 = 32032;
          *((_QWORD *)v63 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v63, " }\n");
        }
        v54 += 56;
        v55 -= 56;
      }
      while (v55);
    }
    v20 = v159;
    v48 = v157 + 1;
    v49 = v51;
    v50 = (const void **)&v51[6 * v157 + 6];
  }
  while (v157 != 4);
  v65 = 0;
  v66 = 0;
  v166[0] = (void *)(v159 + 1080);
  v166[1] = (void *)(v159 + 1168);
  do
  {
    v158 = v65;
    v67 = (unsigned int *)v166[v66];
    v68 = v67[2];
    if ((_DWORD)v68)
    {
      v69 = 72 * v68;
      v70 = (_BYTE *)(*(_QWORD *)v67 + 64);
      do
      {
        llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
        v71 = &v51[6 * *((unsigned int *)v70 - 16)];
        v72 = *(const void **)v71;
        v73 = *((_QWORD *)v71 + 1);
        v74 = (_QWORD *)a2[4];
        if (v73 <= a2[3] - (uint64_t)v74)
        {
          if (v73)
          {
            memcpy(v74, v72, v73);
            v74 = (_QWORD *)(*v160 + v73);
            *v160 = (uint64_t)v74;
          }
          v75 = (llvm::raw_ostream *)a2;
        }
        else
        {
          v75 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v72);
          v74 = (_QWORD *)*((_QWORD *)v75 + 4);
        }
        if (*((_QWORD *)v75 + 3) - (_QWORD)v74 > 7uLL)
        {
          *v74 = 0x2220726564616568;
          *((_QWORD *)v75 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v75, "header \"");
        }
        llvm::raw_ostream::write_escaped();
        v76 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v76)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"");
        }
        else
        {
          *v76 = 34;
          ++*v160;
        }
        if (*(v70 - 16) || *v70)
        {
          v77 = (_WORD *)a2[4];
          if ((unint64_t)(a2[3] - (_QWORD)v77) > 1)
          {
            *v77 = 31520;
            v78 = *v160 + 2;
            *v160 = v78;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, " {");
            v78 = a2[4];
          }
          if (*(v70 - 16))
          {
            if ((unint64_t)(a2[3] - v78) > 5)
            {
              *(_WORD *)(v78 + 4) = 8293;
              *(_DWORD *)v78 = 2053731104;
              *v160 += 6;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a2, " size ");
            }
            llvm::raw_ostream::operator<<();
            v78 = a2[4];
          }
          if (*v70)
          {
            if ((unint64_t)(a2[3] - v78) > 6)
            {
              *(_DWORD *)(v78 + 3) = 543518057;
              *(_DWORD *)v78 = 1769237792;
              *v160 += 7;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a2, " mtime ");
            }
            llvm::raw_ostream::operator<<();
            v78 = a2[4];
          }
          if ((unint64_t)(a2[3] - v78) > 1)
          {
            *(_WORD *)v78 = 32032;
            *v160 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, " }");
          }
        }
        v79 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v79)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
        }
        else
        {
          *v79 = 10;
          ++*v160;
        }
        v70 += 72;
        v69 -= 72;
      }
      while (v69);
    }
    v65 = 1;
    v66 = 1;
  }
  while ((v158 & 1) == 0);
  if (*(char *)(v159 + 175) < 0)
    v80 = *(_QWORD *)(v159 + 160);
  else
    v80 = *(unsigned __int8 *)(v159 + 175);
  if (v80)
  {
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    v81 = a2[4];
    if ((unint64_t)(a2[3] - v81) > 8)
    {
      *(_BYTE *)(v81 + 8) = 115;
      *(_QWORD *)v81 = *(_QWORD *)"export_as";
      *v160 += 9;
      v82 = (llvm::raw_ostream *)a2;
    }
    else
    {
      v82 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)a2, "export_as");
    }
    if (*(char *)(v159 + 175) >= 0)
      v83 = (const char *)(v159 + 152);
    else
      v83 = *(const char **)(v159 + 152);
    v84 = (llvm::raw_ostream *)llvm::raw_ostream::write(v82, v83);
    v85 = (_BYTE *)*((_QWORD *)v84 + 4);
    if (*((_BYTE **)v84 + 3) == v85)
    {
      llvm::raw_ostream::write(v84, "\n");
    }
    else
    {
      *v85 = 10;
      ++*((_QWORD *)v84 + 4);
    }
  }
  v86 = *(_QWORD *)(v159 + 200);
  for (i = *(_QWORD *)(v159 + 208); v86 != i; v86 += 8)
  {
    if ((*(_WORD *)(*(_QWORD *)v86 + 1344) & 0x110) != 0x100)
      sub_22F1D9648();
  }
  v88 = *(unsigned int *)(v159 + 1480);
  if ((_DWORD)v88)
  {
    v89 = 0;
    v90 = 8 * v88;
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v91 = (_DWORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v91) > 6)
      {
        *(_DWORD *)((char *)v91 + 3) = 544502383;
        *v91 = 1869641829;
        *v160 += 7;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "export ");
      }
      v92 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v159 + 1472) + v89) & 0xFFFFFFFFFFFFFFF8);
      if (v92)
      {
        sub_22F1D8A24(v92, 1, v166);
        if (v167 >= 0)
          v93 = v166;
        else
          v93 = (void **)v166[0];
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v93);
        if (v167 < 0)
          operator delete(v166[0]);
        if ((*(_BYTE *)(*(_QWORD *)(v159 + 1472) + v89) & 4) == 0)
          goto LABEL_199;
        v94 = (_WORD *)a2[4];
        if ((unint64_t)(a2[3] - (_QWORD)v94) > 1)
        {
          *v94 = 10798;
          v99 = a2 + 4;
          v100 = *v160 + 2;
          goto LABEL_207;
        }
        v95 = (llvm::raw_ostream *)a2;
        v96 = ".*";
      }
      else
      {
        v97 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] != v97)
        {
          *v97 = 42;
          v99 = a2 + 4;
          v100 = *v160 + 1;
LABEL_207:
          *v99 = v100;
          goto LABEL_199;
        }
        v95 = (llvm::raw_ostream *)a2;
        v96 = "*";
      }
      llvm::raw_ostream::write(v95, v96);
LABEL_199:
      v98 = (_BYTE *)a2[4];
      if ((_BYTE *)a2[3] == v98)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
      }
      else
      {
        *v98 = 10;
        ++*v160;
      }
      v89 += 8;
    }
    while (v90 != v89);
  }
  v101 = *(unsigned int *)(v159 + 1512);
  if ((_DWORD)v101)
  {
    v102 = 0;
    v103 = 96 * v101;
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v104 = (_DWORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v104) > 6)
      {
        *(_DWORD *)((char *)v104 + 3) = 544502383;
        *v104 = 1869641829;
        *v160 += 7;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "export ");
      }
      sub_22F1DB2D0((llvm::raw_ostream *)a2, *(unsigned __int8 **)(*(_QWORD *)(v159 + 1504) + v102 + 8), *(_DWORD *)(*(_QWORD *)(v159 + 1504) + v102 + 16));
      v105 = *(_QWORD *)(v159 + 1504) + v102;
      v106 = (_BYTE *)a2[4];
      if (*(_BYTE *)(v105 + 88))
      {
        v107 = *(_DWORD *)(v105 + 16);
        if (v107)
          v108 = ".*";
        else
          v108 = "*";
        if (v107)
          v109 = 2;
        else
          v109 = 1;
        if (v109 <= a2[3] - (uint64_t)v106)
        {
          memcpy(v106, v108, v109);
          v106 = (_BYTE *)(*v160 + v109);
          *v160 = (uint64_t)v106;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, v108);
          v106 = (_BYTE *)a2[4];
        }
      }
      if ((_BYTE *)a2[3] == v106)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
      }
      else
      {
        *v106 = 10;
        ++*v160;
      }
      v102 += 96;
    }
    while (v103 != v102);
  }
  if ((v156 & 1) != 0)
  {
    v110 = *(unsigned int *)(v159 + 1392);
    if ((_DWORD)v110)
    {
      v111 = 8 * v110;
      v112 = *(uint64_t ***)(v159 + 1384);
      do
      {
        v113 = *v112;
        v114 = (llvm *)llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
        v115 = (llvm::raw_ostream *)llvm::errs(v114);
        v116 = v115;
        v117 = (_DWORD *)*((_QWORD *)v115 + 4);
        if (*((_QWORD *)v115 + 3) - (_QWORD)v117 > 6uLL)
        {
          *(_DWORD *)((char *)v117 + 3) = 544502383;
          *v117 = 1869639017;
          *((_QWORD *)v115 + 4) += 7;
        }
        else
        {
          v116 = (llvm::raw_ostream *)llvm::raw_ostream::write(v115, "import ");
        }
        sub_22F1D8A24(v113, 0, v166);
        if (v167 >= 0)
          v118 = v166;
        else
          v118 = (void **)v166[0];
        v119 = (llvm::raw_ostream *)llvm::raw_ostream::write(v116, (const char *)v118);
        v120 = (_BYTE *)*((_QWORD *)v119 + 4);
        if (*((_BYTE **)v119 + 3) == v120)
        {
          llvm::raw_ostream::write(v119, "\n");
        }
        else
        {
          *v120 = 10;
          ++*((_QWORD *)v119 + 4);
        }
        if (v167 < 0)
          operator delete(v166[0]);
        ++v112;
        v111 -= 8;
      }
      while (v111);
    }
  }
  v121 = *(unsigned int *)(v159 + 1720);
  if ((_DWORD)v121)
  {
    v122 = 0;
    v123 = 8 * v121;
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v124 = (_DWORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v124) > 3)
      {
        *v124 = 543519605;
        *v160 += 4;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "use ");
      }
      sub_22F1D8A24(*(uint64_t **)(*(_QWORD *)(v159 + 1712) + v122), 1, v166);
      if (v167 >= 0)
        v125 = v166;
      else
        v125 = (void **)v166[0];
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v125);
      if (v167 < 0)
        operator delete(v166[0]);
      v126 = (_BYTE *)a2[4];
      if ((_BYTE *)a2[3] == v126)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
      }
      else
      {
        *v126 = 10;
        ++*v160;
      }
      v122 += 8;
    }
    while (v123 != v122);
  }
  v127 = *(unsigned int *)(v159 + 1752);
  if ((_DWORD)v127)
  {
    v128 = 0;
    v129 = 80 * v127;
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v130 = (_DWORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v130) > 3)
      {
        *v130 = 543519605;
        *v160 += 4;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "use ");
      }
      sub_22F1DB2D0((llvm::raw_ostream *)a2, *(unsigned __int8 **)(*(_QWORD *)(v159 + 1744) + v128), *(_DWORD *)(*(_QWORD *)(v159 + 1744) + v128 + 8));
      v131 = (_BYTE *)a2[4];
      if ((_BYTE *)a2[3] == v131)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\n");
      }
      else
      {
        *v131 = 10;
        ++*v160;
      }
      v128 += 80;
    }
    while (v129 != v128);
  }
  v132 = *(unsigned int *)(v159 + 1984);
  if ((_DWORD)v132)
  {
    v133 = 0;
    v134 = 32 * v132;
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v135 = a2[4];
      if ((unint64_t)(a2[3] - v135) > 4)
      {
        *(_BYTE *)(v135 + 4) = 32;
        *(_DWORD *)v135 = 1802398060;
        v136 = *v160 + 5;
        *v160 = v136;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "link ");
        v136 = a2[4];
      }
      if (*(_BYTE *)(*(_QWORD *)(v159 + 1976) + v133 + 24))
      {
        if ((unint64_t)(a2[3] - v136) > 9)
        {
          *(_WORD *)(v136 + 8) = 8299;
          *(_QWORD *)v136 = *(_QWORD *)"framework ";
          v136 = *v160 + 10;
          *v160 = v136;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "framework ");
          v136 = a2[4];
        }
      }
      if (a2[3] == v136)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"");
      }
      else
      {
        *(_BYTE *)v136 = 34;
        ++*v160;
      }
      llvm::raw_ostream::write_escaped();
      v137 = (_BYTE *)a2[4];
      if ((_BYTE *)a2[3] == v137)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"");
      }
      else
      {
        *v137 = 34;
        ++*v160;
      }
      v133 += 32;
    }
    while (v134 != v133);
  }
  v138 = -991146299 * ((*(_QWORD *)(v159 + 2096) - *(_QWORD *)(v159 + 2088)) >> 3);
  if (v138)
  {
    v139 = 0;
    v140 = 104 * v138;
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v141 = a2[4];
      if ((unint64_t)(a2[3] - v141) > 8)
      {
        *(_BYTE *)(v141 + 8) = 32;
        *(_QWORD *)v141 = *(_QWORD *)"conflict ";
        *v160 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "conflict ");
      }
      sub_22F1DB2D0((llvm::raw_ostream *)a2, *(unsigned __int8 **)(*(_QWORD *)(v159 + 2088) + v139), *(_DWORD *)(*(_QWORD *)(v159 + 2088) + v139 + 8));
      v142 = a2[4];
      if ((unint64_t)(a2[3] - v142) > 2)
      {
        *(_BYTE *)(v142 + 2) = 34;
        *(_WORD *)v142 = 8236;
        *v160 += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, ", \"");
      }
      llvm::raw_ostream::write_escaped();
      v143 = (_WORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v143) > 1)
      {
        *v143 = 2594;
        *v160 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"\n");
      }
      v139 += 104;
    }
    while (v140 != v139);
  }
  v144 = *(_QWORD *)(v159 + 2120) - *(_QWORD *)(v159 + 2112);
  if ((v144 & 0x1FFFFFFFE0) != 0)
  {
    v145 = 0;
    v146 = (v144 >> 5);
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v147 = a2[4];
      if ((unint64_t)(a2[3] - v147) > 8)
      {
        *(_BYTE *)(v147 + 8) = 32;
        *(_QWORD *)v147 = *(_QWORD *)"conflict ";
        *v160 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "conflict ");
      }
      sub_22F1D8A24(*(uint64_t **)(*(_QWORD *)(v159 + 2112) + v145), 1, v166);
      if (v167 >= 0)
        v148 = v166;
      else
        v148 = (void **)v166[0];
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v148);
      if (v167 < 0)
        operator delete(v166[0]);
      v149 = a2[4];
      if ((unint64_t)(a2[3] - v149) > 2)
      {
        *(_BYTE *)(v149 + 2) = 34;
        *(_WORD *)v149 = 8236;
        *v160 += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, ", \"");
      }
      llvm::raw_ostream::write_escaped();
      v150 = (_WORD *)a2[4];
      if ((unint64_t)(a2[3] - (_QWORD)v150) > 1)
      {
        *v150 = 2594;
        *v160 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\"\n");
      }
      v145 += 32;
      --v146;
    }
    while (v146);
  }
  if ((*(_WORD *)(v159 + 1344) & 0x200) != 0)
  {
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    v151 = a2[4];
    if ((*(_WORD *)(v159 + 1344) & 0x400) != 0)
    {
      if ((unint64_t)(a2[3] - v151) > 8)
      {
        *(_BYTE *)(v151 + 8) = 32;
        *(_QWORD *)v151 = *(_QWORD *)"explicit ";
        v151 = *v160 + 9;
        *v160 = v151;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "explicit ");
        v151 = a2[4];
      }
    }
    if ((unint64_t)(a2[3] - v151) > 0xA)
    {
      *(_DWORD *)(v151 + 7) = 175841322;
      *(_QWORD *)v151 = *(_QWORD *)"module * {\n";
      *v160 += 11;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "module * {\n");
    }
    if ((*(_WORD *)(v159 + 1344) & 0x800) != 0)
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
      v152 = a2[4];
      if ((unint64_t)(a2[3] - v152) > 8)
      {
        *(_BYTE *)(v152 + 8) = 10;
        *(_QWORD *)v152 = *(_QWORD *)"export *\n";
        *v160 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "export *\n");
      }
    }
    llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
    v153 = (_WORD *)a2[4];
    if ((unint64_t)(a2[3] - (_QWORD)v153) > 1)
    {
      *v153 = 2685;
      *v160 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, "}\n");
    }
  }
  result = llvm::raw_ostream::indent((llvm::raw_ostream *)a2);
  v155 = (_WORD *)a2[4];
  if ((unint64_t)(a2[3] - (_QWORD)v155) <= 1)
    return llvm::raw_ostream::write((llvm::raw_ostream *)a2, "}\n");
  *v155 = 2685;
  *v160 += 2;
  return result;
}

llvm::raw_ostream *sub_22F1DB2D0(llvm::raw_ostream *this, unsigned __int8 *a2, int a3)
{
  llvm::raw_ostream *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BYTE *v7;
  signed __int8 v8;
  BOOL v9;
  unsigned __int8 *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  _BYTE *v16;

  if (a3)
  {
    v4 = this;
    v5 = &a2[32 * a3];
    v6 = a2;
    do
    {
      if (v6 != a2)
      {
        v7 = (_BYTE *)*((_QWORD *)v4 + 4);
        if (*((_BYTE **)v4 + 3) == v7)
        {
          llvm::raw_ostream::write(v4, ".");
        }
        else
        {
          *v7 = 46;
          ++*((_QWORD *)v4 + 4);
        }
      }
      v8 = v6[23];
      v9 = v8 < 0;
      if (v8 >= 0)
        v10 = v6;
      else
        v10 = *(unsigned __int8 **)v6;
      v11 = v8 & 0x7F;
      if (v9)
        v12 = *((_QWORD *)v6 + 1);
      else
        v12 = v11;
      if (v12 && (word_22F4ADB24[*v10] & 0xE0) != 0)
      {
        v13 = 0;
        while ((word_22F4ADB24[v10[v13]] & 0xE8) != 0)
        {
          if (v12 == ++v13)
          {
            v14 = (void *)*((_QWORD *)v4 + 4);
            if (v12 <= *((_QWORD *)v4 + 3) - (_QWORD)v14)
            {
              this = (llvm::raw_ostream *)memcpy(v14, v10, v12);
              *((_QWORD *)v4 + 4) += v12;
            }
            else
            {
              this = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v10);
            }
            goto LABEL_25;
          }
        }
      }
      v15 = (_BYTE *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v4 + 3))
      {
        llvm::raw_ostream::write(v4);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v15 + 1;
        *v15 = 34;
      }
      this = (llvm::raw_ostream *)llvm::raw_ostream::write_escaped();
      v16 = (_BYTE *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v4 + 3))
      {
        this = (llvm::raw_ostream *)llvm::raw_ostream::write(v4);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v16 + 1;
        *v16 = 34;
      }
LABEL_25:
      v6 += 32;
    }
    while (v6 != v5);
  }
  return this;
}

uint64_t sub_22F1DB478(uint64_t result, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t (**v11)(void);
  unint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  int v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v8 = result;
  v19 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v14[0] = a4;
  v14[1] = a5;
  v13[0] = a6;
  v13[1] = a7;
  v12 = a2;
  v9 = *(unsigned int *)(a2 + 432);
  if (v9 >= (uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 2 || !*(_DWORD *)(*(_QWORD *)result + 4 * v9))
  {
    ++*(_DWORD *)(result + 24);
    v10 = operator new(0x38uLL);
    *v10 = &off_24FAE1748;
    v10[1] = v8;
    v10[2] = &v15;
    v10[3] = v14;
    v10[4] = &v12;
    v10[5] = v17;
    v10[6] = v13;
    v18 = v10;
    v16 = a2;
    sub_22F1DB850((uint64_t)v10, &v16);
    result = (uint64_t)v18;
    if (v18 == v17)
    {
      v11 = (uint64_t (**)(void))(v17[0] + 32);
    }
    else
    {
      if (!v18)
        return result;
      v11 = (uint64_t (**)(void))(*v18 + 40);
    }
    return (*v11)();
  }
  return result;
}

const void **sub_22F1DB578@<X0>(const void **result@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = (__int128 *)result[9];
  if (!v3)
  {
    v5 = (size_t)result[1];
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = *result;
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = operator new(v7 + 1);
      a2[1] = v5;
      a2[2] = v8 | 0x8000000000000000;
      *a2 = v9;
      a2 = v9;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v5;
      if (!v5)
        goto LABEL_13;
    }
    result = (const void **)memmove(a2, v6, v5);
LABEL_13:
    *((_BYTE *)a2 + v5) = 0;
    return result;
  }
  if (*((char *)v3 + 23) < 0)
    return (const void **)sub_22E3BB2B4(a2, *(void **)v3, *((_QWORD *)v3 + 1));
  v4 = *v3;
  a2[2] = *((_QWORD *)v3 + 2);
  *(_OWORD *)a2 = v4;
  return result;
}

uint64_t sub_22F1DB648(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = v16;
    do
    {
      v11 = v8;
      v12 = *(_QWORD *)(a1 + 8 + 8 * v9);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v10++ = v12;
      v8 = 1;
      v9 = 1;
    }
    while ((v11 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22F420410(a1, v16, v10);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F420410(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

void sub_22F1DB7C4()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22F1DB7D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FAE1748;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_22F1DB820(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FAE1748;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_22F1DB850(uint64_t a1, __int128 *a2)
{
  char **v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  int v18;
  char *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[64];
  void *v36;
  uint64_t v37;
  _QWORD v38[18];

  v38[16] = *MEMORY[0x24BDAC8D0];
  v32 = *a2;
  v3 = *(char ***)(a1 + 8);
  v4 = v32;
  v5 = *(unsigned int *)(v32 + 432);
  v6 = *v3;
  v7 = v3[1];
  v8 = v7 - *v3;
  v9 = v8 >> 2;
  if (v8 >> 2 > v5)
  {
    v10 = *v3;
    if (*(_DWORD *)&v6[4 * v5])
      return;
    goto LABEL_19;
  }
  v11 = (v5 + 1);
  v12 = v11 - v9;
  if (v11 > v9)
  {
    v13 = v3[2];
    if (v12 > (v13 - v7) >> 2)
    {
      v14 = v13 - v6;
      if (v14 >> 1 > v11)
        v11 = v14 >> 1;
      v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
      v16 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v11;
      if (v16 >> 62)
        sub_22E3B3F8C();
      v30 = v16;
      v17 = (char *)operator new(4 * v16);
      v10 = &v17[4 * v9];
      v31 = &v17[4 * v30];
      bzero(v10, 4 * v12);
      while (v7 != v6)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v10 - 1) = v18;
        v10 -= 4;
      }
      *v3 = v10;
      v3[1] = &v17[4 * v12 + v8];
      v3[2] = v31;
      if (v6)
      {
        operator delete(v6);
        v10 = *v3;
      }
      goto LABEL_19;
    }
    bzero(v3[1], 4 * v12);
    v19 = &v7[4 * v12];
    goto LABEL_17;
  }
  if (v11 < v9)
  {
    v19 = &v6[4 * v11];
LABEL_17:
    v3[1] = v19;
  }
  v10 = v6;
LABEL_19:
  *(_DWORD *)&v10[4 * v5] = **(_DWORD **)(a1 + 16);
  (**(void (***)(_QWORD, _QWORD))(a1 + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), **(_QWORD **)(a1 + 32));
  v36 = v38;
  v37 = 0x1000000000;
  sub_22F1D93A0(v4, (uint64_t)&v36);
  if ((_DWORD)v37)
  {
    v20 = (void **)v36;
    v21 = 8 * v37;
    do
    {
      if ((*((_WORD *)*v20 + 672) & 1) == 0)
      {
        v22 = *(_QWORD *)(a1 + 40);
        v33 = *v20;
        v34 = (uint64_t)&v32;
        v23 = *(_QWORD *)(v22 + 24);
        if (!v23)
          sub_22E4A06C4();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &v33);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v4 = v32;
  }
  v24 = *(_QWORD *)(v4 + 2112);
  for (i = *(_QWORD *)(v4 + 2120); v24 != i; v24 += 32)
  {
    v26 = *(unsigned int *)(*(_QWORD *)v24 + 432);
    if (v26 < (v3[1] - *v3) >> 2 && *(_DWORD *)&(*v3)[4 * v26])
    {
      v27 = 0;
      v33 = v35;
      v34 = 0x800000000;
      v28 = (uint64_t *)&v32;
      do
      {
        v29 = *v28;
        if (v27 >= HIDWORD(v34))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v27 = v34;
        }
        *((_QWORD *)v33 + v27) = v29;
        v27 = v34 + 1;
        LODWORD(v34) = v34 + 1;
        v28 = (uint64_t *)v28[1];
      }
      while (v28);
      (**(void (***)(_QWORD, void *))(a1 + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), v33);
      if (v33 != v35)
        free(v33);
    }
  }
  if (v36 != v38)
    free(v36);
}

void sub_22F1DBB6C(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v3 = MEMORY[0x24BED83D8] + 16;
  v11 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22F4204C8((llvm::raw_ostream *)&v3, a1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v3);
}

uint64_t sub_22F1DBBF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v11;
  unint64_t v13;
  _QWORD v19[2];

  v3 = 0;
  do
  {
    if (!(a3 + v3))
    {
      v5 = -1;
      goto LABEL_9;
    }
    v4 = *(unsigned __int8 *)(a2 + a3 + v3-- - 1);
  }
  while (v4 != 45);
  v5 = a3 + v3;
  if (v3 != -1 && *(unsigned __int8 *)(a2 + a3 + v3 + 1) - 58 < 0xFFFFFFF6)
    v5 = -1;
LABEL_9:
  if (a3 >= v5)
    v6 = v5;
  else
    v6 = a3;
  *(_QWORD *)(a1 + 4) = 0;
  v7 = a1 + 4;
  *(_QWORD *)(a1 + 12) = 0;
  v8 = 1;
  switch(v6)
  {
    case 3uLL:
      if (*(_WORD *)a2 == 28521 && *(_BYTE *)(a2 + 2) == 115)
      {
        v8 = 0;
        v11 = 2;
        goto LABEL_56;
      }
      if (*(_WORD *)a2 == 25447 && *(_BYTE *)(a2 + 2) == 99)
      {
        v8 = 0;
        v11 = 5;
        goto LABEL_56;
      }
      break;
    case 5uLL:
      if (*(_DWORD *)a2 == 1718248047 && *(_BYTE *)(a2 + 4) == 119)
      {
        v13 = 0x8000000800000000;
        v11 = 7;
        goto LABEL_45;
      }
      break;
    case 6uLL:
      if (*(_DWORD *)a2 == 1868783981 && *(_WORD *)(a2 + 4) == 30835)
      {
        v8 = 0;
        v11 = 0;
        goto LABEL_56;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)a2 == 1668571511 && *(_DWORD *)(a2 + 3) == 1936681059)
      {
        v8 = 0;
        v11 = 3;
        goto LABEL_56;
      }
      if (*(_DWORD *)a2 == 1937075815 && *(_DWORD *)(a2 + 3) == 1885697139)
      {
        v8 = 0;
        v13 = 0x8000000600000001;
        v11 = 6;
LABEL_45:
        *(_QWORD *)v7 = v13;
        *(_QWORD *)(a1 + 12) = 0;
        goto LABEL_56;
      }
      break;
    case 8uLL:
      if (*(_QWORD *)a2 == 0x736F656764697262)
      {
        v8 = 0;
        v11 = 4;
        goto LABEL_56;
      }
      break;
    case 0xEuLL:
      if (*(_QWORD *)a2 == 0x662D78736F63616DLL && *(_QWORD *)(a2 + 6) == 0x656C69676172662DLL)
      {
        v8 = 0;
        v11 = 1;
LABEL_56:
        *(_DWORD *)a1 = v11;
        if (v5 == -1 || (llvm::VersionTuple::tryParse() & 1) == 0)
        {
          if ((_DWORD)v8)
          {
            v19[0] = 0x8000000800000000;
            v19[1] = 0;
            v8 = 0;
            if (sub_22E3B38EC(v19, (_DWORD *)v7))
            {
              *(_QWORD *)v7 = 0x8000000800000000;
              *(_QWORD *)(v7 + 8) = 0;
            }
          }
        }
        else
        {
          v8 = 1;
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

uint64_t sub_22F1DBE88(_QWORD *a1, uint64_t a2)
{
  char **v4;
  char v5;
  char *v6;
  size_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v14[3];
  __int16 v15;
  _BYTE v16[32];

  sub_22E6C7490((llvm::StringMapImpl *)v16, (_QWORD *)(a1[2] + 256));
  v4 = &off_24FAE17C0;
  v5 = 1;
  do
  {
    v6 = *v4;
    v7 = (size_t)v4[1];
    v8 = v4[2];
    v9 = (size_t)v4[3];
    if ((*(unsigned int (**)(_QWORD *, _BYTE *, char *, size_t))(*a1 + 520))(a1, v16, *v4, v7)
      && ((*(uint64_t (**)(_QWORD *, _BYTE *, char *, size_t))(*a1 + 520))(a1, v16, v8, v9) & 1) == 0)
    {
      *(_QWORD *)(a2 + 312) = 0x3400000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v14[0] = (unsigned __int8 *)(a2 + 320);
      v14[1] = 0;
      v14[2] = (unsigned __int8 *)a2;
      v15 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v10 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(a2 + 768);
        v12 = 56 * v10;
        do
        {
          if (*(char *)(v11 + v12 - 9) < 0)
            operator delete(*(void **)(v11 + v12 - 32));
          v12 -= 56;
        }
        while (v12);
      }
      *(_DWORD *)(a2 + 776) = 0;
      sub_22E3B89A8(v14, v6, v7);
      sub_22E3B89A8(v14, v8, v9);
      sub_22E3BB0B8((uint64_t)v14);
      v5 = 0;
    }
    v4 += 4;
  }
  while (v4 != &off_24FAE1860);
  sub_22E622C5C((uint64_t)v16);
  return v5 & 1;
}

uint64_t sub_22F1DC00C(_QWORD *a1, uint64_t a2)
{
  char **v4;
  char v5;
  char *v6;
  size_t v7;
  int v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15[3];
  __int16 v16;
  _BYTE v17[32];

  sub_22E6C7490((llvm::StringMapImpl *)v17, (_QWORD *)(a1[2] + 256));
  v4 = &off_24FAE1860;
  v5 = 1;
  do
  {
    v6 = *v4;
    v7 = (size_t)v4[1];
    v8 = (*(uint64_t (**)(_QWORD *, _BYTE *, char *, size_t))(*a1 + 520))(a1, v17, *v4, v7);
    v9 = v4[2];
    v10 = (size_t)v4[3];
    if (v8 != (*(unsigned int (**)(_QWORD *, _BYTE *, char *, size_t))(*a1 + 520))(a1, v17, v9, v10))
    {
      *(_QWORD *)(a2 + 312) = 0x3300000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v15[0] = (unsigned __int8 *)(a2 + 320);
      v15[1] = 0;
      v15[2] = (unsigned __int8 *)a2;
      v16 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v11 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(a2 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
      }
      *(_DWORD *)(a2 + 776) = 0;
      sub_22E3B89A8(v15, v6, v7);
      sub_22E3B89A8(v15, v9, v10);
      sub_22E3BB0B8((uint64_t)v15);
      v5 = 0;
    }
    v4 += 4;
  }
  while (v4 != off_24FAE18A0);
  sub_22E622C5C((uint64_t)v17);
  return v5 & 1;
}

uint64_t *sub_22F1DC194(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v15 = i[1];
        ++i;
        v9 = v15;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v10 = MEMORY[0x23489D23C](a3 + 33, 8);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)a4;
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(a4 + 16);
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F1DC2A4(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v13;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  BOOL v31;
  unsigned int v32;
  int v34;
  int v35;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  BOOL v67;
  unsigned int v68;
  BOOL v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v79;

  if ((int)result <= 42)
  {
    switch((int)result)
    {
      case 9:
        if (a3 != 7)
          return 3;
        if (*(_DWORD *)a2 == 1601267059 && *(_DWORD *)((char *)a2 + 3) == 1953719135)
          return 0;
        if (*(_DWORD *)a2 == 1601266529 && *(_DWORD *)((char *)a2 + 3) == 1818587743)
          return 1;
        v6 = *(_DWORD *)((char *)a2 + 3);
        v7 = *(_DWORD *)a2 == 1634493810;
        v8 = 1684371553;
        goto LABEL_168;
      case 10:
        if (a3 != 8)
        {
          if (a3 == 6)
          {
            v6 = a2[2];
            v7 = *(_DWORD *)a2 == 1701996660;
            v8 = 25697;
            goto LABEL_168;
          }
          if (a3 != 5)
            return 3;
          v25 = *((unsigned __int8 *)a2 + 4);
          v26 = *(_DWORD *)a2 == 1835099508;
          v27 = 115;
          goto LABEL_107;
        }
        if (*(_QWORD *)a2 != 0x6C656C6C61726170)
          return 3;
        return 1;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
        __break(1u);
        return result;
      case 16:
        result = 3;
        switch(a3)
        {
          case 4:
            if (*(_DWORD *)a2 == 1701736302)
              return 0;
            break;
          case 6:
            if (*(_DWORD *)a2 == 1918986355 && a2[2] == 25701)
              return 1;
            break;
          case 12:
            if (*(_QWORD *)a2 == 0x6972707473726966 && *((_DWORD *)a2 + 2) == 1702125942)
              return 2;
            break;
          default:
            return result;
        }
        return result;
      case 17:
        v9 = 0;
        switch(a3)
        {
          case 2:
            v16 = 0x100000005;
            v17 = *a2 == 28532;
            goto LABEL_316;
          case 4:
            if (*(_DWORD *)a2 != 1836020326)
            {
              v9 = 0x100000009;
              v61 = *(_DWORD *)a2 == 1701736302;
              goto LABEL_312;
            }
            v9 = 0x100000006;
            break;
          case 5:
            v16 = 0x100000004;
            v17 = (*(_DWORD *)a2 ^ 0x6F6C6C61 | *((unsigned __int8 *)a2 + 4) ^ 0x63) == 0;
            goto LABEL_316;
          case 6:
            if (*(_DWORD *)a2 == 1818321779 && a2[2] == 29281)
            {
              v9 = 0x100000000;
            }
            else if (*(_DWORD *)a2 == 1919315828 && a2[2] == 28015)
            {
              v9 = 0x100000007;
            }
            else
            {
              v9 = 0;
            }
            break;
          case 7:
            v9 = 0x100000002;
            if (*(_DWORD *)a2 == 1852403568 && *(_DWORD *)((char *)a2 + 3) == 1919251566)
              break;
            if (*(_DWORD *)a2 == 1634100580 && *(_DWORD *)((char *)a2 + 3) == 1953264993)
            {
              v9 = 0x10000000ALL;
            }
            else
            {
              v9 = 0x10000000BLL;
              v61 = (*(_DWORD *)a2 ^ 0x73657270 | *(_DWORD *)((char *)a2 + 3) ^ 0x746E6573) == 0;
LABEL_312:
              if (!v61)
                v9 = 0;
            }
            break;
          case 9:
            v61 = (*(_QWORD *)a2 ^ 0x7461676572676761 | *((unsigned __int8 *)a2 + 8) ^ 0x65) == 0;
            v9 = 0x100000001;
            goto LABEL_312;
          case 12:
            v16 = 0x100000008;
            v17 = (*(_QWORD *)a2 ^ 0x6972707473726966 | *((unsigned int *)a2 + 2) ^ 0x65746176) == 0;
LABEL_316:
            if (v17)
              v9 = v16;
            else
              v9 = 0;
            break;
          default:
            break;
        }
        v67 = (v9 & 0x300000000) == 0;
        v68 = 3;
        goto LABEL_320;
      case 18:
        v28 = 0;
        switch(a3)
        {
          case 2:
            if (*a2 != 28265)
              goto LABEL_329;
            v28 = 0x100000000;
            break;
          case 3:
            v73 = (*a2 ^ 0x756F | *((unsigned __int8 *)a2 + 2) ^ 0x74) == 0;
            v28 = 0x100000001;
            goto LABEL_335;
          case 4:
            v74 = 0x100000006;
            v75 = *(_DWORD *)a2 == 1802398067;
            goto LABEL_340;
          case 5:
            if (*(_DWORD *)a2 == 1970237033 && *((_BYTE *)a2 + 4) == 116)
              v28 = 0x100000002;
            else
LABEL_329:
              v28 = 0;
            break;
          case 6:
            if (*(_DWORD *)a2 == 1869636964 && a2[2] == 27234)
            {
              v28 = 0x100000004;
            }
            else
            {
              v28 = 0x100000005;
              v73 = (*(_DWORD *)a2 ^ 0x72756F73 | a2[2] ^ 0x6563) == 0;
LABEL_335:
              if (!v73)
                v28 = 0;
            }
            break;
          case 8:
            v74 = 0x100000007;
            v75 = *(_QWORD *)a2 == 0x74657374756F6E69;
            goto LABEL_340;
          case 13:
            v74 = 0x100000003;
            v75 = (*(_QWORD *)a2 ^ 0x6F6E69786574756DLL | *(_QWORD *)((char *)a2 + 5) ^ 0x74657374756F6E69) == 0;
LABEL_340:
            if (v75)
              v28 = v74;
            else
              v28 = 0;
            break;
          default:
            break;
        }
        if ((v28 & 0x300000000) == 0)
          LODWORD(v28) = 8;
        if ((_DWORD)v28 != 7 || *(_DWORD *)(a4 + 72) >= 0x33u)
          return v28;
        else
          return 8;
      case 22:
        if (a3 != 10)
        {
          if (a3 != 8 || *(_QWORD *)a2 != 0x726F747365636E61)
            return 2;
          return 0;
        }
        if (*(_QWORD *)a2 == 0x6E5F656369766564 && a2[4] == 28021)
          return 1;
        return 2;
      case 23:
        if (a3 == 3)
        {
          v6 = *((unsigned __int8 *)a2 + 2);
          v7 = *a2 == 28257;
          v8 = 121;
LABEL_168:
          if (v7 && v6 == v8)
            return 2;
        }
        else
        {
          if (a3 != 6)
          {
            if (a3 != 4 || *(_DWORD *)a2 != 1953722216)
              return 3;
            return 0;
          }
          if (*(_DWORD *)a2 == 1869115246 && a2[2] == 29811)
            return 1;
        }
        return 3;
      case 24:
        if (a3 != 6)
          return 1;
        v18 = a2[2];
        v19 = *(_DWORD *)a2 == 1952543859;
        v20 = 25449;
        goto LABEL_81;
      default:
        if ((_DWORD)result != 2)
          goto LABEL_35;
        if (a3 == 15)
        {
          if (*(_QWORD *)a2 == 0x7665645F6465656ELL && *(_QWORD *)((char *)a2 + 7) == 0x7274705F65636976)
            return 1;
        }
        else if (a3 == 7 && *(_DWORD *)a2 == 1752461166 && *(_DWORD *)((char *)a2 + 3) == 1735289192)
        {
          return 0;
        }
        break;
    }
    return 2;
  }
  if ((int)result <= 63)
  {
    if ((int)result > 45)
    {
      if ((_DWORD)result == 46)
      {
        switch(a3)
        {
          case 2:
            if (*a2 != 28532)
              goto LABEL_268;
            v13 = 1;
            goto LABEL_366;
          case 4:
            if (*(_DWORD *)a2 != 1836020326)
              goto LABEL_268;
            v13 = 2;
            goto LABEL_366;
          case 5:
            if (*(_DWORD *)a2 == 1869376609 && *((_BYTE *)a2 + 4) == 99)
            {
              v13 = 0;
              goto LABEL_366;
            }
            if (*(_DWORD *)a2 == 1936682083 && *((_BYTE *)a2 + 4) == 101)
            {
              v13 = 8;
              goto LABEL_366;
            }
            goto LABEL_268;
          case 6:
            if (*(_DWORD *)a2 == 1919315828 && a2[2] == 28015)
            {
              v13 = 3;
              goto LABEL_366;
            }
            if (*(_DWORD *)a2 == 1701602660 && a2[2] == 25972)
            {
              v13 = 4;
              goto LABEL_366;
            }
            if (*(_DWORD *)a2 == 1635216481 && a2[2] == 29561)
            {
              v13 = 7;
              goto LABEL_366;
            }
            if (*(_DWORD *)a2 == 1886413165 && a2[2] == 29285)
            {
              v13 = 9;
              goto LABEL_366;
            }
            goto LABEL_268;
          case 7:
            if (*(_DWORD *)a2 == 1701602674 && *(_DWORD *)((char *)a2 + 3) == 1702060389)
            {
              v13 = 5;
LABEL_366:
              v60 = *(_QWORD *)(a4 + 72);
            }
            else if (*(_DWORD *)a2 == 1936028272 && *(_DWORD *)((char *)a2 + 3) == 1953391987)
            {
              v60 = *(_QWORD *)(a4 + 72);
              if (v60 < 0x33)
                return 6;
              v13 = 10;
            }
            else
            {
LABEL_268:
              v60 = *(_QWORD *)(a4 + 72);
              v13 = 6;
            }
            v79 = v60 & 0x100000000;
            v31 = v13 == 11 && v79 == 0;
            v32 = 6;
            break;
          case 9:
            if (*(_QWORD *)a2 != 0x6C6F685F78706D6FLL || *((_BYTE *)a2 + 8) != 100)
              goto LABEL_268;
            v13 = 11;
            goto LABEL_366;
          default:
            goto LABEL_268;
        }
        goto LABEL_371;
      }
      if (a3 != 10)
        return 1;
      v18 = a2[4];
      v19 = *(_QWORD *)a2 == 0x65727275636E6F63;
      v20 = 29806;
LABEL_81:
      v10 = v19 && v18 == v20;
    }
    else
    {
      if ((_DWORD)result != 43)
      {
        if (a3 != 4)
        {
          if (a3 != 3)
            return 3;
          if (*a2 == 24950 && *((_BYTE *)a2 + 2) == 108)
            return 0;
          v22 = *((unsigned __int8 *)a2 + 2);
          v23 = *a2 == 25970;
          v24 = 102;
          goto LABEL_152;
        }
        v34 = *(_DWORD *)a2;
        v35 = 1818326645;
LABEL_175:
        if (v34 == v35)
          return 2;
        return 3;
      }
      if (a3 != 11)
        return 1;
      v10 = *(_QWORD *)a2 == 0x6F697469646E6F63 && *(_QWORD *)((char *)a2 + 3) == 0x6C616E6F69746964;
    }
    return !v10;
  }
  if ((int)result <= 70)
  {
    if ((_DWORD)result == 64)
    {
      if (a3 != 5)
      {
        if (a3 == 7)
        {
          if (*(_DWORD *)a2 == 1835627120 && *(_DWORD *)((char *)a2 + 3) == 2037539181)
            return 5;
          if (*(_DWORD *)a2 == 1634100580 && *(_DWORD *)((char *)a2 + 3) == 1953264993)
            return 6;
        }
        else if (a3 == 6)
        {
          if (*(_DWORD *)a2 != 1953718637 || a2[2] != 29285)
          {
            if (*(_DWORD *)a2 == 1701998707 && a2[2] == 25697)
              return 4;
            return 7;
          }
          return 2;
        }
        return 7;
      }
      if (*(_DWORD *)a2 != 1936682083 || *((_BYTE *)a2 + 4) != 101)
        return 7;
      return 3;
    }
    if (a3 != 4)
    {
      if (a3 != 6)
      {
        if (a3 != 7)
          return 3;
        v25 = *(_DWORD *)((char *)a2 + 3);
        v26 = *(_DWORD *)a2 == 1634100580;
        v27 = 1953264993;
LABEL_107:
        if (!v26 || v25 != v27)
          return 3;
        return 0;
      }
      v22 = a2[2];
      v23 = *(_DWORD *)a2 == 1668509289;
      v24 = 28257;
LABEL_152:
      if (!v23 || v22 != v24)
        return 3;
      return 1;
    }
    v34 = *(_DWORD *)a2;
    v35 = 1802723700;
    goto LABEL_175;
  }
  if ((_DWORD)result != 71)
  {
    if ((_DWORD)result != 81)
    {
      v9 = 0;
      switch(a3)
      {
        case 2:
          if (*a2 != 28265)
            goto LABEL_276;
          v9 = 0x100000000;
          break;
        case 3:
          v62 = (*a2 ^ 0x756F | *((unsigned __int8 *)a2 + 2) ^ 0x74) == 0;
          v9 = 0x100000001;
          goto LABEL_282;
        case 4:
          v63 = 0x100000006;
          v64 = *(_DWORD *)a2 == 1802398067;
          goto LABEL_287;
        case 5:
          if (*(_DWORD *)a2 == 1970237033 && *((_BYTE *)a2 + 4) == 116)
            v9 = 0x100000002;
          else
LABEL_276:
            v9 = 0;
          break;
        case 6:
          if (*(_DWORD *)a2 == 1869636964 && a2[2] == 27234)
          {
            v9 = 0x100000004;
          }
          else
          {
            v9 = 0x100000005;
            v62 = (*(_DWORD *)a2 ^ 0x72756F73 | a2[2] ^ 0x6563) == 0;
LABEL_282:
            if (!v62)
              v9 = 0;
          }
          break;
        case 8:
          v63 = 0x100000007;
          v64 = *(_QWORD *)a2 == 0x74657374756F6E69;
          goto LABEL_287;
        case 13:
          v63 = 0x100000003;
          v64 = (*(_QWORD *)a2 ^ 0x6F6E69786574756DLL | *(_QWORD *)((char *)a2 + 5) ^ 0x74657374756F6E69) == 0;
LABEL_287:
          if (v64)
            v9 = v63;
          else
            v9 = 0;
          break;
        default:
          break;
      }
      v67 = (v9 & 0x300000000) == 0;
      v68 = 8;
LABEL_320:
      if (v67)
        return v68;
      else
        return v9;
    }
LABEL_35:
    if (a3 == 7)
    {
      if (*(_DWORD *)a2 == 1936028272 && *(_DWORD *)((char *)a2 + 3) == 1953391987)
      {
        v13 = 1;
        goto LABEL_118;
      }
    }
    else if (a3 == 6 && *(_DWORD *)a2 == 1886413165 && a2[2] == 29285)
    {
      v13 = 0;
LABEL_118:
      v31 = *(_DWORD *)(a4 + 72) < 0x33u && v13 == 1;
      v32 = 2;
LABEL_371:
      if (v31)
        return v32;
      else
        return v13;
    }
    v13 = 2;
    goto LABEL_118;
  }
  switch(a3)
  {
    case 4:
      if (*(_DWORD *)a2 == 1869903201)
        return 3;
      if (*(_DWORD *)a2 != 1684892019)
        return 5;
      result = 8;
      break;
    case 6:
      if (*(_DWORD *)a2 == 1952543859 && a2[2] == 25449)
        return 0;
      if (*(_DWORD *)a2 != 1684632935 || a2[2] != 25701)
        return 5;
      return 2;
    case 7:
      if (*(_DWORD *)a2 == 1634629988 && *(_DWORD *)((char *)a2 + 3) == 1667853665)
        return 1;
      if (*(_DWORD *)a2 != 1953396082 || *(_DWORD *)((char *)a2 + 3) != 1701669236)
        return 5;
      return 4;
    case 9:
      if (*(_QWORD *)a2 != 0x696E6F746F6E6F6DLL || *((_BYTE *)a2 + 8) != 99)
        return 5;
      return 6;
    case 12:
      if (*(_QWORD *)a2 != 0x746F6E6F6D6E6F6ELL || *((_DWORD *)a2 + 2) != 1667853935)
        return 5;
      return 7;
    default:
      return 5;
  }
  return result;
}

uint64_t sub_22F1DD1BC(int a1, int a2, int a3)
{
  uint64_t result;
  BOOL v5;
  unsigned int v6;

  result = 0;
  switch(a1)
  {
    case 27:
      result = 8;
      break;
    case 28:
    case 75:
      result = 5;
      break;
    case 29:
    case 31:
    case 34:
    case 38:
    case 43:
    case 45:
    case 49:
    case 54:
    case 56:
    case 59:
    case 63:
      result = 2;
      break;
    case 30:
    case 42:
    case 44:
      result = 14;
      break;
    case 32:
    case 35:
      result = 13;
      break;
    case 41:
    case 64:
      result = 9;
      break;
    case 46:
    case 48:
    case 53:
      result = 10;
      break;
    case 47:
      result = 12;
      break;
    case 50:
      result = 11;
      break;
    case 51:
      v5 = a2 == 0;
      v6 = 10;
      goto LABEL_14;
    case 52:
      v5 = (a3 ^ 1 | a2) == 0;
      v6 = 12;
LABEL_14:
      if (v5)
        result = 0;
      else
        result = v6;
      break;
    case 55:
      result = 7;
      break;
    case 57:
      result = 6;
      break;
    case 58:
      result = 4;
      break;
    case 60:
      result = 3;
      break;
    case 65:
      result = 1;
      break;
    case 69:
    case 70:
      result = 15;
      break;
    default:
      return result;
  }
  return result;
}

llvm::SpecialCaseList **sub_22F1DD284(llvm::SpecialCaseList **a1)
{
  llvm::SpecialCaseList *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v2);
    MEMORY[0x2348A0E9C]();
  }
  return a1;
}

uint64_t sub_22F1DD2C8(llvm::SpecialCaseList **a1, uint64_t a2, unint64_t a3, llvm::SpecialCaseList *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  _QWORD v19[3];
  void **v20;
  __int16 v21;
  void *__p[2];
  uint64_t v23;

  memset(v19, 0, sizeof(v19));
  sub_22E618148(v19, a2, a2 + 24 * a3, a3);
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  sub_22F421EB0(a1);
  if (*a1)
  {
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    v20 = (void **)v19;
    sub_22E3B3CC8(&v20);
    v6 = *(_QWORD *)*a1;
    v7 = *((_QWORD *)*a1 + 1);
    *((_BYTE *)a1 + 8) = v6 == v7;
    if (v6 == v7)
    {
LABEL_14:
      v16 = 0;
    }
    else
    {
      v8 = v6 + 8;
      while (1)
      {
        Key = llvm::StringMapImpl::FindKey();
        if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v8 + 8))
          break;
        v10 = v8 + 32;
        v8 += 40;
        if (v10 == v7)
        {
          v11 = *(_QWORD *)*a1;
          v12 = *((_QWORD *)*a1 + 1);
          if (v11 == v12)
            goto LABEL_14;
          v13 = v11 + 8;
          while (1)
          {
            v14 = llvm::StringMapImpl::FindKey();
            if (v14 != -1 && v14 != (unint64_t)*(unsigned int *)(v13 + 8))
              goto LABEL_15;
            v15 = v13 + 32;
            v13 += 40;
            if (v15 == v12)
              goto LABEL_14;
          }
        }
      }
LABEL_15:
      v16 = 1;
    }
    *((_BYTE *)a1 + 9) = v16;
    a1[2] = a4;
    return (uint64_t)a1;
  }
  else
  {
    sub_22F1DD284(a1);
    v21 = 260;
    v20 = __p;
    v18 = llvm::report_fatal_error();
    return sub_22F1DD450(v18);
  }
}

uint64_t sub_22F1DD450()
{
  int v0;
  int v1;

  if ((llvm::SpecialCaseList::inSection() & 1) != 0)
  {
    v0 = 1;
    v1 = 1;
  }
  else
  {
    v1 = llvm::SpecialCaseList::inSection();
    v0 = 0;
  }
  return v0 | (v1 << 8);
}

uint64_t sub_22F1DD50C()
{
  int v0;
  int v1;

  if ((llvm::SpecialCaseList::inSection() & 1) != 0)
  {
    v0 = 1;
    v1 = 1;
  }
  else
  {
    v1 = llvm::SpecialCaseList::inSection();
    v0 = 0;
  }
  return v0 | (v1 << 8);
}

llvm::SpecialCaseList **sub_22F1DD5C8(llvm::SpecialCaseList **a1)
{
  llvm::SpecialCaseList *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_22F42208C(v2);
    MEMORY[0x2348A0E9C]();
  }
  return a1;
}

void sub_22F1DD610(uint64_t *a1@<X8>)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  sub_22F4220C4(a1);
  if (*a1)
  {
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  else
  {
    sub_22F1DD5C8((llvm::SpecialCaseList **)a1);
    sub_22F422AAC(&v6, (uint64_t *)__p);
    v2 = (char **)llvm::report_fatal_error();
    sub_22F1DD688(v2, v3, v4, v5);
  }
}

char *sub_22F1DD688(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    sub_22E3B3F8C();
  v12 = 3 * v7;
  v13 = (char *)operator new(24 * v7);
  v14 = &v13[24 * v6];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  *((_QWORD *)v14 + 2) = a4;
  v15 = v14 + 24;
  if (v5 == v4)
  {
    v16 = &v13[24 * v6];
  }
  else
  {
    do
    {
      v16 = v14 - 24;
      v17 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v17;
      v5 -= 24;
      v14 -= 24;
    }
    while (v5 != v4);
  }
  *a1 = v16;
  a1[1] = v15;
  a1[2] = &v13[8 * v12];
  if (v4)
    operator delete(v4);
  return v15;
}

uint64_t sub_22F1DD7A4(unsigned __int8 *__s1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v14;
  int v15;
  int v22;
  int v25;
  int v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v37;
  int v38;
  uint64_t v43;
  int v44;
  uint64_t v49;
  uint64_t v50;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v63;
  uint64_t v64;
  uint64_t v68;
  uint64_t v69;
  uint64_t v74;
  uint64_t v75;
  BOOL v77;
  uint64_t v79;
  uint64_t v80;
  int v81;
  BOOL v86;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v141;
  int v142;

  result = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)__s1 != 26211 || __s1[2] != 105)
      {
        v7 = 0;
        v8 = *(unsigned __int16 *)__s1;
        v9 = __s1[2];
        v10 = v8 == 27745;
        v11 = 108;
        goto LABEL_7;
      }
      v28 = 0;
      v29 = a3 == 0;
      v30 = 0x80000000000;
      goto LABEL_369;
    case 4:
      switch(*(_DWORD *)__s1)
      {
        case 0x6B61656C:
          v28 = 0;
          v7 = 64;
          return v28 | (v7 << 8);
        case 0x6C6F6F62:
          v28 = 0;
          v7 = 512;
          return v28 | (v7 << 8);
        case 0x6D756E65:
          v28 = 0;
          v7 = 2048;
          return v28 | (v7 << 8);
        case 0x6C6C756E:
          v28 = 0;
          v7 = 0x20000;
          return v28 | (v7 << 8);
      }
      result = 0;
      if (*(_DWORD *)__s1 != 1920233590)
        return result;
      v7 = 0x100000000;
      goto LABEL_361;
    case 5:
      if (*(_DWORD *)__s1 == 1718184051 && __s1[4] == 116)
      {
        v28 = 0;
        v29 = a3 == 0;
        v30 = 0x10000000;
        goto LABEL_369;
      }
      v7 = 0;
      v14 = *(_DWORD *)__s1;
      v15 = __s1[4];
      if (v14 != 1685414771 || v15 != 111)
        return 0;
      goto LABEL_383;
    case 6:
      if (*(_DWORD *)__s1 == 1953326445 && *((_WORD *)__s1 + 2) == 26465)
      {
        v28 = 0;
        v7 = a3;
        return v28 | (v7 << 8);
      }
      if (*(_DWORD *)__s1 == 1869440365 && *((_WORD *)__s1 + 2) == 31090)
      {
        v28 = 0;
        v7 = 2;
        return v28 | (v7 << 8);
      }
      if (*(_DWORD *)__s1 == 2054845798 && *((_WORD *)__s1 + 2) == 29285)
      {
        v28 = 0;
        v7 = 8;
        return v28 | (v7 << 8);
      }
      if (*(_DWORD *)__s1 == 1701996660 && *((_WORD *)__s1 + 2) == 25697)
      {
        v28 = 0;
        v7 = 32;
        return v28 | (v7 << 8);
      }
      if (*(_DWORD *)__s1 == 1970562418 && *((_WORD *)__s1 + 2) == 28274)
      {
        v28 = 0;
        v7 = 0x1000000;
        return v28 | (v7 << 8);
      }
      v7 = 0;
      v22 = *(_DWORD *)__s1;
      v9 = *((unsigned __int16 *)__s1 + 2);
      v10 = v22 == 1853189986;
      v11 = 29540;
LABEL_7:
      if (!v10 || v9 != v11)
        return 0;
      goto LABEL_383;
    case 7:
      if (*(_DWORD *)__s1 == 1919181921 && *(_DWORD *)(__s1 + 3) == 1936942450)
      {
        v7 = 0;
        v28 = 1;
        return v28 | (v7 << 8);
      }
      if (*(_DWORD *)__s1 == 1818850658 && *(_DWORD *)(__s1 + 3) == 1852404844)
      {
        v28 = 0;
        v7 = 1024;
        return v28 | (v7 << 8);
      }
      v25 = *(_DWORD *)__s1;
      v26 = *(_DWORD *)(__s1 + 3);
      if (v25 == 1702129257 && v26 == 1919248229)
      {
        v28 = 0;
        v29 = a3 == 0;
        v30 = 0x80000000000000;
        goto LABEL_369;
      }
      return 0;
    case 8:
      if (*(_QWORD *)__s1 == 0x6E6F6974636E7566)
      {
        v28 = 0;
        v7 = 0x4000;
        return v28 | (v7 << 8);
      }
      result = 0;
      if (*(_QWORD *)__s1 != 0x776F6C6661746164)
        return result;
      v7 = 0x800000000;
      goto LABEL_361;
    case 9:
      if (*(_QWORD *)__s1 == 0x7365726464617768 && __s1[8] == 115)
      {
        v7 = 0;
        v28 = 16;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6E656D6E67696C61 && __s1[8] == 116)
      {
        v28 = 0;
        v7 = 128;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6E756F622D616C76 && __s1[8] == 100)
      {
        v28 = 0;
        v7 = 0x80000000;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6C6163692D696663 && __s1[8] == 108)
      {
        v28 = 0;
        v7 = 0x4000000000;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6C6163762D696663 && __s1[8] == 108)
      {
        v28 = 0;
        v7 = 0x40000000000;
        return v28 | (v7 << 8);
      }
      result = 0;
      if (*(_QWORD *)__s1 == 0x656E696665646E75 && __s1[8] == 100)
      {
        v28 = 0;
        v29 = a3 == 0;
        v30 = 0x400000000000;
        goto LABEL_369;
      }
      v37 = *(_QWORD *)__s1;
      v38 = __s1[8];
      if (v37 == 0x7361632D636A626FLL && v38 == 116)
      {
        v7 = 0x20000000000000;
        goto LABEL_361;
      }
      return result;
    case 10:
      if (*(_QWORD *)__s1 == 0x61622D7466696873 && *((_WORD *)__s1 + 4) == 25971)
      {
        v28 = 0;
        v7 = 0x4000000;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6163666D2D696663 && *((_WORD *)__s1 + 4) == 27756)
      {
        v28 = 0;
        v7 = 0x8000000000;
        return v28 | (v7 << 8);
      }
      result = 0;
      if (*(_QWORD *)__s1 == 0x6163766E2D696663 && *((_WORD *)__s1 + 4) == 27756)
      {
        v28 = 0;
        v7 = 0x20000000000;
        return v28 | (v7 << 8);
      }
      v43 = *(_QWORD *)__s1;
      v44 = *((unsigned __int16 *)__s1 + 4);
      if (v43 == 0x6174732D65666173 && v44 == 27491)
      {
        v7 = 0x100000000000;
        goto LABEL_361;
      }
      return result;
    case 11:
      if (*(_QWORD *)__s1 == 0x682D6761746D656DLL && *(_QWORD *)(__s1 + 3) == 0x706165682D676174)
      {
        v7 = 0;
        v28 = 128;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6C6962616C6C756ELL && *(_QWORD *)(__s1 + 3) == 0x7974696C6962616CLL)
      {
        v28 = 0;
        v29 = a3 == 0;
        v30 = 0x200000;
        goto LABEL_369;
      }
      result = 0;
      if (*(_QWORD *)__s1 == 0x732D7463656A626FLL && *(_QWORD *)(__s1 + 3) == 0x657A69732D746365)
      {
        v28 = 0;
        v7 = 0x400000;
        return v28 | (v7 << 8);
      }
      v49 = *(_QWORD *)__s1;
      v50 = *(_QWORD *)(__s1 + 3);
      if (v49 == 0x6168636165726E75 && v50 == 0x656C626168636165)
      {
        v7 = 0x40000000;
        goto LABEL_361;
      }
      return result;
    case 12:
      if (*(_QWORD *)__s1 == 0x732D6761746D656DLL && *((_DWORD *)__s1 + 2) == 1801675124)
      {
        v7 = 0;
        v28 = 64;
      }
      else if (*(_QWORD *)__s1 == 0x6F622D7961727261 && *((_DWORD *)__s1 + 2) == 1935961717)
      {
        v28 = 0;
        v7 = 256;
      }
      else
      {
        v7 = 0;
        v54 = *(_QWORD *)__s1;
        v55 = *((unsigned int *)__s1 + 2);
        if (v54 != 0x6F622D6C61636F6CLL || v55 != 1935961717)
          return 0;
LABEL_383:
        v28 = 0;
      }
      return v28 | (v7 << 8);
    case 13:
      result = 0;
      v57 = *(_QWORD *)__s1;
      v58 = *(_QWORD *)(__s1 + 5);
      if (v57 != 0x6D2D6C656E72656BLL || v58 != 0x79726F6D656D2D6CLL)
        return result;
      v7 = 4;
      goto LABEL_361;
    case 14:
      if (*(_QWORD *)__s1 == 0x612D6C656E72656BLL && *(_QWORD *)(__s1 + 6) == 0x737365726464612DLL)
      {
        v7 = 0;
        v28 = 8;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x6E2D72657A7A7566 && *(_QWORD *)(__s1 + 6) == 0x6B6E696C2D6F6E2DLL)
      {
        v28 = 0;
        v7 = 16;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x78652D7466696873 && *(_QWORD *)(__s1 + 6) == 0x746E656E6F707865)
      {
        v28 = 0;
        v7 = 0x8000000;
        return v28 | (v7 << 8);
      }
      v63 = *(_QWORD *)__s1;
      v64 = *(_QWORD *)(__s1 + 6);
      if (v63 == 0x656E696665646E75 && v64 == 0x706172742D64656ELL)
      {
        v28 = 0;
        v29 = a3 == 0;
        v30 = 0x800000000000;
        goto LABEL_369;
      }
      return 0;
    case 15:
      if (*(_QWORD *)__s1 == 0x2D7265746E696F70 && *(_QWORD *)(__s1 + 7) == 0x657261706D6F632DLL)
      {
        v7 = 0;
        v28 = 2;
        return v28 | (v7 << 8);
      }
      result = 0;
      if (*(_QWORD *)__s1 == 0x6C6962616C6C756ELL && *(_QWORD *)(__s1 + 7) == 0x6772612D7974696CLL)
      {
        v28 = 0;
        v7 = 0x40000;
        return v28 | (v7 << 8);
      }
      v68 = *(_QWORD *)__s1;
      v69 = *(_QWORD *)(__s1 + 7);
      if (v68 == 0x747361632D696663 && v69 == 0x7463697274732D74)
      {
        v7 = 0x1000000000;
        goto LABEL_361;
      }
      return result;
    case 16:
      if (*(_QWORD *)__s1 == 0x2D7265746E696F70 && *((_QWORD *)__s1 + 1) == 0x7463617274627573)
      {
        v7 = 0;
        v28 = 4;
        return v28 | (v7 << 8);
      }
      if (*(_QWORD *)__s1 == 0x682D6C656E72656BLL && *((_QWORD *)__s1 + 1) == 0x7373657264646177)
      {
        v7 = 0;
        v28 = 32;
        return v28 | (v7 << 8);
      }
      result = 0;
      if (*(_QWORD *)__s1 == 0x2D7265746E696F70 && *((_QWORD *)__s1 + 1) == 0x776F6C667265766FLL)
      {
        v28 = 0;
        v7 = 0x800000;
        return v28 | (v7 << 8);
      }
      v75 = *(_QWORD *)__s1;
      v74 = *((_QWORD *)__s1 + 1);
      if (v75 == 0x697265642D696663 && v74 == 0x747361632D646576)
      {
        v7 = 0x2000000000;
        goto LABEL_361;
      }
      return result;
    case 17:
      v77 = *(_QWORD *)__s1 == 0x2D6C6C756E6E6F6ELL && *((_QWORD *)__s1 + 1) == 0x7475626972747461;
      result = 0;
      if (v77 && __s1[16] == 101)
      {
        v28 = 0;
        v7 = 0x10000;
        return v28 | (v7 << 8);
      }
      v79 = *(_QWORD *)__s1;
      v80 = *((_QWORD *)__s1 + 1);
      v81 = __s1[16];
      if (v79 == 0x632D776F64616873 && v80 == 0x636174732D6C6C61 && v81 == 107)
      {
        v7 = 0x200000000000;
        goto LABEL_361;
      }
      return result;
    case 18:
      if (*(_QWORD *)__s1 == 0x6C6962616C6C756ELL
        && *((_QWORD *)__s1 + 1) == 0x697373612D797469
        && *((_WORD *)__s1 + 8) == 28263)
      {
        v28 = 0;
        v7 = 0x80000;
        return v28 | (v7 << 8);
      }
      v86 = *(_QWORD *)__s1 == 0x6C6962616C6C756ELL && *((_QWORD *)__s1 + 1) == 0x757465722D797469;
      result = 0;
      if (v86 && *((_WORD *)__s1 + 8) == 28274)
      {
        v28 = 0;
        v7 = 0x100000;
        return v28 | (v7 << 8);
      }
      v88 = *(_QWORD *)__s1;
      v89 = *((_QWORD *)__s1 + 1);
      v90 = *((unsigned __int16 *)__s1 + 8);
      if (v88 == 0x65726E752D696663 && v89 == 0x61632D646574616CLL && v90 == 29811)
      {
        v7 = 0x10000000000;
        goto LABEL_361;
      }
      return result;
    case 19:
      if (*(_QWORD *)__s1 == 0x61632D74616F6C66
        && *((_QWORD *)__s1 + 1) == 0x667265766F2D7473
        && *(_QWORD *)(__s1 + 11) == 0x776F6C667265766FLL)
      {
        v28 = 0;
        v7 = 4096;
      }
      else if (*(_QWORD *)__s1 == 0x64656E6769736E75
             && *((_QWORD *)__s1 + 1) == 0x622D74666968732DLL
             && *(_QWORD *)(__s1 + 11) == 0x657361622D746669)
      {
        v28 = 0;
        v7 = 0x400000000;
      }
      else
      {
        v97 = *(_QWORD *)__s1;
        v98 = *((_QWORD *)__s1 + 1);
        v99 = *(_QWORD *)(__s1 + 11);
        if (v97 != 0x746963696C706D69 || v98 != 0x737265766E6F632DLL || v99 != 0x6E6F69737265766ELL)
          return 0;
        v28 = 0;
        v29 = a3 == 0;
        v30 = 0x40000000000000;
LABEL_369:
        if (v29)
          v7 = 0;
        else
          v7 = v30;
      }
      return v28 | (v7 << 8);
    case 20:
      result = 0;
      v102 = *(_QWORD *)__s1;
      v103 = *((_QWORD *)__s1 + 1);
      v104 = *((_DWORD *)__s1 + 4);
      if (v102 != 0x69642D74616F6C66 || v103 != 0x2D79622D65646976 || v104 != 1869768058)
        return result;
      v7 = 0x2000;
      goto LABEL_361;
    case 22:
      result = 0;
      v107 = *(_QWORD *)__s1;
      v108 = *((_QWORD *)__s1 + 1);
      v109 = *(_QWORD *)(__s1 + 14);
      if (v107 != 0x2D72656765746E69 || v108 != 0x622D656469766964 || v109 != 0x6F72657A2D79622DLL)
        return result;
      v7 = 0x8000;
      goto LABEL_361;
    case 23:
      result = 0;
      v112 = *(_QWORD *)__s1;
      v113 = *((_QWORD *)__s1 + 1);
      v114 = *(_QWORD *)(__s1 + 15);
      if (v112 != 0x692D64656E676973 || v113 != 0x6F2D72656765746ELL || v114 != 0x776F6C667265766FLL)
        return result;
      v7 = 0x20000000;
      goto LABEL_361;
    case 25:
      v118 = *(_QWORD *)__s1 == 0x2D736E7275746572
          && *((_QWORD *)__s1 + 1) == 0x2D6C6C756E6E6F6ELL
          && *((_QWORD *)__s1 + 2) == 0x7475626972747461;
      result = 0;
      if (v118 && __s1[24] == 101)
      {
        v28 = 0;
        v7 = 0x2000000;
        return v28 | (v7 << 8);
      }
      v120 = *(_QWORD *)__s1;
      v121 = *((_QWORD *)__s1 + 1);
      v122 = *((_QWORD *)__s1 + 2);
      v123 = __s1[24];
      if (v120 == 0x64656E6769736E75 && v121 == 0x72656765746E692DLL && v122 == 0x6F6C667265766F2DLL && v123 == 119)
      {
        v7 = 0x200000000;
LABEL_361:
        v28 = 0;
        return v28 | (v7 << 8);
      }
      return result;
    case 27:
      v127 = *(_QWORD *)__s1;
      v128 = *((_QWORD *)__s1 + 1);
      v129 = *((_QWORD *)__s1 + 2);
      v130 = *(_QWORD *)(__s1 + 19);
      if (v127 != 0x746963696C706D69
        || v128 != 0x72656765746E692DLL
        || v129 != 0x7461636E7572742DLL
        || v130 != 0x6E6F697461636E75)
      {
        return 0;
      }
      v28 = 0;
      v29 = a3 == 0;
      v30 = 0x4000000000000;
      goto LABEL_369;
    case 28:
      result = 0;
      v134 = *(_QWORD *)__s1;
      v135 = *((_QWORD *)__s1 + 1);
      v136 = *((_QWORD *)__s1 + 2);
      v137 = *((_DWORD *)__s1 + 6);
      if (v134 != 0x746963696C706D69
        || v135 != 0x72656765746E692DLL
        || v136 != 0x68632D6E6769732DLL
        || v137 != 1701277281)
      {
        return result;
      }
      v7 = 0x8000000000000;
      goto LABEL_361;
    case 34:
      v141 = memcmp(__s1, "implicit-signed-integer-truncation", 0x22uLL);
      result = 0;
      if (v141)
        return result;
      v7 = 0x2000000000000;
      goto LABEL_361;
    case 36:
      v142 = memcmp(__s1, "implicit-unsigned-integer-truncation", 0x24uLL);
      result = 0;
      if (v142)
        return result;
      v7 = 0x1000000000000;
      goto LABEL_361;
    case 40:
      if (memcmp(__s1, "implicit-integer-arithmetic-value-change", 0x28uLL))
        return 0;
      v28 = 0;
      v29 = a3 == 0;
      v30 = 0x10000000000000;
      goto LABEL_369;
    default:
      return result;
  }
}

uint64_t sub_22F1DE81C(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int v46;
  _QWORD *v47;
  unsigned int v48;
  _QWORD *v49;
  unsigned int v50;
  _QWORD *v51;
  unsigned int v52;
  _QWORD *v53;
  unsigned int v54;
  _QWORD *v55;
  unsigned int v56;
  _QWORD *v57;
  unsigned int v58;
  _QWORD *v59;
  unsigned int v60;
  _QWORD *v61;
  unsigned int v62;
  _QWORD *v63;
  unsigned int v64;
  _QWORD *v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  _QWORD *v69;
  unsigned int v70;
  _QWORD *v71;
  unsigned int v72;
  _QWORD *v73;
  unsigned int v74;
  _QWORD *v75;
  unsigned int v76;
  _QWORD *v77;
  unsigned int v78;
  _QWORD *v79;
  unsigned int v80;
  _QWORD *v81;
  unsigned int v82;
  _QWORD *v83;
  unsigned int v84;
  _QWORD *v85;
  unsigned int v86;
  _QWORD *v87;
  unsigned int v88;
  _QWORD *v89;
  unsigned int v90;
  _QWORD *v91;
  unsigned int v92;
  _QWORD *v93;
  unsigned int v94;
  _QWORD *v95;
  unsigned int v96;
  _QWORD *v97;
  unsigned int v98;
  _QWORD *v99;
  unsigned int v100;
  _QWORD *v101;
  unsigned int v102;
  _QWORD *v103;
  unsigned int v104;
  _QWORD *v105;
  unsigned int v106;
  _QWORD *v107;
  unsigned int v108;
  _QWORD *v109;
  unsigned int v110;
  _QWORD *v111;
  unsigned int v112;
  _QWORD *v113;
  unsigned int v114;
  _QWORD *v115;
  unsigned int v116;
  _QWORD *v117;

  v5 = result;
  if ((result & 1) != 0)
  {
    v6 = *(_DWORD *)(a3 + 8);
    if (v6 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a3 + 8);
    }
    v7 = (_QWORD *)(*(_QWORD *)a3 + 16 * v6);
    *v7 = "address";
    v7[1] = 7;
    ++*(_DWORD *)(a3 + 8);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_64;
    }
  }
  else if ((result & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a3 + 8);
  }
  v9 = (_QWORD *)(*(_QWORD *)a3 + 16 * v8);
  *v9 = "pointer-compare";
  v9[1] = 15;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_67;
  }
LABEL_64:
  v10 = *(_DWORD *)(a3 + 8);
  if (v10 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a3 + 8);
  }
  v11 = (_QWORD *)(*(_QWORD *)a3 + 16 * v10);
  *v11 = "pointer-subtract";
  v11[1] = 16;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_70;
  }
LABEL_67:
  v12 = *(_DWORD *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a3 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a3 + 16 * v12);
  *v13 = "kernel-address";
  v13[1] = 14;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_73;
  }
LABEL_70:
  v14 = *(_DWORD *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a3 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a3 + 16 * v14);
  *v15 = "hwaddress";
  v15[1] = 9;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_76;
  }
LABEL_73:
  v16 = *(_DWORD *)(a3 + 8);
  if (v16 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(a3 + 8);
  }
  v17 = (_QWORD *)(*(_QWORD *)a3 + 16 * v16);
  *v17 = "kernel-hwaddress";
  v17[1] = 16;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_79;
  }
LABEL_76:
  v18 = *(_DWORD *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(a3 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a3 + 16 * v18);
  *v19 = "memtag-stack";
  v19[1] = 12;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_82;
  }
LABEL_79:
  v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a3 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a3 + 16 * v20);
  *v21 = "memtag-heap";
  v21[1] = 11;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_85;
  }
LABEL_82:
  v22 = *(_DWORD *)(a3 + 8);
  if (v22 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(a3 + 8);
  }
  v23 = (_QWORD *)(*(_QWORD *)a3 + 16 * v22);
  *v23 = "memory";
  v23[1] = 6;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_88;
  }
LABEL_85:
  v24 = *(_DWORD *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(a3 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a3 + 16 * v24);
  *v25 = "kernel-memory";
  v25[1] = 13;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_91;
  }
LABEL_88:
  v26 = *(_DWORD *)(a3 + 8);
  if (v26 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(a3 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a3 + 16 * v26);
  *v27 = "fuzzer";
  v27[1] = 6;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_94;
  }
LABEL_91:
  v28 = *(_DWORD *)(a3 + 8);
  if (v28 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v28 = *(_DWORD *)(a3 + 8);
  }
  v29 = (_QWORD *)(*(_QWORD *)a3 + 16 * v28);
  *v29 = "fuzzer-no-link";
  v29[1] = 14;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_97;
  }
LABEL_94:
  v30 = *(_DWORD *)(a3 + 8);
  if (v30 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(a3 + 8);
  }
  v31 = (_QWORD *)(*(_QWORD *)a3 + 16 * v30);
  *v31 = "thread";
  v31[1] = 6;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_100;
  }
LABEL_97:
  v32 = *(_DWORD *)(a3 + 8);
  if (v32 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(a3 + 8);
  }
  v33 = (_QWORD *)(*(_QWORD *)a3 + 16 * v32);
  *v33 = "leak";
  v33[1] = 4;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_103;
  }
LABEL_100:
  v34 = *(_DWORD *)(a3 + 8);
  if (v34 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(a3 + 8);
  }
  v35 = (_QWORD *)(*(_QWORD *)a3 + 16 * v34);
  *v35 = "alignment";
  v35[1] = 9;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_106;
  }
LABEL_103:
  v36 = *(_DWORD *)(a3 + 8);
  if (v36 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v36 = *(_DWORD *)(a3 + 8);
  }
  v37 = (_QWORD *)(*(_QWORD *)a3 + 16 * v36);
  *v37 = "array-bounds";
  v37[1] = 12;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_109;
  }
LABEL_106:
  v38 = *(_DWORD *)(a3 + 8);
  if (v38 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v38 = *(_DWORD *)(a3 + 8);
  }
  v39 = (_QWORD *)(*(_QWORD *)a3 + 16 * v38);
  *v39 = "BOOL";
  v39[1] = 4;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_112;
  }
LABEL_109:
  v40 = *(_DWORD *)(a3 + 8);
  if (v40 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(a3 + 8);
  }
  v41 = (_QWORD *)(*(_QWORD *)a3 + 16 * v40);
  *v41 = "builtin";
  v41[1] = 7;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_115;
  }
LABEL_112:
  v42 = *(_DWORD *)(a3 + 8);
  if (v42 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v42 = *(_DWORD *)(a3 + 8);
  }
  v43 = (_QWORD *)(*(_QWORD *)a3 + 16 * v42);
  *v43 = "enum";
  v43[1] = 4;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_118;
  }
LABEL_115:
  v44 = *(_DWORD *)(a3 + 8);
  if (v44 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v44 = *(_DWORD *)(a3 + 8);
  }
  v45 = (_QWORD *)(*(_QWORD *)a3 + 16 * v44);
  *v45 = "float-cast-overflow";
  v45[1] = 19;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_121;
  }
LABEL_118:
  v46 = *(_DWORD *)(a3 + 8);
  if (v46 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *(_DWORD *)(a3 + 8);
  }
  v47 = (_QWORD *)(*(_QWORD *)a3 + 16 * v46);
  *v47 = "float-divide-by-zero";
  v47[1] = 20;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_124;
  }
LABEL_121:
  v48 = *(_DWORD *)(a3 + 8);
  if (v48 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v48 = *(_DWORD *)(a3 + 8);
  }
  v49 = (_QWORD *)(*(_QWORD *)a3 + 16 * v48);
  *v49 = "function";
  v49[1] = 8;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_127;
  }
LABEL_124:
  v50 = *(_DWORD *)(a3 + 8);
  if (v50 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = *(_DWORD *)(a3 + 8);
  }
  v51 = (_QWORD *)(*(_QWORD *)a3 + 16 * v50);
  *v51 = "integer-divide-by-zero";
  v51[1] = 22;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_130;
  }
LABEL_127:
  v52 = *(_DWORD *)(a3 + 8);
  if (v52 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = *(_DWORD *)(a3 + 8);
  }
  v53 = (_QWORD *)(*(_QWORD *)a3 + 16 * v52);
  *v53 = "nonnull-attribute";
  v53[1] = 17;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_130:
  v54 = *(_DWORD *)(a3 + 8);
  if (v54 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v54 = *(_DWORD *)(a3 + 8);
  }
  v55 = (_QWORD *)(*(_QWORD *)a3 + 16 * v54);
  *v55 = "null";
  v55[1] = 4;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_136;
  }
LABEL_133:
  v56 = *(_DWORD *)(a3 + 8);
  if (v56 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v56 = *(_DWORD *)(a3 + 8);
  }
  v57 = (_QWORD *)(*(_QWORD *)a3 + 16 * v56);
  *v57 = "nullability-arg";
  v57[1] = 15;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_139;
  }
LABEL_136:
  v58 = *(_DWORD *)(a3 + 8);
  if (v58 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = *(_DWORD *)(a3 + 8);
  }
  v59 = (_QWORD *)(*(_QWORD *)a3 + 16 * v58);
  *v59 = "nullability-assign";
  v59[1] = 18;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_30;
    goto LABEL_142;
  }
LABEL_139:
  v60 = *(_DWORD *)(a3 + 8);
  if (v60 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v60 = *(_DWORD *)(a3 + 8);
  }
  v61 = (_QWORD *)(*(_QWORD *)a3 + 16 * v60);
  *v61 = "nullability-return";
  v61[1] = 18;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_145;
  }
LABEL_142:
  v62 = *(_DWORD *)(a3 + 8);
  if (v62 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v62 = *(_DWORD *)(a3 + 8);
  }
  v63 = (_QWORD *)(*(_QWORD *)a3 + 16 * v62);
  *v63 = "object-size";
  v63[1] = 11;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_148;
  }
LABEL_145:
  v64 = *(_DWORD *)(a3 + 8);
  if (v64 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v64 = *(_DWORD *)(a3 + 8);
  }
  v65 = (_QWORD *)(*(_QWORD *)a3 + 16 * v64);
  *v65 = "pointer-overflow";
  v65[1] = 16;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_33;
    goto LABEL_151;
  }
LABEL_148:
  v66 = *(_DWORD *)(a3 + 8);
  if (v66 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v66 = *(_DWORD *)(a3 + 8);
  }
  v67 = (_QWORD *)(*(_QWORD *)a3 + 16 * v66);
  *v67 = "return";
  v67[1] = 6;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_34;
    goto LABEL_154;
  }
LABEL_151:
  v68 = *(_DWORD *)(a3 + 8);
  if (v68 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v68 = *(_DWORD *)(a3 + 8);
  }
  v69 = (_QWORD *)(*(_QWORD *)a3 + 16 * v68);
  *v69 = "returns-nonnull-attribute";
  v69[1] = 25;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_35;
    goto LABEL_157;
  }
LABEL_154:
  v70 = *(_DWORD *)(a3 + 8);
  if (v70 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v70 = *(_DWORD *)(a3 + 8);
  }
  v71 = (_QWORD *)(*(_QWORD *)a3 + 16 * v70);
  *v71 = "shift-base";
  v71[1] = 10;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_36;
    goto LABEL_160;
  }
LABEL_157:
  v72 = *(_DWORD *)(a3 + 8);
  if (v72 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v72 = *(_DWORD *)(a3 + 8);
  }
  v73 = (_QWORD *)(*(_QWORD *)a3 + 16 * v72);
  *v73 = "shift-exponent";
  v73[1] = 14;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_37;
    goto LABEL_163;
  }
LABEL_160:
  v74 = *(_DWORD *)(a3 + 8);
  if (v74 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v74 = *(_DWORD *)(a3 + 8);
  }
  v75 = (_QWORD *)(*(_QWORD *)a3 + 16 * v74);
  *v75 = "signed-integer-overflow";
  v75[1] = 23;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_38;
    goto LABEL_166;
  }
LABEL_163:
  v76 = *(_DWORD *)(a3 + 8);
  if (v76 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v76 = *(_DWORD *)(a3 + 8);
  }
  v77 = (_QWORD *)(*(_QWORD *)a3 + 16 * v76);
  *v77 = "unreachable";
  v77[1] = 11;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_39;
    goto LABEL_169;
  }
LABEL_166:
  v78 = *(_DWORD *)(a3 + 8);
  if (v78 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v78 = *(_DWORD *)(a3 + 8);
  }
  v79 = (_QWORD *)(*(_QWORD *)a3 + 16 * v78);
  *v79 = "vla-bound";
  v79[1] = 9;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_40;
    goto LABEL_172;
  }
LABEL_169:
  v80 = *(_DWORD *)(a3 + 8);
  if (v80 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v80 = *(_DWORD *)(a3 + 8);
  }
  v81 = (_QWORD *)(*(_QWORD *)a3 + 16 * v80);
  *v81 = "vptr";
  v81[1] = 4;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_41;
    goto LABEL_175;
  }
LABEL_172:
  v82 = *(_DWORD *)(a3 + 8);
  if (v82 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v82 = *(_DWORD *)(a3 + 8);
  }
  v83 = (_QWORD *)(*(_QWORD *)a3 + 16 * v82);
  *v83 = "unsigned-integer-overflow";
  v83[1] = 25;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_42;
    goto LABEL_178;
  }
LABEL_175:
  v84 = *(_DWORD *)(a3 + 8);
  if (v84 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v84 = *(_DWORD *)(a3 + 8);
  }
  v85 = (_QWORD *)(*(_QWORD *)a3 + 16 * v84);
  *v85 = "unsigned-shift-base";
  v85[1] = 19;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_43;
    goto LABEL_181;
  }
LABEL_178:
  v86 = *(_DWORD *)(a3 + 8);
  if (v86 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v86 = *(_DWORD *)(a3 + 8);
  }
  v87 = (_QWORD *)(*(_QWORD *)a3 + 16 * v86);
  *v87 = "dataflow";
  v87[1] = 8;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_44;
    goto LABEL_184;
  }
LABEL_181:
  v88 = *(_DWORD *)(a3 + 8);
  if (v88 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v88 = *(_DWORD *)(a3 + 8);
  }
  v89 = (_QWORD *)(*(_QWORD *)a3 + 16 * v88);
  *v89 = "cfi-cast-strict";
  v89[1] = 15;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_45;
    goto LABEL_187;
  }
LABEL_184:
  v90 = *(_DWORD *)(a3 + 8);
  if (v90 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v90 = *(_DWORD *)(a3 + 8);
  }
  v91 = (_QWORD *)(*(_QWORD *)a3 + 16 * v90);
  *v91 = "cfi-derived-cast";
  v91[1] = 16;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_46;
    goto LABEL_190;
  }
LABEL_187:
  v92 = *(_DWORD *)(a3 + 8);
  if (v92 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v92 = *(_DWORD *)(a3 + 8);
  }
  v93 = (_QWORD *)(*(_QWORD *)a3 + 16 * v92);
  *v93 = "cfi-icall";
  v93[1] = 9;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_47;
    goto LABEL_193;
  }
LABEL_190:
  v94 = *(_DWORD *)(a3 + 8);
  if (v94 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v94 = *(_DWORD *)(a3 + 8);
  }
  v95 = (_QWORD *)(*(_QWORD *)a3 + 16 * v94);
  *v95 = "cfi-mfcall";
  v95[1] = 10;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_48;
    goto LABEL_196;
  }
LABEL_193:
  v96 = *(_DWORD *)(a3 + 8);
  if (v96 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v96 = *(_DWORD *)(a3 + 8);
  }
  v97 = (_QWORD *)(*(_QWORD *)a3 + 16 * v96);
  *v97 = "cfi-unrelated-cast";
  v97[1] = 18;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x2000000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_49;
    goto LABEL_199;
  }
LABEL_196:
  v98 = *(_DWORD *)(a3 + 8);
  if (v98 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v98 = *(_DWORD *)(a3 + 8);
  }
  v99 = (_QWORD *)(*(_QWORD *)a3 + 16 * v98);
  *v99 = "cfi-nvcall";
  v99[1] = 10;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x4000000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_50;
    goto LABEL_202;
  }
LABEL_199:
  v100 = *(_DWORD *)(a3 + 8);
  if (v100 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v100 = *(_DWORD *)(a3 + 8);
  }
  v101 = (_QWORD *)(*(_QWORD *)a3 + 16 * v100);
  *v101 = "cfi-vcall";
  v101[1] = 9;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x10000000000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_51;
    goto LABEL_205;
  }
LABEL_202:
  v102 = *(_DWORD *)(a3 + 8);
  if (v102 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v102 = *(_DWORD *)(a3 + 8);
  }
  v103 = (_QWORD *)(*(_QWORD *)a3 + 16 * v102);
  *v103 = "safe-stack";
  v103[1] = 10;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x20000000000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_52;
    goto LABEL_208;
  }
LABEL_205:
  v104 = *(_DWORD *)(a3 + 8);
  if (v104 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v104 = *(_DWORD *)(a3 + 8);
  }
  v105 = (_QWORD *)(*(_QWORD *)a3 + 16 * v104);
  *v105 = "shadow-call-stack";
  v105[1] = 17;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x100000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_53;
    goto LABEL_211;
  }
LABEL_208:
  v106 = *(_DWORD *)(a3 + 8);
  if (v106 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v106 = *(_DWORD *)(a3 + 8);
  }
  v107 = (_QWORD *)(*(_QWORD *)a3 + 16 * v106);
  *v107 = "implicit-unsigned-integer-truncation";
  v107[1] = 36;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x200000000000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_54;
    goto LABEL_214;
  }
LABEL_211:
  v108 = *(_DWORD *)(a3 + 8);
  if (v108 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v108 = *(_DWORD *)(a3 + 8);
  }
  v109 = (_QWORD *)(*(_QWORD *)a3 + 16 * v108);
  *v109 = "implicit-signed-integer-truncation";
  v109[1] = 34;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x800000000000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_217;
  }
LABEL_214:
  v110 = *(_DWORD *)(a3 + 8);
  if (v110 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v110 = *(_DWORD *)(a3 + 8);
  }
  v111 = (_QWORD *)(*(_QWORD *)a3 + 16 * v110);
  *v111 = "implicit-integer-sign-change";
  v111[1] = 28;
  ++*(_DWORD *)(a3 + 8);
  if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_55:
    if ((a2 & 1) == 0)
      goto LABEL_56;
    goto LABEL_220;
  }
LABEL_217:
  v112 = *(_DWORD *)(a3 + 8);
  if (v112 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v112 = *(_DWORD *)(a3 + 8);
  }
  v113 = (_QWORD *)(*(_QWORD *)a3 + 16 * v112);
  *v113 = "objc-cast";
  v113[1] = 9;
  ++*(_DWORD *)(a3 + 8);
  if ((a2 & 1) == 0)
  {
LABEL_56:
    if ((a2 & 4) == 0)
      return result;
    goto LABEL_223;
  }
LABEL_220:
  v114 = *(_DWORD *)(a3 + 8);
  if (v114 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v114 = *(_DWORD *)(a3 + 8);
  }
  v115 = (_QWORD *)(*(_QWORD *)a3 + 16 * v114);
  *v115 = "local-bounds";
  v115[1] = 12;
  ++*(_DWORD *)(a3 + 8);
  if ((a2 & 4) != 0)
  {
LABEL_223:
    v116 = *(_DWORD *)(a3 + 8);
    if (v116 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v116 = *(_DWORD *)(a3 + 8);
    }
    v117 = (_QWORD *)(*(_QWORD *)a3 + 16 * v116);
    *v117 = "scudo";
    v117[1] = 5;
    ++*(_DWORD *)(a3 + 8);
  }
  return result;
}

void sub_22F1DFAA8(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = MEMORY[0x24BED83D8] + 16;
  v13 = a3;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22F422CEC(a1, (llvm::raw_ostream *)&v5, a2);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
}

__n128 sub_22F1DFB34(__int128 *a1, llvm::raw_ostream *a2, _QWORD *a3, int a4, char **p_s1)
{
  char *v9;
  size_t v10;
  _BYTE *v11;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  __n128 result;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  __int128 v24;
  uint64_t v25;
  __n128 v26;
  char *v27;
  char *__s1;
  int v29;

  if ((a4 & 0x80000000) == 0)
  {
    sub_22F1E2F68((uint64_t)a3, a4, 1, (uint64_t)&__s1);
    v9 = __s1;
    if (!__s1)
    {
      v18 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v18 > 0xDuLL)
      {
        qmemcpy(v18, "<invalid sloc>", 14);
        *((_QWORD *)a2 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(a2, "<invalid sloc>");
      }
LABEL_30:
      result = *(__n128 *)p_s1;
      *a1 = *(_OWORD *)p_s1;
      *((_QWORD *)a1 + 2) = p_s1[2];
      return result;
    }
    if (*p_s1 && !strcmp(__s1, *p_s1))
    {
      v19 = *((_QWORD *)a2 + 4);
      v20 = *((_QWORD *)a2 + 3) - v19;
      if (v29 == *((_DWORD *)p_s1 + 3))
      {
        if (v20 > 2)
        {
          *(_BYTE *)(v19 + 2) = 108;
          *(_WORD *)v19 = 28515;
          v21 = (_BYTE *)(*((_QWORD *)a2 + 4) + 3);
          *((_QWORD *)a2 + 4) = v21;
        }
        else
        {
          a2 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, "col");
          v21 = (_BYTE *)*((_QWORD *)a2 + 4);
        }
        v22 = *((_QWORD *)a2 + 3);
        goto LABEL_26;
      }
      if (v20 > 3)
      {
        *(_DWORD *)v19 = 1701734764;
        v23 = (_BYTE *)(*((_QWORD *)a2 + 4) + 4);
        *((_QWORD *)a2 + 4) = v23;
      }
      else
      {
        a2 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, "line");
        v23 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
      if ((unint64_t)v23 < *((_QWORD *)a2 + 3))
      {
        *((_QWORD *)a2 + 4) = v23 + 1;
        *v23 = 58;
        goto LABEL_25;
      }
    }
    else
    {
      v10 = strlen(v9);
      v11 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)v11)
      {
        if (v10)
        {
          memcpy(v11, v9, v10);
          v11 = (_BYTE *)(*((_QWORD *)a2 + 4) + v10);
          *((_QWORD *)a2 + 4) = v11;
        }
      }
      else
      {
        a2 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, v9);
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
      if ((unint64_t)v11 < *((_QWORD *)a2 + 3))
      {
        *((_QWORD *)a2 + 4) = v11 + 1;
        *v11 = 58;
LABEL_25:
        a2 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v22 = *((_QWORD *)a2 + 3);
        v21 = (_BYTE *)*((_QWORD *)a2 + 4);
LABEL_26:
        if ((unint64_t)v21 >= v22)
        {
          llvm::raw_ostream::write(a2);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v21 + 1;
          *v21 = 58;
        }
        llvm::raw_ostream::operator<<();
        p_s1 = &__s1;
        goto LABEL_30;
      }
    }
    llvm::raw_ostream::write(a2);
    goto LABEL_25;
  }
  v13 = sub_22F1E22F0(a3, a4);
  v26 = *(__n128 *)p_s1;
  v27 = p_s1[2];
  sub_22F1DFB34(a1, a2, a3, v13, &v26);
  v14 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 0xA)
  {
    *(_DWORD *)(v14 + 7) = 1030188649;
    *(_QWORD *)v14 = *(_QWORD *)" <Spelling=";
    *((_QWORD *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " <Spelling=");
  }
  v15 = sub_22F1E238C(a3, a4);
  v24 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  sub_22F1DFB34(a1, a2, a3, v15, &v24);
  v17 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v17 + 1;
    *v17 = 62;
  }
  return result;
}

void sub_22F1DFE9C(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = MEMORY[0x24BED83D8] + 16;
  v13 = a3;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22F422F48(a1, (llvm::raw_ostream *)&v5, a2);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
}

uint64_t sub_22F1DFF28(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v9;
  unsigned int v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  v3 = *(_DWORD *)(v1 + 304);
  v4 = v3 + 1;
  if (v3 + 1 > 1)
  {
    if ((v3 & 0x80000000) != 0)
    {
      v9 = -2 - v3;
      if (((*(_QWORD *)(*(_QWORD *)(v1 + 224) + 8 * ((-2 - v3) >> 6)) >> (-2 - v3)) & 1) != 0)
        v5 = (_DWORD *)(*(_QWORD *)(v1 + 200) + 24 * v9);
      else
        v5 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v9, 0);
    }
    else
    {
      v5 = (_DWORD *)(*(_QWORD *)(v1 + 184) + 24 * v3);
    }
  }
  else
  {
    v5 = *(_DWORD **)(v1 + 184);
  }
  if ((*v5 & 0x7FFFFFFFu) <= v2
    && (v3 == -2
     || (v4 != *(_DWORD *)(v1 + 192)
       ? ((v4 & 0x80000000) != 0
        ? ((v10 = -3 - v3,
            ((*(_QWORD *)(*(_QWORD *)(v1 + 224) + 8 * ((-3 - v3) >> 6)) >> (-3 - v3)) & 1) == 0)
         ? (v7 = (_DWORD *)sub_22F1E1134(v1, v10, 0))
         : (v7 = (_DWORD *)(*(_QWORD *)(v1 + 200) + 24 * v10)))
        : (v7 = (_DWORD *)(*(_QWORD *)(v1 + 184) + 24 * v4)),
          v6 = *v7 & 0x7FFFFFFF)
       : (v6 = *(_DWORD *)(v1 + 216)),
         v6 > v2)))
  {
    return *(unsigned int *)(v1 + 304);
  }
  else
  {
    return sub_22F1E1EE8(v1, v2);
  }
}

void sub_22F1E005C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  unsigned int v6;
  llvm::MemoryBuffer *v8;
  uint64_t v10;
  llvm::MemoryBuffer *v12;
  llvm::MemoryBuffer *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  const char *v18;
  unint64_t v19;
  size_t *v20;
  uint64_t v21;
  void *v22;
  size_t v23;
  size_t v24;
  std::string *v25;
  size_t size;
  unint64_t v27;
  size_t *v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t *v40;
  uint64_t v41;
  const std::error_category *v42;
  uint64_t v43;
  std::string *v44;
  size_t v45;
  double v46;
  unint64_t v47;
  size_t *v48;
  uint64_t v49;
  size_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  size_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::error_code v69;
  std::string v70;
  std::string v71;
  __int16 v72;
  __int128 v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 *)(a1 + 48);
  if ((v6 & 8) != 0)
    goto LABEL_13;
  v8 = *(llvm::MemoryBuffer **)a1;
  if (v8)
  {
    llvm::MemoryBuffer::getMemBufferRef(v8);
    a5[32] = 1;
    return;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_13:
    *a5 = 0;
    a5[32] = 0;
    return;
  }
  *(_BYTE *)(a1 + 48) = v6 | 8;
  sub_22F1D1980(a3, v10, (v6 >> 1) & 1, 1, 0, (uint64_t)&v73);
  if ((v74 & 1) != 0)
  {
    if (*(_DWORD *)(a2 + 316) != -1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
      do
      {
        v20 = (size_t *)v19;
        v21 = *(_QWORD *)(v19 + 8);
        if ((v21 & 2) == 0)
          break;
        v19 = v21 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v19);
      v24 = *v20;
      v22 = v20 + 4;
      v23 = v24;
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v73;
      std::error_code::message(&v71, (const std::error_code *)&v70);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v71;
      else
        v25 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v71.__r_.__value_.__l.__size_;
      sub_22F1CBE80(a2, 8, v22, v23, v25, size, &unk_22F5E076B, 0);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      goto LABEL_126;
    }
    *(_DWORD *)(a2 + 312) = a4;
    *(_DWORD *)(a2 + 316) = 8;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = (unint64_t)(a2 + 320);
    v71.__r_.__value_.__r.__words[2] = a2;
    v72 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v36 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v36)
    {
      v37 = *(_QWORD *)(a2 + 768);
      v38 = 56 * v36;
      do
      {
        if (*(char *)(v37 + v38 - 9) < 0)
          operator delete(*(void **)(v37 + v38 - 32));
        v38 -= 56;
      }
      while (v38);
    }
    *(_DWORD *)(a2 + 776) = 0;
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
    do
    {
      v40 = (size_t *)v39;
      v41 = *(_QWORD *)(v39 + 8);
      if ((v41 & 2) == 0)
        break;
      v39 = v41 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v39);
    sub_22E3B89A8((unsigned __int8 **)&v71, v40 + 4, *v40);
    if ((v74 & 1) != 0)
    {
      v42 = (const std::error_category *)*((_QWORD *)&v73 + 1);
      v43 = v73;
    }
    else
    {
      v42 = std::system_category();
      v43 = 0;
    }
    *(_QWORD *)&v69.__val_ = v43;
    v69.__cat_ = v42;
    std::error_code::message(&v70, &v69);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v70;
    else
      v44 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = *((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x7F;
    else
      v45 = v70.__r_.__value_.__l.__size_;
    v46 = sub_22E3B89A8((unsigned __int8 **)&v71, v44, v45);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    goto LABEL_125;
  }
  v12 = (llvm::MemoryBuffer *)v73;
  *(_QWORD *)&v73 = 0;
  v13 = *(llvm::MemoryBuffer **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
  {
    (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v13 + 8))(v13);
    v12 = *(llvm::MemoryBuffer **)a1;
  }
  v14 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
  v15 = *((_QWORD *)v12 + 2) - (_QWORD)v14;
  if (v15 >= 0xFFFFFFFF)
  {
    if (*(_DWORD *)(a2 + 316) == -1)
    {
      *(_DWORD *)(a2 + 312) = a4;
      *(_DWORD *)(a2 + 316) = 22;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = (unint64_t)(a2 + 320);
      v71.__r_.__value_.__r.__words[2] = a2;
      v72 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v58 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(a2 + 768);
        v60 = 56 * v58;
        do
        {
          if (*(char *)(v59 + v60 - 9) < 0)
            operator delete(*(void **)(v59 + v60 - 32));
          v60 -= 56;
        }
        while (v60);
      }
      *(_DWORD *)(a2 + 776) = 0;
      v61 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
      do
      {
        v56 = (size_t *)v61;
        v62 = *(_QWORD *)(v61 + 8);
        if ((v62 & 2) == 0)
          break;
        v61 = v62 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v61);
      goto LABEL_124;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
    do
    {
      v28 = (size_t *)v27;
      v29 = *(_QWORD *)(v27 + 8);
      if ((v29 & 2) == 0)
        break;
      v27 = v29 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v27);
    v32 = *v28;
    v30 = v28 + 4;
    v31 = v32;
    v33 = a2;
    v34 = 22;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v16 + 68) || v15 == *(_QWORD *)(v16 + 24))
    {
      if (v15 >= 4)
      {
        if (*(_DWORD *)v14 == -131072)
        {
          v18 = "UTF-32 (BE)";
LABEL_102:
          *(_DWORD *)(a2 + 312) = a4;
          *(_DWORD *)(a2 + 316) = 82;
          if (*(char *)(a2 + 311) < 0)
          {
            **(_BYTE **)(a2 + 288) = 0;
            *(_QWORD *)(a2 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a2 + 288) = 0;
            *(_BYTE *)(a2 + 311) = 0;
          }
          v51 = (unsigned __int8 *)(a2 + 320);
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = (unint64_t)(a2 + 320);
          v71.__r_.__value_.__r.__words[2] = a2;
          v72 = 1;
          *(_BYTE *)(a2 + 320) = 0;
          *(_DWORD *)(a2 + 664) = 0;
          v52 = *(unsigned int *)(a2 + 776);
          if ((_DWORD)v52)
          {
            v53 = *(_QWORD *)(a2 + 768);
            v54 = 56 * v52;
            do
            {
              if (*(char *)(v53 + v54 - 9) < 0)
                operator delete(*(void **)(v53 + v54 - 32));
              v54 -= 56;
            }
            while (v54);
            LODWORD(v52) = *v51;
          }
          *(_DWORD *)(a2 + 776) = 0;
          v51[v52 + 1] = 1;
          *(_BYTE *)(a2 + 320) = v52 + 1;
          *(_QWORD *)&v51[8 * v52 + 16] = v18;
          v55 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
          do
          {
            v56 = (size_t *)v55;
            v57 = *(_QWORD *)(v55 + 8);
            if ((v57 & 2) == 0)
              break;
            v55 = v57 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while (v55);
LABEL_124:
          v46 = sub_22E3B89A8((unsigned __int8 **)&v71, v56 + 4, *v56);
LABEL_125:
          sub_22E3BB0B8(&v71, v46);
          goto LABEL_126;
        }
        v17 = *(_DWORD *)v14 == 65279;
        if (*(_DWORD *)v14 == 65279)
          v18 = "UTF-32 (LE)";
        else
          v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      if (v15 >= 2 && !v17)
      {
        v17 = *v14 == 65534;
        if (*v14 == 65534)
          v18 = "UTF-16 (BE)";
      }
      if (v15 >= 2 && !v17)
      {
        v17 = *v14 == 65279;
        if (*v14 == 65279)
          v18 = "UTF-16 (LE)";
      }
      if (v15 >= 3 && !v17)
      {
        v17 = (*v14 ^ 0x2F2B | *((unsigned __int8 *)v14 + 2) ^ 0x76) == 0;
        if (!(*v14 ^ 0x2F2B | *((unsigned __int8 *)v14 + 2) ^ 0x76))
          v18 = "UTF-7";
      }
      if (v15 >= 3 && !v17)
      {
        v17 = (*v14 ^ 0x64F7 | *((unsigned __int8 *)v14 + 2) ^ 0x4C) == 0;
        if (!(*v14 ^ 0x64F7 | *((unsigned __int8 *)v14 + 2) ^ 0x4C))
          v18 = "UTF-1";
      }
      if (v15 >= 4 && !v17)
      {
        v17 = *(_DWORD *)v14 == 1936094173;
        if (*(_DWORD *)v14 == 1936094173)
          v18 = "UTF-EBCDIC";
      }
      if (v15 >= 3 && !v17)
      {
        v17 = (*v14 ^ 0xFE0E | *((unsigned __int8 *)v14 + 2) ^ 0xFF) == 0;
        if (!(*v14 ^ 0xFE0E | *((unsigned __int8 *)v14 + 2) ^ 0xFF))
          v18 = "SCSU";
      }
      if (v15 >= 3 && !v17)
      {
        v17 = (*v14 ^ 0xEEFB | *((unsigned __int8 *)v14 + 2) ^ 0x28) == 0;
        if (!(*v14 ^ 0xEEFB | *((unsigned __int8 *)v14 + 2) ^ 0x28))
          v18 = "BOCU-1";
      }
      if (v15 >= 4 && !v17)
      {
        v17 = *(_DWORD *)v14 == 865415556;
        if (*(_DWORD *)v14 == 865415556)
          v18 = "GB-18030";
      }
      if (!v17 || !v18)
      {
        *(_BYTE *)(a1 + 48) &= ~8u;
        llvm::MemoryBuffer::getMemBufferRef(v12);
        v35 = 1;
        goto LABEL_127;
      }
      goto LABEL_102;
    }
    if (*(_DWORD *)(a2 + 316) == -1)
    {
      *(_DWORD *)(a2 + 312) = a4;
      *(_DWORD *)(a2 + 316) = 21;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = (unint64_t)(a2 + 320);
      v71.__r_.__value_.__r.__words[2] = a2;
      v72 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v64 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v64)
      {
        v65 = *(_QWORD *)(a2 + 768);
        v66 = 56 * v64;
        do
        {
          if (*(char *)(v65 + v66 - 9) < 0)
            operator delete(*(void **)(v65 + v66 - 32));
          v66 -= 56;
        }
        while (v66);
      }
      *(_DWORD *)(a2 + 776) = 0;
      v67 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
      do
      {
        v56 = (size_t *)v67;
        v68 = *(_QWORD *)(v67 + 8);
        if ((v68 & 2) == 0)
          break;
        v67 = v68 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v67);
      goto LABEL_124;
    }
    v47 = *(_QWORD *)(v16 + 88);
    do
    {
      v48 = (size_t *)v47;
      v49 = *(_QWORD *)(v47 + 8);
      if ((v49 & 2) == 0)
        break;
      v47 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v47);
    v50 = *v48;
    v30 = v48 + 4;
    v31 = v50;
    v33 = a2;
    v34 = 21;
  }
  sub_22F1CBE80(v33, v34, v30, v31, &unk_22F5E076B, 0, &unk_22F5E076B, 0);
LABEL_126:
  v35 = 0;
  *a5 = 0;
LABEL_127:
  a5[32] = v35;
  if ((v74 & 1) == 0)
  {
    v63 = v73;
    *(_QWORD *)&v73 = 0;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
}

uint64_t sub_22F1E07D8(void **a1, const void *a2, size_t a3)
{
  void **v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1 + 15;
  v12 = ((_BYTE *)a1[16] - (_BYTE *)a1[15]) >> 3;
  v5 = sub_22F1E0868((llvm::StringMapImpl *)a1, a2, a3, &v12);
  v6 = v5;
  if (v7)
  {
    v9 = *v5;
    v12 = *v5;
    v10 = (uint64_t *)a1[16];
    if (v10 < a1[17])
    {
      *v10 = v9;
      v11 = v10 + 1;
    }
    else
    {
      v11 = sub_22E4A02B0(v4, &v12);
    }
    a1[16] = v11;
  }
  return *(unsigned int *)(*v6 + 8);
}

uint64_t *sub_22F1E0868(llvm::StringMapImpl *a1, const void *a2, size_t a3, _QWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v11 = i[1];
        ++i;
        v9 = v11;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v12 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 17, 3);
  v13 = v12;
  v14 = v12 + 16;
  if (a3)
    memcpy((void *)(v12 + 16), a2, a3);
  *(_BYTE *)(v14 + a3) = 0;
  *(_QWORD *)v13 = a3;
  *(_DWORD *)(v13 + 8) = *a4;
  *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

char *sub_22F1E096C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  char *result;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  int *v14;

  v13 = a2;
  v14 = &v13;
  v4 = sub_22F1E51FC((uint64_t **)(a1 + 144), &v13, (uint64_t)&unk_22F457020, &v14);
  v5 = v4[6];
  result = (char *)v5 - 20;
  if (*((_DWORD *)v5 - 5) > a3)
  {
    v7 = v4[5];
    if (v5 != v7)
    {
      v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - (char *)v7) >> 2);
      v5 = v7;
      do
      {
        v9 = v8 >> 1;
        v10 = (_DWORD *)v5 + 5 * (v8 >> 1);
        v12 = *v10;
        v11 = (uint64_t *)(v10 + 5);
        v8 += ~(v8 >> 1);
        if (v12 > a3)
          v8 = v9;
        else
          v5 = v11;
      }
      while (v8);
    }
    if (v5 == v7)
      return 0;
    else
      return (char *)v5 - 20;
  }
  return result;
}

uint64_t **sub_22F1E0A2C(uint64_t a1, int a2, char **a3)
{
  uint64_t **result;
  int v5;
  int *v6;

  v5 = a2;
  v6 = &v5;
  result = sub_22F1E51FC((uint64_t **)(a1 + 144), &v5, (uint64_t)&unk_22F457020, &v6) + 5;
  if (result != (uint64_t **)a3)
    return (uint64_t **)sub_22F1E53FC(result, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2));
  return result;
}

uint64_t sub_22F1E0AA0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 312);
  if (!result)
  {
    result = operator new();
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_DWORD *)(result + 20) = 16;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = result + 56;
    *(_DWORD *)(result + 52) = 4;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = result + 104;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 112) = 1;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 144) = result + 152;
    v3 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = result;
    if (v3)
    {
      v4 = sub_22F423E54(v3);
      MEMORY[0x2348A0E9C](v4, 0x10B0C40FE9D165ELL);
      return *(_QWORD *)(a1 + 312);
    }
  }
  return result;
}

uint64_t sub_22F1E0B64(_QWORD *a1, int a2, unsigned int a3, unsigned int a4, int a5, int a6, unsigned int a7)
{
  uint64_t result;
  unint64_t v14;
  int v15;
  unsigned int v16;
  _BOOL4 v17;
  unint64_t v18;
  int v19;
  int v20;
  char v21;

  result = sub_22E74B2B0((uint64_t)a1, a2);
  v14 = result;
  v21 = 0;
  if ((result + 1) < 2)
    return result;
  v15 = result;
  if ((result & 0x80000000) != 0)
  {
    v16 = -2 - result;
    if (((*(_QWORD *)(a1[28] + 8 * ((-2 - result) >> 6)) >> (-2 - result)) & 1) == 0)
    {
      result = sub_22F1E1134((uint64_t)a1, v16, &v21);
      v17 = v21 == 0;
      goto LABEL_7;
    }
    result = a1[25] + 24 * v16;
  }
  else
  {
    result = a1[23] + 24 * result;
  }
  v17 = 1;
LABEL_7:
  if ((*(_DWORD *)result & 0x80000000) == 0 && v17)
  {
    v18 = HIDWORD(v14);
    *(_DWORD *)(result + 12) |= 0x80000000;
    sub_22F1E0AA0((uint64_t)a1);
    if (a6)
      v19 = 2;
    else
      v19 = 0;
    if (a5)
      v20 = 1;
    else
      v20 = v19;
    return (uint64_t)sub_22F4232D4(a1[39], v15, v18, a3, a4, v20, a7);
  }
  return result;
}

uint64_t sub_22F1E0C88(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160);
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    v4 = (v2 >> 3);
    do
    {
      v5 = *(uint64_t **)(*(_QWORD *)(a1 + 160) + 8 * v3);
      if (v5)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      ++v3;
    }
    while (v4 != v3);
  }
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(unsigned int *)(a1 + 136);
  v9 = (_QWORD *)(v7 + 16 * v8);
  if (*(_DWORD *)(a1 + 128))
  {
    if ((_DWORD)v8)
    {
      v11 = 16 * v8;
      v10 = *(_QWORD **)(a1 + 120);
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_13;
      }
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 120);
    }
  }
  else
  {
LABEL_13:
    v10 = (_QWORD *)(v7 + 16 * v8);
  }
  v12 = (_QWORD *)(v7 + 16 * v8);
LABEL_15:
  while (v10 != v12)
  {
    v13 = (uint64_t *)v10[1];
    if (v13)
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v15 = v10 + 2;
    v10 = v9;
    if (v15 != v9)
    {
      v10 = v15;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          goto LABEL_15;
        }
      }
    }
  }
  v16 = *(char **)(a1 + 480);
  v17 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v17)
  {
    v18 = 40 * v17;
    do
    {
      if (v16[v18 - 17] < 0)
        operator delete(*(void **)&v16[v18 - 40]);
      v18 -= 40;
    }
    while (v18);
    v16 = *(char **)(a1 + 480);
  }
  if (v16 != (char *)(a1 + 496))
    free(v16);
  sub_22F423EA0(a1 + 456);
  llvm::deallocate_buffer(*(llvm **)(a1 + 456), (void *)(16 * *(unsigned int *)(a1 + 472)));
  v19 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v19)
    MEMORY[0x2348A0E9C](v19, 0x1000C40D315E998);
  v20 = *(uint64_t **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v20)
  {
    v21 = *v20;
    *v20 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    MEMORY[0x2348A0E9C](v20, 0x1070C409107E0D6);
  }
  v22 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  llvm::deallocate_buffer(*(llvm **)(a1 + 384), (void *)(32 * *(unsigned int *)(a1 + 400)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 360), (void *)(12 * *(unsigned int *)(a1 + 376)));
  v23 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v23)
  {
    v30 = sub_22F423E54(v23);
    MEMORY[0x2348A0E9C](v30, 0x10B0C40FE9D165ELL);
  }
  v24 = *(void **)(a1 + 224);
  if (v24 != (void *)(a1 + 240))
    free(v24);
  v25 = *(void **)(a1 + 200);
  if (v25 != (void *)(a1 + 216))
    free(v25);
  v26 = *(void **)(a1 + 184);
  if (v26 != (void *)(a1 + 200))
    free(v26);
  v27 = *(void **)(a1 + 160);
  if (v27)
  {
    *(_QWORD *)(a1 + 168) = v27;
    operator delete(v27);
  }
  v28 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v28)
  {
    v31 = sub_22F423E0C(v28);
    MEMORY[0x2348A0E9C](v31, 0x1020C40355347DDLL);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 120), (void *)(16 * *(unsigned int *)(a1 + 136)));
  sub_22E3B4EF4(a1 + 24);
  return a1;
}

uint64_t sub_22F1E0F60(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[40];

  v3 = result;
  v4 = *(_DWORD *)(a2 + 208);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * (i >> 6)) >> i) & 1) == 0)
        result = sub_22F1E1134(a2, i, 0);
    }
  }
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(unsigned int *)(a2 + 136);
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (*(_DWORD *)(a2 + 128))
  {
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      v10 = *(_QWORD **)(a2 + 120);
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_11;
      }
    }
    else
    {
      v10 = *(_QWORD **)(a2 + 120);
    }
  }
  else
  {
LABEL_11:
    v10 = (_QWORD *)(v6 + 16 * v7);
  }
  v11 = (_QWORD *)(v6 + 16 * v7);
  if (v10 != v11)
  {
    v12 = (uint64_t *)(v3 + 120);
    v13 = v3 + 24;
    do
    {
      result = (uint64_t)sub_22F423F24(v12, v10);
      if (!*(_QWORD *)(result + 8))
      {
        v15 = result;
        v16 = v10[1];
        v17 = sub_22E3CD3D4(v13, 56, 3);
        *(_OWORD *)v17 = 0u;
        *(_OWORD *)(v17 + 16) = 0u;
        *(_OWORD *)(v17 + 32) = 0u;
        v18 = *(_BYTE *)(v17 + 48) & 0xF0;
        *(_BYTE *)(v17 + 48) = v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v16 + 16);
        v19 = v18 & 0xFE | *(_BYTE *)(v16 + 48) & 1;
        *(_BYTE *)(v17 + 48) = v19;
        v20 = *(_BYTE *)(v16 + 48) & 2 | v19;
        *(_BYTE *)(v17 + 48) = v20;
        *(_BYTE *)(v17 + 48) = *(_BYTE *)(v16 + 48) & 4 | v20;
        if (*(_QWORD *)v16)
        {
          llvm::MemoryBuffer::getMemBufferRef(*(llvm::MemoryBuffer **)v16);
          v21 = 1;
        }
        else
        {
          v21 = 0;
          v22[0] = 0;
        }
        v22[32] = v21;
        result = (uint64_t)sub_22F42377C((uint64_t *)v17, (uint64_t)v22);
        *(_QWORD *)(v15 + 8) = v17;
      }
      v14 = v10 + 2;
      v10 = v8;
      if (v14 != v8)
      {
        v10 = v14;
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t sub_22F1E1134(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 296) + 16))(*(_QWORD *)(a1 + 296), -2 - a2))return *(_QWORD *)(a1 + 200) + 24 * a2;
  if (a3)
    *a3 = 1;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (a2 >> 6)) >> a2) & 1) != 0)
    return *(_QWORD *)(a1 + 200) + 24 * a2;
  result = *(_QWORD *)(a1 + 448);
  if (!result)
  {
    v7 = sub_22F423608(a1);
    *(_QWORD *)(v7 + 24) = &unk_22F5E076B;
    *(_QWORD *)(v7 + 32) = 0;
    result = operator new();
    *(_DWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = v7;
    v8 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = result;
    if (v8)
    {
      MEMORY[0x2348A0E9C](v8, 0x1000C40D315E998);
      return *(_QWORD *)(a1 + 448);
    }
  }
  return result;
}

uint64_t sub_22F1E1214(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v4 = a2;
  v6 = a2;
  do
  {
    v7 = *(_QWORD *)(v6 + 8);
    v6 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v7 & 2) != 0 && v6);
  v25 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  v26 = 0;
  v8 = sub_22F25AFD8((uint64_t *)(a1 + 120), &v25, &v26);
  v9 = v26;
  if ((v8 & 1) != 0)
  {
    result = v26[1];
    if (result)
      return result;
  }
  else
  {
    v9 = sub_22F1E556C(a1 + 120, &v25, v26);
    *v9 = v25;
    v9[1] = 0;
  }
  v11 = sub_22E3CD3D4(a1 + 24, 56, 3);
  v9[1] = v11;
  v12 = *(_QWORD *)(a1 + 152);
  if (v12)
  {
    v19 = v4;
    do
    {
      v20 = *(_QWORD *)(v19 + 8);
      v19 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v20 & 2) != 0 && v19);
    v25 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    v26 = 0;
    if ((sub_22F246C54((uint64_t *)v12, &v25, &v26) & 1) != 0)
      v21 = v26;
    else
      v21 = (_QWORD *)(*(_QWORD *)v12 + 16 * *(unsigned int *)(v12 + 16));
    v11 = v9[1];
    if (v21 != (_QWORD *)(**(_QWORD **)(a1 + 152) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 152) + 16)))
    {
      v22 = v21[1];
      v13 = v22;
      do
      {
        v23 = *(_QWORD *)(v13 + 8);
        v13 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v23 & 2) != 0 && v13);
      if (*(_BYTE *)(a1 + 144))
        v15 = v4;
      else
        v15 = v22;
      goto LABEL_13;
    }
    v13 = v4;
    do
    {
      v24 = *(_QWORD *)(v13 + 8);
      v13 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v24 & 2) != 0 && v13);
  }
  else
  {
    v13 = v4;
    do
    {
      v14 = *(_QWORD *)(v13 + 8);
      v13 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v14 & 2) != 0 && v13);
  }
  v15 = v4;
LABEL_13:
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = v15;
  *(_QWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_BYTE *)(v11 + 48) &= 0xF0u;
  if (*(_BYTE *)(a1 + 145))
    v16 = a3;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = 2;
  *(_BYTE *)(v9[1] + 48) = *(_BYTE *)(v9[1] + 48) & 0xFD | v17;
  *(_BYTE *)(v9[1] + 48) = *(_BYTE *)(v9[1] + 48) & 0xFB | (4 * *(_BYTE *)(a1 + 146));
  do
  {
    v18 = *(_QWORD *)(v4 + 8);
    v4 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v18 & 2) != 0 && v4);
  *(_BYTE *)(v9[1] + 48) |= *(_BYTE *)(v4 + 68);
  return v9[1];
}

uint64_t sub_22F1E1400(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_22E3CD3D4((uint64_t)(a1 + 3), 56, 3);
  v5 = v4;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_BYTE *)(v4 + 48) &= 0xF0u;
  v7 = (uint64_t *)a1[21];
  v6 = a1[22];
  if ((unint64_t)v7 < v6)
  {
    *v7 = v4;
    v15 = v7 + 1;
  }
  else
  {
    v8 = (_QWORD *)a1[20];
    v9 = v7 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_22E3B3F8C();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    *v14 = v5;
    v15 = v14 + 1;
    if (v7 != v8)
    {
      do
      {
        v16 = *--v7;
        *--v14 = v16;
      }
      while (v7 != v8);
      v7 = (uint64_t *)a1[20];
    }
    a1[20] = v14;
    a1[21] = v15;
    a1[22] = &v13[8 * v12];
    if (v7)
      operator delete(v7);
  }
  a1[21] = v15;
  v17 = *a2;
  *a2 = 0;
  *(_BYTE *)(v5 + 48) &= ~8u;
  v18 = *(_QWORD *)v5;
  *(_QWORD *)v5 = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return v5;
}

unint64_t sub_22F1E154C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  if ((*(_DWORD *)(a1 + 220) - a3) < *(_DWORD *)(a1 + 216))
    return 0;
  v5 = *(unsigned int *)(a1 + 208);
  if (a2)
  {
    v6 = (_QWORD *)(a1 + 200);
    v7 = v5 + a2;
    if (v7 > *(unsigned int *)(a1 + 212))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(unsigned int *)(a1 + 208);
    }
    if (v5 != v7)
    {
      v8 = *v6 + 24 * v7;
      v9 = *v6 + 24 * v5;
      do
      {
        *(_DWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        v9 += 24;
      }
      while (v9 != v8);
    }
    *(_DWORD *)(a1 + 208) = v7;
  }
  else
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 208);
  }
  v10 = *(unsigned int *)(a1 + 232);
  if ((*(_DWORD *)(a1 + 288) & 0x3F) != 0)
  {
    v18 = *(_QWORD *)(a1 + 224) + 8 * v10;
    *(_QWORD *)(v18 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 288) & 0x3F));
  }
  v11 = v10;
  v12 = (_QWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 288) = v7;
  v13 = v7 + 63;
  if ((_DWORD)v10 != (v7 + 63) >> 6)
  {
    v14 = v13 >> 6;
    if (v10 > v14)
    {
      *(_DWORD *)(a1 + 232) = v14;
      v11 = v13 >> 6;
    }
    else
    {
      v15 = v10;
      if (v14 > *(_DWORD *)(a1 + 236))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(unsigned int *)(a1 + 232);
        v11 = *(_DWORD *)(a1 + 232);
      }
      if (v14 != v10)
        bzero((void *)(*v12 + 8 * v15), 8 * (v14 - v10));
      v11 += v14 - v10;
      *(_DWORD *)(a1 + 232) = v11;
      LODWORD(v7) = *(_DWORD *)(a1 + 288);
    }
  }
  if ((v7 & 0x3F) != 0)
    *(_QWORD *)(*v12 + 8 * v11 - 8) &= ~(-1 << (v7 & 0x3F));
  v16 = (*(_DWORD *)(a1 + 220) - a3);
  *(_DWORD *)(a1 + 220) = v16;
  return ~*(_DWORD *)(a1 + 208) | (unint64_t)(v16 << 32);
}

uint64_t sub_22F1E170C(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6)
{
  unint64_t v10;
  BOOL v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  _BYTE v20[40];

  v10 = a2;
  if (a4)
    v12 = a4 == 3;
  else
    v12 = 1;
  v13 = !v12;
  v14 = sub_22F1E1214(a1, a2, v13);
  v15 = v14;
  if (*(_BYTE *)(*(_QWORD *)(v14 + 16) + 68))
  {
    v19 = v14;
    sub_22F1E005C(v14, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0, v20);
    v15 = v19;
  }
  do
  {
    v16 = (uint64_t *)v10;
    v17 = *(_QWORD *)(v10 + 8);
    if ((v17 & 2) == 0)
      break;
    v10 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v17 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  return sub_22F1E17C8(a1, v15, (uint64_t)(v16 + 4), *v16, a3, a4, a5, a6);
}

uint64_t sub_22F1E17C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  __int16 v26;

  if ((a7 & 0x80000000) != 0)
  {
    *(_QWORD *)(a2 + 24) = a3;
    *(_QWORD *)(a2 + 32) = a4;
    v10 = *(_QWORD *)(a1 + 200) + 24 * (-2 - a7);
    *(_DWORD *)v10 = a8 & 0x7FFFFFFF;
    *(_QWORD *)(v10 + 8) = a5;
    *(_QWORD *)(v10 + 16) = a6 | a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - a7) >> 6)) |= 1 << (-2 - a7);
  }
  else
  {
    if (*(_QWORD *)a2)
      v9 = *(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8);
    else
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
    v11 = *(_DWORD *)(a1 + 216);
    v12 = v9 + 1;
    v13 = v9 + 1 + v11;
    if (v13 > v11 && v13 <= *(_DWORD *)(a1 + 220))
    {
      *(_QWORD *)(a2 + 24) = a3;
      *(_QWORD *)(a2 + 32) = a4;
      v22 = v11 & 0x7FFFFFFF;
      v23 = a5;
      v24 = a6 | a2;
      v18 = sub_22E4EF088(a1 + 184, (unint64_t)&v22, 1);
      v19 = *(_QWORD *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 192);
      v20 = *(_OWORD *)v18;
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      a7 = *(unsigned int *)(a1 + 192);
      *(_DWORD *)(a1 + 192) = a7 + 1;
      *(_DWORD *)(a1 + 216) += v12;
      *(_DWORD *)(a1 + 304) = a7;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v14 + 312) = a5;
      *(_DWORD *)(v14 + 316) = 25;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      v25[0] = v14 + 320;
      v25[1] = 0;
      v25[2] = v14;
      v26 = 1;
      *(_BYTE *)(v14 + 320) = 0;
      *(_DWORD *)(v14 + 664) = 0;
      v15 = *(unsigned int *)(v14 + 776);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v14 + 768);
        v17 = 56 * v15;
        do
        {
          if (*(char *)(v16 + v17 - 9) < 0)
            operator delete(*(void **)(v16 + v17 - 32));
          v17 -= 56;
        }
        while (v17);
      }
      *(_DWORD *)(v14 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v25);
      return 0;
    }
  }
  return a7;
}

uint64_t sub_22F1E1980(_QWORD *a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  v14 = v13;
  v15 = *a2;
  *a2 = 0;
  v19 = v15;
  v16 = sub_22F1E1400(a1, &v19);
  result = sub_22F1E17C8((uint64_t)a1, v16, v12, v14, a6, a3, a4, a5);
  if (v19)
  {
    v18 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return v18;
  }
  return result;
}

uint64_t sub_22F1E1A48(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *(_DWORD *)(a1 + 344);
  if (!v4)
    goto LABEL_13;
  result = 0;
  v19 = 0;
  if (v4 + 1 < 2)
    return result;
  if ((v4 & 0x80000000) != 0)
  {
    v4 = -2 - v4;
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (v4 >> 6)) >> v4) & 1) == 0)
    {
      v7 = sub_22F1E1134(a1, v4, &v19);
      if (v19)
        return 0;
      goto LABEL_8;
    }
    v6 = (_QWORD *)(a1 + 200);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 184);
  }
  v7 = *v6 + 24 * v4;
LABEL_8:
  if ((*(_DWORD *)v7 & 0x80000000) == 0)
  {
    v8 = *(_QWORD *)((*(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v8)
    {
      do
      {
        v9 = *(_QWORD *)(v8 + 8);
        v8 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v9 & 2) != 0 && v8);
    }
    if (v8 == a2)
      return *(unsigned int *)(a1 + 344);
  }
LABEL_13:
  v10 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v10)
  {
    result = 0;
    v11 = *(_QWORD *)(a1 + 184);
    do
    {
      if ((*(_DWORD *)(v11 + 24 * result) & 0x80000000) == 0)
      {
        v12 = *(_QWORD *)((*(_QWORD *)(v11 + 24 * result + 16) & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v12)
        {
          do
          {
            v13 = *(_QWORD *)(v12 + 8);
            v12 = v13 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v13 & 2) != 0 && v12);
          if (v12 == a2)
            return result;
        }
        else if (!a2)
        {
          return result;
        }
      }
      ++result;
    }
    while (result != v10);
  }
  v14 = *(unsigned int *)(a1 + 208);
  if (!(_DWORD)v14)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (v15 >> 6)) >> v15) & 1) != 0
        ? *(_QWORD *)(a1 + 200) + 24 * v15
        : sub_22F1E1134(a1, v15, 0);
    if ((*(_DWORD *)v16 & 0x80000000) == 0)
    {
      v17 = *(_QWORD *)((*(_QWORD *)(v16 + 16) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v17)
      {
        do
        {
          v18 = *(_QWORD *)(v17 + 8);
          v17 = v18 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v18 & 2) != 0 && v17);
      }
      if (v17 == a2)
        break;
    }
    if (++v15 == v14)
      return 0;
  }
  return (-2 - v15);
}

uint64_t sub_22F1E1C10(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;

  v10 = *(_DWORD *)(a1 + 216) | 0x80000000;
  v11 = a2 | ((unint64_t)a3 << 32);
  v12 = 0x100000000;
  v6 = sub_22E4EF088(a1 + 184, (unint64_t)&v10, 1);
  v7 = *(_QWORD *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 192);
  v8 = *(_OWORD *)v6;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v7 = v8;
  ++*(_DWORD *)(a1 + 192);
  LODWORD(v7) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 216) = a4 + v7 + 1;
  return v7 | 0x80000000;
}

uint64_t sub_22F1E1CA0(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  __int128 v15;

  if (a4 < 0)
  {
    result = a5 | 0x80000000;
    v7 = a2[1];
    v8 = *(_QWORD *)(a1 + 200) + 24 * (-2 - a4);
    v9 = *a2;
    *(_DWORD *)v8 = result;
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - a4) >> 6)) |= 1 << (-2 - a4);
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 216) | 0x80000000;
    v15 = *(_OWORD *)a2;
    v11 = sub_22E4EF088(a1 + 184, (unint64_t)&v14, 1);
    v12 = *(_QWORD *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 192);
    v13 = *(_OWORD *)v11;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
    *(_OWORD *)v12 = v13;
    ++*(_DWORD *)(a1 + 192);
    LODWORD(v12) = *(_DWORD *)(a1 + 216);
    *(_DWORD *)(a1 + 216) = a3 + v12 + 1;
    return v12 | 0x80000000;
  }
  return result;
}

uint64_t sub_22F1E1D7C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  v11 = *(_DWORD *)(a1 + 216) | 0x80000000;
  v5 = a4 & 0x7FFFFFFF;
  v6 = a3 & 0x7FFFFFFF;
  v12 = a2 | ((unint64_t)a3 << 32);
  v13 = a4;
  v7 = sub_22E4EF088(a1 + 184, (unint64_t)&v11, 1);
  v8 = *(_QWORD *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 192);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(a1 + 192);
  LODWORD(v8) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 216) = v5 - v6 + v8 + 1;
  return v8 | 0x80000000;
}

const char *sub_22F1E1E1C(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v4;
  uint64_t v6;
  unsigned __int8 v7;

  sub_22F1E1E78(a1, a2, (uint64_t)&v6);
  v4 = v7;
  if (a3)
    *a3 = v7 ^ 1;
  if (v4)
    return (const char *)v6;
  else
    return "<<<<<INVALID SOURCE LOCATION>>>>>";
}

void sub_22F1E1E78(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  __int128 v6;
  char v7;

  v5 = sub_22E49F3DC(a1, a2);
  if (v5 && (sub_22F1E005C(*((_QWORD *)v5 + 2) & 0xFFFFFFFFFFFFFFF8, a1[1], a1[2], 0, &v6), v7))
  {
    *(_OWORD *)a3 = v6;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

uint64_t sub_22F1E1EE8(uint64_t a1, unsigned int a2)
{
  if (!a2)
    return 0;
  if (*(_DWORD *)(a1 + 216) <= a2)
    return sub_22F1E202C(a1, a2);
  return sub_22F1E1F08(a1, a2);
}

uint64_t sub_22F1E1F08(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  int i;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 304);
  if ((v2 & 0x80000000) != 0)
  {
    v3 = *(_QWORD *)(a1 + 184);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 184);
    v4 = (_DWORD *)(v3 + 24 * v2);
    if ((*v4 & 0x7FFFFFFFu) >= a2)
      goto LABEL_6;
  }
  v4 = (_DWORD *)(v3 + 24 * *(unsigned int *)(a1 + 192));
LABEL_6:
  v5 = v4 - 48;
  v6 = v4 - 6;
  v7 = (unint64_t)v4 - v3 - 24;
  for (i = -1; i != -9; --i)
  {
    if ((*v6 & 0x7FFFFFFFu) <= a2)
    {
      v13 = -1431655765 * (v7 >> 3);
      *(_DWORD *)(a1 + 304) = v13;
      *(_DWORD *)(a1 + 352) -= i;
      return v13;
    }
    v7 -= 24;
    v6 -= 6;
  }
  v9 = 0;
  v10 = 0;
  v11 = -1431655765 * (((unint64_t)v5 - v3) >> 3);
LABEL_10:
  v12 = v9 + 1;
  do
  {
    v9 = v12;
    v13 = v10 + ((v11 - v10) >> 1);
    if ((*(_DWORD *)(v3 + 24 * v13) & 0x7FFFFFFFu) > a2)
    {
      v11 = v10 + ((v11 - v10) >> 1);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 192) == (_DWORD)v13 + 1)
      break;
    ++v12;
    v10 += (v11 - v10) >> 1;
  }
  while ((*(_DWORD *)(v3 + 24 * (v13 + 1)) & 0x7FFFFFFFu) <= a2);
  *(_DWORD *)(a1 + 304) = v13;
  *(_DWORD *)(a1 + 356) += v9;
  return v13;
}

uint64_t sub_22F1E202C(uint64_t a1, unsigned int a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v24;
  _DWORD *v25;

  if (*(_DWORD *)(a1 + 220) <= a2)
  {
    v4 = *(_DWORD *)(a1 + 304);
    if (v4 < 0)
    {
      v24 = -2 - v4;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v25 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v24);
      else
        v25 = (_DWORD *)sub_22F1E1134(a1, v24, 0);
      if ((*v25 & 0x7FFFFFFFu) >= a2)
        v5 = ~v4;
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    v6 = 0;
    v7 = v5 + 2;
    do
    {
      v8 = v7 - 2;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((v7 - 2) >> 6)) >> (v7 - 2)) & 1) != 0)
        v9 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v8);
      else
        v9 = (_DWORD *)sub_22F1E1134(a1, v8, 0);
      if ((*v9 & 0x7FFFFFFFu) <= a2)
      {
        v18 = -v7;
        *(_DWORD *)(a1 + 304) = v18;
        *(_DWORD *)(a1 + 352) = *(_DWORD *)(a1 + 352) - v6 + 1;
        return v18;
      }
      ++v7;
      --v6;
    }
    while (v6 != -8);
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 208);
    v12 = v7 - 2;
LABEL_11:
    v10 += 2;
    v13 = v11;
    do
    {
      v11 = v13;
      v14 = v13 - v12;
      v13 = v12 + ((v13 - v12) >> 1);
      v15 = 1 << (v12 + (v14 >> 1));
      v16 = v13 >> 6;
      v17 = (_DWORD *)((v15 & *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v16)) != 0
                     ? *(_QWORD *)(a1 + 200) + 24 * v13
                     : sub_22F1E1134(a1, v12 + (v14 >> 1), 0));
      if ((*v17 & 0x7FFFFFFF) == 0)
        break;
      if ((*v17 & 0x7FFFFFFFu) > a2)
      {
        v12 += v14 >> 1;
        if (v14 >= 2)
          goto LABEL_11;
        return 0;
      }
      v18 = (-2 - v13);
      if (v13 < 0xFFFFFFFE)
      {
        if ((v18 & 0x80000000) != 0)
        {
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v16) & v15) != 0)
            v19 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v13);
          else
            v19 = (_DWORD *)sub_22F1E1134(a1, v13, 0);
        }
        else
        {
          v19 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v18);
        }
      }
      else
      {
        v19 = *(_DWORD **)(a1 + 184);
      }
      if ((*v19 & 0x7FFFFFFFu) <= a2)
      {
        if (!(_DWORD)v13
          || (*(_DWORD *)(a1 + 192) != ~(_DWORD)v13
            ? ((v13 & 0x80000000) == 0
             ? ((v22 = v13 - 1,
                 ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((v13 - 1) >> 6)) >> (v13 - 1)) & 1) == 0)
              ? (v21 = (_DWORD *)sub_22F1E1134(a1, v22, 0))
              : (v21 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v22)))
             : (v21 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * ~(_DWORD)v13)),
               v20 = *v21 & 0x7FFFFFFF)
            : (v20 = *(_DWORD *)(a1 + 216)),
              v20 > a2))
        {
          *(_DWORD *)(a1 + 304) = v18;
          *(_DWORD *)(a1 + 356) += v10;
          return v18;
        }
      }
      v10 += 2;
    }
    while ((_DWORD)v11 != (_DWORD)v13);
  }
  return 0;
}

uint64_t sub_22F1E22F0(_QWORD *a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  do
  {
    v3 = sub_22F1E50A4((uint64_t)a1, a2 & 0x7FFFFFFF);
    if (v3 + 1 > 1)
    {
      if ((v3 & 0x80000000) != 0)
      {
        v5 = -2 - v3;
        if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v3) >> 6)) >> (-2 - v3)) & 1) != 0)
          v4 = a1[25] + 24 * v5;
        else
          v4 = sub_22F1E1134((uint64_t)a1, v5, 0);
      }
      else
      {
        v4 = a1[23] + 24 * v3;
      }
    }
    else
    {
      v4 = a1[23];
    }
    a2 = *(_DWORD *)(v4 + 12);
  }
  while (a2 < 0);
  return *(unsigned int *)(v4 + 12);
}

uint64_t sub_22F1E238C(_QWORD *a1, int a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  do
  {
    v3 = sub_22E677168((uint64_t)a1, a2);
    v4 = HIDWORD(v3);
    if ((v3 + 1) > 1)
    {
      if ((v3 & 0x80000000) != 0)
      {
        v6 = -2 - v3;
        if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v3) >> 6)) >> (-2 - v3)) & 1) != 0)
          v5 = a1[25] + 24 * v6;
        else
          v5 = sub_22F1E1134((uint64_t)a1, v6, 0);
      }
      else
      {
        v5 = a1[23] + 24 * v3;
      }
    }
    else
    {
      v5 = a1[23];
    }
    v7 = *(_DWORD *)(v5 + 8);
    if (!v7)
      v7 = *(_DWORD *)(v5 + 12);
    a2 = v7 + v4;
  }
  while (v7 + v4 < 0);
  return (v7 + v4);
}

BOOL sub_22F1E2440(_QWORD *a1, int a2, _DWORD *a3)
{
  _BOOL8 result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;

  if ((a2 & 0x80000000) == 0)
    return 0;
  v6 = sub_22F1E50A4((uint64_t)a1, a2 & 0x7FFFFFFF);
  if (v6 + 1 > 1)
  {
    if ((v6 & 0x80000000) != 0)
    {
      v8 = -2 - v6;
      if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
        v7 = a1[25] + 24 * v8;
      else
        v7 = sub_22F1E1134((uint64_t)a1, v8, 0);
    }
    else
    {
      v7 = a1[23] + 24 * v6;
    }
  }
  else
  {
    v7 = a1[23];
  }
  v9 = *(_DWORD *)(v7 + 12);
  if (!v9)
    return 0;
  v10 = *(_DWORD *)(v7 + 16);
  result = v10 == 0;
  if (a3)
  {
    if (!v10)
    {
      *a3 = v9;
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F1E2500(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if ((a2 & 0x80000000) != 0)
  {
    v3 = sub_22E677168((uint64_t)a1, a2);
    v4 = HIDWORD(v3);
    if ((v3 + 1) > 1)
    {
      if ((v3 & 0x80000000) != 0)
      {
        v6 = -2 - v3;
        if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v3) >> 6)) >> (-2 - v3)) & 1) != 0)
          v5 = a1[25] + 24 * v6;
        else
          v5 = sub_22F1E1134((uint64_t)a1, v6, 0);
      }
      else
      {
        v5 = a1[23] + 24 * v3;
      }
    }
    else
    {
      v5 = a1[23];
    }
    v7 = *(_DWORD *)(v5 + 8);
    if (!v7)
      v7 = *(_DWORD *)(v5 + 12);
    return (v7 + v4);
  }
  return a2;
}

uint64_t sub_22F1E25A4(_QWORD *a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_22F1E50A4((uint64_t)a1, a2 & 0x7FFFFFFF);
  if (v3 + 1 > 1)
  {
    if ((v3 & 0x80000000) != 0)
    {
      v5 = -2 - v3;
      if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v3) >> 6)) >> (-2 - v3)) & 1) != 0)
        v4 = a1[25] + 24 * v5;
      else
        v4 = sub_22F1E1134((uint64_t)a1, v5, 0);
    }
    else
    {
      v4 = a1[23] + 24 * v3;
    }
  }
  else
  {
    v4 = a1[23];
  }
  v6 = *(unsigned int *)(v4 + 12);
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  if ((_DWORD)v7)
    v7 = v7;
  else
    v7 = v6;
  return v6 | (v7 << 32);
}

unint64_t sub_22F1E263C(_QWORD *a1, _DWORD *a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v3 = a2[3];
          v4 = sub_22F1E50A4((uint64_t)a1, v3 & 0x7FFFFFFF);
          v5 = v4;
          if (v4 + 1 > 1)
            break;
          a2 = (_DWORD *)a1[23];
          if ((v3 & 0x80000000) == 0)
            return v5 | ((unint64_t)((v3 & 0x7FFFFFFF) - (*a2 & 0x7FFFFFFFu)) << 32);
        }
        if ((v4 & 0x80000000) != 0)
          break;
        a2 = (_DWORD *)(a1[23] + 24 * v4);
        if ((v3 & 0x80000000) == 0)
          return v5 | ((unint64_t)((v3 & 0x7FFFFFFF) - (*a2 & 0x7FFFFFFFu)) << 32);
      }
      v6 = -2 - v4;
      if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) == 0)
        break;
      a2 = (_DWORD *)(a1[25] + 24 * v6);
      if ((v3 & 0x80000000) == 0)
        return v5 | ((unint64_t)((v3 & 0x7FFFFFFF) - (*a2 & 0x7FFFFFFFu)) << 32);
    }
    a2 = (_DWORD *)sub_22F1E1134((uint64_t)a1, v6, 0);
  }
  while (v3 < 0);
  return v5 | ((unint64_t)((v3 & 0x7FFFFFFF) - (*a2 & 0x7FFFFFFFu)) << 32);
}

unint64_t sub_22F1E2704(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  do
  {
    v4 = a2[2];
    if (!v4)
      v4 = a2[3];
    v5 = v4 + a3;
    v6 = (v4 + a3) & 0x7FFFFFFF;
    v7 = sub_22F1E50A4((uint64_t)a1, v6);
    v8 = v7;
    if (v7 + 1 > 1)
    {
      if ((v7 & 0x80000000) != 0)
      {
        v9 = -2 - v7;
        if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v7) >> 6)) >> (-2 - v7)) & 1) != 0)
          a2 = (_DWORD *)(a1[25] + 24 * v9);
        else
          a2 = (_DWORD *)sub_22F1E1134((uint64_t)a1, v9, 0);
      }
      else
      {
        a2 = (_DWORD *)(a1[23] + 24 * v7);
      }
    }
    else
    {
      a2 = (_DWORD *)a1[23];
    }
    a3 = v6 - (*a2 & 0x7FFFFFFF);
  }
  while (v5 < 0);
  return v8 | (unint64_t)(a3 << 32);
}

unint64_t sub_22F1E27D0(_QWORD *a1, int a2)
{
  unsigned int v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = sub_22F1E50A4((uint64_t)a1, a2 & 0x7FFFFFFF);
  result = sub_22E6155EC(a1, v3);
  if (result)
  {
    v5 = *(_QWORD *)(result + 88);
    do
    {
      v6 = v5;
      v7 = *(_QWORD *)(v5 + 8);
      if ((v7 & 2) == 0)
        break;
      v5 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v5);
    return v6 + 32;
  }
  return result;
}

unint64_t sub_22F1E2828(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    v4 = sub_22F1E25A4(a1, a2);
    v5 = v4;
    v2 = v4;
    if ((v4 & 0x80000000) != 0)
    {
      v2 = v4;
      do
        v2 = sub_22F1E25A4(a1, v2);
      while ((v2 & 0x80000000) != 0);
    }
    a2 = HIDWORD(v5);
    if ((v5 & 0x8000000000000000) != 0)
    {
      do
      {
        v6 = sub_22F1E25A4(a1, a2);
        a2 = HIDWORD(v6);
      }
      while ((v6 & 0x8000000000000000) != 0);
    }
  }
  return v2 | ((unint64_t)a2 << 32);
}

BOOL sub_22F1E28D4(_QWORD *a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  if ((a2 & 0x80000000) == 0)
    return 0;
  v4 = sub_22F1E50A4((uint64_t)a1, a2 & 0x7FFFFFFF);
  if (v4 + 1 > 1)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v6 = -2 - v4;
      if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v5 = a1[25] + 24 * v6;
      else
        v5 = sub_22F1E1134((uint64_t)a1, v6, 0);
    }
    else
    {
      v5 = a1[23] + 24 * v4;
    }
  }
  else
  {
    v5 = a1[23];
  }
  return *(_DWORD *)(v5 + 12) && *(_DWORD *)(v5 + 16) != 0;
}

uint64_t sub_22F1E2980(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  char v16;

  v5 = sub_22E677168(a1, a2);
  if (HIDWORD(v5))
    return 0;
  v6 = v5;
  result = 0;
  v16 = 0;
  if ((v6 + 1) < 2)
    return result;
  if ((v6 & 0x80000000) == 0)
  {
    v8 = (_QWORD *)(a1 + 184);
    v9 = v6;
LABEL_7:
    v10 = *v8 + 24 * v9;
    goto LABEL_8;
  }
  v9 = (-2 - v6);
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 200);
    goto LABEL_7;
  }
  v10 = sub_22F1E1134(a1, v9, &v16);
  if (v16)
    return 0;
LABEL_8:
  v11 = *(_DWORD *)(v10 + 12);
  if (v11 && !*(_DWORD *)(v10 + 16))
  {
    if ((int)v6 < 1)
    {
      if ((v6 ^ 0xFFFFFFFF) >= *(unsigned int *)(a1 + 208))
        goto LABEL_10;
      v12 = ~(_DWORD)v6;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (~(_DWORD)v6 >> 6)) >> ~(_BYTE)v6) & 1) == 0)
      {
        v15 = *(_DWORD *)(v10 + 12);
        v14 = (_DWORD *)sub_22F1E1134(a1, v12, &v16);
        if (v16)
          return 0;
        v11 = v15;
        goto LABEL_20;
      }
      v13 = (_QWORD *)(a1 + 200);
    }
    else
    {
      if ((_DWORD)v6 == 1)
        goto LABEL_10;
      v12 = v6 - 1;
      v13 = (_QWORD *)(a1 + 184);
    }
    v14 = (_DWORD *)(*v13 + 24 * v12);
LABEL_20:
    if ((*v14 & 0x80000000) == 0 || v14[3] != v11)
      goto LABEL_10;
    return 0;
  }
LABEL_10:
  if (a3)
    *a3 = v11;
  return 1;
}

uint64_t sub_22F1E2AD4(uint64_t a1, int a2, _DWORD *a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t result;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = sub_22F1E50A4(a1, a2 & 0x7FFFFFFF);
  v7 = (a2 + 1) & 0x7FFFFFFF;
  v8 = v6 + 1;
  if ((v6 + 1) > 1)
  {
    if (v6 < 0)
    {
      v10 = -2 - v6;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
        v9 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v10);
      else
        v9 = (_DWORD *)sub_22F1E1134(a1, v10, 0);
    }
    else
    {
      v9 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v6);
    }
  }
  else
  {
    v9 = *(_DWORD **)(a1 + 184);
  }
  if ((*v9 & 0x7FFFFFFFu) <= v7)
  {
    if (v6 == -2)
      return 0;
    if (v8 == *(_DWORD *)(a1 + 192))
    {
      v14 = *(_DWORD *)(a1 + 216);
    }
    else
    {
      if ((v8 & 0x80000000) != 0)
      {
        v19 = -3 - v6;
        v17 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v6) >> 6)) >> (-3 - v6)) & 1) != 0
                       ? *(_QWORD *)(a1 + 200) + 24 * v19
                       : sub_22F1E1134(a1, v19, 0));
      }
      else
      {
        v17 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v8);
      }
      v14 = *v17 & 0x7FFFFFFF;
    }
    if (v14 > v7)
      return 0;
  }
  result = 0;
  v23 = 0;
  if (v8 < 2)
    return result;
  if ((v6 & 0x80000000) == 0)
  {
    v12 = (_QWORD *)(a1 + 184);
    v13 = v6;
LABEL_16:
    v15 = *v12 + 24 * v13;
    goto LABEL_17;
  }
  v13 = -2 - v6;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
  {
    v12 = (_QWORD *)(a1 + 200);
    goto LABEL_16;
  }
  v15 = sub_22F1E1134(a1, v13, &v23);
  if (v23)
    return 0;
LABEL_17:
  if (!*(_DWORD *)(v15 + 12) || *(_DWORD *)(v15 + 16))
    goto LABEL_19;
  if (v6 < 1)
  {
    if (v6 > 0xFFFFFFFD)
      goto LABEL_19;
LABEL_37:
    v8 = -3 - v6;
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v6) >> 6)) >> (-3 - v6)) & 1) != 0)
    {
      v18 = (_QWORD *)(a1 + 200);
      goto LABEL_39;
    }
    v21 = v15;
    v22 = sub_22F1E1134(a1, v8, &v23);
    if (!v23)
    {
      v20 = (_DWORD *)v22;
      v15 = v21;
      goto LABEL_40;
    }
    return 0;
  }
  if (v8 >= *(_DWORD *)(a1 + 192))
    goto LABEL_19;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_37;
  v18 = (_QWORD *)(a1 + 184);
LABEL_39:
  v20 = (_DWORD *)(*v18 + 24 * v8);
LABEL_40:
  if ((*v20 & 0x80000000) != 0 && v20[3] == *(_DWORD *)(v15 + 12))
    return 0;
LABEL_19:
  if (a3)
  {
    v16 = *(_DWORD *)(v15 + 16);
    if (!v16)
      v16 = *(_DWORD *)(v15 + 12);
    *a3 = v16;
  }
  return 1;
}

const char *sub_22F1E2D38(uint64_t *a1, int a2, _BYTE *a3)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13[4];
  unsigned __int8 v14;
  char v15;

  v5 = sub_22E678830((uint64_t)a1, a2);
  v6 = v5;
  v15 = 0;
  if ((v5 + 1) < 2)
    goto LABEL_14;
  if ((v5 & 0x80000000) != 0)
  {
    v8 = -2 - v5;
    if (((*(_QWORD *)(a1[28] + 8 * ((-2 - v5) >> 6)) >> (-2 - v5)) & 1) == 0)
    {
      v9 = sub_22F1E1134((uint64_t)a1, v8, &v15);
      if (v15)
        goto LABEL_14;
      goto LABEL_7;
    }
    v7 = a1 + 25;
  }
  else
  {
    v7 = a1 + 23;
    v8 = v5;
  }
  v9 = *v7 + 24 * v8;
LABEL_7:
  if ((*(_DWORD *)v9 & 0x80000000) == 0)
  {
    v10 = HIDWORD(v6);
    sub_22F1E005C(*(_QWORD *)(v9 + 16) & 0xFFFFFFFFFFFFFFF8, a1[1], a1[2], 0, v13);
    v11 = v14;
    if (a3)
      *a3 = v14 ^ 1;
    if (v11)
      return (const char *)(v13[0] + v10);
    else
      return "<<<<INVALID BUFFER>>>>";
  }
LABEL_14:
  if (a3)
    *a3 = 1;
  return "<<<<INVALID BUFFER>>>>";
}

uint64_t sub_22F1E2E38(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  int v8;
  uint64_t result;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v20;
  _QWORD v21[4];
  unsigned __int8 v22;

  sub_22E490D40((_QWORD *)a1, a2, 0, v21);
  v8 = v22;
  if (a4)
    *a4 = v22 ^ 1;
  if (!v8)
    return 1;
  if (v21[1] >= (unint64_t)a3)
  {
    if (*(_DWORD *)(a1 + 320) == a2
      && (v10 = *(_DWORD **)(*(_QWORD *)(a1 + 328) + 40)) != 0
      && (v11 = *(unsigned int *)(a1 + 340), v11 < *v10)
      && ((v12 = v10 + 1, v13 = v10[(v11 - 1) + 1], v14 = v12[v11], v13 <= a3)
        ? (v15 = v14 > a3)
        : (v15 = 0),
          v15))
    {
      if (v13 < a3 && a3 + 1 == v14)
      {
        v20 = *(unsigned __int8 *)(v21[0] + a3 - 1);
        if (v20 == 13 || v20 == 10)
          --a3;
      }
    }
    else
    {
      v16 = a3;
      v13 = a3 + 1;
      while (v16)
      {
        v17 = *(unsigned __int8 *)(v21[0] - 1 + v16--);
        --v13;
        if (v17 == 13 || v17 == 10)
          return a3 - v13 + 1;
      }
      v13 = 0;
    }
    return a3 - v13 + 1;
  }
  else
  {
    result = 1;
    if (a4)
      *a4 = 1;
  }
  return result;
}

uint64_t sub_22F1E2F68@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24[16];
  uint64_t v25;
  char v26;
  char v27;

  if (!a2)
    goto LABEL_18;
  v6 = (_QWORD *)result;
  result = sub_22E74B2B0(result, a2);
  v7 = result;
  v27 = 0;
  if ((result + 1) < 2)
    goto LABEL_18;
  v8 = result;
  if ((result & 0x80000000) != 0)
  {
    v10 = -2 - result;
    if (((*(_QWORD *)(v6[28] + 8 * ((-2 - result) >> 6)) >> (-2 - result)) & 1) != 0)
    {
      v9 = v6 + 25;
      goto LABEL_7;
    }
    result = sub_22F1E1134((uint64_t)v6, v10, &v27);
    if (!v27)
    {
      v11 = result;
      goto LABEL_8;
    }
LABEL_18:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return result;
  }
  v9 = v6 + 23;
  v10 = result;
LABEL_7:
  v11 = *v9 + 24 * v10;
LABEL_8:
  if ((*(_DWORD *)v11 & 0x80000000) != 0)
    goto LABEL_18;
  v12 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 8);
  if (v13)
  {
    do
    {
      v14 = v13;
      v15 = *(_QWORD *)(v13 + 8);
      if ((v15 & 2) == 0)
        break;
      v13 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
    v16 = v14 + 32;
  }
  else
  {
    sub_22F1E005C(v12, v6[1], v6[2], 0, v24);
    v16 = v26 ? v25 : 0;
  }
  result = sub_22F1E33FC((uint64_t)v6, v7, SHIDWORD(v7), &v27);
  if (v27)
    goto LABEL_18;
  v17 = result;
  result = sub_22F1E2E38((uint64_t)v6, v7, HIDWORD(v7), &v27);
  if (v27)
    goto LABEL_18;
  v18 = result;
  v19 = *(_DWORD *)(v11 + 8);
  if (a3 && (*(_DWORD *)(v11 + 12) & 0x80000000) != 0)
  {
    v20 = *(_DWORD *)(v11 + 8);
    result = (uint64_t)sub_22F1E096C(v6[39], v7, HIDWORD(v7));
    if (!result)
      goto LABEL_28;
    v21 = result;
    v22 = *(unsigned int *)(result + 8);
    if ((_DWORD)v22 != -1)
    {
      LODWORD(v7) = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(v6[39] + 120) + 8 * v22) + 16;
    }
    result = sub_22F1E33FC((uint64_t)v6, v8, *(_DWORD *)result, 0);
    v17 += *(_DWORD *)(v21 + 4) + ~(_DWORD)result;
    if (*(_DWORD *)(v21 + 16))
    {
      result = (uint64_t)sub_22E49F3DC(v6, v8);
      if (result)
        v23 = *(_DWORD *)result & 0x7FFFFFFF;
      else
        v23 = 0;
      v19 = *(_DWORD *)(v21 + 16) + v23;
    }
    else
    {
LABEL_28:
      v19 = v20;
    }
  }
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 12) = v17;
  *(_DWORD *)(a4 + 16) = v18;
  *(_DWORD *)(a4 + 20) = v19;
  return result;
}

_DWORD *sub_22F1E3188(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v19;
  int v20;
  _DWORD v21[256];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v21[0] = 0;
  v20 = 1;
  v6 = 0;
  v7 = 1;
  v8 = a2 - 9;
  if (a2 >= 9)
  {
    do
    {
      v9 = *(_QWORD *)(a1 + v6);
      v10 = (v9 & 0x7F7F7F7F7F7F7F7ELL) + 0x7676767676767676;
      if (((v9 - 0xE0E0E0E0E0E0E0ELL) & ~v9 & v10 & 0x8080808080808080) != 0)
      {
        v11 = __clz(__rbit64((v9 - 0xE0E0E0E0E0E0E0ELL) & ~v9 & v10 & 0x8080808080808080)) - 7;
        v6 += (v11 >> 3) + 1;
        v12 = (v9 >> v11);
        if (v12 == 10)
          goto LABEL_7;
        if (v12 == 13)
        {
          if (*(_BYTE *)(a1 + v6) == 10)
            ++v6;
LABEL_7:
          if (v7 >= 0x100)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v7 = v20;
          }
          v21[v7] = v6;
          v7 = ++v20;
        }
      }
      else
      {
        v6 += 8;
      }
    }
    while (v8 > v6);
  }
  v13 = v6;
  while (v13 < a2)
  {
    v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 == 10)
    {
      if (v7 >= 0x100)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v20;
      }
      LODWORD(v15) = v6 + 1;
    }
    else
    {
      if (v14 != 13)
      {
        LODWORD(v15) = v6 + 1;
        goto LABEL_15;
      }
      v15 = v6 + 1;
      if (v15 < a2)
      {
        if (*(_BYTE *)(a1 + v15) == 10)
          v19 = v6 + 1;
        else
          v19 = v6;
        LODWORD(v15) = v19 + 1;
      }
      if (v7 >= 0x100)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v20;
      }
    }
    v21[v7] = v15;
    v7 = ++v20;
LABEL_15:
    v13 = v15;
    v6 = v15;
  }
  v16 = (_DWORD *)sub_22E3CD3D4(a3, 4 * v7 + 4, 2);
  v17 = v16;
  *v16 = v7;
  if (v7)
    memmove(v16 + 1, v21, 4 * v7);
  return v17;
}

uint64_t sub_22F1E33FC(uint64_t a1, unsigned int a2, int a3, _BYTE *a4)
{
  unsigned int v5;
  unint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29[4];
  unsigned __int8 v30;

  v5 = a2;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 320) == a2)
    {
      v8 = *(_QWORD *)(a1 + 328);
LABEL_14:
      v12 = *(unsigned int **)(v8 + 40);
      if (v12)
      {
        if (a4)
          *a4 = 0;
LABEL_21:
        v16 = *v12;
        v14 = (char *)(v12 + 1);
        v15 = v16;
        v17 = (unint64_t)&v14[4 * v16];
        v18 = a3 + 1;
        if (*(_DWORD *)(a1 + 320) != v5)
        {
LABEL_25:
          v20 = v14;
          goto LABEL_26;
        }
        v19 = *(unsigned int *)(a1 + 340);
        if (v18 < *(_DWORD *)(a1 + 336))
        {
          if (v19 < v15)
            v17 = (unint64_t)&v14[4 * v19 + 4];
          goto LABEL_25;
        }
        v26 = (unsigned int *)&v14[4 * v19];
        v20 = (char *)(v26 - 1);
        v27 = v26 + 4;
        if ((unint64_t)(v26 + 4) < v17)
        {
          if (*v27 > v18)
          {
LABEL_35:
            v17 = (unint64_t)v27;
            goto LABEL_27;
          }
          v27 = v26 + 9;
          if ((unint64_t)(v26 + 9) < v17)
          {
            if (*v27 > v18)
              goto LABEL_35;
            v28 = v26 + 19;
            if ((unint64_t)v28 < v17 && *v28 > v18)
              v17 = (unint64_t)v28;
          }
        }
LABEL_26:
        if ((char *)v17 == v20)
        {
LABEL_32:
          *(_DWORD *)(a1 + 320) = v5;
          result = (unint64_t)(v20 - v14) >> 2;
          *(_QWORD *)(a1 + 328) = v8;
          *(_DWORD *)(a1 + 336) = v18;
          *(_DWORD *)(a1 + 340) = result;
          return result;
        }
LABEL_27:
        v21 = (uint64_t)(v17 - (_QWORD)v20) >> 2;
        do
        {
          v22 = v21 >> 1;
          v23 = (unsigned int *)&v20[4 * (v21 >> 1)];
          v25 = *v23;
          v24 = (char *)(v23 + 1);
          v21 += ~(v21 >> 1);
          if (v25 < v18)
            v20 = v24;
          else
            v21 = v22;
        }
        while (v21);
        goto LABEL_32;
      }
      sub_22F1E005C(v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0, v29);
      v13 = v30;
      if (a4)
        *a4 = v30 ^ 1;
      if (v13)
      {
        v12 = sub_22F1E3188(v29[0], v29[1], a1 + 24);
        *(_QWORD *)(v8 + 40) = v12;
        goto LABEL_21;
      }
      return 1;
    }
    LOBYTE(v29[0]) = 0;
    if (a2 + 1 < 2)
    {
LABEL_43:
      if (a4)
        *a4 = 1;
      return 1;
    }
    if ((a2 & 0x80000000) != 0)
    {
      a2 = -2 - a2;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v5) >> 6)) >> (-2 - v5)) & 1) == 0)
      {
        v11 = sub_22F1E1134(a1, a2, v29);
        if (LOBYTE(v29[0]))
          goto LABEL_43;
        goto LABEL_12;
      }
      v10 = (_QWORD *)(a1 + 200);
    }
    else
    {
      v10 = (_QWORD *)(a1 + 184);
    }
    v11 = *v10 + 24 * a2;
LABEL_12:
    if ((*(_DWORD *)v11 & 0x80000000) == 0)
    {
      v8 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
    goto LABEL_43;
  }
  result = 1;
  if (a4)
    *a4 = 1;
  return result;
}

_DWORD *sub_22F1E361C(_QWORD *a1, int a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  _DWORD *result;
  _DWORD *v7;
  char *v8;

  v3 = sub_22E74B2B0((uint64_t)a1, a2);
  v4 = HIDWORD(v3);
  v5 = v3;
  result = sub_22E49F3DC(a1, v3);
  if (result)
  {
    v7 = result;
    if ((result[3] & 0x80000000) != 0 && (v8 = sub_22F1E096C(a1[39], v5, v4)) != 0)
      return (_DWORD *)*((unsigned int *)v8 + 3);
    else
      return (_DWORD *)(v7[4] & 7);
  }
  return result;
}

const char *sub_22F1E3690(_QWORD *a1, int a2, BOOL *a3)
{
  unsigned int v5;
  int v6;
  _BYTE v8[16];
  uint64_t v9;
  unsigned __int8 v10;

  if (a3)
    *a3 = a2 == 0;
  if (!a2)
    return "<invalid loc>";
  v5 = sub_22F1E50A4((uint64_t)a1, a2 & 0x7FFFFFFF);
  sub_22E490D40(a1, v5, 0, v8);
  v6 = v10;
  if (a3)
    *a3 = v10 ^ 1;
  if (v6)
    return (const char *)v9;
  else
    return "<invalid buffer>";
}

_DWORD *sub_22F1E3734(_QWORD *a1, int a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  _DWORD *result;
  _DWORD *v7;
  char *v8;

  if (!a2)
    return 0;
  v3 = sub_22E74B2B0((uint64_t)a1, a2);
  v4 = HIDWORD(v3);
  v5 = v3;
  result = sub_22E49F3DC(a1, v3);
  if (result)
  {
    v7 = result;
    if ((result[3] & 0x80000000) != 0 && (v8 = sub_22F1E096C(a1[39], v5, v4)) != 0 && *((_DWORD *)v8 + 4))
      return 0;
    else
      return (_DWORD *)(v7[2] == 0);
  }
  return result;
}

uint64_t sub_22F1E37C0(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;

  result = 0;
  v13 = 0;
  v5 = a2 + 1;
  if (a2 + 1 >= 2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v9 = -2 - a2;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - a2) >> 6)) >> (-2 - a2)) & 1) != 0)
      {
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v9);
      }
      else
      {
        v12 = sub_22F1E1134(a1, v9, &v13);
        if (v13)
          return 0;
        v7 = (_DWORD *)v12;
      }
      if (v5 == -1)
      {
        v8 = 0x80000000;
        return v8 + (~*v7 | 0x80000000);
      }
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 184);
      v7 = (_DWORD *)(v6 + 24 * a2);
      if (v5 == *(_DWORD *)(a1 + 192))
      {
        v8 = *(_DWORD *)(a1 + 216);
        return v8 + (~*v7 | 0x80000000);
      }
      if ((v5 & 0x80000000) == 0)
      {
        v11 = (_DWORD *)(v6 + 24 * v5);
LABEL_12:
        v8 = *v11 & 0x7FFFFFFF;
        return v8 + (~*v7 | 0x80000000);
      }
    }
    v10 = -3 - a2;
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - a2) >> 6)) >> (-3 - a2)) & 1) != 0)
      v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v10);
    else
      v11 = (_DWORD *)sub_22F1E1134(a1, v10, 0);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_22F1E38E8(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  _QWORD *v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;

  v4 = 0;
  if (!a2)
    return v4;
  v22 = 0;
  if (a2 + 1 < 2)
    return v4;
  if ((a2 & 0x80000000) == 0)
  {
    v8 = a1 + 23;
LABEL_7:
    v9 = (unsigned int *)(*v8 + 24 * a2);
    goto LABEL_8;
  }
  a2 = -2 - a2;
  if (((*(_QWORD *)(a1[28] + 8 * (a2 >> 6)) >> a2) & 1) != 0)
  {
    v8 = a1 + 25;
    goto LABEL_7;
  }
  v9 = (unsigned int *)sub_22F1E1134((uint64_t)a1, a2, &v22);
  if (v22)
    return 0;
LABEL_8:
  v4 = *v9;
  if ((v4 & 0x80000000) != 0)
    return 0;
  if (a3 == 1 && a4 == 1)
    return v4;
  v10 = *((_QWORD *)v9 + 2) & 0xFFFFFFFFFFFFFFF8;
  sub_22F1E005C(v10, a1[1], a1[2], 0, &v19);
  if (!v21)
    return 0;
  v11 = *(unsigned int **)(v10 + 40);
  if (!v11)
  {
    v11 = sub_22F1E3188(v19, v20, (uint64_t)(a1 + 3));
    *(_QWORD *)(v10 + 40) = v11;
  }
  if (*v11 >= a3)
  {
    v13 = v11[a3 - 1 + 1];
    if ((_DWORD)v13 == (_DWORD)v20)
    {
      return (v13 + v4);
    }
    else
    {
      LODWORD(v14) = v20 + ~(_DWORD)v13;
      if (v14 >= a4 - 1)
        v14 = (a4 - 1);
      else
        v14 = v14;
      if ((_DWORD)v14)
      {
        v15 = 0;
        while (1)
        {
          v16 = *(unsigned __int8 *)(v19 + v13 + v15);
          if (v16 == 10 || v16 == 13)
            break;
          if (v14 == ++v15)
            return (v13 + v4 + v14);
        }
        LODWORD(v14) = v15;
      }
      return (v13 + v4 + v14);
    }
  }
  else
  {
    v12 = v20 - 1;
    if (!(_DWORD)v20)
      v12 = 0;
    return (v12 + v4);
  }
}

uint64_t sub_22F1E3A78(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  int *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  unsigned int v13;

  v13 = a2;
  if (!a2)
    return 0;
  sub_22F1E3B58(a1 + 360, &v13, (uint64_t)&v11);
  v3 = v11;
  if (v12)
  {
    v10 = 0;
    v4 = v13;
    if (v13 + 1 >= 2)
    {
      if ((v13 & 0x80000000) == 0)
      {
        v5 = (_QWORD *)(a1 + 184);
LABEL_9:
        v7 = (int *)(*v5 + 24 * v4);
LABEL_10:
        v8 = 2;
        if (*v7 < 0)
          v8 = 3;
        v9 = v7[v8];
        if (v9)
          *(_QWORD *)(v3 + 4) = sub_22E677168(a1, v9);
        return *(_QWORD *)(v3 + 4);
      }
      v4 = -2 - v13;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (v4 >> 6)) >> v4) & 1) != 0)
      {
        v5 = (_QWORD *)(a1 + 200);
        goto LABEL_9;
      }
      v7 = (int *)sub_22F1E1134(a1, v4, &v10);
      if (!v10)
        goto LABEL_10;
    }
  }
  return *(_QWORD *)(v3 + 4);
}

_DWORD *sub_22F1E3B58@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *result;
  int v10;
  _DWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  char v15;
  _DWORD *v16;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v16 = 0;
LABEL_15:
    result = sub_22F1E56DC(a1, (uint64_t)a2, a2, v16);
    *result = *a2;
    result[1] = 0;
    result[2] = 0;
    v7 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 16);
    v15 = 1;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)a1;
  v8 = *a2 & (v6 - 1);
  result = (_DWORD *)(*(_QWORD *)a1 + 12 * v8);
  v10 = *result;
  if (*a2 != *result)
  {
    v11 = 0;
    v12 = 1;
    while (v10)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -1;
      if (v13)
        v11 = result;
      v14 = v8 + v12++;
      v8 = v14 & (v6 - 1);
      result = (_DWORD *)(v7 + 12 * v8);
      v10 = *result;
      if (*a2 == *result)
        goto LABEL_11;
    }
    if (v11)
      v16 = v11;
    else
      v16 = result;
    goto LABEL_15;
  }
LABEL_11:
  v15 = 0;
LABEL_16:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7 + 12 * v6;
  *(_BYTE *)(a3 + 16) = v15;
  return result;
}

BOOL sub_22F1E3C34(_QWORD *a1, int a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v18;
  int v19;
  _BOOL4 v20;
  _BOOL4 v22;
  _BOOL4 v24;
  _BOOL4 v27;
  _QWORD *v28;
  _QWORD *v29;
  int v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t i;
  unsigned int j;
  unint64_t v37;
  llvm **v38;
  char v39;
  llvm *v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  llvm **v46;
  int v47;
  llvm **v48;
  unsigned int v49;
  _BOOL4 v50;
  unint64_t v51;
  _BYTE v52[24];
  uint64_t v53;
  llvm *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return 0;
  v6 = sub_22E677168((uint64_t)a1, a2);
  v51 = v6;
  v7 = sub_22E677168((uint64_t)a1, a3);
  v8 = v7;
  if ((_DWORD)v6 && (_DWORD)v7)
  {
    v9 = HIDWORD(v7);
    v10 = HIDWORD(v6);
    if ((_DWORD)v6 == (_DWORD)v7)
    {
      if (HIDWORD(v6) >= HIDWORD(v7))
        v11 = 1;
      else
        v11 = 257;
      LODWORD(v6) = v7;
    }
    else
    {
      v28 = sub_22F423D24((uint64_t)a1, v6, v7);
      v29 = v28;
      if (*(_DWORD *)v28 == (_DWORD)v6 && *((_DWORD *)v28 + 1) == v8)
      {
        v31 = *((_DWORD *)v28 + 3);
        v32 = *((_DWORD *)v28 + 4);
        if (v31 == (_DWORD)v6)
          v32 = HIDWORD(v6);
        if (v31 == v8)
          v33 = v9;
        else
          v33 = *((_DWORD *)v28 + 5);
        v14 = v32 == v33;
        v34 = v32 < v33;
        if (v14)
          v34 = *((_BYTE *)v28 + 8) != 0;
        if (v34)
          v11 = 257;
        else
          v11 = 1;
      }
      else
      {
        *(_DWORD *)v28 = v6;
        *((_DWORD *)v28 + 1) = v8;
        *((_BYTE *)v28 + 8) = (int)v6 < v8;
        v53 = 1;
        for (i = 8; i != 136; i += 8)
          *(_DWORD *)((char *)&v53 + i) = 0;
        sub_22F4242C8((uint64_t)v52, (uint64_t)&v53, (int *)&v51, (_DWORD *)&v51 + 1);
        for (j = v6; ; j = v6)
        {
          v37 = sub_22F1E3A78((uint64_t)a1, j);
          if (!(_DWORD)v37)
            break;
          LODWORD(v6) = v37;
          v10 = HIDWORD(v37);
          v51 = v37;
          sub_22F4242C8((uint64_t)v52, (uint64_t)&v53, (int *)&v51, (_DWORD *)&v51 + 1);
          if ((_DWORD)v6 == v8)
          {
            LODWORD(v6) = v8;
            break;
          }
        }
        v38 = (llvm **)sub_22F423DB0((uint64_t)&v53, v8);
        v39 = v53;
        v40 = v54;
        if ((v53 & 1) != 0)
          v41 = (char *)&v54;
        else
          v41 = (char *)v54;
        v42 = v55;
        if ((v53 & 1) != 0)
          v43 = 16;
        else
          v43 = v55;
        if (&v41[8 * v43] == (char *)v38)
        {
          v44 = sub_22F1E3A78((uint64_t)a1, v8);
          if ((_DWORD)v44)
          {
            while (1)
            {
              v45 = v44;
              v8 = v44;
              v38 = (llvm **)sub_22F423DB0((uint64_t)&v53, v44);
              v39 = v53;
              v40 = v54;
              v46 = (v53 & 1) != 0 ? &v54 : (llvm **)v54;
              v42 = v55;
              v47 = (v53 & 1) != 0 ? 16 : v55;
              if (&v46[v47] != v38)
                break;
              v44 = sub_22F1E3A78((uint64_t)a1, v8);
              if (!(_DWORD)v44)
              {
                v9 = HIDWORD(v45);
                goto LABEL_112;
              }
            }
            v9 = HIDWORD(v45);
          }
          else
          {
LABEL_112:
            v39 = v53;
            v40 = v54;
            v42 = v55;
          }
        }
        if ((v39 & 1) != 0)
          v48 = &v54;
        else
          v48 = (llvm **)v40;
        if ((v39 & 1) != 0)
          v49 = 16;
        else
          v49 = v42;
        if (&v48[v49] != v38)
        {
          LODWORD(v6) = *(_DWORD *)v38;
          LODWORD(v10) = *((_DWORD *)v38 + 1);
        }
        if ((_DWORD)v6 == v8)
        {
          *((_DWORD *)v29 + 3) = v8;
          *((_DWORD *)v29 + 4) = v10;
          *((_DWORD *)v29 + 5) = v9;
          v50 = *((_BYTE *)v29 + 8) != 0;
          if ((_DWORD)v10 != (_DWORD)v9)
            v50 = v10 < v9;
          if (v50)
            v11 = 257;
          else
            v11 = 1;
        }
        else
        {
          v11 = 0;
          *((_BYTE *)v29 + 8) = 0;
          *v29 = 0;
        }
        if ((v39 & 1) == 0)
          llvm::deallocate_buffer(v40, (void *)(8 * v42));
      }
    }
    if ((v11 & 1) != 0)
      return v11 > 0xFF;
    sub_22E72C63C(a1, v6, 0, (llvm::MemoryBufferRef *)&v53);
    v12 = v55;
    v13 = v56;
    sub_22E72C63C(a1, v8, 0, (llvm::MemoryBufferRef *)&v53);
    if (v13 == 10)
    {
      v14 = *(_QWORD *)v12 == 0x692D746C6975623CLL && *(_WORD *)(v12 + 8) == 15982;
      v15 = v14;
    }
    else
    {
      v15 = 0;
    }
    v18 = v56 == 10 && *(_QWORD *)v55 == 0x692D746C6975623CLL && *(_WORD *)(v55 + 8) == 15982;
    if (v15 || v18)
    {
      v19 = v15 ^ v18;
      v20 = (int)v6 < v8;
    }
    else
    {
      v22 = v13 == 12 && *(_QWORD *)v12 == 0x20656E696C6E693CLL && *(_DWORD *)(v12 + 8) == 1047360353;
      v24 = v56 == 12 && *(_QWORD *)v55 == 0x20656E696C6E693CLL && *(_DWORD *)(v55 + 8) == 1047360353;
      if (v22 || v24)
        return v24 && !v22;
      v15 = v13 == 15 && *(_QWORD *)v12 == 0x686374617263733CLL && *(_QWORD *)(v12 + 7) == 0x3E65636170732068;
      v27 = v56 == 15 && *(_QWORD *)v55 == 0x686374617263733CLL && *(_QWORD *)(v55 + 7) == 0x3E65636170732068;
      v19 = v15 ^ v27;
      v20 = v10 < v9;
    }
    if (v19)
      return v15;
    else
      return v20;
  }
  else
  {
    if ((_DWORD)v6)
      v16 = 1;
    else
      v16 = (_DWORD)v7 == 0;
    return !v16;
  }
}

llvm::raw_ostream *sub_22F1E40F4(uint64_t a1)
{
  llvm::raw_ostream *v2;
  void *v3;
  llvm::raw_ostream *v4;
  void *v5;
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  void *v9;
  llvm::raw_ostream *v10;
  void *v11;
  llvm::raw_ostream *v12;
  void *v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  llvm::raw_ostream *v29;
  void *v30;
  llvm::raw_ostream *v31;
  void *v32;
  llvm::raw_ostream *v33;
  void *v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  llvm::raw_ostream *result;
  uint64_t v40;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x1AuLL)
  {
    qmemcpy(v3, "\n*** Source Manager Stats:\n", 27);
    *((_QWORD *)v2 + 4) += 27;
  }
  else
  {
    v2 = (llvm::raw_ostream *)llvm::raw_ostream::write(v2, "\n*** Source Manager Stats:\n");
  }
  llvm::errs(v2);
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xEuLL)
  {
    qmemcpy(v5, " files mapped, ", 15);
    *((_QWORD *)v4 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v4, " files mapped, ");
  }
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x14uLL)
  {
    qmemcpy(v7, " mem buffers mapped.\n", 21);
    *((_QWORD *)v6 + 4) += 21;
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, " mem buffers mapped.\n");
  }
  llvm::errs(v6);
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0x1DuLL)
  {
    qmemcpy(v9, " local SLocEntry's allocated (", 30);
    *((_QWORD *)v8 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v8, " local SLocEntry's allocated (");
  }
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0x14uLL)
  {
    qmemcpy(v11, " bytes of capacity), ", 21);
    *((_QWORD *)v10 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v10, " bytes of capacity), ");
  }
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0x1DuLL)
  {
    qmemcpy(v13, "B of Sloc address space used.\n", 30);
    *((_QWORD *)v12 + 4) += 30;
  }
  else
  {
    v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, "B of Sloc address space used.\n");
  }
  llvm::errs(v12);
  v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v15 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0x1EuLL)
  {
    qmemcpy(v15, " loaded SLocEntries allocated, ", 31);
    *((_QWORD *)v14 + 4) += 31;
  }
  else
  {
    llvm::raw_ostream::write(v14, " loaded SLocEntries allocated, ");
  }
  v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v17 = (void *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 0x1DuLL)
  {
    qmemcpy(v17, "B of Sloc address space used.\n", 30);
    *((_QWORD *)v16 + 4) += 30;
  }
  else
  {
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v16, "B of Sloc address space used.\n");
  }
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(unsigned int *)(a1 + 136);
  v20 = (_QWORD *)(v18 + 16 * v19);
  if (*(_DWORD *)(a1 + 128))
  {
    if ((_DWORD)v19)
    {
      v21 = 16 * v19;
      v22 = *(_QWORD **)(a1 + 120);
      while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v22 += 2;
        v21 -= 16;
        if (!v21)
          goto LABEL_22;
      }
    }
    else
    {
      v22 = *(_QWORD **)(a1 + 120);
    }
  }
  else
  {
LABEL_22:
    v22 = (_QWORD *)(v18 + 16 * v19);
  }
  v23 = (_QWORD *)(v18 + 16 * v19);
  if (v22 != v23)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = (uint64_t *)v22[1];
      if (v26[5])
        ++v24;
      v27 = *v26;
      if (v27)
        LODWORD(v27) = *(_DWORD *)(v27 + 16) - *(_DWORD *)(v27 + 8);
      v28 = v22 + 2;
      v22 = v20;
      if (v28 != v20)
      {
        v22 = v28;
        while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v22 += 2;
          if (v22 == v20)
          {
            v22 = v20;
            break;
          }
        }
      }
      v25 += v27;
    }
    while (v22 != v23);
  }
  llvm::errs(v16);
  v29 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v30 = (void *)*((_QWORD *)v29 + 4);
  if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 0x17uLL)
  {
    qmemcpy(v30, " bytes of files mapped, ", 24);
    *((_QWORD *)v29 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(v29, " bytes of files mapped, ");
  }
  v31 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v32 = (void *)*((_QWORD *)v31 + 4);
  if (*((_QWORD *)v31 + 3) - (_QWORD)v32 > 0x1EuLL)
  {
    qmemcpy(v32, " files with line #'s computed, ", 31);
    *((_QWORD *)v31 + 4) += 31;
  }
  else
  {
    llvm::raw_ostream::write(v31, " files with line #'s computed, ");
  }
  v33 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v34 = (void *)*((_QWORD *)v33 + 4);
  if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 0x20uLL)
  {
    qmemcpy(v34, " files with macro args computed.\n", 33);
    *((_QWORD *)v33 + 4) += 33;
  }
  else
  {
    v33 = (llvm::raw_ostream *)llvm::raw_ostream::write(v33, " files with macro args computed.\n");
  }
  v35 = (llvm::raw_ostream *)llvm::errs(v33);
  v36 = (void *)*((_QWORD *)v35 + 4);
  if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0xDuLL)
  {
    qmemcpy(v36, "FileID scans: ", 14);
    *((_QWORD *)v35 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v35, "FileID scans: ");
  }
  v37 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v38 = *((_QWORD *)v37 + 4);
  if ((unint64_t)(*((_QWORD *)v37 + 3) - v38) > 8)
  {
    *(_BYTE *)(v38 + 8) = 32;
    *(_QWORD *)v38 = *(_QWORD *)" linear, ";
    *((_QWORD *)v37 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v37, " linear, ");
  }
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v40 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v40) <= 8)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " binary.\n");
  *(_BYTE *)(v40 + 8) = 10;
  *(_QWORD *)v40 = *(_QWORD *)" binary.\n";
  *((_QWORD *)result + 4) += 9;
  return result;
}

llvm::raw_ostream *sub_22F1E4670(uint64_t a1)
{
  llvm::raw_ostream *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;

  result = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v17 = result;
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 24;
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 184);
      v7 = v6 + v5 - 24;
      if ((_DWORD)v3 - 1 == v4)
        break;
      v8 = v4 + 1;
      result = sub_22F1E47AC(&v17, v4, v7, *(_DWORD *)(v6 + v5) & 0x7FFFFFFF | 0x100000000);
      v5 += 24;
      v4 = v8;
      if (v3 == v8)
        goto LABEL_7;
    }
    result = sub_22F1E47AC(&v17, v4, v7, *(unsigned int *)(a1 + 216) | 0x100000000);
  }
LABEL_7:
  v9 = *(_DWORD *)(a1 + 208);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 4294967294;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * (v11 >> 6)) >> v11) & 1) != 0)
      {
        v16 = 24 * v10;
        result = sub_22F1E47AC(&v17, v15, *(_QWORD *)(a1 + 200) + 24 * v10, v14 & 0xFF00000000 | v13 | v12);
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + v16);
        v12 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + v16) & 0x7FFFFF00;
        v9 = *(_DWORD *)(a1 + 208);
        v14 = 0x100000000;
      }
      else
      {
        v14 = 0;
        v13 = 0;
        v12 = 0;
      }
      v10 = v11 + 1;
      v15 = (v15 - 1);
      v11 = v10;
    }
    while ((_DWORD)v10 != v9);
  }
  return result;
}

llvm::raw_ostream *sub_22F1E47AC(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  void *v12;
  const char *v13;
  size_t v14;
  size_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  const char *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _WORD *v27;
  llvm::raw_ostream *v28;
  _OWORD *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  size_t v40;
  llvm::raw_ostream *result;
  _QWORD *v42;
  llvm::raw_ostream *v43;
  _OWORD *v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  llvm::raw_ostream *v47;
  _QWORD *v48;
  void *v49;
  _BOOL4 v50;
  _BOOL4 v51;
  const char *v52;
  size_t v53;
  _QWORD *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  _WORD *v57;
  const char *v58;
  _BYTE *v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  size_t v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t v74;

  v7 = *a1;
  v8 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 0x11)
  {
    *(_WORD *)(v8 + 16) = 8260;
    *(_OWORD *)v8 = *(_OWORD *)"SLocEntry <FileID ";
    *((_QWORD *)v7 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v7, "SLocEntry <FileID ");
  }
  v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v10 = v9;
  v11 = (_WORD *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8254;
    v12 = (void *)(*((_QWORD *)v9 + 4) + 2);
    *((_QWORD *)v10 + 4) = v12;
  }
  else
  {
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, "> ");
    v12 = (void *)*((_QWORD *)v10 + 4);
  }
  if (*(int *)a3 < 0)
    v13 = "expansion";
  else
    v13 = "file";
  if (*(int *)a3 < 0)
    v14 = 9;
  else
    v14 = 4;
  if (v14 <= *((_QWORD *)v10 + 3) - (_QWORD)v12)
  {
    memcpy(v12, v13, v14);
    v15 = *((_QWORD *)v10 + 4) + v14;
    *((_QWORD *)v10 + 4) = v15;
  }
  else
  {
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, v13);
    v15 = *((_QWORD *)v10 + 4);
  }
  if (*((_QWORD *)v10 + 3) - v15 > 0x10)
  {
    *(_BYTE *)(v15 + 16) = 32;
    *(_OWORD *)v15 = *(_OWORD *)" <SourceLocation ";
    *((_QWORD *)v10 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v10, " <SourceLocation ");
  }
  v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":");
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = *a1;
  if ((a4 & 0xFF00000000) != 0)
  {
    v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v19 = (_WORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 <= 1uLL)
    {
      v20 = ">\n";
LABEL_22:
      llvm::raw_ostream::write(v18, v20);
      goto LABEL_23;
    }
    *v19 = 2622;
    v74 = *((_QWORD *)v18 + 4) + 2;
  }
  else
  {
    v21 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v21) <= 5)
    {
      v20 = "????>\n";
      goto LABEL_22;
    }
    *(_WORD *)(v21 + 4) = 2622;
    *(_DWORD *)v21 = 1061109567;
    v74 = *((_QWORD *)v18 + 4) + 6;
  }
  *((_QWORD *)v18 + 4) = v74;
LABEL_23:
  if ((*(_DWORD *)a3 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFF) != 0)
    {
      v22 = *a1;
      v23 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v23) > 0x10)
      {
        *(_BYTE *)(v23 + 16) = 32;
        *(_OWORD *)v23 = *(_OWORD *)"  covers <FileID ";
        *((_QWORD *)v22 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v22, "  covers <FileID ");
      }
      v24 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v25 = (_BYTE *)*((_QWORD *)v24 + 4);
      if (*((_BYTE **)v24 + 3) == v25)
      {
        llvm::raw_ostream::write(v24, ":");
      }
      else
      {
        *v25 = 58;
        ++*((_QWORD *)v24 + 4);
      }
      v26 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v27 = (_WORD *)*((_QWORD *)v26 + 4);
      if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 1uLL)
      {
        *v27 = 2622;
        *((_QWORD *)v26 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v26, ">\n");
      }
    }
    if (*(_DWORD *)(a3 + 8))
    {
      v28 = *a1;
      v29 = (_OWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v29 > 0xFuLL)
      {
        *v29 = *(_OWORD *)"  included from ";
        *((_QWORD *)v28 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v28, "  included from ");
      }
      v30 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v31 = (_BYTE *)*((_QWORD *)v30 + 4);
      if (*((_BYTE **)v30 + 3) == v31)
      {
        llvm::raw_ostream::write(v30, "\n");
      }
      else
      {
        *v31 = 10;
        ++*((_QWORD *)v30 + 4);
      }
    }
    v32 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF8;
    v33 = *a1;
    v34 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v34) > 5)
    {
      *(_WORD *)(v34 + 4) = 8306;
      *(_DWORD *)v34 = 1868963872;
      v33[4] += 6;
    }
    else
    {
      v33 = (_QWORD *)llvm::raw_ostream::write(*a1, "  for ");
    }
    v35 = *(_QWORD *)(v32 + 8);
    if (v35)
    {
      do
      {
        v36 = (_QWORD *)v35;
        v37 = *(_QWORD *)(v35 + 8);
        if ((v37 & 2) == 0)
          break;
        v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v35);
      v40 = *v36;
      v38 = (const char *)(v36 + 4);
      v39 = v40;
      v42 = v33 + 4;
      result = (llvm::raw_ostream *)v33[4];
      if (v40 <= v33[3] - (_QWORD)result)
      {
        if (!v39)
        {
LABEL_67:
          v59 = (_BYTE *)v33[4];
          if ((_BYTE *)v33[3] == v59)
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v33, "\n");
          }
          else
          {
            *v59 = 10;
            ++v33[4];
          }
          if ((*(_BYTE *)(v32 + 48) & 1) != 0)
          {
            result = *a1;
            v60 = (void *)*((_QWORD *)*a1 + 4);
            if (*((_QWORD *)*a1 + 3) - (_QWORD)v60 > 0x15uLL)
            {
              qmemcpy(v60, "  contents overridden\n", 22);
              *((_QWORD *)result + 4) += 22;
            }
            else
            {
              result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "  contents overridden\n");
            }
          }
          v61 = *(_QWORD *)(v32 + 8);
          if (v61)
          {
            do
            {
              v62 = *(_QWORD *)(v61 + 8);
              v61 = v62 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v62 & 2) != 0 && v61);
          }
          if (v61 == *(_QWORD *)(v32 + 16))
            return result;
          v63 = *a1;
          v64 = (_OWORD *)v63[4];
          if (v63[3] - (_QWORD)v64 > 0xFuLL)
          {
            *v64 = *(_OWORD *)"  contents from ";
            v63[4] += 16;
          }
          else
          {
            v63 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v63, "  contents from ");
          }
          v65 = *(_QWORD *)(v32 + 16);
          if (v65)
          {
            v66 = *(_QWORD *)(v65 + 88);
            do
            {
              v67 = (_QWORD *)v66;
              v68 = *(_QWORD *)(v66 + 8);
              if ((v68 & 2) == 0)
                break;
              v66 = v68 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while (v66);
            v71 = *v67;
            v69 = (const char *)(v67 + 4);
            v70 = v71;
            v72 = v63 + 4;
            result = (llvm::raw_ostream *)v63[4];
            if (v71 <= v63[3] - (_QWORD)result)
            {
              if (!v70)
                goto LABEL_88;
              goto LABEL_87;
            }
          }
          else
          {
            v72 = v63 + 4;
            result = (llvm::raw_ostream *)v63[4];
            v69 = "<none>";
            v70 = 6;
            if (v63[3] - (_QWORD)result > 5uLL)
            {
LABEL_87:
              result = (llvm::raw_ostream *)memcpy(result, v69, v70);
              *v72 += v70;
              goto LABEL_88;
            }
          }
          result = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v63, v69);
          v63 = result;
LABEL_88:
          v73 = (_BYTE *)v63[4];
          if ((_BYTE *)v63[3] == v73)
          {
            v58 = "\n";
            result = (llvm::raw_ostream *)v63;
            return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v58);
          }
          *v73 = 10;
          ++v63[4];
          return result;
        }
LABEL_66:
        result = (llvm::raw_ostream *)memcpy(result, v38, v39);
        *v42 += v39;
        goto LABEL_67;
      }
    }
    else
    {
      v42 = v33 + 4;
      result = (llvm::raw_ostream *)v33[4];
      v38 = "<none>";
      v39 = 6;
      if (v33[3] - (_QWORD)result > 5uLL)
        goto LABEL_66;
    }
    result = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v33, v38);
    v33 = result;
    goto LABEL_67;
  }
  v43 = *a1;
  v44 = (_OWORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v44 > 0xFuLL)
  {
    *v44 = *(_OWORD *)"  spelling from ";
    *((_QWORD *)v43 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v43, "  spelling from ");
  }
  v45 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v46 = (_BYTE *)*((_QWORD *)v45 + 4);
  if (*((_BYTE **)v45 + 3) == v46)
  {
    llvm::raw_ostream::write(v45, "\n");
  }
  else
  {
    *v46 = 10;
    ++*((_QWORD *)v45 + 4);
  }
  v47 = *a1;
  v48 = (_QWORD *)*((_QWORD *)v47 + 4);
  if (*((_QWORD *)v47 + 3) - (_QWORD)v48 > 7uLL)
  {
    *v48 = 0x206F7263616D2020;
    v49 = (void *)(*((_QWORD *)v47 + 4) + 8);
    *((_QWORD *)v47 + 4) = v49;
  }
  else
  {
    v47 = (llvm::raw_ostream *)llvm::raw_ostream::write(v47, "  macro ");
    v49 = (void *)*((_QWORD *)v47 + 4);
  }
  v50 = *(_DWORD *)(a3 + 12) != 0;
  v51 = *(_DWORD *)(a3 + 16) == 0;
  if (v50 && v51)
    v52 = "arg";
  else
    v52 = "body";
  if (v50 && v51)
    v53 = 3;
  else
    v53 = 4;
  if (v53 <= *((_QWORD *)v47 + 3) - (_QWORD)v49)
  {
    memcpy(v49, v52, v53);
    v54 = (_QWORD *)(*((_QWORD *)v47 + 4) + v53);
    *((_QWORD *)v47 + 4) = v54;
  }
  else
  {
    v47 = (llvm::raw_ostream *)llvm::raw_ostream::write(v47, v52);
    v54 = (_QWORD *)*((_QWORD *)v47 + 4);
  }
  if (*((_QWORD *)v47 + 3) - (_QWORD)v54 > 7uLL)
  {
    *v54 = 0x3C2065676E617220;
    *((_QWORD *)v47 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v47, " range <");
  }
  v55 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v56 = (_BYTE *)*((_QWORD *)v55 + 4);
  if (*((_BYTE **)v55 + 3) == v56)
  {
    llvm::raw_ostream::write(v55, ":");
  }
  else
  {
    *v56 = 58;
    ++*((_QWORD *)v55 + 4);
  }
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v57 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v57 <= 1uLL)
  {
    v58 = ">\n";
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v58);
  }
  *v57 = 2622;
  *((_QWORD *)result + 4) += 2;
  return result;
}

void sub_22F1E505C(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_22F1E505C(*a1);
    sub_22F1E505C(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_22F1E50A4(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = *(_DWORD *)(a1 + 304);
  v5 = v4 + 1;
  if (v4 + 1 > 1)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v7 = -2 - v4;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v6 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v7);
      else
        v6 = (_DWORD *)sub_22F1E1134(a1, v7, 0);
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v4);
    }
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 184);
  }
  if ((*v6 & 0x7FFFFFFFu) <= a2)
  {
    if (v4 == -2)
      return *(unsigned int *)(a1 + 304);
    if (v5 == *(_DWORD *)(a1 + 192))
    {
      v9 = *(_DWORD *)(a1 + 216);
    }
    else
    {
      if ((v5 & 0x80000000) != 0)
      {
        v11 = -3 - v4;
        v10 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v4) >> 6)) >> (-3 - v4)) & 1) != 0
                       ? *(_QWORD *)(a1 + 200) + 24 * v11
                       : sub_22F1E1134(a1, v11, 0));
      }
      else
      {
        v10 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v5);
      }
      v9 = *v10 & 0x7FFFFFFF;
    }
    if (v9 > a2)
      return *(unsigned int *)(a1 + 304);
  }
  if (!a2)
    return 0;
  if (*(_DWORD *)(a1 + 216) <= a2)
    return sub_22F1E202C(a1, a2);
  return sub_22F1E1F08(a1, a2);
}

uint64_t **sub_22F1E51FC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = **a4;
    *v9 = 0;
    v9[1] = 0;
    v9[6] = 0;
    v9[7] = 0;
    v9[5] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_22E49FD00(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

char *sub_22F1E52E4(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 2) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 2);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 2) >= 0x666666666666666)
    v8 = 0xCCCCCCCCCCCCCCCLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xCCCCCCCCCCCCCCCLL)
      sub_22E3B3F8C();
    v9 = (char *)operator new(20 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[20 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  v11 = v10 + 20;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 20);
      *((_DWORD *)v10 - 1) = *((_DWORD *)v2 - 1);
      *(_OWORD *)(v10 - 20) = v12;
      v10 -= 20;
      v2 -= 20;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[20 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

_QWORD *sub_22F1E53FC(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v11;
    if (v12 > 0xCCCCCCCCCCCCCCCLL)
LABEL_23:
      abort();
    v13 = 5 * v12;
    result = operator new(20 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 2) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_22F1E556C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1E561C(a1, v6);
  v8 = 0;
  sub_22F25AFD8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F1E561C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E66BE04(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_DWORD *sub_22F1E56DC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_22F1E5858(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = *a3 & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 12 * v19);
      v20 = *a4;
      if (*a3 != *a4)
      {
        v21 = 0;
        v22 = 1;
        while (v20)
        {
          if (v21)
            v23 = 0;
          else
            v23 = v20 == -1;
          if (v23)
            v21 = a4;
          v24 = v19 + v22++;
          v19 = v24 & v18;
          a4 = (_DWORD *)(*(_QWORD *)a1 + 12 * v19);
          v20 = *a4;
          if (*a3 == *a4)
            goto LABEL_3;
        }
        if (v21)
          a4 = v21;
      }
      goto LABEL_3;
    }
LABEL_27:
    a4 = 0;
    goto LABEL_3;
  }
  sub_22F1E5858(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_27;
  v10 = v9 - 1;
  v11 = *a3 & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 12 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -1;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 12 * v11);
      v12 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
    }
    if (v13)
      a4 = v13;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_22F1E5858(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 12 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F1E5920(a1, v4, &v4[3 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(12 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = 0;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F1E5920(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD **)result;
    v5 = 12 * v3;
    do
    {
      *v4 = 0;
      v4 += 3;
      v5 -= 12;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    v6 = *a2;
    if ((*a2 + 1) >= 2)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & v6;
      v9 = *(_QWORD *)result + 12 * (v7 & v6);
      v10 = *(_DWORD *)v9;
      if (v6 != *(_DWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -1;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 12 * (v14 & v7);
          v10 = *(_DWORD *)v9;
          if (v6 == *(_DWORD *)v9)
            goto LABEL_11;
        }
        if (v11)
          v9 = v11;
      }
LABEL_11:
      *(_DWORD *)v9 = v6;
      *(_QWORD *)(v9 + 4) = *(_QWORD *)(a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

_QWORD *sub_22F1E59EC(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F424200(a1, v4, &v4[8 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = 0;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F1E5AA8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_DWORD *)(a1 + v8 + 8);
      if ((v10 + 1) >= 2)
      {
        *v9 = v10;
        v9[1] = *(_DWORD *)(a1 + v8 + 12);
        v9 += 2;
      }
      v8 += 8;
    }
    while (v8 != 128);
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 4);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F4244E8(a1, v14, v9);
  }
  else
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 4);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F4244E8(a1, v6, &v6[2 * v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

uint64_t sub_22F1E5C24(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  char v6;
  int v7;
  void *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  char v34;
  int v35;
  const void *v36;
  size_t v37;
  size_t v38;
  __int128 *p_dst;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD **v44;
  unsigned __int8 *v45;
  __int128 v46;
  __int128 __p;
  unint64_t v48;
  char v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  __int128 __dst;
  unint64_t v55;

  v4 = *(_QWORD **)a2;
  if (v4)
    v5 = sub_22F1E5F4C((_QWORD **)a1, v4, *(_QWORD *)(a2 + 8));
  else
    v5 = 0;
  v6 = *(_BYTE *)(a2 + 79);
  v7 = v6;
  if (v6 >= 0)
    v8 = (void *)(a2 + 56);
  else
    v8 = *(void **)(a2 + 56);
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 48);
  if (v11 == 3)
  {
    v12 = *(_DWORD *)(a1 + 24);
  }
  else if (v11 == 1)
  {
    v12 = *(_DWORD *)(a1 + 20);
  }
  else if (v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v13 + 312) = v5;
  *(_DWORD *)(v13 + 316) = v12;
  v44 = (_QWORD **)a1;
  if (*(char *)(v13 + 311) < 0)
  {
    **(_BYTE **)(v13 + 288) = 0;
    *(_QWORD *)(v13 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 288) = 0;
    *(_BYTE *)(v13 + 311) = 0;
  }
  v45 = (unsigned __int8 *)(v13 + 320);
  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v46 + 1) = v13;
  LOWORD(__p) = 1;
  *(_BYTE *)(v13 + 320) = 0;
  *(_DWORD *)(v13 + 664) = 0;
  v14 = *(unsigned int *)(v13 + 776);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(v13 + 768);
    v16 = 56 * v14;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
  }
  *(_DWORD *)(v13 + 776) = 0;
  sub_22E3B89A8(&v45, v8, v10);
  v51 = 0;
  v52 = *((_QWORD *)&v46 + 1);
  v50 = v45;
  v53 = __p;
  *((_QWORD *)&v46 + 1) = 0;
  LOWORD(__p) = 0;
  sub_22E3BB0B8((uint64_t)&v45);
  v17 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v18 = *(int **)(a2 + 104);
    v19 = *(int **)(a2 + 112);
    if (v19 != v18)
    {
      v20 = v5 - *(_DWORD *)(a2 + 44);
      do
      {
        v21 = *v18;
        v22 = v18[1];
        v23 = (uint64_t)v50;
        if (!v50)
        {
          v23 = sub_22E3B8AAC(v51);
          v50 = (unsigned __int8 *)v23;
        }
        sub_22E4D6448(v23 + 336, (v21 + v20) | ((unint64_t)(v22 + v20) << 32), 1);
        v18 += 2;
      }
      while (v18 != v19);
    }
    v24 = *(_DWORD *)(a2 + 136);
    v25 = v44;
    if (v24)
    {
      v26 = *(_QWORD *)(a2 + 128);
      v27 = v26 + 40 * v24;
      v28 = v26 + 8;
      do
      {
        v29 = *(_QWORD *)(v28 - 8);
        if (v29)
        {
          v30 = *(_QWORD *)v28;
          v31 = sub_22F1E5F4C(v25, v17, v29);
          v32 = (unsigned __int8 *)(v31 | (unint64_t)(sub_22F1E5F4C(v25, v17, v30) << 32));
        }
        else
        {
          v32 = 0;
        }
        v33 = v28 + 8;
        v34 = *(_BYTE *)(v28 + 31);
        v35 = v34;
        if (v34 >= 0)
          v36 = (const void *)(v28 + 8);
        else
          v36 = *(const void **)(v28 + 8);
        v37 = v34 & 0x7F;
        if (v35 >= 0)
          v38 = v37;
        else
          v38 = *(_QWORD *)(v28 + 16);
        BYTE12(v46) = 0;
        *(_QWORD *)((char *)&v46 + 4) = 0;
        v48 = 0;
        __p = 0uLL;
        v49 = 0;
        v45 = v32;
        LOBYTE(v46) = 0;
        if (v38 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v38 >= 0x17)
        {
          v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v40 = v38 | 7;
          v41 = v40 + 1;
          p_dst = (__int128 *)operator new(v40 + 1);
          v42 = v41 | 0x8000000000000000;
          v25 = v44;
          *((_QWORD *)&__dst + 1) = v38;
          v55 = v42;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v55) = v38;
          p_dst = &__dst;
          if (!v38)
            goto LABEL_50;
        }
        memmove(p_dst, v36, v38);
LABEL_50:
        *((_BYTE *)p_dst + v38) = 0;
        __p = __dst;
        v48 = v55;
        sub_22E6D82D0((uint64_t *)&v50, &v45);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)__p);
        v28 += 40;
      }
      while (v33 + 24 != v27);
    }
  }
  return sub_22E3BB0B8((uint64_t)&v50);
}

uint64_t sub_22F1E5F4C(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;

  if (!a3)
    return 0;
  v3 = a3;
  result = llvm::SourceMgr::FindBufferContainingLoc();
  if ((_DWORD)result)
  {
    v7 = result;
    v8 = *(_DWORD **)(*a2 + 24 * (result - 1));
    v9 = (uint64_t)a1[5];
    v25[0] = 0;
    v10 = sub_22F2C4D8C(v9, *((_DWORD *)a1 + 14), (uint64_t)a2, v7, v25);
    v11 = v25[0];
    if (!v10)
      v11 = (uint64_t)&a1[5][3 * *((unsigned int *)a1 + 14)];
    if ((_QWORD *)v11 == &a1[5][3 * *((unsigned int *)a1 + 14)])
    {
      v15 = v7;
      v16 = a1[4];
      if (v16)
      {
        v21 = sub_22F1E170C((uint64_t)*a1, v16[11], 0, 0, 0, 0);
        a1[4] = 0;
      }
      else
      {
        v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        v26 = 261;
        v25[0] = v17;
        v25[1] = v18;
        llvm::MemoryBuffer::getMemBufferCopy();
        v19 = *a1;
        v20 = v22[0];
        v22[0] = 0;
        v24 = v20;
        v21 = sub_22F1E1980(v19, &v24, 0, 0, 0, 0);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v22[0] = 0;
      }
      v22[0] = a2;
      v22[1] = v15;
      v23 = v21;
      sub_22F4245BC((uint64_t)v25, (uint64_t)(a1 + 5), (uint64_t)v22, &v23);
      v11 = v25[0];
    }
    v12 = v3 - v8[2];
    v13 = sub_22E49F3DC(*a1, *(_DWORD *)(v11 + 16));
    if (v13)
      v14 = *v13 & 0x7FFFFFFF;
    else
      v14 = 0;
    return (v14 + v12);
  }
  return result;
}

_OWORD *sub_22F1E6120(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F424720(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45F5C0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F1E61F0(uint64_t (***a1)(_QWORD))
{
  _QWORD *v2;
  uint64_t vars0;

  v2 = (_QWORD *)off_255E04E38();
  if (!*v2)
    *v2 = &vars0;
  (**a1)((*a1)[1]);
  return (*a1[1])(a1[1][1]);
}

void sub_22F1E623C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int16 ArchAttrAMDGCN;
  char v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3 != 30 && v3 != 25)
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x400000000;
    return;
  }
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  if (v3 == 30)
  {
    if (!llvm::AMDGPU::parseArchAMDGCN())
      return;
  }
  else if (!llvm::AMDGPU::parseArchR600())
  {
    return;
  }
  if (*(_DWORD *)(a1 + 24) == 30)
    ArchAttrAMDGCN = llvm::AMDGPU::getArchAttrAMDGCN();
  else
    ArchAttrAMDGCN = llvm::AMDGPU::getArchAttrR600();
  v7 = ArchAttrAMDGCN;
  if ((ArchAttrAMDGCN & 0x100) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a2 + 8);
    }
    v9 = (_QWORD *)(*(_QWORD *)a2 + 16 * v8);
    *v9 = "sramecc";
    v9[1] = 7;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v7 < 0)
  {
    v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a2 + 8);
    }
    v11 = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
    *v11 = "xnack";
    v11[1] = 5;
    ++*(_DWORD *)(a2 + 8);
  }
}

void sub_22F1E63CC(void *__src@<X0>, size_t __len@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  std::string::size_type v17;
  uint64_t v18;
  BOOL v19;
  _QWORD **v20;
  size_t v21;
  _QWORD *v22;
  int v23;
  void *v24;
  std::string::size_type v25;
  void **v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  void **p_p;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  const std::string::value_type *v36;
  std::string *v37;
  std::string::size_type v38;
  char v39;
  _QWORD *v40;
  _QWORD **v41;
  void *__p;
  size_t v44;
  unint64_t v45;
  std::string v46;
  std::string v47;
  _QWORD **v48;
  _QWORD *v49[2];
  _QWORD v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  if (!__src)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_65:
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a4 + 8) = __len;
    *(_QWORD *)(a4 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a4 = v8;
  }
  else
  {
    *(_BYTE *)(a4 + 23) = __len;
    v8 = (void *)a4;
    if (!__len)
      goto LABEL_11;
  }
  memmove(v8, __src, __len);
LABEL_11:
  *((_BYTE *)v8 + __len) = 0;
LABEL_12:
  v49[0] = 0;
  v49[1] = 0;
  v48 = v49;
  v11 = *(uint64_t **)a3;
  v12 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v12)
  {
    for (i = *(uint64_t **)a3; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)a3;
  }
  v14 = &v11[v12];
  if (i != v14)
  {
    v15 = *i;
    do
    {
      v16 = *(_BYTE *)(v15 + 8);
      v17 = *(_QWORD *)v15;
      v47.__r_.__value_.__r.__words[0] = v15 + 16;
      v47.__r_.__value_.__l.__size_ = v17;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
      *((_BYTE *)sub_22F424848((uint64_t)&v48, (void *)(v15 + 16), v17, &v46) + 48) = v16;
      do
      {
        v18 = i[1];
        ++i;
        v15 = v18;
        if (v18)
          v19 = v15 == -8;
        else
          v19 = 1;
      }
      while (v19);
    }
    while (i != v14);
    v20 = v48;
    if (v48 != v49)
    {
      while (1)
      {
        v22 = v20[4];
        v21 = (size_t)v20[5];
        v23 = *((unsigned __int8 *)v20 + 48);
        sub_22E80A898((const void **)a4, 58, (uint64_t)&v46);
        if (v22)
          break;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        __p = 0;
        v44 = 0;
        v45 = 0;
LABEL_34:
        v30 = v27 < 0;
        if (v27 >= 0)
          p_p = &__p;
        else
          p_p = v26;
        v32 = v27 & 0x7F;
        if (v30)
          v33 = v25;
        else
          v33 = v32;
        v34 = std::string::append(&v46, (const std::string::value_type *)p_p, v33);
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (v23)
          v36 = "+";
        else
          v36 = "-";
        v37 = std::string::append(&v47, v36);
        v38 = v37->__r_.__value_.__r.__words[0];
        v50[0] = v37->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v50 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
        v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(_QWORD *)a4 = v38;
        *(_QWORD *)(a4 + 8) = v50[0];
        *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v50 + 7);
        *(_BYTE *)(a4 + 23) = v39;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        v40 = v20[1];
        if (v40)
        {
          do
          {
            v41 = (_QWORD **)v40;
            v40 = (_QWORD *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            v41 = (_QWORD **)v20[2];
            v19 = *v41 == v20;
            v20 = v41;
          }
          while (!v19);
        }
        v20 = v41;
        if (v41 == v49)
          goto LABEL_57;
      }
      if (v21 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_65;
      if (v21 >= 0x17)
      {
        v28 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v28 = v21 | 7;
        v29 = v28 + 1;
        v24 = operator new(v28 + 1);
        v44 = v21;
        v45 = v29 | 0x8000000000000000;
        __p = v24;
      }
      else
      {
        HIBYTE(v45) = v21;
        v24 = &__p;
        if (!v21)
          goto LABEL_33;
      }
      memmove(v24, v22, v21);
LABEL_33:
      *((_BYTE *)v24 + v21) = 0;
      v27 = HIBYTE(v45);
      v26 = (void **)__p;
      v25 = v44;
      goto LABEL_34;
    }
  }
LABEL_57:
  sub_22F258024(v49[0]);
}

uint64_t sub_22F1E6720(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!sub_22E78C8FC(v4, a2, (uint64_t)(v2 + 4)))
      {
        if (!sub_22E78C8FC(v4, (uint64_t)(v2 + 4), a2))
          return v5;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *sub_22F1E679C(uint64_t a1, _QWORD *a2, void *a3, size_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  void *v10;
  size_t v11;

  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        v9 = v5;
        v10 = (void *)v5[4];
        v11 = v5[5];
        if (!sub_22E71FB18(a3, a4, v10, v11))
          break;
        v5 = (_QWORD *)*v9;
        v6 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (!sub_22E71FB18(v10, v11, a3, a4))
        break;
      v6 = v9 + 1;
      v5 = (_QWORD *)v9[1];
    }
    while (v5);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v9;
  return v6;
}

uint64_t *sub_22F1E6848(uint64_t *a1, uint64_t *a2, llvm::Triple *this)
{
  llvm::Triple *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t isLittleEndian;
  uint64_t v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  llvm::APFloatBase *v16;
  llvm::APFloatBase *v17;
  llvm::APFloatBase *v18;
  llvm::APFloatBase *v19;
  uint64_t v20;
  int v21;

  *((_DWORD *)a1 + 2) = 0;
  *a1 = *a2;
  v5 = (llvm::Triple *)(a1 + 4);
  a1[2] = 0;
  a1[3] = 0;
  if (*((char *)this + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a1 + 32, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    v6 = *(_OWORD *)this;
    a1[6] = *((_QWORD *)this + 2);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_OWORD *)((char *)this + 24);
  a1[9] = *((_QWORD *)this + 5);
  *(_OWORD *)(a1 + 7) = v7;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  *((_DWORD *)a1 + 37) = 0;
  v8 = *(uint64_t *)((char *)a1 + 188) | 0xFFFFFFFFLL;
  *(uint64_t *)((char *)a1 + 212) = -1;
  *(uint64_t *)((char *)a1 + 196) = -1;
  *(uint64_t *)((char *)a1 + 204) = -1;
  *(uint64_t *)((char *)a1 + 180) = -1;
  *(uint64_t *)((char *)a1 + 164) = -1;
  *(uint64_t *)((char *)a1 + 172) = -1;
  *(uint64_t *)((char *)a1 + 188) = v8;
  *((_BYTE *)a1 + 296) = 0;
  *((_BYTE *)a1 + 300) = 0;
  *((_BYTE *)a1 + 304) = 0;
  *((_BYTE *)a1 + 352) = 0;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  isLittleEndian = llvm::Triple::isLittleEndian(this);
  *((_BYTE *)a1 + 80) = isLittleEndian ^ 1;
  *(_WORD *)((char *)a1 + 81) = 257;
  *(uint64_t *)((char *)a1 + 83) = 0;
  *(_WORD *)((char *)a1 + 91) = 257;
  *((_BYTE *)a1 + 93) = 0;
  v10 = *a1;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 1) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24)) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 3) = 8;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 2) = 8;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 5) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 4) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 21) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 20) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 23) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 22) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 25) = 16;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 24) = 16;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 27) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 26) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 29) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 28) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 31) = 8;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 30) = 8;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 33) = 16;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 32) = 16;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 35) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 34) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 36) = 0;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 37) = 7;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 38) = 15;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 39) = 31;
  *(_WORD *)((char *)a1 + *(_QWORD *)(v10 - 24) + 42) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 40) = 0x80;
  *((_BYTE *)a1 + *(_QWORD *)(v10 - 24) + 41) = 0;
  v11 = *((_DWORD *)this + 10);
  if ((v11 - 1) < 6)
    goto LABEL_12;
  v12 = *((_DWORD *)this + 9);
  if (v11 == 16 && v12 == 15)
    goto LABEL_12;
  if (v12 == 15)
  {
    if (v11 && v11 != 11)
    {
      v13 = 0;
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (v11 == 11)
  {
LABEL_12:
    isLittleEndian = llvm::Triple::isArch64Bit(v5);
    if ((isLittleEndian & 1) != 0)
    {
LABEL_13:
      v13 = 128;
      goto LABEL_17;
    }
    isLittleEndian = llvm::Triple::isArch32Bit(v5);
    if ((_DWORD)isLittleEndian)
      v13 = 64;
    else
      v13 = 0;
    goto LABEL_17;
  }
  if (v12 == 32)
  {
    isLittleEndian = llvm::Triple::isArch32Bit(v5);
    if ((isLittleEndian & 1) != 0)
    {
      v13 = 64;
      goto LABEL_17;
    }
    v12 = *((_DWORD *)this + 9);
  }
  v13 = 0;
  if (v12 <= 0x21 && ((1 << v12) & 0x3F0000888) != 0)
    goto LABEL_13;
LABEL_17:
  v14 = *a1;
  *(_WORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 44) = v13;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 6) = 16;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 7) = 16;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 10) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 11) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 12) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 13) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 14) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 15) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 16) = 0x80;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 17) = 0x80;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 18) = 0;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 19) = 0;
  *((_WORD *)a1 + 47) = 0;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 48) = 0;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 52) = 0;
  *((_WORD *)a1 + 48) = 0;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 112) = 8;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 120) = 7;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 116) = 9;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 124) = 7;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 128) = 5;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 132) = 5;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 136) = 4;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 140) = 6;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 144) = 9;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 148) = 3;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 152) = 5;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 156) = 5;
  *((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 160) |= 1u;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 160) |= 2u;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 160) &= ~4u;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 160) |= 8u;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 160) |= 0x10u;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 160) |= 0x20u;
  v15 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 164) = 0;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v15 - 24) + 168) = 0;
  v16 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)isLittleEndian);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v15 - 24) + 56) = (uint64_t)v16;
  v17 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v16);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v15 - 24) + 72) = (uint64_t)v17;
  v18 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v17);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v15 - 24) + 80) = (uint64_t)v18;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v15 - 24) + 88) = (uint64_t)v18;
  v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v18);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v15 - 24) + 96) = (uint64_t)v19;
  v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
  v21 = 0;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v15 - 24) + 104) = v20;
  a1[16] = (uint64_t)"_";
  a1[17] = (uint64_t)"mcount";
  *((_WORD *)a1 + 72) = 0;
  *((_DWORD *)a1 + 72) &= 0xFFF80000;
  if (*((_DWORD *)a1 + 17) == 15)
  {
    if (*((_DWORD *)a1 + 18) == 16)
      v21 = 11;
    else
      v21 = 0;
  }
  *((_DWORD *)a1 + 37) = v21;
  a1[19] = (uint64_t)&unk_22F5499E8;
  *((_BYTE *)a1 + 360) = 0;
  a1[28] = (uint64_t)"unknown";
  a1[29] = 7;
  a1[30] = 0;
  a1[31] = 0;
  *((_DWORD *)a1 + 73) = 1024;
  if (*((_BYTE *)a1 + 300))
    *((_BYTE *)a1 + 300) = 0;
  *((_DWORD *)a1 + 40) = 0;
  return a1;
}

uint64_t sub_22F1E6E70(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = *a2;
  if (*(_BYTE *)(a1 + 352))
  {
    if (*(char *)(a1 + 327) < 0)
      operator delete(*(void **)(a1 + 304));
    *(_BYTE *)(a1 + 352) = 0;
  }
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

double sub_22F1E6F0C(uint64_t a1, void *__src, size_t __len, uint64_t a4)
{
  __int128 *p_dst;
  size_t v9;
  size_t v10;
  void **v11;
  double result;
  __int128 __dst;
  unint64_t v14;

  if (!__src)
  {
    __dst = 0uLL;
    v14 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v14 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v14) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  v11 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v11);
  result = *(double *)&__dst;
  *(_OWORD *)v11 = __dst;
  *(_QWORD *)(a1 + 120) = v14;
  *(_QWORD *)(a1 + 128) = a4;
  return result;
}

uint64_t sub_22F1E6FF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  __int16 v9;

  *(_QWORD *)(a2 + 312) = 0x3700000000;
  if (*(char *)(a2 + 311) < 0)
  {
    **(_BYTE **)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 288) = 0;
    *(_BYTE *)(a2 + 311) = 0;
  }
  v3 = (unsigned __int8 *)(a2 + 320);
  v8[0] = a2 + 320;
  v8[1] = 0;
  v8[2] = a2;
  v9 = 1;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 664) = 0;
  v4 = *(unsigned int *)(a2 + 776);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 768);
    v6 = 56 * v4;
    do
    {
      if (*(char *)(v5 + v6 - 9) < 0)
        operator delete(*(void **)(v5 + v6 - 32));
      v6 -= 56;
    }
    while (v6);
    LODWORD(v4) = *v3;
  }
  *(_DWORD *)(a2 + 776) = 0;
  v3[v4 + 1] = 1;
  *(_BYTE *)(a2 + 320) = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "cf-protection=branch";
  sub_22E3BB0B8((uint64_t)v8);
  return 0;
}

uint64_t sub_22F1E70D0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  __int16 v9;

  *(_QWORD *)(a2 + 312) = 0x3700000000;
  if (*(char *)(a2 + 311) < 0)
  {
    **(_BYTE **)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 288) = 0;
    *(_BYTE *)(a2 + 311) = 0;
  }
  v3 = (unsigned __int8 *)(a2 + 320);
  v8[0] = a2 + 320;
  v8[1] = 0;
  v8[2] = a2;
  v9 = 1;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 664) = 0;
  v4 = *(unsigned int *)(a2 + 776);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 768);
    v6 = 56 * v4;
    do
    {
      if (*(char *)(v5 + v6 - 9) < 0)
        operator delete(*(void **)(v5 + v6 - 32));
      v6 -= 56;
    }
    while (v6);
    LODWORD(v4) = *v3;
  }
  *(_DWORD *)(a2 + 776) = 0;
  v3[v4 + 1] = 1;
  *(_BYTE *)(a2 + 320) = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "cf-protection=return";
  sub_22E3BB0B8((uint64_t)v8);
  return 0;
}

uint64_t sub_22F1E71B0(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void *))((char *)nullsub_771 + 4 * byte_22F549970[a2 - 1]))(&unk_22F5E0A76);
}

const char *sub_22F1E71DC()
{
  return "LL";
}

uint64_t sub_22F1E71E8()
{
  return nullsub_771("ULL");
}

const char *sub_22F1E71F4()
{
  return "L";
}

const char *sub_22F1E7200()
{
  return "UL";
}

const char *sub_22F1E720C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (*((unsigned __int8 *)a2 + *(_QWORD *)(*a2 - 24) + 4) <= 8u)
    return "U";
  else
    return (const char *)nullsub_771(a1);
}

uint64_t sub_22F1E724C(_QWORD *a1, int a2)
{
  if ((a2 - 9) >= 2)
    return ((uint64_t (*)(uint64_t))((char *)&locret_22F1E726C + 4 * byte_22F54997A[a2 - 1]))(8);
  else
    return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 22);
}

uint64_t sub_22F1E7290@<X0>(_QWORD *a1@<X8>)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 4);
}

uint64_t sub_22F1E72A4@<X0>(_QWORD *a1@<X8>)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 20);
}

uint64_t sub_22F1E72B8()
{
  return 16;
}

uint64_t sub_22F1E72C0(_QWORD *a1, unsigned int a2, int a3)
{
  unsigned __int8 *v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;

  if (a2 <= 8)
  {
    v4 = a3 == 0;
    v5 = 1;
    goto LABEL_7;
  }
  if (a2 <= 0x10)
  {
    v4 = a3 == 0;
    v5 = 3;
    goto LABEL_7;
  }
  v3 = (unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24);
  if (v3[4] >= a2)
  {
    v4 = a3 == 0;
    v5 = 5;
    goto LABEL_7;
  }
  if (v3[20] >= a2)
  {
    v4 = a3 == 0;
    v5 = 7;
LABEL_7:
    if (v4)
      return v5 + 1;
    else
      return v5;
  }
  v7 = v3[22];
  if (a3)
    v8 = 9;
  else
    v8 = 10;
  if (v7 >= a2)
    return v8;
  else
    return 0;
}

uint64_t sub_22F1E7344(_QWORD *a1, int a2)
{
  if ((a2 - 5) >= 2)
    return ((uint64_t (*)(uint64_t))((char *)sub_22F1E7388 + 4 * byte_22F549982[a2 - 1]))(8);
  else
    return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 5);
}

uint64_t sub_22F1E7388()
{
  return 16;
}

uint64_t sub_22F1E7390@<X0>(_QWORD *a1@<X8>)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 21);
}

uint64_t sub_22F1E73A4@<X0>(_QWORD *a1@<X8>)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 23);
}

void sub_22F1E73BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_QWORD *)(a3 + 140) & 0x8000000000000000) != 0)
    *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 160) &= ~2u;
  __asm { BR              X11 }
}

uint64_t sub_22F1E7424@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::APFloatBase *v9;
  int v10;
  uint64_t v11;
  int v12;
  llvm::APFloatBase *v13;
  llvm::APFloatBase *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  llvm::APFloatBase *v37;
  llvm::APFloatBase *v38;
  _QWORD v39[3];
  __int16 v40;

  if ((a2 & 0x10000000) != 0)
    v5 = 1;
  else
    v5 = 2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 128) = v5;
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
  {
    v6 = *v2;
    *((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 23) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v6 - 24) + 13) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v6 - 24) + 15) = 64;
  }
  if ((*(_DWORD *)(v3 + 52) & 0x40000000) != 0)
  {
    v7 = *v2;
    *((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 5) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 4) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 21) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 20) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 23) = 0x80;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 22) = 0x80;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 7) = 16;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 6) = 16;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 11) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 10) = 32;
    v8 = *(_QWORD *)(v7 - 24);
    if (*((unsigned __int8 *)v2 + v8 + 12) != *((unsigned __int8 *)v2 + v8 + 10))
    {
      *((_BYTE *)v2 + v8 + 13) = 64;
      *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 12) = 64;
      *(uint64_t *)((char *)v2 + *(_QWORD *)(v7 - 24) + 80) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)result);
      v8 = *(_QWORD *)(v7 - 24);
    }
    *((_BYTE *)v2 + v8 + 15) = 0x80;
    *((_BYTE *)v2 + *(_QWORD *)(v7 - 24) + 14) = 0x80;
    v9 = (llvm::APFloatBase *)(*(uint64_t (**)(uint64_t *))(v7 + 32))(v2);
    if (v9 == 32)
      v10 = 6;
    else
      v10 = 8;
    v11 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 112) = v10;
    if (v9 == 32)
      v12 = 5;
    else
      v12 = 7;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(v11 - 24) + 120) = v12;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(v11 - 24) + 124) = v12;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(v11 - 24) + 116) = 9;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(v11 - 24) + 144) = 7;
    v13 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(v9);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v11 - 24) + 56) = (uint64_t)v13;
    v14 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v13);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v11 - 24) + 72) = (uint64_t)v14;
    result = llvm::APFloatBase::IEEEquad(v14);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v11 - 24) + 88) = result;
    v15 = *(_QWORD *)(v3 + 56);
    if ((v15 & 0x100000000) != 0)
    {
      if (*(_DWORD *)(v3 + 64) == 100)
        goto LABEL_26;
    }
    else if ((_DWORD)v15 != 300)
    {
      goto LABEL_26;
    }
    v16 = v2[2] + 256;
    v17 = (*(uint64_t (**)(uint64_t *, uint64_t, const char *, uint64_t))(v11 + 520))(v2, v16, "__opencl_c_generic_address_space", 32);
    v18 = 0x100000000;
    if (!v17)
      v18 = 0;
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(v3 + 64) & 0xFFFFFFFEFFFFFFFFLL | v18;
    v19 = (*(uint64_t (**)(uint64_t *, uint64_t, const char *, uint64_t))(*v2 + 520))(v2, v16, "__opencl_c_pipes", 16);
    v20 = 0x200000000;
    if (!v19)
      v20 = 0;
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(v3 + 64) & 0xFFFFFFFDFFFFFFFFLL | v20;
    result = (*(uint64_t (**)(uint64_t *, uint64_t, const char *, uint64_t))(*v2 + 520))(v2, v16, "__opencl_c_device_enqueue", 25);
    v21 = 0x20000000000;
    if (!(_DWORD)result)
      v21 = 0;
    *(_QWORD *)(v3 + 20) = *(_QWORD *)(v3 + 20) & 0xFFFFFDFFFFFFFFFFLL | v21;
  }
LABEL_26:
  v22 = *(_DWORD *)(v3 + 44);
  if (v22 == 32)
  {
    v23 = *v2;
    *((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 12) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v23 - 24) + 14) = 32;
    result = llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)result);
    goto LABEL_30;
  }
  if (v22 == 64)
  {
    v23 = *v2;
    *((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 12) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v23 - 24) + 14) = 64;
    result = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)result);
LABEL_30:
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 - 24) + 80) = result;
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 - 24) + 88) = result;
    goto LABEL_32;
  }
  v23 = *v2;
LABEL_32:
  v24 = *(_DWORD *)(v3 + 48);
  if (!v24)
    goto LABEL_45;
  v25 = (uint64_t)v2 + *(_QWORD *)(v23 - 24);
  v26 = *(unsigned __int8 *)(v25 + 12);
  if (v24 == v26)
  {
    *(_BYTE *)(v25 + 14) = v26;
    *((_BYTE *)v2 + *(_QWORD *)(v23 - 24) + 15) = *((_BYTE *)v2 + *(_QWORD *)(v23 - 24) + 13);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 - 24) + 88) = *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 - 24) + 80);
    goto LABEL_45;
  }
  if (v24 == 80)
  {
    result = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)result);
    *(_QWORD *)(v25 + 88) = result;
    if (*((_DWORD *)v2 + 17) == 15 && (*((_DWORD *)v2 + 18) | 0x10) == 0x10)
    {
      v27 = (uint64_t)v2 + *(_QWORD *)(v23 - 24);
    }
    else
    {
      v27 = (uint64_t)v2 + *(_QWORD *)(v23 - 24);
      if (*((_DWORD *)v2 + 14) == 41)
      {
        *(_BYTE *)(v27 + 14) = 96;
        v28 = (uint64_t)v2 + *(_QWORD *)(v23 - 24);
        v29 = 32;
LABEL_44:
        *(_BYTE *)(v28 + 15) = v29;
        goto LABEL_45;
      }
    }
    v29 = 0x80;
    *(_BYTE *)(v27 + 14) = 0x80;
    v28 = (uint64_t)v2 + *(_QWORD *)(v23 - 24);
    goto LABEL_44;
  }
  if (v24 == 128)
  {
    *(_BYTE *)(v25 + 15) = 0x80;
    *((_BYTE *)v2 + *(_QWORD *)(v23 - 24) + 14) = 0x80;
    result = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)result);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 - 24) + 88) = result;
  }
LABEL_45:
  v30 = *(_QWORD *)(v3 + 140);
  if ((_DWORD)v30)
    *(_WORD *)((char *)v2 + *(_QWORD *)(v23 - 24) + 44) = 8 * v30;
  *((_BYTE *)v2 + *(_QWORD *)(v23 - 24) + 36) |= (*(_QWORD *)(v3 + 200) & 0x200000000) != 0;
  if ((*(_DWORD *)(v3 + 52) & 0x4000) != 0)
  {
    result = (*(uint64_t (**)(uint64_t *))(v23 + 712))(v2);
    if ((result & 1) == 0)
    {
      *(_QWORD *)(v4 + 312) = 0x3700000000;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      v31 = (unsigned __int8 *)(v4 + 320);
      v39[0] = v4 + 320;
      v39[1] = 0;
      v39[2] = v4;
      v40 = 1;
      *(_BYTE *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 664) = 0;
      v32 = *(unsigned int *)(v4 + 776);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v4 + 768);
        v34 = 56 * v32;
        do
        {
          if (*(char *)(v33 + v34 - 9) < 0)
            operator delete(*(void **)(v33 + v34 - 32));
          v34 -= 56;
        }
        while (v34);
        LODWORD(v32) = *v31;
      }
      *(_DWORD *)(v4 + 776) = 0;
      v31[v32 + 1] = 1;
      *(_BYTE *)(v4 + 320) = v32 + 1;
      *(_QWORD *)&v31[8 * v32 + 16] = "-fprotect-parens";
      result = sub_22E3BB0B8((uint64_t)v39);
      *(_DWORD *)(v3 + 52) &= ~0x4000u;
    }
  }
  if (*(_DWORD *)(v3 + 232))
  {
    v35 = *((unsigned __int8 *)v2 + 300);
    *((_DWORD *)v2 + 74) = *(_DWORD *)(v3 + 232);
    if (!v35)
      *((_BYTE *)v2 + 300) = 1;
  }
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0)
  {
    v36 = *v2;
    *((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 3) = 8;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 2) = 8;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 5) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 4) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 21) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 20) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 7) = 16;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 6) = 16;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 11) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 10) = 32;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 13) = 64;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 12) = 64;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(v36 - 24) + 144) = 7;
    v37 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)result);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v36 - 24) + 56) = (uint64_t)v37;
    v38 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v37);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v36 - 24) + 72) = (uint64_t)v38;
    result = llvm::APFloatBase::IEEEdouble(v38);
    *(uint64_t *)((char *)v2 + *(_QWORD *)(v36 - 24) + 80) = result;
    *((_BYTE *)v2 + *(_QWORD *)(v36 - 24) + 160) &= ~0x20u;
  }
  if ((*(_BYTE *)(v3 + 120) & 2) != 0)
    *((_DWORD *)v2 + 43) = 48;
  return result;
}

BOOL sub_22F1E7A9C(uint64_t a1, char a2)
{
  return *(_DWORD *)(a1 + 148) != 11 && ((a2 & 1) != 0 || *(_DWORD *)(a1 + 68) == 25);
}

BOOL sub_22F1E7AC8(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  unsigned __int8 *v3;
  int v5;
  _BOOL8 result;
  const char **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  uint64_t i;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  size_t v23;
  uint64_t j;
  const void *v25;
  char AsUnsignedInteger;
  unsigned __int8 *v27;
  size_t v28;
  unint64_t v29;

  if (!a3)
    return 0;
  v3 = a2;
  v5 = *a2;
  if (v5 == 35 || v5 == 37)
  {
    v3 = a2 + 1;
    v27 = a2 + 1;
    v28 = a3 - 1;
    if (a3 == 1)
      return 0;
  }
  else
  {
    v27 = a2;
    v28 = a3;
  }
  v7 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 888))(a1);
  v9 = v8;
  if ((word_22F4ADB24[*v3] & 8) == 0
    || (v29 = 0, AsUnsignedInteger = llvm::getAsUnsignedInteger(), result = v9 != 0, (AsUnsignedInteger & 1) != 0)
    || HIDWORD(v29))
  {
    if (v9 == sub_22E80A92C(v7, &v7[v9], (uint64_t)&v27) - v7)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
      if (v11)
      {
        v12 = v10;
        v13 = v10 + 48 * v11;
        v14 = v27;
        v15 = v28;
        do
        {
          for (i = 0; i != 40; i += 8)
          {
            v17 = *(const void **)(v12 + i);
            if (!v17)
              break;
            if (strlen(*(const char **)(v12 + i)) == v15
              && (!v15 || !memcmp(v17, v14, v15))
              && v9 > *(unsigned int *)(v12 + 40))
            {
              return 1;
            }
          }
          v12 += 48;
        }
        while (v12 != v13);
      }
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
      if (!v19)
        return 0;
      v20 = v18;
      v21 = v18 + 48 * v19;
      v22 = v27;
      v23 = v28;
      do
      {
        for (j = 0; j != 40; j += 8)
        {
          v25 = *(const void **)(v20 + j);
          if (!v25)
            break;
          if (strlen(*(const char **)(v20 + j)) == v23 && (!v23 || !memcmp(v25, v22, v23)))
            return 1;
        }
        result = 0;
        v20 += 48;
      }
      while (v20 != v21);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

const char *sub_22F1E7CDC(uint64_t a1, const char *a2, size_t a3, int a4)
{
  size_t v5;
  const char *v6;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;

  v5 = a3;
  v6 = a2;
  v8 = *(unsigned __int8 *)a2;
  if (v8 == 37 || v8 == 35)
  {
    if (a3)
      v6 = a2 + 1;
    v5 = a3 - (a3 != 0);
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 888))(a1);
  v11 = v10;
  if ((word_22F4ADB24[*(unsigned __int8 *)v6] & 8) != 0 && (llvm::getAsUnsignedInteger() & 1) == 0)
  {
    v12 = 0;
LABEL_30:
    v6 = *(const char **)(v9 + 8 * v12);
    if (v6)
LABEL_31:
      strlen(v6);
    return v6;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
  if (v14)
  {
    v15 = v13;
    v16 = v13 + 48 * v14;
LABEL_11:
    v17 = 0;
    while (1)
    {
      v18 = *(const void **)(v15 + v17);
      if (!v18)
      {
LABEL_18:
        v15 += 48;
        if (v15 != v16)
          goto LABEL_11;
        goto LABEL_19;
      }
      if (strlen(*(const char **)(v15 + v17)) == v5 && (!v5 || !memcmp(v18, v6, v5)))
      {
        v12 = *(unsigned int *)(v15 + 40);
        if (v11 > v12)
          break;
      }
      v17 += 8;
      if (v17 == 40)
        goto LABEL_18;
    }
    if (!a4)
      return v6;
    goto LABEL_30;
  }
LABEL_19:
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  if (v20)
  {
    v21 = v19;
    v22 = v19 + 48 * v20;
LABEL_21:
    v23 = 0;
    while (1)
    {
      v24 = *(const void **)(v21 + v23);
      if (!v24)
      {
LABEL_27:
        v21 += 48;
        if (v21 != v22)
          goto LABEL_21;
        return v6;
      }
      if (strlen(*(const char **)(v21 + v23)) == v5 && (!v5 || !memcmp(v24, v6, v5)))
        break;
      v23 += 8;
      if (v23 == 40)
        goto LABEL_27;
    }
    v6 = *(const char **)(v21 + 40);
    if (v6)
      goto LABEL_31;
  }
  return v6;
}

uint64_t sub_22F1E7EBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v18;
  void **v19;
  size_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  void **v29;
  uint64_t v30;
  void **__dst;
  size_t v33;
  int64_t v34;

  v8 = 0;
  v9 = (_BYTE *)(*a2 + 1);
  while (1)
  {
    *a2 = &v9[v8];
    if (!v9[v8])
      return 0;
    if (v9[v8] == 93)
      break;
    ++v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v8 + 1 >= 0x18)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v33 = v8;
    v34 = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v34) = v8;
    p_dst = (void **)&__dst;
    if (!v8)
      goto LABEL_14;
  }
  memmove(p_dst, v9, v8);
LABEL_14:
  *((_BYTE *)p_dst + v8) = 0;
  *a5 = 0;
  v14 = HIBYTE(v34);
  if (a4)
  {
    v15 = 0;
    v16 = 0;
    v17 = HIBYTE(v34) & 0x7F;
    v19 = __dst;
    v18 = v33;
    if (v34 >= 0)
      v20 = HIBYTE(v34) & 0x7F;
    else
      v20 = v33;
    do
    {
      v21 = a3 + (v15 << 7);
      v22 = *(_BYTE *)(v21 + 127);
      v23 = v22;
      v24 = v22 & 0x7F;
      if (v23 < 0)
        v24 = *(_QWORD *)(v21 + 112);
      if (v20 == v24)
      {
        v27 = *(unsigned __int8 **)(v21 + 104);
        v25 = (unsigned __int8 *)(v21 + 104);
        v26 = v27;
        if (v23 >= 0)
          v28 = v25;
        else
          v28 = v26;
        if (v14 < 0)
        {
          if (!memcmp(v19, v28, v18))
          {
            v10 = 1;
            goto LABEL_35;
          }
        }
        else
        {
          if (!v17)
            return 1;
          v29 = (void **)&__dst;
          v30 = v14 & 0x7F;
          while (*(unsigned __int8 *)v29 == *v28)
          {
            v29 = (void **)((char *)v29 + 1);
            ++v28;
            if (!--v30)
            {
              v10 = 1;
              if ((v14 & 0x80) == 0)
                return v10;
              goto LABEL_35;
            }
          }
        }
      }
      v15 = (v16 + 1);
      *a5 = v15;
      ++v16;
    }
    while (a4 != v15);
  }
  v10 = 0;
  if (v14 < 0)
LABEL_35:
    operator delete(__dst);
  return v10;
}

uint64_t sub_22F1E808C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _BYTE *v5;
  char v6;
  uint64_t v10;
  _BYTE *i;
  int v12;
  _BYTE *v13;
  int v14;
  int AsUnsignedInteger;
  uint64_t result;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int *v23;
  int v24;
  _BYTE *v25;
  unint64_t v26;

  if (*(char *)(a4 + 103) >= 0)
    v5 = (_BYTE *)(a4 + 80);
  else
    v5 = *(_BYTE **)(a4 + 80);
  v25 = v5;
  v6 = *v5;
  if (!*v5)
    return 0;
  while (2)
  {
    v10 = v6;
    switch(v6)
    {
      case '<':
      case '>':
      case 'V':
      case 'm':
      case 'o':
        v12 = *(_DWORD *)a4 | 1;
        goto LABEL_40;
      case '=':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'G':
      case 'H':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'W':
      case 'Y':
      case 'Z':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'q':
        goto LABEL_17;
      case '?':
      case 'E':
      case 'F':
      case 'i':
      case 'p':
        goto LABEL_41;
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
        goto LABEL_6;
      case 'X':
      case 'g':
        v12 = *(_DWORD *)a4 | 3;
        goto LABEL_40;
      case '[':
        LODWORD(v26) = 0;
        if (!sub_22F1E7EBC((uint64_t)v5, &v25, a2, a3, &v26))
          return 0;
        v21 = *(_DWORD *)(a4 + 4);
        v22 = v26;
        if (v21 != -1 && v21 != (_DWORD)v26)
          return 0;
        v23 = (int *)(a2 + ((unint64_t)v26 << 7));
        if ((*v23 & 4) != 0)
          return 0;
        v24 = *v23 | 8;
        *v23 = v24;
        *(_DWORD *)a4 = v24;
        *(_DWORD *)(a4 + 4) = v22;
        goto LABEL_41;
      case 'n':
        v12 = *(_DWORD *)a4 | 0x10;
        goto LABEL_40;
      case 'r':
        v12 = *(_DWORD *)a4 | 2;
LABEL_40:
        *(_DWORD *)a4 = v12;
        goto LABEL_41;
      default:
        if (v10 > 0x2C)
          goto LABEL_17;
        if (((1 << v6) & 0x142200000000) != 0)
          goto LABEL_41;
        if (v10 == 35)
        {
          for (i = v5 + 1; *i && *i != 44; ++i)
            v25 = i;
        }
        else
        {
LABEL_17:
          if ((v6 - 48) > 9u)
          {
LABEL_6:
            if (((*(uint64_t (**)(uint64_t, _BYTE **, uint64_t))(*(_QWORD *)a1 + 352))(a1, &v25, a4) & 1) == 0)
              return 0;
          }
          else
          {
            v13 = v5 + 1;
            if (v5[1] - 48 <= 9)
            {
              do
              {
                v25 = v13;
                v14 = *++v13;
              }
              while ((v14 - 48) < 0xA);
            }
            v26 = 0;
            AsUnsignedInteger = llvm::getAsUnsignedInteger();
            result = 0;
            if (v26 >= 0x100000000)
              LODWORD(v17) = 0;
            else
              LODWORD(v17) = v26;
            if (AsUnsignedInteger)
              v17 = 0;
            else
              v17 = v17;
            if ((AsUnsignedInteger & 1) != 0 || HIDWORD(v26))
              return result;
            if (a3 <= v17)
              return 0;
            v18 = (int *)(a2 + (v17 << 7));
            if ((*v18 & 4) != 0)
              return 0;
            v19 = *(_DWORD *)(a4 + 4);
            if (v19 != -1 && v19 != (_DWORD)v17)
              return 0;
            v20 = *v18 | 8;
            *v18 = v20;
            *(_DWORD *)a4 = v20;
            *(_DWORD *)(a4 + 4) = v17;
          }
        }
LABEL_41:
        v5 = v25 + 1;
        v25 = v5;
        v6 = *v5;
        if (*v5)
          continue;
        result = 1;
        break;
    }
    return result;
  }
}

__n128 sub_22F1E82DC(_QWORD *a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  v2 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *((_OWORD *)v2 + 6);
  v6 = *((_OWORD *)v2 + 3);
  v5 = *((_OWORD *)v2 + 4);
  *((_OWORD *)v3 + 5) = *((_OWORD *)v2 + 5);
  *((_OWORD *)v3 + 6) = v4;
  *((_OWORD *)v3 + 3) = v6;
  *((_OWORD *)v3 + 4) = v5;
  v8 = *((_OWORD *)v2 + 8);
  v7 = *((_OWORD *)v2 + 9);
  v9 = *((_OWORD *)v2 + 7);
  *(_OWORD *)(v3 + 156) = *(_OWORD *)(v2 + 156);
  *((_OWORD *)v3 + 8) = v8;
  *((_OWORD *)v3 + 9) = v7;
  *((_OWORD *)v3 + 7) = v9;
  result = *(__n128 *)v2;
  v11 = *((_OWORD *)v2 + 2);
  *((_OWORD *)v3 + 1) = *((_OWORD *)v2 + 1);
  *((_OWORD *)v3 + 2) = v11;
  *(__n128 *)v3 = result;
  return result;
}

uint64_t sub_22F1E8330(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_22F1E8340()
{
  return 0;
}

BOOL sub_22F1E8348(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24)) > 0x3Fu || *(_BYTE *)(a1[2] + 312) != 0;
}

uint64_t sub_22F1E8378(uint64_t a1)
{
  unsigned int v1;

  if (!*(_BYTE *)(a1 + 300))
    return 128;
  v1 = *(_DWORD *)(a1 + 296);
  if (v1 >= 0x800000)
    return 0x800000;
  else
    return v1;
}

uint64_t sub_22F1E839C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 86);
}

uint64_t sub_22F1E83A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 87);
}

uint64_t sub_22F1E83AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

uint64_t sub_22F1E83B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_22F1E83BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_22F1E83C4(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 41);
}

uint64_t sub_22F1E83D8()
{
  return 1;
}

void sub_22F1E83E0(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void sub_22F1E83EC(unsigned __int8 **a1@<X1>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = **a1;
  a2[23] = 1;
  if (v2 == 112)
    LOBYTE(v2) = 114;
  *a2 = v2;
  a2[1] = 0;
}

BOOL sub_22F1E8414(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  v1 = a1[17];
  if (v1 != 15)
    return a1[14] == 42 && v1 == 25 && a1[16] == 3;
  v4 = a1[18];
  v2 = 1;
  v5 = v4 > 0x11;
  v6 = (1 << v4) & 0x30001;
  if (v5 || v6 == 0)
    return a1[14] == 42 && v1 == 25 && a1[16] == 3;
  return v2;
}

uint64_t sub_22F1E8470()
{
  return 0;
}

uint64_t sub_22F1E8478()
{
  return 0;
}

uint64_t sub_22F1E8480()
{
  return 1;
}

uint64_t sub_22F1E8488()
{
  return 0;
}

void sub_22F1E8490(_QWORD *a1)
{
  uint64_t v1;
  const std::string *v2;
  unsigned __int8 **v3;
  int v5;
  __int128 v6;
  int v7;
  const std::string *v8;
  _BOOL8 v9;
  size_t size;
  std::string::size_type v11;
  std::string *p_p;
  size_t v13;
  std::string __p;
  char v16;

  v1 = a1[2];
  v2 = *(const std::string **)(v1 + 288);
  v3 = *(unsigned __int8 ***)(v1 + 296);
  while (v2 != (const std::string *)v3)
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = *(unsigned __int8 *)v2->__r_.__value_.__l.__data_;
      if (v7 != 43 && v7 != 45)
      {
        sub_22E3BB2B4(&__p, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
        goto LABEL_12;
      }
    }
    else
    {
      v5 = v2->__r_.__value_.__s.__data_[0];
      if (v5 != 43 && v5 != 45)
      {
        v6 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
LABEL_12:
        v9 = 1;
        goto LABEL_13;
      }
    }
    std::string::basic_string(&__p, v2, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
    v8 = v2;
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      v8 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    v9 = v8->__r_.__value_.__s.__data_[0] == 43;
LABEL_13:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size != 3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_35:
      *(_BYTE *)(*sub_22E80ABE0((llvm::StringMapImpl *)(a1[2] + 256), p_p, size) + 8) = v9;
      goto LABEL_36;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v11 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v11 >= 3)
      v13 = 3;
    else
      v13 = v11;
    if (memcmp(p_p, "all", v13) || v11 != 3)
      goto LABEL_35;
    (*(void (**)(_QWORD *, _BOOL8))(*a1 + 792))(a1, v9);
LABEL_36:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++v2;
  }
}

void sub_22F1E8630(_BYTE *a1, llvm::raw_ostream **a2)
{
  uint64_t i;
  const std::string::value_type *v5;
  char v6;
  char v7;
  std::string v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[2];
  const std::string::value_type *v12;
  __int16 v13;

  if ((*a1 & 0x20) != 0)
  {
    v11[0] = "__declspec";
    v13 = 259;
    v9[0] = "__declspec";
  }
  else
  {
    v11[0] = "__declspec(a)";
    v13 = 259;
    v9[0] = "__attribute__((a))";
  }
  v10 = 259;
  sub_22E7333BC(a2, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*a1 & 0x20) == 0)
  {
    for (i = 0; i != 5; ++i)
    {
      v5 = off_24FAE1B88[i];
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v8, "__attribute__((__");
      std::string::append(&v8, v5);
      std::string::append(&v8, "__))");
      if (*v5)
      {
        v12 = v5;
        v6 = 3;
      }
      else
      {
        v6 = 1;
      }
      v11[0] = "_";
      LOBYTE(v13) = 3;
      HIBYTE(v13) = v6;
      v10 = 260;
      v9[0] = &v8;
      sub_22E7333BC(a2, (llvm::Twine *)v11, (llvm::Twine *)v9);
      if (*v5)
      {
        v12 = v5;
        v7 = 3;
      }
      else
      {
        v7 = 1;
      }
      v11[0] = "__";
      LOBYTE(v13) = 3;
      HIBYTE(v13) = v7;
      v10 = 260;
      v9[0] = &v8;
      sub_22E7333BC(a2, (llvm::Twine *)v11, (llvm::Twine *)v9);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t sub_22F1E87E4(uint64_t a1, const std::string *a2)
{
  uint64_t v2;
  __int128 *v3;
  int v6;
  uint64_t v7;
  uint64_t (**v8)();
  _QWORD *v9;
  uint64_t (**v10)();
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  size_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  double v26;
  unsigned int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)();
  uint64_t v37;
  uint64_t (**v38)();
  uint64_t v39;
  int v40;
  char isMacOSXVersionLT;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  int v45;
  llvm::APFloatBase *v46;
  uint64_t (**v47)();
  uint64_t v48;
  llvm::Triple *v49;
  uint64_t v50;
  int v51;
  int v53;
  int v55;
  uint64_t *v56;
  BOOL v57;
  BOOL v59;
  uint64_t v61;
  uint64_t (**v62)();
  uint64_t v63;
  uint64_t (**v64)();
  uint64_t v65;
  uint64_t *v66;
  double v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  uint64_t v76;
  const char *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t (**v88)();
  char v89;
  BOOL v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t (**v98)();
  void *v99;
  uint64_t v100;
  char v101;
  uint64_t (**v102)();
  uint64_t v103;
  uint64_t (**v104)();
  uint64_t (**v105)();
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (**v109)();
  void *v110;
  void *v111;
  _QWORD *v112;
  _QWORD *v113;
  void *v114;
  void *v115;
  uint64_t (**v116)();
  char v117;
  void *v118;
  BOOL v121;
  void *v122;
  void *v123;
  uint64_t (**v124)();
  void *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  llvm::APFloatBase *v134;
  void *__p[2];
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v2 = 0;
  v3 = (__int128 *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 36);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 1:
    case 0x27:
      if (*(_DWORD *)(a1 + 44) == 5)
      {
LABEL_138:
        v2 = operator new();
        sub_22F43B2B0(v2, (llvm::Triple *)a1, a2);
        return v2;
      }
      switch(v6)
      {
        case 2:
          v2 = operator new();
          v7 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB1EE28, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = &off_24FB1EA78;
          goto LABEL_163;
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F1F3D08(v2, (uint64_t *)&off_24FB21328, (llvm::Triple *)a1, (uint64_t)a2);
          v10 = &off_24FB20F78;
          goto LABEL_141;
        case 9:
          v2 = operator new();
          v61 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB200A8, (llvm::Triple *)a1, (uint64_t)a2);
          v62 = &off_24FB1FCF8;
          goto LABEL_147;
        case 12:
          v2 = operator new();
          v37 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB225A8, (llvm::Triple *)a1, (uint64_t)a2);
          v38 = &off_24FB221F8;
          goto LABEL_156;
        case 13:
          v2 = operator new();
          sub_22F425C40(v2, (llvm::Triple *)a1, (uint64_t)a2);
          return v2;
        case 15:
          v78 = *(_DWORD *)(a1 + 40);
          switch(v78)
          {
            case 1:
              v2 = operator new();
              v79 = sub_22F1F5F90(v2, off_24FC1D2D8, (__int128 *)a1, (uint64_t)a2);
              v88 = off_24FC1CF38;
              break;
            case 17:
              v2 = operator new();
              v79 = sub_22F1F5F90(v2, off_24FC1CB08, (__int128 *)a1, (uint64_t)a2);
              v88 = off_24FC1C768;
              break;
            case 18:
              v2 = operator new();
              sub_22F43B100(v2, (llvm::Triple *)a1, (uint64_t)a2);
              return v2;
            default:
              v2 = operator new();
              v79 = sub_22F1F5F90(v2, off_24FC1CEF0, (__int128 *)a1, (uint64_t)a2);
              *(_QWORD *)v79 = off_24FC1CB50;
              v80 = 11;
              goto LABEL_303;
          }
          *(_QWORD *)v79 = v88;
          v80 = 1;
          goto LABEL_303;
        case 19:
          v2 = operator new();
          v7 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB24AA8, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = &off_24FB246F8;
          goto LABEL_163;
        case 20:
          v2 = operator new();
          sub_22F425CF0(v2, (llvm::Triple *)a1, (uint64_t)a2);
          return v2;
        default:
          v2 = operator new();
          v7 = sub_22F1F3D08(v2, (uint64_t *)&off_24FC1BFA0, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = &off_24FC1BC08;
          goto LABEL_163;
      }
    case 2:
    case 0x28:
      switch(v6)
      {
        case 3:
        case 7:
        case 11:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_138;
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F1F3D08(v2, (uint64_t *)&off_24FB28228, (llvm::Triple *)a1, (uint64_t)a2);
          v10 = &off_24FB27E78;
          goto LABEL_141;
        case 9:
          v2 = operator new();
          v61 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB26FA8, (llvm::Triple *)a1, (uint64_t)a2);
          v62 = &off_24FB26BF8;
          goto LABEL_147;
        case 12:
          v2 = operator new();
          v37 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB294A8, (llvm::Triple *)a1, (uint64_t)a2);
          v38 = &off_24FB290F8;
          goto LABEL_156;
        case 13:
          v2 = operator new();
          sub_22F425DE4(v2, (llvm::Triple *)a1, (uint64_t)a2);
          break;
        case 19:
          v2 = operator new();
          v7 = sub_22F1F3D08(v2, (uint64_t *)&off_24FB2B9A8, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = &off_24FB2B5F8;
          goto LABEL_163;
        case 20:
          v2 = operator new();
          sub_22F425E94(v2, (llvm::Triple *)a1, (uint64_t)a2);
          break;
        default:
          v2 = operator new();
          v7 = sub_22F1F3D08(v2, (uint64_t *)&off_24FC1C360, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = &off_24FC1BFC8;
          goto LABEL_163;
      }
      return v2;
    case 3:
      switch(v6)
      {
        case 2:
          v2 = operator new();
          v7 = sub_22F436570(v2, (uint64_t *)off_24FB133F0, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = off_24FB13038;
          goto LABEL_163;
        case 3:
        case 7:
        case 11:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_15;
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F436570(v2, (uint64_t *)off_24FB14690, (llvm::Triple *)a1, (uint64_t)a2);
          v10 = off_24FB142D8;
          goto LABEL_141;
        case 6:
          v2 = operator new();
          v79 = sub_22F436570(v2, (uint64_t *)off_24FB15930, (llvm::Triple *)a1, (uint64_t)a2);
          v98 = off_24FB15578;
          goto LABEL_302;
        case 9:
          v2 = operator new();
          v63 = sub_22F436570(v2, (uint64_t *)off_24FB16BD0, (llvm::Triple *)a1, (uint64_t)a2);
          v64 = off_24FB16818;
          goto LABEL_113;
        case 12:
          v2 = operator new();
          v37 = sub_22F436570(v2, (uint64_t *)off_24FB17E70, (llvm::Triple *)a1, (uint64_t)a2);
          v38 = off_24FB17AB8;
          goto LABEL_156;
        case 13:
          v2 = operator new();
          sub_22F425B90(v2, (llvm::Triple *)a1, (uint64_t)a2);
          break;
        case 15:
          v11 = *(_DWORD *)(a1 + 40);
          v12 = operator new();
          v2 = v12;
          if (v11 == 1)
          {
            sub_22F1F1C50(v12, (uint64_t *)off_24FBD6468, (__int128 *)a1, (uint64_t)a2);
            *(_QWORD *)v2 = &off_24FBD60C0;
            v13 = 5;
          }
          else
          {
            sub_22F1F1C50(v12, (uint64_t *)off_24FBD6078, (__int128 *)a1, (uint64_t)a2);
            *(_QWORD *)v2 = &off_24FBD5CD0;
            v13 = 11;
          }
          *(_DWORD *)(v2 + 148) = v13;
          break;
        default:
          v2 = operator new();
          v7 = sub_22F436570(v2, (uint64_t *)off_24FBD54F8, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = off_24FBD5158;
          goto LABEL_163;
      }
      return v2;
    case 4:
      switch(v6)
      {
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F436570(v2, (uint64_t *)off_24FB1A3B0, (llvm::Triple *)a1, (uint64_t)a2);
          v10 = off_24FB19FF8;
          goto LABEL_141;
        case 6:
          v2 = operator new();
          v79 = sub_22F436570(v2, (uint64_t *)off_24FB1B650, (llvm::Triple *)a1, (uint64_t)a2);
          v98 = off_24FB1B298;
          goto LABEL_302;
        case 9:
          v2 = operator new();
          v63 = sub_22F436570(v2, (uint64_t *)off_24FB1C8F0, (llvm::Triple *)a1, (uint64_t)a2);
          v64 = off_24FB1C538;
          goto LABEL_113;
        case 12:
          v2 = operator new();
          v37 = sub_22F436570(v2, (uint64_t *)off_24FB1DB90, (llvm::Triple *)a1, (uint64_t)a2);
          v38 = off_24FB1D7D8;
          goto LABEL_156;
        default:
          v2 = operator new();
          v7 = sub_22F436570(v2, (uint64_t *)off_24FBD58C0, (llvm::Triple *)a1, (uint64_t)a2);
          v8 = off_24FBD5520;
          goto LABEL_163;
      }
    case 5:
      if (v6 > 0x21 || ((1 << v6) & 0x3F0000888) == 0)
        return 0;
LABEL_15:
      v2 = operator new();
      sub_22F437618(v2, (llvm::Triple *)a1, a2);
      return v2;
    case 6:
      v2 = operator new();
      sub_22F425A70((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 7:
      v2 = operator new();
      v15 = sub_22F1E6848((uint64_t *)v2, (uint64_t *)&off_24FC2B2F0, (llvm::Triple *)a1);
      *v15 = (uint64_t)off_24FC2AF58;
      *((_BYTE *)v15 + 81) = 0;
      *((_OWORD *)v15 + 23) = 0u;
      *((_OWORD *)v15 + 24) = 0u;
      v15[50] = 0;
      *((_WORD *)v15 + 204) = 2064;
      *((_DWORD *)v15 + 107) = 138414112;
      *((_WORD *)v15 + 225) = 8;
      *((_BYTE *)v15 + 448) = 8;
      *((_DWORD *)v15 + 103) = 135268368;
      *(_DWORD *)((char *)v15 + 418) = 136316960;
      v16 = llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)v15);
      *(_WORD *)(v2 + 422) = 2080;
      *(_QWORD *)(v2 + 488) = v16;
      *(_QWORD *)(v2 + 496) = v16;
      *(_DWORD *)(v2 + 520) = 6;
      *(_QWORD *)(v2 + 528) = 0x500000005;
      *(_DWORD *)(v2 + 540) = 5;
      *(_QWORD *)(v2 + 556) = 0x100000005;
      *(_QWORD *)(v2 + 544) = 0x800000006;
      *(_DWORD *)(v2 + 160) = 1;
      v17 = "e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8";
      v18 = "";
      v19 = v2;
      v20 = 53;
      goto LABEL_17;
    case 8:
    case 9:
      v2 = operator new();
      sub_22F425F88(v2, (llvm::Triple *)a1);
      return v2;
    case 0xA:
      v21 = (uint64_t *)operator new();
      v2 = (uint64_t)v21;
      v22 = v21 + 46;
      v23 = v21 + 50;
      v24 = v21 + 69;
      if (v6 != 9)
      {
        v66 = sub_22F1E6848(v21, (uint64_t *)&off_24FC2D390, (llvm::Triple *)a1);
        *(_QWORD *)v2 = &off_24FC2CFF8;
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        *((_DWORD *)v22 + 6) = 0;
        *(_BYTE *)(v2 + 83) = 1;
        *(_BYTE *)(v2 + 455) = 32;
        *(_WORD *)(v2 + 474) = 32;
        *(_BYTE *)(v2 + 447) = 32;
        *(_BYTE *)(v2 + 445) = 32;
        *(_DWORD *)(v2 + 544) = 6;
        *v24 = xmmword_22F549A70;
        *(_BYTE *)(v2 + 592) |= 4u;
        *(_WORD *)(v2 + 94) = 8224;
        v67 = sub_22F1E6F0C((uint64_t)v66, "e-m:e-S32-p:32:32-i32:32:32-i64:32:32-f32:32:32-f64:32:32-v64:32:32-v128:32:32-a:0:32-Fi32-n32", 0x5EuLL, (uint64_t)"");
        HIBYTE(v136) = 5;
        strcpy((char *)__p, "abiv2");
        (*(void (**)(uint64_t, void **, double))(*(_QWORD *)v2 + 504))(v2, __p, v67);
        goto LABEL_366;
      }
      v25 = sub_22F1E6848(v21, (uint64_t *)&off_24FB7E1C0, (llvm::Triple *)a1);
      *(_QWORD *)v2 = &off_24FB7E590;
      v23[1] = 0;
      v23[2] = 0;
      *v23 = 0;
      v22[1] = 0;
      v22[2] = 0;
      *v22 = 0;
      *((_DWORD *)v22 + 6) = 0;
      *(_BYTE *)(v2 + 83) = 1;
      *(_BYTE *)(v2 + 455) = 32;
      *(_WORD *)(v2 + 474) = 32;
      *(_BYTE *)(v2 + 447) = 32;
      *(_BYTE *)(v2 + 445) = 32;
      *(_DWORD *)(v2 + 544) = 6;
      *v24 = xmmword_22F549A70;
      *(_BYTE *)(v2 + 592) |= 4u;
      *(_WORD *)(v2 + 94) = 8224;
      v26 = sub_22F1E6F0C((uint64_t)v25, "e-m:e-S32-p:32:32-i32:32:32-i64:32:32-f32:32:32-f64:32:32-v64:32:32-v128:32:32-a:0:32-Fi32-n32", 0x5EuLL, (uint64_t)"");
      HIBYTE(v136) = 5;
      strcpy((char *)__p, "abiv2");
      (*(void (**)(uint64_t, void **, double))(*(_QWORD *)v2 + 504))(v2, __p, v26);
      if (SHIBYTE(v136) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v2 = &off_24FB7DE10;
      *(_DWORD *)(v2 + 564) = 6;
      v27 = *(_DWORD *)v3;
      goto LABEL_149;
    case 0xB:
      v2 = operator new();
      sub_22F4277F4((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0xC:
      v28 = *(_DWORD *)(a1 + 40);
      v29 = (uint64_t *)operator new();
      v2 = (uint64_t)v29;
      v30 = v29 + 46;
      if (v6 != 9 || v28 != 12)
      {
        v32 = sub_22F1E6848(v29, (uint64_t *)&off_24FC44D40, (llvm::Triple *)a1);
        *(_QWORD *)v2 = &off_24FC449A8;
        *(_OWORD *)v30 = 0u;
        *((_OWORD *)v30 + 1) = 0u;
        *((_OWORD *)v30 + 2) = 0u;
        *(uint64_t *)((char *)v30 + 45) = 0;
        sub_22F1E6F0C((uint64_t)v32, "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048", 0x95uLL, (uint64_t)"");
        v33 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 112) = 6;
        *(_DWORD *)(v2 + *(_QWORD *)(v33 - 24) + 120) = 5;
        *(_DWORD *)(v2 + *(_QWORD *)(v33 - 24) + 124) = 5;
        *(_BYTE *)(v2 + 83) = 1;
        *(_BYTE *)(v2 + *(_QWORD *)(v33 - 24) + 18) = 64;
        *(_BYTE *)(v2 + *(_QWORD *)(v33 - 24) + 19) = 64;
        *(_BYTE *)(v2 + *(_QWORD *)(v33 - 24) + 160) |= 2u;
        v34 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 164) = 32;
        *(_WORD *)(v2 + 94) = 16448;
        *(_BYTE *)(v2 + *(_QWORD *)(v34 - 24) + 3) = 8;
        *(_BYTE *)(v2 + *(_QWORD *)(v34 - 24) + 2) = 8;
        return v2;
      }
      v68 = sub_22F1E6848(v29, (uint64_t *)&off_24FB12518, (llvm::Triple *)a1);
      *(_QWORD *)v2 = &off_24FB128E8;
      *(_OWORD *)v30 = 0u;
      *((_OWORD *)v30 + 1) = 0u;
      *((_OWORD *)v30 + 2) = 0u;
      *(uint64_t *)((char *)v30 + 45) = 0;
      sub_22F1E6F0C((uint64_t)v68, "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048", 0x95uLL, (uint64_t)"");
      v69 = *(_QWORD *)v2;
      *(_DWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 112) = 6;
      *(_DWORD *)(v2 + *(_QWORD *)(v69 - 24) + 120) = 5;
      *(_DWORD *)(v2 + *(_QWORD *)(v69 - 24) + 124) = 5;
      *(_BYTE *)(v2 + 83) = 1;
      *(_BYTE *)(v2 + *(_QWORD *)(v69 - 24) + 18) = 64;
      *(_BYTE *)(v2 + *(_QWORD *)(v69 - 24) + 19) = 64;
      *(_BYTE *)(v2 + *(_QWORD *)(v69 - 24) + 160) |= 2u;
      v70 = *(_QWORD *)v2;
      *(_DWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 164) = 32;
      *(_WORD *)(v2 + 94) = 16448;
      *(_BYTE *)(v2 + *(_QWORD *)(v70 - 24) + 3) = 8;
      *(_BYTE *)(v2 + *(_QWORD *)(v70 - 24) + 2) = 8;
      *(_QWORD *)v2 = &off_24FB12168;
      *(_DWORD *)(v2 + 556) = 6;
      goto LABEL_148;
    case 0xF:
      if (v6 == 12)
      {
        v2 = operator new();
        v37 = (uint64_t)sub_22F1F89F0((uint64_t *)v2, (uint64_t *)&off_24FB35510, (llvm::Triple *)a1);
        v38 = &off_24FB35168;
        goto LABEL_156;
      }
      if (v6 == 9)
      {
        v2 = operator new();
        v35 = (uint64_t)sub_22F1F89F0((uint64_t *)v2, (uint64_t *)&off_24FB34640, (llvm::Triple *)a1);
        v36 = &off_24FB34298;
        goto LABEL_30;
      }
      v2 = operator new();
      sub_22F1F8B08((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x10:
      if (v6 <= 11)
        goto LABEL_114;
      if (v6 == 12)
        goto LABEL_41;
LABEL_117:
      if (v6 == 19)
        goto LABEL_118;
      goto LABEL_119;
    case 0x11:
      if (v6 > 11)
      {
        switch(v6)
        {
          case 12:
LABEL_41:
            v2 = operator new();
            v37 = sub_22F1EFBE0(v2, (uint64_t *)&off_24FB30B10, (llvm::Triple *)a1);
            v38 = &off_24FB30768;
            goto LABEL_156;
          case 19:
LABEL_118:
            v2 = operator new();
            v7 = sub_22F1EFBE0(v2, (uint64_t *)&off_24FB2ED70, (llvm::Triple *)a1);
            v8 = &off_24FB2E9C8;
            goto LABEL_163;
          case 20:
            v2 = operator new();
            sub_22F4260CC(v2, (llvm::Triple *)a1);
            return v2;
        }
        goto LABEL_119;
      }
LABEL_114:
      if (v6 != 5)
      {
        if (v6 == 9)
        {
LABEL_116:
          v2 = operator new();
          v65 = sub_22F1EFBE0(v2, (uint64_t *)&off_24FB2DEA0, (llvm::Triple *)a1);
          *(_QWORD *)v65 = &off_24FB2DAF8;
          *(_DWORD *)(v65 + 572) = 6;
          goto LABEL_148;
        }
LABEL_119:
        v2 = operator new();
        sub_22F1EB968(v2, (llvm::Triple *)a1);
        return v2;
      }
LABEL_120:
      v2 = operator new();
      v9 = (_QWORD *)sub_22F1EFBE0(v2, (uint64_t *)&off_24FB2FC40, (llvm::Triple *)a1);
      v10 = &off_24FB2F898;
LABEL_141:
      *v9 = v10;
      v76 = *(unsigned int *)(a1 + 24);
      if (v76 > 0x20)
        goto LABEL_168;
      if (((1 << v76) & 0x1E30000) != 0)
        goto LABEL_151;
      if (((1 << v76) & 0x180000000) != 0)
        return v2;
      if (v76 == 1)
LABEL_145:
        v44 = "__mcount";
      else
LABEL_168:
        v44 = ".mcount";
      goto LABEL_152;
    case 0x12:
      switch(v6)
      {
        case 5:
          goto LABEL_120;
        case 6:
        case 7:
        case 8:
        case 10:
        case 11:
          goto LABEL_119;
        case 9:
          goto LABEL_116;
        case 12:
          goto LABEL_41;
        case 13:
          goto LABEL_259;
        default:
          goto LABEL_117;
      }
    case 0x13:
      switch(v6)
      {
        case 5:
          goto LABEL_120;
        case 6:
        case 7:
        case 8:
        case 10:
        case 11:
          goto LABEL_119;
        case 9:
          goto LABEL_116;
        case 12:
          goto LABEL_41;
        case 13:
LABEL_259:
          v2 = operator new();
          sub_22F4261C0(v2, (llvm::Triple *)a1);
          break;
        default:
          goto LABEL_117;
      }
      return v2;
    case 0x14:
      v2 = operator new();
      sub_22F426030((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x15:
      switch(v6)
      {
        case 3:
        case 7:
        case 11:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          v2 = operator new();
          sub_22F4263BC(v2, (llvm::Triple *)a1, a2);
          break;
        case 5:
          goto LABEL_261;
        case 9:
          goto LABEL_187;
        case 12:
          v2 = operator new();
          v37 = sub_22F427C50(v2, &off_24FB397B0, (llvm::Triple *)a1);
          v38 = &off_24FB39408;
          goto LABEL_156;
        case 13:
          v2 = operator new();
          sub_22F426428(v2, (llvm::Triple *)a1);
          break;
        case 19:
          v2 = operator new();
          v7 = sub_22F427C50(v2, &off_24FB3BCB0, (llvm::Triple *)a1);
          v8 = &off_24FB3B908;
          goto LABEL_163;
        case 21:
          v2 = operator new();
          v7 = sub_22F427E0C(v2, (llvm::Triple *)a1);
          v8 = &off_24FAE4F90;
          goto LABEL_163;
        default:
          goto LABEL_260;
      }
      return v2;
    case 0x16:
      if (v6 == 5)
      {
LABEL_261:
        v2 = operator new();
        v9 = (_QWORD *)sub_22F427C50(v2, &off_24FB38530, (llvm::Triple *)a1);
        v10 = &off_24FB38188;
        goto LABEL_141;
      }
      if (v6 != 9)
      {
LABEL_260:
        v2 = operator new();
        sub_22F4264D4(v2, (llvm::Triple *)a1);
        return v2;
      }
LABEL_187:
      v2 = operator new();
      v74 = sub_22F427C50(v2, &off_24FB372B0, (llvm::Triple *)a1);
      v75 = &off_24FB36F08;
LABEL_137:
      *(_QWORD *)v74 = v75;
      *(_DWORD *)(v74 + 580) = 6;
      goto LABEL_148;
    case 0x17:
      switch(v6)
      {
        case 3:
        case 7:
        case 11:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          v2 = operator new();
          v39 = sub_22F1EE38C(v2, (uint64_t *)&off_24FAE7BF8, (llvm::Triple *)a1);
          *(_QWORD *)v39 = off_24FAE7C28;
          *(_QWORD *)(v2 + 456) = 0;
          *(_QWORD *)(v2 + 464) = 0;
          *(_QWORD *)(v2 + 448) = 0;
          *(_BYTE *)(v2 + 81) = 0;
          std::string::operator=((std::string *)(v39 + 448), a2 + 15);
          v40 = *(_DWORD *)(a1 + 36);
          if ((v40 & 0xFFFFFFF7) == 3)
          {
            isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a1);
LABEL_222:
            v89 = isMacOSXVersionLT ^ 1;
LABEL_223:
            *(_BYTE *)(v2 + 81) = v89;
            goto LABEL_224;
          }
          if (v40 > 28)
          {
            if ((v40 - 29) >= 2)
            {
              if (v40 != 33)
                goto LABEL_224;
              v89 = 1;
              goto LABEL_223;
            }
            if (*(_DWORD *)(a1 + 40) == 20)
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v72;
              v73 = 3;
            }
            else
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v95;
              v73 = 2;
            }
            goto LABEL_221;
          }
          if (v40 != 7 && v40 != 28)
            goto LABEL_224;
          if (llvm::Triple::isArch64Bit((llvm::Triple *)a1))
          {
            __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
            __p[1] = v85;
            v73 = 8;
LABEL_221:
            v139 = v73;
            v140 = 0;
            isMacOSXVersionLT = sub_22E3B38EC(__p, &v139);
            goto LABEL_222;
          }
          if (llvm::Triple::isArch32Bit((llvm::Triple *)a1))
          {
            if (*(_DWORD *)(a1 + 40) == 20)
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v96;
              v73 = 10;
            }
            else
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v114;
              v73 = 9;
            }
            goto LABEL_221;
          }
LABEL_224:
          *(_QWORD *)(v2 + 136) = "\x01mcount";
          *(_QWORD *)v2 = off_24FAE7848;
          *(_DWORD *)(v2 + 288) |= 1u;
          if (*(char *)(v2 + 127) < 0)
            operator delete(*(void **)(v2 + 104));
          strcpy((char *)(v2 + 104), "E-m:o-i64:64-n32:64");
          *(_BYTE *)(v2 + 127) = 19;
          *(_QWORD *)(v2 + 128) = "_";
          break;
        case 5:
          goto LABEL_46;
        case 9:
          goto LABEL_136;
        case 10:
          v2 = operator new();
          sub_22F426698(v2, (llvm::Triple *)a1);
          return v2;
        case 12:
          goto LABEL_135;
        case 13:
          goto LABEL_286;
        case 21:
          v2 = operator new();
          v7 = sub_22F428790(v2, (llvm::Triple *)a1);
          v8 = &off_24FAEAC10;
          goto LABEL_163;
        default:
          goto LABEL_134;
      }
      return v2;
    case 0x18:
      switch(v6)
      {
        case 5:
LABEL_46:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F1EE38C(v2, (uint64_t *)&off_24FB3F430, (llvm::Triple *)a1);
          v10 = &off_24FB3F088;
          goto LABEL_141;
        case 9:
LABEL_136:
          v2 = operator new();
          v74 = sub_22F1EE38C(v2, (uint64_t *)&off_24FB3CF30, (llvm::Triple *)a1);
          v75 = &off_24FB3CB88;
          goto LABEL_137;
        case 12:
LABEL_135:
          v2 = operator new();
          v37 = sub_22F1EE38C(v2, (uint64_t *)&off_24FB406B0, (llvm::Triple *)a1);
          v38 = &off_24FB40308;
          goto LABEL_156;
        case 13:
LABEL_286:
          v2 = operator new();
          sub_22F42670C(v2, (llvm::Triple *)a1);
          break;
        default:
LABEL_134:
          v2 = operator new();
          sub_22F1EBAF4(v2, (llvm::Triple *)a1);
          break;
      }
      return v2;
    case 0x19:
    case 0x1E:
      v2 = operator new();
      sub_22F1F2D14(v2, (llvm::Triple *)a1, (uint64_t)a2);
      return v2;
    case 0x1F:
      if (v6 == 9)
      {
        v2 = operator new();
        v71 = sub_22F1EE58C(v2, (uint64_t *)&off_24FB43E38, (llvm::Triple *)a1);
        *(_QWORD *)v71 = &off_24FB44210;
        *(_QWORD *)(v71 + 544) = 0x500000005;
        *(_DWORD *)(v71 + 536) = 6;
        sub_22F1E6F0C(v71, "e-m:e-p:32:32-i64:64-n32-S128", 0x1DuLL, (uint64_t)"");
        *(_QWORD *)v2 = &off_24FB43A88;
        *(_DWORD *)(v2 + 556) = 6;
        goto LABEL_148;
      }
      if (v6 != 5)
      {
        v2 = operator new();
        sub_22F4267B8(v2, (llvm::Triple *)a1);
        return v2;
      }
      v2 = operator new();
      v42 = sub_22F1EE58C(v2, (uint64_t *)&off_24FB42BB8, (llvm::Triple *)a1);
      *(_QWORD *)v42 = &off_24FB42F90;
      *(_QWORD *)(v42 + 544) = 0x500000005;
      *(_DWORD *)(v42 + 536) = 6;
      sub_22F1E6F0C(v42, "e-m:e-p:32:32-i64:64-n32-S128", 0x1DuLL, (uint64_t)"");
      *(_QWORD *)v2 = &off_24FB42808;
      v43 = *(unsigned int *)(a1 + 24);
      v44 = ".mcount";
      if (v43 > 0x20)
        goto LABEL_152;
      if (((1 << v43) & 0x1E30000) != 0)
        goto LABEL_151;
      if (((1 << v43) & 0x180000000) != 0)
        return v2;
      if (v43 != 1)
        goto LABEL_152;
      goto LABEL_145;
    case 0x20:
      switch(v6)
      {
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F430B04(v2, (uint64_t *)off_24FB450B0, (llvm::Triple *)a1);
          v10 = &off_24FB44D08;
          goto LABEL_141;
        case 6:
          v2 = operator new();
          v79 = sub_22F430B04(v2, (uint64_t *)off_24FB475B0, (llvm::Triple *)a1);
          v98 = &off_24FB47208;
          goto LABEL_302;
        case 9:
          v2 = operator new();
          v63 = sub_22F430B04(v2, (uint64_t *)off_24FB48830, (llvm::Triple *)a1);
          v64 = &off_24FB48488;
          goto LABEL_113;
        case 13:
          v2 = operator new();
          sub_22F42681C(v2, (llvm::Triple *)a1);
          break;
        default:
          v2 = operator new();
          sub_22F4268C8(v2, (llvm::Triple *)a1);
          break;
      }
      return v2;
    case 0x21:
      if (v6 > 13)
      {
        if (v6 == 14)
        {
          v2 = operator new();
          sub_22F426934(v2, (llvm::Triple *)a1);
          return v2;
        }
        if (v6 == 19)
        {
          v2 = operator new();
          v7 = sub_22F428E64(v2, (uint64_t *)off_24FB4D230, (llvm::Triple *)a1);
          v8 = &off_24FB4CE88;
          goto LABEL_163;
        }
        goto LABEL_309;
      }
      if (v6 != 9)
      {
        if (v6 == 12)
        {
          v2 = operator new();
          v37 = sub_22F428E64(v2, (uint64_t *)off_24FB4BFB0, (llvm::Triple *)a1);
          v38 = &off_24FB4BC08;
LABEL_156:
          *(_QWORD *)v37 = v38;
          v77 = "__mcount";
LABEL_157:
          *(_QWORD *)(v37 + 136) = v77;
          return v2;
        }
LABEL_309:
        v2 = operator new();
        sub_22F4269A0(v2, (llvm::Triple *)a1);
        return v2;
      }
      v2 = operator new();
      v35 = sub_22F428E64(v2, (uint64_t *)off_24FB49AB0, (llvm::Triple *)a1);
      v36 = &off_24FB49708;
LABEL_30:
      *(_QWORD *)v35 = v36;
      *(_DWORD *)(v35 + 500) = 6;
      goto LABEL_148;
    case 0x22:
      switch(v6)
      {
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F432040(v2, (uint64_t *)off_24FB57140, (llvm::Triple *)a1);
          v10 = &off_24FB56D98;
          goto LABEL_141;
        case 9:
          v2 = operator new();
          v35 = sub_22F432040(v2, (uint64_t *)off_24FB52740, (llvm::Triple *)a1);
          v36 = &off_24FB52398;
          goto LABEL_30;
        case 12:
          v2 = operator new();
          v37 = sub_22F432040(v2, (uint64_t *)off_24FB54C40, (llvm::Triple *)a1);
          v38 = &off_24FB54898;
          goto LABEL_156;
        case 13:
          v2 = operator new();
          sub_22F426B88(v2, (llvm::Triple *)a1);
          break;
        case 14:
          v2 = operator new();
          sub_22F426B1C(v2, (llvm::Triple *)a1);
          break;
        default:
          v2 = operator new();
          sub_22F426C34(v2, (llvm::Triple *)a1);
          break;
      }
      return v2;
    case 0x23:
      switch(v6)
      {
        case 19:
          v2 = operator new();
          v112 = (_QWORD *)sub_22F428E64(v2, (uint64_t *)off_24FB51118, (llvm::Triple *)a1);
          *v112 = &off_24FB514F8;
          sub_22F1E6F0C((uint64_t)v112, "e-m:e-p:32:32-i64:64-f128:64-n32-S64", 0x24uLL, (uint64_t)"");
          *(_QWORD *)v2 = &off_24FB50D68;
          return v2;
        case 12:
          v2 = operator new();
          v113 = (_QWORD *)sub_22F428E64(v2, (uint64_t *)off_24FB4FAE8, (llvm::Triple *)a1);
          *v113 = &off_24FB4FEC8;
          sub_22F1E6F0C((uint64_t)v113, "e-m:e-p:32:32-i64:64-f128:64-n32-S64", 0x24uLL, (uint64_t)"");
          *(_QWORD *)v2 = &off_24FB4F738;
          goto LABEL_145;
        case 9:
          v2 = operator new();
          sub_22F426A6C(v2, (llvm::Triple *)a1);
          break;
        default:
          v2 = operator new();
          v19 = sub_22F428E64(v2, (uint64_t *)off_24FAED860, (llvm::Triple *)a1);
          *(_QWORD *)v19 = &off_24FAED4C8;
          v17 = "e-m:e-p:32:32-i64:64-f128:64-n32-S64";
          v18 = "";
          v20 = 36;
LABEL_17:
          sub_22F1E6F0C(v19, v17, v20, (uint64_t)v18);
          break;
      }
      return v2;
    case 0x24:
      if (v6 == 16)
      {
        v2 = operator new();
        sub_22F426D34(v2, (llvm::Triple *)a1);
      }
      else
      {
        if (v6 == 9)
        {
          v2 = operator new();
          v94 = sub_22F432DE4(v2, (uint64_t *)&off_24FB583C0, (llvm::Triple *)a1);
          *(_QWORD *)v94 = off_24FB58018;
          *(_DWORD *)(v94 + 532) = 6;
          goto LABEL_148;
        }
        v2 = operator new();
        sub_22F426D88(v2, (llvm::Triple *)a1);
      }
      return v2;
    case 0x25:
      v2 = operator new();
      sub_22F426E80(v2, (llvm::Triple *)a1);
      return v2;
    case 0x26:
      v2 = operator new();
      v19 = sub_22F429148(v2, (llvm::Triple *)a1);
      *(_QWORD *)v19 = &off_24FC7F538;
      *(_BYTE *)(v19 + 80) = 0;
      v17 = "e-p:32:32:32-i1:8:8-i8:8:32-i16:16:32-i32:32:32-i64:32:32-f32:32:32-f64:32:32-v64:32:32-v128:32:32-v256:32:3"
            "2-v512:32:32-v1024:32:32-a0:0:32-n32";
      v18 = "";
      v20 = 144;
      goto LABEL_17;
    case 0x29:
      switch(v6)
      {
        case 1:
          v2 = operator new();
          v7 = sub_22F429848(v2, (uint64_t *)&off_24FB5A168, (llvm::Triple *)a1);
          v8 = &off_24FB59DB8;
          goto LABEL_163;
        case 2:
          v2 = operator new();
          v7 = sub_22F429848(v2, (uint64_t *)&off_24FB5B408, (llvm::Triple *)a1);
          v8 = &off_24FB5B058;
          goto LABEL_163;
        case 3:
        case 7:
        case 11:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          v2 = operator new();
          v81 = sub_22F429848(v2, (uint64_t *)&off_24FAEE740, (llvm::Triple *)a1);
          *(_QWORD *)v81 = off_24FAEE770;
          *(_QWORD *)(v2 + 472) = 0;
          *(_QWORD *)(v2 + 480) = 0;
          *(_QWORD *)(v2 + 464) = 0;
          *(_BYTE *)(v2 + 81) = 0;
          std::string::operator=((std::string *)(v81 + 464), a2 + 15);
          v82 = *(_DWORD *)(a1 + 36);
          if ((v82 & 0xFFFFFFF7) == 3)
          {
            v83 = llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a1);
LABEL_358:
            v101 = v83 ^ 1;
LABEL_359:
            *(_BYTE *)(v2 + 81) = v101;
            goto LABEL_360;
          }
          if (v82 > 28)
          {
            if ((v82 - 29) >= 2)
            {
              if (v82 != 33)
                goto LABEL_360;
              v101 = 1;
              goto LABEL_359;
            }
            if (*(_DWORD *)(a1 + 40) == 20)
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v86;
              v87 = 3;
            }
            else
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v110;
              v87 = 2;
            }
            goto LABEL_357;
          }
          if (v82 == 7 || v82 == 28)
          {
            if (llvm::Triple::isArch64Bit((llvm::Triple *)a1))
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v97;
              v87 = 8;
            }
            else
            {
              if (!llvm::Triple::isArch32Bit((llvm::Triple *)a1))
                goto LABEL_360;
              if (*(_DWORD *)(a1 + 40) == 20)
              {
                __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
                __p[1] = v111;
                v87 = 10;
              }
              else
              {
                __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
                __p[1] = v123;
                v87 = 9;
              }
            }
LABEL_357:
            v139 = v87;
            v140 = 0;
            v83 = sub_22E3B38EC(__p, &v139);
            goto LABEL_358;
          }
LABEL_360:
          *(_QWORD *)(v2 + 136) = "\x01mcount";
          *(_QWORD *)v2 = off_24FAEE388;
          *(_WORD *)(v2 + 502) = -32640;
          *(_WORD *)(v2 + 530) = 128;
          *(_DWORD *)(v2 + 536) = 256;
          if (*(char *)(a1 + 23) < 0)
          {
            sub_22E3BB2B4(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
            v124 = *(uint64_t (***)())v2;
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)a1;
            v136 = *(_QWORD *)(a1 + 16);
            v124 = off_24FAEE388;
          }
          v137 = *v3;
          v138 = *((_QWORD *)v3 + 2);
          if (HIDWORD(v137) == 29)
          {
            *((_BYTE *)*(v124 - 3) + v2 + 160) &= ~1u;
            v124 = *(uint64_t (***)())v2;
          }
          *(_DWORD *)((char *)*(v124 - 3) + v2 + 112) = 8;
          *(_DWORD *)((char *)*(v124 - 3) + v2 + 124) = 7;
          sub_22F1E6F0C(v2, "e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:128-n8:16:32-S128", 0x4EuLL, (uint64_t)"_");
          *(_DWORD *)(v2 + 288) |= 1u;
LABEL_366:
          if (SHIBYTE(v136) < 0)
            operator delete(__p[0]);
          break;
        case 4:
          v2 = operator new();
          v37 = sub_22F429848(v2, (uint64_t *)&off_24FB5C6A8, (llvm::Triple *)a1);
          v105 = &off_24FB5C2F8;
          goto LABEL_265;
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F429848(v2, (uint64_t *)&off_24FB5D948, (llvm::Triple *)a1);
          v10 = &off_24FB5D598;
          goto LABEL_141;
        case 6:
          v2 = operator new();
          v79 = sub_22F429848(v2, (uint64_t *)&off_24FB5EBE8, (llvm::Triple *)a1);
          v98 = &off_24FB5E838;
          goto LABEL_302;
        case 8:
          v2 = operator new();
          v7 = sub_22F429848(v2, (uint64_t *)&off_24FB5FE88, (llvm::Triple *)a1);
          v8 = &off_24FB5FAD8;
          goto LABEL_163;
        case 9:
          v106 = *(_DWORD *)(a1 + 40);
          v107 = operator new();
          v2 = v107;
          if (v106 == 11)
          {
            sub_22F426F38(v107, (llvm::Triple *)a1);
            return v2;
          }
          sub_22F429848(v107, (uint64_t *)&off_24FAF2698, (llvm::Triple *)a1);
          v116 = &off_24FAF22E8;
          goto LABEL_315;
        case 12:
          v2 = operator new();
          v7 = sub_22F429848(v2, (uint64_t *)&off_24FAF3940, (llvm::Triple *)a1);
          *(_QWORD *)(v7 + 136) = "__mcount";
          v8 = &off_24FAF3588;
          goto LABEL_163;
        case 13:
          v2 = operator new();
          v108 = sub_22F429E74(v2, (llvm::Triple *)a1);
          v109 = &off_24FAF5E88;
          goto LABEL_278;
        case 14:
          v2 = operator new();
          sub_22F426FDC(v2, (llvm::Triple *)a1);
          return v2;
        case 15:
          v45 = *(_DWORD *)(a1 + 40);
          if (v45 == 1)
          {
            v2 = operator new();
            v84 = sub_22F1EE918(v2, (uint64_t *)off_24FAF9A08, (llvm::Triple *)a1);
            *(_QWORD *)v84 = &off_24FAF9660;
            goto LABEL_255;
          }
          if (v45 != 18)
          {
            v2 = operator new();
            v46 = (llvm::APFloatBase *)sub_22F1EE918(v2, (uint64_t *)off_24FAFDD28, (llvm::Triple *)a1);
            v47 = &off_24FAFD980;
            goto LABEL_58;
          }
          v2 = operator new();
          v19 = sub_22F429848(v2, (uint64_t *)&off_24FAF8B28, (llvm::Triple *)a1);
          *(_QWORD *)v19 = &off_24FAF8788;
          *(_DWORD *)(v19 + 592) = 4;
          *(_BYTE *)(v19 + 487) = 64;
          *(_BYTE *)(v19 + 477) = 64;
          v17 = "e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:32-n8:16:32-a:0:32-S32";
          v18 = "_";
          v20 = 80;
          goto LABEL_17;
        case 17:
          v2 = operator new();
          v7 = sub_22F42A418(v2, (llvm::Triple *)a1);
          v8 = &off_24FAFF3A0;
          goto LABEL_163;
        case 18:
          v2 = operator new();
          v7 = sub_22F429848(v2, (uint64_t *)&off_24FB61128, (llvm::Triple *)a1);
          v8 = &off_24FB60D78;
          goto LABEL_163;
        case 19:
          v2 = operator new();
          v108 = sub_22F429848(v2, (uint64_t *)&off_24FB02040, (llvm::Triple *)a1);
          v109 = &off_24FB01CA0;
LABEL_278:
          *(_QWORD *)v108 = v109;
          *(_DWORD *)(v108 + 576) = 8;
          *(_QWORD *)(v108 + 584) = 0x700000007;
          return v2;
        case 20:
          v2 = operator new();
          sub_22F427048(v2, (llvm::Triple *)a1);
          return v2;
        case 27:
          v2 = operator new();
          sub_22F427138((_QWORD *)v2, (llvm::Triple *)a1);
          return v2;
        case 38:
          v2 = operator new();
          v7 = sub_22F429848(v2, (uint64_t *)&off_24FB64908, (llvm::Triple *)a1);
          v8 = &off_24FB64558;
          goto LABEL_163;
        default:
          v2 = operator new();
          sub_22F4271B4(v2, (llvm::Triple *)a1);
          return v2;
      }
      return v2;
    case 0x2A:
      v90 = v6 > 0x21 || ((1 << v6) & 0x3F0000888) == 0;
      if (!v90 || *(_DWORD *)(a1 + 44) == 5)
      {
        v2 = operator new();
        v91 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB03E08, (llvm::Triple *)a1);
        *(_QWORD *)v91 = off_24FB03E38;
        *(_QWORD *)(v2 + 472) = 0;
        *(_QWORD *)(v2 + 480) = 0;
        *(_QWORD *)(v2 + 464) = 0;
        *(_BYTE *)(v2 + 81) = 0;
        std::string::operator=((std::string *)(v91 + 464), a2 + 15);
        v92 = *(_DWORD *)(a1 + 36);
        if ((v92 & 0xFFFFFFF7) == 3)
        {
          v93 = llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a1);
        }
        else
        {
          if (v92 <= 28)
          {
            if (v92 != 7 && v92 != 28)
              goto LABEL_332;
            if (llvm::Triple::isArch64Bit((llvm::Triple *)a1))
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v115;
              v100 = 8;
            }
            else
            {
              if (!llvm::Triple::isArch32Bit((llvm::Triple *)a1))
              {
LABEL_332:
                *(_QWORD *)(v2 + 136) = "\x01mcount";
                *(_QWORD *)v2 = off_24FB03A50;
                *(_DWORD *)(v2 + 632) = 9;
                if (*(char *)(a1 + 23) < 0)
                {
                  sub_22E3BB2B4(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)a1;
                  v136 = *(_QWORD *)(a1 + 16);
                }
                v137 = *v3;
                v138 = *((_QWORD *)v3 + 2);
                if ((HIDWORD(v137) & 0xFFFFFFFE) == 0x20)
                {
                  if ((_DWORD)v138 == 21)
                    goto LABEL_350;
                }
                else
                {
                  v121 = (HIDWORD(v137) == 7 || HIDWORD(v137) == 28) && (_DWORD)v138 != 21;
                  if (HIDWORD(v137) != 29 && !v121)
                    goto LABEL_350;
                }
                *(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 160) &= ~1u;
LABEL_350:
                sub_22F1E6F0C(v2, "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", 0x46uLL, (uint64_t)"_");
                goto LABEL_366;
              }
              if (*(_DWORD *)(a1 + 40) == 20)
              {
                __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
                __p[1] = v122;
                v100 = 10;
              }
              else
              {
                __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
                __p[1] = v126;
                v100 = 9;
              }
            }
          }
          else
          {
            if ((v92 - 29) >= 2)
            {
              if (v92 != 33)
                goto LABEL_332;
              v117 = 1;
              goto LABEL_331;
            }
            if (*(_DWORD *)(a1 + 40) == 20)
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v99;
              v100 = 3;
            }
            else
            {
              __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a1);
              __p[1] = v118;
              v100 = 2;
            }
          }
          v139 = v100;
          v140 = 0;
          v93 = sub_22E3B38EC(__p, &v139);
        }
        v117 = v93 ^ 1;
LABEL_331:
        *(_BYTE *)(v2 + 81) = v117;
        goto LABEL_332;
      }
      switch(v6)
      {
        case 1:
          v2 = operator new();
          v7 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB65BA8, (llvm::Triple *)a1);
          v8 = &off_24FB657F8;
          goto LABEL_163;
        case 2:
          v2 = operator new();
          v7 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB66E48, (llvm::Triple *)a1);
          v8 = &off_24FB66A98;
          goto LABEL_163;
        case 4:
          v2 = operator new();
          v37 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB680E8, (llvm::Triple *)a1);
          v105 = &off_24FB67D38;
LABEL_265:
          *(_QWORD *)v37 = v105;
          *(_BYTE *)(v37 + 86) = 1;
          v77 = ".mcount";
          goto LABEL_157;
        case 5:
          v2 = operator new();
          v9 = (_QWORD *)sub_22F42AB4C(v2, (uint64_t *)&off_24FB6A628, (llvm::Triple *)a1);
          v10 = &off_24FB6A278;
          goto LABEL_141;
        case 6:
          v2 = operator new();
          v79 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB6B8C8, (llvm::Triple *)a1);
          v98 = &off_24FB6B518;
LABEL_302:
          *(_QWORD *)v79 = v98;
          *(_QWORD *)(v79 + 136) = "__mcount";
          v80 = 8;
LABEL_303:
          *(_DWORD *)(v79 + 148) = v80;
          return v2;
        case 8:
          v2 = operator new();
          v7 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB6CB68, (llvm::Triple *)a1);
          v8 = &off_24FB6C7B8;
          goto LABEL_163;
        case 9:
          v130 = *(_DWORD *)(a1 + 40);
          v131 = operator new();
          v2 = v131;
          if (v130 == 11)
          {
            sub_22F427298(v131, (llvm::Triple *)a1);
            return v2;
          }
          sub_22F42AB4C(v131, (uint64_t *)&off_24FB07D60, (llvm::Triple *)a1);
          v116 = &off_24FB079B0;
LABEL_315:
          *(_QWORD *)v2 = v116;
          *(_DWORD *)(v2 + 596) = 6;
          break;
        case 12:
          v2 = operator new();
          v37 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB69388, (llvm::Triple *)a1);
          v38 = &off_24FB68FD8;
          goto LABEL_156;
        case 13:
          v2 = operator new();
          v132 = sub_22F42AF44(v2, (llvm::Triple *)a1);
          *(_QWORD *)v132 = &off_24FB08C50;
          *(_DWORD *)(v132 + 580) = 9;
          *(_DWORD *)(v132 + 608) = 9;
          return v2;
        case 14:
          v2 = operator new();
          sub_22F42732C(v2, (llvm::Triple *)a1);
          return v2;
        case 15:
          v127 = *(_DWORD *)(a1 + 40);
          if (v127 == 1)
          {
            v2 = operator new();
            v134 = (llvm::APFloatBase *)sub_22F42B2EC(v2, (uint64_t *)off_24FB0C7D0, (llvm::Triple *)a1);
            *(_QWORD *)v134 = &off_24FB0C428;
            *((_WORD *)v134 + 239) = -32640;
            *(_QWORD *)(v2 + 552) = llvm::APFloatBase::x87DoubleExtended(v134);
LABEL_394:
            *(_BYTE *)(v2 + 86) = 1;
          }
          else if (v127 == 18)
          {
            v2 = operator new();
            v128 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB0B8F0, (llvm::Triple *)a1);
            *(_QWORD *)v128 = &off_24FB0B550;
            *(_DWORD *)(v128 + 592) = 4;
            *(_BYTE *)(v128 + 81) = 0;
          }
          else
          {
            v2 = operator new();
            v46 = (llvm::APFloatBase *)sub_22F42B2EC(v2, (uint64_t *)off_24FB10AF0, (llvm::Triple *)a1);
            v47 = &off_24FB10748;
LABEL_58:
            *(_QWORD *)v46 = v47;
            *((_WORD *)v46 + 239) = 16448;
            *(_QWORD *)(v2 + 552) = llvm::APFloatBase::IEEEdouble(v46);
          }
          return v2;
        case 17:
          v2 = operator new();
          v133 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB6F0A8, (llvm::Triple *)a1);
          *(_QWORD *)v133 = &off_24FB6ECF8;
          *(_DWORD *)(v133 + 576) = 8;
          *(_QWORD *)(v133 + 584) = 0x700000007;
          *(_DWORD *)(v133 + 620) = 7;
          *(_BYTE *)(v133 + 81) = 0;
          if ((*(_DWORD *)(a1 + 24) - 41) <= 1)
            goto LABEL_394;
          return v2;
        case 20:
          v2 = operator new();
          sub_22F427398(v2, (llvm::Triple *)a1);
          return v2;
        case 25:
          v2 = operator new();
          v129 = sub_22F42AB4C(v2, (uint64_t *)&off_24FB715E8, (llvm::Triple *)a1);
          *(_QWORD *)v129 = &off_24FB71238;
          *(_DWORD *)(v129 + 592) = 4;
          *(_DWORD *)(v129 + 516) = 256;
          *(_BYTE *)(v129 + 624) &= ~0x10u;
          *(_QWORD *)(v129 + 136) = ".mcount";
          *(_DWORD *)(v129 + 506) = 16777472;
          return v2;
        default:
          v2 = operator new();
          sub_22F427488(v2, (llvm::Triple *)a1);
          return v2;
      }
LABEL_148:
      v27 = *(_DWORD *)(a1 + 24);
LABEL_149:
      if (v27 <= 0x2A)
      {
        if (((1 << v27) & 0x1EF0000) == 0)
        {
          if (((1 << v27) & 0x60000000000) != 0)
            *(_BYTE *)(v2 + 86) = 1;
          return v2;
        }
LABEL_151:
        v44 = "_mcount";
LABEL_152:
        *(_QWORD *)(v2 + 136) = v44;
      }
      return v2;
    case 0x2B:
      v2 = operator new();
      sub_22F425AFC((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x2C:
      v48 = operator new();
      v2 = v48;
      v49 = (llvm::Triple *)a1;
      v50 = (uint64_t)a2;
      v51 = 32;
      goto LABEL_61;
    case 0x2D:
      v48 = operator new();
      v2 = v48;
      v49 = (llvm::Triple *)a1;
      v50 = (uint64_t)a2;
      v51 = 64;
LABEL_61:
      sub_22F1FAC48(v48, v49, v50, v51);
      return v2;
    case 0x30:
      if (v6 > 0x21 || ((1 << v6) & 0x3F0000888) == 0)
        return 0;
      v53 = *(_DWORD *)(a1 + 44);
      if (v53 != 8 && v53 != 5)
        return 0;
      v2 = operator new();
      sub_22F437C90(v2, (llvm::Triple *)a1, a2);
      return v2;
    case 0x31:
      if (v6 > 0x21 || ((1 << v6) & 0x3F0000888) == 0)
        return 0;
      v55 = *(_DWORD *)(a1 + 44);
      if (v55 != 8 && v55 != 5)
        return 0;
      v2 = operator new();
      sub_22F437D30(v2, (llvm::Triple *)a1, a2);
      return v2;
    case 0x32:
      if (v6 != 20)
        return 0;
      v2 = operator new();
      sub_22F42626C((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x33:
      v2 = operator new();
      sub_22F426350((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x38:
      if (*(_QWORD *)(a1 + 36))
        return 0;
      v2 = operator new();
      sub_22F42759C((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x39:
      if (*(_QWORD *)(a1 + 36))
        return 0;
      v2 = operator new();
      sub_22F427634((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x3A:
      if (*(_QWORD *)(a1 + 36))
        return 0;
      v2 = operator new();
      sub_22F4276C8((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x3B:
      if (*(_QWORD *)(a1 + 36))
        return 0;
      v2 = operator new();
      sub_22F427760((uint64_t *)v2, (llvm::Triple *)a1);
      return v2;
    case 0x3E:
      v2 = operator new();
      v56 = sub_22F1E6848((uint64_t *)v2, (uint64_t *)&off_24FC45830, (llvm::Triple *)a1);
      *v56 = (uint64_t)&off_24FC45498;
      sub_22F1E6F0C((uint64_t)v56, "E-m:e-p:32:32-i64:64-a:0:32-n32-S64", 0x23uLL, (uint64_t)"");
      *(_BYTE *)(v2 + 144) = 4;
      *(_DWORD *)(v2 + 364) = 1;
      *(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 41) = 32;
      return v2;
    case 0x3F:
      if (*(_DWORD *)(a1 + 28))
        v57 = 0;
      else
        v57 = *(_DWORD *)(a1 + 32) == 0;
      if (!v57 || *(_DWORD *)(a1 + 44) != 7)
        return 0;
      if (!v6)
      {
        v2 = operator new();
        v84 = sub_22F4354BC(v2, off_24FB73EB8, (llvm::Triple *)a1);
        v102 = off_24FB73B10;
        goto LABEL_254;
      }
      if (v6 == 40)
      {
        v2 = operator new();
        v103 = sub_22F4354BC(v2, off_24FB75140, (llvm::Triple *)a1);
        *(_QWORD *)(v103 + 136) = "__mcount";
        *(_DWORD *)(v103 + 148) = 7;
        *(_BYTE *)(v103 + 86) = 1;
        v104 = off_24FB74D90;
        goto LABEL_257;
      }
      if (v6 != 39)
        return 0;
      v2 = operator new();
      v7 = sub_22F4354BC(v2, off_24FB72888, (llvm::Triple *)a1);
      *(_QWORD *)(v7 + 136) = "__mcount";
      *(_DWORD *)(v7 + 148) = 7;
      *(_BYTE *)(v7 + 86) = 1;
      v8 = off_24FB724D8;
      goto LABEL_163;
    case 0x40:
      if (*(_DWORD *)(a1 + 28))
        v59 = 0;
      else
        v59 = *(_DWORD *)(a1 + 32) == 0;
      if (!v59 || *(_DWORD *)(a1 + 44) != 7)
        return 0;
      if (v6)
      {
        if (v6 == 40)
        {
          v2 = operator new();
          v103 = sub_22F435758(v2, (uint64_t *)off_24FB79030, (llvm::Triple *)a1);
          *(_QWORD *)(v103 + 136) = "__mcount";
          *(_DWORD *)(v103 + 148) = 7;
          *(_BYTE *)(v103 + 86) = 1;
          v104 = off_24FB78C80;
LABEL_257:
          *(_QWORD *)v103 = v104;
          *(_BYTE *)(v103 + 423) = 64;
        }
        else if (v6 == 39)
        {
          v2 = operator new();
          v7 = sub_22F435758(v2, (uint64_t *)off_24FB76778, (llvm::Triple *)a1);
          *(_QWORD *)(v7 + 136) = "__mcount";
          *(_DWORD *)(v7 + 148) = 7;
          *(_BYTE *)(v7 + 86) = 1;
          v8 = off_24FB763C8;
LABEL_163:
          *(_QWORD *)v7 = v8;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        v2 = operator new();
        v84 = sub_22F435758(v2, (uint64_t *)off_24FB77DA8, (llvm::Triple *)a1);
        v102 = off_24FB77A00;
LABEL_254:
        *(_QWORD *)v84 = v102;
        *(_QWORD *)(v84 + 136) = "__mcount";
        *(_DWORD *)(v84 + 148) = 7;
LABEL_255:
        *(_BYTE *)(v84 + 86) = 1;
      }
      return v2;
    case 0x41:
      v2 = operator new();
      v61 = sub_22F1F62F8(v2, (uint64_t *)off_24FB7A660, (llvm::Triple *)a1, (uint64_t)a2);
      v62 = &off_24FB7A2B8;
LABEL_147:
      *(_QWORD *)v61 = v62;
      *(_DWORD *)(v61 + 612) = 6;
      goto LABEL_148;
    case 0x42:
      v2 = operator new();
      v63 = sub_22F1F1FE8(v2, off_24FB7BC98, (llvm::Triple *)a1, (uint64_t)a2);
      v64 = off_24FB7B8E8;
LABEL_113:
      *(_QWORD *)v63 = v64;
      *(_DWORD *)(v63 + 556) = 6;
      goto LABEL_148;
    case 0x43:
      v2 = operator new();
      v35 = sub_22F436144(v2, (llvm::Triple *)a1);
      v36 = &off_24FB7CF40;
      goto LABEL_30;
    default:
      return v2;
  }
}

uint64_t sub_22F1EB968(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int16 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  _QWORD *v11;
  size_t v12;
  BOOL v13;
  std::string __p;

  v4 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC4F9B0, this);
  *v4 = (uint64_t)&off_24FC4F618;
  v5 = v4 + 46;
  v4[47] = 0;
  v4[48] = 0;
  v4[46] = 0;
  *(uint64_t *)((char *)v4 + 391) = 0;
  v4[50] = 0;
  *(_DWORD *)((char *)v4 + 407) = 0;
  *(uint64_t *)((char *)v4 + 420) = 0;
  *(uint64_t *)((char *)v4 + 428) = 0;
  *(uint64_t *)((char *)v4 + 412) = 0;
  *((_DWORD *)v4 + 109) = 0;
  *((_DWORD *)v4 + 37) = 6;
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 0x10)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
    v6 = 13167;
LABEL_5:
    v7 = v6 | 0x320000;
    goto LABEL_7;
  }
  if (*((_DWORD *)this + 10) == 2)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
    v6 = 13166;
    goto LABEL_5;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  v7 = 3421806;
LABEL_7:
  LODWORD(__p.__r_.__value_.__l.__data_) = v7;
  sub_22F42DF24(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *(unsigned __int8 *)(a1 + 439);
  if ((v8 & 0x80u) == 0)
    v9 = v8 & 0x7F;
  else
    v9 = *(_QWORD *)(a1 + 424);
  v10 = "mips64r2";
  if (v9 == 3)
  {
    v11 = (_QWORD *)(a1 + 416);
    if ((v8 & 0x80) != 0)
    {
      v11 = (_QWORD *)*v11;
      v8 = *(_QWORD *)(a1 + 424);
    }
    if (v8 >= 3)
      v12 = 3;
    else
      v12 = v8;
    v13 = memcmp(v11, "o32", v12) == 0;
    if (v8 != 3)
      v13 = 0;
    if (v13)
      v10 = "mips32r2";
  }
  MEMORY[0x2348A0C14](v5, v10);
  *(_BYTE *)(a1 + 398) = (*((_DWORD *)this + 9) & 0xFFFFFFF7) == 5;
  return a1;
}

uint64_t sub_22F1EBAF4(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  llvm::APFloatBase *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  std::string *v11;
  size_t size;
  std::string v14;

  v4 = sub_22F1EE0AC(a1, (uint64_t *)off_24FAEA498, a2);
  *(_QWORD *)v4 = &off_24FAEA100;
  *(_WORD *)(v4 + 448) = 16448;
  *(_WORD *)(v4 + 468) = 16448;
  *(_DWORD *)(v4 + 564) = 7;
  *(_DWORD *)(v4 + 592) = 7;
  memset(&v14, 0, sizeof(v14));
  if (*((_DWORD *)a2 + 9) == 21)
  {
    v5 = (llvm::APFloatBase *)MEMORY[0x2348A0C14](&v14, "E-m:a-i64:64-n32:64");
    v6 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 14) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 13) = 32;
    *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 15) = 32;
    v7 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v5);
    *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24) + 88) = v7;
  }
  else
  {
    if (*((_DWORD *)a2 + 6) == 24)
    {
      MEMORY[0x2348A0C14](&v14, "e-m:e-i64:64-n32:64");
      v8 = "elfv2";
    }
    else
    {
      MEMORY[0x2348A0C14](&v14, "E-m:e-i64:64-n32:64");
      v8 = "elfv1";
    }
    v7 = (llvm::APFloatBase *)MEMORY[0x2348A0C14](a1 + 424, v8);
  }
  v9 = *((_DWORD *)a2 + 9);
  if ((v9 | 8) == 0xD || (*((_DWORD *)a2 + 10) & 0xFFFFFFFC) == 0xC)
  {
    v10 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 15) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v10 - 24) + 14) = 64;
    *(_QWORD *)(a1 + *(_QWORD *)(v10 - 24) + 88) = llvm::APFloatBase::IEEEdouble(v7);
  }
  if (v9 == 21 || v9 == 9)
    std::string::append(&v14, "-S128-v256:256:256-v512:512:512");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v14;
  else
    v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v14.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v14.__r_.__value_.__l.__size_;
  sub_22F1E6F0C(a1, v11, size, (uint64_t)"");
  *(_WORD *)(a1 + 94) = 16512;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t sub_22F1EBCCC(std::string::size_type a1, uint64_t a2)
{
  const std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::string *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const std::string *v14;
  std::string::size_type v15;
  const std::string *v16;
  std::string::pointer v17;
  std::string::pointer data;
  const std::string *v19;
  std::string::size_type size;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  size_t v26;
  std::string::size_type v27;
  const std::string *v28;
  std::string::pointer v29;
  std::string::pointer v30;
  const std::string *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  const std::string *v34;
  std::string::pointer v35;
  std::string::pointer v36;
  char v37;
  int v38;
  const std::string *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  const std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  const std::string *v45;
  uint64_t v46;
  uint64_t *i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void *v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  std::string::size_type v68;
  char *v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  char *v83;
  std::string::size_type v84;
  char *v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  std::string *v88;
  size_t v89;
  uint64_t v90;
  const std::string::value_type *v91;
  std::string::size_type v92;
  const std::string *v93;
  std::string *p_dst;
  uint64_t v95;
  uint64_t v96;
  std::string *v97;
  std::string::size_type v98;
  char v99;
  std::string::pointer v100;
  unint64_t v101;
  std::string::size_type v102;
  std::string::size_type v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  std::string::size_type v110;
  unint64_t v111;
  std::string::size_type v112;
  char *v113;
  __int128 v114;
  int64x2_t v115;
  std::string::pointer v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  const void **v120;
  unint64_t v121;
  uint64_t v122;
  const std::string *v123;
  std::string::size_type v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  size_t v129;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::string __dst;
  __int16 v136;
  __int16 v137;
  void *__p[2];
  char v139;
  std::string v140;
  void *v141[3];
  __int128 v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v4 = *(const std::string **)a2;
  WORD4(v142) = 260;
  v141[0] = (void *)v4;
  MEMORY[0x23489F1BC](__p, v141);
  v5 = sub_22F1E87E4((uint64_t)__p, *(const std::string **)a2);
  v6 = v5;
  if (!v5)
  {
    *(_QWORD *)(a1 + 312) = 0x4300000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v141[0] = (void *)(a1 + 320);
    v141[1] = 0;
    v141[2] = (void *)a1;
    LOWORD(v142) = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v22 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(a1 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
    }
    *(_DWORD *)(a1 + 776) = 0;
    if (v139 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if (v139 >= 0)
      v26 = v139 & 0x7F;
    else
      v26 = (size_t)__p[1];
    goto LABEL_220;
  }
  v8 = *(const std::string **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(std::__shared_weak_count **)(v5 + 24);
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 24) = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(const std::string **)a2;
  if (*(char *)(*(_QWORD *)a2 + 71) < 0)
  {
    if (!v14[2].__r_.__value_.__l.__size_)
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(*(_QWORD *)a2 + 71))
  {
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(uint64_t, const std::string *))(*(_QWORD *)v6 + 456))(v6, v14 + 2))
  {
    *(_QWORD *)(a1 + 312) = 0x4100000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v141[0] = (void *)(a1 + 320);
    v141[1] = 0;
    v141[2] = (void *)a1;
    LOWORD(v142) = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v49 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v49)
    {
      v50 = *(_QWORD *)(a1 + 768);
      v51 = 56 * v49;
      do
      {
        if (*(char *)(v50 + v51 - 9) < 0)
          operator delete(*(void **)(v50 + v51 - 32));
        v51 -= 56;
      }
      while (v51);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v52 = *(_BYTE *)(*(_QWORD *)a2 + 71);
    if (v52 >= 0)
      v53 = (void *)(*(_QWORD *)a2 + 48);
    else
      v53 = *(void **)(*(_QWORD *)a2 + 48);
    if (v52 >= 0)
      v54 = v52 & 0x7F;
    else
      v54 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    sub_22E3B89A8((unsigned __int8 **)v141, v53, v54);
    sub_22E3BB0B8((uint64_t)v141);
    v141[0] = &v141[2];
    v141[1] = (void *)0x2000000000;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 464))(v6, v141);
    if (!LODWORD(v141[1]))
      goto LABEL_159;
    *(_QWORD *)(a1 + 312) = 0x7300000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = a1 + 320;
    __dst.__r_.__value_.__r.__words[2] = a1;
    v136 = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v61 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v61)
    {
      v62 = *(_QWORD *)(a1 + 768);
      v63 = 56 * v61;
      do
      {
        if (*(char *)(v62 + v63 - 9) < 0)
          operator delete(*(void **)(v62 + v63 - 32));
        v63 -= 56;
      }
      while (v63);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v64 = (char *)v141[0];
    v65 = (int)v141[1];
    memset(&v140, 0, sizeof(v140));
    if (LODWORD(v141[1]))
    {
      v66 = 0;
      v67 = (char *)v141[0] + 16 * LODWORD(v141[1]);
      v68 = 2 * LODWORD(v141[1]) - 2;
      do
      {
        v68 += *(_QWORD *)((char *)v141[0] + v66 + 8);
        v66 += 16;
      }
      while (16 * LODWORD(v141[1]) != v66);
      std::string::reserve(&v140, v68);
      std::string::append(&v140, *(const std::string::value_type **)v64, *((_QWORD *)v64 + 1));
      if (v65 != 1)
      {
        v69 = v64 + 16;
        do
        {
          std::string::append(&v140, ", ", 2uLL);
          v70 = *(const std::string::value_type **)v69;
          v71 = *((_QWORD *)v69 + 1);
          v69 += 16;
          std::string::append(&v140, v70, v71);
        }
        while (v69 != v67);
      }
    }
    goto LABEL_150;
  }
  v14 = *(const std::string **)a2;
LABEL_18:
  v15 = HIBYTE(v14[3].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v14[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14[3].__r_.__value_.__l.__size_)
      goto LABEL_32;
    goto LABEL_24;
  }
  if (*((_BYTE *)&v14[3].__r_.__value_.__s + 23))
  {
LABEL_24:
    data = v14[3].__r_.__value_.__l.__data_;
    v16 = v14 + 3;
    v17 = data;
    if ((v15 & 0x80u) == 0)
      v19 = v16;
    else
      v19 = (const std::string *)v17;
    size = v16->__r_.__value_.__l.__size_;
    if ((v15 & 0x80u) == 0)
      v21 = v15;
    else
      v21 = size;
    if ((*(unsigned int (**)(uint64_t, const std::string *, std::string::size_type))(*(_QWORD *)v6 + 488))(v6, v19, v21))
    {
      v14 = *(const std::string **)a2;
      goto LABEL_32;
    }
    *(_QWORD *)(a1 + 312) = 0x4100000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v141[0] = (void *)(a1 + 320);
    v141[1] = 0;
    v141[2] = (void *)a1;
    LOWORD(v142) = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v55 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v55)
    {
      v56 = *(_QWORD *)(a1 + 768);
      v57 = 56 * v55;
      do
      {
        if (*(char *)(v56 + v57 - 9) < 0)
          operator delete(*(void **)(v56 + v57 - 32));
        v57 -= 56;
      }
      while (v57);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v58 = *(_BYTE *)(*(_QWORD *)a2 + 95);
    if (v58 >= 0)
      v59 = (void *)(*(_QWORD *)a2 + 72);
    else
      v59 = *(void **)(*(_QWORD *)a2 + 72);
    if (v58 >= 0)
      v60 = v58 & 0x7F;
    else
      v60 = *(_QWORD *)(*(_QWORD *)a2 + 80);
    sub_22E3B89A8((unsigned __int8 **)v141, v59, v60);
    sub_22E3BB0B8((uint64_t)v141);
    v141[0] = &v141[2];
    v141[1] = (void *)0x2000000000;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 472))(v6, v141);
    if (!LODWORD(v141[1]))
    {
LABEL_159:
      if (v141[0] != &v141[2])
        free(v141[0]);
LABEL_221:
      if (!v6)
        goto LABEL_223;
      goto LABEL_222;
    }
    *(_QWORD *)(a1 + 312) = 0x7300000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = a1 + 320;
    __dst.__r_.__value_.__r.__words[2] = a1;
    v136 = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v77 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v77)
    {
      v78 = *(_QWORD *)(a1 + 768);
      v79 = 56 * v77;
      do
      {
        if (*(char *)(v78 + v79 - 9) < 0)
          operator delete(*(void **)(v78 + v79 - 32));
        v79 -= 56;
      }
      while (v79);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v80 = (char *)v141[0];
    v81 = (int)v141[1];
    memset(&v140, 0, sizeof(v140));
    if (LODWORD(v141[1]))
    {
      v82 = 0;
      v83 = (char *)v141[0] + 16 * LODWORD(v141[1]);
      v84 = 2 * LODWORD(v141[1]) - 2;
      do
      {
        v84 += *(_QWORD *)((char *)v141[0] + v82 + 8);
        v82 += 16;
      }
      while (16 * LODWORD(v141[1]) != v82);
      std::string::reserve(&v140, v84);
      std::string::append(&v140, *(const std::string::value_type **)v80, *((_QWORD *)v80 + 1));
      if (v81 != 1)
      {
        v85 = v80 + 16;
        do
        {
          std::string::append(&v140, ", ", 2uLL);
          v86 = *(const std::string::value_type **)v85;
          v87 = *((_QWORD *)v85 + 1);
          v85 += 16;
          std::string::append(&v140, v86, v87);
        }
        while (v85 != v83);
      }
    }
LABEL_150:
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v140;
    else
      v88 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v89 = *((_BYTE *)&v140.__r_.__value_.__s + 23) & 0x7F;
    else
      v89 = v140.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&__dst, v88, v89);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__dst);
    goto LABEL_159;
  }
LABEL_32:
  if (SHIBYTE(v14[5].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14[5].__r_.__value_.__l.__size_)
      goto LABEL_52;
  }
  else if (!*((_BYTE *)&v14[5].__r_.__value_.__s + 23))
  {
    goto LABEL_52;
  }
  if (!(*(unsigned int (**)(uint64_t, const std::string *))(*(_QWORD *)v6 + 504))(v6, v14 + 5))
  {
    *(_QWORD *)(a1 + 312) = 0x4000000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v141[0] = (void *)(a1 + 320);
    v141[1] = 0;
    v141[2] = (void *)a1;
    LOWORD(v142) = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v72 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v72)
    {
      v73 = *(_QWORD *)(a1 + 768);
      v74 = 56 * v72;
      do
      {
        if (*(char *)(v73 + v74 - 9) < 0)
          operator delete(*(void **)(v73 + v74 - 32));
        v74 -= 56;
      }
      while (v74);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v75 = *(_QWORD *)a2 + 120;
    v76 = *(void ***)v75;
LABEL_214:
    v128 = *(_BYTE *)(v75 + 23);
    if (v128 >= 0)
      v25 = (void **)v75;
    else
      v25 = v76;
    v129 = *(_QWORD *)(v75 + 8);
    if (v128 >= 0)
      v26 = v128 & 0x7F;
    else
      v26 = v129;
LABEL_220:
    sub_22E3B89A8((unsigned __int8 **)v141, v25, v26);
    sub_22E3BB0B8((uint64_t)v141);
    goto LABEL_221;
  }
  v14 = *(const std::string **)a2;
LABEL_52:
  v27 = HIBYTE(v14[4].__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v14[4].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&v14[4].__r_.__value_.__s + 23))
      goto LABEL_66;
    goto LABEL_58;
  }
  if (v14[4].__r_.__value_.__l.__size_)
  {
LABEL_58:
    v30 = v14[4].__r_.__value_.__l.__data_;
    v28 = v14 + 4;
    v29 = v30;
    if ((v27 & 0x80u) == 0)
      v31 = v28;
    else
      v31 = (const std::string *)v29;
    v32 = v28->__r_.__value_.__l.__size_;
    if ((v27 & 0x80u) == 0)
      v33 = v27;
    else
      v33 = v32;
    if ((*(unsigned int (**)(uint64_t, const std::string *, std::string::size_type))(*(_QWORD *)v6 + 512))(v6, v31, v33))
    {
      v14 = *(const std::string **)a2;
      goto LABEL_66;
    }
    *(_QWORD *)(a1 + 312) = 0x4200000000;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v141[0] = (void *)(a1 + 320);
    v141[1] = 0;
    v141[2] = (void *)a1;
    LOWORD(v142) = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v125 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v125)
    {
      v126 = *(_QWORD *)(a1 + 768);
      v127 = 56 * v125;
      do
      {
        if (*(char *)(v126 + v127 - 9) < 0)
          operator delete(*(void **)(v126 + v127 - 32));
        v127 -= 56;
      }
      while (v127);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v75 = *(_QWORD *)a2 + 96;
    v76 = *(void ***)v75;
    goto LABEL_214;
  }
LABEL_66:
  v36 = v14[2].__r_.__value_.__l.__data_;
  v34 = v14 + 2;
  v35 = v36;
  v37 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v38 = v37;
  if (v37 >= 0)
    v39 = v34;
  else
    v39 = (const std::string *)v35;
  v40 = v37 & 0x7F;
  if (v38 >= 0)
    v41 = v40;
  else
    v41 = v34->__r_.__value_.__l.__size_;
  if (!(*(unsigned int (**)(uint64_t, std::string::size_type *, std::string::size_type, const std::string *, std::string::size_type, std::string::size_type *))(*(_QWORD *)v6 + 440))(v6, &v34[7].__r_.__value_.__l.__size_, a1, v39, v41, &v34[5].__r_.__value_.__l.__size_))goto LABEL_222;
  v42 = *(const std::string **)a2;
  v43 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  v44 = *(_QWORD *)(*(_QWORD *)a2 + 208);
  v45 = *(const std::string **)a2;
  if (v44 != v43)
  {
    do
    {
      if (*(char *)(v44 - 1) < 0)
        operator delete(*(void **)(v44 - 24));
      v44 -= 24;
    }
    while (v44 != v43);
    v45 = *(const std::string **)a2;
  }
  v42[8].__r_.__value_.__r.__words[2] = v43;
  v46 = LODWORD(v45[9].__r_.__value_.__r.__words[2]);
  if ((_DWORD)v46)
  {
    for (i = (uint64_t *)v45[9].__r_.__value_.__l.__size_; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)v45[9].__r_.__value_.__l.__size_;
  }
  v134 = v45[9].__r_.__value_.__l.__size_ + 8 * v46;
  if (i != (uint64_t *)v134)
  {
    v90 = *i;
    while (1)
    {
      if (*(_BYTE *)(v90 + 8))
        v91 = "+";
      else
        v91 = "-";
      v92 = *(_QWORD *)v90;
      if (*(_QWORD *)v90 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_235:
        abort();
      v93 = *(const std::string **)a2;
      if (v92 >= 0x17)
      {
        v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v92 | 7) != 0x17)
          v95 = v92 | 7;
        v96 = v95 + 1;
        p_dst = (std::string *)operator new(v95 + 1);
        __dst.__r_.__value_.__l.__size_ = v92;
        __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)v90;
        p_dst = &__dst;
        if (!v92)
          goto LABEL_175;
      }
      memmove(p_dst, (const void *)(v90 + 16), v92);
LABEL_175:
      p_dst->__r_.__value_.__s.__data_[v92] = 0;
      v97 = std::string::insert(&__dst, 0, v91);
      v98 = v97->__r_.__value_.__r.__words[0];
      v140.__r_.__value_.__r.__words[0] = v97->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v97->__r_.__value_.__r.__words[1] + 7);
      v99 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      v100 = v93[9].__r_.__value_.__l.__data_;
      v101 = v93[8].__r_.__value_.__r.__words[2];
      if (v101 >= (unint64_t)v100)
      {
        v103 = v93[8].__r_.__value_.__l.__size_;
        v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - v103) >> 3);
        v105 = v104 + 1;
        if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_235;
        v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v100[-v103] >> 3);
        if (2 * v106 > v105)
          v105 = 2 * v106;
        if (v106 >= 0x555555555555555)
          v107 = 0xAAAAAAAAAAAAAAALL;
        else
          v107 = v105;
        *((_QWORD *)&v142 + 1) = v93 + 9;
        if (v107)
        {
          if (v107 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v108 = (char *)operator new(24 * v107);
        }
        else
        {
          v108 = 0;
        }
        v109 = &v108[24 * v104];
        v110 = v140.__r_.__value_.__r.__words[0];
        *(_QWORD *)v109 = v98;
        *((_QWORD *)v109 + 1) = v110;
        *(_QWORD *)(v109 + 15) = *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 7);
        v109[23] = v99;
        v140.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 7) = 0;
        v112 = v93[8].__r_.__value_.__l.__size_;
        v111 = v93[8].__r_.__value_.__r.__words[2];
        if (v111 == v112)
        {
          v115 = vdupq_n_s64(v111);
          v113 = &v108[24 * v104];
        }
        else
        {
          v113 = &v108[24 * v104];
          do
          {
            v114 = *(_OWORD *)(v111 - 24);
            *((_QWORD *)v113 - 1) = *(_QWORD *)(v111 - 8);
            *(_OWORD *)(v113 - 24) = v114;
            v113 -= 24;
            *(_QWORD *)(v111 - 16) = 0;
            *(_QWORD *)(v111 - 8) = 0;
            *(_QWORD *)(v111 - 24) = 0;
            v111 -= 24;
          }
          while (v111 != v112);
          v115 = *(int64x2_t *)&v93[8].__r_.__value_.__r.__words[1];
        }
        v102 = (std::string::size_type)(v109 + 24);
        v93[8].__r_.__value_.__l.__size_ = (std::string::size_type)v113;
        v93[8].__r_.__value_.__r.__words[2] = (std::string::size_type)(v109 + 24);
        *(int64x2_t *)&v141[1] = v115;
        v116 = v93[9].__r_.__value_.__l.__data_;
        v93[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&v108[24 * v107];
        *(_QWORD *)&v142 = v116;
        v141[0] = (void *)v115.i64[0];
        sub_22E3B8B94((uint64_t)v141);
      }
      else
      {
        *(_QWORD *)v101 = v98;
        *(_QWORD *)(v101 + 8) = v140.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v101 + 15) = *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v101 + 23) = v99;
        v102 = v101 + 24;
      }
      v93[8].__r_.__value_.__r.__words[2] = v102;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      do
      {
        v117 = i[1];
        ++i;
        v90 = v117;
        if (v117)
          v118 = v90 == -8;
        else
          v118 = 1;
      }
      while (v118);
      if (i == (uint64_t *)v134)
      {
        v45 = *(const std::string **)a2;
        break;
      }
    }
  }
  v119 = v45[8].__r_.__value_.__l.__size_;
  v120 = (const void **)v45[8].__r_.__value_.__r.__words[2];
  v121 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v120 - v119) >> 3));
  v122 = v120 == (const void **)v119 ? 0 : v121;
  sub_22E63C10C(v119, v120, (uint64_t)v141, v122, 1);
  if (((*(uint64_t (**)(uint64_t, uint64_t, std::string::size_type))(*(_QWORD *)v6 + 560))(v6, *(_QWORD *)a2 + 200, a1) & 1) == 0)goto LABEL_222;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 784))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 800))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
  v123 = *(const std::string **)a2;
  if (*(char *)(*(_QWORD *)a2 + 383) < 0)
    v124 = v123[15].__r_.__value_.__l.__size_;
  else
    v124 = *(unsigned __int8 *)(*(_QWORD *)a2 + 383);
  if (v124)
  {
    v137 = 260;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123[15];
    MEMORY[0x23489F1BC](v141, &__dst);
    v131 = (void **)(v6 + 304);
    if (*(_BYTE *)(v6 + 352))
    {
      if (*(char *)(v6 + 327) < 0)
        operator delete(*v131);
      *(_OWORD *)v131 = *(_OWORD *)v141;
      v132 = v143;
      *(void **)(v6 + 320) = v141[2];
      *(_QWORD *)(v6 + 344) = v132;
      *(_OWORD *)(v6 + 328) = v142;
    }
    else
    {
      *(_OWORD *)v131 = *(_OWORD *)v141;
      v133 = v143;
      *(void **)(v6 + 320) = v141[2];
      memset(v141, 0, sizeof(v141));
      *(_QWORD *)(v6 + 344) = v133;
      *(_OWORD *)(v6 + 328) = v142;
      *(_BYTE *)(v6 + 352) = 1;
    }
  }
  if (((*(uint64_t (**)(uint64_t, std::string::size_type))(*(_QWORD *)v6 + 832))(v6, a1) & 1) == 0)
  {
LABEL_222:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v6 = 0;
  }
LABEL_223:
  if (v139 < 0)
    operator delete(__p[0]);
  return v6;
}

uint64_t sub_22F1EC954(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  size_t v18;
  uint64_t v19[4];
  _QWORD v20[2];
  void *__p[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;

  v6 = a1[2] + 256;
  v19[0] = (uint64_t)a1;
  v19[1] = a2;
  v19[2] = v6;
  v19[3] = a3;
  sub_22F1ECFB8(v19, "cl_khr_byte_addressable_store", 0x1DuLL);
  sub_22F1ECFB8(v19, "cl_khr_global_int32_base_atomics", 0x20uLL);
  sub_22F1ECFB8(v19, "cl_khr_global_int32_extended_atomics", 0x24uLL);
  sub_22F1ECFB8(v19, "cl_khr_local_int32_base_atomics", 0x1FuLL);
  sub_22F1ECFB8(v19, "cl_khr_local_int32_extended_atomics", 0x23uLL);
  sub_22F1ED174(v19, "cl_khr_fp64", 0xBuLL, 1, 100, 28);
  sub_22F1ED324(v19, "cl_khr_fp16", 0xBuLL, 100);
  sub_22F1ED324(v19, "cl_khr_int64_base_atomics", 0x19uLL, 100);
  sub_22F1ED324(v19, "cl_khr_int64_extended_atomics", 0x1DuLL, 100);
  LOBYTE(v23) = 1;
  *(_QWORD *)((char *)&v23 + 4) = 0x800000064;
  HIDWORD(v23) = 16;
  LOWORD(v24) = 0;
  if (sub_22F420670((uint64_t)&v23, a2)
    && ((*(uint64_t (**)(_QWORD *, uint64_t, const char *, uint64_t))(*a1 + 520))(a1, v6, "cl_khr_3d_image_writes", 22) & 1) == 0)
  {
    *(_QWORD *)(a3 + 312) = 0x8C00000000;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v23 = (unint64_t)(a3 + 320);
    v24 = a3;
    v25 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v9 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(a3 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
    }
    *(_DWORD *)(a3 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&v23, "cl_khr_3d_image_writes", 0x16uLL);
    v12 = HIDWORD(*(_QWORD *)(a2 + 56)) & 1;
    v13 = (unsigned __int8 *)v23;
    if (!(_QWORD)v23)
    {
      v13 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v23 + 1));
      *(_QWORD *)&v23 = v13;
    }
    v13[*v13 + 1] = 3;
    v14 = v23;
    v15 = *(unsigned __int8 *)v23;
    *(_BYTE *)v23 = v15 + 1;
    *(_QWORD *)(v14 + 8 * v15 + 16) = v12;
    v20[0] = sub_22F41FC54(a2);
    v20[1] = v16;
    llvm::VersionTuple::getAsString((llvm::VersionTuple *)v20);
    if (v22 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if (v22 >= 0)
      v18 = v22 & 0x7F;
    else
      v18 = (size_t)__p[1];
    sub_22E3B89A8((unsigned __int8 **)&v23, v17, v18);
    if (v22 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)&v23);
  }
  sub_22F1ED324(v19, "cles_khr_int64", 0xEuLL, 110);
  sub_22F1ED324(v19, "cl_khr_depth_images", 0x13uLL, 120);
  sub_22F1ED324(v19, "cl_khr_gl_msaa_sharing", 0x16uLL, 120);
  sub_22F1ED324(v19, "cl_khr_mipmap_image", 0x13uLL, 200);
  sub_22F1ED324(v19, "cl_khr_mipmap_image_writes", 0x1AuLL, 200);
  sub_22F1ED324(v19, "cl_khr_srgb_image_writes", 0x18uLL, 200);
  sub_22F1ED324(v19, "cl_khr_subgroups", 0x10uLL, 200);
  sub_22F1ED324(v19, "cl_clang_storage_class_specifiers", 0x21uLL, 100);
  sub_22F1ED324(v19, "__cl_clang_function_pointers", 0x1CuLL, 100);
  sub_22F1ED324(v19, "__cl_clang_variadic_functions", 0x1DuLL, 100);
  sub_22F1ED324(v19, "__cl_clang_non_portable_kernel_param_types", 0x2AuLL, 100);
  sub_22F1ED324(v19, "__cl_clang_bitfields", 0x14uLL, 100);
  sub_22F1ED324(v19, "cl_APPLE_BOOL_vec", 0x11uLL, 100);
  sub_22F1ED324(v19, "cl_APPLE_vload_vstore_half", 0x1AuLL, 100);
  sub_22F1ED324(v19, "cl_amd_media_ops", 0x10uLL, 100);
  sub_22F1ED324(v19, "cl_amd_media_ops2", 0x11uLL, 100);
  sub_22F1ED324(v19, "cl_arm_integer_dot_product_int8", 0x1FuLL, 120);
  sub_22F1ED324(v19, "cl_arm_integer_dot_product_accumulate_int8", 0x2AuLL, 120);
  sub_22F1ED324(v19, "cl_arm_integer_dot_product_accumulate_int16", 0x2BuLL, 120);
  sub_22F1ED324(v19, "cl_arm_integer_dot_product_accumulate_saturate_int8", 0x33uLL, 120);
  sub_22F1ED324(v19, "cl_intel_subgroups", 0x12uLL, 120);
  sub_22F1ED324(v19, "cl_intel_subgroups_short", 0x18uLL, 120);
  sub_22F1ED324(v19, "cl_intel_device_side_avc_motion_estimation", 0x2AuLL, 120);
  sub_22F1ED174(v19, "__opencl_c_pipes", 0x10uLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_generic_address_space", 0x20uLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_atomic_order_acq_rel", 0x1FuLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_atomic_order_seq_cst", 0x1FuLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_subgroups", 0x14uLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_3d_image_writes", 0x1AuLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_device_enqueue", 0x19uLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_read_write_images", 0x1CuLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_program_scope_global_variables", 0x29uLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_fp64", 0xFuLL, 0, 300, 16);
  sub_22F1ED174(v19, "__opencl_c_images", 0x11uLL, 0, 300, 16);
  v7 = *(_QWORD *)(a2 + 56);
  if ((v7 & 0x100000000) == 0)
  {
    if (v7 >= 0x12C)
      goto LABEL_5;
    return 1;
  }
  if (*(_DWORD *)(a2 + 64) == 100)
    return 1;
LABEL_5:
  result = sub_22F1DBE88(a1, a3);
  if ((_DWORD)result)
    return sub_22F1DC00C(a1, a3);
  return result;
}

uint64_t sub_22F1ECFB8(uint64_t *a1, void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  size_t v19;
  _QWORD v20[2];
  void *__p[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;

  v7 = *a1;
  v6 = a1[1];
  LOBYTE(v23) = 1;
  *(_QWORD *)((char *)&v23 + 4) = 0x1E00000064;
  HIDWORD(v23) = 0;
  LOWORD(v24) = 0;
  result = sub_22F420670((uint64_t)&v23, v6);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, void *, size_t))(*(_QWORD *)v7 + 520))(v7, a1[2], a2, a3);
    if ((result & 1) == 0)
    {
      v9 = a1[3];
      *(_QWORD *)(v9 + 312) = 0x8C00000000;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
      v23 = (unint64_t)(v9 + 320);
      v24 = v9;
      v25 = 1;
      *(_BYTE *)(v9 + 320) = 0;
      *(_DWORD *)(v9 + 664) = 0;
      v10 = *(unsigned int *)(v9 + 776);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v9 + 768);
        v12 = 56 * v10;
        do
        {
          if (*(char *)(v11 + v12 - 9) < 0)
            operator delete(*(void **)(v11 + v12 - 32));
          v12 -= 56;
        }
        while (v12);
      }
      *(_DWORD *)(v9 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&v23, a2, a3);
      v13 = HIDWORD(*(_QWORD *)(a1[1] + 56)) & 1;
      v14 = (unsigned __int8 *)v23;
      if (!(_QWORD)v23)
      {
        v14 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v23 + 1));
        *(_QWORD *)&v23 = v14;
      }
      v14[*v14 + 1] = 3;
      v15 = v23;
      v16 = *(unsigned __int8 *)v23;
      *(_BYTE *)v23 = v16 + 1;
      *(_QWORD *)(v15 + 8 * v16 + 16) = v13;
      v20[0] = sub_22F41FC54(a1[1]);
      v20[1] = v17;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v20);
      if (v22 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if (v22 >= 0)
        v19 = v22 & 0x7F;
      else
        v19 = (size_t)__p[1];
      sub_22E3B89A8((unsigned __int8 **)&v23, v18, v19);
      if (v22 < 0)
        operator delete(__p[0]);
      return sub_22E3BB0B8((uint64_t)&v23);
    }
  }
  return result;
}

uint64_t sub_22F1ED174(uint64_t *a1, void *a2, size_t a3, char a4, int a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  size_t v22;
  _QWORD v23[2];
  void *__p[2];
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v10 = *a1;
  v9 = a1[1];
  LOBYTE(v26) = a4;
  HIDWORD(v26) = a5;
  LODWORD(v27) = 0;
  HIDWORD(v27) = a6;
  LOWORD(v28) = 0;
  result = sub_22F420670((uint64_t)&v26, v9);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, void *, size_t))(*(_QWORD *)v10 + 520))(v10, a1[2], a2, a3);
    if ((result & 1) == 0)
    {
      v12 = a1[3];
      *(_QWORD *)(v12 + 312) = 0x8C00000000;
      if (*(char *)(v12 + 311) < 0)
      {
        **(_BYTE **)(v12 + 288) = 0;
        *(_QWORD *)(v12 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v12 + 288) = 0;
        *(_BYTE *)(v12 + 311) = 0;
      }
      v26 = (unsigned __int8 *)(v12 + 320);
      v27 = 0;
      v28 = v12;
      v29 = 1;
      *(_BYTE *)(v12 + 320) = 0;
      *(_DWORD *)(v12 + 664) = 0;
      v13 = *(unsigned int *)(v12 + 776);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v12 + 768);
        v15 = 56 * v13;
        do
        {
          if (*(char *)(v14 + v15 - 9) < 0)
            operator delete(*(void **)(v14 + v15 - 32));
          v15 -= 56;
        }
        while (v15);
      }
      *(_DWORD *)(v12 + 776) = 0;
      sub_22E3B89A8(&v26, a2, a3);
      v16 = HIDWORD(*(_QWORD *)(a1[1] + 56)) & 1;
      v17 = v26;
      if (!v26)
      {
        v17 = (unsigned __int8 *)sub_22E3B8AAC(v27);
        v26 = v17;
      }
      v17[*v17 + 1] = 3;
      v18 = v26;
      v19 = *v26;
      *v26 = v19 + 1;
      *(_QWORD *)&v18[8 * v19 + 16] = v16;
      v23[0] = sub_22F41FC54(a1[1]);
      v23[1] = v20;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v23);
      if (v25 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if (v25 >= 0)
        v22 = v25 & 0x7F;
      else
        v22 = (size_t)__p[1];
      sub_22E3B89A8(&v26, v21, v22);
      if (v25 < 0)
        operator delete(__p[0]);
      return sub_22E3BB0B8((uint64_t)&v26);
    }
  }
  return result;
}

uint64_t sub_22F1ED324(uint64_t *a1, void *a2, size_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  size_t v20;
  _QWORD v21[2];
  void *__p[2];
  char v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  v8 = *a1;
  v7 = a1[1];
  LOBYTE(v24) = 1;
  HIDWORD(v24) = a4;
  v25 = 0;
  LOWORD(v26) = 0;
  result = sub_22F420670((uint64_t)&v24, v7);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, void *, size_t))(*(_QWORD *)v8 + 520))(v8, a1[2], a2, a3);
    if ((result & 1) == 0)
    {
      v10 = a1[3];
      *(_QWORD *)(v10 + 312) = 0x8C00000000;
      if (*(char *)(v10 + 311) < 0)
      {
        **(_BYTE **)(v10 + 288) = 0;
        *(_QWORD *)(v10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v10 + 288) = 0;
        *(_BYTE *)(v10 + 311) = 0;
      }
      v24 = (unsigned __int8 *)(v10 + 320);
      v25 = 0;
      v26 = v10;
      v27 = 1;
      *(_BYTE *)(v10 + 320) = 0;
      *(_DWORD *)(v10 + 664) = 0;
      v11 = *(unsigned int *)(v10 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v10 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
      }
      *(_DWORD *)(v10 + 776) = 0;
      sub_22E3B89A8(&v24, a2, a3);
      v14 = HIDWORD(*(_QWORD *)(a1[1] + 56)) & 1;
      v15 = v24;
      if (!v24)
      {
        v15 = (unsigned __int8 *)sub_22E3B8AAC(v25);
        v24 = v15;
      }
      v15[*v15 + 1] = 3;
      v16 = v24;
      v17 = *v24;
      *v24 = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = v14;
      v21[0] = sub_22F41FC54(a1[1]);
      v21[1] = v18;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v21);
      if (v23 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if (v23 >= 0)
        v20 = v23 & 0x7F;
      else
        v20 = (size_t)__p[1];
      sub_22E3B89A8(&v24, v19, v20);
      if (v23 < 0)
        operator delete(__p[0]);
      return sub_22E3BB0B8((uint64_t)&v24);
    }
  }
  return result;
}

BOOL sub_22F1ED4D8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v10;
  _BOOL4 v11;

  v4 = strlen(__s);
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = a1[1];
  if ((v5 & 0x80u) == 0)
    v7 = v5 & 0x7F;
  else
    v7 = a1[1];
  if (v4 != v7)
    return 0;
  v8 = v4;
  if ((v5 & 0x80) != 0)
  {
    if (v4 == -1)
      goto LABEL_17;
    a1 = (_QWORD *)*a1;
    v5 = v6;
  }
  else if (v4 == -1)
  {
LABEL_17:
    abort();
  }
  if (v5 >= v4)
    v10 = v4;
  else
    v10 = v5;
  v11 = memcmp(a1, __s, v10) == 0;
  return v5 == v8 && v11;
}

uint64_t sub_22F1ED578(uint64_t a1, llvm::Triple *a2, const std::string *a3)
{
  uint64_t v6;
  int v7;
  char isMacOSXVersionLT;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t OSVersion;
  uint64_t v19;

  v6 = sub_22F427C50(a1, &off_24FAE1F78, a2);
  *(_QWORD *)v6 = off_24FAE1FA8;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 81) = 0;
  std::string::operator=((std::string *)(v6 + 448), a3 + 15);
  v7 = *((_DWORD *)a2 + 9);
  if ((v7 & 0xFFFFFFF7) == 3)
  {
    isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT(a2);
LABEL_19:
    v12 = isMacOSXVersionLT ^ 1;
    goto LABEL_20;
  }
  if (v7 <= 28)
  {
    if (v7 == 7 || v7 == 28)
    {
      if (llvm::Triple::isArch64Bit(a2))
      {
        OSVersion = llvm::Triple::getOSVersion(a2);
        v19 = v11;
        v10 = 8;
LABEL_18:
        v17[0] = v10;
        v17[1] = 0;
        isMacOSXVersionLT = sub_22E3B38EC(&OSVersion, v17);
        goto LABEL_19;
      }
      if (llvm::Triple::isArch32Bit(a2))
      {
        if (*((_DWORD *)a2 + 10) == 20)
        {
          OSVersion = llvm::Triple::getOSVersion(a2);
          v19 = v14;
          v10 = 10;
        }
        else
        {
          OSVersion = llvm::Triple::getOSVersion(a2);
          v19 = v15;
          v10 = 9;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    if ((v7 - 29) < 2)
    {
      if (*((_DWORD *)a2 + 10) == 20)
      {
        OSVersion = llvm::Triple::getOSVersion(a2);
        v19 = v9;
        v10 = 3;
      }
      else
      {
        OSVersion = llvm::Triple::getOSVersion(a2);
        v19 = v13;
        v10 = 2;
      }
      goto LABEL_18;
    }
    if (v7 == 33)
    {
      v12 = 1;
LABEL_20:
      *(_BYTE *)(a1 + 81) = v12;
    }
  }
  *(_QWORD *)(a1 + 136) = "\x01mcount";
  return a1;
}

uint64_t sub_22F1ED6EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE3200;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE3D30;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FAE35B8);
}

void sub_22F1ED75C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE3200;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE3D30;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FAE35B8);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F1ED7E0(char **a1@<X1>, uint64_t a2@<X8>)
{
  _WORD *v4;
  int v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  std::string::value_type __s[8];
  char v11;
  std::string v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = **a1;
  if (v5 == 119 || v5 == 101)
  {
    *((_BYTE *)&v12.__r_.__value_.__s + 23) = 1;
    LOWORD(v12.__r_.__value_.__l.__data_) = 94;
    v11 = 2;
    *(_WORD *)__s = *v4;
    __s[2] = 0;
    v6 = std::string::append(&v12, __s, 2uLL);
    v7 = v6->__r_.__value_.__r.__words[0];
    v13[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v11 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    ++*a1;
    v9 = v13[0];
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v13 + 7);
    *(_BYTE *)(a2 + 23) = v8;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 1;
    if (v5 == 112)
    {
      *(_WORD *)a2 = 114;
    }
    else
    {
      *(_BYTE *)a2 = v5;
      *(_BYTE *)(a2 + 1) = 0;
    }
  }
}

uint64_t sub_22F1ED910(uint64_t a1, std::string *a2)
{
  const std::string *v2;
  char v4;
  BOOL v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  _BOOL4 v27;
  int v31;
  int v32;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  int v51;

  v2 = a2;
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  size = a2->__r_.__value_.__l.__size_;
  if (v4 < 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v7 = v4 & 0x7F;
  if (v5)
    v8 = size;
  else
    v8 = v7;
  v9 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1 + 480))(a1, a2, v8);
  if ((_DWORD)v9)
  {
    v10 = 0x100000003;
    std::string::operator=((std::string *)(a1 + 368), v2);
    v11 = *(_BYTE *)(a1 + 391);
    v12 = v11 < 0;
    v13 = *(int **)(a1 + 368);
    v14 = *(_QWORD *)(a1 + 376);
    if (v11 >= 0)
      v13 = (int *)(a1 + 368);
    v15 = v11 & 0x7F;
    if (!v12)
      v14 = v15;
    switch(v14)
    {
      case 2:
        if (*(_WORD *)v13 == 12897)
          v16 = 0x100010000;
        else
          v16 = 0;
        goto LABEL_104;
      case 3:
        v17 = *(_WORD *)v13 == 13364 && *((_BYTE *)v13 + 2) == 48;
        if (v17)
        {
          v16 = 0x100000001;
          goto LABEL_104;
        }
        if (*(_WORD *)v13 == 13620 && *((_BYTE *)v13 + 2) == 48)
        {
          v16 = 0x100000009;
          goto LABEL_104;
        }
        if (*(_WORD *)v13 == 12342 && *((_BYTE *)v13 + 2) == 49)
        {
          v16 = 0x100000001;
        }
        else
        {
          if (*(_WORD *)v13 == 12342 && *((_BYTE *)v13 + 2) == 50)
            goto LABEL_102;
          if (*(_WORD *)v13 == 12342 && *((_BYTE *)v13 + 2) == 51)
            goto LABEL_179;
          if (*(_WORD *)v13 == 12342 && *((_BYTE *)v13 + 2) == 52)
          {
LABEL_102:
            v16 = 0x100000003;
          }
          else
          {
            v23 = *(_WORD *)v13 == 12854 && *((_BYTE *)v13 + 2) == 48;
            if (v23 || (*(_WORD *)v13 == 13110 ? (v24 = *((_BYTE *)v13 + 2) == 48) : (v24 = 0), v24))
            {
              v16 = 0x100000003;
              goto LABEL_104;
            }
            v25 = *(_WORD *)v13 == 13623 && *((_BYTE *)v13 + 2) == 48;
            v16 = 0x100000003;
            if (!v25)
            {
              if (*(_WORD *)v13 != 14137 || *((_BYTE *)v13 + 2) != 48)
              {
LABEL_55:
                v16 = 0;
LABEL_104:
                v40 = 0;
                v38 = 0;
                v37 = 0;
                v41 = HIDWORD(v16) == 0;
                goto LABEL_138;
              }
              v16 = 0x100000047;
            }
          }
        }
LABEL_108:
        v27 = v14 == 4;
LABEL_109:
        v39 = 0;
        if (v27 && (v16 & 0x300000000) == 0)
        {
          if (*v13 == 879916912)
            goto LABEL_114;
          if (*v13 == 896694128)
            v16 = 0x1000000C6;
LABEL_97:
          v39 = 0;
        }
        goto LABEL_120;
      case 4:
        switch(*v13)
        {
          case 1697853494:
            goto LABEL_98;
          case 1697919030:
            v16 = 0x100000023;
            goto LABEL_108;
          case 808465463:
            goto LABEL_102;
        }
        v16 = 0x100000003;
        if (*v13 == 808793143)
          goto LABEL_108;
        if (*v13 != 863139696)
        {
          v16 = 0;
          v27 = 1;
          goto LABEL_109;
        }
        v16 = 0x100000002;
        goto LABEL_119;
      case 5:
        if (*v13 == 1697853494 && *((_BYTE *)v13 + 4) == 118)
        {
LABEL_98:
          v10 = 0x100000013;
          goto LABEL_179;
        }
        if (*v13 == 896694128 && *((_BYTE *)v13 + 4) == 120)
        {
          v16 = 0x1000001C6;
          goto LABEL_175;
        }
        if (*v13 == 913471344 && *((_BYTE *)v13 + 4) == 120)
        {
          v10 = 0x1000007C6;
        }
        else
        {
          v31 = *v13;
          v32 = *((unsigned __int8 *)v13 + 4);
          if (v31 != 829585264 || v32 != 48)
          {
            v16 = 0;
            goto LABEL_175;
          }
          v10 = 0x100007BC6;
        }
        goto LABEL_179;
      case 6:
        if (*v13 == 1702326128 && *((_WORD *)v13 + 2) == 13170)
        {
          v37 = 0;
          v38 = 0;
          v16 = 0x100000002;
LABEL_101:
          v39 = 1;
          goto LABEL_131;
        }
        if (*v13 == 1702326128 && *((_WORD *)v13 + 2) == 13426)
        {
LABEL_114:
          v16 = 0x100000046;
        }
        else
        {
          if (*v13 != 1702326128 || *((_WORD *)v13 + 2) != 13682)
          {
            v37 = 0;
            v38 = 0;
            if (*v13 ^ 0x65776F70 | *((unsigned __int16 *)v13 + 2) ^ 0x3672)
              v16 = 0;
            else
              v16 = 0x1000003C6;
            goto LABEL_101;
          }
          v16 = 0x1000000C6;
        }
LABEL_119:
        v39 = v14 == 6;
LABEL_120:
        v42 = v16 & 0x100000000;
        v37 = v14 == 4;
        if (v14 != 4 || v42)
        {
          v17 = v14 == 7;
          v38 = v14 == 7;
          if (v17 && !v42)
          {
            if (!(*v13 ^ 0x65776F70 | *(int *)((char *)v13 + 3) ^ 0x78367265))
              v16 = 0x1000007C6;
            v38 = 1;
          }
        }
        else
        {
          v38 = 0;
          if (*v13 == 913471344)
            v16 = 0x1000003C6;
          v37 = 1;
        }
LABEL_131:
        v40 = 0;
        v41 = (v16 & 0xFF00000000) == 0;
        if (!v39 || (v16 & 0xFF00000000) != 0)
          goto LABEL_138;
        if (*v13 == 1702326128 && *((_WORD *)v13 + 2) == 14194)
          goto LABEL_174;
        v40 = 1;
        v41 = 1;
LABEL_138:
        v44 = v37 && v41;
        if (v44 == 1 && *v13 == 930248560)
        {
LABEL_174:
          v10 = 0x100000BC6;
        }
        else
        {
          v10 = 0x100001BC6;
          if (!v40 || (*v13 == 1702326128 ? (v45 = *((unsigned __int16 *)v13 + 2) == 14450) : (v45 = 0), !v45))
          {
            if (!v44 || *v13 != 947025776)
            {
              v46 = v38 && v41;
              if (v46 != 1 || (*v13 == 912486512 ? (v47 = *(int *)((char *)v13 + 3) == 1701590070) : (v47 = 0), !v47))
              {
                if (v40 && (*v13 == 1702326128 ? (v48 = *((unsigned __int16 *)v13 + 2) == 14706) : (v48 = 0), v48)
                  || v44 && *v13 == 963802992)
                {
                  v10 = 0x100003BC6;
                }
                else if (v46 && (*v13 == 1702326128 ? (v49 = *(int *)((char *)v13 + 3) == 808546917) : (v49 = 0), v49))
                {
                  v10 = 0x100007BC6;
                }
                else if (v40 && (*v13 == 1970566502 ? (v50 = *((unsigned __int16 *)v13 + 2) == 25970) : (v50 = 0), v50))
                {
                  v10 = 0x10000FBC6;
                }
                else if (v44)
                {
                  v10 = 0x100040000;
                  if (*v13 != 942945592 && *v13 != 808465765)
                    v10 = v16;
                }
                else
                {
LABEL_175:
                  v10 = v16;
                }
              }
            }
          }
        }
LABEL_179:
        if ((v10 & 0xFF00000000) != 0)
          v51 = v10;
        else
          v51 = 0;
        *(_DWORD *)(a1 + 364) = v51;
        break;
      case 7:
        if (*v13 ^ 0x65776F70 | *(int *)((char *)v13 + 3) ^ 0x78357265)
          v16 = 0;
        else
          v16 = 0x1000001C6;
        goto LABEL_97;
      default:
        goto LABEL_55;
    }
  }
  return v9;
}

uint64_t sub_22F1EDFB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE1FA8;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE2AB0;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FAE1F88);
}

void sub_22F1EE028(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE1FA8;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE2AB0;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FAE1F88);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EE0AC(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v5;
  uint64_t v6;

  v5 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v6 = *a2;
  *v5 = v6;
  v5[54] = 0;
  v5[55] = 0;
  v5[53] = 0;
  *(uint64_t *)((char *)v5 + 372) = 0;
  *(uint64_t *)((char *)v5 + 380) = 0;
  *(uint64_t *)((char *)v5 + 364) = 0;
  *((_DWORD *)v5 + 97) = 0;
  *(uint64_t *)((char *)v5 + 404) = 0;
  *(uint64_t *)((char *)v5 + 396) = 0;
  *(uint64_t *)((char *)v5 + 410) = 0;
  *(_WORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 42) = 128;
  *((_WORD *)v5 + 48) = 128;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 15) = 0x80;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 14) = 0x80;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24) + 88) = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v5);
  *(_BYTE *)(a1 + 93) = 1;
  *(_BYTE *)(a1 + 90) = 1;
  return a1;
}

uint64_t sub_22F1EE154(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, a2 + 1);
}

uint64_t sub_22F1EE1A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE8E80;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE99B0;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FAE9238);
}

void sub_22F1EE214(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE8E80;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE99B0;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FAE9238);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EE298(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE7C28;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE8730;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FAE7C08);
}

void sub_22F1EE308(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAE7C28;
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  *(_QWORD *)a1 = off_24FAE8730;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FAE7C08);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EE38C(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::APFloatBase *v8;
  uint64_t v9;
  llvm::APFloatBase *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  std::string *v14;
  size_t size;
  std::string v17;

  v6 = (_QWORD *)sub_22F1EE0AC(a1, a2 + 1, a3);
  v7 = *a2;
  *v6 = *a2;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 1) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24)) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 21) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 20) = 64;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 116) = 7;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 144) = 7;
  memset(&v17, 0, sizeof(v17));
  if (*((_DWORD *)a3 + 9) == 21)
  {
    v8 = (llvm::APFloatBase *)MEMORY[0x2348A0C14](&v17, "E-m:a-i64:64-n32:64");
    v9 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 14) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 13) = 32;
    *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 15) = 32;
    v10 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v8);
    *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24) + 88) = v10;
  }
  else
  {
    if (*((_DWORD *)a3 + 6) == 24)
    {
      MEMORY[0x2348A0C14](&v17, "e-m:e-i64:64-n32:64");
      v11 = "elfv2";
    }
    else
    {
      MEMORY[0x2348A0C14](&v17, "E-m:e-i64:64-n32:64");
      v11 = "elfv1";
    }
    v10 = (llvm::APFloatBase *)MEMORY[0x2348A0C14](a1 + 424, v11);
  }
  v12 = *((_DWORD *)a3 + 9);
  if ((v12 | 8) == 0xD || (*((_DWORD *)a3 + 10) & 0xFFFFFFFC) == 0xC)
  {
    v13 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 15) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 14) = 64;
    *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24) + 88) = llvm::APFloatBase::IEEEdouble(v10);
  }
  if (v12 == 21 || v12 == 9)
    std::string::append(&v17, "-S128-v256:256:256-v512:512:512");
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v17;
  else
    v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v17.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v17.__r_.__value_.__l.__size_;
  sub_22F1E6F0C(a1, v14, size, (uint64_t)"");
  *(_WORD *)(a1 + 94) = 16512;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t sub_22F1EE58C(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v6;
  uint64_t v7;

  v6 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v7 = *a2;
  *v6 = v7;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  v6[52] = 0;
  if (*((_DWORD *)a3 + 11) != 5)
  {
    *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 14) = 0x80;
    *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 15) = 0x80;
    *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24) + 88) = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)v6);
  }
  *(_WORD *)(a1 + *(_QWORD *)(v7 - 24) + 42) = 128;
  *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 128) = 5;
  *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 132) = 6;
  *(_DWORD *)(a1 + 288) |= 0x100u;
  *(_QWORD *)(a1 + 136) = "_mcount";
  *(_BYTE *)(a1 + 87) = 1;
  return a1;
}

uint64_t sub_22F1EE664(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAEF9E8;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  return sub_22F1E6E70(a1, &off_24FAEFDA8);
}

void sub_22F1EE6A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAEF9E8;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_22F1E6E70(a1, &off_24FAEFDA8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F1EE700(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  const char *v7;
  uint64_t v8;
  __darwin_ct_rune_t v9;
  int v10;
  int v11;

  if (!a3)
    return "";
  v5 = a3;
  v7 = "";
  v8 = MEMORY[0x24BDAC740];
  while (1)
  {
    v9 = (char)*a2;
    if (v9 < 0)
      break;
    if ((*(_DWORD *)(v8 + 4 * *a2 + 60) & 0x100) != 0)
      goto LABEL_10;
LABEL_7:
    if (v9 == 64)
      return "";
    ++a2;
    if (!--v5)
      return v7;
  }
  v10 = __maskrune(v9, 0x100uLL);
  LOBYTE(v9) = *a2;
  if (!v10)
    goto LABEL_7;
LABEL_10:
  if ((char)v9 <= 88)
  {
    if ((char)v9 == 68)
      return "di";
    if ((char)v9 == 83)
      return "si";
    return "";
  }
  v7 = "ax";
  switch((char)v9)
  {
    case 'Y':
      if (v5 == 1)
        return "";
      v11 = a2[1];
      v7 = "xmm0";
      if (v11 != 48 && v11 != 122)
        return "";
      break;
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
      return "";
    case 'a':
      return v7;
    case 'b':
      v7 = "bx";
      break;
    case 'c':
      v7 = "cx";
      break;
    case 'd':
      v7 = "dx";
      break;
    default:
      if ((char)v9 != 114)
        return "";
      v7 = a4;
      break;
  }
  return v7;
}

uint64_t sub_22F1EE87C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAEE770;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  return sub_22F1E6E70(a1, &off_24FAEE750);
}

void sub_22F1EE8C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAEE770;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_22F1E6E70(a1, &off_24FAEE750);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EE918(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const std::string::value_type *v9;
  const char *v10;
  const char *v11;
  std::string *v12;
  size_t size;
  std::string v15;

  v5 = sub_22F429848(a1, a2 + 3, a3);
  *(_QWORD *)v5 = a2[2];
  v6 = a2[1];
  *(_QWORD *)v5 = v6;
  *(_DWORD *)(v5 + *(_QWORD *)(v6 - 24) + 128) = 4;
  *(_DWORD *)(v5 + *(_QWORD *)(v6 - 24) + 132) = 4;
  v7 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_BYTE *)(v5 + *(_QWORD *)(v7 - 24) + 23) = 64;
  *(_BYTE *)(v5 + *(_QWORD *)(v7 - 24) + 13) = 64;
  if (*(_DWORD *)(v5 + 68) == 15)
  {
    v8 = *(_DWORD *)(a1 + 72);
    if (v8 == 16)
    {
      v9 = "f80:128";
    }
    else if (v8)
    {
      v9 = "f80:32";
    }
    else
    {
      v9 = "f80:128";
    }
    if (*(_DWORD *)(a1 + 76) == 1)
    {
      v10 = "e-m:x";
      v11 = "_";
    }
    else
    {
      v10 = "e-m:e";
      v11 = "";
    }
  }
  else
  {
    v10 = "e-m:e";
    v11 = "";
    v9 = "f80:32";
  }
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 5;
  LODWORD(v15.__r_.__value_.__l.__data_) = *(_DWORD *)v10;
  WORD2(v15.__r_.__value_.__r.__words[0]) = *((unsigned __int8 *)v10 + 4);
  std::string::append(&v15, "-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-");
  std::string::append(&v15, v9);
  std::string::append(&v15, "-n8:16:32-a:0:32-S32");
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v15;
  else
    v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v15.__r_.__value_.__l.__size_;
  sub_22F1E6F0C(a1, v12, size, (uint64_t)v11);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t sub_22F1EEAAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB050B0;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  return sub_22F1E6E70(a1, &off_24FB05470);
}

void sub_22F1EEAF0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB050B0;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_22F1E6E70(a1, &off_24FB05470);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EEB48(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB03E38;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  return sub_22F1E6E70(a1, &off_24FB03E18);
}

void sub_22F1EEB8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB03E38;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_22F1E6E70(a1, &off_24FB03E18);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EEBE4(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, a2 + 1);
}

void sub_22F1EEC34(char **a1@<X1>, uint64_t a2@<X8>)
{
  char *v3;
  int v4;
  __int16 v6;
  std::string *v7;
  std::string::size_type size;
  int v9;
  char v10;
  void *__p;
  char v12;
  std::string v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *a1;
  v4 = **a1;
  if (v4 == 85)
  {
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = 2;
    strcpy((char *)&v13, "@3");
    v12 = 3;
    v6 = *(_WORD *)v3;
    WORD1(__p) = v3[2];
    LOWORD(__p) = v6;
    v7 = std::string::append(&v13, (const std::string::value_type *)&__p, 3uLL);
    size = v7->__r_.__value_.__l.__size_;
    *(_QWORD *)a2 = v7->__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 15) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(size) = *((_BYTE *)&v7->__r_.__value_.__s + 23);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = v12;
    *(_BYTE *)(a2 + 23) = size;
    if (v9 < 0)
      operator delete(__p);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    *a1 += 2;
  }
  else
  {
    if (v4 == 112)
      v10 = 114;
    else
      v10 = **a1;
    *(_BYTE *)a2 = v10;
    *(_BYTE *)(a2 + 23) = 1;
  }
}

uint64_t sub_22F1EED1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBD6C68;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FBD5500);
}

void sub_22F1EED60(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBD6C68;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FBD5500);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EEDB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB13B80;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB133F8);
}

void sub_22F1EEDFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB13B80;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB133F8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EEE54(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB14E20;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB14698);
}

void sub_22F1EEE98(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB14E20;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB14698);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EEEF0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB160C0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB15938);
}

void sub_22F1EEF34(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB160C0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB15938);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EEF8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB17360;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB16BD8);
}

void sub_22F1EEFD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB17360;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB16BD8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF028(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB18600;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB17E78);
}

void sub_22F1EF06C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB18600;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB17E78);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF0C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB198A0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB19118);
}

void sub_22F1EF108(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB198A0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB19118);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF160(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBD73C0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FBD58C8);
}

void sub_22F1EF1A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBD73C0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FBD58C8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF1FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1AB40;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB1A3B8);
}

void sub_22F1EF240(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1AB40;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB1A3B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF298(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1BDE0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB1B658);
}

void sub_22F1EF2DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1BDE0;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB1B658);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF334(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1D080;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB1C8F8);
}

void sub_22F1EF378(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1D080;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB1C8F8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1EF3D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1E320;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB1DB98);
}

void sub_22F1EF414(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB1E320;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB1DB98);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F1EF46C(unsigned __int8 **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  std::string::value_type __s[8];
  char v12;
  std::string v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t)*a1;
  v4 = **a1;
  if (v4 == 112)
  {
    v8 = 0;
    v10 = 1;
    *(_BYTE *)(a2 + 23) = 1;
    LOBYTE(v4) = 114;
    goto LABEL_11;
  }
  if (v4 != 90 || *(_BYTE *)(v3 + 1) != 67)
  {
    v8 = 0;
    v10 = 1;
    *(_BYTE *)(a2 + 23) = 1;
LABEL_11:
    *(_BYTE *)a2 = v4;
    goto LABEL_12;
  }
  *((_BYTE *)&v13.__r_.__value_.__s + 23) = 1;
  LOWORD(v13.__r_.__value_.__l.__data_) = 94;
  v12 = 2;
  *(_WORD *)__s = *(_WORD *)v3;
  __s[2] = 0;
  v6 = std::string::append(&v13, __s, 2uLL);
  v7 = v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  ++*a1;
  v9 = v14[0];
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v14 + 7);
  v10 = 23;
LABEL_12:
  *(_BYTE *)(a2 + v10) = v8;
}

uint64_t sub_22F1EF5A8(uint64_t a1, const void ***a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  unint64_t v8;
  const void *v9;
  size_t v10;
  unint64_t v12;
  const void *v13;
  size_t v14;
  BOOL v15;
  BOOL v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  int v21;
  const void **i;
  const void **v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  const void *v31;
  size_t v32;
  unint64_t v33;
  const void *v34;
  size_t v35;
  unint64_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v43;
  const void *v44;
  size_t v45;
  unint64_t v47;
  const void *v48;
  size_t v49;
  unint64_t v51;
  const void *v52;
  size_t v53;
  const void *v54;
  size_t v55;
  unint64_t v57;
  const void *v58;
  size_t v59;
  const void *v61;
  size_t v62;
  const void *v63;
  size_t v64;
  const void *v66;
  size_t v67;
  const void *v69;
  size_t v70;
  unint64_t v71;
  const void *v72;
  size_t v73;
  unint64_t v74;
  const void *v75;
  size_t v76;
  const void *v77;
  size_t v78;
  _BYTE *v80;

  *(_WORD *)(a1 + 392) = 0;
  v4 = *(unsigned __int8 *)(a1 + 391);
  v5 = *(_QWORD *)(a1 + 376);
  if ((v4 & 0x80u) == 0)
    v6 = v4 & 0x7F;
  else
    v6 = *(_QWORD *)(a1 + 376);
  if (v6 == 8)
  {
    v7 = (const void **)(a1 + 368);
    v8 = *(unsigned __int8 *)(a1 + 391);
    v9 = (const void *)(a1 + 368);
    if ((v4 & 0x80) != 0)
    {
      v9 = *v7;
      v8 = v5;
    }
    if (v8 >= 8)
      v10 = 8;
    else
      v10 = v8;
    if (!memcmp(v9, "mips32r6", v10) && v8 == 8)
    {
      v15 = 1;
    }
    else
    {
      v12 = v4;
      v13 = (const void *)(a1 + 368);
      if ((v4 & 0x80) != 0)
      {
        v13 = *v7;
        v12 = v5;
      }
      if (v12 >= 8)
        v14 = 8;
      else
        v14 = v12;
      v15 = memcmp(v13, "mips64r6", v14) == 0;
      if (v12 != 8)
        v15 = 0;
    }
    v80 = (_BYTE *)(a1 + 394);
    *(_BYTE *)(a1 + 394) = v15;
    v17 = v4;
    v18 = (const void *)(a1 + 368);
    if ((v4 & 0x80) != 0)
    {
      v18 = *v7;
      v17 = v5;
    }
    if (v17 >= 8)
      v19 = 8;
    else
      v19 = v17;
    if (!memcmp(v18, "mips32r6", v19) && v17 == 8)
    {
      v16 = 1;
    }
    else
    {
      if ((v4 & 0x80) != 0)
        v7 = (const void **)*v7;
      else
        v5 = v4;
      if (v5 >= 8)
        v20 = 8;
      else
        v20 = v5;
      v16 = memcmp(v7, "mips64r6", v20) == 0;
      if (v5 != 8)
        v16 = 0;
    }
  }
  else
  {
    v16 = 0;
    v80 = (_BYTE *)(a1 + 394);
    *(_BYTE *)(a1 + 394) = 0;
  }
  *(_BYTE *)(a1 + 395) = v16;
  *(_BYTE *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  if (sub_22F42E51C(a1))
    v21 = 2;
  else
    v21 = 0;
  *(_DWORD *)(a1 + 412) = v21;
  v23 = *a2;
  for (i = a2[1]; v23 != i; v23 += 3)
  {
    v24 = *((unsigned __int8 *)v23 + 23);
    v25 = (unint64_t)v23[1];
    if ((v24 & 0x80u) == 0)
      v26 = v24 & 0x7F;
    else
      v26 = (unint64_t)v23[1];
    switch(v26)
    {
      case 4uLL:
        v27 = *((unsigned __int8 *)v23 + 23);
        v28 = v23;
        if ((v24 & 0x80) != 0)
        {
          v28 = *v23;
          v27 = (unint64_t)v23[1];
        }
        if (v27 >= 4)
          v29 = 4;
        else
          v29 = v27;
        if (!memcmp(v28, "+dsp", v29) && v27 == 4)
        {
          v43 = *(_DWORD *)(a1 + 404);
          if (v43 <= 1)
            v43 = 1;
          goto LABEL_174;
        }
        v31 = v23;
        if ((v24 & 0x80) != 0)
        {
          v31 = *v23;
          v24 = v25;
        }
        if (v24 >= 4)
          v32 = 4;
        else
          v32 = v24;
        if (!memcmp(v31, "+msa", v32) && v24 == 4)
          *(_BYTE *)(a1 + 408) = 1;
        break;
      case 5uLL:
        v33 = *((unsigned __int8 *)v23 + 23);
        v34 = v23;
        if ((v24 & 0x80) != 0)
        {
          v34 = *v23;
          v33 = (unint64_t)v23[1];
        }
        if (v33 >= 5)
          v35 = 5;
        else
          v35 = v33;
        if (!memcmp(v34, "+fp64", v35) && v33 == 5)
        {
          *(_DWORD *)(a1 + 412) = 2;
        }
        else
        {
          v37 = v24;
          v38 = v23;
          if ((v24 & 0x80) != 0)
          {
            v38 = *v23;
            v37 = v25;
          }
          if (v37 >= 5)
            v39 = 5;
          else
            v39 = v37;
          if (!memcmp(v38, "-fp64", v39) && v37 == 5)
          {
            *(_DWORD *)(a1 + 412) = 1;
          }
          else
          {
            v69 = v23;
            if ((v24 & 0x80) != 0)
            {
              v69 = *v23;
              v24 = v25;
            }
            if (v24 >= 5)
              v70 = 5;
            else
              v70 = v24;
            if (!memcmp(v69, "+fpxx", v70) && v24 == 5)
              *(_DWORD *)(a1 + 412) = 0;
          }
        }
        break;
      case 6uLL:
        v40 = v23;
        if ((v24 & 0x80) != 0)
        {
          v40 = *v23;
          v24 = (unint64_t)v23[1];
        }
        if (v24 >= 6)
          v41 = 6;
        else
          v41 = v24;
        if (!memcmp(v40, "+dspr2", v41) && v24 == 6)
        {
          v43 = *(_DWORD *)(a1 + 404);
          if (v43 <= 2)
            v43 = 2;
LABEL_174:
          *(_DWORD *)(a1 + 404) = v43;
        }
        break;
      case 7uLL:
        v44 = v23;
        if ((v24 & 0x80) != 0)
        {
          v44 = *v23;
          v24 = (unint64_t)v23[1];
        }
        if (v24 >= 7)
          v45 = 7;
        else
          v45 = v24;
        if (!memcmp(v44, "+mips16", v45) && v24 == 7)
          *(_BYTE *)(a1 + 392) = 1;
        break;
      case 8uLL:
        v47 = *((unsigned __int8 *)v23 + 23);
        v48 = v23;
        if ((v24 & 0x80) != 0)
        {
          v48 = *v23;
          v47 = (unint64_t)v23[1];
        }
        if (v47 >= 8)
          v49 = 8;
        else
          v49 = v47;
        if (!memcmp(v48, "+nomadd4", v49) && v47 == 8)
        {
          *(_BYTE *)(a1 + 409) = 1;
        }
        else
        {
          v51 = v24;
          v52 = v23;
          if ((v24 & 0x80) != 0)
          {
            v52 = *v23;
            v51 = v25;
          }
          if (v51 >= 8)
            v53 = 8;
          else
            v53 = v51;
          if (!memcmp(v52, "+nan2008", v53) && v51 == 8)
          {
            *v80 = 1;
          }
          else
          {
            v71 = v24;
            v72 = v23;
            if ((v24 & 0x80) != 0)
            {
              v72 = *v23;
              v71 = v25;
            }
            if (v71 >= 8)
              v73 = 8;
            else
              v73 = v71;
            if (!memcmp(v72, "-nan2008", v73) && v71 == 8)
            {
              *v80 = 0;
            }
            else
            {
              v74 = v24;
              v75 = v23;
              if ((v24 & 0x80) != 0)
              {
                v75 = *v23;
                v74 = v25;
              }
              if (v74 >= 8)
                v76 = 8;
              else
                v76 = v74;
              if (!memcmp(v75, "+abs2008", v76) && v74 == 8)
              {
                *(_BYTE *)(a1 + 395) = 1;
              }
              else
              {
                v77 = v23;
                if ((v24 & 0x80) != 0)
                {
                  v77 = *v23;
                  v24 = v25;
                }
                if (v24 >= 8)
                  v78 = 8;
                else
                  v78 = v24;
                if (!memcmp(v77, "-abs2008", v78) && v24 == 8)
                  *(_BYTE *)(a1 + 395) = 0;
              }
            }
          }
        }
        break;
      case 0xAuLL:
        v54 = v23;
        if ((v24 & 0x80) != 0)
        {
          v54 = *v23;
          v24 = (unint64_t)v23[1];
        }
        if (v24 >= 0xA)
          v55 = 10;
        else
          v55 = v24;
        if (!memcmp(v54, "+micromips", v55) && v24 == 10)
          *(_BYTE *)(a1 + 393) = 1;
        break;
      case 0xBuLL:
        v57 = *((unsigned __int8 *)v23 + 23);
        v58 = v23;
        if ((v24 & 0x80) != 0)
        {
          v58 = *v23;
          v57 = (unint64_t)v23[1];
        }
        if (v57 >= 0xB)
          v59 = 11;
        else
          v59 = v57;
        if (!memcmp(v58, "+soft-float", v59) && v57 == 11)
        {
          *(_DWORD *)(a1 + 400) = 1;
        }
        else
        {
          v61 = v23;
          if ((v24 & 0x80) != 0)
          {
            v61 = *v23;
            v24 = v25;
          }
          if (v24 >= 0xB)
            v62 = 11;
          else
            v62 = v24;
          if (!memcmp(v61, "+noabicalls", v62) && v24 == 11)
            *(_BYTE *)(a1 + 397) = 1;
        }
        break;
      case 0xDuLL:
        v63 = v23;
        if ((v24 & 0x80) != 0)
        {
          v63 = *v23;
          v24 = (unint64_t)v23[1];
        }
        if (v24 >= 0xD)
          v64 = 13;
        else
          v64 = v24;
        if (!memcmp(v63, "+single-float", v64) && v24 == 13)
          *(_BYTE *)(a1 + 396) = 1;
        break;
      case 0x19uLL:
        v66 = v23;
        if ((v24 & 0x80) != 0)
        {
          v66 = *v23;
          v24 = (unint64_t)v23[1];
        }
        if (v24 >= 0x19)
          v67 = 25;
        else
          v67 = v24;
        if (!memcmp(v66, "+use-indirect-jump-hazard", v67) && v24 == 25)
          *(_BYTE *)(a1 + 410) = 1;
        break;
      default:
        continue;
    }
  }
  sub_22F1EFD68(a1);
  return 1;
}

uint64_t sub_22F1EFBE0(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int16 v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  _QWORD *v14;
  size_t v15;
  BOOL v16;
  void *__p;
  char v19;

  v6 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v7 = *a2;
  *v6 = *a2;
  v8 = v6 + 46;
  v6[47] = 0;
  v6[48] = 0;
  v6[46] = 0;
  *(uint64_t *)((char *)v6 + 391) = 0;
  v6[50] = 0;
  *(_DWORD *)((char *)v6 + 407) = 0;
  *(uint64_t *)((char *)v6 + 420) = 0;
  *(uint64_t *)((char *)v6 + 428) = 0;
  *(uint64_t *)((char *)v6 + 412) = 0;
  *((_DWORD *)v6 + 109) = 0;
  *((_DWORD *)v6 + 37) = 6;
  if ((*((_DWORD *)a3 + 6) & 0xFFFFFFFE) == 0x10)
  {
    v19 = 3;
    v9 = 13167;
LABEL_5:
    v10 = v9 | 0x320000;
    goto LABEL_7;
  }
  if (*((_DWORD *)a3 + 10) == 2)
  {
    v19 = 3;
    v9 = 13166;
    goto LABEL_5;
  }
  v19 = 3;
  v10 = 3421806;
LABEL_7:
  LODWORD(__p) = v10;
  (*(void (**)(uint64_t, void **))(v7 + 504))(a1, &__p);
  if (v19 < 0)
    operator delete(__p);
  v11 = *(unsigned __int8 *)(a1 + 439);
  if ((v11 & 0x80u) == 0)
    v12 = v11 & 0x7F;
  else
    v12 = *(_QWORD *)(a1 + 424);
  v13 = "mips64r2";
  if (v12 == 3)
  {
    v14 = (_QWORD *)(a1 + 416);
    if ((v11 & 0x80) != 0)
    {
      v14 = (_QWORD *)*v14;
      v11 = *(_QWORD *)(a1 + 424);
    }
    if (v11 >= 3)
      v15 = 3;
    else
      v15 = v11;
    v16 = memcmp(v14, "o32", v15) == 0;
    if (v11 != 3)
      v16 = 0;
    if (v16)
      v13 = "mips32r2";
  }
  MEMORY[0x2348A0C14](v8, v13);
  *(_BYTE *)(a1 + 398) = (*((_DWORD *)a3 + 9) & 0xFFFFFFF7) == 5;
  return a1;
}

void sub_22F1EFD68(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const void **v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  const char *v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  void **v14;
  size_t v15;
  _QWORD v16[4];
  __int16 v17;
  void *__p[2];
  char v19;

  v2 = *(unsigned __int8 *)(a1 + 439);
  v3 = *(_QWORD *)(a1 + 424);
  if ((v2 & 0x80u) == 0)
    v4 = v2 & 0x7F;
  else
    v4 = *(_QWORD *)(a1 + 424);
  if (v4 != 3)
    goto LABEL_24;
  v5 = (const void **)(a1 + 416);
  v6 = *(unsigned __int8 *)(a1 + 439);
  v7 = (const void *)(a1 + 416);
  if ((v2 & 0x80) != 0)
  {
    v7 = *v5;
    v6 = v3;
  }
  if (v6 >= 3)
    v8 = 3;
  else
    v8 = v6;
  if (!memcmp(v7, "o32", v8) && v6 == 3)
  {
    v10 = "m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64";
    v11 = 44;
    goto LABEL_25;
  }
  if ((v2 & 0x80) != 0)
    v5 = (const void **)*v5;
  else
    v3 = v2;
  v12 = v3 >= 3 ? 3 : v3;
  if (!memcmp(v5, "n32", v12) && v3 == 3)
  {
    v10 = "m:e-p:32:32-i8:8:32-i16:16:32-i64:64-n32:64-S128";
    v11 = 48;
  }
  else
  {
LABEL_24:
    v10 = "m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128";
    v11 = 40;
  }
LABEL_25:
  if (*(_BYTE *)(a1 + 80))
  {
    v17 = 1283;
    v13 = "E-";
  }
  else
  {
    v17 = 1283;
    v13 = "e-";
  }
  v16[0] = v13;
  v16[2] = v10;
  v16[3] = v11;
  llvm::Twine::str((llvm::Twine *)v16);
  if (v19 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v19 >= 0)
    v15 = v19 & 0x7F;
  else
    v15 = (size_t)__p[1];
  sub_22F1E6F0C(a1, v14, v15, (uint64_t)"");
  if (v19 < 0)
    operator delete(__p[0]);
}

uint64_t sub_22F1EFEDC(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, a2 + 1);
}

uint64_t sub_22F1EFF2C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *a2;
  v4 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  if (v4)
  {
    sub_22F2E06C8(v4 + 24, *(_QWORD **)(v4 + 32));
    MEMORY[0x2348A0E9C](v4, 0x1020C401F42C5C2);
  }
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, a2 + 1);
}

void sub_22F1EFFB8(char **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  __int16 v5;
  std::string *v6;
  void *__p;
  char v8;
  std::string v9;

  v3 = (uint64_t)*a1;
  v4 = **a1;
  if (v4 == 90)
  {
    if ((*(char *)(v3 + 1) - 81) <= 3)
    {
      *((_BYTE *)&v9.__r_.__value_.__s + 23) = 1;
      LOWORD(v9.__r_.__value_.__l.__data_) = 94;
      *a1 = (char *)(v3 + 1);
      v8 = 2;
      LOWORD(__p) = *(_WORD *)v3;
      BYTE2(__p) = 0;
      v6 = std::string::append(&v9, (const std::string::value_type *)&__p, 2uLL);
      *(std::string *)a2 = *v6;
      v6->__r_.__value_.__r.__words[0] = 0;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      if (v8 < 0)
        operator delete(__p);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if (v4 == 112)
  {
    *(_BYTE *)(a2 + 23) = 1;
    v5 = 112;
LABEL_11:
    *(_WORD *)a2 = v5;
    return;
  }
  *(_BYTE *)(a2 + 23) = 1;
  if (v4 == 112)
  {
    v5 = 114;
    goto LABEL_11;
  }
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = 0;
}

uint64_t sub_22F1F00B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC7E540;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC7E8D8);
}

void sub_22F1F00F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC7E540;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC7E8D8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F0150(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB58798;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FB583C8);
}

void sub_22F1F0194(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB58798;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FB583C8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F01EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB59668;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FB59298);
}

void sub_22F1F0230(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB59668;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FB59298);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F0288(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB74640;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FB73EC8);
}

void sub_22F1F02CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB74640;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FB73EC8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F0324(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC914F8;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FC914D8);
}

void sub_22F1F0368(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC914F8;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FC914D8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F03C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC909D8;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FC90D70);
}

void sub_22F1F0404(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC909D8;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FC90D70);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F045C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB733C0;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FB72898);
}

void sub_22F1F04A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB733C0;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FB72898);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F04F8(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v5;
  uint64_t v6;

  v5 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v6 = *a2;
  *v5 = v6;
  v5[49] = 0;
  v5[50] = 0;
  v5[48] = 0;
  *(uint64_t *)((char *)v5 + 364) = 0;
  *(uint64_t *)((char *)v5 + 370) = 0;
  *((_BYTE *)v5 + 83) = 1;
  *(_WORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 42) = 128;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 18) = 0x80;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 19) = 0x80;
  *((_WORD *)v5 + 48) = 128;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 152) = 7;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 15) = 0x80;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 14) = 0x80;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24) + 88) = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)v5);
  *(_WORD *)(a1 + 94) = 16448;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 112) = 8;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 120) = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 124) = 7;
  return a1;
}

uint64_t sub_22F1F05E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB75C78;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FB75150);
}

void sub_22F1F0628(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB75C78;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FB75150);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F0680(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB78530;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FB77DB8);
}

void sub_22F1F06C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB78530;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FB77DB8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F071C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC92008;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FC91FE8);
}

void sub_22F1F0760(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC92008;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FC91FE8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F07B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB772B0;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FB76788);
}

void sub_22F1F07FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB772B0;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FB76788);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F0854(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB79B68;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  return sub_22F1E6E70(a1, &off_24FB79040);
}

void sub_22F1F0898(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB79B68;
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_22F1E6E70(a1, &off_24FB79040);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F08F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBDB9E8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FBD6C48);
}

void sub_22F1F0934(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBDB9E8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FBD6C48);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F098C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB7C7E8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FB7BCB0);
}

void sub_22F1F09D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FB7C7E8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FB7BCB0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F0A28(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, a2 + 1);
}

void sub_22F1F0A78(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char *v10;
  char *v11;
  void **v12;
  void *v13;
  unint64_t v14;
  void **v15;
  size_t v16;
  BOOL v18;
  void **v19;
  std::string *v20;
  std::string::size_type v21;
  const char *v22;
  char v23;
  int v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  const char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  const char *v36;
  int v37;
  std::string __p;
  uint64_t v39;
  __int16 v40;
  std::string v41;
  void *__dst[2];
  uint64_t v43;
  _QWORD v44[4];
  __int16 v45;
  _QWORD v46[4];
  __int16 v47;

  v46[0] = "__aarch64__";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v6 = *(_DWORD *)(a1 + 68);
  if (v6)
  {
LABEL_4:
    if (v6 == 15)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (*(_DWORD *)(a1 + 76) == 3)
  {
    v46[0] = "__ELF__";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v6 = *(_DWORD *)(a1 + 68);
    goto LABEL_4;
  }
LABEL_5:
  if (llvm::Triple::isArch64Bit((llvm::Triple *)(a1 + 32)))
  {
    v46[0] = "_LP64";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__LP64__";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
LABEL_7:
  v7 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v7 + 343) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)(v7 + 320), *(_QWORD *)(v7 + 328));
  }
  else
  {
    v8 = v7 + 320;
    *(_OWORD *)__dst = *(_OWORD *)v8;
    v43 = *(_QWORD *)(v8 + 16);
  }
  v9 = HIBYTE(v43);
  v10 = (char *)(HIBYTE(v43) & 0x7F);
  v12 = (void **)__dst[0];
  v11 = (char *)__dst[1];
  if (v43 >= 0)
    v13 = (void *)(HIBYTE(v43) & 0x7F);
  else
    v13 = __dst[1];
  if (v13 == (void *)7)
  {
    v14 = v43 >= 0 ? HIBYTE(v43) : (unint64_t)__dst[1];
    v15 = v43 >= 0 ? __dst : (void **)__dst[0];
    v16 = v14 >= 7 ? 7 : v14;
    if (!memcmp(v15, "default", v16) && v14 == 7)
    {
      MEMORY[0x2348A0C14](__dst, "small");
      v9 = HIBYTE(v43);
      v12 = (void **)__dst[0];
      v11 = (char *)__dst[1];
      v10 = (char *)(HIBYTE(v43) & 0x7F);
    }
  }
  v18 = v9 < 0;
  if (v9 >= 0)
    v19 = __dst;
  else
    v19 = v12;
  if (v18)
    v10 = v11;
  for (; v10; --v10)
  {
    *(_BYTE *)v19 = __toupper(*(char *)v19);
    v19 = (void **)((char *)v19 + 1);
  }
  std::operator+<char>();
  v20 = std::string::append(&v41, "__");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v47 = 260;
  v46[0] = &__p;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v46[0] = "__ARM_ACLE";
  v47 = 259;
  v44[0] = "200";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_ARCH";
  v47 = 259;
  if ((*(_DWORD *)(a1 + 396) - 10) >= 4)
    v22 = "8";
  else
    v22 = "9";
  v45 = 261;
  v23 = 1;
  v44[0] = v22;
  v44[1] = 1;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_ARCH_PROFILE";
  v47 = 259;
  v24 = *(_DWORD *)(a1 + 396);
  v40 = 1283;
  if (v24 == 14)
    v25 = "R";
  else
    v25 = "A";
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"'";
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  v39 = 1;
  v44[0] = &__p;
  v44[2] = "'";
  v45 = 770;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_64BIT_STATE";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_PCS_AAPCS64";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_ARCH_ISA_A64";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_CLZ";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_FMA";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_LDREX";
  v47 = 259;
  v44[0] = "0xF";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_IDIV";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_DIV";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_NUMERIC_MAXMIN";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FEATURE_DIRECTED_ROUNDING";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_ALIGN_MAX_STACK_PWR";
  v47 = 259;
  v44[0] = "4";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FP";
  v47 = 259;
  v44[0] = "0xE";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FP16_FORMAT_IEEE";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_FP16_ARGS";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v26 = *(unsigned int *)(a2 + 52);
  if ((v26 & 0x2000) != 0)
  {
    v46[0] = "__ARM_FP_FAST";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    LOBYTE(v27) = *(_BYTE *)(a2 + 55);
  }
  else
  {
    v27 = v26 >> 24;
  }
  v46[0] = "__ARM_SIZEOF_WCHAR_T";
  v47 = 259;
  v28 = v27 & 0xF;
  if (!v28)
    v28 = 4;
  v45 = 265;
  LODWORD(v44[0]) = v28;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ARM_SIZEOF_MINIMAL_ENUM";
  v47 = 259;
  if ((*(_DWORD *)(a2 + 52) & 0x20000000) != 0)
    v29 = "1";
  else
    v29 = "4";
  HIBYTE(v45) = 1;
  if (*v29)
  {
    v44[0] = v29;
    v23 = 3;
  }
  LOBYTE(v45) = v23;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v30 = *(_DWORD *)(a1 + 364);
  if ((v30 & 1) != 0)
  {
    v46[0] = "__ARM_NEON";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_NEON_FP";
    v47 = 259;
    v44[0] = "0xE";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v30 = *(_DWORD *)(a1 + 364);
  }
  if ((v30 & 2) != 0)
  {
    v46[0] = "__ARM_FEATURE_SVE";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v30 = *(_DWORD *)(a1 + 364);
  }
  if ((~v30 & 3) == 0)
  {
    v46[0] = "__ARM_NEON_SVE_BRIDGE";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 383))
  {
    v46[0] = "__ARM_FEATURE_SVE2";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    if (*(_BYTE *)(a1 + 383))
    {
      if (!*(_BYTE *)(a1 + 384)
        || (v46[0] = "__ARM_FEATURE_SVE2_AES",
            v47 = 259,
            v44[0] = "1",
            v45 = 259,
            sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
            *(_BYTE *)(a1 + 383)))
      {
        if (!*(_BYTE *)(a1 + 387)
          || (v46[0] = "__ARM_FEATURE_SVE2_BITPERM",
              v47 = 259,
              v44[0] = "1",
              v45 = 259,
              sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
              *(_BYTE *)(a1 + 383)))
        {
          if (!*(_BYTE *)(a1 + 385)
            || (v46[0] = "__ARM_FEATURE_SVE2_SHA3",
                v47 = 259,
                v44[0] = "1",
                v45 = 259,
                sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
                *(_BYTE *)(a1 + 383)))
          {
            if (*(_BYTE *)(a1 + 386))
            {
              v46[0] = "__ARM_FEATURE_SVE2_SM4";
              v47 = 259;
              v44[0] = "1";
              v45 = 259;
              sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
            }
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 368))
  {
    v46[0] = "__ARM_FEATURE_CRC32";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 369))
  {
    if (!*(_BYTE *)(a1 + 370)
      || (v46[0] = "__ARM_FEATURE_CRYPTO",
          v47 = 259,
          v44[0] = "1",
          v45 = 259,
          sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
          *(_BYTE *)(a1 + 369)))
    {
      v46[0] = "__ARM_FEATURE_AES";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    }
  }
  if (*(_BYTE *)(a1 + 370))
  {
    v46[0] = "__ARM_FEATURE_SHA2";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 371))
  {
    v46[0] = "__ARM_FEATURE_SHA3";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_FEATURE_SHA512";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 372))
  {
    v46[0] = "__ARM_FEATURE_SM3";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_FEATURE_SM4";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 373))
  {
    v46[0] = "__ARM_FEATURE_UNALIGNED";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if ((*(_BYTE *)(a1 + 364) & 1) != 0 && *(_BYTE *)(a1 + 374))
  {
    v46[0] = "__ARM_FEATURE_FP16_VECTOR_ARITHMETIC";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 374))
  {
    v46[0] = "__ARM_FEATURE_FP16_SCALAR_ARITHMETIC";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 375))
  {
    v46[0] = "__ARM_FEATURE_DOTPROD";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 377))
  {
    v46[0] = "__ARM_FEATURE_MEMORY_TAGGING";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 378))
  {
    v46[0] = "__ARM_FEATURE_TME";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 382))
  {
    v46[0] = "__ARM_FEATURE_MATMUL_INT8";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 390))
  {
    v46[0] = "__ARM_FEATURE_ATOMICS";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v46[0] = "__ARM_FEATURE_BF16";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_FEATURE_BF16_VECTOR_ARITHMETIC";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_BF16_FORMAT_ALTERNATIVE";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_FEATURE_BF16_SCALAR_ARITHMETIC";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  v31 = *(_DWORD *)(a1 + 364);
  if ((v31 & 2) != 0)
  {
    if (!*(_BYTE *)(a1 + 88)
      || (v46[0] = "__ARM_FEATURE_SVE_BF16",
          v47 = 259,
          v44[0] = "1",
          v45 = 259,
          sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
          v31 = *(_DWORD *)(a1 + 364),
          (v31 & 2) != 0))
    {
      if (!*(_BYTE *)(a1 + 388)
        || (v46[0] = "__ARM_FEATURE_SVE_MATMUL_FP64",
            v47 = 259,
            v44[0] = "1",
            v45 = 259,
            sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
            v31 = *(_DWORD *)(a1 + 364),
            (v31 & 2) != 0))
      {
        if (!*(_BYTE *)(a1 + 389)
          || (v46[0] = "__ARM_FEATURE_SVE_MATMUL_FP32",
              v47 = 259,
              v44[0] = "1",
              v45 = 259,
              sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44),
              v31 = *(_DWORD *)(a1 + 364),
              (v31 & 2) != 0))
        {
          if (*(_BYTE *)(a1 + 382))
          {
            v46[0] = "__ARM_FEATURE_SVE_MATMUL_INT8";
            v47 = 259;
            v44[0] = "1";
            v45 = 259;
            sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
            v31 = *(_DWORD *)(a1 + 364);
          }
        }
      }
    }
  }
  if ((v31 & 1) != 0 && *(_BYTE *)(a1 + 376))
  {
    v46[0] = "__ARM_FEATURE_FP16_FML";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  v32 = *(unsigned __int16 *)(a2 + 248) | (*(unsigned __int8 *)(a2 + 250) << 16);
  v33 = v32 & 0x300000;
  if ((v32 & 0x300000) != 0)
  {
    v34 = (v32 & 0x400000) != 0 ? 2 : 1;
    v35 = v33 == 0x200000 ? v34 | 4 : v34;
    v46[0] = "__ARM_FEATURE_PAC_DEFAULT";
    v47 = 259;
    std::to_string(&__p, v35);
    v45 = 260;
    v44[0] = &__p;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((*(_BYTE *)(a2 + 212) & 0x10) != 0)
  {
    v46[0] = "__ARM_FEATURE_BTI_DEFAULT";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 380))
  {
    v46[0] = "__ARM_FEATURE_LS64";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 381))
  {
    v46[0] = "__ARM_FEATURE_RNG";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    v46[0] = "__ARM_FEATURE_MOPS";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  switch(*(_DWORD *)(a1 + 396))
  {
    case 2:
    case 3:
      sub_22F4369B4(a3);
      break;
    case 4:
      sub_22F436A60(a3);
      break;
    case 5:
      sub_22F436A60(a3);
      v36 = "__ARM_ARCH_8_4__";
      goto LABEL_134;
    case 6:
    case 0xA:
      sub_22F436B14(a3);
      break;
    case 7:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xD:
      sub_22F436B14(a3);
      v36 = "__ARM_ARCH_8_6__";
LABEL_134:
      v46[0] = v36;
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      break;
    default:
      break;
  }
  v46[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v37 = *(_DWORD *)(a2 + 216);
  if (v37 && v37 == *(_DWORD *)(a2 + 220))
  {
    v46[0] = "__ARM_FEATURE_SVE_BITS";
    v47 = 259;
    v45 = 264;
    LODWORD(v44[0]) = v37 << 7;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__ARM_FEATURE_SVE_VECTOR_OPERATORS";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if (SHIBYTE(v43) < 0)
    operator delete(__dst[0]);
}

uint64_t sub_22F1F1AD4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 216);
  if (v4)
  {
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    v6 = v4 & 0xFFFFFFFF00000000 | v5;
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)result + 568))(result, "sve", 3);
  if ((_DWORD)result)
  {
    v6 = 0x1000000001;
LABEL_8:
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

BOOL sub_22F1F1B48(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v14[2];
  __int16 v15;

  v14[0] = a2;
  v14[1] = a3;
  v15 = 0;
  switch(a3)
  {
    case 3:
      v4 = *((unsigned __int8 *)a2 + 2);
      v5 = *a2 == 29281;
      v6 = 109;
      break;
    case 5:
      v4 = *((unsigned __int8 *)a2 + 4);
      v5 = *(_DWORD *)a2 == 913142369;
      v6 = 52;
      break;
    case 7:
      v4 = *(_DWORD *)((char *)a2 + 3);
      v5 = *(_DWORD *)a2 == 1668440417;
      v6 = 875980899;
      break;
    default:
      goto LABEL_13;
  }
  if (v5 && v4 == v6)
    v15 = 257;
LABEL_13:
  v8 = sub_22F2ABF14((uint64_t)v14, "neon", 4, *(_DWORD *)(a1 + 364) & 1);
  v9 = sub_22F436BD8(v8, (*(_DWORD *)(a1 + 364) & 2) != 0);
  v10 = sub_22F2ABF14(v9, "ls64", 4, *(_BYTE *)(a1 + 380));
  v11 = sub_22F2ABF14(v10, "xs", 2, *(_BYTE *)(a1 + 393));
  if (*(_BYTE *)(v11 + 17))
    v12 = *(_BYTE *)(v11 + 16) == 0;
  else
    v12 = 1;
  return !v12;
}

uint64_t sub_22F1F1C50(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::APFloatBase *v10;
  __int128 v11;
  __int128 v12;

  v7 = (_QWORD *)sub_22F436570(a1, a2 + 4, (llvm::Triple *)a3, a4);
  *v7 = a2[3];
  *v7 = a2[2];
  v8 = a2[1];
  *v7 = v8;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 128) = 4;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 132) = 4;
  v9 = *a2;
  *v7 = v9;
  v10 = (llvm::APFloatBase *)(v7 + 53);
  if (*((char *)a3 + 23) < 0)
  {
    v10 = (llvm::APFloatBase *)sub_22E3BB2B4(v10, *(void **)a3, *((_QWORD *)a3 + 1));
    v9 = *(_QWORD *)a1;
  }
  else
  {
    v11 = *a3;
    *((_QWORD *)v10 + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v10 = v11;
  }
  v12 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a1 + 448) = v12;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 5) = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 4) = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 21) = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 20) = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 23) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 13) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 15) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 14) = 64;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24) + 88) = llvm::APFloatBase::IEEEdouble(v10);
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 116) = 9;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 144) = 9;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 112) = 10;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 120) = 9;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 124) = 9;
  return a1;
}

uint64_t sub_22F1F1DBC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;

  sub_22F42B9A0(a1, a2, a3);
  v7 = "_M_ARM64";
  v8 = 259;
  v5 = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v7, (llvm::Twine *)&v5);
}

uint64_t sub_22F1F1E18(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v6;

  v2 = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 41);
  if (a2 >= 0x200)
  {
    v3 = v2 > 0x80;
    v4 = 128;
    goto LABEL_5;
  }
  if (a2 >= 0x40)
  {
    v3 = v2 > 0x40;
    v4 = 64;
LABEL_5:
    if (v3)
      return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 41);
    else
      return v4;
  }
  if (v2 <= 0x20)
    v6 = 32;
  else
    v6 = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 41);
  if (a2 <= 0xF)
    return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 41);
  else
    return v6;
}

uint64_t sub_22F1F1E6C(uint64_t a1, _QWORD *a2, llvm::Triple *a3, const std::string *a4)
{
  uint64_t v8;
  int v9;
  char isMacOSXVersionLT;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t OSVersion;
  uint64_t v21;

  v8 = sub_22F436570(a1, a2 + 3, a3, (uint64_t)a4);
  *(_QWORD *)v8 = a2[2];
  *(_QWORD *)v8 = a2[1];
  *(_QWORD *)v8 = *a2;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 81) = 0;
  std::string::operator=((std::string *)(v8 + 424), a4 + 15);
  v9 = *((_DWORD *)a3 + 9);
  if ((v9 & 0xFFFFFFF7) == 3)
  {
    isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT(a3);
LABEL_19:
    v14 = isMacOSXVersionLT ^ 1;
    goto LABEL_20;
  }
  if (v9 <= 28)
  {
    if (v9 == 7 || v9 == 28)
    {
      if (llvm::Triple::isArch64Bit(a3))
      {
        OSVersion = llvm::Triple::getOSVersion(a3);
        v21 = v13;
        v12 = 8;
LABEL_18:
        v19[0] = v12;
        v19[1] = 0;
        isMacOSXVersionLT = sub_22E3B38EC(&OSVersion, v19);
        goto LABEL_19;
      }
      if (llvm::Triple::isArch32Bit(a3))
      {
        if (*((_DWORD *)a3 + 10) == 20)
        {
          OSVersion = llvm::Triple::getOSVersion(a3);
          v21 = v16;
          v12 = 10;
        }
        else
        {
          OSVersion = llvm::Triple::getOSVersion(a3);
          v21 = v17;
          v12 = 9;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    if ((v9 - 29) < 2)
    {
      if (*((_DWORD *)a3 + 10) == 20)
      {
        OSVersion = llvm::Triple::getOSVersion(a3);
        v21 = v11;
        v12 = 3;
      }
      else
      {
        OSVersion = llvm::Triple::getOSVersion(a3);
        v21 = v15;
        v12 = 2;
      }
      goto LABEL_18;
    }
    if (v9 == 33)
    {
      v14 = 1;
LABEL_20:
      *(_BYTE *)(a1 + 81) = v14;
    }
  }
  *(_QWORD *)(a1 + 136) = "\x01mcount";
  return a1;
}

uint64_t sub_22F1F1FE8(uint64_t a1, _QWORD *a2, llvm::Triple *this, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  void *v20[2];
  char v21;

  v18 = "aarch64";
  v19 = 259;
  v17 = 261;
  v16[0] = llvm::Triple::getVendorName(this);
  v16[1] = v8;
  v15 = 261;
  v14[0] = llvm::Triple::getOSName(this);
  v14[1] = v9;
  v13 = 261;
  v12[0] = llvm::Triple::getEnvironmentName(this);
  v12[1] = v10;
  MEMORY[0x23489F1C8](v20, &v18, v16, v14, v12);
  sub_22F436570(a1, a2 + 2, (llvm::Triple *)v20, a4);
  *(_QWORD *)a1 = a2[1];
  if (v21 < 0)
    operator delete(v20[0]);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 288) |= 0x40u;
  return a1;
}

uint64_t sub_22F1F20CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBDE2B8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, &off_24FBDDB30);
}

void sub_22F1F2110(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBDE2B8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_22F1E6E70(a1, &off_24FBDDB30);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F2168(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)a1 = a2[4];
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, a2 + 5);
}

uint64_t sub_22F1F21C0(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)a1 = a2[3];
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  return sub_22F1E6E70(a1, a2 + 4);
}

uint64_t sub_22F1F2218(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_22F2ABF14(a1, "sve2-aes", 8, a2);
  v4 = sub_22F2ABF14(v3, "sve2-sha3", 9, a2);
  v5 = sub_22F2ABF14(v4, "sve2-sm4", 8, a2);
  return sub_22E72DCE4(v5, "f64mm", 5, "f32mm", 5, "i8mm", 4, v6, "bf16", 4, a2);
}

void sub_22F1F22B4(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t AIRVersion;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  _QWORD v22[2];
  std::string v23;
  std::string v24;
  void *__p[2];
  std::string::size_type v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[2];
  int v30;
  int v31;
  int v32;
  __int16 v33;
  _BYTE v34[64];
  uint64_t *v35;
  _QWORD *v36;
  __int128 v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x24BDAC8D0];
  AIRVersion = llvm::Triple::getAIRVersion((llvm::Triple *)(a1 + 32));
  v7 = v6;
  v36 = v38;
  v37 = xmmword_22F44E360;
  sub_22F242C48((uint64_t)v34, (uint64_t)&v36);
  v8 = HIDWORD(AIRVersion) & 0x7FFFFFFF;
  if (AIRVersion >= 0)
    LODWORD(v8) = 0;
  v9 = v7 & 0x7FFFFFFF;
  v29[0] = &unk_24FBE45C0;
  v29[1] = "%u%02u%02u";
  if (v7 >= 0)
    v9 = 0;
  v30 = AIRVersion;
  v31 = v8;
  v32 = v9;
  llvm::raw_ostream::operator<<();
  v10 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if (v10 == 64)
  {
    v11 = "__AIR64__";
  }
  else
  {
    if (v10 != 32)
      goto LABEL_10;
    v11 = "__AIR32__";
  }
  v29[0] = v11;
  v33 = 259;
  v27[0] = "1";
  v28 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
LABEL_10:
  v29[0] = "__AIR_VERSION__";
  v33 = 259;
  v13 = *v35;
  v12 = v35[1];
  v28 = 261;
  v27[0] = v13;
  v27[1] = v12;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
  v29[0] = "__AIR_PB_ABI__";
  v33 = 259;
  v27[0] = "0";
  v28 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
  v29[0] = "__AIR_MB_ABI__";
  v33 = 259;
  v27[0] = "1";
  v28 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
  v29[0] = "__AIR_VB_ABI__";
  v33 = 259;
  v27[0] = "2";
  v28 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
  v29[0] = "__AIR_ABI__";
  v33 = 259;
  v14 = a1 + 368;
  v15 = *(_BYTE *)(a1 + 391);
  v16 = v15 < 0;
  if (v15 < 0)
    v14 = *(_QWORD *)(a1 + 368);
  v17 = v15 & 0x7F;
  if (v16)
    v17 = *(_QWORD *)(a1 + 376);
  v22[0] = v14;
  v22[1] = v17;
  llvm::StringRef::upper((llvm::StringRef *)v22);
  v18 = std::string::insert(&v23, 0, "__AIR_");
  v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "_ABI__");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v26 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v28 = 260;
  v27[0] = __p;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v29[0] = "__AIR_IMPL_COHERENT_LOAD_STORE__";
  v33 = 259;
  v27[0] = "1";
  v28 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v29, (llvm::Twine *)v27);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v34);
  if (v36 != v38)
    free(v36);
}

uint64_t sub_22F1F25CC(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  unint64_t v6;
  const void *v7;
  size_t v8;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  size_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *__p[2];
  char v47;
  uint64_t v48;
  _QWORD v49[2];

  v2 = *(_BYTE *)(a2 + 23);
  if (v2 >= 0)
    v3 = v2 & 0x7F;
  else
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 != 2)
    return 0;
  v6 = v2 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v7 = v2 >= 0 ? (const void *)a2 : *(const void **)a2;
  v8 = v6 >= 2 ? 2 : v6;
  if ((memcmp(v7, "pb", v8) || v6 != 2) && (memcmp(v7, "mb", v8) || v6 != 2) && (memcmp(v7, "vb", v8) || v6 != 2))
    return 0;
  v49[0] = llvm::Triple::getAIRVersion((llvm::Triple *)(a1 + 32));
  v49[1] = v12;
  __p[0] = (void *)0x8000000300000002;
  __p[1] = 0;
  if (!sub_22E3B38EC(v49, __p))
    goto LABEL_43;
  v13 = *(_BYTE *)(a2 + 23);
  if (v13 >= 0)
    v14 = v13 & 0x7F;
  else
    v14 = *(_QWORD *)(a2 + 8);
  if (v14 != 2)
    return 0;
  v15 = v13 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v16 = v13 >= 0 ? (const void *)a2 : *(const void **)a2;
  v17 = v15 >= 2 ? 2 : v15;
  v18 = memcmp(v16, "pb", v17);
  result = 0;
  if (!v18 && v15 == 2)
  {
LABEL_43:
    std::string::operator=((std::string *)(a1 + 368), (const std::string *)a2);
    llvm::Triple::getEffectiveMacCatalystVariant((llvm::Triple *)(a1 + 32));
    v20 = operator new();
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_DWORD *)(v20 + 64) = 0;
    v48 = v20;
    llvm::air::AIRTargetInfoBuilder::setABI();
    v21 = llvm::air::AIRTargetInfoBuilder::setABI();
    v22 = *(unsigned int **)(v21 + 48);
    *(_QWORD *)(v21 + 48) = 0;
    v23 = v48;
    v48 = 0;
    if (v23)
      MEMORY[0x2348A0E9C](v23, 0x1000C4069DB8102);
    if (v47 < 0)
      operator delete(__p[0]);
    v24 = *(unsigned int *)(a1 + 216);
    v25 = *(unsigned int *)(a1 + 208);
    v26 = *(unsigned int *)(a1 + 200);
    v27 = *(unsigned int *)(a1 + 184);
    v28 = *(unsigned int *)(a1 + 188);
    v29 = *(unsigned int *)(a1 + 176);
    v30 = v22[7] | ((unint64_t)*(unsigned int *)(a1 + 168) << 32);
    *(_QWORD *)(a1 + 164) = v30;
    v31 = v30 | ((unint64_t)v22[9] << 32);
    *(_QWORD *)(a1 + 164) = v31;
    LODWORD(v32) = *v22;
    v33 = v22[1];
    if (*v22 <= v33)
      v32 = v33;
    else
      v32 = v32;
    v34 = v32 | (v29 << 32);
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 172) = v34;
    v35 = v34 | ((unint64_t)v22[8] << 32);
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 172) = v35;
    v36 = v22[1] | (unint64_t)(v27 << 32);
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 180) = v36;
    v37 = v36 | ((unint64_t)v22[2] << 32);
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 180) = v37;
    v38 = v28 | ((unint64_t)v22[15] << 32);
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 188) = v38;
    v39 = v22[10] | (unint64_t)(v26 << 32);
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 188) = v38;
    *(_QWORD *)(a1 + 196) = v39;
    v40 = v39 | ((unint64_t)v22[5] << 32);
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 188) = v38;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 196) = v40;
    v41 = v22[6] | (unint64_t)(v25 << 32);
    *(_QWORD *)(a1 + 196) = v40;
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 188) = v38;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 204) = v41;
    v42 = v41 | ((unint64_t)v22[11] << 32);
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 188) = v38;
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 196) = v40;
    *(_QWORD *)(a1 + 204) = v42;
    v43 = v22[4] | (unint64_t)(v24 << 32);
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 188) = v38;
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 204) = v42;
    *(_QWORD *)(a1 + 196) = v40;
    *(_QWORD *)(a1 + 212) = v43;
    v44 = v43 | ((unint64_t)v22[3] << 32);
    *(_QWORD *)(a1 + 204) = v42;
    *(_QWORD *)(a1 + 196) = v40;
    *(_QWORD *)(a1 + 188) = v38;
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 212) = v44;
    v45 = v38 & 0xFFFFFFFF00000000 | v22[16];
    *(_QWORD *)(a1 + 196) = v40;
    *(_QWORD *)(a1 + 204) = v42;
    *(_QWORD *)(a1 + 180) = v37;
    *(_QWORD *)(a1 + 164) = v31;
    *(_QWORD *)(a1 + 172) = v35;
    *(_QWORD *)(a1 + 212) = v44;
    *(_QWORD *)(a1 + 188) = v45;
    MEMORY[0x2348A0E9C](v22, 0x1000C4069DB8102);
    return 1;
  }
  return result;
}

uint64_t sub_22F1F298C(uint64_t a1, _QWORD *a2, llvm::Triple *a3, const std::string *a4)
{
  uint64_t *v8;
  uint64_t v9;
  llvm::APFloatBase *v10;
  uint64_t v11;
  int v12;
  char isMacOSXVersionLT;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  void *__p;
  uint64_t v24;
  char v25;

  v8 = sub_22F1E6848((uint64_t *)a1, a2 + 3, a3);
  v9 = a2[2];
  *v8 = v9;
  v8[47] = 0;
  v8[48] = 0;
  v8[46] = 0;
  *((_BYTE *)v8 + 80) = 0;
  *((_WORD *)v8 + 42) = 257;
  *((_BYTE *)v8 + 87) = 1;
  *((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 160) &= ~0x20u;
  v25 = 2;
  strcpy((char *)&__p, "pb");
  v10 = (llvm::APFloatBase *)(*(uint64_t (**)(uint64_t *, void **))(*v8 + 504))(v8, &__p);
  if (v25 < 0)
    operator delete(__p);
  *(_DWORD *)(a1 + 148) = 10;
  *(_WORD *)(a1 + 88) = 257;
  v11 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 9) = 16;
  *(_BYTE *)(a1 + *(_QWORD *)(v11 - 24) + 8) = 16;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24) + 64) = llvm::APFloatBase::BFloat(v10);
  *(_QWORD *)a1 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 81) = 0;
  std::string::operator=((std::string *)(a1 + 392), a4 + 15);
  v12 = *((_DWORD *)a3 + 9);
  if ((v12 & 0xFFFFFFF7) == 3)
  {
    isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT(a3);
LABEL_21:
    v17 = isMacOSXVersionLT ^ 1;
    goto LABEL_22;
  }
  if (v12 <= 28)
  {
    if (v12 == 7 || v12 == 28)
    {
      if (llvm::Triple::isArch64Bit(a3))
      {
        __p = (void *)llvm::Triple::getOSVersion(a3);
        v24 = v16;
        v15 = 8;
LABEL_20:
        v22[0] = v15;
        v22[1] = 0;
        isMacOSXVersionLT = sub_22E3B38EC(&__p, v22);
        goto LABEL_21;
      }
      if (llvm::Triple::isArch32Bit(a3))
      {
        if (*((_DWORD *)a3 + 10) == 20)
        {
          __p = (void *)llvm::Triple::getOSVersion(a3);
          v24 = v19;
          v15 = 10;
        }
        else
        {
          __p = (void *)llvm::Triple::getOSVersion(a3);
          v24 = v20;
          v15 = 9;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    if ((v12 - 29) < 2)
    {
      if (*((_DWORD *)a3 + 10) == 20)
      {
        __p = (void *)llvm::Triple::getOSVersion(a3);
        v24 = v14;
        v15 = 3;
      }
      else
      {
        __p = (void *)llvm::Triple::getOSVersion(a3);
        v24 = v18;
        v15 = 2;
      }
      goto LABEL_20;
    }
    if (v12 == 33)
    {
      v17 = 1;
LABEL_22:
      *(_BYTE *)(a1 + 81) = v17;
    }
  }
  *(_QWORD *)(a1 + 136) = "\x01mcount";
  return a1;
}

uint64_t sub_22F1F2BB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBDFCB0;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FBE0048);
}

void sub_22F1F2BF4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FBDFCB0;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FBE0048);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F2C4C(uint64_t a1)
{
  if (*(char *)(a1 + 391) >= 0)
    return a1 + 368;
  else
    return *(_QWORD *)(a1 + 368);
}

uint64_t sub_22F1F2C70(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

const char *sub_22F1F2C8C()
{
  return "air.static_init";
}

uint64_t sub_22F1F2C98(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)a1 = a2[2];
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, a2 + 3);
}

uint64_t sub_22F1F2CF0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 56) == 25 || ((a2 - 3) & 0xFFFFFFFD) == 0)
    return 32;
  else
    return 64;
}

uint64_t sub_22F1F2D14(uint64_t a1, llvm::Triple *this, uint64_t a3)
{
  int v6;
  int ArchAttrAMDGCN;
  size_t v8;
  char *v9;
  void *v11;
  int v12;
  int v13;
  char v14;

  *sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FBE86B8, this) = (uint64_t)&off_24FBE8320;
  if (*((_DWORD *)this + 6) == 30)
    v6 = llvm::AMDGPU::parseArchAMDGCN();
  else
    v6 = llvm::AMDGPU::parseArchR600();
  *(_DWORD *)(a1 + 364) = v6;
  if (*((_DWORD *)this + 6) == 30)
    ArchAttrAMDGCN = llvm::AMDGPU::getArchAttrAMDGCN();
  else
    ArchAttrAMDGCN = llvm::AMDGPU::getArchAttrR600();
  *(_DWORD *)(a1 + 368) = ArchAttrAMDGCN;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0x1000000000;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  if (*(_DWORD *)(a1 + 56) == 30)
    v8 = 177;
  else
    v8 = 118;
  if (*(_DWORD *)(a1 + 56) == 30)
    v9 = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192"
         ":256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7";
  else
    v9 = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1";
  sub_22F1E6F0C(a1, v9, v8, (uint64_t)"");
  if (*((_DWORD *)this + 6) != 30 || *((_DWORD *)this + 9) == 34)
    v11 = &unk_22F54A3AC;
  else
    v11 = &unk_22F54A340;
  *(_QWORD *)(a1 + 152) = v11;
  *(_BYTE *)(a1 + 360) = 1;
  *(_BYTE *)(a1 + 84) = 1;
  *(_BYTE *)(a1 + 87) = 1;
  if ((*(_DWORD *)(a1 + 368) & 0x40) != 0)
    v12 = 32;
  else
    v12 = 64;
  *(_DWORD *)(a1 + 372) = v12;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFFFDFF | (*(unsigned __int8 *)(a3 + 314) << 9);
  v13 = *(_DWORD *)(a1 + 56);
  if (v13 == 25)
    v14 = 32;
  else
    v14 = 64;
  *(_BYTE *)(a1 + 433) = v14;
  *(_BYTE *)(a1 + 432) = v14;
  if (v13 == 30)
  {
    *(_WORD *)(a1 + 452) = 16448;
    *(_DWORD *)(a1 + 544) = 8;
    *(_QWORD *)(a1 + 552) = 0x700000007;
  }
  *(_WORD *)(a1 + 94) = 16448;
  return a1;
}

uint64_t sub_22F1F2EAC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  llvm::raw_ostream **v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **p_p;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  const char *v15;
  const char **v16;
  const char **v17;
  size_t v18;
  const char *v19;
  int Key;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  _BYTE *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  const char *v32;
  char v33;
  int v34;
  int v35;
  int v36;
  const char **v38;
  llvm::raw_ostream **v39;
  void *__p;
  size_t v41;
  unint64_t v42;
  char v43;
  _QWORD v44[4];
  __int16 v45;
  const char *v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  __int16 v50;
  _QWORD v51[2];
  const char *v52;
  uint64_t v53;
  __int16 v54;
  void *v55;
  unsigned int v56;
  const char *v57;
  __int16 v58;
  uint64_t v59;

  v3 = a3;
  v59 = *MEMORY[0x24BDAC8D0];
  v55 = "__AMD__";
  v58 = 259;
  v51[0] = "1";
  v54 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  v55 = "__AMDGPU__";
  v58 = 259;
  v51[0] = "1";
  v54 = 259;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  if (*(_DWORD *)(a1 + 56) == 30)
    v5 = "__AMDGCN__";
  else
    v5 = "__R600__";
  v55 = v5;
  v58 = 259;
  v51[0] = "1";
  v54 = 259;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  if (!*(_DWORD *)(a1 + 364))
    goto LABEL_54;
  v6 = *(_DWORD *)(a1 + 56) == 30 ? llvm::AMDGPU::getArchNameAMDGCN() : llvm::AMDGPU::getArchNameR600();
  v8 = (void **)v6;
  v9 = v7;
  v51[0] = "__";
  v52 = (const char *)v6;
  v53 = v7;
  v54 = 1283;
  v55 = v51;
  v57 = "__";
  v58 = 770;
  v46 = "1";
  v50 = 259;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)&v46);
  if (*(_DWORD *)(a1 + 56) != 30)
    goto LABEL_54;
  v55 = "__amdgcn_processor__";
  v58 = 259;
  v46 = "\"";
  v48 = v8;
  v49 = v9;
  v50 = 1283;
  v51[0] = &v46;
  v52 = "\"";
  v54 = 770;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  v55 = "__amdgcn_target_id__";
  v58 = 259;
  v44[0] = "\"";
  v45 = 259;
  p_p = &__p;
  sub_22F1F34FC(a1, (uint64_t)&__p);
  v11 = v45;
  if (v45 == 1)
  {
    v46 = (const char *)&__p;
    v50 = 260;
    v12 = 4;
    v14 = v47;
  }
  else
  {
    if (!(_BYTE)v45)
    {
      v12 = 0;
      v50 = 256;
      v13 = 1;
      goto LABEL_17;
    }
    v15 = (const char *)v44[0];
    v12 = 2;
    if (HIBYTE(v45) != 1)
    {
      v11 = 2;
      v15 = (const char *)v44;
    }
    v46 = v15;
    v47 = v44[1];
    v48 = &__p;
    LOBYTE(v50) = v11;
    v14 = 4;
    HIBYTE(v50) = 4;
    p_p = (void **)&v46;
  }
  v51[0] = p_p;
  v51[1] = v14;
  v13 = 3;
  v52 = "\"";
LABEL_17:
  LOBYTE(v54) = v12;
  HIBYTE(v54) = v13;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete(__p);
  sub_22F1E623C(a1 + 32, (uint64_t)&v55);
  v16 = (const char **)v55;
  if (v56)
  {
    v39 = v3;
    v17 = (const char **)((char *)v55 + 16 * v56);
    v38 = v17;
    while (1)
    {
      v19 = *v16;
      v18 = (size_t)v16[1];
      Key = llvm::StringMapImpl::FindKey();
      if (Key != -1)
      {
        v21 = Key;
        if (Key != (unint64_t)*(unsigned int *)(a1 + 384))
          break;
      }
LABEL_50:
      v16 += 2;
      if (v16 == v17)
      {
        v16 = (const char **)v55;
        v3 = v39;
        goto LABEL_52;
      }
    }
    v22 = *(_QWORD *)(a1 + 376);
    if (!v19)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      __p = 0;
      v41 = 0;
      v42 = 0;
LABEL_35:
      v30 = v27;
      if (v27 >= 0)
        v26 = &__p;
      v31 = v27 & 0x7F;
      if (v30 < 0)
        v31 = v25;
      for (; v31; --v31)
      {
        if (*v26 == 45)
          *v26 = 95;
        ++v26;
      }
      v46 = "__amdgcn_feature_";
      v48 = &__p;
      v50 = 1027;
      v51[0] = &v46;
      v52 = "__";
      v54 = 770;
      if (*(_BYTE *)(*(_QWORD *)(v22 + 8 * v21) + 8))
        v32 = "1";
      else
        v32 = "0";
      v33 = 1;
      HIBYTE(v45) = 1;
      if (*v32)
      {
        v44[0] = v32;
        v33 = 3;
      }
      LOBYTE(v45) = v33;
      sub_22E7333BC(v39, (llvm::Twine *)v51, (llvm::Twine *)v44);
      if (SHIBYTE(v42) < 0)
        operator delete(__p);
      goto LABEL_50;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v23 = *(_QWORD *)(a1 + 376);
    if (v18 >= 0x17)
    {
      v28 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v28 = v18 | 7;
      v29 = v28 + 1;
      v24 = operator new(v28 + 1);
      v41 = v18;
      v42 = v29 | 0x8000000000000000;
      __p = v24;
    }
    else
    {
      HIBYTE(v42) = v18;
      v24 = &__p;
      if (!v18)
        goto LABEL_34;
    }
    memmove(v24, v19, v18);
LABEL_34:
    v22 = v23;
    *((_BYTE *)v24 + v18) = 0;
    v27 = HIBYTE(v42);
    v26 = __p;
    v25 = v41;
    v17 = v38;
    goto LABEL_35;
  }
LABEL_52:
  if (v16 != &v57)
    free(v16);
LABEL_54:
  if ((*(_BYTE *)(a1 + 289) & 2) != 0)
  {
    v55 = "__AMDGCN_UNSAFE_FP_ATOMICS__";
    v58 = 259;
    v51[0] = "1";
    v54 = 259;
    sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  }
  if (*(_DWORD *)(a1 + 56) == 30 || (v34 = *(_DWORD *)(a1 + 368), (v34 & 2) != 0))
  {
    v55 = "__HAS_FMAF__";
    v58 = 259;
    v51[0] = "1";
    v54 = 259;
    sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
    v34 = *(_DWORD *)(a1 + 368);
  }
  if ((v34 & 0x10) != 0)
  {
    v55 = "FP_FAST_FMAF";
    v58 = 259;
    v51[0] = "1";
    v54 = 259;
    sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  }
  if (*(_DWORD *)(a1 + 56) != 30)
  {
    v35 = *(_DWORD *)(a1 + 368);
    if ((v35 & 4) == 0)
    {
LABEL_65:
      if ((v35 & 8) == 0)
        goto LABEL_68;
      goto LABEL_66;
    }
  }
  v55 = "__HAS_LDEXPF__";
  v58 = 259;
  v51[0] = "1";
  v54 = 259;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  if (*(_DWORD *)(a1 + 56) != 30)
  {
    v35 = *(_DWORD *)(a1 + 368);
    goto LABEL_65;
  }
LABEL_66:
  v55 = "__HAS_FP64__";
  v58 = 259;
  v51[0] = "1";
  v54 = 259;
  sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  if (*(_DWORD *)(a1 + 56) == 30)
  {
    v55 = "FP_FAST_FMA";
    v58 = 259;
    v51[0] = "1";
    v54 = 259;
    sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
  }
LABEL_68:
  v55 = "__AMDGCN_WAVEFRONT_SIZE";
  v58 = 259;
  v36 = *(_DWORD *)(a1 + 372);
  v54 = 264;
  LODWORD(v51[0]) = v36;
  return sub_22E7333BC(v3, (llvm::Twine *)&v55, (llvm::Twine *)v51);
}

void sub_22F1F34FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *ArchNameAMDGCN;
  size_t v5;
  __int128 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 56) == 30)
  {
    if (*(_DWORD *)(a1 + 364))
    {
      ArchNameAMDGCN = (void *)llvm::AMDGPU::getArchNameAMDGCN();
      sub_22F1E63CC(ArchNameAMDGCN, v5, a1 + 376, (uint64_t)&v6);
      *(_OWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v7;
      *(_BYTE *)(a2 + 24) = 1;
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_WORD *)(a2 + 23) = 256;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

uint64_t sub_22F1F357C(uint64_t a1, const char **a2, uint64_t a3)
{
  unsigned __int8 v5;
  const char *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  size_t v10;
  size_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  unsigned int v17;
  int v18;
  int v20;
  _BYTE *v21;
  int64_t v22;
  int Key;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  _BYTE *v29;
  size_t v30;

  v5 = atomic_load((unsigned __int8 *)&qword_253E4D120);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_253E4D120))
  {
    v28 = 0;
    qword_253E4D128 = 0;
    *(_QWORD *)&dword_253E4D130 = 0;
    qword_253E4D138 = 0x800000000;
    do
    {
      sub_22E3B39D4((llvm::StringMapImpl *)&qword_253E4D128, (&off_24FBE8A68)[v28], (size_t)(&off_24FBE8A68)[v28 + 1]);
      v28 += 2;
    }
    while (v28 != 34);
    __cxa_atexit((void (*)(void *))sub_22E90D950, &qword_253E4D128, &dword_22E3A8000);
    __cxa_guard_release(&qword_253E4D120);
  }
  v6 = *a2;
  v7 = **a2;
  if ((v7 - 65) < 3)
    goto LABEL_3;
  if (v7 == 74)
  {
    *(_DWORD *)a3 |= 0x10u;
    v9 = 0x7FFFFFFF8000;
    goto LABEL_9;
  }
  if (v7 == 73)
  {
    *(_DWORD *)a3 |= 0x10u;
    v9 = 0x40FFFFFFF0;
LABEL_9:
    *(_QWORD *)(a3 + 8) = v9;
    result = 1;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v10 = strlen(*a2);
  v11 = v10;
  if (v10 == 2 && (*(_WORD *)v6 == 16708 || *(_WORD *)v6 == 16964))
  {
    *a2 = v6 + 1;
LABEL_3:
    *(_DWORD *)a3 |= 0x10u;
    return 1;
  }
  v12 = *(unsigned __int8 *)*a2;
  v13 = v12 != 123 || v10 == 0;
  v14 = !v13;
  if (v13)
    v15 = (char *)*a2;
  else
    v15 = (char *)(v6 + 1);
  v16 = v10 - v14;
  if (v10 == v14)
    return 0;
  v17 = *v15 - 97;
  v25 = v17 > 0x15;
  v18 = (1 << v17) & 0x240001;
  if (v25 || v18 == 0)
  {
    if (v12 != 123)
      return 0;
    v21 = memchr(v15, 125, v16);
    v22 = v21 ? v21 - v15 : -1;
    Key = llvm::StringMapImpl::FindKey();
    v24 = Key == -1 || Key == (unint64_t)dword_253E4D130;
    v25 = v24 || v16 > v22 + 1;
    if (v25)
      return 0;
    *(_DWORD *)a3 |= 2u;
    v26 = (uint64_t)&v6[v11 - 1];
LABEL_49:
    *a2 = (const char *)v26;
    return 1;
  }
  v29 = v15 + 1;
  v30 = v16 - 1;
  if (v12 != 123)
  {
    if (v16 == 1)
    {
      *(_DWORD *)a3 |= 2u;
      *a2 = v15;
      return 1;
    }
    return 0;
  }
  if (v16 == 1)
    return 0;
  v20 = v15[1];
  if (v20 == 91)
  {
    v29 = v15 + 2;
    v30 = v16 - 2;
    if (v16 == 2)
      return 0;
  }
  if ((llvm::consumeUnsignedInteger() & 1) != 0)
    return 0;
  v27 = v30;
  if (v30 && *v29 == 58)
  {
    if (v20 == 91)
      llvm::consumeUnsignedInteger();
    return 0;
  }
  if (v20 == 91)
  {
    if (!v30 || *v29 != 93)
      return 0;
    v27 = v30 - 1;
    ++v29;
  }
  if (!v27)
    return 0;
  result = 0;
  if (v27 == 1)
  {
    v26 = (uint64_t)v29;
    if (*v29 == 125)
    {
      *(_DWORD *)a3 |= 2u;
      goto LABEL_49;
    }
  }
  return result;
}

void sub_22F1F38D0(size_t a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string __dst;
  char v15;
  std::string v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  _QWORD **v20;
  _QWORD *v21[2];
  void *v22;
  char __p[24];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (!*a2 || (a1 = strlen(*a2), a1 != 2) || *(_WORD *)v5 != 16708 && *(_WORD *)v5 != 16964)
  {
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = 0xFFFFFFFF00000000;
    v17 = v19;
    v18 = 0x400000000;
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    *(_WORD *)__p = 0;
    LOBYTE(v22) = 0;
    v24 = 0;
    v16.__r_.__value_.__s.__data_[16] = 0;
    if (!sub_22F1F357C(a1, a2, (uint64_t)&v16))
    {
      *a2 = v5;
      v9 = *v5;
      *(_BYTE *)(a3 + 23) = 1;
      *(_WORD *)a3 = v9;
LABEL_17:
      if (v24 < 0)
        operator delete(*(void **)&__p[1]);
      if (__p[0] < 0)
        operator delete(v22);
      sub_22F242DFC((uint64_t)&v20, v21[0]);
      if (v17 != v19)
        free(v17);
      return;
    }
    v6 = strlen(v5);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v10 = v6 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v7;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
      p_dst = &__dst;
      if (!v6)
      {
LABEL_15:
        p_dst->__r_.__value_.__s.__data_[v7] = 0;
        std::string::basic_string((std::string *)a3, &__dst, 0, *a2 - v5 + 1, (std::allocator<char> *)&v15);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
    }
    memmove(p_dst, v5, v7);
    goto LABEL_15;
  }
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 1;
  LOWORD(v16.__r_.__value_.__l.__data_) = 94;
  *a2 = v5 + 1;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 2;
  LOWORD(__dst.__r_.__value_.__l.__data_) = *(_WORD *)v5;
  __dst.__r_.__value_.__s.__data_[2] = 0;
  v12 = std::string::append(&v16, (const std::string::value_type *)&__dst, 2uLL);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)a3 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

uint64_t sub_22F1F3B48(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 56) == 25 || ((a2 - 3) & 0xFFFFFFFD) == 0)
    return 32;
  else
    return 64;
}

uint64_t sub_22F1F3B6C(uint64_t a1)
{
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  sub_22E622C5C(a1 + 376);
  return sub_22F1E6E70(a1, &off_24FBE86B8);
}

double sub_22F1F3BAC(uint64_t a1, int a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  size_t v10;

  *(_DWORD *)(a1 + 468) &= ~0x80u;
  v4 = *(_QWORD *)a1;
  if (a2)
    v5 = 64;
  else
    v5 = 32;
  *(_WORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 42) = v5;
  *(_BYTE *)(a1 + *(_QWORD *)(v4 - 24) + 15) = v5;
  *(_BYTE *)(a1 + *(_QWORD *)(v4 - 24) + 23) = v5;
  *(_BYTE *)(a1 + *(_QWORD *)(v4 - 24) + 13) = v5;
  *(_BYTE *)(a1 + *(_QWORD *)(v4 - 24) + 9) = 16;
  *(_BYTE *)(a1 + *(_QWORD *)(v4 - 24) + 8) = 16;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24) + 64) = llvm::APFloatBase::BFloat((llvm::APFloatBase *)a1);
  *(_DWORD *)(a1 + *(_QWORD *)(v4 - 24) + 128) = 5;
  *(_BYTE *)(a1 + *(_QWORD *)(v4 - 24) + 160) &= ~2u;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 164) = 32;
  v6 = *(_DWORD *)(a1 + 76);
  if (v6 == 5 && a2)
  {
    v7 = "e-m:o-p:32:32-Fi8-i64:64-a:0:32-n32-S128";
    v8 = "_";
    v9 = a1;
    v10 = 40;
  }
  else
  {
    if (v6 == 5)
    {
      if (*(_BYTE *)(a1 + 80))
        v7 = "E-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32";
      else
        v7 = "e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32";
      v8 = "_";
    }
    else
    {
      if (*(_BYTE *)(a1 + 80))
        v7 = "E-m:e-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32";
      else
        v7 = "e-m:e-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32";
      v8 = (const char *)&unk_22F61DA77;
    }
    v9 = a1;
    v10 = 64;
  }
  return sub_22F1E6F0C(v9, v7, v10, (uint64_t)v8);
}

uint64_t sub_22F1F3D08(uint64_t a1, uint64_t *a2, llvm::Triple *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t DefaultCPU;
  unint64_t v14;
  const void *v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  int v21;
  int v22;
  int v23;
  char v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  const char *v28;
  const void **v29;
  const void **v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  size_t v34;
  unsigned int v37;
  int v38;
  __int128 __dst;
  unint64_t v40;

  v8 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v9 = *a2;
  *v8 = *a2;
  *((_DWORD *)v8 + 112) = 0;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_DWORD *)v8 + 114) = 6;
  *((_DWORD *)v8 + 117) |= 0x80u;
  v8[59] = 0;
  v10 = *((_DWORD *)a3 + 9);
  if (v10 <= 0x21 && ((1 << v10) & 0x3F0000888) != 0 || (v10 & 0xFFFFFFFE) == 0xC || *((_DWORD *)a3 + 11) == 5)
    v11 = 7;
  else
    v11 = 5;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 124) = v11;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 120) = v11;
  if (v10 <= 0x21 && ((1 << v10) & 0x3F0000888) != 0)
  {
    v12 = 8;
  }
  else
  {
    if ((v10 & 0xFFFFFFFE) == 0xC)
      v38 = 8;
    else
      v38 = 6;
    if (*((_DWORD *)a3 + 11) == 5)
      v12 = 8;
    else
      v12 = v38;
  }
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 112) = v12;
  if ((v10 <= 0x21 && ((1 << v10) & 0x3F0000888) != 0 || *((_DWORD *)a3 + 11) == 5) && *((_DWORD *)a3 + 7) != 22)
    *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 120) = 5;
  llvm::Triple::getArchName((llvm::Triple *)(a1 + 32));
  *(_DWORD *)(a1 + 452) = llvm::ARM::parseArchISA();
  DefaultCPU = llvm::ARM::getDefaultCPU();
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = (const void *)DefaultCPU;
  v16 = v14;
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    p_dst = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v16;
    v40 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v40) = v14;
    p_dst = &__dst;
    if (!v14)
      goto LABEL_19;
  }
  memmove(p_dst, v15, v16);
LABEL_19:
  *((_BYTE *)p_dst + v16) = 0;
  v20 = (void **)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = __dst;
  *(_QWORD *)(a1 + 408) = v40;
  v21 = llvm::ARM::parseArch();
  if (v21)
  {
    v22 = v21;
    *(_DWORD *)(a1 + 456) = v21;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 456);
  }
  sub_22F4393C0(a1, v22);
  *(_BYTE *)(a1 + 83) = 1;
  if (*((_DWORD *)a3 + 11) == 5)
  {
    if (*((_DWORD *)a3 + 10) != 9 && *((_DWORD *)a3 + 9) && *(_DWORD *)(a1 + 460) != 3)
    {
      if (*((_DWORD *)a3 + 7) == 22)
      {
        HIBYTE(v40) = 7;
        strcpy((char *)&__dst, "aapcs16");
        goto LABEL_32;
      }
      goto LABEL_91;
    }
LABEL_31:
    HIBYTE(v40) = 5;
    strcpy((char *)&__dst, "aapcs");
    goto LABEL_32;
  }
  if (*((_DWORD *)a3 + 9) == 15)
    goto LABEL_31;
  v37 = *((_DWORD *)a3 + 10);
  if (v37 > 0xE)
    goto LABEL_89;
  if (((1 << v37) & 0x6830) != 0)
  {
LABEL_75:
    HIBYTE(v40) = 11;
    strcpy((char *)&__dst, "aapcs-linux");
    goto LABEL_32;
  }
  if (((1 << v37) & 0x600) != 0)
    goto LABEL_31;
  if (v37 != 1)
  {
LABEL_89:
    if (v10 == 13)
      goto LABEL_75;
    if (v10 != 12)
      goto LABEL_31;
  }
LABEL_91:
  HIBYTE(v40) = 8;
  strcpy((char *)&__dst, "apcs-gnu");
LABEL_32:
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 504))(a1, &__dst);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__dst);
  *(_DWORD *)(a1 + 148) = 1;
  v23 = *(_DWORD *)(a1 + 452);
  if (v23 == 2)
  {
    v25 = *(_DWORD *)(a1 + 464) > 6u;
  }
  else
  {
    if (v23 == 1 && *(_DWORD *)(a1 + 464) > 5u)
    {
      if (*(_DWORD *)(a1 + 460) == 3)
        v24 = 32;
      else
        v24 = 64;
      *(_BYTE *)(a1 + 94) = v24;
      goto LABEL_47;
    }
    v25 = 0;
  }
  if (*(_DWORD *)(a1 + 460) == 3)
  {
    v24 = 32;
    *(_BYTE *)(a1 + 94) = 32;
    if (!v25)
      goto LABEL_48;
    goto LABEL_47;
  }
  v24 = 64;
  *(_BYTE *)(a1 + 94) = 64;
  if (v25)
LABEL_47:
    *(_BYTE *)(a1 + 95) = v24;
LABEL_48:
  v26 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 468) & 0x80) != 0 && *((_DWORD *)a3 + 10) != 11)
  {
    *(_DWORD *)(a1 + *(_QWORD *)(v26 - 24) + 48) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v26 - 24) + 40) = 64;
  }
  *(_BYTE *)(a1 + *(_QWORD *)(v26 - 24) + 160) |= 4u;
  v27 = *((_DWORD *)a3 + 9);
  if (v27 == 9 || !v27)
  {
    v28 = "\x01mcount";
    if (*(_DWORD *)(a4 + 144) == 4)
      v28 = "llvm.arm.gnu.eabi.mcount";
    *(_QWORD *)(a1 + 136) = v28;
  }
  v29 = *(const void ***)(a4 + 176);
  v30 = *(const void ***)(a4 + 184);
  if (v29 != v30)
  {
    while (1)
    {
      v31 = *((unsigned __int8 *)v29 + 23);
      v32 = (v31 & 0x80u) == 0 ? v31 & 0x7F : (unint64_t)v29[1];
      if (v32 == 15)
      {
        v33 = v29;
        if ((v31 & 0x80) != 0)
        {
          v33 = *v29;
          v31 = (unint64_t)v29[1];
        }
        v34 = v31 >= 0xF ? 15 : v31;
        if (!memcmp(v33, "+soft-float-abi", v34) && v31 == 15)
          break;
      }
      v29 += 3;
      if (v29 == v30)
      {
        v29 = v30;
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 468) = *(_DWORD *)(a1 + 468) & 0xFFFFF7FF | ((v29 != v30) << 11);
  return a1;
}

uint64_t sub_22F1F4244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Triple *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  void *v17;
  char v18;
  unsigned int v19;

  if (llvm::ARM::parseCPUArch()
    || (llvm::Triple::getArchName((llvm::Triple *)(a1 + 32)), v2 = llvm::ARM::parseArch(), (_DWORD)v2))
  {
    v16 = 261;
    v15[0] = llvm::ARM::getArchName();
    v15[1] = v3;
    v4 = (llvm::Triple *)(a1 + 32);
    v14 = 261;
    v13[0] = llvm::Triple::getVendorName(v4);
    v13[1] = v5;
    v12 = 261;
    v11[0] = llvm::Triple::getOSName(v4);
    v11[1] = v6;
    v10 = 261;
    v9[0] = llvm::Triple::getEnvironmentName(v4);
    v9[1] = v7;
    MEMORY[0x23489F1C8](&v17, v15, v13, v11, v9);
    llvm::ARM::getSubArch();
    v2 = ((v19 > 0x1E) | (0x1F7FFFu >> v19)) & (llvm::ARM::parseArchProfile() == 3);
    if (v18 < 0)
      operator delete(v17);
  }
  return v2;
}

uint64_t sub_22F1F4340(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void ***a6)
{
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void ***v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  const void *v26;
  BOOL v27;
  const void **v28;
  const void **v29;
  uint64_t v30;
  char v32;
  size_t v33;
  uint64_t v34;
  const void *v35;
  unint64_t v36;
  const void *v37;
  size_t v38;
  const char *v40;
  unint64_t v41;
  const void *v42;
  size_t v43;
  BOOL v44;
  _BOOL4 v45;
  const char *v46;
  unint64_t v47;
  const void *v48;
  size_t v49;
  __int128 *p_dst;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  int64x2_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  __int128 __dst;
  unint64_t v72;
  int64x2_t v73;
  unint64_t v74;
  void *v75;
  _BYTE *v76;
  char *v77;
  void *__p[2];
  unint64_t v79;
  int64x2_t *v80;
  int64x2_t v81;
  unint64_t v82;
  unint64_t *v83;

  v10 = a1;
  __p[0] = 0;
  __p[1] = 0;
  v79 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  llvm::Triple::getArchName((llvm::Triple *)(a1 + 32));
  v11 = llvm::ARM::parseArch();
  v12 = llvm::ARM::parseCPUArch();
  if (!v12)
    v12 = v11;
  v69 = v10;
  v70 = (uint64_t)a2;
  if (v12)
  {
    LOWORD(v83) = 1283;
    v80 = (int64x2_t *)"+";
    v81.i64[1] = llvm::ARM::getArchName();
    v82 = v13;
    llvm::Twine::str((llvm::Twine *)&v80);
    if (SHIBYTE(v79) < 0)
      operator delete(__p[0]);
    v79 = v74;
    *(int64x2_t *)__p = v73;
    if ((v74 & 0x8000000000000000) == 0)
      v14 = __p;
    else
      v14 = (void **)v73.i64[0];
    if ((v74 & 0x8000000000000000) == 0)
      v15 = HIBYTE(v74) & 0x7F;
    else
      v15 = v73.i64[1];
    v16 = (v76 - (_BYTE *)v75) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
LABEL_106:
      abort();
    v18 = v77 - (_BYTE *)v75;
    if ((v77 - (_BYTE *)v75) >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 60)
LABEL_107:
        sub_22E3B3F8C();
      v20 = (char *)operator new(16 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (void ***)&v20[16 * v16];
    v22 = &v20[16 * v19];
    *v21 = v14;
    v21[1] = (void **)v15;
    v10 = v69;
    a2 = (llvm::StringMapImpl *)v70;
    v75 = v21;
    v77 = v22;
    v76 = v21 + 2;
  }
  llvm::ARM::getDefaultFPU();
  llvm::ARM::getFPUFeatures();
  llvm::ARM::getDefaultExtensions();
  llvm::ARM::getExtensionFeatures();
  v23 = v75;
  v24 = v76;
  if (v75 != v76)
  {
    do
    {
      if (*(_BYTE *)*v23 == 43)
      {
        v25 = v23[1];
        if (v25)
          v26 = (const void *)(*v23 + 1);
        else
          v26 = (const void *)*v23;
        *(_BYTE *)(*sub_22E80ABE0(a2, v26, v25 - (v25 != 0)) + 8) = 1;
      }
      v23 += 2;
    }
    while (v23 != v24);
  }
  v66 = a4;
  v67 = a5;
  v27 = *(_DWORD *)(v10 + 452) == 2;
  *(_BYTE *)(*sub_22E80ABE0(a2, "thumb-mode", 0xAuLL) + 8) = v27;
  v73 = 0uLL;
  v74 = 0;
  v29 = *a6;
  v28 = a6[1];
  if (*a6 != v28)
  {
    while (1)
    {
      v32 = *((_BYTE *)v29 + 23);
      v33 = (size_t)v29[1];
      v34 = v32 & 0x7F;
      v35 = v32 < 0 ? v29[1] : (const void *)(v32 & 0x7F);
      if (v35 == (const void *)4)
        break;
      if (v35 == (const void *)6)
      {
        v47 = *((unsigned __int8 *)v29 + 23);
        v48 = v29;
        if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
        {
          v48 = *v29;
          v47 = (unint64_t)v29[1];
        }
        if (v47 >= 6)
          v49 = 6;
        else
          v49 = v47;
        v45 = memcmp(v48, "+thumb", v49) == 0 && v47 == 6;
        v44 = !v45;
        v46 = "+thumb-mode";
LABEL_65:
        if (v44)
          v40 = (const char *)v29;
        else
          v40 = v46;
        if (!v44)
          v34 = 11;
        if ((v32 & 0x80) == 0 || v45)
          goto LABEL_75;
LABEL_72:
        v40 = (const char *)*v29;
        if (*v29)
        {
          if (v33 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_106;
          goto LABEL_76;
        }
        __dst = 0uLL;
        v72 = 0;
LABEL_84:
        v53 = v73.u64[1];
        v54 = v74;
        if (v73.i64[1] >= v74)
        {
          v55 = v73.i64[0];
          v56 = 0xAAAAAAAAAAAAAAABLL * ((v73.i64[1] - v73.i64[0]) >> 3);
          v57 = v56 + 1;
          if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_106;
          if (0x5555555555555556 * ((uint64_t)(v74 - v73.i64[0]) >> 3) > v57)
            v57 = 0x5555555555555556 * ((uint64_t)(v74 - v73.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - v73.i64[0]) >> 3) >= 0x555555555555555)
            v58 = 0xAAAAAAAAAAAAAAALL;
          else
            v58 = v57;
          v83 = &v74;
          if (v58)
          {
            if (v58 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_107;
            v59 = (char *)operator new(24 * v58);
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[24 * v56];
          *(_OWORD *)v60 = __dst;
          *((_QWORD *)v60 + 2) = v72;
          v72 = 0;
          __dst = 0uLL;
          if (v53 == v55)
          {
            v64 = 0;
            v63 = vdupq_n_s64(v53);
            v61 = v60;
          }
          else
          {
            v61 = &v59[24 * v56];
            do
            {
              v62 = *(_OWORD *)(v53 - 24);
              *((_QWORD *)v61 - 1) = *(_QWORD *)(v53 - 8);
              *(_OWORD *)(v61 - 24) = v62;
              v61 -= 24;
              *(_QWORD *)(v53 - 16) = 0;
              *(_QWORD *)(v53 - 8) = 0;
              *(_QWORD *)(v53 - 24) = 0;
              v53 -= 24;
            }
            while (v53 != v55);
            v63 = v73;
            v54 = v74;
            v64 = HIBYTE(v72);
          }
          v65 = v60 + 24;
          v73.i64[0] = (uint64_t)v61;
          v73.i64[1] = (uint64_t)(v60 + 24);
          v81 = v63;
          v74 = (unint64_t)&v59[24 * v58];
          v82 = v54;
          v80 = (int64x2_t *)v63.i64[0];
          sub_22E3B8B94((uint64_t)&v80);
          v73.i64[1] = (uint64_t)v65;
          if (v64 < 0)
            operator delete((void *)__dst);
        }
        else
        {
          *(_OWORD *)v73.i64[1] = __dst;
          *(_QWORD *)(v53 + 16) = v72;
          v73.i64[1] = v53 + 24;
        }
        goto LABEL_103;
      }
      if (v35 != (const void *)15)
        goto LABEL_51;
      v36 = *((unsigned __int8 *)v29 + 23);
      v37 = v29;
      if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
      {
        v37 = *v29;
        v36 = (unint64_t)v29[1];
      }
      v38 = v36 >= 0xF ? 15 : v36;
      if (memcmp(v37, "+soft-float-abi", v38) || v36 != 15)
      {
LABEL_51:
        v40 = (const char *)v29;
        if (v32 < 0)
          goto LABEL_72;
LABEL_75:
        v33 = v34;
LABEL_76:
        if (v33 >= 0x17)
        {
          v51 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v51 = v33 | 7;
          v52 = v51 + 1;
          p_dst = (__int128 *)operator new(v51 + 1);
          *((_QWORD *)&__dst + 1) = v33;
          v72 = v52 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v72) = v33;
          p_dst = &__dst;
          if (!v33)
          {
LABEL_83:
            *((_BYTE *)p_dst + v33) = 0;
            goto LABEL_84;
          }
        }
        memmove(p_dst, v40, v33);
        goto LABEL_83;
      }
LABEL_103:
      v29 += 3;
      if (v29 == v28)
        goto LABEL_31;
    }
    v41 = *((unsigned __int8 *)v29 + 23);
    v42 = v29;
    if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
    {
      v42 = *v29;
      v41 = (unint64_t)v29[1];
    }
    if (v41 >= 4)
      v43 = 4;
    else
      v43 = v41;
    v45 = memcmp(v42, "+arm", v43) == 0 && v41 == 4;
    v44 = !v45;
    v46 = "-thumb-mode";
    goto LABEL_65;
  }
LABEL_31:
  v30 = sub_22F424A84(v69, v70, a3, v66, v67, (unsigned __int8 **)&v73);
  v80 = &v73;
  sub_22E3B3CC8((void ***)&v80);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (SHIBYTE(v79) < 0)
    operator delete(__p[0]);
  return v30;
}

uint64_t sub_22F1F4918(uint64_t a1, int64x2_t *a2, uint64_t a3)
{
  int v6;
  const std::string *v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t size;
  unint64_t v12;
  unint64_t v13;
  const std::string *v14;
  unint64_t v15;
  const std::string *v16;
  size_t v17;
  unint64_t v19;
  const std::string *v20;
  size_t v21;
  unint64_t v22;
  const std::string *v23;
  size_t v24;
  unint64_t v25;
  const std::string *v26;
  size_t v27;
  int v28;
  const std::string *v29;
  unint64_t v30;
  const std::string *v31;
  size_t v32;
  unint64_t v34;
  const std::string *v35;
  size_t v36;
  unint64_t v37;
  const std::string *v38;
  size_t v39;
  unint64_t v40;
  const std::string *v41;
  unint64_t v42;
  const std::string *v43;
  size_t v44;
  unint64_t v46;
  const std::string *v47;
  size_t v48;
  const std::string *v49;
  unint64_t v50;
  const std::string *v51;
  size_t v52;
  unint64_t v54;
  const std::string *v55;
  unint64_t v56;
  const std::string *v57;
  size_t v58;
  unint64_t v60;
  const std::string *v61;
  size_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const std::string *v66;
  size_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const std::string *v71;
  size_t v72;
  const char *v73;
  unint64_t v74;
  const std::string *v75;
  size_t v76;
  unint64_t v78;
  const std::string *v79;
  size_t v80;
  unint64_t v81;
  const std::string *v82;
  size_t v83;
  const std::string *v85;
  unint64_t v86;
  const std::string *v87;
  size_t v88;
  unint64_t v90;
  unint64_t v91;
  const std::string *v92;
  size_t v93;
  unint64_t v94;
  const std::string *v95;
  size_t v96;
  const std::string *v97;
  size_t v98;
  unsigned int v99;
  size_t v100;
  unint64_t v102;
  const std::string *v103;
  size_t v104;
  size_t v106;
  unint64_t v108;
  unint64_t v109;
  const std::string *v110;
  size_t v111;
  const std::string *v112;
  size_t v113;
  unint64_t v115;
  const std::string *v116;
  size_t v117;
  const std::string *v119;
  size_t v120;
  const std::string *v121;
  const std::string *v122;
  size_t v123;
  size_t v124;
  const std::string *v125;
  size_t v126;
  unint64_t v127;
  const std::string *v128;
  size_t v129;
  size_t v130;
  size_t v131;
  size_t v132;
  const std::string *v133;
  unint64_t v134;
  const std::string *v135;
  size_t v136;
  const std::string *v137;
  size_t v138;
  size_t v139;
  unint64_t v140;
  const std::string *v141;
  size_t v142;
  int v143;
  const std::string *v144;
  size_t v145;
  unint64_t v146;
  const std::string *v147;
  size_t v148;
  const std::string *v149;
  size_t v150;
  int v151;
  int v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  __int128 v173;
  __int128 v174;
  int64x2_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  void *v180;
  size_t v181;
  unsigned __int8 *v182;
  int64x2_t v183;
  unint64_t v184;
  int64x2_t *v185;

  v6 = *(_DWORD *)(a1 + 468);
  *(_BYTE *)(a1 + 87) = 1;
  *(_DWORD *)(a1 + 288) &= 0xFFFC03FF;
  *(_WORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 468) = v6 & 0xFF800880 | 0x20000;
  v7 = (const std::string *)a2->i64[0];
  v8 = (uint64_t *)a2->i64[1];
  if ((uint64_t *)a2->i64[0] == v8)
  {
LABEL_419:
    *(_BYTE *)(a1 + 85) = 1;
    v151 = *(_DWORD *)(a1 + 464);
    if ((v151 - 8) >= 2)
    {
      if (v151 == 7)
      {
        if (*(_DWORD *)(a1 + 460) == 3)
        {
          v152 = 7;
LABEL_428:
          *(_DWORD *)(a1 + 472) = v152;
          goto LABEL_429;
        }
      }
      else
      {
        if (v151 != 6)
        {
LABEL_429:
          v153 = *(_DWORD *)(a1 + 448);
          if ((*(_BYTE *)(a1 + 468) & 8) == 0 && v153 == 2)
          {
            *(_QWORD *)(a3 + 312) = 0x4800000000;
            if (*(char *)(a3 + 311) < 0)
            {
              **(_BYTE **)(a3 + 288) = 0;
              *(_QWORD *)(a3 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(a3 + 288) = 0;
              *(_BYTE *)(a3 + 311) = 0;
            }
            v157 = (unsigned __int8 *)(a3 + 320);
            v182 = (unsigned __int8 *)(a3 + 320);
            v183.i64[0] = 0;
            v183.i64[1] = a3;
            LOWORD(v184) = 1;
            *(_BYTE *)(a3 + 320) = 0;
            *(_DWORD *)(a3 + 664) = 0;
            v158 = *(unsigned int *)(a3 + 776);
            if ((_DWORD)v158)
            {
              v159 = *(_QWORD *)(a3 + 768);
              v160 = 56 * v158;
              do
              {
                if (*(char *)(v159 + v160 - 9) < 0)
                  operator delete(*(void **)(v159 + v160 - 32));
                v160 -= 56;
              }
              while (v160);
              LODWORD(v158) = *v157;
            }
            *(_DWORD *)(a3 + 776) = 0;
            v157[v158 + 1] = 1;
            *(_BYTE *)(a3 + 320) = v158 + 1;
            *(_QWORD *)&v157[8 * v158 + 16] = "neon";
            goto LABEL_445;
          }
          if (v153 == 1)
          {
            v154 = a2[1].u64[0];
            v155 = a2->u64[1];
            if (v155 < v154)
            {
              v156 = 0x70666E6F656E2DLL;
              goto LABEL_448;
            }
            v168 = (uint64_t *)a2->i64[0];
            v169 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155 - a2->i64[0]) >> 3);
            v170 = v169 + 1;
            if (v169 + 1 <= 0xAAAAAAAAAAAAAAALL)
            {
              if (0x5555555555555556 * ((uint64_t)(v154 - (_QWORD)v168) >> 3) > v170)
                v170 = 0x5555555555555556 * ((uint64_t)(v154 - (_QWORD)v168) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v168) >> 3) >= 0x555555555555555)
                v166 = 0xAAAAAAAAAAAAAAALL;
              else
                v166 = v170;
              v185 = a2 + 1;
              if (v166)
              {
                if (v166 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_498;
                v167 = (char *)operator new(24 * v166);
              }
              else
              {
                v167 = 0;
              }
              v171 = &v167[24 * v169];
              *(_QWORD *)v171 = 0x70666E6F656E2DLL;
              v171[23] = 7;
              if ((uint64_t *)v155 != v168)
              {
                v172 = &v167[24 * v169];
                do
                {
                  v174 = *(_OWORD *)(v155 - 24);
                  *((_QWORD *)v172 - 1) = *(_QWORD *)(v155 - 8);
                  *(_OWORD *)(v172 - 24) = v174;
                  v172 -= 24;
                  *(_QWORD *)(v155 - 16) = 0;
                  *(_QWORD *)(v155 - 8) = 0;
                  *(_QWORD *)(v155 - 24) = 0;
                  v155 -= 24;
                }
                while ((uint64_t *)v155 != v168);
                goto LABEL_479;
              }
LABEL_480:
              v175 = vdupq_n_s64(v155);
              v172 = v171;
              goto LABEL_481;
            }
          }
          else
          {
            if (v153 != 2)
              return 1;
            v154 = a2[1].u64[0];
            v155 = a2->u64[1];
            if (v155 < v154)
            {
              v156 = 0x70666E6F656E2BLL;
LABEL_448:
              *(_QWORD *)v155 = v156;
              *(_BYTE *)(v155 + 23) = 7;
              v162 = v155 + 24;
LABEL_482:
              a2->i64[1] = v162;
              return 1;
            }
            v163 = (uint64_t *)a2->i64[0];
            v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155 - a2->i64[0]) >> 3);
            v165 = v164 + 1;
            if (v164 + 1 <= 0xAAAAAAAAAAAAAAALL)
            {
              if (0x5555555555555556 * ((uint64_t)(v154 - (_QWORD)v163) >> 3) > v165)
                v165 = 0x5555555555555556 * ((uint64_t)(v154 - (_QWORD)v163) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v163) >> 3) >= 0x555555555555555)
                v166 = 0xAAAAAAAAAAAAAAALL;
              else
                v166 = v165;
              v185 = a2 + 1;
              if (!v166)
              {
                v167 = 0;
LABEL_471:
                v171 = &v167[24 * v164];
                *(_QWORD *)v171 = 0x70666E6F656E2BLL;
                v171[23] = 7;
                if ((uint64_t *)v155 != v163)
                {
                  v172 = &v167[24 * v164];
                  do
                  {
                    v173 = *(_OWORD *)(v155 - 24);
                    *((_QWORD *)v172 - 1) = *(_QWORD *)(v155 - 8);
                    *(_OWORD *)(v172 - 24) = v173;
                    v172 -= 24;
                    *(_QWORD *)(v155 - 16) = 0;
                    *(_QWORD *)(v155 - 8) = 0;
                    *(_QWORD *)(v155 - 24) = 0;
                    v155 -= 24;
                  }
                  while ((uint64_t *)v155 != v163);
LABEL_479:
                  v175 = *a2;
                  v154 = a2[1].u64[0];
LABEL_481:
                  v162 = (unint64_t)(v171 + 24);
                  a2->i64[0] = (uint64_t)v172;
                  a2->i64[1] = (uint64_t)(v171 + 24);
                  v183 = v175;
                  a2[1].i64[0] = (uint64_t)&v167[24 * v166];
                  v184 = v154;
                  v182 = (unsigned __int8 *)v175.i64[0];
                  sub_22E3B8B94((uint64_t)&v182);
                  goto LABEL_482;
                }
                goto LABEL_480;
              }
              if (v166 <= 0xAAAAAAAAAAAAAAALL)
              {
                v167 = (char *)operator new(24 * v166);
                goto LABEL_471;
              }
LABEL_498:
              sub_22E3B3F8C();
            }
          }
          abort();
        }
        if (*(_DWORD *)(a1 + 460) == 3)
        {
          *(_DWORD *)(a1 + 472) = 0;
          goto LABEL_429;
        }
        if (*(_DWORD *)(a1 + 456) != 11)
        {
          v152 = 4;
          goto LABEL_428;
        }
      }
    }
    v152 = 15;
    goto LABEL_428;
  }
  while (2)
  {
    v9 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    v10 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    size = v7->__r_.__value_.__l.__size_;
    v12 = v10 & 0x7F;
    if (v9 < 0)
      v12 = v7->__r_.__value_.__l.__size_;
    switch(v12)
    {
      case 4uLL:
        if (v9 < 0)
        {
          v14 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v13 = v7->__r_.__value_.__l.__size_;
        }
        else
        {
          v13 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
          v14 = v7;
        }
        if (v13 >= 4)
          v100 = 4;
        else
          v100 = v13;
        if (!memcmp(v14, "+crc", v100) && v13 == 4)
        {
          v99 = *(_DWORD *)(a1 + 468) | 0x1000;
          goto LABEL_375;
        }
        if (v9 < 0)
        {
          v103 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v102 = size;
        }
        else
        {
          v102 = v10;
          v103 = v7;
        }
        if (v102 >= 4)
          v126 = 4;
        else
          v126 = v102;
        if (!memcmp(v103, "+aes", v126) && v102 == 4)
        {
          v99 = *(_DWORD *)(a1 + 468) | 0x8000;
          goto LABEL_375;
        }
        if (v9 < 0)
        {
          v128 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v127 = size;
        }
        else
        {
          v127 = v10;
          v128 = v7;
        }
        if (v127 >= 4)
          v132 = 4;
        else
          v132 = v127;
        if (!memcmp(v128, "+dsp", v132) && v127 == 4)
        {
          v99 = *(_DWORD *)(a1 + 468) | 0x10000;
          goto LABEL_375;
        }
        if (v9 < 0)
        {
          v133 = (const std::string *)v7->__r_.__value_.__r.__words[0];
        }
        else
        {
          size = v10;
          v133 = v7;
        }
        if (size >= 4)
          v138 = 4;
        else
          v138 = size;
        if (memcmp(v133, "+mve", v138) || size != 4)
          goto LABEL_245;
        v99 = *(_DWORD *)(a1 + 468) | 0x20;
        goto LABEL_375;
      case 5uLL:
        v15 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v16 = v7;
        if (v9 < 0)
        {
          v16 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v15 = v7->__r_.__value_.__l.__size_;
        }
        if (v15 >= 5)
          v17 = 5;
        else
          v17 = v15;
        if (!memcmp(v16, "+vfp2", v17) && v15 == 5)
          goto LABEL_186;
        v19 = v10;
        v20 = v7;
        if (v9 < 0)
        {
          v20 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v19 = size;
        }
        if (v19 >= 5)
          v21 = 5;
        else
          v21 = v19;
        if (!memcmp(v20, "+vfp3", v21) && v19 == 5)
          goto LABEL_123;
        v22 = v10;
        v23 = v7;
        if (v9 < 0)
        {
          v23 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v22 = size;
        }
        if (v22 >= 5)
          v24 = 5;
        else
          v24 = v22;
        if (!memcmp(v23, "+vfp4", v24) && v22 == 5)
          goto LABEL_110;
        v25 = v10;
        v26 = v7;
        if (v9 < 0)
        {
          v26 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v25 = size;
        }
        if (v25 >= 5)
          v27 = 5;
        else
          v27 = v25;
        if (!memcmp(v26, "+neon", v27) && v25 == 5)
        {
          *(_DWORD *)(a1 + 468) |= 8u;
          v28 = *(_DWORD *)(a1 + 476) | 4;
          goto LABEL_298;
        }
        if (v9 < 0)
        {
          v135 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v134 = size;
        }
        else
        {
          v134 = v10;
          v135 = v7;
        }
        if (v134 >= 5)
          v139 = 5;
        else
          v139 = v134;
        if (!memcmp(v135, "+sha2", v139) && v134 == 5)
        {
          v99 = *(_DWORD *)(a1 + 468) | 0x4000;
          goto LABEL_375;
        }
        if (v9 < 0)
        {
          v141 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v140 = size;
        }
        else
        {
          v140 = v10;
          v141 = v7;
        }
        if (v140 >= 5)
          v145 = 5;
        else
          v145 = v140;
        if (!memcmp(v141, "+fp64", v145) && v140 == 5)
        {
          v28 = *(_DWORD *)(a1 + 476) | 8;
          goto LABEL_298;
        }
        if (v9 < 0)
        {
          v147 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v146 = size;
        }
        else
        {
          v146 = v10;
          v147 = v7;
        }
        if (v146 >= 5)
          v148 = 5;
        else
          v148 = v146;
        if (!memcmp(v147, "+fp16", v148) && v146 == 5)
        {
          v28 = *(_DWORD *)(a1 + 476) | 2;
          goto LABEL_298;
        }
        if (v9 < 0)
        {
          v149 = (const std::string *)v7->__r_.__value_.__r.__words[0];
        }
        else
        {
          size = v10;
          v149 = v7;
        }
        if (size >= 5)
          v150 = 5;
        else
          v150 = size;
        if (memcmp(v149, "+i8mm", v150) || size != 5)
          goto LABEL_245;
        v99 = *(_DWORD *)(a1 + 468) | 0x80000;
        goto LABEL_375;
      case 6uLL:
        if (v9 < 0)
        {
          v29 = (const std::string *)v7->__r_.__value_.__r.__words[0];
        }
        else
        {
          size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
          v29 = v7;
        }
        if (size >= 6)
          v104 = 6;
        else
          v104 = size;
        if (memcmp(v29, "+hwdiv", v104) || size != 6)
          goto LABEL_245;
        v99 = *(_DWORD *)(a1 + 468) | 0x100;
        goto LABEL_375;
      case 7uLL:
        v30 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v31 = v7;
        if (v9 < 0)
        {
          v31 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v30 = v7->__r_.__value_.__l.__size_;
        }
        if (v30 >= 7)
          v32 = 7;
        else
          v32 = v30;
        if (!memcmp(v31, "+vfp2sp", v32) && v30 == 7)
        {
LABEL_186:
          *(_DWORD *)(a1 + 468) |= 1u;
          v68 = *(_DWORD *)(a1 + 476);
          *(_DWORD *)(a1 + 476) = v68 | 4;
          v69 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
          if ((v69 & 0x80u) == 0)
            v94 = v69 & 0x7F;
          else
            v94 = v7->__r_.__value_.__l.__size_;
          if (v94 != 5)
            goto LABEL_376;
          v71 = v7;
          if ((v69 & 0x80) != 0)
          {
            v71 = (const std::string *)v7->__r_.__value_.__r.__words[0];
            v69 = v7->__r_.__value_.__l.__size_;
          }
          if (v69 >= 5)
            v72 = 5;
          else
            v72 = v69;
          v73 = "+vfp2";
          goto LABEL_196;
        }
        v34 = v10;
        v35 = v7;
        if (v9 < 0)
        {
          v35 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v34 = size;
        }
        if (v34 >= 7)
          v36 = 7;
        else
          v36 = v34;
        if (!memcmp(v35, "+vfp3sp", v36) && v34 == 7)
        {
LABEL_123:
          *(_DWORD *)(a1 + 468) |= 2u;
          v68 = *(_DWORD *)(a1 + 476);
          *(_DWORD *)(a1 + 476) = v68 | 4;
          v69 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
          if ((v69 & 0x80u) == 0)
            v70 = v69 & 0x7F;
          else
            v70 = v7->__r_.__value_.__l.__size_;
          if (v70 != 8)
          {
            if (v70 != 5)
              goto LABEL_376;
            v71 = v7;
            if ((v69 & 0x80) != 0)
            {
              v71 = (const std::string *)v7->__r_.__value_.__r.__words[0];
              v69 = v7->__r_.__value_.__l.__size_;
            }
            if (v69 >= 5)
              v72 = 5;
            else
              v72 = v69;
            v73 = "+vfp3";
LABEL_196:
            if (!memcmp(v71, v73, v72) && v69 == 5)
              goto LABEL_214;
            goto LABEL_376;
          }
          v97 = v7;
          if ((v69 & 0x80) != 0)
          {
            v97 = (const std::string *)v7->__r_.__value_.__r.__words[0];
            v69 = v7->__r_.__value_.__l.__size_;
          }
          if (v69 >= 8)
            v98 = 8;
          else
            v98 = v69;
          if (!memcmp(v97, "+vfp3d16", v98) && v69 == 8)
          {
LABEL_214:
            v28 = v68 | 0xC;
            goto LABEL_298;
          }
        }
        else
        {
          v37 = v10;
          v38 = v7;
          if (v9 < 0)
          {
            v38 = (const std::string *)v7->__r_.__value_.__r.__words[0];
            v37 = size;
          }
          if (v37 >= 7)
            v39 = 7;
          else
            v39 = v37;
          if (!memcmp(v38, "+vfp4sp", v39) && v37 == 7)
          {
LABEL_110:
            *(_DWORD *)(a1 + 468) |= 4u;
            v63 = *(_DWORD *)(a1 + 476);
            *(_DWORD *)(a1 + 476) = v63 | 6;
            v64 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
            if ((v64 & 0x80u) == 0)
              v65 = v64 & 0x7F;
            else
              v65 = v7->__r_.__value_.__l.__size_;
            if (v65 == 8)
            {
              v122 = v7;
              if ((v64 & 0x80) != 0)
              {
                v122 = (const std::string *)v7->__r_.__value_.__r.__words[0];
                v64 = v7->__r_.__value_.__l.__size_;
              }
              if (v64 >= 8)
                v123 = 8;
              else
                v123 = v64;
              if (!memcmp(v122, "+vfp4d16", v123) && v64 == 8)
              {
LABEL_297:
                v28 = v63 | 0xE;
LABEL_298:
                *(_DWORD *)(a1 + 476) = v28;
                goto LABEL_376;
              }
            }
            else if (v65 == 5)
            {
              v66 = v7;
              if ((v64 & 0x80) != 0)
              {
                v66 = (const std::string *)v7->__r_.__value_.__r.__words[0];
                v64 = v7->__r_.__value_.__l.__size_;
              }
              v67 = v64 >= 5 ? 5 : v64;
              if (!memcmp(v66, "+vfp4", v67) && v64 == 5)
                goto LABEL_297;
            }
          }
          else
          {
            if (v9 < 0)
            {
              v41 = (const std::string *)v7->__r_.__value_.__r.__words[0];
              v40 = size;
            }
            else
            {
              v40 = v10;
              v41 = v7;
            }
            if (v40 >= 7)
              v136 = 7;
            else
              v136 = v40;
            if (!memcmp(v41, "+crypto", v136) && v40 == 7)
            {
              v99 = *(_DWORD *)(a1 + 468) | 0x2000;
              goto LABEL_375;
            }
            if (v9 < 0)
            {
              v137 = (const std::string *)v7->__r_.__value_.__r.__words[0];
            }
            else
            {
              size = v10;
              v137 = v7;
            }
            if (size >= 7)
              v142 = 7;
            else
              v142 = size;
            if (!memcmp(v137, "+mve.fp", v142) && size == 7)
            {
              *(_BYTE *)(a1 + 84) = 1;
              *(_DWORD *)(a1 + 468) |= 0x70u;
              v28 = *(_DWORD *)(a1 + 476) | 6;
              goto LABEL_298;
            }
            if (std::string::compare(v7, "+cdecp0") < 0)
            {
              v10 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
              goto LABEL_245;
            }
            v143 = std::string::compare(v7, "+cdecp7");
            v10 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
            if (v143 > 0)
              goto LABEL_245;
            if ((v10 & 0x80) != 0)
            {
              v144 = (const std::string *)v7->__r_.__value_.__r.__words[0];
              v10 = v7->__r_.__value_.__l.__size_;
            }
            else
            {
              v144 = v7;
            }
            *(_DWORD *)(a1 + 288) |= (1024 << (v144->__r_.__value_.__s.__data_[v10 - 1] - 48)) & 0x3FC00;
          }
        }
        goto LABEL_376;
      case 8uLL:
        v42 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v43 = v7;
        if (v9 < 0)
        {
          v43 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v42 = v7->__r_.__value_.__l.__size_;
        }
        if (v42 >= 8)
          v44 = 8;
        else
          v44 = v42;
        if (!memcmp(v43, "+vfp3d16", v44) && v42 == 8)
          goto LABEL_123;
        v46 = v10;
        v47 = v7;
        if (v9 < 0)
        {
          v47 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v46 = size;
        }
        if (v46 >= 8)
          v48 = 8;
        else
          v48 = v46;
        if (!memcmp(v47, "+vfp4d16", v48) && v46 == 8)
          goto LABEL_110;
        if (v9 < 0)
        {
          v49 = (const std::string *)v7->__r_.__value_.__r.__words[0];
        }
        else
        {
          size = v10;
          v49 = v7;
        }
        if (size >= 8)
          v129 = 8;
        else
          v129 = size;
        if (memcmp(v49, "+dotprod", v129) || size != 8)
          goto LABEL_245;
        v99 = *(_DWORD *)(a1 + 468) | 0x40000;
        goto LABEL_375;
      case 9uLL:
        v50 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v51 = v7;
        if (v9 < 0)
        {
          v51 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v50 = v7->__r_.__value_.__l.__size_;
        }
        if (v50 >= 9)
          v52 = 9;
        else
          v52 = v50;
        if (!memcmp(v51, "+fp-armv8", v52) && v50 == 9)
          goto LABEL_173;
        if (v9 < 0)
        {
          v55 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v54 = size;
        }
        else
        {
          v54 = v10;
          v55 = v7;
        }
        if (v54 >= 9)
          v124 = 9;
        else
          v124 = v54;
        if (memcmp(v55, "+8msecext", v124) || v54 != 9)
        {
          if (v9 < 0)
          {
            v125 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          }
          else
          {
            size = v10;
            v125 = v7;
          }
          if (size >= 9)
            v131 = 9;
          else
            v131 = size;
          if (!memcmp(v125, "+fullfp16", v131) && size == 9)
          {
            *(_BYTE *)(a1 + 84) = 1;
          }
          else
          {
LABEL_245:
            v108 = v7->__r_.__value_.__l.__size_;
            v109 = v10 & 0x7F;
            if ((v10 & 0x80u) != 0)
              v109 = v7->__r_.__value_.__l.__size_;
            switch(v109)
            {
              case 9uLL:
                v112 = v7;
                if ((char)v10 < 0)
                {
                  v112 = (const std::string *)v7->__r_.__value_.__r.__words[0];
                  v10 = v7->__r_.__value_.__l.__size_;
                }
                if (v10 >= 9)
                  v113 = 9;
                else
                  v113 = v10;
                if (!memcmp(v112, "+fullbf16", v113) && v10 == 9)
                  *(_BYTE *)(a1 + 89) = 1;
                break;
              case 7uLL:
                v115 = v10;
                v116 = v7;
                if ((char)v10 < 0)
                {
                  v116 = (const std::string *)v7->__r_.__value_.__r.__words[0];
                  v115 = v7->__r_.__value_.__l.__size_;
                }
                if (v115 >= 7)
                  v117 = 7;
                else
                  v117 = v115;
                if (!memcmp(v116, "-fpregs", v117) && v115 == 7)
                {
                  v99 = *(_DWORD *)(a1 + 468) | 0x100000;
                }
                else
                {
                  v119 = v7;
                  if ((char)v10 < 0)
                  {
                    v119 = (const std::string *)v7->__r_.__value_.__r.__words[0];
                    v10 = v108;
                  }
                  if (v10 >= 7)
                    v120 = 7;
                  else
                    v120 = v10;
                  if (memcmp(v119, "+pacbti", v120) || v10 != 7)
                    break;
                  v99 = *(_DWORD *)(a1 + 468) | 0x600000;
                }
LABEL_375:
                *(_DWORD *)(a1 + 468) = v99;
                break;
              case 5uLL:
                v110 = v7;
                if ((char)v10 < 0)
                {
                  v110 = (const std::string *)v7->__r_.__value_.__r.__words[0];
                  v10 = v7->__r_.__value_.__l.__size_;
                }
                if (v10 >= 5)
                  v111 = 5;
                else
                  v111 = v10;
                if (!memcmp(v110, "+bf16", v111) && v10 == 5)
                  *(_BYTE *)(a1 + 88) = 1;
                break;
            }
          }
LABEL_376:
          if (++v7 == (const std::string *)v8)
            goto LABEL_419;
          continue;
        }
        if (*(_QWORD *)(a1 + 424) == 1 && **(_BYTE **)(a1 + 416) == 77 && *(_DWORD *)(a1 + 464) == 8)
          goto LABEL_376;
        *(_QWORD *)(a3 + 312) = 0x4900000000;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v182 = (unsigned __int8 *)(a3 + 320);
        v183.i64[0] = 0;
        v183.i64[1] = a3;
        LOWORD(v184) = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v176 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v176)
        {
          v177 = *(_QWORD *)(a3 + 768);
          v178 = 56 * v176;
          do
          {
            if (*(char *)(v177 + v178 - 9) < 0)
              operator delete(*(void **)(v177 + v178 - 32));
            v178 -= 56;
          }
          while (v178);
        }
        *(_DWORD *)(a3 + 776) = 0;
        v179 = *(_BYTE *)(a1 + 415);
        if (v179 >= 0)
          v180 = (void *)(a1 + 392);
        else
          v180 = *(void **)(a1 + 392);
        if (v179 >= 0)
          v181 = v179 & 0x7F;
        else
          v181 = *(_QWORD *)(a1 + 400);
        sub_22E3B89A8(&v182, v180, v181);
LABEL_445:
        sub_22E3BB0B8((uint64_t)&v182);
        return 0;
      case 0xAuLL:
        v56 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v57 = v7;
        if (v9 < 0)
        {
          v57 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v56 = v7->__r_.__value_.__l.__size_;
        }
        if (v56 >= 0xA)
          v58 = 10;
        else
          v58 = v56;
        if (!memcmp(v57, "+vfp3d16sp", v58) && v56 == 10)
          goto LABEL_123;
        v60 = v10;
        v61 = v7;
        if (v9 < 0)
        {
          v61 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v60 = size;
        }
        if (v60 >= 0xA)
          v62 = 10;
        else
          v62 = v60;
        if (!memcmp(v61, "+vfp4d16sp", v62) && v60 == 10)
          goto LABEL_110;
        if (v9 < 0)
        {
          v121 = (const std::string *)v7->__r_.__value_.__r.__words[0];
        }
        else
        {
          size = v10;
          v121 = v7;
        }
        if (size >= 0xA)
          v130 = 10;
        else
          v130 = size;
        if (memcmp(v121, "+hwdiv-arm", v130) || size != 10)
          goto LABEL_245;
        v99 = *(_DWORD *)(a1 + 468) | 0x200;
        goto LABEL_375;
      case 0xBuLL:
        v74 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v75 = v7;
        if (v9 < 0)
        {
          v75 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v74 = v7->__r_.__value_.__l.__size_;
        }
        if (v74 >= 0xB)
          v76 = 11;
        else
          v76 = v74;
        if (!memcmp(v75, "+soft-float", v76) && v74 == 11)
        {
          v99 = *(_DWORD *)(a1 + 468) | 0x400;
          goto LABEL_375;
        }
        v78 = v10;
        v79 = v7;
        if (v9 < 0)
        {
          v79 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v78 = size;
        }
        if (v78 >= 0xB)
          v80 = 11;
        else
          v80 = v78;
        if (memcmp(v79, "+fp-armv8sp", v80) || v78 != 11)
          goto LABEL_245;
LABEL_173:
        *(_DWORD *)(a1 + 468) |= 0x10u;
        v63 = *(_DWORD *)(a1 + 476);
        *(_DWORD *)(a1 + 476) = v63 | 6;
        v90 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        if ((v90 & 0x80u) == 0)
          v91 = v90 & 0x7F;
        else
          v91 = v7->__r_.__value_.__l.__size_;
        if (v91 == 12)
        {
          v95 = v7;
          if ((v90 & 0x80) != 0)
          {
            v95 = (const std::string *)v7->__r_.__value_.__r.__words[0];
            v90 = v7->__r_.__value_.__l.__size_;
          }
          if (v90 >= 0xC)
            v96 = 12;
          else
            v96 = v90;
          if (!memcmp(v95, "+fp-armv8d16", v96) && v90 == 12)
            goto LABEL_297;
        }
        else if (v91 == 9)
        {
          v92 = v7;
          if ((v90 & 0x80) != 0)
          {
            v92 = (const std::string *)v7->__r_.__value_.__r.__words[0];
            v90 = v7->__r_.__value_.__l.__size_;
          }
          v93 = v90 >= 9 ? 9 : v90;
          if (!memcmp(v92, "+fp-armv8", v93) && v90 == 9)
            goto LABEL_297;
        }
        goto LABEL_376;
      case 0xCuLL:
        v81 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v82 = v7;
        if (v9 < 0)
        {
          v82 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v81 = v7->__r_.__value_.__l.__size_;
        }
        if (v81 >= 0xC)
          v83 = 12;
        else
          v83 = v81;
        if (memcmp(v82, "+fp-armv8d16", v83) || v81 != 12)
          goto LABEL_245;
        goto LABEL_173;
      case 0xDuLL:
        if (v9 < 0)
        {
          v85 = (const std::string *)v7->__r_.__value_.__r.__words[0];
        }
        else
        {
          size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
          v85 = v7;
        }
        if (size >= 0xD)
          v106 = 13;
        else
          v106 = size;
        if (memcmp(v85, "+strict-align", v106) || size != 13)
          goto LABEL_245;
        v99 = *(_DWORD *)(a1 + 468) & 0xFFFDFFFF;
        goto LABEL_375;
      case 0xEuLL:
        v86 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v87 = v7;
        if (v9 < 0)
        {
          v87 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          v86 = v7->__r_.__value_.__l.__size_;
        }
        if (v86 >= 0xE)
          v88 = 14;
        else
          v88 = v86;
        if (memcmp(v87, "+fp-armv8d16sp", v88) || v86 != 14)
          goto LABEL_245;
        goto LABEL_173;
      default:
        goto LABEL_245;
    }
  }
}

uint64_t sub_22F1F5A90(_DWORD *a1, unsigned __int16 *a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v12;
  int v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;

  if (a3 == 3)
  {
    v3 = *((unsigned __int8 *)a2 + 2);
    v4 = *a2 == 29281;
    v5 = 109;
LABEL_5:
    if (v4 && v3 == v5)
    {
      v8 = 257;
      goto LABEL_65;
    }
    v7 = a1[117];
    goto LABEL_18;
  }
  if (a3 == 7)
  {
    v3 = *(_DWORD *)((char *)a2 + 3);
    v4 = *(_DWORD *)a2 == 1668440417;
    v5 = 842229859;
    goto LABEL_5;
  }
  v7 = a1[117];
  if (a3 == 9)
  {
    if (*(_QWORD *)a2 != 0x616F6C6674666F73 || *((_BYTE *)a2 + 8) != 116)
    {
      v12 = *(_QWORD *)a2 != 0x72612D7669647768 || *((_BYTE *)a2 + 8) != 109;
      v13 = (v7 >> 9) & 1 | 0x100;
      goto LABEL_62;
    }
    v8 = (v7 >> 10) & 1 | 0x100;
LABEL_65:
    v18 = v8 > 0xFF;
    v20 = v8 != 0;
    return v18 & v20;
  }
LABEL_18:
  if (a3 == 5)
  {
    if (*(_DWORD *)a2 != 1836410996 || *((_BYTE *)a2 + 4) != 98)
    {
      v12 = *(_DWORD *)a2 != 1768191848 || *((_BYTE *)a2 + 4) != 118;
      v13 = (v7 >> 8) & 1 | 0x100;
LABEL_62:
      if (v12)
        v8 = 0;
      else
        v8 = v13;
      goto LABEL_65;
    }
    v8 = (a1[113] == 2) | 0x100;
    goto LABEL_65;
  }
  if (a3 == 4)
  {
    v14 = ((v7 & 0x408) == 8) | 0x100;
    if (*(_DWORD *)a2 == 1852794222)
      v8 = v14;
    else
      v8 = 0;
    goto LABEL_65;
  }
  v15 = (v7 & 0x1F) != 0;
  if ((v7 & 0x400) != 0)
    v15 = 0;
  if (a3 != 3)
  {
    v8 = 0;
    goto LABEL_65;
  }
  if (*a2 == 26230 && *((_BYTE *)a2 + 2) == 112)
  {
    v8 = v15 | 0x100;
    goto LABEL_65;
  }
  v18 = *a2 == 30317 && *((_BYTE *)a2 + 2) == 101;
  v19 = a1[114] == 36 && v18;
  v20 = (v7 & 0x60) != 0 && v19;
  return v18 & v20;
}

BOOL sub_22F1F5C98(uint64_t a1, const void **a2)
{
  char v4;
  const void *v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  BOOL v9;
  int v10;
  int v11;
  char v12;
  _BOOL4 v13;
  int v15;

  v4 = *((_BYTE *)a2 + 23);
  if (v4 >= 0)
    v5 = (const void *)(v4 & 0x7F);
  else
    v5 = a2[1];
  if (v5 != (const void *)7
    || (v4 >= 0 ? (v6 = *((unsigned __int8 *)a2 + 23)) : (v6 = (unint64_t)a2[1]),
        v4 >= 0 ? (v7 = a2) : (v7 = *a2),
        v6 >= 7 ? (v8 = 7) : (v8 = v6),
        !memcmp(v7, "generic", v8) ? (v9 = v6 == 7) : (v9 = 0),
        !v9))
  {
    v15 = llvm::ARM::parseCPUArch();
    sub_22F4393C0(a1, v15);
  }
  v10 = *(_DWORD *)(a1 + 456);
  if (v10)
  {
    v11 = *(_DWORD *)(a1 + 452);
    if (v11 == 2)
    {
      v13 = *(_DWORD *)(a1 + 464) > 6u;
    }
    else
    {
      if (v11 == 1 && *(_DWORD *)(a1 + 464) > 5u)
      {
        if (*(_DWORD *)(a1 + 460) == 3)
          v12 = 32;
        else
          v12 = 64;
        *(_BYTE *)(a1 + 94) = v12;
        goto LABEL_33;
      }
      v13 = 0;
    }
    if (*(_DWORD *)(a1 + 460) == 3)
    {
      v12 = 32;
      *(_BYTE *)(a1 + 94) = 32;
      if (!v13)
        goto LABEL_34;
    }
    else
    {
      v12 = 64;
      *(_BYTE *)(a1 + 94) = 64;
      if (!v13)
      {
LABEL_34:
        std::string::operator=((std::string *)(a1 + 392), (const std::string *)a2);
        return v10 != 0;
      }
    }
LABEL_33:
    *(_BYTE *)(a1 + 95) = v12;
    goto LABEL_34;
  }
  return v10 != 0;
}

void sub_22F1F5DE0(char **a1@<X1>, uint64_t a2@<X8>)
{
  _WORD *v3;
  int v4;
  char v5;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::value_type __s[8];
  char v12;
  std::string v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, 15);
  v3 = *a1;
  v4 = **a1;
  v5 = 1;
  if ((v4 - 84) >= 2)
  {
    if (v4 != 112)
    {
      v5 = 0;
      v10 = 1;
      *(_BYTE *)(a2 + 23) = 1;
      *(_BYTE *)a2 = v4;
      goto LABEL_11;
    }
    v8 = 114;
  }
  else
  {
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = 1;
    LOWORD(v13.__r_.__value_.__l.__data_) = 94;
    v12 = 2;
    *(_WORD *)__s = *v3;
    __s[2] = 0;
    v7 = std::string::append(&v13, __s, 2uLL);
    v8 = v7->__r_.__value_.__r.__words[0];
    v14[0] = v7->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    v5 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v12 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    ++*a1;
  }
  v9 = v14[0];
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v14 + 7);
  v10 = 23;
LABEL_11:
  *(_BYTE *)(a2 + v10) = v5;
}

uint64_t sub_22F1F5F14(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int i;
  uint64_t result;
  _BOOL4 v9;

  v5 = *a2;
  for (i = v5; i <= 0x3D && ((1 << i) & 0x2000084000000000) != 0; i = *a2)
  {
    if (a3)
      ++a2;
    a3 -= a3 != 0;
  }
  if (i != 114)
    return 1;
  result = a4 != 113;
  if (a4 != 113)
  {
    v9 = a5 < 0x41 || v5 == 61;
    if (v5 == 43)
      return a4 != 113;
    else
      return v9;
  }
  return result;
}

uint64_t sub_22F1F5F90(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;

  v7 = (_QWORD *)sub_22F1F3D08(a1, a2 + 4, (llvm::Triple *)a3, a4);
  *v7 = a2[3];
  *v7 = a2[2];
  v8 = a2[1];
  *v7 = v8;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 128) = 4;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 132) = 4;
  *v7 = *a2;
  v9 = v7 + 60;
  if (*((char *)a3 + 23) < 0)
  {
    sub_22E3BB2B4(v9, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a1 + 520) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a1 + 504) = v11;
  return a1;
}

uint64_t sub_22F1F6040(uint64_t a1, llvm::raw_ostream **a2)
{
  llvm::Triple *v4;
  unint64_t v5;
  uint64_t ArchName;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  v12[0] = "_M_ARM_NT";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a2, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "_M_ARMT";
  v13 = 259;
  v10[0] = "_M_ARM";
  v11 = 259;
  sub_22E7333BC(a2, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "_M_THUMB";
  v13 = 259;
  v10[0] = "_M_ARM";
  v11 = 259;
  sub_22E7333BC(a2, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v4 = (llvm::Triple *)(a1 + 480);
  if (*(_DWORD *)(a1 + 504) == 1)
    v5 = 4;
  else
    v5 = 6;
  v12[0] = "_M_ARM";
  v13 = 259;
  ArchName = llvm::Triple::getArchName(v4);
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = v7;
  v11 = 261;
  v10[0] = ArchName + v8;
  v10[1] = v7 - v8;
  sub_22E7333BC(a2, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "_M_ARM_FP";
  v13 = 259;
  v10[0] = "31";
  v11 = 259;
  return sub_22E7333BC(a2, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F1F617C(uint64_t a1, _QWORD *a2, llvm::Triple *a3, const std::string *a4)
{
  std::string *v8;
  int v9;
  char isMacOSXVersionLT;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t OSVersion;
  uint64_t v21;

  v8 = (std::string *)sub_22F1F3D08(a1, a2 + 3, a3, (uint64_t)a4);
  v8->__r_.__value_.__r.__words[0] = a2[2];
  v8->__r_.__value_.__r.__words[0] = a2[1];
  v8->__r_.__value_.__r.__words[0] = *a2;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 81) = 0;
  std::string::operator=(v8 + 20, a4 + 15);
  v9 = *((_DWORD *)a3 + 9);
  if ((v9 & 0xFFFFFFF7) == 3)
  {
    isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT(a3);
LABEL_19:
    v14 = isMacOSXVersionLT ^ 1;
    goto LABEL_20;
  }
  if (v9 <= 28)
  {
    if (v9 == 7 || v9 == 28)
    {
      if (llvm::Triple::isArch64Bit(a3))
      {
        OSVersion = llvm::Triple::getOSVersion(a3);
        v21 = v13;
        v12 = 8;
LABEL_18:
        v19[0] = v12;
        v19[1] = 0;
        isMacOSXVersionLT = sub_22E3B38EC(&OSVersion, v19);
        goto LABEL_19;
      }
      if (llvm::Triple::isArch32Bit(a3))
      {
        if (*((_DWORD *)a3 + 10) == 20)
        {
          OSVersion = llvm::Triple::getOSVersion(a3);
          v21 = v16;
          v12 = 10;
        }
        else
        {
          OSVersion = llvm::Triple::getOSVersion(a3);
          v21 = v17;
          v12 = 9;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    if ((v9 - 29) < 2)
    {
      if (*((_DWORD *)a3 + 10) == 20)
      {
        OSVersion = llvm::Triple::getOSVersion(a3);
        v21 = v11;
        v12 = 3;
      }
      else
      {
        OSVersion = llvm::Triple::getOSVersion(a3);
        v21 = v15;
        v12 = 2;
      }
      goto LABEL_18;
    }
    if (v9 == 33)
    {
      v14 = 1;
LABEL_20:
      *(_BYTE *)(a1 + 81) = v14;
    }
  }
  *(_QWORD *)(a1 + 136) = "\x01mcount";
  return a1;
}

uint64_t sub_22F1F62F8(uint64_t a1, uint64_t *a2, llvm::Triple *this, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  const char *v19;
  __int16 v20;
  void *v21[2];
  char v22;

  v19 = "armv7";
  v20 = 259;
  v18 = 261;
  v17[0] = llvm::Triple::getVendorName(this);
  v17[1] = v8;
  v16 = 261;
  v15[0] = llvm::Triple::getOSName(this);
  v15[1] = v9;
  v14 = 261;
  v13[0] = llvm::Triple::getEnvironmentName(this);
  v13[1] = v10;
  MEMORY[0x23489F1C8](v21, &v19, v17, v15, v13);
  sub_22F1F3D08(a1, a2 + 2, (llvm::Triple *)v21, a4);
  *(_QWORD *)a1 = a2[1];
  if (v22 < 0)
    operator delete(v21[0]);
  v11 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 288) |= 0x40u;
  *(_BYTE *)(a1 + *(_QWORD *)(v11 - 24) + 21) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v11 - 24) + 20) = 64;
  return a1;
}

uint64_t sub_22F1F63F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC1C388;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC1FBE0;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC1C748);
}

void sub_22F1F6468(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC1C388;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC1FBE0;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC1C748);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F64EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC20330;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC211E8;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC1CB30);
}

void sub_22F1F655C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC20330;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC211E8;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC1CB30);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F65E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC21938;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC227F0;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC1CF18);
}

void sub_22F1F6650(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC21938;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC227F0;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC1CF18);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F66D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC22F40;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC23DF8;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC1D300);
}

void sub_22F1F6744(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC22F40;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC23DF8;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC1D300);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F67C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC28010;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC28B40;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC283C8);
}

void sub_22F1F6838(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC28010;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC28B40;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC283C8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F68BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC25040;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC25B48;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC1DAA8);
}

void sub_22F1F692C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC25040;
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)a1 = &off_24FC25B48;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC1DAA8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1F69B0(int a1, void *__s2, size_t __n)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  unsigned int v10;

  v5 = 0;
  v6 = &qword_24FC2B6A8;
  do
  {
    if (*v6 == __n && (!__n || !memcmp((const void *)*(v6 - 1), __s2, __n)))
      break;
    v6 += 2;
    ++v5;
  }
  while (v5 != 18);
  v7 = 0x1FFFFFFFFFFFFC85uLL;
  while (1)
  {
    v8 = off_24FC29368[v7 + 891];
    v9 = v8 ? strlen(off_24FC29368[v7 + 891]) : 0;
    if (v9 == __n && (!__n || !memcmp(v8, __s2, __n)))
      break;
    v7 += 3;
    if (!(v7 * 8))
    {
      v10 = 0;
      goto LABEL_16;
    }
  }
  v10 = 1;
LABEL_16:
  if (v5 == 18)
    return v10;
  else
    return 1;
}

size_t sub_22F1F6A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t result;
  unsigned int v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  char **v9;

  v3 = *(unsigned int *)(a2 + 8);
  if (v3 + 18 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(unsigned int *)(a2 + 8);
  }
  result = (size_t)memcpy((void *)(*(_QWORD *)a2 + 16 * v3), &off_24FC2B6A0, 0x120uLL);
  v5 = *(_DWORD *)(a2 + 8) + 18;
  *(_DWORD *)(a2 + 8) = v5;
  v6 = 0x1FFFFFFFFFFFFC85uLL;
  do
  {
    v7 = off_24FC29368[v6 + 891];
    if (v7)
    {
      result = strlen(off_24FC29368[v6 + 891]);
      v8 = result;
    }
    else
    {
      v8 = 0;
    }
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_DWORD *)(a2 + 8);
    }
    v9 = (char **)(*(_QWORD *)a2 + 16 * v5);
    *v9 = v7;
    v9[1] = (char *)v8;
    v5 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v5;
    v6 += 3;
  }
  while (v6 * 8);
  return result;
}

uint64_t sub_22F1F6B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  const void *v7;
  char *v8;
  char **v9;
  char *v10;
  BOOL v11;
  size_t v12;
  char **v13;
  uint64_t v14;
  char v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  const void *v21;
  size_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;

  v4 = 0;
  v5 = (char *)*(unsigned __int8 *)(a2 + 23);
  v6 = *(char **)(a2 + 8);
  if ((char)v5 < 0)
    v7 = *(const void **)a2;
  else
    v7 = (const void *)a2;
  if ((char)v5 < 0)
    v8 = *(char **)(a2 + 8);
  else
    v8 = (char *)(v5 & 0x7F);
  v9 = &off_24FC2B6A0;
  while ((&off_24FC2B6A0)[v4 + 1] != v8)
  {
LABEL_11:
    v9 += 2;
    v4 += 2;
    if (v4 == 36)
    {
      v9 = off_24FC2B7C0;
      goto LABEL_14;
    }
  }
  if (v8)
  {
    if (!memcmp((&off_24FC2B6A0)[v4], v7, (size_t)v8))
      goto LABEL_14;
    goto LABEL_11;
  }
  v9 = &(&off_24FC2B6A0)[v4];
LABEL_14:
  if ((char *)v9 - (char *)&off_24FC2B6A0 == 288)
  {
    if ((char)v5 < 0)
      v10 = v6;
    else
      v10 = v5;
    v11 = v6 != (char *)-1 || (char)v5 >= 0;
    if (v10 >= v8)
      v12 = (size_t)v8;
    else
      v12 = (size_t)v10;
    v13 = off_24FC29368;
    v14 = 7128;
    while (1)
    {
      if ((char *)strlen(*v13) == v8)
      {
        if (!v11)
          abort();
        if (!memcmp(v7, *v13, v12) && v10 == v8)
          break;
      }
      v13 += 3;
      v14 -= 24;
      if (!v14)
        return 0;
    }
    std::string::operator=((std::string *)(a1 + 368), (const std::string *)a2);
    if (*((_BYTE *)v13 + 20))
      v19 = "avrtiny";
    else
      v19 = "avr";
    v25 = 7;
    if (!*((_BYTE *)v13 + 20))
      v25 = 3;
  }
  else
  {
    std::string::operator=((std::string *)(a1 + 368), (const std::string *)a2);
    v17 = *(_BYTE *)(a2 + 23);
    if (v17 >= 0)
      v18 = v17 & 0x7F;
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = "avr";
    if (v18 == 7)
    {
      if (v17 >= 0)
        v20 = *(unsigned __int8 *)(a2 + 23);
      else
        v20 = *(_QWORD *)(a2 + 8);
      if (v17 >= 0)
        v21 = (const void *)a2;
      else
        v21 = *(const void **)a2;
      if (v20 >= 7)
        v22 = 7;
      else
        v22 = v20;
      v23 = memcmp(v21, "avrtiny", v22) == 0;
      if (v20 != 7)
        v23 = 0;
      v24 = !v23;
      if (v23)
        v19 = "avrtiny";
      v25 = 3;
      if (!v24)
        v25 = 7;
    }
    else
    {
      v25 = 3;
    }
  }
  *(_QWORD *)(a1 + 392) = v19;
  *(_QWORD *)(a1 + 400) = v25;
  return 1;
}

uint64_t sub_22F1F6D88(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC2AF58;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  return sub_22F1E6E70(a1, &off_24FC2B2F0);
}

void sub_22F1F6DCC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FC2AF58;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_22F1E6E70(a1, &off_24FC2B2F0);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F1F6E24(const char *a1, _QWORD *a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v10;
  _BOOL4 v11;

  v4 = strlen(a1);
  v5 = *((unsigned __int8 *)a2 + 23);
  v6 = a2[1];
  if ((v5 & 0x80u) == 0)
    v7 = v5 & 0x7F;
  else
    v7 = a2[1];
  if (v4 != v7)
    return 0;
  v8 = v4;
  if ((v5 & 0x80) != 0)
  {
    if (v4 == -1)
      goto LABEL_17;
    a2 = (_QWORD *)*a2;
    v5 = v6;
  }
  else if (v4 == -1)
  {
LABEL_17:
    abort();
  }
  if (v5 >= v4)
    v10 = v4;
  else
    v10 = v5;
  v11 = memcmp(a2, a1, v10) == 0;
  return v5 == v8 && v11;
}

unint64_t sub_22F1F6EC0(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;

  if (*(_QWORD *)(a1 + 48))
  {
    sub_22E609134((uint64_t **)(a1 + 32), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 3)
    {
      do
      {
        v11 = (int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_22E609134((uint64_t **)(a1 + 32), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_22E609134((uint64_t **)(a1 + 32), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

double sub_22F1F6FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  double result;

  v3 = *(unsigned int *)(a2 + 8);
  if (v3 + 5 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(unsigned int *)(a2 + 8);
  }
  v4 = (_OWORD *)(*(_QWORD *)a2 + 16 * v3);
  v4[2] = xmmword_24FC2C1B0;
  v4[3] = *(_OWORD *)&off_24FC2C1C0;
  v4[4] = xmmword_24FC2C1D0;
  result = COERCE_DOUBLE("v1");
  *v4 = xmmword_24FC2C190;
  v4[1] = *(_OWORD *)&off_24FC2C1A0;
  *(_DWORD *)(a2 + 8) += 5;
  return result;
}

void sub_22F1F7048(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v5;
  const void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  size_t v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  size_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  const char *v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  const char *v40;
  uint64_t v41;
  std::string v42;
  std::string v43;
  void *__p[2];
  std::string::size_type v45;
  const char *v46;
  uint64_t v47;
  const char *ArchName;
  uint64_t v49;
  _QWORD v50[4];
  __int16 v51;
  const char *v52;
  uint64_t v53;
  __int16 v54;

  v52 = "__ELF__";
  v54 = 259;
  v5 = "1";
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  v52 = "__csky__";
  v54 = 259;
  v50[0] = "2";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  v52 = "__CSKY__";
  v54 = 259;
  v50[0] = "2";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  v52 = "__ckcore__";
  v54 = 259;
  v50[0] = "2";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  v52 = "__CKCORE__";
  v54 = 259;
  v50[0] = "2";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  v52 = "__CSKYABI__";
  v54 = 259;
  v6 = (const void **)(a1 + 368);
  v7 = *(unsigned __int8 *)(a1 + 391);
  if ((v7 & 0x80u) == 0)
    v8 = v7 & 0x7F;
  else
    v8 = *(_QWORD *)(a1 + 376);
  if (v8 == 5)
  {
    v9 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v9 = *v6;
      v7 = *(_QWORD *)(a1 + 376);
    }
    if (v7 >= 5)
      v10 = 5;
    else
      v10 = v7;
    v11 = memcmp(v9, "abiv2", v10) == 0;
    if (v7 != 5)
      v11 = 0;
    if (v11)
      v5 = "2";
  }
  v12 = 1;
  HIBYTE(v51) = 1;
  if (*v5)
  {
    v50[0] = v5;
    v12 = 3;
  }
  LOBYTE(v51) = v12;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  v52 = "__cskyabi__";
  v54 = 259;
  v13 = *(unsigned __int8 *)(a1 + 391);
  v14 = v13 & 0x7F;
  if ((v13 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 376);
  v15 = "1";
  if (v14 == 5)
  {
    if ((v13 & 0x80) != 0)
    {
      v6 = (const void **)*v6;
      v13 = *(_QWORD *)(a1 + 376);
    }
    if (v13 >= 5)
      v16 = 5;
    else
      v16 = v13;
    v17 = memcmp(v6, "abiv2", v16) == 0;
    if (v13 != 5)
      v17 = 0;
    if (v17)
      v15 = "2";
    else
      v15 = "1";
  }
  v18 = 1;
  HIBYTE(v51) = 1;
  if (*v15)
  {
    v50[0] = v15;
    v18 = 3;
  }
  LOBYTE(v51) = v18;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  ArchName = "ck810";
  v49 = 5;
  v46 = "ck810";
  v47 = 5;
  if (*(_DWORD *)(a1 + 392))
  {
    ArchName = (const char *)llvm::CSKY::getArchName();
    v49 = v19;
    v20 = (const char *)(a1 + 400);
    v21 = *(_BYTE *)(a1 + 423);
    v22 = v21 < 0;
    if (v21 < 0)
      v20 = *(const char **)(a1 + 400);
    v23 = v21 & 0x7F;
    if (v22)
      v23 = *(_QWORD *)(a1 + 408);
    v46 = v20;
    v47 = v23;
  }
  llvm::StringRef::upper((llvm::StringRef *)&ArchName);
  v24 = std::string::insert(&v42, 0, "__");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v43, "__");
  v27 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v45 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v54 = 260;
  v52 = (const char *)__p;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  llvm::StringRef::lower((llvm::StringRef *)&ArchName);
  v28 = std::string::insert(&v42, 0, "__");
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v43, "__");
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v45 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v54 = 260;
  v52 = (const char *)__p;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  llvm::StringRef::upper((llvm::StringRef *)&v46);
  v32 = std::string::insert(&v42, 0, "__");
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v43, "__");
  v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v45 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v54 = 260;
  v52 = (const char *)__p;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  llvm::StringRef::lower((llvm::StringRef *)&v46);
  v36 = std::string::insert(&v42, 0, "__");
  v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v43, "__");
  v39 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v45 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v54 = 260;
  v52 = (const char *)__p;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)"__cskyLE__";
  v43.__r_.__value_.__l.__size_ = 10;
  v54 = 261;
  v52 = "__cskyLE__";
  v53 = 10;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  llvm::StringRef::upper((llvm::StringRef *)&v43);
  v54 = 260;
  v52 = (const char *)__p;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  llvm::StringRef::lower((llvm::StringRef *)&v43);
  v54 = 260;
  v52 = (const char *)__p;
  v50[0] = "1";
  v51 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 427))
  {
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"__CSKY_DSPV2__";
    v42.__r_.__value_.__l.__size_ = 14;
    v54 = 261;
    v52 = "__CSKY_DSPV2__";
    v53 = 14;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    llvm::StringRef::lower((llvm::StringRef *)&v42);
    v54 = 260;
    v52 = (const char *)__p;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 425))
  {
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"__CSKY_VDSPV2__";
    v42.__r_.__value_.__l.__size_ = 15;
    v54 = 261;
    v52 = "__CSKY_VDSPV2__";
    v53 = 15;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    llvm::StringRef::lower((llvm::StringRef *)&v42);
    v54 = 260;
    v52 = (const char *)__p;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (*(_BYTE *)(a1 + 424))
    {
      v40 = "__CSKY_VDSPV2_F__";
      v41 = 17;
      v54 = 261;
      v52 = "__CSKY_VDSPV2_F__";
      v53 = 17;
      v50[0] = "1";
      v51 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
      llvm::StringRef::lower((llvm::StringRef *)&v40);
      v54 = 260;
      v52 = (const char *)__p;
      v50[0] = "1";
      v51 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
    }
  }
  if (*(_BYTE *)(a1 + 426))
  {
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"__CSKY_VDSP64__";
    v42.__r_.__value_.__l.__size_ = 15;
    v40 = "__CSKY_VDSP128__";
    v41 = 16;
    v54 = 261;
    v52 = "__CSKY_VDSP64__";
    v53 = 15;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    llvm::StringRef::lower((llvm::StringRef *)&v42);
    v54 = 260;
    v52 = (const char *)__p;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    v54 = 261;
    v52 = "__CSKY_VDSP128__";
    v53 = 16;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    llvm::StringRef::lower((llvm::StringRef *)&v40);
    v54 = 260;
    v52 = (const char *)__p;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 428))
  {
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"__CSKY_3E3R1__";
    v42.__r_.__value_.__l.__size_ = 14;
    v54 = 261;
    v52 = "__CSKY_3E3R1__";
    v53 = 14;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    llvm::StringRef::lower((llvm::StringRef *)&v42);
    v54 = 260;
    v52 = (const char *)__p;
    v50[0] = "1";
    v51 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)&v52, (llvm::Twine *)v50);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
  }
}

void sub_22F1F7984(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  const char *v15;
  const char *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  const void *v22;
  size_t v23;
  unint64_t v24;
  const void *v25;
  size_t v26;
  const char *v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  unint64_t v31;
  const void *v32;
  size_t v33;
  unint64_t v34;
  const void *v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  void *__p;
  char v43;
  _QWORD v44[4];
  __int16 v45;
  _QWORD v46[4];
  __int16 v47;

  v46[0] = "__qdsp6__";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__hexagon__";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v46[0] = "__ELF__";
  v47 = 259;
  v44[0] = "1";
  v45 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  v6 = (const void **)(a1 + 368);
  v7 = *(unsigned __int8 *)(a1 + 391);
  v8 = *(_QWORD *)(a1 + 376);
  if ((v7 & 0x80u) == 0)
    v9 = v7 & 0x7F;
  else
    v9 = *(_QWORD *)(a1 + 376);
  if (v9 == 11)
  {
    v13 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v13 = *v6;
      v7 = *(_QWORD *)(a1 + 376);
    }
    if (v7 >= 0xB)
      v14 = 11;
    else
      v14 = v7;
    v12 = 0;
    if (memcmp(v13, "hexagonv67t", v14) || v7 != 11)
      goto LABEL_37;
    v15 = "__HEXAGON_V67T__";
    goto LABEL_24;
  }
  if (v9 == 10)
  {
    v17 = *(unsigned __int8 *)(a1 + 391);
    v18 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v18 = *v6;
      v17 = *(_QWORD *)(a1 + 376);
    }
    if (v17 >= 0xA)
      v19 = 10;
    else
      v19 = v17;
    if (!memcmp(v18, "hexagonv55", v19) && v17 == 10)
    {
      v46[0] = "__HEXAGON_V55__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__HEXAGON_ARCH__";
      v47 = 259;
      v44[0] = "55";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__QDSP6_V55__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__QDSP6_ARCH__";
      v47 = 259;
      v44[0] = "55";
      goto LABEL_34;
    }
    v21 = v7;
    v22 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v22 = *v6;
      v21 = v8;
    }
    if (v21 >= 0xA)
      v23 = 10;
    else
      v23 = v21;
    if (!memcmp(v22, "hexagonv60", v23) && v21 == 10)
    {
      v46[0] = "__HEXAGON_V60__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__HEXAGON_ARCH__";
      v47 = 259;
      v44[0] = "60";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__QDSP6_V60__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__QDSP6_ARCH__";
      v47 = 259;
      v44[0] = "60";
LABEL_83:
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v12 = 1;
      goto LABEL_37;
    }
    v24 = v7;
    v25 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v25 = *v6;
      v24 = v8;
    }
    if (v24 >= 0xA)
      v26 = 10;
    else
      v26 = v24;
    if (!memcmp(v25, "hexagonv62", v26) && v24 == 10)
    {
      v46[0] = "__HEXAGON_V62__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__HEXAGON_ARCH__";
      v47 = 259;
      v27 = "62";
LABEL_82:
      v44[0] = v27;
      goto LABEL_83;
    }
    v28 = v7;
    v29 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v29 = *v6;
      v28 = v8;
    }
    if (v28 >= 0xA)
      v30 = 10;
    else
      v30 = v28;
    if (!memcmp(v29, "hexagonv65", v30) && v28 == 10)
    {
      v46[0] = "__HEXAGON_V65__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__HEXAGON_ARCH__";
      v47 = 259;
      v27 = "65";
      goto LABEL_82;
    }
    v31 = v7;
    v32 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v32 = *v6;
      v31 = v8;
    }
    if (v31 >= 0xA)
      v33 = 10;
    else
      v33 = v31;
    if (!memcmp(v32, "hexagonv66", v33) && v31 == 10)
    {
      v46[0] = "__HEXAGON_V66__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__HEXAGON_ARCH__";
      v47 = 259;
      v27 = "66";
      goto LABEL_82;
    }
    v34 = v7;
    v35 = (const void *)(a1 + 368);
    if ((v7 & 0x80) != 0)
    {
      v35 = *v6;
      v34 = v8;
    }
    if (v34 >= 0xA)
      v36 = 10;
    else
      v36 = v34;
    if (memcmp(v35, "hexagonv67", v36) || v34 != 10)
    {
      v37 = v7;
      v38 = (const void *)(a1 + 368);
      if ((v7 & 0x80) != 0)
      {
        v38 = *v6;
        v37 = v8;
      }
      if (v37 >= 0xA)
        v39 = 10;
      else
        v39 = v37;
      if (!memcmp(v38, "hexagonv68", v39) && v37 == 10)
      {
        v46[0] = "__HEXAGON_V68__";
        v47 = 259;
        v44[0] = "1";
        v45 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
        v46[0] = "__HEXAGON_ARCH__";
        v47 = 259;
        v16 = "68";
      }
      else
      {
        v40 = (const void *)(a1 + 368);
        if ((v7 & 0x80) != 0)
        {
          v40 = *v6;
          v7 = v8;
        }
        if (v7 >= 0xA)
          v41 = 10;
        else
          v41 = v7;
        v12 = 0;
        if (memcmp(v40, "hexagonv69", v41) || v7 != 10)
          goto LABEL_37;
        v46[0] = "__HEXAGON_V69__";
        v47 = 259;
        v44[0] = "1";
        v45 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
        v46[0] = "__HEXAGON_ARCH__";
        v47 = 259;
        v16 = "69";
      }
      goto LABEL_25;
    }
    v15 = "__HEXAGON_V67__";
LABEL_24:
    v46[0] = v15;
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__HEXAGON_ARCH__";
    v47 = 259;
    v16 = "67";
LABEL_25:
    v44[0] = v16;
LABEL_34:
    v45 = 259;
    goto LABEL_35;
  }
  if (v9 != 9)
    goto LABEL_36;
  v10 = (const void *)(a1 + 368);
  if ((v7 & 0x80) != 0)
  {
    v10 = *v6;
    v7 = *(_QWORD *)(a1 + 376);
  }
  if (v7 >= 9)
    v11 = 9;
  else
    v11 = v7;
  v12 = 0;
  if (!memcmp(v10, "hexagonv5", v11) && v7 == 9)
  {
    v46[0] = "__HEXAGON_V5__";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__HEXAGON_ARCH__";
    v47 = 259;
    v44[0] = "5";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    if ((*(_WORD *)(a2 + 148) & 1) != 0)
    {
      v46[0] = "__QDSP6_V5__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
      v46[0] = "__QDSP6_ARCH__";
      v47 = 259;
      v44[0] = "5";
      v45 = 259;
LABEL_35:
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    }
LABEL_36:
    v12 = 0;
  }
LABEL_37:
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 568))(a1, "hvx-length64b", 13))
  {
    v46[0] = "__HVX__";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__HVX_ARCH__";
    v47 = 259;
    v45 = 260;
    v44[0] = a1 + 392;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__HVX_LENGTH__";
    v47 = 259;
    v44[0] = "64";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 568))(a1, "hvx-length128b", 14))
  {
    v46[0] = "__HVX__";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__HVX_ARCH__";
    v47 = 259;
    v45 = 260;
    v44[0] = a1 + 392;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    v46[0] = "__HVX_LENGTH__";
    v47 = 259;
    v44[0] = "128";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    if (v12)
    {
      v46[0] = "__HVXDBL__";
      v47 = 259;
      v44[0] = "1";
      v45 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
    }
  }
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 568))(a1, "audio", 5))
  {
    v46[0] = "__HEXAGON_AUDIO__";
    v47 = 259;
    v44[0] = "1";
    v45 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  }
  v43 = 1;
  if (std::string::find((const std::string *)(a1 + 368), 116, 0) == -1)
    v20 = 52;
  else
    v20 = 51;
  LOWORD(__p) = v20;
  v46[0] = "__HEXAGON_PHYSICAL_SLOTS__";
  v47 = 259;
  v45 = 260;
  v44[0] = &__p;
  sub_22E7333BC(a3, (llvm::Twine *)v46, (llvm::Twine *)v44);
  if (v43 < 0)
    operator delete(__p);
}

uint64_t sub_22F1F82B8(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, _DWORD *a4, unint64_t a5, unsigned __int8 **a6)
{
  char *v12;
  size_t v13;
  BOOL v14;

  if (std::string::find((const std::string *)(a1 + 368), 116, 0) != -1)
    *(_BYTE *)(*sub_22E80ABE0(a2, "audio", 5uLL) + 8) = 1;
  if (a5 >= 7)
  {
    v14 = *a4 == 1635280232 && *(_DWORD *)((char *)a4 + 3) == 1852794721;
    v13 = a5;
    v12 = (char *)a4;
    if (v14)
    {
      v12 = (char *)a4 + 7;
      v13 = a5 - 7;
      if (a5 == 7)
        goto LABEL_17;
    }
  }
  else
  {
    v12 = (char *)a4;
    v13 = a5;
    if (!a5)
      goto LABEL_17;
  }
  if (v12[v13 - 1] != 116)
    goto LABEL_16;
  if (v13 >= v13 - 1)
    --v13;
  if (v13)
LABEL_16:
    *(_BYTE *)(*sub_22E80ABE0(a2, v12, v13) + 8) = 1;
LABEL_17:
  *(_BYTE *)(*sub_22E80ABE0(a2, "long-calls", 0xAuLL) + 8) = 0;
  return sub_22F424A84(a1, (uint64_t)a2, a3, (uint64_t)a4, a5, a6);
}

uint64_t sub_22F1F83E8(uint64_t a1, const void ***a2)
{
  const void **v3;
  const void **v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  size_t v10;
  unint64_t v12;
  const void *v13;
  size_t v14;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  const void *v22;
  size_t v23;
  unint64_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  void **v32;
  std::string v33;
  char v34;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v32 = (void **)(a1 + 392);
    do
    {
      v5 = *((unsigned __int8 *)v3 + 23);
      v6 = (unint64_t)v3[1];
      if ((v5 & 0x80u) == 0)
        v7 = v5 & 0x7F;
      else
        v7 = (unint64_t)v3[1];
      if (v7 == 15)
      {
        v12 = *((unsigned __int8 *)v3 + 23);
        v13 = v3;
        if ((v5 & 0x80) != 0)
        {
          v13 = *v3;
          v12 = (unint64_t)v3[1];
        }
        if (v12 >= 0xF)
          v14 = 15;
        else
          v14 = v12;
        if (memcmp(v13, "+hvx-length128b", v14) || v12 != 15)
        {
LABEL_28:
          if ((v5 & 0x80) != 0)
          {
            v16 = (char *)*v3;
            v17 = v6;
          }
          else
          {
            v16 = (char *)v3;
            v17 = v5;
          }
          if (v17 >= 5)
          {
            v18 = &v16[v17];
            v19 = v16;
            do
            {
              v20 = (char *)memchr(v19, 43, v17 - 4);
              if (!v20)
                break;
              if (*(_DWORD *)v20 == 2021025835 && v20[4] == 118)
              {
                if (v20 == v18 || v20 - v16 == -1)
                  break;
                *(_BYTE *)(a1 + 416) = 1;
                std::string::basic_string(&v33, (const std::string *)v3, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
                if (*(char *)(a1 + 415) < 0)
                  operator delete(*v32);
                *(std::string *)v32 = v33;
                goto LABEL_80;
              }
              v19 = v20 + 1;
              v17 = v18 - (_BYTE *)v19;
            }
            while (v18 - (_BYTE *)v19 >= 5);
          }
          switch(v7)
          {
            case 0xBuLL:
              v24 = v5;
              v25 = v3;
              if ((v5 & 0x80) != 0)
              {
                v25 = *v3;
                v24 = v6;
              }
              if (v24 >= 0xB)
                v26 = 11;
              else
                v26 = v24;
              if (!memcmp(v25, "+long-calls", v26) && v24 == 11)
              {
                *(_BYTE *)(a1 + 420) = 1;
              }
              else
              {
                v29 = v3;
                if ((v5 & 0x80) != 0)
                {
                  v29 = *v3;
                  v5 = v6;
                }
                if (v5 >= 0xB)
                  v30 = 11;
                else
                  v30 = v5;
                if (!memcmp(v29, "-long-calls", v30) && v5 == 11)
                  *(_BYTE *)(a1 + 420) = 0;
              }
              break;
            case 6uLL:
              v27 = v3;
              if ((v5 & 0x80) != 0)
              {
                v27 = *v3;
                v5 = v6;
              }
              if (v5 >= 6)
                v28 = 6;
              else
                v28 = v5;
              if (!memcmp(v27, "+audio", v28) && v5 == 6)
                *(_BYTE *)(a1 + 419) = 1;
              break;
            case 4uLL:
              v22 = v3;
              if ((v5 & 0x80) != 0)
              {
                v22 = *v3;
                v5 = v6;
              }
              if (v5 >= 4)
                v23 = 4;
              else
                v23 = v5;
              if (!memcmp(v22, "-hvx", v23) && v5 == 4)
              {
                *(_BYTE *)(a1 + 418) = 0;
                *(_WORD *)(a1 + 416) = 0;
              }
              break;
          }
          goto LABEL_80;
        }
        *(_BYTE *)(a1 + 418) = 1;
        *(_BYTE *)(a1 + 416) = 1;
      }
      else
      {
        if (v7 != 14)
          goto LABEL_28;
        v8 = *((unsigned __int8 *)v3 + 23);
        v9 = v3;
        if ((v5 & 0x80) != 0)
        {
          v9 = *v3;
          v8 = (unint64_t)v3[1];
        }
        v10 = v8 >= 0xE ? 14 : v8;
        if (memcmp(v9, "+hvx-length64b", v10) || v8 != 14)
          goto LABEL_28;
        *(_WORD *)(a1 + 416) = 257;
      }
LABEL_80:
      v3 += 3;
    }
    while (v3 != v4);
  }
  if ((std::string::compare((const std::string *)(a1 + 368), "hexagonv68") & 0x80000000) == 0)
  {
    *(_BYTE *)(a1 + 84) = 1;
    *(_BYTE *)(a1 + 87) = 1;
  }
  return 1;
}

uint64_t sub_22F1F8700(_BYTE *a1, unsigned __int16 *a2, uint64_t a3)
{
  int v6;
  void *v7;
  _QWORD *v8;
  size_t v9;
  char v10;
  int v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  char v23;

  std::operator+<char>();
  v6 = v23;
  v7 = (void *)v22[0];
  if (v23 >= 0)
    v8 = v22;
  else
    v8 = (_QWORD *)v22[0];
  if (v23 >= 0)
    v9 = v23 & 0x7F;
  else
    v9 = v22[1];
  if (a3 == v9 && (!v9 || !memcmp(a2, v8, v9)))
  {
    v14 = 1;
    if (v6 < 0)
LABEL_33:
      operator delete(v7);
  }
  else
  {
    v10 = 0;
    LOBYTE(v11) = 0;
    switch(a3)
    {
      case 3:
        v10 = a1[416];
        v12 = *a2 == 30312;
        v13 = *((_BYTE *)a2 + 2) == 120;
        goto LABEL_15;
      case 4:
      case 6:
      case 8:
      case 9:
      case 11:
      case 12:
        break;
      case 5:
        v10 = a1[419];
        v12 = *(_DWORD *)a2 == 1768191329;
        v13 = *((_BYTE *)a2 + 4) == 111;
LABEL_15:
        v15 = v13;
        goto LABEL_30;
      case 7:
        v10 = *(_DWORD *)a2 == 1635280232 && *(_DWORD *)((char *)a2 + 3) == 1852794721;
        goto LABEL_24;
      case 10:
        v10 = a1[420];
        v17 = *(_QWORD *)a2;
        v15 = a2[4] == 29548;
        v18 = 0x6C61632D676E6F6CLL;
        goto LABEL_29;
      case 13:
        v10 = a1[417];
        v17 = *(_QWORD *)a2;
        v19 = *(_QWORD *)((char *)a2 + 5);
        v20 = 0x6234366874676E65;
        goto LABEL_28;
      case 14:
        v10 = a1[418];
        v17 = *(_QWORD *)a2;
        v19 = *(_QWORD *)(a2 + 3);
        v20 = 0x623832316874676ELL;
LABEL_28:
        v15 = v19 == v20;
        v18 = 0x676E656C2D787668;
LABEL_29:
        v12 = v17 == v18;
LABEL_30:
        v11 = v12 && v15;
        if (!v11)
          v10 = 0;
        break;
      default:
LABEL_24:
        LOBYTE(v11) = v10;
        break;
    }
    v14 = (v10 != 0) & v11;
    if (v6 < 0)
      goto LABEL_33;
  }
  return v14;
}

uint64_t sub_22F1F88E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;

  v3 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  do
  {
    v5 = xmmword_24FC450F0[v3];
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      v7 = xmmword_24FC450F0[v3];
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v7;
      v4 = *(_DWORD *)(a2 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a2 + 16 * v4) = v5;
    v4 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v4;
    v3 += 2;
  }
  while (v3 != 20);
  return result;
}

uint64_t sub_22F1F897C(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v2);
  *v3 = "v11";
  v3[1] = 3;
  LODWORD(v3) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v3;
  return *(_QWORD *)a1 + 16 * v3 - 16;
}

uint64_t *sub_22F1F89F0(uint64_t *a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v5;
  std::string *v6;
  size_t size;
  uint64_t v8;
  std::string v10;

  v5 = sub_22F1E6848(a1, a2 + 1, a3);
  *v5 = *a2;
  *((_DWORD *)v5 + 91) = 0;
  memset(&v10, 0, sizeof(v10));
  std::string::append(&v10, "E");
  std::string::append(&v10, "-m:e");
  std::string::append(&v10, "-p:32:16:32");
  std::string::append(&v10, "-i8:8:8-i16:16:16-i32:16:32");
  std::string::append(&v10, "-n8:16:32");
  std::string::append(&v10, "-a:0:16-S16");
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v10;
  else
    v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v10.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v10.__r_.__value_.__l.__size_;
  sub_22F1E6F0C((uint64_t)a1, v6, size, (uint64_t)&unk_22F648AA5);
  v8 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 112) = 6;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v8 - 24) + 120) = 5;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v8 - 24) + 124) = 5;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t *sub_22F1F8B08(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;
  std::string *v4;
  size_t size;
  uint64_t v6;
  std::string v8;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC466F0, this);
  *v3 = (uint64_t)&off_24FC46358;
  *((_DWORD *)v3 + 91) = 0;
  memset(&v8, 0, sizeof(v8));
  std::string::append(&v8, "E");
  std::string::append(&v8, "-m:e");
  std::string::append(&v8, "-p:32:16:32");
  std::string::append(&v8, "-i8:8:8-i16:16:16-i32:16:32");
  std::string::append(&v8, "-n8:16:32");
  std::string::append(&v8, "-a:0:16-S16");
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v8;
  else
    v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v8.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v8.__r_.__value_.__l.__size_;
  sub_22F1E6F0C((uint64_t)a1, v4, size, (uint64_t)&unk_22F648AA5);
  v6 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 112) = 6;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 120) = 5;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 124) = 5;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return a1;
}

BOOL sub_22F1F8C28(uint64_t a1, uint64_t *a2)
{
  char v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *((_BYTE *)a2 + 23);
  v3 = v2 < 0;
  v4 = (uint64_t *)*a2;
  if (v2 >= 0)
    v4 = a2;
  v5 = v2 & 0x7F;
  if (v3)
    v5 = a2[1];
  if (v5 == 6)
  {
    if (*(_DWORD *)v4 == 808990285 && *((_WORD *)v4 + 2) == 12336)
    {
      v7 = 0x100000001;
      goto LABEL_37;
    }
    v7 = 0x100000002;
    if (*(_DWORD *)v4 == 808990285 && *((_WORD *)v4 + 2) == 12337)
      goto LABEL_37;
    if (*(_DWORD *)v4 == 808990285 && *((_WORD *)v4 + 2) == 12338)
    {
      v7 = 0x100000003;
      goto LABEL_37;
    }
    if (*(_DWORD *)v4 == 808990285 && *((_WORD *)v4 + 2) == 12339)
    {
      v7 = 0x100000004;
      goto LABEL_37;
    }
    if (*(_DWORD *)v4 == 808990285 && *((_WORD *)v4 + 2) == 12340)
    {
      v7 = 0x100000005;
      goto LABEL_37;
    }
    v7 = 0x100000006;
    v6 = (*(_DWORD *)v4 ^ 0x3038364D | *((unsigned __int16 *)v4 + 2) ^ 0x3036) == 0;
  }
  else
  {
    if (v5 != 7)
    {
      v7 = 0;
      goto LABEL_37;
    }
    v6 = (*(_DWORD *)v4 ^ 0x656E6567 | *(_DWORD *)((char *)v4 + 3) ^ 0x63697265) == 0;
    v7 = 0x100000001;
  }
  if (!v6)
    v7 = 0;
LABEL_37:
  if (v7 <= 0x100000000)
    LODWORD(v7) = 0;
  *(_DWORD *)(a1 + 364) = v7;
  return (_DWORD)v7 != 0;
}

void sub_22F1F8D74(int a1@<W1>, _BYTE *a2@<X8>)
{
  char v2;

  if (a1 <= 37)
  {
    if (a1 == 35)
      goto LABEL_10;
    if (a1 == 36)
    {
      LOBYTE(a1) = 115;
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (a1 == 38)
  {
    LOBYTE(a1) = 100;
    goto LABEL_10;
  }
  if (a1 != 46)
  {
    if (a1 == 47)
    {
      LOBYTE(a1) = 37;
      goto LABEL_10;
    }
LABEL_12:
    v2 = 0;
    *a2 = 0;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)a2 = a1;
  v2 = 1;
  a2[23] = 1;
LABEL_11:
  a2[24] = v2;
}

void sub_22F1F8DDC(unsigned __int8 **a1@<X1>, uint64_t a2@<X8>)
{
  _WORD *v3;
  int v4;
  std::string *v5;
  void *__p;
  char v7;
  std::string v8;

  v3 = *a1;
  v4 = **a1;
  if (v4 == 67)
  {
    *((_BYTE *)&v8.__r_.__value_.__s + 23) = 1;
    LOWORD(v8.__r_.__value_.__l.__data_) = 94;
    *a1 = (unsigned __int8 *)v3 + 1;
    v7 = 2;
    LOWORD(__p) = *v3;
    BYTE2(__p) = 0;
    v5 = std::string::append(&v8, (const std::string::value_type *)&__p, 2uLL);
    *(std::string *)a2 = *v5;
    v5->__r_.__value_.__r.__words[0] = 0;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    if (v7 < 0)
      operator delete(__p);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 1;
    *(_BYTE *)a2 = v4;
    *(_BYTE *)(a2 + 1) = 0;
  }
}

void *sub_22F1F8E98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *result;

  v3 = *(unsigned int *)(a2 + 8);
  if (v3 + 18 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(unsigned int *)(a2 + 8);
  }
  result = memcpy((void *)(*(_QWORD *)a2 + 16 * v3), &off_24FC4F4E0, 0x120uLL);
  *(_DWORD *)(a2 + 8) += 18;
  return result;
}

uint64_t sub_22F1F8EFC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL v13;

  v1 = a1 + 368;
  v2 = *(_BYTE *)(a1 + 391);
  v3 = v2 < 0;
  if (v2 < 0)
    v1 = *(_QWORD *)(a1 + 368);
  v4 = v2 & 0x7F;
  if (v3)
    v5 = *(_QWORD *)(a1 + 376);
  else
    v5 = v4;
  if (v5 != 8)
  {
    if (v5 == 7)
    {
      v8 = *(_DWORD *)v1 ^ 0x6574636F;
      v9 = *(_DWORD *)(v1 + 3);
      v10 = 728657765;
LABEL_27:
      if (v8 | v9 ^ v10)
        v11 = 0;
      else
        v11 = 0x100000002;
      goto LABEL_40;
    }
    if (v5 == 6)
    {
      if ((*(_DWORD *)v1 != 1936746861 || *(_WORD *)(v1 + 4) != 12851)
        && (*(_DWORD *)v1 != 1936746861 || *(_WORD *)(v1 + 4) != 13366))
      {
        v8 = *(_DWORD *)v1 ^ 0x6574636F;
        v9 = *(unsigned __int16 *)(v1 + 4);
        v10 = 28271;
        goto LABEL_27;
      }
      v11 = 0x100000001;
    }
    else
    {
      v11 = 0;
    }
    goto LABEL_32;
  }
  v11 = 0x100000002;
  switch(*(_QWORD *)v1)
  {
    case 0x327232337370696DLL:
LABEL_32:
      v12 = v5 == 8;
      break;
    case 0x327234367370696DLL:
      goto LABEL_40;
    case 0x337232337370696DLL:
    case 0x337234367370696DLL:
      v11 = 0x100000003;
      goto LABEL_40;
    case 0x357232337370696DLL:
      v11 = 0x100000005;
      goto LABEL_32;
    case 0x357234367370696DLL:
      v12 = 1;
      v11 = 0x100000005;
      break;
    case 0x367232337370696DLL:
      v11 = 0x100000006;
      goto LABEL_40;
    default:
      v11 = 0;
      v12 = 1;
      break;
  }
  v13 = v12 && (v11 & 0x300000000) == 0;
  if (v13 && *(_QWORD *)v1 == 0x367234367370696DLL)
    v11 = 0x100000006;
LABEL_40:
  if ((v11 & 0x300000000) != 0)
    return v11;
  else
    return 0;
}

void sub_22F1F9120(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v6;
  const void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  const char *v12;
  unsigned int v13;
  std::string::size_type size;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  const char *v21;
  const void *v22;
  size_t v23;
  const char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const void **v32;
  std::string *v33;
  std::string::size_type v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const void *v54;
  size_t v55;
  size_t v56;
  _QWORD v57[2];
  std::string v58;
  void *__p[2];
  std::string::size_type v60;
  std::string v61;
  _QWORD v62[4];
  __int16 v63;
  _QWORD v64[4];
  __int16 v65;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22F425880(a3, (uint64_t)"MIPSEB", 6, a2);
    v6 = "_MIPSEB";
  }
  else
  {
    sub_22F425880(a3, (uint64_t)"MIPSEL", 6, a2);
    v6 = "_MIPSEL";
  }
  v64[0] = v6;
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "__mips__";
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "_mips";
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  if ((*(_BYTE *)(a2 + 3) & 0x80) != 0)
  {
    v64[0] = "mips";
    v65 = 259;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  v7 = (const void **)(a1 + 416);
  v8 = *(unsigned __int8 *)(a1 + 439);
  if ((v8 & 0x80u) == 0)
    v9 = v8 & 0x7F;
  else
    v9 = *(_QWORD *)(a1 + 424);
  if (v9 != 3)
    goto LABEL_18;
  v10 = (const void *)(a1 + 416);
  if ((v8 & 0x80) != 0)
  {
    v10 = *v7;
    v8 = *(_QWORD *)(a1 + 424);
  }
  v11 = v8 >= 3 ? 3 : v8;
  if (!memcmp(v10, "o32", v11) && v8 == 3)
  {
    v64[0] = "__mips";
    v65 = 259;
    v62[0] = "32";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    v64[0] = "_MIPS_ISA";
    v65 = 259;
    v12 = "_MIPS_ISA_MIPS32";
  }
  else
  {
LABEL_18:
    v64[0] = "__mips";
    v65 = 259;
    v62[0] = "64";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    v64[0] = "__mips64";
    v65 = 259;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    v64[0] = "__mips64__";
    v65 = 259;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    v64[0] = "_MIPS_ISA";
    v65 = 259;
    v12 = "_MIPS_ISA_MIPS64";
  }
  v62[0] = v12;
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v13 = sub_22F1F8EFC(a1);
  std::to_string(&v61, v13);
  size = *((_BYTE *)&v61.__r_.__value_.__s + 23) & 0x7F;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v61.__r_.__value_.__l.__size_;
  if (size)
  {
    v64[0] = "__mips_isa_rev";
    v65 = 259;
    v63 = 260;
    v62[0] = &v61;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  v15 = *(unsigned __int8 *)(a1 + 439);
  v16 = *(_QWORD *)(a1 + 424);
  if ((v15 & 0x80u) == 0)
    v17 = v15 & 0x7F;
  else
    v17 = *(_QWORD *)(a1 + 424);
  if (v17 != 3)
    goto LABEL_43;
  v18 = *(unsigned __int8 *)(a1 + 439);
  v19 = (const void *)(a1 + 416);
  if ((v15 & 0x80) != 0)
  {
    v19 = *v7;
    v18 = *(_QWORD *)(a1 + 424);
  }
  if (v18 >= 3)
    v20 = 3;
  else
    v20 = v18;
  if (memcmp(v19, "o32", v20) || v18 != 3)
  {
    v22 = (const void *)(a1 + 416);
    if ((v15 & 0x80) != 0)
    {
      v22 = *v7;
      v15 = v16;
    }
    if (v15 >= 3)
      v23 = 3;
    else
      v23 = v15;
    if (!memcmp(v22, "n32", v23) && v15 == 3)
    {
      v64[0] = "__mips_n32";
      v65 = 259;
      v62[0] = "1";
      v63 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
      v21 = "_ABIN32";
      v64[0] = "_ABIN32";
      v65 = 259;
      v24 = "2";
LABEL_44:
      v62[0] = v24;
      goto LABEL_45;
    }
LABEL_43:
    v64[0] = "__mips_n64";
    v65 = 259;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    v21 = "_ABI64";
    v64[0] = "_ABI64";
    v65 = 259;
    v24 = "3";
    goto LABEL_44;
  }
  v64[0] = "__mips_o32";
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v21 = "_ABIO32";
  v64[0] = "_ABIO32";
  v65 = 259;
  v62[0] = "1";
LABEL_45:
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "_MIPS_SIM";
  v65 = 259;
  v62[0] = v21;
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  if (!*(_BYTE *)(a1 + 397))
  {
    v64[0] = "__mips_abicalls";
    v65 = 259;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    if (*(_BYTE *)(a1 + 398))
    {
      v64[0] = "__ABICALLS__";
      v65 = 259;
      v62[0] = "1";
      v63 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    }
  }
  v64[0] = "__REGISTER_PREFIX__";
  v65 = 259;
  v63 = 257;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v25 = *(_DWORD *)(a1 + 400);
  if (v25 == 1)
  {
    v64[0] = "__mips_soft_float";
    v65 = 259;
  }
  else
  {
    if (v25)
      goto LABEL_53;
    v64[0] = "__mips_hard_float";
    v65 = 259;
  }
  v63 = 265;
  LODWORD(v62[0]) = 1;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
LABEL_53:
  if (*(_BYTE *)(a1 + 396))
  {
    v64[0] = "__mips_single_float";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  v26 = *(_DWORD *)(a1 + 412);
  if (v26 == 2)
  {
    v64[0] = "__mips_fpr";
    v65 = 259;
    v63 = 265;
    v27 = 64;
LABEL_61:
    LODWORD(v62[0]) = v27;
    goto LABEL_62;
  }
  if (v26 == 1)
  {
    v64[0] = "__mips_fpr";
    v65 = 259;
    v63 = 265;
    v27 = 32;
    goto LABEL_61;
  }
  if (v26)
    goto LABEL_63;
  v64[0] = "__mips_fpr";
  v65 = 259;
  v63 = 265;
  LODWORD(v62[0]) = 0;
LABEL_62:
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  if (*(_DWORD *)(a1 + 412) == 2)
  {
LABEL_64:
    v64[0] = "_MIPS_FPSET";
    v65 = 259;
    v63 = 265;
    v28 = 32;
    goto LABEL_66;
  }
LABEL_63:
  if (*(_BYTE *)(a1 + 396))
    goto LABEL_64;
  v64[0] = "_MIPS_FPSET";
  v65 = 259;
  v63 = 265;
  v28 = 16;
LABEL_66:
  LODWORD(v62[0]) = v28;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  if (*(_BYTE *)(a1 + 392))
  {
    v64[0] = "__mips16";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  if (*(_BYTE *)(a1 + 393))
  {
    v64[0] = "__mips_micromips";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  if (*(_BYTE *)(a1 + 394))
  {
    v64[0] = "__mips_nan2008";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  if (*(_BYTE *)(a1 + 395))
  {
    v64[0] = "__mips_abs2008";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  v29 = *(_DWORD *)(a1 + 404);
  if (v29 == 2)
  {
    v64[0] = "__mips_dsp_rev";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 2;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    v64[0] = "__mips_dspr2";
    v65 = 259;
  }
  else
  {
    if (v29 != 1)
      goto LABEL_79;
    v64[0] = "__mips_dsp_rev";
    v65 = 259;
  }
  v63 = 265;
  LODWORD(v62[0]) = 1;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "__mips_dsp";
  v65 = 259;
  v63 = 265;
  LODWORD(v62[0]) = 1;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
LABEL_79:
  if (*(_BYTE *)(a1 + 408))
  {
    v64[0] = "__mips_msa";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  if (*(_BYTE *)(a1 + 409))
  {
    v64[0] = "__mips_no_madd4";
    v65 = 259;
    v63 = 265;
    LODWORD(v62[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  v64[0] = "_MIPS_SZPTR";
  v65 = 259;
  __p[0] = (void *)*(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v63 = 268;
  v62[0] = __p;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "_MIPS_SZINT";
  v65 = 259;
  v30 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 4);
  v63 = 264;
  LODWORD(v62[0]) = v30;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "_MIPS_SZLONG";
  v65 = 259;
  v31 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 20);
  v63 = 264;
  LODWORD(v62[0]) = v31;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "_MIPS_ARCH";
  v65 = 259;
  v32 = (const void **)(a1 + 368);
  std::operator+<char>();
  v33 = std::string::append(&v58, "\"");
  v34 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v60 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v63 = 260;
  v62[0] = __p;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v35 = *(_BYTE *)(a1 + 391);
  if (v35 >= 0)
    v36 = v35 & 0x7F;
  else
    v36 = *(_QWORD *)(a1 + 376);
  if (v36 != 7)
    goto LABEL_99;
  v37 = *(unsigned __int8 *)(a1 + 391);
  v38 = (const void *)(a1 + 368);
  if ((*(_BYTE *)(a1 + 391) & 0x80) != 0)
  {
    v38 = *v32;
    v37 = *(_QWORD *)(a1 + 376);
  }
  v39 = v37 >= 7 ? 7 : v37;
  if (!memcmp(v38, "octeon+", v39) && v37 == 7)
  {
    v64[0] = "_MIPS_ARCH_OCTEONP";
    v65 = 259;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  }
  else
  {
LABEL_99:
    if (v35 >= 0)
      v40 = (const void *)(a1 + 368);
    else
      v40 = *v32;
    v57[0] = v40;
    v57[1] = v36;
    llvm::StringRef::upper((llvm::StringRef *)v57);
    v41 = std::string::insert(&v58, 0, "_MIPS_ARCH_");
    v42 = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v60 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v65 = 260;
    v64[0] = __p;
    v62[0] = "1";
    v63 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    if (SHIBYTE(v60) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
  }
  v43 = *(_BYTE *)(a1 + 391);
  v44 = v43;
  v45 = v43 & 0x7E;
  if (v44 < 0)
    v45 = *(_QWORD *)(a1 + 376);
  if (v45 >= 6)
  {
    v46 = v44 >= 0 ? a1 + 368 : (uint64_t)*v32;
    v47 = *(_DWORD *)v46;
    v48 = *(unsigned __int16 *)(v46 + 4);
    if (v47 == 1702126447 && v48 == 28271)
    {
      v64[0] = "__OCTEON__";
      v65 = 259;
      v62[0] = "1";
      v63 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    }
  }
  v64[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v64[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
  v65 = 259;
  v62[0] = "1";
  v63 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
  v50 = *(unsigned __int8 *)(a1 + 439);
  v51 = *(_QWORD *)(a1 + 424);
  if ((v50 & 0x80u) == 0)
    v52 = v50 & 0x7F;
  else
    v52 = v51;
  if (v52 == 3)
  {
    v53 = v50;
    v54 = v7;
    if ((v50 & 0x80) != 0)
    {
      v54 = *v7;
      v53 = v51;
    }
    if (v53 >= 3)
      v55 = 3;
    else
      v55 = v53;
    if (!memcmp(v54, "n32", v55) && v53 == 3
      || ((v50 & 0x80) != 0 ? (v7 = (const void **)*v7) : (const void **)(v51 = v50),
          v51 >= 3 ? (v56 = 3) : (v56 = v51),
          !memcmp(v7, "n64", v56) && v51 == 3))
    {
      v64[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
      v65 = 259;
      v62[0] = "1";
      v63 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v64, (llvm::Twine *)v62);
    }
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

uint64_t sub_22F1F9E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v3;
  int v4;
  BOOL v6;
  _BOOL4 v7;

  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1936746861)
    {
      v3 = 1;
      goto LABEL_22;
    }
    if (*(_DWORD *)a2 == 875982950)
    {
      v3 = *(_DWORD *)(a1 + 412) == 2;
LABEL_22:
      v7 = 1;
      return v3 & v7;
    }
    goto LABEL_20;
  }
  v4 = *(_DWORD *)(a1 + 404);
  if (a3 == 5)
  {
    v7 = *(_DWORD *)a2 == 1919972196 && *(_BYTE *)(a2 + 4) == 50;
    v3 = v4 > 1 && v7;
  }
  else
  {
    if (a3 != 3)
    {
LABEL_20:
      v3 = 0;
      v7 = 0;
      return v3 & v7;
    }
    v3 = v4 > 0;
    if (*(_WORD *)a2 == 29540 && *(_BYTE *)(a2 + 2) == 112)
      goto LABEL_22;
    v3 = *(_BYTE *)(a1 + 408) != 0;
    v6 = *(_WORD *)a2 == 29549 && *(_BYTE *)(a2 + 2) == 97;
    v7 = v6;
    if (!v6)
      v3 = 0;
  }
  return v3 & v7;
}

uint64_t sub_22F1F9F04(uint64_t a1)
{
  unsigned __int16 *v1;
  char v2;
  BOOL v3;
  uint64_t v4;
  int v7;
  int v8;

  v1 = (unsigned __int16 *)(a1 + 416);
  v2 = *(_BYTE *)(a1 + 439);
  v3 = v2 < 0;
  if (v2 < 0)
    v1 = *(unsigned __int16 **)(a1 + 416);
  v4 = v2 & 0x7F;
  if (v3)
    v4 = *(_QWORD *)(a1 + 424);
  if (v4 != 3)
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  if (*v1 == 13167 && *((_BYTE *)v1 + 2) == 50)
    return 32;
  if (*v1 != 13166 || *((_BYTE *)v1 + 2) != 50)
  {
    v7 = *v1;
    v8 = *((unsigned __int8 *)v1 + 2);
    if (v7 != 13934 || v8 != 52)
      return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  }
  return 64;
}

uint64_t sub_22F1F9F9C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void **v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  BOOL v12;
  size_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  BOOL v25;
  char v26;
  const void **v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  size_t v33;
  unint64_t v34;
  const void *v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  size_t v39;
  unint64_t v40;
  const void *v41;
  size_t v42;
  int v43;
  unint64_t v44;
  const void *v45;
  size_t v46;
  unint64_t v47;
  const void *v48;
  size_t v49;
  unint64_t v50;
  const void *v51;
  size_t v52;
  unint64_t v53;
  size_t v54;
  unint64_t v55;
  const void *v56;
  size_t v57;
  unsigned int v58;
  uint64_t result;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  BOOL v74;
  void *v75;
  size_t v76;
  size_t v77;
  char v78;
  BOOL v79;
  void *v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  BOOL v89;
  void *v90;
  size_t v91;
  size_t v92;
  size_t v93;
  size_t v94;
  int v95;
  size_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  unint64_t v103;
  size_t v104;
  int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  unsigned __int8 *v111;
  const char *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;

  v4 = *(_DWORD *)(a1 + 56) & 0xFFFFFFFE;
  if (v4 == 18 && *(_BYTE *)(a1 + 393))
  {
    v5 = *(unsigned __int8 *)(a1 + 439);
    v6 = *(_QWORD *)(a1 + 424);
    v7 = (v5 & 0x80u) == 0 ? v5 & 0x7F : *(_QWORD *)(a1 + 424);
    if (v7 == 3)
    {
      v8 = (const void **)(a1 + 416);
      v9 = *(unsigned __int8 *)(a1 + 439);
      v10 = (const void *)(a1 + 416);
      if ((v5 & 0x80) != 0)
      {
        v10 = *v8;
        v9 = *(_QWORD *)(a1 + 424);
      }
      v11 = v9 >= 3 ? 3 : v9;
      v12 = !memcmp(v10, "n32", v11) && v9 == 3;
      if (v12
        || ((v5 & 0x80) != 0 ? (v8 = (const void **)*v8) : (const void **)(v6 = v5),
            v6 >= 3 ? (v13 = 3) : (v13 = v6),
            !memcmp(v8, "n64", v13) && v6 == 3))
      {
        *(_QWORD *)(a2 + 312) = 0x4600000000;
        if (*(char *)(a2 + 311) < 0)
        {
          **(_BYTE **)(a2 + 288) = 0;
          *(_QWORD *)(a2 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 288) = 0;
          *(_BYTE *)(a2 + 311) = 0;
        }
        v123 = (unsigned __int8 *)(a2 + 320);
        v124 = 0;
        v125 = a2;
        v126 = 1;
        *(_BYTE *)(a2 + 320) = 0;
        *(_DWORD *)(a2 + 664) = 0;
        v64 = *(unsigned int *)(a2 + 776);
        if ((_DWORD)v64)
        {
          v65 = *(_QWORD *)(a2 + 768);
          v66 = 56 * v64;
          do
          {
            if (*(char *)(v65 + v66 - 9) < 0)
              operator delete(*(void **)(v65 + v66 - 32));
            v66 -= 56;
          }
          while (v66);
        }
        *(_DWORD *)(a2 + 776) = 0;
        v67 = *(_BYTE *)(a1 + 391);
        if (v67 >= 0)
          v68 = (void *)(a1 + 368);
        else
          v68 = *(void **)(a1 + 368);
        if (v67 >= 0)
          v69 = v67 & 0x7F;
        else
          v69 = *(_QWORD *)(a1 + 376);
        goto LABEL_219;
      }
    }
  }
  v14 = *(unsigned __int8 *)(a1 + 391);
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)(a1 + 368);
  else
    v15 = *(unsigned __int8 **)(a1 + 368);
  if ((v14 & 0x80u) == 0)
    v16 = v14 & 0x7F;
  else
    v16 = *(_QWORD *)(a1 + 376);
  v122 = v16;
  v121 = *(_QWORD *)(a1 + 376);
  switch(v16)
  {
    case 5uLL:
      if (*(_DWORD *)v15 == 1936746861 && v15[4] == 51)
        goto LABEL_58;
      if (*(_DWORD *)v15 == 1936746861 && v15[4] == 52)
        goto LABEL_58;
      v19 = *(_DWORD *)v15 ^ 0x7370696D;
      v20 = v15[4];
      v21 = 53;
      goto LABEL_46;
    case 6uLL:
      v24 = *(_DWORD *)v15 ^ 0x7370696D | *((unsigned __int16 *)v15 + 2) ^ 0x3436;
      v23 = v24 == 0;
      if (v24)
      {
        v25 = (*(_DWORD *)v15 ^ 0x6574636F | *((unsigned __int16 *)v15 + 2) ^ 0x6E6F) == 0;
        v23 = v25;
        goto LABEL_50;
      }
      v22 = 1;
      break;
    case 7uLL:
      v19 = *(_DWORD *)v15 ^ 0x6574636F;
      v20 = *(_DWORD *)(v15 + 3);
      v21 = 728657765;
LABEL_46:
      v25 = (v19 | v20 ^ v21) == 0;
      goto LABEL_47;
    case 8uLL:
      if (*(_QWORD *)v15 == 0x327234367370696DLL
        || *(_QWORD *)v15 == 0x337234367370696DLL
        || *(_QWORD *)v15 == 0x357234367370696DLL)
      {
LABEL_58:
        v22 = 1;
        v23 = 1;
      }
      else
      {
        v25 = *(_QWORD *)v15 == 0x367234367370696DLL;
LABEL_47:
        v23 = v25;
LABEL_50:
        v26 = v25;
        v22 = v26 & 1;
      }
      break;
    default:
      v22 = 0;
      v23 = 0;
      break;
  }
  v27 = (const void **)(a1 + 416);
  v28 = *(unsigned __int8 *)(a1 + 439);
  v29 = *(_QWORD *)(a1 + 424);
  if ((v28 & 0x80u) == 0)
    v30 = v28 & 0x7F;
  else
    v30 = *(_QWORD *)(a1 + 424);
  if (v23 && v22)
  {
    if (v30 == 3)
    {
      v31 = *(unsigned __int8 *)(a1 + 439);
      v32 = (const void *)(a1 + 416);
      if ((v28 & 0x80) != 0)
      {
        v32 = *v27;
        v31 = *(_QWORD *)(a1 + 424);
      }
      v33 = v31 >= 3 ? 3 : v31;
      if (!memcmp(v32, "o32", v33) && v31 == 3)
      {
        *(_QWORD *)(a2 + 312) = 0x4400000000;
        if (*(char *)(a2 + 311) < 0)
        {
          **(_BYTE **)(a2 + 288) = 0;
          *(_QWORD *)(a2 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 288) = 0;
          *(_BYTE *)(a2 + 311) = 0;
        }
        v60 = (void *)(a1 + 368);
        v123 = (unsigned __int8 *)(a2 + 320);
        v124 = 0;
        v125 = a2;
        v126 = 1;
        *(_BYTE *)(a2 + 320) = 0;
        *(_DWORD *)(a2 + 664) = 0;
        v70 = *(unsigned int *)(a2 + 776);
        if ((_DWORD)v70)
        {
          v71 = *(_QWORD *)(a2 + 768);
          v72 = 56 * v70;
          do
          {
            if (*(char *)(v71 + v72 - 9) < 0)
              operator delete(*(void **)(v71 + v72 - 32));
            v72 -= 56;
          }
          while (v72);
        }
LABEL_186:
        *(_DWORD *)(a2 + 776) = 0;
        v73 = *(_BYTE *)(a1 + 439);
        v74 = v73 < 0;
        if (v73 >= 0)
          v75 = (void *)(a1 + 416);
        else
          v75 = *(void **)(a1 + 416);
        v76 = v73 & 0x7F;
        if (v74)
          v77 = *(_QWORD *)(a1 + 424);
        else
          v77 = v76;
        sub_22E3B89A8(&v123, v75, v77);
        v78 = *(_BYTE *)(a1 + 391);
        v79 = v78 < 0;
        v80 = *(void **)(a1 + 368);
        v81 = *(_QWORD *)(a1 + 376);
LABEL_213:
        if (v79)
          v68 = v80;
        else
          v68 = v60;
LABEL_216:
        v93 = v78 & 0x7F;
        if (v79)
          v69 = v81;
        else
          v69 = v93;
LABEL_219:
        sub_22E3B89A8(&v123, v68, v69);
LABEL_220:
        sub_22E3BB0B8((uint64_t)&v123);
        return 0;
      }
    }
  }
  else if (v30 == 3)
  {
    v47 = *(unsigned __int8 *)(a1 + 439);
    v48 = (const void *)(a1 + 416);
    if ((v28 & 0x80) != 0)
    {
      v48 = *v27;
      v47 = *(_QWORD *)(a1 + 424);
    }
    v49 = v47 >= 3 ? 3 : v47;
    if (!memcmp(v48, "n32", v49) && v47 == 3)
      goto LABEL_131;
    v50 = v28;
    v51 = (const void *)(a1 + 416);
    if ((v28 & 0x80) != 0)
    {
      v51 = *v27;
      v50 = v29;
    }
    v52 = v50 >= 3 ? 3 : v50;
    if (!memcmp(v51, "n64", v52) && v50 == 3)
    {
LABEL_131:
      *(_QWORD *)(a2 + 312) = 0x4400000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v60 = (void *)(a1 + 368);
      v123 = (unsigned __int8 *)(a2 + 320);
      v124 = 0;
      v125 = a2;
      v126 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v61 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v61)
      {
        v62 = *(_QWORD *)(a2 + 768);
        v63 = 56 * v61;
        do
        {
          if (*(char *)(v62 + v63 - 9) < 0)
            operator delete(*(void **)(v62 + v63 - 32));
          v63 -= 56;
        }
        while (v63);
      }
      goto LABEL_186;
    }
  }
  if (v4 == 18)
  {
    if (v30 == 3)
    {
      v34 = v28;
      v35 = (const void *)(a1 + 416);
      if ((v28 & 0x80) != 0)
      {
        v35 = *v27;
        v34 = v29;
      }
      v36 = v34 >= 3 ? 3 : v34;
      if (!memcmp(v35, "o32", v36) && v34 == 3)
      {
        *(_QWORD *)(a2 + 312) = 0x4500000000;
        if (*(char *)(a2 + 311) < 0)
        {
          **(_BYTE **)(a2 + 288) = 0;
          *(_QWORD *)(a2 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 288) = 0;
          *(_BYTE *)(a2 + 311) = 0;
        }
        v60 = (void *)(a1 + 32);
        v123 = (unsigned __int8 *)(a2 + 320);
        v124 = 0;
        v125 = a2;
        v126 = 1;
        *(_BYTE *)(a2 + 320) = 0;
        *(_DWORD *)(a2 + 664) = 0;
        v85 = *(unsigned int *)(a2 + 776);
        if ((_DWORD)v85)
        {
          v86 = *(_QWORD *)(a2 + 768);
          v87 = 56 * v85;
          do
          {
            if (*(char *)(v86 + v87 - 9) < 0)
              operator delete(*(void **)(v86 + v87 - 32));
            v87 -= 56;
          }
          while (v87);
        }
LABEL_206:
        *(_DWORD *)(a2 + 776) = 0;
        v88 = *(_BYTE *)(a1 + 439);
        v89 = v88 < 0;
        if (v88 >= 0)
          v90 = (void *)(a1 + 416);
        else
          v90 = *(void **)(a1 + 416);
        v91 = v88 & 0x7F;
        if (v89)
          v92 = *(_QWORD *)(a1 + 424);
        else
          v92 = v91;
        sub_22E3B89A8(&v123, v90, v92);
        v78 = *(_BYTE *)(a1 + 55);
        v79 = v78 < 0;
        v80 = *(void **)(a1 + 32);
        v81 = *(_QWORD *)(a1 + 40);
        goto LABEL_213;
      }
    }
  }
  else if (v4 == 16 && v30 == 3)
  {
    v37 = v28;
    v38 = (const void *)(a1 + 416);
    if ((v28 & 0x80) != 0)
    {
      v38 = *v27;
      v37 = v29;
    }
    v39 = v37 >= 3 ? 3 : v37;
    if (!memcmp(v38, "n32", v39) && v37 == 3)
      goto LABEL_103;
    v40 = v28;
    v41 = (const void *)(a1 + 416);
    if ((v28 & 0x80) != 0)
    {
      v41 = *v27;
      v40 = v29;
    }
    v42 = v40 >= 3 ? 3 : v40;
    if (!memcmp(v41, "n64", v42) && v40 == 3)
    {
LABEL_103:
      *(_QWORD *)(a2 + 312) = 0x4500000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v60 = (void *)(a1 + 32);
      v123 = (unsigned __int8 *)(a2 + 320);
      v124 = 0;
      v125 = a2;
      v126 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v82 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v82)
      {
        v83 = *(_QWORD *)(a2 + 768);
        v84 = 56 * v82;
        do
        {
          if (*(char *)(v83 + v84 - 9) < 0)
            operator delete(*(void **)(v83 + v84 - 32));
          v84 -= 56;
        }
        while (v84);
      }
      goto LABEL_206;
    }
  }
  v43 = *(_DWORD *)(a1 + 412);
  if (v43 == 2)
  {
    if (v122 == 5
      && ((v14 & 0x80u) == 0 ? (v53 = v14) : (v53 = v121),
          v53 >= 5 ? (v54 = 5) : (v54 = v53),
          !memcmp(v15, "mips1", v54) && v53 == 5 || !memcmp(v15, "mips2", v54) && v53 == 5))
    {
      if (v30 != 3)
        return 1;
    }
    else
    {
      v58 = sub_22F1F8EFC(a1);
      result = 1;
      if (v58 > 1 || v30 != 3)
        return result;
    }
    if ((v28 & 0x80) != 0)
      v27 = (const void **)*v27;
    else
      v29 = v28;
    if (v29 >= 3)
      v94 = 3;
    else
      v94 = v29;
    v95 = memcmp(v27, "o32", v94);
    result = 1;
    if (!v95 && v29 == 3)
    {
      *(_QWORD *)(a2 + 312) = 0x2300000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v113 = (unsigned __int8 *)(a2 + 320);
      v123 = (unsigned __int8 *)(a2 + 320);
      v124 = 0;
      v125 = a2;
      v126 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v114 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v114)
      {
        v115 = *(_QWORD *)(a2 + 768);
        v116 = 56 * v114;
        do
        {
          if (*(char *)(v115 + v116 - 9) < 0)
            operator delete(*(void **)(v115 + v116 - 32));
          v116 -= 56;
        }
        while (v116);
        LODWORD(v114) = *v113;
      }
      *(_DWORD *)(a2 + 776) = 0;
      v113[v114 + 1] = 1;
      *(_BYTE *)(a2 + 320) = v114 + 1;
      *(_QWORD *)&v113[8 * v114 + 16] = "-mfp64";
      goto LABEL_220;
    }
    return result;
  }
  if (v43)
  {
    if (*(_BYTE *)(a1 + 396) || v30 != 3)
      goto LABEL_254;
    v55 = v28;
    v56 = (const void *)(a1 + 416);
    if ((v28 & 0x80) != 0)
    {
      v56 = *v27;
      v55 = v29;
    }
    v57 = v55 >= 3 ? 3 : v55;
    if (!memcmp(v56, "n32", v57) && v55 == 3
      || ((v28 & 0x80) != 0 ? (v27 = (const void **)*v27) : (const void **)(v29 = v28),
          v29 >= 3 ? (v102 = 3) : (v102 = v29),
          !memcmp(v27, "n64", v102) && v29 == 3))
    {
      *(_QWORD *)(a2 + 312) = 0x3800000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v106 = (unsigned __int8 *)(a2 + 320);
      v123 = (unsigned __int8 *)(a2 + 320);
      v124 = 0;
      v125 = a2;
      v126 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v107 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v107)
      {
        v108 = *(_QWORD *)(a2 + 768);
        v109 = 56 * v107;
        do
        {
          if (*(char *)(v108 + v109 - 9) < 0)
            operator delete(*(void **)(v108 + v109 - 32));
          v109 -= 56;
        }
        while (v109);
        LODWORD(v107) = *v106;
      }
      v110 = (void *)(a1 + 368);
      *(_DWORD *)(a2 + 776) = 0;
      v106[v107 + 1] = 1;
      *(_BYTE *)(a2 + 320) = v107 + 1;
      v111 = &v106[8 * v107];
      v112 = "-mfpxx";
    }
    else
    {
LABEL_254:
      if (v122 != 8)
        return 1;
      if ((v14 & 0x80u) == 0)
        v103 = v14;
      else
        v103 = v121;
      if (v103 >= 8)
        v104 = 8;
      else
        v104 = v103;
      if (memcmp(v15, "mips32r6", v104) || v103 != 8)
      {
        v105 = memcmp(v15, "mips64r6", v104);
        result = 1;
        if (v105 || v103 != 8)
          return result;
      }
      *(_QWORD *)(a2 + 312) = 0x3800000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v117 = (unsigned __int8 *)(a2 + 320);
      v123 = (unsigned __int8 *)(a2 + 320);
      v124 = 0;
      v125 = a2;
      v126 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v118 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v118)
      {
        v119 = *(_QWORD *)(a2 + 768);
        v120 = 56 * v118;
        do
        {
          if (*(char *)(v119 + v120 - 9) < 0)
            operator delete(*(void **)(v119 + v120 - 32));
          v120 -= 56;
        }
        while (v120);
        LODWORD(v118) = *v117;
      }
      v110 = (void *)(a1 + 368);
      *(_DWORD *)(a2 + 776) = 0;
      v117[v118 + 1] = 1;
      *(_BYTE *)(a2 + 320) = v118 + 1;
      v111 = &v117[8 * v118];
      v112 = "-mfp32";
    }
    *((_QWORD *)v111 + 2) = v112;
    v78 = *(_BYTE *)(a1 + 391);
    v79 = v78 < 0;
    v81 = *(_QWORD *)(a1 + 376);
    if (v78 >= 0)
      v68 = v110;
    else
      v68 = *(void **)(a1 + 368);
    goto LABEL_216;
  }
  if (v30 != 3)
    return 1;
  v44 = v28;
  v45 = v27;
  if ((v28 & 0x80) != 0)
  {
    v45 = *v27;
    v44 = v29;
  }
  if (v44 >= 3)
    v46 = 3;
  else
    v46 = v44;
  if (!memcmp(v45, "n32", v46) && v44 == 3
    || ((v28 & 0x80) != 0 ? (v27 = (const void **)*v27) : (const void **)(v29 = v28),
        v29 >= 3 ? (v96 = 3) : (v96 = v29),
        (v97 = memcmp(v27, "n64", v96), result = 1, !v97) && v29 == 3))
  {
    *(_QWORD *)(a2 + 312) = 0x5100000000;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    v123 = (unsigned __int8 *)(a2 + 320);
    v124 = 0;
    v125 = a2;
    v126 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v98 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v98)
    {
      v99 = *(_QWORD *)(a2 + 768);
      v100 = 56 * v98;
      do
      {
        if (*(char *)(v99 + v100 - 9) < 0)
          operator delete(*(void **)(v99 + v100 - 32));
        v100 -= 56;
      }
      while (v100);
      LODWORD(v98) = *(unsigned __int8 *)(a2 + 320);
    }
    *(_DWORD *)(a2 + 776) = 0;
    *(_BYTE *)(a2 + 321 + v98) = 1;
    *(_QWORD *)(a2 + 336 + 8 * v98) = "-mfpxx";
    v101 = (v98 + 1);
    *(_BYTE *)(a2 + 321 + v101) = 1;
    *(_BYTE *)(a2 + 320) = v98 + 2;
    *(_QWORD *)(a2 + 336 + 8 * v101) = "o32";
    goto LABEL_220;
  }
  return result;
}

uint64_t sub_22F1FAC48(uint64_t a1, llvm::Triple *this, uint64_t a3, int a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  char v10;
  BOOL v11;
  uint64_t *v12;
  unint64_t v13;
  int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  size_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD v53[4];
  __int16 v54;
  void *__p[2];
  char v56;
  __int16 v57;
  void *v58;
  char v59;
  int v60;

  v7 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC57A80, this);
  *v7 = (uint64_t)&off_24FC576E8;
  v7[47] = 0;
  *((_DWORD *)v7 + 92) = 32;
  v8 = *(uint64_t **)(a3 + 176);
  for (i = *(uint64_t **)(a3 + 184); v8 != i; v8 += 3)
  {
    v10 = *((_BYTE *)v8 + 23);
    v11 = v10 < 0;
    v12 = (uint64_t *)*v8;
    if (v10 >= 0)
      v12 = v8;
    v13 = v10 & 0x7F;
    if (v11)
      v13 = v8[1];
    if (v13 >= 4 && *(_DWORD *)v12 == 2020896811)
    {
      if (v13 == 6)
      {
        if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13623)
        {
          v29 = 75;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13367)
        {
          v29 = 74;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13111)
        {
          v29 = 73;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12855)
        {
          v29 = 72;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12599)
        {
          v29 = 71;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12343)
        {
          v29 = 70;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13622)
        {
          v29 = 65;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13366)
        {
          v29 = 64;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13110)
        {
          v29 = 63;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12598)
        {
          v29 = 61;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12342)
        {
          v29 = 60;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12341)
        {
          v29 = 50;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 13108)
        {
          v29 = 43;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12852)
        {
          v29 = 42;
        }
        else if (*(_DWORD *)v12 == 2020896811 && *((_WORD *)v12 + 2) == 12596)
        {
          v29 = 41;
        }
        else if (*(_DWORD *)v12 ^ 0x7874702B | *((unsigned __int16 *)v12 + 2) ^ 0x3034)
        {
          v29 = 32;
        }
        else
        {
          v29 = 40;
        }
      }
      else
      {
        v29 = 32;
      }
      *(_DWORD *)(a1 + 368) = v29;
    }
  }
  *(_WORD *)(a1 + 81) = 0;
  *(_QWORD *)(a1 + 152) = &unk_22F54A704;
  *(_BYTE *)(a1 + 360) = 1;
  *(_BYTE *)(a1 + 83) = 1;
  *(_DWORD *)(a1 + 364) = 2;
  v30 = 68;
  if (!*(_BYTE *)(a3 + 313))
    v30 = 41;
  v31 = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64";
  if (!*(_BYTE *)(a3 + 313))
    v31 = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64";
  if (a4 == 32)
    v32 = "e-p:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64";
  else
    v32 = (char *)v31;
  if (a4 == 32)
    v33 = 49;
  else
    v33 = v30;
  v34 = sub_22F1E6F0C(a1, v32, v33, (uint64_t)"");
  v57 = 260;
  __p[0] = (void *)(a3 + 24);
  MEMORY[0x23489F1BC](&v58, __p, v34);
  if ((v60 & 0xFFFFFFFE) != 0x2C)
  {
    v54 = 260;
    v53[0] = a3 + 24;
    MEMORY[0x23489F1BC](__p, v53);
    v35 = sub_22F1E87E4(__p, a3);
    v36 = *(_QWORD *)(a1 + 376);
    *(_QWORD *)(a1 + 376) = v35;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (v56 < 0)
      operator delete(__p[0]);
  }
  v37 = *(_QWORD **)(a1 + 376);
  if (v37)
  {
    v38 = *v37;
    v39 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) = *((_BYTE *)v37 + *(_QWORD *)(*v37 - 24));
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 1) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 1);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 2) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 2);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 3) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 3);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 4) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 4);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 5) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 5);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 6) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 6);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 7) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 7);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 10) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 10);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 11) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 11);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 12) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 12);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 13) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 13);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 20) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 20);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 21) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 21);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 22) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 22);
    *(_BYTE *)(a1 + *(_QWORD *)(v39 - 24) + 23) = *((_BYTE *)v37 + *(_QWORD *)(v38 - 24) + 23);
    v40 = (*(uint64_t (**)(_QWORD *, _QWORD))(v38 + 152))(v37, 0);
    v41 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 41) = v40;
    v42 = *(_QWORD **)(a1 + 376);
    v43 = *v42;
    v44 = (char *)v42 + *(_QWORD *)(*v42 - 24);
    LOWORD(v45) = *((_WORD *)v44 + 22);
    if (!(_WORD)v45)
    {
      v45 = v44[15];
      v46 = v44[23];
      if (v45 <= v46)
        LOWORD(v45) = v46;
    }
    *(_WORD *)(a1 + *(_QWORD *)(v41 - 24) + 44) = v45;
    *(_BYTE *)(a1 + *(_QWORD *)(v41 - 24) + 40) = *((_BYTE *)v42 + *(_QWORD *)(v43 - 24) + 40);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 112) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 112);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 116) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 116);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 120) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 120);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 124) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 124);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 128) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 128);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 132) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 132);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 136) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 136);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 140) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 140);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 144) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 144);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 152) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 152);
    *(_DWORD *)(a1 + *(_QWORD *)(v41 - 24) + 156) = *(_DWORD *)((char *)v42 + *(_QWORD *)(v43 - 24) + 156);
    *(_BYTE *)(a1 + *(_QWORD *)(v41 - 24) + 160) = *(_BYTE *)(a1 + *(_QWORD *)(v41 - 24) + 160) & 0xFD | *((_BYTE *)v42 + *(_QWORD *)(v43 - 24) + 160) & 2;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160) = *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160) & 0xFB | *(_BYTE *)(*(_QWORD *)(a1 + 376) + *(_QWORD *)(**(_QWORD **)(a1 + 376) - 24) + 160) & 4;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160) = *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160) & 0xEF | *(_BYTE *)(*(_QWORD *)(a1 + 376) + *(_QWORD *)(**(_QWORD **)(a1 + 376) - 24) + 160) & 0x10;
    v47 = *(_QWORD *)(a1 + 376);
    *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 164) = *(_DWORD *)(v47
                                                                          + *(_QWORD *)(*(_QWORD *)v47 - 24)
                                                                          + 164);
    *(_BYTE *)(a1 + 95) = *(_BYTE *)(v47 + 95);
  }
  else
  {
    v48 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 21) = a4;
    *(_BYTE *)(a1 + *(_QWORD *)(v48 - 24) + 20) = a4;
    *(_BYTE *)(a1 + *(_QWORD *)(v48 - 24) + 1) = a4;
    *(_BYTE *)(a1 + *(_QWORD *)(v48 - 24)) = a4;
    v49 = a1 + *(_QWORD *)(v48 - 24);
    if (a4 == 32)
    {
      *(_DWORD *)(v49 + 112) = 6;
      v50 = a1 + *(_QWORD *)(v48 - 24);
      v51 = 5;
    }
    else
    {
      *(_DWORD *)(v49 + 112) = 8;
      v50 = a1 + *(_QWORD *)(v48 - 24);
      v51 = 7;
    }
    *(_DWORD *)(v50 + 120) = v51;
    *(_DWORD *)(a1 + *(_QWORD *)(v48 - 24) + 124) = v51;
  }
  if (v59 < 0)
    operator delete(v58);
  return a1;
}

BOOL sub_22F1FB458(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v3;
  int v4;
  _BOOL4 v5;
  BOOL v6;

  if (a3 == 5)
  {
    v3 = *(_DWORD *)a2 ^ 0x7470766E;
    v4 = *((unsigned __int8 *)a2 + 4);
LABEL_5:
    v6 = (v3 | v4 ^ 0x78) == 0;
    v5 = v6;
    LOBYTE(v4) = v6;
    goto LABEL_9;
  }
  if (a3 == 3)
  {
    v3 = *a2 ^ 0x7470;
    v4 = *((unsigned __int8 *)a2 + 2);
    goto LABEL_5;
  }
  v4 = 0;
  v5 = 0;
LABEL_9:
  v6 = !v5 || v4 == 0;
  return !v6;
}

void sub_22F1FB4C8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *__dst[2];
  unint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;

  v16[0] = "__PTX__";
  v17 = 259;
  v14[0] = "1";
  v15 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v16, (llvm::Twine *)v14);
  v16[0] = "__NVPTX__";
  v17 = 259;
  v14[0] = "1";
  v15 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v16, (llvm::Twine *)v14);
  if ((*(_WORD *)(a2 + 96) & 0x80) != 0)
  {
    v6 = (const char *)*((_QWORD *)&off_24FC57E30 + *(int *)(a1 + 364));
    v7 = strlen(v6);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      v13 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v13) = v7;
      v9 = __dst;
      if (!v7)
      {
LABEL_10:
        *((_BYTE *)v8 + (_QWORD)v9) = 0;
        v16[0] = "__CUDA_ARCH__";
        v17 = 259;
        v15 = 260;
        v14[0] = __dst;
        sub_22E7333BC(a3, (llvm::Twine *)v16, (llvm::Twine *)v14);
        if (SHIBYTE(v13) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v9, v6, (size_t)v8);
    goto LABEL_10;
  }
}

uint64_t sub_22F1FB634(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 **a6)
{
  uint64_t v12;
  const char *v13;
  size_t v14;
  std::string *v15;
  std::string::size_type v16;
  void **v17;
  size_t v18;
  std::string v20;
  void *__p[2];
  uint64_t v22;

  v12 = 0;
  v13 = "unknown";
  while (dword_24FAE07C0[v12] != *(_DWORD *)(a1 + 364))
  {
    v12 += 6;
    if (v12 == 318)
      goto LABEL_7;
  }
  v13 = *(const char **)&dword_24FAE07C0[v12 + 2];
  if (!v13)
  {
    v14 = 0;
    goto LABEL_8;
  }
LABEL_7:
  v14 = strlen(v13);
LABEL_8:
  *(_BYTE *)(*sub_22E80ABE0(a2, v13, v14) + 8) = 1;
  std::to_string(&v20, *(_DWORD *)(a1 + 368));
  v15 = std::string::insert(&v20, 0, "ptx");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v22 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if (v22 >= 0)
    v18 = HIBYTE(v22) & 0x7F;
  else
    v18 = (size_t)__p[1];
  *(_BYTE *)(*sub_22E80ABE0(a2, v17, v18) + 8) = 1;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return sub_22F424A84(a1, (uint64_t)a2, a3, a4, a5, a6);
}

double sub_22F1FB794(llvm::raw_ostream **a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, const char **a6, _OWORD *a7, _QWORD *a8, uint64_t *a9)
{
  unint64_t v17;
  char *v18;
  BOOL v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *OSTypeName;
  const char *v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unsigned int v36;
  char v37;
  char v38;
  char v39;
  unsigned int v40;
  char v41;
  char v42;
  char v43;
  char v44;
  unsigned int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  unsigned int v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  const char *v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  double result;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  void *v76[2];
  char v77;
  __int16 v78;
  int v79;
  int v80;
  void *__p[2];
  char v82;
  __int128 v83;
  char v84;
  char v85[11];
  __int16 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v76[0] = "__APPLE_CC__";
  v78 = 259;
  *(_QWORD *)&v83 = "6000";
  v86 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  v76[0] = "__APPLE__";
  v78 = 259;
  *(_QWORD *)&v83 = "1";
  v86 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  v76[0] = "__STDC_NO_THREADS__";
  v78 = 259;
  *(_QWORD *)&v83 = "1";
  v86 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  if ((*(_BYTE *)(a2 + 256) & 1) != 0)
  {
    v76[0] = "_FORTIFY_SOURCE";
    v78 = 259;
    *(_QWORD *)&v83 = "0";
    v86 = 259;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  }
  if ((*(_QWORD *)(a2 + 8) & 0x4000000000000000) != 0)
  {
    v76[0] = "__PTRAUTH_INTRINSICS__";
    v78 = 259;
    *(_QWORD *)&v83 = "1";
    v86 = 259;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  }
  v17 = *(_QWORD *)(a2 + 20);
  if ((v17 & 0x200000000) != 0)
  {
    v76[0] = "__ptrauth_abi_version__";
    v78 = 259;
    v17 = v17;
    if ((_DWORD)v17)
    {
      v18 = v85;
      do
      {
        *--v18 = (v17 % 0xA) | 0x30;
        v19 = v17 > 9;
        v17 /= 0xAuLL;
      }
      while (v19);
    }
    else
    {
      v18 = &v84;
      v84 = 48;
    }
    sub_22E3B4274(__p, v18, v85, v85 - v18);
    v86 = 260;
    *(_QWORD *)&v83 = __p;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
    if (v82 < 0)
      operator delete(__p[0]);
  }
  if ((*(_BYTE *)(a2 + 1) & 0x40) == 0)
  {
    v76[0] = "__weak";
    v78 = 259;
    *(_QWORD *)&v83 = "__attribute__((objc_gc(weak)))";
    v86 = 259;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
    v76[0] = "__strong";
    v78 = 259;
    v86 = 257;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
    v76[0] = "__unsafe_unretained";
    v78 = 259;
    v86 = 257;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  }
  if ((*(_BYTE *)(a2 + 28) & 0x20) != 0)
    v20 = "__STATIC__";
  else
    v20 = "__DYNAMIC__";
  v76[0] = (void *)v20;
  v78 = 259;
  *(_QWORD *)&v83 = "1";
  v86 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v76[0] = "_REENTRANT";
    v78 = 259;
    *(_QWORD *)&v83 = "1";
    v86 = 259;
    sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
  }
  __p[0] = 0;
  __p[1] = 0;
  if ((a3[9] & 0xFFFFFFF7) == 3)
  {
    llvm::Triple::getMacOSXVersion((llvm::Triple *)a3, (llvm::VersionTuple *)__p);
    *a6 = "macos";
    a6[1] = (const char *)5;
    if (!a5)
      goto LABEL_40;
    v86 = 261;
    *(_QWORD *)&v83 = a4;
    *((_QWORD *)&v83 + 1) = a5;
    MEMORY[0x23489F1BC](v76, &v83);
    if (v79 == 7 && v80 == 21)
    {
      *a8 = "maccatalyst";
      a8[1] = 11;
      *a9 = llvm::Triple::getiOSVersion((llvm::Triple *)v76);
      a9[1] = v21;
    }
  }
  else
  {
    __p[0] = (void *)llvm::Triple::getOSVersion((llvm::Triple *)a3);
    __p[1] = v22;
    OSTypeName = (const char *)llvm::Triple::getOSTypeName((llvm::Triple *)a3[9]);
    *a6 = OSTypeName;
    a6[1] = v24;
    if (v24 != (const char *)11)
    {
      if (v24 != (const char *)3)
        goto LABEL_40;
      v25 = *(_WORD *)OSTypeName == 28521 && OSTypeName[2] == 115;
      if (!v25 || a3[10] != 21)
        goto LABEL_40;
      OSTypeName = "maccatalyst";
      *a6 = "maccatalyst";
      a6[1] = (const char *)11;
    }
    if (*(_QWORD *)OSTypeName ^ 0x6C6174616363616DLL | *(_QWORD *)(OSTypeName + 3) ^ 0x7473796C61746163 || !a5)
      goto LABEL_40;
    v86 = 261;
    *(_QWORD *)&v83 = a4;
    *((_QWORD *)&v83 + 1) = a5;
    MEMORY[0x23489F1BC](v76, &v83);
    if ((v79 & 0xFFFFFFF7) == 3)
    {
      *a8 = "macos";
      a8[1] = 5;
      v83 = 0uLL;
      llvm::Triple::getMacOSXVersion((llvm::Triple *)v76, (llvm::VersionTuple *)&v83);
      *(_OWORD *)a9 = v83;
    }
  }
  if (v77 < 0)
    operator delete(v76[0]);
LABEL_40:
  if (a6[1] != (const char *)5 || (*(_DWORD *)*a6 == 862873975 ? (v26 = (*a6)[4] == 50) : (v26 = 0), !v26))
  {
    v27 = a3[9];
    switch(v27)
    {
      case 0x1Cu:
        goto LABEL_59;
      case 0x1Du:
        LOBYTE(v28) = __p[0];
        if (LODWORD(__p[0]) > 9)
        {
          v30 = (LODWORD(__p[0]) % 0xA) | 0x30;
          if ((uint64_t)__p[0] < 0)
            v31 = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2) + 48;
          else
            v31 = 48;
          v32 = (BYTE4(__p[0])
               - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
          if ((uint64_t)__p[0] >= 0)
            v32 = 48;
          if (((uint64_t)__p[1] & 0x80000000) != 0)
            v33 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
          else
            v33 = 48;
          v29 = (LOBYTE(__p[1])
               - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
          if (((uint64_t)__p[1] & 0x80000000) == 0)
            v29 = 48;
          v75 = 0;
          v28 = LODWORD(__p[0]) / 0xA;
        }
        else
        {
          v29 = 0;
          if ((uint64_t)__p[0] < 0)
            LOBYTE(v30) = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2)
                        + 48;
          else
            LOBYTE(v30) = 48;
          v31 = (BYTE4(__p[0])
               - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
          if ((uint64_t)__p[0] >= 0)
            v31 = 48;
          if (((uint64_t)__p[1] & 0x80000000) != 0)
            v32 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
          else
            v32 = 48;
          v33 = (LOBYTE(__p[1])
               - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
          if (((uint64_t)__p[1] & 0x80000000) == 0)
            v33 = 48;
        }
        v66 = v28 + 48;
        v69 = v28 + 48;
        v70 = v30;
        v71 = v31;
        v72 = v32;
        v73 = v33;
        v74 = v29;
        v76[0] = "__ENVIRONMENT_WATCH_OS_VERSION_MIN_REQUIRED__";
        v78 = 259;
        v44 = 1;
        HIBYTE(v86) = 1;
        if (!v66)
          goto LABEL_121;
        goto LABEL_120;
      case 0x1Eu:
        v69 = LOBYTE(__p[0]) + 48;
        v40 = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2) + 48;
        if ((uint64_t)__p[0] >= 0)
          LOBYTE(v40) = 48;
        v70 = v40;
        v41 = (BYTE4(__p[0])
             - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
        if ((uint64_t)__p[0] >= 0)
          v41 = 48;
        v71 = v41;
        if (((uint64_t)__p[1] & 0x80000000) != 0)
          v42 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
        else
          v42 = 48;
        v72 = v42;
        v43 = (LOBYTE(__p[1])
             - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
        if (((uint64_t)__p[1] & 0x80000000) == 0)
          v43 = 48;
        v73 = v43;
        v74 = 0;
        v76[0] = "__ENVIRONMENT_BRIDGE_OS_VERSION_MIN_REQUIRED__";
        v78 = 259;
        v44 = 1;
        HIBYTE(v86) = 1;
        if (LOBYTE(__p[0]) == 0xD0)
          goto LABEL_121;
        goto LABEL_120;
      case 0x1Fu:
        v69 = LODWORD(__p[0]) / 0xA + 48;
        v70 = (LODWORD(__p[0]) % 0xA) | 0x30;
        v45 = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2) + 48;
        if ((uint64_t)__p[0] >= 0)
          LOBYTE(v45) = 48;
        v71 = v45;
        v46 = (BYTE4(__p[0])
             - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
        if ((uint64_t)__p[0] >= 0)
          v46 = 48;
        v72 = v46;
        if (((uint64_t)__p[1] & 0x80000000) != 0)
          v47 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
        else
          v47 = 48;
        v73 = v47;
        v48 = (LOBYTE(__p[1])
             - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
        if (((uint64_t)__p[1] & 0x80000000) == 0)
          v48 = 48;
        v74 = v48;
        v75 = 0;
        v76[0] = "__ENVIRONMENT_DRIVERKIT_VERSION_MIN_REQUIRED__";
        v78 = 259;
        v44 = 1;
        HIBYTE(v86) = 1;
        if ((LODWORD(__p[0]) / 0xA) == 0xD0)
          goto LABEL_121;
        goto LABEL_120;
      default:
        if (v27 == 7)
        {
LABEL_59:
          v34 = (char)__p[0];
          if (LODWORD(__p[0]) > 9)
          {
            v36 = (LODWORD(__p[0]) % 0xA) | 0x30;
            if ((uint64_t)__p[0] < 0)
              v37 = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v37 = 48;
            v38 = (BYTE4(__p[0])
                 - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if ((uint64_t)__p[0] >= 0)
              v38 = 48;
            if (((uint64_t)__p[1] & 0x80000000) != 0)
              v39 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v39 = 48;
            v35 = (LOBYTE(__p[1])
                 - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if (((uint64_t)__p[1] & 0x80000000) == 0)
              v35 = 48;
            v75 = 0;
            v34 = LODWORD(__p[0]) / 0xA;
          }
          else
          {
            v35 = 0;
            if ((uint64_t)__p[0] < 0)
              LOBYTE(v36) = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2)
                          + 48;
            else
              LOBYTE(v36) = 48;
            v37 = (BYTE4(__p[0])
                 - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if ((uint64_t)__p[0] >= 0)
              v37 = 48;
            if (((uint64_t)__p[1] & 0x80000000) != 0)
              v38 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v38 = 48;
            v39 = (LOBYTE(__p[1])
                 - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if (((uint64_t)__p[1] & 0x80000000) == 0)
              v39 = 48;
          }
          v55 = v34 + 48;
          v69 = v55;
          v70 = v36;
          v71 = v37;
          v72 = v38;
          v73 = v39;
          v74 = v35;
          if (v27 == 28)
            v56 = "__ENVIRONMENT_TV_OS_VERSION_MIN_REQUIRED__";
          else
            v56 = "__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__";
          v76[0] = (void *)v56;
          v78 = 259;
          v44 = 1;
          HIBYTE(v86) = 1;
          if (v55)
          {
LABEL_120:
            *(_QWORD *)&v83 = &v69;
            v44 = 3;
          }
LABEL_121:
          LOBYTE(v86) = v44;
        }
        else
        {
          if ((v27 & 0xFFFFFFF7) != 3)
            goto LABEL_123;
          v76[0] = (void *)0x8000000A0000000ALL;
          v76[1] = 0;
          v49 = sub_22E3B38EC(__p, v76);
          v69 = LODWORD(__p[0]) / 0xA + 48;
          if (v49)
          {
            LOBYTE(v50) = 0;
            v51 = BYTE4(__p[0]);
            if ((HIDWORD(__p[0]) & 0x7FFFFFFFu) >= 9)
              v51 = 9;
            v52 = v51 | 0x30;
            if ((uint64_t)__p[0] >= 0)
              v52 = 48;
            if ((unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF) >= 9)
              v53 = 9;
            else
              v53 = (char)__p[1];
            v54 = v53 | 0x30;
            if (SLODWORD(__p[1]) >= 0)
              v54 = 48;
          }
          else
          {
            if ((uint64_t)__p[0] < 0)
              v52 = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v52 = 48;
            if ((uint64_t)__p[0] < 0)
              v54 = (BYTE4(__p[0])
                   - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            else
              v54 = 48;
            v50 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            if (((uint64_t)__p[1] & 0x80000000) == 0)
              LOBYTE(v50) = 48;
            v67 = (LOBYTE(__p[1])
                 - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if (((uint64_t)__p[1] & 0x80000000) == 0)
              v67 = 48;
            v74 = v67;
            v75 = 0;
          }
          v70 = (LODWORD(__p[0]) % 0xA) | 0x30;
          v71 = v52;
          v72 = v54;
          v73 = v50;
          v76[0] = "__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__";
          v78 = 259;
          v68 = 1;
          HIBYTE(v86) = 1;
          if ((LODWORD(__p[0]) / 0xA) != 0xD0)
          {
            *(_QWORD *)&v83 = &v69;
            v68 = 3;
          }
          LOBYTE(v86) = v68;
        }
        sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
        v27 = a3[9];
LABEL_123:
        if (v27 <= 0x21 && ((1 << v27) & 0x3F0000888) != 0)
        {
          LOBYTE(v57) = __p[0];
          if (LODWORD(__p[0]) > 9)
          {
            v59 = (LODWORD(__p[0]) % 0xA) | 0x30;
            if ((uint64_t)__p[0] < 0)
              v60 = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v60 = 48;
            v61 = (BYTE4(__p[0])
                 - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if ((uint64_t)__p[0] >= 0)
              v61 = 48;
            if (((uint64_t)__p[1] & 0x80000000) != 0)
              v62 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v62 = 48;
            v58 = (LOBYTE(__p[1])
                 - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if (((uint64_t)__p[1] & 0x80000000) == 0)
              v58 = 48;
            v75 = 0;
            v57 = LODWORD(__p[0]) / 0xA;
          }
          else
          {
            v58 = 0;
            if ((uint64_t)__p[0] < 0)
              LOBYTE(v59) = (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFE)) >> 32) >> 2)
                          + 48;
            else
              LOBYTE(v59) = 48;
            v60 = (BYTE4(__p[0])
                 - 10 * (((1717986919 * (unint64_t)(HIDWORD(__p[0]) & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if ((uint64_t)__p[0] >= 0)
              v60 = 48;
            if (((uint64_t)__p[1] & 0x80000000) != 0)
              v61 = (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFE)) >> 32) >> 2) + 48;
            else
              v61 = 48;
            v62 = (LOBYTE(__p[1])
                 - 10 * (((1717986919 * (unint64_t)((uint64_t)__p[1] & 0x7FFFFFFF)) >> 32) >> 2)) | 0x30;
            if (((uint64_t)__p[1] & 0x80000000) == 0)
              v62 = 48;
          }
          v63 = v57 + 48;
          v69 = v57 + 48;
          v70 = v59;
          v71 = v60;
          v72 = v61;
          v73 = v62;
          v74 = v58;
          v76[0] = "__ENVIRONMENT_OS_VERSION_MIN_REQUIRED__";
          v78 = 259;
          v64 = 1;
          HIBYTE(v86) = 1;
          if (v63)
          {
            *(_QWORD *)&v83 = &v69;
            v64 = 3;
          }
          LOBYTE(v86) = v64;
          sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
          v27 = a3[9];
        }
        if (v27 == 32)
        {
          v76[0] = "__APPLE_SEPOS__";
          v78 = 259;
          *(_QWORD *)&v83 = "1";
          v86 = 259;
          sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
          v27 = a3[9];
        }
        if (v27 <= 0x21 && ((1 << v27) & 0x3F0000888) != 0)
        {
          v76[0] = "__MACH__";
          v78 = 259;
          *(_QWORD *)&v83 = "1";
          v86 = 259;
          sub_22E7333BC(a1, (llvm::Twine *)v76, (llvm::Twine *)&v83);
        }
        break;
    }
  }
  result = *(double *)__p;
  *a7 = *(_OWORD *)__p;
  return result;
}

uint64_t sub_22F1FC4C0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  int v6;
  int v8;
  const char *v9;
  const void **v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  size_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  int v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  int v26;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  void **v32;
  void *v33;
  _QWORD v34[2];
  void *__p[2];
  char v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;

  v6 = *(_DWORD *)(a1 + 68);
  if (v6 == 21 || v6 == 9)
  {
    v39[0] = "__popcntb";
    v40 = 259;
    v37[0] = "__builtin_ppc_popcntb";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__poppar4";
    v40 = 259;
    v37[0] = "__builtin_ppc_poppar4";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__poppar8";
    v40 = 259;
    v37[0] = "__builtin_ppc_poppar8";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__eieio";
    v40 = 259;
    v37[0] = "__builtin_ppc_eieio";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__iospace_eieio";
    v40 = 259;
    v37[0] = "__builtin_ppc_iospace_eieio";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__isync";
    v40 = 259;
    v37[0] = "__builtin_ppc_isync";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__lwsync";
    v40 = 259;
    v37[0] = "__builtin_ppc_lwsync";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__iospace_lwsync";
    v40 = 259;
    v37[0] = "__builtin_ppc_iospace_lwsync";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__sync";
    v40 = 259;
    v37[0] = "__builtin_ppc_sync";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__iospace_sync";
    v40 = 259;
    v37[0] = "__builtin_ppc_iospace_sync";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbfl";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbfl";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbflp";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbflp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbst";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbst";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbt";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbtst";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbtst";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbz";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__icbt";
    v40 = 259;
    v37[0] = "__builtin_ppc_icbt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__compare_and_swap";
    v40 = 259;
    v37[0] = "__builtin_ppc_compare_and_swap";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__compare_and_swaplp";
    v40 = 259;
    v37[0] = "__builtin_ppc_compare_and_swaplp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_add";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_add";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_addlp";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_addlp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_and";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_and";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_andlp";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_andlp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_or";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_or";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_orlp";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_orlp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_swap";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_swap";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fetch_and_swaplp";
    v40 = 259;
    v37[0] = "__builtin_ppc_fetch_and_swaplp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__ldarx";
    v40 = 259;
    v37[0] = "__builtin_ppc_ldarx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__lwarx";
    v40 = 259;
    v37[0] = "__builtin_ppc_lwarx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__lharx";
    v40 = 259;
    v37[0] = "__builtin_ppc_lharx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__lbarx";
    v40 = 259;
    v37[0] = "__builtin_ppc_lbarx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__stfiw";
    v40 = 259;
    v37[0] = "__builtin_ppc_stfiw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__stdcx";
    v40 = 259;
    v37[0] = "__builtin_ppc_stdcx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__stwcx";
    v40 = 259;
    v37[0] = "__builtin_ppc_stwcx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__sthcx";
    v40 = 259;
    v37[0] = "__builtin_ppc_sthcx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__stbcx";
    v40 = 259;
    v37[0] = "__builtin_ppc_stbcx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__tdw";
    v40 = 259;
    v37[0] = "__builtin_ppc_tdw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__tw";
    v40 = 259;
    v37[0] = "__builtin_ppc_tw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__trap";
    v40 = 259;
    v37[0] = "__builtin_ppc_trap";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__trapd";
    v40 = 259;
    v37[0] = "__builtin_ppc_trapd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fcfid";
    v40 = 259;
    v37[0] = "__builtin_ppc_fcfid";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fcfud";
    v40 = 259;
    v37[0] = "__builtin_ppc_fcfud";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fctid";
    v40 = 259;
    v37[0] = "__builtin_ppc_fctid";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fctidz";
    v40 = 259;
    v37[0] = "__builtin_ppc_fctidz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fctiw";
    v40 = 259;
    v37[0] = "__builtin_ppc_fctiw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fctiwz";
    v40 = 259;
    v37[0] = "__builtin_ppc_fctiwz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fctudz";
    v40 = 259;
    v37[0] = "__builtin_ppc_fctudz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fctuwz";
    v40 = 259;
    v37[0] = "__builtin_ppc_fctuwz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cmpeqb";
    v40 = 259;
    v37[0] = "__builtin_ppc_cmpeqb";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cmprb";
    v40 = 259;
    v37[0] = "__builtin_ppc_cmprb";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__setb";
    v40 = 259;
    v37[0] = "__builtin_ppc_setb";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cmpb";
    v40 = 259;
    v37[0] = "__builtin_ppc_cmpb";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mulhd";
    v40 = 259;
    v37[0] = "__builtin_ppc_mulhd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mulhdu";
    v40 = 259;
    v37[0] = "__builtin_ppc_mulhdu";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mulhw";
    v40 = 259;
    v37[0] = "__builtin_ppc_mulhw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mulhwu";
    v40 = 259;
    v37[0] = "__builtin_ppc_mulhwu";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__maddhd";
    v40 = 259;
    v37[0] = "__builtin_ppc_maddhd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__maddhdu";
    v40 = 259;
    v37[0] = "__builtin_ppc_maddhdu";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__maddld";
    v40 = 259;
    v37[0] = "__builtin_ppc_maddld";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__rlwnm";
    v40 = 259;
    v37[0] = "__builtin_ppc_rlwnm";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__rlwimi";
    v40 = 259;
    v37[0] = "__builtin_ppc_rlwimi";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__rldimi";
    v40 = 259;
    v37[0] = "__builtin_ppc_rldimi";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__load2r";
    v40 = 259;
    v37[0] = "__builtin_ppc_load2r";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__load4r";
    v40 = 259;
    v37[0] = "__builtin_ppc_load4r";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__load8r";
    v40 = 259;
    v37[0] = "__builtin_ppc_load8r";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__store2r";
    v40 = 259;
    v37[0] = "__builtin_ppc_store2r";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__store4r";
    v40 = 259;
    v37[0] = "__builtin_ppc_store4r";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__store8r";
    v40 = 259;
    v37[0] = "__builtin_ppc_store8r";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__extract_exp";
    v40 = 259;
    v37[0] = "__builtin_ppc_extract_exp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__extract_sig";
    v40 = 259;
    v37[0] = "__builtin_ppc_extract_sig";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mtfsb0";
    v40 = 259;
    v37[0] = "__builtin_ppc_mtfsb0";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mtfsb1";
    v40 = 259;
    v37[0] = "__builtin_ppc_mtfsb1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mtfsf";
    v40 = 259;
    v37[0] = "__builtin_ppc_mtfsf";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mtfsfi";
    v40 = 259;
    v37[0] = "__builtin_ppc_mtfsfi";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__insert_exp";
    v40 = 259;
    v37[0] = "__builtin_ppc_insert_exp";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fmsub";
    v40 = 259;
    v37[0] = "__builtin_ppc_fmsub";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fmsubs";
    v40 = 259;
    v37[0] = "__builtin_ppc_fmsubs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fnmadd";
    v40 = 259;
    v37[0] = "__builtin_ppc_fnmadd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fnmadds";
    v40 = 259;
    v37[0] = "__builtin_ppc_fnmadds";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fnmsub";
    v40 = 259;
    v37[0] = "__builtin_ppc_fnmsub";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fnmsubs";
    v40 = 259;
    v37[0] = "__builtin_ppc_fnmsubs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fre";
    v40 = 259;
    v37[0] = "__builtin_ppc_fre";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fres";
    v40 = 259;
    v37[0] = "__builtin_ppc_fres";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__swdiv_nochk";
    v40 = 259;
    v37[0] = "__builtin_ppc_swdiv_nochk";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__swdivs_nochk";
    v40 = 259;
    v37[0] = "__builtin_ppc_swdivs_nochk";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__alloca";
    v40 = 259;
    v37[0] = "__builtin_alloca";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vcipher";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vcipher";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vcipherlast";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vcipherlast";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vncipher";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vncipher";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vncipherlast";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vncipherlast";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vpermxor";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vpermxor";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vpmsumb";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vpmsumb";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vpmsumd";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vpmsumd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vpmsumh";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vpmsumh";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__vpmsumw";
    v40 = 259;
    v37[0] = "__builtin_altivec_crypto_vpmsumw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__divde";
    v40 = 259;
    v37[0] = "__builtin_divde";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__divwe";
    v40 = 259;
    v37[0] = "__builtin_divwe";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__divdeu";
    v40 = 259;
    v37[0] = "__builtin_divdeu";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__divweu";
    v40 = 259;
    v37[0] = "__builtin_divweu";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__alignx";
    v40 = 259;
    v37[0] = "__builtin_ppc_alignx";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__bcopy";
    v40 = 259;
    v37[0] = "bcopy";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__bpermd";
    v40 = 259;
    v37[0] = "__builtin_bpermd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cntlz4";
    v40 = 259;
    v37[0] = "__builtin_clz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cntlz8";
    v40 = 259;
    v37[0] = "__builtin_clzll";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cmplx";
    v40 = 259;
    v37[0] = "__builtin_complex";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cmplxf";
    v40 = 259;
    v37[0] = "__builtin_complex";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cnttz4";
    v40 = 259;
    v37[0] = "__builtin_ctz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cnttz8";
    v40 = 259;
    v37[0] = "__builtin_ctzll";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__darn";
    v40 = 259;
    v37[0] = "__builtin_darn";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__darn_32";
    v40 = 259;
    v37[0] = "__builtin_darn_32";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__darn_raw";
    v40 = 259;
    v37[0] = "__builtin_darn_raw";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbf";
    v40 = 259;
    v37[0] = "__builtin_dcbf";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fmadd";
    v40 = 259;
    v37[0] = "__builtin_fma";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fmadds";
    v40 = 259;
    v37[0] = "__builtin_fmaf";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__abs";
    v40 = 259;
    v37[0] = "__builtin_abs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__labs";
    v40 = 259;
    v37[0] = "__builtin_labs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__llabs";
    v40 = 259;
    v37[0] = "__builtin_llabs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__popcnt4";
    v40 = 259;
    v37[0] = "__builtin_popcount";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__popcnt8";
    v40 = 259;
    v37[0] = "__builtin_popcountll";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__readflm";
    v40 = 259;
    v37[0] = "__builtin_readflm";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__rotatel4";
    v40 = 259;
    v37[0] = "__builtin_rotateleft32";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__rotatel8";
    v40 = 259;
    v37[0] = "__builtin_rotateleft64";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__rdlam";
    v40 = 259;
    v37[0] = "__builtin_ppc_rdlam";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__setflm";
    v40 = 259;
    v37[0] = "__builtin_setflm";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__setrnd";
    v40 = 259;
    v37[0] = "__builtin_setrnd";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbtstt";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbtstt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__dcbtt";
    v40 = 259;
    v37[0] = "__builtin_ppc_dcbtt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mftbu";
    v40 = 259;
    v37[0] = "__builtin_ppc_mftbu";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mfmsr";
    v40 = 259;
    v37[0] = "__builtin_ppc_mfmsr";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mtmsr";
    v40 = 259;
    v37[0] = "__builtin_ppc_mtmsr";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mfspr";
    v40 = 259;
    v37[0] = "__builtin_ppc_mfspr";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__mtspr";
    v40 = 259;
    v37[0] = "__builtin_ppc_mtspr";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fric";
    v40 = 259;
    v37[0] = "__builtin_ppc_fric";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frim";
    v40 = 259;
    v37[0] = "__builtin_ppc_frim";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frims";
    v40 = 259;
    v37[0] = "__builtin_ppc_frims";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frin";
    v40 = 259;
    v37[0] = "__builtin_ppc_frin";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frins";
    v40 = 259;
    v37[0] = "__builtin_ppc_frins";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frip";
    v40 = 259;
    v37[0] = "__builtin_ppc_frip";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frips";
    v40 = 259;
    v37[0] = "__builtin_ppc_frips";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__friz";
    v40 = 259;
    v37[0] = "__builtin_ppc_friz";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frizs";
    v40 = 259;
    v37[0] = "__builtin_ppc_frizs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fsel";
    v40 = 259;
    v37[0] = "__builtin_ppc_fsel";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fsels";
    v40 = 259;
    v37[0] = "__builtin_ppc_fsels";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frsqrte";
    v40 = 259;
    v37[0] = "__builtin_ppc_frsqrte";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__frsqrtes";
    v40 = 259;
    v37[0] = "__builtin_ppc_frsqrtes";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fsqrt";
    v40 = 259;
    v37[0] = "__builtin_ppc_fsqrt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__fsqrts";
    v40 = 259;
    v37[0] = "__builtin_ppc_fsqrts";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__addex";
    v40 = 259;
    v37[0] = "__builtin_ppc_addex";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__cmplxl";
    v40 = 259;
    v37[0] = "__builtin_complex";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__compare_exp_uo";
    v40 = 259;
    v37[0] = "__builtin_ppc_compare_exp_uo";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__compare_exp_lt";
    v40 = 259;
    v37[0] = "__builtin_ppc_compare_exp_lt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__compare_exp_gt";
    v40 = 259;
    v37[0] = "__builtin_ppc_compare_exp_gt";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__compare_exp_eq";
    v40 = 259;
    v37[0] = "__builtin_ppc_compare_exp_eq";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__test_data_class";
    v40 = 259;
    v37[0] = "__builtin_ppc_test_data_class";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__swdiv";
    v40 = 259;
    v37[0] = "__builtin_ppc_swdiv";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__swdivs";
    v40 = 259;
    v37[0] = "__builtin_ppc_swdivs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__builtin_maxfe";
    v40 = 259;
    v37[0] = "__builtin_ppc_maxfe";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__builtin_maxfl";
    v40 = 259;
    v37[0] = "__builtin_ppc_maxfl";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__builtin_maxfs";
    v40 = 259;
    v37[0] = "__builtin_ppc_maxfs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__builtin_minfe";
    v40 = 259;
    v37[0] = "__builtin_ppc_minfe";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__builtin_minfl";
    v40 = 259;
    v37[0] = "__builtin_ppc_minfl";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__builtin_minfs";
    v40 = 259;
    v37[0] = "__builtin_ppc_minfs";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  v39[0] = "__ppc__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v39[0] = "__PPC__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v39[0] = "_ARCH_PPC";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v39[0] = "__powerpc__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v39[0] = "__POWERPC__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) == 64)
  {
    v39[0] = "_ARCH_PPC64";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__powerpc64__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__ppc64__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__PPC64__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
  }
  else
  {
    if (*(_DWORD *)(a1 + 68) != 21)
      goto LABEL_13;
    v39[0] = "_ARCH_PPC64";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
  }
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  if (*(_DWORD *)(a1 + 68) == 21)
  {
    v39[0] = "__THW_PPC__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__PPC";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__powerpc";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
LABEL_13:
  v8 = *(_DWORD *)(a1 + 56);
  if (v8 == 24 || v8 == 22)
  {
    v9 = "_LITTLE_ENDIAN";
  }
  else
  {
    if ((*(_DWORD *)(a1 + 68) & 0xFFFFFFFE) == 0xC)
      goto LABEL_19;
    v9 = "_BIG_ENDIAN";
  }
  v39[0] = v9;
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
LABEL_19:
  v10 = (const void **)(a1 + 424);
  v11 = *(unsigned __int8 *)(a1 + 447);
  v12 = *(_BYTE *)(a1 + 447);
  v13 = *(_QWORD *)(a1 + 432);
  v14 = v11 & 0x7F;
  if ((v11 & 0x80u) == 0)
    v15 = v11 & 0x7F;
  else
    v15 = *(_QWORD *)(a1 + 432);
  if (v15 == 5)
  {
    v16 = (const void *)(a1 + 424);
    if ((char)v11 < 0)
    {
      v16 = *v10;
      v11 = *(_QWORD *)(a1 + 432);
    }
    if (v11 >= 5)
      v17 = 5;
    else
      v17 = v11;
    if (!memcmp(v16, "elfv1", v17) && v11 == 5)
    {
      v39[0] = "_CALL_ELF";
      v40 = 259;
      v37[0] = "1";
      v38 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
      v12 = *(_BYTE *)(a1 + 447);
      v13 = *(_QWORD *)(a1 + 432);
      v14 = v12 & 0x7F;
    }
  }
  if ((v12 & 0x80u) == 0)
    v18 = v14;
  else
    v18 = v13;
  if (v18 == 5)
  {
    if ((v12 & 0x80) != 0)
    {
      v19 = *v10;
    }
    else
    {
      v13 = v12;
      v19 = (const void *)(a1 + 424);
    }
    v20 = v13 >= 5 ? 5 : v13;
    if (!memcmp(v19, "elfv2", v20) && v13 == 5)
    {
      v39[0] = "_CALL_ELF";
      v40 = 259;
      v37[0] = "2";
      v38 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    }
  }
  v21 = *(_DWORD *)(a1 + 68);
  if (v21 != 9)
  {
LABEL_47:
    if (v21 == 21)
      goto LABEL_49;
    goto LABEL_48;
  }
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) == 64)
  {
    v39[0] = "_CALL_LINUX";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v21 = *(_DWORD *)(a1 + 68);
    goto LABEL_47;
  }
LABEL_48:
  v39[0] = "__NATURAL_ALIGNMENT__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
LABEL_49:
  v39[0] = "__REGISTER_PREFIX__";
  v40 = 259;
  v38 = 257;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  if (*(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 14) == 128)
  {
    v39[0] = "__LONG_DOUBLE_128__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__LONGDOUBLE128";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    if ((*(_DWORD *)(a2 + 52) & 1) != 0)
      v22 = "__LONG_DOUBLE_IEEE128__";
    else
      v22 = "__LONG_DOUBLE_IBM128__";
    v39[0] = v22;
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_DWORD *)(a1 + 68) == 21 && *(_DWORD *)(a2 + 48) == 64)
  {
    v39[0] = "__LONGDOUBLE64";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  v23 = *(unsigned __int8 *)(a1 + 447);
  if ((v23 & 0x80u) == 0)
    v24 = v23 & 0x7F;
  else
    v24 = *(_QWORD *)(a1 + 432);
  if (v24 == 5)
  {
    if ((v23 & 0x80) != 0)
    {
      v10 = (const void **)*v10;
      v23 = *(_QWORD *)(a1 + 432);
    }
    v25 = v23 >= 5 ? 5 : v23;
    if (!memcmp(v10, "elfv2", v25) && v23 == 5)
      goto LABEL_70;
  }
  if (*(_DWORD *)(a1 + 68) == 3 && *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) == 64)
  {
LABEL_70:
    v39[0] = "__STRUCT_PARM_ALIGN__";
    v40 = 259;
    v37[0] = "16";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 1) != 0)
  {
    v28 = a1 + 368;
    v29 = *(_BYTE *)(a1 + 391);
    v30 = v29 < 0;
    if (v29 < 0)
      v28 = *(_QWORD *)(a1 + 368);
    v31 = v29 & 0x7F;
    if (v30)
      v31 = *(_QWORD *)(a1 + 376);
    v34[0] = v28;
    v34[1] = v31;
    llvm::StringRef::upper((llvm::StringRef *)v34);
    v32 = (void **)__p[0];
    if (v36 >= 0)
      v32 = __p;
    v33 = (void *)(v36 & 0x7F);
    if (v36 < 0)
      v33 = __p[1];
    v40 = 1283;
    v39[0] = "_ARCH_";
    v39[2] = v32;
    v39[3] = v33;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    if (v36 < 0)
      operator delete(__p[0]);
    v26 = *(_DWORD *)(a1 + 364);
    if ((v26 & 2) == 0)
    {
LABEL_73:
      if ((v26 & 4) == 0)
        goto LABEL_74;
      goto LABEL_129;
    }
  }
  else if ((v26 & 2) == 0)
  {
    goto LABEL_73;
  }
  v39[0] = "_ARCH_PPCGR";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 4) == 0)
  {
LABEL_74:
    if ((v26 & 8) == 0)
      goto LABEL_75;
    goto LABEL_130;
  }
LABEL_129:
  v39[0] = "_ARCH_PPCSQ";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 8) == 0)
  {
LABEL_75:
    if ((v26 & 0x10) == 0)
      goto LABEL_76;
    goto LABEL_131;
  }
LABEL_130:
  v39[0] = "_ARCH_440";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x10) == 0)
  {
LABEL_76:
    if ((v26 & 0x20) == 0)
      goto LABEL_77;
    goto LABEL_132;
  }
LABEL_131:
  v39[0] = "_ARCH_603";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x20) == 0)
  {
LABEL_77:
    if ((v26 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_133;
  }
LABEL_132:
  v39[0] = "_ARCH_604";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x40) == 0)
  {
LABEL_78:
    if ((v26 & 0x80) == 0)
      goto LABEL_79;
    goto LABEL_134;
  }
LABEL_133:
  v39[0] = "_ARCH_PWR4";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x80) == 0)
  {
LABEL_79:
    if ((v26 & 0x100) == 0)
      goto LABEL_80;
    goto LABEL_135;
  }
LABEL_134:
  v39[0] = "_ARCH_PWR5";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x100) == 0)
  {
LABEL_80:
    if ((v26 & 0x200) == 0)
      goto LABEL_81;
    goto LABEL_136;
  }
LABEL_135:
  v39[0] = "_ARCH_PWR5X";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x200) == 0)
  {
LABEL_81:
    if ((v26 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_137;
  }
LABEL_136:
  v39[0] = "_ARCH_PWR6";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x400) == 0)
  {
LABEL_82:
    if ((v26 & 0x800) == 0)
      goto LABEL_83;
    goto LABEL_138;
  }
LABEL_137:
  v39[0] = "_ARCH_PWR6X";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x800) == 0)
  {
LABEL_83:
    if ((v26 & 0x1000) == 0)
      goto LABEL_84;
    goto LABEL_139;
  }
LABEL_138:
  v39[0] = "_ARCH_PWR7";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x1000) == 0)
  {
LABEL_84:
    if ((v26 & 0x2000) == 0)
      goto LABEL_85;
    goto LABEL_140;
  }
LABEL_139:
  v39[0] = "_ARCH_PWR8";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x2000) == 0)
  {
LABEL_85:
    if ((v26 & 0x4000) == 0)
      goto LABEL_86;
    goto LABEL_141;
  }
LABEL_140:
  v39[0] = "_ARCH_PWR9";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x4000) == 0)
  {
LABEL_86:
    if ((v26 & 0x10000) == 0)
      goto LABEL_87;
    goto LABEL_142;
  }
LABEL_141:
  v39[0] = "_ARCH_PWR10";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x10000) == 0)
  {
LABEL_87:
    if ((v26 & 0x40000) == 0)
      goto LABEL_88;
    goto LABEL_143;
  }
LABEL_142:
  v39[0] = "_ARCH_A2";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v26 = *(_DWORD *)(a1 + 364);
  if ((v26 & 0x40000) == 0)
  {
LABEL_88:
    if ((v26 & 0x8000) == 0)
      goto LABEL_90;
    goto LABEL_89;
  }
LABEL_143:
  v39[0] = "__NO_LWSYNC__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  if ((*(_DWORD *)(a1 + 364) & 0x8000) != 0)
  {
LABEL_89:
    v39[0] = "_ARCH_PWR_FUTURE";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
LABEL_90:
  if (*(_BYTE *)(a1 + 396))
  {
    v39[0] = "__VEC__";
    v40 = 259;
    v37[0] = "10206";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__ALTIVEC__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 408))
  {
    v39[0] = "__SPE__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
    v39[0] = "__NO_FPRS__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 400))
  {
    v39[0] = "__VSX__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 401))
  {
    v39[0] = "__POWER8_VECTOR__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 402))
  {
    v39[0] = "__CRYPTO__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 404))
  {
    v39[0] = "__HTM__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v39[0] = "__FLOAT128__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 407))
  {
    v39[0] = "__POWER9_VECTOR__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 397))
  {
    v39[0] = "__MMA__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 398))
  {
    v39[0] = "__ROP_PROTECT__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 410))
  {
    v39[0] = "__POWER10_VECTOR__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  if (*(_BYTE *)(a1 + 411))
  {
    v39[0] = "__PCREL__";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  v39[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v39[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  v39[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) == 64)
  {
    v39[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
    v40 = 259;
    v37[0] = "1";
    v38 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
  }
  v39[0] = "__HAVE_BSWAP__";
  v40 = 259;
  v37[0] = "1";
  v38 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v39, (llvm::Twine *)v37);
}

uint64_t sub_22F1FF520(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, unsigned __int16 *a4, size_t a5, const void ***a6)
{
  int v11;
  _BOOL4 v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  char v19;
  BOOL v20;
  BOOL v21;
  _BOOL4 v22;
  char v23;
  int v24;
  char v26;
  BOOL v27;
  _BOOL4 v28;
  char v29;
  int v30;
  char v32;
  BOOL v33;
  int v34;
  char v35;
  int v36;
  BOOL v37;
  char v38;
  BOOL v39;
  int v40;
  char v41;
  int v42;
  BOOL v43;
  char v44;
  BOOL v45;
  _BOOL4 v46;
  char v47;
  int v48;
  char v50;
  BOOL v51;
  int v52;
  char v53;
  int v54;
  BOOL v55;
  char v56;
  BOOL v57;
  _BOOL4 v58;
  char v59;
  int v60;
  char v62;
  uint64_t *v63;
  int v64;
  _BOOL4 v65;
  char v67;
  BOOL v68;
  int v69;
  char v70;
  int v71;
  BOOL v72;
  char v73;
  BOOL v74;
  _BOOL4 v75;
  char v76;
  int v77;
  char v79;
  _BOOL4 v80;
  _BOOL4 v81;
  uint64_t *v82;
  char v84;
  _BOOL4 v85;
  int v86;
  char v87;
  int v89;
  BOOL v90;
  int v91;
  const void **v93;
  const void **v94;
  const void **v95;
  unint64_t v96;
  unint64_t v97;
  const void *v98;
  size_t v99;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  uint64_t v107;
  int v108;
  const void **v109;
  const void **v110;
  unint64_t v111;
  const void *v112;
  const void *v113;
  size_t v114;
  uint64_t v116;
  const void **v117;
  const void **v118;
  unint64_t v119;
  const void *v120;
  const void *v121;
  size_t v122;
  uint64_t v124;
  const void **v125;
  uint64_t v126;
  const void **v127;
  const void **v128;
  const void **v129;
  unint64_t v130;
  const void *v131;
  const void *v132;
  size_t v133;
  uint64_t v135;
  const void **v136;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  const char *v142;
  unint64_t v143;
  const void *v144;
  const void *v145;
  size_t v146;
  uint64_t v148;
  const void **v149;
  unint64_t v150;
  unint64_t v151;
  const void *v152;
  size_t v153;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  const char *v176;
  const void **v177;
  unint64_t v178;
  unint64_t v179;
  const void *v180;
  size_t v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  const void *v187;
  const void *v188;
  size_t v189;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  const void **v194;
  uint64_t v195;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  __int16 v200;

  if (a5 != 4)
  {
    v11 = 0;
    v12 = 0;
    switch(a5)
    {
      case 2uLL:
        if (*a4 == 13415 || *a4 == 13671)
          goto LABEL_24;
        goto LABEL_23;
      case 3uLL:
        v13 = *a4 == 13415 && *((_BYTE *)a4 + 2) == 43;
        if (v13)
          goto LABEL_24;
        v14 = *((unsigned __int8 *)a4 + 2);
        v15 = *a4 == 14137;
        v16 = 48;
        goto LABEL_19;
      case 4uLL:
      case 6uLL:
        goto LABEL_25;
      case 5uLL:
        v14 = *((unsigned __int8 *)a4 + 4);
        v15 = *(_DWORD *)a4 == 912486512;
        v16 = 52;
LABEL_19:
        if (!v15 || v14 != v16)
          goto LABEL_23;
        goto LABEL_24;
      case 7uLL:
        v12 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
        LOBYTE(v11) = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
        goto LABEL_25;
      default:
        v12 = 0;
        goto LABEL_25;
    }
  }
  if (*(_DWORD *)a4 == 808465463
    || *(_DWORD *)a4 == 808793143
    || *(_DWORD *)a4 == 913471344
    || *(_DWORD *)a4 == 930248560
    || *(_DWORD *)a4 == 947025776
    || *(_DWORD *)a4 == 963802992)
  {
LABEL_24:
    v11 = 1;
    v12 = 1;
  }
  else
  {
LABEL_23:
    v11 = 0;
    v12 = 0;
  }
LABEL_25:
  v19 = v12 && v11 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "altivec", 7uLL) + 8) = v19;
  v20 = a5 == 4 && *(_DWORD *)a4 == 963802992;
  *(_BYTE *)(*sub_22E80ABE0(a2, "power9-vector", 0xDuLL) + 8) = v20;
  if (a5 == 7)
  {
    v21 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
    v22 = v21;
  }
  else
  {
    if (a5 != 4)
    {
      v24 = 0;
      v22 = 0;
      goto LABEL_46;
    }
    v22 = *(_DWORD *)a4 == 963802992;
    if (*(_DWORD *)a4 == 963802992)
    {
      v24 = 1;
      goto LABEL_46;
    }
    v21 = *(_DWORD *)a4 == 947025776;
    v22 = v21;
  }
  v23 = v21;
  v24 = v23 & 1;
LABEL_46:
  v26 = v22 && v24 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "crypto", 6uLL) + 8) = v26;
  if (a5 == 7)
  {
    v27 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
    v28 = v27;
  }
  else
  {
    if (a5 != 4)
    {
      v30 = 0;
      v28 = 0;
      goto LABEL_63;
    }
    v28 = *(_DWORD *)a4 == 963802992;
    if (*(_DWORD *)a4 == 963802992)
    {
      v30 = 1;
      goto LABEL_63;
    }
    v27 = *(_DWORD *)a4 == 947025776;
    v28 = v27;
  }
  v29 = v27;
  v30 = v29 & 1;
LABEL_63:
  v32 = v28 && v30 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "power8-vector", 0xDuLL) + 8) = v32;
  if (a5 == 7)
  {
    v33 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
  }
  else
  {
    if (a5 != 4)
    {
      v36 = 0;
      v34 = 0;
      goto LABEL_84;
    }
    if (*(_DWORD *)a4 == 963802992 || *(_DWORD *)a4 == 947025776)
    {
      v36 = 1;
      v34 = 1;
      goto LABEL_84;
    }
    v33 = *(_DWORD *)a4 == 930248560;
  }
  v34 = v33;
  v35 = v33;
  v36 = v35 & 1;
LABEL_84:
  if (v34)
    v37 = v36 == 0;
  else
    v37 = 1;
  v38 = !v37;
  *(_BYTE *)(*sub_22E80ABE0(a2, "bpermd", 6uLL) + 8) = v38;
  if (a5 == 7)
  {
    v39 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
  }
  else
  {
    if (a5 != 4)
    {
      v42 = 0;
      v40 = 0;
      goto LABEL_105;
    }
    if (*(_DWORD *)a4 == 963802992 || *(_DWORD *)a4 == 947025776)
    {
      v42 = 1;
      v40 = 1;
      goto LABEL_105;
    }
    v39 = *(_DWORD *)a4 == 930248560;
  }
  v40 = v39;
  v41 = v39;
  v42 = v41 & 1;
LABEL_105:
  if (v40)
    v43 = v42 == 0;
  else
    v43 = 1;
  v44 = !v43;
  *(_BYTE *)(*sub_22E80ABE0(a2, "extdiv", 6uLL) + 8) = v44;
  if (a5 == 7)
  {
    v45 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
    v46 = v45;
  }
  else
  {
    if (a5 != 4)
    {
      v48 = 0;
      v46 = 0;
      goto LABEL_122;
    }
    v46 = *(_DWORD *)a4 == 963802992;
    if (*(_DWORD *)a4 == 963802992)
    {
      v48 = 1;
      goto LABEL_122;
    }
    v45 = *(_DWORD *)a4 == 947025776;
    v46 = v45;
  }
  v47 = v45;
  v48 = v47 & 1;
LABEL_122:
  v50 = v46 && v48 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "direct-move", 0xBuLL) + 8) = v50;
  if (a5 == 7)
  {
    v51 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
  }
  else
  {
    if (a5 != 4)
    {
      v54 = 0;
      v52 = 0;
      goto LABEL_143;
    }
    if (*(_DWORD *)a4 == 963802992 || *(_DWORD *)a4 == 947025776)
    {
      v54 = 1;
      v52 = 1;
      goto LABEL_143;
    }
    v51 = *(_DWORD *)a4 == 930248560;
  }
  v52 = v51;
  v53 = v51;
  v54 = v53 & 1;
LABEL_143:
  if (v52)
    v55 = v54 == 0;
  else
    v55 = 1;
  v56 = !v55;
  *(_BYTE *)(*sub_22E80ABE0(a2, "vsx", 3uLL) + 8) = v56;
  if (a5 == 7)
  {
    v57 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
    v58 = v57;
  }
  else
  {
    if (a5 != 4)
    {
      v60 = 0;
      v58 = 0;
      goto LABEL_160;
    }
    v58 = *(_DWORD *)a4 == 963802992;
    if (*(_DWORD *)a4 == 963802992)
    {
      v60 = 1;
      goto LABEL_160;
    }
    v57 = *(_DWORD *)a4 == 947025776;
    v58 = v57;
  }
  v59 = v57;
  v60 = v59 & 1;
LABEL_160:
  v62 = v58 && v60 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "htm", 3uLL) + 8) = v62;
  *(_BYTE *)(*sub_22E80ABE0(a2, "rop-protect", 0xBuLL) + 8) = 0;
  v63 = sub_22E80ABE0(a2, "privileged", 0xAuLL);
  v64 = 0;
  v65 = 0;
  *(_BYTE *)(*v63 + 8) = 0;
  if (a5 == 4)
  {
    v65 = *(_DWORD *)a4 == 942945592;
    if (*(_DWORD *)a4 == 942945592)
    {
      v64 = 1;
    }
    else
    {
      v65 = *(_DWORD *)a4 == 808465765;
      LOBYTE(v64) = *(_DWORD *)a4 == 808465765;
    }
  }
  v67 = v65 && v64 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "spe", 3uLL) + 8) = v67;
  if (a5 == 7)
  {
    v68 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
  }
  else
  {
    if (a5 != 4)
    {
      v71 = 0;
      v69 = 0;
      goto LABEL_191;
    }
    if (*(_DWORD *)a4 == 963802992 || *(_DWORD *)a4 == 947025776)
    {
      v71 = 1;
      v69 = 1;
      goto LABEL_191;
    }
    v68 = *(_DWORD *)a4 == 930248560;
  }
  v69 = v68;
  v70 = v68;
  v71 = v70 & 1;
LABEL_191:
  if (v69)
    v72 = v71 == 0;
  else
    v72 = 1;
  v73 = !v72;
  *(_BYTE *)(*sub_22E80ABE0(a2, "isa-v206-instructions", 0x15uLL) + 8) = v73;
  if (a5 == 7)
  {
    v74 = (*(_DWORD *)a4 ^ 0x36637070 | *(_DWORD *)((char *)a4 + 3) ^ 0x656C3436) == 0;
    v75 = v74;
LABEL_202:
    v76 = v74;
    v77 = v76 & 1;
    goto LABEL_206;
  }
  if (a5 != 4)
  {
    v82 = sub_22E80ABE0(a2, "isa-v207-instructions", 0x15uLL);
    v81 = 0;
    v80 = 0;
    *(_BYTE *)(*v82 + 8) = 0;
    goto LABEL_216;
  }
  v75 = *(_DWORD *)a4 == 963802992;
  if (*(_DWORD *)a4 != 963802992)
  {
    v74 = *(_DWORD *)a4 == 947025776;
    v75 = v74;
    goto LABEL_202;
  }
  v77 = 1;
LABEL_206:
  v79 = v75 && v77 != 0;
  *(_BYTE *)(*sub_22E80ABE0(a2, "isa-v207-instructions", 0x15uLL) + 8) = v79;
  if (a5 == 4)
  {
    v80 = *(_DWORD *)a4 == 963802992;
    v81 = v80;
  }
  else
  {
    v81 = 0;
    v80 = 0;
  }
LABEL_216:
  v84 = v80 && v81;
  *(_BYTE *)(*sub_22E80ABE0(a2, "isa-v30-instructions", 0x14uLL) + 8) = v84;
  if (llvm::Triple::isArch64Bit((llvm::Triple *)(a1 + 32)))
  {
    if (a5 == 4)
    {
      v85 = *(_DWORD *)a4 == 963802992;
      if (*(_DWORD *)a4 == 963802992)
      {
        v86 = 1;
      }
      else
      {
        v85 = *(_DWORD *)a4 == 947025776;
        v86 = v85;
      }
    }
    else
    {
      v86 = 0;
      v85 = 0;
    }
    v87 = v85 && v86 != 0;
  }
  else
  {
    v87 = 0;
  }
  *(_BYTE *)(*sub_22E80ABE0(a2, "quadword-atomics", 0x10uLL) + 8) = v87;
  if (a5 == 5)
  {
    v89 = *((unsigned __int8 *)a4 + 4);
    v90 = *(_DWORD *)a4 == 829585264;
    v91 = 48;
  }
  else
  {
    if (a5 != 7)
      goto LABEL_394;
    v89 = *(_DWORD *)((char *)a4 + 3);
    v90 = *(_DWORD *)a4 == 1702326128;
    v91 = 808546917;
  }
  if (!v90 || v89 != v91)
    goto LABEL_244;
  (*(void (**)(uint64_t, llvm::StringMapImpl *, uint64_t, const char *, uint64_t, const void ***))(*(_QWORD *)a1 + 440))(a1, a2, a3, "pwr9", 4, a6);
  sub_22F43D974(a2);
LABEL_394:
  if (a5 == 6 && *(_DWORD *)a4 == 1970566502 && a4[2] == 25970)
    (*(void (**)(uint64_t, llvm::StringMapImpl *, uint64_t, const char *, uint64_t, const void ***))(*(_QWORD *)a1 + 440))(a1, a2, a3, "pwr10", 5, a6);
LABEL_244:
  v195 = a1;
  v93 = *a6;
  v94 = a6[1];
  v95 = *a6;
  if (*a6 != v94)
  {
    v95 = *a6;
    while (1)
    {
      v96 = *((unsigned __int8 *)v95 + 23);
      v97 = (v96 & 0x80u) == 0 ? v96 & 0x7F : (unint64_t)v95[1];
      if (v97 == 4)
      {
        v98 = v95;
        if ((v96 & 0x80) != 0)
        {
          v98 = *v95;
          v96 = (unint64_t)v95[1];
        }
        v99 = v96 >= 4 ? 4 : v96;
        if (!memcmp(v98, "-vsx", v99) && v96 == 4)
          break;
      }
      v95 += 3;
      if (v95 == v94)
      {
        v95 = v94;
        break;
      }
    }
  }
  if (v95 != v94)
  {
    v193 = sub_22F201744(v93, v94, a3, "+power8-vector", 0xEuLL, "-mpower8-vector", 0xFuLL);
    v101 = sub_22F201744(*a6, a6[1], a3, "+direct-move", 0xCuLL, "-mdirect-move", 0xDuLL);
    v102 = sub_22F201744(*a6, a6[1], a3, "+float128", 9uLL, "-mfloat128", 0xAuLL);
    v103 = sub_22F201744(*a6, a6[1], a3, "+power9-vector", 0xEuLL, "-mpower9-vector", 0xFuLL);
    v104 = sub_22F201744(*a6, a6[1], a3, "+paired-vector-memops", 0x15uLL, "-mpaired-vector-memops", 0x16uLL);
    v105 = sub_22F201744(*a6, a6[1], a3, "+mma", 4uLL, "-mmma", 5uLL);
    v106 = sub_22F201744(*a6, a6[1], a3, "+power10-vector", 0xFuLL, "-mpower10-vector", 0x10uLL);
    if (v193 || v101 || v102 || v103 || v104 || v105 || v106)
      return 0;
  }
  v107 = v195;
  v108 = *(_DWORD *)(v195 + 364);
  if ((v108 & 0x802) == 2)
  {
    v109 = *a6;
    v110 = a6[1];
    if (*a6 != v110)
    {
      while (1)
      {
        v111 = *((unsigned __int8 *)v109 + 23);
        v112 = (v111 & 0x80u) == 0 ? (const void *)(v111 & 0x7F) : v109[1];
        if (v112 == (const void *)9)
        {
          v113 = v109;
          if ((v111 & 0x80) != 0)
          {
            v113 = *v109;
            v111 = (unint64_t)v109[1];
          }
          v114 = v111 >= 9 ? 9 : v111;
          if (!memcmp(v113, "+float128", v114) && v111 == 9)
            break;
        }
        v109 += 3;
        if (v109 == v110)
        {
          v109 = v110;
          break;
        }
      }
      v107 = v195;
    }
    if (v109 != v110)
    {
      v116 = a3;
      *(_QWORD *)(a3 + 312) = 0x3800000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v137 = (unsigned __int8 *)(a3 + 320);
      v197 = (unsigned __int8 *)(a3 + 320);
      v198 = 0;
      v199 = a3;
      v200 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v138 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v138)
      {
        v139 = *(_QWORD *)(a3 + 768);
        v140 = 56 * v138;
        do
        {
          if (*(char *)(v139 + v140 - 9) < 0)
            operator delete(*(void **)(v139 + v140 - 32));
          v140 -= 56;
        }
        while (v140);
        LODWORD(v138) = *v137;
        v116 = a3;
      }
      *(_DWORD *)(v116 + 776) = 0;
      v137[v138 + 1] = 1;
      *(_BYTE *)(v116 + 320) = v138 + 1;
      v141 = &v137[8 * v138];
      v142 = "-mfloat128";
LABEL_417:
      *((_QWORD *)v141 + 2) = v142;
      sub_22E3B89A8(&v197, a4, a5);
LABEL_418:
      sub_22E3BB0B8((uint64_t)&v197);
      return 0;
    }
  }
  if ((v108 & 0x4000) == 0)
  {
    v117 = a6[1];
    if (*a6 == v117)
    {
      v125 = *a6;
    }
    else
    {
      v194 = *a6;
      v118 = *a6;
      while (1)
      {
        v119 = *((unsigned __int8 *)v118 + 23);
        v120 = (v119 & 0x80u) == 0 ? (const void *)(v119 & 0x7F) : v118[1];
        if (v120 == (const void *)4)
        {
          v121 = v118;
          if ((v119 & 0x80) != 0)
          {
            v121 = *v118;
            v119 = (unint64_t)v118[1];
          }
          v122 = v119 >= 4 ? 4 : v119;
          if (!memcmp(v121, "+mma", v122) && v119 == 4)
            break;
        }
        v118 += 3;
        if (v118 == v117)
        {
          v118 = v117;
          break;
        }
      }
      if (v118 != v117)
      {
        v124 = a3;
        *(_QWORD *)(a3 + 312) = 0x3800000000;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v164 = (unsigned __int8 *)(a3 + 320);
        v197 = (unsigned __int8 *)(a3 + 320);
        v198 = 0;
        v199 = a3;
        v200 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v165 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v165)
        {
          v166 = *(_QWORD *)(a3 + 768);
          v167 = 56 * v165;
          do
          {
            if (*(char *)(v166 + v167 - 9) < 0)
              operator delete(*(void **)(v166 + v167 - 32));
            v167 -= 56;
          }
          while (v167);
          LODWORD(v165) = *v164;
          v124 = a3;
        }
        *(_DWORD *)(v124 + 776) = 0;
        v164[v165 + 1] = 1;
        *(_BYTE *)(v124 + 320) = v165 + 1;
        v141 = &v164[8 * v165];
        v142 = "-mmma";
        goto LABEL_417;
      }
      v149 = v194;
      while (1)
      {
        v150 = *((unsigned __int8 *)v149 + 23);
        v151 = (v150 & 0x80u) == 0 ? v150 & 0x7F : (unint64_t)v149[1];
        if (v151 == 6)
        {
          v152 = v149;
          if ((v150 & 0x80) != 0)
          {
            v152 = *v149;
            v150 = (unint64_t)v149[1];
          }
          v153 = v150 >= 6 ? 6 : v150;
          if (!memcmp(v152, "+pcrel", v153) && v150 == 6)
            break;
        }
        v149 += 3;
        if (v149 == v117)
        {
          v149 = v117;
          break;
        }
      }
      if (v149 != v117)
      {
        *(_QWORD *)(a3 + 312) = 0x3900000000;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v197 = (unsigned __int8 *)(a3 + 320);
        v198 = 0;
        v199 = a3;
        v200 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v183 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v183)
        {
          v184 = *(_QWORD *)(a3 + 768);
          v185 = 56 * v183;
          do
          {
            if (*(char *)(v184 + v185 - 9) < 0)
              operator delete(*(void **)(v184 + v185 - 32));
            v185 -= 56;
          }
          while (v185);
          LODWORD(v183) = *(unsigned __int8 *)(a3 + 320);
        }
        *(_DWORD *)(a3 + 776) = 0;
        *(_BYTE *)(a3 + 321 + v183) = 1;
        v175 = a3 + 336;
        *(_QWORD *)(a3 + 336 + 8 * v183) = "-mpcrel";
        v173 = (v183 + 1);
        *(_BYTE *)(a3 + 321 + v173) = 1;
        *(_BYTE *)(a3 + 320) = v183 + 2;
        v176 = "-mcpu=pwr10 -mprefixed";
        goto LABEL_458;
      }
      if (v194 == v117)
      {
        v125 = v194;
        v107 = v195;
      }
      else
      {
        v177 = v194;
        while (1)
        {
          v178 = *((unsigned __int8 *)v177 + 23);
          v179 = (v178 & 0x80u) == 0 ? v178 & 0x7F : (unint64_t)v177[1];
          if (v179 == 9)
          {
            v180 = v177;
            if ((v178 & 0x80) != 0)
            {
              v180 = *v177;
              v178 = (unint64_t)v177[1];
            }
            v181 = v178 >= 9 ? 9 : v178;
            if (!memcmp(v180, "+prefixed", v181) && v178 == 9)
              break;
          }
          v177 += 3;
          if (v177 == v117)
          {
            v177 = v117;
            break;
          }
        }
        v13 = v177 == v117;
        v125 = v194;
        if (!v13)
        {
          v126 = a3;
          *(_QWORD *)(a3 + 312) = 0x3900000000;
          if (*(char *)(a3 + 311) < 0)
          {
            **(_BYTE **)(a3 + 288) = 0;
            *(_QWORD *)(a3 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a3 + 288) = 0;
            *(_BYTE *)(a3 + 311) = 0;
          }
          v197 = (unsigned __int8 *)(a3 + 320);
          v198 = 0;
          v199 = a3;
          v200 = 1;
          *(_BYTE *)(a3 + 320) = 0;
          *(_DWORD *)(a3 + 664) = 0;
          v169 = *(unsigned int *)(a3 + 776);
          if ((_DWORD)v169)
          {
            v191 = *(_QWORD *)(a3 + 768);
            v192 = 56 * v169;
            do
            {
              if (*(char *)(v191 + v192 - 9) < 0)
                operator delete(*(void **)(v191 + v192 - 32));
              v192 -= 56;
            }
            while (v192);
            LODWORD(v169) = *(unsigned __int8 *)(a3 + 320);
          }
          v172 = a3 + 321;
          *(_DWORD *)(a3 + 776) = 0;
          *(_BYTE *)(a3 + 321 + v169) = 1;
          LOBYTE(v173) = v169 + 1;
          v174 = "-mprefixed";
LABEL_429:
          v175 = v126 + 336;
          *(_QWORD *)(v126 + 336 + 8 * v169) = v174;
          v173 = v173;
          *(_BYTE *)(v172 + v173) = 1;
          *(_BYTE *)(v126 + 320) = v169 + 2;
          v176 = "-mcpu=pwr10";
LABEL_458:
          *(_QWORD *)(v175 + 8 * v173) = v176;
          goto LABEL_418;
        }
        while (1)
        {
          v186 = *((unsigned __int8 *)v125 + 23);
          v187 = (v186 & 0x80u) == 0 ? (const void *)(v186 & 0x7F) : v125[1];
          if (v187 == (const void *)21)
          {
            v188 = v125;
            if ((v186 & 0x80) != 0)
            {
              v188 = *v125;
              v186 = (unint64_t)v125[1];
            }
            v189 = v186 >= 0x15 ? 21 : v186;
            if (!memcmp(v188, "+paired-vector-memops", v189) && v186 == 21)
              break;
          }
          v125 += 3;
          if (v125 == v117)
          {
            v125 = v117;
            break;
          }
        }
        v107 = v195;
      }
    }
    if (v125 != v117)
    {
      v126 = a3;
      *(_QWORD *)(a3 + 312) = 0x3900000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v197 = (unsigned __int8 *)(a3 + 320);
      v198 = 0;
      v199 = a3;
      v200 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v169 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v169)
      {
        v170 = *(_QWORD *)(a3 + 768);
        v171 = 56 * v169;
        do
        {
          if (*(char *)(v170 + v171 - 9) < 0)
            operator delete(*(void **)(v170 + v171 - 32));
          v171 -= 56;
        }
        while (v171);
        LODWORD(v169) = *(unsigned __int8 *)(a3 + 320);
      }
      v172 = a3 + 321;
      *(_DWORD *)(a3 + 776) = 0;
      *(_BYTE *)(a3 + 321 + v169) = 1;
      LOBYTE(v173) = v169 + 1;
      v174 = "-mpaired-vector-memops";
      goto LABEL_429;
    }
  }
  if ((v108 & 0x1000) == 0)
  {
    v127 = *a6;
    v128 = a6[1];
    if (*a6 == v128)
    {
      v136 = *a6;
    }
    else
    {
      v129 = *a6;
      while (1)
      {
        v130 = *((unsigned __int8 *)v129 + 23);
        v131 = (v130 & 0x80u) == 0 ? (const void *)(v130 & 0x7F) : v129[1];
        if (v131 == (const void *)12)
        {
          v132 = v129;
          if ((v130 & 0x80) != 0)
          {
            v132 = *v129;
            v130 = (unint64_t)v129[1];
          }
          v133 = v130 >= 0xC ? 12 : v130;
          if (!memcmp(v132, "+rop-protect", v133) && v130 == 12)
            break;
        }
        v129 += 3;
        if (v129 == v128)
        {
          v129 = v128;
          break;
        }
      }
      if (v129 != v128)
      {
        v135 = a3;
        *(_QWORD *)(a3 + 312) = 0x3800000000;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v160 = (unsigned __int8 *)(a3 + 320);
        v197 = (unsigned __int8 *)(a3 + 320);
        v198 = 0;
        v199 = a3;
        v200 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v161 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v161)
        {
          v162 = *(_QWORD *)(a3 + 768);
          v163 = 56 * v161;
          do
          {
            if (*(char *)(v162 + v163 - 9) < 0)
              operator delete(*(void **)(v162 + v163 - 32));
            v163 -= 56;
          }
          while (v163);
          LODWORD(v161) = *v160;
          v135 = a3;
        }
        *(_DWORD *)(v135 + 776) = 0;
        v160[v161 + 1] = 1;
        *(_BYTE *)(v135 + 320) = v161 + 1;
        v141 = &v160[8 * v161];
        v142 = "-mrop-protect";
        goto LABEL_417;
      }
      v136 = v127;
      while (1)
      {
        v143 = *((unsigned __int8 *)v136 + 23);
        v144 = (v143 & 0x80u) == 0 ? (const void *)(v143 & 0x7F) : v136[1];
        if (v144 == (const void *)11)
        {
          v145 = v136;
          if ((v143 & 0x80) != 0)
          {
            v145 = *v136;
            v143 = (unint64_t)v136[1];
          }
          v146 = v143 >= 0xB ? 11 : v143;
          if (!memcmp(v145, "+privileged", v146) && v143 == 11)
            break;
        }
        v136 += 3;
        if (v136 == v128)
        {
          v136 = v128;
          break;
        }
      }
      v107 = v195;
    }
    if (v136 != v128)
    {
      v148 = a3;
      *(_QWORD *)(a3 + 312) = 0x3800000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v155 = (unsigned __int8 *)(a3 + 320);
      v197 = (unsigned __int8 *)(a3 + 320);
      v198 = 0;
      v199 = a3;
      v200 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v156 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v156)
      {
        v157 = *(_QWORD *)(a3 + 768);
        v158 = 56 * v156;
        do
        {
          if (*(char *)(v157 + v158 - 9) < 0)
            operator delete(*(void **)(v157 + v158 - 32));
          v158 -= 56;
        }
        while (v158);
        LODWORD(v156) = *v155;
        v148 = a3;
      }
      *(_DWORD *)(v148 + 776) = 0;
      v155[v156 + 1] = 1;
      *(_BYTE *)(v148 + 320) = v156 + 1;
      v141 = &v155[8 * v156];
      v142 = "-mprivileged";
      goto LABEL_417;
    }
  }
  return sub_22F424A84(v107, (uint64_t)a2, a3, (uint64_t)a4, a5, (unsigned __int8 **)a6);
}

uint64_t sub_22F2009F8(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  BOOL v25;

  switch(a3)
  {
    case 3:
      if (*(_WORD *)a2 == 29558 && *(_BYTE *)(a2 + 2) == 120)
      {
        v5 = a1[400];
        goto LABEL_144;
      }
      if (*(_WORD *)a2 == 29800 && *(_BYTE *)(a2 + 2) == 109)
      {
        v5 = a1[404];
        goto LABEL_144;
      }
LABEL_13:
      if (*(_WORD *)a2 == 28787 && *(_BYTE *)(a2 + 2) == 101)
      {
        v5 = a1[408];
        goto LABEL_144;
      }
      if (*(_WORD *)a2 == 28013 && *(_BYTE *)(a2 + 2) == 97)
      {
        v5 = a1[397];
        goto LABEL_144;
      }
      goto LABEL_124;
    case 6:
      if (*(_DWORD *)a2 == 1887007331 && *(_WORD *)(a2 + 4) == 28532)
      {
        v5 = a1[402];
        goto LABEL_144;
      }
      if (*(_DWORD *)a2 == 1919250530 && *(_WORD *)(a2 + 4) == 25709)
      {
        v5 = a1[405];
        goto LABEL_144;
      }
      if (*(_DWORD *)a2 == 1685354597 && *(_WORD *)(a2 + 4) == 30313)
      {
        v5 = a1[406];
        goto LABEL_144;
      }
      goto LABEL_124;
    case 7:
      if (*(_DWORD *)a2 == 1702326128 && *(_DWORD *)(a2 + 3) == 1668313701)
      {
        v5 = 1;
        goto LABEL_144;
      }
      if (*(_DWORD *)a2 == 1769237601 && *(_DWORD *)(a2 + 3) == 1667593833)
      {
        v5 = a1[396];
        goto LABEL_144;
      }
      goto LABEL_124;
    case 8:
      if (*(_QWORD *)a2 != 0x38323174616F6C66)
        goto LABEL_124;
      v5 = a1[86];
      goto LABEL_144;
    case 11:
      if (*(_QWORD *)a2 == 0x6D2D746365726964 && *(_QWORD *)(a2 + 3) == 0x65766F6D2D746365)
      {
        v5 = a1[403];
        goto LABEL_144;
      }
LABEL_53:
      if (*(_QWORD *)a2 == 0x746F72702D706F72 && *(_QWORD *)(a2 + 3) == 0x746365746F72702DLL)
      {
        v5 = a1[398];
        goto LABEL_144;
      }
      goto LABEL_124;
    case 13:
      if (*(_QWORD *)a2 == 0x762D387265776F70 && *(_QWORD *)(a2 + 5) == 0x726F746365762D38)
      {
        v5 = a1[401];
        goto LABEL_144;
      }
      if (*(_QWORD *)a2 == 0x762D397265776F70 && *(_QWORD *)(a2 + 5) == 0x726F746365762D39)
      {
        v5 = a1[407];
        goto LABEL_144;
      }
LABEL_67:
      if (*(_QWORD *)a2 == 0x692D786966657270 && *(_QWORD *)(a2 + 5) == 0x737274736E692D78)
      {
        v5 = a1[412];
        goto LABEL_144;
      }
      goto LABEL_124;
    case 14:
      if (*(_QWORD *)a2 != 0x2D30317265776F70 || *(_QWORD *)(a2 + 6) != 0x726F746365762D30)
        goto LABEL_124;
      v5 = a1[410];
      goto LABEL_144;
    case 20:
      if (*(_QWORD *)a2 == 0x762D646572696170
        && *(_QWORD *)(a2 + 8) == 0x656D2D726F746365
        && *(_DWORD *)(a2 + 16) == 1936748397)
      {
        v5 = a1[409];
      }
      else
      {
LABEL_86:
        if (*(_QWORD *)a2 == 0x2D3033762D617369
          && *(_QWORD *)(a2 + 8) == 0x7463757274736E69
          && *(_DWORD *)(a2 + 16) == 1936617321)
        {
          v5 = a1[415];
        }
        else
        {
          if (*(_QWORD *)a2 != 0x2D3133762D617369
            || *(_QWORD *)(a2 + 8) != 0x7463757274736E69
            || *(_DWORD *)(a2 + 16) != 1936617321)
          {
LABEL_124:
            v5 = 0;
            v25 = 0;
            return v25 & (v5 != 0);
          }
          v5 = a1[416];
        }
      }
LABEL_144:
      v25 = 1;
      return v25 & (v5 != 0);
    default:
      switch(__ROR8__(a3 - 3, 1))
      {
        case 0:
          goto LABEL_13;
        case 4:
          goto LABEL_53;
        case 5:
          goto LABEL_67;
        case 7:
          if (*(_QWORD *)a2 != 0x6974616C65726370
            || *(_QWORD *)(a2 + 8) != 0x706F6D656D2D6576
            || *(_BYTE *)(a2 + 16) != 115)
          {
            goto LABEL_124;
          }
          v5 = a1[411];
          goto LABEL_144;
        default:
          v5 = 0;
          if (a3 > 19)
          {
            if (a3 == 20)
              goto LABEL_86;
            v25 = 0;
            if (a3 != 21)
              return v25 & (v5 != 0);
            if (*(_QWORD *)a2 == 0x363032762D617369
              && *(_QWORD *)(a2 + 8) == 0x63757274736E692DLL
              && *(_QWORD *)(a2 + 13) == 0x736E6F6974637572)
            {
              v5 = a1[413];
              goto LABEL_144;
            }
            if (*(_QWORD *)a2 == 0x373032762D617369
              && *(_QWORD *)(a2 + 8) == 0x63757274736E692DLL
              && *(_QWORD *)(a2 + 13) == 0x736E6F6974637572)
            {
              v5 = a1[414];
              goto LABEL_144;
            }
          }
          else
          {
            if (a3 != 10)
            {
              v25 = 0;
              if (a3 == 16)
              {
                v5 = a1[417];
                v25 = *(_QWORD *)a2 == 0x64726F7764617571 && *(_QWORD *)(a2 + 8) == 0x7363696D6F74612DLL;
                if (!v25)
                  v5 = 0;
              }
              return v25 & (v5 != 0);
            }
            if (*(_QWORD *)a2 == 0x67656C6976697270 && *(_WORD *)(a2 + 8) == 25701)
            {
              v5 = a1[399];
              goto LABEL_144;
            }
          }
          break;
      }
      goto LABEL_124;
  }
}

uint64_t *sub_22F200F6C(uint64_t a1, llvm::StringMapImpl *a2, unsigned __int16 *a3, size_t a4, int a5)
{
  size_t v5;
  const char *v6;
  unsigned int v9;
  int v10;
  char v11;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t *v17;
  char v19;
  size_t v21;
  size_t v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  size_t v27;
  size_t v28;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  _BOOL4 v34;
  char v35;
  int v36;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *result;

  v5 = a4;
  v6 = (const char *)a3;
  if (!a5)
  {
    switch(a4)
    {
      case 3uLL:
        if (*a3 == 28787 && *((_BYTE *)a3 + 2) == 101)
          *(_BYTE *)(*sub_22E80ABE0(a2, "efpu2", 5uLL) + 8) = 0;
        v13 = *((unsigned __int8 *)v6 + 2);
        v14 = *(unsigned __int16 *)v6 == 29558;
        v15 = 120;
        goto LABEL_28;
      case 5uLL:
        if (*(_DWORD *)a3 != 1701995376 || *((_BYTE *)a3 + 4) != 108)
          goto LABEL_120;
        v19 = 0;
        v6 = "pcrelative-memops";
        goto LABEL_101;
      case 7uLL:
        v13 = *(_DWORD *)((char *)a3 + 3);
        v14 = *(_DWORD *)a3 == 1769237601;
        v15 = 1667593833;
LABEL_28:
        if (!v14 || v13 != v15)
          goto LABEL_120;
        *(_BYTE *)(*sub_22E80ABE0(a2, "power10-vector", 0xEuLL) + 8) = 0;
        v21 = 3;
        *(_BYTE *)(*sub_22E80ABE0(a2, "mma", 3uLL) + 8) = 0;
        *(_BYTE *)(*sub_22E80ABE0(a2, "paired-vector-memops", 0x14uLL) + 8) = 0;
        v22 = 13;
        v23 = "vsx";
        *(_BYTE *)(*sub_22E80ABE0(a2, "power9-vector", 0xDuLL) + 8) = 0;
        v24 = "direct-move";
        v25 = "power8-vector";
        v26 = "float128";
        v27 = 11;
        v28 = 8;
        goto LABEL_118;
      case 8uLL:
        if (*(_QWORD *)a3 != 0x6465786966657270)
          goto LABEL_120;
        v19 = 0;
        v6 = "prefix-instrs";
        goto LABEL_103;
      case 0xDuLL:
        if (*(_QWORD *)a3 == 0x762D387265776F70 && *(_QWORD *)((char *)a3 + 5) == 0x726F746365762D38)
        {
          v23 = "power9-vector";
          v24 = "paired-vector-memops";
          v25 = "mma";
          v21 = 13;
          v27 = 20;
          v22 = 3;
          v28 = 14;
          v26 = "power10-vector";
LABEL_118:
          *(_BYTE *)(*sub_22E80ABE0(a2, v26, v28) + 8) = 0;
        }
        else
        {
          if (*(_QWORD *)a3 != 0x762D397265776F70 || *(_QWORD *)((char *)a3 + 5) != 0x726F746365762D39)
          {
LABEL_120:
            v19 = 0;
            goto LABEL_121;
          }
          v23 = "paired-vector-memops";
          v24 = "mma";
          v21 = 20;
          v27 = 3;
          v22 = 14;
          v25 = "power10-vector";
        }
        *(_BYTE *)(*sub_22E80ABE0(a2, v25, v22) + 8) = 0;
        *(_BYTE *)(*sub_22E80ABE0(a2, v24, v27) + 8) = 0;
        *(_BYTE *)(*sub_22E80ABE0(a2, v23, v21) + 8) = 0;
        goto LABEL_120;
      default:
        goto LABEL_120;
    }
  }
  if (a4 != 5)
  {
    v11 = 0;
    v16 = 1;
    v10 = 0;
    v9 = 0;
    switch(a4)
    {
      case 0xBuLL:
        v10 = 0;
        v11 = 0;
        if (*(_QWORD *)a3 ^ 0x6D2D746365726964 | *(_QWORD *)((char *)a3 + 3) ^ 0x65766F6D2D746365)
          v9 = 0;
        else
          v9 = 257;
        goto LABEL_62;
      case 0xCuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
        goto LABEL_63;
      case 0xDuLL:
        v33 = *(_QWORD *)a3 == 0x762D387265776F70 && *(_QWORD *)((char *)a3 + 5) == 0x726F746365762D38;
        v9 = 257;
        v11 = 0;
        if (!v33)
        {
          if (*(_QWORD *)a3 ^ 0x762D397265776F70 | *(_QWORD *)((char *)a3 + 5) ^ 0x726F746365762D39)
            v9 = 0;
          else
            v9 = 257;
        }
        v10 = 1;
        goto LABEL_62;
      case 0xEuLL:
        v31 = 0x706F77657231302DLL;
        v32 = bswap64(*(_QWORD *)a3);
        if (v32 == 0x706F77657231302DLL
          && (v31 = 0x302D766563746F72, v32 = bswap64(*(_QWORD *)(a3 + 3)), v32 == 0x302D766563746F72))
        {
          v9 = 0;
        }
        else if (v32 < v31)
        {
          v9 = -1;
        }
        else
        {
          v9 = 1;
        }
        v36 = 1;
        goto LABEL_115;
      case 0x14uLL:
        v41 = 0x7061697265642D76;
        v42 = bswap64(*(_QWORD *)a3);
        if (v42 == 0x7061697265642D76
          && (v41 = 0x6563746F722D6D65, v42 = bswap64(*((_QWORD *)a3 + 1)), v42 == 0x6563746F722D6D65)
          && (v41 = 1836019827, v42 = bswap32(*((_DWORD *)a3 + 4)), (_DWORD)v42 == 1836019827))
        {
          v9 = 0;
          v36 = 0;
        }
        else
        {
          v36 = 0;
          if (v42 < v41)
            v9 = -1;
          else
            v9 = 1;
        }
LABEL_115:
        v34 = 0;
        v10 = 0;
        LOBYTE(v9) = v9 == 0;
        if (!(_BYTE)v9)
          goto LABEL_79;
        goto LABEL_77;
      default:
        v10 = 0;
        v9 = 0;
        if (a4 != 3)
          goto LABEL_63;
        v10 = 0;
        if (*a3 ^ 0x7376 | *((unsigned __int8 *)a3 + 2) ^ 0x78)
          v9 = 0;
        else
          v9 = 257;
        v11 = 1;
        goto LABEL_62;
    }
  }
  if (*(_DWORD *)a3 == 1970300517 && *((_BYTE *)a3 + 4) == 50)
  {
    v17 = sub_22E80ABE0(a2, "spe", 3uLL);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    *(_BYTE *)(*v17 + 8) = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
LABEL_62:
  v16 = v9 < 0x100;
LABEL_63:
  v34 = v5 == 8;
  if (v5 == 8 && v16)
  {
    if (*(_QWORD *)v6 == 0x38323174616F6C66)
      v9 = 257;
    v34 = 1;
  }
  v35 = v11 ^ 1;
  v36 = 0;
  if (v9 > 0xFF)
    v35 = 1;
  if ((v35 & 1) == 0 && v6[2] == 97 && *(_WORD *)v6 == 28013)
    v9 = 257;
  if (v9 >> 8)
  {
LABEL_77:
    if ((_BYTE)v9)
    {
      *(_BYTE *)(*sub_22E80ABE0(a2, "altivec", 7uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(a2, "vsx", 3uLL) + 8) = 1;
    }
  }
LABEL_79:
  if (v10)
  {
    if (*(_QWORD *)v6 == 0x762D397265776F70 && *(_QWORD *)(v6 + 5) == 0x726F746365762D39)
      goto LABEL_91;
  }
  if (v36)
  {
    if (*(_QWORD *)v6 == 0x2D30317265776F70 && *(_QWORD *)(v6 + 6) == 0x726F746365762D30)
    {
      *(_BYTE *)(*sub_22E80ABE0(a2, "power9-vector", 0xDuLL) + 8) = 1;
LABEL_91:
      *(_BYTE *)(*sub_22E80ABE0(a2, "power8-vector", 0xDuLL) + 8) = 1;
    }
  }
  if (v5 == 5 && (*(_DWORD *)v6 == 1701995376 ? (v40 = v6[4] == 108) : (v40 = 0), v40))
  {
    v6 = "pcrelative-memops";
    v19 = 1;
LABEL_101:
    v5 = 17;
  }
  else if (v34 && *(_QWORD *)v6 == 0x6465786966657270)
  {
    v6 = "prefix-instrs";
    v19 = 1;
LABEL_103:
    v5 = 13;
  }
  else
  {
    v19 = 1;
  }
LABEL_121:
  result = sub_22E80ABE0(a2, v6, v5);
  *(_BYTE *)(*result + 8) = v19;
  return result;
}

void *sub_22F2016E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *result;

  v3 = *(unsigned int *)(a2 + 8);
  if (v3 + 53 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(unsigned int *)(a2 + 8);
  }
  result = memcpy((void *)(*(_QWORD *)a2 + 16 * v3), &off_24FC62078, 0x350uLL);
  *(_DWORD *)(a2 + 8) += 53;
  return result;
}

BOOL sub_22F201744(const void **a1, const void **a2, uint64_t a3, void *__s2, size_t __n, void *__src, size_t __len)
{
  const void **v11;
  char v14;
  BOOL v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;

  v11 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v14 = *((_BYTE *)v11 + 23);
      v15 = v14 < 0;
      if (v14 >= 0)
        v16 = v11;
      else
        v16 = *v11;
      v17 = (const void *)(v14 & 0x7F);
      if (v15)
        v17 = v11[1];
      if (v17 == (const void *)__n && (!__n || !memcmp(v16, __s2, __n)))
        break;
      v11 += 3;
      if (v11 == a2)
      {
        v11 = a2;
        break;
      }
    }
  }
  if (v11 != a2)
  {
    *(_QWORD *)(a3 + 312) = 0x3800000000;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v25 = (unsigned __int8 *)(a3 + 320);
    v26 = 0;
    v27 = a3;
    v28 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v18 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(a3 + 768);
      v20 = 56 * v18;
      do
      {
        if (*(char *)(v19 + v20 - 9) < 0)
          operator delete(*(void **)(v19 + v20 - 32));
        v20 -= 56;
      }
      while (v20);
    }
    *(_DWORD *)(a3 + 776) = 0;
    sub_22E3B89A8(&v25, __src, __len);
    v21 = v25;
    if (!v25)
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC(v26);
      v25 = v21;
    }
    v21[*v21 + 1] = 1;
    v22 = v25;
    v23 = *v25;
    *v25 = v23 + 1;
    *(_QWORD *)&v22[8 * v23 + 16] = "-mno-vsx";
    sub_22E3BB0B8((uint64_t)&v25);
  }
  return v11 != a2;
}

void sub_22F2018D0(char **a1@<X1>, uint64_t a2@<X8>)
{
  char *v3;
  int v4;
  std::string *v6;
  std::string::size_type size;
  int v8;
  char v9;
  void *__p;
  char v11;
  std::string v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *a1;
  v4 = **a1;
  if (v4 == 118)
  {
    *((_BYTE *)&v12.__r_.__value_.__s + 23) = 1;
    LOWORD(v12.__r_.__value_.__l.__data_) = 94;
    v11 = 2;
    LOWORD(__p) = *(_WORD *)v3;
    BYTE2(__p) = 0;
    v6 = std::string::append(&v12, (const std::string::value_type *)&__p, 2uLL);
    size = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)a2 = v6->__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 15) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(size) = *((_BYTE *)&v6->__r_.__value_.__s + 23);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = v11;
    *(_BYTE *)(a2 + 23) = size;
    if (v8 < 0)
      operator delete(__p);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    ++*a1;
  }
  else
  {
    if (v4 == 112)
      v9 = 114;
    else
      v9 = **a1;
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 23) = 1;
  }
}

uint64_t sub_22F2019AC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  int v5;
  const char *v6;
  int v7;
  const char *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  const char *v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  BOOL v35;
  int v36;
  const char *v39;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void **v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t result;
  int v49;
  void *__p[2];
  uint64_t v51;
  uint64_t v52;
  void *__dst[2];
  uint64_t v54;
  _QWORD v55[4];
  __int16 v56;
  _QWORD v57[4];
  __int16 v58;

  v5 = *(_DWORD *)(a1 + 76);
  if (v5 == 5)
  {
    v6 = "__APPLE__";
  }
  else
  {
    if (v5 != 3)
      goto LABEL_6;
    v6 = "__ELF__";
  }
  v57[0] = v6;
  v58 = 259;
  v55[0] = "1";
  v56 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
LABEL_6:
  v57[0] = "__riscv";
  v58 = 259;
  v55[0] = "1";
  v56 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  v7 = *(_DWORD *)(a1 + 56);
  v57[0] = "__riscv_xlen";
  v8 = "64";
  v58 = 259;
  if (v7 != 32)
    v8 = "32";
  v9 = 1;
  HIBYTE(v56) = 1;
  if (*v8)
  {
    v55[0] = v8;
    v9 = 3;
  }
  LOBYTE(v56) = v9;
  sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(v10 + 343);
  v12 = *(_QWORD *)(v10 + 328);
  if (v11 >= 0)
    v13 = (const char *)(v10 + 320);
  else
    v13 = *(const char **)(v10 + 320);
  v14 = v11 & 0x7F;
  if (v11 < 0)
    v14 = v12;
  v15 = *(_DWORD **)(a1 + 416);
  v16 = v15[2];
  v18 = v15[3];
  v17 = v15[4];
  v49 = v15[1];
  if (v14 == 5)
  {
LABEL_24:
    v22 = *(_DWORD *)v13;
    v23 = *((unsigned __int8 *)v13 + 4);
    if (v22 != 1818324339 || v23 != 108)
      goto LABEL_37;
    v25 = "__riscv_cmodel_medlow";
LABEL_36:
    v57[0] = v25;
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    goto LABEL_37;
  }
  if (v14 != 6)
  {
    if (v14 != 7)
      goto LABEL_37;
    v19 = *(_DWORD *)v13;
    v20 = *(_DWORD *)(v13 + 3);
    v21 = v19 == 1634100580 && v20 == 1953264993;
    if (!v21)
      goto LABEL_37;
    v13 = "small";
    goto LABEL_24;
  }
  v26 = *(_DWORD *)v13;
  v27 = *((unsigned __int16 *)v13 + 2);
  if (v26 == 1768187245 && v27 == 28021)
  {
    v25 = "__riscv_cmodel_medany";
    goto LABEL_36;
  }
LABEL_37:
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
  v31 = v29;
  v32 = v30;
  if (v30 == 6)
  {
    if (*(_DWORD *)v29 != 863005801 || *(_WORD *)(v29 + 4) != 26162)
    {
      v34 = *(unsigned __int16 *)(v29 + 4);
      v35 = *(_DWORD *)v29 == 863005801;
      v36 = 25650;
      goto LABEL_49;
    }
    goto LABEL_54;
  }
  if (v30 == 5)
  {
    if (*(_DWORD *)v29 != 875982956 || *(_BYTE *)(v29 + 4) != 102)
    {
      v34 = *(unsigned __int8 *)(v29 + 4);
      v35 = *(_DWORD *)v29 == 875982956;
      v36 = 100;
LABEL_49:
      if (v35 && v34 == v36)
      {
        v39 = "__riscv_float_abi_double";
        goto LABEL_56;
      }
      goto LABEL_53;
    }
LABEL_54:
    v39 = "__riscv_float_abi_single";
    goto LABEL_56;
  }
LABEL_53:
  v39 = "__riscv_float_abi_soft";
LABEL_56:
  v57[0] = v39;
  v58 = 259;
  v55[0] = "1";
  v56 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  if (v32 == 6 && *(_DWORD *)v31 == 863005801 && *(_WORD *)(v31 + 4) == 25906)
  {
    v57[0] = "__riscv_abi_rve";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  }
  v57[0] = "__riscv_arch_test";
  v58 = 259;
  v55[0] = "1";
  v56 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  v41 = *(_QWORD *)(a1 + 416);
  v42 = *(_QWORD **)(v41 + 24);
  v43 = (_QWORD *)(v41 + 32);
  if (v42 != (_QWORD *)(v41 + 32))
  {
    do
    {
      if (*((char *)v42 + 55) < 0)
      {
        sub_22E3BB2B4(__dst, (void *)v42[4], v42[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v42 + 2);
        v54 = v42[6];
      }
      if (*((char *)v42 + 79) < 0)
      {
        sub_22E3BB2B4(__p, (void *)v42[7], v42[8]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v42 + 7);
        v51 = v42[9];
      }
      v52 = v42[10];
      v44 = (void **)__dst[0];
      if (v54 >= 0)
        v44 = __dst;
      v45 = (void *)(HIBYTE(v54) & 0x7F);
      if (v54 < 0)
        v45 = __dst[1];
      v58 = 1283;
      v57[0] = "__riscv_";
      v57[2] = v44;
      v57[3] = v45;
      v56 = 264;
      LODWORD(v55[0]) = 1000000 * v52 + 1000 * HIDWORD(v52);
      sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
      if (SHIBYTE(v51) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v54) < 0)
        operator delete(__dst[0]);
      v46 = (_QWORD *)v42[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v42[2];
          v21 = *v47 == (_QWORD)v42;
          v42 = v47;
        }
        while (!v21);
      }
      v42 = v47;
    }
    while (v47 != v43);
  }
  if ((llvm::RISCVISAInfo::hasExtension() & 1) != 0)
  {
    v57[0] = "__riscv_mul";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__riscv_div";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__riscv_muldiv";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  }
  if (llvm::RISCVISAInfo::hasExtension())
  {
    v57[0] = "__riscv_atomic";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    if (v7 == 32)
    {
      v57[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
      v58 = 259;
      v55[0] = "1";
      v56 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    }
  }
  if (v49)
  {
    v57[0] = "__riscv_flen";
    v58 = 259;
    v56 = 264;
    LODWORD(v55[0]) = v49;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__riscv_fdiv";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__riscv_fsqrt";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  }
  if (v16)
  {
    v57[0] = "__riscv_v_min_vlen";
    v58 = 259;
    v56 = 264;
    LODWORD(v55[0]) = v16;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__riscv_v_elen";
    v58 = 259;
    v56 = 264;
    LODWORD(v55[0]) = v18;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
    v57[0] = "__riscv_v_elen_fp";
    v58 = 259;
    v56 = 264;
    LODWORD(v55[0]) = v17;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  }
  if (llvm::RISCVISAInfo::hasExtension())
  {
    v57[0] = "__riscv_compressed";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  }
  result = llvm::RISCVISAInfo::hasExtension();
  if ((_DWORD)result)
  {
    v57[0] = "__riscv_vector";
    v58 = 259;
    v55[0] = "1";
    v56 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v57, (llvm::Twine *)v55);
  }
  return result;
}

uint64_t sub_22F202178(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 **a6)
{
  llvm::RISCVISAInfo *v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  void *v25;
  void **v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  size_t v47;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  __int16 v53;
  void ***v54;
  void **v55;
  int64x2_t v56;
  char *v57;
  char **v58;
  char v59;
  uint64_t v60;
  int v61;
  void **v62;
  void *__p[2];
  uint64_t v64;
  char *v65;
  llvm::RISCVISAInfo *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  llvm::RISCVISAInfo *v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 56) == 32)
    *(_BYTE *)(*sub_22E80ABE0(a2, "64bit", 5uLL) + 8) = 1;
  llvm::RISCVISAInfo::parseFeatures();
  if ((v71 & 1) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v64 = 0;
    v56.i32[0] = 0;
    v59 = 0;
    v60 = 0;
    v61 = 1;
    v57 = 0;
    v58 = 0;
    v56.i64[1] = 0;
    v55 = (void **)(MEMORY[0x24BED83D8] + 16);
    v62 = __p;
    llvm::raw_ostream::SetBufferAndMode();
    if ((v71 & 1) != 0 && (v12 = v70, v70 = 0, v54 = &v55, v12))
    {
      if ((*(unsigned int (**)(llvm::RISCVISAInfo *, _QWORD))(*(_QWORD *)v12 + 48))(v12, MEMORY[0x24BED7780]))
      {
        v13 = (uint64_t *)*((_QWORD *)v12 + 1);
        v14 = (uint64_t *)*((_QWORD *)v12 + 2);
        if (v13 == v14)
        {
          v15 = 0;
        }
        else
        {
          v15 = 0;
          do
          {
            v69 = v15;
            v16 = *v13;
            *v13 = 0;
            v67 = v16;
            sub_22F202C38(&v68, &v67, (llvm::raw_ostream **)&v54);
            sub_22F2436E4(&v69, &v68, &v51);
            v15 = (char *)v51;
            *(_QWORD *)&v51 = 0;
            if (v68)
              (*(void (**)(char *))(*(_QWORD *)v68 + 8))(v68);
            v17 = v67;
            v67 = 0;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            if (v69)
              (*(void (**)(char *))(*(_QWORD *)v69 + 8))(v69);
            ++v13;
          }
          while (v13 != v14);
        }
        v65 = v15;
        v18 = *(void (**)(void))(*(_QWORD *)v12 + 8);
        goto LABEL_77;
      }
      v66 = v12;
      sub_22F202C38(&v65, &v66, (llvm::raw_ostream **)&v54);
      if (v66)
      {
        v18 = *(void (**)(void))(*(_QWORD *)v66 + 8);
LABEL_77:
        v18();
      }
    }
    else
    {
      v65 = 0;
    }
    *(_QWORD *)(a3 + 312) = 0x1C00000000;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v51 = (unint64_t)(a3 + 320);
    v52 = (char *)a3;
    v53 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v42 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v42)
    {
      v43 = *(_QWORD *)(a3 + 768);
      v44 = 56 * v42;
      do
      {
        if (*(char *)(v43 + v44 - 9) < 0)
          operator delete(*(void **)(v43 + v44 - 32));
        v44 -= 56;
      }
      while (v44);
    }
    *(_DWORD *)(a3 + 776) = 0;
    v45 = *((_BYTE *)v62 + 23);
    if (v45 >= 0)
      v46 = v62;
    else
      v46 = *v62;
    if (v45 >= 0)
      v47 = v45 & 0x7F;
    else
      v47 = (size_t)v62[1];
    sub_22E3B89A8((unsigned __int8 **)&v51, v46, v47);
    sub_22E3BB0B8((uint64_t)&v51);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v55);
    if (SHIBYTE(v64) < 0)
      operator delete(__p[0]);
    v41 = 0;
    goto LABEL_95;
  }
  v49 = a1;
  v50 = a4;
  llvm::RISCVISAInfo::toFeatureVector(v70);
  v20 = *a6;
  v19 = a6[1];
  if (*a6 != v19)
  {
    do
    {
      if (*((char *)v20 + 23) < 0)
      {
        sub_22E3BB2B4(__p, *(void **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v21 = *v20;
        v64 = *((_QWORD *)v20 + 2);
        *(_OWORD *)__p = v21;
      }
      v23 = (_OWORD *)*((_QWORD *)&v51 + 1);
      v22 = v51;
      v24 = v51;
      if ((_QWORD)v51 != *((_QWORD *)&v51 + 1))
      {
        if (v64 >= 0)
          v25 = (void *)(HIBYTE(v64) & 0x7F);
        else
          v25 = __p[1];
        if (v64 >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        v24 = v51;
        do
        {
          v27 = *(_BYTE *)(v24 + 23);
          v28 = v27 & 0x7F;
          if (v27 >= 0)
            v29 = (void *)(v27 & 0x7F);
          else
            v29 = *(void **)(v24 + 8);
          if (v29 == v25)
          {
            if ((*(_BYTE *)(v24 + 23) & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v24, v26, *(_QWORD *)(v24 + 8)))
                goto LABEL_45;
            }
            else
            {
              if ((v27 & 0x7F) == 0)
                goto LABEL_45;
              v30 = 0;
              while (*(unsigned __int8 *)(v24 + v30) == *((unsigned __int8 *)v26 + v30))
              {
                if (v28 == ++v30)
                  goto LABEL_45;
              }
            }
          }
          v24 += 24;
        }
        while (v24 != *((_QWORD *)&v51 + 1));
        v24 = *((_QWORD *)&v51 + 1);
      }
LABEL_45:
      if (v24 == *((_QWORD *)&v51 + 1))
      {
        if (*((_QWORD *)&v51 + 1) >= (unint64_t)v52)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v51 + 1) - v51) >> 3) + 1;
          if (v32 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((uint64_t)&v52[-v51] >> 3) > v32)
            v32 = 0x5555555555555556 * ((uint64_t)&v52[-v51] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3) >= 0x555555555555555)
            v33 = 0xAAAAAAAAAAAAAAALL;
          else
            v33 = v32;
          v58 = &v52;
          if (v33)
          {
            if (v33 > 0xAAAAAAAAAAAAAAALL)
              sub_22E3B3F8C();
            v34 = (char *)operator new(24 * v33);
          }
          else
          {
            v34 = 0;
          }
          v36 = &v34[8 * ((uint64_t)(*((_QWORD *)&v51 + 1) - v51) >> 3)];
          if (SHIBYTE(v64) < 0)
          {
            sub_22E3BB2B4(v36, __p[0], (unint64_t)__p[1]);
            v23 = (_OWORD *)*((_QWORD *)&v51 + 1);
            v22 = v51;
          }
          else
          {
            *(_OWORD *)v36 = *(_OWORD *)__p;
            *((_QWORD *)v36 + 2) = v64;
          }
          if (v23 == (_OWORD *)v22)
          {
            v39 = vdupq_n_s64(v22);
            v37 = v36;
          }
          else
          {
            v37 = v36;
            do
            {
              v38 = *(_OWORD *)((char *)v23 - 24);
              *((_QWORD *)v37 - 1) = *((_QWORD *)v23 - 1);
              *(_OWORD *)(v37 - 24) = v38;
              v37 -= 24;
              *((_QWORD *)v23 - 2) = 0;
              *((_QWORD *)v23 - 1) = 0;
              *((_QWORD *)v23 - 3) = 0;
              v23 = (_OWORD *)((char *)v23 - 24);
            }
            while (v23 != (_OWORD *)v22);
            v39 = (int64x2_t)v51;
          }
          v35 = v36 + 24;
          *(_QWORD *)&v51 = v37;
          *((_QWORD *)&v51 + 1) = v36 + 24;
          v56 = v39;
          v40 = v52;
          v52 = &v34[24 * v33];
          v57 = v40;
          v55 = (void **)v39.i64[0];
          sub_22E3B8B94((uint64_t)&v55);
        }
        else
        {
          if (SHIBYTE(v64) < 0)
          {
            sub_22E3BB2B4(*((_BYTE **)&v51 + 1), __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v31 = *(_OWORD *)__p;
            *(_QWORD *)(*((_QWORD *)&v51 + 1) + 16) = v64;
            *v23 = v31;
          }
          v35 = (char *)v23 + 24;
        }
        *((_QWORD *)&v51 + 1) = v35;
      }
      if (SHIBYTE(v64) < 0)
        operator delete(__p[0]);
      v20 = (__int128 *)((char *)v20 + 24);
    }
    while (v20 != v19);
  }
  v41 = sub_22F424A84(v49, (uint64_t)a2, a3, v50, a5, (unsigned __int8 **)&v51);
  v55 = (void **)&v51;
  sub_22E3B3CC8(&v55);
LABEL_95:
  sub_22E80AE90((uint64_t)&v70);
  return v41;
}

uint64_t sub_22F202744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  _BOOL8 v7;

  v3 = *(_DWORD *)(a1 + 56);
  result = v3 == 32;
  if (a3 == 7)
  {
    v7 = v3 != 32;
    if (*(_DWORD *)a2 == 1668508018 && *(_DWORD *)(a2 + 3) == 842233443)
      return v7;
    if (*(_DWORD *)a2 != 1668508018 || *(_DWORD *)(a2 + 3) != 875984483)
      goto LABEL_21;
  }
  else
  {
    if (a3 != 5)
      goto LABEL_21;
    if (*(_DWORD *)a2 == 1668508018 && *(_BYTE *)(a2 + 4) == 118)
      return 1;
    if (*(_DWORD *)a2 != 1768043574 || *(_BYTE *)(a2 + 4) != 116)
    {
LABEL_21:
      result = llvm::RISCVISAInfo::isSupportedExtensionFeature();
      if ((_DWORD)result)
        return llvm::RISCVISAInfo::hasExtension();
    }
  }
  return result;
}

BOOL sub_22F202850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  const void *v17;
  __int128 *p_dst;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  size_t v27;
  unsigned __int8 *v29[3];
  __int16 v30;
  llvm::raw_ostream *v31;
  __int128 __dst;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  void *__p[2];
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  llvm::Triple::isArch64Bit((llvm::Triple *)(a1 + 32));
  llvm::RISCVISAInfo::parseFeatures();
  v5 = v48;
  if ((v48 & 1) == 0)
  {
    v6 = v47;
    v47 = 0;
    v7 = *(_QWORD *)(a1 + 416);
    *(_QWORD *)(a1 + 416) = v6;
    if (v7)
    {
      sub_22F2E06C8(v7 + 24, *(_QWORD **)(v7 + 32));
      MEMORY[0x2348A0E9C](v7, 0x1020C401F42C5C2);
    }
    if (*(char *)(a1 + 391) < 0)
    {
      if (*(_QWORD *)(a1 + 376))
        goto LABEL_56;
    }
    else if (*(_BYTE *)(a1 + 391))
    {
      goto LABEL_56;
    }
    v14 = llvm::RISCVISAInfo::computeDefaultABI(*(llvm::RISCVISAInfo **)(a1 + 416));
    if (!v14)
    {
      __dst = 0uLL;
      v33 = 0;
LABEL_35:
      v21 = (void **)(a1 + 368);
      if (*(char *)(a1 + 391) < 0)
        operator delete(*v21);
      *(_OWORD *)v21 = __dst;
      *(_QWORD *)(a1 + 384) = v33;
      goto LABEL_56;
    }
    v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v17 = (const void *)v14;
    if (v15 >= 0x17)
    {
      v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v19 = v15 | 7;
      v20 = v19 + 1;
      p_dst = (__int128 *)operator new(v19 + 1);
      *((_QWORD *)&__dst + 1) = v16;
      v33 = v20 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v15;
      p_dst = &__dst;
      if (!v15)
        goto LABEL_34;
    }
    memmove(p_dst, v17, v16);
LABEL_34:
    *((_BYTE *)p_dst + v16) = 0;
    goto LABEL_35;
  }
  __p[0] = 0;
  __p[1] = 0;
  v41 = 0;
  DWORD2(__dst) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&__dst = MEMORY[0x24BED83D8] + 16;
  v39 = __p;
  llvm::raw_ostream::SetBufferAndMode();
  if ((v48 & 1) != 0 && (v8 = v47, v47 = 0, v31 = (llvm::raw_ostream *)&__dst, v8))
  {
    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v8 + 48))(v8, MEMORY[0x24BED7780]))
    {
      v9 = (uint64_t *)v8[1];
      v10 = (uint64_t *)v8[2];
      if (v9 == v10)
      {
        v11 = 0;
      }
      else
      {
        v11 = 0;
        do
        {
          v46 = v11;
          v12 = *v9;
          *v9 = 0;
          v44 = v12;
          sub_22F202C38(&v45, &v44, &v31);
          sub_22F2436E4(&v46, &v45, v29);
          v11 = (char *)v29[0];
          v29[0] = 0;
          if (v45)
            (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
          v13 = v44;
          v44 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          if (v46)
            (*(void (**)(char *))(*(_QWORD *)v46 + 8))(v46);
          ++v9;
        }
        while (v9 != v10);
      }
      v42 = v11;
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
    else
    {
      v43 = v8;
      sub_22F202C38(&v42, &v43, &v31);
      if (v43)
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
    }
  }
  else
  {
    v42 = 0;
  }
  *(_QWORD *)(a3 + 312) = 0x1C00000000;
  if (*(char *)(a3 + 311) < 0)
  {
    **(_BYTE **)(a3 + 288) = 0;
    *(_QWORD *)(a3 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a3 + 288) = 0;
    *(_BYTE *)(a3 + 311) = 0;
  }
  v29[0] = (unsigned __int8 *)(a3 + 320);
  v29[1] = 0;
  v29[2] = (unsigned __int8 *)a3;
  v30 = 1;
  *(_BYTE *)(a3 + 320) = 0;
  *(_DWORD *)(a3 + 664) = 0;
  v22 = *(unsigned int *)(a3 + 776);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(a3 + 768);
    v24 = 56 * v22;
    do
    {
      if (*(char *)(v23 + v24 - 9) < 0)
        operator delete(*(void **)(v23 + v24 - 32));
      v24 -= 56;
    }
    while (v24);
  }
  *(_DWORD *)(a3 + 776) = 0;
  v25 = *((_BYTE *)v39 + 23);
  if (v25 >= 0)
    v26 = v39;
  else
    v26 = *v39;
  if (v25 >= 0)
    v27 = v25 & 0x7F;
  else
    v27 = (size_t)v39[1];
  sub_22E3B89A8(v29, v26, v27);
  sub_22E3BB0B8((uint64_t)v29);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
LABEL_56:
  sub_22E80AE90((uint64_t)&v47);
  return (v5 & 1) == 0;
}

uint64_t sub_22F202C38(_QWORD *a1, _QWORD *a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  uint64_t v7;
  const char *v8;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED5778]);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    if (*(char *)(v7 + 31) >= 0)
      v8 = (const char *)(v7 + 8);
    else
      v8 = *(const char **)(v7 + 8);
    llvm::raw_ostream::write(*a3, v8);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v7 = 0;
  }
  *a1 = v7;
  return result;
}

BOOL sub_22F202CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 5)
    return *(_DWORD *)a2 == 1918988403 && *(_BYTE *)(a2 + 4) == 99;
  if (a3 == 9)
    return *(_QWORD *)a2 == 0x616F6C6674666F73 && *(_BYTE *)(a2 + 8) == 116 && *(_BYTE *)(a1 + 361) != 0;
  return 0;
}

uint64_t sub_22F202D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;

  v3 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  do
  {
    v5 = *(__int128 *)((char *)&xmmword_24FC7AC58 + v3);
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      v7 = *(__int128 *)((char *)&xmmword_24FC7AC58 + v3);
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v7;
      v4 = *(_DWORD *)(a2 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a2 + 16 * v4) = v5;
    v4 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v4;
    v3 += 24;
  }
  while (v3 != 912);
  return result;
}

void sub_22F202DD8(_DWORD *a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v5;
  int v6;
  uint64_t v7;
  char **v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  const char *v21;
  int v22;
  int v23;
  uint64_t v24;
  char **v25;
  void *__p[2];
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  uint64_t v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;

  sub_22F43E2A0((uint64_t)a1, a2, a3);
  if (a1[17] != 14)
  {
    v6 = a1[91];
    if (v6)
    {
      v7 = 0;
      v8 = off_24FC7AFE8;
      while (*(_DWORD *)((char *)&xmmword_24FC7AC58 + v7 + 16) != v6)
      {
        v7 += 24;
        if (v7 == 912)
          goto LABEL_10;
      }
      v8 = (char **)((char *)&xmmword_24FC7AC58 + v7);
LABEL_10:
      v9 = *((_DWORD *)v8 + 5);
      if (v9 == 1)
      {
        v5 = "__sparc_v9__";
        goto LABEL_3;
      }
      if (v9)
        goto LABEL_14;
    }
    v36[0] = "__sparcv8";
    v37 = 259;
    v34[0] = "1";
    v35 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
    v36[0] = "__sparcv8__";
    v37 = 259;
    v34[0] = "1";
    v35 = 259;
    goto LABEL_13;
  }
  v5 = "__sparcv8";
LABEL_3:
  v36[0] = v5;
  v37 = 259;
  v34[0] = "1";
  v35 = 259;
LABEL_13:
  sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
LABEL_14:
  if (a1[16] != 10)
    goto LABEL_66;
  v31 = 0;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v36[0] = "__sparc_v8__";
  v37 = 259;
  v33 = 0;
  v34[0] = "1";
  v35 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
  v36[0] = "__leon__";
  v37 = 259;
  v34[0] = "1";
  v35 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
  v10 = "2";
  switch(a1[91])
  {
    case 0x11:
      v11 = "__ma2150";
      goto LABEL_22;
    case 0x12:
      v11 = "__ma2155";
      goto LABEL_22;
    case 0x13:
      v11 = "__ma2450";
      goto LABEL_22;
    case 0x14:
      v11 = "__ma2455";
LABEL_22:
      MEMORY[0x2348A0C14](&v31, v11);
      v10 = "2";
      break;
    case 0x15:
      break;
    case 0x16:
      v12 = "__ma2080";
      goto LABEL_27;
    case 0x17:
      v12 = "__ma2085";
      goto LABEL_27;
    case 0x18:
      v12 = "__ma2480";
      goto LABEL_27;
    case 0x19:
      v12 = "__ma2485";
LABEL_27:
      MEMORY[0x2348A0C14](&v31, v12);
      goto LABEL_28;
    case 0x1A:
LABEL_28:
      v10 = "3";
      break;
    default:
      MEMORY[0x2348A0C14](&v31, "__ma2100");
      v10 = "1";
      break;
  }
  MEMORY[0x2348A0C14](&v28, v10);
  v13 = HIBYTE(v33) & 0x7F;
  if (v33 < 0)
    v13 = v32;
  if (v13)
  {
    v37 = 260;
    v36[0] = &v31;
    v34[0] = "1";
    v35 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
    if (v33 >= 0)
      v14 = HIBYTE(v33) & 0x7F;
    else
      v14 = v32;
    sub_22E3B8BF4((uint64_t)__p, v14 + 2);
    if (v27 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if (v14)
    {
      if (v33 >= 0)
        v16 = &v31;
      else
        v16 = v31;
      memmove(v15, v16, v14);
    }
    strcpy((char *)v15 + v14, "__");
    v37 = 260;
    v36[0] = __p;
    v34[0] = "1";
    v35 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  if (v30 >= 0)
    v17 = HIBYTE(v30) & 0x7F;
  else
    v17 = v29;
  if (v17 == 1)
  {
    if (v30 >= 0)
      v18 = HIBYTE(v30);
    else
      v18 = v29;
    if (v30 >= 0)
      v19 = &v28;
    else
      v19 = v28;
    v20 = memcmp(v19, "2", v18 != 0);
    if (v18 != 1 || v20)
    {
      v22 = memcmp(v19, "3", v18 != 0);
      if (v18 != 1 || v22)
        goto LABEL_62;
      v36[0] = "__ma2x8x";
      v37 = 259;
      v34[0] = "1";
      v35 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
      v21 = "__ma2x8x__";
    }
    else
    {
      v36[0] = "__ma2x5x";
      v37 = 259;
      v34[0] = "1";
      v35 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
      v21 = "__ma2x5x__";
    }
    v36[0] = v21;
    v37 = 259;
    v34[0] = "1";
    v35 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
  }
LABEL_62:
  v36[0] = "__myriad2__";
  v37 = 259;
  v35 = 260;
  v34[0] = &v28;
  sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
  v36[0] = "__myriad2";
  v37 = 259;
  v35 = 260;
  v34[0] = &v28;
  sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
  if (SHIBYTE(v30) < 0)
    operator delete(v28);
  if (SHIBYTE(v33) < 0)
    operator delete(v31);
LABEL_66:
  v23 = a1[91];
  if (v23)
  {
    v24 = 0;
    v25 = off_24FC7AFE8;
    while (*(_DWORD *)((char *)&xmmword_24FC7AC58 + v24 + 16) != v23)
    {
      v24 += 24;
      if (v24 == 912)
        goto LABEL_72;
    }
    v25 = (char **)((char *)&xmmword_24FC7AC58 + v24);
LABEL_72:
    if (*((_DWORD *)v25 + 5) == 1)
    {
      v36[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
      v37 = 259;
      v34[0] = "1";
      v35 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
      v36[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
      v37 = 259;
      v34[0] = "1";
      v35 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
      v36[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
      v37 = 259;
      v34[0] = "1";
      v35 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
      v36[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
      v37 = 259;
      v34[0] = "1";
      v35 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v36, (llvm::Twine *)v34);
    }
  }
}

uint64_t sub_22F2033B8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  __int128 v4;
  unint64_t v5;
  uint64_t result;
  __int128 v7;

  for (i = 0; i != 912; i += 24)
  {
    if (*(_DWORD *)((char *)&xmmword_24FC7AC58 + i + 20) == 1)
    {
      v4 = *(__int128 *)((char *)&xmmword_24FC7AC58 + i);
      v5 = *(unsigned int *)(a2 + 8);
      if (v5 >= *(unsigned int *)(a2 + 12))
      {
        v7 = *(__int128 *)((char *)&xmmword_24FC7AC58 + i);
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v4 = v7;
        v5 = *(unsigned int *)(a2 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a2 + 16 * v5) = v4;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t sub_22F20345C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;

  v3 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  do
  {
    v5 = *(__int128 *)((char *)&xmmword_24FC7EC88 + v3);
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      v7 = *(__int128 *)((char *)&xmmword_24FC7EC88 + v3);
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v7;
      v4 = *(_DWORD *)(a2 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a2 + 16 * v4) = v5;
    v4 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v4;
    v3 += 24;
  }
  while (v3 != 312);
  return result;
}

BOOL sub_22F2034F8(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  char v4;
  int v5;
  BOOL v8;
  _BOOL4 v14;

  if (a3 == 7)
  {
    if (*(_DWORD *)a2 != 1953724787 || *(_DWORD *)((char *)a2 + 3) != 2053989748)
      goto LABEL_51;
    v4 = 1;
    goto LABEL_60;
  }
  v5 = *(_DWORD *)(a1 + 392);
  if (a3 == 5)
  {
    if (*(_DWORD *)a2 == 1751347809 && *((_BYTE *)a2 + 4) == 56)
    {
      v8 = v5 <= 7;
    }
    else
    {
      if (*(_DWORD *)a2 != 1751347809 || *((_BYTE *)a2 + 4) != 57)
        goto LABEL_51;
      v8 = v5 <= 8;
    }
    goto LABEL_57;
  }
  if (a3 != 2)
  {
    if (a3 == 3)
    {
      if (*a2 != 29800 || *((_BYTE *)a2 + 2) != 109)
        goto LABEL_51;
      v4 = *(_BYTE *)(a1 + 396);
      goto LABEL_60;
    }
    if (a3 != 6)
    {
LABEL_51:
      v4 = 0;
      v14 = 0;
      return v4 && v14;
    }
    if (*(_DWORD *)a2 == 1751347809 && a2[2] == 12337)
    {
      v8 = v5 <= 9;
    }
    else if (*(_DWORD *)a2 == 1751347809 && a2[2] == 12593)
    {
      v8 = v5 <= 10;
    }
    else if (*(_DWORD *)a2 == 1751347809 && a2[2] == 12849)
    {
      v8 = v5 <= 11;
    }
    else if (*(_DWORD *)a2 == 1751347809 && a2[2] == 13105)
    {
      v8 = v5 <= 12;
    }
    else
    {
      if (*(_DWORD *)a2 != 1751347809 || a2[2] != 13361)
        goto LABEL_51;
      v8 = v5 <= 13;
    }
LABEL_57:
    v4 = !v8;
LABEL_60:
    v14 = 1;
    return v4 && v14;
  }
  v4 = *(_BYTE *)(a1 + 397);
  v14 = *a2 == 30838;
  if (*a2 != 30838)
    v4 = 0;
  return v4 && v14;
}

uint64_t sub_22F20369C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  int v4;
  BOOL v5;

  v3 = 0;
  v4 = *(_DWORD *)(a1 + 364);
  v5 = 0;
  switch(a3)
  {
    case 7:
      v3 = v4 > 0;
      if (*(_DWORD *)a2 == 1684892019 && *(_DWORD *)(a2 + 3) == 942813540)
        goto LABEL_70;
      if (*(_DWORD *)a2 != 1836020833 || *(_DWORD *)(a2 + 3) != 1935894893)
        goto LABEL_66;
      v3 = *(_BYTE *)(a1 + 372);
      goto LABEL_70;
    case 8:
      if (*(_QWORD *)a2 != 0x7478652D6E676973)
        goto LABEL_66;
      v3 = *(_BYTE *)(a1 + 369);
      goto LABEL_70;
    case 9:
      if (*(_QWORD *)a2 != 0x6C61632D6C696174 || *(_BYTE *)(a2 + 8) != 108)
        goto LABEL_66;
      v3 = *(_BYTE *)(a1 + 375);
      goto LABEL_70;
    case 10:
      if (*(_QWORD *)a2 != 0x6C617669746C756DLL || *(_WORD *)(a2 + 8) != 25973)
        goto LABEL_66;
      v3 = *(_BYTE *)(a1 + 374);
      goto LABEL_70;
    case 11:
      if (*(_QWORD *)a2 != 0x6D656D2D6B6C7562 || *(_QWORD *)(a2 + 3) != 0x79726F6D656D2D6BLL)
        goto LABEL_66;
      v3 = *(_BYTE *)(a1 + 371);
      goto LABEL_70;
    case 12:
      v3 = v4 > 1;
      if (*(_QWORD *)a2 != 0x2D646578616C6572 || *(_DWORD *)(a2 + 8) != 1684892019)
        goto LABEL_66;
      goto LABEL_70;
    case 13:
    case 16:
    case 17:
      return v5 & (v3 != 0);
    case 14:
      v3 = *(_BYTE *)(a1 + 377);
      v5 = *(_QWORD *)a2 == 0x6465646E65747865 && *(_QWORD *)(a2 + 6) == 0x74736E6F632D6465;
      if (!v5)
        v3 = 0;
      return v5 & (v3 != 0);
    case 15:
      if (*(_QWORD *)a2 == 0x2D656C626174756DLL && *(_QWORD *)(a2 + 7) == 0x736C61626F6C672DLL)
      {
        v3 = *(_BYTE *)(a1 + 373);
      }
      else
      {
        if (*(_QWORD *)a2 != 0x636E657265666572 || *(_QWORD *)(a2 + 7) != 0x73657079742D6563)
        {
LABEL_66:
          v3 = 0;
          v5 = 0;
          return v5 & (v3 != 0);
        }
        v3 = *(_BYTE *)(a1 + 376);
      }
LABEL_70:
      v5 = 1;
      return v5 & (v3 != 0);
    case 18:
      if (*(_QWORD *)a2 != 0x6F69747065637865
        || *(_QWORD *)(a2 + 8) != 0x696C646E61682D6ELL
        || *(_WORD *)(a2 + 16) != 26478)
      {
        goto LABEL_66;
      }
      v3 = *(_BYTE *)(a1 + 370);
      goto LABEL_70;
    case 19:
      if (*(_QWORD *)a2 != 0x70706172746E6F6ELL
        || *(_QWORD *)(a2 + 8) != 0x6F7470662D676E69
        || *(_QWORD *)(a2 + 11) != 0x746E696F7470662DLL)
      {
        goto LABEL_66;
      }
      v3 = *(_BYTE *)(a1 + 368);
      goto LABEL_70;
    default:
      v5 = 0;
      return v5 & (v3 != 0);
  }
}

double sub_22F203994(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  double result;

  v3 = *(unsigned int *)(a2 + 8);
  if (v3 + 3 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(unsigned int *)(a2 + 8);
  }
  v4 = (_OWORD *)(*(_QWORD *)a2 + 16 * v3);
  *v4 = xmmword_24FC92740;
  v4[1] = *(_OWORD *)&off_24FC92750;
  *(_QWORD *)&result = 0x22F5A6905;
  v4[2] = xmmword_24FC92760;
  *(_DWORD *)(a2 + 8) += 3;
  return result;
}

uint64_t sub_22F203A00(uint64_t a1, const void ***a2, uint64_t a3)
{
  const void **v3;
  const void **v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  unint64_t v15;
  const void *v16;
  size_t v17;
  int v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  const void *v23;
  size_t v24;
  unint64_t v25;
  const void *v26;
  size_t v27;
  const void *v29;
  size_t v30;
  unint64_t v31;
  const void *v32;
  size_t v33;
  const void *v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  size_t v39;
  const void *v41;
  size_t v42;
  unint64_t v43;
  const void *v44;
  size_t v45;
  const void *v47;
  size_t v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  const void *v53;
  size_t v54;
  unint64_t v55;
  const void *v56;
  size_t v57;
  unint64_t v59;
  const void *v60;
  size_t v61;
  unint64_t v62;
  const void *v63;
  size_t v64;
  const void *v66;
  size_t v67;
  unint64_t v68;
  const void *v69;
  size_t v70;
  const void *v72;
  size_t v73;
  unint64_t v74;
  const void *v75;
  size_t v76;
  unint64_t v77;
  const void *v78;
  size_t v79;
  const void *v80;
  size_t v81;
  const void *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  BOOL v88;
  void *v89;
  size_t v90;
  size_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;

  v3 = *a2;
  v4 = a2[1];
  v5 = 1;
  if (*a2 == v4)
    return v5;
  while (2)
  {
    v8 = *((unsigned __int8 *)v3 + 23);
    v9 = (unint64_t)v3[1];
    if ((v8 & 0x80u) == 0)
      v10 = v8 & 0x7F;
    else
      v10 = (unint64_t)v3[1];
    switch(v10)
    {
      case 8uLL:
        v11 = *((unsigned __int8 *)v3 + 23);
        v12 = v3;
        if ((v8 & 0x80) != 0)
        {
          v12 = *v3;
          v11 = (unint64_t)v3[1];
        }
        if (v11 >= 8)
          v13 = 8;
        else
          v13 = v11;
        if (!memcmp(v12, "+simd128", v13) && v11 == 8)
        {
          v18 = *(_DWORD *)(a1 + 364);
          if (v18 <= 1)
            v18 = 1;
          goto LABEL_185;
        }
        v15 = v8;
        v16 = v3;
        if ((v8 & 0x80) != 0)
        {
          v16 = *v3;
          v15 = v9;
        }
        if (v15 >= 8)
          v17 = 8;
        else
          v17 = v15;
        if (!memcmp(v16, "-simd128", v17) && v15 == 8)
        {
          v18 = *(_DWORD *)(a1 + 364) & (*(int *)(a1 + 364) >> 31);
          goto LABEL_185;
        }
        v74 = v8;
        v75 = v3;
        if ((v8 & 0x80) != 0)
        {
          v75 = *v3;
          v74 = v9;
        }
        if (v74 >= 8)
          v76 = 8;
        else
          v76 = v74;
        if (!memcmp(v75, "+atomics", v76) && v74 == 8)
        {
          *(_BYTE *)(a1 + 372) = 1;
          goto LABEL_190;
        }
        v80 = v3;
        if ((v8 & 0x80) != 0)
        {
          v80 = *v3;
          v8 = v9;
        }
        if (v8 >= 8)
          v81 = 8;
        else
          v81 = v8;
        if (!memcmp(v80, "-atomics", v81) && v8 == 8)
        {
          *(_BYTE *)(a1 + 372) = 0;
          goto LABEL_190;
        }
        goto LABEL_224;
      case 9uLL:
        v19 = *((unsigned __int8 *)v3 + 23);
        v20 = v3;
        if ((v8 & 0x80) != 0)
        {
          v20 = *v3;
          v19 = (unint64_t)v3[1];
        }
        if (v19 >= 9)
          v21 = 9;
        else
          v21 = v19;
        if (!memcmp(v20, "+sign-ext", v21) && v19 == 9)
        {
          *(_BYTE *)(a1 + 369) = 1;
        }
        else
        {
          v23 = v3;
          if ((v8 & 0x80) != 0)
          {
            v23 = *v3;
            v8 = v9;
          }
          if (v8 >= 9)
            v24 = 9;
          else
            v24 = v8;
          if (memcmp(v23, "-sign-ext", v24) || v8 != 9)
            goto LABEL_224;
          *(_BYTE *)(a1 + 369) = 0;
        }
        goto LABEL_190;
      case 0xAuLL:
        v25 = *((unsigned __int8 *)v3 + 23);
        v26 = v3;
        if ((v8 & 0x80) != 0)
        {
          v26 = *v3;
          v25 = (unint64_t)v3[1];
        }
        if (v25 >= 0xA)
          v27 = 10;
        else
          v27 = v25;
        if (!memcmp(v26, "+tail-call", v27) && v25 == 10)
        {
          *(_BYTE *)(a1 + 375) = 1;
        }
        else
        {
          v29 = v3;
          if ((v8 & 0x80) != 0)
          {
            v29 = *v3;
            v8 = v9;
          }
          if (v8 >= 0xA)
            v30 = 10;
          else
            v30 = v8;
          if (memcmp(v29, "-tail-call", v30) || v8 != 10)
            goto LABEL_224;
          *(_BYTE *)(a1 + 375) = 0;
        }
        goto LABEL_190;
      case 0xBuLL:
        v31 = *((unsigned __int8 *)v3 + 23);
        v32 = v3;
        if ((v8 & 0x80) != 0)
        {
          v32 = *v3;
          v31 = (unint64_t)v3[1];
        }
        if (v31 >= 0xB)
          v33 = 11;
        else
          v33 = v31;
        if (!memcmp(v32, "+multivalue", v33) && v31 == 11)
        {
          *(_BYTE *)(a1 + 374) = 1;
        }
        else
        {
          v35 = v3;
          if ((v8 & 0x80) != 0)
          {
            v35 = *v3;
            v8 = v9;
          }
          if (v8 >= 0xB)
            v36 = 11;
          else
            v36 = v8;
          if (memcmp(v35, "-multivalue", v36) || v8 != 11)
            goto LABEL_224;
          *(_BYTE *)(a1 + 374) = 0;
        }
        goto LABEL_190;
      case 0xCuLL:
        v37 = *((unsigned __int8 *)v3 + 23);
        v38 = v3;
        if ((v8 & 0x80) != 0)
        {
          v38 = *v3;
          v37 = (unint64_t)v3[1];
        }
        if (v37 >= 0xC)
          v39 = 12;
        else
          v39 = v37;
        if (!memcmp(v38, "+bulk-memory", v39) && v37 == 12)
        {
          *(_BYTE *)(a1 + 371) = 1;
        }
        else
        {
          v41 = v3;
          if ((v8 & 0x80) != 0)
          {
            v41 = *v3;
            v8 = v9;
          }
          if (v8 >= 0xC)
            v42 = 12;
          else
            v42 = v8;
          if (memcmp(v41, "-bulk-memory", v42) || v8 != 12)
            goto LABEL_224;
          *(_BYTE *)(a1 + 371) = 0;
        }
        goto LABEL_190;
      case 0xDuLL:
        v43 = *((unsigned __int8 *)v3 + 23);
        v44 = v3;
        if ((v8 & 0x80) != 0)
        {
          v44 = *v3;
          v43 = (unint64_t)v3[1];
        }
        if (v43 >= 0xD)
          v45 = 13;
        else
          v45 = v43;
        if (!memcmp(v44, "+relaxed-simd", v45) && v43 == 13)
        {
          v18 = *(_DWORD *)(a1 + 364);
          if (v18 <= 2)
            v18 = 2;
        }
        else
        {
          v47 = v3;
          if ((v8 & 0x80) != 0)
          {
            v47 = *v3;
            v8 = v9;
          }
          if (v8 >= 0xD)
            v48 = 13;
          else
            v48 = v8;
          if (memcmp(v47, "-relaxed-simd", v48) || v8 != 13)
            goto LABEL_224;
          v18 = *(_DWORD *)(a1 + 364);
          if (v18 >= 1)
            v18 = 1;
        }
LABEL_185:
        *(_DWORD *)(a1 + 364) = v18;
        goto LABEL_190;
      case 0xFuLL:
        v49 = *((unsigned __int8 *)v3 + 23);
        v50 = v3;
        if ((v8 & 0x80) != 0)
        {
          v50 = *v3;
          v49 = (unint64_t)v3[1];
        }
        if (v49 >= 0xF)
          v51 = 15;
        else
          v51 = v49;
        if (!memcmp(v50, "+extended-const", v51) && v49 == 15)
        {
          *(_BYTE *)(a1 + 377) = 1;
        }
        else
        {
          v53 = v3;
          if ((v8 & 0x80) != 0)
          {
            v53 = *v3;
            v8 = v9;
          }
          if (v8 >= 0xF)
            v54 = 15;
          else
            v54 = v8;
          if (memcmp(v53, "-extended-const", v54) || v8 != 15)
            goto LABEL_224;
          *(_BYTE *)(a1 + 377) = 0;
        }
        goto LABEL_190;
      case 0x10uLL:
        v55 = *((unsigned __int8 *)v3 + 23);
        v56 = v3;
        if ((v8 & 0x80) != 0)
        {
          v56 = *v3;
          v55 = (unint64_t)v3[1];
        }
        if (v55 >= 0x10)
          v57 = 16;
        else
          v57 = v55;
        if (!memcmp(v56, "+mutable-globals", v57) && v55 == 16)
        {
          *(_BYTE *)(a1 + 373) = 1;
        }
        else
        {
          v59 = v8;
          v60 = v3;
          if ((v8 & 0x80) != 0)
          {
            v60 = *v3;
            v59 = v9;
          }
          if (v59 >= 0x10)
            v61 = 16;
          else
            v61 = v59;
          if (!memcmp(v60, "-mutable-globals", v61) && v59 == 16)
          {
            *(_BYTE *)(a1 + 373) = 0;
          }
          else
          {
            v77 = v8;
            v78 = v3;
            if ((v8 & 0x80) != 0)
            {
              v78 = *v3;
              v77 = v9;
            }
            if (v77 >= 0x10)
              v79 = 16;
            else
              v79 = v77;
            if (!memcmp(v78, "+reference-types", v79) && v77 == 16)
            {
              *(_BYTE *)(a1 + 376) = 1;
            }
            else
            {
              v82 = v3;
              if ((v8 & 0x80) != 0)
              {
                v82 = *v3;
                v8 = v9;
              }
              if (v8 >= 0x10)
                v83 = 16;
              else
                v83 = v8;
              if (memcmp(v82, "-reference-types", v83) || v8 != 16)
                goto LABEL_224;
              *(_BYTE *)(a1 + 376) = 0;
            }
          }
        }
        goto LABEL_190;
      case 0x13uLL:
        v62 = *((unsigned __int8 *)v3 + 23);
        v63 = v3;
        if ((v8 & 0x80) != 0)
        {
          v63 = *v3;
          v62 = (unint64_t)v3[1];
        }
        if (v62 >= 0x13)
          v64 = 19;
        else
          v64 = v62;
        if (!memcmp(v63, "+exception-handling", v64) && v62 == 19)
        {
          *(_BYTE *)(a1 + 370) = 1;
        }
        else
        {
          v66 = v3;
          if ((v8 & 0x80) != 0)
          {
            v66 = *v3;
            v8 = v9;
          }
          if (v8 >= 0x13)
            v67 = 19;
          else
            v67 = v8;
          if (memcmp(v66, "-exception-handling", v67) || v8 != 19)
            goto LABEL_224;
          *(_BYTE *)(a1 + 370) = 0;
        }
        goto LABEL_190;
      case 0x14uLL:
        v68 = *((unsigned __int8 *)v3 + 23);
        v69 = v3;
        if ((v8 & 0x80) != 0)
        {
          v69 = *v3;
          v68 = (unint64_t)v3[1];
        }
        if (v68 >= 0x14)
          v70 = 20;
        else
          v70 = v68;
        if (!memcmp(v69, "+nontrapping-fptoint", v70) && v68 == 20)
        {
          *(_BYTE *)(a1 + 368) = 1;
          goto LABEL_190;
        }
        v72 = v3;
        if ((v8 & 0x80) != 0)
        {
          v72 = *v3;
          v8 = v9;
        }
        if (v8 >= 0x14)
          v73 = 20;
        else
          v73 = v8;
        if (!memcmp(v72, "-nontrapping-fptoint", v73) && v8 == 20)
        {
          *(_BYTE *)(a1 + 368) = 0;
LABEL_190:
          v3 += 3;
          if (v3 == v4)
            return 1;
          continue;
        }
LABEL_224:
        *(_QWORD *)(a3 + 312) = 0x3800000000;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v96 = (unsigned __int8 *)(a3 + 320);
        v97 = 0;
        v98 = a3;
        v99 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v84 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v84)
        {
          v85 = *(_QWORD *)(a3 + 768);
          v86 = 56 * v84;
          do
          {
            if (*(char *)(v85 + v86 - 9) < 0)
              operator delete(*(void **)(v85 + v86 - 32));
            v86 -= 56;
          }
          while (v86);
        }
        *(_DWORD *)(a3 + 776) = 0;
        v87 = *((_BYTE *)v3 + 23);
        v88 = v87 < 0;
        if (v87 >= 0)
          v89 = v3;
        else
          v89 = (void *)*v3;
        v90 = v87 & 0x7F;
        if (v88)
          v91 = (size_t)v3[1];
        else
          v91 = v90;
        sub_22E3B89A8(&v96, v89, v91);
        v92 = v96;
        if (!v96)
        {
          v92 = (unsigned __int8 *)sub_22E3B8AAC(v97);
          v96 = v92;
        }
        v92[*v92 + 1] = 1;
        v93 = v96;
        v94 = *v96;
        *v96 = v94 + 1;
        *(_QWORD *)&v93[8 * v94 + 16] = "-target-feature";
        sub_22E3BB0B8((uint64_t)&v96);
        return 0;
      default:
        goto LABEL_224;
    }
  }
}

uint64_t sub_22F20418C(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void ***a6)
{
  const void **v10;
  const void **v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  const void *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  int64x2_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  int Key;
  const void **v66;
  const void **v67;
  unint64_t v68;
  unint64_t v69;
  const void *v70;
  size_t v71;
  int v73;
  const void **v74;
  const void **v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  size_t v79;
  int v81;
  const void **v82;
  const void **v83;
  unint64_t v84;
  unint64_t v85;
  const void *v86;
  size_t v87;
  int v89;
  const void **v90;
  const void **v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  size_t v95;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  int64x2_t v103;
  _QWORD v104[2];
  void *v105;
  uint64_t v106;
  _BYTE v107[256];
  void **v108[3];
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 56) == 42)
    sub_22F43F440(a1, a2, "sse2", 4uLL, 1);
  v105 = v107;
  v106 = 0x1000000000;
  v100 = a4;
  v101 = a5;
  llvm::X86::getFeaturesForCPU();
  v102 = (unsigned int *)a2;
  v103 = 0uLL;
  v104[0] = 0;
  v11 = *a6;
  v10 = a6[1];
  if (*a6 != v10)
  {
    v12 = 0;
    while (1)
    {
      v13 = *((_BYTE *)v11 + 23);
      v14 = (unint64_t)v11[1];
      v15 = v13 >= 0 ? (const void *)(v13 & 0x7F) : v11[1];
      if (v15 != (const void *)18)
        break;
      v16 = *((unsigned __int8 *)v11 + 23);
      v17 = v11;
      if ((*((_BYTE *)v11 + 23) & 0x80) != 0)
      {
        v17 = *v11;
        v16 = (unint64_t)v11[1];
      }
      if (v16 >= 0x12)
        v18 = 18;
      else
        v18 = v16;
      v19 = memcmp(v17, "+general-regs-only", v18);
      v20 = v104[0];
      if (v19)
        v21 = 0;
      else
        v21 = v16 == 18;
      if (!v21)
        goto LABEL_20;
      if (v12 >= v104[0])
      {
        v36 = v103.i64[0];
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v103.i64[0]) >> 3);
        v38 = v37 + 1;
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_188;
        if (0x5555555555555556 * ((v104[0] - v103.i64[0]) >> 3) > v38)
          v38 = 0x5555555555555556 * ((v104[0] - v103.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v104[0] - v103.i64[0]) >> 3) >= 0x555555555555555)
          v39 = 0xAAAAAAAAAAAAAAALL;
        else
          v39 = v38;
        v110 = v104;
        if (v39)
        {
          if (v39 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_189;
          v40 = (char *)operator new(24 * v39);
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[8 * ((uint64_t)(v12 - v103.i64[0]) >> 3)];
        *(_QWORD *)v41 = 926447661;
        v41[23] = 4;
        if (v12 == v36)
        {
          v44 = vdupq_n_s64(v12);
          v42 = &v40[24 * v37];
        }
        else
        {
          v42 = &v40[24 * v37];
          do
          {
            v43 = *(_OWORD *)(v12 - 24);
            *((_QWORD *)v42 - 1) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(v42 - 24) = v43;
            v42 -= 24;
            *(_QWORD *)(v12 - 16) = 0;
            *(_QWORD *)(v12 - 8) = 0;
            *(_QWORD *)(v12 - 24) = 0;
            v12 -= 24;
          }
          while (v12 != v36);
          v44 = v103;
          v20 = v104[0];
        }
        v29 = (unint64_t)(v41 + 24);
        v103.i64[0] = (uint64_t)v42;
        v103.i64[1] = (uint64_t)(v41 + 24);
        *(int64x2_t *)&v108[1] = v44;
        v104[0] = &v40[24 * v39];
        v109 = v20;
        v108[0] = (void **)v44.i64[0];
        sub_22E3B8B94((uint64_t)v108);
      }
      else
      {
        *(_QWORD *)v12 = 926447661;
        v28 = *(uint64_t *)((char *)v108 + 7);
        *(void ***)(v12 + 8) = v108[0];
        *(_QWORD *)(v12 + 15) = v28;
        *(_BYTE *)(v12 + 23) = 4;
        v29 = v12 + 24;
      }
      v103.i64[1] = v29;
      v45 = v104[0];
      if (v29 >= v104[0])
      {
        v46 = v103.i64[0];
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v103.i64[0]) >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_188;
        if (0x5555555555555556 * ((v104[0] - v103.i64[0]) >> 3) > v48)
          v48 = 0x5555555555555556 * ((v104[0] - v103.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v104[0] - v103.i64[0]) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v110 = v104;
        if (v49)
        {
          if (v49 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_189;
          v50 = (char *)operator new(24 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[8 * ((uint64_t)(v29 - v103.i64[0]) >> 3)];
        *(_QWORD *)v51 = 2020437293;
        v51[23] = 4;
        if (v29 == v46)
        {
          v54 = vdupq_n_s64(v29);
          v52 = &v50[24 * v47];
        }
        else
        {
          v52 = &v50[24 * v47];
          do
          {
            v53 = *(_OWORD *)(v29 - 24);
            *((_QWORD *)v52 - 1) = *(_QWORD *)(v29 - 8);
            *(_OWORD *)(v52 - 24) = v53;
            v52 -= 24;
            *(_QWORD *)(v29 - 16) = 0;
            *(_QWORD *)(v29 - 8) = 0;
            *(_QWORD *)(v29 - 24) = 0;
            v29 -= 24;
          }
          while (v29 != v46);
          v54 = v103;
          v45 = v104[0];
        }
        v12 = (unint64_t)(v51 + 24);
        v103.i64[0] = (uint64_t)v52;
        v103.i64[1] = (uint64_t)(v51 + 24);
        *(int64x2_t *)&v108[1] = v54;
        v104[0] = &v50[24 * v49];
        v109 = v45;
        v108[0] = (void **)v54.i64[0];
        sub_22E3B8B94((uint64_t)v108);
      }
      else
      {
        *(_QWORD *)v29 = 2020437293;
        *(_BYTE *)(v29 + 23) = 4;
        v12 = v29 + 24;
      }
      v103.i64[1] = v12;
      v55 = v104[0];
      if (v12 >= v104[0])
      {
        v56 = v103.i64[0];
        v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v103.i64[0]) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_188:
          abort();
        if (0x5555555555555556 * ((v104[0] - v103.i64[0]) >> 3) > v58)
          v58 = 0x5555555555555556 * ((v104[0] - v103.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v104[0] - v103.i64[0]) >> 3) >= 0x555555555555555)
          v59 = 0xAAAAAAAAAAAAAAALL;
        else
          v59 = v58;
        v110 = v104;
        if (v59)
        {
          if (v59 > 0xAAAAAAAAAAAAAAALL)
LABEL_189:
            sub_22E3B3F8C();
          v60 = (char *)operator new(24 * v59);
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[8 * ((uint64_t)(v12 - v103.i64[0]) >> 3)];
        *(_QWORD *)v61 = 1702064941;
        v61[23] = 4;
        if (v12 == v56)
        {
          v34 = vdupq_n_s64(v12);
          v62 = &v60[24 * v57];
        }
        else
        {
          v62 = &v60[24 * v57];
          do
          {
            v63 = *(_OWORD *)(v12 - 24);
            *((_QWORD *)v62 - 1) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(v62 - 24) = v63;
            v62 -= 24;
            *(_QWORD *)(v12 - 16) = 0;
            *(_QWORD *)(v12 - 8) = 0;
            *(_QWORD *)(v12 - 24) = 0;
            v12 -= 24;
          }
          while (v12 != v56);
          v34 = v103;
          v55 = v104[0];
        }
        v12 = (unint64_t)(v61 + 24);
        v103.i64[0] = (uint64_t)v62;
        v103.i64[1] = (uint64_t)(v61 + 24);
        *(int64x2_t *)&v108[1] = v34;
        v104[0] = &v60[24 * v59];
        v109 = v55;
        goto LABEL_98;
      }
      *(_QWORD *)v12 = 1702064941;
      *(_BYTE *)(v12 + 23) = 4;
LABEL_81:
      v12 += 24;
LABEL_99:
      v103.i64[1] = v12;
      v11 += 3;
      if (v11 == v10)
        goto LABEL_100;
    }
    v20 = v104[0];
LABEL_20:
    if (v12 >= v20)
    {
      v23 = v103.i64[0];
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v103.i64[0]) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_188;
      if (0x5555555555555556 * ((uint64_t)(v20 - v103.i64[0]) >> 3) > v25)
        v25 = 0x5555555555555556 * ((uint64_t)(v20 - v103.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v103.i64[0]) >> 3) >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v25;
      v110 = v104;
      if (v26)
      {
        if (v26 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_189;
        v27 = operator new(24 * v26);
      }
      else
      {
        v27 = 0;
      }
      v30 = &v27[8 * ((uint64_t)(v12 - v103.i64[0]) >> 3)];
      if (*((char *)v11 + 23) < 0)
      {
        sub_22E3BB2B4(&v27[8 * ((uint64_t)(v12 - v103.i64[0]) >> 3)], (void *)*v11, (unint64_t)v11[1]);
        v12 = v103.u64[1];
        v23 = v103.i64[0];
      }
      else
      {
        v31 = *(_OWORD *)v11;
        *((_QWORD *)v30 + 2) = v11[2];
        *(_OWORD *)v30 = v31;
      }
      if (v12 == v23)
      {
        v34 = vdupq_n_s64(v23);
        v32 = &v27[24 * v24];
      }
      else
      {
        v32 = &v27[24 * v24];
        do
        {
          v33 = *(_OWORD *)(v12 - 24);
          *((_QWORD *)v32 - 1) = *(_QWORD *)(v12 - 8);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          *(_QWORD *)(v12 - 16) = 0;
          *(_QWORD *)(v12 - 8) = 0;
          *(_QWORD *)(v12 - 24) = 0;
          v12 -= 24;
        }
        while (v12 != v23);
        v34 = v103;
      }
      v12 = (unint64_t)(v30 + 24);
      v103.i64[0] = (uint64_t)v32;
      v103.i64[1] = (uint64_t)(v30 + 24);
      *(int64x2_t *)&v108[1] = v34;
      v35 = v104[0];
      v104[0] = &v27[24 * v26];
      v109 = v35;
LABEL_98:
      v108[0] = (void **)v34.i64[0];
      sub_22E3B8B94((uint64_t)v108);
      goto LABEL_99;
    }
    if (v13 < 0)
    {
      sub_22E3BB2B4((_BYTE *)v12, (void *)*v11, v14);
    }
    else
    {
      v22 = *(_OWORD *)v11;
      *(_QWORD *)(v12 + 16) = v11[2];
      *(_OWORD *)v12 = v22;
    }
    goto LABEL_81;
  }
LABEL_100:
  v64 = sub_22F424A84(a1, (uint64_t)v102, a3, v100, v101, (unsigned __int8 **)&v103);
  if ((v64 & 1) != 0)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key != -1 && Key != (unint64_t)v102[2] && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v102 + 8 * Key) + 8))
    {
      v67 = (const void **)v103.i64[1];
      v66 = (const void **)v103.i64[0];
      if (v103.i64[0] != v103.i64[1])
      {
        while (1)
        {
          v68 = *((unsigned __int8 *)v66 + 23);
          v69 = (v68 & 0x80u) == 0 ? v68 & 0x7F : (unint64_t)v66[1];
          if (v69 == 7)
          {
            v70 = v66;
            if ((v68 & 0x80) != 0)
            {
              v70 = *v66;
              v68 = (unint64_t)v66[1];
            }
            v71 = v68 >= 7 ? 7 : v68;
            if (!memcmp(v70, "-popcnt", v71) && v68 == 7)
              break;
          }
          v66 += 3;
          if (v66 == v67)
          {
            v66 = v67;
            break;
          }
        }
      }
      if (v66 == v67)
        *(_BYTE *)(*sub_22E80ABE0((llvm::StringMapImpl *)v102, "popcnt", 6uLL) + 8) = 1;
    }
    v73 = llvm::StringMapImpl::FindKey();
    if (v73 != -1 && v73 != (unint64_t)v102[2] && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v102 + 8 * v73) + 8))
    {
      v75 = (const void **)v103.i64[1];
      v74 = (const void **)v103.i64[0];
      if (v103.i64[0] != v103.i64[1])
      {
        while (1)
        {
          v76 = *((unsigned __int8 *)v74 + 23);
          v77 = (v76 & 0x80u) == 0 ? v76 & 0x7F : (unint64_t)v74[1];
          if (v77 == 4)
          {
            v78 = v74;
            if ((v76 & 0x80) != 0)
            {
              v78 = *v74;
              v76 = (unint64_t)v74[1];
            }
            v79 = v76 >= 4 ? 4 : v76;
            if (!memcmp(v78, "-mmx", v79) && v76 == 4)
              break;
          }
          v74 += 3;
          if (v74 == v75)
          {
            v74 = v75;
            break;
          }
        }
      }
      if (v74 == v75)
        *(_BYTE *)(*sub_22E80ABE0((llvm::StringMapImpl *)v102, "mmx", 3uLL) + 8) = 1;
    }
    v81 = llvm::StringMapImpl::FindKey();
    if (v81 != -1 && v81 != (unint64_t)v102[2] && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v102 + 8 * v81) + 8))
    {
      v83 = (const void **)v103.i64[1];
      v82 = (const void **)v103.i64[0];
      if (v103.i64[0] != v103.i64[1])
      {
        while (1)
        {
          v84 = *((unsigned __int8 *)v82 + 23);
          v85 = (v84 & 0x80u) == 0 ? v84 & 0x7F : (unint64_t)v82[1];
          if (v85 == 6)
          {
            v86 = v82;
            if ((v84 & 0x80) != 0)
            {
              v86 = *v82;
              v84 = (unint64_t)v82[1];
            }
            v87 = v84 >= 6 ? 6 : v84;
            if (!memcmp(v86, "-xsave", v87) && v84 == 6)
              break;
          }
          v82 += 3;
          if (v82 == v83)
          {
            v82 = v83;
            break;
          }
        }
      }
      if (v82 == v83)
        *(_BYTE *)(*sub_22E80ABE0((llvm::StringMapImpl *)v102, "xsave", 5uLL) + 8) = 1;
    }
    v89 = llvm::StringMapImpl::FindKey();
    if (v89 != -1 && v89 != (unint64_t)v102[2] && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v102 + 8 * v89) + 8))
    {
      v91 = (const void **)v103.i64[1];
      v90 = (const void **)v103.i64[0];
      if (v103.i64[0] != v103.i64[1])
      {
        while (1)
        {
          v92 = *((unsigned __int8 *)v90 + 23);
          v93 = (v92 & 0x80u) == 0 ? v92 & 0x7F : (unint64_t)v90[1];
          if (v93 == 6)
          {
            v94 = v90;
            if ((v92 & 0x80) != 0)
            {
              v94 = *v90;
              v92 = (unint64_t)v90[1];
            }
            v95 = v92 >= 6 ? 6 : v92;
            if (!memcmp(v94, "-crc32", v95) && v92 == 6)
              break;
          }
          v90 += 3;
          if (v90 == v91)
          {
            v90 = v91;
            break;
          }
        }
      }
      if (v90 == v91)
        *(_BYTE *)(*sub_22E80ABE0((llvm::StringMapImpl *)v102, "crc32", 5uLL) + 8) = 1;
    }
  }
  v108[0] = (void **)&v103;
  sub_22E3B3CC8(v108);
  if (v105 != v107)
    free(v105);
  return v64;
}

uint64_t sub_22F204BD4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  unint64_t v18;
  const void *v19;
  size_t v20;
  unint64_t v21;
  const void *v22;
  size_t v23;
  unint64_t v25;
  const void *v26;
  size_t v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  unint64_t v32;
  const void *v33;
  size_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  unint64_t v39;
  const void *v40;
  size_t v41;
  unint64_t v42;
  const void *v43;
  size_t v44;
  unint64_t v46;
  const void *v47;
  size_t v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  unint64_t v53;
  const void *v54;
  size_t v55;
  unint64_t v56;
  const void *v57;
  size_t v58;
  const void *v60;
  size_t v61;
  unint64_t v62;
  const void *v63;
  size_t v64;
  unint64_t v66;
  const void *v67;
  size_t v68;
  unint64_t v69;
  const void *v70;
  size_t v71;
  const void *v73;
  size_t v74;
  const void *v75;
  size_t v76;
  const void *v78;
  size_t v79;
  const void *v81;
  size_t v82;
  unint64_t v84;
  const void *v85;
  size_t v86;
  const void *v88;
  size_t v89;
  const void *v90;
  size_t v91;
  char v93;
  BOOL v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  BOOL v99;
  _BOOL4 v100;
  int v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  char v109;
  int v111;
  BOOL v112;
  char v113;
  BOOL v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  BOOL v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  const void *v124;
  size_t v125;
  unint64_t v126;
  const void *v127;
  size_t v128;
  unint64_t v129;
  const void *v130;
  size_t v131;
  unint64_t v132;
  const void *v133;
  size_t v134;
  unint64_t v135;
  const void *v136;
  size_t v137;
  unint64_t v138;
  const void *v139;
  size_t v140;
  unint64_t v141;
  const void *v142;
  size_t v143;
  unint64_t v144;
  const void *v145;
  size_t v146;
  unint64_t v147;
  const void *v148;
  size_t v149;
  unint64_t v150;
  const void *v151;
  size_t v152;
  unint64_t v153;
  const void *v154;
  size_t v155;
  unint64_t v156;
  const void *v157;
  size_t v158;
  unint64_t v159;
  const void *v160;
  size_t v161;
  unint64_t v162;
  const void *v163;
  size_t v164;
  unint64_t v165;
  const void *v166;
  size_t v167;
  unint64_t v168;
  const void *v169;
  size_t v170;
  unint64_t v171;
  const void *v172;
  size_t v173;
  unint64_t v174;
  const void *v175;
  size_t v176;
  unint64_t v177;
  const void *v178;
  size_t v179;
  unint64_t v180;
  const void *v181;
  size_t v182;
  unint64_t v183;
  const void *v184;
  size_t v185;
  unint64_t v186;
  const void *v187;
  size_t v188;
  unint64_t v189;
  const void *v190;
  size_t v191;
  unint64_t v192;
  const void *v193;
  size_t v194;
  unint64_t v195;
  const void *v196;
  size_t v197;
  const void *v198;
  size_t v199;
  unint64_t v200;
  const void *v201;
  size_t v202;
  unint64_t v203;
  const void *v204;
  size_t v205;
  unint64_t v206;
  const void *v207;
  size_t v208;
  unint64_t v209;
  const void *v210;
  size_t v211;
  unint64_t v212;
  const void *v213;
  size_t v214;
  unint64_t v215;
  const void *v216;
  size_t v217;
  unint64_t v218;
  const void *v219;
  size_t v220;
  const void *v221;
  size_t v222;
  unint64_t v223;
  const void *v224;
  size_t v225;
  const void *v226;
  size_t v227;
  const void *v228;
  size_t v229;
  unint64_t v230;
  const void *v231;
  size_t v232;
  unint64_t v233;
  const void *v234;
  size_t v235;
  unint64_t v236;
  const void *v237;
  size_t v238;
  unint64_t v239;
  const void *v240;
  size_t v241;
  unint64_t v242;
  const void *v243;
  size_t v244;
  unint64_t v245;
  const void *v246;
  size_t v247;
  unint64_t v248;
  const void *v249;
  size_t v250;
  unint64_t v251;
  const void *v252;
  size_t v253;
  unint64_t v254;
  const void *v255;
  size_t v256;
  const void *v257;
  size_t v258;
  unint64_t v259;
  const void *v260;
  size_t v261;
  const void *v262;
  size_t v263;
  unint64_t v264;
  const void *v265;
  size_t v266;
  unint64_t v267;
  const void *v268;
  size_t v269;
  unint64_t v270;
  const void *v271;
  size_t v272;
  const void *v273;
  size_t v274;
  int v275;
  uint64_t v276;
  _BOOL8 v277;
  __int16 v278;
  uint64_t v279;
  unsigned __int8 *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  _QWORD v287[3];
  __int16 v288;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    while (1)
    {
      v6 = *((char *)v5 + 23);
      v7 = v5;
      if (v6 < 0)
        v7 = (_BYTE *)*v5;
      if (*v7 != 43)
        goto LABEL_345;
      v8 = *((unsigned __int8 *)v5 + 23);
      v9 = v5[1];
      v10 = (v6 & 0x80u) == 0 ? *((unsigned __int8 *)v5 + 23) : v5[1];
      switch(v10)
      {
        case 3:
          v11 = v5;
          if ((v8 & 0x80) != 0)
          {
            v11 = (const void *)*v5;
            v8 = v5[1];
          }
          if (v8 >= 3)
            v12 = 3;
          else
            v12 = v8;
          v13 = !memcmp(v11, "+kl", v12) && v8 == 3;
          if (v13)
            *(_BYTE *)(a1 + 441) = 1;
          break;
        case 4:
          v14 = *((unsigned __int8 *)v5 + 23);
          v15 = v5;
          if ((v8 & 0x80) != 0)
          {
            v15 = (const void *)*v5;
            v14 = v5[1];
          }
          if (v14 >= 4)
            v16 = 4;
          else
            v16 = v14;
          if (!memcmp(v15, "+aes", v16) && v14 == 4)
          {
            *(_BYTE *)(a1 + 376) = 1;
          }
          else
          {
            v18 = v8;
            v19 = v5;
            if ((v8 & 0x80) != 0)
            {
              v19 = (const void *)*v5;
              v18 = v9;
            }
            if (v18 >= 4)
              v20 = 4;
            else
              v20 = v18;
            if (!memcmp(v19, "+bmi", v20) && v18 == 4)
            {
              *(_BYTE *)(a1 + 384) = 1;
            }
            else
            {
              v123 = v8;
              v124 = v5;
              if ((v8 & 0x80) != 0)
              {
                v124 = (const void *)*v5;
                v123 = v9;
              }
              if (v123 >= 4)
                v125 = 4;
              else
                v125 = v123;
              if (!memcmp(v124, "+rtm", v125) && v123 == 4)
              {
                *(_BYTE *)(a1 + 387) = 1;
              }
              else
              {
                v144 = v8;
                v145 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v145 = (const void *)*v5;
                  v144 = v9;
                }
                if (v144 >= 4)
                  v146 = 4;
                else
                  v146 = v144;
                if (!memcmp(v145, "+adx", v146) && v144 == 4)
                {
                  *(_BYTE *)(a1 + 390) = 1;
                }
                else
                {
                  v165 = v8;
                  v166 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v166 = (const void *)*v5;
                    v165 = v9;
                  }
                  if (v165 >= 4)
                    v167 = 4;
                  else
                    v167 = v165;
                  if (!memcmp(v166, "+tbm", v167) && v165 == 4)
                  {
                    *(_BYTE *)(a1 + 391) = 1;
                  }
                  else
                  {
                    v186 = v8;
                    v187 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v187 = (const void *)*v5;
                      v186 = v9;
                    }
                    if (v186 >= 4)
                      v188 = 4;
                    else
                      v188 = v186;
                    if (!memcmp(v187, "+lwp", v188) && v186 == 4)
                    {
                      *(_BYTE *)(a1 + 392) = 1;
                    }
                    else
                    {
                      v206 = v8;
                      v207 = v5;
                      if ((v8 & 0x80) != 0)
                      {
                        v207 = (const void *)*v5;
                        v206 = v9;
                      }
                      if (v206 >= 4)
                        v208 = 4;
                      else
                        v208 = v206;
                      if (!memcmp(v207, "+fma", v208) && v206 == 4)
                      {
                        *(_BYTE *)(a1 + 393) = 1;
                      }
                      else
                      {
                        v223 = v8;
                        v224 = v5;
                        if ((v8 & 0x80) != 0)
                        {
                          v224 = (const void *)*v5;
                          v223 = v9;
                        }
                        if (v223 >= 4)
                          v225 = 4;
                        else
                          v225 = v223;
                        if (!memcmp(v224, "+sha", v225) && v223 == 4)
                        {
                          *(_BYTE *)(a1 + 410) = 1;
                        }
                        else
                        {
                          v236 = v8;
                          v237 = v5;
                          if ((v8 & 0x80) != 0)
                          {
                            v237 = (const void *)*v5;
                            v236 = v9;
                          }
                          if (v236 >= 4)
                            v238 = 4;
                          else
                            v238 = v236;
                          if (!memcmp(v237, "+sgx", v238) && v236 == 4)
                          {
                            *(_BYTE *)(a1 + 412) = 1;
                          }
                          else
                          {
                            v245 = v8;
                            v246 = v5;
                            if ((v8 & 0x80) != 0)
                            {
                              v246 = (const void *)*v5;
                              v245 = v9;
                            }
                            if (v245 >= 4)
                              v247 = 4;
                            else
                              v247 = v245;
                            if (!memcmp(v246, "+cx8", v247) && v245 == 4)
                            {
                              *(_BYTE *)(a1 + 413) = 1;
                            }
                            else
                            {
                              v254 = v8;
                              v255 = v5;
                              if ((v8 & 0x80) != 0)
                              {
                                v255 = (const void *)*v5;
                                v254 = v9;
                              }
                              if (v254 >= 4)
                                v256 = 4;
                              else
                                v256 = v254;
                              if (!memcmp(v255, "+pku", v256) && v254 == 4)
                              {
                                *(_BYTE *)(a1 + 424) = 1;
                              }
                              else
                              {
                                v262 = v5;
                                if ((v8 & 0x80) != 0)
                                {
                                  v262 = (const void *)*v5;
                                  v8 = v9;
                                }
                                if (v8 >= 4)
                                  v263 = 4;
                                else
                                  v263 = v8;
                                if (!memcmp(v262, "+x87", v263) && v8 == 4)
                                  *(_BYTE *)(a1 + 452) = 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 5:
          v21 = *((unsigned __int8 *)v5 + 23);
          v22 = v5;
          if ((v8 & 0x80) != 0)
          {
            v22 = (const void *)*v5;
            v21 = v5[1];
          }
          if (v21 >= 5)
            v23 = 5;
          else
            v23 = v21;
          if (!memcmp(v22, "+vaes", v23) && v21 == 5)
          {
            *(_BYTE *)(a1 + 377) = 1;
          }
          else
          {
            v25 = v8;
            v26 = v5;
            if ((v8 & 0x80) != 0)
            {
              v26 = (const void *)*v5;
              v25 = v9;
            }
            if (v25 >= 5)
              v27 = 5;
            else
              v27 = v25;
            if (!memcmp(v26, "+bmi2", v27) && v25 == 5)
            {
              *(_BYTE *)(a1 + 385) = 1;
            }
            else
            {
              v126 = v8;
              v127 = v5;
              if ((v8 & 0x80) != 0)
              {
                v127 = (const void *)*v5;
                v126 = v9;
              }
              if (v126 >= 5)
                v128 = 5;
              else
                v128 = v126;
              if (!memcmp(v127, "+f16c", v128) && v126 == 5)
              {
                *(_BYTE *)(a1 + 394) = 1;
              }
              else
              {
                v147 = v8;
                v148 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v148 = (const void *)*v5;
                  v147 = v9;
                }
                if (v147 >= 5)
                  v149 = 5;
                else
                  v149 = v147;
                if (!memcmp(v148, "+gfni", v149) && v147 == 5)
                {
                  *(_BYTE *)(a1 + 380) = 1;
                }
                else
                {
                  v168 = v8;
                  v169 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v169 = (const void *)*v5;
                    v168 = v9;
                  }
                  if (v168 >= 5)
                    v170 = 5;
                  else
                    v170 = v168;
                  if (!memcmp(v169, "+cx16", v170) && v168 == 5)
                  {
                    *(_BYTE *)(a1 + 414) = 1;
                  }
                  else
                  {
                    v189 = v8;
                    v190 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v190 = (const void *)*v5;
                      v189 = v9;
                    }
                    if (v189 >= 5)
                      v191 = 5;
                    else
                      v191 = v189;
                    if (!memcmp(v190, "+fxsr", v191) && v189 == 5)
                    {
                      *(_BYTE *)(a1 + 415) = 1;
                    }
                    else
                    {
                      v209 = v8;
                      v210 = v5;
                      if ((v8 & 0x80) != 0)
                      {
                        v210 = (const void *)*v5;
                        v209 = v9;
                      }
                      if (v209 >= 5)
                        v211 = 5;
                      else
                        v211 = v209;
                      if (!memcmp(v210, "+clwb", v211) && v209 == 5)
                      {
                        *(_BYTE *)(a1 + 426) = 1;
                      }
                      else
                      {
                        v226 = v5;
                        if ((v8 & 0x80) != 0)
                        {
                          v226 = (const void *)*v5;
                          v8 = v9;
                        }
                        if (v8 >= 5)
                          v227 = 5;
                        else
                          v227 = v8;
                        if (!memcmp(v226, "+sahf", v227) && v8 == 5)
                          *(_BYTE *)(a1 + 433) = 1;
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 6:
          v28 = *((unsigned __int8 *)v5 + 23);
          v29 = v5;
          if ((v8 & 0x80) != 0)
          {
            v29 = (const void *)*v5;
            v28 = v5[1];
          }
          if (v28 >= 6)
            v30 = 6;
          else
            v30 = v28;
          if (!memcmp(v29, "+lzcnt", v30) && v28 == 6)
          {
            *(_BYTE *)(a1 + 381) = 1;
          }
          else
          {
            v32 = v8;
            v33 = v5;
            if ((v8 & 0x80) != 0)
            {
              v33 = (const void *)*v5;
              v32 = v9;
            }
            if (v32 >= 6)
              v34 = 6;
            else
              v34 = v32;
            if (!memcmp(v33, "+rdrnd", v34) && v32 == 6)
            {
              *(_BYTE *)(a1 + 382) = 1;
            }
            else
            {
              v129 = v8;
              v130 = v5;
              if ((v8 & 0x80) != 0)
              {
                v130 = (const void *)*v5;
                v129 = v9;
              }
              if (v129 >= 6)
                v131 = 6;
              else
                v131 = v129;
              if (!memcmp(v130, "+shstk", v131) && v129 == 6)
              {
                *(_BYTE *)(a1 + 411) = 1;
              }
              else
              {
                v150 = v8;
                v151 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v151 = (const void *)*v5;
                  v150 = v9;
                }
                if (v150 >= 6)
                  v152 = 6;
                else
                  v152 = v150;
                if (!memcmp(v151, "+movbe", v152) && v150 == 6)
                {
                  *(_BYTE *)(a1 + 427) = 1;
                }
                else
                {
                  v171 = v8;
                  v172 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v172 = (const void *)*v5;
                    v171 = v9;
                  }
                  if (v171 >= 6)
                    v173 = 6;
                  else
                    v173 = v171;
                  if (!memcmp(v172, "+xsave", v173) && v171 == 6)
                  {
                    *(_BYTE *)(a1 + 416) = 1;
                  }
                  else
                  {
                    v192 = v8;
                    v193 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v193 = (const void *)*v5;
                      v192 = v9;
                    }
                    if (v192 >= 6)
                      v194 = 6;
                    else
                      v194 = v192;
                    if (!memcmp(v193, "+rdpid", v194) && v192 == 6)
                    {
                      *(_BYTE *)(a1 + 429) = 1;
                    }
                    else
                    {
                      v212 = v8;
                      v213 = v5;
                      if ((v8 & 0x80) != 0)
                      {
                        v213 = (const void *)*v5;
                        v212 = v9;
                      }
                      if (v212 >= 6)
                        v214 = 6;
                      else
                        v214 = v212;
                      if (!memcmp(v213, "+uintr", v214) && v212 == 6)
                      {
                        *(_BYTE *)(a1 + 450) = 1;
                      }
                      else
                      {
                        v228 = v5;
                        if ((v8 & 0x80) != 0)
                        {
                          v228 = (const void *)*v5;
                          v8 = v9;
                        }
                        if (v8 >= 6)
                          v229 = 6;
                        else
                          v229 = v8;
                        if (!memcmp(v228, "+crc32", v229) && v8 == 6)
                          *(_BYTE *)(a1 + 451) = 1;
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 7:
          v35 = *((unsigned __int8 *)v5 + 23);
          v36 = v5;
          if ((v8 & 0x80) != 0)
          {
            v36 = (const void *)*v5;
            v35 = v5[1];
          }
          if (v35 >= 7)
            v37 = 7;
          else
            v37 = v35;
          if (!memcmp(v36, "+pclmul", v37) && v35 == 7)
          {
            *(_BYTE *)(a1 + 378) = 1;
          }
          else
          {
            v39 = v8;
            v40 = v5;
            if ((v8 & 0x80) != 0)
            {
              v40 = (const void *)*v5;
              v39 = v9;
            }
            if (v39 >= 7)
              v41 = 7;
            else
              v41 = v39;
            if (!memcmp(v40, "+popcnt", v41) && v39 == 7)
            {
              *(_BYTE *)(a1 + 386) = 1;
            }
            else
            {
              v132 = v8;
              v133 = v5;
              if ((v8 & 0x80) != 0)
              {
                v133 = (const void *)*v5;
                v132 = v9;
              }
              if (v132 >= 7)
                v134 = 7;
              else
                v134 = v132;
              if (!memcmp(v133, "+prfchw", v134) && v132 == 7)
              {
                *(_BYTE *)(a1 + 388) = 1;
              }
              else
              {
                v153 = v8;
                v154 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v154 = (const void *)*v5;
                  v153 = v9;
                }
                if (v153 >= 7)
                  v155 = 7;
                else
                  v155 = v153;
                if (!memcmp(v154, "+rdseed", v155) && v153 == 7)
                {
                  *(_BYTE *)(a1 + 389) = 1;
                }
                else
                {
                  v174 = v8;
                  v175 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v175 = (const void *)*v5;
                    v174 = v9;
                  }
                  if (v174 >= 7)
                    v176 = 7;
                  else
                    v176 = v174;
                  if (!memcmp(v175, "+xsavec", v176) && v174 == 7)
                  {
                    *(_BYTE *)(a1 + 418) = 1;
                  }
                  else
                  {
                    v195 = v8;
                    v196 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v196 = (const void *)*v5;
                      v195 = v9;
                    }
                    if (v195 >= 7)
                      v197 = 7;
                    else
                      v197 = v195;
                    if (!memcmp(v196, "+xsaves", v197) && v195 == 7)
                    {
                      *(_BYTE *)(a1 + 419) = 1;
                    }
                    else
                    {
                      v215 = v8;
                      v216 = v5;
                      if ((v8 & 0x80) != 0)
                      {
                        v216 = (const void *)*v5;
                        v215 = v9;
                      }
                      if (v215 >= 7)
                        v217 = 7;
                      else
                        v217 = v215;
                      if (!memcmp(v216, "+mwaitx", v217) && v215 == 7)
                      {
                        *(_BYTE *)(a1 + 420) = 1;
                      }
                      else
                      {
                        v230 = v8;
                        v231 = v5;
                        if ((v8 & 0x80) != 0)
                        {
                          v231 = (const void *)*v5;
                          v230 = v9;
                        }
                        if (v230 >= 7)
                          v232 = 7;
                        else
                          v232 = v230;
                        if (!memcmp(v231, "+clzero", v232) && v230 == 7)
                        {
                          *(_BYTE *)(a1 + 421) = 1;
                        }
                        else
                        {
                          v239 = v8;
                          v240 = v5;
                          if ((v8 & 0x80) != 0)
                          {
                            v240 = (const void *)*v5;
                            v239 = v9;
                          }
                          if (v239 >= 7)
                            v241 = 7;
                          else
                            v241 = v239;
                          if (!memcmp(v240, "+widekl", v241) && v239 == 7)
                          {
                            *(_BYTE *)(a1 + 442) = 1;
                          }
                          else
                          {
                            v248 = v8;
                            v249 = v5;
                            if ((v8 & 0x80) != 0)
                            {
                              v249 = (const void *)*v5;
                              v248 = v9;
                            }
                            if (v248 >= 7)
                              v250 = 7;
                            else
                              v250 = v248;
                            if (!memcmp(v249, "+enqcmd", v250) && v248 == 7)
                            {
                              *(_BYTE *)(a1 + 440) = 1;
                            }
                            else
                            {
                              v257 = v5;
                              if ((v8 & 0x80) != 0)
                              {
                                v257 = (const void *)*v5;
                                v8 = v9;
                              }
                              if (v8 >= 7)
                                v258 = 7;
                              else
                                v258 = v8;
                              if (!memcmp(v257, "+hreset", v258) && v8 == 7)
                                *(_BYTE *)(a1 + 443) = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 8:
          v42 = *((unsigned __int8 *)v5 + 23);
          v43 = v5;
          if ((v8 & 0x80) != 0)
          {
            v43 = (const void *)*v5;
            v42 = v5[1];
          }
          if (v42 >= 8)
            v44 = 8;
          else
            v44 = v42;
          if (!memcmp(v43, "+waitpkg", v44) && v42 == 8)
          {
            *(_BYTE *)(a1 + 435) = 1;
          }
          else
          {
            v46 = v8;
            v47 = v5;
            if ((v8 & 0x80) != 0)
            {
              v47 = (const void *)*v5;
              v46 = v9;
            }
            if (v46 >= 8)
              v48 = 8;
            else
              v48 = v46;
            if (!memcmp(v47, "+movdiri", v48) && v46 == 8)
            {
              *(_BYTE *)(a1 + 436) = 1;
            }
            else
            {
              v135 = v8;
              v136 = v5;
              if ((v8 & 0x80) != 0)
              {
                v136 = (const void *)*v5;
                v135 = v9;
              }
              if (v135 >= 8)
                v137 = 8;
              else
                v137 = v135;
              if (!memcmp(v136, "+pconfig", v137) && v135 == 8)
              {
                *(_BYTE *)(a1 + 423) = 1;
              }
              else
              {
                v156 = v8;
                v157 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v157 = (const void *)*v5;
                  v156 = v9;
                }
                if (v156 >= 8)
                  v158 = 8;
                else
                  v158 = v156;
                if (!memcmp(v157, "+ptwrite", v158) && v156 == 8)
                {
                  *(_BYTE *)(a1 + 438) = 1;
                }
                else
                {
                  v177 = v8;
                  v178 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v178 = (const void *)*v5;
                    v177 = v9;
                  }
                  if (v177 >= 8)
                    v179 = 8;
                  else
                    v179 = v177;
                  if (!memcmp(v178, "+invpcid", v179) && v177 == 8)
                  {
                    *(_BYTE *)(a1 + 439) = 1;
                  }
                  else
                  {
                    v198 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v198 = (const void *)*v5;
                      v8 = v9;
                    }
                    if (v8 >= 8)
                      v199 = 8;
                    else
                      v199 = v8;
                    if (!memcmp(v198, "+avxvnni", v199) && v8 == 8)
                      *(_BYTE *)(a1 + 444) = 1;
                  }
                }
              }
            }
          }
          break;
        case 9:
          v49 = *((unsigned __int8 *)v5 + 23);
          v50 = v5;
          if ((v8 & 0x80) != 0)
          {
            v50 = (const void *)*v5;
            v49 = v5[1];
          }
          if (v49 >= 9)
            v51 = 9;
          else
            v51 = v49;
          if (!memcmp(v50, "+fsgsbase", v51) && v49 == 9)
          {
            *(_BYTE *)(a1 + 383) = 1;
          }
          else
          {
            v53 = v8;
            v54 = v5;
            if ((v8 & 0x80) != 0)
            {
              v54 = (const void *)*v5;
              v53 = v9;
            }
            if (v53 >= 9)
              v55 = 9;
            else
              v55 = v53;
            if (!memcmp(v54, "+avx512cd", v55) && v53 == 9)
            {
              *(_BYTE *)(a1 + 395) = 1;
            }
            else
            {
              v138 = v8;
              v139 = v5;
              if ((v8 & 0x80) != 0)
              {
                v139 = (const void *)*v5;
                v138 = v9;
              }
              if (v138 >= 9)
                v140 = 9;
              else
                v140 = v138;
              if (!memcmp(v139, "+avx512er", v140) && v138 == 9)
              {
                *(_BYTE *)(a1 + 400) = 1;
              }
              else
              {
                v159 = v8;
                v160 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v160 = (const void *)*v5;
                  v159 = v9;
                }
                if (v159 >= 9)
                  v161 = 9;
                else
                  v161 = v159;
                if (!memcmp(v160, "+avx512pf", v161) && v159 == 9)
                {
                  *(_BYTE *)(a1 + 401) = 1;
                }
                else
                {
                  v180 = v8;
                  v181 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v181 = (const void *)*v5;
                    v180 = v9;
                  }
                  if (v180 >= 9)
                    v182 = 9;
                  else
                    v182 = v180;
                  if (!memcmp(v181, "+avx512dq", v182) && v180 == 9)
                  {
                    *(_BYTE *)(a1 + 402) = 1;
                  }
                  else
                  {
                    v200 = v8;
                    v201 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v201 = (const void *)*v5;
                      v200 = v9;
                    }
                    if (v200 >= 9)
                      v202 = 9;
                    else
                      v202 = v200;
                    if (!memcmp(v201, "+avx512bw", v202) && v200 == 9)
                    {
                      *(_BYTE *)(a1 + 404) = 1;
                    }
                    else
                    {
                      v218 = v8;
                      v219 = v5;
                      if ((v8 & 0x80) != 0)
                      {
                        v219 = (const void *)*v5;
                        v218 = v9;
                      }
                      if (v218 >= 9)
                        v220 = 9;
                      else
                        v220 = v218;
                      if (!memcmp(v219, "+avx512vl", v220) && v218 == 9)
                      {
                        *(_BYTE *)(a1 + 405) = 1;
                      }
                      else
                      {
                        v233 = v8;
                        v234 = v5;
                        if ((v8 & 0x80) != 0)
                        {
                          v234 = (const void *)*v5;
                          v233 = v9;
                        }
                        if (v233 >= 9)
                          v235 = 9;
                        else
                          v235 = v233;
                        if (!memcmp(v234, "+xsaveopt", v235) && v233 == 9)
                        {
                          *(_BYTE *)(a1 + 417) = 1;
                        }
                        else
                        {
                          v242 = v8;
                          v243 = v5;
                          if ((v8 & 0x80) != 0)
                          {
                            v243 = (const void *)*v5;
                            v242 = v9;
                          }
                          if (v242 >= 9)
                            v244 = 9;
                          else
                            v244 = v242;
                          if (!memcmp(v243, "+wbnoinvd", v244) && v242 == 9)
                          {
                            *(_BYTE *)(a1 + 434) = 1;
                          }
                          else
                          {
                            v251 = v8;
                            v252 = v5;
                            if ((v8 & 0x80) != 0)
                            {
                              v252 = (const void *)*v5;
                              v251 = v9;
                            }
                            if (v251 >= 9)
                              v253 = 9;
                            else
                              v253 = v251;
                            if (!memcmp(v252, "+cldemote", v253) && v251 == 9)
                            {
                              *(_BYTE *)(a1 + 422) = 1;
                            }
                            else
                            {
                              v259 = v8;
                              v260 = v5;
                              if ((v8 & 0x80) != 0)
                              {
                                v260 = (const void *)*v5;
                                v259 = v9;
                              }
                              if (v259 >= 9)
                                v261 = 9;
                              else
                                v261 = v259;
                              if (!memcmp(v260, "+amx-bf16", v261) && v259 == 9)
                              {
                                *(_BYTE *)(a1 + 447) = 1;
                              }
                              else
                              {
                                v264 = v8;
                                v265 = v5;
                                if ((v8 & 0x80) != 0)
                                {
                                  v265 = (const void *)*v5;
                                  v264 = v9;
                                }
                                if (v264 >= 9)
                                  v266 = 9;
                                else
                                  v266 = v264;
                                if (!memcmp(v265, "+amx-int8", v266) && v264 == 9)
                                {
                                  *(_BYTE *)(a1 + 446) = 1;
                                }
                                else
                                {
                                  v267 = v8;
                                  v268 = v5;
                                  if ((v8 & 0x80) != 0)
                                  {
                                    v268 = (const void *)*v5;
                                    v267 = v9;
                                  }
                                  if (v267 >= 9)
                                    v269 = 9;
                                  else
                                    v269 = v267;
                                  if (!memcmp(v268, "+amx-tile", v269) && v267 == 9)
                                  {
                                    *(_BYTE *)(a1 + 445) = 1;
                                  }
                                  else
                                  {
                                    v270 = v8;
                                    v271 = v5;
                                    if ((v8 & 0x80) != 0)
                                    {
                                      v271 = (const void *)*v5;
                                      v270 = v9;
                                    }
                                    if (v270 >= 9)
                                      v272 = 9;
                                    else
                                      v272 = v270;
                                    if (!memcmp(v271, "+tsxldtrk", v272) && v270 == 9)
                                    {
                                      *(_BYTE *)(a1 + 449) = 1;
                                    }
                                    else
                                    {
                                      v273 = v5;
                                      if ((v8 & 0x80) != 0)
                                      {
                                        v273 = (const void *)*v5;
                                        v8 = v9;
                                      }
                                      if (v8 >= 9)
                                        v274 = 9;
                                      else
                                        v274 = v8;
                                      if (!memcmp(v273, "+fullbf16", v274) && v8 == 9)
                                        *(_BYTE *)(a1 + 89) = 1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 10:
          v56 = *((unsigned __int8 *)v5 + 23);
          v57 = v5;
          if ((v8 & 0x80) != 0)
          {
            v57 = (const void *)*v5;
            v56 = v5[1];
          }
          if (v56 >= 0xA)
            v58 = 10;
          else
            v58 = v56;
          if (!memcmp(v57, "+movdir64b", v58) && v56 == 10)
          {
            *(_BYTE *)(a1 + 437) = 1;
          }
          else
          {
            v60 = v5;
            if ((v8 & 0x80) != 0)
            {
              v60 = (const void *)*v5;
              v8 = v9;
            }
            if (v8 >= 0xA)
              v61 = 10;
            else
              v61 = v8;
            if (!memcmp(v60, "+serialize", v61) && v8 == 10)
              *(_BYTE *)(a1 + 448) = 1;
          }
          break;
        case 11:
          v62 = *((unsigned __int8 *)v5 + 23);
          v63 = v5;
          if ((v8 & 0x80) != 0)
          {
            v63 = (const void *)*v5;
            v62 = v5[1];
          }
          if (v62 >= 0xB)
            v64 = 11;
          else
            v64 = v62;
          if (!memcmp(v63, "+vpclmulqdq", v64) && v62 == 11)
          {
            *(_BYTE *)(a1 + 379) = 1;
          }
          else
          {
            v66 = v8;
            v67 = v5;
            if ((v8 & 0x80) != 0)
            {
              v67 = (const void *)*v5;
              v66 = v9;
            }
            if (v66 >= 0xB)
              v68 = 11;
            else
              v68 = v66;
            if (!memcmp(v67, "+avx512vnni", v68) && v66 == 11)
            {
              *(_BYTE *)(a1 + 397) = 1;
            }
            else
            {
              v141 = v8;
              v142 = v5;
              if ((v8 & 0x80) != 0)
              {
                v142 = (const void *)*v5;
                v141 = v9;
              }
              if (v141 >= 0xB)
                v143 = 11;
              else
                v143 = v141;
              if (!memcmp(v142, "+avx512bf16", v143) && v141 == 11)
              {
                *(_BYTE *)(a1 + 399) = 1;
              }
              else
              {
                v162 = v8;
                v163 = v5;
                if ((v8 & 0x80) != 0)
                {
                  v163 = (const void *)*v5;
                  v162 = v9;
                }
                if (v162 >= 0xB)
                  v164 = 11;
                else
                  v164 = v162;
                if (!memcmp(v163, "+avx512fp16", v164) && v162 == 11)
                {
                  *(_BYTE *)(a1 + 398) = 1;
                  *(_BYTE *)(a1 + 84) = 1;
                }
                else
                {
                  v183 = v8;
                  v184 = v5;
                  if ((v8 & 0x80) != 0)
                  {
                    v184 = (const void *)*v5;
                    v183 = v9;
                  }
                  if (v183 >= 0xB)
                    v185 = 11;
                  else
                    v185 = v183;
                  if (!memcmp(v184, "+avx512vbmi", v185) && v183 == 11)
                  {
                    *(_BYTE *)(a1 + 406) = 1;
                  }
                  else
                  {
                    v203 = v8;
                    v204 = v5;
                    if ((v8 & 0x80) != 0)
                    {
                      v204 = (const void *)*v5;
                      v203 = v9;
                    }
                    if (v203 >= 0xB)
                      v205 = 11;
                    else
                      v205 = v203;
                    if (!memcmp(v204, "+avx512ifma", v205) && v203 == 11)
                    {
                      *(_BYTE *)(a1 + 408) = 1;
                    }
                    else
                    {
                      v221 = v5;
                      if ((v8 & 0x80) != 0)
                      {
                        v221 = (const void *)*v5;
                        v8 = v9;
                      }
                      if (v8 >= 0xB)
                        v222 = 11;
                      else
                        v222 = v8;
                      if (!memcmp(v221, "+clflushopt", v222) && v8 == 11)
                        *(_BYTE *)(a1 + 425) = 1;
                    }
                  }
                }
              }
            }
          }
          break;
        case 12:
          v69 = *((unsigned __int8 *)v5 + 23);
          v70 = v5;
          if ((v8 & 0x80) != 0)
          {
            v70 = (const void *)*v5;
            v69 = v5[1];
          }
          if (v69 >= 0xC)
            v71 = 12;
          else
            v71 = v69;
          if (!memcmp(v70, "+avx512vbmi2", v71) && v69 == 12)
          {
            *(_BYTE *)(a1 + 407) = 1;
          }
          else
          {
            v73 = v5;
            if ((v8 & 0x80) != 0)
            {
              v73 = (const void *)*v5;
              v8 = v9;
            }
            if (v8 >= 0xC)
              v74 = 12;
            else
              v74 = v8;
            if (!memcmp(v73, "+prefetchwt1", v74) && v8 == 12)
              *(_BYTE *)(a1 + 428) = 1;
          }
          break;
        case 13:
          v75 = v5;
          if ((v8 & 0x80) != 0)
          {
            v75 = (const void *)*v5;
            v8 = v5[1];
          }
          if (v8 >= 0xD)
            v76 = 13;
          else
            v76 = v8;
          if (!memcmp(v75, "+avx512bitalg", v76) && v8 == 13)
            *(_BYTE *)(a1 + 403) = 1;
          break;
        case 16:
          v78 = v5;
          if ((v8 & 0x80) != 0)
          {
            v78 = (const void *)*v5;
            v8 = v5[1];
          }
          if (v8 >= 0x10)
            v79 = 16;
          else
            v79 = v8;
          if (!memcmp(v78, "+avx512vpopcntdq", v79) && v8 == 16)
            *(_BYTE *)(a1 + 396) = 1;
          break;
        case 19:
          v81 = v5;
          if ((v8 & 0x80) != 0)
          {
            v81 = (const void *)*v5;
            v8 = v5[1];
          }
          if (v8 >= 0x13)
            v82 = 19;
          else
            v82 = v8;
          if (!memcmp(v81, "+avx512vp2intersect", v82) && v8 == 19)
            *(_BYTE *)(a1 + 409) = 1;
          break;
        case 25:
          v84 = *((unsigned __int8 *)v5 + 23);
          v85 = v5;
          if ((v8 & 0x80) != 0)
          {
            v85 = (const void *)*v5;
            v84 = v5[1];
          }
          if (v84 >= 0x19)
            v86 = 25;
          else
            v86 = v84;
          if (!memcmp(v85, "+retpoline-indirect-calls", v86) && v84 == 25)
          {
            *(_BYTE *)(a1 + 430) = 1;
          }
          else
          {
            v88 = v5;
            if ((v8 & 0x80) != 0)
            {
              v88 = (const void *)*v5;
              v8 = v9;
            }
            if (v8 >= 0x19)
              v89 = 25;
            else
              v89 = v8;
            if (!memcmp(v88, "+retpoline-external-thunk", v89) && v8 == 25)
              *(_BYTE *)(a1 + 432) = 1;
          }
          break;
        case 28:
          v90 = v5;
          if ((v8 & 0x80) != 0)
          {
            v90 = (const void *)*v5;
            v8 = v5[1];
          }
          if (v8 >= 0x1C)
            v91 = 28;
          else
            v91 = v8;
          if (!memcmp(v90, "+retpoline-indirect-branches", v91) && v8 == 28)
            *(_BYTE *)(a1 + 431) = 1;
          break;
        default:
          break;
      }
      v93 = *((_BYTE *)v5 + 23);
      v94 = v93 < 0;
      v95 = (uint64_t *)*v5;
      if (v93 >= 0)
        v95 = v5;
      v96 = v93 & 0x7F;
      if (v94)
        v96 = v5[1];
      if (v96 == 5)
        break;
      switch(v96)
      {
        case 8:
          v97 = 0;
          v98 = bswap64(*v95);
          v99 = v98 >= 0x2B61767835313266;
          v100 = v98 > 0x2B61767835313266;
          v101 = !v99;
          v102 = v100 - v101;
          v103 = 0x100000009;
LABEL_269:
          if (v102)
            v106 = 0;
          else
            v106 = v103;
          goto LABEL_272;
        case 4:
          if (*(_DWORD *)v95 == 2021024043)
          {
            v106 = 0x100000007;
          }
          else if (*(_DWORD *)v95 == 1702064939)
          {
            v106 = 0x100000001;
          }
          else
          {
            v106 = 0;
          }
          break;
        case 7:
          if (*(_DWORD *)v95 == 1702064939 && *(_DWORD *)((char *)v95 + 3) == 841888869)
          {
            v106 = 0x100000006;
          }
          else if (*(_DWORD *)v95 ^ 0x6573732B | *(_DWORD *)((char *)v95 + 3) ^ 0x312E3465)
          {
            v106 = 0;
          }
          else
          {
            v106 = 0x100000005;
          }
          break;
        default:
          v97 = 0;
          v106 = 0;
LABEL_272:
          v107 = v106 & 0x100000000;
          if (v96 == 6
            && !v107
            && (*(_DWORD *)v95 == 1936945963 ? (v108 = *((unsigned __int16 *)v95 + 2) == 13157) : (v108 = 0), v108))
          {
            v106 = 0x100000004;
          }
          else
          {
            v109 = v97 ^ 1;
            if (v107)
              v109 = 1;
            if ((v109 & 1) == 0)
            {
              if (*(_DWORD *)v95 == 1702064939 && *((_BYTE *)v95 + 4) == 51)
              {
                v106 = 0x100000003;
              }
              else if (!(*(_DWORD *)v95 ^ 0x6573732B | *((unsigned __int8 *)v95 + 4) ^ 0x32))
              {
                v106 = 0x100000002;
              }
            }
          }
          break;
      }
      if ((v106 & 0x300000000) != 0)
        v111 = v106;
      else
        v111 = 0;
      if (*(_DWORD *)(a1 + 364) > v111)
        v111 = *(_DWORD *)(a1 + 364);
      *(_DWORD *)(a1 + 364) = v111;
      v112 = v111 > 1;
      *(_BYTE *)(a1 + 87) = v112;
      *(_BYTE *)(a1 + 88) = v112;
      v113 = *((_BYTE *)v5 + 23);
      v114 = v113 < 0;
      v115 = (uint64_t *)*v5;
      if (v113 >= 0)
        v115 = v5;
      v116 = v113 & 0x7F;
      if (v114)
        v116 = v5[1];
      switch(v116)
      {
        case 4:
          v13 = *(_DWORD *)v115 == 2020437291;
          v117 = 0x100000001;
          if (!v13)
            v117 = 0;
          break;
        case 6:
          if (*(_DWORD *)v115 ^ 0x6E64332B | *((unsigned __int16 *)v115 + 2) ^ 0x776F)
            v117 = 0;
          else
            v117 = 0x100000002;
          break;
        case 7:
          if (*(_DWORD *)v115 ^ 0x6E64332B | *(_DWORD *)((char *)v115 + 3) ^ 0x61776F6E)
            v117 = 0;
          else
            v117 = 0x100000003;
          break;
        default:
          v117 = 0;
          break;
      }
      if (v117 <= 0x100000000)
        LODWORD(v117) = 0;
      if (*(_DWORD *)(a1 + 368) > (int)v117)
        LODWORD(v117) = *(_DWORD *)(a1 + 368);
      *(_DWORD *)(a1 + 368) = v117;
      v118 = *((_BYTE *)v5 + 23);
      v119 = v118 < 0;
      v120 = (uint64_t *)*v5;
      if (v118 >= 0)
        v120 = v5;
      v121 = v118 & 0x7F;
      if (v119)
        v121 = v5[1];
      switch(v121)
      {
        case 6:
          v13 = (*(_DWORD *)v120 ^ 0x6573732B | *((unsigned __int16 *)v120 + 2) ^ 0x6134) == 0;
          v122 = 0x100000001;
          if (!v13)
            v122 = 0;
          break;
        case 5:
          if (*(_DWORD *)v120 ^ 0x616D662B | *((unsigned __int8 *)v120 + 4) ^ 0x34)
            v122 = 0;
          else
            v122 = 0x100000002;
          break;
        case 4:
          if (*(_DWORD *)v120 == 1886353451)
            v122 = 0x100000003;
          else
            v122 = 0;
          break;
        default:
          v122 = 0;
          break;
      }
      if (v122 <= 0x100000000)
        LODWORD(v122) = 0;
      if (*(_DWORD *)(a1 + 372) > (int)v122)
        LODWORD(v122) = *(_DWORD *)(a1 + 372);
      *(_DWORD *)(a1 + 372) = v122;
LABEL_345:
      v5 += 3;
      if (v5 == v4)
        goto LABEL_771;
    }
    v104 = bswap32(*(_DWORD *)v95);
    if (v104 == 727807608)
    {
      v102 = *((unsigned __int8 *)v95 + 4) - 50;
    }
    else if (v104 < 0x2B617678)
    {
      v102 = -1;
    }
    else
    {
      v102 = 1;
    }
    v103 = 0x100000008;
    v97 = 1;
    goto LABEL_269;
  }
LABEL_771:
  v275 = *(_DWORD *)(a1 + 460);
  if (v275 == 1)
  {
    v276 = a3;
    if (*(int *)(a1 + 364) < 1)
      goto LABEL_774;
  }
  else
  {
    v276 = a3;
    if (v275 == 2 && *(int *)(a1 + 364) >= 1)
    {
LABEL_774:
      *(_QWORD *)(v276 + 312) = 0x4800000000;
      if (*(char *)(v276 + 311) < 0)
      {
        **(_BYTE **)(v276 + 288) = 0;
        *(_QWORD *)(v276 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v276 + 288) = 0;
        *(_BYTE *)(v276 + 311) = 0;
      }
      v281 = (unsigned __int8 *)(v276 + 320);
      v287[0] = v276 + 320;
      v287[1] = 0;
      v287[2] = v276;
      v288 = 1;
      *(_BYTE *)(v276 + 320) = 0;
      *(_DWORD *)(v276 + 664) = 0;
      v282 = *(unsigned int *)(v276 + 776);
      if ((_DWORD)v282)
      {
        v283 = *(_QWORD *)(v276 + 768);
        v284 = 56 * v282;
        do
        {
          if (*(char *)(v283 + v284 - 9) < 0)
            operator delete(*(void **)(v283 + v284 - 32));
          v284 -= 56;
        }
        while (v284);
        LODWORD(v282) = *v281;
      }
      *(_DWORD *)(v276 + 776) = 0;
      if (*(_DWORD *)(a1 + 460) == 1)
        v285 = "sse";
      else
        v285 = "387";
      v281[v282 + 1] = 1;
      *(_BYTE *)(v276 + 320) = v282 + 1;
      *(_QWORD *)&v281[8 * v282 + 16] = v285;
      sub_22E3BB0B8((uint64_t)v287);
      return 0;
    }
  }
  v277 = sub_22F2064C8(a1, (uint64_t)"avx512f", 7);
  if (v277)
  {
    v278 = 512;
  }
  else
  {
    v277 = sub_22F2064C8(a1, (uint64_t)"avx", 3);
    if (v277)
      v278 = 256;
    else
      v278 = 128;
  }
  *(_WORD *)(a1 + 96) = v278;
  if (!*(_BYTE *)(a1 + 452))
  {
    v279 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 88);
    if (v279 == llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)v277))
      *(_BYTE *)(a1 + 91) = 0;
  }
  return 1;
}

BOOL sub_22F2064C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v21;
  char v22;
  _BOOL4 v23;
  BOOL v32;
  int v54;
  BOOL v82;

  if (a3 != 8)
  {
    if (a3 != 7)
    {
      if (a3 != 3)
      {
        v21 = *(_DWORD *)(a1 + 364);
        switch(a3)
        {
          case 2:
            if (*(_WORD *)a2 != 27755)
              goto LABEL_355;
            v22 = *(_BYTE *)(a1 + 441);
            goto LABEL_382;
          case 4:
            switch(*(_DWORD *)a2)
            {
              case 0x32787661:
                v32 = v21 <= 7;
                goto LABEL_379;
              case 0x32696D62:
                v22 = *(_BYTE *)(a1 + 385);
                goto LABEL_382;
              case 0x62776C63:
                v22 = *(_BYTE *)(a1 + 426);
                goto LABEL_382;
              case 0x36317863:
                v22 = *(_BYTE *)(a1 + 414);
                goto LABEL_382;
              case 0x63363166:
                v22 = *(_BYTE *)(a1 + 394);
                goto LABEL_382;
              case 0x34616D66:
                v21 = *(_DWORD *)(a1 + 372);
                goto LABEL_140;
              case 0x72737866:
                v22 = *(_BYTE *)(a1 + 415);
                goto LABEL_382;
              case 0x696E6667:
                v22 = *(_BYTE *)(a1 + 380);
                goto LABEL_382;
              case 0x66686173:
                v22 = *(_BYTE *)(a1 + 433);
                goto LABEL_382;
              case 0x32657373:
                goto LABEL_140;
              case 0x33657373:
                goto LABEL_411;
            }
            if (*(_DWORD *)a2 != 1936023926)
              goto LABEL_355;
            v22 = *(_BYTE *)(a1 + 377);
            goto LABEL_382;
          case 5:
            if (*(_DWORD *)a2 == 862155363 && *(_BYTE *)(a2 + 4) == 50)
            {
              v22 = *(_BYTE *)(a1 + 451);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1852013164 && *(_BYTE *)(a2 + 4) == 116)
            {
              v22 = *(_BYTE *)(a1 + 381);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1651928941 && *(_BYTE *)(a2 + 4) == 101)
            {
              v22 = *(_BYTE *)(a1 + 427);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1768973426 && *(_BYTE *)(a2 + 4) == 100)
            {
              v22 = *(_BYTE *)(a1 + 429);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1852990578 && *(_BYTE *)(a2 + 4) == 100)
            {
              v22 = *(_BYTE *)(a1 + 382);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1953720435 && *(_BYTE *)(a2 + 4) == 107)
            {
              v22 = *(_BYTE *)(a1 + 411);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1702065011 && *(_BYTE *)(a2 + 4) == 51)
            {
              v32 = v21 <= 3;
              goto LABEL_379;
            }
            if (*(_DWORD *)a2 == 879063923 && *(_BYTE *)(a2 + 4) == 97)
            {
              v5 = *(_DWORD *)(a1 + 372);
              goto LABEL_378;
            }
            if (*(_DWORD *)a2 == 1953393013 && *(_BYTE *)(a2 + 4) == 114)
            {
              v22 = *(_BYTE *)(a1 + 450);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1986098040 && *(_BYTE *)(a2 + 4) == 101)
            {
              v22 = *(_BYTE *)(a1 + 416);
              goto LABEL_382;
            }
            goto LABEL_355;
          case 6:
            if (*(_DWORD *)a2 == 1702521955 && *(_WORD *)(a2 + 4) == 28530)
            {
              v22 = *(_BYTE *)(a1 + 421);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1668378213 && *(_WORD *)(a2 + 4) == 25709)
            {
              v22 = *(_BYTE *)(a1 + 440);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1936028264 && *(_WORD *)(a2 + 4) == 29797)
            {
              v22 = *(_BYTE *)(a1 + 443);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1701079415 && *(_WORD *)(a2 + 4) == 27755)
            {
              v22 = *(_BYTE *)(a1 + 442);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1767995245 && *(_WORD *)(a2 + 4) == 30836)
            {
              v22 = *(_BYTE *)(a1 + 420);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1835819888 && *(_WORD *)(a2 + 4) == 27765)
            {
              v22 = *(_BYTE *)(a1 + 378);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1668312944 && *(_WORD *)(a2 + 4) == 29806)
            {
              v22 = *(_BYTE *)(a1 + 386);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1667658352 && *(_WORD *)(a2 + 4) == 30568)
            {
              v22 = *(_BYTE *)(a1 + 388);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 1702061170 && *(_WORD *)(a2 + 4) == 25701)
            {
              v22 = *(_BYTE *)(a1 + 389);
              goto LABEL_382;
            }
            if (*(_DWORD *)a2 == 879063923 && *(_WORD *)(a2 + 4) == 12590)
            {
              v32 = v21 <= 4;
              goto LABEL_379;
            }
            if (*(_DWORD *)a2 == 879063923 && *(_WORD *)(a2 + 4) == 12846)
            {
              v32 = v21 <= 5;
              goto LABEL_379;
            }
            v54 = *(_DWORD *)(a1 + 56);
            if (*(_DWORD *)a2 == 1597388920 && *(_WORD *)(a2 + 4) == 12851)
            {
              v82 = v54 == 41;
            }
            else
            {
              if (*(_DWORD *)a2 != 1597388920 || *(_WORD *)(a2 + 4) != 13366)
              {
                if (*(_DWORD *)a2 == 1986098040 && *(_WORD *)(a2 + 4) == 25445)
                {
                  v22 = *(_BYTE *)(a1 + 418);
                  goto LABEL_382;
                }
                if (*(_DWORD *)a2 == 1986098040 && *(_WORD *)(a2 + 4) == 29541)
                {
                  v22 = *(_BYTE *)(a1 + 419);
                  goto LABEL_382;
                }
                goto LABEL_355;
              }
              v82 = v54 == 42;
            }
            v22 = v82;
            goto LABEL_382;
          case 9:
            if (*(_QWORD *)a2 == 0x3436726964766F6DLL && *(_BYTE *)(a2 + 8) == 98)
            {
              v22 = *(_BYTE *)(a1 + 437);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x7A696C6169726573 && *(_BYTE *)(a2 + 8) == 101)
            {
              v22 = *(_BYTE *)(a1 + 448);
              goto LABEL_382;
            }
            goto LABEL_355;
          case 10:
            if (*(_QWORD *)a2 == 0x6E76323135787661 && *(_WORD *)(a2 + 8) == 26990)
            {
              v22 = *(_BYTE *)(a1 + 397);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x6662323135787661 && *(_WORD *)(a2 + 8) == 13873)
            {
              v22 = *(_BYTE *)(a1 + 399);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x7066323135787661 && *(_WORD *)(a2 + 8) == 13873)
            {
              v22 = *(_BYTE *)(a1 + 398);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x6276323135787661 && *(_WORD *)(a2 + 8) == 26989)
            {
              v22 = *(_BYTE *)(a1 + 406);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x6669323135787661 && *(_WORD *)(a2 + 8) == 24941)
            {
              v22 = *(_BYTE *)(a1 + 408);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x6F6873756C666C63 && *(_WORD *)(a2 + 8) == 29808)
            {
              v22 = *(_BYTE *)(a1 + 425);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x716C756D6C637076 && *(_WORD *)(a2 + 8) == 29028)
            {
              v22 = *(_BYTE *)(a1 + 379);
              goto LABEL_382;
            }
            goto LABEL_355;
          case 11:
            if (*(_QWORD *)a2 == 0x6276323135787661 && *(_QWORD *)(a2 + 3) == 0x32696D6276323135)
            {
              v22 = *(_BYTE *)(a1 + 407);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x6863746566657270 && *(_QWORD *)(a2 + 3) == 0x3174776863746566)
            {
              v22 = *(_BYTE *)(a1 + 428);
              goto LABEL_382;
            }
            goto LABEL_355;
          case 12:
            if (*(_QWORD *)a2 != 0x6962323135787661 || *(_DWORD *)(a2 + 8) != 1735156084)
              goto LABEL_355;
            v22 = *(_BYTE *)(a1 + 403);
            goto LABEL_382;
          case 15:
            if (*(_QWORD *)a2 != 0x7076323135787661 || *(_QWORD *)(a2 + 7) != 0x7164746E63706F70)
              goto LABEL_355;
            v22 = *(_BYTE *)(a1 + 396);
            goto LABEL_382;
          case 18:
            if (*(_QWORD *)a2 != 0x7076323135787661
              || *(_QWORD *)(a2 + 8) != 0x65737265746E6932
              || *(_WORD *)(a2 + 16) != 29795)
            {
              goto LABEL_355;
            }
            v22 = *(_BYTE *)(a1 + 409);
            goto LABEL_382;
          case 24:
            if (*(_QWORD *)a2 == 0x6E696C6F70746572
              && *(_QWORD *)(a2 + 8) == 0x657269646E692D65
              && *(_QWORD *)(a2 + 16) == 0x736C6C61632D7463)
            {
              v22 = *(_BYTE *)(a1 + 430);
              goto LABEL_382;
            }
            if (*(_QWORD *)a2 == 0x6E696C6F70746572
              && *(_QWORD *)(a2 + 8) == 0x6E72657478652D65
              && *(_QWORD *)(a2 + 16) == 0x6B6E7568742D6C61)
            {
              v22 = *(_BYTE *)(a1 + 432);
              goto LABEL_382;
            }
            goto LABEL_355;
          case 27:
            if (*(_QWORD *)a2 != 0x6E696C6F70746572
              || *(_QWORD *)(a2 + 8) != 0x657269646E692D65
              || *(_QWORD *)(a2 + 16) != 0x636E6172622D7463
              || *(_QWORD *)(a2 + 19) != 0x736568636E617262)
            {
              goto LABEL_355;
            }
            v22 = *(_BYTE *)(a1 + 431);
            goto LABEL_382;
          default:
            goto LABEL_355;
        }
      }
      if (*(_WORD *)a2 == 25697 && *(_BYTE *)(a2 + 2) == 120)
      {
        v22 = *(_BYTE *)(a1 + 390);
        goto LABEL_382;
      }
      if (*(_WORD *)a2 == 25953 && *(_BYTE *)(a2 + 2) == 115)
      {
        v22 = *(_BYTE *)(a1 + 376);
        goto LABEL_382;
      }
      v5 = *(_DWORD *)(a1 + 364);
      if (*(_WORD *)a2 == 30305 && *(_BYTE *)(a2 + 2) == 120)
      {
        v32 = v5 <= 6;
        goto LABEL_379;
      }
      if (*(_WORD *)a2 == 28002 && *(_BYTE *)(a2 + 2) == 105)
      {
        v22 = *(_BYTE *)(a1 + 384);
        goto LABEL_382;
      }
      if (*(_WORD *)a2 == 30819 && *(_BYTE *)(a2 + 2) == 56)
      {
        v22 = *(_BYTE *)(a1 + 413);
        goto LABEL_382;
      }
      if (*(_WORD *)a2 == 28006 && *(_BYTE *)(a2 + 2) == 97)
      {
        v22 = *(_BYTE *)(a1 + 393);
        goto LABEL_382;
      }
      if (*(_WORD *)a2 == 30572 && *(_BYTE *)(a2 + 2) == 112)
      {
        v22 = *(_BYTE *)(a1 + 392);
        goto LABEL_382;
      }
      if (*(_WORD *)a2 == 28013 && *(_BYTE *)(a2 + 2) == 120)
      {
        v5 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        if (*(_WORD *)a2 == 27504 && *(_BYTE *)(a2 + 2) == 117)
        {
          v22 = *(_BYTE *)(a1 + 424);
          goto LABEL_382;
        }
        if (*(_WORD *)a2 == 29810 && *(_BYTE *)(a2 + 2) == 109)
        {
          v22 = *(_BYTE *)(a1 + 387);
          goto LABEL_382;
        }
        if (*(_WORD *)a2 == 26483 && *(_BYTE *)(a2 + 2) == 120)
        {
          v22 = *(_BYTE *)(a1 + 412);
          goto LABEL_382;
        }
        if (*(_WORD *)a2 == 26739 && *(_BYTE *)(a2 + 2) == 97)
        {
          v22 = *(_BYTE *)(a1 + 410);
          goto LABEL_382;
        }
        if (*(_WORD *)a2 != 29555 || *(_BYTE *)(a2 + 2) != 101)
        {
          if (*(_WORD *)a2 == 25204 && *(_BYTE *)(a2 + 2) == 109)
          {
            v22 = *(_BYTE *)(a1 + 391);
          }
          else if (*(_WORD *)a2 == 14456 && *(_BYTE *)(a2 + 2) == 54)
          {
            v22 = 1;
          }
          else
          {
            if (*(_WORD *)a2 != 14456 || *(_BYTE *)(a2 + 2) != 55)
            {
              if (*(_WORD *)a2 != 28536 || *(_BYTE *)(a2 + 2) != 112)
              {
LABEL_355:
                v22 = 0;
                v23 = 0;
                return v22 && v23;
              }
              v21 = *(_DWORD *)(a1 + 372);
              goto LABEL_411;
            }
            v22 = *(_BYTE *)(a1 + 452);
          }
LABEL_382:
          v23 = 1;
          return v22 && v23;
        }
      }
LABEL_378:
      v32 = v5 <= 0;
      goto LABEL_379;
    }
    if (*(_DWORD *)a2 == 1987606113 && *(_DWORD *)(a2 + 3) == 1768844918)
    {
      v22 = *(_BYTE *)(a1 + 444);
    }
    else
    {
      if (*(_DWORD *)a2 == 897087073 && *(_DWORD *)(a2 + 3) == 1714565429)
      {
        v32 = *(_DWORD *)(a1 + 364) <= 8;
        goto LABEL_379;
      }
      if (*(_DWORD *)a2 != 1886809705 || *(_DWORD *)(a2 + 3) != 1684628336)
      {
        if (*(_DWORD *)a2 != 1681091949 || *(_DWORD *)(a2 + 3) != 2003791460)
        {
          if (*(_DWORD *)a2 == 1685483373 && *(_DWORD *)(a2 + 3) == 1769105764)
          {
            v22 = *(_BYTE *)(a1 + 436);
          }
          else if (*(_DWORD *)a2 == 1852793712 && *(_DWORD *)(a2 + 3) == 1734960750)
          {
            v22 = *(_BYTE *)(a1 + 423);
          }
          else if (*(_DWORD *)a2 == 1920431216 && *(_DWORD *)(a2 + 3) == 1702127986)
          {
            v22 = *(_BYTE *)(a1 + 438);
          }
          else
          {
            if (*(_DWORD *)a2 != 1953063287 || *(_DWORD *)(a2 + 3) != 1735094388)
              goto LABEL_355;
            v22 = *(_BYTE *)(a1 + 435);
          }
          goto LABEL_382;
        }
        v21 = *(_DWORD *)(a1 + 368);
LABEL_140:
        v32 = v21 <= 1;
        goto LABEL_379;
      }
      v22 = *(_BYTE *)(a1 + 439);
    }
    goto LABEL_382;
  }
  switch(*(_QWORD *)a2)
  {
    case 0x363166622D786D61:
      v22 = *(_BYTE *)(a1 + 447);
      goto LABEL_382;
    case 0x38746E692D786D61:
      v22 = *(_BYTE *)(a1 + 446);
      goto LABEL_382;
    case 0x656C69742D786D61:
      v22 = *(_BYTE *)(a1 + 445);
      goto LABEL_382;
    case 0x6463323135787661:
      v22 = *(_BYTE *)(a1 + 395);
      goto LABEL_382;
    case 0x7265323135787661:
      v22 = *(_BYTE *)(a1 + 400);
      goto LABEL_382;
    case 0x6670323135787661:
      v22 = *(_BYTE *)(a1 + 401);
      goto LABEL_382;
    case 0x7164323135787661:
      v22 = *(_BYTE *)(a1 + 402);
      goto LABEL_382;
    case 0x7762323135787661:
      v22 = *(_BYTE *)(a1 + 404);
      goto LABEL_382;
    case 0x6C76323135787661:
      v22 = *(_BYTE *)(a1 + 405);
      goto LABEL_382;
    case 0x65746F6D65646C63:
      v22 = *(_BYTE *)(a1 + 422);
      goto LABEL_382;
    case 0x6573616273677366:
      v22 = *(_BYTE *)(a1 + 383);
      goto LABEL_382;
    case 0x61776F6E64336D6DLL:
      v21 = *(_DWORD *)(a1 + 368);
LABEL_411:
      v32 = v21 <= 2;
LABEL_379:
      v22 = !v32;
      goto LABEL_382;
    case 0x6B7274646C787374:
      v22 = *(_BYTE *)(a1 + 449);
      goto LABEL_382;
    case 0x64766E696F6E6277:
      v22 = *(_BYTE *)(a1 + 434);
      goto LABEL_382;
    case 0x74706F6576617378:
      v22 = *(_BYTE *)(a1 + 417);
      goto LABEL_382;
  }
  v22 = *(_BYTE *)(a1 + 89);
  v23 = *(_QWORD *)a2 == 0x363166626C6C7566;
  if (*(_QWORD *)a2 != 0x363166626C6C7566)
    v22 = 0;
  return v22 && v23;
}

void sub_22F207438(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void **v10;
  size_t v11;
  std::string *v13;
  std::string::size_type v14;
  _DWORD *ArchName;
  uint64_t v16;
  const char *v18;
  llvm::raw_ostream **v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  void *__dst[2];
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;

  v34[0] = "__GCC_ASM_FLAG_OUTPUTS__";
  v35 = 259;
  v32[0] = "1";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  v6 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v6 + 343) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)(v6 + 320), *(_QWORD *)(v6 + 328));
  }
  else
  {
    v7 = v6 + 320;
    *(_OWORD *)__dst = *(_OWORD *)v7;
    v31 = *(_QWORD *)(v7 + 16);
  }
  if (v31 >= 0)
    v8 = (void *)(HIBYTE(v31) & 0x7F);
  else
    v8 = __dst[1];
  if (v8 == (void *)7)
  {
    v9 = v31 >= 0 ? HIBYTE(v31) : (unint64_t)__dst[1];
    v10 = v31 >= 0 ? __dst : (void **)__dst[0];
    v11 = v9 >= 7 ? 7 : v9;
    if (!memcmp(v10, "default", v11) && v9 == 7)
      MEMORY[0x2348A0C14](__dst, "small");
  }
  std::operator+<char>();
  v13 = std::string::append(&v27, "__");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v29 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v35 = 260;
  v34[0] = __p;
  v32[0] = "1";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 56) == 42)
  {
    v34[0] = "__amd64__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    v34[0] = "__amd64";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    v34[0] = "__x86_64";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    v34[0] = "__x86_64__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    ArchName = (_DWORD *)llvm::Triple::getArchName((llvm::Triple *)(a1 + 32));
    if (v16 == 7 && *ArchName == 1597388920 && *(_DWORD *)((char *)ArchName + 3) == 1748252255)
    {
      v34[0] = "__x86_64h";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      v34[0] = "__x86_64h__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    }
  }
  else
  {
    sub_22F425880(a3, (uint64_t)"i386", 4, (uint64_t)a2);
  }
  v34[0] = "__SEG_GS";
  v35 = 259;
  v32[0] = "1";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  v34[0] = "__SEG_FS";
  v35 = 259;
  v32[0] = "1";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  v34[0] = "__seg_gs";
  v35 = 259;
  v32[0] = "__attribute__((address_space(256)))";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  v34[0] = "__seg_fs";
  v35 = 259;
  v32[0] = "__attribute__((address_space(257)))";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  switch(*(_DWORD *)(a1 + 456))
  {
    case 1:
      v21 = "__tune_i386__";
      goto LABEL_41;
    case 2:
    case 3:
    case 4:
    case 5:
      v18 = "i486";
      goto LABEL_246;
    case 6:
    case 7:
      goto LABEL_243;
    case 8:
      v34[0] = "__pentium_mmx__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      v34[0] = "__tune_pentium_mmx__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_243:
      sub_22F42596C(a3, (uint64_t)"i586", 4, 1);
      v18 = "pentium";
      goto LABEL_251;
    case 9:
    case 0xA:
      goto LABEL_238;
    case 0xB:
    case 0xE:
      goto LABEL_237;
    case 0xC:
    case 0xD:
      v34[0] = "__tune_pentium3__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_237:
      v34[0] = "__tune_pentium2__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_238:
      sub_22F42596C(a3, (uint64_t)"i686", 4, 1);
      v18 = "pentiumpro";
      v19 = a3;
      v20 = 10;
      goto LABEL_39;
    case 0xF:
    case 0x11:
    case 0x12:
      v18 = "nocona";
      goto LABEL_38;
    case 0x10:
      v18 = "pentium4";
      goto LABEL_260;
    case 0x13:
    case 0x14:
      v18 = "core2";
      goto LABEL_271;
    case 0x15:
      v18 = "atom";
LABEL_246:
      v19 = a3;
      v20 = 4;
      goto LABEL_39;
    case 0x16:
      v18 = "slm";
      goto LABEL_253;
    case 0x17:
      v18 = "goldmont";
      goto LABEL_260;
    case 0x18:
      v18 = "goldmont_plus";
      v19 = a3;
      v20 = 13;
      goto LABEL_39;
    case 0x19:
      v18 = "tremont";
LABEL_251:
      v19 = a3;
      v20 = 7;
      goto LABEL_39;
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
      v18 = "corei7";
      goto LABEL_38;
    case 0x2B:
      v18 = "knl";
LABEL_253:
      v19 = a3;
      v20 = 3;
      goto LABEL_39;
    case 0x2D:
      sub_22F42596C(a3, (uint64_t)"i586", 4, 0);
      sub_22F42596C(a3, (uint64_t)"pentium", 7, 0);
      v21 = "__tune_lakemont__";
LABEL_41:
      v34[0] = v21;
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      goto LABEL_42;
    case 0x2E:
      goto LABEL_257;
    case 0x2F:
      v34[0] = "__k6_2__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      v34[0] = "__tune_k6_2__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      if (*(_DWORD *)(a1 + 456) != 47)
        goto LABEL_256;
      goto LABEL_257;
    case 0x30:
LABEL_256:
      v34[0] = "__k6_3__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      v34[0] = "__tune_k6_3__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_257:
      v18 = "k6";
      goto LABEL_258;
    case 0x31:
    case 0x32:
      sub_22F42596C(a3, (uint64_t)"athlon", 6, 1);
      if (*(_DWORD *)(a1 + 364))
      {
        v34[0] = "__athlon_sse__";
        v35 = 259;
        v32[0] = "1";
        v33 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
        v34[0] = "__tune_athlon_sse__";
        v35 = 259;
        v32[0] = "1";
        v33 = 259;
LABEL_42:
        sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      }
      break;
    case 0x33:
    case 0x34:
    case 0x3F:
      v18 = "k8";
LABEL_258:
      v19 = a3;
      v20 = 2;
      goto LABEL_39;
    case 0x35:
      v18 = "amdfam10";
LABEL_260:
      v19 = a3;
      v20 = 8;
      goto LABEL_39;
    case 0x36:
      v18 = "btver1";
      goto LABEL_38;
    case 0x37:
      v18 = "btver2";
      goto LABEL_38;
    case 0x38:
      v18 = "bdver1";
      goto LABEL_38;
    case 0x39:
      v18 = "bdver2";
      goto LABEL_38;
    case 0x3A:
      v18 = "bdver3";
      goto LABEL_38;
    case 0x3B:
      v18 = "bdver4";
      goto LABEL_38;
    case 0x3C:
      v18 = "znver1";
      goto LABEL_38;
    case 0x3D:
      v18 = "znver2";
      goto LABEL_38;
    case 0x3E:
      v18 = "znver3";
LABEL_38:
      v19 = a3;
      v20 = 6;
      goto LABEL_39;
    case 0x43:
      v18 = "geode";
LABEL_271:
      v19 = a3;
      v20 = 5;
LABEL_39:
      sub_22F42596C(v19, (uint64_t)v18, v20, 1);
      break;
    default:
      break;
  }
  v34[0] = "__REGISTER_PREFIX__";
  v35 = 259;
  v33 = 257;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  v34[0] = "__NO_MATH_INLINES";
  v35 = 259;
  v32[0] = "1";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  if (*(_BYTE *)(a1 + 376))
  {
    v34[0] = "__AES__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 377))
  {
    v34[0] = "__VAES__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 378))
  {
    v34[0] = "__PCLMUL__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 379))
  {
    v34[0] = "__VPCLMULQDQ__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 433) || *(_DWORD *)(a1 + 56) == 41)
  {
    v34[0] = "__LAHF_SAHF__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 381))
  {
    v34[0] = "__LZCNT__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 382))
  {
    v34[0] = "__RDRND__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 383))
  {
    v34[0] = "__FSGSBASE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v34[0] = "__BMI__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 385))
  {
    v34[0] = "__BMI2__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 386))
  {
    v34[0] = "__POPCNT__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 387))
  {
    v34[0] = "__RTM__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 388))
  {
    v34[0] = "__PRFCHW__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 389))
  {
    v34[0] = "__RDSEED__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 390))
  {
    v34[0] = "__ADX__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 391))
  {
    v34[0] = "__TBM__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    v34[0] = "__LWP__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 420))
  {
    v34[0] = "__MWAITX__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 427))
  {
    v34[0] = "__MOVBE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  v22 = *(_DWORD *)(a1 + 372);
  if (v22 != 1)
  {
    if (v22 != 2)
    {
      if (v22 != 3)
        goto LABEL_88;
      v34[0] = "__XOP__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    }
    v34[0] = "__FMA4__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  v34[0] = "__SSE4A__";
  v35 = 259;
  v32[0] = "1";
  v33 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_88:
  if (*(_BYTE *)(a1 + 393))
  {
    v34[0] = "__FMA__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 394))
  {
    v34[0] = "__F16C__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 380))
  {
    v34[0] = "__GFNI__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 395))
  {
    v34[0] = "__AVX512CD__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 396))
  {
    v34[0] = "__AVX512VPOPCNTDQ__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 397))
  {
    v34[0] = "__AVX512VNNI__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 399))
  {
    v34[0] = "__AVX512BF16__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 400))
  {
    v34[0] = "__AVX512ER__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 398))
  {
    v34[0] = "__AVX512FP16__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 401))
  {
    v34[0] = "__AVX512PF__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 402))
  {
    v34[0] = "__AVX512DQ__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 403))
  {
    v34[0] = "__AVX512BITALG__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 404))
  {
    v34[0] = "__AVX512BW__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 405))
  {
    v34[0] = "__AVX512VL__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 406))
  {
    v34[0] = "__AVX512VBMI__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 407))
  {
    v34[0] = "__AVX512VBMI2__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 408))
  {
    v34[0] = "__AVX512IFMA__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 409))
  {
    v34[0] = "__AVX512VP2INTERSECT__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 410))
  {
    v34[0] = "__SHA__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 415))
  {
    v34[0] = "__FXSR__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v34[0] = "__XSAVE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 417))
  {
    v34[0] = "__XSAVEOPT__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 418))
  {
    v34[0] = "__XSAVEC__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 419))
  {
    v34[0] = "__XSAVES__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 424))
  {
    v34[0] = "__PKU__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 425))
  {
    v34[0] = "__CLFLUSHOPT__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 426))
  {
    v34[0] = "__CLWB__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 434))
  {
    v34[0] = "__WBNOINVD__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 411))
  {
    v34[0] = "__SHSTK__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 412))
  {
    v34[0] = "__SGX__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 428))
  {
    v34[0] = "__PREFETCHWT1__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 421))
  {
    v34[0] = "__CLZERO__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 441))
  {
    v34[0] = "__KL__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 442))
  {
    v34[0] = "__WIDEKL__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 429))
  {
    v34[0] = "__RDPID__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 422))
  {
    v34[0] = "__CLDEMOTE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 435))
  {
    v34[0] = "__WAITPKG__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 436))
  {
    v34[0] = "__MOVDIRI__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 437))
  {
    v34[0] = "__MOVDIR64B__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 423))
  {
    v34[0] = "__PCONFIG__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 438))
  {
    v34[0] = "__PTWRITE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 439))
  {
    v34[0] = "__INVPCID__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 440))
  {
    v34[0] = "__ENQCMD__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 443))
  {
    v34[0] = "__HRESET__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 445))
  {
    v34[0] = "__AMXTILE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 446))
  {
    v34[0] = "__AMXINT8__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 447))
  {
    v34[0] = "__AMXBF16__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 444))
  {
    v34[0] = "__AVXVNNI__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 448))
  {
    v34[0] = "__SERIALIZE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 449))
  {
    v34[0] = "__TSXLDTRK__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 450))
  {
    v34[0] = "__UINTR__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 451))
  {
    v34[0] = "__CRC32__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 430) && *(_BYTE *)(a1 + 431))
  {
    v34[0] = "__RETPOLINE__";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  switch(*(_DWORD *)(a1 + 364))
  {
    case 1:
      goto LABEL_204;
    case 2:
      goto LABEL_203;
    case 3:
      goto LABEL_202;
    case 4:
      goto LABEL_201;
    case 5:
      goto LABEL_200;
    case 6:
      goto LABEL_199;
    case 7:
      goto LABEL_198;
    case 8:
      goto LABEL_197;
    case 9:
      v34[0] = "__AVX512F__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_197:
      v34[0] = "__AVX2__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_198:
      v34[0] = "__AVX__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_199:
      v34[0] = "__SSE4_2__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_200:
      v34[0] = "__SSE4_1__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_201:
      v34[0] = "__SSSE3__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_202:
      v34[0] = "__SSE3__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_203:
      v34[0] = "__SSE2__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      v34[0] = "__SSE2_MATH__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
LABEL_204:
      v34[0] = "__SSE__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      v34[0] = "__SSE_MATH__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      break;
    default:
      break;
  }
  if ((*a2 & 0x20) != 0 && *(_DWORD *)(a1 + 56) == 41)
  {
    v23 = *(_DWORD *)(a1 + 364);
    if ((v23 - 2) >= 8)
    {
      if (v23 != 1)
      {
        v34[0] = "_M_IX86_FP";
        v35 = 259;
        v33 = 265;
        LODWORD(v32[0]) = 0;
        goto LABEL_210;
      }
      v34[0] = "_M_IX86_FP";
      v35 = 259;
      v33 = 265;
      v24 = 1;
    }
    else
    {
      v34[0] = "_M_IX86_FP";
      v35 = 259;
      v33 = 265;
      v24 = 2;
    }
    LODWORD(v32[0]) = v24;
LABEL_210:
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  v25 = *(_DWORD *)(a1 + 368);
  switch(v25)
  {
    case 1:
LABEL_216:
      v34[0] = "__MMX__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      break;
    case 2:
LABEL_215:
      v34[0] = "__3dNOW__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      goto LABEL_216;
    case 3:
      v34[0] = "__3dNOW_A__";
      v35 = 259;
      v32[0] = "1";
      v33 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
      goto LABEL_215;
  }
  v26 = *(_DWORD *)(a1 + 456);
  if (v26 > 1 || !v26)
  {
    v34[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    v34[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
    v34[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 413))
  {
    v34[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 414) && *(_DWORD *)(a1 + 56) == 42)
  {
    v34[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16";
    v35 = 259;
    v32[0] = "1";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v34[0] = "__SIZEOF_FLOAT128__";
    v35 = 259;
    v32[0] = "16";
    v33 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v34, (llvm::Twine *)v32);
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
}

uint64_t sub_22F20901C(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  int v5;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  int v66;
  BOOL v67;
  int v68;

  result = 0;
  switch(a3)
  {
    case 2:
      v4 = *a2;
      v5 = 27755;
      goto LABEL_3;
    case 3:
      if (*a2 == 25697 && *((_BYTE *)a2 + 2) == 120)
        goto LABEL_256;
      if (*a2 == 25953 && *((_BYTE *)a2 + 2) == 115)
        goto LABEL_256;
      if (*a2 == 30305 && *((_BYTE *)a2 + 2) == 120)
        goto LABEL_256;
      if (*a2 == 28002 && *((_BYTE *)a2 + 2) == 105)
        goto LABEL_256;
      if (*a2 == 28006 && *((_BYTE *)a2 + 2) == 97)
        goto LABEL_256;
      if (*a2 == 30572 && *((_BYTE *)a2 + 2) == 112)
        goto LABEL_256;
      if (*a2 == 28013 && *((_BYTE *)a2 + 2) == 120)
        goto LABEL_256;
      if (*a2 == 27504 && *((_BYTE *)a2 + 2) == 117)
        goto LABEL_256;
      if (*a2 == 29810 && *((_BYTE *)a2 + 2) == 109)
        goto LABEL_256;
      if (*a2 == 26483 && *((_BYTE *)a2 + 2) == 120)
        goto LABEL_256;
      if (*a2 == 26739 && *((_BYTE *)a2 + 2) == 97)
        goto LABEL_256;
      if (*a2 == 29555 && *((_BYTE *)a2 + 2) == 101)
        goto LABEL_256;
      if (*a2 == 25204 && *((_BYTE *)a2 + 2) == 109)
        goto LABEL_256;
      if (*a2 == 14456 && *((_BYTE *)a2 + 2) == 55)
        goto LABEL_256;
      v20 = *((unsigned __int8 *)a2 + 2);
      v21 = *a2 == 28536;
      v22 = 112;
      goto LABEL_251;
    case 4:
      if (*(_DWORD *)a2 == 846755425
        || *(_DWORD *)a2 == 845770082
        || *(_DWORD *)a2 == 1651993699
        || *(_DWORD *)a2 == 909211747
        || *(_DWORD *)a2 == 1664495974
        || *(_DWORD *)a2 == 878800230
        || *(_DWORD *)a2 == 1920170086
        || *(_DWORD *)a2 == 1768842855
        || *(_DWORD *)a2 == 1718116723
        || *(_DWORD *)a2 == 845509491
        || *(_DWORD *)a2 == 862286707
        || *(_DWORD *)a2 == 879063923)
      {
        goto LABEL_256;
      }
      v4 = *(_DWORD *)a2;
      v5 = 1936023926;
LABEL_3:
      if (v4 == v5)
        goto LABEL_256;
      goto LABEL_276;
    case 5:
      if (*(_DWORD *)a2 == 1869505587 && *((_BYTE *)a2 + 4) == 119)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 862155363 && *((_BYTE *)a2 + 4) == 50)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1852013164 && *((_BYTE *)a2 + 4) == 116)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1651928941 && *((_BYTE *)a2 + 4) == 101)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1768973426 && *((_BYTE *)a2 + 4) == 100)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1852990578 && *((_BYTE *)a2 + 4) == 100)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1953720435 && *((_BYTE *)a2 + 4) == 107)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1702065011 && *((_BYTE *)a2 + 4) == 51)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 879063923 && *((_BYTE *)a2 + 4) == 97)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1953393013 && *((_BYTE *)a2 + 4) == 114)
        goto LABEL_256;
      return *(_DWORD *)a2 == 1986098040 && *((_BYTE *)a2 + 4) == 101;
    case 6:
      if (*(_DWORD *)a2 == 1869505587 && a2[2] == 24951)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1702521955 && a2[2] == 28530)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1668378213 && a2[2] == 25709)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1936028264 && a2[2] == 29797)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1701079415 && a2[2] == 27755)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1767995245 && a2[2] == 30836)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1835819888 && a2[2] == 27765)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1668312944 && a2[2] == 29806)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1667658352 && a2[2] == 30568)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1702061170 && a2[2] == 25701)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 879063923 && a2[2] == 12590)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 879063923 && a2[2] == 12846)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1986098040 && a2[2] == 25445)
        goto LABEL_256;
      return *(_DWORD *)a2 == 1986098040 && a2[2] == 29541;
    case 7:
      if (*(_DWORD *)a2 == 897087073 && *(_DWORD *)((char *)a2 + 3) == 1714565429)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1987606113 && *(_DWORD *)((char *)a2 + 3) == 1768844918)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1886809705 && *(_DWORD *)((char *)a2 + 3) == 1684628336)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1685483373 && *(_DWORD *)((char *)a2 + 3) == 1769105764)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1852793712 && *(_DWORD *)((char *)a2 + 3) == 1734960750)
        goto LABEL_256;
      if (*(_DWORD *)a2 == 1920431216 && *(_DWORD *)((char *)a2 + 3) == 1702127986)
        goto LABEL_256;
      v20 = *(_DWORD *)((char *)a2 + 3);
      v21 = *(_DWORD *)a2 == 1953063287;
      v22 = 1735094388;
      goto LABEL_251;
    case 8:
      if (*(_QWORD *)a2 == 0x363166622D786D61
        || *(_QWORD *)a2 == 0x38746E692D786D61
        || *(_QWORD *)a2 == 0x656C69742D786D61
        || *(_QWORD *)a2 == 0x6463323135787661
        || *(_QWORD *)a2 == 0x7265323135787661
        || *(_QWORD *)a2 == 0x6670323135787661
        || *(_QWORD *)a2 == 0x7164323135787661
        || *(_QWORD *)a2 == 0x7762323135787661
        || *(_QWORD *)a2 == 0x6C76323135787661
        || *(_QWORD *)a2 == 0x65746F6D65646C63
        || *(_QWORD *)a2 == 0x6573616273677366
        || *(_QWORD *)a2 == 0x6B7274646C787374
        || *(_QWORD *)a2 == 0x64766E696F6E6277)
      {
        goto LABEL_256;
      }
      return *(_QWORD *)a2 == 0x74706F6576617378;
    case 9:
      if (*(_QWORD *)a2 == 0x3436726964766F6DLL && *((_BYTE *)a2 + 8) == 98)
        goto LABEL_256;
      v20 = *((unsigned __int8 *)a2 + 8);
      v21 = *(_QWORD *)a2 == 0x7A696C6169726573;
      v22 = 101;
      goto LABEL_251;
    case 10:
      if (*(_QWORD *)a2 == 0x6E76323135787661 && a2[4] == 26990)
        goto LABEL_256;
      if (*(_QWORD *)a2 == 0x6662323135787661 && a2[4] == 13873)
        goto LABEL_256;
      if (*(_QWORD *)a2 == 0x7066323135787661 && a2[4] == 13873)
        goto LABEL_256;
      if (*(_QWORD *)a2 == 0x6276323135787661 && a2[4] == 26989)
        goto LABEL_256;
      if (*(_QWORD *)a2 == 0x6669323135787661 && a2[4] == 24941)
        goto LABEL_256;
      if (*(_QWORD *)a2 == 0x6F6873756C666C63 && a2[4] == 29808)
        goto LABEL_256;
      v20 = a2[4];
      v21 = *(_QWORD *)a2 == 0x716C756D6C637076;
      v22 = 29028;
LABEL_251:
      if (!v21 || v20 != v22)
        goto LABEL_276;
      goto LABEL_256;
    case 11:
      if (*(_QWORD *)a2 == 0x6276323135787661 && *(_QWORD *)((char *)a2 + 3) == 0x32696D6276323135)
        goto LABEL_256;
      v61 = *(_QWORD *)((char *)a2 + 3);
      v62 = *(_QWORD *)a2 == 0x6863746566657270;
      v63 = 0x3174776863746566;
LABEL_258:
      if (!v62 || v61 != v63)
        goto LABEL_276;
      goto LABEL_256;
    case 12:
      v20 = *((_DWORD *)a2 + 2);
      v21 = *(_QWORD *)a2 == 0x6962323135787661;
      v22 = 1735156084;
      goto LABEL_251;
    case 15:
      v61 = *(_QWORD *)((char *)a2 + 7);
      v62 = *(_QWORD *)a2 == 0x7076323135787661;
      v63 = 0x7164746E63706F70;
      goto LABEL_258;
    case 17:
      v66 = *((unsigned __int8 *)a2 + 16);
      v67 = *(_QWORD *)a2 == 0x2D6C6172656E6567 && *((_QWORD *)a2 + 1) == 0x6C6E6F2D73676572;
      v68 = 121;
      goto LABEL_272;
    case 18:
      v66 = a2[8];
      v67 = *(_QWORD *)a2 == 0x7076323135787661 && *((_QWORD *)a2 + 1) == 0x65737265746E6932;
      v68 = 29795;
LABEL_272:
      if (v67 && v66 == v68)
LABEL_256:
        result = 1;
      else
LABEL_276:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_22F209B38(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  _BOOL8 result;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  result = 0;
  switch(a3)
  {
    case 3:
      if (*a2 == 28013 && *((_BYTE *)a2 + 2) == 120)
        goto LABEL_99;
      if (*a2 == 29555 && *((_BYTE *)a2 + 2) == 101)
        goto LABEL_99;
      if (*a2 == 30305 && *((_BYTE *)a2 + 2) == 120)
        goto LABEL_99;
      if (*a2 == 28536 && *((_BYTE *)a2 + 2) == 112)
        goto LABEL_99;
      if (*a2 == 28006 && *((_BYTE *)a2 + 2) == 97)
        goto LABEL_99;
      if (*a2 == 28002 && *((_BYTE *)a2 + 2) == 105)
        goto LABEL_99;
      v10 = *((unsigned __int8 *)a2 + 2);
      v11 = *a2 == 25953;
      v12 = 115;
      goto LABEL_88;
    case 4:
      if (*(_DWORD *)a2 == 1987013987
        || *(_DWORD *)a2 == 845509491
        || *(_DWORD *)a2 == 862286707
        || *(_DWORD *)a2 == 846755425
        || *(_DWORD *)a2 == 878800230
        || *(_DWORD *)a2 == 845770082
        || *(_DWORD *)a2 == 1768842855)
      {
        goto LABEL_99;
      }
      goto LABEL_92;
    case 5:
      if (*(_DWORD *)a2 == 1702065011 && *((_BYTE *)a2 + 4) == 51)
        goto LABEL_99;
      v10 = *((unsigned __int8 *)a2 + 4);
      v11 = *(_DWORD *)a2 == 879063923;
      v12 = 97;
      goto LABEL_88;
    case 6:
      if (*(_DWORD *)a2 == 1668312944 && a2[2] == 29806)
        goto LABEL_99;
      if (*(_DWORD *)a2 == 879063923 && a2[2] == 12590)
        goto LABEL_99;
      if (*(_DWORD *)a2 == 879063923 && a2[2] == 12846)
        goto LABEL_99;
      v10 = a2[2];
      v11 = *(_DWORD *)a2 == 1835819888;
      v12 = 27765;
      goto LABEL_88;
    case 7:
      v10 = *(_DWORD *)((char *)a2 + 3);
      v11 = *(_DWORD *)a2 == 897087073;
      v12 = 1714565429;
      goto LABEL_88;
    case 8:
      if (*(_QWORD *)a2 == 0x6C76323135787661
        || *(_QWORD *)a2 == 0x7762323135787661
        || *(_QWORD *)a2 == 0x7164323135787661
        || *(_QWORD *)a2 == 0x6463323135787661
        || *(_QWORD *)a2 == 0x7265323135787661
        || *(_QWORD *)a2 == 0x6670323135787661)
      {
        goto LABEL_99;
      }
      goto LABEL_92;
    case 10:
      if (*(_QWORD *)a2 == 0x6276323135787661 && a2[4] == 26989)
        goto LABEL_99;
      if (*(_QWORD *)a2 == 0x6669323135787661 && a2[4] == 24941)
        goto LABEL_99;
      if (*(_QWORD *)a2 == 0x716C756D6C637076 && a2[4] == 29028)
        goto LABEL_99;
      if (*(_QWORD *)a2 == 0x6E76323135787661 && a2[4] == 26990)
        goto LABEL_99;
      v10 = a2[4];
      v11 = *(_QWORD *)a2 == 0x6662323135787661;
      v12 = 13873;
      goto LABEL_88;
    case 11:
      v21 = *(_QWORD *)((char *)a2 + 3);
      v22 = *(_QWORD *)a2 == 0x6276323135787661;
      v23 = 0x32696D6276323135;
      goto LABEL_94;
    case 12:
      if (*(_QWORD *)a2 == 0x7634323135787661 && *((_DWORD *)a2 + 2) == 2003398254)
        goto LABEL_99;
      if (*(_QWORD *)a2 == 0x6634323135787661 && *((_DWORD *)a2 + 2) == 1936744813)
        goto LABEL_99;
      v10 = *((_DWORD *)a2 + 2);
      v11 = *(_QWORD *)a2 == 0x6962323135787661;
      v12 = 1735156084;
LABEL_88:
      if (!v11 || v10 != v12)
        goto LABEL_92;
      goto LABEL_99;
    case 15:
      v21 = *(_QWORD *)((char *)a2 + 7);
      v22 = *(_QWORD *)a2 == 0x7076323135787661;
      v23 = 0x7164746E63706F70;
LABEL_94:
      if (v22 && v21 == v23)
LABEL_99:
        result = 1;
      else
LABEL_92:
        result = 0;
      break;
    case 18:
      result = *(_QWORD *)a2 == 0x7076323135787661 && *((_QWORD *)a2 + 1) == 0x65737265746E6932 && a2[8] == 29795;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F20A028()
{
  if (!llvm::X86::parseArchX86())
    return 2 * llvm::X86::getFeaturePriority();
  llvm::X86::getKeyFeature();
  return (2 * llvm::X86::getFeaturePriority()) | 1;
}

BOOL sub_22F20A858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v29;
  uint64_t v33;
  BOOL v34;
  int v37;
  BOOL v38;
  int v39;
  BOOL v43;

  result = 0;
  switch(a3)
  {
    case 3:
      if (*(_WORD *)a2 == 28267 && *(_BYTE *)(a2 + 2) == 108)
        return 1;
      return *(_WORD *)a2 == 28267 && *(_BYTE *)(a2 + 2) == 109;
    case 4:
      return *(_DWORD *)a2 == 1836020833;
    case 7:
      if (*(_DWORD *)a2 == 1701733735 && *(_DWORD *)(a2 + 3) == 1667854949)
        return 1;
      if (*(_DWORD *)a2 == 1953391984 && *(_DWORD *)(a2 + 3) == 1836411252)
        return 1;
      if (*(_DWORD *)a2 == 2004050280 && *(_DWORD *)(a2 + 3) == 1819043191)
        return 1;
      v9 = *(_DWORD *)(a2 + 3);
      v10 = *(_DWORD *)a2 == 1819896691;
      v11 = 1701536108;
      return v10 && v9 == v11;
    case 8:
      return *(_QWORD *)a2 == 0x746E6F6D646C6F67;
    case 9:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_BYTE *)(a2 + 8) == 52)
        return 1;
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_BYTE *)(a2 + 8) == 109)
        return 1;
      if (*(_QWORD *)a2 == 0x6764697262797669 && *(_BYTE *)(a2 + 8) == 101)
        return 1;
      v9 = *(unsigned __int8 *)(a2 + 8);
      v10 = *(_QWORD *)a2 == 0x6C657764616F7262;
      v11 = 108;
      return v10 && v9 == v11;
    case 10:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_WORD *)(a2 + 8) == 26985)
        return 1;
      if (*(_QWORD *)a2 == 0x357876615F63696DLL && *(_WORD *)(a2 + 8) == 12849)
        return 1;
      v9 = *(unsigned __int16 *)(a2 + 8);
      v10 = *(_QWORD *)a2 == 0x616C6E6F6E6E6163;
      v11 = 25963;
      return v10 && v9 == v11;
    case 11:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 3) == 0x6F72705F6D756974)
        return 1;
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 3) == 0x786D6D5F6D756974)
        return 1;
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 3) == 0x6969695F6D756974)
        return 1;
      if (*(_QWORD *)a2 == 0x6573735F6D6F7461 && *(_QWORD *)(a2 + 3) == 0x325F346573735F6DLL)
        return 1;
      v22 = *(_QWORD *)(a2 + 3);
      v23 = *(_QWORD *)a2 == 0x69726279646E6173;
      v24 = 0x6567646972627964;
      return v23 && v22 == v24;
    case 14:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 6) == 0x336573735F345F6DLL)
        return 1;
      if (*(_QWORD *)a2 == 0x5F37695F65726F63 && *(_QWORD *)(a2 + 6) == 0x325F346573735F37)
        return 1;
      v22 = *(_QWORD *)(a2 + 6);
      v23 = *(_QWORD *)a2 == 0x5F656B616C796B73;
      v24 = 0x3231357876615F65;
      return v23 && v22 == v24;
    case 16:
      if (*(_QWORD *)a2 == 0x645F325F65726F63 && *(_QWORD *)(a2 + 8) == 0x33657373735F6F75)
        return 1;
      v29 = 0x7876615F6E65675FLL;
      if (*(_QWORD *)a2 == 0x646E325F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL)
        return 1;
      if (*(_QWORD *)a2 == 0x6472335F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL)
        return 1;
      if (*(_QWORD *)a2 == 0x6874345F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL)
        return 1;
      v33 = *(_QWORD *)(a2 + 8);
      v34 = *(_QWORD *)a2 == 0x6874355F65726F63;
      return v34 && v33 == v29;
    case 17:
      if (*(_QWORD *)a2 == 0x645F325F65726F63
        && *(_QWORD *)(a2 + 8) == 0x5F346573735F6F75
        && *(_BYTE *)(a2 + 16) == 49)
      {
        return 1;
      }
      v37 = *(unsigned __int8 *)(a2 + 16);
      v38 = *(_QWORD *)a2 == 0x6573735F6D6F7461 && *(_QWORD *)(a2 + 8) == 0x62766F6D5F325F34;
      v39 = 101;
      return v38 && v37 == v39;
    case 18:
      v37 = *(unsigned __int16 *)(a2 + 16);
      v38 = *(_QWORD *)a2 == 0x7365615F65726F63 && *(_QWORD *)(a2 + 8) == 0x716C756D6C63705FLL;
      v39 = 29028;
      return v38 && v37 == v39;
    case 20:
      if (*(_QWORD *)a2 != 0x6874345F65726F63
        || *(_QWORD *)(a2 + 8) != 0x7876615F6E65675FLL
        || *(_DWORD *)(a2 + 16) != 2020832351)
      {
        v43 = *(_QWORD *)a2 == 0x6874355F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL;
        if (!v43 || *(_DWORD *)(a2 + 16) != 2020832351)
          return 0;
      }
      return 1;
    case 23:
      v33 = *(_QWORD *)(a2 + 15);
      v34 = *(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 8) == 0x785F6F6E5F696969;
      v29 = 0x736765725F6D6D78;
      return v34 && v33 == v29;
    default:
      return result;
  }
}

uint64_t sub_22F20AE38(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_22F20B410(a2, a3);
  v4 = 0;
  switch(v5)
  {
    case 3:
      if (*(_WORD *)v3 == 28267 && *((_BYTE *)v3 + 2) == 108)
      {
        v4 = 90;
      }
      else if (*(unsigned __int16 *)v3 ^ 0x6E6B | *((unsigned __int8 *)v3 + 2) ^ 0x6D)
      {
        v4 = 0;
      }
      else
      {
        v4 = 106;
      }
      break;
    case 4:
      if (*(_DWORD *)v3 != 1836020833)
        goto LABEL_140;
      v4 = 79;
      break;
    case 7:
      if (*(_DWORD *)v3 == 1701733735 && *(_DWORD *)((char *)v3 + 3) == 1667854949)
      {
        v4 = 65;
      }
      else if (*(_DWORD *)v3 == 1953391984 && *(_DWORD *)((char *)v3 + 3) == 1836411252)
      {
        v4 = 66;
      }
      else if (*(_DWORD *)v3 == 2004050280 && *(_DWORD *)((char *)v3 + 3) == 1819043191)
      {
        v4 = 86;
      }
      else
      {
        if (*(_DWORD *)v3 != 1819896691 || *(_DWORD *)((char *)v3 + 3) != 1701536108)
          goto LABEL_140;
        v4 = 98;
      }
      break;
    case 8:
      if (*v3 != 0x746E6F6D646C6F67)
        goto LABEL_140;
      v4 = 105;
      break;
    case 9:
      if (*v3 == 0x5F6D7569746E6570 && *((_BYTE *)v3 + 8) == 52)
      {
        v4 = 74;
      }
      else if (*v3 == 0x5F6D7569746E6570 && *((_BYTE *)v3 + 8) == 109)
      {
        v4 = 75;
      }
      else if (*v3 == 0x6764697262797669 && *((_BYTE *)v3 + 8) == 101)
      {
        v4 = 83;
      }
      else
      {
        if (*v3 != 0x6C657764616F7262 || *((_BYTE *)v3 + 8) != 108)
          goto LABEL_140;
        v4 = 88;
      }
      break;
    case 10:
      if (*v3 == 0x5F6D7569746E6570 && *((_WORD *)v3 + 4) == 26985)
      {
        v4 = 69;
      }
      else
      {
        if (*v3 != 0x616C6E6F6E6E6163 || *((_WORD *)v3 + 4) != 25963)
          goto LABEL_140;
        v4 = 101;
      }
      break;
    case 11:
      if (*v3 == 0x5F6D7569746E6570 && *(_QWORD *)((char *)v3 + 3) == 0x6F72705F6D756974)
      {
        v4 = 67;
      }
      else if (*v3 == 0x5F6D7569746E6570 && *(_QWORD *)((char *)v3 + 3) == 0x786D6D5F6D756974)
      {
        v4 = 68;
      }
      else if (*v3 == 0x5F6D7569746E6570 && *(_QWORD *)((char *)v3 + 3) == 0x6969695F6D756974)
      {
        v4 = 72;
      }
      else if (*v3 == 0x6573735F6D6F7461 && *(_QWORD *)((char *)v3 + 3) == 0x325F346573735F6DLL)
      {
        v4 = 99;
      }
      else
      {
        if (*v3 != 0x69726279646E6173 || *(_QWORD *)((char *)v3 + 3) != 0x6567646972627964)
          goto LABEL_140;
        v4 = 82;
      }
      break;
    case 14:
      if (*v3 == 0x5F6D7569746E6570 && *(_QWORD *)((char *)v3 + 6) == 0x336573735F345F6DLL)
      {
        v4 = 76;
      }
      else if (*v3 == 0x5F37695F65726F63 && *(_QWORD *)((char *)v3 + 6) == 0x325F346573735F37)
      {
        v4 = 80;
      }
      else
      {
        if (*v3 != 0x5F656B616C796B73 || *(_QWORD *)((char *)v3 + 6) != 0x3231357876615F65)
          goto LABEL_140;
        v4 = 97;
      }
      break;
    case 16:
      if (*v3 != 0x645F325F65726F63 || v3[1] != 0x33657373735F6F75)
        goto LABEL_140;
      v4 = 77;
      break;
    case 17:
      if (*v3 == 0x645F325F65726F63 && v3[1] == 0x5F346573735F6F75 && *((_BYTE *)v3 + 16) == 49)
      {
        v4 = 78;
      }
      else
      {
        if (*v3 != 0x6573735F6D6F7461 || v3[1] != 0x62766F6D5F325F34 || *((_BYTE *)v3 + 16) != 101)
          goto LABEL_140;
        v4 = 100;
      }
      break;
    case 18:
      if (*v3 != 0x7365615F65726F63 || v3[1] != 0x716C756D6C63705FLL || *((_WORD *)v3 + 8) != 29028)
        goto LABEL_140;
      v4 = 81;
      break;
    case 20:
      if (*v3 == 0x6874345F65726F63 && v3[1] == 0x7876615F6E65675FLL && *((_DWORD *)v3 + 4) == 2020832351)
      {
        v4 = 87;
      }
      else if (*v3 == 0x6874355F65726F63 && v3[1] == 0x7876615F6E65675FLL && *((_DWORD *)v3 + 4) == 2020832351)
      {
        v4 = 89;
      }
      else
      {
LABEL_140:
        v4 = 0;
      }
      break;
    default:
      return v4;
  }
  return v4;
}

_QWORD *sub_22F20B410(_QWORD *result, uint64_t a2)
{
  BOOL v2;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;

  if (a2 != 10)
  {
    if (a2 != 16)
    {
      if (a2 != 23)
        return result;
      v2 = *result == 0x5F6D7569746E6570 && result[1] == 0x785F6F6E5F696969;
      if (!v2 || *(_QWORD *)((char *)result + 15) != 0x736765725F6D6D78)
        return result;
      v9 = "pentium_iii";
      goto LABEL_37;
    }
    if (*result == 0x646E325F65726F63 && result[1] == 0x7876615F6E65675FLL)
    {
      v9 = "sandybridge";
LABEL_37:
      v10 = v9;
      v11 = (unint64_t)v9 & 0xFFFFFFFFFFFFFF00;
      return (_QWORD *)(v10 | v11);
    }
    if (*result == 0x6472335F65726F63 && result[1] == 0x7876615F6E65675FLL)
    {
      v12 = "ivybridge";
    }
    else
    {
      if (*result == 0x6874345F65726F63 && result[1] == 0x7876615F6E65675FLL)
      {
        v10 = (unint64_t)"haswell" & 0xFF;
        v11 = (unint64_t)"haswell" & 0xFFFFFFFFFFFFFF00;
        return (_QWORD *)(v10 | v11);
      }
      if (*result != 0x6874355F65726F63 || result[1] != 0x7876615F6E65675FLL)
        return result;
      v12 = "broadwell";
    }
    v10 = v12;
    v11 = (unint64_t)v12 & 0xFFFFFFFFFFFFFF00;
    return (_QWORD *)(v10 | v11);
  }
  if (*result == 0x357876615F63696DLL && *((_WORD *)result + 4) == 12849)
  {
    v10 = (unint64_t)"knl" & 0xFF;
    v11 = (unint64_t)"knl" & 0xFFFFFFFFFFFFFF00;
    return (_QWORD *)(v10 | v11);
  }
  return result;
}

uint64_t sub_22F20B5BC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_22F20B410(a2, a3);
  return llvm::StringRef::split();
}

const char *sub_22F20BCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *result;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  const char *v13;
  const char *v14;
  const char *v22;
  uint64_t v32;
  uint64_t v36;
  BOOL v37;
  const char *v47;
  const char *v50;

  result = "";
  switch(a3)
  {
    case 3:
      if (*(_WORD *)a2 == 28267 && *(_BYTE *)(a2 + 2) == 108)
        goto LABEL_168;
      if (*(_WORD *)a2 == 28267 && *(_BYTE *)(a2 + 2) == 109)
      {
        v6 = "knm";
        goto LABEL_169;
      }
      return result;
    case 4:
      if (*(_DWORD *)a2 == 1836020833)
      {
        v7 = (unint64_t)"atom" & 0xFF;
        v8 = (unint64_t)"atom" & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      return result;
    case 7:
      if (*(_DWORD *)a2 == 1701733735 && *(_DWORD *)(a2 + 3) == 1667854949)
      {
        v13 = "generic";
        goto LABEL_189;
      }
      if (*(_DWORD *)a2 == 1953391984 && *(_DWORD *)(a2 + 3) == 1836411252)
      {
        v13 = "pentium";
        goto LABEL_189;
      }
      if (*(_DWORD *)a2 == 2004050280 && *(_DWORD *)(a2 + 3) == 1819043191)
        goto LABEL_170;
      if (*(_DWORD *)a2 == 1819896691 && *(_DWORD *)(a2 + 3) == 1701536108)
      {
        v13 = "skylake";
        goto LABEL_189;
      }
      return result;
    case 8:
      if (*(_QWORD *)a2 == 0x746E6F6D646C6F67)
      {
        v14 = "goldmont";
        goto LABEL_178;
      }
      return result;
    case 9:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_BYTE *)(a2 + 8) == 52)
      {
        v14 = "pentium4";
        goto LABEL_178;
      }
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_BYTE *)(a2 + 8) == 109)
      {
        v47 = "pentium-m";
        goto LABEL_185;
      }
      if (*(_QWORD *)a2 == 0x6764697262797669 && *(_BYTE *)(a2 + 8) == 101)
        goto LABEL_182;
      if (*(_QWORD *)a2 == 0x6C657764616F7262 && *(_BYTE *)(a2 + 8) == 108)
        goto LABEL_159;
      return result;
    case 10:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_WORD *)(a2 + 8) == 26985)
      {
        v14 = "pentium2";
        goto LABEL_178;
      }
      if (*(_QWORD *)a2 == 0x357876615F63696DLL && *(_WORD *)(a2 + 8) == 12849)
      {
LABEL_168:
        v6 = "knl";
LABEL_169:
        v7 = v6;
        v8 = (unint64_t)v6 & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      if (*(_QWORD *)a2 == 0x616C6E6F6E6E6163 && *(_WORD *)(a2 + 8) == 25963)
      {
        v22 = "cannonlake";
        goto LABEL_176;
      }
      return result;
    case 11:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 3) == 0x6F72705F6D756974)
      {
        v22 = "pentiumpro";
        goto LABEL_176;
      }
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 3) == 0x786D6D5F6D756974)
      {
        v50 = "pentium-mmx";
        goto LABEL_187;
      }
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 3) == 0x6969695F6D756974)
        goto LABEL_171;
      if (*(_QWORD *)a2 == 0x6573735F6D6F7461 && *(_QWORD *)(a2 + 3) == 0x325F346573735F6DLL)
        goto LABEL_134;
      if (*(_QWORD *)a2 == 0x69726279646E6173 && *(_QWORD *)(a2 + 3) == 0x6567646972627964)
        goto LABEL_181;
      return result;
    case 14:
      if (*(_QWORD *)a2 == 0x5F6D7569746E6570 && *(_QWORD *)(a2 + 6) == 0x336573735F345F6DLL)
      {
        v14 = "prescott";
        goto LABEL_178;
      }
      if (*(_QWORD *)a2 == 0x5F37695F65726F63 && *(_QWORD *)(a2 + 6) == 0x325F346573735F37)
      {
        v13 = "nehalem";
        goto LABEL_189;
      }
      if (*(_QWORD *)a2 == 0x5F656B616C796B73 && *(_QWORD *)(a2 + 6) == 0x3231357876615F65)
      {
        v7 = (unint64_t)"skylake-avx512" & 0xFF;
        v8 = (unint64_t)"skylake-avx512" & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      return result;
    case 16:
      if (*(_QWORD *)a2 == 0x645F325F65726F63 && *(_QWORD *)(a2 + 8) == 0x33657373735F6F75)
      {
        v7 = (unint64_t)"core2" & 0xFF;
        v8 = (unint64_t)"core2" & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      v32 = 0x7876615F6E65675FLL;
      if (*(_QWORD *)a2 == 0x646E325F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL)
      {
LABEL_181:
        v50 = "sandybridge";
LABEL_187:
        v7 = v50;
        v8 = (unint64_t)v50 & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      if (*(_QWORD *)a2 == 0x6472335F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL)
      {
LABEL_182:
        v47 = "ivybridge";
        goto LABEL_185;
      }
      if (*(_QWORD *)a2 != 0x6874345F65726F63 || *(_QWORD *)(a2 + 8) != 0x7876615F6E65675FLL)
      {
        v36 = *(_QWORD *)(a2 + 8);
        v37 = *(_QWORD *)a2 == 0x6874355F65726F63;
        goto LABEL_154;
      }
      goto LABEL_170;
    case 17:
      if (*(_QWORD *)a2 == 0x645F325F65726F63
        && *(_QWORD *)(a2 + 8) == 0x5F346573735F6F75
        && *(_BYTE *)(a2 + 16) == 49)
      {
        v7 = (unint64_t)"penryn" & 0xFF;
        v8 = (unint64_t)"penryn" & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      if (*(_QWORD *)a2 != 0x6573735F6D6F7461
        || *(_QWORD *)(a2 + 8) != 0x62766F6D5F325F34
        || *(_BYTE *)(a2 + 16) != 101)
      {
        return result;
      }
LABEL_134:
      v22 = "silvermont";
LABEL_176:
      v7 = v22;
      v8 = (unint64_t)v22 & 0xFFFFFFFFFFFFFF00;
      return (const char *)(v7 | v8);
    case 18:
      if (*(_QWORD *)a2 != 0x7365615F65726F63
        || *(_QWORD *)(a2 + 8) != 0x716C756D6C63705FLL
        || *(_WORD *)(a2 + 16) != 29028)
      {
        return result;
      }
      v14 = "westmere";
      goto LABEL_178;
    case 20:
      v32 = 2020832351;
      if (*(_QWORD *)a2 == 0x6874345F65726F63
        && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL
        && *(_DWORD *)(a2 + 16) == 2020832351)
      {
LABEL_170:
        v13 = "haswell";
LABEL_189:
        v7 = v13;
        v8 = (unint64_t)v13 & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      v36 = *(unsigned int *)(a2 + 16);
      v37 = *(_QWORD *)a2 == 0x6874355F65726F63 && *(_QWORD *)(a2 + 8) == 0x7876615F6E65675FLL;
LABEL_154:
      if (v37 && v36 == v32)
      {
LABEL_159:
        v47 = "broadwell";
LABEL_185:
        v7 = v47;
        v8 = (unint64_t)v47 & 0xFFFFFFFFFFFFFF00;
        return (const char *)(v7 | v8);
      }
      return result;
    case 23:
      if (*(_QWORD *)a2 != 0x5F6D7569746E6570
        || *(_QWORD *)(a2 + 8) != 0x785F6F6E5F696969
        || *(_QWORD *)(a2 + 15) != 0x736765725F6D6D78)
      {
        return result;
      }
LABEL_171:
      v14 = "pentium3";
LABEL_178:
      v7 = v14;
      v8 = (unint64_t)v14 & 0xFFFFFFFFFFFFFF00;
      return (const char *)(v7 | v8);
    default:
      return result;
  }
}

BOOL sub_22F20C474(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v5;
  int v7;
  BOOL v8;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;

  switch(a3)
  {
    case 3:
      if (*a2 == 28001 && *((_BYTE *)a2 + 2) == 100)
        return 1;
      if (*a2 == 28267 && *((_BYTE *)a2 + 2) == 108)
        return 1;
      v5 = 109;
      if (*a2 == 28267 && *((_BYTE *)a2 + 2) == 109)
        return 1;
      v7 = *((unsigned __int8 *)a2 + 2);
      v8 = *a2 == 27763;
      return v8 && v7 == v5;
    case 4:
      return *(_DWORD *)a2 == 1836020833;
    case 5:
      if (*(_DWORD *)a2 == 1702129257 && *((_BYTE *)a2 + 4) == 108)
        return 1;
      v11 = *((unsigned __int8 *)a2 + 4);
      v12 = *(_DWORD *)a2 == 1701998435;
      v13 = 50;
      return v12 && v11 == v13;
    case 6:
      if (*(_DWORD *)a2 == 1701998435 && a2[2] == 14185)
        return 1;
      if (*(_DWORD *)a2 == 1702261858 && a2[2] == 12658)
        return 1;
      if (*(_DWORD *)a2 == 1702261858 && a2[2] == 12914)
        return 1;
      if (*(_DWORD *)a2 == 1702257762 && a2[2] == 12658)
        return 1;
      if (*(_DWORD *)a2 == 1702257762 && a2[2] == 12914)
        return 1;
      if (*(_DWORD *)a2 == 1702257762 && a2[2] == 13170)
        return 1;
      if (*(_DWORD *)a2 == 1702257762 && a2[2] == 13426)
        return 1;
      if (*(_DWORD *)a2 == 1702260346 && a2[2] == 12658)
        return 1;
      if (*(_DWORD *)a2 == 1702260346 && a2[2] == 12914)
        return 1;
      v7 = a2[2];
      v8 = *(_DWORD *)a2 == 1702260346;
      v5 = 13170;
      return v8 && v7 == v5;
    case 7:
      if (*(_DWORD *)a2 == 1852731234 && *(_DWORD *)((char *)a2 + 3) == 1819043182)
        return 1;
      if (*(_DWORD *)a2 == 1835364980 && *(_DWORD *)((char *)a2 + 3) == 1953394541)
        return 1;
      if (*(_DWORD *)a2 == 1634231662 && *(_DWORD *)((char *)a2 + 3) == 1835363425)
        return 1;
      if (*(_DWORD *)a2 == 2004050280 && *(_DWORD *)((char *)a2 + 3) == 1819043191)
        return 1;
      v11 = *(_DWORD *)((char *)a2 + 3);
      v12 = *(_DWORD *)a2 == 1819896691;
      v13 = 1701536108;
      return v12 && v11 == v13;
    case 8:
      return *(_QWORD *)a2 == 0x746E6F6D646C6F67
          || *(_QWORD *)a2 == 0x30316D6166646D61
          || *(_QWORD *)a2 == 0x35316D6166646D61
          || *(_QWORD *)a2 == 0x6572656D74736577
          || *(_QWORD *)a2 == 0x696168676E616873
          || *(_QWORD *)a2 == 0x6C75626E61747369;
    case 9:
      if (*(_QWORD *)a2 == 0x30316D6166646D61 && *((_BYTE *)a2 + 8) == 104)
        return 1;
      if (*(_QWORD *)a2 == 0x35316D6166646D61 && *((_BYTE *)a2 + 8) == 104)
        return 1;
      if (*(_QWORD *)a2 == 0x37316D6166646D61 && *((_BYTE *)a2 + 8) == 104)
        return 1;
      if (*(_QWORD *)a2 == 0x39316D6166646D61 && *((_BYTE *)a2 + 8) == 104)
        return 1;
      if (*(_QWORD *)a2 == 0x6E6F6C6563726162 && *((_BYTE *)a2 + 8) == 97)
        return 1;
      if (*(_QWORD *)a2 == 0x6764697262797669 && *((_BYTE *)a2 + 8) == 101)
        return 1;
      if (*(_QWORD *)a2 == 0x6C657764616F7262 && *((_BYTE *)a2 + 8) == 108)
        return 1;
      v5 = 101;
      if (*(_QWORD *)a2 == 0x6B616C7265676974 && *((_BYTE *)a2 + 8) == 101)
        return 1;
      v7 = *((unsigned __int8 *)a2 + 8);
      v8 = *(_QWORD *)a2 == 0x6B616C7265646C61;
      return v8 && v7 == v5;
    case 10:
      if (*(_QWORD *)a2 == 0x6F6D7265766C6973 && a2[4] == 29806)
        return 1;
      if (*(_QWORD *)a2 == 0x616C6E6F6E6E6163 && a2[4] == 25963)
        return 1;
      if (*(_QWORD *)a2 == 0x616C7265706F6F63 && a2[4] == 25963)
        return 1;
      return *(_QWORD *)a2 == 0x616C74656B636F72 && a2[4] == 25963;
    case 11:
      if (*(_QWORD *)a2 == 0x69726279646E6173 && *(_QWORD *)((char *)a2 + 3) == 0x6567646972627964)
        return 1;
      v42 = *(_QWORD *)((char *)a2 + 3);
      v43 = *(_QWORD *)a2 == 0x6C65646163736163;
      v44 = 0x656B616C65646163;
      return v43 && v42 == v44;
    case 13:
      v42 = *(_QWORD *)((char *)a2 + 5);
      v43 = *(_QWORD *)a2 == 0x746E6F6D646C6F67;
      v44 = 0x73756C702D746E6FLL;
      return v43 && v42 == v44;
    case 14:
      if (*(_QWORD *)a2 == 0x2D656B616C796B73 && *(_QWORD *)(a2 + 3) == 0x3231357876612D65)
        return 1;
      if (*(_QWORD *)a2 == 0x2D656B616C656369 && *(_QWORD *)(a2 + 3) == 0x746E65696C632D65)
        return 1;
      if (*(_QWORD *)a2 == 0x2D656B616C656369 && *(_QWORD *)(a2 + 3) == 0x7265767265732D65)
        return 1;
      v42 = *(_QWORD *)(a2 + 3);
      v43 = *(_QWORD *)a2 == 0x6572696870706173;
      v44 = 0x7364697061726572;
      return v43 && v42 == v44;
    default:
      return 0;
  }
}

uint64_t sub_22F20CB1C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  result = 0;
  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  switch(*(_BYTE *)*a2)
  {
    case '@':
      result = sub_22F20CD24(*a2);
      if ((_DWORD)result)
      {
        *a2 = v4 + (result - 1);
        goto LABEL_2;
      }
      return result;
    case 'A':
    case 'D':
    case 'Q':
    case 'R':
    case 'S':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'k':
    case 'l':
    case 'q':
    case 't':
    case 'u':
    case 'v':
    case 'x':
    case 'y':
      goto LABEL_2;
    case 'C':
    case 'G':
      goto LABEL_4;
    case 'I':
      *(_DWORD *)a3 |= 0x10u;
      v8 = 0x1F00000000;
      goto LABEL_18;
    case 'J':
      *(_DWORD *)a3 |= 0x10u;
      v8 = 0x3F00000000;
      goto LABEL_18;
    case 'K':
      *(_DWORD *)a3 |= 0x10u;
      v8 = 0x7FFFFFFF80;
      goto LABEL_18;
    case 'L':
      v9 = 0;
      v15 = 0xFFFF000000FFLL;
      v16 = -1;
      *(_DWORD *)a3 |= 0x10u;
      v10 = a3 + 24;
      do
      {
        v14 = *(_DWORD *)((char *)&v15 + v9);
        sub_22F1F6EC0(v10, &v14);
        v9 += 4;
      }
      while (v9 != 12);
      goto LABEL_4;
    case 'M':
      *(_DWORD *)a3 |= 0x10u;
      v8 = 0x300000000;
      goto LABEL_18;
    case 'N':
      *(_DWORD *)a3 |= 0x10u;
      v8 = 0xFF00000000;
      goto LABEL_18;
    case 'O':
      *(_DWORD *)a3 |= 0x10u;
      v8 = 0x7F00000000;
LABEL_18:
      *(_QWORD *)(a3 + 8) = v8;
      result = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    case 'Y':
      *a2 = v4 + 1;
      v11 = *(char *)(v4 + 1);
      v12 = (v11 - 105) > 0x11 || ((1 << (*(_BYTE *)(v4 + 1) - 105)) & 0x20815) == 0;
      if (v12 && v11 != 50)
        goto LABEL_29;
      goto LABEL_2;
    case 'Z':
    case 'e':
    case 's':
      v7 = *(_DWORD *)a3 | 0x10;
      goto LABEL_3;
    case 'f':
      v13 = (_BYTE *)(a3 + 80);
      if (*(char *)(a3 + 103) < 0)
        v13 = *(_BYTE **)(a3 + 80);
      if (*v13 == 61)
      {
LABEL_29:
        result = 0;
      }
      else
      {
LABEL_2:
        v7 = *(_DWORD *)a3 | 2;
LABEL_3:
        *(_DWORD *)a3 = v7;
LABEL_4:
        result = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F20CD24(uint64_t a1)
{
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  _BOOL4 v15;

  if (!a1)
  {
    v3 = 0;
    goto LABEL_102;
  }
  v2 = strlen((const char *)a1);
  if (v2 == 4)
  {
    v3 = 0x100000004;
    if (*(_DWORD *)a1 == 1633903424
      || *(_DWORD *)a1 == 1650680640
      || *(_DWORD *)a1 == 1667457856
      || *(_DWORD *)a1 == 1701012288
      || *(_DWORD *)a1 == 2053333824
      || *(_DWORD *)a1 == 1734566720)
    {
      goto LABEL_102;
    }
    if (*(_DWORD *)a1 != 1818452800)
    {
      v4 = 0;
      goto LABEL_11;
    }
    goto LABEL_53;
  }
  if (v2 == 5)
  {
    v3 = 0x100000005;
    if (*(_DWORD *)a1 == 1633903424 && *(_BYTE *)(a1 + 4) == 101)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1650680640 && *(_BYTE *)(a1 + 4) == 101)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1734566720 && *(_BYTE *)(a1 + 4) == 101)
      goto LABEL_102;
    if (*(_DWORD *)a1 != 1818452800 || *(_BYTE *)(a1 + 4) != 101)
    {
      if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 97)
        goto LABEL_102;
      v4 = 0;
      v15 = 1;
      goto LABEL_54;
    }
LABEL_53:
    v15 = v2 != 4;
    v4 = v3;
LABEL_54:
    v5 = (v4 & 0xFF00000000) == 0;
    if (!v15 || (v4 & 0xFF00000000) != 0)
    {
LABEL_94:
      if (v5 && v2 == 4)
      {
        v3 = 0x100000004;
        if (*(_DWORD *)a1 != 1868784448 && *(_DWORD *)a1 != 1885561664 && *(_DWORD *)a1 != 1935893312)
          v3 = v4;
      }
      else
      {
        v3 = v4;
      }
      goto LABEL_102;
    }
    v3 = 0x100000005;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 98)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 99)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 101)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 122)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 103)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 108)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 111)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 112)
      goto LABEL_102;
    if (*(_DWORD *)a1 == 1852007232 && *(_BYTE *)(a1 + 4) == 115)
      goto LABEL_102;
LABEL_11:
    v5 = 1;
    goto LABEL_94;
  }
  if (v2 != 6
    || (*(_DWORD *)a1 == 1852007232 ? (v6 = *(unsigned __int16 *)(a1 + 4) == 25953) : (v6 = 0),
        (v3 = 0x100000006, !v6)
     && (*(_DWORD *)a1 == 1852007232 ? (v7 = *(unsigned __int16 *)(a1 + 4) == 25954) : (v7 = 0),
         !v7
      && (*(_DWORD *)a1 == 1852007232 ? (v8 = *(unsigned __int16 *)(a1 + 4) == 25959) : (v8 = 0),
          (v3 = 0x100000006, !v8)
       && (*(_DWORD *)a1 == 1852007232 ? (v9 = *(unsigned __int16 *)(a1 + 4) == 25964) : (v9 = 0), !v9)))))
  {
    v3 = 0;
  }
LABEL_102:
  if ((v3 & 0xFF00000000) != 0)
    return v3;
  else
    return 0;
}

uint64_t sub_22F20D0A4(int *a1, uint64_t a2, char *a3, uint64_t a4, unsigned int a5)
{
  int v8;
  char v9;
  BOOL v10;
  uint64_t result;
  int v12;

  v8 = *a3;
  v9 = v8 - 102;
  if ((v8 - 102) > 0x13)
    goto LABEL_8;
  if (((1 << v9) & 0xC001) != 0)
  {
LABEL_16:
    v10 = a5 >= 0x81;
    return !v10;
  }
  if (((1 << v9) & 0x50000) != 0)
  {
    if ((*(unsigned int (**)(int *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 520))(a1, a2, "avx512f", 7))
    {
LABEL_7:
      v10 = a5 >= 0x201;
      return !v10;
    }
    if ((*(unsigned int (**)(int *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 520))(a1, a2, "avx", 3))
    {
LABEL_15:
      v10 = a5 >= 0x101;
      return !v10;
    }
    goto LABEL_16;
  }
  if (((1 << v9) & 0x80020) != 0)
  {
LABEL_5:
    v10 = a5 >= 0x41;
    return !v10;
  }
LABEL_8:
  if (v8 != 89)
    return 1;
  result = 0;
  v12 = a3[1];
  if (v12 <= 108)
  {
    if (v12 != 50 && v12 != 105)
    {
      if (v12 != 107)
        return result;
      goto LABEL_5;
    }
    return a1[91] >= 2;
  }
  if (v12 != 122)
  {
    if (v12 != 116)
    {
      if (v12 != 109)
        return result;
      goto LABEL_5;
    }
    return a1[91] >= 2;
  }
  if ((*(unsigned int (**)(int *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 520))(a1, a2, "avx512f", 7))
  {
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(int *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 520))(a1, a2, "avx", 3))
  {
    goto LABEL_15;
  }
  LODWORD(result) = (*(uint64_t (**)(int *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 520))(a1, a2, "sse", 3);
  if (a5 < 0x81)
    return result;
  else
    return 0;
}

void sub_22F20D260(uint64_t *a1@<X1>, char *a2@<X8>)
{
  _BYTE *v4;
  int v5;
  char v6;
  int v7;
  BOOL v8;
  std::string *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  std::string::size_type v13;
  std::string *p_s;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string __s;
  std::string v20;

  v4 = (_BYTE *)*a1;
  v5 = *(char *)*a1;
  v6 = *(_BYTE *)*a1;
  if (v5 > 88)
  {
    if (v5 <= 111)
    {
      switch(*(_BYTE *)*a1)
      {
        case 'Y':
          v7 = (char)v4[1];
          v8 = (v7 - 105) > 0x11 || ((1 << (v4[1] - 105)) & 0x20815) == 0;
          if (v8 && v7 != 50)
            goto LABEL_42;
          *((_BYTE *)&v20.__r_.__value_.__s + 23) = 1;
          LOWORD(v20.__r_.__value_.__l.__data_) = 94;
          *a1 = (uint64_t)(v4 + 1);
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
          LOWORD(__s.__r_.__value_.__l.__data_) = *(_WORD *)v4;
          __s.__r_.__value_.__s.__data_[2] = 0;
          v9 = std::string::append(&v20, (const std::string::value_type *)&__s, 2uLL);
          *(std::string *)a2 = *v9;
          v9->__r_.__value_.__r.__words[0] = 0;
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          break;
        case 'a':
          a2[23] = 4;
          v10 = 2105041275;
          goto LABEL_30;
        case 'b':
          a2[23] = 4;
          v10 = 2105041531;
          goto LABEL_30;
        case 'c':
          a2[23] = 4;
          v10 = 2105041787;
          goto LABEL_30;
        case 'd':
          a2[23] = 4;
          v10 = 2105042043;
          goto LABEL_30;
        default:
          goto LABEL_42;
      }
      return;
    }
    if (v5 == 112)
    {
      a2[23] = 1;
      *(_WORD *)a2 = 112;
      return;
    }
    if (v5 != 116)
    {
      if (v5 == 117)
      {
        a2[23] = 7;
        strcpy(a2, "{st(1)}");
        return;
      }
      goto LABEL_42;
    }
    a2[23] = 4;
    v10 = 2104783739;
LABEL_30:
    *(_DWORD *)a2 = v10;
    a2[4] = 0;
    return;
  }
  if (v5 != 64)
  {
    if (v5 == 68)
    {
      a2[23] = 4;
      v10 = 2104059003;
      goto LABEL_30;
    }
    if (v5 == 83)
    {
      a2[23] = 4;
      v10 = 2104062843;
      goto LABEL_30;
    }
LABEL_42:
    a2[23] = 1;
    *a2 = v6;
    a2[1] = 0;
    return;
  }
  v11 = sub_22F20CD24(*a1);
  if (!v11)
    goto LABEL_42;
  v12 = v11;
  v13 = v11;
  if (v11 >= 0x17)
  {
    if ((v11 | 7) == 0x17)
      v15 = (v11 & 0xFFFFFFF8) + 8;
    else
      v15 = v11 | 7;
    p_s = (std::string *)operator new(v15 + 1);
    __s.__r_.__value_.__l.__size_ = v13;
    __s.__r_.__value_.__r.__words[2] = v15 - 0x7FFFFFFFFFFFFFFFLL;
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  }
  else
  {
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = v11;
    p_s = &__s;
  }
  memmove(p_s, v4, v13);
  p_s->__r_.__value_.__s.__data_[v13] = 0;
  v16 = std::string::insert(&__s, 0, "{");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v20, "}");
  *(std::string *)a2 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *a1 += v12 - 1;
}

char *sub_22F20D598(int a1)
{
  if ((a1 - 76) > 0x142)
    return 0;
  else
    return off_24FCAE078[(__int16)(a1 - 76)];
}

char *sub_22F20D5C0(int a1)
{
  return off_24FCAED20[a1];
}

void sub_22F20D5D0(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  char __p[18];
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v4 = MEMORY[0x24BED83D8] + 16;
  v12 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  v3 = 17;
  strcpy(__p, "metalfe-32023.334");
  llvm::raw_ostream::write((llvm::raw_ostream *)&v4);
  llvm::raw_ostream::write((llvm::raw_ostream *)&v4, __p);
  v1 = v8;
  if ((unint64_t)v8 >= v7)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v4);
  }
  else
  {
    ++v8;
    *v1 = 41;
  }
  if (v3 < 0)
    operator delete(*(void **)__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
}

void sub_22F20D6D4(const void *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  uint64_t *v6;
  void **p_dst;
  char v8;
  void *v9;
  llvm::raw_ostream *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  void *__dst;
  char v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v17 = 0;
  __dst = 0;
  v16 = 0;
  v14 = MEMORY[0x24BED83D8] + 16;
  v22 = a3;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "Apple ");
  v5 = (char *)__dst;
  if (a2 <= v17 - (_BYTE *)__dst)
  {
    p_dst = &__dst;
    if (a2)
    {
      memcpy(__dst, a1, a2);
      v5 = (char *)__dst + a2;
      __dst = (char *)__dst + a2;
    }
    v6 = &v14;
  }
  else
  {
    v6 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v14, (const char *)a1);
    p_dst = (void **)(v6 + 4);
    v5 = (char *)v6[4];
  }
  if ((unint64_t)(v6[3] - (_QWORD)v5) > 0x11)
  {
    *((_WORD *)v5 + 8) = 13363;
    *(_OWORD *)v5 = *(_OWORD *)" version 32023.334";
    *p_dst = (char *)*p_dst + 18;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v6, " version 32023.334");
  }
  sub_22F20D5D0(__p);
  v8 = v13;
  v9 = (void *)(v13 & 0x7F);
  if (v13 < 0)
    v9 = __p[1];
  if (v9)
  {
    if (v17 == __dst)
    {
      v10 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v14, " ");
    }
    else
    {
      *(_BYTE *)__dst = 32;
      __dst = (char *)__dst + 1;
      v10 = (llvm::raw_ostream *)&v14;
    }
    if (v13 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    llvm::raw_ostream::write(v10, (const char *)v11);
    v8 = v13;
  }
  if (v8 < 0)
    operator delete(__p[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
}

void sub_22F20D8DC(_QWORD *a1@<X8>)
{
  char v1;
  void *v2;
  llvm::raw_ostream *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::write((llvm::raw_ostream *)&v7, "Apple ");
  if ((unint64_t)(v10 - v11) > 0xE)
  {
    qmemcpy(v11, "Metal 32023.334", 15);
    v11 += 15;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v7, "Metal 32023.334");
  }
  sub_22F20D5D0(__p);
  v1 = v6;
  v2 = (void *)(v6 & 0x7F);
  if (v6 < 0)
    v2 = __p[1];
  if (v2)
  {
    if (v10 == v11)
    {
      v3 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v7, " ");
    }
    else
    {
      *v11++ = 32;
      v3 = (llvm::raw_ostream *)&v7;
    }
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    llvm::raw_ostream::write(v3, (const char *)v4);
    v1 = v6;
  }
  if (v1 < 0)
    operator delete(__p[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

void sub_22F20DA74(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  char v17;
  char *v18;
  std::string::size_type v19;
  unint64_t v20;
  const char *v21;
  _BOOL4 v22;
  int v23;
  std::string::size_type v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v47;
  size_t v48;
  BOOL v49;
  BOOL v50;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  const char *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  std::string *p_dst;
  uint64_t v67;
  uint64_t v68;
  std::string *v69;
  std::string::size_type v70;
  void **v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 **v76;
  char v77;
  unsigned __int16 *v78;
  size_t v79;
  _BOOL4 v80;
  int v81;
  BOOL v82;
  uint64_t v83;
  std::string::size_type v85;
  const char *v86;
  unsigned __int8 *v88;
  char v89;
  std::string __dst;
  void *__p[2];
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  int v97[2];
  void *v98[2];
  _QWORD v99[7];

  v99[5] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(a1 + 128) + 24) |= 0x10u;
  *(_BYTE *)(*(_QWORD *)(a1 + 128) + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 128) + 24) & 0xFE | *(_BYTE *)(a2 + 4) & 1;
  *(_DWORD *)(a1 + 12) = (*(unsigned __int8 *)(a2 + 40) >> 2) & 1;
  *(_BYTE *)(a1 + 7) = (*(_DWORD *)(a2 + 4) & 0x200000) != 0;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(a2 + 4) & 0x400000) != 0;
  *(_BYTE *)(a1 + 9) = (*(_DWORD *)(a2 + 4) & 0x40000) != 0;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
    *(_DWORD *)(a1 + 20) = v5;
  v7 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  if (v7)
  {
    *(_DWORD *)(a1 + 24) = v7;
    v6 = *(_DWORD *)(a2 + 20);
  }
  if (v6)
    *(_DWORD *)(a1 + 28) = v6;
  v8 = *(_DWORD *)(a2 + 4);
  if ((v8 & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 128);
    v10 = 4;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 128);
    if ((v8 & 4) != 0)
      v10 = 3;
    else
      v10 = 1;
  }
  *(_DWORD *)(v9 + 28) = v10;
  v98[1] = (void *)0xA00000000;
  v11 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)v97 = v11;
  v98[0] = v99;
  if (v11)
    ++*v11;
  v12 = 0;
  v88 = (unsigned __int8 *)(a1 + 320);
  v13 = 1;
  while ((v13 & 1) != 0 || a3)
  {
    v89 = v12;
    v14 = -1431655765 * ((*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(_QWORD *)(a2 + 96) + 24 * i;
        v17 = *(_BYTE *)(v16 + 23);
        if (v17 >= 0)
          v18 = (char *)(*(_QWORD *)(a2 + 96) + 24 * i);
        else
          v18 = *(char **)v16;
        if (v17 >= 0)
          v19 = v17 & 0x7F;
        else
          v19 = *(_QWORD *)(v16 + 8);
        if (v19 == 8)
        {
          if (*(_QWORD *)v18 == 0x303D74616D726F66)
            v20 = 9;
          else
            v20 = 8;
          v21 = "no-format";
          if (*(_QWORD *)v18 != 0x303D74616D726F66)
            v21 = v18;
        }
        else
        {
          v20 = v19;
          v21 = v18;
          if (v19 < 3)
          {
            v22 = 0;
            v23 = 3;
            if ((v13 & 1) != 0)
              goto LABEL_89;
            goto LABEL_34;
          }
        }
        v29 = *(unsigned __int16 *)v21 ^ 0x6F6E | *((unsigned __int8 *)v21 + 2) ^ 0x2D;
        if (v20 >= 3)
          v30 = 3;
        else
          v30 = v20;
        v31 = v29 == 0;
        v32 = v29 != 0;
        v22 = v29 == 0;
        if (v29)
          v33 = 0;
        else
          v33 = v30;
        v34 = &v21[v33];
        if (v31)
          v23 = 1;
        else
          v23 = 3;
        v35 = v20 - v33;
        if (v35 == 10)
        {
          if (*(_QWORD *)v34 == 0x6968747972657665 && *((_WORD *)v34 + 4) == 26478)
          {
            if ((v13 & 1) != 0)
            {
              v43 = *(_QWORD *)(a1 + 128);
              v44 = *(_BYTE *)(v43 + 24);
              if (!v32)
              {
                *(_BYTE *)(v43 + 24) = v44 & 0xFD;
                sub_22F41A638(a1, 0, 1, 0, 0);
                continue;
              }
              v45 = v44 | 2;
              goto LABEL_113;
            }
            continue;
          }
          if (*(_DWORD *)v34 == 1869771365 && v34[4] == 114)
          {
            if (v34[5] == 61)
            {
              v19 = 4;
              goto LABEL_101;
            }
            goto LABEL_136;
          }
          v19 = 10;
          goto LABEL_88;
        }
        if (v35 == 14)
        {
          if (*(_QWORD *)v34 == 0x682D6D6574737973 && *(_QWORD *)(v34 + 6) == 0x737265646165682DLL)
          {
            if ((v13 & 1) != 0)
              *(_BYTE *)(*(_QWORD *)(a1 + 128) + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 128) + 24) & 0xEF | (16 * !v32);
            continue;
          }
          if (*(_DWORD *)v34 == 1869771365 && v34[4] == 114)
          {
            if (v34[5] == 61)
            {
              v19 = 8;
              goto LABEL_101;
            }
LABEL_136:
            if ((v13 & 1) == 0)
            {
              *(_QWORD *)(a1 + 312) = 0x38500000000;
              if (*(char *)(a1 + 311) < 0)
              {
                **(_BYTE **)(a1 + 288) = 0;
                *(_QWORD *)(a1 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(a1 + 288) = 0;
                *(_BYTE *)(a1 + 311) = 0;
              }
              v52 = v88;
              v93 = v88;
              v94 = 0;
              v95 = a1;
              v96 = 1;
              *(_BYTE *)(a1 + 320) = 0;
              *(_DWORD *)(a1 + 664) = 0;
              v53 = *(unsigned int *)(a1 + 776);
              if ((_DWORD)v53)
              {
                v54 = *(_QWORD *)(a1 + 768);
                v55 = 56 * v53;
                do
                {
                  if (*(char *)(v54 + v55 - 9) < 0)
                    operator delete(*(void **)(v54 + v55 - 32));
                  v55 -= 56;
                }
                while (v55);
                v52 = v93;
                *(_DWORD *)(a1 + 776) = 0;
                if (!v52)
                {
                  v52 = (unsigned __int8 *)sub_22E3B8AAC(v94);
                  v93 = v52;
                }
              }
              else
              {
                *(_DWORD *)(a1 + 776) = 0;
              }
              v52[*v52 + 1] = 1;
              v56 = v93;
              v57 = *v93;
              *v93 = v57 + 1;
              v58 = &v56[8 * v57];
              v59 = "-Werror";
              goto LABEL_159;
            }
            continue;
          }
          if (*(_QWORD *)v34 == 0x72652D6C61746166 && *((_DWORD *)v34 + 2) == 1936879474)
            goto LABEL_114;
          v19 = 14;
          goto LABEL_88;
        }
        if (v35 < 5)
          goto LABEL_87;
        if (*(_DWORD *)v34 != 1869771365 || v34[4] != 114)
        {
          if (v35 >= 0xC && *(_QWORD *)v34 == 0x72652D6C61746166 && *((_DWORD *)v34 + 2) == 1936879474)
          {
            if (v35 == 12)
            {
              if ((v13 & 1) != 0)
              {
                v43 = *(_QWORD *)(a1 + 128);
                v45 = *(_BYTE *)(v43 + 24) & 0xF7 | (8 * v32);
                goto LABEL_113;
              }
              continue;
            }
LABEL_114:
            if ((*((unsigned __int8 *)v34 + 12) | 0x10) != 0x3D || v35 == 13)
            {
              if ((v13 & 1) == 0)
              {
                *(_QWORD *)(a1 + 312) = 0x38500000000;
                if (*(char *)(a1 + 311) < 0)
                {
                  **(_BYTE **)(a1 + 288) = 0;
                  *(_QWORD *)(a1 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(a1 + 288) = 0;
                  *(_BYTE *)(a1 + 311) = 0;
                }
                v60 = v88;
                v93 = v88;
                v94 = 0;
                v95 = a1;
                v96 = 1;
                *(_BYTE *)(a1 + 320) = 0;
                *(_DWORD *)(a1 + 664) = 0;
                v61 = *(unsigned int *)(a1 + 776);
                if ((_DWORD)v61)
                {
                  v62 = *(_QWORD *)(a1 + 768);
                  v63 = 56 * v61;
                  do
                  {
                    if (*(char *)(v62 + v63 - 9) < 0)
                      operator delete(*(void **)(v62 + v63 - 32));
                    v63 -= 56;
                  }
                  while (v63);
                  v60 = v93;
                  *(_DWORD *)(a1 + 776) = 0;
                  if (!v60)
                  {
                    v60 = (unsigned __int8 *)sub_22E3B8AAC(v94);
                    v93 = v60;
                  }
                }
                else
                {
                  *(_DWORD *)(a1 + 776) = 0;
                }
                v60[*v60 + 1] = 1;
                v64 = v93;
                v65 = *v93;
                *v93 = v65 + 1;
                v58 = &v64[8 * v65];
                v59 = "-Wfatal-errors";
LABEL_159:
                *((_QWORD *)v58 + 2) = v59;
                if (v18)
                {
                  if (v19 > 0x7FFFFFFFFFFFFFF7)
                    abort();
                  if (v19 >= 0x17)
                  {
                    v67 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v19 | 7) != 0x17)
                      v67 = v19 | 7;
                    v68 = v67 + 1;
                    p_dst = (std::string *)operator new(v67 + 1);
                    __dst.__r_.__value_.__l.__size_ = v19;
                    __dst.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                  }
                  else
                  {
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
                    p_dst = &__dst;
                  }
                  memmove(p_dst, v18, v19);
                  p_dst->__r_.__value_.__s.__data_[v19] = 0;
                }
                else
                {
                  memset(&__dst, 0, sizeof(__dst));
                }
                v69 = std::string::insert(&__dst, 0, "-W");
                v70 = v69->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
                v92 = v70;
                v69->__r_.__value_.__l.__size_ = 0;
                v69->__r_.__value_.__r.__words[2] = 0;
                v69->__r_.__value_.__r.__words[0] = 0;
                if (v92 >= 0)
                  v71 = __p;
                else
                  v71 = (void **)__p[0];
                if (v92 >= 0)
                  v72 = HIBYTE(v92) & 0x7F;
                else
                  v72 = (size_t)__p[1];
                sub_22E3B89A8(&v93, v71, v72);
                if (SHIBYTE(v92) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                sub_22E3BB0B8((uint64_t)&v93);
                continue;
              }
            }
            else
            {
              v47 = (uint64_t)(v34 + 13);
              v48 = v35 - 13;
              if ((v13 & 1) != 0)
              {
                sub_22F41A4F4(a1, (void *)(v34 + 13), v35 - 13, v32);
                continue;
              }
              if (sub_22F1CFA08(v97[0], 0, (void *)(v34 + 13), v35 - 13, (uint64_t)v98))
              {
                v26 = a1;
                v25 = "-Wfatal-errors=";
                v24 = 15;
                v27 = v47;
                v28 = v48;
                goto LABEL_43;
              }
            }
            continue;
          }
LABEL_87:
          v19 = v35;
LABEL_88:
          v18 = (char *)v34;
          if ((v13 & 1) != 0)
          {
LABEL_89:
            sub_22F1CCCF4(a1, 0, v18, v19, v23, 0);
            continue;
          }
LABEL_34:
          if (sub_22F1CFA08(v97[0], 0, v18, v19, (uint64_t)v98))
          {
            if (v22)
              v24 = 5;
            else
              v24 = 2;
            if (v22)
              v25 = "-Wno-";
            else
              v25 = "-W";
            v26 = a1;
            goto LABEL_42;
          }
          continue;
        }
        if (v35 >= 6)
        {
          if (v34[5] != 61)
          {
            if (v35 == 35)
            {
              v49 = *(_QWORD *)(v34 + 5) == 0x6963696C706D692DLL && *(_QWORD *)(v34 + 13) == 0x6974636E75662D74;
              v50 = v49 && *(_QWORD *)(v34 + 21) == 0x616C6365642D6E6FLL;
              if (v50 && *(_QWORD *)(v34 + 27) == 0x6E6F69746172616CLL)
              {
                v19 = 29;
LABEL_101:
                v18 = (char *)(v34 + 6);
                if ((v13 & 1) != 0)
                {
                  sub_22F1CCDDC(a1, (void *)(v34 + 6), v19, v32);
                  continue;
                }
                if (!sub_22F1CFA08(v97[0], 0, (void *)(v34 + 6), v19, (uint64_t)v98))
                  continue;
                v26 = a1;
                v25 = "-Werror=";
                v24 = 8;
LABEL_42:
                v27 = (uint64_t)v18;
                v28 = v19;
LABEL_43:
                sub_22F20E4FC(v26, 0, v25, v24, v27, v28);
                continue;
              }
            }
            goto LABEL_136;
          }
          v19 = v35 - 6;
          if (v35 > 6)
            goto LABEL_101;
        }
        if ((v13 & 1) != 0)
        {
          v43 = *(_QWORD *)(a1 + 128);
          v45 = *(_BYTE *)(v43 + 24) & 0xFB | (4 * v32);
LABEL_113:
          *(_BYTE *)(v43 + 24) = v45;
        }
      }
    }
    v73 = -1431655765 * ((*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
    if ((_DWORD)v73)
    {
      v74 = 0;
      v75 = 24 * v73;
      do
      {
        v76 = (unsigned __int16 **)(*(_QWORD *)(a2 + 144) + v74);
        v77 = *((_BYTE *)v76 + 23);
        if (v77 >= 0)
          v78 = (unsigned __int16 *)(*(_QWORD *)(a2 + 144) + v74);
        else
          v78 = *v76;
        if (v77 >= 0)
          v79 = v77 & 0x7F;
        else
          v79 = (size_t)v76[1];
        if (v79 >= 3)
        {
          v82 = (*v78 ^ 0x6F6E | *((unsigned __int8 *)v78 + 2) ^ 0x2D) == 0;
          v80 = v82;
          if (*v78 ^ 0x6F6E | *((unsigned __int8 *)v78 + 2) ^ 0x2D)
            v83 = 0;
          else
            v83 = 3;
          v78 = (unsigned __int16 *)((char *)v78 + v83);
          if (v82)
            v79 -= 3;
          if (v82)
            v81 = 1;
          else
            v81 = 2;
          if (v79 == 10)
          {
            if (*(_QWORD *)v78 == 0x6968747972657665 && v78[4] == 26478)
            {
              if ((v13 & 1) != 0)
                sub_22F41A638(a1, (char *)1, v81, 0, 0);
              goto LABEL_219;
            }
            v79 = 10;
          }
        }
        else
        {
          v80 = 0;
          v81 = 2;
        }
        if ((v13 & 1) != 0)
        {
          sub_22F1CCCF4(a1, 1, v78, v79, v81, 0);
        }
        else if (sub_22F1CFA08(v97[0], 1, v78, v79, (uint64_t)v98))
        {
          if (v80)
            v85 = 5;
          else
            v85 = 2;
          if (v80)
            v86 = "-Rno-";
          else
            v86 = "-R";
          sub_22F20E4FC(a1, 1u, v86, v85, (uint64_t)v78, v79);
        }
LABEL_219:
        v74 += 24;
      }
      while (v75 != v74);
    }
    v13 = 0;
    v12 = 1;
    if ((v89 & 1) != 0)
      break;
  }
  sub_22E3B3D40((uint64_t *)v97);
  if (v98[0] != v99)
    free(v98[0]);
}

uint64_t sub_22F20E4FC(uint64_t a1, unsigned int a2, const void *a3, std::string::size_type a4, uint64_t a5, size_t a6)
{
  const void *v7;
  char *v12;
  char *v13;
  size_t v14;
  size_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void **p_dst;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  char v32;
  BOOL v33;
  std::string *v34;
  size_t v35;
  size_t size;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  void *p_p;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  char v49;
  BOOL v50;
  std::string *v51;
  size_t v52;
  size_t v53;
  std::string::size_type v55;
  std::string v56;
  void *__p;
  std::string::size_type v58;
  int64_t v59;
  std::string v60;
  void **__dst;
  std::string::size_type v62;
  int64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;

  v7 = (const void *)a5;
  v12 = sub_22F1CFBB8(a2, a5, a6);
  v13 = v12;
  v15 = v14;
  *(_QWORD *)(a1 + 312) = 0x38400000000;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v16 = (unsigned __int8 *)(a1 + 320);
  v64 = (unsigned __int8 *)(a1 + 320);
  v65 = 0;
  v66 = a1;
  v67 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v17 = *(unsigned int *)(a1 + 776);
  if ((_DWORD)v17)
  {
    v55 = a4;
    v18 = v7;
    v19 = a3;
    v20 = v12;
    v21 = *(_QWORD *)(a1 + 768);
    v22 = 56 * v17;
    do
    {
      if (*(char *)(v21 + v22 - 9) < 0)
        operator delete(*(void **)(v21 + v22 - 32));
      v22 -= 56;
    }
    while (v22);
    LODWORD(v17) = *v16;
    v13 = v20;
    a3 = v19;
    v7 = v18;
    a4 = v55;
  }
  *(_DWORD *)(a1 + 776) = 0;
  v16[v17 + 1] = 2;
  *(_BYTE *)(a1 + 320) = v17 + 1;
  *(_QWORD *)&v16[8 * v17 + 16] = a2 != 0;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_83;
  if (a6 >= 0x17)
  {
    v24 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v24 = a6 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v62 = a6;
    v63 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_17;
  }
  HIBYTE(v63) = a6;
  p_dst = (void **)&__dst;
  if (a6)
LABEL_17:
    memmove(p_dst, v7, a6);
  *((_BYTE *)p_dst + a6) = 0;
  if (!a3)
  {
    memset(&v60, 0, sizeof(v60));
    goto LABEL_29;
  }
  if (a4 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_83;
  if (a4 >= 0x17)
  {
    v27 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v27 = a4 | 7;
    v28 = v27 + 1;
    v26 = operator new(v27 + 1);
    v60.__r_.__value_.__l.__size_ = a4;
    v60.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  }
  else
  {
    *((_BYTE *)&v60.__r_.__value_.__s + 23) = a4;
    v26 = &v60;
    if (!a4)
      goto LABEL_28;
  }
  memmove(v26, a3, a4);
LABEL_28:
  *((_BYTE *)v26 + a4) = 0;
LABEL_29:
  if (v63 >= 0)
    v29 = (const std::string::value_type *)&__dst;
  else
    v29 = (const std::string::value_type *)__dst;
  if (v63 >= 0)
    v30 = HIBYTE(v63) & 0x7F;
  else
    v30 = v62;
  v31 = std::string::append(&v60, v29, v30);
  v32 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v33 = v32 < 0;
  if (v32 >= 0)
    v34 = v31;
  else
    v34 = (std::string *)v31->__r_.__value_.__r.__words[0];
  v35 = v32 & 0x7F;
  if (v33)
    size = v31->__r_.__value_.__l.__size_;
  else
    size = v35;
  sub_22E3B89A8(&v64, v34, size);
  v37 = v64;
  if (!v64)
  {
    v37 = (unsigned __int8 *)sub_22E3B8AAC(v65);
    v64 = v37;
  }
  v37[*v37 + 1] = 2;
  v38 = v64;
  v39 = *v64;
  *v64 = v39 + 1;
  *(_QWORD *)&v38[8 * v39 + 16] = v15 != 0;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_83;
  if (v15 >= 0x17)
  {
    v41 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v41 = v15 | 7;
    v42 = v41 + 1;
    p_p = operator new(v41 + 1);
    v58 = v15;
    v59 = v42 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_50;
  }
  HIBYTE(v59) = v15;
  p_p = &__p;
  if (v15)
LABEL_50:
    memmove(p_p, v13, v15);
  *((_BYTE *)p_p + v15) = 0;
  if (!a3)
  {
    memset(&v56, 0, sizeof(v56));
    goto LABEL_62;
  }
  if (a4 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
    abort();
  if (a4 >= 0x17)
  {
    v44 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v44 = a4 | 7;
    v45 = v44 + 1;
    v43 = operator new(v44 + 1);
    v56.__r_.__value_.__l.__size_ = a4;
    v56.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  }
  else
  {
    *((_BYTE *)&v56.__r_.__value_.__s + 23) = a4;
    v43 = &v56;
    if (!a4)
      goto LABEL_61;
  }
  memmove(v43, a3, a4);
LABEL_61:
  *((_BYTE *)v43 + a4) = 0;
LABEL_62:
  if (v59 >= 0)
    v46 = (const std::string::value_type *)&__p;
  else
    v46 = (const std::string::value_type *)__p;
  if (v59 >= 0)
    v47 = HIBYTE(v59) & 0x7F;
  else
    v47 = v58;
  v48 = std::string::append(&v56, v46, v47);
  v49 = HIBYTE(v48->__r_.__value_.__r.__words[2]);
  v50 = v49 < 0;
  if (v49 >= 0)
    v51 = v48;
  else
    v51 = (std::string *)v48->__r_.__value_.__r.__words[0];
  v52 = v49 & 0x7F;
  if (v50)
    v53 = v48->__r_.__value_.__l.__size_;
  else
    v53 = v52;
  sub_22E3B89A8(&v64, v51, v53);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59) < 0)
    operator delete(__p);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63) < 0)
    operator delete(__dst);
  return sub_22E3BB0B8((uint64_t)&v64);
}

uint64_t sub_22F20E910(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  uint64_t v5;
  BOOL v6;

  v2 = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 27745 || *(_BYTE *)(a1 + 2) != 108)
        goto LABEL_15;
      v2 = 0x10000000FLL;
      break;
    case 4:
      v2 = (unint64_t)(*(_DWORD *)a1 == 1701736302) << 32;
      break;
    case 5:
      v4 = *(_DWORD *)a1 ^ 0x65707974 | *(unsigned __int8 *)(a1 + 4) ^ 0x64;
      v5 = 0x100000008;
      goto LABEL_11;
    case 6:
      v4 = *(_DWORD *)a1 ^ 0x74737563 | *(unsigned __int16 *)(a1 + 4) ^ 0x6D6F;
      v5 = 0x100000004;
LABEL_11:
      if (v4)
        v2 = 0;
      else
        v2 = v5;
      break;
    case 8:
      if (*(_QWORD *)a1 == 0x6E6F6974636E7566)
        v2 = 0x100000003;
      else
LABEL_15:
        v2 = 0;
      break;
    case 13:
      v6 = (*(_QWORD *)a1 ^ 0x6E6F6974636E7566 | *(_QWORD *)(a1 + 5) ^ 0x746978652D6E6F69) == 0;
      v2 = 0x100000002;
      goto LABEL_18;
    case 14:
      v6 = (*(_QWORD *)a1 ^ 0x6E6F6974636E7566 | *(_QWORD *)(a1 + 6) ^ 0x7972746E652D6E6FLL) == 0;
      v2 = 0x100000001;
LABEL_18:
      if (!v6)
        v2 = 0;
      break;
    default:
      break;
  }
  if ((v2 & 0x100000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t sub_22F20EAB0(uint64_t result, uint64_t a2)
{
  int v3;
  unsigned int v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = result;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 15)
    {
      v4 = *(_DWORD *)(a2 + 8);
      v5 = (_DWORD *)(a2 + 8);
      if (v4 >= *(_DWORD *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v4 = *(_DWORD *)(a2 + 8);
      }
      v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v4);
      *v6 = "all";
      v7 = 3;
    }
    else
    {
      if ((result & 4) != 0)
      {
        v9 = *(_DWORD *)(a2 + 8);
        if (v9 >= *(_DWORD *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *(_DWORD *)(a2 + 8);
        }
        v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v9);
        *v10 = "custom";
        v10[1] = 6;
        ++*(_DWORD *)(a2 + 8);
      }
      if ((v3 & 8) != 0)
      {
        v11 = *(_DWORD *)(a2 + 8);
        if (v11 >= *(_DWORD *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = *(_DWORD *)(a2 + 8);
        }
        v12 = (_QWORD *)(*(_QWORD *)a2 + 16 * v11);
        *v12 = "typed";
        v12[1] = 5;
        ++*(_DWORD *)(a2 + 8);
      }
      if ((~v3 & 3) != 0)
      {
        if ((v3 & 1) != 0)
        {
          v15 = *(_DWORD *)(a2 + 8);
          v5 = (_DWORD *)(a2 + 8);
          if (v15 >= *(_DWORD *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = *(_DWORD *)(a2 + 8);
          }
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v15);
          *v6 = "function-entry";
          v7 = 14;
        }
        else
        {
          if ((v3 & 2) == 0)
            return result;
          v14 = *(_DWORD *)(a2 + 8);
          v5 = (_DWORD *)(a2 + 8);
          if (v14 >= *(_DWORD *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = *(_DWORD *)(a2 + 8);
          }
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
          *v6 = "function-exit";
          v7 = 13;
        }
      }
      else
      {
        v13 = *(_DWORD *)(a2 + 8);
        v5 = (_DWORD *)(a2 + 8);
        if (v13 >= *(_DWORD *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = *(_DWORD *)(a2 + 8);
        }
        v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
        *v6 = "function";
        v7 = 8;
      }
    }
  }
  else
  {
    v8 = *(_DWORD *)(a2 + 8);
    v5 = (_DWORD *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a2 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v8);
    *v6 = "none";
    v7 = 4;
  }
  v6[1] = v7;
  ++*v5;
  return result;
}

uint64_t sub_22F20ED04(uint64_t a1, _BYTE *a2, _BYTE **a3, uint64_t a4)
{
  llvm::opt::OptTable *v7;
  unint64_t Range;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  llvm::raw_ostream *v17;
  const void *v18;
  size_t v19;
  _BYTE *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  const char **v36;
  const char *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  const char **v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  int v50;
  _BYTE *v51;
  const char *v52;
  size_t v53;
  std::string::size_type v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type size;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  const std::string::value_type *v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string::size_type v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  const char **v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  char v82;
  size_t v83;
  int v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  void **v114;
  uint64_t separator;
  unint64_t v116;
  const void *v117;
  size_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  char v126;
  BOOL v127;
  const void *v128;
  size_t v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  const void *v134;
  size_t v135;
  _QWORD *v136;
  void *v137;
  uint64_t v138;
  const char **v139;
  char *v140;
  uint64_t v141;
  char v142;
  BOOL v143;
  const void *v144;
  size_t v145;
  size_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  char v150;
  const void *v151;
  size_t v152;
  _QWORD *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char **v159;
  char *v160;
  uint64_t v161;
  char v162;
  BOOL v163;
  const void *v164;
  size_t v165;
  size_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  char v170;
  std::string::size_type v171;
  const void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  std::string *v176;
  unint64_t v177;
  std::string *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  std::string *v183;
  std::string *v184;
  __int128 v185;
  int64x2_t v186;
  char v187;
  std::string *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  BOOL v193;
  const void *v194;
  size_t v195;
  size_t v196;
  uint64_t v197;
  uint64_t v198;
  const void *v199;
  size_t v200;
  _QWORD *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  BOOL v207;
  const void *v208;
  size_t v209;
  size_t v210;
  uint64_t v211;
  uint64_t v212;
  const void *v213;
  size_t v214;
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  BOOL v221;
  const void *v222;
  size_t v223;
  size_t v224;
  uint64_t v225;
  uint64_t v226;
  const void *v227;
  size_t v228;
  _QWORD *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  unint64_t v242;
  int v243;
  const char **v244;
  const char *v245;
  unint64_t v246;
  uint64_t v247;
  const char *v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  size_t v258;
  const char **v259;
  const char *v260;
  size_t v261;
  uint64_t OSTypeName;
  unint64_t v263;
  const void *v264;
  size_t v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  void **v269;
  const std::string::value_type *EnvironmentTypeName;
  std::string::size_type v271;
  uint64_t v272;
  uint64_t v273;
  const char **v274;
  const char *v275;
  size_t v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  _BYTE *v280;
  char v281;
  int v282;
  int v283;
  uint64_t v284;
  _QWORD ***v285;
  int v286;
  _QWORD *v287;
  unint64_t *v288;
  _QWORD **v289;
  int v290;
  char *v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  unint64_t v300;
  char *v301;
  char *v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  __int128 v312;
  int64x2_t v313;
  char *v314;
  char *v315;
  __int128 v316;
  __int128 v317;
  int64x2_t v318;
  uint64_t v319;
  _QWORD ***v320;
  int v321;
  _QWORD *v322;
  unint64_t *v323;
  _QWORD **v324;
  int v325;
  char *v326;
  unint64_t v327;
  char *v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  char *v334;
  unint64_t v335;
  char *v336;
  char *v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  char *v341;
  char *v342;
  unint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  __int128 v347;
  int64x2_t v348;
  char *v349;
  char *v350;
  __int128 v351;
  __int128 v352;
  int64x2_t v353;
  uint64_t LastArgValue;
  unint64_t v355;
  const void *v356;
  size_t v357;
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  void **v361;
  uint64_t v362;
  unint64_t v363;
  const void *v364;
  size_t v365;
  _BYTE *v366;
  uint64_t v367;
  uint64_t v368;
  void **v369;
  uint64_t v370;
  unint64_t v371;
  const void *v372;
  size_t v373;
  _BYTE *v374;
  uint64_t v375;
  uint64_t v376;
  void **v377;
  uint64_t v378;
  unint64_t v379;
  const void *v380;
  size_t v381;
  _BYTE *v382;
  uint64_t v383;
  uint64_t v384;
  void **v385;
  uint64_t v386;
  uint64_t v387;
  const char **v388;
  const char *v389;
  size_t v390;
  int v392;
  uint64_t v394;
  uint64_t v395;
  const char *v396;
  _BYTE *v397;
  char v398;
  int v399;
  uint64_t v400;
  const void *v401;
  size_t v402;
  _BYTE *v403;
  uint64_t v404;
  uint64_t v405;
  std::string *v406;
  std::string::size_type v407;
  _BYTE *v408;
  char *v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _BYTE *v428;
  std::error_code v429;
  std::error_code v430;
  unint64_t OSEnvironmentForPlatform;
  const char **v432;
  const char *v433;
  size_t v434;
  uint64_t v435;
  const char *v436;
  uint64_t v437;
  uint64_t v438;
  size_t v439;
  _BYTE **v440;
  uint64_t v442;
  std::string **v443;
  std::string v444;
  __int16 v445;
  std::string v446;
  __int16 v447;
  std::string v448;
  __int16 v449;
  uint64_t v450;
  uint64_t v451;
  std::string v452;
  std::string v453;
  std::string v454;
  uint64_t v455;
  uint64_t v456;
  unsigned int __val[2];
  llvm::opt::OptTable *v458;
  _BYTE v459[32];
  __int128 v460;
  uint64_t v461;
  _BYTE __p[32];
  __int128 v463;
  int v464;
  _BYTE __dst[32];
  __int128 v466;
  uint64_t v467;
  char v468[8];
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;

  v471 = *MEMORY[0x24BDAC8D0];
  sub_22F4406FC((uint64_t *)&v458);
  *(_QWORD *)__val = 0;
  v7 = v458;
  v442 = a4;
  llvm::opt::OptTable::ParseArgs();
  *(_OWORD *)__dst = xmmword_22F54AFE0;
  *(_QWORD *)&__dst[16] = 0x1B00000037;
  Range = llvm::opt::ArgList::getRange();
  v9 = v469 + 8 * HIDWORD(Range);
  *(_QWORD *)__dst = v469 + 8 * Range;
  *(_QWORD *)&__dst[8] = v9;
  *(_OWORD *)&__dst[16] = xmmword_22F54AFE0;
  *(_QWORD *)&v466 = 0x1B00000037;
  sub_22F2E0650((uint64_t)__dst);
  *(_QWORD *)__p = v9;
  *(_QWORD *)&__p[8] = v9;
  *(_OWORD *)&__p[16] = xmmword_22F54AFE0;
  *(_QWORD *)&v463 = 0x1B00000037;
  sub_22F2E0650((uint64_t)__p);
  *(_OWORD *)v459 = *(_OWORD *)__dst;
  *(_OWORD *)&v459[16] = *(_OWORD *)&__dst[16];
  *(_QWORD *)&v460 = v466;
  v10 = *(_QWORD *)__p;
  v11 = *(uint64_t **)__dst;
  if (*(_QWORD *)__dst != *(_QWORD *)__p)
  {
    do
    {
      v14 = *v11;
      v12 = v11 + 1;
      v13 = v14;
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
        v15 = v13;
      *(_BYTE *)(v15 + 44) |= 1u;
      *(_QWORD *)v459 = v12;
      sub_22F2E0650((uint64_t)v459);
      v11 = *(uint64_t **)v459;
    }
    while (*(_QWORD *)v459 != v10);
    v16 = *(_DWORD *)(*(_QWORD *)v13 + 32);
    if (v16 != 27)
    {
      if (v16 != 55)
        __asm { BR              X11 }
      *(_DWORD *)(a1 + 324) = 5;
      *(_QWORD *)__dst = "AIR-LLD 32023.334 (metalfe-32023.334)";
      LOWORD(v466) = 259;
      llvm::air::ErrorHandler::message();
LABEL_23:
      v24 = 1;
      goto LABEL_24;
    }
    *(_DWORD *)(a1 + 324) = 6;
    v17 = *(llvm::raw_ostream **)(a1 + 32);
    v18 = *(const void **)a1;
    if (!*(_QWORD *)a1)
    {
      memset(__dst, 0, 24);
      v21 = __dst;
      goto LABEL_21;
    }
    v19 = *(_QWORD *)(a1 + 8);
    if (v19 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v19 >= 0x17)
      {
        v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v22 = v19 | 7;
        v23 = v22 + 1;
        v20 = operator new(v22 + 1);
        *(_QWORD *)&__dst[16] = v23 | 0x8000000000000000;
        *(_QWORD *)__dst = v20;
        *(_QWORD *)&__dst[8] = v19;
      }
      else
      {
        __dst[23] = v19;
        v20 = __dst;
        if (!v19)
        {
LABEL_18:
          v20[v19] = 0;
          if (__dst[23] >= 0)
            v21 = __dst;
          else
            v21 = *(const char **)__dst;
LABEL_21:
          llvm::opt::OptTable::printHelp(v7, v17, v21, "AIR Linker");
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          goto LABEL_23;
        }
      }
      memmove(v20, v18, v19);
      goto LABEL_18;
    }
LABEL_768:
    abort();
  }
  *(_DWORD *)(a1 + 324) = 4;
  *(_QWORD *)__dst = 0x90000000ALL;
  *(_DWORD *)&__dst[8] = 41;
  v27 = llvm::opt::ArgList::getRange();
  v28 = v469 + 8 * HIDWORD(v27);
  *(_QWORD *)__dst = v469 + 8 * v27;
  *(_QWORD *)&__dst[8] = v28;
  *(_QWORD *)&__dst[16] = 0x90000000ALL;
  *(_DWORD *)&__dst[24] = 41;
  sub_22E724498((uint64_t)__dst);
  *(_QWORD *)__p = v28;
  *(_QWORD *)&__p[8] = v28;
  *(_QWORD *)&__p[16] = 0x90000000ALL;
  *(_DWORD *)&__p[24] = 41;
  sub_22E724498((uint64_t)__p);
  *(_OWORD *)v459 = *(_OWORD *)__dst;
  *(_OWORD *)&v459[16] = *(_OWORD *)&__dst[16];
  v29 = *(_QWORD *)__p;
  v30 = *(_QWORD **)__dst;
  if (*(_QWORD *)__dst != *(_QWORD *)__p)
  {
    do
    {
      v33 = (_QWORD *)*v30;
      v31 = v30 + 1;
      v32 = v33;
      v34 = (_QWORD *)v33[2];
      if (!v34)
        v34 = v32;
      *((_BYTE *)v34 + 44) |= 1u;
      *(_QWORD *)v459 = v31;
      sub_22E724498((uint64_t)v459);
      v30 = *(_QWORD **)v459;
    }
    while (*(_QWORD *)v459 != v29);
    v35 = *(_DWORD *)(*v32 + 32);
    if (v35 != 9)
    {
      if (v35 != 41)
      {
        if (v35 != 10)
          goto LABEL_55;
        goto LABEL_35;
      }
      goto LABEL_54;
    }
    v36 = (const char **)v32[6];
    v37 = *v36;
    if (*v36)
    {
      v38 = strlen(*v36);
      switch(v38)
      {
        case 4uLL:
          if (*(_DWORD *)v37 == 1869903201)
            goto LABEL_55;
          v38 = 4;
          break;
        case 5uLL:
          if (*(_DWORD *)v37 == 1702258030 && v37[4] == 114)
          {
LABEL_54:
            *(_BYTE *)(a1 + 48) = 0;
            goto LABEL_55;
          }
          v38 = 5;
          break;
        case 6uLL:
          v41 = *(_DWORD *)v37 == 1635216481 && *((_WORD *)v37 + 2) == 29561;
          if (v41)
          {
LABEL_35:
            *(_BYTE *)(a1 + 48) = 1;
            goto LABEL_55;
          }
          v38 = 6;
          break;
      }
    }
    else
    {
      v38 = 0;
    }
    v39 = v32[3];
    v40 = v32[4];
    LOWORD(v463) = 1283;
    *(_QWORD *)__p = "unknown option: ";
    *(_QWORD *)&__p[16] = v39;
    *(_QWORD *)&__p[24] = v40;
    *(_QWORD *)__dst = __p;
    *(_QWORD *)&__dst[16] = v37;
    *(_QWORD *)&__dst[24] = v38;
    LOWORD(v466) = 1282;
    v456 = 0;
    llvm::air::ErrorHandler::error();
  }
LABEL_55:
  v43 = sub_22F2121CC((uint64_t)v468, 21);
  if (v43)
  {
    v44 = v43;
    v45 = *(const char ***)(v43 + 48);
    if (*v45)
      strlen(*v45);
    *(_QWORD *)__dst = 0;
    if ((llvm::getAsUnsignedInteger() & 1) != 0 || HIDWORD(*(_QWORD *)__dst))
    {
      v46 = *(_QWORD *)(v44 + 24);
      v47 = *(_QWORD *)(v44 + 32);
      LOWORD(v460) = 773;
      *(_QWORD *)v459 = v46;
      *(_QWORD *)&v459[8] = v47;
      *(_QWORD *)&v459[16] = ": number expected, but got '";
      v48 = **(_BYTE ***)(v44 + 48);
      if (*v48)
      {
        v51 = v459;
        *(_QWORD *)__p = v459;
        *(_QWORD *)&__p[16] = v48;
        LOWORD(v463) = 770;
        v49 = 2;
        v50 = 3;
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v459;
        *(_OWORD *)&__p[16] = *(_OWORD *)&v459[16];
        *(_QWORD *)&v463 = v460;
        v49 = v460;
        v50 = BYTE1(v460);
        v51 = *(_BYTE **)v459;
      }
      if (v50 != 1)
      {
        v49 = 2;
        v51 = __p;
      }
      *(_QWORD *)__dst = v51;
      *(_QWORD *)&__dst[8] = *(_QWORD *)&__p[8];
      *(_QWORD *)&__dst[16] = "'";
      LOBYTE(v466) = v49;
      BYTE1(v466) = 3;
      v455 = 0;
      llvm::air::ErrorHandler::error();
    }
    else
    {
      *(_DWORD *)(a1 + 124) = *(_DWORD *)__dst;
    }
  }
  if (__val[0])
  {
    v52 = *(const char **)(v470 + 8 * __val[1]);
    v53 = strlen(v52);
    if (v53 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_768;
    v54 = v53;
    if (v53 >= 0x17)
    {
      v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17)
        v56 = v53 | 7;
      v57 = v56 + 1;
      v55 = operator new(v56 + 1);
      v453.__r_.__value_.__l.__size_ = v54;
      v453.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
      v453.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    }
    else
    {
      *((_BYTE *)&v453.__r_.__value_.__s + 23) = v53;
      v55 = &v453;
      if (!v53)
        goto LABEL_76;
    }
    memmove(v55, v52, v54);
LABEL_76:
    *((_BYTE *)v55 + v54) = 0;
    v58 = std::string::insert(&v453, 0, "argument to ");
    v59 = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v454.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v454.__r_.__value_.__r.__words[2] = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append(&v454, " is missing (expected ");
    v61 = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v444.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v444.__r_.__value_.__r.__words[2] = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v452, __val[0]);
    if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = &v452;
    else
      v62 = (std::string *)v452.__r_.__value_.__r.__words[0];
    if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v452.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v452.__r_.__value_.__l.__size_;
    v64 = std::string::append(&v444, (const std::string::value_type *)v62, size);
    v65 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v446.__r_.__value_.__l.__data_ = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v446.__r_.__value_.__r.__words[2] = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = std::string::append(&v446, " value");
    v67 = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v448.__r_.__value_.__l.__data_ = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v448.__r_.__value_.__r.__words[2] = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (__val[0] <= 1)
      v68 = "";
    else
      v68 = "s";
    v69 = std::string::append(&v448, v68);
    v70 = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)v459 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    *(_QWORD *)&v459[16] = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    v71 = std::string::append((std::string *)v459, ")");
    v72 = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v466) = 260;
    *(_QWORD *)__dst = __p;
    v451 = 0;
    llvm::air::ErrorHandler::error();
    if (v451)
      (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v459[23] & 0x80000000) != 0)
      operator delete(*(void **)v459);
    if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v448.__r_.__value_.__l.__data_);
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v446.__r_.__value_.__l.__data_);
    if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v452.__r_.__value_.__l.__data_);
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v444.__r_.__value_.__l.__data_);
    if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v454.__r_.__value_.__l.__data_);
    if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v453.__r_.__value_.__l.__data_);
  }
  v73 = sub_22F2121CC((uint64_t)v468, 3);
  if (!v73)
  {
    v74 = a1 + 328;
    v75 = "air64";
LABEL_214:
    MEMORY[0x2348A0C14](v74, v75);
    goto LABEL_219;
  }
  v76 = v73;
  v77 = *(const char ***)(v73 + 48);
  v78 = *v77;
  if (*v77)
  {
    v83 = strlen(*v77);
    switch(v83)
    {
      case 0xAuLL:
        if ((*(_QWORD *)v78 != 0x31765F3233726961 || *((_WORD *)v78 + 4) != 12593)
          && (*(_QWORD *)v78 != 0x31765F3436726961 || *((_WORD *)v78 + 4) != 12593))
        {
          goto LABEL_106;
        }
        break;
      case 9uLL:
        if ((*(_QWORD *)v78 != 0x31765F3233726961 || v78[8] != 54)
          && (*(_QWORD *)v78 != 0x31765F3436726961 || v78[8] != 54)
          && (*(_QWORD *)v78 != 0x31765F3233726961 || v78[8] != 56)
          && (*(_QWORD *)v78 != 0x31765F3436726961 || v78[8] != 56)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 48)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 48)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 49)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 49)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 50)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 50)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 51)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 51)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 52)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 52)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 53)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 53)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 54)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 54)
          && (*(_QWORD *)v78 != 0x32765F3233726961 || v78[8] != 55)
          && (*(_QWORD *)v78 != 0x32765F3436726961 || v78[8] != 55))
        {
          goto LABEL_106;
        }
        break;
      case 5uLL:
        if ((*(_DWORD *)v78 != 863136097 || v78[4] != 50) && (*(_DWORD *)v78 != 913467745 || v78[4] != 52))
          goto LABEL_106;
        break;
      default:
        goto LABEL_106;
    }
    v74 = a1 + 328;
    v75 = *v77;
    goto LABEL_214;
  }
LABEL_106:
  v79 = *(_QWORD *)(v76 + 24);
  v80 = *(_QWORD *)(v76 + 32);
  LOWORD(v460) = 773;
  *(_QWORD *)v459 = v79;
  *(_QWORD *)&v459[8] = v80;
  *(_QWORD *)&v459[16] = ": architecture '";
  v81 = *v77;
  if (**v77)
  {
    v109 = v459;
    *(_QWORD *)__p = v459;
    *(_QWORD *)&__p[16] = v81;
    LOWORD(v463) = 770;
    v82 = 2;
    v108 = 3;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v459;
    *(_OWORD *)&__p[16] = *(_OWORD *)&v459[16];
    *(_QWORD *)&v463 = v460;
    v82 = v460;
    v108 = BYTE1(v460);
    v109 = *(_BYTE **)v459;
  }
  if (v108 != 1)
  {
    v82 = 2;
    v109 = __p;
  }
  *(_QWORD *)__dst = v109;
  *(_QWORD *)&__dst[8] = *(_QWORD *)&__p[8];
  *(_QWORD *)&__dst[16] = "' is not supported";
  LOBYTE(v466) = v82;
  BYTE1(v466) = 3;
  v450 = 0;
  llvm::air::ErrorHandler::error();
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
LABEL_219:
  v110 = sub_22F212258((uint64_t)v468, 0x33u, 0x32u);
  if (v110)
  {
    v112 = **(const char ***)(v110 + 48);
    v111 = a1 + 376;
  }
  else
  {
    v111 = a1 + 376;
    v112 = "";
  }
  MEMORY[0x2348A0C14](v111, v112);
  v440 = a3;
  if (*(char *)(a1 + 399) < 0)
    v113 = *(_QWORD *)(a1 + 384);
  else
    v113 = *(unsigned __int8 *)(a1 + 399);
  v114 = (void **)(a1 + 376);
  if (v113)
    goto LABEL_237;
  separator = llvm::sys::path::get_separator(0);
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_768;
  v117 = (const void *)separator;
  v118 = v116;
  if (v116 >= 0x17)
  {
    v120 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v120 = v116 | 7;
    v121 = v120 + 1;
    v119 = operator new(v120 + 1);
    *(_QWORD *)&__dst[16] = v121 | 0x8000000000000000;
    *(_QWORD *)__dst = v119;
    *(_QWORD *)&__dst[8] = v118;
  }
  else
  {
    __dst[23] = v116;
    v119 = __dst;
    if (!v116)
      goto LABEL_234;
  }
  memmove(v119, v117, v118);
LABEL_234:
  v119[v118] = 0;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*v114);
  *(_OWORD *)v114 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)&__dst[16];
LABEL_237:
  sub_22F212358((uint64_t)__p, (uint64_t)v468, 35);
  v454 = *(std::string *)__p;
  v122 = *(_QWORD *)&__p[24];
  v123 = *(uint64_t **)__p;
  if (*(_QWORD *)__p != *(_QWORD *)&__p[24])
  {
    while (1)
    {
      v138 = *v123;
      *(_QWORD *)__dst = &__dst[24];
      *(_OWORD *)&__dst[8] = xmmword_22F44E300;
      v139 = *(const char ***)(v138 + 48);
      v140 = (char *)*v139;
      v141 = *v139 ? strlen(*v139) : 0;
      if (sub_22F2123F0(v140, v141))
        break;
LABEL_268:
      v149 = **(_BYTE ***)(v138 + 48);
      LOWORD(v460) = 257;
      if (*v149)
      {
        *(_QWORD *)v459 = v149;
        v150 = 3;
      }
      else
      {
        v150 = 1;
      }
      LOBYTE(v460) = v150;
      v449 = 257;
      v447 = 257;
      v445 = 257;
      llvm::sys::path::append();
      v151 = *(const void **)__dst;
      v152 = *(_QWORD *)&__dst[8];
      v153 = *(_QWORD **)(a1 + 408);
      if ((unint64_t)v153 >= *(_QWORD *)(a1 + 416))
      {
        v157 = sub_22E72347C((int64x2_t *)(a1 + 400), *(const void **)__dst, *(size_t *)&__dst[8]);
        goto LABEL_282;
      }
      if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_768;
      if (*(_QWORD *)&__dst[8] >= 0x17uLL)
      {
        v155 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
          v155 = *(_QWORD *)&__dst[8] | 7;
        v156 = v155 + 1;
        v154 = operator new(v155 + 1);
        v153[1] = v152;
        v153[2] = v156 | 0x8000000000000000;
        *v153 = v154;
      }
      else
      {
        *((_BYTE *)v153 + 23) = __dst[8];
        v154 = v153;
        if (!v152)
          goto LABEL_280;
      }
      memmove(v154, v151, v152);
LABEL_280:
      *((_BYTE *)v154 + v152) = 0;
      v157 = (uint64_t)(v153 + 3);
LABEL_282:
      *(_QWORD *)(a1 + 408) = v157;
      if (*(_BYTE **)__dst != &__dst[24])
        free(*(void **)__dst);
      v454.__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)&v454);
      v123 = (uint64_t *)v454.__r_.__value_.__r.__words[0];
      if (v454.__r_.__value_.__r.__words[0] == v122)
        goto LABEL_238;
    }
    v142 = *(_BYTE *)(a1 + 399);
    v143 = v142 < 0;
    if (v142 >= 0)
      v144 = (const void *)(a1 + 376);
    else
      v144 = *(const void **)(a1 + 376);
    v145 = v142 & 0x7F;
    if (v143)
      v146 = *(_QWORD *)(a1 + 384);
    else
      v146 = v145;
    *(_QWORD *)&__dst[8] = 0;
    if (*(_QWORD *)&__dst[16] < v146)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v147 = *(_QWORD *)&__dst[8];
    }
    else
    {
      v147 = 0;
      v148 = 0;
      if (!v146)
      {
LABEL_267:
        *(_QWORD *)&__dst[8] = v148 + v146;
        goto LABEL_268;
      }
    }
    memcpy((void *)(*(_QWORD *)__dst + v147), v144, v146);
    v148 = *(_QWORD *)&__dst[8];
    goto LABEL_267;
  }
LABEL_238:
  sub_22F212358((uint64_t)__p, (uint64_t)v468, 25);
  v454 = *(std::string *)__p;
  v124 = *(_QWORD *)&__p[24];
  v125 = *(uint64_t **)__p;
  if (*(_QWORD *)__p != *(_QWORD *)&__p[24])
  {
    v443 = (std::string **)(a1 + 424);
    while (1)
    {
      v158 = *v125;
      *(_QWORD *)__dst = &__dst[24];
      *(_OWORD *)&__dst[8] = xmmword_22F44E300;
      v159 = *(const char ***)(v158 + 48);
      v160 = (char *)*v159;
      v161 = *v159 ? strlen(*v159) : 0;
      if (sub_22F2123F0(v160, v161))
        break;
LABEL_302:
      v169 = **(_BYTE ***)(v158 + 48);
      LOWORD(v460) = 257;
      if (*v169)
      {
        *(_QWORD *)v459 = v169;
        v170 = 3;
      }
      else
      {
        v170 = 1;
      }
      LOBYTE(v460) = v170;
      v449 = 257;
      v447 = 257;
      v445 = 257;
      llvm::sys::path::append();
      v171 = *(_QWORD *)&__dst[8];
      if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_768;
      v172 = *(const void **)__dst;
      if (*(_QWORD *)&__dst[8] >= 0x17uLL)
      {
        v174 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
          v174 = *(_QWORD *)&__dst[8] | 7;
        v175 = v174 + 1;
        v173 = operator new(v174 + 1);
        v448.__r_.__value_.__l.__size_ = v171;
        v448.__r_.__value_.__r.__words[2] = v175 | 0x8000000000000000;
        v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
      }
      else
      {
        *((_BYTE *)&v448.__r_.__value_.__s + 23) = __dst[8];
        v173 = &v448;
        if (!*(_QWORD *)&__dst[8])
          goto LABEL_313;
      }
      memmove(v173, v172, v171);
LABEL_313:
      *((_BYTE *)v173 + v171) = 0;
      v176 = *(std::string **)(a1 + 432);
      v177 = *(_QWORD *)(a1 + 440);
      if ((unint64_t)v176 >= v177)
      {
        v178 = *v443;
        v179 = 0xAAAAAAAAAAAAAAABLL * (((char *)v176 - (char *)*v443) >> 3);
        v180 = v179 + 1;
        if (v179 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_768;
        if (0x5555555555555556 * ((uint64_t)(v177 - (_QWORD)v178) >> 3) > v180)
          v180 = 0x5555555555555556 * ((uint64_t)(v177 - (_QWORD)v178) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177 - (_QWORD)v178) >> 3) >= 0x555555555555555)
          v181 = 0xAAAAAAAAAAAAAAALL;
        else
          v181 = v180;
        *(_QWORD *)&v460 = a1 + 440;
        if (v181)
        {
          if (v181 > 0xAAAAAAAAAAAAAAALL)
LABEL_769:
            sub_22E3B3F8C();
          v182 = (char *)operator new(24 * v181);
        }
        else
        {
          v182 = 0;
        }
        v183 = (std::string *)&v182[24 * v179];
        *v183 = v448;
        memset(&v448, 0, sizeof(v448));
        if (v176 == v178)
        {
          v187 = 0;
          v186 = vdupq_n_s64((unint64_t)v176);
          v184 = v183;
        }
        else
        {
          v184 = (std::string *)&v182[24 * v179];
          do
          {
            v185 = *(_OWORD *)&v176[-1].__r_.__value_.__l.__data_;
            v184[-1].__r_.__value_.__r.__words[2] = v176[-1].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v184[-1].__r_.__value_.__l.__data_ = v185;
            --v184;
            v176[-1].__r_.__value_.__l.__size_ = 0;
            v176[-1].__r_.__value_.__r.__words[2] = 0;
            v176[-1].__r_.__value_.__r.__words[0] = 0;
            --v176;
          }
          while (v176 != v178);
          v186 = *(int64x2_t *)v443;
          v177 = *(_QWORD *)(a1 + 440);
          v187 = HIBYTE(v448.__r_.__value_.__r.__words[2]);
        }
        v188 = v183 + 1;
        *(_QWORD *)(a1 + 424) = v184;
        *(_QWORD *)(a1 + 432) = v183 + 1;
        *(int64x2_t *)&v459[8] = v186;
        *(_QWORD *)(a1 + 440) = &v182[24 * v181];
        *(_QWORD *)&v459[24] = v177;
        *(_QWORD *)v459 = v186.i64[0];
        sub_22E3B8B94((uint64_t)v459);
        *(_QWORD *)(a1 + 432) = v188;
        if (v187 < 0)
          operator delete(v448.__r_.__value_.__l.__data_);
      }
      else
      {
        *v176 = v448;
        *(_QWORD *)(a1 + 432) = v176 + 1;
      }
      if (*(_BYTE **)__dst != &__dst[24])
        free(*(void **)__dst);
      v454.__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)&v454);
      v125 = (uint64_t *)v454.__r_.__value_.__r.__words[0];
      if (v454.__r_.__value_.__r.__words[0] == v124)
        goto LABEL_239;
    }
    v162 = *(_BYTE *)(a1 + 399);
    v163 = v162 < 0;
    if (v162 >= 0)
      v164 = (const void *)(a1 + 376);
    else
      v164 = *(const void **)(a1 + 376);
    v165 = v162 & 0x7F;
    if (v163)
      v166 = *(_QWORD *)(a1 + 384);
    else
      v166 = v165;
    *(_QWORD *)&__dst[8] = 0;
    if (*(_QWORD *)&__dst[16] < v166)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v167 = *(_QWORD *)&__dst[8];
    }
    else
    {
      v167 = 0;
      v168 = 0;
      if (!v166)
      {
LABEL_301:
        *(_QWORD *)&__dst[8] = v168 + v166;
        goto LABEL_302;
      }
    }
    memcpy((void *)(*(_QWORD *)__dst + v167), v164, v166);
    v168 = *(_QWORD *)&__dst[8];
    goto LABEL_301;
  }
LABEL_239:
  if (!sub_22F2121CC((uint64_t)v468, 45))
  {
    *(_QWORD *)__dst = &__dst[24];
    v126 = *(_BYTE *)(a1 + 399);
    v127 = v126 < 0;
    if (v126 >= 0)
      v128 = (const void *)(a1 + 376);
    else
      v128 = *(const void **)(a1 + 376);
    v129 = v126 & 0x7F;
    if (v127)
      v130 = *(_QWORD *)(a1 + 384);
    else
      v130 = v129;
    *(_OWORD *)&__dst[8] = xmmword_22F44E300;
    if (v130 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v131 = *(_QWORD *)&__dst[8];
      v133 = *(_BYTE **)__dst;
    }
    else
    {
      v131 = 0;
      v132 = 0;
      v133 = &__dst[24];
      if (!v130)
        goto LABEL_249;
    }
    memcpy(&v133[v131], v128, v130);
    v132 = *(_QWORD *)&__dst[8];
LABEL_249:
    *(_QWORD *)&__dst[8] = v132 + v130;
    *(_QWORD *)__p = "usr";
    LOWORD(v463) = 259;
    *(_QWORD *)v459 = "local";
    LOWORD(v460) = 259;
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)"lib";
    v449 = 259;
    v447 = 257;
    llvm::sys::path::append();
    v134 = *(const void **)__dst;
    v135 = *(_QWORD *)&__dst[8];
    v136 = *(_QWORD **)(a1 + 408);
    if ((unint64_t)v136 >= *(_QWORD *)(a1 + 416))
    {
      v191 = sub_22E72347C((int64x2_t *)(a1 + 400), *(const void **)__dst, *(size_t *)&__dst[8]);
LABEL_343:
      *(_QWORD *)(a1 + 408) = v191;
      v192 = *(_BYTE *)(a1 + 399);
      v193 = v192 < 0;
      if (v192 >= 0)
        v194 = (const void *)(a1 + 376);
      else
        v194 = *(const void **)(a1 + 376);
      v195 = v192 & 0x7F;
      if (v193)
        v196 = *(_QWORD *)(a1 + 384);
      else
        v196 = v195;
      *(_QWORD *)&__dst[8] = 0;
      if (*(_QWORD *)&__dst[16] < v196)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v197 = *(_QWORD *)&__dst[8];
      }
      else
      {
        v197 = 0;
        v198 = 0;
        if (!v196)
          goto LABEL_352;
      }
      memcpy((void *)(*(_QWORD *)__dst + v197), v194, v196);
      v198 = *(_QWORD *)&__dst[8];
LABEL_352:
      *(_QWORD *)&__dst[8] = v198 + v196;
      *(_QWORD *)__p = "usr";
      LOWORD(v463) = 259;
      *(_QWORD *)v459 = "lib";
      LOWORD(v460) = 259;
      v449 = 257;
      v447 = 257;
      llvm::sys::path::append();
      v199 = *(const void **)__dst;
      v200 = *(_QWORD *)&__dst[8];
      v201 = *(_QWORD **)(a1 + 408);
      if ((unint64_t)v201 >= *(_QWORD *)(a1 + 416))
      {
        v205 = sub_22E72347C((int64x2_t *)(a1 + 400), *(const void **)__dst, *(size_t *)&__dst[8]);
LABEL_363:
        *(_QWORD *)(a1 + 408) = v205;
        v206 = *(_BYTE *)(a1 + 399);
        v207 = v206 < 0;
        if (v206 >= 0)
          v208 = (const void *)(a1 + 376);
        else
          v208 = *(const void **)(a1 + 376);
        v209 = v206 & 0x7F;
        if (v207)
          v210 = *(_QWORD *)(a1 + 384);
        else
          v210 = v209;
        *(_QWORD *)&__dst[8] = 0;
        if (*(_QWORD *)&__dst[16] < v210)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v211 = *(_QWORD *)&__dst[8];
        }
        else
        {
          v211 = 0;
          v212 = 0;
          if (!v210)
            goto LABEL_372;
        }
        memcpy((void *)(*(_QWORD *)__dst + v211), v208, v210);
        v212 = *(_QWORD *)&__dst[8];
LABEL_372:
        *(_QWORD *)&__dst[8] = v212 + v210;
        *(_QWORD *)__p = "Library";
        LOWORD(v463) = 259;
        *(_QWORD *)v459 = "Frameworks";
        LOWORD(v460) = 259;
        v449 = 257;
        v447 = 257;
        llvm::sys::path::append();
        v213 = *(const void **)__dst;
        v214 = *(_QWORD *)&__dst[8];
        v215 = *(_QWORD **)(a1 + 432);
        if ((unint64_t)v215 >= *(_QWORD *)(a1 + 440))
        {
          v219 = sub_22E72347C((int64x2_t *)(a1 + 424), *(const void **)__dst, *(size_t *)&__dst[8]);
LABEL_383:
          *(_QWORD *)(a1 + 432) = v219;
          v220 = *(_BYTE *)(a1 + 399);
          v221 = v220 < 0;
          if (v220 >= 0)
            v222 = (const void *)(a1 + 376);
          else
            v222 = *(const void **)(a1 + 376);
          v223 = v220 & 0x7F;
          if (v221)
            v224 = *(_QWORD *)(a1 + 384);
          else
            v224 = v223;
          *(_QWORD *)&__dst[8] = 0;
          if (*(_QWORD *)&__dst[16] < v224)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v225 = *(_QWORD *)&__dst[8];
          }
          else
          {
            v225 = 0;
            v226 = 0;
            if (!v224)
              goto LABEL_392;
          }
          memcpy((void *)(*(_QWORD *)__dst + v225), v222, v224);
          v226 = *(_QWORD *)&__dst[8];
LABEL_392:
          *(_QWORD *)&__dst[8] = v226 + v224;
          *(_QWORD *)__p = "System";
          LOWORD(v463) = 259;
          *(_QWORD *)v459 = "Library";
          LOWORD(v460) = 259;
          v448.__r_.__value_.__r.__words[0] = (std::string::size_type)"Frameworks";
          v449 = 259;
          v447 = 257;
          llvm::sys::path::append();
          v227 = *(const void **)__dst;
          v228 = *(_QWORD *)&__dst[8];
          v229 = *(_QWORD **)(a1 + 432);
          if ((unint64_t)v229 >= *(_QWORD *)(a1 + 440))
          {
            v233 = sub_22E72347C((int64x2_t *)(a1 + 424), *(const void **)__dst, *(size_t *)&__dst[8]);
LABEL_403:
            *(_QWORD *)(a1 + 432) = v233;
            if (*(_BYTE **)__dst != &__dst[24])
              free(*(void **)__dst);
            goto LABEL_405;
          }
          if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
            goto LABEL_768;
          if (*(_QWORD *)&__dst[8] >= 0x17uLL)
          {
            v231 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
              v231 = *(_QWORD *)&__dst[8] | 7;
            v232 = v231 + 1;
            v230 = operator new(v231 + 1);
            v229[1] = v228;
            v229[2] = v232 | 0x8000000000000000;
            *v229 = v230;
          }
          else
          {
            *((_BYTE *)v229 + 23) = __dst[8];
            v230 = v229;
            if (!v228)
              goto LABEL_401;
          }
          memmove(v230, v227, v228);
LABEL_401:
          *((_BYTE *)v230 + v228) = 0;
          v233 = (uint64_t)(v229 + 3);
          goto LABEL_403;
        }
        if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
          goto LABEL_768;
        if (*(_QWORD *)&__dst[8] >= 0x17uLL)
        {
          v217 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
            v217 = *(_QWORD *)&__dst[8] | 7;
          v218 = v217 + 1;
          v216 = operator new(v217 + 1);
          v215[1] = v214;
          v215[2] = v218 | 0x8000000000000000;
          *v215 = v216;
        }
        else
        {
          *((_BYTE *)v215 + 23) = __dst[8];
          v216 = v215;
          if (!v214)
            goto LABEL_381;
        }
        memmove(v216, v213, v214);
LABEL_381:
        *((_BYTE *)v216 + v214) = 0;
        v219 = (uint64_t)(v215 + 3);
        goto LABEL_383;
      }
      if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_768;
      if (*(_QWORD *)&__dst[8] >= 0x17uLL)
      {
        v203 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
          v203 = *(_QWORD *)&__dst[8] | 7;
        v204 = v203 + 1;
        v202 = operator new(v203 + 1);
        v201[1] = v200;
        v201[2] = v204 | 0x8000000000000000;
        *v201 = v202;
      }
      else
      {
        *((_BYTE *)v201 + 23) = __dst[8];
        v202 = v201;
        if (!v200)
          goto LABEL_361;
      }
      memmove(v202, v199, v200);
LABEL_361:
      *((_BYTE *)v202 + v200) = 0;
      v205 = (uint64_t)(v201 + 3);
      goto LABEL_363;
    }
    if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_768;
    if (*(_QWORD *)&__dst[8] >= 0x17uLL)
    {
      v189 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
        v189 = *(_QWORD *)&__dst[8] | 7;
      v190 = v189 + 1;
      v137 = operator new(v189 + 1);
      v136[1] = v135;
      v136[2] = v190 | 0x8000000000000000;
      *v136 = v137;
    }
    else
    {
      *((_BYTE *)v136 + 23) = __dst[8];
      v137 = v136;
      if (!v135)
        goto LABEL_341;
    }
    memmove(v137, v134, v135);
LABEL_341:
    *((_BYTE *)v137 + v135) = 0;
    v191 = (uint64_t)(v136 + 3);
    goto LABEL_343;
  }
LABEL_405:
  *(_BYTE *)(a1 + 448) = sub_22F2121CC((uint64_t)v468, 16) != 0;
  *(_BYTE *)(a1 + 449) = llvm::opt::ArgList::hasFlag();
  if (sub_22F2121CC((uint64_t)v468, 20) && (*(_DWORD *)(a1 + 324) - 1) <= 3)
  {
    *(_QWORD *)__dst = "enabling linking options requires --create-static-library";
    LOWORD(v466) = 259;
    llvm::air::ErrorHandler::error();
  }
  llvm::opt::ArgList::ClaimAllArgs();
  llvm::opt::ArgList::ClaimAllArgs();
  *(_OWORD *)__dst = xmmword_22F54AFF0;
  *(_OWORD *)&__dst[16] = xmmword_22F54B000;
  LODWORD(v466) = 48;
  v234 = llvm::opt::ArgList::getRange();
  v235 = v469 + 8 * HIDWORD(v234);
  *(_QWORD *)__dst = v469 + 8 * v234;
  *(_QWORD *)&__dst[8] = v235;
  *(_OWORD *)&__dst[16] = xmmword_22F54AFF0;
  v466 = xmmword_22F54B000;
  LODWORD(v467) = 48;
  sub_22F440634((uint64_t)__dst);
  *(_QWORD *)__p = v235;
  *(_QWORD *)&__p[8] = v235;
  *(_OWORD *)&__p[16] = xmmword_22F54AFF0;
  v463 = xmmword_22F54B000;
  v464 = 48;
  sub_22F440634((uint64_t)__p);
  *(_OWORD *)v459 = *(_OWORD *)__dst;
  *(_OWORD *)&v459[16] = *(_OWORD *)&__dst[16];
  v460 = v466;
  v461 = v467;
  v236 = *(_QWORD *)__p;
  v237 = *(_QWORD **)__dst;
  if (*(_QWORD *)__dst == *(_QWORD *)__p)
  {
    if (*(_DWORD *)(a1 + 324) == 1)
      v245 = "macosx11.0.0";
    else
      v245 = "macosx10.11.0";
    MEMORY[0x2348A0C14](a1 + 352, v245);
    goto LABEL_477;
  }
  do
  {
    v240 = (_QWORD *)*v237;
    v238 = v237 + 1;
    v239 = v240;
    v241 = (_QWORD *)v240[2];
    if (!v241)
      v241 = v239;
    *((_BYTE *)v241 + 44) |= 1u;
    *(_QWORD *)v459 = v238;
    result = sub_22F440634((uint64_t)v459);
    v237 = *(_QWORD **)v459;
  }
  while (*(_QWORD *)v459 != v236);
  LODWORD(v242) = 0;
  v243 = *(_DWORD *)(*v239 + 32);
  switch(v243)
  {
    case '0':
      v244 = (const char **)v239[6];
      if (*v244)
        strlen(*v244);
      OSEnvironmentForPlatform = llvm::air::getOSEnvironmentForPlatform();
      if (!(_DWORD)OSEnvironmentForPlatform)
      {
        v432 = (const char **)v239[6];
        v433 = *v432;
        if (*v432)
          v434 = strlen(*v432);
        else
          v434 = 0;
        LOWORD(v463) = 1283;
        *(_QWORD *)__p = "invalid platform '";
        *(_QWORD *)&__p[16] = v433;
        *(_QWORD *)&__p[24] = v434;
        *(_QWORD *)__dst = __p;
        *(_QWORD *)&__dst[16] = "'";
        LOWORD(v466) = 770;
        llvm::air::ErrorHandler::error();
      }
      v435 = v239[6];
      v248 = *(const char **)(v435 + 8);
      v436 = *(const char **)(v435 + 16);
      *(_OWORD *)v459 = 0uLL;
      if (v436)
        strlen(v436);
      v242 = HIDWORD(OSEnvironmentForPlatform);
      if (llvm::VersionTuple::tryParse())
      {
        v437 = v239[6];
        v438 = *(_QWORD *)(v437 + 16);
        if (v438)
          v439 = strlen(*(const char **)(v437 + 16));
        else
          v439 = 0;
        LOWORD(v463) = 1283;
        *(_QWORD *)__p = "invalid sdk version '";
        *(_QWORD *)&__p[16] = v438;
        *(_QWORD *)&__p[24] = v439;
        *(_QWORD *)__dst = __p;
        *(_QWORD *)&__dst[16] = "'";
        LOWORD(v466) = 770;
        llvm::air::ErrorHandler::error();
      }
      if ((int)OSEnvironmentForPlatform <= 27)
      {
        if ((_DWORD)OSEnvironmentForPlatform == 7)
        {
          if (HIDWORD(OSEnvironmentForPlatform) == 21)
          {
            v256 = 0x800000000000000DLL;
            if (*(_DWORD *)(a1 + 324) == 1)
              v256 = 0x800000000000000ELL;
            *(_QWORD *)v459 = v256;
            *(_QWORD *)&v459[8] = 0x80000000;
            v247 = 7;
            LODWORD(v242) = 21;
          }
          else
          {
            if (HIDWORD(OSEnvironmentForPlatform) == 20)
            {
              v255 = 0x800000000000000DLL;
              if (*(_DWORD *)(a1 + 324) == 1)
                v255 = 0x800000000000000ELL;
              *(_QWORD *)v459 = v255;
              *(_QWORD *)&v459[8] = 0x80000000;
              v247 = 7;
              goto LABEL_446;
            }
            v257 = 0x8000000000000008;
            if (*(_DWORD *)(a1 + 324) == 1)
              v257 = 0x800000000000000ELL;
            *(_QWORD *)v459 = v257;
            *(_QWORD *)&v459[8] = 0x80000000;
            v247 = 7;
          }
        }
        else
        {
          v246 = 0x8000000B0000000ALL;
          if (*(_DWORD *)(a1 + 324) == 1)
            v246 = 0x800000000000000BLL;
          *(_QWORD *)v459 = v246;
          *(_QWORD *)&v459[8] = 0x80000000;
          v247 = 11;
        }
      }
      else if ((_DWORD)OSEnvironmentForPlatform == 28)
      {
LABEL_425:
        v249 = *(_DWORD *)(a1 + 324);
        if ((_DWORD)v242 == 20)
        {
          v41 = v249 == 1;
          v250 = 0x800000000000000DLL;
          if (v41)
            v250 = 0x800000000000000ELL;
          *(_QWORD *)v459 = v250;
          *(_QWORD *)&v459[8] = 0x80000000;
          v247 = 28;
          goto LABEL_446;
        }
        v41 = v249 == 1;
        v251 = 0x8000000000000009;
        if (v41)
          v251 = 0x800000000000000ELL;
        *(_QWORD *)v459 = v251;
        *(_QWORD *)&v459[8] = 0x80000000;
        v247 = 28;
      }
      else
      {
        if ((_DWORD)OSEnvironmentForPlatform != 29)
        {
          *(_QWORD *)v459 = 0x8000000000000001;
          *(_QWORD *)&v459[8] = 0x80000000;
          v247 = 33;
          goto LABEL_453;
        }
LABEL_434:
        v252 = *(_DWORD *)(a1 + 324);
        if ((_DWORD)v242 == 20)
        {
          v41 = v252 == 1;
          v253 = 0x8000000000000006;
          if (v41)
            v253 = 0x8000000000000007;
          *(_QWORD *)v459 = v253;
          *(_QWORD *)&v459[8] = 0x80000000;
          v247 = 29;
LABEL_446:
          LODWORD(v242) = 20;
          goto LABEL_453;
        }
        v41 = v252 == 1;
        v254 = 0x8000000000000003;
        if (v41)
          v254 = 0x8000000000000007;
        *(_QWORD *)v459 = v254;
        *(_QWORD *)&v459[8] = 0x80000000;
        v247 = 29;
      }
LABEL_453:
      *(_OWORD *)&v448.__r_.__value_.__l.__data_ = 0uLL;
      if (v248)
      {
        strlen(v248);
        if ((llvm::VersionTuple::tryParse() & 1) != 0)
        {
          v258 = strlen(v248);
LABEL_458:
          LOWORD(v463) = 1283;
          *(_QWORD *)__p = "invalid deployment target '";
          *(_QWORD *)&__p[16] = v248;
          *(_QWORD *)&__p[24] = v258;
          *(_QWORD *)__dst = __p;
          *(_QWORD *)&__dst[16] = "'";
          LOWORD(v466) = 770;
          llvm::air::ErrorHandler::error();
        }
      }
      else if ((llvm::VersionTuple::tryParse() & 1) != 0)
      {
        v258 = 0;
        goto LABEL_458;
      }
      if (*(_QWORD *)v459 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)&v459[8] & 0x7FFFFFFF7FFFFFFFLL
        && sub_22E3B38EC(&v448, v459))
      {
        v259 = (const char **)v239[6];
        v260 = *v259;
        if (*v259)
          v261 = strlen(*v259);
        else
          v261 = 0;
        LOWORD(v463) = 1283;
        *(_QWORD *)__p = "deployment target '";
        *(_QWORD *)&__p[16] = v260;
        *(_QWORD *)&__p[24] = v261;
        *(_QWORD *)__dst = __p;
        *(_QWORD *)&__dst[16] = "' is too old";
        LOWORD(v466) = 770;
        llvm::air::ErrorHandler::error();
      }
      OSTypeName = llvm::Triple::getOSTypeName((llvm::Triple *)v247);
      if (v263 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_768;
      v264 = (const void *)OSTypeName;
      v265 = v263;
      if (v263 >= 0x17)
      {
        v267 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v263 | 7) != 0x17)
          v267 = v263 | 7;
        v268 = v267 + 1;
        v266 = operator new(v267 + 1);
        *(_QWORD *)&__dst[16] = v268 | 0x8000000000000000;
        *(_QWORD *)__dst = v266;
        *(_QWORD *)&__dst[8] = v265;
      }
      else
      {
        __dst[23] = v263;
        v266 = __dst;
        if (!v263)
          goto LABEL_473;
      }
      memmove(v266, v264, v265);
LABEL_473:
      v266[v265] = 0;
      v269 = (void **)(a1 + 352);
      if (*(char *)(a1 + 375) < 0)
        operator delete(*v269);
      *(_OWORD *)v269 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 368) = *(_QWORD *)&__dst[16];
      std::string::append((std::string *)(a1 + 352), v248);
      if ((_DWORD)v242)
      {
        std::string::append((std::string *)(a1 + 352), "-");
        EnvironmentTypeName = (const std::string::value_type *)llvm::Triple::getEnvironmentTypeName();
        std::string::append((std::string *)(a1 + 352), EnvironmentTypeName, v271);
      }
LABEL_477:
      v272 = sub_22F2121CC((uint64_t)v468, 46);
      if (!v272)
      {
LABEL_482:
        *(_DWORD *)(a1 + 452) = 0;
        goto LABEL_494;
      }
      v273 = v272;
      v274 = *(const char ***)(v272 + 48);
      v275 = *v274;
      if (!*v274)
        goto LABEL_485;
      v276 = strlen(*v274);
      if (v276 != 2)
      {
        if (v276 == 4 && *(_DWORD *)v275 == 1869903201)
          goto LABEL_482;
        goto LABEL_485;
      }
      if (*(_WORD *)v275 == 12851)
      {
        v283 = 1;
LABEL_493:
        *(_DWORD *)(a1 + 452) = v283;
        goto LABEL_494;
      }
      if (*(_WORD *)v275 == 13366)
      {
        v283 = 2;
        goto LABEL_493;
      }
LABEL_485:
      v277 = *(_QWORD *)(v273 + 24);
      v278 = *(_QWORD *)(v273 + 32);
      LOWORD(v460) = 773;
      *(_QWORD *)v459 = v277;
      *(_QWORD *)&v459[8] = v278;
      *(_QWORD *)&v459[16] = ": value '";
      v279 = *v274;
      if (**v274)
      {
        v280 = v459;
        *(_QWORD *)__p = v459;
        *(_QWORD *)&__p[16] = v279;
        LOWORD(v463) = 770;
        v281 = 2;
        v282 = 3;
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v459;
        *(_OWORD *)&__p[16] = *(_OWORD *)&v459[16];
        *(_QWORD *)&v463 = v460;
        v281 = v460;
        v282 = BYTE1(v460);
        v280 = *(_BYTE **)v459;
      }
      if (v282 != 1)
      {
        v281 = 2;
        v280 = __p;
      }
      *(_QWORD *)__dst = v280;
      *(_QWORD *)&__dst[8] = *(_QWORD *)&__p[8];
      *(_QWORD *)&__dst[16] = "' is not supported";
      LOBYTE(v466) = v281;
      BYTE1(v466) = 3;
      llvm::air::ErrorHandler::error();
LABEL_494:
      *(_BYTE *)(a1 + 484) = sub_22F2121CC((uint64_t)v468, 44) != 0;
      llvm::opt::ArgList::getAllArgValues();
      sub_22E63B344((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)&__dst[16];
      memset(__dst, 0, 24);
      *(_QWORD *)__p = __dst;
      sub_22E3B3CC8((void ***)__p);
      if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136))
      {
        *(_QWORD *)__dst = "no input files";
        LOWORD(v466) = 259;
        llvm::air::ErrorHandler::error();
      }
      llvm::opt::ArgList::getAllArgValues();
      sub_22E63B344((void **)(a1 + 152));
      *(_OWORD *)(a1 + 152) = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)&__dst[16];
      memset(__dst, 0, 24);
      *(_QWORD *)__p = __dst;
      sub_22E3B3CC8((void ***)__p);
      llvm::opt::ArgList::getAllArgValues();
      sub_22E63B344((void **)(a1 + 200));
      *(_OWORD *)(a1 + 200) = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)&__dst[16];
      memset(__dst, 0, 24);
      *(_QWORD *)__p = __dst;
      sub_22E3B3CC8((void ***)__p);
      sub_22F212514(__dst, (uint64_t)v468, 34);
      *(_OWORD *)v459 = *(_OWORD *)__dst;
      *(_OWORD *)&v459[16] = *(_OWORD *)&__dst[16];
      v284 = v466;
      v285 = *(_QWORD ****)__dst;
      if (*(_QWORD *)__dst != (_QWORD)v466)
      {
        v286 = 0;
        v287 = (_QWORD *)(a1 + 176);
        v288 = (unint64_t *)(a1 + 192);
        do
        {
          v289 = *v285;
          v290 = *((_DWORD *)*v289 + 8);
          if (v290 > 7)
          {
            if (v290 != 8)
            {
              if (v290 == 34)
              {
                *(_QWORD *)__p = *v289[6];
                sub_22F2A98D0((int64x2_t *)(a1 + 176), (const char **)__p);
              }
              goto LABEL_560;
            }
            v286 |= 1u;
            if (v286 == 3)
            {
              v291 = *(char **)(a1 + 184);
              v292 = *(_QWORD *)(a1 + 192);
              if ((unint64_t)v291 < v292)
              {
LABEL_515:
                v291[23] = 17;
                strcpy(v291, "fast-relaxed-math");
                v298 = v291 + 24;
LABEL_559:
                *(_QWORD *)(a1 + 184) = v298;
                v286 = 3;
                goto LABEL_560;
              }
              v307 = (char *)*v287;
              v308 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v291[-*v287] >> 3);
              v309 = v308 + 1;
              if (v308 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_768;
              if (0x5555555555555556 * ((uint64_t)(v292 - (_QWORD)v307) >> 3) > v309)
                v309 = 0x5555555555555556 * ((uint64_t)(v292 - (_QWORD)v307) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v292 - (_QWORD)v307) >> 3) >= 0x555555555555555)
                v296 = 0xAAAAAAAAAAAAAAALL;
              else
                v296 = v309;
              *(_QWORD *)&v463 = a1 + 192;
              if (v296)
              {
                if (v296 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_769;
                v297 = (char *)operator new(24 * v296);
              }
              else
              {
                v297 = 0;
              }
              v314 = &v297[24 * v308];
              v314[23] = 17;
              strcpy(v314, "fast-relaxed-math");
              if (v291 != v307)
              {
                v315 = &v297[24 * v308];
                do
                {
                  v316 = *(_OWORD *)(v291 - 24);
                  *((_QWORD *)v315 - 1) = *((_QWORD *)v291 - 1);
                  *(_OWORD *)(v315 - 24) = v316;
                  v315 -= 24;
                  *((_QWORD *)v291 - 2) = 0;
                  *((_QWORD *)v291 - 1) = 0;
                  *((_QWORD *)v291 - 3) = 0;
                  v291 -= 24;
                }
                while (v291 != v307);
LABEL_556:
                v318 = *(int64x2_t *)v287;
                v292 = *v288;
LABEL_558:
                v298 = v314 + 24;
                *(_QWORD *)(a1 + 176) = v315;
                *(_QWORD *)(a1 + 184) = v314 + 24;
                *(int64x2_t *)&__p[8] = v318;
                *(_QWORD *)(a1 + 192) = &v297[24 * v296];
                *(_QWORD *)&__p[24] = v292;
                *(_QWORD *)__p = v318.i64[0];
                sub_22E3B8B94((uint64_t)__p);
                goto LABEL_559;
              }
LABEL_557:
              v318 = vdupq_n_s64((unint64_t)v291);
              v315 = v314;
              goto LABEL_558;
            }
          }
          else
          {
            if (v290 == 5)
            {
              v299 = *(char **)(a1 + 184);
              v300 = *(_QWORD *)(a1 + 192);
              if ((unint64_t)v299 >= v300)
              {
                v302 = (char *)*v287;
                v303 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v299[-*v287] >> 3);
                v304 = v303 + 1;
                if (v303 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_768;
                if (0x5555555555555556 * ((uint64_t)(v300 - (_QWORD)v302) >> 3) > v304)
                  v304 = 0x5555555555555556 * ((uint64_t)(v300 - (_QWORD)v302) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v300 - (_QWORD)v302) >> 3) >= 0x555555555555555)
                  v305 = 0xAAAAAAAAAAAAAAALL;
                else
                  v305 = v304;
                *(_QWORD *)&v463 = a1 + 192;
                if (v305)
                {
                  if (v305 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_769;
                  v306 = (char *)operator new(24 * v305);
                }
                else
                {
                  v306 = 0;
                }
                v310 = &v306[24 * v303];
                v310[23] = 17;
                strcpy(v310, "fast-relaxed-math");
                if (v299 == v302)
                {
                  v313 = vdupq_n_s64((unint64_t)v299);
                  v311 = &v306[24 * v303];
                }
                else
                {
                  v311 = &v306[24 * v303];
                  do
                  {
                    v312 = *(_OWORD *)(v299 - 24);
                    *((_QWORD *)v311 - 1) = *((_QWORD *)v299 - 1);
                    *(_OWORD *)(v311 - 24) = v312;
                    v311 -= 24;
                    *((_QWORD *)v299 - 2) = 0;
                    *((_QWORD *)v299 - 1) = 0;
                    *((_QWORD *)v299 - 3) = 0;
                    v299 -= 24;
                  }
                  while (v299 != v302);
                  v313 = *(int64x2_t *)v287;
                  v300 = *v288;
                }
                v301 = v310 + 24;
                *(_QWORD *)(a1 + 176) = v311;
                *(_QWORD *)(a1 + 184) = v310 + 24;
                *(int64x2_t *)&__p[8] = v313;
                *(_QWORD *)(a1 + 192) = &v306[24 * v305];
                *(_QWORD *)&__p[24] = v300;
                *(_QWORD *)__p = v313.i64[0];
                sub_22E3B8B94((uint64_t)__p);
              }
              else
              {
                v299[23] = 17;
                strcpy(v299, "fast-relaxed-math");
                v301 = v299 + 24;
              }
              *(_QWORD *)(a1 + 184) = v301;
              goto LABEL_560;
            }
            if (v290 == 6)
            {
              if ((v286 & 0xFFFFFFFD) == 1)
              {
                v291 = *(char **)(a1 + 184);
                v292 = *(_QWORD *)(a1 + 192);
                if ((unint64_t)v291 < v292)
                  goto LABEL_515;
                v293 = (char *)*v287;
                v294 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v291[-*v287] >> 3);
                v295 = v294 + 1;
                if (v294 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_768;
                if (0x5555555555555556 * ((uint64_t)(v292 - (_QWORD)v293) >> 3) > v295)
                  v295 = 0x5555555555555556 * ((uint64_t)(v292 - (_QWORD)v293) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v292 - (_QWORD)v293) >> 3) >= 0x555555555555555)
                  v296 = 0xAAAAAAAAAAAAAAALL;
                else
                  v296 = v295;
                *(_QWORD *)&v463 = a1 + 192;
                if (v296)
                {
                  if (v296 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_769;
                  v297 = (char *)operator new(24 * v296);
                }
                else
                {
                  v297 = 0;
                }
                v314 = &v297[24 * v294];
                v314[23] = 17;
                strcpy(v314, "fast-relaxed-math");
                if (v291 != v293)
                {
                  v315 = &v297[24 * v294];
                  do
                  {
                    v317 = *(_OWORD *)(v291 - 24);
                    *((_QWORD *)v315 - 1) = *((_QWORD *)v291 - 1);
                    *(_OWORD *)(v315 - 24) = v317;
                    v315 -= 24;
                    *((_QWORD *)v291 - 2) = 0;
                    *((_QWORD *)v291 - 1) = 0;
                    *((_QWORD *)v291 - 3) = 0;
                    v291 -= 24;
                  }
                  while (v291 != v293);
                  goto LABEL_556;
                }
                goto LABEL_557;
              }
              v286 = 2;
            }
          }
LABEL_560:
          *(_QWORD *)v459 += 8;
          sub_22E725424((uint64_t)v459);
          v285 = *(_QWORD ****)v459;
        }
        while (*(_QWORD *)v459 != v284);
      }
      sub_22F212514(__dst, (uint64_t)v468, 23);
      *(_OWORD *)v459 = *(_OWORD *)__dst;
      *(_OWORD *)&v459[16] = *(_OWORD *)&__dst[16];
      v319 = v466;
      v320 = *(_QWORD ****)__dst;
      if (*(_QWORD *)__dst != (_QWORD)v466)
      {
        v321 = 0;
        v322 = (_QWORD *)(a1 + 224);
        v323 = (unint64_t *)(a1 + 240);
        do
        {
          v324 = *v320;
          v325 = *((_DWORD *)*v324 + 8);
          if (v325 > 7)
          {
            if (v325 != 8)
            {
              if (v325 == 23)
              {
                *(_QWORD *)__p = *v324[6];
                sub_22F2A98D0((int64x2_t *)(a1 + 224), (const char **)__p);
              }
              goto LABEL_625;
            }
            v321 |= 1u;
            if (v321 == 3)
            {
              v326 = *(char **)(a1 + 232);
              v327 = *(_QWORD *)(a1 + 240);
              if ((unint64_t)v326 < v327)
              {
LABEL_580:
                v326[23] = 17;
                strcpy(v326, "fast-relaxed-math");
                v333 = v326 + 24;
LABEL_624:
                *(_QWORD *)(a1 + 232) = v333;
                v321 = 3;
                goto LABEL_625;
              }
              v342 = (char *)*v322;
              v343 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v326[-*v322] >> 3);
              v344 = v343 + 1;
              if (v343 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_768;
              if (0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v342) >> 3) > v344)
                v344 = 0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v342) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (_QWORD)v342) >> 3) >= 0x555555555555555)
                v331 = 0xAAAAAAAAAAAAAAALL;
              else
                v331 = v344;
              *(_QWORD *)&v463 = a1 + 240;
              if (v331)
              {
                if (v331 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_769;
                v332 = (char *)operator new(24 * v331);
              }
              else
              {
                v332 = 0;
              }
              v349 = &v332[24 * v343];
              v349[23] = 17;
              strcpy(v349, "fast-relaxed-math");
              if (v326 != v342)
              {
                v350 = &v332[24 * v343];
                do
                {
                  v351 = *(_OWORD *)(v326 - 24);
                  *((_QWORD *)v350 - 1) = *((_QWORD *)v326 - 1);
                  *(_OWORD *)(v350 - 24) = v351;
                  v350 -= 24;
                  *((_QWORD *)v326 - 2) = 0;
                  *((_QWORD *)v326 - 1) = 0;
                  *((_QWORD *)v326 - 3) = 0;
                  v326 -= 24;
                }
                while (v326 != v342);
LABEL_621:
                v353 = *(int64x2_t *)v322;
                v327 = *v323;
LABEL_623:
                v333 = v349 + 24;
                *(_QWORD *)(a1 + 224) = v350;
                *(_QWORD *)(a1 + 232) = v349 + 24;
                *(int64x2_t *)&__p[8] = v353;
                *(_QWORD *)(a1 + 240) = &v332[24 * v331];
                *(_QWORD *)&__p[24] = v327;
                *(_QWORD *)__p = v353.i64[0];
                sub_22E3B8B94((uint64_t)__p);
                goto LABEL_624;
              }
LABEL_622:
              v353 = vdupq_n_s64((unint64_t)v326);
              v350 = v349;
              goto LABEL_623;
            }
          }
          else
          {
            if (v325 == 5)
            {
              v334 = *(char **)(a1 + 232);
              v335 = *(_QWORD *)(a1 + 240);
              if ((unint64_t)v334 >= v335)
              {
                v337 = (char *)*v322;
                v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v334[-*v322] >> 3);
                v339 = v338 + 1;
                if (v338 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_768;
                if (0x5555555555555556 * ((uint64_t)(v335 - (_QWORD)v337) >> 3) > v339)
                  v339 = 0x5555555555555556 * ((uint64_t)(v335 - (_QWORD)v337) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335 - (_QWORD)v337) >> 3) >= 0x555555555555555)
                  v340 = 0xAAAAAAAAAAAAAAALL;
                else
                  v340 = v339;
                *(_QWORD *)&v463 = a1 + 240;
                if (v340)
                {
                  if (v340 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_769;
                  v341 = (char *)operator new(24 * v340);
                }
                else
                {
                  v341 = 0;
                }
                v345 = &v341[24 * v338];
                v345[23] = 17;
                strcpy(v345, "fast-relaxed-math");
                if (v334 == v337)
                {
                  v348 = vdupq_n_s64((unint64_t)v334);
                  v346 = &v341[24 * v338];
                }
                else
                {
                  v346 = &v341[24 * v338];
                  do
                  {
                    v347 = *(_OWORD *)(v334 - 24);
                    *((_QWORD *)v346 - 1) = *((_QWORD *)v334 - 1);
                    *(_OWORD *)(v346 - 24) = v347;
                    v346 -= 24;
                    *((_QWORD *)v334 - 2) = 0;
                    *((_QWORD *)v334 - 1) = 0;
                    *((_QWORD *)v334 - 3) = 0;
                    v334 -= 24;
                  }
                  while (v334 != v337);
                  v348 = *(int64x2_t *)v322;
                  v335 = *v323;
                }
                v336 = v345 + 24;
                *(_QWORD *)(a1 + 224) = v346;
                *(_QWORD *)(a1 + 232) = v345 + 24;
                *(int64x2_t *)&__p[8] = v348;
                *(_QWORD *)(a1 + 240) = &v341[24 * v340];
                *(_QWORD *)&__p[24] = v335;
                *(_QWORD *)__p = v348.i64[0];
                sub_22E3B8B94((uint64_t)__p);
              }
              else
              {
                v334[23] = 17;
                strcpy(v334, "fast-relaxed-math");
                v336 = v334 + 24;
              }
              *(_QWORD *)(a1 + 232) = v336;
              goto LABEL_625;
            }
            if (v325 == 6)
            {
              if ((v321 & 0xFFFFFFFD) == 1)
              {
                v326 = *(char **)(a1 + 232);
                v327 = *(_QWORD *)(a1 + 240);
                if ((unint64_t)v326 < v327)
                  goto LABEL_580;
                v328 = (char *)*v322;
                v329 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v326[-*v322] >> 3);
                v330 = v329 + 1;
                if (v329 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_768;
                if (0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v328) >> 3) > v330)
                  v330 = 0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v328) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (_QWORD)v328) >> 3) >= 0x555555555555555)
                  v331 = 0xAAAAAAAAAAAAAAALL;
                else
                  v331 = v330;
                *(_QWORD *)&v463 = a1 + 240;
                if (v331)
                {
                  if (v331 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_769;
                  v332 = (char *)operator new(24 * v331);
                }
                else
                {
                  v332 = 0;
                }
                v349 = &v332[24 * v329];
                v349[23] = 17;
                strcpy(v349, "fast-relaxed-math");
                if (v326 != v328)
                {
                  v350 = &v332[24 * v329];
                  do
                  {
                    v352 = *(_OWORD *)(v326 - 24);
                    *((_QWORD *)v350 - 1) = *((_QWORD *)v326 - 1);
                    *(_OWORD *)(v350 - 24) = v352;
                    v350 -= 24;
                    *((_QWORD *)v326 - 2) = 0;
                    *((_QWORD *)v326 - 1) = 0;
                    *((_QWORD *)v326 - 3) = 0;
                    v326 -= 24;
                  }
                  while (v326 != v328);
                  goto LABEL_621;
                }
                goto LABEL_622;
              }
              v321 = 2;
            }
          }
LABEL_625:
          *(_QWORD *)v459 += 8;
          sub_22E725424((uint64_t)v459);
          v320 = *(_QWORD ****)v459;
        }
        while (*(_QWORD *)v459 != v319);
      }
      LastArgValue = llvm::opt::ArgList::getLastArgValue();
      if (v355 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_768;
      v356 = (const void *)LastArgValue;
      v357 = v355;
      if (v355 >= 0x17)
      {
        v359 = (v355 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v355 | 7) != 0x17)
          v359 = v355 | 7;
        v360 = v359 + 1;
        v358 = operator new(v359 + 1);
        *(_QWORD *)&__dst[16] = v360 | 0x8000000000000000;
        *(_QWORD *)__dst = v358;
        *(_QWORD *)&__dst[8] = v357;
        goto LABEL_633;
      }
      __dst[23] = v355;
      v358 = __dst;
      if (v355)
LABEL_633:
        memmove(v358, v356, v357);
      v358[v357] = 0;
      v361 = (void **)(a1 + 248);
      if (*(char *)(a1 + 271) < 0)
        operator delete(*v361);
      *(_OWORD *)v361 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&__dst[16];
      v362 = llvm::opt::ArgList::getLastArgValue();
      if (v363 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_768;
      v364 = (const void *)v362;
      v365 = v363;
      if (v363 >= 0x17)
      {
        v367 = (v363 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v363 | 7) != 0x17)
          v367 = v363 | 7;
        v368 = v367 + 1;
        v366 = operator new(v367 + 1);
        *(_QWORD *)&__dst[16] = v368 | 0x8000000000000000;
        *(_QWORD *)__dst = v366;
        *(_QWORD *)&__dst[8] = v365;
        goto LABEL_643;
      }
      __dst[23] = v363;
      v366 = __dst;
      if (v363)
LABEL_643:
        memmove(v366, v364, v365);
      v366[v365] = 0;
      v369 = (void **)(a1 + 272);
      if (*(char *)(a1 + 295) < 0)
        operator delete(*v369);
      *(_OWORD *)v369 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&__dst[16];
      llvm::sys::path::filename();
      v370 = llvm::opt::ArgList::getLastArgValue();
      if (v371 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_768;
      v372 = (const void *)v370;
      v373 = v371;
      if (v371 >= 0x17)
      {
        v375 = (v371 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v371 | 7) != 0x17)
          v375 = v371 | 7;
        v376 = v375 + 1;
        v374 = operator new(v375 + 1);
        *(_QWORD *)&__dst[16] = v376 | 0x8000000000000000;
        *(_QWORD *)__dst = v374;
        *(_QWORD *)&__dst[8] = v373;
        goto LABEL_653;
      }
      __dst[23] = v371;
      v374 = __dst;
      if (v371)
LABEL_653:
        memmove(v374, v372, v373);
      v374[v373] = 0;
      v377 = (void **)(a1 + 296);
      if (*(char *)(a1 + 319) < 0)
        operator delete(*v377);
      *(_OWORD *)v377 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 312) = *(_QWORD *)&__dst[16];
      *(_BYTE *)(a1 + 320) = sub_22F2121CC((uint64_t)v468, 26) != 0;
      v378 = llvm::opt::ArgList::getLastArgValue();
      if (v379 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_768;
      v380 = (const void *)v378;
      v381 = v379;
      if (v379 >= 0x17)
      {
        v383 = (v379 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v379 | 7) != 0x17)
          v383 = v379 | 7;
        v384 = v383 + 1;
        v382 = operator new(v383 + 1);
        *(_QWORD *)&__dst[16] = v384 | 0x8000000000000000;
        *(_QWORD *)__dst = v382;
        *(_QWORD *)&__dst[8] = v381;
        goto LABEL_663;
      }
      __dst[23] = v379;
      v382 = __dst;
      if (v379)
LABEL_663:
        memmove(v382, v380, v381);
      v382[v381] = 0;
      v385 = (void **)(a1 + 456);
      if (*(char *)(a1 + 479) < 0)
        operator delete(*v385);
      *(_OWORD *)v385 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 472) = *(_QWORD *)&__dst[16];
      v386 = sub_22F2121CC((uint64_t)v468, 54);
      if (!v386)
        goto LABEL_676;
      v387 = v386;
      v388 = *(const char ***)(v386 + 48);
      v389 = *v388;
      if (*v388)
      {
        v390 = strlen(*v388);
        if (v390 != 8)
        {
          if (v390 != 7)
          {
            if (v390 != 5)
              goto LABEL_683;
            if (*(_DWORD *)v389 != 1869771365 || v389[4] != 114)
              goto LABEL_683;
LABEL_676:
            *(_DWORD *)(a1 + 480) = 0;
            goto LABEL_689;
          }
          if (*(_DWORD *)v389 != 1852989815 || *(_DWORD *)(v389 + 3) != 1735289198)
            goto LABEL_683;
          v392 = 1;
LABEL_745:
          *(_DWORD *)(a1 + 480) = v392;
          goto LABEL_689;
        }
        if (*(_QWORD *)v389 == 0x7373657270707573)
        {
          v392 = 2;
          goto LABEL_745;
        }
      }
LABEL_683:
      v394 = *(_QWORD *)(v387 + 24);
      v395 = *(_QWORD *)(v387 + 32);
      LOWORD(v460) = 773;
      *(_QWORD *)v459 = v394;
      *(_QWORD *)&v459[8] = v395;
      *(_QWORD *)&v459[16] = ": value '";
      v396 = *v388;
      if (**v388)
      {
        v397 = v459;
        *(_QWORD *)__p = v459;
        *(_QWORD *)&__p[16] = v396;
        LOWORD(v463) = 770;
        v398 = 2;
        v399 = 3;
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v459;
        *(_OWORD *)&__p[16] = *(_OWORD *)&v459[16];
        *(_QWORD *)&v463 = v460;
        v398 = v460;
        v399 = BYTE1(v460);
        v397 = *(_BYTE **)v459;
      }
      if (v399 != 1)
      {
        v398 = 2;
        v397 = __p;
      }
      *(_QWORD *)__dst = v397;
      *(_QWORD *)&__dst[8] = *(_QWORD *)&__p[8];
      *(_QWORD *)&__dst[16] = "' is not supported";
      LOBYTE(v466) = v398;
      BYTE1(v466) = 3;
      llvm::air::ErrorHandler::error();
LABEL_689:
      v400 = sub_22F212258((uint64_t)v468, 0x12u, 0x2Bu);
      if (v400 && *(_DWORD *)(*(_QWORD *)v400 + 32) == 18)
      {
        *(_QWORD *)__dst = &__dst[24];
        *(_OWORD *)&__dst[8] = xmmword_22F44E310;
        sub_22F43FBC8(a2, __dst);
        std::string::append((std::string *)(a1 + 488), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
        if (v442)
        {
          v427 = 8 * v442;
          do
          {
            v428 = *v440;
            *(_QWORD *)__p = &__p[24];
            *(_OWORD *)&__p[8] = xmmword_22F44E310;
            std::string::append((std::string *)(a1 + 488), " ");
            sub_22F43FBC8(v428, __p);
            std::string::append((std::string *)(a1 + 488), *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            if (*(_BYTE **)__p != &__p[24])
              free(*(void **)__p);
            ++v440;
            v427 -= 8;
          }
          while (v427);
        }
        *(_QWORD *)__p = &__p[24];
        *(_OWORD *)&__p[8] = xmmword_22F44E300;
        v429.__cat_ = (const std::error_category *)llvm::sys::fs::current_path();
        if (LODWORD(v429.__cat_))
        {
          *(_QWORD *)&v430.__val_ = *(_QWORD *)&v429.__val_;
          *(_QWORD *)v459 = "cannot get current directory";
          LOWORD(v460) = 259;
          *(_QWORD *)&v429.__val_ = v459;
          sub_22F43FCAC(a1, v429, v430);
        }
        std::string::append((std::string *)(a1 + 512), *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        if (*(_BYTE **)__p != &__p[24])
          free(*(void **)__p);
        if (*(_BYTE **)__dst != &__dst[24])
          free(*(void **)__dst);
      }
      v401 = *(const void **)a1;
      if (*(_QWORD *)a1)
      {
        v402 = *(_QWORD *)(a1 + 8);
        if (v402 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_768;
        if (v402 >= 0x17)
        {
          v404 = (v402 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v402 | 7) != 0x17)
            v404 = v402 | 7;
          v405 = v404 + 1;
          v403 = operator new(v404 + 1);
          *(_QWORD *)&__dst[16] = v405 | 0x8000000000000000;
          *(_QWORD *)__dst = v403;
          *(_QWORD *)&__dst[8] = v402;
        }
        else
        {
          __dst[23] = *(_QWORD *)(a1 + 8);
          v403 = __dst;
          if (!v402)
            goto LABEL_701;
        }
        memmove(v403, v401, v402);
LABEL_701:
        v403[v402] = 0;
        goto LABEL_702;
      }
      memset(__dst, 0, 24);
LABEL_702:
      v406 = std::string::append((std::string *)__dst, " (LLVM option parsing)");
      v407 = v406->__r_.__value_.__r.__words[2];
      *(_OWORD *)v459 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
      *(_QWORD *)&v459[16] = v407;
      v406->__r_.__value_.__l.__size_ = 0;
      v406->__r_.__value_.__r.__words[2] = 0;
      v406->__r_.__value_.__r.__words[0] = 0;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if (v459[23] >= 0)
        v408 = v459;
      else
        v408 = *(_BYTE **)v459;
      v409 = (char *)operator new(8uLL);
      *(_QWORD *)v409 = v408;
      v410 = v409 + 8;
      sub_22F212358((uint64_t)__dst, (uint64_t)v468, 40);
      *(_OWORD *)__p = *(_OWORD *)__dst;
      v411 = *(_QWORD *)&__dst[24];
      *(_QWORD *)&__p[16] = *(_QWORD *)&__dst[16];
      v412 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst != *(_QWORD *)&__dst[24])
      {
        v413 = v409 + 8;
        do
        {
          v414 = **(_QWORD **)(*(_QWORD *)v412 + 48);
          if (v410 >= v413)
          {
            v416 = (v410 - v409) >> 3;
            v417 = v416 + 1;
            if ((unint64_t)(v416 + 1) >> 61)
              goto LABEL_768;
            if ((v413 - v409) >> 2 > v417)
              v417 = (v413 - v409) >> 2;
            if ((unint64_t)(v413 - v409) >= 0x7FFFFFFFFFFFFFF8)
              v418 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v418 = v417;
            if (v418)
            {
              if (v418 >> 61)
                goto LABEL_769;
              v419 = (char *)operator new(8 * v418);
            }
            else
            {
              v419 = 0;
            }
            v420 = &v419[8 * v416];
            v413 = &v419[8 * v418];
            *(_QWORD *)v420 = v414;
            v415 = v420 + 8;
            if (v410 == v409)
              goto LABEL_724;
            do
            {
              v421 = *((_QWORD *)v410 - 1);
              v410 -= 8;
              *((_QWORD *)v420 - 1) = v421;
              v420 -= 8;
            }
            while (v410 != v409);
            if (v409)
LABEL_724:
              operator delete(v409);
            v409 = v420;
          }
          else
          {
            *(_QWORD *)v410 = v414;
            v415 = v410 + 8;
          }
          *(_QWORD *)__p += 8;
          sub_22E721830((uint64_t)__p);
          v412 = *(_QWORD *)__p;
          v410 = v415;
        }
        while (*(_QWORD *)__p != v411);
      }
      llvm::cl::ParseCommandLineOptions();
      sub_22F212358((uint64_t)__dst, (uint64_t)v468, 2);
      v448 = *(std::string *)__dst;
      v422 = *(_QWORD *)&__dst[24];
      v423 = *(uint64_t **)__dst;
      if (*(_QWORD *)__dst != *(_QWORD *)&__dst[24])
      {
        do
        {
          v424 = *v423;
          v426 = *(_QWORD *)(v424 + 24);
          v425 = *(_QWORD *)(v424 + 32);
          LOWORD(v463) = 1283;
          *(_QWORD *)__p = "unknown argument: ";
          *(_QWORD *)&__p[16] = v426;
          *(_QWORD *)&__p[24] = v425;
          llvm::air::ErrorHandler::error();
          v448.__r_.__value_.__r.__words[0] += 8;
          sub_22E721830((uint64_t)&v448);
          v423 = (uint64_t *)v448.__r_.__value_.__r.__words[0];
        }
        while (v448.__r_.__value_.__r.__words[0] != v422);
      }
      v24 = *(_DWORD *)(a1 + 120) == 0;
      if (v409)
        operator delete(v409);
      if ((v459[23] & 0x80000000) != 0)
        operator delete(*(void **)v459);
LABEL_24:
      sub_22E72212C((uint64_t)v468);
      if (v458)
      {
        v25 = MEMORY[0x23489E664]();
        MEMORY[0x2348A0E9C](v25, 0x10F2C409F9E7248);
      }
      return v24;
    case '1':
    case '2':
    case '3':
    case '6':
    case '7':
    case '8':
    case '9':
      __break(1u);
      return result;
    case '4':
      LODWORD(v242) = 20;
      goto LABEL_424;
    case '5':
LABEL_424:
      v248 = *(const char **)v239[6];
      goto LABEL_425;
    case ':':
      LODWORD(v242) = 20;
      goto LABEL_433;
    case ';':
LABEL_433:
      v248 = *(const char **)v239[6];
      goto LABEL_434;
    default:
      __asm { BR              X10 }
      return result;
  }
}

uint64_t sub_22F2121CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  sub_22F212358((uint64_t)&v11, a1, a2);
  v9 = v11;
  v2 = v13;
  v10 = v12;
  v3 = (uint64_t *)v11;
  if ((_QWORD)v11 == v13)
    return 0;
  do
  {
    v6 = *v3;
    v4 = v3 + 1;
    v5 = v6;
    v7 = *(_QWORD *)(v6 + 16);
    if (!v7)
      v7 = v5;
    *(_BYTE *)(v7 + 44) |= 1u;
    *(_QWORD *)&v9 = v4;
    sub_22E721830((uint64_t)&v9);
    v3 = (uint64_t *)v9;
  }
  while ((_QWORD)v9 != v2);
  return v5;
}

uint64_t sub_22F212258(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  unint64_t v17;
  _QWORD v18[2];
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v21 = __PAIR64__(a3, a2);
  Range = llvm::opt::ArgList::getRange();
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v21 = v7 + 8 * Range;
  *((_QWORD *)&v21 + 1) = v8;
  v22 = __PAIR64__(a3, a2);
  sub_22E7219D8((uint64_t)&v21);
  v18[0] = v8;
  v18[1] = v8;
  v19 = a2;
  v20 = a3;
  sub_22E7219D8((uint64_t)v18);
  v16 = v21;
  v17 = v22;
  v9 = v18[0];
  v10 = (uint64_t *)v21;
  if ((_QWORD)v21 == v18[0])
    return 0;
  do
  {
    v13 = *v10;
    v11 = v10 + 1;
    v12 = v13;
    v14 = *(_QWORD *)(v13 + 16);
    if (!v14)
      v14 = v12;
    *(_BYTE *)(v14 + 44) |= 1u;
    *(_QWORD *)&v16 = v11;
    sub_22E7219D8((uint64_t)&v16);
    v10 = (uint64_t *)v16;
  }
  while ((_QWORD)v16 != v9);
  return v12;
}

double sub_22F212358(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v14 = a3;
  Range = llvm::opt::ArgList::getRange();
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v12 = v7 + 8 * Range;
  *((_QWORD *)&v12 + 1) = v8;
  LODWORD(v13) = a3;
  sub_22E721830((uint64_t)&v12);
  *(_QWORD *)&v10 = v8;
  *((_QWORD *)&v10 + 1) = v8;
  LODWORD(v11) = a3;
  sub_22E721830((uint64_t)&v10);
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v13;
  result = *(double *)&v10;
  *(_OWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  return result;
}

uint64_t sub_22F2123F0(char *a1, uint64_t a2)
{
  if (a2 && llvm::sys::path::is_separator((llvm::sys::path *)*a1))
  {
    llvm::sys::path::append();
    llvm::sys::fs::is_directory();
  }
  return 0;
}

uint64_t sub_22F212514(_OWORD *a1, uint64_t a2, int a3)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v16 = a3;
  v17 = 0x600000008;
  v18 = 5;
  Range = llvm::opt::ArgList::getRange();
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v14 = v7 + 8 * Range;
  *((_QWORD *)&v14 + 1) = v8;
  LODWORD(v15) = a3;
  *(_QWORD *)((char *)&v15 + 4) = 0x600000008;
  HIDWORD(v15) = 5;
  sub_22E725424((uint64_t)&v14);
  *(_QWORD *)&v12 = v8;
  *((_QWORD *)&v12 + 1) = v8;
  LODWORD(v13) = a3;
  *(_QWORD *)((char *)&v13 + 4) = 0x600000008;
  HIDWORD(v13) = 5;
  result = sub_22E725424((uint64_t)&v12);
  v10 = v15;
  *a1 = v14;
  a1[1] = v10;
  v11 = v13;
  a1[2] = v12;
  a1[3] = v11;
  return result;
}

BOOL sub_22F2125FC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  BOOL v3;
  const void *v4;
  size_t v5;
  size_t v6;
  char v7;
  int v8;
  const void *v9;
  size_t v10;
  size_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  char v24;
  BOOL v25;
  void *v26;
  void *v27;
  void *v28;
  _BOOL8 v29;
  char v31;
  int v32;
  size_t v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  char v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::string v45;
  void *v46[2];
  std::string::size_type v47;
  void **v48;
  __int16 v49;
  void *v50[2];
  char v51;
  _QWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _OWORD v58[3];
  void *v59[2];
  unint64_t v60;
  void *__p[2];
  unint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(a1 + 536);
  v2 = *(_BYTE *)(a1 + 511);
  v3 = v2 < 0;
  if (v2 >= 0)
    v4 = (const void *)(a1 + 488);
  else
    v4 = *(const void **)(a1 + 488);
  v5 = v2 & 0x7F;
  if (v3)
    v6 = *(_QWORD *)(a1 + 496);
  else
    v6 = v5;
  v7 = *(_BYTE *)(a1 + 535);
  v8 = v7;
  if (v7 >= 0)
    v9 = (const void *)(a1 + 512);
  else
    v9 = *(const void **)(a1 + 512);
  v10 = v7 & 0x7F;
  if (v8 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 520);
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v52[0] = &off_24FCAFD08;
  v52[1] = v1;
  memset(v58, 0, sizeof(v58));
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
    abort();
  if (v6 >= 0x17)
  {
    v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v14 = v6 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    v59[1] = (void *)v6;
    v60 = v15 | 0x8000000000000000;
    v59[0] = v13;
    goto LABEL_20;
  }
  v13 = v59;
  HIBYTE(v60) = v6;
  if (v6)
LABEL_20:
    memmove(v13, v4, v6);
  *((_BYTE *)v13 + v6) = 0;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
  if (v11 >= 0x17)
  {
    v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v17 = v11 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v11;
    v62 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_28;
  }
  v16 = __p;
  HIBYTE(v62) = v11;
  if (v11)
LABEL_28:
    memmove(v16, v9, v11);
  *((_BYTE *)v16 + v11) = 0;
  v63 = 0;
  v19 = *(_BYTE *)(a1 + 479);
  if (v19 >= 0)
    v20 = a1 + 456;
  else
    v20 = *(_QWORD *)(a1 + 456);
  if (v19 >= 0)
    v21 = v19 & 0x7F;
  else
    v21 = *(_QWORD *)(a1 + 464);
  if (!sub_22F43FD4C((llvm::vfs *)a1, v20, v21))
    goto LABEL_46;
  v22 = *(void ***)(a1 + 128);
  v23 = *(void ***)(a1 + 136);
  while (v22 != v23)
  {
    v24 = *((_BYTE *)v22 + 23);
    v25 = v24 < 0;
    if (v24 >= 0)
      v26 = v22;
    else
      v26 = *v22;
    v27 = (void *)(v24 & 0x7F);
    if (v25)
      v28 = v22[1];
    else
      v28 = v27;
    sub_22F213910(a1, v26, v28, 0);
    v22 += 3;
  }
  if (!*(_DWORD *)(a1 + 120))
  {
    *(_QWORD *)&v53 = a1;
    v31 = *(_BYTE *)(a1 + 351);
    v32 = v31;
    v33 = v31 & 0x7F;
    if (v32 >= 0)
      v34 = v33;
    else
      v34 = *(_QWORD *)(a1 + 336);
    v35 = &v45;
    sub_22E3B8BF4((uint64_t)&v45, v34 + 7);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if (v34)
    {
      if (*(char *)(a1 + 351) >= 0)
        v36 = (const void *)(a1 + 328);
      else
        v36 = *(const void **)(a1 + 328);
      memmove(v35, v36, v34);
    }
    strcpy((char *)v35 + v34, "-apple-");
    v37 = *(_BYTE *)(a1 + 375);
    if (v37 >= 0)
      v38 = (const std::string::value_type *)(a1 + 352);
    else
      v38 = *(const std::string::value_type **)(a1 + 352);
    if (v37 >= 0)
      v39 = v37 & 0x7F;
    else
      v39 = *(_QWORD *)(a1 + 360);
    v40 = std::string::append(&v45, v38, v39);
    v41 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)v46 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v47 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v49 = 260;
    v48 = v46;
    MEMORY[0x23489F1BC](v50, &v48);
    sub_22F440748((uint64_t)v52, (uint64_t)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(v46[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    sub_22F44078C((uint64_t)v52, *(unint64_t **)(a1 + 576), (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3);
    v42 = sub_22F440A14((uint64_t)v52);
    v43 = v63;
    if (v42)
    {
      v63 = 0;
      *(_QWORD *)(a1 + 608) = v43 & 0xFFFFFFFFFFFFFFF9 | 4;
      v50[0] = (void *)2;
      sub_22E3B4400((uint64_t *)v50);
      sub_22F213FA4(a1);
      v29 = *(_DWORD *)(a1 + 120) == 0;
      v43 = v63;
    }
    else
    {
      v29 = 0;
    }
    v52[0] = &off_24FCAFD08;
    v63 = 0;
    if (v43)
    {
      v44 = sub_22E3B45BC(v43);
      MEMORY[0x2348A0E9C](v44, 0x10B2C408BDE5BD4);
    }
  }
  else
  {
LABEL_46:
    v29 = 0;
    v52[0] = &off_24FCAFD08;
    v63 = 0;
  }
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  v50[0] = (char *)&v58[1] + 8;
  sub_22E3B4D60((void ***)v50);
  v50[0] = v58;
  sub_22F215374((void ***)v50);
  v52[0] = &unk_24FCAEDD8;
  if (SHIBYTE(v54) < 0)
    operator delete(*((void **)&v53 + 1));
  return v29;
}

BOOL sub_22F212A30(uint64_t a1)
{
  char v2;
  void *v3;
  size_t v4;
  char v5;
  int v6;
  void *v7;
  size_t v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  void **v17;
  void **v18;
  char v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  size_t v45;
  size_t v46;
  std::string *v47;
  const void *v48;
  char v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  const void *v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string v63;
  void *v64[2];
  std::string::size_type v65;
  void **v66;
  __int16 v67;
  void *__dst[2];
  unint64_t v69;
  _QWORD v70[35];
  uint64_t v71;
  int v72;
  __int128 __p;
  unint64_t v74;
  char v75;
  uint64_t v76;

  v2 = *(_BYTE *)(a1 + 511);
  if (v2 >= 0)
    v3 = (void *)(a1 + 488);
  else
    v3 = *(void **)(a1 + 488);
  if (v2 >= 0)
    v4 = v2 & 0x7F;
  else
    v4 = *(_QWORD *)(a1 + 496);
  v5 = *(_BYTE *)(a1 + 535);
  v6 = v5;
  if (v5 >= 0)
    v7 = (void *)(a1 + 512);
  else
    v7 = *(void **)(a1 + 512);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a1 + 520);
  sub_22F2153E4((uint64_t)v70, *(_QWORD *)(a1 + 536), v3, v4, v7, v9);
  v70[0] = &off_24FCAFD30;
  __p = 0uLL;
  v74 = 0;
  v76 = 0;
  v75 = *(_BYTE *)(a1 + 448);
  v10 = *(_BYTE *)(a1 + 479);
  if (v10 >= 0)
    v11 = a1 + 456;
  else
    v11 = *(_QWORD *)(a1 + 456);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(a1 + 464);
  if (!sub_22F43FD4C((llvm::vfs *)a1, v11, v12))
    goto LABEL_20;
  v17 = *(void ***)(a1 + 128);
  v18 = *(void ***)(a1 + 136);
  while (v17 != v18)
  {
    v19 = *((_BYTE *)v17 + 23);
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = v17;
    else
      v21 = *v17;
    v22 = (void *)(v19 & 0x7F);
    if (v20)
      v23 = v17[1];
    else
      v23 = v22;
    sub_22F213910(a1, v21, v23, 1);
    v17 += 3;
  }
  v24 = *(_QWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 160);
  while (v24 != v25)
  {
    v26 = *(_BYTE *)(v24 + 23);
    v27 = v26 < 0;
    if (v26 >= 0)
      v28 = v24;
    else
      v28 = *(_QWORD *)v24;
    v29 = v26 & 0x7F;
    if (v27)
      v30 = *(_QWORD *)(v24 + 8);
    else
      v30 = v29;
    sub_22F2141AC((_QWORD *)a1, v28, v30);
    v24 += 24;
  }
  v31 = *(_QWORD *)(a1 + 200);
  v32 = *(_QWORD *)(a1 + 208);
  while (v31 != v32)
  {
    v33 = *(_BYTE *)(v31 + 23);
    v34 = v33 < 0;
    if (v33 >= 0)
      v35 = v31;
    else
      v35 = *(_QWORD *)v31;
    v36 = v33 & 0x7F;
    if (v34)
      v37 = *(_QWORD *)(v31 + 8);
    else
      v37 = v36;
    sub_22F214B64((_QWORD *)a1, v35, v37);
    v31 += 24;
  }
  v38 = *(_BYTE *)(a1 + 271);
  v39 = v38;
  v40 = v38 >= 0 ? a1 + 248 : *(_QWORD *)(a1 + 248);
  v41 = v38 & 0x7F;
  v42 = v39 >= 0 ? v41 : *(_QWORD *)(a1 + 256);
  sub_22F440010(a1, v40, v42);
  if (*(_DWORD *)(a1 + 120))
  {
LABEL_20:
    v13 = 0;
    goto LABEL_21;
  }
  v70[2] = a1;
  v43 = *(_BYTE *)(a1 + 351);
  v44 = v43;
  v45 = v43 & 0x7F;
  if (v44 >= 0)
    v46 = v45;
  else
    v46 = *(_QWORD *)(a1 + 336);
  v47 = &v63;
  sub_22E3B8BF4((uint64_t)&v63, v46 + 7);
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v47 = (std::string *)v63.__r_.__value_.__r.__words[0];
  if (v46)
  {
    if (*(char *)(a1 + 351) >= 0)
      v48 = (const void *)(a1 + 328);
    else
      v48 = *(const void **)(a1 + 328);
    memmove(v47, v48, v46);
  }
  strcpy((char *)v47 + v46, "-apple-");
  v49 = *(_BYTE *)(a1 + 375);
  if (v49 >= 0)
    v50 = (const std::string::value_type *)(a1 + 352);
  else
    v50 = *(const std::string::value_type **)(a1 + 352);
  if (v49 >= 0)
    v51 = v49 & 0x7F;
  else
    v51 = *(_QWORD *)(a1 + 360);
  v52 = std::string::append(&v63, v50, v51);
  v53 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)v64 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v65 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v67 = 260;
  v66 = v64;
  MEMORY[0x23489F1BC](__dst, &v66);
  sub_22F440748((uint64_t)v70, (uint64_t)__dst);
  if (SHIBYTE(v69) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  sub_22F440E90((llvm::object::IRObjectFile *)v70, *(unint64_t **)(a1 + 576), (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3);
  v54 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  v55 = v71;
  v71 = v54;
  if (v55)
    sub_22E3B4D0C((uint64_t)&v71, v55);
  v56 = *(_BYTE *)(a1 + 319);
  if (v56 >= 0)
    v57 = (const void *)(a1 + 296);
  else
    v57 = *(const void **)(a1 + 296);
  if (v56 >= 0)
    v58 = v56 & 0x7F;
  else
    v58 = *(_QWORD *)(a1 + 304);
  if (v58 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v58 >= 0x17)
  {
    v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v60 = v58 | 7;
    v61 = v60 + 1;
    v59 = operator new(v60 + 1);
    __dst[1] = (void *)v58;
    v69 = v61 | 0x8000000000000000;
    __dst[0] = v59;
    goto LABEL_97;
  }
  HIBYTE(v69) = v58;
  v59 = __dst;
  if (v58)
LABEL_97:
    memmove(v59, v57, v58);
  *((_BYTE *)v59 + v58) = 0;
  if (SHIBYTE(v74) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)__dst;
  v74 = v69;
  if (*(_DWORD *)(a1 + 480) <= 2u)
    v72 = *(_DWORD *)(a1 + 480);
  if (!sub_22F21BD8C())
    goto LABEL_20;
  v62 = v76;
  v76 = 0;
  *(_QWORD *)(a1 + 608) = v62 & 0xFFFFFFFFFFFFFFF9 | 4;
  __dst[0] = (void *)2;
  sub_22E3B4400((uint64_t *)__dst);
  sub_22F213FA4(a1);
  v13 = *(_DWORD *)(a1 + 120) == 0;
LABEL_21:
  v14 = v76;
  v70[0] = &off_24FCAFD30;
  v76 = 0;
  if (v14)
  {
    v15 = sub_22E3B46CC(v14);
    MEMORY[0x2348A0E9C](v15, 0x1032C40B18B30E6);
  }
  if (SHIBYTE(v74) < 0)
    operator delete((void *)__p);
  sub_22F215594((uint64_t)v70);
  return v13;
}

BOOL sub_22F212E98(uint64_t a1)
{
  char v2;
  void *v3;
  size_t v4;
  char v5;
  int v6;
  void *v7;
  size_t v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  char v15;
  BOOL v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  size_t v41;
  size_t v42;
  std::string *v43;
  const void *v44;
  char v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  std::string v55;
  void *v56[2];
  std::string::size_type v57;
  void **v58;
  __int16 v59;
  void *__p[2];
  char v61;
  _QWORD v62[35];
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;

  v2 = *(_BYTE *)(a1 + 511);
  if (v2 >= 0)
    v3 = (void *)(a1 + 488);
  else
    v3 = *(void **)(a1 + 488);
  if (v2 >= 0)
    v4 = v2 & 0x7F;
  else
    v4 = *(_QWORD *)(a1 + 496);
  v5 = *(_BYTE *)(a1 + 535);
  v6 = v5;
  if (v5 >= 0)
    v7 = (void *)(a1 + 512);
  else
    v7 = *(void **)(a1 + 512);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a1 + 520);
  sub_22F2153E4((uint64_t)v62, *(_QWORD *)(a1 + 536), v3, v4, v7, v9);
  v62[0] = &unk_24FCAFD88;
  v66 = 0;
  v65 = *(_BYTE *)(a1 + 448);
  v10 = *(_BYTE *)(a1 + 479);
  if (v10 >= 0)
    v11 = a1 + 456;
  else
    v11 = *(_QWORD *)(a1 + 456);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(a1 + 464);
  if (!sub_22F43FD4C((llvm::vfs *)a1, v11, v12))
    goto LABEL_80;
  v13 = *(void ***)(a1 + 128);
  v14 = *(void ***)(a1 + 136);
  while (v13 != v14)
  {
    v15 = *((_BYTE *)v13 + 23);
    v16 = v15 < 0;
    if (v15 >= 0)
      v17 = v13;
    else
      v17 = *v13;
    v18 = (void *)(v15 & 0x7F);
    if (v16)
      v19 = v13[1];
    else
      v19 = v18;
    sub_22F213910(a1, v17, v19, 1);
    v13 += 3;
  }
  v20 = *(_QWORD *)(a1 + 152);
  v21 = *(_QWORD *)(a1 + 160);
  while (v20 != v21)
  {
    v22 = *(_BYTE *)(v20 + 23);
    v23 = v22 < 0;
    if (v22 >= 0)
      v24 = v20;
    else
      v24 = *(_QWORD *)v20;
    v25 = v22 & 0x7F;
    if (v23)
      v26 = *(_QWORD *)(v20 + 8);
    else
      v26 = v25;
    sub_22F2141AC((_QWORD *)a1, v24, v26);
    v20 += 24;
  }
  v27 = *(_QWORD *)(a1 + 200);
  v28 = *(_QWORD *)(a1 + 208);
  while (v27 != v28)
  {
    v29 = *(_BYTE *)(v27 + 23);
    v30 = v29 < 0;
    if (v29 >= 0)
      v31 = v27;
    else
      v31 = *(_QWORD *)v27;
    v32 = v29 & 0x7F;
    if (v30)
      v33 = *(_QWORD *)(v27 + 8);
    else
      v33 = v32;
    sub_22F214B64((_QWORD *)a1, v31, v33);
    v27 += 24;
  }
  v34 = *(_BYTE *)(a1 + 271);
  v35 = v34;
  v36 = v34 >= 0 ? a1 + 248 : *(_QWORD *)(a1 + 248);
  v37 = v34 & 0x7F;
  v38 = v35 >= 0 ? v37 : *(_QWORD *)(a1 + 256);
  sub_22F440010(a1, v36, v38);
  if (*(_DWORD *)(a1 + 120))
  {
LABEL_80:
    v52 = 0;
  }
  else
  {
    v62[2] = a1;
    v39 = *(_BYTE *)(a1 + 351);
    v40 = v39;
    v41 = v39 & 0x7F;
    if (v40 >= 0)
      v42 = v41;
    else
      v42 = *(_QWORD *)(a1 + 336);
    v43 = &v55;
    sub_22E3B8BF4((uint64_t)&v55, v42 + 7);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if (v42)
    {
      if (*(char *)(a1 + 351) >= 0)
        v44 = (const void *)(a1 + 328);
      else
        v44 = *(const void **)(a1 + 328);
      memmove(v43, v44, v42);
    }
    strcpy((char *)v43 + v42, "-apple-");
    v45 = *(_BYTE *)(a1 + 375);
    if (v45 >= 0)
      v46 = (const std::string::value_type *)(a1 + 352);
    else
      v46 = *(const std::string::value_type **)(a1 + 352);
    if (v45 >= 0)
      v47 = v45 & 0x7F;
    else
      v47 = *(_QWORD *)(a1 + 360);
    v48 = std::string::append(&v55, v46, v47);
    v49 = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)v56 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v57 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v59 = 260;
    v58 = v56;
    MEMORY[0x23489F1BC](__p, &v58);
    sub_22F440748((uint64_t)v62, (uint64_t)__p);
    if (v61 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    sub_22F440E90((llvm::object::IRObjectFile *)v62, *(unint64_t **)(a1 + 576), (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3);
    v50 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;
    v51 = v63;
    v63 = v50;
    if (v51)
      sub_22E3B4D0C((uint64_t)&v63, v51);
    v64 = 0;
    v52 = 0;
    if (sub_22F441DD4((uint64_t)v62))
    {
      v53 = v66;
      v66 = 0;
      *(_QWORD *)(a1 + 608) = v53 & 0xFFFFFFFFFFFFFFF9 | 4;
      __p[0] = (void *)2;
      sub_22E3B4400((uint64_t *)__p);
      sub_22F213FA4(a1);
      v52 = *(_DWORD *)(a1 + 120) == 0;
    }
  }
  sub_22F4404C8(v62);
  return v52;
}

BOOL sub_22F2131F0(uint64_t a1)
{
  char v2;
  void *v3;
  size_t v4;
  char v5;
  int v6;
  void *v7;
  size_t v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  char v15;
  BOOL v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  size_t v41;
  size_t v42;
  std::string *v43;
  const void *v44;
  char v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  std::string v55;
  void *v56[2];
  std::string::size_type v57;
  void **v58;
  __int16 v59;
  void *__p[2];
  char v61;
  _QWORD v62[35];
  uint64_t v63[21];
  char v64;
  uint64_t v65;

  v2 = *(_BYTE *)(a1 + 511);
  if (v2 >= 0)
    v3 = (void *)(a1 + 488);
  else
    v3 = *(void **)(a1 + 488);
  if (v2 >= 0)
    v4 = v2 & 0x7F;
  else
    v4 = *(_QWORD *)(a1 + 496);
  v5 = *(_BYTE *)(a1 + 535);
  v6 = v5;
  if (v5 >= 0)
    v7 = (void *)(a1 + 512);
  else
    v7 = *(void **)(a1 + 512);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a1 + 520);
  sub_22F2153E4((uint64_t)v62, *(_QWORD *)(a1 + 536), v3, v4, v7, v9);
  v62[0] = &unk_24FCAFDE0;
  v65 = 0;
  v64 = *(_BYTE *)(a1 + 448);
  v10 = *(_BYTE *)(a1 + 479);
  if (v10 >= 0)
    v11 = a1 + 456;
  else
    v11 = *(_QWORD *)(a1 + 456);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(a1 + 464);
  if (!sub_22F43FD4C((llvm::vfs *)a1, v11, v12))
    goto LABEL_80;
  v13 = *(void ***)(a1 + 128);
  v14 = *(void ***)(a1 + 136);
  while (v13 != v14)
  {
    v15 = *((_BYTE *)v13 + 23);
    v16 = v15 < 0;
    if (v15 >= 0)
      v17 = v13;
    else
      v17 = *v13;
    v18 = (void *)(v15 & 0x7F);
    if (v16)
      v19 = v13[1];
    else
      v19 = v18;
    sub_22F213910(a1, v17, v19, 1);
    v13 += 3;
  }
  v20 = *(_QWORD *)(a1 + 152);
  v21 = *(_QWORD *)(a1 + 160);
  while (v20 != v21)
  {
    v22 = *(_BYTE *)(v20 + 23);
    v23 = v22 < 0;
    if (v22 >= 0)
      v24 = v20;
    else
      v24 = *(_QWORD *)v20;
    v25 = v22 & 0x7F;
    if (v23)
      v26 = *(_QWORD *)(v20 + 8);
    else
      v26 = v25;
    sub_22F2141AC((_QWORD *)a1, v24, v26);
    v20 += 24;
  }
  v27 = *(_QWORD *)(a1 + 200);
  v28 = *(_QWORD *)(a1 + 208);
  while (v27 != v28)
  {
    v29 = *(_BYTE *)(v27 + 23);
    v30 = v29 < 0;
    if (v29 >= 0)
      v31 = v27;
    else
      v31 = *(_QWORD *)v27;
    v32 = v29 & 0x7F;
    if (v30)
      v33 = *(_QWORD *)(v27 + 8);
    else
      v33 = v32;
    sub_22F214B64((_QWORD *)a1, v31, v33);
    v27 += 24;
  }
  v34 = *(_BYTE *)(a1 + 271);
  v35 = v34;
  v36 = v34 >= 0 ? a1 + 248 : *(_QWORD *)(a1 + 248);
  v37 = v34 & 0x7F;
  v38 = v35 >= 0 ? v37 : *(_QWORD *)(a1 + 256);
  sub_22F440010(a1, v36, v38);
  if (*(_DWORD *)(a1 + 120))
    goto LABEL_80;
  v62[2] = a1;
  v39 = *(_BYTE *)(a1 + 351);
  v40 = v39;
  v41 = v39 & 0x7F;
  if (v40 >= 0)
    v42 = v41;
  else
    v42 = *(_QWORD *)(a1 + 336);
  v43 = &v55;
  sub_22E3B8BF4((uint64_t)&v55, v42 + 7);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if (v42)
  {
    if (*(char *)(a1 + 351) >= 0)
      v44 = (const void *)(a1 + 328);
    else
      v44 = *(const void **)(a1 + 328);
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "-apple-");
  v45 = *(_BYTE *)(a1 + 375);
  if (v45 >= 0)
    v46 = (const std::string::value_type *)(a1 + 352);
  else
    v46 = *(const std::string::value_type **)(a1 + 352);
  if (v45 >= 0)
    v47 = v45 & 0x7F;
  else
    v47 = *(_QWORD *)(a1 + 360);
  v48 = std::string::append(&v55, v46, v47);
  v49 = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)v56 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v57 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v59 = 260;
  v58 = v56;
  MEMORY[0x23489F1BC](__p, &v58);
  sub_22F440748((uint64_t)v62, (uint64_t)__p);
  if (v61 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  sub_22F440E90((llvm::object::IRObjectFile *)v62, *(unint64_t **)(a1 + 576), (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3);
  v50 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  v51 = v63[0];
  v63[0] = v50;
  if (v51)
    sub_22E3B4D0C((uint64_t)v63, v51);
  if (sub_22F2214CC())
  {
    v52 = v65;
    v65 = 0;
    *(_QWORD *)(a1 + 608) = v52 & 0xFFFFFFFFFFFFFFF9 | 4;
    __p[0] = (void *)2;
    sub_22E3B4400((uint64_t *)__p);
    sub_22F213FA4(a1);
    v53 = *(_DWORD *)(a1 + 120) == 0;
  }
  else
  {
LABEL_80:
    v53 = 0;
  }
  sub_22F44051C(v62);
  return v53;
}

BOOL sub_22F213540()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  size_t v4;
  char v5;
  int v6;
  void *v7;
  size_t v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  void **v14;
  void **v15;
  char v16;
  BOOL v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  size_t v42;
  size_t v43;
  std::string *v44;
  const void *v45;
  char v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string v55;
  void *v56[2];
  std::string::size_type v57;
  void **v58;
  __int16 v59;
  void *__p[2];
  char v61;
  _QWORD v62[35];
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;

  v0 = MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v72 = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(v0 + 511);
  if (v2 >= 0)
    v3 = (void *)(v0 + 488);
  else
    v3 = *(void **)(v0 + 488);
  if (v2 >= 0)
    v4 = v2 & 0x7F;
  else
    v4 = *(_QWORD *)(v0 + 496);
  v5 = *(_BYTE *)(v0 + 535);
  v6 = v5;
  if (v5 >= 0)
    v7 = (void *)(v0 + 512);
  else
    v7 = *(void **)(v0 + 512);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v0 + 520);
  sub_22F2153E4((uint64_t)v62, *(_QWORD *)(v0 + 536), v3, v4, v7, v9);
  v62[0] = &unk_24FCAFE38;
  v65 = 1;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v67 = 0;
  v66 = 0;
  v68 = *(_BYTE *)(v1 + 448);
  v10 = *(_BYTE *)(v1 + 479);
  if (v10 >= 0)
    v11 = v1 + 456;
  else
    v11 = *(_QWORD *)(v1 + 456);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(v1 + 464);
  v13 = 0;
  if (sub_22F43FD4C((llvm::vfs *)v1, v11, v12))
  {
    v14 = *(void ***)(v1 + 128);
    v15 = *(void ***)(v1 + 136);
    while (v14 != v15)
    {
      v16 = *((_BYTE *)v14 + 23);
      v17 = v16 < 0;
      if (v16 >= 0)
        v18 = v14;
      else
        v18 = *v14;
      v19 = (void *)(v16 & 0x7F);
      if (v17)
        v20 = v14[1];
      else
        v20 = v19;
      sub_22F213910(v1, v18, v20, 1);
      v14 += 3;
    }
    v21 = *(_QWORD *)(v1 + 152);
    v22 = *(_QWORD *)(v1 + 160);
    while (v21 != v22)
    {
      v23 = *(_BYTE *)(v21 + 23);
      v24 = v23 < 0;
      if (v23 >= 0)
        v25 = v21;
      else
        v25 = *(_QWORD *)v21;
      v26 = v23 & 0x7F;
      if (v24)
        v27 = *(_QWORD *)(v21 + 8);
      else
        v27 = v26;
      sub_22F2141AC((_QWORD *)v1, v25, v27);
      v21 += 24;
    }
    v28 = *(_QWORD *)(v1 + 200);
    v29 = *(_QWORD *)(v1 + 208);
    while (v28 != v29)
    {
      v30 = *(_BYTE *)(v28 + 23);
      v31 = v30 < 0;
      if (v30 >= 0)
        v32 = v28;
      else
        v32 = *(_QWORD *)v28;
      v33 = v30 & 0x7F;
      if (v31)
        v34 = *(_QWORD *)(v28 + 8);
      else
        v34 = v33;
      sub_22F214B64((_QWORD *)v1, v32, v34);
      v28 += 24;
    }
    v35 = *(_BYTE *)(v1 + 271);
    v36 = v35;
    if (v35 >= 0)
      v37 = v1 + 248;
    else
      v37 = *(_QWORD *)(v1 + 248);
    v38 = v35 & 0x7F;
    if (v36 >= 0)
      v39 = v38;
    else
      v39 = *(_QWORD *)(v1 + 256);
    sub_22F440010(v1, v37, v39);
    if (*(_DWORD *)(v1 + 120))
      goto LABEL_82;
    v62[2] = v1;
    v40 = *(_BYTE *)(v1 + 351);
    v41 = v40;
    v42 = v40 & 0x7F;
    if (v41 >= 0)
      v43 = v42;
    else
      v43 = *(_QWORD *)(v1 + 336);
    v44 = &v55;
    sub_22E3B8BF4((uint64_t)&v55, v43 + 7);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if (v43)
    {
      if (*(char *)(v1 + 351) >= 0)
        v45 = (const void *)(v1 + 328);
      else
        v45 = *(const void **)(v1 + 328);
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, "-apple-");
    v46 = *(_BYTE *)(v1 + 375);
    if (v46 >= 0)
      v47 = (const std::string::value_type *)(v1 + 352);
    else
      v47 = *(const std::string::value_type **)(v1 + 352);
    if (v46 >= 0)
      v48 = v46 & 0x7F;
    else
      v48 = *(_QWORD *)(v1 + 360);
    v49 = std::string::append(&v55, v47, v48);
    v50 = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)v56 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v57 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v59 = 260;
    v58 = v56;
    MEMORY[0x23489F1BC](__p, &v58);
    sub_22F440748((uint64_t)v62, (uint64_t)__p);
    if (v61 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    sub_22F440E90((llvm::object::IRObjectFile *)v62, *(unint64_t **)(v1 + 576), (uint64_t)(*(_QWORD *)(v1 + 584) - *(_QWORD *)(v1 + 576)) >> 3);
    v51 = *(_QWORD *)(v1 + 600);
    *(_QWORD *)(v1 + 600) = 0;
    v52 = v63;
    v63 = v51;
    if (v52)
      sub_22E3B4D0C((uint64_t)&v63, v52);
    v65 = *(_BYTE *)(v1 + 449);
    if (*(_DWORD *)(v1 + 480) <= 2u)
      v64 = *(_DWORD *)(v1 + 480);
    if (!sub_22F2230B8((uint64_t)v62))
    {
LABEL_82:
      v13 = 0;
    }
    else
    {
      v53 = v71;
      v71 = 0;
      *(_QWORD *)(v1 + 608) = v53 & 0xFFFFFFFFFFFFFFF9 | 4;
      __p[0] = (void *)2;
      sub_22E3B4400((uint64_t *)__p);
      sub_22F213FA4(v1);
      v13 = *(_DWORD *)(v1 + 120) == 0;
    }
  }
  sub_22F440570((uint64_t)v62);
  return v13;
}

uint64_t sub_22F213910(uint64_t a1, void *a2, void *a3, int a4)
{
  int Key;
  std::error_code v9;
  std::error_code v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t result;
  unint64_t *v19;
  uint64_t *v20;
  char v21;
  int v22;
  size_t v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  char v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  int v32;
  unsigned int v33;
  char v34;
  std::string::size_type v35;
  char *v36;
  char *v37;
  char *v38;
  std::string::size_type v39;
  void *v40;
  const char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48[2];
  const char *v49;
  __int16 v50;
  unint64_t v51;
  uint64_t v52;
  std::string v53;
  void *__p[2];
  std::string::size_type v55;
  uint64_t v56;
  char v57;
  const char *v58;
  char v59;
  void *v60;
  void *v61;
  __int16 v62;
  uint64_t v63[2];
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 632))
  {
    v50 = 261;
    v48[0] = a2;
    v48[1] = a3;
    llvm::vfs::FileSystem::getBufferForFile();
    if ((v64 & 1) != 0)
    {
      v10.__cat_ = (const std::error_category *)v63[0];
      if (LODWORD(v63[0]))
      {
        *(_QWORD *)&v9.__val_ = v63[1];
        v62 = 1283;
        v58 = "cannot open '";
        v60 = a2;
        v61 = a3;
        v48[0] = &v58;
        v49 = "'";
        v50 = 770;
        *(_QWORD *)&v10.__val_ = v48;
        result = sub_22F43FCAC(a1, v10, v9);
LABEL_28:
        if ((v64 & 1) == 0)
        {
          result = v63[0];
          v63[0] = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        return result;
      }
    }
    else
    {
      std::system_category();
      v10.__cat_ = (const std::error_category *)v63[0];
    }
    llvm::MemoryBuffer::getMemBufferRef((llvm::MemoryBuffer *)v10.__cat_);
    llvm::object::createBinary();
    v11 = v56;
    if ((v57 & 1) == 0)
    {
      v51 = 0;
      v12 = *(_DWORD *)(v56 + 8);
      if (!v12 || v12 == 3 || v12 == 21 && a4)
      {
        v56 = 0;
        v51 = v11 & 0xFFFFFFFFFFFFFFF9;
        v48[0] = (void *)2;
        sub_22E3B4400((uint64_t *)v48);
        if (v51 < 8)
          goto LABEL_25;
        goto LABEL_12;
      }
      if (v12 != 1)
      {
        v62 = 1283;
        v58 = "input '";
        v60 = a2;
        v61 = a3;
        v48[0] = &v58;
        v49 = "' has unknown format";
        v50 = 770;
        llvm::air::ErrorHandler::error();
        goto LABEL_25;
      }
      v21 = *(_BYTE *)(a1 + 351);
      v22 = v21;
      v23 = v21 & 0x7F;
      if (v22 >= 0)
        v24 = v23;
      else
        v24 = *(_QWORD *)(a1 + 336);
      v25 = &v53;
      sub_22E3B8BF4((uint64_t)&v53, v24 + 7);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if (v24)
      {
        if (*(char *)(a1 + 351) >= 0)
          v26 = (const void *)(a1 + 328);
        else
          v26 = *(const void **)(a1 + 328);
        memmove(v25, v26, v24);
      }
      strcpy((char *)v25 + v24, "-apple-");
      v27 = *(_BYTE *)(a1 + 375);
      if (v27 >= 0)
        v28 = (const std::string::value_type *)(a1 + 352);
      else
        v28 = *(const std::string::value_type **)(a1 + 352);
      if (v27 >= 0)
        v29 = v27 & 0x7F;
      else
        v29 = *(_QWORD *)(a1 + 360);
      v30 = std::string::append(&v53, v28, v29);
      v31 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v55 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v62 = 260;
      v58 = (const char *)__p;
      MEMORY[0x23489F1BC](v48, &v58);
      if (SHIBYTE(v55) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      v32 = llvm::MachO::mapToArchitecture();
      if (llvm::Triple::isArch32Bit((llvm::Triple *)v48))
        v33 = 72;
      else
        v33 = 83;
      while (1)
      {
        llvm::MachO::getArchitectureName();
        llvm::object::MachOUniversalBinary::getIRObjectForArch();
        v34 = v59;
        if ((v59 & 1) != 0)
        {
          llvm::object::MachOUniversalBinary::getArchiveForArch();
          v34 = v59;
          if ((v59 & 1) != 0 && ((uint64_t)__p[1] & 1) != 0 && a4)
          {
            llvm::object::MachOUniversalBinary::getMetalLibForArch();
            v34 = v59;
            goto LABEL_63;
          }
        }
        else
        {
          LOBYTE(__p[1]) &= ~1u;
          __p[0] = 0;
        }
        v53.__r_.__value_.__s.__data_[8] &= ~1u;
        v53.__r_.__value_.__r.__words[0] = 0;
LABEL_63:
        if ((v34 & 1) == 0)
        {
          v35 = (std::string::size_type)v58;
          v58 = 0;
LABEL_71:
          v51 = v35 & 0xFFFFFFFFFFFFFFF9;
          v47 = 2;
          sub_22E3B4400(&v47);
          goto LABEL_72;
        }
        if (((uint64_t)__p[1] & 1) == 0)
        {
          v35 = (std::string::size_type)__p[0];
          if (__p[0])
          {
            __p[0] = 0;
            goto LABEL_71;
          }
        }
        if ((v53.__r_.__value_.__s.__data_[8] & 1) == 0)
        {
          v35 = v53.__r_.__value_.__r.__words[0];
          if (v53.__r_.__value_.__r.__words[0])
          {
            v53.__r_.__value_.__r.__words[0] = 0;
            goto LABEL_71;
          }
        }
LABEL_72:
        if ((v59 & 1) != 0)
        {
          v36 = (char *)v58;
          v58 = 0;
        }
        else
        {
          v36 = 0;
        }
        v46 = v36;
        if (((uint64_t)__p[1] & 1) != 0)
        {
          v37 = (char *)__p[0];
          __p[0] = 0;
        }
        else
        {
          v37 = 0;
        }
        v45 = v37;
        if ((v53.__r_.__value_.__s.__data_[8] & 1) != 0)
        {
          v38 = (char *)v53.__r_.__value_.__r.__words[0];
          v53.__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
          v38 = 0;
        }
        v43 = 0;
        v44 = v38;
        sub_22F44020C(&v46, &v45, &v44, &v43);
        if (v43)
          (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
        if (v44)
          (*(void (**)(char *))(*(_QWORD *)v44 + 8))(v44);
        if (v45)
          (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
        if (v46)
          (*(void (**)(char *))(*(_QWORD *)v46 + 8))(v46);
        v39 = v53.__r_.__value_.__r.__words[0];
        v53.__r_.__value_.__r.__words[0] = 0;
        if (v39)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v39 + 8))(v39);
        v40 = __p[0];
        __p[0] = 0;
        if (v40)
          (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
        v41 = v58;
        v58 = 0;
        if (v41)
          (*(void (**)(const char *))(*(_QWORD *)v41 + 8))(v41);
        --v32;
        v42 = v51;
        if (v33 > v32 || v51 >= 8)
        {
          if (SHIBYTE(v49) < 0)
          {
            operator delete(v48[0]);
            v42 = v51;
          }
          if (v42 <= 7)
          {
LABEL_25:
            sub_22E3B4400((uint64_t *)&v51);
            goto LABEL_26;
          }
LABEL_12:
          v13 = *(uint64_t **)(a1 + 552);
          if ((unint64_t)v13 >= *(_QWORD *)(a1 + 560))
          {
            v15 = sub_22E3B94F4((char **)(a1 + 544), v63);
          }
          else
          {
            v14 = v63[0];
            v63[0] = 0;
            *v13 = v14;
            v15 = (char *)(v13 + 1);
          }
          *(_QWORD *)(a1 + 552) = v15;
          v19 = *(unint64_t **)(a1 + 584);
          if ((unint64_t)v19 >= *(_QWORD *)(a1 + 592))
          {
            v20 = sub_22F215978((uint64_t **)(a1 + 576), (uint64_t *)&v51);
          }
          else
          {
            *v19 = v51;
            v20 = (uint64_t *)(v19 + 1);
            v51 = 2;
          }
          *(_QWORD *)(a1 + 584) = v20;
          goto LABEL_25;
        }
      }
    }
    v56 = 0;
    v62 = 1283;
    v58 = "cannot load '";
    v60 = a2;
    v61 = a3;
    v48[0] = &v58;
    v49 = "'";
    v50 = 770;
    v52 = v11;
    llvm::air::ErrorHandler::error();
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v11);
LABEL_26:
    result = v56;
    v56 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    goto LABEL_28;
  }
  v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 8 * Key) + 8);
  v17 = *(uint64_t **)(a1 + 584);
  if ((unint64_t)v17 >= *(_QWORD *)(a1 + 592))
  {
    result = (uint64_t)sub_22F215978((uint64_t **)(a1 + 576), v16);
  }
  else
  {
    *v17 = *v16;
    result = (uint64_t)(v17 + 1);
    *v16 = 2;
  }
  *(_QWORD *)(a1 + 584) = result;
  return result;
}

void sub_22F213FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;
  void **v19;
  __int16 v20;
  const std::error_category *v21;
  const std::error_category *v22;
  uint64_t v23;
  uint64_t v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  std::error_code v33;
  std::error_code v34;

  if (!*(_BYTE *)(a1 + 484))
  {
    v2 = *(_QWORD *)(a1 + 536);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v24[0] = (uint64_t)off_24FCB05E8;
    v24[1] = v2;
    v32 = 0;
    v3 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 608) = 2;
    v24[2] = a1;
    v29 = v3;
    v30 = 0;
    v23 = 2;
    sub_22E3B4400(&v23);
    v31 = *(_BYTE *)(a1 + 320);
    if (*(_DWORD *)(a1 + 452) <= 2u)
      v32 = *(_DWORD *)(a1 + 452);
    v4 = *(_QWORD *)(a1 + 656);
    if (v4)
    {
      v13 = v4 | 4;
    }
    else
    {
      LODWORD(v21) = 0;
      v22 = std::system_category();
      v5 = operator new();
      v6 = *(_BYTE *)(a1 + 295);
      v7 = v6 < 0;
      if (v6 >= 0)
        v8 = a1 + 272;
      else
        v8 = *(_QWORD *)(a1 + 272);
      v9 = v6 & 0x7F;
      if (v7)
        v10 = *(_QWORD *)(a1 + 280);
      else
        v10 = v9;
      v11 = MEMORY[0x23489CDA4](v5, v8, v10, &v21, 0);
      v12 = *(_QWORD *)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v11;
      if (v12)
        sub_22E3B4CBC(a1 + 616, v12);
      if ((_DWORD)v21)
      {
        std::operator+<char>();
        v14 = std::string::append(&v16, "'");
        v15 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v18 = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v20 = 260;
        v19 = __p;
        v33.__cat_ = v21;
        *(_QWORD *)&v34.__val_ = v22;
        *(_QWORD *)&v33.__val_ = &v19;
        sub_22F43FCAC(a1, v33, v34);
        if (SHIBYTE(v18) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        goto LABEL_24;
      }
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 136);
    }
    v30 = v13;
    if (sub_22F444D60(v24) && !*(_QWORD *)(a1 + 656))
      *(_BYTE *)(*(_QWORD *)(a1 + 616) + 24) = 1;
LABEL_24:
    v24[0] = (uint64_t)off_24FCB05E8;
    sub_22E3B4400(&v29);
    v24[0] = (uint64_t)&unk_24FCAEDD8;
    if (SBYTE7(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_22F2141AC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  std::string::size_type v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  size_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  int v35;
  std::string::size_type v36;
  std::string *v37;
  size_t size;
  uint64_t v39;
  uint64_t v40;
  char v41;
  std::string *v42;
  uint64_t v43;
  std::error_code v44;
  std::error_code v45;
  char v46;
  void *__p;
  llvm::StringMapImpl *v48;
  uint64_t v49;
  __int128 v51;
  const char *v52;
  __int16 v53;
  _BYTE v54[32];
  __int16 v55;
  std::string v56;
  __int16 v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  __int128 v61;
  _BYTE v62[128];
  _BYTE v63[24];
  unint64_t v64;
  __int16 v65;
  uint64_t v66;

  v3 = a1;
  v66 = *MEMORY[0x24BDAC8D0];
  v58 = a2;
  v59 = a3;
  v5 = a1[50];
  v4 = a1[51];
  if (v5 == v4)
    goto LABEL_98;
  v48 = (llvm::StringMapImpl *)(a1 + 83);
  v49 = a1[51];
  do
  {
    *(_QWORD *)v63 = &v64;
    *(_OWORD *)&v63[8] = xmmword_22F44E310;
    v60 = v62;
    v61 = xmmword_22F44E310;
    v56.__r_.__value_.__s.__data_[0] = 44;
    v6 = llvm::StringRef::find();
    if (v6 == -1)
    {
      v11 = 0;
      v12 = 0;
      v7 = v58;
      v8 = v59;
      v9 = v59;
    }
    else
    {
      v7 = v58;
      v8 = v59;
      if (v59 >= v6)
        v9 = v6;
      else
        v9 = v59;
      if (v59 >= v6 + 1)
        v10 = v6 + 1;
      else
        v10 = v59;
      v11 = v58 + v10;
      v12 = v59 - v10;
    }
    if (v8 < 4 || *(_DWORD *)(v7 + v8 - 4) != 1919508782)
    {
      if (v12)
      {
        v57 = 260;
        v56.__r_.__value_.__r.__words[0] = v5;
        v55 = 1283;
        *(_QWORD *)v54 = "lib";
        *(_QWORD *)&v54[16] = v7;
        *(_QWORD *)&v54[24] = v9;
        v53 = 257;
        llvm::sys::path::append();
        v13 = v3[71];
        v53 = 773;
        v51 = *(_OWORD *)v63;
        v52 = "_";
        *(_QWORD *)v54 = &v51;
        *(_QWORD *)&v54[16] = v11;
        *(_QWORD *)&v54[24] = v12;
        v55 = 1282;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
        v57 = 770;
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 72))(v13, &v56))
        {
          v55 = 1283;
          *(_QWORD *)v54 = "_";
          *(_QWORD *)&v54[16] = v11;
          *(_QWORD *)&v54[24] = v12;
          v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
          v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
          v57 = 770;
          llvm::Twine::str((llvm::Twine *)&v56);
          if (SHIBYTE(v52) >= 0)
            v14 = &v51;
          else
            v14 = (__int128 *)v51;
          if (SHIBYTE(v52) >= 0)
            v15 = HIBYTE(v52) & 0x7F;
          else
            v15 = *((_QWORD *)&v51 + 1);
          v16 = *(_QWORD *)&v63[8];
          if (*(_QWORD *)&v63[16] < *(_QWORD *)&v63[8] + v15)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v16 = *(_QWORD *)&v63[8];
          }
          v4 = v49;
          if (v15)
          {
            memcpy((void *)(*(_QWORD *)v63 + v16), v14, v15);
            v16 = *(_QWORD *)&v63[8];
          }
          *(_QWORD *)&v63[8] = v16 + v15;
          if ((SHIBYTE(v52) & 0x80000000) == 0)
            goto LABEL_86;
          goto LABEL_48;
        }
        v25 = v3[71];
        v53 = 773;
        v51 = *(_OWORD *)v63;
        v52 = "_";
        *(_QWORD *)v54 = &v51;
        *(_QWORD *)&v54[16] = v11;
        *(_QWORD *)&v54[24] = v12;
        v55 = 1282;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".a";
        v57 = 770;
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 72))(v25, &v56))
        {
          v55 = 1283;
          *(_QWORD *)v54 = "_";
          *(_QWORD *)&v54[16] = v11;
          *(_QWORD *)&v54[24] = v12;
          v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
          v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".a";
          v57 = 770;
          llvm::Twine::str((llvm::Twine *)&v56);
          if (SHIBYTE(v52) >= 0)
            v26 = &v51;
          else
            v26 = (__int128 *)v51;
          if (SHIBYTE(v52) >= 0)
            v27 = HIBYTE(v52) & 0x7F;
          else
            v27 = *((_QWORD *)&v51 + 1);
          v28 = *(_QWORD *)&v63[8];
          v4 = v49;
          if (*(_QWORD *)&v63[16] < *(_QWORD *)&v63[8] + v27)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v28 = *(_QWORD *)&v63[8];
          }
          if (v27)
          {
            memcpy((void *)(*(_QWORD *)v63 + v28), v26, v27);
            v28 = *(_QWORD *)&v63[8];
          }
          *(_QWORD *)&v63[8] = v28 + v27;
          if ((SHIBYTE(v52) & 0x80000000) == 0)
            goto LABEL_86;
LABEL_48:
          v29 = (void *)v51;
LABEL_85:
          operator delete(v29);
          goto LABEL_86;
        }
        v31 = v3[71];
        v57 = 773;
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
        v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
        v4 = v49;
        if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 72))(v31, &v56))
        {
          v40 = v3[71];
          v57 = 773;
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
          v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".a";
          if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v40 + 72))(v40, &v56))
          {
LABEL_70:
            v41 = 1;
            goto LABEL_90;
          }
          v33 = *(_QWORD *)&v63[8];
          if (*(_QWORD *)&v63[16] < (unint64_t)(*(_QWORD *)&v63[8] + 2))
          {
LABEL_69:
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v33 = *(_QWORD *)&v63[8];
          }
LABEL_56:
          *(_WORD *)(*(_QWORD *)v63 + v33) = 24878;
          *(_QWORD *)&v63[8] += 2;
          goto LABEL_86;
        }
        v23 = *(_QWORD *)&v63[8];
        if (*(_QWORD *)&v63[16] >= (unint64_t)(*(_QWORD *)&v63[8] + 9))
          goto LABEL_35;
      }
      else
      {
        v57 = 260;
        v56.__r_.__value_.__r.__words[0] = v5;
        v55 = 1283;
        *(_QWORD *)v54 = "lib";
        *(_QWORD *)&v54[16] = v7;
        *(_QWORD *)&v54[24] = v9;
        v53 = 257;
        llvm::sys::path::append();
        v18 = v3[22];
        v17 = v3[23];
        if (v18 != v17)
        {
          v19 = v3[22];
          while (1)
          {
            v20 = v3[71];
            v53 = 773;
            v51 = *(_OWORD *)v63;
            v52 = "_";
            *(_QWORD *)v54 = &v51;
            *(_QWORD *)&v54[16] = v18;
            v55 = 1026;
            v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
            v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
            v57 = 770;
            if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 72))(v20, &v56))
            {
              std::operator+<char>();
              v34 = std::string::append((std::string *)v54, ".metallib");
              v56 = *v34;
              v34->__r_.__value_.__r.__words[0] = 0;
              v34->__r_.__value_.__l.__size_ = 0;
              v34->__r_.__value_.__r.__words[2] = 0;
              v35 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
              v36 = v56.__r_.__value_.__r.__words[0];
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v37 = &v56;
              else
                v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = *((_BYTE *)&v56.__r_.__value_.__s + 23) & 0x7F;
              else
                size = v56.__r_.__value_.__l.__size_;
              v39 = *(_QWORD *)&v63[8];
              if (*(_QWORD *)&v63[16] < *(_QWORD *)&v63[8] + size)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v39 = *(_QWORD *)&v63[8];
              }
              v3 = a1;
              __p = (void *)v36;
              if (size)
                goto LABEL_80;
              goto LABEL_81;
            }
            v21 = v3[71];
            v53 = 773;
            v51 = *(_OWORD *)v63;
            v52 = "_";
            *(_QWORD *)v54 = &v51;
            *(_QWORD *)&v54[16] = v18;
            v55 = 1026;
            v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
            v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".a";
            v57 = 770;
            if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 72))(v21, &v56))
              break;
            v19 += 24;
            v18 += 24;
            v3 = a1;
            if (v19 == v17)
              goto LABEL_33;
          }
          std::operator+<char>();
          v42 = std::string::append((std::string *)v54, ".a");
          v56 = *v42;
          v42->__r_.__value_.__r.__words[0] = 0;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v35 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
          __p = (void *)v56.__r_.__value_.__r.__words[0];
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v56;
          else
            v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v56.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v56.__r_.__value_.__l.__size_;
          v39 = *(_QWORD *)&v63[8];
          if (*(_QWORD *)&v63[16] < *(_QWORD *)&v63[8] + size)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v39 = *(_QWORD *)&v63[8];
          }
          v3 = a1;
          if (size)
          {
LABEL_80:
            memcpy((void *)(*(_QWORD *)v63 + v39), v37, size);
            v39 = *(_QWORD *)&v63[8];
          }
LABEL_81:
          *(_QWORD *)&v63[8] = v39 + size;
          v4 = v49;
          if (v35 < 0)
            operator delete(__p);
          if ((v54[23] & 0x80000000) == 0)
            goto LABEL_86;
          v29 = *(void **)v54;
          goto LABEL_85;
        }
LABEL_33:
        v22 = v3[71];
        v57 = 773;
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
        v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
        if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 72))(v22, &v56))
        {
          v32 = v3[71];
          v57 = 773;
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
          v56.__r_.__value_.__r.__words[2] = (std::string::size_type)".a";
          v4 = v49;
          if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 72))(v32, &v56))
            goto LABEL_70;
          v33 = *(_QWORD *)&v63[8];
          if (*(_QWORD *)&v63[16] < (unint64_t)(*(_QWORD *)&v63[8] + 2))
            goto LABEL_69;
          goto LABEL_56;
        }
        v23 = *(_QWORD *)&v63[8];
        v4 = v49;
        if (*(_QWORD *)&v63[16] >= (unint64_t)(*(_QWORD *)&v63[8] + 9))
          goto LABEL_35;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v23 = *(_QWORD *)&v63[8];
LABEL_35:
      v24 = *(_QWORD *)v63 + v23;
      *(_QWORD *)v24 = *(_QWORD *)".metallib";
      *(_BYTE *)(v24 + 8) = 98;
      *(_QWORD *)&v63[8] += 9;
      goto LABEL_86;
    }
    v57 = 260;
    v56.__r_.__value_.__r.__words[0] = v5;
    v55 = 261;
    *(_QWORD *)v54 = v7;
    *(_QWORD *)&v54[8] = v8;
    v53 = 257;
    llvm::sys::path::append();
    v30 = v3[71];
    v57 = 261;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 72))(v30, &v56) & 1) == 0)
      goto LABEL_70;
LABEL_86:
    v43 = v3[71];
    v57 = 261;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    v44.__cat_ = (const std::error_category *)(*(uint64_t (**)(uint64_t, std::string *, void **))(*(_QWORD *)v43 + 56))(v43, &v56, &v60);
    if (LODWORD(v44.__cat_))
    {
      *(_QWORD *)&v45.__val_ = *(_QWORD *)&v44.__val_;
      v55 = 1283;
      *(_QWORD *)v54 = "cannot read '";
      *(_OWORD *)&v54[16] = *(_OWORD *)v63;
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
      v56.__r_.__value_.__r.__words[2] = (std::string::size_type)"'";
      v57 = 770;
      *(_QWORD *)&v44.__val_ = &v56;
      sub_22F43FCAC((int)v3, v44, v45);
    }
    else
    {
      sub_22E3B39D4(v48, v60, v61);
      if ((v46 & 1) != 0)
        sub_22F213910((uint64_t)v3, v60, (void *)v61, 1);
    }
    v41 = 0;
LABEL_90:
    if (v60 != v62)
      free(v60);
    if (*(unint64_t **)v63 != &v64)
      free(*(void **)v63);
    if ((v41 & 1) == 0)
      return;
    v5 += 24;
  }
  while (v5 != v4);
  a2 = v58;
  a3 = v59;
LABEL_98:
  v65 = 1283;
  *(_QWORD *)v63 = "library not found for -l";
  *(_QWORD *)&v63[16] = a2;
  v64 = a3;
  llvm::air::ErrorHandler::error();
}

void sub_22F214B64(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  std::string::size_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  int v26;
  void *v27;
  std::string *v28;
  size_t size;
  uint64_t v30;
  uint64_t v31;
  std::error_code v32;
  std::error_code v33;
  char v34;
  llvm::StringMapImpl *v35;
  uint64_t v36;
  __int128 v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[32];
  __int16 v41;
  std::string v42;
  __int16 v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[24];
  unint64_t v50;
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v44 = a2;
  v45 = a3;
  v4 = a1[53];
  v36 = a1[54];
  if (v4 == v36)
    goto LABEL_64;
  v35 = (llvm::StringMapImpl *)(a1 + 83);
  do
  {
    *(_QWORD *)v49 = &v50;
    *(_OWORD *)&v49[8] = xmmword_22F44E310;
    v46 = v48;
    v47 = xmmword_22F44E310;
    v42.__r_.__value_.__s.__data_[0] = 44;
    v5 = llvm::StringRef::find();
    if (v5 == -1)
    {
      v9 = 0;
      v10 = 0;
      v6 = v44;
      v7 = v45;
    }
    else
    {
      v6 = v44;
      if (v45 >= v5)
        v7 = v5;
      else
        v7 = v45;
      if (v45 >= v5 + 1)
        v8 = v5 + 1;
      else
        v8 = v45;
      v9 = v44 + v8;
      v10 = v45 - v8;
    }
    v43 = 260;
    v42.__r_.__value_.__r.__words[0] = v4;
    v41 = 773;
    *(_QWORD *)v40 = v6;
    *(_QWORD *)&v40[8] = v7;
    *(_QWORD *)&v40[16] = ".framework";
    v39 = 261;
    *(_QWORD *)&v37 = v6;
    *((_QWORD *)&v37 + 1) = v7;
    llvm::sys::path::append();
    if (!v10)
    {
      v16 = a1[28];
      v17 = a1[29];
      if (v16 == v17)
      {
LABEL_30:
        v20 = a1[71];
        v43 = 773;
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)v49;
        v42.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
        if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 72))(v20, &v42))
          goto LABEL_31;
LABEL_33:
        v23 = *(_QWORD *)&v49[8];
        if (*(_QWORD *)&v49[16] < (unint64_t)(*(_QWORD *)&v49[8] + 9))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v23 = *(_QWORD *)&v49[8];
        }
        v24 = *(_QWORD *)v49 + v23;
        *(_QWORD *)v24 = *(_QWORD *)".metallib";
        *(_BYTE *)(v24 + 8) = 98;
        *(_QWORD *)&v49[8] += 9;
        goto LABEL_50;
      }
      v18 = a1[28];
      while (1)
      {
        v19 = a1[71];
        v39 = 773;
        v37 = *(_OWORD *)v49;
        v38 = "_";
        *(_QWORD *)v40 = &v37;
        *(_QWORD *)&v40[16] = v16;
        v41 = 1026;
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        v42.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
        v43 = 770;
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 72))(v19, &v42))
          break;
        v18 += 24;
        v16 += 24;
        if (v18 == v17)
          goto LABEL_30;
      }
      std::operator+<char>();
      v25 = std::string::append((std::string *)v40, ".metallib");
      v42 = *v25;
      v25->__r_.__value_.__r.__words[0] = 0;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v26 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
      v27 = (void *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v42;
      else
        v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v42.__r_.__value_.__l.__size_;
      v30 = *(_QWORD *)&v49[8];
      if (*(_QWORD *)&v49[16] < *(_QWORD *)&v49[8] + size)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v30 = *(_QWORD *)&v49[8];
        if (!size)
          goto LABEL_45;
      }
      else if (!size)
      {
LABEL_45:
        *(_QWORD *)&v49[8] = v30 + size;
        if (v26 < 0)
          operator delete(v27);
        if ((v40[23] & 0x80000000) == 0)
          goto LABEL_50;
        v15 = *(void **)v40;
        goto LABEL_49;
      }
      memcpy((void *)(*(_QWORD *)v49 + v30), v28, size);
      v30 = *(_QWORD *)&v49[8];
      goto LABEL_45;
    }
    v11 = a1[71];
    v39 = 773;
    v37 = *(_OWORD *)v49;
    v38 = "_";
    *(_QWORD *)v40 = &v37;
    *(_QWORD *)&v40[16] = v9;
    *(_QWORD *)&v40[24] = v10;
    v41 = 1282;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
    v43 = 770;
    if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 72))(v11, &v42))
    {
      v22 = a1[71];
      v43 = 773;
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)v49;
      v42.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
      if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 72))(v22, &v42))
      {
LABEL_31:
        v21 = 1;
        goto LABEL_54;
      }
      goto LABEL_33;
    }
    v41 = 1283;
    *(_QWORD *)v40 = "_";
    *(_QWORD *)&v40[16] = v9;
    *(_QWORD *)&v40[24] = v10;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)".metallib";
    v43 = 770;
    llvm::Twine::str((llvm::Twine *)&v42);
    if (SHIBYTE(v38) >= 0)
      v12 = &v37;
    else
      v12 = (__int128 *)v37;
    if (SHIBYTE(v38) >= 0)
      v13 = HIBYTE(v38) & 0x7F;
    else
      v13 = *((_QWORD *)&v37 + 1);
    v14 = *(_QWORD *)&v49[8];
    if (*(_QWORD *)&v49[16] < *(_QWORD *)&v49[8] + v13)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v14 = *(_QWORD *)&v49[8];
    }
    if (v13)
    {
      memcpy((void *)(*(_QWORD *)v49 + v14), v12, v13);
      v14 = *(_QWORD *)&v49[8];
    }
    *(_QWORD *)&v49[8] = v14 + v13;
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_50;
    v15 = (void *)v37;
LABEL_49:
    operator delete(v15);
LABEL_50:
    v31 = a1[71];
    v43 = 261;
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)v49;
    v32.__cat_ = (const std::error_category *)(*(uint64_t (**)(uint64_t, std::string *, void **))(*(_QWORD *)v31 + 56))(v31, &v42, &v46);
    if (LODWORD(v32.__cat_))
    {
      *(_QWORD *)&v33.__val_ = *(_QWORD *)&v32.__val_;
      v41 = 1283;
      *(_QWORD *)v40 = "cannot read '";
      *(_OWORD *)&v40[16] = *(_OWORD *)v49;
      v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v42.__r_.__value_.__r.__words[2] = (std::string::size_type)"'";
      v43 = 770;
      *(_QWORD *)&v32.__val_ = &v42;
      sub_22F43FCAC((int)a1, v32, v33);
    }
    else
    {
      sub_22E3B39D4(v35, v46, v47);
      if ((v34 & 1) != 0)
        sub_22F213910((uint64_t)a1, v46, (void *)v47, 1);
    }
    v21 = 0;
LABEL_54:
    if (v46 != v48)
      free(v46);
    if (*(unint64_t **)v49 != &v50)
      free(*(void **)v49);
    if ((v21 & 1) == 0)
      return;
    v4 += 24;
  }
  while (v4 != v36);
  a2 = v44;
  a3 = v45;
LABEL_64:
  v51 = 1283;
  *(_QWORD *)v49 = "framework not found ";
  *(_QWORD *)&v49[16] = a2;
  v50 = a3;
  llvm::air::ErrorHandler::error();
}

void sub_22F215118(llvm::SMDiagnostic *a1)
{
  _BYTE v2[72];
  void *v3;
  __int128 v4;
  _QWORD v5[17];

  v5[16] = *MEMORY[0x24BDAC8D0];
  v3 = v5;
  v4 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v2, (uint64_t)&v3);
  llvm::SMDiagnostic::print(a1, 0, (llvm::raw_ostream *)v2);
  switch(*((_DWORD *)a1 + 12))
  {
    case 0:
      llvm::StringRef::find_last_not_of();
      llvm::air::ErrorHandler::error();
      break;
    case 1:
      llvm::StringRef::find_last_not_of();
      llvm::air::ErrorHandler::warning();
      break;
    case 2:
      llvm::StringRef::find_last_not_of();
      llvm::air::ErrorHandler::remark();
      break;
    case 3:
      llvm::StringRef::find_last_not_of();
      llvm::air::ErrorHandler::note();
      break;
    default:
      break;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v2);
  if (v3 != v5)
    free(v3);
}

void sub_22F215374(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_22F440308(v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22F2153E4(uint64_t a1, uint64_t a2, void *__src, size_t __len, void *a5, size_t a6)
{
  void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &unk_24FCAED80;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x6000000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0x1800000000;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0x4000000000;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0x800000000;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_18:
    abort();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)(a1 + 384) = __len;
    *(_QWORD *)(a1 + 392) = v13 | 0x8000000000000000;
    *(_QWORD *)(a1 + 376) = v11;
    goto LABEL_8;
  }
  v11 = (void *)(a1 + 376);
  *(_BYTE *)(a1 + 399) = __len;
  if (__len)
LABEL_8:
    memmove(v11, __src, __len);
  *((_BYTE *)v11 + __len) = 0;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_18;
  if (a6 >= 0x17)
  {
    v15 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v15 = a6 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 408) = a6;
    *(_QWORD *)(a1 + 416) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 400) = v14;
  }
  else
  {
    v14 = (void *)(a1 + 400);
    *(_BYTE *)(a1 + 423) = a6;
    if (!a6)
      goto LABEL_17;
  }
  memmove(v14, a5, a6);
LABEL_17:
  *((_BYTE *)v14 + a6) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  return a1;
}

uint64_t sub_22F215594(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24FCAED80;
  sub_22E3B4AB8(a1 + 424, *(_QWORD **)(a1 + 432));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  sub_22F257CF8(a1 + 328);
  sub_22E3B3AD0(a1 + 296);
  v2 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v2)
    sub_22E3B4D0C(a1 + 280, v2);
  sub_22F215644(a1 + 232);
  sub_22F440398(a1 + 88);
  *(_QWORD *)a1 = &unk_24FCAEDD8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_22F215644(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22F215690(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void sub_22F215690(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        sub_22E3B4400(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22F215704(uint64_t a1)
{
  void *v2;

  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  sub_22F21575C(a1 + 8);
  sub_22E3B4EF4(a1 + 8);
  return a1;
}

uint64_t sub_22F21575C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t j;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v8; i += 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(a1 + 64);
    v12 = &v11[2 * v10];
    do
    {
      v13 = *v11 + v11[1];
      for (j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v13; j += 32)
      {
        if (*(char *)(j - 9) < 0)
          operator delete(*(void **)(j - 32));
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  return sub_22E6188F4(a1);
}

uint64_t sub_22F215870(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          sub_22F2158E4(v5);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2158E4(llvm *this)
{
  uint64_t v2;
  char *v3;
  char *v4;

  v2 = *(_QWORD *)this;
  v3 = (char *)*((_QWORD *)this + 5);
  if (v3 != (char *)this + 56)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
  return llvm::deallocate_buffer(this, (void *)(v2 + 65));
}

uint64_t sub_22F215938(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(24 * *(unsigned int *)(a1 + 64)));
  sub_22E3BAD50(a1 + 24);
  return sub_22E3BAE4C(a1);
}

uint64_t *sub_22F215978(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_22E3B3F8C();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (uint64_t *)&v10[8 * v4];
  v12 = (uint64_t *)&v10[8 * v9];
  *v11 = *a2;
  v13 = v11 + 1;
  *a2 = 2;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v14 = *--v2;
      *--v11 = v14;
      *v2 = 2;
    }
    while (v2 != v3);
    v2 = *a1;
    v15 = a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v15 != v2)
      v15 = sub_22E3B4400(v15 - 1);
  }
  if (v2)
    operator delete(v2);
  return v13;
}

void sub_22F215A7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  llvm::Triple *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  const char *v26;
  char v27;
  uint64_t v28;
  size_t v29;
  char v30;
  size_t v31;
  char *v32;
  void *__p;
  char v34;
  void *v35;
  char v36;
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  _QWORD v42[2];
  const char *v43;
  __int16 v44;
  _QWORD v45[2];
  _QWORD *v46;
  __int16 v47;
  _QWORD v48[2];
  const char *v49;
  char v50;
  char v51;
  _QWORD v52[2];
  void **v53;
  __int16 v54;
  _QWORD v55[2];
  const char *v56;
  __int16 v57;
  _QWORD v58[2];
  void **p_p;
  __int16 v60;
  char v61[16];
  const char *v62;
  __int16 v63;
  void *v64[2];
  char v65;

  v4 = *a2 + 216;
  v63 = 260;
  *(_QWORD *)v61 = v4;
  v5 = (llvm::Triple *)MEMORY[0x23489F1BC](v64, v61);
  if ((llvm::Triple::isCompatibleWith(v5, (const llvm::Triple *)(a1 + 3)) & 1) != 0)
  {
    v37[0] = llvm::Triple::getAIRVersion((llvm::Triple *)v64);
    v37[1] = v6;
    if (sub_22E3B38EC((_DWORD *)a1 + 18, v37))
    {
      v7 = *a2;
      v8 = *(_BYTE *)(*a2 + 191);
      v9 = v8;
      v10 = v8 & 0x7F;
      if (v9 < 0)
        v10 = *(_QWORD *)(*a2 + 176);
      if (v10)
      {
        v13 = *(_QWORD *)(v7 + 168);
        v11 = v7 + 168;
        v12 = v13;
        v41 = 1283;
        if (v9 < 0)
          v11 = v12;
        v38[0] = " '";
        v39 = v11;
        v40 = v10;
        v42[0] = v38;
        v43 = "'";
        v44 = 770;
        v45[0] = "ignoring module";
        v46 = v42;
        v47 = 515;
        v14 = 2;
      }
      else
      {
        v44 = 257;
        v45[0] = "ignoring module";
        v47 = 259;
        v14 = 3;
      }
      v25 = v10 == 0;
      v26 = (const char *)v45;
      if (v25)
        v26 = "ignoring module";
      v48[0] = v26;
      v49 = ", module AIR version (";
      v50 = v14;
      v51 = 3;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v37);
      v52[0] = v48;
      v53 = &v35;
      v54 = 1026;
      v55[0] = v52;
      v56 = ") is bigger than the one of the target being archived (";
      v57 = 770;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)(a1 + 9));
      v58[0] = v55;
      p_p = &__p;
      v60 = 1026;
      *(_QWORD *)v61 = v58;
      v62 = ")";
      v63 = 770;
      llvm::air::ErrorHandler::warning();
      if (v34 < 0)
        operator delete(__p);
      if (v36 < 0)
        operator delete(v35);
    }
    else
    {
      v27 = *(_BYTE *)(*a2 + 191);
      if (v27 >= 0)
        v28 = *a2 + 168;
      else
        v28 = *(_QWORD *)(*a2 + 168);
      if (v27 >= 0)
        v29 = v27 & 0x7F;
      else
        v29 = *(_QWORD *)(*a2 + 176);
      v30 = sub_22E3B38EC(v37, (_DWORD *)a1 + 18);
      if (v29)
        v31 = v29;
      else
        v31 = 10;
      v61[0] = v30;
      if (v29)
        v32 = (char *)v28;
      else
        v32 = "module.air";
      sub_22F440D10(a1 + 11, v32, v31, v61, a2);
    }
  }
  else
  {
    v15 = *a2;
    v16 = *(_BYTE *)(*a2 + 191);
    v17 = v16;
    v18 = *(_QWORD *)(*a2 + 176);
    v19 = v16 & 0x7F;
    if (v17 >= 0)
      v18 = v19;
    v20 = "ignoring module";
    if (v18)
    {
      v23 = *(_QWORD *)(v15 + 168);
      v21 = v15 + 168;
      v22 = v23;
      v41 = 1283;
      if (v17 < 0)
        v21 = v22;
      v38[0] = " '";
      v39 = v21;
      v40 = v18;
      v42[0] = v38;
      v43 = "'";
      v44 = 770;
      v45[0] = "ignoring module";
      v46 = v42;
      v47 = 515;
      v24 = 2;
    }
    else
    {
      v44 = 257;
      v45[0] = "ignoring module";
      v47 = 259;
      v24 = 3;
    }
    if (v18)
      v20 = (const char *)v45;
    v48[0] = v20;
    v49 = ", module was built for '";
    v50 = v24;
    v51 = 3;
    v52[0] = v48;
    v53 = v64;
    v54 = 1026;
    v55[0] = v52;
    v56 = "' which is not compatible with the target being archived (";
    v57 = 770;
    v58[0] = v55;
    p_p = (void **)(a1 + 3);
    v60 = 1026;
    *(_QWORD *)v61 = v58;
    v62 = ")";
    v63 = 770;
    llvm::air::ErrorHandler::warning();
  }
  if (v65 < 0)
    operator delete(v64[0]);
}

void sub_22F215E24(uint64_t a1, llvm::object::IRObjectFile **a2)
{
  uint64_t TargetTriple;
  uint64_t v5;
  llvm::Triple *v6;
  uint64_t v7;
  llvm::VersionTuple *v8;
  uint64_t FileName;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _BYTE *v16;
  size_t v17;
  size_t v18;
  void *__p;
  char v20;
  void *v21;
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[2];
  const char *v29;
  __int16 v30;
  _QWORD v31[2];
  void **v32;
  __int16 v33;
  _QWORD v34[2];
  const char *v35;
  __int16 v36;
  _QWORD v37[2];
  void **p_p;
  __int16 v39;
  _QWORD v40[2];
  const char *v41;
  __int16 v42;
  void *v43[2];
  char v44;

  TargetTriple = llvm::object::IRObjectFile::getTargetTriple(*a2);
  v42 = 261;
  v40[0] = TargetTriple;
  v40[1] = v5;
  v6 = (llvm::Triple *)MEMORY[0x23489F1BC](v43, v40);
  if ((llvm::Triple::isCompatibleWith(v6, (const llvm::Triple *)(a1 + 24)) & 1) != 0)
  {
    v23[0] = llvm::Triple::getAIRVersion((llvm::Triple *)v43);
    v23[1] = v7;
    v8 = (llvm::VersionTuple *)(a1 + 72);
    if (sub_22E3B38EC((_DWORD *)(a1 + 72), v23))
    {
      FileName = llvm::object::Binary::getFileName(*a2);
      v27 = 1283;
      v24[0] = "ignoring file '";
      v25 = FileName;
      v26 = v10;
      v28[0] = v24;
      v29 = "', file AIR version (";
      v30 = 770;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v23);
      v31[0] = v28;
      v32 = &v21;
      v33 = 1026;
      v34[0] = v31;
      v35 = ") is bigger than the one of the target being archived (";
      v36 = 770;
      llvm::VersionTuple::getAsString(v8);
      v37[0] = v34;
      p_p = &__p;
      v39 = 1026;
      v40[0] = v37;
      v41 = ")";
      v42 = 770;
      llvm::air::ErrorHandler::warning();
      if (v20 < 0)
        operator delete(__p);
      if (v22 < 0)
        operator delete(v21);
    }
    else
    {
      v13 = (uint64_t *)*((_QWORD *)*a2 + 6);
      v14 = (uint64_t *)*((_QWORD *)*a2 + 7);
      if (v13 != v14)
      {
        v15 = (uint64_t *)(a1 + 88);
        do
        {
          llvm::object::Binary::getFileName(*a2);
          v16 = (_BYTE *)llvm::sys::path::filename();
          v18 = v17;
          LOBYTE(v40[0]) = sub_22E3B38EC(v23, v8);
          sub_22F440D10(v15, v16, v18, (char *)v40, v13++);
        }
        while (v13 != v14);
      }
    }
  }
  else
  {
    v11 = llvm::object::Binary::getFileName(*a2);
    v27 = 1283;
    v24[0] = "ignoring file '";
    v25 = v11;
    v26 = v12;
    v28[0] = v24;
    v29 = "', file was built for '";
    v30 = 770;
    v31[0] = v28;
    v32 = v43;
    v33 = 1026;
    v34[0] = v31;
    v35 = "' which is not compatible with the target being archived (";
    v36 = 770;
    v37[0] = v34;
    p_p = (void **)(a1 + 24);
    v39 = 1026;
    v40[0] = v37;
    v41 = ")";
    v42 = 770;
    llvm::air::ErrorHandler::warning();
  }
  if (v44 < 0)
    operator delete(v43[0]);
}

uint64_t sub_22F2160B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  int v5;
  void *v6;
  size_t v7;
  size_t v8;
  char v9;
  int v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  _QWORD v44[2];
  const char *v45;
  __int16 v46;
  const char *v47;
  _QWORD *v48;
  __int16 v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 v52;
  _QWORD v53[3];

  v53[2] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_BYTE *)(a1 + 159);
  v5 = v4;
  if (v4 >= 0)
    v6 = (void *)(a1 + 136);
  else
    v6 = *(void **)(a1 + 136);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_BYTE *)(a1 + 183);
  v10 = v9;
  if (v9 >= 0)
    v11 = (void *)(a1 + 160);
  else
    v11 = *(void **)(a1 + 160);
  v12 = v9 & 0x7F;
  if (v10 >= 0)
    v13 = v12;
  else
    v13 = *(_QWORD *)(a1 + 168);
  sub_22F226394(v2, "", 0, v6, v8, v11, v13);
  v14 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v3;
  if (v14)
  {
    v15 = sub_22E3B45BC(v14);
    MEMORY[0x2348A0E9C](v15, 0x10B2C408BDE5BD4);
  }
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  if (v16 == v17)
    return 1;
  while (1)
  {
    v51 = v53;
    v52 = xmmword_22F44E350;
    if (*(_QWORD *)(v16 + 8))
      sub_22E3B3B4C((uint64_t)&v51, v16);
    v18 = *(unsigned __int8 *)(v16 + 40);
    llvm::Module::materializeAll(*(llvm::Module **)(v16 + 48));
    if (v50)
      break;
    if (v18 && (llvm::air::upgradeAIRModule() & 1) == 0)
    {
      v30 = *(_QWORD *)(v16 + 48);
      v31 = *(_BYTE *)(v30 + 191);
      v32 = v31;
      v33 = v31 & 0x7F;
      if (v32 < 0)
        v33 = *(_QWORD *)(v30 + 176);
      if (v33)
      {
        v36 = *(_QWORD *)(v30 + 168);
        v34 = v30 + 168;
        v35 = v36;
        v43 = 1283;
        if (v32 < 0)
          v34 = v35;
        v40[0] = " in '";
        v41 = v34;
        v42 = v33;
        v44[0] = v40;
        v45 = "'";
        v46 = 770;
        v47 = "cannot upgrade module";
        v48 = v44;
        v37 = 515;
      }
      else
      {
        v46 = 257;
        v47 = "cannot upgrade module";
        v37 = 259;
      }
      v49 = v37;
      llvm::air::ErrorHandler::error();
      goto LABEL_42;
    }
    v19 = *(_QWORD *)(v16 + 48);
    *(_QWORD *)(v16 + 48) = 0;
    v38 = v19;
    llvm::air::Archive::addMember();
    if (v38)
    {
      v20 = MEMORY[0x23489F15C]();
      MEMORY[0x2348A0E9C](v20, 0x10B2C407FF26C1CLL);
    }
    if (v51 != v53)
      free(v51);
    v16 += 56;
    if (v16 == v17)
      return 1;
  }
  v22 = *(_QWORD *)(v16 + 48);
  v23 = *(_BYTE *)(v22 + 191);
  v24 = v23;
  v25 = v23 & 0x7F;
  if (v24 < 0)
    v25 = *(_QWORD *)(v22 + 176);
  if (v25)
  {
    v28 = *(_QWORD *)(v22 + 168);
    v26 = v22 + 168;
    v27 = v28;
    v43 = 1283;
    if (v24 < 0)
      v26 = v27;
    v40[0] = " in '";
    v41 = v26;
    v42 = v25;
    v44[0] = v40;
    v45 = "'";
    v46 = 770;
    v47 = "cannot materialize module";
    v48 = v44;
    v29 = 515;
  }
  else
  {
    v46 = 257;
    v47 = "cannot materialize module";
    v29 = 259;
  }
  v49 = v29;
  v39 = v50;
  v50 = 0;
  llvm::air::ErrorHandler::error();
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
LABEL_42:
  if (v51 != v53)
    free(v51);
  return 0;
}

uint64_t sub_22F21641C(uint64_t a1, llvm::object::Archive *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  llvm::Triple *v13;
  llvm::object::IRObjectFile *v14;
  llvm::object::IRObjectFile *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 v33;
  char *v34;
  llvm::object::Binary *v35;
  uint64_t *v36;
  uint64_t *v37;
  _BYTE *v38;
  size_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t *v46;
  char *v47;
  llvm::object::Binary *v48;
  uint64_t v49;
  char v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  llvm::object::IRObjectFile *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Triple *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD v63[2];
  const char *v64;
  llvm::object::IRObjectFile *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  __int16 v71;
  char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  __int16 v76;
  llvm::object::IRObjectFile *v77;
  char v78[8];
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t FileName;
  uint64_t v85;
  __int16 v86;
  unint64_t v87;
  uint64_t v88;
  char v89[8];
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  llvm::object::IRObjectFile *v96[4];
  __int16 v97;
  uint64_t **v98;
  char v99;
  _QWORD v100[2];
  const char *v101;
  __int16 v102;
  char v103;
  _QWORD v104[4];
  __int16 v105;
  llvm::object::IRObjectFile *v106;
  llvm::object::IRObjectFile *v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v95 = 0;
  sub_22F440D98(a2, (uint64_t)v89);
  if (v95)
  {
    v86 = 1283;
    v82 = "cannot read '";
    FileName = llvm::object::Binary::getFileName(a2);
    v85 = v4;
    v100[0] = &v82;
    v101 = "'";
    v102 = 770;
    v88 = v95;
    v95 = 0;
    llvm::air::ErrorHandler::error();
    v5 = v88;
    if (!v88)
    {
LABEL_4:
      v6 = 0;
      goto LABEL_5;
    }
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    goto LABEL_4;
  }
  sub_22F443530((uint64_t)&v82, (uint64_t)v89);
  v87 = v91;
  sub_22F443530((uint64_t)v78, (uint64_t)&v92);
  v81 = v94;
  if (v87 > 7 || v94 >= 8)
  {
    v11 = &v73;
    v12 = &v75;
    v13 = (llvm::Triple *)(a1 + 24);
    while (1)
    {
      if (FileName == v80)
        goto LABEL_92;
      llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)&v82);
      if ((v108 & 1) != 0)
      {
        v15 = v106;
        v106 = 0;
        if (v15)
        {
          v16 = llvm::object::Binary::getFileName(a2);
          v105 = 1283;
          v104[0] = "cannot read '";
          v104[2] = v16;
          v104[3] = v17;
          v100[0] = v104;
          v101 = "'";
          v102 = 770;
          v77 = v15;
          llvm::air::ErrorHandler::error();
          if (v77)
            (*(void (**)(llvm::object::IRObjectFile *))(*(_QWORD *)v77 + 8))(v77);
          v18 = 1;
          goto LABEL_86;
        }
        v14 = 0;
      }
      else
      {
        v14 = v106;
      }
      if (v107 == (llvm::object::IRObjectFile *)7)
        break;
      if (v107 == (llvm::object::IRObjectFile *)10)
      {
        v19 = *(_QWORD *)v14;
        v20 = *((unsigned __int16 *)v14 + 4);
        v21 = v19 == 0x494C444D432E5F5FLL;
        v22 = 17742;
        goto LABEL_30;
      }
LABEL_34:
      llvm::object::Archive::Child::getMemoryBufferRef((llvm::object::Archive::Child *)&v82);
      if ((v105 & 1) != 0)
      {
        v25 = v104[0];
        v104[0] = 0;
        if (v25)
        {
          v66 = 1283;
          v63[0] = "cannot read '";
          v64 = (const char *)v106;
          v65 = v107;
          v67 = (char *)v63;
          v69 = "(";
          v71 = 770;
          v26 = (char *)llvm::object::Binary::getFileName(a2);
          v28 = v71;
          if (v71 == 1)
          {
            v72 = v26;
            v50 = 1;
            v28 = 5;
            v51 = v11;
            v29 = 5;
          }
          else
          {
            if (!(_BYTE)v71)
            {
              v29 = 0;
              v76 = 256;
              v30 = 1;
LABEL_82:
              LOBYTE(v102) = v29;
              HIBYTE(v102) = v30;
              llvm::air::ErrorHandler::error();
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              v18 = 1;
              goto LABEL_83;
            }
            v52 = v67;
            v29 = 2;
            if (HIBYTE(v71) != 1)
            {
              v28 = 2;
              v52 = (char *)&v67;
            }
            v72 = v52;
            v73 = v68;
            v74 = v26;
            v26 = (char *)&v72;
            v50 = 5;
            v51 = v12;
          }
          *v51 = v27;
          LOBYTE(v76) = v28;
          HIBYTE(v76) = v50;
          v100[0] = v26;
          v100[1] = v27;
          v30 = 3;
          v101 = ")'";
          goto LABEL_82;
        }
      }
      operator new();
      MEMORY[0x23489F4A4]();
      v60 = v12;
      v61 = v11;
      v31 = llvm::MachO::mapToArchitecture();
      v59 = v13;
      if (llvm::Triple::isArch32Bit(v13))
        v32 = 72;
      else
        v32 = 83;
      v33 = v31;
      while (1)
      {
        llvm::MachO::getArchitectureName();
        llvm::object::MachOUniversalBinary::getObjectForArch();
        if ((v103 & 1) != 0)
        {
          v34 = (char *)v100[0];
          v100[0] = 0;
          if (v34)
          {
            v67 = v34;
            sub_22E6C5940(&v67, &v72);
            if (v67)
              (*(void (**)(char *))(*(_QWORD *)v67 + 8))(v67);
            --v33;
            v18 = 5;
            goto LABEL_68;
          }
        }
        llvm::object::MachOUniversalBinary::ObjectForArch::getAsIRObject((llvm::object::MachOUniversalBinary::ObjectForArch *)v100, *(llvm::LLVMContext **)(a1 + 8));
        v35 = (llvm::object::Binary *)v98;
        if ((v99 & 1) != 0)
        {
          v98 = 0;
          v97 = 1283;
          v96[0] = (llvm::object::IRObjectFile *)"cannot read '";
          v96[2] = v106;
          v96[3] = v107;
          v63[0] = v96;
          v64 = "(";
          v66 = 770;
          v40 = (char *)llvm::object::Binary::getFileName(a2);
          v42 = v66;
          if (v66 == 1)
          {
            v67 = v40;
            v45 = 1;
            v42 = 5;
            v46 = &v68;
            v43 = 5;
          }
          else
          {
            if (!(_BYTE)v66)
            {
              v43 = 0;
              v71 = 256;
              v44 = 1;
LABEL_63:
              LOBYTE(v76) = v43;
              HIBYTE(v76) = v44;
              llvm::air::ErrorHandler::error();
              if (v35)
                (*(void (**)(llvm::object::Binary *))(*(_QWORD *)v35 + 8))(v35);
              v18 = 1;
              goto LABEL_66;
            }
            v47 = (char *)v63[0];
            v43 = 2;
            if (HIBYTE(v66) != 1)
            {
              v42 = 2;
              v47 = (char *)v63;
            }
            v67 = v47;
            v68 = v63[1];
            v69 = v40;
            v40 = (char *)&v67;
            v45 = 5;
            v46 = &v70;
          }
          *v46 = v41;
          LOBYTE(v71) = v42;
          HIBYTE(v71) = v45;
          v72 = v40;
          v73 = v41;
          v44 = 3;
          v74 = ")'";
          goto LABEL_63;
        }
        v36 = v98[6];
        v37 = v98[7];
        if (v36 == v37)
        {
          v18 = 4;
        }
        else
        {
          do
          {
            llvm::object::Binary::getFileName((llvm::object::Binary *)v98);
            v38 = (_BYTE *)llvm::sys::path::filename();
            LOBYTE(v72) = v31 > v33;
            sub_22F440D10((uint64_t *)(a1 + 88), v38, v39, (char *)&v72, v36++);
            v18 = 4;
          }
          while (v36 != v37);
        }
LABEL_66:
        v48 = (llvm::object::Binary *)v98;
        v98 = 0;
        if (v48)
          (*(void (**)(llvm::object::Binary *))(*(_QWORD *)v48 + 8))(v48);
LABEL_68:
        if ((v103 & 1) != 0)
        {
          v49 = v100[0];
          v100[0] = 0;
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        }
        if (v18 != 5)
          break;
        if (v32 > v33)
          goto LABEL_75;
      }
      if (v18 != 4)
        goto LABEL_76;
LABEL_75:
      v18 = 3;
LABEL_76:
      v12 = v60;
      v11 = v61;
      v13 = v59;
LABEL_83:
      if ((v105 & 1) != 0)
      {
        v53 = v104[0];
        v104[0] = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      }
LABEL_86:
      if ((v108 & 1) != 0)
      {
        v54 = v106;
        v106 = 0;
        if (v54)
          (*(void (**)(llvm::object::IRObjectFile *))(*(_QWORD *)v54 + 8))(v54);
      }
      if (v18 != 3)
        goto LABEL_93;
      sub_22F440E14((uint64_t)&v82);
      if (v87 <= 7 && v81 <= 7)
        goto LABEL_92;
    }
    v23 = *(_DWORD *)v14;
    v20 = *(_DWORD *)((char *)v14 + 3);
    v21 = v23 == 1462656863;
    v22 = 1380533335;
LABEL_30:
    if (v21 && v20 == v22)
    {
      v18 = 3;
      goto LABEL_86;
    }
    goto LABEL_34;
  }
LABEL_92:
  v18 = 2;
LABEL_93:
  v55 = v79;
  v79 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
  v56 = v83;
  v83 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
  if (v18 != 2)
    goto LABEL_4;
  if (v95)
  {
    v57 = llvm::object::Binary::getFileName(a2);
    v86 = 1283;
    v82 = "cannot read '";
    FileName = v57;
    v85 = v58;
    v100[0] = &v82;
    v101 = "'";
    v102 = 770;
    v62 = v95;
    v95 = 0;
    llvm::air::ErrorHandler::error();
    v5 = v62;
    if (!v62)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = 1;
LABEL_5:
  v7 = v93;
  v93 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = v90;
  v90 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  return v6;
}

void sub_22F216E74(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  llvm::Triple *v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  const char *v27;
  void *__p;
  char v29;
  void *v30;
  char v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint64_t *v34;
  uint64_t v35;
  __int16 v36;
  _QWORD v37[2];
  const char *v38;
  __int16 v39;
  _QWORD v40[2];
  _QWORD *v41;
  __int16 v42;
  _QWORD v43[2];
  const char *v44;
  char v45;
  char v46;
  _QWORD v47[2];
  void **v48;
  __int16 v49;
  _QWORD v50[2];
  const char *v51;
  __int16 v52;
  _QWORD v53[2];
  void **p_p;
  __int16 v55;
  _QWORD *v56;
  unint64_t v57;
  const char *v58;
  __int16 v59;
  void *v60[2];
  char v61;

  v4 = (uint64_t)(*a2 + 27);
  v59 = 260;
  v56 = (_QWORD *)v4;
  v5 = (llvm::Triple *)MEMORY[0x23489F1BC](v60, &v56);
  if ((llvm::Triple::isCompatibleWith(v5, (const llvm::Triple *)(a1 + 3)) & 1) != 0)
  {
    v32[0] = llvm::Triple::getAIRVersion((llvm::Triple *)v60);
    v32[1] = v6;
    if (sub_22E3B38EC((_DWORD *)a1 + 18, v32))
    {
      v7 = *a2;
      v8 = *((_BYTE *)*a2 + 191);
      v9 = v8;
      v10 = v8 & 0x7F;
      if (v9 < 0)
        v10 = (*a2)[22];
      if (v10)
      {
        v13 = v7[21];
        v11 = v7 + 21;
        v12 = (uint64_t *)v13;
        v36 = 1283;
        if (v9 < 0)
          v11 = v12;
        v33[0] = " '";
        v34 = v11;
        v35 = v10;
        v37[0] = v33;
        v38 = "'";
        v39 = 770;
        v40[0] = "ignoring module";
        v41 = v37;
        v42 = 515;
        v14 = 2;
      }
      else
      {
        v39 = 257;
        v40[0] = "ignoring module";
        v42 = 259;
        v14 = 3;
      }
      v26 = v10 == 0;
      v27 = (const char *)v40;
      if (v26)
        v27 = "ignoring module";
      v43[0] = v27;
      v44 = ", module AIR version (";
      v45 = v14;
      v46 = 3;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v32);
      v47[0] = v43;
      v48 = &v30;
      v49 = 1026;
      v50[0] = v47;
      v51 = ") is bigger than the one of the target being linked (";
      v52 = 770;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)(a1 + 9));
      v53[0] = v50;
      p_p = &__p;
      v55 = 1026;
      v56 = v53;
      v58 = ")";
      v59 = 770;
      llvm::air::ErrorHandler::warning();
      if (v29 < 0)
        operator delete(__p);
      if (v31 < 0)
        operator delete(v30);
    }
    else if ((*(unsigned int (**)(_QWORD *, uint64_t *))(*a1 + 24))(a1, *a2))
    {
      sub_22F4449B8((uint64_t)(a1 + 11), *a2);
      v25 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF9 | 2;
      *a2 = 0;
      v56 = (_QWORD *)v25;
      v57 = v25;
      sub_22F44137C(a1 + 29, (uint64_t *)&v56);
      sub_22E3B4400((uint64_t *)&v57);
    }
  }
  else
  {
    v15 = *a2;
    v16 = *((_BYTE *)*a2 + 191);
    v17 = v16;
    v18 = (*a2)[22];
    v19 = v16 & 0x7F;
    if (v17 >= 0)
      v18 = v19;
    v20 = "ignoring module";
    if (v18)
    {
      v23 = v15[21];
      v21 = v15 + 21;
      v22 = (uint64_t *)v23;
      v36 = 1283;
      if (v17 < 0)
        v21 = v22;
      v33[0] = " '";
      v34 = v21;
      v35 = v18;
      v37[0] = v33;
      v38 = "'";
      v39 = 770;
      v40[0] = "ignoring module";
      v41 = v37;
      v42 = 515;
      v24 = 2;
    }
    else
    {
      v39 = 257;
      v40[0] = "ignoring module";
      v42 = 259;
      v24 = 3;
    }
    if (v18)
      v20 = (const char *)v40;
    v43[0] = v20;
    v44 = ", module was built for '";
    v45 = v24;
    v46 = 3;
    v47[0] = v43;
    v48 = v60;
    v49 = 1026;
    v50[0] = v47;
    v51 = "' which is not compatible with the target being linked (";
    v52 = 770;
    v53[0] = v50;
    p_p = (void **)(a1 + 3);
    v55 = 1026;
    v56 = v53;
    v58 = ")";
    v59 = 770;
    llvm::air::ErrorHandler::warning();
  }
  if (v61 < 0)
    operator delete(v60[0]);
}

void sub_22F217210(_QWORD *a1, llvm::object::IRObjectFile **a2)
{
  uint64_t TargetTriple;
  uint64_t v5;
  llvm::Triple *v6;
  uint64_t v7;
  uint64_t FileName;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *__p;
  char v14;
  void *v15;
  char v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[2];
  const char *v23;
  __int16 v24;
  _QWORD v25[2];
  void **v26;
  __int16 v27;
  _QWORD v28[2];
  const char *v29;
  __int16 v30;
  _QWORD v31[2];
  void **p_p;
  __int16 v33;
  _QWORD *v34;
  unint64_t v35;
  const char *v36;
  __int16 v37;
  void *v38[2];
  char v39;

  TargetTriple = llvm::object::IRObjectFile::getTargetTriple(*a2);
  v37 = 261;
  v34 = (_QWORD *)TargetTriple;
  v35 = v5;
  v6 = (llvm::Triple *)MEMORY[0x23489F1BC](v38, &v34);
  if ((llvm::Triple::isCompatibleWith(v6, (const llvm::Triple *)(a1 + 3)) & 1) != 0)
  {
    v17[0] = llvm::Triple::getAIRVersion((llvm::Triple *)v38);
    v17[1] = v7;
    if (sub_22E3B38EC((_DWORD *)a1 + 18, v17))
    {
      FileName = llvm::object::Binary::getFileName(*a2);
      v21 = 1283;
      v18[0] = "ignoring file '";
      v19 = FileName;
      v20 = v9;
      v22[0] = v18;
      v23 = "', file AIR version (";
      v24 = 770;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v17);
      v25[0] = v22;
      v26 = &v15;
      v27 = 1026;
      v28[0] = v25;
      v29 = ") is bigger than the one of the target being linked (";
      v30 = 770;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)(a1 + 9));
      v31[0] = v28;
      p_p = &__p;
      v33 = 1026;
      v34 = v31;
      v36 = ")";
      v37 = 770;
      llvm::air::ErrorHandler::warning();
      if (v14 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    else if ((*(unsigned int (**)(_QWORD *, llvm::object::IRObjectFile *))(*a1 + 32))(a1, *a2))
    {
      sub_22F22B6F8((uint64_t)(a1 + 11), (uint64_t)*a2);
      v12 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF9;
      *a2 = 0;
      v34 = (_QWORD *)v12;
      v35 = v12;
      sub_22F44137C(a1 + 29, (uint64_t *)&v34);
      sub_22E3B4400((uint64_t *)&v35);
    }
  }
  else
  {
    v10 = llvm::object::Binary::getFileName(*a2);
    v21 = 1283;
    v18[0] = "ignoring file '";
    v19 = v10;
    v20 = v11;
    v22[0] = v18;
    v23 = "', file was built for '";
    v24 = 770;
    v25[0] = v22;
    v26 = v38;
    v27 = 1026;
    v28[0] = v25;
    v29 = "' which is not compatible with the target being linked (";
    v30 = 770;
    v31[0] = v28;
    p_p = (void **)(a1 + 3);
    v33 = 1026;
    v34 = v31;
    v36 = ")";
    v37 = 770;
    llvm::air::ErrorHandler::warning();
  }
  if (v39 < 0)
    operator delete(v38[0]);
}

void sub_22F217488(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  BOOL v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  std::string v31;
  _QWORD v32[2];
  std::string v33;
  std::string v34;
  std::string v35;
  __int128 v36;
  std::string::size_type v37;
  __int128 *v38;
  unint64_t v39[3];
  __int16 v40;
  __int128 __dst;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v4 = *a2;
  if (*(char *)(*a2 + 63) < 0)
  {
    sub_22E3BB2B4(&__dst, *(void **)(v4 + 40), *(_QWORD *)(v4 + 48));
  }
  else
  {
    __dst = *(_OWORD *)(v4 + 40);
    v42 = *(_QWORD *)(v4 + 56);
  }
  v43 = *(_OWORD *)(v4 + 64);
  v44 = *(_QWORD *)(v4 + 80);
  if ((llvm::Triple::isCompatibleWith((llvm::Triple *)&__dst, (const llvm::Triple *)(a1 + 24)) & 1) != 0)
  {
    v32[0] = llvm::Triple::getAIRVersion((llvm::Triple *)&__dst);
    v32[1] = v5;
    if (sub_22E3B38EC((_DWORD *)(a1 + 72), v32))
    {
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v32);
      v6 = std::string::insert(&v31, 0, "ignoring metallib, metallib AIR version (");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      v8 = std::string::append(&v33, ") is bigger than the one of the target being linked (");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)(a1 + 72));
      if (v30 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if (v30 >= 0)
        v11 = v30 & 0x7F;
      else
        v11 = (std::string::size_type)__p[1];
      v12 = std::string::append(&v34, (const std::string::value_type *)v10, v11);
      v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v35, ")");
      v15 = v14->__r_.__value_.__r.__words[2];
      v36 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v37 = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v40 = 260;
      v38 = &v36;
      llvm::air::ErrorHandler::warning();
      if (SHIBYTE(v37) < 0)
        operator delete((void *)v36);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (v30 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        v16 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_38:
        operator delete(v16);
      }
    }
    else if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, *a2))
    {
      v38 = (__int128 *)(*a2 & 0xFFFFFFFFFFFFFFF9 | 4);
      sub_22F21B774((_QWORD *)(a1 + 328), &v38);
      v28 = *a2 & 0xFFFFFFFFFFFFFFF9 | 4;
      *a2 = 0;
      v38 = (__int128 *)v28;
      v39[0] = v28;
      sub_22F44137C((_QWORD *)(a1 + 232), (uint64_t *)&v38);
      sub_22E3B4400((uint64_t *)v39);
    }
  }
  else
  {
    std::operator+<char>();
    v17 = std::string::append(&v33, "' which is not compatible with the target being linked (");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = *(_BYTE *)(a1 + 47);
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = (const std::string::value_type *)(a1 + 24);
    else
      v21 = *(const std::string::value_type **)(a1 + 24);
    v22 = v19 & 0x7F;
    if (v20)
      v23 = *(_QWORD *)(a1 + 32);
    else
      v23 = v22;
    v24 = std::string::append(&v34, v21, v23);
    v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v35, ")");
    v27 = v26->__r_.__value_.__r.__words[2];
    v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v37 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v40 = 260;
    v38 = &v36;
    llvm::air::ErrorHandler::warning();
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v33.__r_.__value_.__r.__words[0];
      goto LABEL_38;
    }
  }
  if (SHIBYTE(v42) < 0)
    operator delete((void *)__dst);
}

void sub_22F2177FC(uint64_t a1, llvm::object::Binary **a2)
{
  llvm::StringMapImpl *v4;
  int Key;
  uint64_t v6;
  uint64_t FileName;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  unint64_t v13;
  void *__p;
  char v15;
  void *v16;
  char v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  _QWORD v23[2];
  const char *v24;
  __int16 v25;
  _QWORD v26[2];
  void **v27;
  __int16 v28;
  _QWORD v29[2];
  const char *v30;
  __int16 v31;
  _QWORD v32[2];
  void **p_p;
  __int16 v34;
  _QWORD *v35;
  unint64_t v36;
  const char *v37;
  __int16 v38;
  void *v39[2];
  char v40;

  v4 = (llvm::StringMapImpl *)(a1 + 296);
  llvm::object::Binary::getFileName(*a2);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 304))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 432))(v39);
    if ((llvm::Triple::isCompatibleWith((llvm::Triple *)v39, (const llvm::Triple *)(a1 + 24)) & 1) != 0)
    {
      v18[0] = llvm::Triple::getAIRVersion((llvm::Triple *)v39);
      v18[1] = v6;
      if (sub_22E3B38EC((_DWORD *)(a1 + 72), v18))
      {
        FileName = llvm::object::Binary::getFileName(*a2);
        v22 = 1283;
        v19[0] = "ignoring file '";
        v20 = FileName;
        v21 = v8;
        v23[0] = v19;
        v24 = "', file AIR version (";
        v25 = 770;
        llvm::VersionTuple::getAsString((llvm::VersionTuple *)v18);
        v26[0] = v23;
        v27 = &v16;
        v28 = 1026;
        v29[0] = v26;
        v30 = ") is bigger than the one of the target being linked (";
        v31 = 770;
        llvm::VersionTuple::getAsString((llvm::VersionTuple *)(a1 + 72));
        v32[0] = v29;
        p_p = &__p;
        v34 = 1026;
        v35 = v32;
        v37 = ")";
        v38 = 770;
        llvm::air::ErrorHandler::warning();
        if (v15 < 0)
          operator delete(__p);
        if (v17 < 0)
          operator delete(v16);
      }
      else if ((*(unsigned int (**)(uint64_t, llvm::object::Binary *))(*(_QWORD *)a1 + 64))(a1, *a2))
      {
        v11 = (const void *)llvm::object::Binary::getFileName(*a2);
        sub_22E3B39D4(v4, v11, v12);
        v35 = (_QWORD *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF9);
        sub_22F21B774((_QWORD *)(a1 + 328), &v35);
        v13 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF9;
        *a2 = 0;
        v35 = (_QWORD *)v13;
        v36 = v13;
        sub_22F44137C((_QWORD *)(a1 + 232), (uint64_t *)&v35);
        sub_22E3B4400((uint64_t *)&v36);
      }
    }
    else
    {
      v9 = llvm::object::Binary::getFileName(*a2);
      v22 = 1283;
      v19[0] = "ignoring file '";
      v20 = v9;
      v21 = v10;
      v23[0] = v19;
      v24 = "', file was built for '";
      v25 = 770;
      v26[0] = v23;
      v27 = v39;
      v28 = 1026;
      v29[0] = v26;
      v30 = "' which is not compatible with the target being linked (";
      v31 = 770;
      v32[0] = v29;
      p_p = (void **)(a1 + 24);
      v34 = 1026;
      v35 = v32;
      v37 = ")";
      v38 = 770;
      llvm::air::ErrorHandler::warning();
    }
    if (v40 < 0)
      operator delete(v39[0]);
  }
}

uint64_t sub_22F217AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void **v15;
  int v16;
  void **v17;
  void *v18;
  int Key;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t FileName;
  uint64_t v27;
  char v28;
  llvm::air::MetalFunction **v29;
  llvm::air::MetalFunction **v30;
  llvm::air::MetalFunction **v31;
  int v32;
  BOOL v33;
  llvm::air::MetalFunction **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Sym;
  uint64_t *v39;
  llvm::Triple *v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::object::IRObjectFile *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  llvm::air::MetalFunction **v55;
  llvm::air::MetalFunction **v56;
  void **v57;
  uint64_t *v58;
  llvm::air::MetalFunction **v59;
  uint64_t TargetTriple;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD **v65;
  void **v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  llvm **v70;
  size_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  llvm **v84;
  size_t v85;
  int v86;
  uint64_t result;
  uint64_t **v88;
  _QWORD *v89;
  uint64_t v90;
  llvm::StringMapImpl *v91;
  _DWORD *v92;
  void **v93;
  _QWORD *v94;
  int v95;
  void **v96;
  llvm::Triple *v97;
  int v99;
  _QWORD *v100;
  void *v101;
  size_t v102;
  void *__p[2];
  const char *v104;
  uint64_t v105;
  __int16 v106;
  llvm::object::IRObjectFile *v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[2];
  _QWORD **v111;
  uint64_t v112;
  __int16 v113;
  _QWORD *v114;
  unint64_t v115;
  const char *v116;
  __int16 v117;
  _QWORD **AIRVersion;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int16 v122;
  void *__base;
  uint64_t v124;
  _BYTE v125[256];
  _QWORD v126[4];
  _QWORD v127[6];
  _QWORD v128[2];
  uint64_t v129;
  char v130;
  _QWORD **v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int16 v136;
  void **v137;
  size_t v138;
  __int128 v139;
  __int16 v140;
  char v141;
  char v142;
  uint64_t v143;

  v1 = a1;
  v143 = *MEMORY[0x24BDAC8D0];
  v91 = (llvm::StringMapImpl *)(a1 + 136);
  v90 = a1 + 88;
  v97 = (llvm::Triple *)(a1 + 24);
  v92 = (_DWORD *)(a1 + 72);
  v89 = (_QWORD *)(a1 + 232);
  v88 = (uint64_t **)(a1 + 432);
  v94 = (_QWORD *)(a1 + 104);
  do
  {
    v126[1] = 0;
    v126[0] = 0;
    v126[2] = v127;
    v126[3] = 0x400000000;
    v127[5] = 0;
    v128[0] = 0;
    v127[4] = v128;
    v128[1] = 1;
    __base = v125;
    v124 = 0x1000000000;
    if (*(_DWORD *)(v1 + 116) >= 0x11u)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(unsigned int *)(v1 + 112);
    if ((_DWORD)v2)
    {
      for (i = *(_QWORD **)(v1 + 104); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(_QWORD **)(v1 + 104);
    }
    v5 = *(_QWORD *)(v1 + 104) + 8 * v2;
    if (i == (_QWORD *)v5)
    {
      v11 = v124;
    }
    else
    {
      do
      {
        v6 = llvm::StringSaver::save();
        v8 = v7;
        v9 = v124;
        if (v124 >= (unint64_t)HIDWORD(v124))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v124;
        }
        v10 = (uint64_t *)((char *)__base + 16 * v9);
        *v10 = v6;
        v10[1] = v8;
        v11 = v124 + 1;
        LODWORD(v124) = v124 + 1;
        do
        {
          v13 = i[1];
          ++i;
          v12 = v13;
          if (v13)
            v14 = v12 == -8;
          else
            v14 = 1;
        }
        while (v14);
      }
      while (i != (_QWORD *)v5);
    }
    v15 = (void **)__base;
    if (v11 >= 2)
    {
      qsort(__base, v11, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F2BB1DC);
      v15 = (void **)__base;
      v11 = v124;
    }
    v16 = 0;
    if (v11)
    {
      v17 = &v15[2 * v11];
      v93 = v17;
      while (1)
      {
        v18 = *v15;
        v102 = (size_t)v15[1];
        Key = llvm::StringMapImpl::FindKey();
        if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v1 + 112))
        {
          v95 = v16;
          v96 = v15;
          v21 = *(_QWORD **)(v1 + 352);
          v20 = *(_QWORD **)(v1 + 360);
          if (v21 != v20)
          {
            v100 = *(_QWORD **)(v1 + 360);
            v101 = v18;
            while (1)
            {
              v22 = *v21 & 0xFFFFFFFFFFFFFFF8;
              if (*v21 < 8uLL || (*v21 & 6) != 4)
                break;
              if (*(_DWORD *)v22 != 2)
              {
                Sym = llvm::air::Archive::findSym();
                if (!Sym)
                  goto LABEL_146;
                v39 = (uint64_t *)Sym;
                v106 = 260;
                __p[0] = (void *)(Sym + 216);
                v40 = (llvm::Triple *)MEMORY[0x23489F1BC](&v137, __p);
                if (llvm::Triple::isCompatibleWith(v40, v97)
                  && (__p[0] = (void *)llvm::Triple::getAIRVersion((llvm::Triple *)&v137),
                      __p[1] = v41,
                      (sub_22E3B38EC(v92, __p) & 1) == 0)
                  && (*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v39))
                {
                  sub_22F4449B8(v90, v39);
                  v42 = 1;
                }
                else
                {
                  v42 = 0;
                }
                if (SBYTE7(v139) < 0)
                  operator delete(v137);
                goto LABEL_145;
              }
              v29 = *(llvm::air::MetalFunction ***)(v22 + 192);
              v31 = *(llvm::air::MetalFunction ***)(v22 + 208);
              v30 = *(llvm::air::MetalFunction ***)(v22 + 216);
              v32 = *(_DWORD *)(v22 + 32);
              v33 = v32 != 4 || *(_QWORD *)(v22 + 184) == (_QWORD)v29;
              v34 = *(llvm::air::MetalFunction ***)(v22 + 192);
              if (v33)
                goto LABEL_88;
              v34 = *(llvm::air::MetalFunction ***)(v22 + 184);
              while (1)
              {
                llvm::air::MetalFunction::getKind(*v34);
                if ((v138 & 1) != 0)
                  break;
                if ((_DWORD)v137 == 73)
                  goto LABEL_88;
                if (++v34 == v29)
                {
                  v34 = v29;
                  goto LABEL_88;
                }
              }
              v54 = v137;
              v55 = v29;
              v56 = v30;
              if (!v137)
              {
LABEL_88:
                v54 = 0;
                if (v32 == 4)
                  v56 = v31;
                else
                  v56 = v30;
                v55 = v34;
              }
              if (v55 == v29 && v56 == v30)
              {
                v56 = v30;
                v55 = v29;
                v1 = a1;
                if (v54)
                  goto LABEL_164;
              }
              else
              {
                v57 = v54;
                while (1)
                {
                  v58 = (uint64_t *)(v55 == v29 ? v56 : v55);
                  if (sub_22F442B28(v101, v102, *v58))
                    break;
                  if (v55 == v29)
                  {
                    ++v56;
                    v55 = v29;
                  }
                  else
                  {
                    while (1)
                    {
                      if (++v55 == v29)
                      {
                        v55 = v29;
                        goto LABEL_109;
                      }
                      llvm::air::MetalFunction::getKind(*v55);
                      if ((v138 & 1) != 0)
                        break;
                      if ((_DWORD)v137 == 73)
                        goto LABEL_109;
                    }
                    v54 = v137;
                    v57 = v137;
LABEL_109:
                    if (v57)
                    {
                      v55 = v29;
                      v56 = v30;
                    }
                    else
                    {
                      v54 = 0;
                      v57 = 0;
                    }
                  }
                  if (v55 == v29 && v56 == v30)
                  {
                    v56 = v30;
                    v55 = v29;
                    break;
                  }
                }
                v1 = a1;
                if (v54)
                {
LABEL_164:
                  v137 = (void **)"cannot read metallib";
                  v140 = 259;
                  __p[0] = v54;
                  llvm::air::ErrorHandler::error();
                  if (__p[0])
                    (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
                  goto LABEL_166;
                }
              }
              if (v55 == v29 && v56 == v30)
              {
                v20 = v100;
              }
              else
              {
                if (v55 == v29)
                  v59 = v56;
                else
                  v59 = v55;
                v20 = v100;
                if (*v59)
                {
                  v82 = llvm::StringMapImpl::FindKey();
                  if (v82 == -1)
                    v83 = *(unsigned int *)(v1 + 112);
                  else
                    v83 = v82;
                  v84 = (llvm **)(*v94 + 8 * v83);
                  v85 = *(_QWORD *)*v84;
                  v86 = *((_DWORD *)*v84 + 2);
                  v137 = (void **)((char *)*v84 + 96);
                  v138 = v85;
                  LODWORD(v139) = v86;
                  *((_QWORD *)&v139 + 1) = v22 | 4;
                  sub_22F442A30(v91, v137, v85, &v139);
                  sub_22F226544((uint64_t)v94, v84);
LABEL_174:
                  v99 = 1;
                  goto LABEL_167;
                }
              }
LABEL_146:
              if (++v21 == v20)
                goto LABEL_166;
            }
            v24 = *(_DWORD *)(v22 + 8);
            if (v24 == 21)
            {
              llvm::object::MetalLibObjectFile::findDynamicSymbol();
              if ((v135 & 1) != 0 && (v25 = v134, *(_QWORD *)&v134 = 0, v25))
              {
                FileName = llvm::object::Binary::getFileName((llvm::object::Binary *)v22);
                v106 = 1283;
                __p[0] = "cannot read '";
                v104 = (const char *)FileName;
                v105 = v27;
                v137 = __p;
                *(_QWORD *)&v139 = "'";
                v140 = 770;
                llvm::air::ErrorHandler::error();
                (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                v28 = 0;
                v99 = 0;
              }
              else
              {
                v43 = llvm::object::MetalLibObjectFile::dynamic_symbol_end((llvm::object::MetalLibObjectFile *)v22);
                if ((_QWORD)v134 == v43)
                {
                  v28 = 1;
                }
                else
                {
                  v68 = llvm::StringMapImpl::FindKey();
                  if (v68 == -1)
                    v69 = *(unsigned int *)(v1 + 112);
                  else
                    v69 = v68;
                  v70 = (llvm **)(*v94 + 8 * v69);
                  v71 = *(_QWORD *)*v70;
                  v72 = *((_DWORD *)*v70 + 2);
                  v137 = (void **)((char *)*v70 + 96);
                  v138 = v71;
                  LODWORD(v139) = v72;
                  *((_QWORD *)&v139 + 1) = v22;
                  sub_22F442A30(v91, v137, v71, &v139);
                  sub_22F226544((uint64_t)v94, v70);
                  v28 = 0;
                  v99 = 1;
                }
              }
              if ((v135 & 1) != 0)
              {
                v44 = v134;
                *(_QWORD *)&v134 = 0;
                if (v44)
                  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              }
              if ((v28 & 1) == 0)
                goto LABEL_167;
              goto LABEL_146;
            }
            if (v24)
              v22 = 0;
            llvm::object::Archive::findSym();
            if ((v142 & 1) != 0 && (v35 = v137, v137 = 0, v35))
            {
              v36 = llvm::object::Binary::getFileName((llvm::object::Binary *)v22);
              v136 = 1283;
              *(_QWORD *)&v134 = "cannot read '";
              *(_QWORD *)&v135 = v36;
              *((_QWORD *)&v135 + 1) = v37;
              __p[0] = &v134;
              v104 = "'";
              v106 = 770;
              AIRVersion = (_QWORD **)v35;
              llvm::air::ErrorHandler::error();
              if (AIRVersion)
                ((void (*)(_QWORD **))(*AIRVersion)[1])(AIRVersion);
LABEL_76:
              v42 = 0;
            }
            else
            {
              if (!v141)
                goto LABEL_76;
              llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)&v137);
              if ((v133 & 1) != 0 && (v45 = v131, v131 = 0, v45))
              {
                v46 = llvm::object::Binary::getFileName((llvm::object::Binary *)v22);
                v136 = 1283;
                *(_QWORD *)&v134 = "cannot read '";
                *(_QWORD *)&v135 = v46;
                *((_QWORD *)&v135 + 1) = v47;
                __p[0] = &v134;
                v104 = "'";
                v106 = 770;
                AIRVersion = v45;
                llvm::air::ErrorHandler::error();
                if (AIRVersion)
                  ((void (*)(_QWORD **))(*AIRVersion)[1])(AIRVersion);
                v42 = 0;
              }
              else
              {
                llvm::object::Archive::Child::getMemoryBufferRef((llvm::object::Archive::Child *)&v137);
                if ((v136 & 1) != 0 && (v48 = v134, *(_QWORD *)&v134 = 0, v48))
                {
                  v113 = 1283;
                  v110[0] = "cannot read '";
                  v111 = v131;
                  v112 = v132;
                  v114 = v110;
                  v116 = "(";
                  v117 = 770;
                  v49 = llvm::object::Binary::getFileName((llvm::object::Binary *)v22);
                  AIRVersion = &v114;
                  v120 = v49;
                  v121 = v50;
                  v122 = 1282;
                  __p[0] = &AIRVersion;
                  v104 = ")'";
                  v106 = 770;
                  *(_QWORD *)&v108 = v48;
                  llvm::air::ErrorHandler::error();
                  if ((_QWORD)v108)
                    (*(void (**)(_QWORD))(*(_QWORD *)v108 + 8))(v108);
                  v42 = 0;
                }
                else
                {
                  v108 = v134;
                  v109 = v135;
                  llvm::object::IRObjectFile::create();
                  v51 = (llvm::object::IRObjectFile *)v129;
                  if ((v130 & 1) != 0 && (v129 = 0, v51))
                  {
                    v113 = 1283;
                    v110[0] = "cannot read '";
                    v111 = v131;
                    v112 = v132;
                    v114 = v110;
                    v116 = "(";
                    v117 = 770;
                    v52 = llvm::object::Binary::getFileName((llvm::object::Binary *)v22);
                    AIRVersion = &v114;
                    v120 = v52;
                    v121 = v53;
                    v122 = 1282;
                    __p[0] = &AIRVersion;
                    v104 = ")'";
                    v106 = 770;
                    v107 = v51;
                    llvm::air::ErrorHandler::error();
                    if (v107)
                      (*(void (**)(llvm::object::IRObjectFile *))(*(_QWORD *)v107 + 8))(v107);
                    v42 = 0;
                  }
                  else
                  {
                    TargetTriple = llvm::object::IRObjectFile::getTargetTriple(v51);
                    v122 = 261;
                    AIRVersion = (_QWORD **)TargetTriple;
                    v119 = v61;
                    MEMORY[0x23489F1BC](__p, &AIRVersion);
                    if (llvm::Triple::isCompatibleWith((llvm::Triple *)__p, v97)
                      && (AIRVersion = (_QWORD **)llvm::Triple::getAIRVersion((llvm::Triple *)__p),
                          v119 = v62,
                          (sub_22E3B38EC(v92, &AIRVersion) & 1) == 0)
                      && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 32))(v1, v129))
                    {
                      v73 = v129;
                      v74 = v129 & 0xFFFFFFFFFFFFFFF9;
                      v129 = 0;
                      v114 = (_QWORD *)v74;
                      v115 = v74;
                      sub_22F44137C(v89, (uint64_t *)&v114);
                      sub_22E3B4400((uint64_t *)&v115);
                      v75 = (uint64_t *)operator new(0x28uLL);
                      v76 = v75;
                      v75[4] = v74;
                      v77 = v88;
                      while (1)
                      {
                        v78 = *v77;
                        v79 = v77;
                        if (!*v77)
                          break;
                        while (1)
                        {
                          v77 = (uint64_t **)v78;
                          v80 = v78[4];
                          if (v74 < v80)
                            break;
                          if (v80 >= v74)
                          {
                            operator delete(v75);
                            goto LABEL_163;
                          }
                          v78 = (uint64_t *)v78[1];
                          if (!v78)
                          {
                            v79 = v77 + 1;
                            goto LABEL_159;
                          }
                        }
                      }
LABEL_159:
                      *v75 = 0;
                      v75[1] = 0;
                      v75[2] = (uint64_t)v77;
                      *v79 = v75;
                      v81 = **(_QWORD **)(v1 + 424);
                      if (v81)
                      {
                        *(_QWORD *)(v1 + 424) = v81;
                        v76 = *v79;
                      }
                      sub_22E49FD00(*(uint64_t **)(v1 + 432), v76);
                      ++*(_QWORD *)(v1 + 440);
LABEL_163:
                      sub_22F22B6F8(v90, v73);
                      v42 = 1;
                    }
                    else
                    {
                      v42 = 0;
                    }
                    if (SHIBYTE(v104) < 0)
                      operator delete(__p[0]);
                  }
                  v63 = v129;
                  v129 = 0;
                  if (v63)
                    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
                }
                if ((v136 & 1) != 0)
                {
                  v64 = v134;
                  *(_QWORD *)&v134 = 0;
                  if (v64)
                    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
                }
              }
              if ((v133 & 1) != 0)
              {
                v65 = v131;
                v131 = 0;
                if (v65)
                  ((void (*)(_QWORD **))(*v65)[1])(v65);
              }
            }
            if ((v142 & 1) != 0)
            {
              v66 = v137;
              v137 = 0;
              if (v66)
              {
                v67 = 1;
LABEL_144:
                (*((void (**)(void))*v66 + v67))();
              }
            }
            else if (v141)
            {
              v66 = (void **)v138;
              v138 = 0;
              if (v66)
              {
                v67 = 2;
                goto LABEL_144;
              }
            }
LABEL_145:
            if ((v42 & 1) != 0)
              goto LABEL_174;
            goto LABEL_146;
          }
LABEL_166:
          v99 = 0;
LABEL_167:
          v16 = v95 | v99;
          v17 = v93;
          v15 = v96;
        }
        v15 += 2;
        if (v15 == v17)
        {
          v15 = (void **)__base;
          break;
        }
      }
    }
    if (v15 != (void **)v125)
      free(v15);
    result = sub_22E3B4EF4((uint64_t)v126);
  }
  while ((v16 & 1) != 0);
  return result;
}

void sub_22F218688(uint64_t a1)
{
  uint64_t v1;
  uint64_t **i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::object::Binary *v17;
  llvm::Module **v19;
  llvm::Module **v20;
  char v21;
  llvm::Module *v22;
  void *v23;
  _BYTE *v24;
  char *v25;
  _BYTE *v26;
  char v27;
  int v28;
  _BYTE *v29;
  size_t v30;
  size_t v31;
  char *FileName;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  size_t v39;
  void *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  char v44;
  int v45;
  size_t v46;
  _BYTE *v47;
  _QWORD *v48;
  _BYTE *v49;
  char v50;
  int v51;
  _BYTE *v52;
  size_t v53;
  size_t v54;
  unint64_t v55;
  char *v56;
  BOOL v57;
  const void *v58;
  size_t v59;
  uint64_t v60;
  size_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  char v66;
  uint64_t v67;
  const void *v68;
  size_t v69;
  size_t v70;
  _QWORD *v71;
  void *__p;
  size_t v74;
  uint64_t *v75;
  uint64_t v76;
  __int16 v77;
  void *p_p;
  __int128 v79;
  _WORD v80[32];
  void *v81;
  char v82;
  char v83[3];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v1)
  {
    for (i = *(uint64_t ***)(a1 + 168); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(a1 + 168);
  }
  v4 = *(_QWORD *)(a1 + 168) + 8 * v1;
  if (i != (uint64_t **)v4)
  {
    v5 = *i;
    while (*((_DWORD *)v5 + 6) == 1)
    {
      do
      {
        v6 = i[1];
        ++i;
        v5 = v6;
        if (v6)
          v7 = v5 + 1 == 0;
        else
          v7 = 1;
      }
      while (v7);
      if (i == (uint64_t **)v4)
        goto LABEL_82;
    }
  }
  if (i != (uint64_t **)v4)
  {
    v8 = *i;
LABEL_21:
    v9 = *v8;
    v77 = 1283;
    __p = "duplicated symbol '";
    v75 = v8 + 8;
    v76 = v9;
    p_p = &__p;
    *((_QWORD *)&v79 + 1) = "' in:";
    v80[4] = 770;
    llvm::air::ErrorHandler::explain();
    v10 = *((unsigned int *)v8 + 6);
    if ((_DWORD)v10 == 1)
    {
      do
      {
LABEL_22:
        v11 = i[1];
        ++i;
        v8 = v11;
        if (v11)
          v12 = v8 + 1 == 0;
        else
          v12 = 1;
      }
      while (v12);
      while (i != (uint64_t **)v4)
      {
        if (*((_DWORD *)v8 + 6) != 1)
        {
          if (i != (uint64_t **)v4)
            goto LABEL_21;
          goto LABEL_82;
        }
        do
        {
          v13 = i[1];
          ++i;
          v8 = v13;
          if (v13)
            v14 = v8 + 1 == 0;
          else
            v14 = 1;
        }
        while (v14);
      }
      goto LABEL_82;
    }
    v15 = v8[2];
    v71 = (_QWORD *)(v15 + 8 * v10);
    v16 = (_QWORD *)(v15 + 8);
    while (1)
    {
      v17 = (llvm::object::Binary *)(*v16 & 0xFFFFFFFFFFFFFFF8);
      if ((*v16 & 6) != 2 || v17 == 0)
      {
        v19 = (llvm::Module **)*((_QWORD *)v17 + 6);
        v20 = (llvm::Module **)*((_QWORD *)v17 + 7);
        if (v19 != v20)
        {
          v21 = 1;
          do
          {
            v22 = *v19;
            llvm::Module::materializeAll(*v19);
            v23 = v81;
            if (v81)
            {
              v81 = 0;
              __p = v23;
              sub_22E6C5940((char **)&__p, (char **)&p_p);
              if (__p)
                (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
              if (v81)
                (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
            }
            else
            {
              if (llvm::Module::getNamedValue())
              {
                v26 = (_BYTE *)*((_QWORD *)v22 + 21);
                v25 = (char *)v22 + 168;
                v24 = v26;
                v27 = v25[23];
                v28 = v27;
                if (v27 >= 0)
                  v29 = v25;
                else
                  v29 = v24;
                v30 = v27 & 0x7F;
                if (v28 >= 0)
                  v31 = v30;
                else
                  v31 = *((_QWORD *)v25 + 1);
                FileName = (char *)llvm::object::Binary::getFileName(v17);
                sub_22F44142C(a1, v29, v31, FileName, v33);
              }
              v21 = 0;
            }
            ++v19;
          }
          while (v19 != v20);
          if ((v21 & 1) == 0)
            goto LABEL_60;
        }
        v34 = (char *)llvm::object::Binary::getFileName(v17);
        v36 = v35;
        v37 = a1;
        v38 = "";
        v39 = 0;
      }
      else
      {
        llvm::Module::materializeAll((llvm::Module *)(*v16 & 0xFFFFFFFFFFFFFFF8));
        v40 = v81;
        if (v81)
        {
          v81 = 0;
          __p = v40;
          sub_22E6C5940((char **)&__p, (char **)&p_p);
          if (__p)
            (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
          v49 = (_BYTE *)*((_QWORD *)v17 + 21);
          v48 = (_QWORD *)((char *)v17 + 168);
          v47 = v49;
          v50 = *((_BYTE *)v48 + 23);
          v51 = v50;
          if (v50 >= 0)
            v52 = v48;
          else
            v52 = v47;
          v53 = v50 & 0x7F;
          if (v51 >= 0)
            v54 = v53;
          else
            v54 = v48[1];
          sub_22F44142C(a1, v52, v54, "", 0);
          if (v81)
            (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
          goto LABEL_60;
        }
        v43 = (char *)*((_QWORD *)v17 + 21);
        v42 = (_QWORD *)((char *)v17 + 168);
        v41 = v43;
        v44 = *((_BYTE *)v42 + 23);
        v45 = v44;
        if (v44 >= 0)
          v38 = (char *)v42;
        else
          v38 = v41;
        v46 = v44 & 0x7F;
        if (v45 >= 0)
          v39 = v46;
        else
          v39 = v42[1];
        v37 = a1;
        v34 = "";
        v36 = 0;
      }
      sub_22F44142C(v37, v38, v39, v34, v36);
LABEL_60:
      if (++v16 == v71)
        goto LABEL_22;
    }
  }
LABEL_82:
  p_p = v80;
  v79 = xmmword_22F44E300;
  v55 = *(unsigned int *)(a1 + 200);
  if ((_DWORD)v55)
  {
    v56 = v83;
    do
    {
      *--v56 = (v55 % 0xA) | 0x30;
      v57 = v55 > 9;
      v55 /= 0xAuLL;
    }
    while (v57);
  }
  else
  {
    v56 = &v82;
    v82 = 48;
  }
  sub_22E3B4274(&__p, v56, v83, v83 - v56);
  if (SHIBYTE(v75) >= 0)
    v58 = &__p;
  else
    v58 = __p;
  if (SHIBYTE(v75) >= 0)
    v59 = HIBYTE(v75) & 0x7F;
  else
    v59 = v74;
  v60 = v79;
  if (*((_QWORD *)&v79 + 1) >= (unint64_t)v79 + v59)
  {
    if (!v59)
      goto LABEL_96;
    goto LABEL_95;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v60 = v79;
  if (v59)
  {
LABEL_95:
    memcpy((char *)p_p + v60, v58, v59);
    v60 = v79;
  }
LABEL_96:
  v61 = v60 + v59;
  *(_QWORD *)&v79 = v61;
  if (SHIBYTE(v75) < 0)
  {
    operator delete(__p);
    v61 = v79;
  }
  if (*((_QWORD *)&v79 + 1) < v61 + 18)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v61 = v79;
  }
  v62 = (char *)p_p + v61;
  *(_OWORD *)v62 = *(_OWORD *)" duplicated symbol";
  *((_WORD *)v62 + 8) = 27759;
  v63 = v79;
  v64 = v79 + 18;
  *(_QWORD *)&v79 = v79 + 18;
  if (*(_DWORD *)(a1 + 200) > 1u)
  {
    if (*((_QWORD *)&v79 + 1) < (unint64_t)(v63 + 19))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v64 = v79;
    }
    *((_BYTE *)p_p + v64) = 115;
    v64 = v79 + 1;
    *(_QWORD *)&v79 = v79 + 1;
  }
  if (*((_QWORD *)&v79 + 1) < (unint64_t)(v64 + 13))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v64 = v79;
  }
  qmemcpy((char *)p_p + v64, " for target '", 13);
  v65 = *(const void **)(a1 + 24);
  v66 = *(_BYTE *)(a1 + 47);
  v67 = v79 + 13;
  *(_QWORD *)&v79 = v79 + 13;
  if (v66 >= 0)
    v68 = (const void *)(a1 + 24);
  else
    v68 = v65;
  if (v66 >= 0)
    v69 = v66 & 0x7F;
  else
    v69 = *(_QWORD *)(a1 + 32);
  if (*((_QWORD *)&v79 + 1) >= v69 + v67)
  {
    if (!v69)
      goto LABEL_115;
    goto LABEL_114;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v67 = v79;
  if (v69)
  {
LABEL_114:
    memcpy((char *)p_p + v67, v68, v69);
    v67 = v79;
  }
LABEL_115:
  v70 = v67 + v69;
  *(_QWORD *)&v79 = v70;
  if (*((_QWORD *)&v79 + 1) < v70 + 1)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v70 = v79;
  }
  *((_BYTE *)p_p + v70) = 39;
  *(_QWORD *)&v79 = v79 + 1;
  v77 = 261;
  __p = p_p;
  v74 = v79;
  llvm::air::ErrorHandler::error();
  if (p_p != v80)
    free(p_p);
}

uint64_t sub_22F218CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  std::string::size_type v17;
  uint64_t k;
  unsigned __int8 *v19;
  BOOL v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  BOOL v26;
  char *v27;
  size_t v28;
  size_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char v33;
  int v34;
  char *v35;
  size_t v36;
  size_t v37;
  unint64_t v38;
  llvm::Module **v39;
  llvm::Module **v40;
  char v41;
  llvm::Module *v42;
  std::string::size_type v43;
  uint64_t j;
  unsigned __int8 *v45;
  BOOL v46;
  uint64_t Function;
  llvm::Value *v48;
  _BYTE *Name;
  uint64_t v50;
  uint64_t v51;
  char v52;
  BOOL v53;
  _BYTE *v54;
  size_t v55;
  size_t v56;
  char *FileName;
  uint64_t v58;
  _BYTE *v59;
  char *v60;
  _BYTE *v61;
  char v62;
  int v63;
  _BYTE *v64;
  size_t v65;
  size_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  BOOL v72;
  std::string *v73;
  uint64_t v74;
  std::string *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  llvm::object::Binary *v82;
  std::string v83;
  void *__p[2];
  uint64_t ArchName;
  uint64_t v86;
  __int16 v87;
  void **v88;
  _QWORD *v89;
  const char *v90;
  __int16 v91;
  std::string::size_type v92;

  if (*(_DWORD *)(a1 + 288) == 2)
    return 1;
  v1 = a1;
  v87 = 1283;
  __p[0] = "Undefined symbol(s) for architecture '";
  ArchName = llvm::Triple::getArchName((llvm::Triple *)(a1 + 24));
  v86 = v2;
  v88 = __p;
  v90 = "':";
  v91 = 770;
  llvm::air::ErrorHandler::explain();
  v3 = *(unsigned int *)(v1 + 112);
  if ((_DWORD)v3)
  {
    for (i = *(uint64_t ***)(v1 + 104); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(v1 + 104);
  }
  v79 = *(_QWORD *)(v1 + 104) + 8 * v3;
  if (i != (uint64_t **)v79)
  {
    v6 = *i;
    v81 = v1;
    do
    {
      v7 = *v6;
      v87 = 1283;
      __p[0] = "  '";
      ArchName = (uint64_t)(v6 + 12);
      v86 = v7;
      v88 = __p;
      v90 = "', referenced from:";
      v91 = 770;
      llvm::air::ErrorHandler::explain();
      v8 = *((unsigned int *)v6 + 6);
      if ((_DWORD)v8)
      {
        v9 = (_QWORD *)v6[2];
        v10 = &v9[v8];
        v80 = v10;
        do
        {
          v11 = *v9 & 6;
          v12 = *v9 & 0xFFFFFFFFFFFFFFF8;
          v13 = v11 != 2 || v12 == 0;
          v82 = (llvm::object::Binary *)(*v9 & 0xFFFFFFFFFFFFFFF8);
          if (v13)
          {
            v14 = *v9 >= 8uLL && v11 == 0;
            if (v14 && (v12 ? (v15 = *(_DWORD *)(v12 + 8) == 3) : (v15 = 0), v15))
            {
              v78 = v9;
              v89 = 0;
              v90 = 0;
              v88 = (void **)&v89;
              v38 = v12;
              v39 = *(llvm::Module ***)(v12 + 48);
              v40 = *(llvm::Module ***)(v38 + 56);
              if (v39 == v40)
                goto LABEL_96;
              v41 = 1;
              do
              {
                v42 = *v39;
                llvm::Module::materializeAll(*v39);
                v43 = v92;
                if (v92)
                {
                  v92 = 0;
                  v83.__r_.__value_.__r.__words[0] = v43;
                  sub_22E6C5940(&v83.__r_.__value_.__l.__data_, (char **)__p);
                  if (v83.__r_.__value_.__r.__words[0])
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v83.__r_.__value_.__l.__data_ + 8))(v83.__r_.__value_.__r.__words[0]);
                  if (v92)
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v92 + 8))(v92);
                }
                else
                {
                  for (j = *(_QWORD *)(llvm::Module::getNamedValue() + 8); j; j = *(_QWORD *)(j + 8))
                  {
                    v45 = *(unsigned __int8 **)(j + 24);
                    if (v45)
                      v46 = v45[16] >= 0x1Cu;
                    else
                      v46 = 0;
                    if (v46)
                    {
                      Function = llvm::Instruction::getFunction(*(llvm::Instruction **)(j + 24));
                      if ((sub_22F2272D4((uint64_t **)&v88, Function, Function) & 1) != 0)
                      {
                        v48 = (llvm::Value *)llvm::Instruction::getFunction((llvm::Instruction *)v45);
                        Name = (_BYTE *)llvm::Value::getName(v48);
                        v51 = v50;
                        v52 = *((_BYTE *)v42 + 191);
                        v53 = v52 < 0;
                        if (v52 >= 0)
                          v54 = (char *)v42 + 168;
                        else
                          v54 = (_BYTE *)*((_QWORD *)v42 + 21);
                        v55 = v52 & 0x7F;
                        if (v53)
                          v56 = *((_QWORD *)v42 + 22);
                        else
                          v56 = v55;
                        FileName = (char *)llvm::object::Binary::getFileName(v82);
                        sub_22F441580(v81, Name, v51, v54, v56, FileName, v58);
                      }
                    }
                  }
                  if (!v90)
                  {
                    v61 = (_BYTE *)*((_QWORD *)v42 + 21);
                    v60 = (char *)v42 + 168;
                    v59 = v61;
                    v62 = v60[23];
                    v63 = v62;
                    if (v62 >= 0)
                      v64 = v60;
                    else
                      v64 = v59;
                    v65 = v62 & 0x7F;
                    if (v63 >= 0)
                      v66 = v65;
                    else
                      v66 = *((_QWORD *)v60 + 1);
                    v67 = (char *)llvm::object::Binary::getFileName(v82);
                    sub_22F441580(v81, "user", 4, v64, v66, v67, v68);
                  }
                  v41 = 0;
                }
                ++v39;
              }
              while (v39 != v40);
              if ((v41 & 1) != 0)
              {
LABEL_96:
                v69 = (char *)llvm::object::Binary::getFileName(v82);
                sub_22F441580(v81, "user", 4, "", 0, v69, v70);
              }
              sub_22F258024(v89);
              v10 = v80;
              v1 = v81;
              v9 = v78;
            }
            else
            {
              if (v11 == 6)
                v16 = *v9 & 0xFFFFFFFFFFFFFFF8;
              else
                v16 = 0;
              sub_22F441580(v1, *(_BYTE **)v16, *(_QWORD *)(v16 + 8), "", 0, "", 0);
            }
          }
          else
          {
            v89 = 0;
            v90 = 0;
            v88 = (void **)&v89;
            llvm::Module::materializeAll((llvm::Module *)v12);
            v17 = v92;
            if (v92)
            {
              v92 = 0;
              v83.__r_.__value_.__r.__words[0] = v17;
              sub_22E6C5940(&v83.__r_.__value_.__l.__data_, (char **)__p);
              if (v83.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)v83.__r_.__value_.__l.__data_ + 8))(v83.__r_.__value_.__r.__words[0]);
              v32 = *(char **)(v12 + 168);
              v31 = v12 + 168;
              v30 = v32;
              v33 = *(_BYTE *)(v31 + 23);
              v34 = v33;
              if (v33 >= 0)
                v35 = (char *)v31;
              else
                v35 = v30;
              v36 = v33 & 0x7F;
              if (v34 >= 0)
                v37 = v36;
              else
                v37 = *(_QWORD *)(v31 + 8);
              sub_22F441580(v1, "user", 4, v35, v37, v35, v37);
              if (v92)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v92 + 8))(v92);
            }
            else
            {
              for (k = *(_QWORD *)(llvm::Module::getNamedValue() + 8); k; k = *(_QWORD *)(k + 8))
              {
                v19 = *(unsigned __int8 **)(k + 24);
                if (v19)
                  v20 = v19[16] >= 0x1Cu;
                else
                  v20 = 0;
                if (v20)
                {
                  v21 = llvm::Instruction::getFunction(*(llvm::Instruction **)(k + 24));
                  if ((sub_22F2272D4((uint64_t **)&v88, v21, v21) & 1) != 0)
                  {
                    v22 = (llvm::Value *)llvm::Instruction::getFunction((llvm::Instruction *)v19);
                    v24 = (_BYTE *)llvm::Value::getName(v22);
                    v25 = *((_BYTE *)v82 + 191);
                    v26 = v25 < 0;
                    if (v25 >= 0)
                      v27 = (char *)v82 + 168;
                    else
                      v27 = (char *)*((_QWORD *)v82 + 21);
                    v28 = v25 & 0x7F;
                    if (v26)
                      v29 = *((_QWORD *)v82 + 22);
                    else
                      v29 = v28;
                    sub_22F441580(v1, v24, v23, v27, v29, v27, v29);
                  }
                }
              }
            }
            sub_22F258024(v89);
            v10 = v80;
          }
          ++v9;
        }
        while (v9 != v10);
      }
      do
      {
        v71 = i[1];
        ++i;
        v6 = v71;
        if (v71)
          v72 = v6 + 1 == 0;
        else
          v72 = 1;
      }
      while (v72);
    }
    while (i != (uint64_t **)v79);
  }
  if (*(_DWORD *)(v1 + 288))
  {
    std::operator+<char>();
    v73 = std::string::append(&v83, "'");
    v74 = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    ArchName = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    v91 = 260;
    v88 = __p;
    llvm::air::ErrorHandler::warning();
    if (SHIBYTE(ArchName) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    return 1;
  }
  std::operator+<char>();
  v76 = std::string::append(&v83, "'");
  v77 = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  ArchName = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v91 = 260;
  v88 = __p;
  llvm::air::ErrorHandler::error();
  if (SHIBYTE(ArchName) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t sub_22F21932C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  __int128 *v21;
  char v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  const char *v26;
  void **v27;
  const void *v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v34;
  uint64_t v35;
  llvm::NamedMDNode *v36;
  int v37;
  uint64_t Operand;
  void *String;
  size_t v40;
  size_t v41;
  llvm::NamedMDNode *v42;
  uint64_t v43;
  llvm::NamedMDNode *v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  char v57;
  int v58;
  void **v59;
  char v60;
  char v61;
  int v62;
  uint64_t v63;
  void **v64;
  llvm::object::Binary *v65;
  uint64_t FileName;
  unint64_t v67;
  const void *v68;
  void *v69;
  void *v70;
  llvm::object::Binary *v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void *v75;
  void *v76;
  const void *v77;
  unint64_t v78;
  const void *v79;
  char v80;
  int v81;
  const void *v82;
  size_t v83;
  size_t v84;
  void *v85;
  const void *v86;
  unint64_t v87;
  const void *v88;
  char v89;
  int v90;
  const void *v91;
  size_t v92;
  size_t v93;
  void *v94;
  char *v95;
  char v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  void *v102;
  uint64_t v103;
  void **v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *i;
  unint64_t v110;
  llvm::Module **v111;
  llvm::Module **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t Data;
  uint64_t v119;
  void *v120;
  void ***v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  llvm::Module *v130;
  uint64_t v131;
  llvm::Module *v132;
  llvm::NamedMDNode *v133;
  llvm::Module *v134;
  uint64_t v135;
  llvm::NamedMDNode *v136;
  llvm::NamedMDNode *v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  void *v142;
  size_t v143;
  size_t v144;
  llvm::NamedMDNode *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  size_t v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  const void *v162;
  void *v163;
  void *v164;
  unint64_t v165;
  std::error_code v166;
  std::error_code v167;
  char v168;
  BOOL v169;
  const void *v170;
  size_t v171;
  size_t v172;
  unint64_t v173;
  void *v174;
  unint64_t v175;
  unint64_t v176;
  void **v177;
  uint64_t v178;
  uint64_t v179;
  std::error_code v180;
  std::error_code v181;
  char v182;
  BOOL v183;
  const void *v184;
  size_t v185;
  size_t v186;
  __int128 *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  BOOL v195;
  unint64_t v196;
  void **v197;
  char v198;
  BOOL v199;
  const char *v200;
  uint64_t v201;
  void **v202;
  llvm::Module **v203;
  llvm::Module **v204;
  void *v205;
  __int128 v206;
  llvm::Module *v207;
  llvm::NamedMDNode *v208;
  llvm::Module *v209;
  llvm::NamedMDNode *v210;
  llvm::Module *v211;
  llvm::NamedMDNode *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void **v216;
  char v217;
  int v218;
  void **v219;
  void **v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  BOOL v224;
  unint64_t v225;
  uint64_t v226;
  void **v227;
  void **v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  BOOL v240;
  unint64_t v241;
  uint64_t v242;
  void **v243;
  void **v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void **v254;
  llvm::Module *v255;
  llvm::Module *v256;
  void **v257;
  llvm::Module **v258;
  llvm::Module **v260;
  char v261;
  llvm::NamedMDNode *v262;
  llvm::NamedMDNode *v263;
  int NumOperands;
  llvm::NamedMDNode *v265;
  void *v266[2];
  _BYTE v267[24];
  _QWORD v268[4];
  __int128 v269;
  void *v270;
  char v271;
  void *v272[3];
  void *v273[8];
  void *v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  __int128 v279;
  uint64_t v280;
  __int128 __dst;
  const char *v282;
  __int128 v283;
  _QWORD v284[4];
  __int128 v285;
  void *v286;
  __int128 v287;
  void **v288;
  void **v289;
  __int16 v290;
  void **v291;
  __int128 v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  void ***v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  void **v303;
  void *v304[3];
  void *v305[6];
  __int128 v306;
  void *v307;
  void *v308;
  void **v309;
  char v310;
  uint64_t v311;

  v2 = a2;
  v311 = *MEMORY[0x24BDAC8D0];
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v280 = 0;
  v279 = 0uLL;
  v3 = *(_QWORD **)(a2 + 256);
  v254 = *(void ***)(a2 + 264);
  if (v3 == v254)
    goto LABEL_2;
  do
  {
    LOBYTE(v272[0]) = 0;
    LOBYTE(v275) = 0;
    v8 = *v3 & 6;
    v9 = *v3 & 0xFFFFFFFFFFFFFFF8;
    v10 = v8 != 2 || v9 == 0;
    v257 = (void **)v3;
    if (!v10)
    {
      if (*(char *)(v2 + 399) < 0)
        v15 = *(_QWORD *)(v2 + 384);
      else
        v15 = *(unsigned __int8 *)(v2 + 399);
      v22 = *(_BYTE *)(v9 + 191);
      if (!v15)
      {
        v23 = *(_QWORD *)(v9 + 176);
        v24 = v22 & 0x7F;
        goto LABEL_41;
      }
      v23 = *(_QWORD *)(v9 + 176);
      v24 = v22 & 0x7F;
      if (v22 >= 0)
        v25 = v22 & 0x7F;
      else
        v25 = *(_QWORD *)(v9 + 176);
      if (v25)
      {
LABEL_41:
        v27 = (void **)(v9 + 168);
        if (v22 >= 0)
          v28 = (const void *)(v9 + 168);
        else
          v28 = *(const void **)(v9 + 168);
        if (v22 >= 0)
          v29 = v24;
        else
          v29 = v23;
        if (v29 <= 0x7FFFFFFFFFFFFFF7)
        {
          v256 = (llvm::Module *)(*v3 & 0xFFFFFFFFFFFFFFF8);
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            p_dst = (__int128 *)operator new(v31 + 1);
            v282 = (const char *)(v32 | 0x8000000000000000);
            *(_QWORD *)&__dst = p_dst;
            *((_QWORD *)&__dst + 1) = v29;
          }
          else
          {
            HIBYTE(v282) = v29;
            p_dst = &__dst;
            if (!v29)
            {
LABEL_55:
              *((_BYTE *)p_dst + v29) = 0;
              v286 = 0;
              v285 = 0u;
              v283 = 0u;
              memset(v284, 0, sizeof(v284));
              llvm::Module::materializeMetadata(v256);
              if (v300)
              {
                v57 = *((_BYTE *)v256 + 191);
                v58 = v57;
                v59 = (void **)(v57 & 0x7F);
                if (v58 < 0)
                  v59 = (void **)*((_QWORD *)v256 + 22);
                if (v59)
                {
                  if (v58 >= 0)
                    v64 = v27;
                  else
                    v64 = (void **)*v27;
                  v290 = 1283;
                  *(_QWORD *)&v287 = " in '";
                  v288 = v64;
                  v289 = v59;
                  *(_QWORD *)&v292 = &v287;
                  v293 = "'";
                  LOWORD(v295) = 770;
                  v304[0] = "cannot materialize module";
                  v304[2] = &v292;
                  v60 = 2;
                }
                else
                {
                  LOWORD(v295) = 257;
                  v304[0] = "cannot materialize module";
                  v60 = 1;
                }
                LOBYTE(v305[1]) = 3;
                BYTE1(v305[1]) = v60;
                v309 = (void **)v300;
                v300 = 0;
                llvm::air::ErrorHandler::error();
                if (v309)
                  (*((void (**)(void **))*v309 + 1))(v309);
                LOBYTE(v266[0]) = 0;
                v271 = 0;
                if (v300)
                  (*(void (**)(void *))(*(_QWORD *)v300 + 8))(v300);
                goto LABEL_143;
              }
              v304[0] = "llvm.commandline";
              LOWORD(v305[1]) = 259;
              NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v256, (const llvm::Twine *)v304);
              v304[0] = "llvm_utils.sources";
              LOWORD(v305[1]) = 259;
              v34 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v256, (const llvm::Twine *)v304);
              v304[0] = "llvm_utils.workingdir";
              LOWORD(v305[1]) = 259;
              v35 = llvm::Module::getNamedMetadata(v256, (const llvm::Twine *)v304);
              v36 = (llvm::NamedMDNode *)v35;
              if (NamedMetadata && v34 && v35)
              {
                NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
                if (!NumOperands)
                  goto LABEL_137;
                v37 = 0;
                v262 = NamedMetadata;
                do
                {
                  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
                  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(Operand
                                                                                - 8 * *(unsigned int *)(Operand + 8)));
                  v41 = v40;
                  v42 = v34;
                  v43 = llvm::NamedMDNode::getOperand(v34);
                  v44 = v36;
                  v45 = llvm::NamedMDNode::getOperand(v36);
                  v46 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v45 - 8 * *(unsigned int *)(v45 + 8)));
                  v48 = v47;
                  v304[0] = &v304[2];
                  v304[1] = (void *)0x800000000;
                  v49 = *(unsigned int *)(v43 + 8);
                  v50 = v43;
                  if ((_DWORD)v49)
                  {
                    do
                    {
                      v51 = *(_QWORD *)(v50 - 8 * *(unsigned int *)(v43 + 8));
                      *(_QWORD *)&v292 = llvm::MDString::getString(*(llvm::MDString **)(v51
                                                                                      - 8 * *(unsigned int *)(v51 + 8)));
                      *((_QWORD *)&v292 + 1) = v52;
                      v53 = *(_QWORD *)(v50 - 8 * *(unsigned int *)(v43 + 8));
                      *(_QWORD *)&v287 = llvm::MDString::getString(*(llvm::MDString **)(v53
                                                                                      - 8 * *(unsigned int *)(v53 + 8)
                                                                                      + 8));
                      *((_QWORD *)&v287 + 1) = v54;
                      sub_22F441798((unint64_t)v304, &v292, &v287);
                      v50 += 8;
                      --v49;
                    }
                    while (v49);
                    v55 = (void **)v304[0];
                    v56 = LODWORD(v304[1]);
                  }
                  else
                  {
                    v56 = 0;
                    v55 = &v304[2];
                  }
                  sub_22F21B884((uint64_t)&__dst, String, v41, v46, v48, (uint64_t)v55, v56);
                  v36 = v44;
                  if (v304[0] != &v304[2])
                    free(v304[0]);
                  ++v37;
                  v34 = v42;
                  NamedMetadata = v262;
                }
                while (v37 != NumOperands);
              }
              else
              {
                if (*(char *)(v2 + 399) < 0)
                {
                  if (!*(_QWORD *)(v2 + 384))
                    goto LABEL_136;
                }
                else if (!*(_BYTE *)(v2 + 399))
                {
                  goto LABEL_136;
                }
                llvm::CloneModule();
                llvm::air::NormalizeModuleForAIRBitcode();
                *(_QWORD *)&v287 = &v289;
                *((_QWORD *)&v287 + 1) = 0;
                v288 = 0;
                sub_22F242C48((uint64_t)v304, (uint64_t)&v287);
                llvm::air::WriteAIRBitcodeToFile();
                v95 = (char *)*((_QWORD *)v300 + 21);
                v96 = *((_BYTE *)v300 + 191);
                v97 = v96;
                if (v96 >= 0)
                  v95 = (char *)v300 + 168;
                v98 = *((_QWORD *)v300 + 22);
                v99 = v96 & 0x7F;
                if (v97 >= 0)
                  v98 = v99;
                v101 = *(const char **)v305[5];
                v100 = *((_QWORD *)v305[5] + 1);
                *(_QWORD *)&v292 = v95;
                *((_QWORD *)&v292 + 1) = v98;
                v293 = v101;
                v294 = v100;
                sub_22F21BB24((uint64_t)&__dst, (uint64_t)&v292);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v304);
                if ((void ***)v287 != &v289)
                  free((void *)v287);
                v102 = v300;
                v300 = 0;
                if (v102)
                {
                  v103 = MEMORY[0x23489F15C]();
                  MEMORY[0x2348A0E9C](v103, 0x10B2C407FF26C1CLL);
                }
              }
LABEL_136:
              v2 = a2;
              if (!NamedMetadata)
              {
LABEL_138:
                if (v34)
                  llvm::Module::eraseNamedMetadata(v256, v34);
                if (v36)
                  llvm::Module::eraseNamedMetadata(v256, v36);
                *(_QWORD *)v267 = v282;
                v268[0] = v284[0];
                v268[3] = v284[3];
                *(_OWORD *)v266 = __dst;
                v282 = 0;
                __dst = 0uLL;
                *(_OWORD *)&v267[8] = v283;
                v283 = 0uLL;
                memset(v284, 0, sizeof(v284));
                *(_OWORD *)&v268[1] = *(_OWORD *)&v284[1];
                v269 = v285;
                v270 = v286;
                v285 = 0uLL;
                v286 = 0;
                v271 = 1;
LABEL_143:
                v304[0] = &v285;
                v104 = v304;
                goto LABEL_144;
              }
LABEL_137:
              llvm::Module::eraseNamedMetadata(v256, NamedMetadata);
              goto LABEL_138;
            }
          }
          memmove(p_dst, v28, v29);
          goto LABEL_55;
        }
LABEL_403:
        abort();
      }
      v26 = "cannot gather sources of unnamed module";
LABEL_79:
      v304[0] = (void *)v26;
      LOWORD(v305[1]) = 259;
      *(_QWORD *)&__dst = 0;
      llvm::air::ErrorHandler::error();
      if ((_QWORD)__dst)
        (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
      LOBYTE(v266[0]) = 0;
      v271 = 0;
      goto LABEL_151;
    }
    if (*v3 < 8uLL || v8 != 0)
    {
      if (*(_DWORD *)v9 == 1)
      {
        if (*(char *)(v2 + 399) < 0)
        {
          if (*(_QWORD *)(v2 + 384))
            goto LABEL_19;
        }
        else if (*(_BYTE *)(v2 + 399))
        {
LABEL_19:
          v12 = *(_BYTE *)(v9 + 31);
          v13 = v12;
          v14 = v12 & 0x7F;
          if (v13 < 0)
            v14 = *(_QWORD *)(v9 + 16);
          if (!v14)
          {
            v266[0] = "cannot gather sources of unnamed archive";
            *(_WORD *)&v267[16] = 259;
            *(_QWORD *)&__dst = 0;
            llvm::air::ErrorHandler::error();
            if ((_QWORD)__dst)
              (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
            LOBYTE(v304[0]) = 0;
            LOBYTE(v308) = 0;
            goto LABEL_250;
          }
          v165 = v9 + 8;
          v300 = &v303;
          v301 = 0;
          v302 = 0;
          sub_22F242C48((uint64_t)&__dst, (uint64_t)&v300);
          llvm::air::cloneArchive();
          v292 = (unint64_t)v303;
          v293 = (const char *)&__dst;
          v294 = 0;
          v295 = 0;
          v296 = 0;
          v298 = 0;
          v299 = 0;
          v297 = 0;
          v303 = 0;
          v166.__cat_ = (const std::error_category *)sub_22F44181C((uint64_t *)&v292);
          if (LODWORD(v166.__cat_))
          {
            *(_QWORD *)&v167.__val_ = *(_QWORD *)&v166.__val_;
            v193 = *(_QWORD *)(v2 + 16);
            v194 = *(_BYTE *)(v9 + 31);
            v195 = v194 < 0;
            v196 = *(_QWORD *)(v9 + 8);
            if (v194 >= 0)
              v196 = v9 + 8;
            v197 = (void **)(v194 & 0x7F);
            if (v195)
              v197 = *(void ***)(v9 + 16);
            v290 = 1283;
            *(_QWORD *)&v287 = "cannot write '";
            v288 = (void **)v196;
            v289 = v197;
            v266[0] = &v287;
            *(_QWORD *)v267 = "' archive";
            *(_WORD *)&v267[16] = 770;
            *(_QWORD *)&v166.__val_ = v266;
            sub_22F43FCAC(v193, v166, v167);
            LOBYTE(v304[0]) = 0;
            LOBYTE(v308) = 0;
            goto LABEL_337;
          }
          v168 = *(_BYTE *)(v9 + 31);
          v169 = v168 < 0;
          if (v168 >= 0)
            v170 = (const void *)(v9 + 8);
          else
            v170 = *(const void **)(v9 + 8);
          v171 = v168 & 0x7F;
          if (v169)
            v172 = *(_QWORD *)(v9 + 16);
          else
            v172 = v171;
          if (v172 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_403;
          v173 = v9;
          if (v172 >= 0x17)
          {
            v221 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v172 | 7) != 0x17)
              v221 = v172 | 7;
            v222 = v221 + 1;
            v174 = operator new(v221 + 1);
            v266[1] = (void *)v172;
            *(_QWORD *)v267 = v222 | 0x8000000000000000;
            v266[0] = v174;
          }
          else
          {
            v267[7] = v172;
            v174 = v266;
            if (!v172)
              goto LABEL_327;
          }
          memmove(v174, v170, v172);
LABEL_327:
          *((_BYTE *)v174 + v172) = 0;
          v270 = 0;
          v269 = 0u;
          *(_OWORD *)&v267[8] = 0u;
          memset(v268, 0, sizeof(v268));
          v223 = *(_BYTE *)(v173 + 31);
          v224 = v223 < 0;
          v225 = *(_QWORD *)(v173 + 8);
          if (v223 >= 0)
            v225 = v165;
          v226 = v223 & 0x7F;
          if (v224)
            v226 = *(_QWORD *)(v173 + 16);
          v228 = *(void ***)v284[3];
          v227 = *(void ***)(v284[3] + 8);
          *(_QWORD *)&v287 = v225;
          *((_QWORD *)&v287 + 1) = v226;
          v288 = v228;
          v289 = v227;
          sub_22F21BB24((uint64_t)v266, (uint64_t)&v287);
          *(_OWORD *)v304 = *(_OWORD *)v266;
          v229 = *(void **)v267;
          v266[1] = 0;
          memset(v267, 0, sizeof(v267));
          v266[0] = 0;
          *(_OWORD *)v305 = *(_OWORD *)&v267[8];
          v305[2] = (void *)v268[0];
          memset(v268, 0, sizeof(v268));
          v305[5] = (void *)v268[3];
          *(_OWORD *)&v305[3] = *(_OWORD *)&v268[1];
          v306 = v269;
          v304[2] = v229;
          v307 = v270;
          v269 = 0uLL;
          v270 = 0;
          LOBYTE(v308) = 1;
          v309 = (void **)&v269;
          sub_22E576240(&v309);
          if (SHIBYTE(v268[3]) < 0)
            operator delete((void *)v268[1]);
          if (SHIBYTE(v268[0]) < 0)
            operator delete(*(void **)&v267[8]);
          if ((v267[7] & 0x80000000) != 0)
            operator delete(v266[0]);
LABEL_337:
          sub_22F442FCC((uint64_t *)&v292);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
          if (v300 != &v303)
            free(v300);
          goto LABEL_250;
        }
        v79 = *(const void **)(v9 + 8);
        v78 = v9 + 8;
        v77 = v79;
        v80 = *(_BYTE *)(v78 + 23);
        v81 = v80;
        if (v80 >= 0)
          v82 = (const void *)v78;
        else
          v82 = v77;
        v83 = v80 & 0x7F;
        if (v81 >= 0)
          v84 = v83;
        else
          v84 = *(_QWORD *)(v78 + 8);
        if (v84 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_403;
        if (v84 >= 0x17)
        {
          v188 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17)
            v188 = v84 | 7;
          v189 = v188 + 1;
          v85 = operator new(v188 + 1);
          v266[1] = (void *)v84;
          *(_QWORD *)v267 = v189 | 0x8000000000000000;
          v266[0] = v85;
        }
        else
        {
          v267[7] = v84;
          v85 = v266;
          if (!v84)
            goto LABEL_243;
        }
        memmove(v85, v82, v84);
LABEL_243:
        *((_BYTE *)v85 + v84) = 0;
        *(_OWORD *)v304 = *(_OWORD *)v266;
        v304[2] = *(void **)v267;
        v266[1] = 0;
        memset(v267, 0, sizeof(v267));
        v266[0] = 0;
        memset(v305, 0, sizeof(v305));
        memset(v268, 0, sizeof(v268));
        v306 = 0uLL;
        v307 = 0;
        v270 = 0;
        v269 = 0uLL;
        LOBYTE(v308) = 1;
        *(_QWORD *)&__dst = &v269;
        v121 = (void ***)&__dst;
LABEL_244:
        sub_22E576240(v121);
        if (SHIBYTE(v268[3]) < 0)
          operator delete((void *)v268[1]);
        if ((SHIBYTE(v268[0]) & 0x80000000) == 0)
          goto LABEL_248;
        goto LABEL_247;
      }
      if (*(char *)(v2 + 399) < 0)
      {
        if (*(_QWORD *)(v2 + 384))
          goto LABEL_75;
      }
      else if (*(_BYTE *)(v2 + 399))
      {
LABEL_75:
        v61 = *(_BYTE *)(v9 + 31);
        v62 = v61;
        v63 = v61 & 0x7F;
        if (v62 < 0)
          v63 = *(_QWORD *)(v9 + 16);
        if (!v63)
        {
          v26 = "cannot gather sources of unnamed metallib";
          goto LABEL_79;
        }
        v175 = v9 + 8;
        MEMORY[0x23489DF08](v304, v9);
        llvm::air::MetalLibCloner::clone((llvm::air::MetalLibCloner *)v304);
        sub_22F443064((uint64_t)v304);
        if ((v310 & 1) != 0)
        {
          v198 = *(_BYTE *)(v9 + 31);
          v199 = v198 < 0;
          v200 = *(const char **)(v9 + 8);
          if (v198 >= 0)
            v200 = (const char *)(v9 + 8);
          v201 = v198 & 0x7F;
          if (v199)
            v201 = *(_QWORD *)(v9 + 16);
          WORD4(v283) = 1283;
          *(_QWORD *)&__dst = "cannot clone '";
          v282 = v200;
          *(_QWORD *)&v283 = v201;
          v304[0] = &__dst;
          v304[2] = "' metallib";
          LOWORD(v305[1]) = 770;
          v202 = v309;
          v309 = 0;
          *(_QWORD *)&v292 = v202;
          llvm::air::ErrorHandler::error();
          if ((_QWORD)v292)
            (*(void (**)(_QWORD))(*(_QWORD *)v292 + 8))(v292);
          LOBYTE(v266[0]) = 0;
          v271 = 0;
          goto LABEL_372;
        }
        v176 = v9;
        v300 = &v303;
        v301 = 0;
        v302 = 0;
        sub_22F242C48((uint64_t)&v292, (uint64_t)&v300);
        v177 = v309;
        v309 = 0;
        v291 = v177;
        MEMORY[0x23489E250](v304, &v291, &v292);
        v178 = (uint64_t)v291;
        v291 = 0;
        if (v178)
        {
          v179 = sub_22E3B46CC(v178);
          MEMORY[0x2348A0E9C](v179, 0x1032C40B18B30E6);
        }
        v180.__cat_ = (const std::error_category *)llvm::air::MetalLibObjectWriter::write((llvm::air::MetalLibObjectWriter *)v304);
        if (LODWORD(v180.__cat_))
        {
          *(_QWORD *)&v181.__val_ = *(_QWORD *)&v180.__val_;
          v215 = *(_QWORD *)(v2 + 16);
          v216 = (void **)v309[1];
          v217 = *((_BYTE *)v309 + 31);
          v218 = v217;
          if (v217 >= 0)
            v216 = v309 + 1;
          v219 = (void **)v309[2];
          v220 = (void **)(v217 & 0x7F);
          if (v218 >= 0)
            v219 = v220;
          v290 = 1283;
          *(_QWORD *)&v287 = "cannot write '";
          v288 = v216;
          v289 = v219;
          *(_QWORD *)&__dst = &v287;
          v282 = "' metallib";
          WORD4(v283) = 770;
          *(_QWORD *)&v180.__val_ = &__dst;
          sub_22F43FCAC(v215, v180, v181);
          LOBYTE(v266[0]) = 0;
          v271 = 0;
          goto LABEL_370;
        }
        v182 = *(_BYTE *)(v9 + 31);
        v183 = v182 < 0;
        if (v182 >= 0)
          v184 = (const void *)(v9 + 8);
        else
          v184 = *(const void **)(v9 + 8);
        v185 = v182 & 0x7F;
        if (v183)
          v186 = *(_QWORD *)(v9 + 16);
        else
          v186 = v185;
        if (v186 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_403;
        if (v186 >= 0x17)
        {
          v237 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v186 | 7) != 0x17)
            v237 = v186 | 7;
          v238 = v237 + 1;
          v187 = (__int128 *)operator new(v237 + 1);
          v282 = (const char *)(v238 | 0x8000000000000000);
          *(_QWORD *)&__dst = v187;
          *((_QWORD *)&__dst + 1) = v186;
        }
        else
        {
          HIBYTE(v282) = v186;
          v187 = &__dst;
          if (!v186)
            goto LABEL_360;
        }
        memmove(v187, v184, v186);
LABEL_360:
        *((_BYTE *)v187 + v186) = 0;
        v286 = 0;
        v285 = 0u;
        v283 = 0u;
        memset(v284, 0, sizeof(v284));
        v239 = *(_BYTE *)(v176 + 31);
        v240 = v239 < 0;
        v241 = *(_QWORD *)(v176 + 8);
        if (v239 >= 0)
          v241 = v175;
        v242 = v239 & 0x7F;
        if (v240)
          v242 = *(_QWORD *)(v176 + 16);
        v244 = *v299;
        v243 = v299[1];
        *(_QWORD *)&v287 = v241;
        *((_QWORD *)&v287 + 1) = v242;
        v288 = v244;
        v289 = v243;
        sub_22F21BB24((uint64_t)&__dst, (uint64_t)&v287);
        *(_QWORD *)v267 = v282;
        v268[0] = v284[0];
        v268[3] = v284[3];
        *(_OWORD *)v266 = __dst;
        v282 = 0;
        __dst = 0uLL;
        *(_OWORD *)&v267[8] = v283;
        v283 = 0uLL;
        memset(v284, 0, sizeof(v284));
        *(_OWORD *)&v268[1] = *(_OWORD *)&v284[1];
        v269 = v285;
        v270 = v286;
        v285 = 0uLL;
        v286 = 0;
        v271 = 1;
        v303 = (void **)&v285;
        sub_22E576240(&v303);
        if (SHIBYTE(v284[3]) < 0)
          operator delete((void *)v284[1]);
        if (SHIBYTE(v284[0]) < 0)
          operator delete((void *)v283);
        if (SHIBYTE(v282) < 0)
          operator delete((void *)__dst);
LABEL_370:
        sub_22F226D30((uint64_t)v304);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v292);
        if (v300 != &v303)
          free(v300);
LABEL_372:
        sub_22F4433E4((uint64_t)&v309);
        goto LABEL_151;
      }
      v88 = *(const void **)(v9 + 8);
      v87 = v9 + 8;
      v86 = v88;
      v89 = *(_BYTE *)(v87 + 23);
      v90 = v89;
      if (v89 >= 0)
        v91 = (const void *)v87;
      else
        v91 = v86;
      v92 = v89 & 0x7F;
      if (v90 >= 0)
        v93 = v92;
      else
        v93 = *(_QWORD *)(v87 + 8);
      if (v93 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_403;
      if (v93 >= 0x17)
      {
        v191 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v93 | 7) != 0x17)
          v191 = v93 | 7;
        v192 = v191 + 1;
        v94 = operator new(v191 + 1);
        v304[2] = (void *)(v192 | 0x8000000000000000);
        v304[0] = v94;
        v304[1] = (void *)v93;
      }
      else
      {
        HIBYTE(v304[2]) = v93;
        v94 = v304;
        if (!v93)
        {
LABEL_283:
          *((_BYTE *)v94 + v93) = 0;
          *(_OWORD *)v266 = *(_OWORD *)v304;
          *(void **)v267 = v304[2];
          memset(v304, 0, sizeof(v304));
          *(_QWORD *)&v267[16] = 0;
          memset(v268, 0, sizeof(v268));
          *(_QWORD *)&v267[8] = 0;
          memset(v305, 0, sizeof(v305));
          v269 = 0uLL;
          v270 = 0;
          v307 = 0;
          v306 = 0uLL;
          v271 = 1;
          *(_QWORD *)&__dst = &v306;
          sub_22E576240((void ***)&__dst);
          if (SHIBYTE(v305[5]) < 0)
            operator delete(v305[3]);
          if (SHIBYTE(v305[2]) < 0)
            operator delete(v305[0]);
          if (SHIBYTE(v304[2]) < 0)
          {
            v105 = v304[0];
LABEL_150:
            operator delete(v105);
          }
          goto LABEL_151;
        }
      }
      memmove(v94, v91, v93);
      goto LABEL_283;
    }
    v16 = *(_DWORD *)(v9 + 8);
    if (!v16)
    {
      v65 = (llvm::object::Binary *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      FileName = llvm::object::Binary::getFileName((llvm::object::Binary *)v9);
      if (v67 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_403;
      v68 = (const void *)FileName;
      v69 = (void *)v67;
      if (v67 >= 0x17)
      {
        v113 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v113 = v67 | 7;
        v114 = v113 + 1;
        v70 = operator new(v113 + 1);
        v266[1] = v69;
        *(_QWORD *)v267 = v114 | 0x8000000000000000;
        v266[0] = v70;
      }
      else
      {
        v267[7] = v67;
        v70 = v266;
        if (!v67)
          goto LABEL_174;
      }
      memmove(v70, v68, (size_t)v69);
LABEL_174:
      *((_BYTE *)v69 + (_QWORD)v70) = 0;
      v270 = 0;
      v269 = 0u;
      *(_OWORD *)&v267[8] = 0u;
      memset(v268, 0, sizeof(v268));
      v115 = llvm::object::Binary::getFileName(v65);
      v117 = v116;
      Data = llvm::object::Binary::getData(v65);
      *(_QWORD *)&__dst = v115;
      *((_QWORD *)&__dst + 1) = v117;
      v282 = (const char *)Data;
      *(_QWORD *)&v283 = v119;
      sub_22F21BB24((uint64_t)v266, (uint64_t)&__dst);
      *(_OWORD *)v304 = *(_OWORD *)v266;
      v120 = *(void **)v267;
      v266[1] = 0;
      memset(v267, 0, sizeof(v267));
      v266[0] = 0;
      *(_OWORD *)v305 = *(_OWORD *)&v267[8];
      v305[2] = (void *)v268[0];
      memset(v268, 0, sizeof(v268));
      v305[5] = (void *)v268[3];
      *(_OWORD *)&v305[3] = *(_OWORD *)&v268[1];
      v306 = v269;
      v304[2] = v120;
      v307 = v270;
      v269 = 0uLL;
      v270 = 0;
      LOBYTE(v308) = 1;
      *(_QWORD *)&v292 = &v269;
      v121 = (void ***)&v292;
      goto LABEL_244;
    }
    if (v16 != 3)
    {
      if (v16 == 21)
        v71 = (llvm::object::Binary *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      else
        v71 = 0;
      v72 = llvm::object::Binary::getFileName(v71);
      if (v73 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_403;
      v74 = (const void *)v72;
      v75 = (void *)v73;
      if (v73 >= 0x17)
      {
        v122 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v73 | 7) != 0x17)
          v122 = v73 | 7;
        v123 = v122 + 1;
        v76 = operator new(v122 + 1);
        v266[1] = v75;
        *(_QWORD *)v267 = v123 | 0x8000000000000000;
        v266[0] = v76;
      }
      else
      {
        v267[7] = v73;
        v76 = v266;
        if (!v73)
        {
LABEL_179:
          *((_BYTE *)v75 + (_QWORD)v76) = 0;
          v270 = 0;
          v269 = 0u;
          *(_OWORD *)&v267[8] = 0u;
          memset(v268, 0, sizeof(v268));
          v124 = llvm::object::Binary::getFileName(v71);
          v126 = v125;
          v127 = llvm::object::Binary::getData(v71);
          *(_QWORD *)&__dst = v124;
          *((_QWORD *)&__dst + 1) = v126;
          v282 = (const char *)v127;
          *(_QWORD *)&v283 = v128;
          sub_22F21BB24((uint64_t)v266, (uint64_t)&__dst);
          *(_OWORD *)v304 = *(_OWORD *)v266;
          v129 = *(void **)v267;
          v266[1] = 0;
          memset(v267, 0, sizeof(v267));
          v266[0] = 0;
          *(_OWORD *)v305 = *(_OWORD *)&v267[8];
          v305[2] = (void *)v268[0];
          memset(v268, 0, sizeof(v268));
          v305[5] = (void *)v268[3];
          *(_OWORD *)&v305[3] = *(_OWORD *)&v268[1];
          v306 = v269;
          v304[2] = v129;
          v307 = v270;
          v269 = 0uLL;
          v270 = 0;
          LOBYTE(v308) = 1;
          *(_QWORD *)&v292 = &v269;
          sub_22E576240((void ***)&v292);
          if (SHIBYTE(v268[3]) < 0)
            operator delete((void *)v268[1]);
          if ((SHIBYTE(v268[0]) & 0x80000000) == 0)
            goto LABEL_248;
LABEL_247:
          operator delete(*(void **)&v267[8]);
LABEL_248:
          if ((v267[7] & 0x80000000) != 0)
            operator delete(v266[0]);
LABEL_250:
          sub_22F442B90((uint64_t)v272, (uint64_t)v304);
          if ((_BYTE)v308)
          {
            v266[0] = &v306;
            sub_22E576240((void ***)v266);
            if (SHIBYTE(v305[5]) < 0)
              operator delete(v305[3]);
            if (SHIBYTE(v305[2]) < 0)
              operator delete(v305[0]);
            if (SHIBYTE(v304[2]) < 0)
            {
              v106 = v304[0];
LABEL_257:
              operator delete(v106);
            }
          }
          goto LABEL_258;
        }
      }
      memmove(v76, v74, (size_t)v75);
      goto LABEL_179;
    }
    v255 = (llvm::Module *)(*v3 & 0xFFFFFFFFFFFFFFF8);
    v17 = llvm::object::Binary::getFileName((llvm::object::Binary *)v9);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_403;
    v19 = (const void *)v17;
    v20 = v18;
    if (v18 >= 0x17)
    {
      v107 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v107 = v18 | 7;
      v108 = v107 + 1;
      v21 = (__int128 *)operator new(v107 + 1);
      v282 = (const char *)(v108 | 0x8000000000000000);
      *(_QWORD *)&__dst = v21;
      *((_QWORD *)&__dst + 1) = v20;
    }
    else
    {
      HIBYTE(v282) = v18;
      v21 = &__dst;
      if (!v18)
        goto LABEL_162;
    }
    memmove(v21, v19, v20);
LABEL_162:
    *((_BYTE *)v21 + v20) = 0;
    v286 = 0;
    v285 = 0u;
    v283 = 0u;
    memset(v284, 0, sizeof(v284));
    for (i = *(_QWORD **)(v2 + 432); i; i = (_QWORD *)*i)
    {
      v110 = i[4];
      if ((unint64_t)v255 >= v110)
      {
        if (v110 >= (unint64_t)v255)
        {
          v203 = (llvm::Module **)*((_QWORD *)v255 + 6);
          v204 = (llvm::Module **)*((_QWORD *)v255 + 7);
          if (v203 == v204)
          {
            v205 = 0;
            v206 = 0uLL;
          }
          else
          {
            do
            {
              llvm::Module::materializeMetadata(*v203);
              if ((_QWORD)v287)
              {
LABEL_313:
                v213 = llvm::object::Binary::getFileName(v255);
                LOWORD(v295) = 1283;
                *(_QWORD *)&v292 = "cannot materialize metadata in '";
                v293 = (const char *)v213;
                v294 = v214;
                v304[0] = &v292;
                v304[2] = "'";
                LOWORD(v305[1]) = 770;
                v300 = (void *)v287;
                *(_QWORD *)&v287 = 0;
                llvm::air::ErrorHandler::error();
                if (v300)
                  (*(void (**)(void *))(*(_QWORD *)v300 + 8))(v300);
                LOBYTE(v266[0]) = 0;
                v271 = 0;
                if ((_QWORD)v287)
                  (*(void (**)(_QWORD))(*(_QWORD *)v287 + 8))(v287);
                goto LABEL_317;
              }
              v207 = *v203;
              v304[0] = "llvm.commandline";
              LOWORD(v305[1]) = 259;
              v208 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v207, (const llvm::Twine *)v304);
              if (v208)
                llvm::Module::eraseNamedMetadata(*v203, v208);
              v209 = *v203;
              v304[0] = "llvm_utils.sources";
              LOWORD(v305[1]) = 259;
              v210 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v209, (const llvm::Twine *)v304);
              if (v210)
                llvm::Module::eraseNamedMetadata(*v203, v210);
              v211 = *v203;
              v304[0] = "llvm_utils.workingdir";
              LOWORD(v305[1]) = 259;
              v212 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v211, (const llvm::Twine *)v304);
              if (v212)
                llvm::Module::eraseNamedMetadata(*v203, v212);
              ++v203;
            }
            while (v203 != v204);
            v206 = v285;
            v205 = v286;
          }
          *(_OWORD *)v266 = __dst;
          *(_QWORD *)v267 = v282;
          v282 = 0;
          __dst = 0uLL;
          *(_OWORD *)&v267[8] = v283;
          v268[0] = v284[0];
          v283 = 0uLL;
          memset(v284, 0, sizeof(v284));
          v268[3] = v284[3];
          *(_OWORD *)&v268[1] = *(_OWORD *)&v284[1];
          v269 = v206;
          v270 = v205;
          goto LABEL_169;
        }
        ++i;
      }
    }
    v111 = (llvm::Module **)*((_QWORD *)v255 + 6);
    v112 = (llvm::Module **)*((_QWORD *)v255 + 7);
    if (v111 == v112)
      goto LABEL_168;
    v261 = 1;
    v258 = (llvm::Module **)*((_QWORD *)v255 + 7);
    do
    {
      llvm::Module::materializeMetadata(*v111);
      if ((_QWORD)v287)
        goto LABEL_313;
      v130 = *v111;
      v304[0] = "llvm.commandline";
      LOWORD(v305[1]) = 259;
      v131 = llvm::Module::getNamedMetadata(v130, (const llvm::Twine *)v304);
      v132 = *v111;
      v304[0] = "llvm_utils.sources";
      LOWORD(v305[1]) = 259;
      v133 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v132, (const llvm::Twine *)v304);
      v134 = *v111;
      v304[0] = "llvm_utils.workingdir";
      LOWORD(v305[1]) = 259;
      v135 = llvm::Module::getNamedMetadata(v134, (const llvm::Twine *)v304);
      v136 = (llvm::NamedMDNode *)v131;
      v137 = (llvm::NamedMDNode *)v135;
      if (v136 && v133 && v135)
      {
        v265 = v136;
        v138 = llvm::NamedMDNode::getNumOperands(v136);
        if (v138)
        {
          v139 = v138;
          v263 = v137;
          v260 = v111;
          v140 = 0;
          v136 = v265;
          do
          {
            v141 = llvm::NamedMDNode::getOperand(v136);
            v142 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v141 - 8 * *(unsigned int *)(v141 + 8)));
            v144 = v143;
            v145 = v133;
            v146 = llvm::NamedMDNode::getOperand(v133);
            v147 = llvm::NamedMDNode::getOperand(v263);
            v148 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v147 - 8 * *(unsigned int *)(v147 + 8)));
            v150 = v149;
            v304[0] = &v304[2];
            v304[1] = (void *)0x800000000;
            v151 = *(unsigned int *)(v146 + 8);
            v152 = v146;
            if ((_DWORD)v151)
            {
              do
              {
                v153 = *(_QWORD *)(v152 - 8 * *(unsigned int *)(v146 + 8));
                *(_QWORD *)&v292 = llvm::MDString::getString(*(llvm::MDString **)(v153
                                                                                - 8 * *(unsigned int *)(v153 + 8)));
                *((_QWORD *)&v292 + 1) = v154;
                v155 = *(_QWORD *)(v152 - 8 * *(unsigned int *)(v146 + 8));
                *(_QWORD *)&v287 = llvm::MDString::getString(*(llvm::MDString **)(v155
                                                                                - 8 * *(unsigned int *)(v155 + 8)
                                                                                + 8));
                *((_QWORD *)&v287 + 1) = v156;
                sub_22F441798((unint64_t)v304, &v292, &v287);
                v152 += 8;
                --v151;
              }
              while (v151);
              v157 = (void **)v304[0];
              v158 = LODWORD(v304[1]);
            }
            else
            {
              v158 = 0;
              v157 = &v304[2];
            }
            sub_22F21B884((uint64_t)&__dst, v142, v144, v148, v150, (uint64_t)v157, v158);
            v133 = v145;
            if (v304[0] != &v304[2])
              free(v304[0]);
            ++v140;
            v136 = v265;
          }
          while (v140 != v139);
          v2 = a2;
          v111 = v260;
          v112 = v258;
          v137 = v263;
        }
        else
        {
          v136 = v265;
        }
LABEL_203:
        llvm::Module::eraseNamedMetadata(*v111, v136);
        goto LABEL_204;
      }
      if (*(char *)(v2 + 399) < 0)
        v159 = *(_QWORD *)(v2 + 384);
      else
        v159 = *(unsigned __int8 *)(v2 + 399);
      v261 &= v159 == 0;
      if (v136)
        goto LABEL_203;
LABEL_204:
      if (v133)
        llvm::Module::eraseNamedMetadata(*v111, v133);
      if (v137)
        llvm::Module::eraseNamedMetadata(*v111, v137);
      ++v111;
    }
    while (v111 != v112);
    if ((v261 & 1) != 0)
      goto LABEL_168;
    v160 = llvm::object::Binary::getFileName(v255);
    if (v161 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_403;
    v162 = (const void *)v160;
    v163 = (void *)v161;
    if (v161 >= 0x17)
    {
      v230 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v161 | 7) != 0x17)
        v230 = v161 | 7;
      v231 = v230 + 1;
      v164 = operator new(v230 + 1);
      v304[2] = (void *)(v231 | 0x8000000000000000);
      v304[0] = v164;
      v304[1] = v163;
LABEL_342:
      memmove(v164, v162, (size_t)v163);
      goto LABEL_343;
    }
    HIBYTE(v304[2]) = v161;
    v164 = v304;
    if (v161)
      goto LABEL_342;
LABEL_343:
    *((_BYTE *)v163 + (_QWORD)v164) = 0;
    v307 = 0;
    v306 = 0u;
    memset(v305, 0, sizeof(v305));
    if (SHIBYTE(v282) < 0)
      operator delete((void *)__dst);
    __dst = *(_OWORD *)v304;
    v282 = (const char *)v304[2];
    HIBYTE(v304[2]) = 0;
    LOBYTE(v304[0]) = 0;
    if (SHIBYTE(v284[0]) < 0)
      operator delete((void *)v283);
    v283 = *(_OWORD *)v305;
    v284[0] = v305[2];
    HIBYTE(v305[2]) = 0;
    LOBYTE(v305[0]) = 0;
    if (SHIBYTE(v284[3]) < 0)
      operator delete((void *)v284[1]);
    *(_OWORD *)&v284[1] = *(_OWORD *)&v305[3];
    v284[3] = v305[5];
    HIBYTE(v305[5]) = 0;
    LOBYTE(v305[3]) = 0;
    sub_22F2A5ACC((void **)&v285);
    v285 = 0uLL;
    v286 = 0;
    v307 = 0;
    v306 = 0uLL;
    *(_QWORD *)&v292 = &v306;
    sub_22E576240((void ***)&v292);
    if (SHIBYTE(v305[5]) < 0)
      operator delete(v305[3]);
    if (SHIBYTE(v305[2]) < 0)
      operator delete(v305[0]);
    if (SHIBYTE(v304[2]) < 0)
      operator delete(v304[0]);
    v232 = (void *)llvm::object::Binary::getFileName(v255);
    v234 = v233;
    v235 = (void *)llvm::object::Binary::getData(v255);
    v304[0] = v232;
    v304[1] = v234;
    v304[2] = v235;
    v305[0] = v236;
    sub_22F21BB24((uint64_t)&__dst, (uint64_t)v304);
LABEL_168:
    *(_QWORD *)v267 = v282;
    v268[0] = v284[0];
    v268[3] = v284[3];
    *(_OWORD *)v266 = __dst;
    v282 = 0;
    __dst = 0uLL;
    *(_OWORD *)&v267[8] = v283;
    v283 = 0uLL;
    memset(v284, 0, sizeof(v284));
    *(_OWORD *)&v268[1] = *(_OWORD *)&v284[1];
    v269 = v285;
    v270 = v286;
LABEL_169:
    v285 = 0uLL;
    v286 = 0;
    v271 = 1;
LABEL_317:
    *(_QWORD *)&v292 = &v285;
    v104 = (void **)&v292;
LABEL_144:
    sub_22E576240((void ***)v104);
    if (SHIBYTE(v284[3]) < 0)
      operator delete((void *)v284[1]);
    if (SHIBYTE(v284[0]) < 0)
      operator delete((void *)v283);
    if (SHIBYTE(v282) < 0)
    {
      v105 = (void *)__dst;
      goto LABEL_150;
    }
LABEL_151:
    sub_22F442B90((uint64_t)v272, (uint64_t)v266);
    if (v271)
    {
      v304[0] = &v269;
      sub_22E576240((void ***)v304);
      if (SHIBYTE(v268[3]) < 0)
        operator delete((void *)v268[1]);
      if (SHIBYTE(v268[0]) < 0)
        operator delete(*(void **)&v267[8]);
      if ((v267[7] & 0x80000000) != 0)
      {
        v106 = v266[0];
        goto LABEL_257;
      }
    }
LABEL_258:
    if (!(_BYTE)v275)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 48) = 0;
      return sub_22F442C38((uint64_t)&v276);
    }
    if (*(char *)(v2 + 399) < 0)
    {
      if (!*(_QWORD *)(v2 + 384))
        goto LABEL_271;
    }
    else if (!*(_BYTE *)(v2 + 399))
    {
      goto LABEL_271;
    }
    if (v273[6] == v273[7])
      goto LABEL_271;
    v190 = *v257;
    v305[0] = v272[2];
    v305[3] = v273[2];
    v306 = *(_OWORD *)&v273[5];
    *(_OWORD *)&v304[1] = *(_OWORD *)v272;
    memset(v272, 0, sizeof(v272));
    *(_OWORD *)&v305[1] = *(_OWORD *)v273;
    memset(v273, 0, sizeof(v273));
    *(_OWORD *)&v305[4] = *(_OWORD *)&v273[3];
    v304[0] = v190;
    v307 = v273[7];
    v308 = v274;
    v274 = 0;
    sub_22F44170C((uint64_t)&v276, (uint64_t *)v304);
    v266[0] = (char *)&v306 + 8;
    sub_22E576240((void ***)v266);
    if (SBYTE7(v306) < 0)
      operator delete(v305[4]);
    if (SHIBYTE(v305[3]) < 0)
      operator delete(v305[1]);
    if (SHIBYTE(v305[0]) < 0)
      operator delete(v304[1]);
    if ((_BYTE)v275)
    {
LABEL_271:
      v304[0] = &v273[6];
      sub_22E576240((void ***)v304);
      if (SHIBYTE(v273[5]) < 0)
        operator delete(v273[3]);
      if (SHIBYTE(v273[2]) < 0)
        operator delete(v273[0]);
      if (SHIBYTE(v272[2]) < 0)
        operator delete(v272[0]);
    }
    v3 = v257 + 2;
  }
  while (v257 + 2 != v254);
LABEL_2:
  v4 = *(_QWORD *)(v2 + 280);
  if (!v4)
    goto LABEL_401;
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_403;
  v6 = *(const void **)v4;
  if (v5 >= 0x17)
  {
    v245 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v245 = v5 | 7;
    v246 = v245 + 1;
    v7 = operator new(v245 + 1);
    v272[1] = (void *)v5;
    v272[2] = (void *)(v246 | 0x8000000000000000);
    v272[0] = v7;
    goto LABEL_377;
  }
  HIBYTE(v272[2]) = *(_QWORD *)(v4 + 8);
  v7 = v272;
  if (v5)
LABEL_377:
    memmove(v7, v6, v5);
  *((_BYTE *)v7 + v5) = 0;
  v274 = 0;
  memset(v273, 0, sizeof(v273));
  v247 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)v266 = *(_OWORD *)v4;
  *(_OWORD *)v267 = v247;
  sub_22F21BB24((uint64_t)v272, (uint64_t)v266);
  *(_OWORD *)v304 = *(_OWORD *)v272;
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)v305 = *(_OWORD *)v273;
  v304[2] = v272[2];
  v305[2] = v273[2];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)&v305[3] = *(_OWORD *)&v273[3];
  v248 = v273[6];
  v305[5] = v273[5];
  v249 = v273[7];
  v306 = *(_OWORD *)&v273[6];
  v250 = v274;
  v307 = v274;
  v274 = 0;
  LOBYTE(v308) = 1;
  *(_QWORD *)&__dst = &v273[6];
  sub_22E576240((void ***)&__dst);
  if (SHIBYTE(v273[5]) < 0)
    operator delete(v273[3]);
  if (SHIBYTE(v273[2]) < 0)
    operator delete(v273[0]);
  if (SHIBYTE(v272[2]) < 0)
    operator delete(v272[0]);
  if (*(char *)(v2 + 399) < 0)
  {
    if (!*(_QWORD *)(v2 + 384))
      goto LABEL_395;
  }
  else if (!*(_BYTE *)(v2 + 399))
  {
    goto LABEL_395;
  }
  if (v248 != v249)
  {
    v272[0] = (void *)(*(_QWORD *)(v2 + 280) | 6);
    *(_OWORD *)&v272[1] = *(_OWORD *)v304;
    v251 = v304[2];
    memset(v304, 0, sizeof(v304));
    *(_OWORD *)&v273[1] = *(_OWORD *)v305;
    v273[0] = v251;
    v273[3] = v305[2];
    memset(v305, 0, sizeof(v305));
    *(_OWORD *)&v273[4] = *(_OWORD *)&v305[3];
    v273[6] = v305[5];
    v273[7] = v248;
    v274 = v249;
    v275 = v250;
    v306 = 0uLL;
    v307 = 0;
    sub_22F44170C((uint64_t)&v276, (uint64_t *)v272);
    v266[0] = &v273[7];
    sub_22E576240((void ***)v266);
    if (SHIBYTE(v273[6]) < 0)
      operator delete(v273[4]);
    if (SHIBYTE(v273[3]) < 0)
      operator delete(v273[1]);
    if (SHIBYTE(v273[0]) < 0)
      operator delete(v272[1]);
  }
LABEL_395:
  v272[0] = &v306;
  sub_22E576240((void ***)v272);
  if (SHIBYTE(v305[5]) < 0)
    operator delete(v305[3]);
  if (SHIBYTE(v305[2]) < 0)
    operator delete(v305[0]);
  if (SHIBYTE(v304[2]) < 0)
    operator delete(v304[0]);
LABEL_401:
  *(_QWORD *)a1 = v276;
  *(_QWORD *)(a1 + 8) = v277;
  v276 = 0;
  v277 = 0;
  *(_DWORD *)(a1 + 16) = v278;
  v278 = 0;
  *(_OWORD *)(a1 + 24) = v279;
  *(_QWORD *)(a1 + 40) = v280;
  v280 = 0;
  v279 = 0uLL;
  *(_BYTE *)(a1 + 48) = 1;
  return sub_22F442C38((uint64_t)&v276);
}

uint64_t sub_22F21B2FC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  _QWORD *v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v27;
  _QWORD v30[2];
  char v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  llvm *v35[2];
  unsigned int v36;
  void *__p;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  _BYTE v47[32];

  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v38 = 0;
  v39 = 0;
  __p = 0;
  llvm::StringTableBuilder::StringTableBuilder();
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v2 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v2)
  {
    for (i = *(_QWORD **)(a1 + 136); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(_QWORD **)(a1 + 136);
  }
  v4 = *(_QWORD *)(a1 + 136) + 8 * v2;
  if (i != (_QWORD *)v4)
  {
    v5 = (_QWORD *)*i;
    do
    {
      if (llvm::Module::getNamedValue())
      {
        v6 = (unint64_t *)*v5;
        v32 = v5 + 3;
        v33 = v6;
        sub_22E4CC988((uint64_t)v35, (uint64_t)&v32);
      }
      do
      {
        v7 = (_QWORD *)i[1];
        ++i;
        v5 = v7;
        if (v7)
          v8 = v5 + 1 == 0;
        else
          v8 = 1;
      }
      while (v8);
    }
    while (i != (_QWORD *)v4);
  }
  sub_22F442C84(&v32, *(unint64_t **)(a1 + 352), *(unint64_t **)(a1 + 360));
  v9 = v32;
  v10 = v34;
  if (v32 == v34)
  {
LABEL_51:
    llvm::air::AIRDyldTablesEmitter::emit();
  }
  else
  {
    v11 = v33;
    while (1)
    {
      sub_22F21B60C((uint64_t)v30, a1, *v9);
      if (!v31)
        break;
      v12 = v30[1];
      llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
      *(_QWORD *)&v46 = llvm::StringTableBuilder::add();
      *((_QWORD *)&v46 + 1) = v12;
      sub_22F442CEC((uint64_t)v47, (uint64_t)v41, (uint64_t *)&v46);
      if (v47[16])
      {
        v13 = v44;
        if (v44 >= v45)
        {
          v15 = v43;
          v16 = (v44 - v43) >> 4;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            abort();
          v18 = v45 - v43;
          if ((v45 - v43) >> 3 > v17)
            v17 = v18 >> 3;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 >> 60)
              sub_22E3B3F8C();
            v20 = (char *)operator new(16 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_OWORD *)v21 = v46;
          v22 = v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
              v22 -= 16;
              v13 -= 16;
            }
            while (v13 != v15);
            v13 = v43;
          }
          v14 = v21 + 16;
          v43 = v22;
          v44 = v21 + 16;
          v45 = &v20[16 * v19];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_OWORD *)v44 = v46;
          v14 = v13 + 16;
        }
        v44 = v14;
      }
      v23 = v9 + 1;
      v9 = v11;
      if (v23 != v11)
      {
        v9 = v23;
        do
        {
          v24 = *v9;
          v25 = *v9 & 6;
          if (*v9 >= 8 && v25 == 4)
          {
            if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) == 2)
              goto LABEL_50;
          }
          else
          {
            v27 = v24 >= 8 && v25 == 0;
            if (v27 && *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8) == 21)
              goto LABEL_50;
          }
          ++v9;
        }
        while (v9 != v11);
        v9 = v11;
      }
LABEL_50:
      if (v9 == v10)
        goto LABEL_51;
    }
  }
  sub_22F244D40((uint64_t)v41);
  llvm::StringTableBuilder::~StringTableBuilder((llvm::StringTableBuilder *)&v40);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  return llvm::deallocate_buffer(v35[0], (void *)(16 * v36));
}

uint64_t sub_22F21B60C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  llvm::object::MetalLibObjectFile *v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD *v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v3 = result;
  v17 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 8 && (a3 & 6) == 4)
  {
    v4 = *(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFF8) + 111);
    if (v4 >= 0)
      v5 = (a3 & 0xFFFFFFFFFFFFFFF8) + 88;
    else
      v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 88);
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 96);
    if (v4 >= 0)
      v6 = v4 & 0x7F;
    goto LABEL_20;
  }
  if (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 8) == 21)
    v7 = (llvm::object::MetalLibObjectFile *)(a3 & 0xFFFFFFFFFFFFFFF8);
  else
    v7 = 0;
  result = llvm::object::MetalLibObjectFile::libraryInstallName(v7);
  v5 = v14;
  if ((v16 & 1) == 0 || (v14 = 0, !v5))
  {
    v6 = v15;
LABEL_20:
    *(_QWORD *)v3 = v5;
    *(_QWORD *)(v3 + 8) = v6;
    *(_BYTE *)(v3 + 16) = 1;
    return result;
  }
  v10 = 1283;
  v9[0] = "cannot get library install name in '";
  v9[2] = llvm::object::Binary::getFileName(v7);
  v9[3] = v8;
  v11 = v9;
  v12 = "'";
  v13 = 770;
  llvm::air::ErrorHandler::error();
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 16) = 0;
  if ((v16 & 1) != 0)
  {
    result = v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F21B774(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[24];

  sub_22F4436C4((uint64_t)v15, (uint64_t)a1, a2);
  if (v15[16])
  {
    v5 = (_QWORD *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = *a2;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = (_QWORD *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

void sub_22F21B884(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  __int128 *p_dst;
  size_t v15;
  size_t v16;
  void **v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  const void *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  const void *v30;
  void *p_p;
  uint64_t v32;
  uint64_t v33;
  __int128 __p;
  unint64_t v35;
  __int128 __dst;
  unint64_t v37;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_45;
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v37 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v37) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v17 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = __dst;
  *(_QWORD *)(a1 + 40) = v37;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_45:
    abort();
  if (a5 >= 0x17)
  {
    v19 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v19 = a5 | 7;
    v20 = v19 + 1;
    v18 = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = a5;
    v37 = v20 | 0x8000000000000000;
    *(_QWORD *)&__dst = v18;
    goto LABEL_18;
  }
  HIBYTE(v37) = a5;
  v18 = &__dst;
  if (a5)
LABEL_18:
    memmove(v18, a4, a5);
  *((_BYTE *)v18 + a5) = 0;
  v21 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = __dst;
  *(_QWORD *)(a1 + 64) = v37;
  if (a7)
  {
    v22 = a6 + 32 * a7;
    while (1)
    {
      v23 = *(_QWORD *)(a6 + 8);
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_45;
      v24 = *(char **)(a1 + 80);
      v25 = *(const void **)a6;
      if (v23 >= 0x17)
        break;
      HIBYTE(v37) = *(_QWORD *)(a6 + 8);
      v26 = &__dst;
      if (v23)
        goto LABEL_30;
LABEL_31:
      *((_BYTE *)v26 + v23) = 0;
      v29 = *(_QWORD *)(a6 + 24);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_45;
      v30 = *(const void **)(a6 + 16);
      if (v29 >= 0x17)
      {
        v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v32 = v29 | 7;
        v33 = v32 + 1;
        p_p = operator new(v32 + 1);
        *((_QWORD *)&__p + 1) = v29;
        v35 = v33 | 0x8000000000000000;
        *(_QWORD *)&__p = p_p;
      }
      else
      {
        HIBYTE(v35) = *(_QWORD *)(a6 + 24);
        p_p = &__p;
        if (!v29)
          goto LABEL_39;
      }
      memmove(p_p, v30, v29);
LABEL_39:
      *((_BYTE *)p_p + v29) = 0;
      sub_22F2266F4((char **)(a1 + 72), v24, &__dst, &__p);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v37) < 0)
        operator delete((void *)__dst);
      a6 += 32;
      if (a6 == v22)
        return;
    }
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v26 = (__int128 *)operator new(v27 + 1);
    *((_QWORD *)&__dst + 1) = v23;
    v37 = v28 | 0x8000000000000000;
    *(_QWORD *)&__dst = v26;
LABEL_30:
    memmove(v26, v25, v23);
    goto LABEL_31;
  }
}

void sub_22F21BB24(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  const void *v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char **v11;
  const void *v12;
  void *p_p;
  uint64_t v14;
  uint64_t v15;
  __int128 __p;
  unint64_t v17;
  __int128 __dst;
  unint64_t v19;

  MEMORY[0x2348A0C14](a1 + 24, "");
  MEMORY[0x2348A0C14](a1 + 48, "");
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
LABEL_21:
    abort();
  v5 = *(char **)(a1 + 80);
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v19 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v19) = *(_QWORD *)(a2 + 8);
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v6, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v10 = *(_QWORD *)(a2 + 24);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_21;
  v11 = (char **)(a1 + 72);
  v12 = *(const void **)(a2 + 16);
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    *((_QWORD *)&__p + 1) = v10;
    v17 = v15 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_16;
  }
  HIBYTE(v17) = v10;
  p_p = &__p;
  if (v10)
LABEL_16:
    memmove(p_p, v12, v10);
  *((_BYTE *)p_p + v10) = 0;
  sub_22F2266F4(v11, v5, &__dst, &__p);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__dst);
}

uint64_t sub_22F21BCBC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  sub_22F2A5ACC((void **)(a1 + 72));
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  return a1;
}

uint64_t sub_22F21BD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  char *v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v43;
  llvm::NamedMDNode *v44;
  llvm::NamedMDNode *v45;
  llvm::NamedMDNode *v46;
  llvm::NamedMDNode *v47;
  llvm::NamedMDNode *v48;
  llvm::NamedMDNode *v49;
  void **v50;
  uint64_t v51;
  void **v52;
  void (**v53)(void **);
  char v54;
  BOOL v55;
  void *v56;
  size_t v57;
  size_t v58;
  char v59;
  void *v60;
  size_t v61;
  char v62;
  void *v63;
  size_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  __int128 v71;
  char *v72;
  unint64_t v73;
  BOOL v74;
  char *v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  const void *v80;
  int64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t *v84;
  llvm::Module *v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *k;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t m;
  uint64_t v107;
  char *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  void ***v119;
  void **v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  BOOL v125;
  uint64_t v126;
  uint64_t *n;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  void ***v135;
  void **v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  llvm::Module *v140;
  uint64_t v141;
  uint64_t *v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  const void **v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *ii;
  unint64_t v172;
  int v173;
  uint64_t v174;
  const void **v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  unint64_t *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  void *v199;
  unint64_t *v200;
  unint64_t v201;
  _QWORD *v202;
  char *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *jj;
  unint64_t v212;
  int v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  void *v222;
  unint64_t *v223;
  unint64_t *v224;
  unint64_t v225;
  _QWORD *v226;
  char *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  void *v231;
  void **v232;
  unint64_t v233;
  uint64_t *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  BOOL v253;
  uint64_t v254;
  BOOL v255;
  uint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  char *v261;
  char *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  __int128 *v267;
  uint64_t v268;
  void **v269;
  void **v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  _BYTE v277[24];
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  llvm::Module *v283;
  void *__p[2];
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  __int128 v288;
  _QWORD v289[2];
  void *v290[2];
  unint64_t v291;
  void **v292;
  __int16 v293;
  void *v294[2];
  const char *v295;
  unint64_t *v296;
  __int16 v297;
  const void **v298;
  uint64_t v299;
  _BYTE *v300;
  _BYTE *v301;
  char v302;
  uint64_t v303;
  int v304[6];
  _QWORD v305[2];
  uint64_t v306;
  _QWORD v307[2];
  uint64_t v308;
  _QWORD v309[3];
  uint64_t v310;
  int v311[6];
  _QWORD v312[4];
  _QWORD v313[10];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  uint64_t v317;
  llvm::Module *v318;
  void *v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  void *v323[4];
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  int v340;
  __int128 v341;
  __int128 v342;
  int v343;
  int v344;
  __int128 v345;
  __int128 v346;
  int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  int v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;

  v0 = MEMORY[0x24BDAC7A8]();
  v359 = *MEMORY[0x24BDAC8D0];
  sub_22F442820(&v281, *(llvm::LLVMContext **)(v0 + 8), *(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 280);
  if (v1)
    sub_22F22B91C(v0 + 88, v1);
  if (*(_DWORD *)(v0 + 116))
  {
    sub_22F217AD4(v0);
    if (*(_DWORD *)(v0 + 116))
      sub_22F4412A8(v0);
  }
  if (*(_DWORD *)(*(_QWORD *)(v0 + 16) + 120))
    goto LABEL_9;
  if (*(_DWORD *)(v0 + 200))
  {
    sub_22F218688(v0);
LABEL_9:
    v2 = 0;
    goto LABEL_10;
  }
  if (*(_DWORD *)(v0 + 116) && !sub_22F218CF0(v0))
    goto LABEL_9;
  sub_22F21932C((uint64_t)v277, v0);
  if (!v280)
    goto LABEL_9;
  v5 = *(_QWORD *)(v0 + 8);
  v267 = (__int128 *)(v0 + 24);
  if (*(char *)(v0 + 47) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v0 + 24);
    v285 = *(_QWORD *)(v0 + 40);
  }
  v286 = *(_OWORD *)(v0 + 48);
  v287 = *(_QWORD *)(v0 + 64);
  v6 = *(_BYTE *)(v0 + 471);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = v0 + 448;
  else
    v8 = *(_QWORD *)(v0 + 448);
  v9 = v6 & 0x7F;
  if (v7)
    v10 = *(_QWORD *)(v0 + 456);
  else
    v10 = v9;
  MEMORY[0x23489DF98](v294, v5, __p, v8, v10);
  if (SHIBYTE(v285) < 0)
    operator delete(__p[0]);
  v11 = *(unsigned int *)(v0 + 176);
  if ((_DWORD)v11)
  {
    for (i = *(uint64_t **)(v0 + 168); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(v0 + 168);
  }
  v268 = *(_QWORD *)(v0 + 168) + 8 * v11;
  if (i == (uint64_t *)v268)
  {
LABEL_94:
    llvm::air::AIRModuleLinker::takeModule((llvm::air::AIRModuleLinker *)v294);
    v298 = (const void **)&v300;
    v299 = 0x800000000;
    v305[0] = &v306;
    v305[1] = 0x400000000;
    v307[0] = &v308;
    v307[1] = 0x200000000;
    v309[1] = &v310;
    v309[2] = 0x800000000;
    v312[2] = v313;
    v312[3] = 0x800000000;
    v313[8] = v314;
    v313[9] = 0x400000000;
    v314[4] = v315;
    v314[5] = 0x400000000;
    v315[4] = v316;
    v315[5] = 0x400000000;
    v316[4] = &v317;
    v316[5] = 0x400000000;
    llvm::air::AIRInfoFinder::processModule();
    v318 = v283;
    v319 = &v298;
    *(_QWORD *)&v324 = 0;
    *(_QWORD *)&v321 = 0;
    v320 = 0;
    DWORD2(v321) = 0;
    v322 = 0u;
    memset(v323, 0, 28);
    llvm::air::AIRMDGlobalsHandler::processModule((llvm::air::AIRMDGlobalsHandler *)&v318);
    llvm::air::AIRMDGlobalsHandler::rebuildCompilerUsedListImpl((llvm::air::AIRMDGlobalsHandler *)&v318);
    v290[0] = "air.vertex";
    v293 = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (NamedMetadata)
      llvm::Module::eraseNamedMetadata(v283, NamedMetadata);
    v290[0] = "air.fragment";
    v293 = 259;
    v43 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v43)
      llvm::Module::eraseNamedMetadata(v283, v43);
    v290[0] = "air.kernel";
    v293 = 259;
    v44 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v44)
      llvm::Module::eraseNamedMetadata(v283, v44);
    v290[0] = "air.visible";
    v293 = 259;
    v45 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v45)
      llvm::Module::eraseNamedMetadata(v283, v45);
    v290[0] = "air.intersection";
    v293 = 259;
    v46 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v46)
      llvm::Module::eraseNamedMetadata(v283, v46);
    v290[0] = "air.mesh";
    v293 = 259;
    v47 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v47)
      llvm::Module::eraseNamedMetadata(v283, v47);
    v290[0] = "air.object";
    v293 = 259;
    v48 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v48)
      llvm::Module::eraseNamedMetadata(v283, v48);
    v290[0] = "air.ci";
    v293 = 259;
    v49 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v283, (const llvm::Twine *)v290);
    if (v49)
      llvm::Module::eraseNamedMetadata(v283, v49);
    llvm::air::AIRInfoFinder::reset((llvm::air::AIRInfoFinder *)&v298);
    llvm::air::AIRInfoFinder::processModule();
    sub_22F2275AC((uint64_t)&v318);
    sub_22F227614((uint64_t)&v298);
    if (sub_22F443104(v0) || *(_DWORD *)(v0 + 148))
      sub_22F21B2FC(v0);
    *(_QWORD *)(v0 + 472) = v0 + 88;
    sub_22F441ABC((uint64_t)&v298, (uint64_t)v267, v0 + 472);
    v357 = 0uLL;
    v358 = 0;
    sub_22F21E7F0();
    sub_22F21E838();
    v290[0] = &off_24FCAFFC8;
    v290[1] = &v298;
    v292 = v290;
    LOBYTE(v318) = 0;
    v319 = &off_24FCAFFC8;
    v320 = (uint64_t)&v298;
    *((_QWORD *)&v321 + 1) = &v319;
    v322 = 0uLL;
    v323[0] = (void *)0x800000000;
    sub_22F21E87C((uint64_t)&v357, (char *)&v318);
    sub_22E3B3AD0((uint64_t)&v322);
    v50 = (void **)*((_QWORD *)&v321 + 1);
    if (*((void ***)&v321 + 1) == &v319)
    {
      v51 = 4;
      v50 = &v319;
    }
    else
    {
      if (!*((_QWORD *)&v321 + 1))
        goto LABEL_118;
      v51 = 5;
    }
    (*((void (**)(void))*v50 + v51))();
LABEL_118:
    v52 = v292;
    if (v292 == v290)
    {
      v53 = (void (**)(void **))((char *)v290[0] + 32);
      v52 = v290;
    }
    else
    {
      if (!v292)
        goto LABEL_123;
      v53 = (void (**)(void **))((char *)*v292 + 40);
    }
    (*v53)(v52);
LABEL_123:
    v352 = 0;
    v356 = 0;
    v348 = 0;
    v344 = 0;
    v336 = 0;
    v340 = 0;
    v335 = 0u;
    v334 = 0u;
    v333 = 0u;
    v332 = 0u;
    v331 = 0u;
    v330 = 0u;
    v329 = 0u;
    v328 = 0u;
    v327 = 0u;
    v326 = 0u;
    v325 = 0u;
    v324 = 0u;
    memset(v323, 0, sizeof(v323));
    v322 = 0u;
    v321 = 0u;
    v318 = (llvm::Module *)((char *)&v321 + 8);
    v319 = (char *)&v321 + 8;
    v320 = 32;
    v338 = 0;
    v337 = 0;
    v339 = 0;
    v341 = 0u;
    v342 = 0u;
    v343 = 1065353216;
    v345 = 0u;
    v346 = 0u;
    v347 = 1065353216;
    v350 = 0;
    v349 = 0;
    v351 = 0;
    v354 = 0;
    v353 = 0;
    v355 = 0;
    sub_22F21EA64((uint64_t)&v357, (uint64_t)&v318);
    sub_22F227708((uint64_t)&v318);
    sub_22F21EB20();
    sub_22F21EB64();
    sub_22F21EBA8();
    sub_22F227A98((uint64_t)&v303);
    sub_22F227AEC(&v301);
    sub_22F2295D0((uint64_t)v305);
    sub_22F22973C(v304);
    sub_22F227A98((uint64_t)v309);
    sub_22F2297E8(v307);
    sub_22F22988C((uint64_t)v312);
    sub_22F2298E0(v311);
    llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run();
    if (v323[0] != *((void **)&v322 + 1))
      free(v323[0]);
    if (v319 != v318)
      free(v319);
    *(_QWORD *)&v288 = &v357;
    sub_22E3B4AF8((void ***)&v288);
    sub_22F4405E4((uint64_t)&v298);
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = *i;
  while (1)
  {
    v18 = sub_22F21E05C(v0, (uint64_t)v294, **(_QWORD **)(v17 + 16));
    if (!v19)
      break;
    v20 = v18;
    if (v18 < 8)
      goto LABEL_42;
    if (v15 < (unint64_t *)v14)
    {
      *v15++ = v18;
LABEL_42:
      v21 = v15;
      goto LABEL_43;
    }
    v36 = v15 - v16;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      goto LABEL_446;
    if ((v14 - (char *)v16) >> 2 > v37)
      v37 = (v14 - (char *)v16) >> 2;
    if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
    {
      if (v38 >> 61)
LABEL_447:
        sub_22E3B3F8C();
      v39 = (char *)operator new(8 * v38);
    }
    else
    {
      v39 = 0;
    }
    v40 = (unint64_t *)&v39[8 * v36];
    *v40 = v20;
    v21 = v40 + 1;
    if (v15 != v16)
    {
      do
      {
        v41 = *--v15;
        *--v40 = v41;
      }
      while (v15 != v16);
      v15 = v16;
    }
    v16 = v40;
    v14 = &v39[8 * v38];
    if (v15)
      operator delete(v15);
LABEL_43:
    v22 = *(unsigned int *)(v17 + 48);
    if ((_DWORD)v22)
    {
      v23 = *(uint64_t **)(v17 + 40);
      v24 = &v23[v22];
      while (1)
      {
        v25 = sub_22F21E05C(v0, (uint64_t)v294, *v23);
        if (!v26)
          goto LABEL_89;
        v27 = v25;
        if (v25 < 8)
          goto LABEL_49;
        if (v21 < (unint64_t *)v14)
          break;
        v28 = v21 - v16;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_446;
        if ((v14 - (char *)v16) >> 2 > v29)
          v29 = (v14 - (char *)v16) >> 2;
        if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          if (v30 >> 61)
            goto LABEL_447;
          v31 = (char *)operator new(8 * v30);
        }
        else
        {
          v31 = 0;
        }
        v32 = (unint64_t *)&v31[8 * v28];
        *v32 = v27;
        v15 = v32 + 1;
        if (v21 != v16)
        {
          do
          {
            v33 = *--v21;
            *--v32 = v33;
          }
          while (v21 != v16);
          v21 = v16;
        }
        v16 = v32;
        v14 = &v31[8 * v30];
        if (v21)
          operator delete(v21);
LABEL_50:
        ++v23;
        v21 = v15;
        if (v23 == v24)
          goto LABEL_68;
      }
      *v21++ = v25;
LABEL_49:
      v15 = v21;
      goto LABEL_50;
    }
    v15 = v21;
    do
    {
LABEL_68:
      v34 = i[1];
      ++i;
      v17 = v34;
      if (v34)
        v35 = v17 == -8;
      else
        v35 = 1;
    }
    while (v35);
    if (i == (uint64_t *)v268)
      goto LABEL_94;
  }
LABEL_89:
  LOBYTE(v298) = 0;
  v302 = 0;
  MEMORY[0x23489DFA4](v294);
  if (v16)
  {
    operator delete(v16);
    if (v302)
    {
      v54 = *(_BYTE *)(v0 + 471);
      v55 = v54 < 0;
      if (v54 >= 0)
        v56 = (void *)(v0 + 448);
      else
        v56 = *(void **)(v0 + 448);
      v57 = v54 & 0x7F;
      if (v55)
        v58 = *(_QWORD *)(v0 + 456);
      else
        v58 = v57;
      v59 = *(_BYTE *)(v0 + 399);
      if (v59 >= 0)
        v60 = (void *)(v0 + 376);
      else
        v60 = *(void **)(v0 + 376);
      if (v59 >= 0)
        v61 = v59 & 0x7F;
      else
        v61 = *(_QWORD *)(v0 + 384);
      v62 = *(_BYTE *)(v0 + 423);
      if (v62 >= 0)
        v63 = (void *)(v0 + 400);
      else
        v63 = *(void **)(v0 + 400);
      if (v62 >= 0)
        v64 = v62 & 0x7F;
      else
        v64 = *(_QWORD *)(v0 + 408);
      v65 = operator new();
      sub_22F226E3C(v65, 4, v267, v56, v58, v60, v61, v66, v63, v64);
      v67 = *(_QWORD *)(v0 + 488);
      *(_QWORD *)(v0 + 488) = v65;
      if (v67)
      {
        v68 = sub_22E3B46CC(v67);
        MEMORY[0x2348A0E9C](v68, 0x1032C40B18B30E6);
      }
      v319 = 0;
      v318 = 0;
      LODWORD(v320) = 0;
      *(_QWORD *)&v322 = 0;
      v321 = 0uLL;
      v69 = v278;
      for (j = v279; v69 != j; v69 += 104)
      {
        *(_OWORD *)v294 = *(_OWORD *)(v69 + 8);
        v295 = *(const char **)(v69 + 24);
        *(_QWORD *)(v69 + 8) = 0;
        *(_QWORD *)(v69 + 16) = 0;
        v71 = *(_OWORD *)(v69 + 32);
        *(_QWORD *)(v69 + 24) = 0;
        *(_QWORD *)(v69 + 32) = 0;
        *(_OWORD *)__p = v71;
        v285 = *(_QWORD *)(v69 + 48);
        *(_QWORD *)(v69 + 40) = 0;
        *(_QWORD *)(v69 + 48) = 0;
        *(_OWORD *)v290 = *(_OWORD *)(v69 + 56);
        v291 = *(_QWORD *)(v69 + 72);
        *(_QWORD *)(v69 + 64) = 0;
        *(_QWORD *)(v69 + 72) = 0;
        *(_QWORD *)(v69 + 56) = 0;
        if (*((_QWORD *)&v321 + 1) == (_QWORD)v321)
        {
          BYTE4(v289[0]) = 48;
          v72 = (char *)v289 + 4;
        }
        else
        {
          v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v321 + 1) - v321) >> 3);
          v72 = (char *)v289 + 5;
          do
          {
            *--v72 = (v73 % 0xA) | 0x30;
            v74 = v73 > 9;
            v73 /= 0xAuLL;
          }
          while (v74);
        }
        sub_22E3B4274(&v357, v72, (char *)v289 + 5, (char *)v289 + 5 - v72);
        v288 = *(_OWORD *)(v69 + 80);
        v289[0] = *(_QWORD *)(v69 + 96);
        *(_QWORD *)(v69 + 88) = 0;
        *(_QWORD *)(v69 + 96) = 0;
        *(_QWORD *)(v69 + 80) = 0;
        v75 = (char *)operator new(0x90uLL);
        *((_QWORD *)v75 + 1) = 0;
        *((_QWORD *)v75 + 2) = 0;
        *(_QWORD *)v75 = &off_24FCAFF10;
        sub_22F228968(v75 + 24, (__int128 *)v294, (__int128 *)__p, (__int128 *)v290, &v357, (__int128 **)&v288);
        v76 = (_QWORD *)sub_22F4418A0((uint64_t)&v318, (uint64_t *)v69);
        v77 = (std::__shared_weak_count *)v76[1];
        *v76 = v75 + 24;
        v76[1] = v75;
        if (v77)
        {
          p_shared_owners = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(p_shared_owners);
          while (__stlxr(v79 - 1, p_shared_owners));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v283 = (llvm::Module *)&v288;
        sub_22E576240((void ***)&v283);
        if (SHIBYTE(v358) < 0)
          operator delete((void *)v357);
        if (SHIBYTE(v291) < 0)
          operator delete(v290[0]);
        if (SHIBYTE(v285) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v295) < 0)
          operator delete(v294[0]);
      }
      v290[0] = 0;
      v290[1] = 0;
      v291 = 0;
      v80 = v300;
      v81 = v301 - v300;
      if (v301 != v300)
      {
        if (v81 < 0)
LABEL_446:
          abort();
        v82 = (char *)operator new(v301 - v300);
        memmove(v82, v80, v81);
        v83 = 0;
        v84 = (uint64_t *)&v82[8 * (v81 >> 3)];
        v85 = v318;
        v86 = v320;
        v87 = (uint64_t *)((char *)v318 + 16 * v320);
        v88 = (uint64_t *)v82;
        do
        {
          v89 = sub_22F228AEC((uint64_t)v85, v86, *v88);
          if (v87 != v89)
          {
            v90 = *((_DWORD *)v89 + 2);
            v91 = v321;
            if ((_QWORD)v321 + 24 * v90 != *((_QWORD *)&v321 + 1))
            {
              v92 = v321 + 24 * v90;
              v95 = *(_QWORD *)(v92 + 8);
              v94 = v92 + 8;
              v93 = v95;
              if ((unint64_t)v83 >= v291)
              {
                v83 = sub_22F228B4C((uint64_t)v290, v93, *(_QWORD *)(v94 + 8));
              }
              else
              {
                *v83 = v93;
                v96 = *(_QWORD *)(v91 + 24 * v90 + 16);
                v83[1] = v96;
                if (v96)
                {
                  v97 = (unint64_t *)(v96 + 8);
                  do
                    v98 = __ldxr(v97);
                  while (__stxr(v98 + 1, v97));
                }
                v83 += 2;
              }
              v290[1] = v83;
            }
          }
          ++v88;
        }
        while (v88 != v84);
        operator delete(v82);
      }
      v99 = *(unsigned int *)(v0 + 176);
      if ((_DWORD)v99)
      {
        for (k = *(uint64_t **)(v0 + 168); !*k || *k == -8; ++k)
          ;
      }
      else
      {
        k = *(uint64_t **)(v0 + 168);
      }
      v102 = *(_QWORD *)(v0 + 168) + 8 * v99;
      if (k != (uint64_t *)v102)
      {
        v103 = *k;
        while ((*(_BYTE *)(v103 + 8) & 0x40) == 0)
        {
          do
          {
            v104 = k[1];
            ++k;
            v103 = v104;
            if (v104)
              v105 = v103 == -8;
            else
              v105 = 1;
          }
          while (v105);
          if (k == (uint64_t *)v102)
            goto LABEL_200;
        }
      }
      if (k == (uint64_t *)v102)
      {
LABEL_200:
        v107 = *((_QWORD *)&v321 + 1);
        for (m = v321; m != v107; m += 24)
        {
          v108 = *(char **)(v0 + 488);
          v271 = *(_OWORD *)(m + 8);
          *(_QWORD *)(m + 8) = 0;
          *(_QWORD *)(m + 16) = 0;
          sub_22F21DFD8(v108, (unint64_t *)&v271);
          v109 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
          if (*((_QWORD *)&v271 + 1))
          {
            v110 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
        }
        sub_22F442C84((unint64_t **)v294, *(unint64_t **)(v0 + 352), *(unint64_t **)(v0 + 360));
        v112 = (unint64_t *)v294[0];
        v113 = v296;
        if (v294[0] != v296)
        {
          v114 = (unint64_t *)v294[1];
          do
          {
            sub_22F21B60C((uint64_t)__p, v0, *v112);
            if (!(_BYTE)v285)
              goto LABEL_429;
            v115 = *(_QWORD *)(v0 + 488);
            v116 = operator new();
            v117 = sub_22F443A70(v116, (_BYTE *)__p[0], (uint64_t)__p[1]);
            v270 = (void **)v117;
            v118 = *(uint64_t **)(v115 + 312);
            if ((unint64_t)v118 >= *(_QWORD *)(v115 + 320))
            {
              v119 = sub_22F227440((void ****)(v115 + 304), (uint64_t *)&v270);
              v120 = v270;
              *(_QWORD *)(v115 + 312) = v119;
              v270 = 0;
              if (v120)
              {
                if (*v120 != v120 + 3)
                  free(*v120);
                MEMORY[0x2348A0E9C](v120, 0x1080C4003DAF236);
              }
            }
            else
            {
              *v118 = v117;
              *(_QWORD *)(v115 + 312) = v118 + 1;
              v270 = 0;
            }
            v121 = v112 + 1;
            v112 = v114;
            if (v121 != v114)
            {
              v112 = v121;
              do
              {
                v122 = *v112;
                v123 = *v112 & 6;
                if (*v112 >= 8 && v123 == 4)
                {
                  if (*(_DWORD *)(v122 & 0xFFFFFFFFFFFFFFF8) == 2)
                    goto LABEL_233;
                }
                else
                {
                  v125 = v122 >= 8 && v123 == 0;
                  if (v125 && *(_DWORD *)((v122 & 0xFFFFFFFFFFFFFFF8) + 8) == 21)
                    goto LABEL_233;
                }
                ++v112;
              }
              while (v112 != v114);
              v112 = v114;
            }
LABEL_233:
            ;
          }
          while (v112 != v113);
        }
        v126 = *(unsigned int *)(v0 + 144);
        if ((_DWORD)v126)
        {
          for (n = *(uint64_t **)(v0 + 136); !*n || *n == -8; ++n)
            ;
        }
        else
        {
          n = *(uint64_t **)(v0 + 136);
        }
        v128 = *(_QWORD *)(v0 + 136) + 8 * v126;
        if (n != (uint64_t *)v128)
        {
          v129 = *n;
          do
          {
            v130 = *(_QWORD *)(v0 + 488);
            v131 = *(_QWORD *)v129;
            v132 = operator new();
            v133 = sub_22F443A70(v132, (_BYTE *)(v129 + 24), v131);
            v269 = (void **)v133;
            v134 = *(uint64_t **)(v130 + 240);
            if ((unint64_t)v134 >= *(_QWORD *)(v130 + 248))
            {
              v135 = sub_22F227440((void ****)(v130 + 232), (uint64_t *)&v269);
              v136 = v269;
              *(_QWORD *)(v130 + 240) = v135;
              v269 = 0;
              if (v136)
              {
                if (*v136 != v136 + 3)
                  free(*v136);
                MEMORY[0x2348A0E9C](v136, 0x1080C4003DAF236);
              }
            }
            else
            {
              *v134 = v133;
              *(_QWORD *)(v130 + 240) = v134 + 1;
              v269 = 0;
            }
            do
            {
              v137 = n[1];
              ++n;
              v129 = v137;
              if (v137)
                v138 = v129 == -8;
              else
                v138 = 1;
            }
            while (v138);
          }
          while (n != (uint64_t *)v128);
        }
        v2 = 1;
LABEL_430:
        v261 = (char *)v290[0];
        if (v290[0])
        {
          v262 = (char *)v290[1];
          if (v290[1] != v290[0])
          {
            do
            {
              v263 = (std::__shared_weak_count *)*((_QWORD *)v262 - 1);
              if (v263)
              {
                v264 = (unint64_t *)&v263->__shared_owners_;
                do
                  v265 = __ldaxr(v264);
                while (__stlxr(v265 - 1, v264));
                if (!v265)
                {
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                }
              }
              v262 -= 16;
            }
            while (v262 != v261);
            v261 = (char *)v290[0];
          }
          operator delete(v261);
        }
        sub_22F4430B0((uint64_t)&v318);
        if (v302)
          sub_22F4431D8(&v298);
        goto LABEL_92;
      }
      v139 = *k;
      while (1)
      {
        v140 = v318;
        v141 = v320;
        v142 = sub_22F228AEC((uint64_t)v318, v320, **(_QWORD **)(v139 + 16));
        if ((uint64_t *)((char *)v140 + 16 * v141) == v142
          || (v143 = *((_DWORD *)v142 + 2), (_QWORD)v321 + 24 * v143 == *((_QWORD *)&v321 + 1)))
        {
          v145 = 0;
          v146 = 0;
        }
        else
        {
          v144 = v321 + 24 * v143;
          v145 = *(void **)(v144 + 8);
          v146 = *(std::__shared_weak_count **)(v144 + 16);
          if (v146)
          {
            v147 = (unint64_t *)&v146->__shared_owners_;
            do
              v148 = __ldxr(v147);
            while (__stxr(v148 + 1, v147));
          }
        }
        if ((*(_BYTE *)(v139 + 9) & 8) == 0)
          break;
        v175 = v298;
        v174 = v299;
        if (v299)
        {
          v176 = (unint64_t *)(v299 + 8);
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        *(_QWORD *)&v276 = v175;
        *((_QWORD *)&v276 + 1) = v174;
        v178 = *(_QWORD *)v139;
        *(_QWORD *)&v275 = v145;
        *((_QWORD *)&v275 + 1) = v146;
        if (v146)
        {
          v179 = (unint64_t *)&v146->__shared_owners_;
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
        }
        sub_22F21D770((uint64_t)&v357, &v276, v139 + 64, v178, &v275);
        v181 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
        if (*((_QWORD *)&v275 + 1))
        {
          v182 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        v184 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
        if (*((_QWORD *)&v276 + 1))
        {
          v185 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
          do
            v186 = __ldaxr(v185);
          while (__stlxr(v186 - 1, v185));
          if (!v186)
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
        }
        if ((BYTE8(v357) & 1) != 0)
        {
          v156 = v146;
          v257 = *(_QWORD *)v139;
          WORD4(v286) = 1283;
          __p[0] = "cannot create '";
          v285 = v139 + 64;
          *(_QWORD *)&v286 = v257;
          v294[0] = __p;
          v295 = "' function";
          v297 = 770;
          v274 = v357;
          llvm::air::ErrorHandler::error();
          v258 = v274;
          if (!v274)
            goto LABEL_424;
          goto LABEL_423;
        }
        v187 = *(_QWORD *)(v0 + 488);
        v273 = v357;
        sub_22F21D8F0(v187, &v273);
        v188 = v273;
        v273 = 0;
        if (v188)
          (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
LABEL_397:
        if (v146)
        {
          v250 = (unint64_t *)&v146->__shared_owners_;
          do
            v251 = __ldaxr(v250);
          while (__stlxr(v251 - 1, v250));
          if (!v251)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        do
        {
          v252 = k[1];
          ++k;
          v139 = v252;
          if (v252)
            v253 = v139 == -8;
          else
            v253 = 1;
        }
        while (v253);
        while (1)
        {
          if (k == (uint64_t *)v102)
            goto LABEL_200;
          if ((*(_BYTE *)(v139 + 8) & 0x40) != 0)
            break;
          do
          {
            v254 = k[1];
            ++k;
            v139 = v254;
            if (v254)
              v255 = v139 == -8;
            else
              v255 = 1;
          }
          while (v255);
        }
        if (k == (uint64_t *)v102)
          goto LABEL_200;
      }
      v149 = v298;
      v150 = (void *)v299;
      if (v299)
      {
        v151 = (unint64_t *)(v299 + 8);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
      }
      if (v146)
      {
        v153 = (unint64_t *)&v146->__shared_owners_;
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
      }
      *(_QWORD *)&v357 = 0;
      v155 = operator new();
      v294[0] = v149;
      v294[1] = v150;
      __p[0] = v145;
      __p[1] = v146;
      v156 = v146;
      v157 = v155;
      llvm::air::MetalVariable::MetalVariable();
      v158 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v159 = (unint64_t *)((char *)__p[1] + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      v161 = (std::__shared_weak_count *)v294[1];
      if (v294[1])
      {
        v162 = (unint64_t *)((char *)v294[1] + 8);
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v164 = v357;
      if ((_QWORD)v357)
      {
        *(_QWORD *)&v357 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
        if ((_QWORD)v357)
          (*(void (**)(_QWORD))(*(_QWORD *)v357 + 8))(v357);
        v266 = *(_QWORD *)v139;
        WORD4(v286) = 1283;
        __p[0] = "cannot create '";
        v285 = v139 + 64;
        *(_QWORD *)&v286 = v266;
        v294[0] = __p;
        v295 = "' variable";
        v297 = 770;
        v272 = v164;
        llvm::air::ErrorHandler::error();
        v258 = v164;
        if (v164)
LABEL_423:
          (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
LABEL_424:
        if (v156)
        {
          v259 = (unint64_t *)&v156->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
LABEL_429:
        v2 = 0;
        goto LABEL_430;
      }
      v165 = *(_QWORD *)(v0 + 488);
      v166 = v157;
      if ((*(_BYTE *)(v157 + 96) & 1) != 0)
      {
        v167 = *(_QWORD *)(v157 + 16);
        if (v167)
        {
          v168 = *(std::__shared_weak_count **)(v157 + 24);
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldxr(v169);
            while (__stxr(v170 + 1, v169));
          }
          for (ii = *(_QWORD **)(v165 + 408); ii; ii = (_QWORD *)*ii)
          {
            v172 = ii[4];
            if (v167 >= v172)
            {
              if (v172 >= v167)
              {
                v173 = 0;
                goto LABEL_307;
              }
              ++ii;
            }
          }
          v173 = 1;
          if (!v168)
            goto LABEL_311;
LABEL_307:
          v189 = (unint64_t *)&v168->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
            if ((v173 & 1) == 0)
              goto LABEL_336;
          }
          else
          {
LABEL_311:
            if (!v173)
              goto LABEL_336;
          }
          if ((*(_BYTE *)(v166 + 96) & 1) != 0)
          {
            v191 = *(void **)(v166 + 16);
            v192 = *(unint64_t **)(v166 + 24);
            v294[0] = v191;
            v294[1] = v192;
            if (v192)
            {
              v193 = v192 + 1;
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
          }
          else
          {
            v191 = 0;
            v294[0] = 0;
            v294[1] = 0;
          }
          sub_22F2270F4((uint64_t *)(v165 + 400), (unint64_t)v191, (uint64_t)v294);
          v195 = (std::__shared_weak_count *)v294[1];
          if (v294[1])
          {
            v196 = (unint64_t *)((char *)v294[1] + 8);
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          if ((*(_BYTE *)(v166 + 96) & 1) != 0)
          {
            v199 = *(void **)(v166 + 16);
            v198 = *(unint64_t **)(v166 + 24);
            v294[0] = v199;
            v294[1] = v198;
            if (v198)
            {
              v200 = v198 + 1;
              do
                v201 = __ldxr(v200);
              while (__stxr(v201 + 1, v200));
            }
          }
          else
          {
            v198 = 0;
            v199 = 0;
            v294[0] = 0;
            v294[1] = 0;
          }
          v202 = *(_QWORD **)(v165 + 432);
          if ((unint64_t)v202 >= *(_QWORD *)(v165 + 440))
          {
            v203 = sub_22F2271B0((char **)(v165 + 424), (uint64_t)v294);
            v204 = (std::__shared_weak_count *)v294[1];
            *(_QWORD *)(v165 + 432) = v203;
            if (v204)
            {
              v205 = (unint64_t *)&v204->__shared_owners_;
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (!v206)
              {
                ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                std::__shared_weak_count::__release_weak(v204);
              }
            }
          }
          else
          {
            *v202 = v199;
            v202[1] = v198;
            *(_QWORD *)(v165 + 432) = v202 + 2;
          }
        }
      }
LABEL_336:
      v207 = *(_QWORD *)(v166 + 136);
      if (v207)
      {
        v208 = *(std::__shared_weak_count **)(v166 + 144);
        if (v208)
        {
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
        }
        for (jj = *(_QWORD **)(v165 + 336); jj; jj = (_QWORD *)*jj)
        {
          v212 = jj[4];
          if (v207 >= v212)
          {
            if (v212 >= v207)
            {
              v213 = 0;
              goto LABEL_347;
            }
            ++jj;
          }
        }
        v213 = 1;
LABEL_347:
        if (!v208)
          goto LABEL_351;
        v214 = (unint64_t *)&v208->__shared_owners_;
        do
          v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (v215)
        {
LABEL_351:
          if (!v213)
            goto LABEL_372;
LABEL_354:
          v216 = (uint64_t *)(v165 + 328);
          v217 = *(_QWORD *)(v166 + 136);
          v218 = *(std::__shared_weak_count **)(v166 + 144);
          if (v218)
          {
            v219 = (unint64_t *)&v218->__shared_owners_;
            do
              v220 = __ldxr(v219);
            while (__stxr(v220 + 1, v219));
            sub_22F132550(v216, v217, v217);
            do
              v221 = __ldaxr(v219);
            while (__stlxr(v221 - 1, v219));
            if (!v221)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v218);
            }
          }
          else
          {
            sub_22F132550(v216, v217, *(_QWORD *)(v166 + 136));
          }
          v222 = *(void **)(v166 + 136);
          v223 = *(unint64_t **)(v166 + 144);
          v294[0] = v222;
          v294[1] = v223;
          if (v223)
          {
            v224 = v223 + 1;
            do
              v225 = __ldxr(v224);
            while (__stxr(v225 + 1, v224));
          }
          v226 = *(_QWORD **)(v165 + 360);
          if ((unint64_t)v226 >= *(_QWORD *)(v165 + 368))
          {
            v227 = sub_22E6D58A8((char **)(v165 + 352), (uint64_t)v294);
            v228 = (std::__shared_weak_count *)v294[1];
            *(_QWORD *)(v165 + 360) = v227;
            if (v228)
            {
              v229 = (unint64_t *)&v228->__shared_owners_;
              do
                v230 = __ldaxr(v229);
              while (__stlxr(v230 - 1, v229));
              if (!v230)
              {
                ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                std::__shared_weak_count::__release_weak(v228);
              }
            }
          }
          else
          {
            *v226 = v222;
            v226[1] = v223;
            *(_QWORD *)(v165 + 360) = v226 + 2;
          }
          goto LABEL_372;
        }
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
        if ((v213 & 1) != 0)
          goto LABEL_354;
      }
LABEL_372:
      v231 = *(void **)(v166 + 80);
      if (v231)
      {
        v232 = (void **)(v166 + 72);
      }
      else
      {
        v232 = (void **)(v166 + 32);
        v231 = *(void **)(v166 + 40);
      }
      v294[0] = *v232;
      v294[1] = v231;
      *(_QWORD *)&v288 = (uint64_t)(*(_QWORD *)(v165 + 216) - *(_QWORD *)(v165 + 208)) >> 3;
      __p[0] = v294;
      *(_QWORD *)&v357 = &v288;
      sub_22F227394(v165 + 280, (uint64_t)v294, (_OWORD **)__p, (_QWORD **)&v357);
      v234 = *(uint64_t **)(v165 + 216);
      v233 = *(_QWORD *)(v165 + 224);
      if ((unint64_t)v234 >= v233)
      {
        v236 = *(_QWORD *)(v165 + 208);
        v237 = ((uint64_t)v234 - v236) >> 3;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_446;
        v238 = v233 - v236;
        v239 = v238 >> 2;
        if (v238 >> 2 <= (unint64_t)(v237 + 1))
          v239 = v237 + 1;
        if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          if (v240 >> 61)
            goto LABEL_447;
          v241 = (char *)operator new(8 * v240);
        }
        else
        {
          v241 = 0;
        }
        v242 = &v241[8 * v237];
        v243 = &v241[8 * v240];
        *(_QWORD *)v242 = v166;
        v235 = v242 + 8;
        v244 = *(_QWORD **)(v165 + 208);
        v245 = *(_QWORD **)(v165 + 216);
        if (v245 == v244)
        {
          *(_QWORD *)(v165 + 208) = v242;
          *(_QWORD *)(v165 + 216) = v235;
          *(_QWORD *)(v165 + 224) = v243;
        }
        else
        {
          do
          {
            v246 = *--v245;
            *v245 = 0;
            *((_QWORD *)v242 - 1) = v246;
            v242 -= 8;
          }
          while (v245 != v244);
          v245 = *(_QWORD **)(v165 + 208);
          v247 = *(_QWORD **)(v165 + 216);
          *(_QWORD *)(v165 + 208) = v242;
          *(_QWORD *)(v165 + 216) = v235;
          *(_QWORD *)(v165 + 224) = v243;
          while (v247 != v245)
          {
            v249 = *--v247;
            v248 = v249;
            *v247 = 0;
            if (v249)
              (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
          }
        }
        if (v245)
          operator delete(v245);
      }
      else
      {
        *v234 = v166;
        v235 = v234 + 1;
      }
      *(_QWORD *)(v165 + 216) = v235;
      goto LABEL_397;
    }
  }
  v2 = 0;
LABEL_92:
  if (v280)
    sub_22F442C38((uint64_t)v277);
LABEL_10:
  llvm::LLVMContext::setDiagnosticHandler();
  v3 = v282;
  v282 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v2;
}

void sub_22F21D770(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;

  v8 = operator new();
  v9 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14 = *a5;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  llvm::air::MetalFunction::MetalFunction();
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 16))(*((_QWORD *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = v8;
}

void sub_22F21D8F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *i;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *j;
  unint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t *v105;
  unint64_t *v106;

  v4 = *a2;
  if ((*(_BYTE *)(*a2 + 96) & 1) != 0)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(std::__shared_weak_count **)(v4 + 24);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      for (i = *(_QWORD **)(a1 + 408); i; i = (_QWORD *)*i)
      {
        v10 = i[4];
        if (v5 >= v10)
        {
          if (v10 >= v5)
          {
            v11 = 0;
            if (v6)
              goto LABEL_14;
            goto LABEL_17;
          }
          ++i;
        }
      }
      v11 = 1;
      if (!v6)
        goto LABEL_17;
LABEL_14:
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (v13)
      {
LABEL_17:
        if (!v11)
          goto LABEL_42;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if ((v11 & 1) == 0)
          goto LABEL_42;
      }
      v14 = *a2;
      if ((*(_BYTE *)(*a2 + 96) & 1) != 0)
      {
        v15 = *(_QWORD *)(v14 + 16);
        v16 = *(std::__shared_weak_count **)(v14 + 24);
        v103 = v15;
        v104 = v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
      }
      else
      {
        v15 = 0;
        v103 = 0;
        v104 = 0;
      }
      sub_22F2270F4((uint64_t *)(a1 + 400), v15, (uint64_t)&v103);
      v19 = v104;
      if (v104)
      {
        v20 = (unint64_t *)&v104->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *a2;
      if ((*(_BYTE *)(*a2 + 96) & 1) != 0)
      {
        v24 = *(_QWORD *)(v22 + 16);
        v23 = *(std::__shared_weak_count **)(v22 + 24);
        v103 = v24;
        v104 = v23;
        if (v23)
        {
          v25 = (unint64_t *)&v23->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v103 = 0;
        v104 = 0;
      }
      v27 = *(unint64_t **)(a1 + 432);
      if ((unint64_t)v27 >= *(_QWORD *)(a1 + 440))
      {
        v28 = sub_22F2271B0((char **)(a1 + 424), (uint64_t)&v103);
        v29 = v104;
        *(_QWORD *)(a1 + 432) = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      else
      {
        *v27 = v24;
        v27[1] = (unint64_t)v23;
        *(_QWORD *)(a1 + 432) = v27 + 2;
      }
    }
  }
LABEL_42:
  v32 = *(_QWORD *)(*a2 + 136);
  if (!v32)
    goto LABEL_78;
  v33 = *(std::__shared_weak_count **)(*a2 + 144);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  for (j = *(_QWORD **)(a1 + 336); j; j = (_QWORD *)*j)
  {
    v37 = j[4];
    if (v32 >= v37)
    {
      if (v37 >= v32)
      {
        v38 = 0;
        if (v33)
          goto LABEL_54;
        goto LABEL_57;
      }
      ++j;
    }
  }
  v38 = 1;
  if (!v33)
    goto LABEL_57;
LABEL_54:
  v39 = (unint64_t *)&v33->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_57:
    if (!v38)
      goto LABEL_78;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if ((v38 & 1) == 0)
      goto LABEL_78;
  }
  v41 = (uint64_t *)(a1 + 328);
  v42 = *(_QWORD *)(*a2 + 136);
  v43 = *(std::__shared_weak_count **)(*a2 + 144);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    sub_22F132550(v41, v42, v42);
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    sub_22F132550(v41, v42, *(_QWORD *)(*a2 + 136));
  }
  v47 = *(_QWORD *)(*a2 + 136);
  v48 = *(std::__shared_weak_count **)(*a2 + 144);
  v103 = v47;
  v104 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = *(unint64_t **)(a1 + 360);
  if ((unint64_t)v51 >= *(_QWORD *)(a1 + 368))
  {
    v52 = sub_22E6D58A8((char **)(a1 + 352), (uint64_t)&v103);
    v53 = v104;
    *(_QWORD *)(a1 + 360) = v52;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    *v51 = v47;
    v51[1] = (unint64_t)v48;
    *(_QWORD *)(a1 + 360) = v51 + 2;
  }
LABEL_78:
  v56 = (_QWORD *)*a2;
  v57 = *(_QWORD *)(*a2 + 192);
  if (!v57)
    goto LABEL_103;
  if (*(_DWORD *)(v57 + 64) == 1)
  {
    v58 = *(_QWORD *)(v57 + 72);
    v59 = *(std::__shared_weak_count **)(v57 + 80);
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      v103 = v58;
      v104 = v59;
      do
        v62 = __ldxr(v60);
      while (__stxr(v62 + 1, v60));
      do
        v63 = __ldaxr(v60);
      while (__stlxr(v63 - 1, v60));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v58 = v103;
      if (!v103)
        goto LABEL_97;
      goto LABEL_92;
    }
  }
  else
  {
    v58 = 0;
  }
  v103 = v58;
  v104 = 0;
  if (v58)
  {
LABEL_92:
    if ((sub_22F2272D4((uint64_t **)(a1 + 472), v58, v58) & 1) != 0)
    {
      v64 = *(unint64_t **)(a1 + 504);
      if ((unint64_t)v64 >= *(_QWORD *)(a1 + 512))
      {
        v65 = sub_22E6D58A8((char **)(a1 + 496), (uint64_t)&v103);
      }
      else
      {
        *v64 = v58;
        v64[1] = (unint64_t)v104;
        v103 = 0;
        v104 = 0;
        v65 = (char *)(v64 + 2);
      }
      *(_QWORD *)(a1 + 504) = v65;
    }
  }
LABEL_97:
  v66 = v104;
  if (v104)
  {
    v67 = (unint64_t *)&v104->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v56 = (_QWORD *)*a2;
LABEL_103:
  v69 = v56[25];
  if (!v69)
    goto LABEL_128;
  if (*(_DWORD *)(v69 + 24) == 1)
  {
    v70 = *(_QWORD *)(v69 + 32);
    v71 = *(std::__shared_weak_count **)(v69 + 40);
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      v103 = v70;
      v104 = v71;
      do
        v74 = __ldxr(v72);
      while (__stxr(v74 + 1, v72));
      do
        v75 = __ldaxr(v72);
      while (__stlxr(v75 - 1, v72));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      v70 = v103;
      if (!v103)
        goto LABEL_122;
      goto LABEL_117;
    }
  }
  else
  {
    v70 = 0;
  }
  v103 = v70;
  v104 = 0;
  if (v70)
  {
LABEL_117:
    if ((sub_22F2272D4((uint64_t **)(a1 + 472), v70, v70) & 1) != 0)
    {
      v76 = *(unint64_t **)(a1 + 504);
      if ((unint64_t)v76 >= *(_QWORD *)(a1 + 512))
      {
        v77 = sub_22E6D58A8((char **)(a1 + 496), (uint64_t)&v103);
      }
      else
      {
        *v76 = v70;
        v76[1] = (unint64_t)v104;
        v103 = 0;
        v104 = 0;
        v77 = (char *)(v76 + 2);
      }
      *(_QWORD *)(a1 + 504) = v77;
    }
  }
LABEL_122:
  v78 = v104;
  if (v104)
  {
    v79 = (unint64_t *)&v104->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v56 = (_QWORD *)*a2;
LABEL_128:
  v81 = (std::__shared_weak_count *)v56[10];
  if (v81)
  {
    v82 = v56 + 9;
  }
  else
  {
    v82 = v56 + 4;
    v81 = (std::__shared_weak_count *)v56[5];
  }
  v103 = *v82;
  v104 = v81;
  v102 = (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3;
  v106 = &v103;
  v105 = &v102;
  sub_22F227394(a1 + 256, (uint64_t)&v103, (_OWORD **)&v106, &v105);
  v84 = *(_QWORD **)(a1 + 192);
  v83 = *(_QWORD *)(a1 + 200);
  if ((unint64_t)v84 >= v83)
  {
    v87 = *(_QWORD *)(a1 + 184);
    v88 = ((uint64_t)v84 - v87) >> 3;
    if ((unint64_t)(v88 + 1) >> 61)
      abort();
    v89 = v83 - v87;
    v90 = v89 >> 2;
    if (v89 >> 2 <= (unint64_t)(v88 + 1))
      v90 = v88 + 1;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
      v91 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v91 = v90;
    if (v91)
    {
      if (v91 >> 61)
        sub_22E3B3F8C();
      v92 = (char *)operator new(8 * v91);
    }
    else
    {
      v92 = 0;
    }
    v93 = &v92[8 * v88];
    v94 = &v92[8 * v91];
    v95 = *a2;
    *a2 = 0;
    *(_QWORD *)v93 = v95;
    v86 = v93 + 8;
    v96 = *(_QWORD **)(a1 + 184);
    v97 = *(_QWORD **)(a1 + 192);
    if (v97 == v96)
    {
      *(_QWORD *)(a1 + 184) = v93;
      *(_QWORD *)(a1 + 192) = v86;
      *(_QWORD *)(a1 + 200) = v94;
    }
    else
    {
      do
      {
        v98 = *--v97;
        *v97 = 0;
        *((_QWORD *)v93 - 1) = v98;
        v93 -= 8;
      }
      while (v97 != v96);
      v97 = *(_QWORD **)(a1 + 184);
      v99 = *(_QWORD **)(a1 + 192);
      *(_QWORD *)(a1 + 184) = v93;
      *(_QWORD *)(a1 + 192) = v86;
      *(_QWORD *)(a1 + 200) = v94;
      while (v99 != v97)
      {
        v101 = *--v99;
        v100 = v101;
        *v99 = 0;
        if (v101)
          (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
      }
    }
    if (v97)
      operator delete(v97);
  }
  else
  {
    v85 = *a2;
    *a2 = 0;
    *v84 = v85;
    v86 = v84 + 1;
  }
  *(_QWORD *)(a1 + 192) = v86;
}

char *sub_22F21DFD8(char *result, unint64_t *a2)
{
  char *v3;
  unint64_t v4;
  _QWORD *i;
  unint64_t v6;
  _OWORD *v7;

  v3 = result;
  v4 = *a2;
  for (i = (_QWORD *)*((_QWORD *)result + 42); i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4)
        return result;
      ++i;
    }
  }
  sub_22F132550((uint64_t *)result + 41, v4, v4);
  v7 = (_OWORD *)*((_QWORD *)v3 + 45);
  if ((unint64_t)v7 >= *((_QWORD *)v3 + 46))
  {
    result = sub_22E6D58A8((char **)v3 + 44, (uint64_t)a2);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    result = (char *)(v7 + 1);
    *a2 = 0;
    a2[1] = 0;
  }
  *((_QWORD *)v3 + 45) = result;
  return result;
}

uint64_t sub_22F21E05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Module **v23;
  llvm::Module **v24;
  llvm::Module *v25;
  char v26;
  void (**v27)(void);
  uint64_t v28;
  uint64_t v29;
  char v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t FileName;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (**v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Module *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[2];
  uint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[2];
  const char *v56;
  uint64_t v57;
  __int16 v58;
  void *__p[2];
  const char *v60;
  __int16 v61;
  _QWORD v62[2];
  unint64_t v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v3 = a3;
  v68 = *MEMORY[0x24BDAC8D0];
  v6 = (int32x2_t *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(unsigned int *)(a1 + 248);
  v9 = sub_22F228AEC(v7, v8, a3);
  if ((uint64_t *)(v7 + 16 * v8) == v9)
    return 2;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 256) + 16 * *((unsigned int *)v9 + 2));
  if (v10 == *(_QWORD **)(a1 + 264))
    return 2;
  v63 = v10[1];
  v11 = v63;
  v10[1] = 2;
  sub_22F21E630(v6, v10);
  if ((v11 & 6) == 2)
  {
    v63 = 2;
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v58 = 260;
      v55[0] = v12 + 216;
      MEMORY[0x23489F1BC](__p, v55);
      v62[0] = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
      v62[1] = v13;
      if (SHIBYTE(v60) < 0)
        operator delete(__p[0]);
      llvm::Module::materializeAll((llvm::Module *)(v11 & 0xFFFFFFFFFFFFFFF8));
      if (v54)
      {
        v14 = *(_BYTE *)(v12 + 191);
        v15 = v14;
        v16 = v14 & 0x7F;
        if (v15 < 0)
          v16 = *(_QWORD *)(v12 + 176);
        if (v16)
        {
          v53 = 1283;
          v17 = v12 + 168;
          if (v15 < 0)
            v17 = *(_QWORD *)(v12 + 168);
          v50[0] = " in '";
          v51 = v17;
          v52 = v16;
          v55[0] = v50;
          v56 = "'";
          v58 = 770;
          __p[0] = "cannot materialize module";
          v60 = (const char *)v55;
          v18 = 515;
        }
        else
        {
          v58 = 257;
          __p[0] = "cannot materialize module";
          v18 = 259;
        }
        v61 = v18;
        v49 = v54;
        v54 = 0;
        llvm::air::ErrorHandler::error();
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
LABEL_50:
        v36 = MEMORY[0x23489F15C](v11 & 0xFFFFFFFFFFFFFFF8);
        MEMORY[0x2348A0E9C](v36, 0x10B2C407FF26C1CLL);
        goto LABEL_51;
      }
      if (sub_22E3B38EC(v62, (_DWORD *)(a1 + 72)) && (llvm::air::upgradeAIRModule() & 1) == 0)
      {
        v31 = *(_BYTE *)(v12 + 191);
        v32 = v31;
        v33 = v31 & 0x7F;
        if (v32 < 0)
          v33 = *(_QWORD *)(v12 + 176);
        if (v33)
        {
          v53 = 1283;
          v34 = v12 + 168;
          if (v32 < 0)
            v34 = *(_QWORD *)(v12 + 168);
          v50[0] = " in '";
          v51 = v34;
          v52 = v33;
          v55[0] = v50;
          v56 = "'";
          v58 = 770;
          __p[0] = "cannot upgrade module";
          v60 = (const char *)v55;
          v35 = 515;
        }
        else
        {
          v58 = 257;
          __p[0] = "cannot upgrade module";
          v35 = 259;
        }
        v61 = v35;
        v48[1] = 0;
        llvm::air::ErrorHandler::error();
        goto LABEL_50;
      }
      v48[0] = v11 & 0xFFFFFFFFFFFFFFF8;
      v67 = 0;
      v40 = sub_22F4419AC(a2, v48, v66);
      if (v67 == v66)
      {
        v41 = (void (**)(void))(v66[0] + 32);
      }
      else
      {
        if (!v67)
          goto LABEL_66;
        v41 = (void (**)(void))(*v67 + 40);
      }
      (*v41)();
LABEL_66:
      if (v48[0])
      {
        v44 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v44, 0x10B2C407FF26C1CLL);
      }
      if ((v40 & 1) != 0)
        goto LABEL_51;
    }
LABEL_37:
    sub_22E3B4400((uint64_t *)&v63);
    return v3;
  }
  if (v11 < 8 || (v11 & 6) != 0)
    goto LABEL_37;
  v20 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if (*(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8) != 3)
    goto LABEL_37;
  v63 = 2;
  v58 = 261;
  v55[0] = llvm::object::IRObjectFile::getTargetTriple((llvm::object::IRObjectFile *)(v11 & 0xFFFFFFFFFFFFFFF8));
  v55[1] = v21;
  MEMORY[0x23489F1BC](__p, v55);
  v50[0] = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
  v50[1] = v22;
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  v23 = (llvm::Module **)v20[6];
  v24 = (llvm::Module **)v20[7];
  if (v23 == v24)
  {
LABEL_36:
    (*(void (**)(unint64_t))(*v20 + 8))(v11 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  while (1)
  {
    llvm::Module::materializeAll(*v23);
    if (v62[0])
      break;
    if (sub_22E3B38EC(v50, (_DWORD *)(a1 + 72)) && (llvm::air::upgradeAIRModule() & 1) == 0)
    {
      FileName = llvm::object::Binary::getFileName((llvm::object::Binary *)(v11 & 0xFFFFFFFFFFFFFFF8));
      v58 = 1283;
      v55[0] = "cannot upgrade module in '";
      v56 = (const char *)FileName;
      v57 = v38;
      __p[0] = v55;
      v60 = "'";
      v61 = 770;
      v46 = 0;
      llvm::air::ErrorHandler::error();
      v39 = v46;
      if (!v46)
        goto LABEL_54;
      goto LABEL_53;
    }
    v25 = *v23;
    *v23 = 0;
    v45 = v25;
    v65 = 0;
    v26 = sub_22F4419AC(a2, (uint64_t *)&v45, v64);
    if (v65 == v64)
    {
      v27 = (void (**)(void))(v64[0] + 32);
    }
    else
    {
      if (!v65)
        goto LABEL_32;
      v27 = (void (**)(void))(*v65 + 40);
    }
    (*v27)();
LABEL_32:
    v28 = (uint64_t)v45;
    v45 = 0;
    if (v28)
    {
      v29 = MEMORY[0x23489F15C]();
      MEMORY[0x2348A0E9C](v29, 0x10B2C407FF26C1CLL);
    }
    if ((v26 & 1) != 0)
      goto LABEL_54;
    if (++v23 == v24)
      goto LABEL_36;
  }
  v42 = llvm::object::Binary::getFileName((llvm::object::Binary *)(v11 & 0xFFFFFFFFFFFFFFF8));
  v58 = 1283;
  v55[0] = "cannot materialize module in '";
  v56 = (const char *)v42;
  v57 = v43;
  __p[0] = v55;
  v60 = "'";
  v61 = 770;
  v47 = v62[0];
  v62[0] = 0;
  llvm::air::ErrorHandler::error();
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v39 = v62[0];
  if (v62[0])
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
LABEL_54:
  (*(void (**)(unint64_t))(*v20 + 8))(v11 & 0xFFFFFFFFFFFFFFF8);
LABEL_51:
  sub_22E3B4400((uint64_t *)&v63);
  return 0;
}

int32x2_t *sub_22F21E630(int32x2_t *result, _QWORD *a2)
{
  int32x2_t *v3;
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v3 = result;
  v4 = result[2].i32[0];
  if (v4)
  {
    v5 = *result;
    v6 = v4 - 1;
    LODWORD(v7) = (37 * *a2) & (v4 - 1);
    v8 = (uint64_t *)(*(_QWORD *)result + 16 * v7);
    v9 = *v8;
    if (*a2 == *v8)
    {
LABEL_3:
      *v8 = -8190;
      result[1] = vadd_s32(result[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v23 = 1;
      while (v9 != -4094)
      {
        v24 = v7 + v23++;
        v7 = v24 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
        if (*a2 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
          goto LABEL_3;
        }
      }
    }
  }
  v10 = (_QWORD *)result[4];
  if (a2 + 2 == v10)
  {
    v11 = a2;
  }
  else
  {
    v11 = a2;
    do
    {
      v12 = v11;
      v13 = *((_OWORD *)v11 + 1);
      v11 += 2;
      *(_OWORD *)v12 = v13;
      v12[3] = 2;
    }
    while (v12 + 4 != v10);
    v10 = (_QWORD *)result[4];
  }
  if (v10 != v11)
  {
    do
    {
      v14 = v10 - 2;
      result = (int32x2_t *)sub_22E3B4400(v10 - 1);
      v10 = v14;
    }
    while (v14 != v11);
  }
  v3[4] = (int32x2_t)v11;
  if (v11 != a2)
  {
    v15 = v3[2].u32[0];
    v16 = *(_QWORD *)v3 + 16 * v15;
    if (v3[1].i32[0])
    {
      if ((_DWORD)v15)
      {
        v17 = 16 * v15;
        v18 = (uint64_t)*v3;
        while ((*(_QWORD *)v18 | 0x1000) == 0xFFFFFFFFFFFFF002)
        {
          v18 += 16;
          v17 -= 16;
          if (!v17)
            goto LABEL_17;
        }
      }
      else
      {
        v18 = (uint64_t)*v3;
      }
    }
    else
    {
LABEL_17:
      v18 = *(_QWORD *)v3 + 16 * v15;
    }
    v19 = *(_QWORD *)v3 + 16 * v15;
    if (v18 != v19)
    {
      v20 = ((uint64_t)a2 - *(_QWORD *)&v3[3]) >> 4;
      do
      {
        v21 = *(unsigned int *)(v18 + 8);
        if (v20 < v21)
          *(_DWORD *)(v18 + 8) = v21 - 1;
        v22 = v18 + 16;
        v18 = v16;
        if (v22 != v16)
        {
          v18 = v22;
          while ((*(_QWORD *)v18 | 0x1000) == 0xFFFFFFFFFFFFF002)
          {
            v18 += 16;
            if (v18 == v16)
            {
              v18 = v16;
              break;
            }
          }
        }
      }
      while (v18 != v19);
    }
  }
  return result;
}

void sub_22F21E7F0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCAFF48);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F21E838()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCAFF88);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

uint64_t sub_22F21E87C(uint64_t a1, char *a2)
{
  uint64_t v4;
  char v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  v5 = *a2;
  v15 = *a2;
  v6 = (char *)v16;
  v7 = (char *)*((_QWORD *)a2 + 4);
  if (v7)
  {
    if (v7 == a2 + 8)
    {
      v17 = (char *)v16;
      (*(void (**)(char *, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v16);
      v5 = v15;
      v7 = v17;
    }
    else
    {
      v13 = v5;
      v7 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v7 + 16))(v7);
      v5 = v13;
      v17 = v7;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = *((_QWORD *)a2 + 5);
  v19 = *((_OWORD *)a2 + 3);
  *((_DWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)v4 = &off_24FCB0010;
  *(_BYTE *)(v4 + 8) = v5;
  if (v7)
  {
    if (v7 == (char *)v16)
    {
      *(_QWORD *)(v4 + 40) = v4 + 16;
      (*(void (**)(_QWORD *))(v16[0] + 24))(v16);
    }
    else
    {
      *(_QWORD *)(v4 + 40) = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *(_QWORD *)(v4 + 40) = 0;
  }
  *(_QWORD *)(v4 + 48) = v18;
  *(_OWORD *)(v4 + 56) = v19;
  DWORD2(v19) = 0;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  v14 = v4;
  v8 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 16))
  {
    v9 = sub_22E3B94F4((char **)a1, &v14);
    v10 = v14;
    *(_QWORD *)(a1 + 8) = v9;
    v14 = 0;
    if (v10)
      sub_22E3BB368(v10);
  }
  else
  {
    *v8 = v4;
    *(_QWORD *)(a1 + 8) = v8 + 1;
    v14 = 0;
  }
  result = sub_22E3B3AD0((uint64_t)&v18);
  if (v17 == (char *)v16)
  {
    v12 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v12 = 5;
    v6 = v17;
  }
  return (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 8 * v12))(v6);
}

uint64_t sub_22F21EA64(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  uint64_t v8;
  _BYTE v9[440];
  _QWORD *v10;

  v4 = (_QWORD *)operator new();
  sub_22F229060((uint64_t)v9, a2);
  *v4 = &off_24FCB0050;
  sub_22F229060((uint64_t)(v4 + 1), (uint64_t)v9);
  v10 = v4;
  v5 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
  {
    v7 = sub_22E3B94F4((char **)a1, (uint64_t *)&v10);
    v8 = (uint64_t)v10;
    *(_QWORD *)(a1 + 8) = v7;
    v10 = 0;
    if (v8)
      sub_22E3BB368(v8);
  }
  else
  {
    *v5 = v4;
    *(_QWORD *)(a1 + 8) = v5 + 1;
    v10 = 0;
  }
  return sub_22F227708((uint64_t)v9);
}

void sub_22F21EB20()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0090);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F21EB64()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB00D0);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F21EBA8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0110);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

uint64_t sub_22F21EBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void **v16;
  uint64_t v17;
  uint64_t result;
  std::string *v19;
  void (**v20)(std::string *);
  void *__p[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  std::string v28;
  std::string *v29;
  void *v30;
  llvm *v31;
  llvm *v32;
  _BYTE v33[48];
  _DWORD v34[6];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD v38[6];
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  _BYTE v66[24];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = (_BYTE *)v0;
  v72 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(v1 + 8);
  v5 = (_OWORD *)(v1 + 24);
  if (*(char *)(v1 + 47) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    *(_OWORD *)__p = *v5;
    v22 = *(_QWORD *)(v1 + 40);
  }
  v23 = *(_OWORD *)(v2 + 48);
  v24 = *(_QWORD *)(v2 + 64);
  MEMORY[0x23489DF98](&v30, v4, __p, "", 0);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v6 = *(unsigned int *)(v2 + 176);
  v7 = *(uint64_t **)(v2 + 168);
  if ((_DWORD)v6)
  {
    while (!*v7 || *v7 == -8)
      ++v7;
  }
  v9 = *(_QWORD *)(v2 + 168) + 8 * v6;
  if (v7 == (uint64_t *)v9)
  {
LABEL_25:
    llvm::air::AIRModuleLinker::takeModule((llvm::air::AIRModuleLinker *)&v30);
    *(_QWORD *)(v2 + 448) = v2 + 88;
    sub_22F441ABC((uint64_t)&v31, (uint64_t)v5, v2 + 448);
    v25 = 0uLL;
    v26 = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FCB0150;
    v28.__r_.__value_.__l.__size_ = (std::string::size_type)&v31;
    v29 = &v28;
    LOBYTE(v40) = 0;
    v41 = &off_24FCB0150;
    v42 = (uint64_t)&v31;
    *((_QWORD *)&v43 + 1) = &v41;
    v44 = 0uLL;
    *(_QWORD *)&v45 = 0x800000000;
    sub_22F21E87C((uint64_t)&v25, (char *)&v40);
    sub_22E3B3AD0((uint64_t)&v44);
    v16 = (void **)*((_QWORD *)&v43 + 1);
    if (*((void ***)&v43 + 1) == &v41)
    {
      v17 = 4;
      v16 = &v41;
    }
    else
    {
      if (!*((_QWORD *)&v43 + 1))
        goto LABEL_31;
      v17 = 5;
    }
    (*((void (**)(void))*v16 + v17))();
LABEL_31:
    v19 = v29;
    if (v29 == &v28)
    {
      v20 = (void (**)(std::string *))(v28.__r_.__value_.__r.__words[0] + 32);
      v19 = &v28;
    }
    else
    {
      if (!v29)
        goto LABEL_36;
      v20 = (void (**)(std::string *))(v29->__r_.__value_.__r.__words[0] + 40);
    }
    (*v20)(v19);
LABEL_36:
    LOBYTE(v40) = 1;
    sub_22F22145C((uint64_t)&v25, (char *)&v40);
    v69 = 0;
    v71 = 0u;
    *(_OWORD *)&v66[8] = 0u;
    v64 = 1065353216;
    v59 = 0;
    v61 = 0u;
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v40 = (char *)&v43 + 8;
    v41 = (char *)&v43 + 8;
    v42 = 32;
    *(_QWORD *)&v61 = 0;
    v60 = 0;
    DWORD2(v61) = 0;
    v62 = 0u;
    v63 = 0u;
    v65 = 0u;
    *(_OWORD *)v66 = 0u;
    *(_DWORD *)&v66[16] = 1065353216;
    v68 = 0;
    v67 = 0;
    *(_QWORD *)&v71 = 0;
    v70 = 0;
    DWORD2(v71) = 0;
    sub_22F21EA64((uint64_t)&v25, (uint64_t)&v40);
    sub_22F227708((uint64_t)&v40);
    sub_22F227A98((uint64_t)v33);
    sub_22F227AEC(&v32);
    sub_22F2295D0((uint64_t)&v35);
    sub_22F22973C(v34);
    sub_22F227A98((uint64_t)&v37);
    sub_22F2297E8(&v36);
    sub_22F22988C((uint64_t)&v39);
    sub_22F2298E0(v38);
    llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run();
    if ((_QWORD)v45 != *((_QWORD *)&v44 + 1))
      free((void *)v45);
    if (v41 != v40)
      free(v41);
    v27 = (void **)&v25;
    sub_22E3B4AF8(&v27);
    sub_22F4405E4((uint64_t)&v31);
  }
  v10 = *v7;
  while ((sub_22F2205F8(v2, (uint64_t)&v30, **(_QWORD **)(v10 + 16)) & 1) != 0)
  {
    v11 = *(unsigned int *)(v10 + 48);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v10 + 40);
      v13 = 8 * v11;
      while ((sub_22F2205F8(v2, (uint64_t)&v30, *v12) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_20;
      }
      break;
    }
    do
    {
LABEL_20:
      v14 = v7[1];
      ++v7;
      v10 = v14;
      if (v14)
        v15 = v10 == -8;
      else
        v15 = 1;
    }
    while (v15);
    if (v7 == (uint64_t *)v9)
      goto LABEL_25;
  }
  MEMORY[0x23489DFA4](&v30);
  result = 0;
  *v3 = 0;
  v3[24] = 0;
  return result;
}

_QWORD *sub_22F220030(_QWORD *a1, void **a2, void **a3)
{
  _QWORD *v6;
  char v7;
  BOOL v8;
  void *v9;
  size_t v10;
  size_t v11;
  char v12;
  BOOL v13;
  void *v14;
  size_t v15;
  size_t v16;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  v7 = *((_BYTE *)a2 + 23);
  v8 = v7 < 0;
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  v10 = v7 & 0x7F;
  if (v8)
    v11 = (size_t)a2[1];
  else
    v11 = v10;
  v12 = *((_BYTE *)a3 + 23);
  v13 = v12 < 0;
  if (v12 >= 0)
    v14 = a3;
  else
    v14 = *a3;
  v15 = v12 & 0x7F;
  if (v13)
    v16 = (size_t)a3[1];
  else
    v16 = v15;
  result = sub_22F226394(v6, v9, v11, v14, v16, "", 0);
  *a1 = result;
  return result;
}

uint64_t sub_22F2200C0(int a1, const char **this)
{
  char v3;
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  __int16 v9;
  char v10;
  int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char v19;
  char v21;
  int v22;
  const char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  BOOL v29;
  const char *v30;
  _QWORD v31[2];
  char *v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  _QWORD v36[2];
  const char *v37;
  const char *v38;
  __int16 v39;
  _QWORD v40[2];
  const char *v41;
  __int16 v42;
  _QWORD v43[2];
  const char *v44;
  __int16 v45;

  llvm::Module::materializeMetadata((llvm::Module *)this);
  if (v31[0])
  {
    v3 = *((_BYTE *)this + 191);
    v4 = v3;
    v5 = (const char *)(v3 & 0x7F);
    if (v4 < 0)
      v5 = this[22];
    if (v5)
    {
      v8 = this[21];
      v7 = (const char *)(this + 21);
      v6 = v8;
      v39 = 1283;
      if (v4 >= 0)
        v6 = v7;
      v36[0] = " in '";
      v37 = v6;
      v38 = v5;
      v40[0] = v36;
      v41 = "'";
      v42 = 770;
      v43[0] = "cannot materialize module metadata";
      v44 = (const char *)v40;
      v9 = 515;
    }
    else
    {
      v42 = 257;
      v43[0] = "cannot materialize module metadata";
      v9 = 259;
    }
    v45 = v9;
    v35 = v31[0];
    v31[0] = 0;
    llvm::air::ErrorHandler::error();
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    return 0;
  }
  v43[0] = "air.function_constants";
  v45 = 259;
  if (llvm::Module::getNamedMetadata((llvm::Module *)this, (const llvm::Twine *)v43))
  {
    v10 = *((_BYTE *)this + 191);
    v11 = v10;
    v12 = this[22];
    v13 = (const char *)(v10 & 0x7F);
    if (v11 >= 0)
      v12 = v13;
    v14 = "invalid module";
    if (v12)
    {
      v17 = (char *)this[21];
      v16 = (char *)(this + 21);
      v15 = v17;
      v34 = 1283;
      if (v11 >= 0)
        v18 = v16;
      else
        v18 = v15;
      v31[0] = " '";
      v32 = v18;
      v33 = v12;
      v36[0] = v31;
      v37 = "'";
      v39 = 770;
      v40[0] = "invalid module";
      v41 = (const char *)v36;
      v42 = 515;
      v19 = 2;
    }
    else
    {
      v39 = 257;
      v40[0] = "invalid module";
      v42 = 259;
      v19 = 3;
    }
    if (v12)
      v14 = (const char *)v40;
    v43[0] = v14;
    v44 = ", function constants are not supported for lowering libraries";
    LOBYTE(v45) = v19;
    HIBYTE(v45) = 3;
    llvm::air::ErrorHandler::error();
    return 0;
  }
  v43[0] = "air.visible_function_references";
  v45 = 259;
  if (llvm::Module::getNamedMetadata((llvm::Module *)this, (const llvm::Twine *)v43))
  {
    v21 = *((_BYTE *)this + 191);
    v22 = v21;
    v23 = (const char *)(v21 & 0x7F);
    if (v22 < 0)
      v23 = this[22];
    if (v23)
    {
      v26 = (char *)this[21];
      v25 = (char *)(this + 21);
      v24 = v26;
      v34 = 1283;
      if (v22 >= 0)
        v27 = v25;
      else
        v27 = v24;
      v31[0] = " '";
      v32 = v27;
      v33 = v23;
      v36[0] = v31;
      v37 = "'";
      v39 = 770;
      v40[0] = "invalid module";
      v41 = (const char *)v36;
      v42 = 515;
      v28 = 2;
    }
    else
    {
      v39 = 257;
      v40[0] = "invalid module";
      v42 = 259;
      v28 = 3;
    }
    v29 = v23 == 0;
    v30 = (const char *)v40;
    if (v29)
      v30 = "invalid module";
    v43[0] = v30;
    v44 = ", visible function references are not supported for lowering libraries";
    LOBYTE(v45) = v28;
    HIBYTE(v45) = 3;
    llvm::air::ErrorHandler::error();
    return 0;
  }
  return 1;
}

uint64_t sub_22F2203F8(uint64_t a1, llvm::object::Binary *a2)
{
  llvm::Module **v2;
  llvm::Module **v3;
  llvm::Module *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t FileName;
  uint64_t v13;
  __int16 v14;
  _QWORD v15[2];
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v2 = (llvm::Module **)*((_QWORD *)a2 + 6);
  v3 = (llvm::Module **)*((_QWORD *)a2 + 7);
  if (v2 == v3)
    return 1;
  while (1)
  {
    v5 = *v2;
    llvm::Module::materializeMetadata(*v2);
    if (v18)
      break;
    v15[0] = "air.function_constants";
    v17 = 259;
    if (llvm::Module::getNamedMetadata(v5, (const llvm::Twine *)v15))
    {
      v14 = 1283;
      v11[0] = "invalid module in '";
      FileName = llvm::object::Binary::getFileName(a2);
      v13 = v8;
      v15[0] = v11;
      v16 = "', function constants are not supported for lowering libraries";
      v17 = 770;
      llvm::air::ErrorHandler::error();
      return 0;
    }
    v15[0] = "air.visible_function_references";
    v17 = 259;
    if (llvm::Module::getNamedMetadata(v5, (const llvm::Twine *)v15))
    {
      v14 = 1283;
      v11[0] = "invalid module in '";
      FileName = llvm::object::Binary::getFileName(a2);
      v13 = v9;
      v15[0] = v11;
      v16 = "', visible function references are not supported for lowering libraries";
      v17 = 770;
      llvm::air::ErrorHandler::error();
      return 0;
    }
    if (++v2 == v3)
      return 1;
  }
  v14 = 1283;
  FileName = llvm::object::Binary::getFileName(a2);
  v13 = v7;
  v15[0] = v11;
  v16 = "'";
  v17 = 770;
  v10 = v18;
  v11[0] = "cannot materialize metadata in '";
  v18 = 0;
  llvm::air::ErrorHandler::error();
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return 0;
}

uint64_t sub_22F2205F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Module **v23;
  llvm::Module **v24;
  llvm::Module *v25;
  char v26;
  void (**v27)(void);
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t FileName;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (**v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Module *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[2];
  uint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[2];
  const char *v56;
  uint64_t v57;
  __int16 v58;
  void *__p[2];
  const char *v60;
  __int16 v61;
  _QWORD v62[2];
  unint64_t v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v5 = (int32x2_t *)(a1 + 232);
  v6 = *(_QWORD *)(a1 + 232);
  v7 = *(unsigned int *)(a1 + 248);
  v8 = sub_22F228AEC(v6, v7, a3);
  if ((uint64_t *)(v6 + 16 * v7) == v8)
    return 1;
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 256) + 16 * *((unsigned int *)v8 + 2));
  if (v9 == *(_QWORD **)(a1 + 264))
    return 1;
  v63 = v9[1];
  v10 = v63;
  v9[1] = 2;
  sub_22F21E630(v5, v9);
  if ((v10 & 6) == 2)
  {
    v63 = 2;
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v58 = 260;
      v55[0] = v11 + 216;
      MEMORY[0x23489F1BC](__p, v55);
      v62[0] = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
      v62[1] = v12;
      if (SHIBYTE(v60) < 0)
        operator delete(__p[0]);
      llvm::Module::materializeAll((llvm::Module *)(v10 & 0xFFFFFFFFFFFFFFF8));
      if (v54)
      {
        v13 = *(_BYTE *)(v11 + 191);
        v14 = v13;
        v15 = v13 & 0x7F;
        if (v14 < 0)
          v15 = *(_QWORD *)(v11 + 176);
        if (v15)
        {
          v53 = 1283;
          v16 = v11 + 168;
          if (v14 < 0)
            v16 = *(_QWORD *)(v11 + 168);
          v50[0] = " in '";
          v51 = v16;
          v52 = v15;
          v55[0] = v50;
          v56 = "'";
          v58 = 770;
          __p[0] = "cannot materialize module";
          v60 = (const char *)v55;
          v17 = 515;
        }
        else
        {
          v58 = 257;
          __p[0] = "cannot materialize module";
          v17 = 259;
        }
        v61 = v17;
        v49 = v54;
        v54 = 0;
        llvm::air::ErrorHandler::error();
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
LABEL_49:
        v35 = MEMORY[0x23489F15C](v10 & 0xFFFFFFFFFFFFFFF8);
        MEMORY[0x2348A0E9C](v35, 0x10B2C407FF26C1CLL);
        goto LABEL_50;
      }
      if (sub_22E3B38EC(v62, (_DWORD *)(a1 + 72)) && (llvm::air::upgradeAIRModule() & 1) == 0)
      {
        v30 = *(_BYTE *)(v11 + 191);
        v31 = v30;
        v32 = v30 & 0x7F;
        if (v31 < 0)
          v32 = *(_QWORD *)(v11 + 176);
        if (v32)
        {
          v53 = 1283;
          v33 = v11 + 168;
          if (v31 < 0)
            v33 = *(_QWORD *)(v11 + 168);
          v50[0] = " in '";
          v51 = v33;
          v52 = v32;
          v55[0] = v50;
          v56 = "'";
          v58 = 770;
          __p[0] = "cannot upgrade module";
          v60 = (const char *)v55;
          v34 = 515;
        }
        else
        {
          v58 = 257;
          __p[0] = "cannot upgrade module";
          v34 = 259;
        }
        v61 = v34;
        v48[1] = 0;
        llvm::air::ErrorHandler::error();
        goto LABEL_49;
      }
      v48[0] = v10 & 0xFFFFFFFFFFFFFFF8;
      v67 = 0;
      v40 = sub_22F4419AC(a2, v48, v66);
      if (v67 == v66)
      {
        v41 = (void (**)(void))(v66[0] + 32);
      }
      else
      {
        if (!v67)
          goto LABEL_67;
        v41 = (void (**)(void))(*v67 + 40);
      }
      (*v41)();
LABEL_67:
      if (v48[0])
      {
        v44 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v44, 0x10B2C407FF26C1CLL);
      }
      if ((v40 & 1) != 0)
        goto LABEL_50;
    }
LABEL_37:
    v18 = 1;
    goto LABEL_51;
  }
  if (v10 < 8 || (v10 & 6) != 0)
    goto LABEL_37;
  v20 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if (*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8) != 3)
    goto LABEL_37;
  v63 = 2;
  v58 = 261;
  v55[0] = llvm::object::IRObjectFile::getTargetTriple((llvm::object::IRObjectFile *)(v10 & 0xFFFFFFFFFFFFFFF8));
  v55[1] = v21;
  MEMORY[0x23489F1BC](__p, v55);
  v50[0] = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
  v50[1] = v22;
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  v23 = (llvm::Module **)v20[6];
  v24 = (llvm::Module **)v20[7];
  if (v23 == v24)
  {
LABEL_36:
    (*(void (**)(unint64_t))(*v20 + 8))(v10 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  while (1)
  {
    llvm::Module::materializeAll(*v23);
    if (v62[0])
      break;
    if (sub_22E3B38EC(v50, (_DWORD *)(a1 + 72)) && (llvm::air::upgradeAIRModule() & 1) == 0)
    {
      FileName = llvm::object::Binary::getFileName((llvm::object::Binary *)(v10 & 0xFFFFFFFFFFFFFFF8));
      v58 = 1283;
      v55[0] = "cannot upgrade module in '";
      v56 = (const char *)FileName;
      v57 = v38;
      __p[0] = v55;
      v60 = "'";
      v61 = 770;
      v46 = 0;
      llvm::air::ErrorHandler::error();
      v39 = v46;
      if (!v46)
        goto LABEL_55;
      goto LABEL_54;
    }
    v25 = *v23;
    *v23 = 0;
    v45 = v25;
    v65 = 0;
    v26 = sub_22F4419AC(a2, (uint64_t *)&v45, v64);
    if (v65 == v64)
    {
      v27 = (void (**)(void))(v64[0] + 32);
    }
    else
    {
      if (!v65)
        goto LABEL_32;
      v27 = (void (**)(void))(*v65 + 40);
    }
    (*v27)();
LABEL_32:
    v28 = (uint64_t)v45;
    v45 = 0;
    if (v28)
    {
      v29 = MEMORY[0x23489F15C]();
      MEMORY[0x2348A0E9C](v29, 0x10B2C407FF26C1CLL);
    }
    if ((v26 & 1) != 0)
      goto LABEL_55;
    if (++v23 == v24)
      goto LABEL_36;
  }
  v42 = llvm::object::Binary::getFileName((llvm::object::Binary *)(v10 & 0xFFFFFFFFFFFFFFF8));
  v58 = 1283;
  v55[0] = "cannot materialize module in '";
  v56 = (const char *)v42;
  v57 = v43;
  __p[0] = v55;
  v60 = "'";
  v61 = 770;
  v47 = v62[0];
  v62[0] = 0;
  llvm::air::ErrorHandler::error();
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v39 = v62[0];
  if (v62[0])
LABEL_54:
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
LABEL_55:
  (*(void (**)(unint64_t))(*v20 + 8))(v10 & 0xFFFFFFFFFFFFFFF8);
LABEL_50:
  v18 = 0;
LABEL_51:
  sub_22E3B4400((uint64_t *)&v63);
  return v18;
}

uint64_t sub_22F220BBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  void *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  uint64_t v17;

  v3 = *a2;
  operator new();
  v4 = MEMORY[0x23489F150]();
  *a1 = v4;
  v5 = *(_BYTE *)(v3 + 47);
  v6 = v5;
  if (v5 >= 0)
    v7 = (void *)(v3 + 24);
  else
    v7 = *(void **)(v3 + 24);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v3 + 32);
  sub_22E616030(v4, v7, v9);
  llvm::air::getAIRTargetDataLayout();
  llvm::Module::setDataLayout();
  __p[0] = (void *)0x8000000300000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(v3 + 72), __p) & 1) == 0)
  {
    llvm::Triple::getEffectiveMacCatalystVariant((llvm::Triple *)(v3 + 24));
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_DWORD *)(v10 + 64) = 0;
    v17 = v10;
    llvm::air::AIRTargetInfoBuilder::setABI();
    v11 = llvm::air::AIRTargetInfoBuilder::setMaxBindings();
    v12 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    v13 = v17;
    v17 = 0;
    if (v13)
      MEMORY[0x2348A0E9C](v13, 0x1000C4069DB8102);
    if (v16 < 0)
      operator delete(__p[0]);
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    MEMORY[0x2348A0E9C](v12, 0x1000C4069DB8102);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::air::AIVersion::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F220E4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  const llvm::Function *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  llvm::GlobalValue *v15;
  uint64_t v16;
  llvm::GlobalVariable *v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Function *v25;
  int v26;
  unsigned int v27;
  int hasExternalWeakLinkage;
  unsigned int v29;
  uint64_t v30;
  llvm::GlobalValue *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *Name;
  _QWORD v39[2];
  const llvm::Function *v40;
  uint64_t v41;

  v5 = (const llvm::Function *)result;
  v6 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a3;
    v8 = ((_DWORD)v6 - 1) & ((result >> 4) ^ (result >> 9));
    v9 = *(_QWORD *)a3 + (v8 << 6);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10 == result)
    {
LABEL_6:
      if (v9 != v7 + (v6 << 6))
        return result;
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v6 - 1);
        v9 = v7 + (v8 << 6);
        v10 = *(_QWORD *)(v9 + 24);
        if (v10 == result)
          goto LABEL_6;
      }
    }
  }
  v13 = *(unsigned __int8 *)(result + 16);
  v14 = v13 == 4 || v13 == 10;
  if (!v14 && (v13 - 11) >= 0xA)
  {
    if (!*(_BYTE *)(result + 16))
    {
      v22 = *(_QWORD *)(result + 24);
      v23 = *(_DWORD *)(result + 32) & 0xF;
      LOWORD(v41) = 261;
      Name = (void *)llvm::Value::getName((llvm::Value *)result);
      v39[0] = v24;
      v15 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x78);
      v25 = (llvm::Function *)MEMORY[0x23489F6FC](v15, v22, v23, 0xFFFFFFFFLL, &Name, a2);
      llvm::Function::copyAttributesFrom(v25, v5);
      v26 = *((_DWORD *)v15 + 8);
      v27 = v26 & 0xFFFFFFF0;
      *((_DWORD *)v15 + 8) = v26 & 0xFFFFFFF0;
      if ((v26 & 0x30) != 0)
      {
        hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v15);
        v27 = *((_DWORD *)v15 + 8);
        if (!hasExternalWeakLinkage)
          v27 |= 0x4000u;
      }
      if ((v27 & 0xF) - 7 >= 2)
        v29 = v27 & 0xFFFFFFCF;
      else
        v29 = v27 & 0xFFFFBFCF | 0x4000;
      *((_DWORD *)v15 + 8) = v29;
      goto LABEL_29;
    }
    if (v13 == 5)
    {
      v32 = *(_DWORD *)(result + 20);
      v33 = v32 & 0x7FFFFFF;
      if ((v32 & 0x7FFFFFF) != 0)
      {
        v34 = result;
        do
        {
          result = sub_22F220E4C(*(_QWORD *)(v34 - 32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)), a2, a3);
          v34 += 32;
          --v33;
        }
        while (v33);
      }
    }
    else
    {
      if (v13 == 3)
      {
        v15 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
        LOWORD(v41) = 261;
        Name = (void *)llvm::Value::getName(v5);
        v39[0] = v16;
        v17 = (llvm::GlobalVariable *)llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalVariable::copyAttributesFrom(v17, v5);
        v18 = *((_DWORD *)v15 + 8);
        v19 = v18 & 0xFFFFFFF0;
        *((_DWORD *)v15 + 8) = v18 & 0xFFFFFFF0;
        if ((v18 & 0x30) != 0)
        {
          v20 = llvm::GlobalValue::hasExternalWeakLinkage(v15);
          v19 = *((_DWORD *)v15 + 8);
          if (!v20)
            v19 |= 0x4000u;
        }
        if ((v19 & 0xF) - 7 >= 2)
          v21 = v19 & 0xFFFFFFCF;
        else
          v21 = v19 & 0xFFFFBFCF | 0x4000;
        *((_DWORD *)v15 + 8) = v21;
LABEL_29:
        v39[0] = 2;
        v39[1] = 0;
        v40 = v5;
        if (v5 != (const llvm::Function *)-8192 && v5 != (const llvm::Function *)-4096 && v5)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v39);
        Name = &unk_24FA66978;
        v41 = a3;
        result = (uint64_t)sub_22F2299F0(a3, &Name);
        v30 = result;
        if (v40 != (const llvm::Function *)-8192 && v40 != (const llvm::Function *)-4096 && v40)
          result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v39);
        v31 = *(llvm::GlobalValue **)(v30 + 56);
        if (v31 != v15)
        {
          if (v31 && v31 != (llvm::GlobalValue *)-8192 && v31 != (llvm::GlobalValue *)-4096)
            result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v30 + 40));
          *(_QWORD *)(v30 + 56) = v15;
          if (v15 != (llvm::GlobalValue *)-8192 && v15 != (llvm::GlobalValue *)-4096)
          {
            if (v15)
              return llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v30 + 40));
          }
        }
        return result;
      }
      if ((v13 - 11) >= 0xFDu)
      {
        v35 = *(_DWORD *)(result + 20);
        v36 = v35 & 0x7FFFFFF;
        if ((v35 & 0x7FFFFFF) != 0)
        {
          v37 = result;
          do
          {
            result = sub_22F220E4C(*(_QWORD *)(v37 - 32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)), a2, a3);
            v37 += 32;
            --v36;
          }
          while (v36);
        }
      }
    }
  }
  return result;
}

void sub_22F2211D8()
{
  llvm::NamedMDNode *inserted;
  void *v1;
  uint64_t v2;
  _BYTE v3[64];
  void *v4;
  uint64_t v5;
  _BYTE v6[64];
  void *v7;
  uint64_t v8;
  _BYTE v9[64];
  void *v10;
  uint64_t v11;
  _BYTE v12[64];
  void *v13;
  uint64_t v14;
  _BYTE v15[64];
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[34];

  v20[32] = *MEMORY[0x24BDAC8D0];
  v1 = v3;
  v2 = 0x800000000;
  v4 = v6;
  v5 = 0x800000000;
  v7 = v9;
  v8 = 0x800000000;
  v10 = v12;
  v11 = 0x800000000;
  v13 = v15;
  v14 = 0x800000000;
  v16 = v20;
  v17 = v20;
  v18 = 32;
  v19 = 0;
  llvm::DebugInfoFinder::processModule();
  inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
  llvm::NamedMDNode::clearOperands(inserted);
  llvm::NamedMDNode::eraseFromParent(inserted);
  if (llvm::Module::getModuleFlag())
    llvm::Module::addModuleFlag();
  if (llvm::Module::getModuleFlag())
    llvm::Module::addModuleFlag();
  if (v17 != v16)
    free(v17);
  if (v13 != v15)
    free(v13);
  if (v10 != v12)
    free(v10);
  if (v7 != v9)
    free(v7);
  if (v4 != v6)
    free(v4);
  if (v1 != v3)
    free(v1);
}

void sub_22F22145C(uint64_t a1, char *a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_22E3BB3A0();
  v5 = *a2;
  *(_QWORD *)v4 = &off_24FCB0198;
  *(_BYTE *)(v4 + 8) = v5;
  v17 = v4;
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 < *(_QWORD *)(a1 + 16))
  {
    sub_22E3BB384(v4, v6);
  }
  else
  {
    v7 = sub_22E3BB35C(v4);
    v15 = sub_22E3BB33C((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    if (v15)
      sub_22E3BB368(v15);
  }
  sub_22E3BB350();
}

uint64_t sub_22F2214CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t **i;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t ArchName;
  uint64_t v33;
  uint64_t *v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *j;
  char *v41;
  unint64_t *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 *v69;
  char v70;
  void *v71;
  size_t v72;
  char v73;
  size_t v74;
  void *v75;
  size_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t k;
  __int128 v83;
  char *v84;
  unint64_t v85;
  BOOL v86;
  char *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  _QWORD *v94;
  void *v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v117;
  llvm::NamedMDNode *v118;
  llvm::NamedMDNode *v119;
  llvm::NamedMDNode *v120;
  llvm::NamedMDNode *v121;
  llvm::NamedMDNode *v122;
  int v123;
  char *v124;
  char *v125;
  int v126;
  char *v127;
  void **v128;
  void **v129;
  void *v130;
  uint64_t v131;
  llvm::Value *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  llvm::Module *v140;
  llvm::NamedMDNode *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Value *v145;
  char *v146;
  uint64_t v147;
  uint64_t *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void **v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  llvm::Value *v160;
  uint64_t v161;
  uint64_t Name;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  llvm::Value *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  char *v181;
  char *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  llvm::Module *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  void *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  _QWORD v198[3];
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  llvm::Module **v204;
  void *v205[2];
  unint64_t v206;
  __int16 v207;
  void *__dst[2];
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  void *__p[2];
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  void *v217[5];
  llvm::Module *v218[2];
  uint64_t v219;
  void *v220[2];
  char v221;
  std::string v222;
  __int16 v223;
  void **v224;
  uint64_t v225;
  const char *v226;
  const char *v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  char v232;
  int v233[3];
  int v234;
  int v235;
  _QWORD v236[2];
  uint64_t v237;
  _QWORD v238[2];
  uint64_t v239;
  _QWORD v240[3];
  uint64_t v241;
  int v242[6];
  _QWORD v243[4];
  _QWORD v244[10];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[476];

  v0 = MEMORY[0x24BDAC7A8]();
  v248[473] = *MEMORY[0x24BDAC8D0];
  sub_22F442820(&v202, *(llvm::LLVMContext **)(v0 + 8), *(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 280);
  if (v1)
    sub_22F22B91C(v0 + 88, v1);
  if (*(_DWORD *)(v0 + 116))
    sub_22F217AD4(v0);
  if (*(_DWORD *)(*(_QWORD *)(v0 + 16) + 120))
    goto LABEL_8;
  if (*(_DWORD *)(v0 + 200))
  {
    sub_22F218688(v0);
    goto LABEL_8;
  }
  v191 = v0;
  if (*(_DWORD *)(v0 + 116))
  {
    v5 = *(unsigned int *)(v0 + 112);
    if ((_DWORD)v5)
    {
      for (i = *(uint64_t ***)(v0 + 104); !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      i = *(uint64_t ***)(v0 + 104);
    }
    v8 = *(_QWORD *)(v0 + 104) + 8 * v5;
    if (i != (uint64_t **)v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = *i;
      do
      {
        if (*((_DWORD *)v12 + 6) == 1)
        {
          v13 = *(_QWORD *)v12[2];
          v14 = ~(_BYTE)v13 & 6;
          v15 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
          if (!v14 && v15 != 0)
          {
            v19 = *v12;
            v18 = v12 + 12;
            v17 = v19;
            v20 = *v15;
            v21 = v15[1];
            if (v10 >= v9)
            {
              v22 = (v10 - v11) >> 5;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 59)
LABEL_307:
                abort();
              if ((v9 - v11) >> 4 > v23)
                v23 = (v9 - v11) >> 4;
              if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFE0)
                v24 = 0x7FFFFFFFFFFFFFFLL;
              else
                v24 = v23;
              if (v24 >> 59)
LABEL_308:
                sub_22E3B3F8C();
              v25 = (char *)operator new(32 * v24);
              v26 = &v25[32 * v22];
              *(_QWORD *)v26 = v18;
              *((_QWORD *)v26 + 1) = v17;
              *((_QWORD *)v26 + 2) = v20;
              *((_QWORD *)v26 + 3) = v21;
              if (v10 == v11)
              {
                v29 = v10;
                v11 = &v25[32 * v22];
                v0 = v191;
              }
              else
              {
                v27 = &v25[32 * v22];
                v0 = v191;
                do
                {
                  v28 = *((_OWORD *)v10 - 1);
                  *((_OWORD *)v27 - 2) = *((_OWORD *)v10 - 2);
                  *((_OWORD *)v27 - 1) = v28;
                  v27 -= 32;
                  v10 -= 32;
                }
                while (v10 != v11);
                v29 = v11;
                v11 = v27;
              }
              v9 = &v25[32 * v24];
              v10 = v26 + 32;
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_QWORD *)v10 = v18;
              *((_QWORD *)v10 + 1) = v17;
              *((_QWORD *)v10 + 2) = v20;
              *((_QWORD *)v10 + 3) = v21;
              v10 += 32;
            }
          }
        }
        do
        {
          v30 = i[1];
          ++i;
          v12 = v30;
          if (v30)
            v31 = v12 + 1 == 0;
          else
            v31 = 1;
        }
        while (v31);
      }
      while (i != (uint64_t **)v8);
      if (v11 != v10)
      {
        ArchName = llvm::Triple::getArchName((llvm::Triple *)(v0 + 24));
        LOWORD(v215) = 1283;
        __p[0] = "Undefined symbol(s) for architecture '";
        v213 = ArchName;
        v214 = v33;
        v224 = __p;
        v226 = "':";
        LOWORD(v228) = 770;
        llvm::air::ErrorHandler::explain();
        v34 = (uint64_t *)v11;
        do
        {
          LOWORD(v215) = 1283;
          __p[0] = "  '";
          v213 = *v34;
          v214 = v34[1];
          v224 = __p;
          v226 = "', referenced from:";
          LOWORD(v228) = 770;
          llvm::air::ErrorHandler::explain();
          sub_22F441580(v0, (_BYTE *)v34[2], v34[3], "", 0, "", 0);
          v34 += 4;
        }
        while (v34 != (uint64_t *)v10);
        std::operator+<char>();
        v35 = std::string::append(&v222, "'");
        v36 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v213 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        LOWORD(v228) = 260;
        v224 = __p;
        v198[0] = 0;
        llvm::air::ErrorHandler::error();
        if (SHIBYTE(v213) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v222.__r_.__value_.__l.__data_);
        if (v11)
          operator delete(v11);
        goto LABEL_8;
      }
      if (v11)
        operator delete(v11);
    }
  }
  sub_22F21932C((uint64_t)v198, v0);
  if (!v201)
  {
LABEL_8:
    v2 = 0;
    goto LABEL_9;
  }
  v192 = v0 + 88;
  if (*(_DWORD *)(v0 + 180))
  {
    v37 = *(_QWORD *)(v0 + 8);
    v188 = v0 + 24;
    if (*(char *)(v0 + 47) < 0)
    {
      sub_22E3BB2B4(__dst, *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v0 + 24);
      v209 = *(_QWORD *)(v0 + 40);
    }
    v210 = *(_OWORD *)(v0 + 48);
    v211 = *(_QWORD *)(v0 + 64);
    MEMORY[0x23489DF98](&v222, v37, __dst, "", 0);
    if (SHIBYTE(v209) < 0)
      operator delete(__dst[0]);
    v38 = *(unsigned int *)(v0 + 176);
    if ((_DWORD)v38)
    {
      for (j = *(uint64_t **)(v0 + 168); !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = *(uint64_t **)(v0 + 168);
    }
    v189 = *(_QWORD *)(v0 + 168) + 8 * v38;
    if (j != (uint64_t *)v189)
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = *j;
      while (1)
      {
        v45 = sub_22F222938(v0, (uint64_t)&v222, **(_QWORD **)(v44 + 16));
        if (!v46)
        {
LABEL_130:
          LOBYTE(v224) = 0;
          v232 = 0;
          goto LABEL_131;
        }
        v47 = v45;
        if (v45 < 8)
          goto LABEL_83;
        if (v42 < (unint64_t *)v41)
          break;
        v63 = v42 - v43;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_307;
        if ((v41 - (char *)v43) >> 2 > v64)
          v64 = (v41 - (char *)v43) >> 2;
        if ((unint64_t)(v41 - (char *)v43) >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          if (v65 >> 61)
            goto LABEL_308;
          v66 = (char *)operator new(8 * v65);
        }
        else
        {
          v66 = 0;
        }
        v67 = (unint64_t *)&v66[8 * v63];
        *v67 = v47;
        v48 = v67 + 1;
        if (v42 != v43)
        {
          do
          {
            v68 = *--v42;
            *--v67 = v68;
          }
          while (v42 != v43);
          v42 = v43;
        }
        v43 = v67;
        v41 = &v66[8 * v65];
        if (v42)
          operator delete(v42);
LABEL_84:
        v49 = *(unsigned int *)(v44 + 48);
        if ((_DWORD)v49)
        {
          v50 = *(uint64_t **)(v44 + 40);
          v51 = &v50[v49];
          while (1)
          {
            v52 = sub_22F222938(v0, (uint64_t)&v222, *v50);
            if (!v53)
              goto LABEL_130;
            v54 = v52;
            if (v52 < 8)
              goto LABEL_90;
            if (v48 < (unint64_t *)v41)
              break;
            v55 = v48 - v43;
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 61)
              goto LABEL_307;
            if ((v41 - (char *)v43) >> 2 > v56)
              v56 = (v41 - (char *)v43) >> 2;
            if ((unint64_t)(v41 - (char *)v43) >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v56;
            if (v57)
            {
              if (v57 >> 61)
                goto LABEL_308;
              v58 = (char *)operator new(8 * v57);
            }
            else
            {
              v58 = 0;
            }
            v59 = (unint64_t *)&v58[8 * v55];
            *v59 = v54;
            v42 = v59 + 1;
            if (v48 != v43)
            {
              do
              {
                v60 = *--v48;
                *--v59 = v60;
              }
              while (v48 != v43);
              v48 = v43;
            }
            v43 = v59;
            v41 = &v58[8 * v57];
            if (v48)
              operator delete(v48);
LABEL_91:
            ++v50;
            v48 = v42;
            if (v50 == v51)
              goto LABEL_109;
          }
          *v48++ = v52;
LABEL_90:
          v42 = v48;
          goto LABEL_91;
        }
        v42 = v48;
        do
        {
LABEL_109:
          v61 = j[1];
          ++j;
          v44 = v61;
          if (v61)
            v62 = v44 == -8;
          else
            v62 = 1;
        }
        while (v62);
        if (j == (uint64_t *)v189)
          goto LABEL_193;
      }
      *v42++ = v45;
LABEL_83:
      v48 = v42;
      goto LABEL_84;
    }
    v43 = 0;
LABEL_193:
    llvm::air::AIRModuleLinker::takeModule((llvm::air::AIRModuleLinker *)&v222);
    v224 = (void **)&v226;
    v225 = 0x800000000;
    v236[0] = &v237;
    v236[1] = 0x400000000;
    v238[0] = &v239;
    v238[1] = 0x200000000;
    v240[1] = &v241;
    v240[2] = 0x800000000;
    v243[2] = v244;
    v243[3] = 0x800000000;
    v244[8] = v245;
    v244[9] = 0x400000000;
    v245[4] = v246;
    v245[5] = 0x400000000;
    v246[4] = v247;
    v246[5] = 0x400000000;
    v247[4] = v248;
    v247[5] = 0x400000000;
    llvm::air::AIRInfoFinder::processModule();
    __p[0] = v218[0];
    __p[1] = &v224;
    v217[4] = 0;
    v213 = 0;
    v214 = 0;
    LODWORD(v215) = 0;
    v216 = 0u;
    memset(v217, 0, 28);
    llvm::air::AIRMDGlobalsHandler::processModule((llvm::air::AIRMDGlobalsHandler *)__p);
    llvm::air::AIRMDGlobalsHandler::rebuildCompilerUsedListImpl((llvm::air::AIRMDGlobalsHandler *)__p);
    v205[0] = "air.vertex";
    v207 = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (NamedMetadata)
      llvm::Module::eraseNamedMetadata(v218[0], NamedMetadata);
    v205[0] = "air.fragment";
    v207 = 259;
    v117 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (v117)
      llvm::Module::eraseNamedMetadata(v218[0], v117);
    v205[0] = "air.kernel";
    v207 = 259;
    v118 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (v118)
      llvm::Module::eraseNamedMetadata(v218[0], v118);
    v205[0] = "air.visible";
    v207 = 259;
    v119 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (v119)
      llvm::Module::eraseNamedMetadata(v218[0], v119);
    v205[0] = "air.intersection";
    v207 = 259;
    v120 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (v120)
      llvm::Module::eraseNamedMetadata(v218[0], v120);
    v205[0] = "air.mesh";
    v207 = 259;
    v121 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (v121)
      llvm::Module::eraseNamedMetadata(v218[0], v121);
    v205[0] = "air.object";
    v207 = 259;
    v122 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
    if (v122)
      llvm::Module::eraseNamedMetadata(v218[0], v122);
    v123 = v234;
    if (v234 == v235)
    {
      v124 = 0;
      v125 = 0;
      v126 = v234;
    }
    else
    {
      v125 = 0;
      v124 = 0;
      v127 = 0;
      v128 = &v224[v235];
      v129 = &v224[v234];
      v190 = v128;
      do
      {
        v130 = *v129;
        v131 = *((_QWORD *)*v129 - *((unsigned int *)*v129 + 2));
        if (v131)
          v132 = *(llvm::Value **)(v131 + 128);
        else
          v132 = 0;
        llvm::Value::getName(v132);
        sub_22F2228A0(v205, v192);
        if (v205[0] != (void *)(*(_QWORD *)(v191 + 168) + 8 * *(unsigned int *)(v191 + 176)))
        {
          if (v124 >= v127)
          {
            v133 = (v124 - v125) >> 3;
            v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 61)
              goto LABEL_307;
            if ((v127 - v125) >> 2 > v134)
              v134 = (v127 - v125) >> 2;
            if ((unint64_t)(v127 - v125) >= 0x7FFFFFFFFFFFFFF8)
              v135 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v135 = v134;
            if (v135)
            {
              if (v135 >> 61)
                goto LABEL_308;
              v136 = (char *)operator new(8 * v135);
            }
            else
            {
              v136 = 0;
            }
            v137 = &v136[8 * v133];
            *(_QWORD *)v137 = v130;
            v138 = v137 + 8;
            while (v124 != v125)
            {
              v139 = *((_QWORD *)v124 - 1);
              v124 -= 8;
              *((_QWORD *)v137 - 1) = v139;
              v137 -= 8;
            }
            v127 = &v136[8 * v135];
            if (v125)
              operator delete(v125);
            v124 = v138;
            v125 = v137;
            v128 = v190;
          }
          else
          {
            *(_QWORD *)v124 = v130;
            v124 += 8;
          }
        }
        ++v129;
      }
      while (v129 != v128);
      v126 = v234;
      v123 = v235;
    }
    if (v123 - v126 != (v124 - v125) >> 3)
    {
      v140 = v218[0];
      v205[0] = "air.ci";
      v207 = 259;
      v141 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v218[0], (const llvm::Twine *)v205);
      llvm::Module::eraseNamedMetadata(v140, v141);
      llvm::Module::getOrInsertNamedMetadata();
      if (v125 != v124)
      {
        v142 = v125;
        do
        {
          v142 += 8;
          llvm::NamedMDNode::addOperand();
        }
        while (v142 != v124);
      }
    }
    llvm::air::AIRInfoFinder::reset((llvm::air::AIRInfoFinder *)&v224);
    llvm::air::AIRInfoFinder::processModule();
    sub_22F2275AC((uint64_t)__p);
    sub_22F227614((uint64_t)&v224);
    if (v125 != v124)
    {
      sub_22F4420CC((uint64_t)&v224, v188);
      v205[0] = 0;
      v205[1] = 0;
      v206 = 0;
      sub_22F21EB64();
      sub_22F21EBA8();
      sub_22F227A98((uint64_t)&v230);
      sub_22F227AEC(&v227);
      sub_22F2295D0((uint64_t)v236);
      sub_22F22973C(v233);
      sub_22F227A98((uint64_t)v240);
      sub_22F2297E8(v238);
      sub_22F22988C((uint64_t)v243);
      sub_22F2298E0(v242);
      llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run();
      if (v217[0] != *((void **)&v216 + 1))
        free(v217[0]);
      if (__p[1] != __p[0])
        free(__p[1]);
      v220[0] = v205;
      sub_22E3B4AF8((void ***)v220);
      sub_22F4405E4((uint64_t)&v224);
    }
    v225 = 0;
    v224 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v227 = 0;
    v226 = 0;
    v229 = 0;
    v228 = 0;
    v213 = 0;
    v214 = 0;
    v215 = 0;
    v216 = 0uLL;
    v231 = 0;
    v230 = 0;
    v217[0] = 0;
    v232 = 1;
    sub_22F44330C(__p);
    v0 = v191;
    if (v124)
      operator delete(v124);
    v186 = v218[0];
    v218[0] = 0;
    if (v186)
    {
      v187 = MEMORY[0x23489F15C]();
      MEMORY[0x2348A0E9C](v187, 0x10B2C407FF26C1CLL);
    }
LABEL_131:
    MEMORY[0x23489DFA4](&v222);
    if (v43)
      operator delete(v43);
  }
  else
  {
    v225 = 0;
    v224 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v227 = 0;
    v226 = 0;
    v229 = 0;
    v228 = 0;
    v213 = 0;
    v214 = 0;
    v215 = 0;
    v216 = 0uLL;
    v231 = 0;
    v230 = 0;
    v217[0] = 0;
    v232 = 1;
    sub_22F44330C(__p);
  }
  if (v232)
  {
    v69 = (__int128 *)(v0 + 24);
    v70 = *(_BYTE *)(v0 + 399);
    if (v70 >= 0)
      v71 = (void *)(v0 + 376);
    else
      v71 = *(void **)(v0 + 376);
    if (v70 >= 0)
      v72 = v70 & 0x7F;
    else
      v72 = *(_QWORD *)(v0 + 384);
    v73 = *(_BYTE *)(v0 + 423);
    v74 = *(_QWORD *)(v0 + 408);
    if (v73 >= 0)
      v75 = (void *)(v0 + 400);
    else
      v75 = *(void **)(v0 + 400);
    if (v73 >= 0)
      v76 = v73 & 0x7F;
    else
      v76 = v74;
    v77 = operator new();
    sub_22F226E3C(v77, 2, v69, "", 0, v71, v72, v78, v75, v76);
    v79 = *(_QWORD *)(v191 + 456);
    *(_QWORD *)(v191 + 456) = v77;
    if (v79)
    {
      v80 = sub_22E3B46CC(v79);
      MEMORY[0x2348A0E9C](v80, 0x1032C40B18B30E6);
    }
    __p[0] = 0;
    __p[1] = 0;
    LODWORD(v213) = 0;
    v215 = 0;
    *(_QWORD *)&v216 = 0;
    v214 = 0;
    v81 = v199;
    for (k = v200; v81 != k; v81 += 104)
    {
      v222 = *(std::string *)(v81 + 8);
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      v83 = *(_OWORD *)(v81 + 32);
      *(_QWORD *)(v81 + 24) = 0;
      *(_QWORD *)(v81 + 32) = 0;
      *(_OWORD *)__dst = v83;
      v209 = *(_QWORD *)(v81 + 48);
      *(_QWORD *)(v81 + 40) = 0;
      *(_QWORD *)(v81 + 48) = 0;
      *(_OWORD *)v205 = *(_OWORD *)(v81 + 56);
      v206 = *(_QWORD *)(v81 + 72);
      *(_QWORD *)(v81 + 64) = 0;
      *(_QWORD *)(v81 + 72) = 0;
      *(_QWORD *)(v81 + 56) = 0;
      if (v215 == v214)
      {
        BYTE4(v219) = 48;
        v84 = (char *)&v219 + 4;
      }
      else
      {
        v85 = 0xAAAAAAAAAAAAAAABLL * ((v215 - v214) >> 3);
        v84 = (char *)&v219 + 5;
        do
        {
          *--v84 = (v85 % 0xA) | 0x30;
          v86 = v85 > 9;
          v85 /= 0xAuLL;
        }
        while (v86);
      }
      sub_22E3B4274(v220, v84, (char *)&v219 + 5, (char *)&v219 + 5 - v84);
      *(_OWORD *)v218 = *(_OWORD *)(v81 + 80);
      v219 = *(_QWORD *)(v81 + 96);
      *(_QWORD *)(v81 + 88) = 0;
      *(_QWORD *)(v81 + 96) = 0;
      *(_QWORD *)(v81 + 80) = 0;
      v87 = (char *)operator new(0x90uLL);
      *((_QWORD *)v87 + 1) = 0;
      *((_QWORD *)v87 + 2) = 0;
      *(_QWORD *)v87 = &off_24FCAFF10;
      sub_22F228968(v87 + 24, (__int128 *)&v222, (__int128 *)__dst, (__int128 *)v205, (__int128 *)v220, (__int128 **)v218);
      v88 = (_QWORD *)sub_22F4418A0((uint64_t)__p, (uint64_t *)v81);
      v89 = (std::__shared_weak_count *)v88[1];
      *v88 = v87 + 24;
      v88[1] = v87;
      if (v89)
      {
        p_shared_owners = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(p_shared_owners);
        while (__stlxr(v91 - 1, p_shared_owners));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v204 = v218;
      sub_22E576240((void ***)&v204);
      if (v221 < 0)
        operator delete(v220[0]);
      if (SHIBYTE(v206) < 0)
        operator delete(v205[0]);
      if (SHIBYTE(v209) < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
    }
    v205[0] = 0;
    v205[1] = 0;
    v206 = 0;
    v92 = v229;
    v93 = v230;
    if (v229 != v230)
    {
      v94 = 0;
      v95 = __p[0];
      v96 = v213;
      v97 = (uint64_t *)((char *)__p[0] + 16 * v213);
      do
      {
        v98 = sub_22F228AEC((uint64_t)v95, v96, *v92);
        if (v97 != v98)
        {
          v99 = *((_DWORD *)v98 + 2);
          v100 = v214;
          if (v214 + 24 * v99 != v215)
          {
            v101 = v214 + 24 * v99;
            v104 = *(_QWORD *)(v101 + 8);
            v103 = v101 + 8;
            v102 = v104;
            if ((unint64_t)v94 >= v206)
            {
              v94 = sub_22F228B4C((uint64_t)v205, v102, *(_QWORD *)(v103 + 8));
            }
            else
            {
              *v94 = v102;
              v105 = *(_QWORD *)(v100 + 24 * v99 + 16);
              v94[1] = v105;
              if (v105)
              {
                v106 = (unint64_t *)(v105 + 8);
                do
                  v107 = __ldxr(v106);
                while (__stxr(v107 + 1, v106));
              }
              v94 += 2;
            }
            v205[1] = v94;
          }
        }
        ++v92;
      }
      while (v92 != v93);
    }
    v108 = v226;
    v109 = v227;
    if (v226 == v227)
    {
LABEL_184:
      v110 = v214;
      v111 = v215;
      while (v110 != v111)
      {
        v112 = *(char **)(v191 + 456);
        v193 = *(_OWORD *)(v110 + 8);
        *(_QWORD *)(v110 + 8) = 0;
        *(_QWORD *)(v110 + 16) = 0;
        sub_22F21DFD8(v112, (unint64_t *)&v193);
        v113 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
        if (*((_QWORD *)&v193 + 1))
        {
          v114 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v110 += 24;
      }
      v2 = 1;
LABEL_293:
      v181 = (char *)v205[0];
      if (v205[0])
      {
        v182 = (char *)v205[1];
        if (v205[1] != v205[0])
        {
          do
          {
            v183 = (std::__shared_weak_count *)*((_QWORD *)v182 - 1);
            if (v183)
            {
              v184 = (unint64_t *)&v183->__shared_owners_;
              do
                v185 = __ldaxr(v184);
              while (__stlxr(v185 - 1, v184));
              if (!v185)
              {
                ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                std::__shared_weak_count::__release_weak(v183);
              }
            }
            v182 -= 16;
          }
          while (v182 != v181);
          v181 = (char *)v205[0];
        }
        operator delete(v181);
      }
      sub_22F4430B0((uint64_t)__p);
      if (v232)
        sub_22F44330C(&v224);
      goto LABEL_135;
    }
    while (1)
    {
      v143 = *(_QWORD *)v108;
      v144 = *(_QWORD *)(*(_QWORD *)v108 - 8 * *(unsigned int *)(*(_QWORD *)v108 + 8));
      if (v144)
        v145 = *(llvm::Value **)(v144 + 128);
      else
        v145 = 0;
      llvm::Value::getName(v145);
      sub_22F2228A0(&v222, v192);
      v146 = (char *)__p[0];
      v147 = v213;
      v148 = sub_22F228AEC((uint64_t)__p[0], v213, **(_QWORD **)(*(_QWORD *)v222.__r_.__value_.__l.__data_ + 16));
      if (&v146[16 * v147] == (char *)v148 || (v149 = *((_DWORD *)v148 + 2), v214 + 24 * v149 == v215))
      {
        v151 = 0;
        v152 = 0;
      }
      else
      {
        v150 = v214 + 24 * v149;
        v151 = *(_QWORD *)(v150 + 8);
        v152 = *(std::__shared_weak_count **)(v150 + 16);
        if (v152)
        {
          v153 = (unint64_t *)&v152->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
      }
      v155 = v224;
      v156 = v225;
      if (v225)
      {
        v157 = (unint64_t *)(v225 + 8);
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
      }
      *(_QWORD *)&v197 = v155;
      *((_QWORD *)&v197 + 1) = v156;
      v159 = *(_QWORD *)(v143 - 8 * *(unsigned int *)(v143 + 8));
      if (v159)
        v160 = *(llvm::Value **)(v159 + 128);
      else
        v160 = 0;
      Name = llvm::Value::getName(v160);
      *(_QWORD *)&v196 = v151;
      *((_QWORD *)&v196 + 1) = v152;
      if (v152)
      {
        v163 = (unint64_t *)&v152->__shared_owners_;
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      sub_22F21D770((uint64_t)v220, &v197, Name, v161, &v196);
      v165 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
      if (*((_QWORD *)&v196 + 1))
      {
        v166 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      v168 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
      if (*((_QWORD *)&v197 + 1))
      {
        v169 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = (char)v220[1];
      if (((uint64_t)v220[1] & 1) != 0)
      {
        v176 = *(_QWORD *)(v143 - 8 * *(unsigned int *)(v143 + 8));
        if (v176)
          v177 = *(llvm::Value **)(v176 + 128);
        else
          v177 = 0;
        v178 = llvm::Value::getName(v177);
        WORD4(v210) = 1283;
        __dst[0] = "cannot create '";
        v209 = v178;
        *(_QWORD *)&v210 = v179;
        v222.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        v222.__r_.__value_.__r.__words[2] = (std::string::size_type)"' function";
        v223 = 770;
        v180 = v220[0];
        v220[0] = 0;
        v195 = (uint64_t)v180;
        llvm::air::ErrorHandler::error();
        v173 = v195;
        if (v195)
LABEL_273:
          (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
      }
      else
      {
        v172 = *(_QWORD *)(v191 + 456);
        v194 = v220[0];
        sub_22F21D8F0(v172, (uint64_t *)&v194);
        v173 = (uint64_t)v194;
        v194 = 0;
        if (v173)
          goto LABEL_273;
      }
      if (v152)
      {
        v174 = (unint64_t *)&v152->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      if ((v171 & 1) != 0)
      {
        v2 = 0;
        goto LABEL_293;
      }
      v108 += 8;
      if (v108 == v109)
        goto LABEL_184;
    }
  }
  v2 = 0;
LABEL_135:
  if (v201)
    sub_22F442C38((uint64_t)v198);
LABEL_9:
  llvm::LLVMContext::setDiagnosticHandler();
  v3 = v203;
  v203 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v2;
}

uint64_t sub_22F2228A0(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  result = llvm::StringMapImpl::FindKey();
  v5 = *(_QWORD *)(a2 + 80);
  if ((_DWORD)result == -1)
  {
    v7 = (_QWORD *)(v5 + 8 * *(unsigned int *)(a2 + 88));
LABEL_13:
    v8 = v7;
    goto LABEL_5;
  }
  v6 = *(unsigned int *)(a2 + 88);
  v7 = (_QWORD *)(v5 + 8 * v6);
  if ((int)result == v6)
    goto LABEL_13;
  v8 = (_QWORD *)(v5 + 8 * (int)result);
  v9 = *v8;
  if ((*(_BYTE *)(*v8 + 8) & 0x40) == 0)
    goto LABEL_13;
  while ((*(_BYTE *)(v9 + 8) & 0x40) == 0)
  {
    do
    {
      v10 = v8[1];
      ++v8;
      v9 = v10;
      if (v10)
        v11 = v9 == -8;
      else
        v11 = 1;
    }
    while (v11);
    if (v8 == v7)
      goto LABEL_13;
  }
LABEL_5:
  *a1 = v8;
  a1[1] = v7;
  return result;
}

uint64_t sub_22F222938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Module **v23;
  llvm::Module **v24;
  llvm::Module *v25;
  char v26;
  void (**v27)(void);
  uint64_t v28;
  uint64_t v29;
  char v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t FileName;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (**v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Module *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[2];
  uint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[2];
  const char *v56;
  uint64_t v57;
  __int16 v58;
  void *__p[2];
  const char *v60;
  __int16 v61;
  _QWORD v62[2];
  unint64_t v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v3 = a3;
  v68 = *MEMORY[0x24BDAC8D0];
  v6 = (int32x2_t *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(unsigned int *)(a1 + 248);
  v9 = sub_22F228AEC(v7, v8, a3);
  if ((uint64_t *)(v7 + 16 * v8) == v9)
    return 2;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 256) + 16 * *((unsigned int *)v9 + 2));
  if (v10 == *(_QWORD **)(a1 + 264))
    return 2;
  v63 = v10[1];
  v11 = v63;
  v10[1] = 2;
  sub_22F21E630(v6, v10);
  if ((v11 & 6) == 2)
  {
    v63 = 2;
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v58 = 260;
      v55[0] = v12 + 216;
      MEMORY[0x23489F1BC](__p, v55);
      v62[0] = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
      v62[1] = v13;
      if (SHIBYTE(v60) < 0)
        operator delete(__p[0]);
      llvm::Module::materializeAll((llvm::Module *)(v11 & 0xFFFFFFFFFFFFFFF8));
      if (v54)
      {
        v14 = *(_BYTE *)(v12 + 191);
        v15 = v14;
        v16 = v14 & 0x7F;
        if (v15 < 0)
          v16 = *(_QWORD *)(v12 + 176);
        if (v16)
        {
          v53 = 1283;
          v17 = v12 + 168;
          if (v15 < 0)
            v17 = *(_QWORD *)(v12 + 168);
          v50[0] = " in '";
          v51 = v17;
          v52 = v16;
          v55[0] = v50;
          v56 = "'";
          v58 = 770;
          __p[0] = "cannot materialize module";
          v60 = (const char *)v55;
          v18 = 515;
        }
        else
        {
          v58 = 257;
          __p[0] = "cannot materialize module";
          v18 = 259;
        }
        v61 = v18;
        v49 = v54;
        v54 = 0;
        llvm::air::ErrorHandler::error();
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
LABEL_50:
        v36 = MEMORY[0x23489F15C](v11 & 0xFFFFFFFFFFFFFFF8);
        MEMORY[0x2348A0E9C](v36, 0x10B2C407FF26C1CLL);
        goto LABEL_51;
      }
      if (sub_22E3B38EC(v62, (_DWORD *)(a1 + 72)) && (llvm::air::upgradeAIRModule() & 1) == 0)
      {
        v31 = *(_BYTE *)(v12 + 191);
        v32 = v31;
        v33 = v31 & 0x7F;
        if (v32 < 0)
          v33 = *(_QWORD *)(v12 + 176);
        if (v33)
        {
          v53 = 1283;
          v34 = v12 + 168;
          if (v32 < 0)
            v34 = *(_QWORD *)(v12 + 168);
          v50[0] = " in '";
          v51 = v34;
          v52 = v33;
          v55[0] = v50;
          v56 = "'";
          v58 = 770;
          __p[0] = "cannot upgrade module";
          v60 = (const char *)v55;
          v35 = 515;
        }
        else
        {
          v58 = 257;
          __p[0] = "cannot upgrade module";
          v35 = 259;
        }
        v61 = v35;
        v48[1] = 0;
        llvm::air::ErrorHandler::error();
        goto LABEL_50;
      }
      sub_22F222F54((llvm::StringMapImpl *)__p);
      v48[0] = v11 & 0xFFFFFFFFFFFFFFF8;
      v66[0] = &off_24FCB01D8;
      v66[1] = __p;
      v67 = v66;
      v40 = sub_22F4419AC(a2, v48, v66);
      if (v67 == v66)
      {
        v41 = (void (**)(void))(v66[0] + 32);
      }
      else
      {
        if (!v67)
          goto LABEL_66;
        v41 = (void (**)(void))(*v67 + 40);
      }
      (*v41)();
LABEL_66:
      if (v48[0])
      {
        v44 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v44, 0x10B2C407FF26C1CLL);
      }
      sub_22E3B3AD0((uint64_t)__p);
      if ((v40 & 1) != 0)
        goto LABEL_51;
    }
LABEL_37:
    sub_22E3B4400((uint64_t *)&v63);
    return v3;
  }
  if (v11 < 8 || (v11 & 6) != 0)
    goto LABEL_37;
  v20 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if (*(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8) != 3)
    goto LABEL_37;
  v63 = 2;
  v58 = 261;
  v55[0] = llvm::object::IRObjectFile::getTargetTriple((llvm::object::IRObjectFile *)(v11 & 0xFFFFFFFFFFFFFFF8));
  v55[1] = v21;
  MEMORY[0x23489F1BC](__p, v55);
  v50[0] = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
  v50[1] = v22;
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  v23 = (llvm::Module **)v20[6];
  v24 = (llvm::Module **)v20[7];
  if (v23 == v24)
  {
LABEL_36:
    (*(void (**)(unint64_t))(*v20 + 8))(v11 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  while (1)
  {
    llvm::Module::materializeAll(*v23);
    if (v62[0])
      break;
    if (sub_22E3B38EC(v50, (_DWORD *)(a1 + 72)) && (llvm::air::upgradeAIRModule() & 1) == 0)
    {
      FileName = llvm::object::Binary::getFileName((llvm::object::Binary *)(v11 & 0xFFFFFFFFFFFFFFF8));
      v58 = 1283;
      v55[0] = "cannot upgrade module in '";
      v56 = (const char *)FileName;
      v57 = v38;
      __p[0] = v55;
      v60 = "'";
      v61 = 770;
      v46 = 0;
      llvm::air::ErrorHandler::error();
      v39 = v46;
      if (!v46)
        goto LABEL_54;
      goto LABEL_53;
    }
    sub_22F222F54((llvm::StringMapImpl *)__p);
    v25 = *v23;
    *v23 = 0;
    v45 = v25;
    v64[0] = &off_24FCB01D8;
    v64[1] = __p;
    v65 = v64;
    v26 = sub_22F4419AC(a2, (uint64_t *)&v45, v64);
    if (v65 == v64)
    {
      v27 = (void (**)(void))(v64[0] + 32);
    }
    else
    {
      if (!v65)
        goto LABEL_32;
      v27 = (void (**)(void))(*v65 + 40);
    }
    (*v27)();
LABEL_32:
    v28 = (uint64_t)v45;
    v45 = 0;
    if (v28)
    {
      v29 = MEMORY[0x23489F15C](v28);
      MEMORY[0x2348A0E9C](v29, 0x10B2C407FF26C1CLL);
    }
    sub_22E3B3AD0((uint64_t)__p);
    if ((v26 & 1) != 0)
      goto LABEL_54;
    if (++v23 == v24)
      goto LABEL_36;
  }
  v42 = llvm::object::Binary::getFileName((llvm::object::Binary *)(v11 & 0xFFFFFFFFFFFFFFF8));
  v58 = 1283;
  v55[0] = "cannot materialize module in '";
  v56 = (const char *)v42;
  v57 = v43;
  __p[0] = v55;
  v60 = "'";
  v61 = 770;
  v47 = v62[0];
  v62[0] = 0;
  llvm::air::ErrorHandler::error();
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v39 = v62[0];
  if (v62[0])
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
LABEL_54:
  (*(void (**)(unint64_t))(*v20 + 8))(v11 & 0xFFFFFFFFFFFFFFF8);
LABEL_51:
  sub_22E3B4400((uint64_t *)&v63);
  return 0;
}

llvm::StringMapImpl *sub_22F222F54(llvm::StringMapImpl *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  const void *Name;
  size_t v7;
  _QWORD v9[2];
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[4];
  _QWORD v17[10];
  _QWORD v18[10];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0x800000000;
  v9[0] = &v10;
  v9[1] = 0x800000000;
  v13 = v15;
  v14 = 0x400000000;
  v15[4] = v16;
  v15[5] = 0x200000000;
  v16[2] = v17;
  v16[3] = 0x800000000;
  v17[8] = v18;
  v17[9] = 0x800000000;
  v18[8] = v19;
  v18[9] = 0x400000000;
  v19[4] = v20;
  v19[5] = 0x400000000;
  v20[4] = v21;
  v20[5] = 0x400000000;
  v21[4] = v22;
  v21[5] = 0x400000000;
  llvm::air::AIRInfoFinder::processModule();
  if (v11 != v12)
  {
    v2 = v9[0] + 8 * v11;
    v3 = 8 * v12 - 8 * v11;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 - 8 * *(unsigned int *)(*(_QWORD *)v2 + 8));
      if (v4)
        v5 = *(llvm::Value **)(v4 + 128);
      else
        v5 = 0;
      Name = (const void *)llvm::Value::getName(v5);
      sub_22E3B39D4(a1, Name, v7);
      v2 += 8;
      v3 -= 8;
    }
    while (v3);
  }
  sub_22F227614((uint64_t)v9);
  return a1;
}

uint64_t sub_22F2230B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  unint64_t *v8;
  std::string *v9;
  std::string::size_type v10;
  const char *v11;
  const char *v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  llvm::Module **v40;
  llvm::Module **v41;
  llvm::Module *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  llvm::Module **v47;
  llvm::Module **v48;
  llvm::Module *v49;
  std::string *v50;
  std::string::size_type v51;
  const char *v52;
  const char *v53;
  size_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  const char **v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  std::string::size_type v75;
  const char *v76;
  const char *v77;
  size_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  const char **v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t *v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  llvm::Module **v104;
  llvm::Module **v105;
  llvm::Module *v106;
  int v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  llvm::Module **v113;
  llvm::Module **v114;
  llvm::Module *v115;
  std::string *v116;
  std::string::size_type v117;
  const char *v118;
  const char *v119;
  size_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  const char **v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t *v136;
  unint64_t v137;
  std::string *v138;
  std::string::size_type v139;
  const char *v140;
  const char *v141;
  size_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  const char **v150;
  char *v151;
  uint64_t v152;
  BOOL v153;
  uint64_t *v154;
  uint64_t *v155;
  unint64_t *v156;
  uint64_t v157;
  std::string::size_type v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *i;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *j;
  unint64_t v173;
  std::string::size_type v174;
  std::string::size_type v175;
  _DWORD *v176;
  char *v177;
  int v178;
  llvm::Module *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  char v183;
  char v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  char v200;
  std::string::size_type k;
  std::string::size_type v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  llvm::Value *Function;
  std::string::size_type v208;
  std::string::size_type v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  char v214;
  BOOL v215;
  std::string::size_type v216;
  std::string::size_type v217;
  int AsUnsignedInteger;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  _QWORD *v239;
  llvm::Value *v240;
  uint64_t Name;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *size;
  std::string::size_type v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  std::string::size_type v259;
  std::string::size_type v260;
  void *v261;
  std::__shared_weak_count *v262;
  unint64_t *p_shared_owners;
  unint64_t v264;
  uint64_t v265;
  void *v266;
  _QWORD *v267;
  _QWORD *v268;
  _OWORD *v269;
  std::string::size_type v270;
  uint64_t v271;
  BOOL v272;
  uint64_t v273;
  BOOL v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  void *v279;
  size_t v280;
  char v281;
  void *v282;
  size_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t m;
  __int128 v290;
  char *v291;
  unint64_t v292;
  BOOL v293;
  char *v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t *v307;
  unint64_t *v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  void ***v314;
  void **v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  BOOL v320;
  uint64_t v321;
  uint64_t *n;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  void ***v330;
  void **v331;
  uint64_t v332;
  BOOL v333;
  char *v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  _BYTE *v344;
  _BYTE *v345;
  int64_t v346;
  char *v347;
  _QWORD *v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t *v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  char *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  __int128 *v389;
  _QWORD *v390;
  _QWORD *v391;
  uint64_t v392;
  unint64_t *v393;
  uint64_t *v394;
  unint64_t *v395;
  char *v396;
  char *v397;
  llvm::Module **v398;
  llvm::Module **v399;
  uint64_t v400;
  unsigned int v401;
  llvm::Module **v402;
  int v403;
  char *v404;
  char *v405;
  char *v406;
  char *v407;
  unint64_t *v408;
  char *v409;
  unint64_t *v410;
  uint64_t *v411;
  char *v412;
  char *v413;
  std::__shared_weak_count *v414;
  void **v415;
  void **v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  _BYTE v422[24];
  uint64_t v423;
  uint64_t v424;
  char v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  std::string v429;
  void *v430[2];
  std::string::size_type v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  void *__p[2];
  unint64_t v438;
  __int128 v439;
  uint64_t v440;
  __int128 *v441;
  std::string *v442;
  std::string v443;
  char *v444;
  std::string::value_type *v445;
  void *v446[2];
  uint64_t v447;
  uint64_t v448;
  __int16 v449;
  __int128 v450;
  __int16 *v451;
  uint64_t v452;
  __int16 v453;
  _QWORD *v454;
  uint64_t v455;
  _QWORD v456[2];
  __int128 v457;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;

  v461 = *MEMORY[0x24BDAC8D0];
  sub_22F442820(&v426, *(llvm::LLVMContext **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 280);
  if (v2)
    sub_22F22B91C(a1 + 88, v2);
  if (*(_DWORD *)(a1 + 116))
  {
    sub_22F217AD4(a1);
    if (*(_DWORD *)(a1 + 116))
      sub_22F4412A8(a1);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 120))
    goto LABEL_12;
  if (*(_DWORD *)(a1 + 200))
  {
    sub_22F218688(a1);
LABEL_12:
    v3 = 0;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 116) && !sub_22F218CF0(a1))
    goto LABEL_12;
  sub_22F21932C((uint64_t)v422, a1);
  if (!v425)
    goto LABEL_12;
  *((_QWORD *)&v459 + 1) = 0;
  v460 = 0;
  v458 = 0;
  *(_QWORD *)&v459 = (char *)&v459 + 8;
  *(_QWORD *)&v457 = (char *)&v457 + 8;
  *((_QWORD *)&v457 + 1) = 0;
  v450 = 0uLL;
  v451 = &v453;
  v452 = 0x400000000;
  v454 = v456;
  v455 = 0;
  v456[0] = 0;
  v456[1] = 1;
  v441 = &v450;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 24);
    v438 = *(_QWORD *)(a1 + 40);
  }
  v389 = (__int128 *)(a1 + 24);
  v439 = *(_OWORD *)(a1 + 48);
  v440 = *(_QWORD *)(a1 + 64);
  MEMORY[0x23489DF98](v446, v6, __p, "", 0);
  if (SHIBYTE(v438) < 0)
    operator delete(__p[0]);
  v7 = v446[0];
  v8 = (unint64_t *)operator new(8uLL);
  *v8 = (unint64_t)v7;
  v412 = (char *)(v8 + 1);
  std::to_string(&v443, 0);
  v9 = std::string::insert(&v443, 0, "in-");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v430 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v431 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = (const char *)llvm::StringSaver::save();
  v12 = v11;
  v13 = 0;
  if (v11)
    v13 = strlen(v11);
  v14 = (char *)operator new(0x10uLL);
  *(_QWORD *)v14 = v12;
  *((_QWORD *)v14 + 1) = v13;
  if (SHIBYTE(v431) < 0)
    operator delete(v430[0]);
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  v15 = (unint64_t)v446[0] & 0xFFFFFFFFFFFFFFF9 | 2;
  v16 = operator new(8uLL);
  *v16 = v15;
  v396 = (char *)(v16 + 1);
  v17 = *(_QWORD *)(a1 + 168);
  v392 = a1;
  v18 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD **)(a1 + 168);
    v20 = v14 + 16;
    while (1)
    {
      v23 = !*v19 || *v19 == -8;
      if (!v23)
        break;
      ++v19;
    }
  }
  else
  {
    v19 = *(_QWORD **)(a1 + 168);
    v20 = v14 + 16;
  }
  v410 = v16;
  v390 = (_QWORD *)(v17 + 8 * v18);
  if (v19 == v390)
  {
    v21 = v8 + 1;
    v22 = v20;
  }
  else
  {
    v401 = 1;
    v24 = *v19;
    v21 = v8 + 1;
    v22 = v20;
    v25 = v16 + 1;
    do
    {
      v26 = **(_QWORD **)(v24 + 16);
      v391 = v19;
      if ((sub_22F229F3C((uint64_t **)&v459, v26, v26) & 1) != 0)
      {
        v405 = v14;
        if (v25 >= (unint64_t *)v396)
        {
          v30 = v20;
          v31 = v25 - v410;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            goto LABEL_672;
          if ((v396 - (char *)v410) >> 2 > v32)
            v32 = (v396 - (char *)v410) >> 2;
          if ((unint64_t)(v396 - (char *)v410) >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
          {
            if (v33 >> 61)
              goto LABEL_673;
            v34 = v33;
            v35 = (char *)operator new(8 * v33);
            v33 = v34;
          }
          else
          {
            v35 = 0;
          }
          v36 = (unint64_t *)&v35[8 * v31];
          *v36 = v26;
          v29 = v36 + 1;
          v27 = v401;
          if (v25 == v410)
          {
            v410 = (unint64_t *)&v35[8 * v31];
            v20 = v30;
            v14 = v405;
            v37 = v25;
          }
          else
          {
            v37 = v410;
            v20 = v30;
            do
            {
              v38 = *--v25;
              *--v36 = v38;
            }
            while (v25 != v410);
            v410 = v36;
            v14 = v405;
          }
          v396 = &v35[8 * v33];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v25 = v26;
          v29 = v25 + 1;
          v27 = v401;
        }
        v39 = v26 & 0xFFFFFFFFFFFFFFF8;
        if ((v26 & 6) == 2 && v39)
        {
          llvm::Module::materializeAll((llvm::Module *)(v26 & 0xFFFFFFFFFFFFFFF8));
          if (v21 >= (unint64_t *)v412)
          {
            v403 = v27;
            v66 = v20;
            v67 = v21 - v8;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 61)
              goto LABEL_672;
            if ((v412 - (char *)v8) >> 2 > v68)
              v68 = (v412 - (char *)v8) >> 2;
            if ((unint64_t)(v412 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v68;
            if (v69)
            {
              if (v69 >> 61)
                goto LABEL_673;
              v70 = v39;
              v71 = (char *)operator new(8 * v69);
            }
            else
            {
              v70 = v39;
              v71 = 0;
            }
            v72 = (unint64_t *)&v71[8 * v67];
            *v72 = v70;
            v40 = (llvm::Module **)(v72 + 1);
            if (v21 == v8)
            {
              v8 = (unint64_t *)&v71[8 * v67];
              v20 = v66;
            }
            else
            {
              v20 = v66;
              do
              {
                v73 = *--v21;
                *--v72 = v73;
              }
              while (v21 != v8);
              v21 = v8;
              v8 = v72;
            }
            v14 = v405;
            v412 = &v71[8 * v69];
            LODWORD(v27) = v403;
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v21 = v39;
            v40 = (llvm::Module **)(v21 + 1);
          }
          std::to_string(&v443, v27);
          v74 = std::string::insert(&v443, 0, "in-");
          v75 = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)v430 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v431 = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          v76 = (const char *)llvm::StringSaver::save();
          v77 = v76;
          if (v76)
            v78 = strlen(v76);
          else
            v78 = 0;
          if (v22 >= v20)
          {
            v79 = v20;
            v80 = (v22 - v14) >> 4;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 60)
LABEL_672:
              abort();
            v82 = v79 - v14;
            v83 = (v79 - v14) >> 3;
            if (v83 > v81)
              v81 = v83;
            if (v82 >= 0x7FFFFFFFFFFFFFF0)
              v84 = 0xFFFFFFFFFFFFFFFLL;
            else
              v84 = v81;
            if (v84)
            {
              if (v84 >> 60)
LABEL_673:
                sub_22E3B3F8C();
              v85 = (char *)operator new(16 * v84);
            }
            else
            {
              v85 = 0;
            }
            v86 = (const char **)&v85[16 * v80];
            *v86 = v77;
            v86[1] = (const char *)v78;
            if (v22 == v405)
            {
              v88 = v22;
              v89 = &v85[16 * v80];
            }
            else
            {
              v87 = &v85[16 * v80];
              do
              {
                *((_OWORD *)v87 - 1) = *((_OWORD *)v22 - 1);
                v87 -= 16;
                v22 -= 16;
              }
              while (v22 != v405);
              v88 = v405;
              v89 = v87;
            }
            v20 = &v85[16 * v84];
            v22 = (char *)(v86 + 2);
            if (v88)
              operator delete(v88);
            v14 = v89;
          }
          else
          {
            *(_QWORD *)v22 = v77;
            *((_QWORD *)v22 + 1) = v78;
            v22 += 16;
          }
          if (SHIBYTE(v431) < 0)
            operator delete(v430[0]);
          if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v443.__r_.__value_.__l.__data_);
          v27 = (v27 + 1);
        }
        else if (v26 < 8
               || (v26 & 6) != 0
               || *(_DWORD *)(v39 + 8) != 3
               || (v41 = *(llvm::Module ***)(v39 + 48), v398 = *(llvm::Module ***)(v39 + 56), v41 == v398))
        {
          v40 = (llvm::Module **)v21;
        }
        else
        {
          v40 = (llvm::Module **)v21;
          do
          {
            v402 = v41;
            v42 = *v41;
            llvm::Module::materializeAll(*v41);
            if (v40 >= (llvm::Module **)v412)
            {
              v406 = v20;
              v43 = ((char *)v40 - (char *)v8) >> 3;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 61)
                goto LABEL_672;
              if ((v412 - (char *)v8) >> 2 > v44)
                v44 = (v412 - (char *)v8) >> 2;
              if ((unint64_t)(v412 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v44;
              if (v45)
              {
                if (v45 >> 61)
                  goto LABEL_673;
                v46 = (char *)operator new(8 * v45);
              }
              else
              {
                v46 = 0;
              }
              v47 = (llvm::Module **)&v46[8 * v43];
              *v47 = v42;
              v48 = v47 + 1;
              if (v40 != (llvm::Module **)v8)
              {
                do
                {
                  v49 = *--v40;
                  *--v47 = v49;
                }
                while (v40 != (llvm::Module **)v8);
                v40 = (llvm::Module **)v8;
              }
              v8 = (unint64_t *)v47;
              v412 = &v46[8 * v45];
              if (v40)
                operator delete(v40);
              v40 = v48;
              v20 = v406;
            }
            else
            {
              *v40++ = v42;
            }
            std::to_string(&v443, v27);
            v50 = std::string::insert(&v443, 0, "in-");
            v51 = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)v430 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v431 = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            v52 = (const char *)llvm::StringSaver::save();
            v53 = v52;
            if (v52)
              v54 = strlen(v52);
            else
              v54 = 0;
            if (v22 >= v20)
            {
              v55 = v20;
              v56 = (v22 - v14) >> 4;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 60)
                goto LABEL_672;
              v407 = v14;
              v58 = v55 - v14;
              v59 = (v55 - v14) >> 3;
              if (v59 > v57)
                v57 = v59;
              if (v58 >= 0x7FFFFFFFFFFFFFF0)
                v60 = 0xFFFFFFFFFFFFFFFLL;
              else
                v60 = v57;
              if (v60)
              {
                if (v60 >> 60)
                  goto LABEL_673;
                v61 = (char *)operator new(16 * v60);
              }
              else
              {
                v61 = 0;
              }
              v62 = (const char **)&v61[16 * v56];
              *v62 = v53;
              v62[1] = (const char *)v54;
              if (v22 == v407)
              {
                v64 = v22;
                v65 = &v61[16 * v56];
              }
              else
              {
                v63 = &v61[16 * v56];
                do
                {
                  *((_OWORD *)v63 - 1) = *((_OWORD *)v22 - 1);
                  v63 -= 16;
                  v22 -= 16;
                }
                while (v22 != v407);
                v64 = v407;
                v65 = v63;
              }
              v20 = &v61[16 * v60];
              v22 = (char *)(v62 + 2);
              if (v64)
                operator delete(v64);
              v14 = v65;
            }
            else
            {
              *(_QWORD *)v22 = v53;
              *((_QWORD *)v22 + 1) = v54;
              v22 += 16;
            }
            if (SHIBYTE(v431) < 0)
              operator delete(v430[0]);
            if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v443.__r_.__value_.__l.__data_);
            v27 = (v27 + 1);
            v41 = v402 + 1;
          }
          while (v402 + 1 != v398);
        }
        v90 = *(unsigned int *)(v24 + 48);
        if ((_DWORD)v90)
        {
          v91 = *(unint64_t **)(v24 + 40);
          v395 = &v91[v90];
          v92 = v22;
          do
          {
            v93 = *v91;
            if ((sub_22F229F3C((uint64_t **)&v459, *v91, *v91) & 1) != 0)
            {
              v408 = v91;
              if (v29 >= (unint64_t *)v396)
              {
                v94 = (_QWORD *)v27;
                v95 = v14;
                v96 = v20;
                v97 = v29 - v410;
                v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 61)
                  goto LABEL_672;
                if ((v396 - (char *)v410) >> 2 > v98)
                  v98 = (v396 - (char *)v410) >> 2;
                if ((unint64_t)(v396 - (char *)v410) >= 0x7FFFFFFFFFFFFFF8)
                  v99 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v99 = v98;
                if (v99)
                {
                  if (v99 >> 61)
                    goto LABEL_673;
                  v100 = (char *)operator new(8 * v99);
                }
                else
                {
                  v100 = 0;
                }
                v101 = (unint64_t *)&v100[8 * v97];
                *v101 = v93;
                v393 = v101 + 1;
                if (v29 == v410)
                {
                  v410 = (unint64_t *)&v100[8 * v97];
                  v20 = v96;
                }
                else
                {
                  v20 = v96;
                  do
                  {
                    v102 = *--v29;
                    *--v101 = v102;
                  }
                  while (v29 != v410);
                  v29 = v410;
                  v410 = v101;
                }
                v14 = v95;
                v396 = &v100[8 * v99];
                v27 = (unint64_t)v94;
                if (v29)
                  operator delete(v29);
                v91 = v408;
              }
              else
              {
                *v29 = v93;
                v393 = v29 + 1;
              }
              v103 = v93 & 0xFFFFFFFFFFFFFFF8;
              if ((v93 & 6) == 2 && v103)
              {
                llvm::Module::materializeAll((llvm::Module *)(v93 & 0xFFFFFFFFFFFFFFF8));
                if (v40 >= (llvm::Module **)v412)
                {
                  v132 = ((char *)v40 - (char *)v8) >> 3;
                  v133 = v132 + 1;
                  if ((unint64_t)(v132 + 1) >> 61)
                    goto LABEL_672;
                  if ((v412 - (char *)v8) >> 2 > v133)
                    v133 = (v412 - (char *)v8) >> 2;
                  if ((unint64_t)(v412 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
                    v134 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v134 = v133;
                  if (v134)
                  {
                    if (v134 >> 61)
                      goto LABEL_673;
                    v135 = (char *)operator new(8 * v134);
                  }
                  else
                  {
                    v135 = 0;
                  }
                  v136 = (unint64_t *)&v135[8 * v132];
                  *v136 = v103;
                  v21 = v136 + 1;
                  if (v40 != (llvm::Module **)v8)
                  {
                    do
                    {
                      v137 = (unint64_t)*--v40;
                      *--v136 = v137;
                    }
                    while (v40 != (llvm::Module **)v8);
                    v40 = (llvm::Module **)v8;
                  }
                  v8 = v136;
                  v412 = &v135[8 * v134];
                  if (v40)
                    operator delete(v40);
                }
                else
                {
                  *v40 = (llvm::Module *)v103;
                  v21 = (unint64_t *)(v40 + 1);
                }
                std::to_string(&v443, v27);
                v138 = std::string::insert(&v443, 0, "in-");
                v139 = v138->__r_.__value_.__r.__words[2];
                *(_OWORD *)v430 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
                v431 = v139;
                v138->__r_.__value_.__l.__size_ = 0;
                v138->__r_.__value_.__r.__words[2] = 0;
                v138->__r_.__value_.__r.__words[0] = 0;
                v140 = (const char *)llvm::StringSaver::save();
                v141 = v140;
                if (v140)
                  v142 = strlen(v140);
                else
                  v142 = 0;
                if (v92 >= v20)
                {
                  v143 = v20;
                  v144 = (v92 - v14) >> 4;
                  v145 = v144 + 1;
                  if ((unint64_t)(v144 + 1) >> 60)
                    goto LABEL_672;
                  v146 = v143 - v14;
                  v147 = (v143 - v14) >> 3;
                  if (v147 > v145)
                    v145 = v147;
                  if (v146 >= 0x7FFFFFFFFFFFFFF0)
                    v148 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v148 = v145;
                  if (v148)
                  {
                    if (v148 >> 60)
                      goto LABEL_673;
                    v149 = (char *)operator new(16 * v148);
                  }
                  else
                  {
                    v149 = 0;
                  }
                  v150 = (const char **)&v149[16 * v144];
                  *v150 = v141;
                  v150[1] = (const char *)v142;
                  if (v92 == v14)
                  {
                    v14 = &v149[16 * v144];
                  }
                  else
                  {
                    v151 = &v149[16 * v144];
                    do
                    {
                      *((_OWORD *)v151 - 1) = *((_OWORD *)v92 - 1);
                      v151 -= 16;
                      v92 -= 16;
                    }
                    while (v92 != v14);
                    v92 = v14;
                    v14 = v151;
                  }
                  v20 = &v149[16 * v148];
                  v22 = (char *)(v150 + 2);
                  if (v92)
                    operator delete(v92);
                }
                else
                {
                  *(_QWORD *)v92 = v141;
                  *((_QWORD *)v92 + 1) = v142;
                  v22 = v92 + 16;
                }
                if (SHIBYTE(v431) < 0)
                  operator delete(v430[0]);
                if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v443.__r_.__value_.__l.__data_);
                v27 = (v27 + 1);
              }
              else
              {
                if (v93 >= 8 && (v93 & 6) == 0 && *(_DWORD *)(v103 + 8) == 3)
                {
                  v105 = *(llvm::Module ***)(v103 + 48);
                  v104 = *(llvm::Module ***)(v103 + 56);
                  v399 = v104;
                  while (v105 != v104)
                  {
                    v106 = *v105;
                    llvm::Module::materializeAll(*v105);
                    if (v40 >= (llvm::Module **)v412)
                    {
                      v107 = v27;
                      v27 = (unint64_t)v14;
                      v108 = v20;
                      v109 = ((char *)v40 - (char *)v8) >> 3;
                      v110 = v109 + 1;
                      if ((unint64_t)(v109 + 1) >> 61)
                        goto LABEL_672;
                      if ((v412 - (char *)v8) >> 2 > v110)
                        v110 = (v412 - (char *)v8) >> 2;
                      if ((unint64_t)(v412 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
                        v111 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v111 = v110;
                      if (v111)
                      {
                        if (v111 >> 61)
                          goto LABEL_673;
                        v112 = (char *)operator new(8 * v111);
                      }
                      else
                      {
                        v112 = 0;
                      }
                      v113 = (llvm::Module **)&v112[8 * v109];
                      *v113 = v106;
                      v114 = v113 + 1;
                      if (v40 != (llvm::Module **)v8)
                      {
                        do
                        {
                          v115 = *--v40;
                          *--v113 = v115;
                        }
                        while (v40 != (llvm::Module **)v8);
                        v40 = (llvm::Module **)v8;
                      }
                      v8 = (unint64_t *)v113;
                      v412 = &v112[8 * v111];
                      if (v40)
                        operator delete(v40);
                      v40 = v114;
                      v20 = v108;
                      v14 = (char *)v27;
                      LODWORD(v27) = v107;
                      v91 = v408;
                    }
                    else
                    {
                      *v40++ = v106;
                    }
                    std::to_string(&v443, v27);
                    v116 = std::string::insert(&v443, 0, "in-");
                    v117 = v116->__r_.__value_.__r.__words[2];
                    *(_OWORD *)v430 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
                    v431 = v117;
                    v116->__r_.__value_.__l.__size_ = 0;
                    v116->__r_.__value_.__r.__words[2] = 0;
                    v116->__r_.__value_.__r.__words[0] = 0;
                    v118 = (const char *)llvm::StringSaver::save();
                    v119 = v118;
                    if (v118)
                      v120 = strlen(v118);
                    else
                      v120 = 0;
                    if (v92 >= v20)
                    {
                      v121 = v14;
                      v122 = (v92 - v14) >> 4;
                      v123 = v122 + 1;
                      if ((unint64_t)(v122 + 1) >> 60)
                        goto LABEL_672;
                      v124 = v121;
                      v125 = v20 - v121;
                      v126 = (v20 - v121) >> 3;
                      if (v126 > v123)
                        v123 = v126;
                      if (v125 >= 0x7FFFFFFFFFFFFFF0)
                        v127 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v127 = v123;
                      if (v127)
                      {
                        if (v127 >> 60)
                          goto LABEL_673;
                        v128 = (char *)operator new(16 * v127);
                      }
                      else
                      {
                        v128 = 0;
                      }
                      v129 = (const char **)&v128[16 * v122];
                      *v129 = v119;
                      v129[1] = (const char *)v120;
                      if (v92 == v124)
                      {
                        v131 = v92;
                        v14 = &v128[16 * v122];
                      }
                      else
                      {
                        v130 = &v128[16 * v122];
                        do
                        {
                          *((_OWORD *)v130 - 1) = *((_OWORD *)v92 - 1);
                          v130 -= 16;
                          v92 -= 16;
                        }
                        while (v92 != v124);
                        v131 = v124;
                        v14 = v130;
                      }
                      v20 = &v128[16 * v127];
                      v92 = (char *)(v129 + 2);
                      v91 = v408;
                      if (v131)
                        operator delete(v131);
                    }
                    else
                    {
                      *(_QWORD *)v92 = v119;
                      *((_QWORD *)v92 + 1) = v120;
                      v92 += 16;
                    }
                    if (SHIBYTE(v431) < 0)
                      operator delete(v430[0]);
                    if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v443.__r_.__value_.__l.__data_);
                    v27 = (v27 + 1);
                    ++v105;
                    v104 = v399;
                  }
                }
                v22 = v92;
                v21 = (unint64_t *)v40;
              }
              v28 = v393;
            }
            else
            {
              v28 = v29;
              v22 = v92;
              v21 = (unint64_t *)v40;
            }
            ++v91;
            v40 = (llvm::Module **)v21;
            v92 = v22;
            v29 = v28;
          }
          while (v91 != v395);
        }
        else
        {
          v28 = v29;
          v21 = (unint64_t *)v40;
        }
      }
      else
      {
        LODWORD(v27) = v401;
        v28 = v25;
      }
      v401 = v27;
      v19 = v391;
      do
      {
        v152 = v19[1];
        ++v19;
        v24 = v152;
        if (v152)
          v153 = v24 == -8;
        else
          v153 = 1;
      }
      while (v153);
      v25 = v28;
    }
    while (v19 != v390);
    v154 = (uint64_t *)v8;
    if (v8 == v21)
      goto LABEL_302;
  }
  v155 = (uint64_t *)v8;
  v156 = v8;
  do
  {
    v157 = *v156 + 216;
    LOWORD(v445) = 260;
    v443.__r_.__value_.__r.__words[0] = v157;
    MEMORY[0x23489F1BC](v430, &v443);
    v429.__r_.__value_.__r.__words[0] = llvm::Triple::getAIRVersion((llvm::Triple *)v430);
    v429.__r_.__value_.__l.__size_ = v158;
    v159 = sub_22E3B38EC(&v429, (_DWORD *)(v392 + 72));
    v160 = v159;
    if ((SHIBYTE(v431) & 0x80000000) == 0)
    {
      if (!v159)
        goto LABEL_298;
LABEL_297:
      llvm::air::upgradeAIRModule();
      goto LABEL_298;
    }
    operator delete(v430[0]);
    if (v160)
      goto LABEL_297;
LABEL_298:
    ++v156;
  }
  while (v156 != v21);
  v8 = v21;
  v154 = v155;
LABEL_302:
  v161 = v392;
  v162 = *(unsigned int *)(v392 + 176);
  if ((_DWORD)v162)
  {
    for (i = *(uint64_t **)(v392 + 168); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(v392 + 168);
  }
  v165 = *(_QWORD *)(v392 + 168) + 8 * v162;
  v409 = v14;
  v394 = v154;
  if (i != (uint64_t *)v165)
  {
    v166 = *i;
    while ((*(_BYTE *)(v166 + 8) & 0x40) == 0)
    {
      do
      {
        v167 = i[1];
        ++i;
        v166 = v167;
        if (v167)
          v168 = v166 == -8;
        else
          v168 = 1;
      }
      while (v168);
      v161 = v392;
      v154 = v394;
      v14 = v409;
      if (i == (uint64_t *)v165)
        goto LABEL_321;
    }
  }
  if (i != (uint64_t *)v165)
  {
    v265 = *i;
LABEL_485:
    v266 = *(void **)v265;
    v430[0] = (void *)(v265 + 64);
    v430[1] = v266;
    v267 = sub_22E80A9B4((uint64_t)&v457, &v443, (uint64_t)v430);
    if (!*v267)
    {
      v268 = v267;
      v269 = operator new(0x30uLL);
      v269[2] = *(_OWORD *)v430;
      v270 = v443.__r_.__value_.__r.__words[0];
      *(_QWORD *)v269 = 0;
      *((_QWORD *)v269 + 1) = 0;
      *((_QWORD *)v269 + 2) = v270;
      *v268 = v269;
      if (*(_QWORD *)v457)
      {
        *(_QWORD *)&v457 = *(_QWORD *)v457;
        v269 = (_OWORD *)*v268;
      }
      sub_22E49FD00(*((uint64_t **)&v457 + 1), (uint64_t *)v269);
      ++v458;
    }
    do
    {
      v271 = i[1];
      ++i;
      v265 = v271;
      if (v271)
        v272 = v265 == -8;
      else
        v272 = 1;
    }
    while (v272);
    while (i != (uint64_t *)v165)
    {
      if ((*(_BYTE *)(v265 + 8) & 0x40) != 0)
      {
        if (i != (uint64_t *)v165)
          goto LABEL_485;
        break;
      }
      do
      {
        v273 = i[1];
        ++i;
        v265 = v273;
        if (v273)
          v274 = v265 == -8;
        else
          v274 = 1;
      }
      while (v274);
    }
  }
LABEL_321:
  sub_22F23F610((uint64_t)v430, v154, ((char *)v8 - (char *)v154) >> 3, (uint64_t)v14, (v22 - v14) >> 4, 0, 0);
  memset(&v429, 0, sizeof(v429));
  sub_22F24001C((uint64_t)v430, 0, 0);
  sub_22F234634(v430, *(_QWORD *)(v161 + 8), 1);
  if (*(char *)(v161 + 399) < 0)
    v169 = *(_QWORD *)(v161 + 384);
  else
    v169 = *(unsigned __int8 *)(v161 + 399);
  if (v169)
    sub_22F44873C(v430);
  v170 = v435;
  v400 = v436;
  if (v435 != v436)
  {
    v171 = 0;
    j = 0;
    v397 = 0;
    while (1)
    {
      Function = (llvm::Value *)llvm::Module::getFunction();
      v443.__r_.__value_.__r.__words[0] = llvm::Value::getName(Function);
      v443.__r_.__value_.__l.__size_ = v208;
      if (sub_22F1E6720((uint64_t)&v457, (uint64_t)&v443))
      {
        v404 = j;
        v413 = v171;
        v209 = *(_QWORD *)(v170 + 152);
        v210 = *(_QWORD *)(v170 + 160);
        if (v209 == v210)
        {
          v211 = 0;
          v212 = 0;
        }
        else
        {
          v211 = 0;
          v212 = 0;
          v213 = 0;
          do
          {
            v214 = *(_BYTE *)(v209 + 23);
            v215 = v214 < 0;
            v216 = *(_QWORD *)v209;
            if (v214 >= 0)
              v216 = v209;
            v217 = v214 & 0x7F;
            if (v215)
              v217 = *(_QWORD *)(v209 + 8);
            v443.__r_.__value_.__r.__words[0] = v216;
            v443.__r_.__value_.__l.__size_ = v217;
            llvm::StringRef::find();
            v428 = 0;
            AsUnsignedInteger = llvm::getAsUnsignedInteger();
            v219 = v428;
            if (v428 >= 0x100000000)
              v219 = 0;
            if (AsUnsignedInteger)
              v220 = 0;
            else
              v220 = v219;
            if (v212 >= v213)
            {
              v221 = (v212 - v211) >> 3;
              v222 = v221 + 1;
              if ((unint64_t)(v221 + 1) >> 61)
                goto LABEL_672;
              if ((v213 - v211) >> 2 > v222)
                v222 = (v213 - v211) >> 2;
              if ((unint64_t)(v213 - v211) >= 0x7FFFFFFFFFFFFFF8)
                v223 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v223 = v222;
              if (v223)
              {
                if (v223 >> 61)
                  goto LABEL_673;
                v224 = (char *)operator new(8 * v223);
              }
              else
              {
                v224 = 0;
              }
              v225 = &v224[8 * v221];
              *(_QWORD *)v225 = v410[v220];
              v226 = v225 + 8;
              while (v212 != v211)
              {
                v227 = *((_QWORD *)v212 - 1);
                v212 -= 8;
                *((_QWORD *)v225 - 1) = v227;
                v225 -= 8;
              }
              v213 = &v224[8 * v223];
              if (v211)
                operator delete(v211);
              v211 = v225;
              v212 = v226;
            }
            else
            {
              *(_QWORD *)v212 = v410[v220];
              v212 += 8;
            }
            v209 += 24;
          }
          while (v209 != v210);
          if (v211 == v212)
          {
            v212 = v211;
          }
          else
          {
            v228 = v211 + 8;
            while (v228 != v212)
            {
              v230 = *((_QWORD *)v228 - 1);
              v229 = *(_QWORD *)v228;
              v228 += 8;
              if (v230 == v229)
              {
                v231 = v228 - 16;
                while (v228 != v212)
                {
                  v232 = *(_QWORD *)v228;
                  if (v230 != *(_QWORD *)v228)
                  {
                    *((_QWORD *)v231 + 1) = v232;
                    v231 += 8;
                    v230 = v232;
                  }
                  v228 += 8;
                }
                if (v231 + 8 != v212)
                  v212 = v231 + 8;
                break;
              }
            }
          }
        }
        v238 = *(_QWORD *)(llvm::Module::getFunction() + 40);
        v239 = (_QWORD *)operator new();
        *v239 = &off_24FCB0220;
        v239[1] = 0;
        v239[2] = 0;
        v239[3] = v238;
        v240 = (llvm::Value *)llvm::Module::getFunction();
        Name = llvm::Value::getName(v240);
        v243 = Name;
        v244 = v242;
        size = (_QWORD *)v429.__r_.__value_.__l.__size_;
        if (v429.__r_.__value_.__l.__size_ >= v429.__r_.__value_.__r.__words[2])
        {
          v253 = 0x6DB6DB6DB6DB6DB7
               * ((uint64_t)(v429.__r_.__value_.__l.__size_ - v429.__r_.__value_.__r.__words[0]) >> 3);
          v254 = v253 + 1;
          if ((unint64_t)(v253 + 1) > 0x492492492492492)
            goto LABEL_672;
          if (0xDB6DB6DB6DB6DB6ELL
             * ((uint64_t)(v429.__r_.__value_.__r.__words[2] - v429.__r_.__value_.__r.__words[0]) >> 3) > v254)
            v254 = 0xDB6DB6DB6DB6DB6ELL
                 * ((uint64_t)(v429.__r_.__value_.__r.__words[2] - v429.__r_.__value_.__r.__words[0]) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                * ((uint64_t)(v429.__r_.__value_.__r.__words[2] - v429.__r_.__value_.__r.__words[0]) >> 3)) >= 0x249249249249249)
            v255 = 0x492492492492492;
          else
            v255 = v254;
          v445 = &v429.__r_.__value_.__s.__data_[16];
          if (v255 > 0x492492492492492)
            goto LABEL_673;
          v256 = 56 * v255;
          v257 = (char *)operator new(56 * v255);
          v258 = &v257[56 * v253];
          v443.__r_.__value_.__r.__words[0] = (std::string::size_type)v257;
          v443.__r_.__value_.__l.__size_ = (std::string::size_type)v258;
          v444 = &v257[v256];
          *(_QWORD *)v258 = v238;
          *((_QWORD *)v258 + 1) = v239;
          *((_QWORD *)v258 + 2) = v243;
          *((_QWORD *)v258 + 3) = v244;
          *((_QWORD *)v258 + 5) = 0;
          *((_QWORD *)v258 + 6) = 0;
          *((_QWORD *)v258 + 4) = 0;
          sub_22F227074((_QWORD *)v258 + 4, v211, (uint64_t)v212, (v212 - v211) >> 3);
          v443.__r_.__value_.__r.__words[2] = (std::string::size_type)(v258 + 56);
          sub_22F22A114((uint64_t *)&v429, &v443);
          v246 = v429.__r_.__value_.__l.__size_;
          v259 = v443.__r_.__value_.__r.__words[2];
          v260 = v443.__r_.__value_.__l.__size_;
          v171 = v413;
          for (j = v404; v443.__r_.__value_.__r.__words[2] != v260; v259 = v443.__r_.__value_.__r.__words[2])
          {
            v443.__r_.__value_.__r.__words[2] = v259 - 56;
            v261 = *(void **)(v259 - 24);
            if (v261)
            {
              *(_QWORD *)(v259 - 16) = v261;
              operator delete(v261);
            }
            v262 = *(std::__shared_weak_count **)(v259 - 48);
            if (v262)
            {
              p_shared_owners = (unint64_t *)&v262->__shared_owners_;
              do
                v264 = __ldaxr(p_shared_owners);
              while (__stlxr(v264 - 1, p_shared_owners));
              if (!v264)
              {
                ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                std::__shared_weak_count::__release_weak(v262);
              }
            }
          }
          if (v443.__r_.__value_.__r.__words[0])
            operator delete(v443.__r_.__value_.__l.__data_);
        }
        else
        {
          *(_QWORD *)v429.__r_.__value_.__l.__size_ = v238;
          size[1] = v239;
          size[2] = Name;
          size[3] = v242;
          size[5] = 0;
          size[6] = 0;
          size[4] = 0;
          sub_22F227074(size + 4, v211, (uint64_t)v212, (v212 - v211) >> 3);
          v246 = (std::string::size_type)(size + 7);
          v171 = v413;
          j = v404;
        }
        v429.__r_.__value_.__l.__size_ = v246;
        if (v211)
          operator delete(v211);
      }
      else
      {
        v233 = *(_QWORD *)(llvm::Module::getFunction() + 40);
        if (v171 >= v397)
        {
          v234 = (v171 - j) >> 3;
          v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) >> 61)
            goto LABEL_672;
          if ((v397 - j) >> 2 > v235)
            v235 = (v397 - j) >> 2;
          if ((unint64_t)(v397 - j) >= 0x7FFFFFFFFFFFFFF8)
            v236 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v236 = v235;
          if (v236)
          {
            if (v236 >> 61)
              goto LABEL_673;
            v237 = (char *)operator new(8 * v236);
          }
          else
          {
            v237 = 0;
          }
          v247 = &v237[8 * v234];
          *(_QWORD *)v247 = v233;
          v248 = v247 + 8;
          if (v171 != j)
          {
            v249 = v171;
            do
            {
              v250 = *((_QWORD *)v249 - 1);
              v249 -= 8;
              *(_QWORD *)v249 = 0;
              *((_QWORD *)v247 - 1) = v250;
              v247 -= 8;
            }
            while (v249 != j);
            do
            {
              v251 = *((_QWORD *)v171 - 1);
              v171 -= 8;
              *(_QWORD *)v171 = 0;
              if (v251)
              {
                v252 = MEMORY[0x23489F15C]();
                MEMORY[0x2348A0E9C](v252, 0x10B2C407FF26C1CLL);
              }
            }
            while (v171 != j);
            v171 = j;
          }
          v397 = &v237[8 * v236];
          if (v171)
            operator delete(v171);
          v171 = v248;
          j = v247;
        }
        else
        {
          *(_QWORD *)v171 = v233;
          v171 += 8;
        }
      }
      v170 += 272;
      if (v170 == v400)
        goto LABEL_328;
    }
  }
  v171 = 0;
  j = 0;
LABEL_328:
  sub_22F2409A0((uint64_t)v430, &v428);
  v173 = v428;
  v428 = 0;
  if (v173)
    MEMORY[0x2348A0E84](v173, 0x20C8093837F09);
  if (sub_22F443104(v392) || *(_DWORD *)(v392 + 148))
  {
    v202 = v429.__r_.__value_.__l.__size_;
    for (k = v429.__r_.__value_.__r.__words[0]; k != v202; k += 56)
    {
      v203 = *(std::__shared_weak_count **)(k + 8);
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldxr(v204);
        while (__stxr(v205 + 1, v204));
        sub_22F21B2FC(v392);
        do
          v206 = __ldaxr(v204);
        while (__stlxr(v206 - 1, v204));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      else
      {
        sub_22F21B2FC(v392);
      }
    }
  }
  sub_22F4423DC(v392, (uint64_t)v389);
  v175 = v429.__r_.__value_.__l.__size_;
  v174 = v429.__r_.__value_.__r.__words[0];
  if (v429.__r_.__value_.__r.__words[0] != v429.__r_.__value_.__l.__size_)
  {
    v176 = (_DWORD *)(v392 + 480);
    while (1)
    {
      v177 = j;
      v178 = *(_DWORD *)(*(_QWORD *)(v392 + 16) + 120);
      v179 = *(llvm::Module **)v174;
      v180 = *(std::__shared_weak_count **)(v174 + 8);
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
        v183 = sub_22F225504(v392, v179);
        v184 = v183;
        do
          v185 = __ldaxr(v181);
        while (__stlxr(v185 - 1, v181));
        if (v185)
        {
          if ((v183 & 1) != 0)
            goto LABEL_355;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
          if ((v184 & 1) != 0)
            goto LABEL_355;
        }
      }
      else if ((sub_22F225504(v392, v179) & 1) != 0)
      {
        goto LABEL_355;
      }
      v23 = v178 == *(_DWORD *)(*(_QWORD *)(v392 + 16) + 120);
      j = v177;
      if (v23)
        break;
LABEL_379:
      v174 += 56;
      if (v174 == v175)
        goto LABEL_380;
    }
    v186 = *(std::__shared_weak_count **)(v174 + 8);
    if (v186)
    {
      v187 = (unint64_t *)&v186->__shared_owners_;
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
      getenv("AIR_ENABLE_VM");
      do
        v189 = __ldaxr(v187);
      while (__stlxr(v189 - 1, v187));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    else
    {
      getenv("AIR_ENABLE_VM");
    }
LABEL_355:
    *(_OWORD *)(v392 + 456) = *(_OWORD *)(v174 + 16);
    v190 = *(std::__shared_weak_count **)(v174 + 8);
    j = v177;
    if (*(_BYTE *)(v392 + 448))
    {
      if (v190)
      {
        v191 = (unint64_t *)&v190->__shared_owners_;
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
        sub_22F225764();
        do
          v193 = __ldaxr(v191);
        while (__stlxr(v193 - 1, v191));
LABEL_367:
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
      else
      {
        sub_22F225764();
      }
    }
    else
    {
      if (v190)
      {
        v194 = (unint64_t *)&v190->__shared_owners_;
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
        sub_22F225FEC(v176);
        do
          v193 = __ldaxr(v194);
        while (__stlxr(v193 - 1, v194));
        goto LABEL_367;
      }
      sub_22F225FEC(v176);
    }
    v196 = *(std::__shared_weak_count **)(v174 + 8);
    if (v196)
    {
      v197 = (unint64_t *)&v196->__shared_owners_;
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
      llvm::air::verifyAIRModule();
      do
        v199 = __ldaxr(v197);
      while (__stlxr(v199 - 1, v197));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
      }
    }
    else
    {
      llvm::air::verifyAIRModule();
    }
    goto LABEL_379;
  }
LABEL_380:
  if (*(_DWORD *)(*(_QWORD *)(v392 + 16) + 120))
  {
    v200 = 0;
    v443.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v443 = v429;
    memset(&v429, 0, sizeof(v429));
    v200 = 1;
  }
  v275 = v171;
  LOBYTE(v444) = v200;
  v442 = &v429;
  sub_22F22A000((void ***)&v442);
  sub_22F4489EC((uint64_t)v430);
  MEMORY[0x23489DFA4](v446);
  sub_22E3B4EF4((uint64_t)&v450);
  sub_22E3B4AB8((uint64_t)&v457, *((_QWORD **)&v457 + 1));
  if (v410)
    operator delete(v410);
  sub_22E3B4AB8((uint64_t)&v459, *((_QWORD **)&v459 + 1));
  if (v409)
    operator delete(v409);
  if (j)
  {
    while (v275 != j)
    {
      v276 = *((_QWORD *)v275 - 1);
      v275 -= 8;
      *(_QWORD *)v275 = 0;
      if (v276)
      {
        v277 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v277, 0x10B2C407FF26C1CLL);
      }
    }
    operator delete(j);
  }
  if (v394)
    operator delete(v394);
  if ((_BYTE)v444)
  {
    v278 = *(_BYTE *)(v392 + 399);
    if (v278 >= 0)
      v279 = (void *)(v392 + 376);
    else
      v279 = *(void **)(v392 + 376);
    if (v278 >= 0)
      v280 = v278 & 0x7F;
    else
      v280 = *(_QWORD *)(v392 + 384);
    v281 = *(_BYTE *)(v392 + 423);
    if (v281 >= 0)
      v282 = (void *)(v392 + 400);
    else
      v282 = *(void **)(v392 + 400);
    if (v281 >= 0)
      v283 = v281 & 0x7F;
    else
      v283 = *(_QWORD *)(v392 + 408);
    v284 = operator new();
    sub_22F226E3C(v284, 1, v389, "", 0, v279, v280, v285, v282, v283);
    v286 = *(_QWORD *)(v392 + 4800);
    *(_QWORD *)(v392 + 4800) = v284;
    if (v286)
    {
      v287 = sub_22E3B46CC(v286);
      MEMORY[0x2348A0E9C](v287, 0x1032C40B18B30E6);
    }
    v430[0] = 0;
    v430[1] = 0;
    LODWORD(v431) = 0;
    v433 = 0;
    v434 = 0;
    v432 = 0;
    v288 = v423;
    for (m = v424; v288 != m; v288 += 104)
    {
      v450 = *(_OWORD *)(v288 + 8);
      v451 = *(__int16 **)(v288 + 24);
      *(_QWORD *)(v288 + 8) = 0;
      *(_QWORD *)(v288 + 16) = 0;
      v290 = *(_OWORD *)(v288 + 32);
      *(_QWORD *)(v288 + 24) = 0;
      *(_QWORD *)(v288 + 32) = 0;
      *(_OWORD *)v446 = v290;
      v447 = *(_QWORD *)(v288 + 48);
      *(_QWORD *)(v288 + 40) = 0;
      *(_QWORD *)(v288 + 48) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v288 + 56);
      v438 = *(_QWORD *)(v288 + 72);
      *(_QWORD *)(v288 + 64) = 0;
      *(_QWORD *)(v288 + 72) = 0;
      *(_QWORD *)(v288 + 56) = 0;
      if (v433 == v432)
      {
        BYTE4(v458) = 48;
        v291 = (char *)&v458 + 4;
      }
      else
      {
        v292 = 0xAAAAAAAAAAAAAAABLL * ((v433 - v432) >> 3);
        v291 = (char *)&v458 + 5;
        do
        {
          *--v291 = (v292 % 0xA) | 0x30;
          v293 = v292 > 9;
          v292 /= 0xAuLL;
        }
        while (v293);
      }
      sub_22E3B4274(&v459, v291, (char *)&v458 + 5, (char *)&v458 + 5 - v291);
      v457 = *(_OWORD *)(v288 + 80);
      v458 = *(_QWORD *)(v288 + 96);
      *(_QWORD *)(v288 + 88) = 0;
      *(_QWORD *)(v288 + 96) = 0;
      *(_QWORD *)(v288 + 80) = 0;
      v294 = (char *)operator new(0x90uLL);
      *((_QWORD *)v294 + 1) = 0;
      *((_QWORD *)v294 + 2) = 0;
      *(_QWORD *)v294 = &off_24FCAFF10;
      sub_22F228968(v294 + 24, &v450, (__int128 *)v446, (__int128 *)__p, &v459, (__int128 **)&v457);
      v295 = (_QWORD *)sub_22F4418A0((uint64_t)v430, (uint64_t *)v288);
      v296 = (std::__shared_weak_count *)v295[1];
      *v295 = v294 + 24;
      v295[1] = v294;
      if (v296)
      {
        v297 = (unint64_t *)&v296->__shared_owners_;
        do
          v298 = __ldaxr(v297);
        while (__stlxr(v298 - 1, v297));
        if (!v298)
        {
          ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
          std::__shared_weak_count::__release_weak(v296);
        }
      }
      v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v457;
      sub_22E576240((void ***)&v429);
      if (SHIBYTE(v460) < 0)
        operator delete((void *)v459);
      if (SHIBYTE(v438) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v447) < 0)
        operator delete(v446[0]);
      if (SHIBYTE(v451) < 0)
        operator delete((void *)v450);
    }
    v411 = (uint64_t *)v443.__r_.__value_.__l.__size_;
    v299 = (uint64_t *)v443.__r_.__value_.__r.__words[0];
    v300 = v392;
    if (v443.__r_.__value_.__r.__words[0] == v443.__r_.__value_.__l.__size_)
    {
LABEL_552:
      v301 = v432;
      v302 = v433;
      while (v301 != v302)
      {
        v303 = *(char **)(v300 + 4800);
        v417 = *(_OWORD *)(v301 + 8);
        *(_QWORD *)(v301 + 8) = 0;
        *(_QWORD *)(v301 + 16) = 0;
        sub_22F21DFD8(v303, (unint64_t *)&v417);
        v304 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
        if (*((_QWORD *)&v417 + 1))
        {
          v305 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
        }
        v301 += 24;
      }
      sub_22F442C84((unint64_t **)&v450, *(unint64_t **)(v300 + 352), *(unint64_t **)(v300 + 360));
      v307 = (unint64_t *)v450;
      v308 = (unint64_t *)v452;
      if ((_QWORD)v450 == v452)
      {
LABEL_586:
        v321 = *(unsigned int *)(v300 + 144);
        if ((_DWORD)v321)
        {
          for (n = *(uint64_t **)(v300 + 136); !*n || *n == -8; ++n)
            ;
        }
        else
        {
          n = *(uint64_t **)(v300 + 136);
        }
        v323 = *(_QWORD *)(v300 + 136) + 8 * v321;
        if (n != (uint64_t *)v323)
        {
          v324 = *n;
          do
          {
            v325 = *(_QWORD *)(v392 + 4800);
            v326 = *(_QWORD *)v324;
            v327 = operator new();
            v328 = sub_22F443A70(v327, (_BYTE *)(v324 + 24), v326);
            v415 = (void **)v328;
            v329 = *(uint64_t **)(v325 + 240);
            if ((unint64_t)v329 >= *(_QWORD *)(v325 + 248))
            {
              v330 = sub_22F227440((void ****)(v325 + 232), (uint64_t *)&v415);
              v331 = v415;
              *(_QWORD *)(v325 + 240) = v330;
              v415 = 0;
              if (v331)
              {
                if (*v331 != v331 + 3)
                  free(*v331);
                MEMORY[0x2348A0E9C](v331, 0x1080C4003DAF236);
              }
            }
            else
            {
              *v329 = v328;
              *(_QWORD *)(v325 + 240) = v329 + 1;
              v415 = 0;
            }
            do
            {
              v332 = n[1];
              ++n;
              v324 = v332;
              if (v332)
                v333 = v324 == -8;
              else
                v333 = 1;
            }
            while (v333);
          }
          while (n != (uint64_t *)v323);
        }
        v3 = 1;
      }
      else
      {
        v309 = (unint64_t *)*((_QWORD *)&v450 + 1);
        while (1)
        {
          sub_22F21B60C((uint64_t)v446, v300, *v307);
          if (!(_BYTE)v447)
            break;
          v310 = *(_QWORD *)(v300 + 4800);
          v311 = operator new();
          v312 = sub_22F443A70(v311, (_BYTE *)v446[0], (uint64_t)v446[1]);
          v416 = (void **)v312;
          v313 = *(uint64_t **)(v310 + 312);
          if ((unint64_t)v313 >= *(_QWORD *)(v310 + 320))
          {
            v314 = sub_22F227440((void ****)(v310 + 304), (uint64_t *)&v416);
            v315 = v416;
            *(_QWORD *)(v310 + 312) = v314;
            v416 = 0;
            if (v315)
            {
              if (*v315 != v315 + 3)
                free(*v315);
              MEMORY[0x2348A0E9C](v315, 0x1080C4003DAF236);
            }
          }
          else
          {
            *v313 = v312;
            *(_QWORD *)(v310 + 312) = v313 + 1;
            v416 = 0;
          }
          v316 = v307 + 1;
          v307 = v309;
          if (v316 != v309)
          {
            v307 = v316;
            do
            {
              v317 = *v307;
              v318 = *v307 & 6;
              if (*v307 >= 8 && v318 == 4)
              {
                if (*(_DWORD *)(v317 & 0xFFFFFFFFFFFFFFF8) == 2)
                  goto LABEL_585;
              }
              else
              {
                v320 = v317 >= 8 && v318 == 0;
                if (v320 && *(_DWORD *)((v317 & 0xFFFFFFFFFFFFFFF8) + 8) == 21)
                  goto LABEL_585;
              }
              ++v307;
            }
            while (v307 != v309);
            v307 = v309;
          }
LABEL_585:
          if (v307 == v308)
            goto LABEL_586;
        }
LABEL_662:
        v3 = 0;
      }
      sub_22F4430B0((uint64_t)v430);
      if ((_BYTE)v444)
      {
        v430[0] = &v443;
        sub_22F22A000((void ***)v430);
      }
      goto LABEL_516;
    }
    while (1)
    {
      sub_22F2228A0(&v450, v392 + 88);
      v334 = (char *)v430[0];
      v335 = v431;
      v336 = sub_22F228AEC((uint64_t)v430[0], v431, **(_QWORD **)(*(_QWORD *)v450 + 16));
      v337 = (uint64_t *)&v334[16 * v335];
      if (v337 == v336 || (v338 = *((_DWORD *)v336 + 2), v432 + 24 * v338 == v433))
      {
        v340 = 0;
        v341 = 0;
      }
      else
      {
        v339 = v432 + 24 * v338;
        v340 = *(_QWORD *)(v339 + 8);
        v341 = *(std::__shared_weak_count **)(v339 + 16);
        if (v341)
        {
          v342 = (unint64_t *)&v341->__shared_owners_;
          do
            v343 = __ldxr(v342);
          while (__stxr(v343 + 1, v342));
        }
      }
      __p[1] = 0;
      __p[0] = 0;
      v438 = 0;
      v345 = (_BYTE *)v299[4];
      v344 = (_BYTE *)v299[5];
      v346 = v344 - v345;
      if (v344 != v345)
      {
        v414 = v341;
        if (v346 < 0)
          goto LABEL_672;
        v347 = (char *)operator new(v344 - v345);
        memmove(v347, v345, v346);
        v348 = 0;
        v349 = (uint64_t *)&v347[8 * (v346 >> 3)];
        v350 = (uint64_t *)v347;
        do
        {
          v351 = sub_22F228AEC((uint64_t)v334, v335, *v350);
          if (v337 != v351)
          {
            v352 = *((_DWORD *)v351 + 2);
            v353 = v432;
            if (v432 + 24 * v352 != v433)
            {
              v354 = v432 + 24 * v352;
              v357 = *(_QWORD *)(v354 + 8);
              v356 = v354 + 8;
              v355 = v357;
              if ((unint64_t)v348 >= v438)
              {
                v348 = sub_22F228B4C((uint64_t)__p, v355, *(_QWORD *)(v356 + 8));
              }
              else
              {
                *v348 = v355;
                v358 = *(_QWORD *)(v353 + 24 * v352 + 16);
                v348[1] = v358;
                if (v358)
                {
                  v359 = (unint64_t *)(v358 + 8);
                  do
                    v360 = __ldxr(v359);
                  while (__stxr(v360 + 1, v359));
                }
                v348 += 2;
              }
              __p[1] = v348;
            }
          }
          ++v350;
        }
        while (v350 != v349);
        operator delete(v347);
        v341 = v414;
      }
      v362 = *v299;
      v361 = v299[1];
      v300 = v392;
      if (v361)
      {
        v363 = (unint64_t *)(v361 + 8);
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
      }
      *(_QWORD *)&v421 = v362;
      *((_QWORD *)&v421 + 1) = v361;
      v365 = v299[2];
      v366 = v299[3];
      *(_QWORD *)&v420 = v340;
      *((_QWORD *)&v420 + 1) = v341;
      if (v341)
      {
        v367 = (unint64_t *)&v341->__shared_owners_;
        do
          v368 = __ldxr(v367);
        while (__stxr(v368 + 1, v367));
      }
      sub_22F21D770((uint64_t)&v459, &v421, v365, v366, &v420);
      v369 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
      if (*((_QWORD *)&v420 + 1))
      {
        v370 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 8);
        do
          v371 = __ldaxr(v370);
        while (__stlxr(v371 - 1, v370));
        if (!v371)
        {
          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
          std::__shared_weak_count::__release_weak(v369);
        }
      }
      v372 = (std::__shared_weak_count *)*((_QWORD *)&v421 + 1);
      if (*((_QWORD *)&v421 + 1))
      {
        v373 = (unint64_t *)(*((_QWORD *)&v421 + 1) + 8);
        do
          v374 = __ldaxr(v373);
        while (__stlxr(v374 - 1, v373));
        if (!v374)
        {
          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
          std::__shared_weak_count::__release_weak(v372);
        }
      }
      v375 = BYTE8(v459);
      if ((BYTE8(v459) & 1) == 0)
        break;
      v385 = v299[2];
      v386 = v299[3];
      v449 = 1283;
      v446[0] = "cannot create '";
      v447 = v385;
      v448 = v386;
      *(_QWORD *)&v450 = v446;
      v451 = (__int16 *)"' function";
      v453 = 770;
      v387 = v459;
      *(_QWORD *)&v459 = 0;
      v419 = v387;
      llvm::air::ErrorHandler::error();
      v377 = v419;
      if (v419)
        goto LABEL_641;
LABEL_642:
      v378 = (char *)__p[0];
      if (__p[0])
      {
        v379 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            v380 = (std::__shared_weak_count *)*((_QWORD *)v379 - 1);
            if (v380)
            {
              v381 = (unint64_t *)&v380->__shared_owners_;
              do
                v382 = __ldaxr(v381);
              while (__stlxr(v382 - 1, v381));
              if (!v382)
              {
                ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                std::__shared_weak_count::__release_weak(v380);
              }
            }
            v379 -= 16;
          }
          while (v379 != v378);
          v378 = (char *)__p[0];
        }
        operator delete(v378);
      }
      if (v341)
      {
        v383 = (unint64_t *)&v341->__shared_owners_;
        do
          v384 = __ldaxr(v383);
        while (__stlxr(v384 - 1, v383));
        if (!v384)
        {
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
        }
      }
      if ((v375 & 1) != 0)
        goto LABEL_662;
      v299 += 7;
      if (v299 == v411)
        goto LABEL_552;
    }
    v376 = *(_QWORD *)(v392 + 4800);
    v418 = v459;
    sub_22F21D8F0(v376, &v418);
    v377 = v418;
    v418 = 0;
    if (!v377)
      goto LABEL_642;
LABEL_641:
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
    goto LABEL_642;
  }
  v3 = 0;
LABEL_516:
  if (v425)
    sub_22F442C38((uint64_t)v422);
LABEL_13:
  llvm::LLVMContext::setDiagnosticHandler();
  v4 = v427;
  v427 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3;
}

