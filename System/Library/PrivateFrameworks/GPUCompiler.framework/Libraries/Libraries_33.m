__n128 sub_22F3EC400(uint64_t a1, __n128 *a2)
{
  unsigned __int32 *v3;
  uint64_t v4;
  __n128 result;

  v3 = &a2->n128_u32[1];
  v4 = sub_22E3CD3D4(a1 + 2032, ((8 * (a2->n128_u32[1] + (unint64_t)a2->n128_u32[0]) + 4 * (a2->n128_u32[2] + a2->n128_u32[1]) + 4) & 0x1FFFFFFFF8)+ 16 * a2->n128_u32[3]+ 80, 3);
  result = *a2;
  *(_OWORD *)v4 = xmmword_22F4A6EA0;
  result.n128_u32[1] = *v3;
  result.n128_u64[1] = a2->n128_u64[1];
  *(__n128 *)(v4 + 16) = result;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  return result;
}

_DWORD *sub_22F3EC488(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6)
{
  _DWORD *v11;
  _DWORD *v12;

  v11 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 16 * a6 + 24, 3);
  v12 = v11;
  *v11 = a2;
  v11[1] = a4;
  v11[2] = 53;
  v11[3] = a3;
  v11[4] = a6;
  if (a6)
    memmove(v11 + 6, a5, 8 * a6);
  return v12;
}

double sub_22F3EC504(uint64_t a1, int a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * (2 * a2) + 24, 3);
  result = 0.0;
  *(_OWORD *)v3 = xmmword_22F4A6EB0;
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

_DWORD *sub_22F3EC548(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6)
{
  size_t v11;
  _DWORD *v12;
  _DWORD *v13;

  v11 = 8 * a6;
  v12 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 8 * a6 + 24, 3);
  v13 = v12;
  *v12 = a2;
  v12[1] = a4;
  v12[2] = 39;
  v12[3] = a3;
  v12[4] = a6;
  if (a6)
    memmove(v12 + 6, a5, v11);
  return v13;
}

double sub_22F3EC5CC(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * a2 + 24, 3);
  result = 0.0;
  *(_OWORD *)v3 = xmmword_22F4A6EC0;
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

_DWORD *sub_22F3EC60C(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6)
{
  size_t v11;
  _DWORD *v12;
  _DWORD *v13;

  v11 = 8 * a6;
  v12 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 8 * a6 + 24, 3);
  v13 = v12;
  *v12 = a2;
  v12[1] = a4;
  v12[2] = 26;
  v12[3] = a3;
  v12[4] = a6;
  if (a6)
    memmove(v12 + 6, a5, v11);
  return v13;
}

double sub_22F3EC690(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * a2 + 24, 3);
  result = 0.0;
  *(_OWORD *)v3 = xmmword_22F4A6ED0;
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

uint64_t sub_22F3EC6D0(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;

  if (a3)
  {
    v3 = 0;
    v4 = result + 24;
    v5 = result + 24 + 8 * (2 * *(_DWORD *)(result + 16));
    v6 = (_DWORD *)(a2 + 16);
    do
    {
      *(_QWORD *)(v4 + 8 * v3) = *((_QWORD *)v6 - 2);
      v7 = v3 + 1;
      *(_QWORD *)(v4 + 8 * v7) = *((_QWORD *)v6 - 1);
      *(_DWORD *)(v5 + 4 * v3) = *v6;
      *(_DWORD *)(v5 + 4 * v7) = v6[1];
      v3 += 2;
      v6 += 6;
    }
    while (2 * a3 != v3);
  }
  return result;
}

_DWORD *sub_22F3EC72C(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  _DWORD *result;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;

  v6 = a6;
  result = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 24 * a6 + 24, 3);
  *result = a2;
  result[1] = a4;
  result[2] = 91;
  result[3] = a3;
  result[4] = v6;
  if (v6)
  {
    v12 = 0;
    v13 = result + 6;
    v14 = (uint64_t)&result[4 * v6 + 6];
    v15 = (_DWORD *)(a5 + 16);
    do
    {
      *(_QWORD *)&v13[2 * v12] = *((_QWORD *)v15 - 2);
      v16 = v12 + 1;
      *(_QWORD *)&v13[2 * v16] = *((_QWORD *)v15 - 1);
      *(_DWORD *)(v14 + 4 * v12) = *v15;
      *(_DWORD *)(v14 + 4 * v16) = v15[1];
      v12 += 2;
      v15 += 6;
    }
    while (2 * v6 != v12);
  }
  return result;
}

double sub_22F3EC7E4(uint64_t a1, int a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22E3CD3D4(a1 + 2032, 12 * (2 * a2) + 24, 3);
  result = 0.0;
  *(_OWORD *)v3 = xmmword_22F4A6EE0;
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

uint64_t sub_22F3EC82C(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, const void *a7, uint64_t a8)
{
  size_t v14;
  uint64_t v15;

  v14 = 8 * a8;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * a8 + 32, 3);
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = a5;
  *(_DWORD *)(v15 + 8) = 3;
  *(_DWORD *)(v15 + 12) = a3;
  *(_QWORD *)(v15 + 16) = a8;
  *(_QWORD *)(v15 + 24 + 8 * a8) = a6;
  if (a8)
    memmove((void *)(v15 + 24), a7, v14);
  return v15;
}

double sub_22F3EC8C0(uint64_t a1, int a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * (a2 + 1) + 24, 3);
  result = 0.0;
  *(_OWORD *)v3 = xmmword_22F463A40;
  *(_DWORD *)(v3 + 16) = a2;
  *(_DWORD *)(v3 + 20) = 0;
  return result;
}

uint64_t sub_22F3EC904(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, char a5, char a6, int a7, int a8, int a9, int a10, int a11)
{
  size_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = 8 * a4;
  v18 = sub_22E3CD3D4(a1 + 2032, 8 * a4 + 40, 3);
  v19 = v18;
  *(_DWORD *)v18 = a7;
  *(_DWORD *)(v18 + 4) = a11;
  *(_DWORD *)(v18 + 8) = 41;
  *(_DWORD *)(v18 + 12) = a8;
  *(_DWORD *)(v18 + 16) = a4 + 1;
  *(_DWORD *)(v18 + 20) = a9;
  *(_BYTE *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 25) = a6;
  *(_QWORD *)(v18 + 32) = a2;
  if (a4)
    memmove((void *)(v18 + 40), a3, v17);
  return v19;
}

double sub_22F3EC9B4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * a2 + 32, 3);
  result = 0.0;
  *(_OWORD *)v3 = xmmword_22F4A6EF0;
  *(_DWORD *)(v3 + 16) = a2;
  *(_DWORD *)(v3 + 20) = 0;
  *(_WORD *)(v3 + 24) = 0;
  return result;
}

double sub_22F3EC9F8(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_22E3CD3D4(a1 + 2032, 24, 3);
  *(_OWORD *)v1 = xmmword_22F45E0D0;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(v1 + 16) = 3;
  return result;
}

llvm::raw_ostream *sub_22F3ECA30(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  size_t v5;
  const void *OpenMPDirectiveName;
  size_t v7;
  void *v8;

  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "if (");
  if (*(_DWORD *)(a2 + 44) != 89)
  {
    v4 = *(llvm::raw_ostream **)a1;
    OpenMPDirectiveName = (const void *)llvm::omp::getOpenMPDirectiveName();
    v7 = v5;
    v8 = (void *)*((_QWORD *)v4 + 4);
    if (v5 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
    {
      if (v5)
      {
        memcpy(v8, OpenMPDirectiveName, v5);
        *((_QWORD *)v4 + 4) += v7;
      }
    }
    else
    {
      v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)OpenMPDirectiveName);
    }
    sub_22E47DAC0(v4, ": ");
  }
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECB08(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "final(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECB68(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "num_threads(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECBC8(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "align(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECC28(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "safelen(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECC88(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "simdlen(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "sizes(");
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a2 + 24);
    v6 = 8 * v4;
    v7 = 1;
    do
    {
      v8 = *v5;
      if ((v7 & 1) == 0)
        sub_22E47DAC0(*(llvm::raw_ostream **)a1, ", ");
      sub_22F0D9044(v8, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
      v7 = 0;
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECD9C(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "full");
}

llvm::raw_ostream *sub_22F3ECDAC(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  _BYTE *v8;

  result = sub_22E47DAC0(*(llvm::raw_ostream **)a1, "partial");
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)a1;
    v7 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v7 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v6);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 40;
    }
    sub_22F0D9044(v5, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
    result = *(llvm::raw_ostream **)a1;
    v8 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v8 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
    }
    else
    {
      *((_QWORD *)result + 4) = v8 + 1;
      *v8 = 41;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F3ECE64(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "allocator(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECEC4(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "collapse(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECF24(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "detach(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ECF84(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  llvm::raw_ostream *v5;

  v3 = sub_22E47DAC0(*a1, "default(");
  v4 = (char *)sub_22F42187C((const char *)0x10, *(_DWORD *)(a2 + 16));
  v5 = sub_22E47DAC0(v3, v4);
  return sub_22E47DAC0(v5, ")");
}

llvm::raw_ostream *sub_22F3ECFD4(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  llvm::raw_ostream *v5;

  v3 = sub_22E47DAC0(*a1, "proc_bind(");
  v4 = (char *)sub_22F42187C((const char *)0x40, *(_DWORD *)(a2 + 16));
  v5 = sub_22E47DAC0(v3, v4);
  return sub_22E47DAC0(v5, ")");
}

llvm::raw_ostream *sub_22F3ED024(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "unified_address");
}

llvm::raw_ostream *sub_22F3ED034(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "unified_shared_memory");
}

llvm::raw_ostream *sub_22F3ED044(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "reverse_offload");
}

llvm::raw_ostream *sub_22F3ED054(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "dynamic_allocators");
}

llvm::raw_ostream *sub_22F3ED064(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  llvm::raw_ostream *v5;

  v3 = sub_22E47DAC0(*a1, "atomic_default_mem_order(");
  v4 = (char *)sub_22F42187C((const char *)9, *(_DWORD *)(a2 + 16));
  v5 = sub_22E47DAC0(v3, v4);
  return sub_22E47DAC0(v5, ")");
}

llvm::raw_ostream *sub_22F3ED0B4(uint64_t a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  char *v6;
  llvm::raw_ostream *v7;
  char *v8;
  llvm::raw_ostream *v9;
  char *v10;
  uint64_t v11;

  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "schedule(");
  v4 = *(_DWORD *)(a2 + 36);
  if (v4 != 5)
  {
    v5 = *(llvm::raw_ostream **)a1;
    v6 = (char *)sub_22F42187C((const char *)0x47, v4);
    sub_22E47DAC0(v5, v6);
    if (*(_DWORD *)(a2 + 40) != 5)
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)a1, ", ");
      v7 = *(llvm::raw_ostream **)a1;
      v8 = (char *)sub_22F42187C((const char *)0x47, *(_DWORD *)(a2 + 40));
      sub_22E47DAC0(v7, v8);
    }
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, ": ");
  }
  v9 = *(llvm::raw_ostream **)a1;
  v10 = (char *)sub_22F42187C((const char *)0x47, *(_DWORD *)(a2 + 32));
  sub_22E47DAC0(v9, v10);
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, ", ");
    sub_22F0D9044(v11, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  }
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED1BC(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;

  result = sub_22E47DAC0(*(llvm::raw_ostream **)a1, "ordered");
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "(");
    sub_22F0D9044(v5, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
    return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3ED240(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "nowait");
}

llvm::raw_ostream *sub_22F3ED250(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "untied");
}

llvm::raw_ostream *sub_22F3ED260(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "nogroup");
}

llvm::raw_ostream *sub_22F3ED270(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "mergeable");
}

llvm::raw_ostream *sub_22F3ED280(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "read");
}

llvm::raw_ostream *sub_22F3ED290(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "write");
}

llvm::raw_ostream *sub_22F3ED2A0(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v5;
  char *v6;

  result = sub_22E47DAC0(*a1, "update");
  if (*(_BYTE *)(a2 + 12))
  {
    sub_22E47DAC0(*a1, "(");
    v5 = *a1;
    v6 = (char *)sub_22F42187C((const char *)*(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 8 * *(unsigned __int8 *)(a2 + 12) + 16));
    sub_22E47DAC0(v5, v6);
    return sub_22E47DAC0(*a1, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3ED330(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "capture");
}

llvm::raw_ostream *sub_22F3ED340(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "compare");
}

llvm::raw_ostream *sub_22F3ED350(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "seq_cst");
}

llvm::raw_ostream *sub_22F3ED360(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "acq_rel");
}

llvm::raw_ostream *sub_22F3ED370(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "acquire");
}

llvm::raw_ostream *sub_22F3ED380(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "release");
}

llvm::raw_ostream *sub_22F3ED390(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "relaxed");
}

llvm::raw_ostream *sub_22F3ED3A0(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "threads");
}

llvm::raw_ostream *sub_22F3ED3B0(llvm::raw_ostream **a1)
{
  return sub_22E47DAC0(*a1, "simd");
}

llvm::raw_ostream *sub_22F3ED3C0(uint64_t a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  char *v6;
  llvm::raw_ostream *v7;

  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "device(");
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 != 2)
  {
    v5 = *(llvm::raw_ostream **)a1;
    v6 = (char *)sub_22F42187C((const char *)*(unsigned int *)(a2 + 8), v4);
    v7 = sub_22E47DAC0(v5, v6);
    sub_22E47DAC0(v7, ": ");
  }
  sub_22F0D9044(*(_QWORD *)(a2 + 40), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED458(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "num_teams(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED4B8(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "thread_limit(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED518(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "priority(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED578(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "grainsize(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED5D8(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "num_tasks(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED638(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "hint(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;

  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "init(");
  v4 = 8 * *(unsigned int *)(a2 + 16);
  v5 = v4 - 8;
  if (v4 != 8)
  {
    v6 = (uint64_t *)(a2 + 40);
    v7 = "prefer_type(";
    do
    {
      v8 = *v6++;
      sub_22E47DAC0(*(llvm::raw_ostream **)a1, v7);
      sub_22F0D9044(v8, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
      v7 = ",";
      v5 -= 8;
    }
    while (v5);
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "), ");
  }
  if (*(_BYTE *)(a2 + 24))
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "target");
  if (*(_BYTE *)(a2 + 25))
  {
    if (*(_BYTE *)(a2 + 24))
      sub_22E47DAC0(*(llvm::raw_ostream **)a1, ", ");
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "targetsync");
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, " : ");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED7E0(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "use(");
  sub_22F0D9044(*(_QWORD *)(a2 + 24), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3ED840(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;

  result = sub_22E47DAC0(*(llvm::raw_ostream **)a1, "destroy");
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "(");
    sub_22F0D9044(v5, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
    return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3ED8C4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;

  result = sub_22E47DAC0(*(llvm::raw_ostream **)a1, "novariants");
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "(");
    sub_22F0D9044(v5, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
    return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3ED948(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;

  result = sub_22E47DAC0(*(llvm::raw_ostream **)a1, "nocontext");
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, "(");
    sub_22F0D9044(v5, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
    return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3ED9CC(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "allocate");
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)v3, "(");
      sub_22F0D9044(v4, *(_QWORD *)v3, 0, *(_QWORD *)(v3 + 8), 0, "\n", 1uLL);
      sub_22E47DAC0(*(llvm::raw_ostream **)v3, ":");
      v5 = 32;
    }
    else
    {
      v5 = 40;
    }
    sub_22F0C2CC8(v3, a2, v5);
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDA8C(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "private");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDAE8(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "firstprivate");
    sub_22F0C2EDC((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDB44(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;
  char v4;
  llvm::raw_ostream *v5;
  char *v6;
  llvm::raw_ostream *v7;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "lastprivate");
    if (*(_DWORD *)(a2 + 48) == 1)
    {
      v4 = 40;
    }
    else
    {
      v5 = sub_22E47DAC0(*v3, "(");
      v6 = (char *)sub_22F42187C((const char *)0x2B, *(_DWORD *)(a2 + 48));
      v7 = sub_22E47DAC0(v5, v6);
      sub_22E47DAC0(v7, ":");
      v4 = 32;
    }
    sub_22F0C2FE4((uint64_t)v3, a2, v4);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDBFC(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "shared");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDC58(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3;
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  int v8;
  llvm::raw_ostream *v9;
  char *v10;
  llvm::raw_ostream *v11;
  __int128 v12;
  uint64_t v13;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "reduction(");
    if (*(_DWORD *)(a2 + 52))
    {
      v4 = *(llvm::raw_ostream **)v3;
      v5 = (char *)sub_22F42187C((const char *)0x42, *(_DWORD *)(a2 + 48));
      v6 = sub_22E47DAC0(v4, v5);
      sub_22E47DAC0(v6, ", ");
    }
    v7 = *(_QWORD *)(a2 + 64);
    if ((*(_QWORD *)(a2 + 80) & 7) == 6
      && !v7
      && (v8 = *(_DWORD *)(*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)) != 0)
    {
      v9 = *(llvm::raw_ostream **)v3;
      v10 = (char *)sub_22F41FBE0(v8);
      sub_22E47DAC0(v9, v10);
    }
    else
    {
      if (v7)
        sub_22F0AAD88(v7, *(llvm::raw_ostream **)v3, *(__int128 **)(v3 + 8), 0);
      v11 = *(llvm::raw_ostream **)v3;
      v12 = *(_OWORD *)(a2 + 80);
      v13 = *(_QWORD *)(a2 + 96);
      sub_22F3AE864(v11, &v12);
    }
    sub_22E47DAC0(*(llvm::raw_ostream **)v3, ":");
    sub_22F0C30F0(v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDD6C(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "task_reduction(");
    v4 = *(_QWORD *)(a2 + 56);
    if ((*(_QWORD *)(a2 + 72) & 7) != 6
      || ((v5 = *(_DWORD *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFF8), !v4) ? (v6 = v5 == 0) : (v6 = 1), v6))
    {
      if (v4)
        sub_22F0AAD88(v4, *(llvm::raw_ostream **)v3, *(__int128 **)(v3 + 8), 0);
      v7 = *(llvm::raw_ostream **)v3;
      v10 = *(_OWORD *)(a2 + 72);
      v11 = *(_QWORD *)(a2 + 88);
      sub_22F3AE864(v7, &v10);
    }
    else
    {
      v8 = *(llvm::raw_ostream **)v3;
      v9 = (char *)sub_22F41FBE0(v5);
      sub_22E47DAC0(v8, v9);
    }
    sub_22E47DAC0(*(llvm::raw_ostream **)v3, ":");
    sub_22F0C31F8(v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDE54(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "in_reduction(");
    v4 = *(_QWORD *)(a2 + 56);
    if ((*(_QWORD *)(a2 + 72) & 7) != 6
      || ((v5 = *(_DWORD *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFF8), !v4) ? (v6 = v5 == 0) : (v6 = 1), v6))
    {
      if (v4)
        sub_22F0AAD88(v4, *(llvm::raw_ostream **)v3, *(__int128 **)(v3 + 8), 0);
      v7 = *(llvm::raw_ostream **)v3;
      v10 = *(_OWORD *)(a2 + 72);
      v11 = *(_QWORD *)(a2 + 88);
      sub_22F3AE864(v7, &v10);
    }
    else
    {
      v8 = *(llvm::raw_ostream **)v3;
      v9 = (char *)sub_22F41FBE0(v5);
      sub_22E47DAC0(v8, v9);
    }
    sub_22E47DAC0(*(llvm::raw_ostream **)v3, ":");
    sub_22F0C31F8(v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EDF3C(llvm::raw_ostream **result, _DWORD *a2)
{
  uint64_t v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2[4])
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "linear");
    if (a2[13])
    {
      v4 = *(llvm::raw_ostream **)v3;
      v5 = *(_BYTE **)(*(_QWORD *)v3 + 32);
      if ((unint64_t)v5 >= *(_QWORD *)(*(_QWORD *)v3 + 24))
      {
        v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)v3);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v5 + 1;
        *v5 = 40;
      }
      v6 = (char *)sub_22F42187C((const char *)0x2C, a2[12]);
      sub_22E47DAC0(v4, v6);
    }
    sub_22F0C3300(v3, (uint64_t)a2);
    if (a2[13])
    {
      v7 = *(llvm::raw_ostream **)v3;
      v8 = *(_BYTE **)(*(_QWORD *)v3 + 32);
      if ((unint64_t)v8 >= *(_QWORD *)(*(_QWORD *)v3 + 24))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 41;
      }
    }
    v9 = a2[4];
    if (*(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9])
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)v3, ": ");
      v10 = a2[4];
      sub_22F0D9044(*(_QWORD *)&a2[2 * v10 + 16 + 2 * v10 + 2 * v10 + 2 * v10 + 2 * v10], *(_QWORD *)v3, 0, *(_QWORD *)(v3 + 8), 0, "\n", 1uLL);
    }
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EE094(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "aligned");
    sub_22F0C2DD4(v3, a2);
    if (*(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)))
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)v3, ": ");
      sub_22F0D9044(*(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), *(_QWORD *)v3, 0, *(_QWORD *)(v3 + 8), 0, "\n", 1uLL);
    }
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EE144(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "copyin");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EE1A0(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "copyprivate");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3EE1FC(llvm::raw_ostream *result, uint64_t a2)
{
  llvm::raw_ostream **v2;

  if (*(_DWORD *)(a2 + 16))
  {
    v2 = (llvm::raw_ostream **)result;
    sub_22F0C2DD4((uint64_t)result, a2);
    return sub_22E47DAC0(*v2, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3EE23C(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "(");
  sub_22F0D9044(*(_QWORD *)(a2 + 16), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3EE29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  char *v6;

  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "depend(");
  v4 = *(_QWORD *)(a2 + 8 * *(unsigned int *)(a2 + 16) + 40);
  if (v4)
  {
    sub_22F0D9044(v4, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, ", ");
  }
  v5 = *(llvm::raw_ostream **)a1;
  v6 = (char *)sub_22F42187C((const char *)*(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 20));
  sub_22E47DAC0(v5, v6);
  if (*(_DWORD *)(a2 + 16))
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, " :");
    sub_22F0C3408(a1, a2);
  }
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream **sub_22F3EE360(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::raw_ostream *v7;
  char *v8;
  llvm::raw_ostream *v9;
  __int128 *v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  char *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  __int128 v21;
  uint64_t v22;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "map(");
    if (*(_DWORD *)(a2 + 120) != 6)
    {
      v4 = 0;
      v5 = a2 + 80;
      do
      {
        v6 = *(_DWORD *)(v5 + v4);
        if (v6 != 6)
        {
          v7 = *v3;
          v8 = (char *)sub_22F42187C((const char *)0x2E, v6);
          sub_22E47DAC0(v7, v8);
          if (*(_DWORD *)(v5 + v4) == 9)
          {
            v9 = *v3;
            v10 = (__int128 *)v3[1];
            v11 = (_BYTE *)*((_QWORD *)*v3 + 4);
            if ((unint64_t)v11 >= *((_QWORD *)*v3 + 3))
            {
              llvm::raw_ostream::write(*v3);
            }
            else
            {
              *((_QWORD *)v9 + 4) = v11 + 1;
              *v11 = 40;
            }
            v12 = *(_QWORD *)(a2 + 40);
            if (v12)
              sub_22F0AAD88(v12, v9, v10, 0);
            v21 = *(_OWORD *)(a2 + 56);
            v22 = *(_QWORD *)(a2 + 72);
            v13 = sub_22F3AE864(v9, &v21);
            v14 = (_BYTE *)*((_QWORD *)v13 + 4);
            if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
            {
              llvm::raw_ostream::write(v13);
            }
            else
            {
              *((_QWORD *)v13 + 4) = v14 + 1;
              *v14 = 41;
            }
          }
          v15 = *v3;
          v16 = (_BYTE *)*((_QWORD *)*v3 + 4);
          if ((unint64_t)v16 >= *((_QWORD *)*v3 + 3))
          {
            llvm::raw_ostream::write(v15);
          }
          else
          {
            *((_QWORD *)v15 + 4) = v16 + 1;
            *v16 = 44;
          }
        }
        v4 += 4;
      }
      while (v4 != 20);
      v17 = *v3;
      v18 = (char *)sub_22F42187C((const char *)0x2E, *(_DWORD *)(a2 + 120));
      sub_22E47DAC0(v17, v18);
      v19 = *v3;
      v20 = (_BYTE *)*((_QWORD *)*v3 + 4);
      if ((unint64_t)v20 >= *((_QWORD *)*v3 + 3))
      {
        llvm::raw_ostream::write(v19);
      }
      else
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        *v20 = 58;
      }
    }
    sub_22F0C3510((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3EE540(llvm::raw_ostream *result, uint64_t a2)
{
  llvm::raw_ostream **v3;
  llvm::raw_ostream *v4;
  size_t v5;
  const void *OpenMPClauseName;
  size_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v22;
  _DWORD *v23;
  int v24;
  llvm::raw_ostream *v25;
  char *v26;
  llvm::raw_ostream *v27;
  __int128 *v28;
  _BYTE *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (llvm::raw_ostream **)result;
    v4 = *(llvm::raw_ostream **)result;
    OpenMPClauseName = (const void *)llvm::omp::getOpenMPClauseName();
    v7 = v5;
    v8 = (void *)*((_QWORD *)v4 + 4);
    if (v5 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
    {
      if (v5)
      {
        memcpy(v8, OpenMPClauseName, v5);
        *((_QWORD *)v4 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v4, (const char *)OpenMPClauseName);
    }
    v9 = 0;
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      if (*(_DWORD *)(a2 + 4 * v9 + 80) != 2)
        ++v10;
      v9 = 1;
      v11 = 0;
    }
    while ((v12 & 1) != 0);
    if (v10)
    {
      v13 = *v3;
      v14 = (_BYTE *)*((_QWORD *)*v3 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)*v3 + 3))
      {
        llvm::raw_ostream::write(v13);
      }
      else
      {
        *((_QWORD *)v13 + 4) = v14 + 1;
        *v14 = 40;
      }
      v18 = 0;
      v19 = 1;
      do
      {
        v20 = v19;
        v21 = a2 + 4 * v18;
        v24 = *(_DWORD *)(v21 + 80);
        v23 = (_DWORD *)(v21 + 80);
        v22 = v24;
        if (v24 != 2)
        {
          v25 = *v3;
          v26 = (char *)sub_22F42187C((const char *)*(unsigned int *)(a2 + 8), v22);
          sub_22E47DAC0(v25, v26);
          if (!*v23)
          {
            v27 = *v3;
            v28 = (__int128 *)v3[1];
            v29 = (_BYTE *)*((_QWORD *)*v3 + 4);
            if ((unint64_t)v29 >= *((_QWORD *)*v3 + 3))
            {
              llvm::raw_ostream::write(*v3);
            }
            else
            {
              *((_QWORD *)v27 + 4) = v29 + 1;
              *v29 = 40;
            }
            v30 = *(_QWORD *)(a2 + 40);
            if (v30)
              sub_22F0AAD88(v30, v27, v28, 0);
            v35 = *(_OWORD *)(a2 + 56);
            v36 = *(_QWORD *)(a2 + 72);
            v31 = sub_22F3AE864(v27, &v35);
            v32 = (_BYTE *)*((_QWORD *)v31 + 4);
            if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
            {
              llvm::raw_ostream::write(v31);
            }
            else
            {
              *((_QWORD *)v31 + 4) = v32 + 1;
              *v32 = 41;
            }
          }
          if (v18 < (v10 - 1))
            sub_22E47DAC0(*v3, ", ");
        }
        v19 = 0;
        v18 = 1;
      }
      while ((v20 & 1) != 0);
      v33 = *v3;
      v34 = (_BYTE *)*((_QWORD *)*v3 + 4);
      if ((unint64_t)v34 >= *((_QWORD *)*v3 + 3))
      {
        llvm::raw_ostream::write(v33);
      }
      else
      {
        *((_QWORD *)v33 + 4) = v34 + 1;
        *v34 = 58;
      }
      v15 = (uint64_t)v3;
      v16 = a2;
      v17 = 32;
    }
    else
    {
      v15 = (uint64_t)v3;
      v16 = a2;
      v17 = 40;
    }
    sub_22F0C4E0C(v15, v16, v17);
    return sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3EE7A0(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  uint64_t v6;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)a1, "dist_schedule(");
  v5 = (char *)sub_22F42187C((const char *)0x18, *(_DWORD *)(a2 + 32));
  sub_22E47DAC0(v4, v5);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)a1, ", ");
    sub_22F0D9044(v6, *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  }
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3EE83C(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  char *v7;

  sub_22E47DAC0(*a1, "defaultmap(");
  v4 = *a1;
  v5 = (char *)sub_22F42187C((const char *)0x11, *(_DWORD *)(a2 + 16));
  sub_22E47DAC0(v4, v5);
  if (*(_DWORD *)(a2 + 24) != 3)
  {
    sub_22E47DAC0(*a1, ": ");
    v6 = *a1;
    v7 = (char *)sub_22F42187C((const char *)0x11, *(_DWORD *)(a2 + 24));
    sub_22E47DAC0(v6, v7);
  }
  return sub_22E47DAC0(*a1, ")");
}

llvm::raw_ostream **sub_22F3EE8D4(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "use_device_ptr");
    sub_22F0C3618((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EE930(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "use_device_addr");
    sub_22F0C3618((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EE98C(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "is_device_ptr");
    sub_22F0C3618((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EE9E8(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "has_device_addr");
    sub_22F0C3618((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EEA44(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "nontemporal");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3EEAA0(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  llvm::raw_ostream *v5;

  v3 = sub_22E47DAC0(*a1, "order(");
  v4 = (char *)sub_22F42187C((const char *)0x3B, *(_DWORD *)(a2 + 16));
  v5 = sub_22E47DAC0(v3, v4);
  return sub_22E47DAC0(v5, ")");
}

llvm::raw_ostream **sub_22F3EEAF0(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "inclusive");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EEB4C(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "exclusive");
    sub_22F0C2DD4((uint64_t)v3, a2);
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EEBA8(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = result;
    sub_22E47DAC0(*result, "uses_allocators(");
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = a2 + 24;
      v7 = 1;
      do
      {
        v8 = *(_QWORD *)(v6 + 8 * v7);
        sub_22F0D9044(*(_QWORD *)(v6 + 8 * (v7 - 1)), (int)*v3, 0, (int)v3[1], 0, "\n", 1uLL);
        if (v8)
        {
          sub_22E47DAC0(*v3, "(");
          sub_22F0D9044(v8, (int)*v3, 0, (int)v3[1], 0, "\n", 1uLL);
          sub_22E47DAC0(*v3, ")");
        }
        if (v5 < (v4 - 1))
          sub_22E47DAC0(*v3, ",");
        ++v5;
        v7 += 2;
      }
      while (v4 != v5);
    }
    return (llvm::raw_ostream **)sub_22E47DAC0(*v3, ")");
  }
  return result;
}

llvm::raw_ostream **sub_22F3EECE4(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = (uint64_t)result;
    sub_22E47DAC0(*result, "affinity");
    v4 = *(_QWORD *)(a2 + 8 * *(unsigned int *)(a2 + 16) + 24);
    if (v4)
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)v3, "(");
      sub_22F0D9044(v4, *(_QWORD *)v3, 0, *(_QWORD *)(v3 + 8), 0, "\n", 1uLL);
      sub_22E47DAC0(*(llvm::raw_ostream **)v3, " :");
      v5 = 32;
    }
    else
    {
      v5 = 40;
    }
    sub_22F0C3720(v3, a2, v5);
    return (llvm::raw_ostream **)sub_22E47DAC0(*(llvm::raw_ostream **)v3, ")");
  }
  return result;
}

llvm::raw_ostream *sub_22F3EEDAC(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)a1, "filter(");
  sub_22F0D9044(*(_QWORD *)(a2 + 32), *(_QWORD *)a1, 0, *(_QWORD *)(a1 + 8), 0, "\n", 1uLL);
  return sub_22E47DAC0(*(llvm::raw_ostream **)a1, ")");
}

llvm::raw_ostream *sub_22F3EEE0C(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  llvm::raw_ostream *v5;

  v3 = sub_22E47DAC0(*a1, "bind(");
  v4 = (char *)sub_22F42187C((const char *)0xA, *(_DWORD *)(a2 + 16));
  v5 = sub_22E47DAC0(v3, v4);
  return sub_22E47DAC0(v5, ")");
}

_DWORD *sub_22F3EEE5C(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = (_DWORD *)sub_22E8614E4(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v4 = *result;
  *(_QWORD *)(v4 + 16) = 0x200000000;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  v5 = v4 + 8;
  if (result[4])
    result = (_DWORD *)sub_22E794970(v5, (uint64_t)(result + 2));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_22F3EEECC(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_22E86147C(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)result;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 24) = 0x100000000;
  *(_QWORD *)(v4 + 16) = v4 + 32;
  v6 = v4 + 16;
  if (*(_DWORD *)(result + 24))
    result = sub_22F2A39AC(v6, result + 16);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

llvm::raw_ostream *sub_22F3EEF48(llvm::raw_ostream *a1, _DWORD *a2)
{
  unint64_t v5;
  unsigned int v6[216];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_22F1D4454((uint64_t)v6);
  sub_22E462F04(&v5, v6);
  sub_22F0C3B98(a2, a1);
  sub_22E54B4D4((uint64_t)v6);
  return a1;
}

llvm::raw_ostream *sub_22F3EEFD4(llvm::raw_ostream *result, _DWORD *a2)
{
  if (a2)
    return sub_22F3EEF48(result, a2);
  return result;
}

_QWORD *sub_22F3EEFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int Key;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 200))
    return (_QWORD *)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * Key) + 8) != 0);
  v11 = a2;
  v12 = a3;
  v7 = *(_QWORD *)(a1 + 152);
  if (!v7)
    goto LABEL_10;
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v11) & 1) == 0)
  {
    v11 = a2;
    v12 = a3;
    v8 = *(_QWORD *)(a1 + 184);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v11);
      return 0;
    }
LABEL_10:
    sub_22E4A06C4();
    return sub_22F3EF0A0(v10);
  }
  return 0;
}

void sub_22F3EF0A4(_QWORD *a1)
{
  sub_22F2ECA24(a1);
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22F3EF0C8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_OWORD *)a1 = xmmword_22F4A6F00;
  DWORD1(v2) = *((_DWORD *)a2 + 1);
  *((_QWORD *)&v2 + 1) = *((_QWORD *)a2 + 1);
  *(_OWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 96) = 6;
  *(_QWORD *)&result = 0x600000006;
  *(_OWORD *)(a1 + 80) = xmmword_22F4A6D94;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = 6;
  *(_BYTE *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

double sub_22F3EF134(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_OWORD *)a1 = xmmword_22F4A6F10;
  DWORD1(v2) = *((_DWORD *)a2 + 1);
  *((_QWORD *)&v2 + 1) = *((_QWORD *)a2 + 1);
  *(_OWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(a1 + 80) = 0x200000002;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

double sub_22F3EF184(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_OWORD *)a1 = xmmword_22F4A6F20;
  DWORD1(v2) = *((_DWORD *)a2 + 1);
  *((_QWORD *)&v2 + 1) = *((_QWORD *)a2 + 1);
  *(_OWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(a1 + 80) = 0x200000002;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

_DWORD *sub_22F3EF1D4(_DWORD *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F3EF240((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F3EF2EC(a1, a2, v7);
    *v5 = *a2;
    v5[4] = 1;
    *((_QWORD *)v5 + 1) = 0;
  }
  return v5;
}

uint64_t sub_22F3EF240(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & a2;
  v7 = (_DWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_22F3EF2EC(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22F0C4A4C((uint64_t)a1, v6);
  v8 = 0;
  sub_22F3EF240((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1)
    --a1[1];
  return a3;
}

uint64_t sub_22F3EF3A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_12;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[6 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_12:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      result = sub_22F3EF240((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      v11[4] = *(_DWORD *)(a2 + 16);
      *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = 0;
      *v5 += 2;
      if (*(_DWORD *)(a2 + 16) >= 0x41u)
      {
        result = *(_QWORD *)(a2 + 8);
        if (result)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F3EF4A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = 0;
  sub_22F28430C((uint64_t)&v8, a1, &v10, &v11);
  v4 = v8;
  if (v9)
  {
    v12 = v14;
    v13 = 0x800000000;
    v15 = *a2;
    v16 = v18;
    v17 = 0x800000000;
    sub_22F0C4BE8((uint64_t *)(a1 + 24), (uint64_t)&v15);
    if (v16 != v18)
      free(v16);
    if (v12 != v14)
      free(v12);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = 678152731 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v5) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v8 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 + 152 * v6 + 8;
}

uint64_t *sub_22F3EF5C8(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + v7 - 152);
      *(_QWORD *)(v6 + v7 - 144) = v6 + v7 - 128;
      result = (uint64_t *)(v6 + v7 - 144);
      *(result - 1) = v8;
      result[1] = 0x800000000;
      if (*(_DWORD *)(v4 + v7 - 136))
        result = (uint64_t *)sub_22F2528D0((uint64_t)result, v4 + v7 - 144);
      v7 -= 152;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F3EF69C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22F0C4D90(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F3EF6E8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t (**v27)();
  void *v28;
  uint64_t v29;
  _QWORD v30[51];

  v30[50] = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24);
  v7 = a2[4];
  v8 = sub_22EFFA8F0((uint64_t)a2);
  v9 = 8;
  if (v8 != 1294)
    v9 = 16;
  v10 = v6 + v9;
  v11 = -2;
  if (v8 == 1294)
    v11 = -1;
  v12 = v11 + v7;
  v13 = v10 + 8;
  v14 = sub_22EFFBBCC(*(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * (v8 != 1294)]
                                          + ((unint64_t)*a2 >> 24)));
  v15 = &v14[4 * *((unsigned int *)v14 + 1) + 20];
  v16 = ((*(_DWORD *)v14 >> 21) & 7u) * *((_DWORD *)v14 + 4);
  v27 = &off_24FAC6AB8;
  v28 = v30;
  v29 = 0x400000000;
  v30[48] = v13;
  v30[49] = v12;
  if (v12 >= 5)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  sub_22F0C5938((unsigned __int8 **)&v27, v15, &v15[v16], *(_QWORD *)(a1 + 2000), *(_QWORD *)(a1 + 15088), 0);
  *(_DWORD *)(a3 + 8) = 0;
  v17 = (unsigned int *)v28;
  if ((_DWORD)v29)
  {
    v18 = 96 * v29;
    do
    {
      v19 = *((_QWORD *)v17 + 11);
      if (v19)
        sub_22F3EF9B4(a3, 7, 8, 0, *((_QWORD *)v17 + 10), v19);
      if (*((_BYTE *)v17 + 64))
      {
        v20 = sub_22EF5D104(a1, *(_QWORD *)(*((_QWORD *)v17 + 7) + 8));
        sub_22F3EF9F0(a3, 0, *((_QWORD *)v17 + 7), v20, 0);
      }
      if (*((_BYTE *)v17 + 48))
      {
        v21 = sub_22EF5D104(a1, *(_QWORD *)(*((_QWORD *)v17 + 5) + 8));
        sub_22F3EF9F0(a3, 0, *((_QWORD *)v17 + 5), v21, 0);
      }
      if (*((_BYTE *)v17 + 32))
      {
        v22 = sub_22EF5D104(a1, *(_QWORD *)(*((_QWORD *)v17 + 3) + 8));
        sub_22F3EF9F0(a3, 1, *((_QWORD *)v17 + 3), v22, 0);
      }
      if (*((_BYTE *)v17 + 20))
        sub_22F3EFA2C(a3, a1, v17[4], *((_BYTE *)v17 + 72));
      if (*((_BYTE *)v17 + 12))
      {
        if (v17[2] == 6)
        {
          v24 = 0;
          v25 = 6;
        }
        else
        {
          v24 = sub_22EF5D104(a1, *(_QWORD *)(*(_QWORD *)v17 + 8));
          v25 = v17[2];
        }
        sub_22F3EFAB4(a3, v25, *(_QWORD *)v17, v24, *((_BYTE *)v17 + 72));
      }
      else
      {
        v23 = sub_22EF5D104(a1, *(_QWORD *)(*(_QWORD *)v17 + 8));
        sub_22F3EFAB4(a3, 0, *(_QWORD *)v17, v23, *((_BYTE *)v17 + 72));
      }
      v17 += 24;
      v18 -= 96;
    }
    while (v18);
    v17 = (unsigned int *)v28;
  }
  v27 = &off_24FAC6AB8;
  if (v17 != (unsigned int *)v30)
    free(v17);
  return 1;
}

uint64_t sub_22F3EF9B4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_22F3EFAF4(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + 56 * v6;
  *(_DWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = a4;
  *(_QWORD *)(v7 + 40) = a5;
  *(_QWORD *)(v7 + 48) = a6;
  *(_DWORD *)(a1 + 8) = v6 + 1;
  return a1;
}

uint64_t sub_22F3EF9F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v6;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22F0C53B0(a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)a1 + 56 * v5;
  *(_DWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a4;
  *(_DWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(a1 + 8) = v5 + 1;
  return a1;
}

uint64_t sub_22F3EFA2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22F3EFB74(a1, a2, a3, a4);
  v6 = *(_QWORD *)a1 + 56 * v5;
  v7 = a4;
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a3;
  result = sub_22EF5D104(a2, *(_QWORD *)(a2 + 16480));
  *(_QWORD *)(v6 + 24) = result;
  *(_DWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F3EFAB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned int v5;
  uint64_t v6;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22F0C5430(a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)a1 + 56 * v5;
  *(_DWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a4;
  *(_DWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(a1 + 8) = v5 + 1;
  return a1;
}

uint64_t sub_22F3EFAF4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v13 = a2;
  v14 = 0;
  v15 = 0;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v7 = sub_22E47F7A8(a1, (unint64_t)&v13);
  v8 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  v9 = *(_OWORD *)v7;
  v10 = *(_OWORD *)(v7 + 16);
  v11 = *(_OWORD *)(v7 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v7 + 48);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)v8 = v9;
  LODWORD(v8) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 56 * v8 - 56;
}

uint64_t sub_22F3EFB74(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a4;
  v12 = 1;
  v13 = 0;
  v14 = a3;
  v15 = sub_22EF5D104(a2, *(_QWORD *)(a2 + 16480));
  v16 = v5;
  v17 = 0;
  v18 = 0;
  v6 = sub_22E47F7A8(a1, (unint64_t)&v12);
  v7 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  v8 = *(_OWORD *)v6;
  v9 = *(_OWORD *)(v6 + 16);
  v10 = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v6 + 48);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 56 * v7 - 56;
}

uint64_t *sub_22F3EFC10(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;

  *a1 = 0;
  if (a2)
  {
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    sub_22F0C54B4(v4, a2, 0);
    *a1 = v4;
  }
  return a1;
}

uint64_t *sub_22F3EFC78(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
    MEMORY[0x2348A0E9C](v2, 0x1020C405AF6BDC9);
  }
  return a1;
}

uint64_t sub_22F3EFCCC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v5 = 0;
  v6 = a2;
  v3 = sub_22F246C54(v2, &v6, &v5);
  result = 0;
  if (v3)
    return *(_QWORD *)(v5 + 8);
  return result;
}

uint64_t sub_22F3EFD0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F24C3AC(a1, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F3EFDA4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  _DWORD v10[98];
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;

  v15 = a1;
  v14 = 0;
  v13 = (unsigned __int8 *)&unk_24FAC59D8;
  while (v15 != a2)
  {
    sub_22F0C5A0C(&v13, &v15, a2, &v14, a3, a4, 0, 0, (uint64_t)v10);
    if (v12)
      break;
    if (v11)
      v7 = v10[16] == 19;
    else
      v7 = 2;
    if ((v7 | 2) != 2)
    {
      v8 = 1;
      goto LABEL_9;
    }
  }
  v8 = 0;
LABEL_9:
  nullsub_1091(&v13);
  return v8;
}

BOOL sub_22F3EFE7C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  _BOOL8 v8;
  _QWORD v10[50];
  char v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;

  v14 = a1;
  v13 = 0;
  v12 = (unsigned __int8 *)&unk_24FAC59D8;
  while (v14 != a2)
  {
    sub_22F0C5A0C(&v12, &v14, a2, &v13, a3, a4, 0, 0, (uint64_t)v10);
    if (v11)
      v7 = 3;
    else
      v7 = v10[49] != 0;
    if (v7)
    {
      v8 = v7 != 3;
      goto LABEL_8;
    }
  }
  v8 = 0;
LABEL_8:
  nullsub_1091(&v12);
  return v8;
}

_DWORD *sub_22F3EFF44@<X0>(_DWORD *result@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  const char *v32;

  v6 = result[16];
  if (v6 <= 0x1F)
  {
    if (((1 << v6) & 0xC000001C) != 0)
    {
      switch(result[2])
      {
        case 0:
        case 3:
          goto LABEL_38;
        case 1:
          v11 = 5;
          goto LABEL_52;
        case 2:
          v7 = a2[2059];
          goto LABEL_39;
        case 4:
          v7 = a2[2061];
          goto LABEL_39;
        case 5:
        case 6:
        case 0xD:
          v7 = a2[2062];
          goto LABEL_39;
        case 7:
          result = (_DWORD *)sub_22F36D7A4((uint64_t)a2);
          *(_DWORD *)a4 = 2;
          v9 = "intmax_t";
          goto LABEL_23;
        case 8:
          result = (_DWORD *)sub_22F36D77C((uint64_t)a2);
          v12 = "ssize_t";
LABEL_25:
          *(_DWORD *)a4 = 2;
          *(_QWORD *)(a4 + 8) = result;
          *(_QWORD *)(a4 + 16) = v12;
          *(_BYTE *)(a4 + 24) = 0;
          v13 = 1;
          goto LABEL_28;
        case 9:
          result = (_DWORD *)sub_22F36891C((uint64_t)a2);
          v13 = 2;
          *(_DWORD *)a4 = 2;
          v14 = "ptrdiff_t";
LABEL_27:
          *(_QWORD *)(a4 + 8) = result;
          *(_QWORD *)(a4 + 16) = v14;
          *(_BYTE *)(a4 + 24) = 0;
LABEL_28:
          *(_DWORD *)(a4 + 28) = v13;
          return result;
        case 0xA:
          goto LABEL_31;
        case 0xB:
          result = (_DWORD *)llvm::Triple::isArch64Bit((llvm::Triple *)(a2[1886] + 32));
          if ((_DWORD)result)
            goto LABEL_30;
LABEL_31:
          v15 = a2[2060];
          *(_DWORD *)a4 = 2;
          v16 = "__int32";
          goto LABEL_32;
        case 0xC:
LABEL_30:
          v15 = a2[2062];
          *(_DWORD *)a4 = 2;
          v16 = "uint64_t";
          goto LABEL_32;
        case 0xE:
        case 0xF:
        case 0x10:
          goto LABEL_51;
        default:
          goto LABEL_10;
      }
    }
    if (v6 == 1)
    {
      HIDWORD(v8) = result[2];
      LODWORD(v8) = HIDWORD(v8);
      switch((v8 >> 1))
      {
        case 0u:
          goto LABEL_38;
        case 1u:
          v17 = a2[1886];
          if (*(_DWORD *)(v17 + 68) != 15)
            goto LABEL_51;
          v18 = *(_DWORD *)(v17 + 72);
          v19 = v18 > 0x11;
          v20 = (1 << v18) & 0x30003;
          if (v19 || v20 == 0)
            goto LABEL_51;
LABEL_38:
          v7 = a2[2060];
          goto LABEL_39;
        case 2u:
        case 8u:
          *(_DWORD *)a4 = 8;
          v9 = "wint_t";
LABEL_8:
          *(_QWORD *)(a4 + 8) = 0;
          goto LABEL_9;
        default:
LABEL_51:
          v11 = 1;
          goto LABEL_52;
      }
    }
  }
LABEL_10:
  if (v6 - 5 <= 5)
  {
    switch(result[2])
    {
      case 0:
      case 3:
        v7 = a2[2066];
        goto LABEL_39;
      case 1:
        v7 = a2[2064];
        goto LABEL_39;
      case 2:
        v7 = a2[2065];
        goto LABEL_39;
      case 4:
        v7 = a2[2067];
        goto LABEL_39;
      case 5:
      case 6:
      case 0xD:
        v7 = a2[2068];
        goto LABEL_39;
      case 7:
        result = (_DWORD *)sub_22F36D7BC((uint64_t)a2);
        *(_DWORD *)a4 = 2;
        v9 = "uintmax_t";
        goto LABEL_23;
      case 8:
        result = (_DWORD *)sub_22EF67C8C((uint64_t)a2);
        v12 = "size_t";
        goto LABEL_25;
      case 9:
        result = (_DWORD *)sub_22F36D838((uint64_t)a2);
        v13 = 2;
        *(_DWORD *)a4 = 2;
        v14 = "unsigned ptrdiff_t";
        goto LABEL_27;
      case 0xA:
        goto LABEL_68;
      case 0xB:
        result = (_DWORD *)llvm::Triple::isArch64Bit((llvm::Triple *)(a2[1886] + 32));
        if ((_DWORD)result)
          goto LABEL_67;
LABEL_68:
        v15 = a2[2066];
        *(_DWORD *)a4 = 2;
        v16 = "unsigned __int32";
        break;
      case 0xC:
LABEL_67:
        v15 = a2[2068];
        *(_DWORD *)a4 = 2;
        v16 = "unint64_t";
        break;
      case 0xE:
      case 0xF:
      case 0x10:
        goto LABEL_51;
      default:
        goto LABEL_54;
    }
LABEL_32:
    *(_QWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 16) = v16;
    goto LABEL_40;
  }
  if (v6 - 11 <= 7)
  {
    v10 = result[2];
    if (result[21] == 3)
    {
      if (v10 == 13)
      {
        v7 = a2[2072];
LABEL_39:
        *(_DWORD *)a4 = 2;
        *(_QWORD *)(a4 + 8) = v7;
        *(_QWORD *)(a4 + 16) = 0;
LABEL_40:
        *(_BYTE *)(a4 + 24) = 0;
        *(_DWORD *)(a4 + 28) = 0;
        return result;
      }
    }
    else
    {
      if (v10 == 3)
      {
        v7 = a2[2070];
        goto LABEL_39;
      }
      if (v10 == 2)
      {
        v7 = a2[2099];
        goto LABEL_39;
      }
    }
    v7 = a2[2071];
    goto LABEL_39;
  }
  switch(v6)
  {
    case 0x13u:
      v22 = result[2];
      if (v22 == 4)
      {
        if (a3)
        {
LABEL_58:
          result = (_DWORD *)sub_22EF5B848((uint64_t)a2, a2[2065] | 1, 0);
          *(_DWORD *)a4 = 2;
          v9 = "const unichar *";
LABEL_23:
          *(_QWORD *)(a4 + 8) = result;
LABEL_9:
          *(_QWORD *)(a4 + 16) = v9;
          goto LABEL_40;
        }
LABEL_49:
        *(_DWORD *)a4 = 7;
        v9 = "wchar_t *";
        goto LABEL_8;
      }
      if (v22 == 16)
        goto LABEL_49;
LABEL_82:
      v11 = 6;
LABEL_52:
      *(_DWORD *)a4 = v11;
LABEL_53:
      *(_DWORD *)(a4 + 28) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 24) = 0;
      return result;
    case 0x14u:
    case 0x19u:
      v11 = 4;
      goto LABEL_52;
    case 0x15u:
      switch(result[2])
      {
        case 0:
          v31 = a2[2060];
          goto LABEL_86;
        case 1:
          v31 = a2[2058];
          goto LABEL_86;
        case 2:
          v31 = a2[2059];
          goto LABEL_86;
        case 4:
          v31 = a2[2061];
          goto LABEL_86;
        case 5:
        case 6:
          v31 = a2[2062];
LABEL_86:
          *(_DWORD *)a4 = 2;
          *(_QWORD *)(a4 + 8) = v31;
          *(_QWORD *)(a4 + 16) = 0;
          goto LABEL_87;
        case 7:
          result = (_DWORD *)sub_22F36D7A4((uint64_t)a2);
          v32 = "intmax_t";
          goto LABEL_94;
        case 8:
          result = (_DWORD *)sub_22F36D77C((uint64_t)a2);
          v32 = "ssize_t";
          goto LABEL_94;
        case 9:
          result = (_DWORD *)sub_22F36891C((uint64_t)a2);
          v32 = "ptrdiff_t";
LABEL_94:
          *(_DWORD *)a4 = 2;
          *(_QWORD *)(a4 + 8) = result;
          *(_QWORD *)(a4 + 16) = v32;
LABEL_87:
          *(_DWORD *)(a4 + 28) = 0;
          *(_BYTE *)(a4 + 24) = 1;
          break;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xE:
        case 0xF:
        case 0x10:
          goto LABEL_51;
        default:
          goto LABEL_54;
      }
      return result;
    case 0x17u:
      if (a3)
      {
        v15 = a2[2065];
        *(_DWORD *)a4 = 2;
        v16 = "unichar";
        goto LABEL_32;
      }
      v23 = a2[1886];
      if (*(_DWORD *)(v23 + 68) == 15)
      {
        v24 = *(_DWORD *)(v23 + 72);
        v19 = v24 > 0x11;
        v25 = (1 << v24) & 0x30003;
        v26 = v19 || v25 == 0;
        if (!v26 && result[2] == 2)
          goto LABEL_38;
      }
      v15 = a2[2053];
      *(_DWORD *)a4 = 2;
      v16 = "wchar_t";
      goto LABEL_32;
    case 0x18u:
      if (a3)
        goto LABEL_58;
      v27 = a2[1886];
      if (*(_DWORD *)(v27 + 68) == 15)
      {
        v28 = *(_DWORD *)(v27 + 72);
        v19 = v28 > 0x11;
        v29 = (1 << v28) & 0x30003;
        v30 = v19 || v29 == 0;
        if (!v30 && result[2] == 2)
          goto LABEL_82;
      }
      goto LABEL_49;
    case 0x1Bu:
      v11 = 3;
      goto LABEL_52;
    default:
LABEL_54:
      *(_DWORD *)a4 = 0;
      goto LABEL_53;
  }
}

_DWORD *sub_22F3F045C@<X0>(_DWORD *result@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  _DWORD *v10;
  __int128 v11;
  _OWORD v12[2];

  v5 = result[16];
  v6 = v5 > 0x20;
  v7 = (1 << v5) & 0x100400001;
  if (v6 || v7 == 0)
  {
    v10 = result;
    result = sub_22F3EFF44(result, a2, a3, (uint64_t)v12);
    if (LODWORD(v12[0]) == 1 || v10[21] == 3)
    {
      v11 = v12[1];
      *(_OWORD *)a4 = v12[0];
      *(_OWORD *)(a4 + 16) = v11;
    }
    else
    {
      return (_DWORD *)sub_22F3C7C48((uint64_t)v12, (uint64_t)a2, v10[22], a4);
    }
  }
  else
  {
    *(_DWORD *)a4 = 1;
    *(_DWORD *)(a4 + 28) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
  return result;
}

llvm::raw_ostream *sub_22F3F0508(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char *v6;
  char *v7;

  sub_22E47DAC0(a2, "%");
  if (*(_BYTE *)(a1 + 96))
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v4, "$");
  }
  if (*(_BYTE *)(a1 + 144))
    sub_22E47DAC0(a2, "-");
  if (*(_BYTE *)(a1 + 168))
    sub_22E47DAC0(a2, "+");
  if (*(_BYTE *)(a1 + 192))
    sub_22E47DAC0(a2, " ");
  if (*(_BYTE *)(a1 + 216))
    sub_22E47DAC0(a2, "#");
  if (*(_BYTE *)(a1 + 240))
    sub_22E47DAC0(a2, "0");
  sub_22F3C7DA8((llvm::raw_ostream *)(a1 + 16), a2);
  sub_22F3C7DA8((llvm::raw_ostream *)(a1 + 344), a2);
  if (*(_DWORD *)(a1 + 84) != 3)
  {
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v5 + 1;
      *v5 = 118;
    }
    llvm::raw_ostream::operator<<();
  }
  v6 = (char *)sub_22F3C7D60(a1);
  sub_22E47DAC0(a2, v6);
  v7 = (char *)sub_22F3C7D84(a1 + 40);
  return sub_22E47DAC0(a2, v7);
}

double sub_22F3F0654(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) &= ~1u;
  *(_BYTE *)(a1 + 37) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 80) = 0x300000000;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) &= ~1u;
  *(_BYTE *)(a1 + 93) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 104) = "'";
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = "-";
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = "+";
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = " ";
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = "#";
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = "0";
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = "tt";
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = "private";
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = "public";
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = "sensitive";
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 364) = *(_BYTE *)(a1 + 364) & 0xFE;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  return result;
}

uint64_t sub_22F3F0774(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10[8];

  result = a2[1];
  v5 = result - *a2;
  if (result != *a2)
  {
    v6 = v5 + 1;
    if (v5 == -1)
    {
      sub_22F0C8578((uint64_t)v10, a1, 0x40uLL);
      return sub_22F0C8668(v10);
    }
    else
    {
      v7 = __clz(v6);
      v8 = 63;
      if (((v6 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      sub_22F0C8578((uint64_t)v10, a1, v8 - v7);
      do
        v9 = sub_22F0C8668(v10);
      while (v9 >= v6);
      return *a2 + v9;
    }
  }
  return result;
}

void *sub_22F3F0804(_QWORD *a1, char *a2, char *a3)
{
  void *result;
  uint64_t v5;
  unsigned int __src[624];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_22F0C883C(a2, a3, __src, (unsigned int *)&v7);
  result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v5 = 4;
    while (!*(_DWORD *)((char *)a1 + v5))
    {
      v5 += 4;
      if (v5 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_22F3F08AC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[72];
  void *v16;
  uint64_t v17;
  _QWORD v18[6];
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];
  int v23;
  __int16 v24;
  char v25;
  _QWORD *v26;
  __int128 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  if ((a1[8] & 1) != 0)
  {
    v8 = (const char *)*((_QWORD *)a1 + 1);
    v9 = *((_QWORD *)a1 + 2);
  }
  else
  {
    v8 = sub_22F0C8DD4(a1, *(_QWORD **)(a2 + 1992));
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v9;
    *((_BYTE *)a1 + 32) |= 1u;
  }
  v10 = *(_QWORD *)(a2 + 1992);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)a1;
  v22[0] = a2 + 2032;
  v22[1] = v11;
  v22[2] = a2 + 16328;
  v22[3] = v8;
  v22[4] = &v8[v9];
  v22[5] = v8;
  v23 = v12;
  v24 = 1;
  v25 = 0;
  v26 = v28;
  v27 = xmmword_22F44E350;
  sub_22F3A9738(v18, a2 + 2032, v10, v11, a2 + 16328, a3);
  sub_22F3A976C((uint64_t)v18, a4);
  sub_22F3A8BE4((uint64_t)v15, (uint64_t)v22, (uint64_t)v18, a2 + 2032, *(_QWORD *)(a2 + 1992), *(_QWORD *)(*(_QWORD *)(a2 + 1992) + 8), a2 + 16328);
  v13 = sub_22EFADCDC((uint64_t)v15);
  if (v16 != &v17)
    free(v16);
  if (v20 != &v21)
    free(v20);
  sub_22F27B320((uint64_t)&v19);
  if (v26 != v28)
    free(v26);
  return v13;
}

int *sub_22F3F0A38(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    v4 = *a2 & (v3 - 1);
    result = (int *)(v2 + 32 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 32 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 32 * v4);
    }
  }
  return (int *)(v2 + 32 * v3);
}

uint64_t sub_22F3F0AA0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = a2;
  v11 = a2;
  v7 = a1 + 32;
  v12 = 0;
  if (sub_22F246C54((uint64_t *)(a1 + 32), &v11, &v12)
    && v12 != *(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48))
  {
    return *(unsigned int *)(v12 + 8);
  }
  v8 = sub_22F1E33FC(*(_QWORD *)a1, a3, a4, 0);
  *((_DWORD *)sub_22F29449C(v7, &v10) + 2) = v8;
  return v8;
}

unint64_t sub_22F3F0B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a2;
  v8 = a2;
  v4 = a1 + 56;
  v9 = 0;
  if (sub_22F246C54((uint64_t *)(a1 + 56), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 56) + 16 * *(unsigned int *)(a1 + 72))
  {
    return *(unsigned int *)(v9 + 8);
  }
  v5 = sub_22E677168(*(_QWORD *)a1, *(_DWORD *)(a2 + 4)) >> 32;
  *((_DWORD *)sub_22F29449C(v4, &v7) + 2) = v5;
  return v5;
}

llvm::raw_ostream *sub_22F3F0BD4(_QWORD *a1, unint64_t a2, llvm::raw_ostream *a3, char a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a4 & 1) == 0)
    return (llvm::raw_ostream *)sub_22F0CC1BC(a3, a2, a1, 0, 0, 0, 1, 1);
  v8 = sub_22F0C975C(a1, a2);
  v9 = (uint64_t **)sub_22E47DAC0(a3, "Type: ");
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
    v11 = v10 & 0xFFFFFFFFFFFFFFF0;
  else
    v11 = sub_22EF6462C((uint64_t)a1, a2);
  v12 = sub_22F40B69C(v9, v11);
  sub_22E47DAC0((llvm::raw_ostream *)v12, "\n");
  sub_22E47DAC0(a3, "\nLayout: ");
  sub_22E47DAC0(a3, "<ASTRecordLayout\n");
  sub_22E47DAC0(a3, "  Size:");
  sub_22EF5CDF0(a1, *(_QWORD *)(a1[2051] & 0xFFFFFFFFFFFFFFF0));
  v13 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v13, "\n");
  if (*(_DWORD *)(a1[1886] + 148) != 11)
  {
    sub_22E47DAC0(a3, "  DataSize:");
    sub_22EF5CDF0(a1, *(_QWORD *)(a1[2051] & 0xFFFFFFFFFFFFFFF0));
    v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v14, "\n");
  }
  sub_22E47DAC0(a3, "  Alignment:");
  sub_22EF5CDF0(a1, *(_QWORD *)(a1[2051] & 0xFFFFFFFFFFFFFFF0));
  v15 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v15, "\n");
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[1886] + 776))(a1[1886]))
  {
    sub_22E47DAC0(a3, "  PreferredAlignment:");
    sub_22EF5CDF0(a1, *(_QWORD *)(a1[2051] & 0xFFFFFFFFFFFFFFF0));
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v16, "\n");
  }
  sub_22E47DAC0(a3, "  FieldOffsets: [");
  v17 = *(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48);
  if ((v17 & 0x7FFFFFFF8) != 0)
  {
    v18 = 0;
    v19 = (v17 >> 3);
    do
    {
      if (v18)
        sub_22E47DAC0(a3, ", ");
      llvm::raw_ostream::operator<<();
      ++v18;
    }
    while (v19 != v18);
  }
  return sub_22E47DAC0(a3, "]>\n");
}

int32x2_t sub_22F3F0E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int32x2_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = a1 + 1024;
  v5 = a2 + 72;
  v6 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  if (v7)
    v8 = v7 - 8;
  else
    v8 = 0;
  v17 = 0;
  v18 = v8;
  if (sub_22E3B9914(v4, &v18, &v17))
  {
    v10 = v17;
    v11 = *(_QWORD *)(a1 + 1024);
    v12 = *(unsigned int *)(a1 + 1040);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 1024);
    v12 = *(unsigned int *)(a1 + 1040);
    v10 = (_QWORD *)(v11 + 16 * v12);
  }
  if (v10 != (_QWORD *)(v11 + 16 * v12))
  {
    v13 = v10[1];
    if ((v13 & 1) != 0)
      v13 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 16048) + 16))(*(_QWORD *)(a1 + 16048), v13 >> 1);
    if (v13 == a2)
    {
      v14 = *(_QWORD *)(sub_22EFCAD5C(v5) + 16);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 4) != 0)
        v15 = (_QWORD *)*v15;
      if (v15)
        v16 = v15 - 8;
      else
        v16 = 0;
      v17 = v16;
      v18 = 0;
      if (sub_22E3B9914(v4, &v17, &v18))
      {
        *v18 = -8192;
        result = vadd_s32(*(int32x2_t *)(a1 + 1032), (int32x2_t)0x1FFFFFFFFLL);
        *(int32x2_t *)(a1 + 1032) = result;
      }
    }
  }
  return result;
}

uint64_t sub_22F3F0F78(uint64_t a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F251EFC((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F251FA0(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F3F1014(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F3F1044@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;

  switch(*(_DWORD *)(result + 64))
  {
    case 0:
    case 0x16:
    case 0x20:
      goto LABEL_7;
    case 1:
    case 0x13:
    case 0x21:
      v6 = *(_DWORD *)(result + 8);
      if (v6 > 13)
      {
        if ((v6 - 14) >= 2)
          goto LABEL_26;
        v8 = 6;
        goto LABEL_30;
      }
      switch(v6)
      {
        case 0:
          v8 = 5;
LABEL_30:
          *(_DWORD *)a3 = v8;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          goto LABEL_22;
        case 2:
          goto LABEL_36;
        case 4:
LABEL_27:
          v9 = a2[2053];
          v10 = "wchar_t";
LABEL_28:
          *(_DWORD *)a3 = 2;
          *(_QWORD *)(a3 + 8) = v9;
          *(_QWORD *)(a3 + 16) = v10;
LABEL_22:
          *(_DWORD *)(a3 + 28) = 0;
LABEL_23:
          *(_BYTE *)(a3 + 24) = 1;
          break;
        default:
LABEL_7:
          *(_DWORD *)a3 = 1;
LABEL_8:
          *(_DWORD *)(a3 + 28) = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_BYTE *)(a3 + 24) = 0;
          break;
      }
      return result;
    case 2:
    case 3:
    case 4:
      __asm { BR              X10 }
      return result;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
      __asm { BR              X10 }
      return result;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      v4 = *(_DWORD *)(result + 8);
      if (v4 == 13)
      {
        v5 = a2[2072];
      }
      else if (v4 == 4)
      {
        v5 = a2[2071];
      }
      else
      {
        if (v4)
          goto LABEL_7;
        v5 = a2[2070];
      }
LABEL_21:
      *(_DWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v5;
      *(_QWORD *)(a3 + 16) = 0;
      goto LABEL_22;
    case 0x14:
      v8 = 4;
      goto LABEL_30;
    case 0x15:
      switch(*(_DWORD *)(result + 8))
      {
        case 0:
          v5 = a2[2060];
          goto LABEL_21;
        case 1:
          v5 = a2[2058];
          goto LABEL_21;
        case 2:
          v5 = a2[2059];
          goto LABEL_21;
        case 3:
        case 0xA:
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
          goto LABEL_7;
        case 4:
          v5 = a2[2061];
          goto LABEL_21;
        case 5:
        case 6:
          v5 = a2[2062];
          goto LABEL_21;
        case 7:
          result = sub_22F36D7A4((uint64_t)a2);
          v7 = "intmax_t";
          break;
        case 8:
          result = sub_22F36D77C((uint64_t)a2);
          v7 = "ssize_t";
          break;
        case 9:
          result = sub_22F36891C((uint64_t)a2);
          v7 = "ptrdiff_t";
          break;
        case 0xC:
          v9 = a2[2062];
          v10 = "uint64_t";
          goto LABEL_28;
        default:
          goto LABEL_33;
      }
      *(_DWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = result;
      goto LABEL_44;
    case 0x17:
    case 0x18:
      v6 = *(_DWORD *)(result + 8);
      if (v6 <= 13)
      {
        if (!v6)
          goto LABEL_27;
        if (v6 == 2)
        {
LABEL_36:
          v11 = a2[1886];
          if (*(_DWORD *)(v11 + 68) == 15)
          {
            v12 = *(_DWORD *)(v11 + 72);
            v13 = v12 > 0x11;
            v14 = (1 << v12) & 0x30003;
            if (!v13 && v14 != 0)
            {
              *(_DWORD *)a3 = 5;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              *(_DWORD *)(a3 + 28) = 0;
              goto LABEL_23;
            }
          }
        }
        goto LABEL_7;
      }
      if ((v6 - 14) < 2)
      {
        v7 = "wchar_t *";
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = 0;
LABEL_44:
        *(_QWORD *)(a3 + 16) = v7;
        goto LABEL_22;
      }
LABEL_26:
      if (v6 != 16)
        goto LABEL_7;
      goto LABEL_27;
    default:
LABEL_33:
      *(_DWORD *)a3 = 0;
      goto LABEL_8;
  }
}

llvm::raw_ostream *sub_22F3F1348(_BYTE *a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  char *v6;

  sub_22E47DAC0(a2, "%");
  if (a1[96])
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v4, "$");
  }
  if (a1[120])
    sub_22E47DAC0(a2, "*");
  sub_22F3C7DA8((llvm::raw_ostream *)(a1 + 16), a2);
  v5 = (char *)sub_22F3C7D60((uint64_t)a1);
  sub_22E47DAC0(a2, v5);
  v6 = (char *)sub_22F3C7D84((uint64_t)(a1 + 40));
  return sub_22E47DAC0(a2, v6);
}

uint64_t sub_22F3F13E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v11;
  unsigned int v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;

  if (!a3)
    return 1;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    if (a5 <= v11)
    {
      v15 = 0;
    }
    else
    {
      sub_22F0D5A50(*(_QWORD *)(a4 + 8 * v11));
      v15 = v14;
    }
    if (*(_DWORD *)(a2 + 4 * v11) != sub_22F0D34D8(v12, a1, 0, v15, a6))
      break;
    v11 = ++v12;
    if (a3 == v12)
      return 1;
  }
  v17 = 0;
  v18 = 0;
  while (1)
  {
    if (a5 <= v17)
    {
      v20 = 0;
    }
    else
    {
      sub_22F0D5A50(*(_QWORD *)(a4 + 8 * v17));
      v20 = v19;
    }
    if (*(_DWORD *)(a2 + 4 * v17) != sub_22F0D34D8(v18, a1, 1, v20, a6))
      break;
    v17 = ++v18;
    if (a3 == v18)
      return 2;
  }
  return 0;
}

uint64_t sub_22F3F14F4(unsigned int a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6)
{
  int v10;
  int v11;

  if (a5 <= a1)
  {
    v11 = 0;
  }
  else
  {
    sub_22F0D5A50(*(_QWORD *)(a4 + 8 * a1));
    v11 = v10;
  }
  return sub_22F0D34D8(a1, a2, a3, v11, a6);
}

unint64_t sub_22F3F1554(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v2 = 0xB0EEF52375EF8302;
  v3 = 0xA0E4E32062FF891CLL;
  v4 = 0x1533771C85ACA6D4;
  v5 = 0xA257D1C9BBAB1C0;
  v6 = &a1[a2 - (a2 & 7)];
  v7 = a2 << 56;
  if (v6 == a1)
  {
    v6 = a1;
  }
  else
  {
    do
    {
      v3 ^= *(_QWORD *)a1;
      v8 = 1;
      do
      {
        v9 = v8;
        v10 = v2 + v5;
        v11 = v10 ^ __ROR8__(v2, 51);
        v12 = v4 + v3;
        v13 = __ROR8__(v3, 48);
        v5 = (v12 ^ v13) + __ROR8__(v10, 32);
        v3 = v5 ^ __ROR8__(v12 ^ v13, 43);
        v14 = v12 + v11;
        v2 = v14 ^ __ROR8__(v11, 47);
        v4 = __ROR8__(v14, 32);
        v8 = 0;
      }
      while ((v9 & 1) != 0);
      v5 ^= *(_QWORD *)a1;
      a1 += 8;
    }
    while (a1 != v6);
  }
  switch(a2 & 7)
  {
    case 1:
      goto LABEL_12;
    case 2:
      goto LABEL_11;
    case 3:
      goto LABEL_10;
    case 4:
      goto LABEL_9;
    case 5:
      goto LABEL_8;
    case 6:
      goto LABEL_7;
    case 7:
      v7 |= (unint64_t)v6[6] << 48;
LABEL_7:
      v7 |= (unint64_t)v6[5] << 40;
LABEL_8:
      v7 |= (unint64_t)v6[4] << 32;
LABEL_9:
      v7 |= (unint64_t)v6[3] << 24;
LABEL_10:
      v7 |= (unint64_t)v6[2] << 16;
LABEL_11:
      v7 |= (unint64_t)v6[1] << 8;
LABEL_12:
      v7 |= *v6;
      break;
    default:
      break;
  }
  v15 = v7 ^ v3;
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = v2 + v5;
    v19 = v18 ^ __ROR8__(v2, 51);
    v20 = v4 + v15;
    v21 = __ROR8__(v15, 48);
    v5 = (v20 ^ v21) + __ROR8__(v18, 32);
    v15 = v5 ^ __ROR8__(v20 ^ v21, 43);
    v22 = v20 + v19;
    v2 = v22 ^ __ROR8__(v19, 47);
    v4 = __ROR8__(v22, 32);
    v16 = 0;
  }
  while ((v17 & 1) != 0);
  v23 = v5 ^ v7;
  v24 = v4 ^ 0xFF;
  v25 = 4;
  do
  {
    v26 = v2 + v23;
    v27 = v26 ^ __ROR8__(v2, 51);
    v28 = v24 + v15;
    v29 = v28 ^ __ROR8__(v15, 48);
    v23 = v29 + __ROR8__(v26, 32);
    v15 = v23 ^ __ROR8__(v29, 43);
    v30 = v28 + v27;
    v2 = v30 ^ __ROR8__(v27, 47);
    v24 = __ROR8__(v30, 32);
    --v25;
  }
  while (v25);
  return v2 ^ v24 ^ __ROR8__(v29, 43);
}

unint64_t sub_22F3F16EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_22F3F1554(a2, a3) % 0xFFFF + 1;
}

llvm::raw_ostream *sub_22F3F1724()
{
  char *v0;
  llvm::raw_ostream *v1;
  llvm *v2;
  uint64_t v3;
  int v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm *v7;
  uint64_t v8;
  int v9;
  char *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;

  v0 = sub_22F0D3748(19);
  v1 = (llvm::raw_ostream *)llvm::errs((llvm *)v0);
  v2 = sub_22E47DAC0(v1, "\n*** Stmt/Expr Stats:\n");
  v3 = 0;
  v4 = 0;
  do
  {
    if (*(_QWORD *)&byte_253E4C248[v3 + 8])
      v4 += *(_DWORD *)&byte_253E4C248[v3 + 16];
    v3 += 16;
  }
  while (v3 != 3792);
  v5 = (llvm::raw_ostream *)llvm::errs(v2);
  sub_22E47DAC0(v5, "  ");
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v7 = sub_22E47DAC0(v6, " stmts/exprs total.\n");
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = &byte_253E4C248[v8];
    if (*(_QWORD *)&byte_253E4C248[v8 + 8] && *((_DWORD *)v10 + 4))
    {
      v11 = (llvm::raw_ostream *)llvm::errs(v7);
      sub_22E47DAC0(v11, "    ");
      v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v13 = sub_22E47DAC0(v12, " ");
      v14 = sub_22E47DAC0(v13, *((char **)v10 + 1));
      sub_22E47DAC0(v14, ", ");
      v15 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      sub_22E47DAC0(v15, " each (");
      v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v7 = sub_22E47DAC0(v16, " bytes)\n");
      v9 += *(_DWORD *)&byte_253E4C248[v8 + 20] * *((_DWORD *)v10 + 4);
    }
    v8 += 16;
  }
  while (v8 != 3792);
  v17 = (llvm::raw_ostream *)llvm::errs(v7);
  sub_22E47DAC0(v17, "Total bytes = ");
  v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  return sub_22E47DAC0(v18, "\n");
}

char *sub_22F3F189C(int a1)
{
  char *result;

  result = sub_22F0D3748(a1);
  ++*((_DWORD *)result + 2);
  return result;
}

void sub_22F3F18BC()
{
  byte_255E04EB3 = 1;
}

uint64_t sub_22F3F18CC(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  if (!a1)
    return 0;
  if (*a1 != 101)
    return 0;
  v5 = *(_DWORD *)a1;
  v3 = a1 + 16;
  v4 = v5;
  if (v5 < 0x100)
    return 0;
  v6 = 8 * (v4 >> 8);
  do
  {
    v1 = *(_QWORD *)v3;
    if ((*(unsigned __int16 *)(*(_QWORD *)v3 + 32) | 4) == 0x2C)
      break;
    v1 = 0;
    v3 += 8;
    v6 -= 8;
  }
  while (v6);
  return v1;
}

unsigned __int8 *sub_22F3F1924(unsigned __int8 *result, int a2)
{
  int v2;
  unsigned __int8 **v3;

  if (a2)
  {
    if (!result)
      return result;
    if (*result != 7)
      goto LABEL_6;
    result = *(unsigned __int8 **)&result[8 * *((unsigned int *)result + 2) + 32];
  }
  if (result)
  {
    do
    {
LABEL_6:
      v2 = *result;
      if (v2 == 8)
      {
        if ((*(_DWORD *)result & 0xFFFFFF00) != 0x100)
          return result;
        v3 = (unsigned __int8 **)(result + 16);
      }
      else
      {
        if (v2 != 101)
          return result;
        v3 = (unsigned __int8 **)(result + 8);
      }
      result = *v3;
    }
    while (*v3);
  }
  return result;
}

double sub_22F3F1984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  double result;
  __int128 v12;
  uint64_t v13;

  v5 = (uint64_t *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v6 = (uint64_t *)(a2 + 8);
  else
    v6 = 0;
  if ((v4 & 1) != 0)
    v7 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v7 = v6;
  if ((v4 & 1) != 0)
  {
    v8 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  else if (v4)
  {
    v8 = (uint64_t *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  sub_22F0D8994((uint64_t **)&v12, v7, v8);
  v9 = *v5;
  if ((*v5 & 1) != 0)
  {
    v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8 * *(unsigned int *)(v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else if (v9)
  {
    v10 = (uint64_t *)(a2 + 16);
  }
  else
  {
    v10 = 0;
  }
  sub_22F0D8994((uint64_t **)(a1 + 24), v10, v10);
  result = *(double *)&v12;
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

void sub_22F3F1A3C(unsigned __int16 *a1)
{
  unsigned __int16 *v1;
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v1 = a1 + 12;
  v3 = ((v2 >> 8) & 1) + ((v2 >> 9) & 1);
  if (*(_QWORD *)&v1[4 * v3 + 4])
    sub_22F0D60E4(*(_QWORD *)&v1[4 * v3 + 4]);
  else
    sub_22F0D60E4(*(_QWORD *)&v1[4 * v3]);
}

void sub_22F3F1A68(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 2) & 8) == 0 || !*(_DWORD *)(a1 + 72))
    sub_22EFC70E8((_QWORD *)(a1 + 48));
}

uint64_t sub_22F3F1AB0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if ((v1 & 7) != 0)
    v2 = 0;
  else
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  return *(_QWORD *)(v2 + 16) + 16;
}

unsigned __int8 *sub_22F3F1AD0(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)sub_22E3CD3D4(a1 + 2032, 8 * a2 + 16, 3);
  return sub_22F3F2C68(v3, a2);
}

uint64_t sub_22F3F1B04(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
}

uint64_t sub_22F3F1B10(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (*(_DWORD *)(a1 + 16) + a2));
}

uint64_t sub_22F3F1B24(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (*(_DWORD *)(a1 + 16) + a2 + *(_DWORD *)(a1 + 20)));
}

void *sub_22F3F1B3C(uint64_t a1, int a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                         + 8 * (*(_DWORD *)(a1 + 16) + a2 + *(_DWORD *)(a1 + 20)))
                             + 24)
                 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                          + 8 * (*(_DWORD *)(a1 + 16) + a2 + *(_DWORD *)(a1 + 20)))
                              + 24)
                  + 40) & 7) != 0
    || v2 == 0)
  {
    return &unk_22F5C9B0E;
  }
  else
  {
    return (void *)(*(_QWORD *)(v2 + 16) + 16);
  }
}

void *sub_22F3F1B88(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, int a6, int a7, int a8, const void *a9, unsigned int a10)
{
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *result;

  *(_DWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 20) = a7;
  *(_DWORD *)(a1 + 24) = a10;
  *(_DWORD *)(a1 + 80) = a8;
  v14 = a7 + a6;
  v15 = a7 + a6 + a8;
  v16 = 8 * v15;
  v17 = a2 + 2032;
  v18 = (void *)sub_22E3CD3D4(a2 + 2032, v16, 3);
  *(_QWORD *)(a1 + 72) = v18;
  if (v15)
  {
    memmove(v18, a3, v16);
    v19 = (void *)sub_22E3CD3D4(v17, v16, 3);
    *(_QWORD *)(a1 + 32) = v19;
    memmove(v19, a5, v16);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = sub_22E3CD3D4(v17, v16, 3);
  }
  v20 = (void *)sub_22E3CD3D4(v17, 8 * v14, 3);
  *(_QWORD *)(a1 + 56) = v20;
  if (v14)
    memmove(v20, a4, 8 * v14);
  result = (void *)sub_22E3CD3D4(v17, 8 * a10, 3);
  *(_QWORD *)(a1 + 64) = result;
  if (a10)
    return memmove(result, a9, 8 * a10);
  return result;
}

uint64_t sub_22F3F1CB8(uint64_t a1, uint64_t a2, int a3, char a4, char a5, int a6, int a7, const void *a8, void *a9, uint64_t *a10, uint64_t a11, int a12, void *a13, int a14, int a15, int a16)
{
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;

  v22 = a16;
  *(_BYTE *)a1 = 1;
  if (byte_255E04EB3)
  {
    v23 = a2;
    v24 = sub_22F0D3748(1);
    v22 = a16;
    a2 = v23;
    ++*((_DWORD *)v24 + 2);
  }
  *(_DWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 13) = a5;
  *(_DWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 20) = a7;
  *(_DWORD *)(a1 + 24) = a12;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 48) = a11;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v25 = (a7 + a6 + a14);
  v26 = 8 * v25;
  v27 = a2 + 2032;
  *(_DWORD *)(a1 + 80) = a14;
  v28 = (void *)sub_22E3CD3D4(a2 + 2032, 8 * v25, 3);
  *(_QWORD *)(a1 + 72) = v28;
  if ((_DWORD)v25)
  {
    memmove(v28, a8, v26);
    v30 = (_QWORD *)sub_22E3CD3D4(v27, v26, 3);
    *(_QWORD *)(a1 + 32) = v30;
    v31 = 8 * v25;
    do
    {
      v32 = *a10++;
      *v30++ = v32;
      v31 -= 8;
    }
    while (v31);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = sub_22E3CD3D4(v27, v26, 3);
  }
  v33 = (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16));
  v34 = (void *)sub_22E3CD3D4(v27, 8 * v33, 3);
  *(_QWORD *)(a1 + 56) = v34;
  if ((_DWORD)v33)
    memmove(v34, a9, 8 * v33);
  v35 = (void *)sub_22E3CD3D4(v27, 8 * *(unsigned int *)(a1 + 24), 3);
  *(_QWORD *)(a1 + 64) = v35;
  v36 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v36)
    memmove(v35, a13, 8 * v36);
  return a1;
}

uint64_t sub_22F3F1E5C(uint64_t a1, uint64_t a2, int a3, int a4, char a5, char a6, const void *a7, unint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t *a13, unint64_t a14, const void *a15, size_t a16, uint64_t a17, uint64_t a18, int a19)
{
  unint64_t v19;
  int v23;
  uint64_t v25;
  size_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  const void *v34;
  char v35;

  v19 = a8;
  v23 = a3;
  v25 = a17;
  v26 = a16;
  v27 = a13;
  v28 = a11;
  v29 = a10;
  *(_BYTE *)a1 = 2;
  if (byte_255E04EB3)
  {
    v34 = a7;
    v30 = a2;
    v35 = a6;
    v31 = sub_22F0D3748(2);
    v23 = a3;
    a7 = v34;
    a6 = v35;
    v28 = a11;
    v27 = a13;
    v19 = a8;
    v25 = a17;
    v26 = a16;
    a2 = v30;
    ++*((_DWORD *)v31 + 2);
    v29 = a10;
  }
  *(_DWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 13) = a6;
  *(_DWORD *)(a1 + 16) = a9;
  *(_DWORD *)(a1 + 20) = v29;
  *(_DWORD *)(a1 + 24) = a18;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = a19;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_22F3F1F7C(a1, a2, a15, v26, a7, v19, v28, a12, v27, a14, v25, a18);
  return a1;
}

void sub_22F3F1F7C(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  size_t v34;
  const void *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  size_t v42;
  const void *v43;
  void *v44;

  if (a4)
  {
    v20 = (void *)sub_22E3CD3D4(a2 + 2032, a4, 0);
    memmove(v20, a3, a4);
  }
  else
  {
    v20 = 0;
  }
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = a4;
  v21 = 8 * a10;
  if (a10 >> 61)
    v22 = -1;
  else
    v22 = 8 * a10;
  v23 = a2 + 2032;
  v24 = (_QWORD *)sub_22E3CD3D4(v23, v22, 3);
  *(_QWORD *)(a1 + 32) = v24;
  if (a10)
  {
    do
    {
      v26 = *a9++;
      *v24++ = v26;
      v21 -= 8;
    }
    while (v21);
  }
  if (is_mul_ok(a6, 0x18uLL))
    v27 = 24 * a6;
  else
    v27 = -1;
  v28 = (void *)sub_22E3CD3D4(v23, v27, 3);
  *(_QWORD *)(a1 + 72) = v28;
  if (a6)
    memmove(v28, a5, 24 * a6);
  if (a10 >> 60)
    v29 = -1;
  else
    v29 = 16 * a10;
  v30 = (_QWORD *)sub_22E3CD3D4(v23, v29, 3);
  v31 = v30;
  if (a10)
    bzero(v30, 16 * a10);
  *(_QWORD *)(a1 + 80) = v31;
  if (a8)
  {
    v32 = 16 * a8;
    v33 = (uint64_t *)(a7 + 8);
    do
    {
      v34 = *v33;
      if (*v33)
      {
        v35 = (const void *)*(v33 - 1);
        v36 = (void *)sub_22E3CD3D4(v23, *v33, 0);
        memmove(v36, v35, v34);
      }
      else
      {
        v36 = 0;
      }
      *v31 = v36;
      v31[1] = v34;
      v31 += 2;
      v33 += 2;
      v32 -= 16;
    }
    while (v32);
  }
  v37 = *(unsigned int *)(a1 + 24);
  v38 = (_QWORD *)sub_22E3CD3D4(v23, 16 * v37, 3);
  v39 = v38;
  if ((_DWORD)v37)
    bzero(v38, 16 * v37);
  *(_QWORD *)(a1 + 88) = v39;
  if (a12)
  {
    v40 = 16 * a12;
    v41 = (uint64_t *)(a11 + 8);
    do
    {
      v42 = *v41;
      if (*v41)
      {
        v43 = (const void *)*(v41 - 1);
        v44 = (void *)sub_22E3CD3D4(v23, *v41, 0);
        memmove(v44, v43, v42);
      }
      else
      {
        v44 = 0;
      }
      *v39 = v44;
      v39[1] = v42;
      v39 += 2;
      v41 += 2;
      v40 -= 16;
    }
    while (v40);
  }
}

uint64_t sub_22F3F2190(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v3 = (unsigned __int16 *)result;
  if (a3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v7 = v6;
    v8 = HIDWORD(v6);
    result = sub_22E3CD3D4(a2 + 2032, 24, 3);
    v9 = result;
    *(_BYTE *)result = 12;
    if (byte_255E04EB3)
    {
      result = (uint64_t)sub_22F0D3748(12);
      ++*(_DWORD *)(result + 8);
    }
    *(_QWORD *)(v9 + 8) = a3;
    *(_DWORD *)(v9 + 16) = v7;
    *(_DWORD *)(v9 + 20) = v8;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)&v3[4 * (((unint64_t)*v3 >> 13) & 1) + 8] = v9;
  return result;
}

uint64_t sub_22F3F223C(uint64_t result, int a2, int a3, int a4)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  *(_BYTE *)result = 16;
  if (byte_255E04EB3)
  {
    v12 = result;
    v11 = a4;
    v9 = a3;
    v10 = a2;
    v7 = sub_22F0D3748(16);
    a3 = v9;
    a2 = v10;
    a4 = v11;
    v8 = v7;
    result = v12;
    ++*((_DWORD *)v8 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  if (a2)
    v4 = 2048;
  else
    v4 = 0;
  if (a3)
    v5 = 4096;
  else
    v5 = 0;
  if (a4)
    v6 = 0x2000;
  else
    v6 = 0;
  *(_WORD *)result = v5 | v4 | v6 | *(_WORD *)result & 0xC7FF;
  return result;
}

uint64_t sub_22F3F22DC(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 2;
  if (a2)
    v7 = 3;
  v8 = v7 + a3 + a4;
  v9 = 16;
  if (a2)
    v9 = 20;
  v10 = sub_22E3CD3D4(a1 + 2032, v9 + 8 * v8, 3);
  return sub_22F3F223C(v10, a2, a3, a4);
}

uint64_t sub_22F3F2344(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int16 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *a1;
  if ((v2 & 0x700) != 0x100)
    return 0;
  v4 = a1 + 8;
  v5 = *(unsigned __int8 **)&a1[4 * ((v2 >> 13) & 1) + 8 + 4 * ((v2 >> 12) & 1)];
  if ((v5[2] & 1) != 0)
    return 0;
  sub_22F007D7C(v5, a2, 0, (uint64_t)&v11);
  v6 = v12;
  if (v12 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v11) != v6)
      goto LABEL_5;
  }
  else if (v11)
  {
LABEL_5:
    v7 = ((*a1 >> 12) & 1) + ((*a1 >> 13) & 1) + 1;
    goto LABEL_6;
  }
  v10 = *a1;
  if ((v10 & 0x800) == 0)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = ((v10 >> 13) & 1) + ((v10 >> 12) & 1) + 2;
LABEL_6:
  v8 = *(_QWORD *)&v4[4 * v7];
LABEL_7:
  if (v6 >= 0x41 && v11)
    MEMORY[0x2348A0E84](v11, 0x1000C8000313F17);
  return v8;
}

uint64_t sub_22F3F2440(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v3 = (unsigned __int16 *)result;
  if (a3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v7 = v6;
    v8 = HIDWORD(v6);
    result = sub_22E3CD3D4(a2 + 2032, 24, 3);
    v9 = result;
    *(_BYTE *)result = 12;
    if (byte_255E04EB3)
    {
      result = (uint64_t)sub_22F0D3748(12);
      ++*(_DWORD *)(result + 8);
    }
    *(_QWORD *)(v9 + 8) = a3;
    *(_DWORD *)(v9 + 16) = v7;
    *(_DWORD *)(v9 + 20) = v8;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)&v3[4 * (((unint64_t)*v3 >> 8) & 1) + 12] = v9;
  return result;
}

uint64_t sub_22F3F24EC(uint64_t a1, int a2, int a3)
{
  char *v6;
  __int16 v7;
  __int16 v8;

  *(_BYTE *)a1 = 100;
  if (byte_255E04EB3)
  {
    v6 = sub_22F0D3748(100);
    ++*((_DWORD *)v6 + 2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
    v7 = 256;
  else
    v7 = 0;
  if (a3)
    v8 = 512;
  else
    v8 = 0;
  *(_WORD *)a1 = v8 | v7 | *(_WORD *)a1 & 0xF8FF;
  return a1;
}

uint64_t sub_22F3F2574(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = 2;
  if (a2)
    v5 = 3;
  v6 = sub_22E3CD3D4(a1 + 2032, 8 * (v5 + a3) + 24, 3);
  return sub_22F3F24EC(v6, a2, a3);
}

uint64_t sub_22F3F25C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)result = -20;
  if (byte_255E04EB3)
  {
    v18 = a8;
    v20 = result;
    v14 = a7;
    v16 = a6;
    v10 = a5;
    v11 = a3;
    v12 = a4;
    v13 = a2;
    v8 = sub_22F0D3748(236);
    a4 = v12;
    a2 = v13;
    a5 = v10;
    a3 = v11;
    a6 = v16;
    a8 = v18;
    a7 = v14;
    v9 = v8;
    result = v20;
    ++*((_DWORD *)v9 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)result = *(_WORD *)result & 0xFEFF | ((a3 != 0) << 8);
  *(_QWORD *)(result + 16 + 8 * (a3 != 0)) = a4;
  *(_QWORD *)(result + 16 + 8 * ((a3 != 0) + 1)) = a5;
  if (a3)
  {
    v19 = a8;
    v21 = result;
    v15 = a7;
    v17 = a6;
    sub_22F3F268C(result, a2, a3);
    a6 = v17;
    a8 = v19;
    result = v21;
    a7 = v15;
  }
  *(_DWORD *)(result + 4) = a6;
  *(_DWORD *)(result + 8) = a7;
  *(_DWORD *)(result + 12) = a8;
  return result;
}

uint64_t sub_22F3F268C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v3 = result;
  if (a3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v7 = v6;
    v8 = HIDWORD(v6);
    result = sub_22E3CD3D4(a2 + 2032, 24, 3);
    v9 = result;
    *(_BYTE *)result = 12;
    if (byte_255E04EB3)
    {
      result = (uint64_t)sub_22F0D3748(12);
      ++*(_DWORD *)(result + 8);
    }
    *(_QWORD *)(v9 + 8) = a3;
    *(_DWORD *)(v9 + 16) = v7;
    *(_DWORD *)(v9 + 20) = v8;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v3 + 16) = v9;
  return result;
}

uint64_t sub_22F3F272C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;

  if (a2)
    v14 = 40;
  else
    v14 = 32;
  v15 = sub_22E3CD3D4(a1 + 2032, v14, 3);
  return sub_22F3F25C0(v15, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_22F3F27B0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int16 v6;

  if (a2)
    v3 = 40;
  else
    v3 = 32;
  v4 = sub_22E3CD3D4(a1 + 2032, v3, 3);
  *(_BYTE *)v4 = -20;
  if (byte_255E04EB3)
  {
    v5 = sub_22F0D3748(236);
    ++*((_DWORD *)v5 + 2);
  }
  *(_QWORD *)(v4 + 8) = 0;
  if (a2)
    v6 = 256;
  else
    v6 = 0;
  *(_WORD *)v4 = *(_WORD *)v4 & 0xFEFF | v6;
  return v4;
}

uint64_t sub_22F3F2838(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int16 v6;

  if (a2)
    v3 = 52;
  else
    v3 = 40;
  v4 = sub_22E3CD3D4(a1 + 2032, v3, 3);
  *(_BYTE *)v4 = 98;
  if (byte_255E04EB3)
  {
    v5 = sub_22F0D3748(98);
    ++*((_DWORD *)v5 + 2);
  }
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  if (a2)
    v6 = 256;
  else
    v6 = 0;
  *(_WORD *)v4 = *(_WORD *)v4 & 0xFEFF | v6;
  return v4;
}

uint64_t sub_22F3F28C4(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;

  v9 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  *(_BYTE *)v9 = 97;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(97);
    ++*((_DWORD *)v10 + 2);
  }
  *(_BYTE *)(v9 + 8) = a2;
  *(_DWORD *)(v9 + 12) = a3;
  *(_QWORD *)(v9 + 16) = a4;
  *(_QWORD *)(v9 + 24) = a5;
  return v9;
}

uint64_t sub_22F3F2948(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;

  v7 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  *(_BYTE *)v7 = 94;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(94);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  return v7;
}

uint64_t sub_22F3F29BC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;

  v5 = sub_22E3CD3D4(a1 + 2032, 24, 3);
  *(_BYTE *)v5 = 95;
  if (byte_255E04EB3)
  {
    v6 = sub_22F0D3748(95);
    ++*((_DWORD *)v6 + 2);
  }
  *(_DWORD *)(v5 + 8) = a2;
  *(_QWORD *)(v5 + 16) = a3;
  return v5;
}

uint64_t sub_22F3F2A2C(_DWORD *a1)
{
  return (*a1 >> 1) & 3;
}

unint64_t sub_22F3F2A38(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F3F2A44(uint64_t a1)
{
  return a1 + (8 * *(_DWORD *)(a1 + 8) + 40);
}

uint64_t sub_22F3F2A58(uint64_t a1, uint64_t a2, unsigned int a3, void *__src, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = 7;
  if (byte_255E04EB3)
  {
    v16 = sub_22F0D3748(7);
    ++*((_DWORD *)v16 + 2);
  }
  *(_DWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a8 & 0xFFFFFFFFFFFFFFF9 | (2 * a3);
  *(_QWORD *)(a1 + 24) = a9;
  v17 = (_QWORD *)(a1 + 32);
  if ((_DWORD)a5)
  {
    v18 = a5;
    do
    {
      v19 = *a6++;
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
  *v17 = a2;
  if (a5)
    memmove((void *)(a1 + (8 * a5 + 40)), __src, 16 * a5 - 4);
  return a1;
}

uint64_t sub_22F3F2B28(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;

  v16 = sub_22E3CD3D4(a1 + 2032, (24 * a5 + 40), 3);
  return sub_22F3F2A58(v16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_22F3F2BB0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  char *v4;

  v3 = sub_22E3CD3D4(a1 + 2032, 24 * a2 + 40, 3);
  *(_BYTE *)v3 = 7;
  if (byte_255E04EB3)
  {
    v4 = sub_22F0D3748(7);
    ++*((_DWORD *)v4 + 2);
  }
  *(_DWORD *)(v3 + 8) = a2;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8 * a2 + 32) = 0;
  return v3;
}

unint64_t sub_22F3F2C24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F3F2C30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 7 | a2;
  return result;
}

uint64_t sub_22F3F2C44(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 16) >> 1) & 3;
}

uint64_t sub_22F3F2C50(uint64_t result, unsigned int a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFF9 | (2 * a2);
  return result;
}

unsigned __int8 *sub_22F3F2C68(unsigned __int8 *a1, unsigned int a2)
{
  char *v4;

  *a1 = 101;
  if (byte_255E04EB3)
  {
    v4 = sub_22F0D3748(101);
    ++*((_DWORD *)v4 + 2);
  }
  *(_QWORD *)a1 = *a1 | (a2 << 8);
  if (a2)
    bzero(a1 + 16, 8 * a2);
  return a1;
}

void sub_22F3F2CD0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F0D8684((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F3F2D3C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(_QWORD *)(v1 + 48);
  else
    return 0;
}

uint64_t sub_22F3F2D54(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t a5)
{
  size_t v9;
  uint64_t v10;

  v9 = 8 * a5;
  v10 = sub_22E3CD3D4(a1 + 2032, 8 * a5 + 24, 3);
  *(_BYTE *)v10 = 6;
  if (byte_255E04EB3)
    sub_22F3F189C(6);
  *(_DWORD *)(v10 + 8) = a2;
  *(_DWORD *)(v10 + 12) = a5;
  *(_QWORD *)(v10 + 16) = a3;
  if (a5)
    memmove((void *)(v10 + 24), a4, v9);
  return v10;
}

uint64_t sub_22F3F2DE4(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * (a2 + 1) + 16, 3);
  *(_BYTE *)v3 = 6;
  if (byte_255E04EB3)
    sub_22F3F189C(6);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 12) = a2;
  return v3;
}

unint64_t sub_22F3F2E44(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v1 && (*(_DWORD *)(v1 + 28) & 0x7Fu) - 60 < 7)
    return sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  else
    return sub_22EFBC5B4(0);
}

uint64_t sub_22F3F2E70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
}

uint64_t sub_22F3F2E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * *(_QWORD *)(a2 + 96) + 104, 3);
  return sub_22F3F2F28(v3, a2);
}

uint64_t sub_22F3F2EB4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  _OWORD v5[6];
  uint64_t v6;

  v3 = sub_22E3CD3D4(a1 + 2032, 8 * (a2 + 11) + 16, 3);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  *(_DWORD *)(sub_22F3F2F28(v3, (uint64_t)v5) + 8) = a2;
  if (a2)
    bzero((void *)(v3 + 104), 8 * a2);
  return v3;
}

uint64_t sub_22F3F2F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 11;
  if (byte_255E04EB3)
    sub_22F3F189C(11);
  v4 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 80);
  if (v4)
    memmove((void *)(a1 + 104), *(const void **)(a2 + 88), 8 * v4);
  return a1;
}

uint64_t sub_22F3F2FE0(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t **v3;

  v2 = *(uint64_t **)result;
  if (!a2)
    goto LABEL_3;
  while (1)
  {
    *(_QWORD *)result = ++v2;
LABEL_3:
    if (v2 == *(uint64_t **)(result + 16))
      break;
    v3 = (uint64_t **)result;
    result = sub_22F0D8840(result, *v2);
    if ((result & 1) != 0)
      return result;
    result = (uint64_t)v3;
    v2 = *v3;
  }
  *(_QWORD *)(result + 8) = 0;
  return result;
}

unint64_t sub_22F3F3034(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL) != 0)
    return (*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL) + 40;
  else
    return sub_22F3AC1A8(**(_QWORD **)a1);
}

uint64_t sub_22F3F3054(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  *(_BYTE *)a1 = 90;
  if (byte_255E04EB3)
    sub_22F3F189C(90);
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 8) = a2;
  v12 = (*(unsigned __int8 *)(a1 + 14) << 16) & 0xFE0000;
  *(_WORD *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 14) = (v12 | ((a6 != 0) << 16)) >> 16;
  if (a5)
  {
    v13 = a5;
    v14 = (_QWORD *)(a1 + 24);
    do
    {
      v15 = *a4++;
      *v14++ = v15;
      --v13;
    }
    while (v13);
  }
  if (a6)
    *(_QWORD *)(a1 + 16 + 8 * (a5 + 1)) = a6;
  return a1;
}

uint64_t sub_22F3F3110(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  unsigned int v11;
  uint64_t v12;

  if (a6)
    v11 = a5 + 1;
  else
    v11 = a5;
  v12 = sub_22E3CD3D4(a1 + 2032, 8 * (v11 + 1) + 16, 3);
  return sub_22F3F3054(v12, a2, a3, a4, a5, a6);
}

uint64_t sub_22F3F3180(uint64_t a1, int a2, int a3)
{
  __int16 v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = a2;
  v5 = sub_22E3CD3D4(a1 + 2032, 8 * (a2 + a3 + 1) + 16, 3);
  *(_BYTE *)v5 = 90;
  if (byte_255E04EB3)
    sub_22F3F189C(90);
  *(_DWORD *)(v5 + 8) = 0;
  v6 = *(unsigned __int8 *)(v5 + 14) >> 1;
  if (a3)
    v7 = 0x10000;
  else
    v7 = 0;
  *(_WORD *)(v5 + 12) = v4;
  *(_BYTE *)(v5 + 14) = (v7 & 0xFF01FFFF | ((v6 & 0x7F) << 17)) >> 16;
  return v5;
}

void sub_22F3F3214(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if (((*(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16)) & 0x10000) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8 * (*(unsigned __int16 *)(a1 + 12) + 1) + 16);
    goto LABEL_5;
  }
  v1 = (uint64_t *)(a1 + 16);
  if (*(_WORD *)(a1 + 12))
  {
    v2 = v1[*(unsigned __int16 *)(a1 + 12)];
LABEL_5:
    v1 = (uint64_t *)(v2 + 16);
  }
  sub_22F0D60E4(*v1);
}

unint64_t sub_22F3F3254(unsigned int a1, int a2, int a3)
{
  return 8 * ((a2 + a3) + (unint64_t)a1) + 16;
}

char *sub_22F3F3268(char *result, const void *a2, uint64_t a3)
{
  if (a3)
    return (char *)memmove(result + 16, a2, 8 * a3);
  return result;
}

uint64_t sub_22F3F327C(unsigned int *a1)
{
  return (uint64_t)&a1[2 * *a1 + 4];
}

uint64_t sub_22F3F328C(uint64_t result, int a2, char a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a4;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

uint64_t sub_22F3F3298(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v7;

  v7 = a3;
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a5;
  *(_BYTE *)(a1 + 8) = a4 != 0;
  if (a3)
    memmove((void *)(a1 + 16), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(a1 + 8 * v7 + 8 * a5 + 16) = a4;
  return a1;
}

uint64_t sub_22F3F32FC(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 64;
  if (byte_255E04EB3)
    sub_22F3F189C(64);
  *(_QWORD *)(v7 + 8) = 38;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F3398(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 66;
  if (byte_255E04EB3)
    sub_22F3F189C(66);
  *(_DWORD *)(v16 + 8) = 40;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F3488(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 66;
  if (byte_255E04EB3)
    sub_22F3F189C(66);
  *(_QWORD *)(v7 + 8) = 40;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F3528(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(54);
  v15 = sub_22F3F3834(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3F3834(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 44;
  if (byte_255E04EB3)
    sub_22F3F189C(44);
  *(_DWORD *)(v18 + 8) = 54;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F392C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(54);
  return sub_22F3F3984(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F3984(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 44;
  if (byte_255E04EB3)
    sub_22F3F189C(44);
  *(_QWORD *)(v9 + 8) = 54;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F3A2C(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v61;
  int v62;
  int v63;

  v62 = a3;
  v63 = a2;
  v61 = a4;
  v16 = sub_22F293A28(33);
  v17 = sub_22F3F3E14(a1, a5, a6, a7, v16 + 8 * a4 + 1, &v63, &v62, &v61);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v18 = *(const void **)(a8 + 152);
  v19 = *(unsigned int *)(a8 + 160);
  v20 = *(unsigned int **)(v17 + 24);
  v21 = *v20;
  v22 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v19)
    memmove(&v20[2 * v21 + 4 + 2 * v22], v18, 8 * v19);
  v23 = *(const void **)(a8 + 200);
  v24 = *(unsigned int *)(a8 + 208);
  v25 = *(unsigned int **)(v17 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v24)
    memmove(&v25[2 * v26 + 4 + 2 * (*(_DWORD *)(v17 + 32) + v27)], v23, 8 * v24);
  v28 = *(const void **)(a8 + 248);
  v29 = *(unsigned int *)(a8 + 256);
  v30 = *(unsigned int **)(v17 + 24);
  v31 = *v30;
  v32 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v29)
    memmove(&v30[2 * v31 + 4 + 2 * (v32 + 2 * *(_DWORD *)(v17 + 32))], v28, 8 * v29);
  v33 = *(const void **)(a8 + 296);
  v34 = *(unsigned int *)(a8 + 304);
  v35 = *(unsigned int **)(v17 + 24);
  v36 = *v35;
  v37 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v34)
    memmove(&v35[2 * v36 + 4 + 2 * (3 * *(_DWORD *)(v17 + 32) + v37)], v33, 8 * v34);
  v38 = *(const void **)(a8 + 344);
  v39 = *(unsigned int *)(a8 + 352);
  v40 = *(unsigned int **)(v17 + 24);
  v41 = *v40;
  v42 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v39)
    memmove(&v40[2 * v41 + 4 + 2 * (v42 + 4 * *(_DWORD *)(v17 + 32))], v38, 8 * v39);
  v43 = *(const void **)(a8 + 392);
  v44 = *(unsigned int *)(a8 + 400);
  v45 = *(unsigned int **)(v17 + 24);
  v46 = *v45;
  v47 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v44)
    memmove(&v45[2 * v46 + 4 + 2 * (5 * *(_DWORD *)(v17 + 32) + v47)], v43, 8 * v44);
  v48 = *(const void **)(a8 + 440);
  v49 = *(unsigned int *)(a8 + 448);
  v50 = *(unsigned int **)(v17 + 24);
  v51 = *v50;
  v52 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v49)
    memmove(&v50[2 * v51 + 4 + 2 * (v52 + 6 * *(_DWORD *)(v17 + 32))], v48, 8 * v49);
  v53 = *(const void **)(a8 + 488);
  v54 = *(unsigned int *)(a8 + 496);
  v55 = *(unsigned int **)(v17 + 24);
  v56 = *v55;
  v57 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v54)
    memmove(&v55[2 * v56 + 4 + 2 * (v57 - *(_DWORD *)(v17 + 32) + 8 * *(_DWORD *)(v17 + 32))], v53, 8 * v54);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 72) = *(_QWORD *)(a8 + 536);
  v58 = *(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24);
  v59 = *(_DWORD *)(v17 + 32);
  *(_QWORD *)(v58 + 8 * (sub_22F293A28(33) + 8 * v59) + 16) = a9;
  *(_BYTE *)(v17 + 36) = a10;
  return v17;
}

uint64_t sub_22F3F3E14(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 34;
  if (byte_255E04EB3)
    sub_22F3F189C(34);
  *(_DWORD *)(v18 + 8) = 33;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F3F10(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(33);
  return sub_22F3F3F6C(a1, a2, 1, v6 + 8 * a3 + 1, &v8);
}

uint64_t sub_22F3F3F6C(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 34;
  if (byte_255E04EB3)
    sub_22F3F189C(34);
  *(_QWORD *)(v9 + 8) = 33;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F4018(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;

  v12 = a3;
  v13 = a2;
  v11 = a6;
  result = sub_22F3F408C(a1, a4, a5, a7, 2u, &v13, &v12, &v11);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 24) = a8;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 16) = a9;
  return result;
}

uint64_t sub_22F3F408C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 60;
  if (byte_255E04EB3)
    sub_22F3F189C(60);
  *(_DWORD *)(v18 + 8) = 88;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_DWORD *)(v18 + 36) = 3 * v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F4188(uint64_t a1, unsigned int a2, int a3)
{
  int v4;
  int v5;
  int v6;

  v6 = a3;
  v4 = 0;
  v5 = 0;
  return sub_22F3F41C0(a1, a2, 1, 2, &v5, &v4, &v6);
}

uint64_t sub_22F3F41C0(uint64_t a1, unsigned int a2, int a3, int a4, int *a5, int *a6, int *a7)
{
  char v11;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  v11 = a3;
  v13 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v13 + 40) = a2;
  *(_DWORD *)(v13 + 44) = a4;
  *(_BYTE *)(v13 + 48) = v11;
  v14 = *a5;
  v15 = *a6;
  v16 = *a7;
  *(_BYTE *)v13 = 60;
  if (byte_255E04EB3)
    sub_22F3F189C(60);
  *(_DWORD *)(v13 + 8) = 88;
  *(_DWORD *)(v13 + 12) = v14;
  *(_DWORD *)(v13 + 16) = v15;
  *(_DWORD *)(v13 + 32) = v16;
  *(_DWORD *)(v13 + 36) = 3 * v16;
  *(_QWORD *)(v13 + 24) = v13 + 40;
  return v13;
}

uint64_t sub_22F3F4280(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  int v12;
  int v13;

  v12 = a3;
  v13 = a2;
  result = sub_22F3F42FC(a1, a4, a5, a6, 2u, &v13, &v12);
  *(_DWORD *)(result + 36) = a7;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 24) = a8;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 16) = a9;
  return result;
}

uint64_t sub_22F3F42FC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 61;
  if (byte_255E04EB3)
    sub_22F3F189C(61);
  *(_DWORD *)(v16 + 8) = 90;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F43F4(uint64_t a1, unsigned int a2, int a3, int a4, int *a5, int *a6)
{
  char v9;
  uint64_t v11;
  int v12;
  int v13;

  v9 = a3;
  v11 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v11 + 40) = a2;
  *(_DWORD *)(v11 + 44) = a4;
  *(_BYTE *)(v11 + 48) = v9;
  v12 = *a5;
  v13 = *a6;
  *(_BYTE *)v11 = 61;
  if (byte_255E04EB3)
    sub_22F3F189C(61);
  *(_DWORD *)(v11 + 8) = 90;
  *(_DWORD *)(v11 + 12) = v12;
  *(_DWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 32) = 1;
  *(_QWORD *)(v11 + 24) = v11 + 40;
  return v11;
}

uint64_t sub_22F3F44B0(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(34);
  v15 = sub_22F3F485C(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3F485C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 35;
  if (byte_255E04EB3)
    sub_22F3F189C(35);
  *(_DWORD *)(v18 + 8) = 34;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F4954(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(34);
  return sub_22F3F49AC(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F49AC(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 35;
  if (byte_255E04EB3)
    sub_22F3F189C(35);
  *(_QWORD *)(v9 + 8) = 34;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F4A54(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 71;
  if (byte_255E04EB3)
    sub_22F3F189C(71);
  *(_DWORD *)(v16 + 8) = 53;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F4B44(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 71;
  if (byte_255E04EB3)
    sub_22F3F189C(71);
  *(_QWORD *)(v7 + 8) = 53;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F4BE4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 70;
  if (byte_255E04EB3)
    sub_22F3F189C(70);
  *(_DWORD *)(v16 + 8) = 52;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F4CD4(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 70;
  if (byte_255E04EB3)
    sub_22F3F189C(70);
  *(_QWORD *)(v7 + 8) = 52;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F4D74(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v8;

  v8 = a2;
  v7 = a3;
  return sub_22F3F4DB4(a1, a4, a5, a6, &v8, &v7);
}

uint64_t sub_22F3F4DB4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int *a5, int *a6)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v11 = a4 != 0;
  v12 = a3;
  if (a4)
    v13 = a3 + 1;
  else
    v13 = a3;
  v14 = sub_22E3CD3D4(a1 + 2032, 8 * v13 + 48, 3);
  v15 = v14;
  *(_DWORD *)(v14 + 32) = a3;
  v16 = v14 + 32;
  *(_DWORD *)(v14 + 36) = 0;
  *(_BYTE *)(v14 + 40) = v11;
  if (a3)
    memmove((void *)(v14 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v15 + 8 * v12 + 48) = a4;
  v17 = *a5;
  v18 = *a6;
  *(_BYTE *)v15 = 72;
  if (byte_255E04EB3)
    sub_22F3F189C(72);
  *(_DWORD *)(v15 + 8) = 55;
  *(_DWORD *)(v15 + 12) = v17;
  *(_DWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v16;
  return v15;
}

uint64_t sub_22F3F4E94(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 72;
  if (byte_255E04EB3)
    sub_22F3F189C(72);
  *(_QWORD *)(v7 + 8) = 55;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F4F30(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 63;
  if (byte_255E04EB3)
    sub_22F3F189C(63);
  *(_DWORD *)(v16 + 8) = 35;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F501C(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 63;
  if (byte_255E04EB3)
    sub_22F3F189C(63);
  *(_QWORD *)(v7 + 8) = 35;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F50B8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, __int128 *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 72, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 56) = a3;
  v19 = v17 + 56;
  *(_DWORD *)(v17 + 60) = a5;
  *(_BYTE *)(v17 + 64) = v15;
  if (a3)
    memmove((void *)(v17 + 72), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 72) = a4;
  v20 = *a7;
  v21 = *a8;
  *(_BYTE *)v18 = 25;
  if (byte_255E04EB3)
    sub_22F3F189C(25);
  *(_DWORD *)(v18 + 8) = 9;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_QWORD *)(v18 + 24) = 0;
  v22 = *a6;
  *(_QWORD *)(v18 + 48) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F51BC(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 72, 3);
  *(_DWORD *)(v7 + 56) = a2;
  *(_DWORD *)(v7 + 60) = a4;
  *(_BYTE *)(v7 + 64) = v5;
  *(_BYTE *)v7 = 25;
  if (byte_255E04EB3)
    sub_22F3F189C(25);
  *(_QWORD *)(v7 + 8) = 9;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 56;
  *(_QWORD *)(v7 + 32) = 0;
  return v7;
}

uint64_t sub_22F3F5260(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v61;
  int v62;
  int v63;

  v62 = a3;
  v63 = a2;
  v61 = a4;
  v16 = sub_22F293A28(43);
  v17 = sub_22F3F5648(a1, a5, a6, a7, v16 + 8 * a4 + 1, &v63, &v62, &v61);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v18 = *(const void **)(a8 + 152);
  v19 = *(unsigned int *)(a8 + 160);
  v20 = *(unsigned int **)(v17 + 24);
  v21 = *v20;
  v22 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v19)
    memmove(&v20[2 * v21 + 4 + 2 * v22], v18, 8 * v19);
  v23 = *(const void **)(a8 + 200);
  v24 = *(unsigned int *)(a8 + 208);
  v25 = *(unsigned int **)(v17 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v24)
    memmove(&v25[2 * v26 + 4 + 2 * (*(_DWORD *)(v17 + 32) + v27)], v23, 8 * v24);
  v28 = *(const void **)(a8 + 248);
  v29 = *(unsigned int *)(a8 + 256);
  v30 = *(unsigned int **)(v17 + 24);
  v31 = *v30;
  v32 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v29)
    memmove(&v30[2 * v31 + 4 + 2 * (v32 + 2 * *(_DWORD *)(v17 + 32))], v28, 8 * v29);
  v33 = *(const void **)(a8 + 296);
  v34 = *(unsigned int *)(a8 + 304);
  v35 = *(unsigned int **)(v17 + 24);
  v36 = *v35;
  v37 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v34)
    memmove(&v35[2 * v36 + 4 + 2 * (3 * *(_DWORD *)(v17 + 32) + v37)], v33, 8 * v34);
  v38 = *(const void **)(a8 + 344);
  v39 = *(unsigned int *)(a8 + 352);
  v40 = *(unsigned int **)(v17 + 24);
  v41 = *v40;
  v42 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v39)
    memmove(&v40[2 * v41 + 4 + 2 * (v42 + 4 * *(_DWORD *)(v17 + 32))], v38, 8 * v39);
  v43 = *(const void **)(a8 + 392);
  v44 = *(unsigned int *)(a8 + 400);
  v45 = *(unsigned int **)(v17 + 24);
  v46 = *v45;
  v47 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v44)
    memmove(&v45[2 * v46 + 4 + 2 * (5 * *(_DWORD *)(v17 + 32) + v47)], v43, 8 * v44);
  v48 = *(const void **)(a8 + 440);
  v49 = *(unsigned int *)(a8 + 448);
  v50 = *(unsigned int **)(v17 + 24);
  v51 = *v50;
  v52 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v49)
    memmove(&v50[2 * v51 + 4 + 2 * (v52 + 6 * *(_DWORD *)(v17 + 32))], v48, 8 * v49);
  v53 = *(const void **)(a8 + 488);
  v54 = *(unsigned int *)(a8 + 496);
  v55 = *(unsigned int **)(v17 + 24);
  v56 = *v55;
  v57 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v54)
    memmove(&v55[2 * v56 + 4 + 2 * (v57 - *(_DWORD *)(v17 + 32) + 8 * *(_DWORD *)(v17 + 32))], v53, 8 * v54);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 72) = *(_QWORD *)(a8 + 536);
  v58 = *(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24);
  v59 = *(_DWORD *)(v17 + 32);
  *(_QWORD *)(v58 + 8 * (sub_22F293A28(43) + 8 * v59) + 16) = a9;
  *(_BYTE *)(v17 + 36) = a10;
  return v17;
}

uint64_t sub_22F3F5648(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 39;
  if (byte_255E04EB3)
    sub_22F3F189C(39);
  *(_DWORD *)(v18 + 8) = 43;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F5744(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(43);
  return sub_22F3F57A0(a1, a2, 1, v6 + 8 * a3 + 1, &v8);
}

uint64_t sub_22F3F57A0(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 39;
  if (byte_255E04EB3)
    sub_22F3F189C(39);
  *(_QWORD *)(v9 + 8) = 43;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F584C(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(44);
  v15 = sub_22F3F5BF8(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3F5BF8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 40;
  if (byte_255E04EB3)
    sub_22F3F189C(40);
  *(_DWORD *)(v18 + 8) = 44;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F5CF0(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(44);
  return sub_22F3F5D48(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F5D48(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 40;
  if (byte_255E04EB3)
    sub_22F3F189C(40);
  *(_QWORD *)(v9 + 8) = 44;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F5DF0(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  result = sub_22F3F5E48(a1, a4, a5, a6, &v10, &v9);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 16) = a7;
  return result;
}

uint64_t sub_22F3F5E48(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int *a5, int *a6)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = a4 != 0;
  if (a4)
    v12 = 2;
  else
    v12 = 1;
  v13 = sub_22E3CD3D4(a1 + 2032, 8 * (v12 + a3) + 48, 3);
  v14 = v13;
  *(_DWORD *)(v13 + 32) = a3;
  v15 = v13 + 32;
  *(_DWORD *)(v13 + 36) = 1;
  *(_BYTE *)(v13 + 40) = v11;
  if (a3)
    memmove((void *)(v13 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v14 + 8 * a3 + 56) = a4;
  v16 = *a5;
  v17 = *a6;
  *(_BYTE *)v14 = 67;
  if (byte_255E04EB3)
    sub_22F3F189C(67);
  *(_DWORD *)(v14 + 8) = 45;
  *(_DWORD *)(v14 + 12) = v16;
  *(_DWORD *)(v14 + 16) = v17;
  *(_QWORD *)(v14 + 24) = v15;
  return v14;
}

uint64_t sub_22F3F5F30(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 67;
  if (byte_255E04EB3)
    sub_22F3F189C(67);
  *(_QWORD *)(v7 + 8) = 45;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F5FCC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 68;
  if (byte_255E04EB3)
    sub_22F3F189C(68);
  *(_DWORD *)(v16 + 8) = 48;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F60BC(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 68;
  if (byte_255E04EB3)
    sub_22F3F189C(68);
  *(_QWORD *)(v7 + 8) = 48;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F615C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 81;
  if (byte_255E04EB3)
    sub_22F3F189C(81);
  *(_DWORD *)(v16 + 8) = 74;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F624C(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 81;
  if (byte_255E04EB3)
    sub_22F3F189C(81);
  *(_QWORD *)(v7 + 8) = 74;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F62EC(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  v5 = sub_22F0D3724(32, a1, 8u);
  *(_BYTE *)v5 = 84;
  if (byte_255E04EB3)
    sub_22F3F189C(84);
  *(_DWORD *)(v5 + 8) = 79;
  *(_DWORD *)(v5 + 12) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = 0;
  return v5;
}

uint64_t sub_22F3F635C(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_22F0D3724(32, a1, 8u);
  *(_BYTE *)v1 = 84;
  if (byte_255E04EB3)
    sub_22F3F189C(84);
  *(_QWORD *)(v1 + 8) = 79;
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  return v1;
}

uint64_t sub_22F3F63C0(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  v5 = sub_22F0D3724(32, a1, 8u);
  *(_BYTE *)v5 = 22;
  if (byte_255E04EB3)
    sub_22F3F189C(22);
  *(_DWORD *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 12) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = 0;
  return v5;
}

uint64_t sub_22F3F6430(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_22F0D3724(32, a1, 8u);
  *(_BYTE *)v1 = 22;
  if (byte_255E04EB3)
    sub_22F3F189C(22);
  *(_QWORD *)(v1 + 8) = 3;
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  return v1;
}

uint64_t sub_22F3F6494(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 83;
  if (byte_255E04EB3)
    sub_22F3F189C(83);
  *(_DWORD *)(v16 + 8) = 78;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F6580(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 83;
  if (byte_255E04EB3)
    sub_22F3F189C(83);
  *(_QWORD *)(v7 + 8) = 78;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F661C(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  result = sub_22F3F6674(a1, a4, a5, a6, &v10, &v9);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 16) = a7;
  return result;
}

uint64_t sub_22F3F6674(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int *a5, int *a6)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = a4 != 0;
  if (a4)
    v12 = 2;
  else
    v12 = 1;
  v13 = sub_22E3CD3D4(a1 + 2032, 8 * (v12 + a3) + 48, 3);
  v14 = v13;
  *(_DWORD *)(v13 + 32) = a3;
  v15 = v13 + 32;
  *(_DWORD *)(v13 + 36) = 1;
  *(_BYTE *)(v13 + 40) = v11;
  if (a3)
    memmove((void *)(v13 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v14 + 8 * a3 + 56) = a4;
  v16 = *a5;
  v17 = *a6;
  *(_BYTE *)v14 = 82;
  if (byte_255E04EB3)
    sub_22F3F189C(82);
  *(_DWORD *)(v14 + 8) = 75;
  *(_DWORD *)(v14 + 12) = v16;
  *(_DWORD *)(v14 + 16) = v17;
  *(_QWORD *)(v14 + 24) = v15;
  return v14;
}

uint64_t sub_22F3F675C(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 82;
  if (byte_255E04EB3)
    sub_22F3F189C(82);
  *(_QWORD *)(v7 + 8) = 75;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F67F8(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7;

  v7 = sub_22F0D3724(40, a1, 8u);
  *(_BYTE *)v7 = 24;
  if (byte_255E04EB3)
    sub_22F3F189C(24);
  *(_DWORD *)(v7 + 8) = 8;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 32) = a4;
  return v7;
}

uint64_t sub_22F3F6878(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_22F0D3724(40, a1, 8u);
  *(_BYTE *)v1 = 24;
  if (byte_255E04EB3)
    sub_22F3F189C(24);
  *(_QWORD *)(v1 + 8) = 8;
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 89;
  return v1;
}

uint64_t sub_22F3F68E4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 23;
  if (byte_255E04EB3)
    sub_22F3F189C(23);
  *(_DWORD *)(v16 + 8) = 7;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_DWORD *)(v16 + 32) = 89;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F69D8(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 23;
  if (byte_255E04EB3)
    sub_22F3F189C(23);
  *(_QWORD *)(v7 + 8) = 7;
  *(_DWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 32) = 89;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F6A7C(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5)
{
  int v6;
  int v7;

  v7 = a2;
  v6 = a3;
  return sub_22F3F6AB8(a1, a4, a5, &v7, &v6);
}

uint64_t sub_22F3F6AB8(uint64_t a1, const void *a2, uint64_t a3, int *a4, int *a5)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v9 = 8 * a3;
  v10 = sub_22E3CD3D4(a1 + 2032, ((8 * a3) & 0x7FFFFFFF8) + 48, 3);
  v11 = v10;
  *(_DWORD *)(v10 + 32) = a3;
  v12 = v10 + 32;
  *(_DWORD *)(v10 + 36) = 0;
  *(_BYTE *)(v10 + 40) = 0;
  if (a3)
    memmove((void *)(v10 + 48), a2, v9);
  v13 = *a4;
  v14 = *a5;
  *(_BYTE *)v11 = 28;
  if (byte_255E04EB3)
    sub_22F3F189C(28);
  *(_DWORD *)(v11 + 8) = 32;
  *(_DWORD *)(v11 + 12) = v13;
  *(_DWORD *)(v11 + 16) = v14;
  *(_QWORD *)(v11 + 24) = v12;
  return v11;
}

uint64_t sub_22F3F6B74(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 28;
  if (byte_255E04EB3)
    sub_22F3F189C(28);
  *(_QWORD *)(v7 + 8) = 32;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F6C10(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5)
{
  int v6;
  int v7;

  v7 = a2;
  v6 = a3;
  return sub_22F3F6C4C(a1, a4, a5, &v7, &v6);
}

uint64_t sub_22F3F6C4C(uint64_t a1, const void *a2, uint64_t a3, int *a4, int *a5)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v9 = 8 * a3;
  v10 = sub_22E3CD3D4(a1 + 2032, ((8 * a3) & 0x7FFFFFFF8) + 48, 3);
  v11 = v10;
  *(_DWORD *)(v10 + 32) = a3;
  v12 = v10 + 32;
  *(_DWORD *)(v10 + 36) = 0;
  *(_BYTE *)(v10 + 40) = 0;
  if (a3)
    memmove((void *)(v10 + 48), a2, v9);
  v13 = *a4;
  v14 = *a5;
  *(_BYTE *)v11 = 26;
  if (byte_255E04EB3)
    sub_22F3F189C(26);
  *(_DWORD *)(v11 + 8) = 15;
  *(_DWORD *)(v11 + 12) = v13;
  *(_DWORD *)(v11 + 16) = v14;
  *(_QWORD *)(v11 + 24) = v12;
  return v11;
}

uint64_t sub_22F3F6D08(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 26;
  if (byte_255E04EB3)
    sub_22F3F189C(26);
  *(_QWORD *)(v7 + 8) = 15;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F6DA4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 69;
  if (byte_255E04EB3)
    sub_22F3F189C(69);
  *(_DWORD *)(v16 + 8) = 51;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F6E90(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 69;
  if (byte_255E04EB3)
    sub_22F3F189C(69);
  *(_QWORD *)(v7 + 8) = 51;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F6F2C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 65;
  if (byte_255E04EB3)
    sub_22F3F189C(65);
  *(_DWORD *)(v16 + 8) = 39;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F7018(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 65;
  if (byte_255E04EB3)
    sub_22F3F189C(65);
  *(_QWORD *)(v7 + 8) = 39;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F70B4(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  char v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  result = sub_22F3F7198(a1, a4, a5, a6, 6u, &v11, &v10);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 16) = *(_QWORD *)a7;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 24) = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 32) = *(_QWORD *)(a7 + 16);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 40) = *(_QWORD *)(a7 + 24);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 48) = *(_QWORD *)(a7 + 32);
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * **(unsigned int **)(result + 24) + 56) = *(_QWORD *)(a7 + 40);
  v9 = *(_BYTE *)(result + 32) & 0xFE | *(_BYTE *)(a7 + 48);
  *(_BYTE *)(result + 32) = v9;
  *(_BYTE *)(result + 32) = v9 & 0xFD | (2 * *(_BYTE *)(a7 + 49));
  return result;
}

uint64_t sub_22F3F7198(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 21;
  if (byte_255E04EB3)
    sub_22F3F189C(21);
  *(_DWORD *)(v16 + 8) = 2;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F7284(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 21;
  if (byte_255E04EB3)
    sub_22F3F189C(21);
  *(_QWORD *)(v7 + 8) = 2;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F7320(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 74;
  if (byte_255E04EB3)
    sub_22F3F189C(74);
  *(_DWORD *)(v16 + 8) = 56;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F740C(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 74;
  if (byte_255E04EB3)
    sub_22F3F189C(74);
  *(_QWORD *)(v7 + 8) = 56;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F74A8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 77;
  if (byte_255E04EB3)
    sub_22F3F189C(77);
  *(_DWORD *)(v16 + 8) = 60;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F7598(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 77;
  if (byte_255E04EB3)
    sub_22F3F189C(77);
  *(_QWORD *)(v7 + 8) = 60;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F3F7638(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v61;
  int v62;
  int v63;

  v62 = a3;
  v63 = a2;
  v61 = a4;
  v16 = sub_22F293A28(63);
  v17 = sub_22F3F7A20(a1, a5, a6, a7, v16 + 8 * a4 + 1, &v63, &v62, &v61);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v18 = *(const void **)(a8 + 152);
  v19 = *(unsigned int *)(a8 + 160);
  v20 = *(unsigned int **)(v17 + 24);
  v21 = *v20;
  v22 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v19)
    memmove(&v20[2 * v21 + 4 + 2 * v22], v18, 8 * v19);
  v23 = *(const void **)(a8 + 200);
  v24 = *(unsigned int *)(a8 + 208);
  v25 = *(unsigned int **)(v17 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v24)
    memmove(&v25[2 * v26 + 4 + 2 * (*(_DWORD *)(v17 + 32) + v27)], v23, 8 * v24);
  v28 = *(const void **)(a8 + 248);
  v29 = *(unsigned int *)(a8 + 256);
  v30 = *(unsigned int **)(v17 + 24);
  v31 = *v30;
  v32 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v29)
    memmove(&v30[2 * v31 + 4 + 2 * (v32 + 2 * *(_DWORD *)(v17 + 32))], v28, 8 * v29);
  v33 = *(const void **)(a8 + 296);
  v34 = *(unsigned int *)(a8 + 304);
  v35 = *(unsigned int **)(v17 + 24);
  v36 = *v35;
  v37 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v34)
    memmove(&v35[2 * v36 + 4 + 2 * (3 * *(_DWORD *)(v17 + 32) + v37)], v33, 8 * v34);
  v38 = *(const void **)(a8 + 344);
  v39 = *(unsigned int *)(a8 + 352);
  v40 = *(unsigned int **)(v17 + 24);
  v41 = *v40;
  v42 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v39)
    memmove(&v40[2 * v41 + 4 + 2 * (v42 + 4 * *(_DWORD *)(v17 + 32))], v38, 8 * v39);
  v43 = *(const void **)(a8 + 392);
  v44 = *(unsigned int *)(a8 + 400);
  v45 = *(unsigned int **)(v17 + 24);
  v46 = *v45;
  v47 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v44)
    memmove(&v45[2 * v46 + 4 + 2 * (5 * *(_DWORD *)(v17 + 32) + v47)], v43, 8 * v44);
  v48 = *(const void **)(a8 + 440);
  v49 = *(unsigned int *)(a8 + 448);
  v50 = *(unsigned int **)(v17 + 24);
  v51 = *v50;
  v52 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v49)
    memmove(&v50[2 * v51 + 4 + 2 * (v52 + 6 * *(_DWORD *)(v17 + 32))], v48, 8 * v49);
  v53 = *(const void **)(a8 + 488);
  v54 = *(unsigned int *)(a8 + 496);
  v55 = *(unsigned int **)(v17 + 24);
  v56 = *v55;
  v57 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v54)
    memmove(&v55[2 * v56 + 4 + 2 * (v57 - *(_DWORD *)(v17 + 32) + 8 * *(_DWORD *)(v17 + 32))], v53, 8 * v54);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 72) = *(_QWORD *)(a8 + 536);
  v58 = *(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24);
  v59 = *(_DWORD *)(v17 + 32);
  *(_QWORD *)(v58 + 8 * (sub_22F293A28(63) + 8 * v59) + 16) = a9;
  *(_BYTE *)(v17 + 36) = a10;
  return v17;
}

uint64_t sub_22F3F7A20(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 78;
  if (byte_255E04EB3)
    sub_22F3F189C(78);
  *(_DWORD *)(v18 + 8) = 63;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F7B1C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(63);
  return sub_22F3F7B78(a1, a2, 1, v6 + 8 * a3 + 1, &v8);
}

uint64_t sub_22F3F7B78(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 78;
  if (byte_255E04EB3)
    sub_22F3F189C(78);
  *(_QWORD *)(v9 + 8) = 63;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F7C24(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 73;
  if (byte_255E04EB3)
    sub_22F3F189C(73);
  *(_DWORD *)(v16 + 8) = 57;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F7D10(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 73;
  if (byte_255E04EB3)
    sub_22F3F189C(73);
  *(_QWORD *)(v7 + 8) = 57;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F7DAC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 75;
  if (byte_255E04EB3)
    sub_22F3F189C(75);
  *(_DWORD *)(v16 + 8) = 58;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F7E98(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 75;
  if (byte_255E04EB3)
    sub_22F3F189C(75);
  *(_QWORD *)(v7 + 8) = 58;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F7F34(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 76;
  if (byte_255E04EB3)
    sub_22F3F189C(76);
  *(_DWORD *)(v16 + 8) = 59;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F8020(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 76;
  if (byte_255E04EB3)
    sub_22F3F189C(76);
  *(_QWORD *)(v7 + 8) = 59;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F80BC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 85;
  if (byte_255E04EB3)
    sub_22F3F189C(85);
  *(_DWORD *)(v16 + 8) = 80;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3F81A8(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 85;
  if (byte_255E04EB3)
    sub_22F3F189C(85);
  *(_QWORD *)(v7 + 8) = 80;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3F8244(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  const void *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  const void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  const void *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  int v46;
  const void *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  int v51;
  const void *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  int v58;
  int v59;
  int v60;

  v59 = a3;
  v60 = a2;
  v58 = a4;
  v15 = sub_22F293A28(76);
  v16 = sub_22F3F8600(a1, a5, a6, a7, v15 + 8 * a4, &v60, &v59, &v58);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v17 = *(const void **)(a8 + 152);
  v18 = *(unsigned int *)(a8 + 160);
  v19 = *(unsigned int **)(v16 + 24);
  v20 = *v19;
  v21 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v18)
    memmove(&v19[2 * v20 + 4 + 2 * v21], v17, 8 * v18);
  v22 = *(const void **)(a8 + 200);
  v23 = *(unsigned int *)(a8 + 208);
  v24 = *(unsigned int **)(v16 + 24);
  v25 = *v24;
  v26 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v23)
    memmove(&v24[2 * v25 + 4 + 2 * (*(_DWORD *)(v16 + 32) + v26)], v22, 8 * v23);
  v27 = *(const void **)(a8 + 248);
  v28 = *(unsigned int *)(a8 + 256);
  v29 = *(unsigned int **)(v16 + 24);
  v30 = *v29;
  v31 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v28)
    memmove(&v29[2 * v30 + 4 + 2 * (v31 + 2 * *(_DWORD *)(v16 + 32))], v27, 8 * v28);
  v32 = *(const void **)(a8 + 296);
  v33 = *(unsigned int *)(a8 + 304);
  v34 = *(unsigned int **)(v16 + 24);
  v35 = *v34;
  v36 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v33)
    memmove(&v34[2 * v35 + 4 + 2 * (3 * *(_DWORD *)(v16 + 32) + v36)], v32, 8 * v33);
  v37 = *(const void **)(a8 + 344);
  v38 = *(unsigned int *)(a8 + 352);
  v39 = *(unsigned int **)(v16 + 24);
  v40 = *v39;
  v41 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v38)
    memmove(&v39[2 * v40 + 4 + 2 * (v41 + 4 * *(_DWORD *)(v16 + 32))], v37, 8 * v38);
  v42 = *(const void **)(a8 + 392);
  v43 = *(unsigned int *)(a8 + 400);
  v44 = *(unsigned int **)(v16 + 24);
  v45 = *v44;
  v46 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v43)
    memmove(&v44[2 * v45 + 4 + 2 * (5 * *(_DWORD *)(v16 + 32) + v46)], v42, 8 * v43);
  v47 = *(const void **)(a8 + 440);
  v48 = *(unsigned int *)(a8 + 448);
  v49 = *(unsigned int **)(v16 + 24);
  v50 = *v49;
  v51 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v48)
    memmove(&v49[2 * v50 + 4 + 2 * (v51 + 6 * *(_DWORD *)(v16 + 32))], v47, 8 * v48);
  v52 = *(const void **)(a8 + 488);
  v53 = *(unsigned int *)(a8 + 496);
  v54 = *(unsigned int **)(v16 + 24);
  v55 = *v54;
  v56 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v53)
    memmove(&v54[2 * v55 + 4 + 2 * (v56 - *(_DWORD *)(v16 + 32) + 8 * *(_DWORD *)(v16 + 32))], v52, 8 * v53);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_BYTE *)(v16 + 36) = a9;
  return v16;
}

uint64_t sub_22F3F8600(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 53;
  if (byte_255E04EB3)
    sub_22F3F189C(53);
  *(_DWORD *)(v18 + 8) = 76;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F86FC(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(76);
  return sub_22F3F8754(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F8754(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 53;
  if (byte_255E04EB3)
    sub_22F3F189C(53);
  *(_QWORD *)(v9 + 8) = 76;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F8800(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(77);
  v15 = sub_22F3F8BAC(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3F8BAC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 54;
  if (byte_255E04EB3)
    sub_22F3F189C(54);
  *(_DWORD *)(v18 + 8) = 77;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F8CA4(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(77);
  return sub_22F3F8CFC(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F8CFC(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 54;
  if (byte_255E04EB3)
    sub_22F3F189C(54);
  *(_QWORD *)(v9 + 8) = 77;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F8DA4(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  const void *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  const void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  const void *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  int v46;
  const void *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  int v51;
  const void *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  int v58;
  int v59;
  int v60;

  v59 = a3;
  v60 = a2;
  v58 = a4;
  v15 = sub_22F293A28(36);
  v16 = sub_22F3F9160(a1, a5, a6, a7, v15 + 8 * a4, &v60, &v59, &v58);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v17 = *(const void **)(a8 + 152);
  v18 = *(unsigned int *)(a8 + 160);
  v19 = *(unsigned int **)(v16 + 24);
  v20 = *v19;
  v21 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v18)
    memmove(&v19[2 * v20 + 4 + 2 * v21], v17, 8 * v18);
  v22 = *(const void **)(a8 + 200);
  v23 = *(unsigned int *)(a8 + 208);
  v24 = *(unsigned int **)(v16 + 24);
  v25 = *v24;
  v26 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v23)
    memmove(&v24[2 * v25 + 4 + 2 * (*(_DWORD *)(v16 + 32) + v26)], v22, 8 * v23);
  v27 = *(const void **)(a8 + 248);
  v28 = *(unsigned int *)(a8 + 256);
  v29 = *(unsigned int **)(v16 + 24);
  v30 = *v29;
  v31 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v28)
    memmove(&v29[2 * v30 + 4 + 2 * (v31 + 2 * *(_DWORD *)(v16 + 32))], v27, 8 * v28);
  v32 = *(const void **)(a8 + 296);
  v33 = *(unsigned int *)(a8 + 304);
  v34 = *(unsigned int **)(v16 + 24);
  v35 = *v34;
  v36 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v33)
    memmove(&v34[2 * v35 + 4 + 2 * (3 * *(_DWORD *)(v16 + 32) + v36)], v32, 8 * v33);
  v37 = *(const void **)(a8 + 344);
  v38 = *(unsigned int *)(a8 + 352);
  v39 = *(unsigned int **)(v16 + 24);
  v40 = *v39;
  v41 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v38)
    memmove(&v39[2 * v40 + 4 + 2 * (v41 + 4 * *(_DWORD *)(v16 + 32))], v37, 8 * v38);
  v42 = *(const void **)(a8 + 392);
  v43 = *(unsigned int *)(a8 + 400);
  v44 = *(unsigned int **)(v16 + 24);
  v45 = *v44;
  v46 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v43)
    memmove(&v44[2 * v45 + 4 + 2 * (5 * *(_DWORD *)(v16 + 32) + v46)], v42, 8 * v43);
  v47 = *(const void **)(a8 + 440);
  v48 = *(unsigned int *)(a8 + 448);
  v49 = *(unsigned int **)(v16 + 24);
  v50 = *v49;
  v51 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v48)
    memmove(&v49[2 * v50 + 4 + 2 * (v51 + 6 * *(_DWORD *)(v16 + 32))], v47, 8 * v48);
  v52 = *(const void **)(a8 + 488);
  v53 = *(unsigned int *)(a8 + 496);
  v54 = *(unsigned int **)(v16 + 24);
  v55 = *v54;
  v56 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v53)
    memmove(&v54[2 * v55 + 4 + 2 * (v56 - *(_DWORD *)(v16 + 32) + 8 * *(_DWORD *)(v16 + 32))], v52, 8 * v53);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_BYTE *)(v16 + 36) = a9;
  return v16;
}

uint64_t sub_22F3F9160(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 37;
  if (byte_255E04EB3)
    sub_22F3F189C(37);
  *(_DWORD *)(v18 + 8) = 36;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F925C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(36);
  return sub_22F3F92B4(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F92B4(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 37;
  if (byte_255E04EB3)
    sub_22F3F189C(37);
  *(_QWORD *)(v9 + 8) = 36;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F9360(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(37);
  v15 = sub_22F3F970C(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3F970C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 38;
  if (byte_255E04EB3)
    sub_22F3F189C(38);
  *(_DWORD *)(v18 + 8) = 37;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F9804(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(37);
  return sub_22F3F985C(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F985C(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 38;
  if (byte_255E04EB3)
    sub_22F3F189C(38);
  *(_QWORD *)(v9 + 8) = 37;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F9904(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  const void *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  const void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  const void *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  int v46;
  const void *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  int v51;
  const void *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  int v58;
  int v59;
  int v60;

  v59 = a3;
  v60 = a2;
  v58 = a4;
  v15 = sub_22F293A28(46);
  v16 = sub_22F3F9CC0(a1, a5, a6, a7, v15 + 8 * a4, &v60, &v59, &v58);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v17 = *(const void **)(a8 + 152);
  v18 = *(unsigned int *)(a8 + 160);
  v19 = *(unsigned int **)(v16 + 24);
  v20 = *v19;
  v21 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v18)
    memmove(&v19[2 * v20 + 4 + 2 * v21], v17, 8 * v18);
  v22 = *(const void **)(a8 + 200);
  v23 = *(unsigned int *)(a8 + 208);
  v24 = *(unsigned int **)(v16 + 24);
  v25 = *v24;
  v26 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v23)
    memmove(&v24[2 * v25 + 4 + 2 * (*(_DWORD *)(v16 + 32) + v26)], v22, 8 * v23);
  v27 = *(const void **)(a8 + 248);
  v28 = *(unsigned int *)(a8 + 256);
  v29 = *(unsigned int **)(v16 + 24);
  v30 = *v29;
  v31 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v28)
    memmove(&v29[2 * v30 + 4 + 2 * (v31 + 2 * *(_DWORD *)(v16 + 32))], v27, 8 * v28);
  v32 = *(const void **)(a8 + 296);
  v33 = *(unsigned int *)(a8 + 304);
  v34 = *(unsigned int **)(v16 + 24);
  v35 = *v34;
  v36 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v33)
    memmove(&v34[2 * v35 + 4 + 2 * (3 * *(_DWORD *)(v16 + 32) + v36)], v32, 8 * v33);
  v37 = *(const void **)(a8 + 344);
  v38 = *(unsigned int *)(a8 + 352);
  v39 = *(unsigned int **)(v16 + 24);
  v40 = *v39;
  v41 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v38)
    memmove(&v39[2 * v40 + 4 + 2 * (v41 + 4 * *(_DWORD *)(v16 + 32))], v37, 8 * v38);
  v42 = *(const void **)(a8 + 392);
  v43 = *(unsigned int *)(a8 + 400);
  v44 = *(unsigned int **)(v16 + 24);
  v45 = *v44;
  v46 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v43)
    memmove(&v44[2 * v45 + 4 + 2 * (5 * *(_DWORD *)(v16 + 32) + v46)], v42, 8 * v43);
  v47 = *(const void **)(a8 + 440);
  v48 = *(unsigned int *)(a8 + 448);
  v49 = *(unsigned int **)(v16 + 24);
  v50 = *v49;
  v51 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v48)
    memmove(&v49[2 * v50 + 4 + 2 * (v51 + 6 * *(_DWORD *)(v16 + 32))], v47, 8 * v48);
  v52 = *(const void **)(a8 + 488);
  v53 = *(unsigned int *)(a8 + 496);
  v54 = *(unsigned int **)(v16 + 24);
  v55 = *v54;
  v56 = sub_22F293A28(*(_DWORD *)(v16 + 8));
  if ((_DWORD)v53)
    memmove(&v54[2 * v55 + 4 + 2 * (v56 - *(_DWORD *)(v16 + 32) + 8 * *(_DWORD *)(v16 + 32))], v52, 8 * v53);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * **(unsigned int **)(v16 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_BYTE *)(v16 + 36) = a9;
  return v16;
}

uint64_t sub_22F3F9CC0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 42;
  if (byte_255E04EB3)
    sub_22F3F189C(42);
  *(_DWORD *)(v18 + 8) = 46;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3F9DBC(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(46);
  return sub_22F3F9E14(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3F9E14(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 42;
  if (byte_255E04EB3)
    sub_22F3F189C(42);
  *(_QWORD *)(v9 + 8) = 46;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3F9EC0(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(47);
  v15 = sub_22F3FA26C(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FA26C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 43;
  if (byte_255E04EB3)
    sub_22F3F189C(43);
  *(_DWORD *)(v18 + 8) = 47;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FA364(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(47);
  return sub_22F3FA3BC(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FA3BC(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 43;
  if (byte_255E04EB3)
    sub_22F3F189C(43);
  *(_QWORD *)(v9 + 8) = 47;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FA464(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(16);
  v15 = sub_22F3FA810(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FA810(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 30;
  if (byte_255E04EB3)
    sub_22F3F189C(30);
  *(_DWORD *)(v18 + 8) = 16;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FA908(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(16);
  return sub_22F3FA960(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FA960(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 30;
  if (byte_255E04EB3)
    sub_22F3F189C(30);
  *(_QWORD *)(v9 + 8) = 16;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FAA08(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 80;
  if (byte_255E04EB3)
    sub_22F3F189C(80);
  *(_DWORD *)(v16 + 8) = 73;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3FAAF4(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 80;
  if (byte_255E04EB3)
    sub_22F3F189C(80);
  *(_QWORD *)(v7 + 8) = 73;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3FAB90(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v61;
  int v62;
  int v63;

  v62 = a3;
  v63 = a2;
  v61 = a4;
  v16 = sub_22F293A28(19);
  v17 = sub_22F3FB07C(a1, a5, a6, a7, v16 + 8 * a4 + 1, &v63, &v62, &v61);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 136) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 144) = *(_QWORD *)(a8 + 120);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 152) = *(_QWORD *)(a8 + 128);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 160) = *(_QWORD *)(a8 + 136);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 168) = *(_QWORD *)(a8 + 144);
  v18 = *(const void **)(a8 + 152);
  v19 = *(unsigned int *)(a8 + 160);
  v20 = *(unsigned int **)(v17 + 24);
  v21 = *v20;
  v22 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v19)
    memmove(&v20[2 * v21 + 4 + 2 * v22], v18, 8 * v19);
  v23 = *(const void **)(a8 + 200);
  v24 = *(unsigned int *)(a8 + 208);
  v25 = *(unsigned int **)(v17 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v24)
    memmove(&v25[2 * v26 + 4 + 2 * (*(_DWORD *)(v17 + 32) + v27)], v23, 8 * v24);
  v28 = *(const void **)(a8 + 248);
  v29 = *(unsigned int *)(a8 + 256);
  v30 = *(unsigned int **)(v17 + 24);
  v31 = *v30;
  v32 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v29)
    memmove(&v30[2 * v31 + 4 + 2 * (v32 + 2 * *(_DWORD *)(v17 + 32))], v28, 8 * v29);
  v33 = *(const void **)(a8 + 296);
  v34 = *(unsigned int *)(a8 + 304);
  v35 = *(unsigned int **)(v17 + 24);
  v36 = *v35;
  v37 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v34)
    memmove(&v35[2 * v36 + 4 + 2 * (3 * *(_DWORD *)(v17 + 32) + v37)], v33, 8 * v34);
  v38 = *(const void **)(a8 + 344);
  v39 = *(unsigned int *)(a8 + 352);
  v40 = *(unsigned int **)(v17 + 24);
  v41 = *v40;
  v42 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v39)
    memmove(&v40[2 * v41 + 4 + 2 * (v42 + 4 * *(_DWORD *)(v17 + 32))], v38, 8 * v39);
  v43 = *(const void **)(a8 + 392);
  v44 = *(unsigned int *)(a8 + 400);
  v45 = *(unsigned int **)(v17 + 24);
  v46 = *v45;
  v47 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v44)
    memmove(&v45[2 * v46 + 4 + 2 * (5 * *(_DWORD *)(v17 + 32) + v47)], v43, 8 * v44);
  v48 = *(const void **)(a8 + 440);
  v49 = *(unsigned int *)(a8 + 448);
  v50 = *(unsigned int **)(v17 + 24);
  v51 = *v50;
  v52 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v49)
    memmove(&v50[2 * v51 + 4 + 2 * (v52 + 6 * *(_DWORD *)(v17 + 32))], v48, 8 * v49);
  v53 = *(const void **)(a8 + 488);
  v54 = *(unsigned int *)(a8 + 496);
  v55 = *(unsigned int **)(v17 + 24);
  v56 = *v55;
  v57 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v54)
    memmove(&v55[2 * v56 + 4 + 2 * (v57 - *(_DWORD *)(v17 + 32) + 8 * *(_DWORD *)(v17 + 32))], v53, 8 * v54);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 176) = *(_QWORD *)(a8 + 544);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 184) = *(_QWORD *)(a8 + 552);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 192) = *(_QWORD *)(a8 + 560);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 200) = *(_QWORD *)(a8 + 568);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 208) = *(_QWORD *)(a8 + 576);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 216) = *(_QWORD *)(a8 + 584);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 224) = *(_QWORD *)(a8 + 592);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 232) = *(_QWORD *)(a8 + 600);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 240) = *(_QWORD *)(a8 + 608);
  v58 = *(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24);
  v59 = *(_DWORD *)(v17 + 32);
  *(_QWORD *)(v58 + 8 * (sub_22F293A28(19) + 8 * v59) + 16) = a9;
  *(_BYTE *)(v17 + 36) = a10;
  return v17;
}

uint64_t sub_22F3FB07C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 31;
  if (byte_255E04EB3)
    sub_22F3F189C(31);
  *(_DWORD *)(v18 + 8) = 19;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FB178(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(19);
  return sub_22F3FB1D4(a1, a2, 1, v6 + 8 * a3 + 1, &v8);
}

uint64_t sub_22F3FB1D4(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 31;
  if (byte_255E04EB3)
    sub_22F3F189C(31);
  *(_QWORD *)(v9 + 8) = 19;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FB280(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(20);
  v15 = sub_22F3FB730(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 144) = *(_QWORD *)(a8 + 120);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 152) = *(_QWORD *)(a8 + 128);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 160) = *(_QWORD *)(a8 + 136);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 168) = *(_QWORD *)(a8 + 144);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 176) = *(_QWORD *)(a8 + 544);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 184) = *(_QWORD *)(a8 + 552);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 192) = *(_QWORD *)(a8 + 560);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 200) = *(_QWORD *)(a8 + 568);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 208) = *(_QWORD *)(a8 + 576);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 216) = *(_QWORD *)(a8 + 584);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 224) = *(_QWORD *)(a8 + 592);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 232) = *(_QWORD *)(a8 + 600);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 240) = *(_QWORD *)(a8 + 608);
  return v15;
}

uint64_t sub_22F3FB730(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 32;
  if (byte_255E04EB3)
    sub_22F3F189C(32);
  *(_DWORD *)(v18 + 8) = 20;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FB828(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(20);
  return sub_22F3FB880(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FB880(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 32;
  if (byte_255E04EB3)
    sub_22F3F189C(32);
  *(_QWORD *)(v9 + 8) = 20;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FB928(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(21);
  v15 = sub_22F3FBCD4(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FBCD4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 33;
  if (byte_255E04EB3)
    sub_22F3F189C(33);
  *(_DWORD *)(v18 + 8) = 21;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FBDCC(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(21);
  return sub_22F3FBE24(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FBE24(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 33;
  if (byte_255E04EB3)
    sub_22F3F189C(33);
  *(_QWORD *)(v9 + 8) = 21;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FBECC(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(64);
  v15 = sub_22F3FC278(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FC278(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 45;
  if (byte_255E04EB3)
    sub_22F3F189C(45);
  *(_DWORD *)(v18 + 8) = 64;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FC370(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(64);
  return sub_22F3FC3C8(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FC3C8(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 45;
  if (byte_255E04EB3)
    sub_22F3F189C(45);
  *(_QWORD *)(v9 + 8) = 64;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FC470(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(65);
  v15 = sub_22F3FC77C(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FC77C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 47;
  if (byte_255E04EB3)
    sub_22F3F189C(47);
  *(_DWORD *)(v18 + 8) = 65;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FC874(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(65);
  return sub_22F3FC8CC(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FC8CC(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 47;
  if (byte_255E04EB3)
    sub_22F3F189C(47);
  *(_QWORD *)(v9 + 8) = 65;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FC974(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(81);
  v15 = sub_22F3FCD20(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FCD20(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 55;
  if (byte_255E04EB3)
    sub_22F3F189C(55);
  *(_DWORD *)(v18 + 8) = 81;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FCE18(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(81);
  return sub_22F3FCE70(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FCE70(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 55;
  if (byte_255E04EB3)
    sub_22F3F189C(55);
  *(_QWORD *)(v9 + 8) = 81;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FCF18(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(86);
  v15 = sub_22F3FD2C4(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FD2C4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 58;
  if (byte_255E04EB3)
    sub_22F3F189C(58);
  *(_DWORD *)(v18 + 8) = 86;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FD3BC(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(86);
  return sub_22F3FD414(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FD414(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 58;
  if (byte_255E04EB3)
    sub_22F3F189C(58);
  *(_QWORD *)(v9 + 8) = 86;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FD4BC(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(85);
  v15 = sub_22F3FD96C(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 144) = *(_QWORD *)(a8 + 120);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 152) = *(_QWORD *)(a8 + 128);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 160) = *(_QWORD *)(a8 + 136);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 168) = *(_QWORD *)(a8 + 144);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 176) = *(_QWORD *)(a8 + 544);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 184) = *(_QWORD *)(a8 + 552);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 192) = *(_QWORD *)(a8 + 560);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 200) = *(_QWORD *)(a8 + 568);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 208) = *(_QWORD *)(a8 + 576);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 216) = *(_QWORD *)(a8 + 584);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 224) = *(_QWORD *)(a8 + 592);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 232) = *(_QWORD *)(a8 + 600);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 240) = *(_QWORD *)(a8 + 608);
  return v15;
}

uint64_t sub_22F3FD96C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 57;
  if (byte_255E04EB3)
    sub_22F3F189C(57);
  *(_DWORD *)(v18 + 8) = 85;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FDA64(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(85);
  return sub_22F3FDABC(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FDABC(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 57;
  if (byte_255E04EB3)
    sub_22F3F189C(57);
  *(_QWORD *)(v9 + 8) = 85;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FDB64(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v61;
  int v62;
  int v63;

  v62 = a3;
  v63 = a2;
  v61 = a4;
  v16 = sub_22F293A28(84);
  v17 = sub_22F3FE050(a1, a5, a6, a7, v16 + 8 * a4 + 1, &v63, &v62, &v61);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 136) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 144) = *(_QWORD *)(a8 + 120);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 152) = *(_QWORD *)(a8 + 128);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 160) = *(_QWORD *)(a8 + 136);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 168) = *(_QWORD *)(a8 + 144);
  v18 = *(const void **)(a8 + 152);
  v19 = *(unsigned int *)(a8 + 160);
  v20 = *(unsigned int **)(v17 + 24);
  v21 = *v20;
  v22 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v19)
    memmove(&v20[2 * v21 + 4 + 2 * v22], v18, 8 * v19);
  v23 = *(const void **)(a8 + 200);
  v24 = *(unsigned int *)(a8 + 208);
  v25 = *(unsigned int **)(v17 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v24)
    memmove(&v25[2 * v26 + 4 + 2 * (*(_DWORD *)(v17 + 32) + v27)], v23, 8 * v24);
  v28 = *(const void **)(a8 + 248);
  v29 = *(unsigned int *)(a8 + 256);
  v30 = *(unsigned int **)(v17 + 24);
  v31 = *v30;
  v32 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v29)
    memmove(&v30[2 * v31 + 4 + 2 * (v32 + 2 * *(_DWORD *)(v17 + 32))], v28, 8 * v29);
  v33 = *(const void **)(a8 + 296);
  v34 = *(unsigned int *)(a8 + 304);
  v35 = *(unsigned int **)(v17 + 24);
  v36 = *v35;
  v37 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v34)
    memmove(&v35[2 * v36 + 4 + 2 * (3 * *(_DWORD *)(v17 + 32) + v37)], v33, 8 * v34);
  v38 = *(const void **)(a8 + 344);
  v39 = *(unsigned int *)(a8 + 352);
  v40 = *(unsigned int **)(v17 + 24);
  v41 = *v40;
  v42 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v39)
    memmove(&v40[2 * v41 + 4 + 2 * (v42 + 4 * *(_DWORD *)(v17 + 32))], v38, 8 * v39);
  v43 = *(const void **)(a8 + 392);
  v44 = *(unsigned int *)(a8 + 400);
  v45 = *(unsigned int **)(v17 + 24);
  v46 = *v45;
  v47 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v44)
    memmove(&v45[2 * v46 + 4 + 2 * (5 * *(_DWORD *)(v17 + 32) + v47)], v43, 8 * v44);
  v48 = *(const void **)(a8 + 440);
  v49 = *(unsigned int *)(a8 + 448);
  v50 = *(unsigned int **)(v17 + 24);
  v51 = *v50;
  v52 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v49)
    memmove(&v50[2 * v51 + 4 + 2 * (v52 + 6 * *(_DWORD *)(v17 + 32))], v48, 8 * v49);
  v53 = *(const void **)(a8 + 488);
  v54 = *(unsigned int *)(a8 + 496);
  v55 = *(unsigned int **)(v17 + 24);
  v56 = *v55;
  v57 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v54)
    memmove(&v55[2 * v56 + 4 + 2 * (v57 - *(_DWORD *)(v17 + 32) + 8 * *(_DWORD *)(v17 + 32))], v53, 8 * v54);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 176) = *(_QWORD *)(a8 + 544);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 184) = *(_QWORD *)(a8 + 552);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 192) = *(_QWORD *)(a8 + 560);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 200) = *(_QWORD *)(a8 + 568);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 208) = *(_QWORD *)(a8 + 576);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 216) = *(_QWORD *)(a8 + 584);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 224) = *(_QWORD *)(a8 + 592);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 232) = *(_QWORD *)(a8 + 600);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 240) = *(_QWORD *)(a8 + 608);
  v58 = *(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24);
  v59 = *(_DWORD *)(v17 + 32);
  *(_QWORD *)(v58 + 8 * (sub_22F293A28(84) + 8 * v59) + 16) = a9;
  *(_BYTE *)(v17 + 36) = a10;
  return v17;
}

uint64_t sub_22F3FE050(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 56;
  if (byte_255E04EB3)
    sub_22F3F189C(56);
  *(_DWORD *)(v18 + 8) = 84;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FE14C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(84);
  return sub_22F3FE1A8(a1, a2, 1, v6 + 8 * a3 + 1, &v8);
}

uint64_t sub_22F3FE1A8(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 56;
  if (byte_255E04EB3)
    sub_22F3F189C(56);
  *(_QWORD *)(v9 + 8) = 84;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FE254(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v8;

  v8 = a2;
  v7 = a3;
  return sub_22F3FE294(a1, a4, a5, a6, &v8, &v7);
}

uint64_t sub_22F3FE294(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int *a5, int *a6)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v11 = a4 != 0;
  v12 = a3;
  if (a4)
    v13 = a3 + 1;
  else
    v13 = a3;
  v14 = sub_22E3CD3D4(a1 + 2032, 8 * v13 + 48, 3);
  v15 = v14;
  *(_DWORD *)(v14 + 32) = a3;
  v16 = v14 + 32;
  *(_DWORD *)(v14 + 36) = 0;
  *(_BYTE *)(v14 + 40) = v11;
  if (a3)
    memmove((void *)(v14 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v15 + 8 * v12 + 48) = a4;
  v17 = *a5;
  v18 = *a6;
  *(_BYTE *)v15 = 79;
  if (byte_255E04EB3)
    sub_22F3F189C(79);
  *(_DWORD *)(v15 + 8) = 66;
  *(_DWORD *)(v15 + 12) = v17;
  *(_DWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v16;
  return v15;
}

uint64_t sub_22F3FE374(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 79;
  if (byte_255E04EB3)
    sub_22F3F189C(79);
  *(_QWORD *)(v7 + 8) = 66;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3FE410(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(67);
  v15 = sub_22F3FE7BC(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FE7BC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 48;
  if (byte_255E04EB3)
    sub_22F3F189C(48);
  *(_DWORD *)(v18 + 8) = 67;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FE8B4(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(67);
  return sub_22F3FE90C(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FE90C(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 48;
  if (byte_255E04EB3)
    sub_22F3F189C(48);
  *(_QWORD *)(v9 + 8) = 67;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FE9B4(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  const void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v61;
  int v62;
  int v63;

  v62 = a3;
  v63 = a2;
  v61 = a4;
  v16 = sub_22F293A28(70);
  v17 = sub_22F3FEEA0(a1, a5, a6, a7, v16 + 8 * a4 + 1, &v63, &v62, &v61);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 136) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 144) = *(_QWORD *)(a8 + 120);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 152) = *(_QWORD *)(a8 + 128);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 160) = *(_QWORD *)(a8 + 136);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 168) = *(_QWORD *)(a8 + 144);
  v18 = *(const void **)(a8 + 152);
  v19 = *(unsigned int *)(a8 + 160);
  v20 = *(unsigned int **)(v17 + 24);
  v21 = *v20;
  v22 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v19)
    memmove(&v20[2 * v21 + 4 + 2 * v22], v18, 8 * v19);
  v23 = *(const void **)(a8 + 200);
  v24 = *(unsigned int *)(a8 + 208);
  v25 = *(unsigned int **)(v17 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v24)
    memmove(&v25[2 * v26 + 4 + 2 * (*(_DWORD *)(v17 + 32) + v27)], v23, 8 * v24);
  v28 = *(const void **)(a8 + 248);
  v29 = *(unsigned int *)(a8 + 256);
  v30 = *(unsigned int **)(v17 + 24);
  v31 = *v30;
  v32 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v29)
    memmove(&v30[2 * v31 + 4 + 2 * (v32 + 2 * *(_DWORD *)(v17 + 32))], v28, 8 * v29);
  v33 = *(const void **)(a8 + 296);
  v34 = *(unsigned int *)(a8 + 304);
  v35 = *(unsigned int **)(v17 + 24);
  v36 = *v35;
  v37 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v34)
    memmove(&v35[2 * v36 + 4 + 2 * (3 * *(_DWORD *)(v17 + 32) + v37)], v33, 8 * v34);
  v38 = *(const void **)(a8 + 344);
  v39 = *(unsigned int *)(a8 + 352);
  v40 = *(unsigned int **)(v17 + 24);
  v41 = *v40;
  v42 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v39)
    memmove(&v40[2 * v41 + 4 + 2 * (v42 + 4 * *(_DWORD *)(v17 + 32))], v38, 8 * v39);
  v43 = *(const void **)(a8 + 392);
  v44 = *(unsigned int *)(a8 + 400);
  v45 = *(unsigned int **)(v17 + 24);
  v46 = *v45;
  v47 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v44)
    memmove(&v45[2 * v46 + 4 + 2 * (5 * *(_DWORD *)(v17 + 32) + v47)], v43, 8 * v44);
  v48 = *(const void **)(a8 + 440);
  v49 = *(unsigned int *)(a8 + 448);
  v50 = *(unsigned int **)(v17 + 24);
  v51 = *v50;
  v52 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v49)
    memmove(&v50[2 * v51 + 4 + 2 * (v52 + 6 * *(_DWORD *)(v17 + 32))], v48, 8 * v49);
  v53 = *(const void **)(a8 + 488);
  v54 = *(unsigned int *)(a8 + 496);
  v55 = *(unsigned int **)(v17 + 24);
  v56 = *v55;
  v57 = sub_22F293A28(*(_DWORD *)(v17 + 8));
  if ((_DWORD)v54)
    memmove(&v55[2 * v56 + 4 + 2 * (v57 - *(_DWORD *)(v17 + 32) + 8 * *(_DWORD *)(v17 + 32))], v53, 8 * v54);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 176) = *(_QWORD *)(a8 + 544);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 184) = *(_QWORD *)(a8 + 552);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 192) = *(_QWORD *)(a8 + 560);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 200) = *(_QWORD *)(a8 + 568);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 208) = *(_QWORD *)(a8 + 576);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 216) = *(_QWORD *)(a8 + 584);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 224) = *(_QWORD *)(a8 + 592);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 232) = *(_QWORD *)(a8 + 600);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24) + 240) = *(_QWORD *)(a8 + 608);
  v58 = *(_QWORD *)(v17 + 24) + 8 * **(unsigned int **)(v17 + 24);
  v59 = *(_DWORD *)(v17 + 32);
  *(_QWORD *)(v58 + 8 * (sub_22F293A28(70) + 8 * v59) + 16) = a9;
  *(_BYTE *)(v17 + 36) = a10;
  return v17;
}

uint64_t sub_22F3FEEA0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 49;
  if (byte_255E04EB3)
    sub_22F3F189C(49);
  *(_DWORD *)(v18 + 8) = 70;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_BYTE *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FEF9C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(70);
  return sub_22F3FEFF8(a1, a2, 1, v6 + 8 * a3 + 1, &v8);
}

uint64_t sub_22F3FEFF8(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 49;
  if (byte_255E04EB3)
    sub_22F3F189C(49);
  *(_QWORD *)(v9 + 8) = 70;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FF0A4(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(71);
  v15 = sub_22F3FF554(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 144) = *(_QWORD *)(a8 + 120);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 152) = *(_QWORD *)(a8 + 128);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 160) = *(_QWORD *)(a8 + 136);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 168) = *(_QWORD *)(a8 + 144);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 176) = *(_QWORD *)(a8 + 544);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 184) = *(_QWORD *)(a8 + 552);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 192) = *(_QWORD *)(a8 + 560);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 200) = *(_QWORD *)(a8 + 568);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 208) = *(_QWORD *)(a8 + 576);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 216) = *(_QWORD *)(a8 + 584);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 224) = *(_QWORD *)(a8 + 592);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 232) = *(_QWORD *)(a8 + 600);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 240) = *(_QWORD *)(a8 + 608);
  return v15;
}

uint64_t sub_22F3FF554(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 50;
  if (byte_255E04EB3)
    sub_22F3F189C(50);
  *(_DWORD *)(v18 + 8) = 71;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FF64C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(71);
  return sub_22F3FF6A4(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FF6A4(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 50;
  if (byte_255E04EB3)
    sub_22F3F189C(50);
  *(_QWORD *)(v9 + 8) = 71;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FF74C(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(72);
  v15 = sub_22F3FFAF8(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F3FFAF8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 51;
  if (byte_255E04EB3)
    sub_22F3F189C(51);
  *(_DWORD *)(v18 + 8) = 72;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F3FFBF0(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(72);
  return sub_22F3FFC48(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F3FFC48(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 51;
  if (byte_255E04EB3)
    sub_22F3F189C(51);
  *(_QWORD *)(v9 + 8) = 72;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F3FFCF0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 29;
  if (byte_255E04EB3)
    sub_22F3F189C(29);
  *(_DWORD *)(v16 + 8) = 93;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3FFDDC(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 29;
  if (byte_255E04EB3)
    sub_22F3F189C(29);
  *(_QWORD *)(v7 + 8) = 93;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F3FFE78(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 56, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 40) = a3;
  v17 = v15 + 40;
  *(_DWORD *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 48) = v13;
  if (a3)
    memmove((void *)(v15 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 56) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 27;
  if (byte_255E04EB3)
    sub_22F3F189C(27);
  *(_DWORD *)(v16 + 8) = 92;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_DWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F3FFF68(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 44) = a4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_BYTE *)v7 = 27;
  if (byte_255E04EB3)
    sub_22F3F189C(27);
  *(_QWORD *)(v7 + 8) = 92;
  *(_DWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  return v7;
}

uint64_t sub_22F400008(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7)
{
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v13 = a4 != 0;
  if (a4)
    v14 = a5 + 1;
  else
    v14 = a5;
  v15 = sub_22E3CD3D4(a1 + 2032, 8 * (v14 + a3) + 48, 3);
  v16 = v15;
  *(_DWORD *)(v15 + 32) = a3;
  v17 = v15 + 32;
  *(_DWORD *)(v15 + 36) = a5;
  *(_BYTE *)(v15 + 40) = v13;
  if (a3)
    memmove((void *)(v15 + 48), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v16 + 8 * a3 + 8 * a5 + 48) = a4;
  v18 = *a6;
  v19 = *a7;
  *(_BYTE *)v16 = 62;
  if (byte_255E04EB3)
    sub_22F3F189C(62);
  *(_DWORD *)(v16 + 8) = 95;
  *(_DWORD *)(v16 + 12) = v18;
  *(_DWORD *)(v16 + 16) = v19;
  *(_QWORD *)(v16 + 24) = v17;
  return v16;
}

uint64_t sub_22F4000F4(uint64_t a1, unsigned int a2, int a3, int a4)
{
  char v5;
  uint64_t v7;

  v5 = a3;
  v7 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 48, 3);
  *(_DWORD *)(v7 + 32) = a2;
  *(_DWORD *)(v7 + 36) = a4;
  *(_BYTE *)(v7 + 40) = v5;
  *(_BYTE *)v7 = 62;
  if (byte_255E04EB3)
    sub_22F3F189C(62);
  *(_QWORD *)(v7 + 8) = 95;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  return v7;
}

uint64_t sub_22F400190(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(94);
  v15 = sub_22F40053C(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F40053C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 36;
  if (byte_255E04EB3)
    sub_22F3F189C(36);
  *(_DWORD *)(v18 + 8) = 94;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F400634(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(94);
  return sub_22F40068C(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F40068C(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 36;
  if (byte_255E04EB3)
    sub_22F3F189C(36);
  *(_QWORD *)(v9 + 8) = 94;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F400734(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(99);
  v15 = sub_22F400AE0(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F400AE0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 59;
  if (byte_255E04EB3)
    sub_22F3F189C(59);
  *(_DWORD *)(v18 + 8) = 99;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F400BD8(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(99);
  return sub_22F400C30(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F400C30(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 59;
  if (byte_255E04EB3)
    sub_22F3F189C(59);
  *(_QWORD *)(v9 + 8) = 99;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F400CD8(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(98);
  v15 = sub_22F401084(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F401084(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 52;
  if (byte_255E04EB3)
    sub_22F3F189C(52);
  *(_DWORD *)(v18 + 8) = 98;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F40117C(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(98);
  return sub_22F4011D4(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F4011D4(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 52;
  if (byte_255E04EB3)
    sub_22F3F189C(52);
  *(_QWORD *)(v9 + 8) = 98;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F40127C(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(96);
  v15 = sub_22F401628(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F401628(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 41;
  if (byte_255E04EB3)
    sub_22F3F189C(41);
  *(_DWORD *)(v18 + 8) = 96;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F401720(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(96);
  return sub_22F401778(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F401778(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 41;
  if (byte_255E04EB3)
    sub_22F3F189C(41);
  *(_QWORD *)(v9 + 8) = 96;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

uint64_t sub_22F401820(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  const void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;

  v58 = a3;
  v59 = a2;
  v57 = a4;
  v14 = sub_22F293A28(97);
  v15 = sub_22F401BCC(a1, a5, a6, a7, v14 + 8 * a4, &v59, &v58, &v57);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 16) = *(_QWORD *)a8;
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 24) = *(_QWORD *)(a8 + 8);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 32) = *(_QWORD *)(a8 + 24);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 40) = *(_QWORD *)(a8 + 32);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 48) = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 56) = *(_QWORD *)(a8 + 48);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 64) = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 80) = *(_QWORD *)(a8 + 64);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 88) = *(_QWORD *)(a8 + 72);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 96) = *(_QWORD *)(a8 + 80);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 104) = *(_QWORD *)(a8 + 88);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 112) = *(_QWORD *)(a8 + 96);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 120) = *(_QWORD *)(a8 + 104);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 128) = *(_QWORD *)(a8 + 112);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 136) = *(_QWORD *)(a8 + 16);
  v16 = *(const void **)(a8 + 152);
  v17 = *(unsigned int *)(a8 + 160);
  v18 = *(unsigned int **)(v15 + 24);
  v19 = *v18;
  v20 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v17)
    memmove(&v18[2 * v19 + 4 + 2 * v20], v16, 8 * v17);
  v21 = *(const void **)(a8 + 200);
  v22 = *(unsigned int *)(a8 + 208);
  v23 = *(unsigned int **)(v15 + 24);
  v24 = *v23;
  v25 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v22)
    memmove(&v23[2 * v24 + 4 + 2 * (*(_DWORD *)(v15 + 32) + v25)], v21, 8 * v22);
  v26 = *(const void **)(a8 + 248);
  v27 = *(unsigned int *)(a8 + 256);
  v28 = *(unsigned int **)(v15 + 24);
  v29 = *v28;
  v30 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v27)
    memmove(&v28[2 * v29 + 4 + 2 * (v30 + 2 * *(_DWORD *)(v15 + 32))], v26, 8 * v27);
  v31 = *(const void **)(a8 + 296);
  v32 = *(unsigned int *)(a8 + 304);
  v33 = *(unsigned int **)(v15 + 24);
  v34 = *v33;
  v35 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v32)
    memmove(&v33[2 * v34 + 4 + 2 * (3 * *(_DWORD *)(v15 + 32) + v35)], v31, 8 * v32);
  v36 = *(const void **)(a8 + 344);
  v37 = *(unsigned int *)(a8 + 352);
  v38 = *(unsigned int **)(v15 + 24);
  v39 = *v38;
  v40 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v37)
    memmove(&v38[2 * v39 + 4 + 2 * (v40 + 4 * *(_DWORD *)(v15 + 32))], v36, 8 * v37);
  v41 = *(const void **)(a8 + 392);
  v42 = *(unsigned int *)(a8 + 400);
  v43 = *(unsigned int **)(v15 + 24);
  v44 = *v43;
  v45 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v42)
    memmove(&v43[2 * v44 + 4 + 2 * (5 * *(_DWORD *)(v15 + 32) + v45)], v41, 8 * v42);
  v46 = *(const void **)(a8 + 440);
  v47 = *(unsigned int *)(a8 + 448);
  v48 = *(unsigned int **)(v15 + 24);
  v49 = *v48;
  v50 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v47)
    memmove(&v48[2 * v49 + 4 + 2 * (v50 + 6 * *(_DWORD *)(v15 + 32))], v46, 8 * v47);
  v51 = *(const void **)(a8 + 488);
  v52 = *(unsigned int *)(a8 + 496);
  v53 = *(unsigned int **)(v15 + 24);
  v54 = *v53;
  v55 = sub_22F293A28(*(_DWORD *)(v15 + 8));
  if ((_DWORD)v52)
    memmove(&v53[2 * v54 + 4 + 2 * (v55 - *(_DWORD *)(v15 + 32) + 8 * *(_DWORD *)(v15 + 32))], v51, 8 * v52);
  *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * **(unsigned int **)(v15 + 24) + 72) = *(_QWORD *)(a8 + 536);
  return v15;
}

uint64_t sub_22F401BCC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, int *a7, int *a8)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v15 = a4 != 0;
  if (a4)
    v16 = a5 + 1;
  else
    v16 = a5;
  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (v16 + a3) + 56, 3);
  v18 = v17;
  *(_DWORD *)(v17 + 40) = a3;
  v19 = v17 + 40;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = v15;
  if (a3)
    memmove((void *)(v17 + 56), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v18 + 8 * a3 + 8 * a5 + 56) = a4;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  *(_BYTE *)v18 = 46;
  if (byte_255E04EB3)
    sub_22F3F189C(46);
  *(_DWORD *)(v18 + 8) = 97;
  *(_DWORD *)(v18 + 12) = v20;
  *(_DWORD *)(v18 + 16) = v21;
  *(_DWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 24) = v19;
  return v18;
}

uint64_t sub_22F401CC4(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v8;

  v8 = a3;
  v6 = sub_22F293A28(97);
  return sub_22F401D1C(a1, a2, 1, v6 + 8 * a3, &v8);
}

uint64_t sub_22F401D1C(uint64_t a1, unsigned int a2, int a3, int a4, int *a5)
{
  char v7;
  uint64_t v9;
  int v10;

  v7 = a3;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * ((a3 + a4) + (unint64_t)a2) + 56, 3);
  *(_DWORD *)(v9 + 40) = a2;
  *(_DWORD *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 48) = v7;
  v10 = *a5;
  *(_BYTE *)v9 = 46;
  if (byte_255E04EB3)
    sub_22F3F189C(46);
  *(_QWORD *)(v9 + 8) = 97;
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  return v9;
}

double sub_22F401DC4@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;
  uint64_t v7;

  v2 = *a1;
  if (*a1 == 1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0);
    if (!v3 || *(_BYTE *)(v3 + 16) != 36)
    {
      v7 = a2;
      v3 = sub_22F10CF48(v3);
      a2 = v7;
    }
    v4 = *(_QWORD *)(v3 + 32);
    v5 = 1;
    goto LABEL_5;
  }
  if (v2 == 7)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
    v5 = 7;
LABEL_5:
    *(_DWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v4;
    return result;
  }
  if (((1 << v2) & 0x13D) != 0)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *((_QWORD *)a1 + 1);
    *(_QWORD *)&result = 5;
    *(_QWORD *)a2 = 5;
  }
  return result;
}

uint64_t sub_22F401E74(uint64_t a1, llvm::raw_ostream *a2)
{
  unint64_t v5[2];
  _QWORD v6[109];

  v6[108] = *MEMORY[0x24BDAC8D0];
  sub_22F1D4230((uint64_t)v6);
  v6[0] |= 0x800100uLL;
  sub_22E462F04(v5, (unsigned int *)v6);
  sub_22F0EF330(a1, (uint64_t)v5, a2, 1);
  return sub_22E54B4D4((uint64_t)v6);
}

uint64_t sub_22F401F14(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22F401E74((uint64_t)a1, v2);
}

void sub_22F401F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _DWORD v7[2];
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)a1 >> 2;
  v8 = *(_QWORD *)(a1 + 24);
  v7[0] = 8;
  v7[1] = v6;
  sub_22E3CF554(a2, v5);
  sub_22F0EED38((uint64_t)v7, a2, a3);
}

void sub_22F401F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_22E3CF554(a1, a3);
  sub_22F0EED38(a4, a1, a2);
}

unint64_t *sub_22F401FD4(unint64_t *result, uint64_t a2)
{
  *result = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
  return result;
}

unint64_t *sub_22F401FE4(unint64_t *result, uint64_t a2)
{
  *result = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  return result;
}

uint64_t *sub_22F401FF4(uint64_t *result, uint64_t a2)
{
  *result = a2 | 6;
  return result;
}

unint64_t sub_22F402000(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  BOOL v3;

  v1 = *a1 & 6;
  result = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v1)
    v3 = 1;
  else
    v3 = result == 0;
  if (v3 || (*(_DWORD *)(result + 28) & 0x7E) != 0x2E)
    return 0;
  return result;
}

uint64_t sub_22F402030(uint64_t *a1)
{
  return sub_22F0F0A4C(a1) & 1;
}

void sub_22F402048(uint64_t *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  const char *v19;
  size_t v20;
  void *v21;
  llvm::raw_ostream *v22;
  const char *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  llvm::raw_ostream *v29;
  char *v30;
  uint64_t v31;

  v8 = sub_22F0F084C(a1);
  if (v8 && v8 != 7 || (v9 = sub_22F0F08CC(a1)) == 0)
  {
    v10 = *a1 & 6;
    v11 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v10 != 4 || v11 == 0)
    {
      if (v10 == 6 && v11 != 0)
      {
        if ((_DWORD)a4 == 1)
        {
          v26 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v26)
            sub_22F0AAD88(v26, a2, a3, 0);
        }
        sub_22E47DAC0(a2, "template ");
        if ((*(_BYTE *)(v11 + 8) & 4) != 0)
        {
          v29 = sub_22E47DAC0(a2, "operator ");
          v30 = (char *)sub_22F41FBE0(*(_DWORD *)(v11 + 16));
          sub_22E47DAC0(v29, v30);
          return;
        }
        v27 = *(_DWORD **)(*(_QWORD *)(v11 + 16) + 16);
        v28 = *v27;
        v23 = (const char *)(v27 + 4);
        v20 = v28;
        v21 = (void *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v28 > *((_QWORD *)a2 + 3) - (_QWORD)v21)
        {
          v22 = a2;
          goto LABEL_31;
        }
        if (v20)
          goto LABEL_51;
        return;
      }
      v14 = *(_DWORD *)v11 & 3;
      if (v10 == 2 && v11)
      {
        switch(v14)
        {
          case 1:
            v31 = *(_QWORD *)(v11 + 8);
            sub_22EFC5F80(&v31);
            return;
          case 3:
            v9 = *(_QWORD *)(v11 + 16);
            goto LABEL_5;
          case 2:
            v31 = *(_QWORD *)(v11 + 24);
            sub_22F402048(&v31, a2, a3, a4);
            return;
        }
      }
      if (v14)
        v15 = 0;
      else
        v15 = *a1 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(_QWORD *)(v15 + 8);
      goto LABEL_5;
    }
    if ((_DWORD)a4 == 1)
    {
      sub_22F0AAD88(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8, a2, a3, 0);
    }
    else if ((_DWORD)a4 == 2 && sub_22F0F0A4C(a1) != 6)
    {
      sub_22F0F08CC((uint64_t *)(v11 + 16));
LABEL_33:
      sub_22EFBA008();
      return;
    }
    if ((*(_BYTE *)(v11 + 8) & 4) != 0)
      sub_22E47DAC0(a2, "template ");
    v9 = sub_22F0F08CC((uint64_t *)(v11 + 16));
LABEL_5:
    (*(void (**)(unint64_t, llvm::raw_ostream *))(*(_QWORD *)v9 + 88))(v9, a2);
    return;
  }
  if ((*(_BYTE *)(a3 + 5) & 0x20) == 0
    || (*(_DWORD *)(v9 + 28) & 0x7F) != 0x20
    || (v16 = *(_QWORD *)(v9 + 40), (v16 & 7) != 0)
    || (v17 = v16 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    if ((_DWORD)a4 == 2)
    {
      v24 = v9;
      v25 = sub_22F0F0A4C(a1);
      v9 = v24;
      if (v25 != 6)
        goto LABEL_33;
    }
    goto LABEL_5;
  }
  v19 = sub_22F1D3238(v17);
  v20 = v18;
  v21 = (void *)*((_QWORD *)a2 + 4);
  if (v18 > *((_QWORD *)a2 + 3) - (_QWORD)v21)
  {
    v22 = a2;
    v23 = v19;
LABEL_31:
    llvm::raw_ostream::write(v22, v23);
    return;
  }
  if (v18)
  {
    v23 = v19;
LABEL_51:
    memcpy(v21, v23, v20);
    *((_QWORD *)a2 + 4) += v20;
  }
}

uint64_t sub_22F402348(uint64_t *a1, llvm::raw_ostream *a2)
{
  unint64_t v5[2];
  _QWORD v6[109];

  v6[108] = *MEMORY[0x24BDAC8D0];
  sub_22F1D4230((uint64_t)v6);
  v6[0] |= 0x800100uLL;
  sub_22E462F04(v5, (unsigned int *)v6);
  sub_22F402048(a1, a2, (uint64_t)v5, 1);
  return sub_22E54B4D4((uint64_t)v6);
}

uint64_t sub_22F4023E8(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22F402348((uint64_t *)a1, v2);
}

llvm::raw_ostream *sub_22F402410(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  char *v6;
  llvm::raw_ostream *v7;
  char *v8;

  v3 = *(llvm::raw_ostream **)(a1 + 1088);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 4, 0, 0);
      v7 = *(llvm::raw_ostream **)(a1 + 1088);
      v8 = sub_22F3A7DB4(a2);
      sub_22E47DAC0(v7, v8);
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
    }
    else
    {
      v6 = sub_22F3A7DB4(a2);
      sub_22E47DAC0(v3, v6);
    }
    sub_22F402544(a1);
    sub_22F4025EC((llvm::raw_ostream *)a1, *(_QWORD *)(a2 + 4));
    return (llvm::raw_ostream *)sub_22F402680(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 4, 0, 0);
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "<<<NULL>>>");
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
  }
  else
  {
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "<<<NULL>>>");
  }
}

uint64_t sub_22F402544(uint64_t a1)
{
  llvm::raw_ostream *v2;
  int v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t result;

  v2 = *(llvm::raw_ostream **)(a1 + 1088);
  v3 = *(unsigned __int8 *)(a1 + 1096);
  v4 = v2;
  if (v3)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 24))(v2, 3, 0, 0);
    v4 = *(llvm::raw_ostream **)(a1 + 1088);
  }
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  result = llvm::raw_ostream::operator<<();
  if (v3)
    return (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v2 + 32))(v2);
  return result;
}

llvm::raw_ostream *sub_22F4025EC(llvm::raw_ostream *result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;

  if (*((_QWORD *)result + 141))
  {
    v2 = a2;
    v3 = (uint64_t)result;
    v4 = HIDWORD(a2);
    sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " <");
    sub_22F402DE8(v3, v2);
    if (v2 != (_DWORD)v4)
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(v3 + 1088), ", ");
      sub_22F402DE8(v3, v4);
    }
    return sub_22E47DAC0(*(llvm::raw_ostream **)(v3 + 1088), ">");
  }
  return result;
}

uint64_t sub_22F402680(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a2 + 12);
  if ((v2 - 6) >= 2)
    return ((uint64_t (*)())((char *)sub_22F4026B0 + 4 * byte_22F4A8118[v2 - 1]))();
  return result;
}

llvm::raw_ostream *sub_22F4026B4(uint64_t a1, uint64_t a2)
{
  return sub_22F4032F0(*(llvm::raw_ostream **)(a1 + 1088), a2);
}

llvm::raw_ostream *sub_22F4026BC(uint64_t a1, uint64_t a2)
{
  return sub_22F403C28(*(llvm::raw_ostream **)(a1 + 1088), a2);
}

llvm::raw_ostream *sub_22F4026D0(uint64_t a1, uint64_t a2)
{
  return sub_22F4036B4(*(llvm::raw_ostream **)(a1 + 1088), a2);
}

llvm::raw_ostream *sub_22F4026E0(uint64_t a1, uint64_t a2)
{
  return sub_22F4032F0(*(llvm::raw_ostream **)(a1 + 1088), a2);
}

void sub_22F4026EC(llvm::raw_ostream **a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5, size_t a6)
{
  sub_22E47DAC0(a1[136], "TemplateArgument");
  if (HIDWORD(a3) && (_DWORD)a3)
    sub_22F4025EC((llvm::raw_ostream *)a1, a3);
  if (a4)
    sub_22F0F8AA0(a1, a4, a5, a6);
  sub_22F402778((uint64_t)a1, a2);
}

void sub_22F402778(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22F4027A8()
{
  uint64_t v0;

  return sub_22E47DAC0(*(llvm::raw_ostream **)(v0 + 1088), " null");
}

void sub_22F40281C()
{
  uint64_t v0;
  uint64_t v1;

  sub_22E47DAC0(*(llvm::raw_ostream **)(v0 + 1088), " type");
  sub_22F40287C(v0, *(_QWORD *)(v1 + 8));
}

uint64_t sub_22F402840()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F403CA0(*(llvm::raw_ostream **)(v0 + 1088), v1);
}

uint64_t sub_22F402854()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F403D9C(v0, v1);
}

uint64_t sub_22F402868()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F403D20(v0, v1);
}

void sub_22F40287C(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  sub_22F0FB2A4(a1, a2, 1);
}

void sub_22F4028D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::raw_ostream *v5;
  char *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  char *v9;
  llvm::raw_ostream *v10;
  int v11;
  uint64_t v12;
  char *v13;

  if (!a2)
  {
    v3 = *(_QWORD *)(a1 + 1088);
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 4, 0, 0);
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "<<<NULL>>>");
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
    else
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "<<<NULL>>>");
    }
    return;
  }
  v5 = *(llvm::raw_ostream **)(a1 + 1088);
  if (*(_BYTE *)(a2 + 16) == 57)
  {
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 24))(*(_QWORD *)(a1 + 1088), 2, 0, 0);
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "LocInfo Type");
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v5 + 32))(v5);
    }
    else
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "LocInfo Type");
    }
    sub_22F402544(a1);
    return;
  }
  if (*(_BYTE *)(a1 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 24))(*(_QWORD *)(a1 + 1088), 2, 0, 0);
    v8 = *(llvm::raw_ostream **)(a1 + 1088);
    v9 = (char *)sub_22F40A538(a2);
    v10 = sub_22E47DAC0(v8, v9);
    sub_22E47DAC0(v10, "Type");
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v5 + 32))(v5);
  }
  else
  {
    v6 = (char *)sub_22F40A538(a2);
    v7 = sub_22E47DAC0(v5, v6);
    sub_22E47DAC0(v7, "Type");
  }
  sub_22F402544(a1);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  sub_22F0FB2A4(a1, a2 & 0xFFFFFFFFFFFFFFF0, 0);
  if (sub_22F10D19C(a2) != (a2 & 0xFFFFFFFFFFFFFFF0))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " sugar");
  if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
  {
    v12 = *(_QWORD *)(a1 + 1088);
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(*(_QWORD *)(a1 + 1088), 1, 1, 0);
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " contains-errors");
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    }
    else
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " contains-errors");
    }
  }
  v11 = *(_DWORD *)(a2 + 16);
  if ((v11 & 0x400) != 0)
  {
    v13 = " dependent";
LABEL_28:
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v13);
    v11 = *(_DWORD *)(a2 + 16);
    goto LABEL_18;
  }
  if ((v11 & 0x200) != 0)
  {
    v13 = " instantiation_dependent";
    goto LABEL_28;
  }
LABEL_18:
  if ((v11 & 0x800) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " variably_modified");
    v11 = *(_DWORD *)(a2 + 16);
  }
  if ((v11 & 0x100) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " contains_unexpanded_pack");
    v11 = *(_DWORD *)(a2 + 16);
  }
  if ((v11 & 0x40000) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " imported");
  sub_22F402BA4(a1, a2);
}

void sub_22F402BA4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

_QWORD *sub_22F402BEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_22F114198(*(_QWORD *)(v1 + 24));
  return sub_22F0F8AA0(v0, v2, 0, 0);
}

void sub_22F402C14()
{
  JUMPOUT(0x22F402BF8);
}

void sub_22F402C1C()
{
  uint64_t v0;
  uint64_t v1;

  sub_22F100128(v0, v1);
}

llvm::raw_ostream *sub_22F402C34()
{
  llvm::raw_ostream *v0;
  uint64_t v1;

  return sub_22F10020C(v0, v1);
}

void sub_22F402C4C()
{
  uint64_t v0;
  uint64_t v1;

  sub_22F0FFFD4(v0, v1);
}

void sub_22F402C64()
{
  llvm::raw_ostream *v0;
  uint64_t v1;

  sub_22F1001A0(v0, v1);
}

void sub_22F402C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  a10 = *(_QWORD *)(v11 + 40);
  if (sub_22F0F084C(&a10) == 7)
    sub_22E47DAC0(*(llvm::raw_ostream **)(v10 + 1088), " using");
  sub_22F402BDC();
}

void sub_22F402CA8()
{
  uint64_t v0;

  sub_22F1104D0(v0);
  JUMPOUT(0x22F402BF4);
}

void sub_22F402CB4()
{
  uint64_t v0;

  sub_22F409D88(v0);
  JUMPOUT(0x22F402BF4);
}

void sub_22F402CC0()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_DWORD *)(v1 + 20))
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(v0 + 1088), " expansions ");
    llvm::raw_ostream::operator<<();
  }
  else
  {
    sub_22F402BDC();
  }
}

void sub_22F402CF0(int a1@<W8>)
{
  uint64_t v1;

  if ((a1 & 0x80000) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(v1 + 1088), " written as lvalue reference");
  else
    sub_22F402BDC();
}

_QWORD *sub_22F402D10()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_22F100270(v0, v1);
}

void sub_22F402D28()
{
  uint64_t v0;

  if (!*(_DWORD *)(v0 + 40))
    JUMPOUT(0x22F402D00);
  sub_22F402BDC();
}

void sub_22F402D40()
{
  JUMPOUT(0x22F402BF8);
}

uint64_t sub_22F402D48()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F4053A0(v0, v1);
}

llvm::raw_ostream *sub_22F402D60()
{
  llvm::raw_ostream *v0;
  uint64_t v1;

  return sub_22F4055F0(v0, v1);
}

_QWORD *sub_22F402D78()
{
  uint64_t v0;
  uint64_t v1;

  sub_22E47DAC0(*(llvm::raw_ostream **)(v0 + 1088), " ");
  return sub_22F402DE8(v0, *(_DWORD *)(v1 + 60));
}

void *sub_22F402DA0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F4053FC(v0, *(_QWORD *)(v1 + 16));
}

void *sub_22F402DB8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F4054F0(v0, v1);
}

uint64_t sub_22F402DD0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F405674(v0, v1);
}

_QWORD *sub_22F402DE8(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v5;
  int v6;
  char *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  char *__s1;
  int v20;

  result = *(_QWORD **)(a1 + 1128);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 1088);
    v6 = *(unsigned __int8 *)(a1 + 1096);
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 24))(*(_QWORD *)(a1 + 1088), 3, 0, 0);
      result = *(_QWORD **)(a1 + 1128);
    }
    if (a2 < 0)
    {
      a2 = sub_22F1E238C(result, a2);
      result = *(_QWORD **)(a1 + 1128);
    }
    sub_22F1E2F68((uint64_t)result, a2, 1, (uint64_t)&__s1);
    v7 = __s1;
    if (__s1)
    {
      if (!strcmp(__s1, *(const char **)(a1 + 1104)))
      {
        v10 = *(llvm::raw_ostream **)(a1 + 1088);
        if (v20 == *(_DWORD *)(a1 + 1112))
        {
          v11 = sub_22E47DAC0(v10, "col");
          v12 = (_BYTE *)*((_QWORD *)v11 + 4);
          if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
          {
            llvm::raw_ostream::write(v11);
          }
          else
          {
            *((_QWORD *)v11 + 4) = v12 + 1;
            *v12 = 58;
          }
          result = (_QWORD *)llvm::raw_ostream::operator<<();
          goto LABEL_11;
        }
        v15 = sub_22E47DAC0(v10, "line");
        v16 = (_BYTE *)*((_QWORD *)v15 + 4);
        if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
        {
          llvm::raw_ostream::write(v15);
        }
        else
        {
          *((_QWORD *)v15 + 4) = v16 + 1;
          *v16 = 58;
        }
        v17 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v18 = (_BYTE *)*((_QWORD *)v17 + 4);
        if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
        {
          llvm::raw_ostream::write(v17);
        }
        else
        {
          *((_QWORD *)v17 + 4) = v18 + 1;
          *v18 = 58;
        }
        result = (_QWORD *)llvm::raw_ostream::operator<<();
      }
      else
      {
        v8 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v7);
        v9 = (_BYTE *)*((_QWORD *)v8 + 4);
        if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
        {
          llvm::raw_ostream::write(v8);
        }
        else
        {
          *((_QWORD *)v8 + 4) = v9 + 1;
          *v9 = 58;
        }
        v13 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v14 = (_BYTE *)*((_QWORD *)v13 + 4);
        if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
        {
          llvm::raw_ostream::write(v13);
        }
        else
        {
          *((_QWORD *)v13 + 4) = v14 + 1;
          *v14 = 58;
        }
        result = (_QWORD *)llvm::raw_ostream::operator<<();
        *(_QWORD *)(a1 + 1104) = __s1;
      }
      *(_DWORD *)(a1 + 1112) = v20;
    }
    else
    {
      result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "<invalid sloc>");
    }
LABEL_11:
    if (v6)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_22F402FF0(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "capture");
  v4 = *a2;
  if ((*a2 & 2) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " byref");
    v4 = *a2;
  }
  if ((v4 & 4) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " nested");
    v4 = *a2;
  }
  if (v4 >= 8)
  {
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 32;
    }
    sub_22F0FD464(a1, *a2 & 0xFFFFFFFFFFFFFFF8);
  }
}

void sub_22F4030A0(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  llvm::raw_ostream *v5;

  v4 = *(unint64_t **)(a2 + 8);
  v5 = *(llvm::raw_ostream **)(a1 + 1088);
  if (v4)
  {
    sub_22E47DAC0(v5, "case ");
    sub_22F40287C(a1, *v4);
  }
  else
  {
    sub_22E47DAC0(v5, "default");
  }
  if (*(_BYTE *)(a2 + 16))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " selected");
}

uint64_t sub_22F403120(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  llvm::raw_ostream *v4;
  int v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;

  if (*(_QWORD *)(a2 + 40))
  {
    v3 = result;
    v4 = *(llvm::raw_ostream **)(result + 1088);
    v5 = *(unsigned __int8 *)(result + 1096);
    v6 = v4;
    if (v5)
    {
      (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, 6, 1, 0);
      v6 = *(llvm::raw_ostream **)(v3 + 1088);
    }
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 32;
    }
    result = sub_22EFC6724((uint64_t)v6, *(_QWORD *)(a2 + 40));
    if (v5)
      return (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v4 + 32))(v4);
  }
  return result;
}

void sub_22F4031D0(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void *sub_22F403208(uint64_t a1)
{
  llvm::raw_ostream *v1;
  void *v2;
  void *result;

  v1 = *(llvm::raw_ostream **)(a1 + 1088);
  v2 = (void *)*((_QWORD *)v1 + 4);
  if (*((_QWORD *)v1 + 3) - (_QWORD)v2 < 9uLL)
    return (void *)llvm::raw_ostream::write(v1, "protected");
  result = memcpy(v2, "protected", 9uLL);
  *((_QWORD *)v1 + 4) += 9;
  return result;
}

llvm::raw_ostream *sub_22F40326C(llvm::raw_ostream *this, unsigned int a2)
{
  size_t v3;
  const char *v4;
  void *v5;

  if (a2 > 7)
  {
    v4 = "invalid";
    v3 = 7;
  }
  else
  {
    v3 = qword_22F4A8CB0[a2];
    v4 = off_24FAC7540[a2];
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v3 <= *((_QWORD *)this + 3) - (_QWORD)v5)
  {
    memcpy(v5, v4, v3);
    *((_QWORD *)this + 4) += v3;
  }
  else
  {
    llvm::raw_ostream::write(this, v4);
  }
  return this;
}

llvm::raw_ostream *sub_22F4032F0(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;

  v3 = sub_22E47DAC0(a1, " Text=\"");
  v4 = *(const void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (v5 <= *((_QWORD *)v3 + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)v4);
  }
  return sub_22E47DAC0(v3, "\"");
}

llvm::raw_ostream *sub_22F403368(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  unsigned int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  void *v20;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Name=\"");
  v5 = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a1 + 1152);
  if (v6)
  {
    v7 = sub_22F3A8044(v6, v5 >> 12);
LABEL_3:
    v8 = *v7;
    goto LABEL_4;
  }
  v7 = sub_22F3A8078(v5 >> 12);
  if (v7)
    goto LABEL_3;
  v8 = "<not a builtin command>";
LABEL_4:
  v9 = sub_22E47DAC0(v4, v8);
  result = sub_22E47DAC0(v9, "\"");
  v11 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 7;
  if (v11 <= 4)
    result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7580[v11]);
  v12 = *(unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Arg[");
      v15 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v16 = sub_22E47DAC0(v15, "]=\"");
      v17 = *(_QWORD *)(a2 + 16) + v13;
      v18 = *(const void **)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      v20 = (void *)*((_QWORD *)v16 + 4);
      if (v19 <= *((_QWORD *)v16 + 3) - (_QWORD)v20)
      {
        if (v19)
        {
          memcpy(v20, v18, v19);
          *((_QWORD *)v16 + 4) += v19;
        }
      }
      else
      {
        v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v16, (const char *)v18);
      }
      result = sub_22E47DAC0(v16, "\"");
      ++v14;
      v13 += 24;
    }
    while (v12 != v14);
  }
  return result;
}

llvm::raw_ostream *sub_22F4034D4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  llvm::raw_ostream *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  const void *v13;
  unint64_t v14;
  void *v15;
  llvm::raw_ostream *v16;
  const void *v17;
  unint64_t v18;
  void *v19;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Name=\"");
  v5 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (v6 <= *((_QWORD *)v4 + 3) - (_QWORD)v7)
  {
    if (v6)
    {
      memcpy(v7, v5, *(_QWORD *)(a2 + 24));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  result = sub_22E47DAC0(v4, "\"");
  if (*(_DWORD *)(a2 + 48))
  {
    result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Attrs: ");
    if (*(_DWORD *)(a2 + 48))
    {
      v9 = 0;
      v10 = 56 * *(unsigned int *)(a2 + 48);
      do
      {
        v11 = *(_QWORD *)(a2 + 40);
        v12 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
        v13 = *(const void **)(v11 + v9 + 8);
        v14 = *(_QWORD *)(v11 + v9 + 16);
        v15 = (void *)*((_QWORD *)v12 + 4);
        if (v14 <= *((_QWORD *)v12 + 3) - (_QWORD)v15)
        {
          if (v14)
          {
            memcpy(v15, v13, *(_QWORD *)(v11 + v9 + 16));
            *((_QWORD *)v12 + 4) += v14;
          }
        }
        else
        {
          v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, (const char *)v13);
        }
        v16 = sub_22E47DAC0(v12, "=\"");
        v17 = *(const void **)(v11 + v9 + 40);
        v18 = *(_QWORD *)(v11 + v9 + 48);
        v19 = (void *)*((_QWORD *)v16 + 4);
        if (v18 <= *((_QWORD *)v16 + 3) - (_QWORD)v19)
        {
          if (v18)
          {
            memcpy(v19, v17, *(_QWORD *)(v11 + v9 + 48));
            *((_QWORD *)v16 + 4) += v18;
          }
        }
        else
        {
          v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v16, (const char *)v17);
        }
        result = sub_22E47DAC0(v16, "\"");
        v9 += 56;
      }
      while (v10 != v9);
    }
  }
  if ((*(_WORD *)(a2 + 12) & 0x400) != 0)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " SelfClosing");
  return result;
}

llvm::raw_ostream *sub_22F4036B4(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;

  v3 = sub_22E47DAC0(a1, " Name=\"");
  v4 = *(const void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (v5 <= *((_QWORD *)v3 + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)v4);
  }
  return sub_22E47DAC0(v3, "\"");
}

llvm::raw_ostream *sub_22F40372C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  unsigned int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Name=\"");
  v5 = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a1 + 1152);
  if (v6)
  {
    v7 = sub_22F3A8044(v6, (v5 >> 8) & 0xFFFFF);
LABEL_3:
    v8 = *v7;
    goto LABEL_4;
  }
  v7 = sub_22F3A8078((v5 >> 8) & 0xFFFFF);
  if (v7)
    goto LABEL_3;
  v8 = "<not a builtin command>";
LABEL_4:
  v9 = sub_22E47DAC0(v4, v8);
  result = sub_22E47DAC0(v9, "\"");
  v11 = *(unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
  {
    v12 = 0;
    v13 = 0;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Arg[");
      v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v15 = sub_22E47DAC0(v14, "]=\"");
      v16 = *(_QWORD *)(a2 + 16) + v12;
      v17 = *(const void **)(v16 + 8);
      v18 = *(_QWORD *)(v16 + 16);
      v19 = (void *)*((_QWORD *)v15 + 4);
      if (v18 <= *((_QWORD *)v15 + 3) - (_QWORD)v19)
      {
        if (v18)
        {
          memcpy(v19, v17, v18);
          *((_QWORD *)v15 + 4) += v18;
        }
      }
      else
      {
        v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, (const char *)v17);
      }
      result = sub_22E47DAC0(v15, "\"");
      ++v13;
      v12 += 24;
    }
    while (v11 != v13);
  }
  return result;
}

llvm::raw_ostream *sub_22F403874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  char *v7;
  char *v8;
  llvm::raw_ostream *result;
  int v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  size_t v13;
  const char *v14;
  size_t v15;
  void *v16;
  llvm::raw_ostream *v17;
  const char *v18;
  uint64_t v19;

  v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v7 = sub_22F3A7E54((*(_DWORD *)(a2 + 12) >> 29) & 3);
  sub_22E47DAC0(v6, v7);
  if (*(int *)(a2 + 12) >= 0)
    v8 = " implicitly";
  else
    v8 = " explicitly";
  result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v8);
  if (!*(_DWORD *)(a2 + 24))
    goto LABEL_10;
  v10 = *(_DWORD *)(a2 + 40);
  v11 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Param=\"");
  v12 = v11;
  if (v10 == -1)
  {
    v19 = *(_QWORD *)(a2 + 16);
    v18 = *(const char **)(v19 + 8);
    v15 = *(_QWORD *)(v19 + 16);
    v16 = (void *)*((_QWORD *)v11 + 4);
    if (v15 > *((_QWORD *)v12 + 3) - (_QWORD)v16)
    {
      v17 = v12;
      goto LABEL_8;
    }
    if (!v15)
      goto LABEL_9;
LABEL_16:
    memcpy(v16, v18, v15);
    *((_QWORD *)v12 + 4) += v15;
    goto LABEL_9;
  }
  v14 = sub_22F3A7E64(a2, a3);
  v15 = v13;
  v16 = (void *)*((_QWORD *)v12 + 4);
  if (v13 <= *((_QWORD *)v12 + 3) - (_QWORD)v16)
  {
    if (!v13)
      goto LABEL_9;
    v18 = v14;
    goto LABEL_16;
  }
  v17 = v12;
  v18 = v14;
LABEL_8:
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v17, v18);
LABEL_9:
  result = sub_22E47DAC0(v12, "\"");
LABEL_10:
  if (*(_DWORD *)(a2 + 40) <= 0xFFFFFFFD)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ParamIndex=");
    return (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  }
  return result;
}

llvm::raw_ostream *sub_22F4039E4(llvm::raw_ostream *result, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v4;
  uint64_t v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = result;
  if (*(_DWORD *)(a2 + 24))
  {
    v6 = *(_QWORD *)(a2 + 48);
    v7 = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " Param=\"");
    v8 = v7;
    if (v6)
    {
      v10 = (const char *)sub_22EFA613C(a2, a3);
      v11 = v9;
      v12 = (void *)*((_QWORD *)v8 + 4);
      if (v9 > *((_QWORD *)v8 + 3) - (_QWORD)v12)
      {
        v13 = v8;
        v14 = v10;
LABEL_5:
        v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13, v14);
LABEL_6:
        result = sub_22E47DAC0(v8, "\"");
        goto LABEL_7;
      }
      if (!v9)
        goto LABEL_6;
      v14 = v10;
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 16);
      v14 = *(const char **)(v19 + 8);
      v11 = *(_QWORD *)(v19 + 16);
      v12 = (void *)*((_QWORD *)v7 + 4);
      if (v11 > *((_QWORD *)v8 + 3) - (_QWORD)v12)
      {
        v13 = v8;
        goto LABEL_5;
      }
      if (!v11)
        goto LABEL_6;
    }
    memcpy(v12, v14, v11);
    *((_QWORD *)v8 + 4) += v11;
    goto LABEL_6;
  }
LABEL_7:
  if (*(_QWORD *)(a2 + 48))
  {
    sub_22E47DAC0(*((llvm::raw_ostream **)v4 + 136), " Position=<");
    v15 = *(_QWORD *)(a2 + 48);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = 4 * *(_QWORD *)(a2 + 48);
      v18 = 4 * (v15 - 1);
      do
      {
        llvm::raw_ostream::operator<<();
        if (v18 != v16)
          sub_22E47DAC0(*((llvm::raw_ostream **)v4 + 136), ", ");
        v16 += 4;
      }
      while (v17 != v16);
    }
    return sub_22E47DAC0(*((llvm::raw_ostream **)v4 + 136), ">");
  }
  return result;
}

llvm::raw_ostream *sub_22F403B58(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  unsigned int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  const void *v11;
  size_t v12;
  void *v13;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Name=\"");
  v5 = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a1 + 1152);
  if (v6)
  {
    v7 = sub_22F3A8044(v6, (v5 >> 8) & 0xFFFFF);
LABEL_3:
    v8 = *v7;
    goto LABEL_4;
  }
  v7 = sub_22F3A8078((v5 >> 8) & 0xFFFFF);
  if (v7)
    goto LABEL_3;
  v8 = "<not a builtin command>";
LABEL_4:
  v9 = sub_22E47DAC0(v4, v8);
  v10 = sub_22E47DAC0(v9, "\" CloseName=\"");
  v11 = *(const void **)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (void *)*((_QWORD *)v10 + 4);
  if (v12 <= *((_QWORD *)v10 + 3) - (_QWORD)v13)
  {
    if (v12)
    {
      memcpy(v13, v11, v12);
      *((_QWORD *)v10 + 4) += v12;
    }
  }
  else
  {
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, (const char *)v11);
  }
  return sub_22E47DAC0(v10, "\"");
}

llvm::raw_ostream *sub_22F403C28(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;

  v3 = sub_22E47DAC0(a1, " Text=\"");
  v4 = *(const void **)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (v5 <= *((_QWORD *)v3 + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)v4);
  }
  return sub_22E47DAC0(v3, "\"");
}

uint64_t sub_22F403CA0(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  v3 = sub_22E47DAC0(a1, " integral ");
  sub_22E466FDC(a2, (uint64_t)&v5);
  result = llvm::APInt::print((llvm::APInt *)&v5, v3);
  if (v6 >= 0x41)
  {
    result = v5;
    if (v5)
      return MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F403D20(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  sub_22F0F0834(&v5, *(_QWORD *)(a2 + 8));
  if (sub_22F0F084C(&v5) == 7)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " using");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " template ");
  sub_22F0F0834(&v5, *(_QWORD *)(a2 + 8));
  return sub_22F402348(&v5, *(llvm::raw_ostream **)(a1 + 1088));
}

uint64_t sub_22F403D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  sub_22F0F0834(&v5, *(_QWORD *)(a2 + 8));
  if (sub_22F0F084C(&v5) == 7)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " using");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " template expansion ");
  sub_22F0F0834(&v5, *(_QWORD *)(a2 + 8));
  return sub_22F402348(&v5, *(llvm::raw_ostream **)(a1 + 1088));
}

llvm::raw_ostream *sub_22F403E18(llvm::raw_ostream *result, __int16 *a2)
{
  llvm::raw_ostream *v3;
  __int16 v4;

  v3 = result;
  v4 = *a2;
  if ((*a2 & 0x2000) != 0)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " has_init");
    v4 = *a2;
  }
  if ((v4 & 0x1000) != 0)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), " has_var");
    v4 = *a2;
  }
  if ((v4 & 0x800) != 0)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), " has_else");
    v4 = *a2;
  }
  if ((v4 & 0x700) == 0x100)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), " constexpr");
    v4 = *a2;
  }
  if ((v4 & 0x600) == 0x200)
  {
    sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), " ");
    if ((*a2 & 0x700) == 0x300)
      sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), "!");
    return sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), "consteval");
  }
  return result;
}

llvm::raw_ostream *sub_22F403F00(llvm::raw_ostream *result, __int16 *a2)
{
  llvm::raw_ostream *v2;
  __int16 v3;

  v2 = result;
  v3 = *a2;
  if ((*a2 & 0x100) != 0)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " has_init");
    v3 = *a2;
  }
  if ((v3 & 0x200) != 0)
    return sub_22E47DAC0(*((llvm::raw_ostream **)v2 + 136), " has_var");
  return result;
}

llvm::raw_ostream *sub_22F403F58(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *result;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " '");
  v5 = (char *)sub_22F3F1AB0(a2);
  v6 = sub_22E47DAC0(v4, v5);
  result = sub_22E47DAC0(v6, "'");
  if (*(_BYTE *)(a2 + 24))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " side_entry");
  return result;
}

uint64_t sub_22F403FD8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  unint64_t v6;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " '");
  v5 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) & 7) == 0 && v6 != 0)
  {
    v9 = *(unsigned int **)(v6 + 16);
    v12 = *v9;
    v10 = v9 + 4;
    v11 = v12;
    v13 = (void *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v12 <= *((_QWORD *)v5 + 3) - (_QWORD)v13)
    {
      if (v11)
      {
        memcpy(v13, v10, v11);
        *((_QWORD *)v5 + 4) += v11;
      }
    }
    else
    {
      v5 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, (const char *)v10);
    }
  }
  sub_22E47DAC0(v5, "'");
  return sub_22F402544(a1);
}

llvm::raw_ostream *sub_22F404090(llvm::raw_ostream *result, unsigned int *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = (uint64_t)result;
  v4 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " adl");
    v4 = *a2;
  }
  if ((v4 & 0x100000) != 0)
    return (llvm::raw_ostream *)sub_22F0FF614(v3, *(_QWORD *)((char *)&a2[2 * ((v4 >> 18) & 1) + 2 + 2 * a2[4]]+ ((unint64_t)v4 >> 24)));
  return result;
}

llvm::raw_ostream *sub_22F404100(llvm::raw_ostream **a1, unsigned int *a2)
{
  uint64_t v4;
  char *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;

  v4 = sub_22F41FBE0(a2[1] & 0x3F);
  if (v4)
  {
    v5 = (char *)v4;
    v6 = sub_22E47DAC0(a1[136], " '");
    v7 = sub_22E47DAC0(v6, v5);
    sub_22E47DAC0(v7, "'");
  }
  return sub_22F404090((llvm::raw_ostream *)a1, a2);
}

llvm::raw_ostream *sub_22F404168(uint64_t a1, unsigned __int8 *a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  char *v7;
  llvm::raw_ostream *result;
  unint64_t v9;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " <");
  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  if (*(_BYTE *)(a1 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a1 + 1088), 1, 0, 0);
    v6 = *(llvm::raw_ostream **)(a1 + 1088);
    v7 = sub_22F3C1C54((*(_DWORD *)a2 >> 18) & 0x7F);
    sub_22E47DAC0(v6, v7);
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v4 + 32))(v4);
  }
  else
  {
    v5 = sub_22F3C1C54((*(_DWORD *)a2 >> 18) & 0x7F);
    sub_22E47DAC0(v4, v5);
  }
  sub_22F0FFAF4(*(llvm::raw_ostream **)(a1 + 1088), (uint64_t)a2);
  result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), ">");
  if ((a2[3] & 4) != 0)
  {
    v9 = *(_QWORD *)sub_22EFFB618(a2);
    return (llvm::raw_ostream *)sub_22F0FF614(a1, v9);
  }
  return result;
}

void sub_22F404254(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  sub_22F0FD464(a1, *((_QWORD *)a2 + 2));
  v4 = *a2;
  v5 = &a2[4 * ((v4 >> 18) & 1) + 8];
  if ((v4 & 0x100000) == 0)
    v5 = a2 + 4;
  if (*((_QWORD *)a2 + 2) != *(_QWORD *)v5)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " (");
    v6 = *a2;
    if ((v6 & 0x100000) != 0)
      v7 = (uint64_t *)&a2[4 * ((v6 >> 18) & 1) + 8];
    else
      v7 = (uint64_t *)(a2 + 4);
    sub_22F0FD464(a1, *v7);
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), ")");
    v4 = *a2;
  }
  v8 = ((v4 >> 23) & 3) - 1;
  if (v8 <= 2)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC75A8[v8]);
}

llvm::raw_ostream *sub_22F404338(uint64_t a1, unsigned __int8 *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *result;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " (");
  if ((a2[2] & 8) == 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "no ");
  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "ADL) = '");
  v5 = (llvm::raw_ostream *)sub_22EFC6724((uint64_t)v4, *((_QWORD *)a2 + 2));
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 39;
  }
  v7 = *a2;
  v8 = v7 == 211;
  if (v7 == 211)
    v9 = a2;
  else
    v9 = 0;
  v10 = v9 + 64;
  if (v8)
    v11 = v10;
  else
    v11 = a2 + 80;
  v12 = *((unsigned int *)a2 + 1);
  if (!(_DWORD)v12)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " empty");
  v13 = 8 * v12;
  do
  {
    v11 += 8;
    result = (llvm::raw_ostream *)sub_22F402544(a1);
    v13 -= 8;
  }
  while (v13);
  return result;
}

llvm::raw_ostream *sub_22F404420(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  int v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *result;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = *(unsigned __int8 *)(a1 + 1096);
  v6 = v4;
  if (v5)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, 2, 1, 0);
    v6 = *(llvm::raw_ostream **)(a1 + 1088);
  }
  v7 = sub_22E47DAC0(v6, " ");
  v8 = sub_22F3AEA44(*(_QWORD *)(a2 + 16));
  v9 = sub_22E47DAC0(v7, v8);
  sub_22E47DAC0(v9, "Decl");
  if (v5)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v4 + 32))(v4);
  v10 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "='");
  (*(void (**)(_QWORD, llvm::raw_ostream *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), v10);
  sub_22E47DAC0(v10, "'");
  result = (llvm::raw_ostream *)sub_22F402544(a1);
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " isFreeIvar");
  return result;
}

void *sub_22F404530(llvm::raw_ostream *a1, _DWORD *a2)
{
  llvm::raw_ostream *v3;
  size_t v4;
  char *v5;
  size_t v6;
  void *result;

  v3 = sub_22E47DAC0(a1, " ");
  v5 = sub_22F3C1330((*a2 >> 18) & 0xF);
  v6 = v4;
  result = (void *)*((_QWORD *)v3 + 4);
  if (v4 > *((_QWORD *)v3 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(v3, v5);
  if (v4)
  {
    result = memcpy(result, v5, v4);
    *((_QWORD *)v3 + 4) += v6;
  }
  return result;
}

uint64_t sub_22F4045B4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 1088);
  if (*(_BYTE *)(a1 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 24))(*(_QWORD *)(a1 + 1088), 6, 1, 0);
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    llvm::raw_ostream::operator<<();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  }
  else
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    return llvm::raw_ostream::operator<<();
  }
}

uint64_t sub_22F40464C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 1088);
  if (*(_BYTE *)(a1 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 6, 1, 0);
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    sub_22F3C1710(a2);
    llvm::raw_ostream::operator<<();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  else
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    sub_22F3C1710(a2);
    return llvm::raw_ostream::operator<<();
  }
}

llvm::raw_ostream *sub_22F4046FC(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 1088);
  if (*(_BYTE *)(a1 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a1 + 1088), 6, 1, 0);
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    sub_22EFF9798(a2, *(llvm::raw_ostream **)(a1 + 1088));
    return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
  else
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    return sub_22EFF9798(a2, *(llvm::raw_ostream **)(a1 + 1088));
  }
}

void sub_22F40479C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if ((a2 & 2) != 0)
  {
    v2 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " field ");
      sub_22F0FD464(a1, v2);
    }
  }
}

llvm::raw_ostream *sub_22F4047E8(uint64_t a1, int *a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  size_t v8;
  char *v9;
  size_t v10;
  void *v11;
  llvm::raw_ostream *result;
  unsigned int v13;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  if ((*a2 & 0x780000) != 0)
    v5 = "prefix";
  else
    v5 = "postfix";
  v6 = sub_22E47DAC0(v4, v5);
  v7 = sub_22E47DAC0(v6, " '");
  v9 = sub_22EFFA120((*a2 >> 18) & 0x1F);
  v10 = v8;
  v11 = (void *)*((_QWORD *)v7 + 4);
  if (v8 <= *((_QWORD *)v7 + 3) - (_QWORD)v11)
  {
    if (v8)
    {
      memcpy(v11, v9, v8);
      *((_QWORD *)v7 + 4) += v10;
    }
  }
  else
  {
    v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v7, v9);
  }
  result = sub_22E47DAC0(v7, "'");
  v13 = *a2;
  if ((*a2 & 0x800000) == 0)
  {
    result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " cannot overflow");
    v13 = *a2;
  }
  if ((v13 & 0x1000000) != 0)
    return (llvm::raw_ostream *)sub_22F0FF614(a1, *((_QWORD *)a2 + 3));
  return result;
}

void sub_22F4048F0(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F20D5C0((*(_DWORD *)a2 >> 18) & 0xF);
  sub_22E47DAC0(v4, v5);
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
    sub_22F40287C(a1, **(_QWORD **)(a2 + 16));
}

llvm::raw_ostream *sub_22F404968(uint64_t a1, unsigned int *a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *result;
  unint64_t v8;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  if ((*a2 & 0x40000) != 0)
    v5 = "->";
  else
    v5 = ".";
  v6 = sub_22E47DAC0(v4, v5);
  (*(void (**)(_QWORD, llvm::raw_ostream *))(**((_QWORD **)a2 + 3) + 88))(*((_QWORD *)a2 + 3), v6);
  result = (llvm::raw_ostream *)sub_22F402544(a1);
  v8 = (((unint64_t)*a2 >> 22) & 3) - 1;
  if (v8 <= 2)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC75A8[v8]);
  return result;
}

llvm::raw_ostream *sub_22F404A08(uint64_t a1, _DWORD *a2)
{
  llvm::raw_ostream *v4;
  size_t v5;
  char *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  uint64_t v10;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " '");
  v6 = sub_22EFFBA38((*a2 >> 18) & 0x3F);
  v7 = v5;
  v8 = (void *)*((_QWORD *)v4 + 4);
  if (v5 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
  {
    if (v5)
    {
      memcpy(v8, v6, v5);
      *((_QWORD *)v4 + 4) += v7;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, v6);
  }
  result = sub_22E47DAC0(v4, "'");
  if ((*a2 & 0x1000000) != 0)
  {
    v10 = 8;
    if (*a2 == 113)
      v10 = 12;
    return (llvm::raw_ostream *)sub_22F0FF614(a1, *(_QWORD *)&a2[v10]);
  }
  return result;
}

void sub_22F404AE0(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  size_t v5;
  char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " '");
  v6 = sub_22EFFBA38((*(_DWORD *)a2 >> 18) & 0x3F);
  v7 = v5;
  v8 = (void *)*((_QWORD *)v4 + 4);
  if (v5 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
  {
    if (v5)
    {
      memcpy(v8, v6, v5);
      *((_QWORD *)v4 + 4) += v7;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, v6);
  }
  sub_22E47DAC0(v4, "' ComputeLHSTy=");
  sub_22F0FB2A4(a1, *(_QWORD *)(a2 + 32), 1);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ComputeResultTy=");
  sub_22F0FB2A4(a1, *(_QWORD *)(a2 + 40), 1);
  if ((*(_DWORD *)a2 & 0x1000000) != 0)
  {
    v9 = 32;
    if (*(_DWORD *)a2 == 113)
      v9 = 48;
    sub_22F0FF614(a1, *(_QWORD *)(a2 + v9));
  }
}

uint64_t sub_22F404BE8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  unint64_t v5;
  llvm::raw_ostream *v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) & 7) == 0 && v5 != 0)
  {
    v8 = v4;
    v9 = *(unsigned int **)(v5 + 16);
    v12 = *v9;
    v10 = v9 + 4;
    v11 = v12;
    v14 = *((_QWORD *)v4 + 3);
    v13 = (void *)*((_QWORD *)v4 + 4);
    if (v12 <= (unint64_t)(v14 - (_QWORD)v13))
    {
      if (v11)
      {
        memcpy(v13, v10, v11);
        *((_QWORD *)v8 + 4) += v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, (const char *)v10);
    }
  }
  return sub_22F402544(a1);
}

llvm::raw_ostream *sub_22F404C8C(uint64_t a1, unsigned __int8 *a2)
{
  llvm::raw_ostream *result;
  unint64_t v5;

  result = sub_22F0FFD24(a1, (uint64_t)a2);
  if ((a2[3] & 4) != 0)
  {
    v5 = *(_QWORD *)sub_22EFFB618(a2);
    return (llvm::raw_ostream *)sub_22F0FF614(a1, v5);
  }
  return result;
}

void sub_22F404CD4(uint64_t a1, int *a2)
{
  int v4;

  sub_22F40287C(a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 48));
  v4 = *a2;
  if ((*a2 & 0x40000) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " elidable");
    v4 = *a2;
  }
  if ((v4 & 0x100000) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " list");
    v4 = *a2;
  }
  if ((v4 & 0x200000) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " std::initializer_list");
    v4 = *a2;
  }
  if ((v4 & 0x400000) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " zeroing");
}

void sub_22F404D74(uint64_t a1, int *a2)
{
  int v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;

  v4 = *a2;
  if ((*a2 & 0x40000) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " global");
    v4 = *a2;
  }
  if ((v4 & 0x80000) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " array");
  if (*((_QWORD *)a2 + 2))
  {
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 32;
    }
    sub_22F0FD464(a1, *((_QWORD *)a2 + 2));
  }
}

void sub_22F404E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 4) != 0)
  {
    v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    if (v2)
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " extended by ");
      sub_22F0FD464(a1, v2);
    }
  }
}

void sub_22F404E5C(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " selector=");
  v7 = sub_22F3C79F4(a2);
  sub_22F1D3D6C(&v7, *(llvm::raw_ostream **)(a1 + 1088));
  v4 = *(unsigned __int8 *)(a2 + 26);
  if (v4 == 3)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " super (instance)");
  }
  else if (v4 == 2)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " super (class)");
  }
  else if (!*(_BYTE *)(a2 + 26))
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " class=");
    if (*(_BYTE *)(a2 + 26) || (v6 = *(unint64_t **)(a2 + 40)) == 0)
      v5 = 0;
    else
      v5 = *v6;
    sub_22F0FB2A4(a1, v5, 1);
  }
}

void sub_22F404F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " selector=");
    v4 = *(_QWORD *)(a2 + 40);
    sub_22F1D3D6C(&v4, *(llvm::raw_ostream **)(a1 + 1088));
  }
}

llvm::raw_ostream *sub_22F404F84(uint64_t a1, _QWORD *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  unint64_t v7;
  llvm::raw_ostream *result;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  if ((a2[2] & 4) != 0)
  {
    sub_22E47DAC0(v4, " Kind=MethodRef Getter=\"");
    v7 = a2[2];
    if (v7 >= 8)
    {
      v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 40);
      sub_22F1D3D6C(&v11, *(llvm::raw_ostream **)(a1 + 1088));
    }
    else
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "(null)");
    }
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "\" Setter=\"");
    if ((a2[3] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v11 = *(_QWORD *)((a2[3] & 0xFFFFFFFFFFFFFFF8) + 40);
      sub_22F1D3D6C(&v11, *(llvm::raw_ostream **)(a1 + 1088));
    }
    else
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "(null)");
    }
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "\"");
  }
  else
  {
    v5 = sub_22E47DAC0(v4, " Kind=PropertyRef Property=\"");
    (*(void (**)(unint64_t, llvm::raw_ostream *))(*(_QWORD *)(a2[2] & 0xFFFFFFFFFFFFFFF8) + 88))(a2[2] & 0xFFFFFFFFFFFFFFF8, v5);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 34;
    }
  }
  if ((a2[5] & 6) == 2)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " super");
  result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Messaging=");
  v9 = a2[3];
  if ((~*((_DWORD *)a2 + 6) & 6) == 0)
  {
    v10 = "Getter&Setter";
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v10);
  }
  if ((v9 & 2) != 0)
  {
    v10 = "Getter";
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v10);
  }
  if ((v9 & 4) != 0)
  {
    v10 = "Setter";
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v10);
  }
  return result;
}

void sub_22F405130(uint64_t a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_22E9D848C(*(_QWORD *)(*(_QWORD *)(a2[4] + 8) & 0xFFFFFFFFFFFFFFF0)))
    v4 = " Kind=ArraySubscript GetterForArray=\"";
  else
    v4 = " Kind=DictionarySubscript GetterForDictionary=\"";
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v4);
  v5 = a2[5];
  if (v5)
  {
    v8 = *(_QWORD *)(v5 + 40);
    sub_22F1D3D6C(&v8, *(llvm::raw_ostream **)(a1 + 1088));
  }
  else
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "(null)");
  }
  if (sub_22E9D848C(*(_QWORD *)(*(_QWORD *)(a2[4] + 8) & 0xFFFFFFFFFFFFFFF0)))
    v6 = "\" SetterForArray=\"";
  else
    v6 = "\" SetterForDictionary=\"";
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v6);
  v7 = a2[6];
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 40);
    sub_22F1D3D6C(&v8, *(llvm::raw_ostream **)(a1 + 1088));
  }
  else
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "(null)");
  }
}

llvm::raw_ostream *sub_22F405230(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  int v5;
  unsigned int i;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char v22;
  uint64_t v23;

  result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = *(_DWORD *)(a2 + 28);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = sub_22F3C3714(a2, i);
      sub_22F0FB680(a1, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " = ");
      sub_22F3C3720(a2, i, &v15);
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " begin ");
      sub_22F0F8D78(a1, v15);
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " end ");
      result = (llvm::raw_ostream *)sub_22F0F8D78(a1, v16);
      if (v17)
      {
        sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " step ");
        result = (llvm::raw_ostream *)sub_22F0F8D78(a1, v17);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F40533C(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " '");
  sub_22F0D9044(*(_DWORD **)(a2 + 24), *(_QWORD *)(a1 + 1088), 0, (__int128 *)(a1 + 1136), 0, "\n", 1uLL, *(_QWORD *)(a1 + 1120));
  return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), "'");
}

uint64_t sub_22F4053A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (((unint64_t)*(unsigned int *)(a2 + 16) >> 19) & 0xF) - 2;
  if (v3 <= 6)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC75F0[v3]);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

void *sub_22F4053FC(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;
  size_t v6;
  char *v7;
  size_t v8;
  void *result;

  v4 = a2 >> 19;
  if (((a2 >> 19) & 0x20) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " noreturn");
  if ((v4 & 0x40) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " produces_result");
  if ((v4 & 0x700) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " regparm ");
    llvm::raw_ostream::operator<<();
  }
  v5 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v7 = sub_22F40A550((a2 >> 19) & 0x1F);
  v8 = v6;
  result = (void *)*((_QWORD *)v5 + 4);
  if (v6 > *((_QWORD *)v5 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(v5, v7);
  if (v6)
  {
    result = memcpy(result, v7, v6);
    *((_QWORD *)v5 + 4) += v8;
  }
  return result;
}

void *sub_22F4054F0(uint64_t a1, uint64_t a2)
{
  char *v4;
  _BYTE v6[80];
  _BYTE v7[12];
  int v8;

  sub_22E4913B4(a2, (uint64_t)v7);
  if ((v7[2] & 2) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " trailing_return");
  if ((sub_22E47E20C(a2) & 1) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " const");
  if ((sub_22E47E20C(a2) & 4) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " volatile");
  if ((sub_22E47E20C(a2) & 2) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " restrict");
  sub_22E4913B4(a2, (uint64_t)v6);
  if ((v6[2] & 1) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " variadic");
  if (v8 == 1)
  {
    v4 = " &";
    goto LABEL_15;
  }
  if (v8 == 2)
  {
    v4 = " &&";
LABEL_15:
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v4);
  }
  return sub_22F4053FC(a1, *(_QWORD *)(a2 + 16));
}

llvm::raw_ostream *sub_22F4055F0(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (uint64_t)result;
  if ((*(_DWORD *)(a2 + 16) & 0x180000) == 0x80000)
    result = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " decltype(auto)");
  if (*(_QWORD *)(a2 + 24) <= 0xFuLL && (*(_BYTE *)(a2 + 17) & 4) == 0)
    result = sub_22E47DAC0(*(llvm::raw_ostream **)(v3 + 1088), " undeduced");
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
    return (llvm::raw_ostream *)sub_22F0F8AA0((_QWORD *)v3, v4, 0, 0);
  return result;
}

uint64_t sub_22F405674(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if ((*(_BYTE *)(a2 + 18) & 8) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " alias");
  v5 = *(_QWORD *)(a2 + 32);
  if (sub_22F0F084C(&v5) == 7)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " using");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = *(_QWORD *)(a2 + 32);
  return sub_22F402348(&v5, *(llvm::raw_ostream **)(a1 + 1088));
}

void sub_22F405700(uint64_t a1, uint64_t a2)
{
  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8)));
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " __module_private__");
}

void sub_22F405768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  char *v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 72);
  if ((v4 & 0x8000000000) != 0)
  {
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
    if ((v4 & 0x10000000000) != 0)
      v6 = " class";
    else
      v6 = " struct";
    sub_22E47DAC0(v5, v6);
  }
  sub_22F403120(a1, a2);
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " __module_private__");
  if ((*(_BYTE *)(a2 + 77) & 2) != 0)
  {
    v7 = sub_22E496830(a2);
    sub_22F40287C(a1, v7);
  }
}

llvm::raw_ostream *sub_22F405800(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  int v6;
  size_t v7;
  char *v8;
  size_t v9;
  void *v10;
  llvm::raw_ostream *result;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 1088));
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = nullsub_910((unsigned __int16)*(_DWORD *)(a2 + 72) >> 13);
  v8 = sub_22F112570(v6);
  v9 = v7;
  v10 = (void *)*((_QWORD *)v4 + 4);
  if (v7 <= *((_QWORD *)v4 + 3) - (_QWORD)v10)
  {
    if (v7)
    {
      memcpy(v10, v8, v7);
      *((_QWORD *)v4 + 4) += v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v4, v8);
  }
  result = (llvm::raw_ostream *)sub_22F403120(a1, a2);
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
    result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " __module_private__");
  if ((*(_BYTE *)(a2 + 74) & 1) != 0)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " definition");
  return result;
}

void sub_22F405904(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  sub_22F403120((uint64_t)a1, a2);
  sub_22F40287C((uint64_t)a1, *(_QWORD *)(a2 + 48));
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 56);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      sub_22F0F8AA0(a1, v7, 0, 0);
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t sub_22F405968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " extended by ");
  sub_22F0FD464(a1, *(_QWORD *)(a2 + 48));
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " mangling ");
  v4 = *(_QWORD *)(a1 + 1088);
  if (!*(_BYTE *)(a1 + 1096))
    return llvm::raw_ostream::operator<<();
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a1 + 1088), 6, 1, 0);
  llvm::raw_ostream::operator<<();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
}

void sub_22F405A14(uint64_t a1, uint64_t a2)
{
  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)(a2 + 48));
  if ((*(_BYTE *)(a2 + 68) & 2) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " mutable");
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " __module_private__");
}

llvm::raw_ostream *sub_22F405A84(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unsigned int v6;
  const void *v7;
  llvm::raw_ostream *result;
  size_t v9;
  llvm::raw_ostream *v10;
  void *v11;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *(_DWORD *)(a2 + 36) - 1;
  if (v6 <= 4)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7650[v6]);
  v7 = (const void *)(a2 + 40);
  result = (llvm::raw_ostream *)strlen((const char *)(a2 + 40));
  if (result)
  {
    v9 = (size_t)result;
    v10 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (v9 <= *((_QWORD *)v10 + 3) - (_QWORD)v11)
    {
      memcpy(v11, v7, v9);
      *((_QWORD *)v10 + 4) += v9;
    }
    else
    {
      v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, (const char *)v7);
    }
    return sub_22E47DAC0(v10, "\"");
  }
  return result;
}

llvm::raw_ostream *sub_22F405B80(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  size_t v4;
  void *v5;
  llvm::raw_ostream *v6;
  const char *v7;
  size_t v8;
  void *v9;

  v3 = sub_22E47DAC0(a1, " \"");
  v4 = strlen((const char *)(a2 + 48));
  v5 = (void *)*((_QWORD *)v3 + 4);
  if (v4 <= *((_QWORD *)v3 + 3) - (_QWORD)v5)
  {
    if (v4)
    {
      memcpy(v5, (const void *)(a2 + 48), v4);
      *((_QWORD *)v3 + 4) += v4;
    }
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)(a2 + 48));
  }
  v6 = sub_22E47DAC0(v3, "\" \"");
  v7 = (const char *)(a2 + 48 + *(_QWORD *)(a2 + 40));
  v8 = strlen(v7);
  v9 = (void *)*((_QWORD *)v6 + 4);
  if (v8 <= *((_QWORD *)v6 + 3) - (_QWORD)v9)
  {
    if (v8)
    {
      memcpy(v9, v7, v8);
      *((_QWORD *)v6 + 4) += v8;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, v7);
  }
  return sub_22E47DAC0(v6, "\"");
}

llvm::raw_ostream *sub_22F405C80(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  int v5;
  char *v6;

  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)(a2 + 48));
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " combiner");
  result = (llvm::raw_ostream *)sub_22F402544(a1);
  if (*(_QWORD *)(a2 + 96))
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " initializer");
    result = (llvm::raw_ostream *)sub_22F402544(a1);
    v5 = (*(unsigned __int16 *)(a2 + 64) >> 13) & 3;
    if (v5 == 1)
    {
      v6 = " omp_priv = ";
    }
    else
    {
      if (v5 != 2)
        return result;
      v6 = " omp_priv ()";
    }
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v6);
  }
  return result;
}

_QWORD *sub_22F405D38(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  sub_22F403120(a1, a2);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " inline");
  result = (_QWORD *)sub_22F3B25B0(a2);
  if ((result & 1) == 0)
  {
    v5 = sub_22EFD8C88(a2);
    return sub_22F0F8AA0((_QWORD *)a1, v5, "original", 8uLL);
  }
  return result;
}

void sub_22F405DA8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = sub_22EFD8BB4(a2);
  sub_22F0FD464(a1, v6);
}

uint64_t sub_22F405E04(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    sub_22F0FD464(a1, *(_QWORD *)(a2 + 136));
    if (*(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 128))
      goto LABEL_8;
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " (");
    sub_22F0FD464(a1, *(_QWORD *)(a2 + 128));
    v4 = *(llvm::raw_ostream **)(a1 + 1088);
    v5 = ")";
  }
  else
  {
    v4 = *(llvm::raw_ostream **)(a1 + 1088);
    if ((*(_BYTE *)(a2 + 60) & 3) == 1)
      v5 = " typename";
    else
      v5 = " class";
  }
  sub_22E47DAC0(v4, v5);
LABEL_8:
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " depth ");
  sub_22EFE9130(a2);
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v6, " index ");
  sub_22EFEB210(a2);
  llvm::raw_ostream::operator<<();
  if (sub_22EFEB240(a2))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ...");
  return sub_22F403120(a1, a2);
}

uint64_t sub_22F405F20(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;

  sub_22F40287C(a1, *(_QWORD *)(a2 + 48));
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " depth ");
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v4, " index ");
  llvm::raw_ostream::operator<<();
  if (*(_BYTE *)(a2 + 80))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ...");
  return sub_22F403120(a1, a2);
}

uint64_t sub_22F405F9C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " depth ");
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v4, " index ");
  llvm::raw_ostream::operator<<();
  if (*(_BYTE *)(a2 + 80))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ...");
  return sub_22F403120(a1, a2);
}

uint64_t sub_22F406010(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *(_QWORD *)(a2 + 64);
  if (v6)
  {
    v7 = *(llvm::raw_ostream **)(a1 + 1088);
    v8 = sub_22EFC72E8(a2);
    sub_22F0AAD88(v6, v7, (__int128 *)(v8 + 15104), 0);
  }
  return sub_22EFC6724(*(_QWORD *)(a1 + 1088), *(_QWORD *)(a2 + 40));
}

void sub_22F406098(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  sub_22F0FD464(a1, *(_QWORD *)(a2 + 64));
}

uint64_t sub_22F4060EC(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *(_QWORD *)(a2 + 72);
  if (v6)
  {
    v7 = *(llvm::raw_ostream **)(a1 + 1088);
    v8 = sub_22EFC72E8(a2);
    sub_22F0AAD88(v6, v7, (__int128 *)(v8 + 15104), 0);
  }
  return sub_22EFC6724(*(_QWORD *)(a1 + 1088), *(_QWORD *)(a2 + 40));
}

void sub_22F406174(uint64_t a1, _QWORD *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = a2[8];
  if (v6)
  {
    v7 = *(llvm::raw_ostream **)(a1 + 1088);
    v8 = sub_22EFC72E8((unint64_t)a2);
    sub_22F0AAD88(v6, v7, (__int128 *)(v8 + 15104), 0);
  }
  sub_22EFC6724(*(_QWORD *)(a1 + 1088), a2[5]);
  sub_22F40287C(a1, a2[6]);
}

void sub_22F406208(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  sub_22F4031D0(a1, (*(_DWORD *)(a2 + 28) >> 13) & 3);
}

void sub_22F406260(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;

  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)(a2 + 48));
  v4 = *(_BYTE *)(a2 + 88);
  if ((v4 & 8) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " synthesize");
    v4 = *(_BYTE *)(a2 + 88);
  }
  v5 = v4 & 7;
  if (v5 <= 4)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7678[v5]);
}

void sub_22F4062D4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  if ((*(_QWORD *)(a2 + 56) & 0x20000) != 0)
    v5 = " -";
  else
    v5 = " +";
  sub_22E47DAC0(v4, v5);
  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)(a2 + 80));
  if ((*(_BYTE *)(a2 + 58) & 4) != 0)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " variadic");
}

void sub_22F406350(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;

  sub_22F403120(a1, a2);
  v4 = *(unsigned __int16 *)(a2 + 88) >> 14;
  if (v4 == 1)
  {
    v5 = " covariant";
  }
  else
  {
    if (v4 != 2)
      goto LABEL_6;
    v5 = " contravariant";
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v5);
LABEL_6:
  if (*(_DWORD *)(a2 + 96))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " bounded");
  sub_22F40287C(a1, *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8)));
}

_QWORD *sub_22F4063D8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  sub_22F403120((uint64_t)a1, a2);
  sub_22F0F8AA0(a1, *(_QWORD *)(a2 + 104), 0, 0);
  v4 = sub_22F3B5FB0(a2);
  result = sub_22F0F8AA0(a1, v4, 0, 0);
  v6 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(v6 + 16);
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      result = sub_22F0F8AA0(a1, v10, 0, 0);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

_QWORD *sub_22F406468(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  sub_22F403120((uint64_t)a1, a2);
  sub_22F0F8AA0(a1, *(_QWORD *)(a2 + 88), 0, 0);
  v4 = sub_22F3B55B8(a2);
  return sub_22F0F8AA0(a1, v4, 0, 0);
}

uint64_t sub_22F4064B8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  sub_22F403120((uint64_t)a1, a2);
  result = sub_22F259248(a2);
  if ((uint64_t *)result != v5)
  {
    v6 = (uint64_t *)result;
    v7 = v5;
    do
    {
      v8 = *v6++;
      result = (uint64_t)sub_22F0F8AA0(a1, v8, 0, 0);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_22F406518(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;

  sub_22F403120((uint64_t)a1, a2);
  v4 = sub_22F3B46CC(a2);
  sub_22F0F8AA0(a1, v4, "super", 5uLL);
  v5 = sub_22F3B4E88(a2);
  sub_22F0F8AA0(a1, v5, 0, 0);
  v6 = (uint64_t *)sub_22F2590A8(a2);
  result = sub_22F25910C(a2);
  if (v6 != (uint64_t *)result)
  {
    v8 = (uint64_t *)result;
    do
    {
      v9 = *v6++;
      result = (uint64_t)sub_22F0F8AA0(a1, v9, 0, 0);
    }
    while (v6 != v8);
  }
  return result;
}

_QWORD *sub_22F4065BC(uint64_t a1, uint64_t a2)
{
  sub_22F403120(a1, a2);
  sub_22F0F8AA0((_QWORD *)a1, *(_QWORD *)(a2 + 48), 0, 0);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return sub_22F402DE8(a1, *(_DWORD *)(a2 + 56));
}

void sub_22F40660C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;

  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)(a2 + 56));
  v4 = (*(_DWORD *)(a2 + 76) >> 17) & 3;
  if (v4 == 1)
  {
    v5 = " required";
  }
  else
  {
    if (v4 != 2)
      goto LABEL_6;
    v5 = " optional";
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v5);
LABEL_6:
  v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 0x1FFFF) != 0)
  {
    if ((v6 & 1) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " readonly");
    if ((v6 & 4) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " assign");
    if ((v6 & 8) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " readwrite");
    if ((v6 & 0x10) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " retain");
    if ((v6 & 0x20) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " copy");
    if ((v6 & 0x40) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " nonatomic");
    if ((v6 & 0x100) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " atomic");
    if ((v6 & 0x200) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " weak");
    if ((v6 & 0x400) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " strong");
    if ((v6 & 0x800) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " unsafe_unretained");
    if ((v6 & 0x4000) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " class");
    if ((v6 & 0x8000) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " direct");
    if ((v6 & 0x10000) != 0)
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " suppress_direct");
    if ((v6 & 2) != 0)
      sub_22F0F8AA0((_QWORD *)a1, *(_QWORD *)(a2 + 104), "getter", 6uLL);
    if ((v6 & 0x80) != 0)
      sub_22F0F8AA0((_QWORD *)a1, *(_QWORD *)(a2 + 112), "setter", 6uLL);
  }
}

_QWORD *sub_22F406804(uint64_t a1, uint64_t a2)
{
  char *v4;

  sub_22F403120(a1, *(_QWORD *)(a2 + 48));
  if (*(_QWORD *)(a2 + 56))
    v4 = " synthesize";
  else
    v4 = " dynamic";
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v4);
  sub_22F0F8AA0((_QWORD *)a1, *(_QWORD *)(a2 + 48), 0, 0);
  return sub_22F0F8AA0((_QWORD *)a1, *(_QWORD *)(a2 + 56), 0, 0);
}

llvm::raw_ostream *sub_22F406874(llvm::raw_ostream *result, uint64_t a2)
{
  llvm::raw_ostream *v2;
  int v3;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 48);
  if ((v3 & 0x2000) != 0)
  {
    result = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), " variadic");
    v3 = *(_DWORD *)(a2 + 48);
  }
  if ((v3 & 0x4000) != 0)
    return sub_22E47DAC0(*((llvm::raw_ostream **)v2 + 136), " captures_this");
  return result;
}

llvm::raw_ostream *sub_22F4068CC(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;

  v3 = sub_22E47DAC0(a1, " \"");
  v4 = *(const void **)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 36);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v6 >= v5)
  {
    if ((_DWORD)v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)v4);
  }
  return sub_22E47DAC0(v3, "\"");
}

llvm::raw_ostream **sub_22F406948(llvm::raw_ostream **result, uint64_t a2)
{
  llvm::raw_ostream *v3;
  unsigned int *v4;
  const void *v5;
  size_t v6;
  unsigned int v7;

  if (*(_QWORD *)(a2 + 40))
  {
    v3 = sub_22E47DAC0(result[136], " ");
    v4 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
    v7 = *v4;
    v5 = v4 + 4;
    v6 = v7;
    result = (llvm::raw_ostream **)*((_QWORD *)v3 + 4);
    if ((unint64_t)v7 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
    {
      if (v6)
      {
        result = (llvm::raw_ostream **)memcpy(result, v5, v6);
        *((_QWORD *)v3 + 4) += v6;
      }
    }
    else
    {
      return (llvm::raw_ostream **)llvm::raw_ostream::write(v3, (const char *)v5);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F4069C8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  const void *v7;
  size_t v8;
  void *v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = (char *)sub_22F39C2D8(a2);
  sub_22E47DAC0(v4, v5);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  if (*(_BYTE *)(a2 + 40))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " AddressDiscriminated");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v7 = *(const void **)(a2 + 56);
  v8 = *(unsigned int *)(a2 + 48);
  v9 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v9 >= v8)
  {
    if ((_DWORD)v8)
    {
      memcpy(v9, v7, v8);
      *((_QWORD *)v6 + 4) += v8;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v7);
  }
  return sub_22E47DAC0(v6, "\"");
}

llvm::raw_ostream *sub_22F406AC4(llvm::raw_ostream *result, unsigned int a2, _DWORD *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  char *v6;

  if (a2)
  {
    v4 = result;
    v5 = 4 * a2;
    while (*a3)
    {
      if (*a3 == 1)
      {
        v6 = " Data";
LABEL_7:
        result = sub_22E47DAC0(*((llvm::raw_ostream **)v4 + 136), v6);
      }
      ++a3;
      v5 -= 4;
      if (!v5)
        return result;
    }
    v6 = " Pointer";
    goto LABEL_7;
  }
  return result;
}

llvm::raw_ostream **sub_22F406B40(llvm::raw_ostream **result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  llvm::raw_ostream **v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  const void *v7;
  unint64_t v8;

  if (a2)
  {
    v3 = a3;
    v4 = result;
    v5 = a3 + 16 * a2;
    do
    {
      v6 = sub_22E47DAC0(v4[136], " ");
      v7 = *(const void **)v3;
      v8 = *(_QWORD *)(v3 + 8);
      result = (llvm::raw_ostream **)*((_QWORD *)v6 + 4);
      if (v8 <= *((_QWORD *)v6 + 3) - (_QWORD)result)
      {
        if (v8)
        {
          result = (llvm::raw_ostream **)memcpy(result, v7, *(_QWORD *)(v3 + 8));
          *((_QWORD *)v6 + 4) += v8;
        }
      }
      else
      {
        result = (llvm::raw_ostream **)llvm::raw_ostream::write(v6, (const char *)v7);
      }
      v3 += 16;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t sub_22F406BDC(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = result;
    v5 = 4 * a2;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(v4 + 1088), " ");
      a3 += 4;
      result = llvm::raw_ostream::operator<<();
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_22F406C38(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F39BDE0(a2);
  sub_22E47DAC0(v4, v5);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F406C9C(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 5)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC76A0[a2]);
  return result;
}

void sub_22F406CBC(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F37CF04(a2);
  sub_22E47DAC0(v4, v5);
  if (!*(_BYTE *)(a2 + 35))
    sub_22F40287C(a1, **(_QWORD **)(a2 + 40));
}

uint64_t sub_22F406D30(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  result = llvm::raw_ostream::operator<<();
  if ((*(_DWORD *)(a2 + 40) & 0x80000000) != 0)
  {
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    return llvm::raw_ostream::operator<<();
  }
  return result;
}

llvm::raw_ostream *sub_22F406D98(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  unsigned int *v7;
  const void *v8;
  size_t v9;
  unsigned int v10;
  void *v11;
  llvm::raw_ostream *result;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F37E5D0(a2);
  sub_22E47DAC0(v4, v5);
  if (*(_QWORD *)(a2 + 40))
  {
    v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    v7 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
    v10 = *v7;
    v8 = v7 + 4;
    v9 = v10;
    v11 = (void *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v10 <= *((_QWORD *)v6 + 3) - (_QWORD)v11)
    {
      if (v9)
      {
        memcpy(v11, v8, v9);
        *((_QWORD *)v6 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v8);
    }
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  if (*(_BYTE *)(a2 + 56))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " IsPointer");
  return result;
}

llvm::raw_ostream *sub_22F406EA4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  llvm::raw_ostream *result;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v5 = *(const void **)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 36);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 >= v6)
  {
    if ((_DWORD)v6)
    {
      memcpy(v7, v5, *(unsigned int *)(a2 + 36));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  result = sub_22E47DAC0(v4, "\"");
  if (*(_BYTE *)(a2 + 48))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " IsLiteralLabel");
  return result;
}

uint64_t sub_22F406F58(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  unsigned int *v5;
  const void *v6;
  size_t v7;
  unsigned int v8;
  void *v9;
  llvm::raw_ostream *v10;
  const void *v11;
  unint64_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  const void *v15;
  unint64_t v16;
  void *v17;

  if (*(_QWORD *)(a2 + 40))
  {
    v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    v5 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
    v8 = *v5;
    v6 = v5 + 4;
    v7 = v8;
    v9 = (void *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v8 <= *((_QWORD *)v4 + 3) - (_QWORD)v9)
    {
      if (v7)
      {
        memcpy(v9, v6, v7);
        *((_QWORD *)v4 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v4, (const char *)v6);
    }
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::operator<<();
  if (*(_BYTE *)(a2 + 96))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Unavailable");
  v10 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v11 = *(const void **)(a2 + 104);
  v12 = *(unsigned int *)(a2 + 100);
  v13 = (void *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v13 >= v12)
  {
    if ((_DWORD)v12)
    {
      memcpy(v13, v11, *(unsigned int *)(a2 + 100));
      *((_QWORD *)v10 + 4) += v12;
    }
  }
  else
  {
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, (const char *)v11);
  }
  sub_22E47DAC0(v10, "\"");
  if (*(_BYTE *)(a2 + 112))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Strict");
  v14 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v15 = *(const void **)(a2 + 120);
  v16 = *(unsigned int *)(a2 + 116);
  v17 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v17 >= v16)
  {
    if ((_DWORD)v16)
    {
      memcpy(v17, v15, *(unsigned int *)(a2 + 116));
      *((_QWORD *)v14 + 4) += v16;
    }
  }
  else
  {
    v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, (const char *)v15);
  }
  sub_22E47DAC0(v14, "\"");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F40715C(llvm::raw_ostream *result, unsigned int a2, int *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v4 = result;
    v5 = 4 * a2;
    do
    {
      v6 = *a3;
      if (v6 <= 2)
        result = sub_22E47DAC0(*((llvm::raw_ostream **)v4 + 136), off_24FAC76D0[v6]);
      ++a3;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

llvm::raw_ostream *sub_22F4071BC(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  const void *v7;
  size_t v8;
  void *v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F3832B8(a2);
  sub_22E47DAC0(v4, v5);
  v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v7 = *(const void **)(a2 + 40);
  v8 = *(unsigned int *)(a2 + 36);
  v9 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v9 >= v8)
  {
    if ((_DWORD)v8)
    {
      memcpy(v9, v7, v8);
      *((_QWORD *)v6 + 4) += v8;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v7);
  }
  return sub_22E47DAC0(v6, "\"");
}

uint64_t sub_22F407270(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*(_BYTE *)(a2 + 35))
    result = (uint64_t)sub_22E47DAC0(*(llvm::raw_ostream **)(result + 1088), " IsDeref");
  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v6 = 8 * v4;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(v3 + 1088), " ");
      v5 += 8;
      result = llvm::raw_ostream::operator<<();
      v6 -= 8;
    }
    while (v6);
  }
  v7 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a2 + 56);
    v9 = 4 * v7;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(v3 + 1088), " ");
      v8 += 4;
      result = llvm::raw_ostream::operator<<();
      v9 -= 4;
    }
    while (v9);
  }
  return result;
}

llvm::raw_ostream *sub_22F407320(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  llvm::raw_ostream *v8;
  const void *v9;
  size_t v10;
  void *v11;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v5 = *(const void **)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 36);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 >= v6)
  {
    if ((_DWORD)v6)
    {
      memcpy(v7, v5, *(unsigned int *)(a2 + 36));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  sub_22E47DAC0(v4, "\"");
  v8 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v9 = *(const void **)(a2 + 56);
  v10 = *(unsigned int *)(a2 + 48);
  v11 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v11 >= v10)
  {
    if ((_DWORD)v10)
    {
      memcpy(v11, v9, v10);
      *((_QWORD *)v8 + 4) += v10;
    }
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, (const char *)v9);
  }
  return sub_22E47DAC0(v8, "\"");
}

void sub_22F407414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  sub_22F0FD464(a1, *(_QWORD *)(a2 + 40));
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 56);
    v6 = 4 * v4;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
      v5 += 4;
      llvm::raw_ostream::operator<<();
      v6 -= 4;
    }
    while (v6);
  }
}

void sub_22F40748C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  int v8;
  char *v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v5 = *(const void **)(a2 + 56);
  v6 = *(unsigned int *)(a2 + 48);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 >= v6)
  {
    if ((_DWORD)v6)
    {
      memcpy(v7, v5, *(unsigned int *)(a2 + 48));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  sub_22E47DAC0(v4, "\"");
  v8 = *(_DWORD *)(a2 + 64);
  if (v8)
  {
    if (v8 != 1)
      goto LABEL_10;
    v9 = " DT_Warning";
  }
  else
  {
    v9 = " DT_Error";
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v9);
LABEL_10:
  if (*(_BYTE *)(a2 + 68))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ArgDependent");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  sub_22F0FD464(a1, *(_QWORD *)(a2 + 72));
}

llvm::raw_ostream *sub_22F407578(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;

  v3 = sub_22E47DAC0(a1, " \"");
  v4 = *(const void **)(a2 + 56);
  v5 = *(unsigned int *)(a2 + 48);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v6 >= v5)
  {
    if ((_DWORD)v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)v4);
  }
  return sub_22E47DAC0(v3, "\"");
}

llvm::raw_ostream *sub_22F4075F4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  const void *v7;
  size_t v8;
  void *v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F386370(a2);
  sub_22E47DAC0(v4, v5);
  v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v7 = *(const void **)(a2 + 40);
  v8 = *(unsigned int *)(a2 + 36);
  v9 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v9 >= v8)
  {
    if ((_DWORD)v8)
    {
      memcpy(v9, v7, v8);
      *((_QWORD *)v6 + 4) += v8;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v7);
  }
  return sub_22E47DAC0(v6, "\"");
}

llvm::raw_ostream *sub_22F4076A8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  llvm::raw_ostream *v8;
  const void *v9;
  unint64_t v10;
  void *v11;
  llvm::raw_ostream *result;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v5 = *(const void **)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 36);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 >= v6)
  {
    if ((_DWORD)v6)
    {
      memcpy(v7, v5, *(unsigned int *)(a2 + 36));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  sub_22E47DAC0(v4, "\"");
  v8 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v9 = *(const void **)(a2 + 56);
  v10 = *(unsigned int *)(a2 + 48);
  v11 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v11 >= v10)
  {
    if ((_DWORD)v10)
    {
      memcpy(v11, v9, *(unsigned int *)(a2 + 48));
      *((_QWORD *)v8 + 4) += v10;
    }
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, (const char *)v9);
  }
  result = sub_22E47DAC0(v8, "\"");
  if (*(_BYTE *)(a2 + 64))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " GeneratedDeclaration");
  return result;
}

uint64_t sub_22F4077C4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  unsigned int *v5;
  const void *v6;
  size_t v7;
  unsigned int v8;
  void *v9;

  if (*(_QWORD *)(a2 + 40))
  {
    v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    v5 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
    v8 = *v5;
    v6 = v5 + 4;
    v7 = v8;
    v9 = (void *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v8 <= *((_QWORD *)v4 + 3) - (_QWORD)v9)
    {
      if (v7)
      {
        memcpy(v9, v6, v7);
        *((_QWORD *)v4 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v4, (const char *)v6);
    }
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

uint64_t sub_22F407878(uint64_t a1)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F4078E0(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 0xD)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC76E8[a2]);
  return result;
}

llvm::raw_ostream *sub_22F407900(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *result;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F389AF8(a2);
  result = sub_22E47DAC0(v4, v5);
  if (*(_BYTE *)(a2 + 35))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " BestCase");
  return result;
}

llvm::raw_ostream *sub_22F407974(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 8)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC7758[a2]);
  return result;
}

llvm::raw_ostream *sub_22F407994(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 9)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC77A0[a2]);
  return result;
}

uint64_t sub_22F4079B4(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a2 + 36);
  if (v4)
  {
    if (v4 != 1)
      goto LABEL_6;
    v5 = " MT_Link";
  }
  else
  {
    v5 = " MT_To";
  }
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v5);
LABEL_6:
  v6 = *(int *)(a2 + 40);
  if (v6 <= 2)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC77F0[v6]);
  if (*(_BYTE *)(a2 + 56))
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " Indirect");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F407A4C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  result = sub_22F3EEFD4(v4, *(_DWORD **)(a2 + 48));
  v6 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v6)
  {
    v7 = *(int **)(a2 + 96);
    v8 = 4 * v6;
    do
    {
      v9 = *v7;
      if (v9 <= 2)
        result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7808[v9]);
      ++v7;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

llvm::raw_ostream **sub_22F407AC8(llvm::raw_ostream **result, _QWORD *a2)
{
  llvm::raw_ostream **v3;
  llvm::raw_ostream *v4;
  unsigned int *v5;
  const void *v6;
  size_t v7;
  unsigned int v8;
  llvm::raw_ostream *v9;
  unsigned int *v10;
  const void *v11;
  size_t v12;
  unsigned int v13;
  llvm::raw_ostream *v14;
  unsigned int *v15;
  const void *v16;
  size_t v17;
  unsigned int v18;

  v3 = result;
  if (a2[5])
  {
    v4 = sub_22E47DAC0(result[136], " ");
    v5 = *(unsigned int **)(a2[5] + 16);
    v8 = *v5;
    v6 = v5 + 4;
    v7 = v8;
    result = (llvm::raw_ostream **)*((_QWORD *)v4 + 4);
    if ((unint64_t)v8 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
    {
      if (v7)
      {
        result = (llvm::raw_ostream **)memcpy(result, v6, v7);
        *((_QWORD *)v4 + 4) += v7;
      }
    }
    else
    {
      result = (llvm::raw_ostream **)llvm::raw_ostream::write(v4, (const char *)v6);
    }
  }
  if (a2[6])
  {
    v9 = sub_22E47DAC0(v3[136], " ");
    v10 = *(unsigned int **)(a2[6] + 16);
    v13 = *v10;
    v11 = v10 + 4;
    v12 = v13;
    result = (llvm::raw_ostream **)*((_QWORD *)v9 + 4);
    if ((unint64_t)v13 <= *((_QWORD *)v9 + 3) - (_QWORD)result)
    {
      if (v12)
      {
        result = (llvm::raw_ostream **)memcpy(result, v11, v12);
        *((_QWORD *)v9 + 4) += v12;
      }
    }
    else
    {
      result = (llvm::raw_ostream **)llvm::raw_ostream::write(v9, (const char *)v11);
    }
  }
  if (a2[7])
  {
    v14 = sub_22E47DAC0(v3[136], " ");
    v15 = *(unsigned int **)(a2[7] + 16);
    v18 = *v15;
    v16 = v15 + 4;
    v17 = v18;
    result = (llvm::raw_ostream **)*((_QWORD *)v14 + 4);
    if ((unint64_t)v18 <= *((_QWORD *)v14 + 3) - (_QWORD)result)
    {
      if (v17)
      {
        result = (llvm::raw_ostream **)memcpy(result, v16, v17);
        *((_QWORD *)v14 + 4) += v17;
      }
    }
    else
    {
      return (llvm::raw_ostream **)llvm::raw_ostream::write(v14, (const char *)v16);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F407C18(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 5)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC7820[a2]);
  return result;
}

void *sub_22F407C38(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  void *result;
  llvm::raw_ostream *v7;
  unsigned int *v8;
  const void *v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F39B7FC(a2);
  result = sub_22E47DAC0(v4, v5);
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    v8 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
    v11 = *v8;
    v9 = v8 + 4;
    v10 = v11;
    result = (void *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v11 <= *((_QWORD *)v7 + 3) - (_QWORD)result)
    {
      if (v10)
      {
        result = memcpy(result, v9, v10);
        *((_QWORD *)v7 + 4) += v10;
      }
    }
    else
    {
      result = (void *)llvm::raw_ostream::write(v7, (const char *)v9);
    }
  }
  v12 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a2 + 56);
    v14 = 4 * v12;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
      v13 += 4;
      result = (void *)llvm::raw_ostream::operator<<();
      v14 -= 4;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_22F407D20(uint64_t a1)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

uint64_t sub_22F407D74(uint64_t a1)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

uint64_t sub_22F407DC8(uint64_t a1)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F407E30(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  const void *v7;
  size_t v8;
  void *v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = (char *)sub_22F39FE30(a2);
  sub_22E47DAC0(v4, v5);
  v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v7 = *(const void **)(a2 + 40);
  v8 = *(unsigned int *)(a2 + 36);
  v9 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v9 >= v8)
  {
    if ((_DWORD)v8)
    {
      memcpy(v9, v7, v8);
      *((_QWORD *)v6 + 4) += v8;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v7);
  }
  return sub_22E47DAC0(v6, "\"");
}

llvm::raw_ostream *sub_22F407EE4(llvm::raw_ostream *result, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;

  v3 = result;
  v4 = *(int *)(a2 + 36);
  if (v4 <= 2)
    result = sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC7850[v4]);
  if ((*(_DWORD *)(a2 + 40) & 0x80000000) != 0)
  {
    sub_22E47DAC0(*((llvm::raw_ostream **)v3 + 136), " ");
    return (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  }
  return result;
}

uint64_t sub_22F407F50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(int *)(a2 + 36);
  if (v3 <= 3)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7868[v3]);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F407FA4(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 4)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC7888[a2]);
  return result;
}

llvm::raw_ostream *sub_22F407FC4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *result;
  int v7;
  char *v8;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = (char *)sub_22F3A227C(a2);
  result = sub_22E47DAC0(v4, v5);
  v7 = *(_DWORD *)(a2 + 36);
  if (v7)
  {
    if (v7 != 1)
      return result;
    v8 = " NK_Enum";
  }
  else
  {
    v8 = " NK_Struct";
  }
  return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), v8);
}

uint64_t sub_22F40804C(uint64_t a1, uint64_t a2)
{
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  sub_22F0FD464(a1, *(_QWORD *)(a2 + 40));
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F4080A8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  llvm::raw_ostream *result;
  uint64_t v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v5 = *(const void **)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 36);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 >= v6)
  {
    if ((_DWORD)v6)
    {
      memcpy(v7, v5, *(unsigned int *)(a2 + 36));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  result = sub_22E47DAC0(v4, "\"");
  v9 = *(int *)(a2 + 48);
  if (v9 <= 6)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC78B0[v9]);
  return result;
}

void sub_22F408164(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  unint64_t v6;
  void *v7;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v5 = *(const void **)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 36);
  v7 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 >= v6)
  {
    if ((_DWORD)v6)
    {
      memcpy(v7, v5, *(unsigned int *)(a2 + 36));
      *((_QWORD *)v4 + 4) += v6;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, (const char *)v5);
  }
  sub_22E47DAC0(v4, "\"");
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  sub_22F0FD464(a1, *(_QWORD *)(a2 + 48));
}

uint64_t sub_22F40820C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[9];
  if (v4 <= 3)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC78E8[v4]);
  v5 = a2[10];
  if (v5 <= 2)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7908[v5]);
  v6 = a2[11];
  if (v6 <= 3)
    sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7920[v6]);
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  return llvm::raw_ostream::operator<<();
}

llvm::raw_ostream *sub_22F4082A0(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *v6;
  const void *v7;
  size_t v8;
  void *v9;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F3A6434(a2);
  sub_22E47DAC0(v4, v5);
  v6 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " \"");
  v7 = *(const void **)(a2 + 40);
  v8 = *(unsigned int *)(a2 + 36);
  v9 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v9 >= v8)
  {
    if ((_DWORD)v8)
    {
      memcpy(v9, v7, v8);
      *((_QWORD *)v6 + 4) += v8;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v7);
  }
  return sub_22E47DAC0(v6, "\"");
}

llvm::raw_ostream *sub_22F408354(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 8)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC7940[a2]);
  return result;
}

void *sub_22F408374(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  void *result;
  llvm::raw_ostream *v7;
  unsigned int *v8;
  const void *v9;
  size_t v10;
  unsigned int v11;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = (char *)sub_22F3808B8(a2);
  result = sub_22E47DAC0(v4, v5);
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
    v8 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
    v11 = *v8;
    v9 = v8 + 4;
    v10 = v11;
    result = (void *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v11 <= *((_QWORD *)v7 + 3) - (_QWORD)result)
    {
      if (v10)
      {
        result = memcpy(result, v9, v10);
        *((_QWORD *)v7 + 4) += v10;
      }
    }
    else
    {
      return (void *)llvm::raw_ostream::write(v7, (const char *)v9);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F40842C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::raw_ostream *result;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  v5 = sub_22F389508(a2);
  result = sub_22E47DAC0(v4, v5);
  v7 = *(int *)(a2 + 36);
  if (v7 <= 0xB)
    result = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC7988[v7]);
  v8 = *(int *)(a2 + 40);
  if (v8 <= 6)
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), off_24FAC79E8[v8]);
  return result;
}

llvm::raw_ostream *sub_22F4084C8(llvm::raw_ostream *result, unsigned int a2)
{
  if (a2 <= 3)
    return sub_22E47DAC0(*((llvm::raw_ostream **)result + 136), off_24FAC7A20[a2]);
  return result;
}

uint64_t sub_22F4084E8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(int *)(a2 + 36);
  if (v4 <= 2)
    result = (uint64_t)sub_22E47DAC0(*(llvm::raw_ostream **)(result + 1088), off_24FAC7A40[v4]);
  v5 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a2 + 120);
    v7 = 4 * v5;
    do
    {
      sub_22E47DAC0(*(llvm::raw_ostream **)(v3 + 1088), " ");
      v6 += 4;
      result = llvm::raw_ostream::operator<<();
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

llvm::raw_ostream *sub_22F408564(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  result = (llvm::raw_ostream *)llvm::operator<<();
  if (*(_BYTE *)(a2 + 64))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " IsReplacedByActive");
  return result;
}

llvm::raw_ostream *sub_22F4085C4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  llvm::operator<<();
  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " ");
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  if (*(_BYTE *)(a2 + 56))
    return sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 1088), " IsReplacedByActive");
  return result;
}

uint64_t sub_22F408644(_QWORD *a1)
{
  uint64_t result;

  result = sub_22F10AEAC(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0));
  if (result)
    return sub_22F408670(result);
  return result;
}

uint64_t sub_22F408670(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 128)
     || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104)), *(_QWORD *)(a1 + 128)))
    && !sub_22E463414(a1))
  {
    return sub_22F3B1AA4(a1);
  }
  else
  {
    return 1;
  }
}

uint64_t sub_22F4086CC(_QWORD *a1)
{
  uint64_t v1;

  v1 = sub_22F10AEAC(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0));
  if (v1)
    return sub_22F4086FC(v1);
  else
    return 1;
}

uint64_t sub_22F4086FC(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 128)
     || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104)), *(_QWORD *)(a1 + 128)))
    && sub_22E463414(a1))
  {
    return sub_22F3B1AA4(a1);
  }
  else
  {
    return 1;
  }
}

uint64_t sub_22F408754(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, int a6, char a7)
{
  int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;

  v7 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (a5)
    v8 = (*a5 >> 5) & 0x1300 | (((*a5 & 0x18000) != 0) << 10);
  else
    LOWORD(v8) = 0;
  v9 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v9 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v9;
  v10 = *(_DWORD *)(result + 16) & 0xFF800000;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a5;
  *(_DWORD *)(result + 56) = a6;
  *(_DWORD *)(result + 16) = ((a7 & 0xF) << 19) | v10 | 0x615 | ((unsigned __int16)v8 | (unsigned __int16)v7) & 0x1F00;
  return result;
}

uint64_t sub_22F4087CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, int a6, char a7)
{
  return sub_22F408754(a1, a2, a3, a4, a5, a6, a7);
}

void sub_22F4087D4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  unsigned int v9;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  sub_22E3CF554(a1, a3);
  v9 = *(_DWORD *)(a1 + 8);
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = a5;
  ++*(_DWORD *)(a1 + 8);
  v11 = 1;
  v10[0] = &off_24FAC6E70;
  v10[1] = a1;
  v12 = a2;
  sub_22F0E9FEC(v10, a4);
}

uint64_t sub_22F408874(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, int a6)
{
  int v6;
  int v7;
  unint64_t v8;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (a5)
    v7 = (*a5 >> 5) & 0x1300 | (((*a5 & 0x18000) != 0) << 10);
  else
    LOWORD(v7) = 0;
  v8 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v8 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 16) = ((unsigned __int16)v7 | (unsigned __int16)v6) & 0x1F00 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x610;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 56) = a6;
  return result;
}

uint64_t sub_22F4088E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, int a6)
{
  return sub_22F408874(a1, a2, a3, a4, a5, a6);
}

void sub_22F4088EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  sub_22E3CF554(a1, a3);
  v8 = 1;
  v7[0] = &off_24FAC6E70;
  v7[1] = a1;
  v9 = a2;
  sub_22F0E9FEC(v7, a4);
}

uint64_t sub_22F40894C(uint64_t result, unsigned __int8 a2, uint64_t a3, unint64_t a4, uint64_t a5, _DWORD *a6)
{
  unsigned int v6;
  unsigned int v7;
  char v8;
  int v9;
  unint64_t v10;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16);
  v7 = v6 >> 8;
  if (a5)
  {
    v8 = BYTE1(v6) & 0x19;
    if ((v6 & 0x100) != 0 || (*(_BYTE *)(a5 + 1) & 0x20) != 0)
    {
      LOBYTE(v9) = 1;
    }
    else if (a6)
    {
      v9 = (*a6 >> 13) & 1;
    }
    else
    {
      LOBYTE(v9) = 0;
    }
    LOBYTE(v7) = v8 | v9 | 6;
  }
  v10 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v10 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = a2 | ((v7 & 0x1F) << 8) | *(_DWORD *)(result + 16) & 0xFFF80000;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  return result;
}

uint64_t sub_22F4089C8(uint64_t result, uint64_t a2, int a3, int a4, unint64_t a5)
{
  int v5;
  unint64_t v6;

  v5 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  v6 = result & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v6 = a5;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 16) = v5 & 0x1F00 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x1D;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 44) = a4;
  return result;
}

void sub_22F408A0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t (**v9)();
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_22E3CF554(a1, a3);
  v11 = 1;
  v9 = &off_24FAC6E70;
  v10 = a1;
  v12 = a2;
  sub_22F0E9FEC(&v9, a4);
  v11 = 1;
  v9 = &off_24FAC6E70;
  v10 = a1;
  v12 = a2;
  sub_22F0E9FEC(&v9, a5);
}

uint64_t sub_22F408A90(uint64_t result, uint64_t a2, int a3, unint64_t a4, char a5)
{
  int v5;
  unint64_t v6;
  unsigned int v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v6 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v6 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v6;
  v7 = *(_DWORD *)(result + 16) & 0xFF800000;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 16) = v5 & 0xFF87FFFF | ((a5 & 0xF) << 19) | v7 | 0x37;
  *(_DWORD *)(result + 20) = a3;
  return result;
}

uint64_t sub_22F408AD4(uint64_t result, int a2, int a3)
{
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = result & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFF80000 | 9;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = a2 & 0xFE000001 | (2 * (a3 & 0xFFFFFF)) | *(_DWORD *)(result + 32) & 0xFE000000;
  return result;
}

uint64_t sub_22F408B08(uint64_t result, uint64_t a2, int a3, unint64_t a4)
{
  unsigned int v4;
  int v5;
  uint64_t v6;

  v4 = *(_DWORD *)a4;
  v5 = (*(_DWORD *)a4 & 0x18000) != 0;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = result & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(result + 16) = (v4 >> 5) & 0x1300 | (v5 << 10) | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x11;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  v6 = 2;
  if (!a3)
    v6 = 0;
  *(_QWORD *)(result + 40) = a4 & 0xFFFFFFFFFFFFFFFDLL | v6;
  return result;
}

uint64_t sub_22F408B60(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
}

void sub_22F408B6C(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  unsigned int v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = a3;
  ++*(_DWORD *)(a1 + 8);
  v10 = 1;
  v9[0] = &off_24FAC6E70;
  v9[1] = a1;
  v11 = a2;
  sub_22F0E9FEC(v9, a4);
}

uint64_t sub_22F408C04(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7;

  sub_22E3CF554(a1, a2);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = a4;
  ++*(_DWORD *)(a1 + 8);
  return sub_22E3CF554(a1, a3);
}

uint64_t sub_22F408C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  sub_22E3CF554(a1, a2);
  sub_22E3CF554(a1, a3);
  result = sub_22E3CF554(a1, a4);
  v12 = *(_DWORD *)(a1 + 8);
  if (v12 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = a5;
  v13 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v14) = a6;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F408D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 8) = 1;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 0;
  return sub_22F010028(*(_QWORD *)(a1 + 40), (llvm::APInt *)a3, a2, 0);
}

uint64_t sub_22F408D68(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 10)
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(unsigned __int16 *)(v7 + 24);
      return v8 == 0x69636E6174736E69 && v9 == 26478;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F408E0C(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 13)
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 21);
      return v8 == 0x656C676E61697274 && v9 == 0x617461645F656C67;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F408EBC(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 10)
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(unsigned __int16 *)(v7 + 24);
      return v8 == 0x61645F6576727563 && v9 == 24948;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F408F60(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 16)
    {
      v9 = *(_QWORD *)(v7 + 16);
      v8 = *(_QWORD *)(v7 + 24);
      return v9 == 0x70735F646C726F77 && v8 == 0x617461645F656361;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F40900C(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 16)
    {
      v9 = *(_QWORD *)(v7 + 16);
      v8 = *(_QWORD *)(v7 + 24);
      return v9 == 0x766974696D697270 && v8 == 0x6E6F69746F6D5F65;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F4090B8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 15)
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 23);
      return v8 == 0x65636E6174736E69 && v9 == 0x6E6F69746F6D5F65;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F409168(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v2 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  result = sub_22EFC8688((unint64_t)v4);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 40);
    if ((v5 & 7) != 0)
      v6 = 0;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v7 == 15)
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 23);
      return v8 == 0x6465646E65747865 && v9 == 0x7374696D696C5F64;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F409218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v7;
  unsigned int v8;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 24, (uint64_t)&v7);
  if (v8 >= 0x41)
    v3 = v7;
  else
    v3 = (uint64_t *)&v7;
  v4 = *v3;
  if (v8 >= 0x41 && v7 != 0)
    MEMORY[0x2348A0E84]();
  return v4;
}

uint64_t sub_22F40929C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 >= 3)
    v4 = 0;
  else
    v4 = v3;
  result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 168) + 32) & 0xFFFFFFFFFFFFFFF0));
  if (!result)
    return result;
  if (a2 == 1)
  {
    v10 = *(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(result + 40) & 7) == 0 && v10 != 0)
    {
      v8 = *(_QWORD *)(v10 + 16);
      if (*(_DWORD *)v8 == 26)
      {
        v9 = "imageblock_layout_implicit";
        goto LABEL_19;
      }
    }
    return 0;
  }
  if (a2)
    return 0;
  v6 = *(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(result + 40) & 7) != 0 || v6 == 0)
    return 0;
  v8 = *(_QWORD *)(v6 + 16);
  if (*(_DWORD *)v8 != 26)
    return 0;
  v9 = "imageblock_layout_explicit";
LABEL_19:
  v12 = *(_QWORD *)(v8 + 16);
  v13 = *(_QWORD *)(v8 + 24);
  v14 = *(_QWORD *)v9;
  v15 = *((_QWORD *)v9 + 1);
  v16 = *(_QWORD *)(v8 + 32);
  v17 = *((_QWORD *)v9 + 2);
  v18 = *(unsigned __int16 *)(v8 + 40);
  v19 = *((unsigned __int16 *)v9 + 12);
  return v12 == v14 && v13 == v15 && v16 == v17 && v18 == v19;
}

uint64_t sub_22F409390(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 >= 3)
    v4 = 0;
  else
    v4 = v3;
  result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 168) + 32) & 0xFFFFFFFFFFFFFFF0));
  if (!result)
    return result;
  v6 = *(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(result + 40) & 7) != 0 || v6 == 0)
    return 0;
  if (a2 == 1)
  {
    v12 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v12 == 14)
    {
      v9 = *(_QWORD *)(v12 + 16);
      v10 = *(_QWORD *)(v12 + 22);
      v11 = 0x70737265705F6F6ELL;
      return v9 == v11 && v10 == 0x6576697463657073;
    }
    return 0;
  }
  if (a2)
    return 0;
  v8 = *(_QWORD *)(v6 + 16);
  if (*(_DWORD *)v8 != 11)
    return 0;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 19);
  v11 = 0x7463657073726570;
  return v9 == v11 && v10 == 0x6576697463657073;
}

uint64_t sub_22F40947C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(unsigned int *)(v3 + 4);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
    v6 = 24 * v4;
    while (1)
    {
      v7 = *v5;
      v5 += 3;
      v8 = sub_22F10BF84(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if ((v8 & 0x100000000) != 0)
        break;
      v6 -= 24;
      if (!v6)
      {
        v9 = 0;
        v10 = 0;
        v11 = v8 & 0xFFFFFF00;
        return v10 | v9 | v11 & 0xFFFFFF00;
      }
    }
    v10 = v8 & 0x100000000;
    v11 = v8 & 0xFFFFFF00;
    v9 = v8;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  return v10 | v9 | v11 & 0xFFFFFF00;
}

uint64_t sub_22F409520(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 152);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(*v4 + 152);
      v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v5 & 4) != 0 && v4);
  }
  v6 = v4[2];
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  result = sub_22EFC8688((unint64_t)v7);
  if ((_DWORD)result)
  {
    v8 = v4[5];
    if ((v8 & 7) != 0)
      v9 = 0;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v9 + 16);
    if (*(_DWORD *)v10 == 23)
    {
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(_QWORD *)(v10 + 31);
      return v11 == 0x6365737265746E69 && v12 == 0x7365725F6E6F6974 && v13 == 0x6665725F746C7573;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F40960C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  return *(_QWORD *)(**(_QWORD **)(v2 + 168) + 8);
}

uint64_t sub_22F409640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 24, (uint64_t)&v8);
  if (v9 >= 0x41)
    v3 = v8;
  else
    v3 = (uint64_t *)&v8;
  v4 = *v3;
  if (v9 >= 0x41 && v8 != 0)
  {
    v7 = v4;
    MEMORY[0x2348A0E84]();
    return v7;
  }
  return v4;
}

uint64_t sub_22F4096D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 48, (uint64_t)&v8);
  if (v9 >= 0x41)
    v3 = v8;
  else
    v3 = (uint64_t *)&v8;
  v4 = *v3;
  if (v9 >= 0x41 && v8 != 0)
  {
    v7 = v4;
    MEMORY[0x2348A0E84]();
    return v7;
  }
  return v4;
}

uint64_t sub_22F409760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  return *(_QWORD *)(**(_QWORD **)(v2 + 168) + 32);
}

uint64_t sub_22F409794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v7;
  unsigned int v8;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 48, (uint64_t)&v7);
  if (v8 >= 0x41)
    v3 = v7;
  else
    v3 = (uint64_t *)&v7;
  v4 = *v3;
  if (v8 >= 0x41 && v7 != 0)
    MEMORY[0x2348A0E84]();
  return v4;
}

uint64_t sub_22F409818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v7;
  unsigned int v8;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 72, (uint64_t)&v7);
  if (v8 >= 0x41)
    v3 = v7;
  else
    v3 = (uint64_t *)&v7;
  v4 = *v3;
  if (v8 >= 0x41 && v7 != 0)
    MEMORY[0x2348A0E84]();
  return v4;
}

unint64_t sub_22F40989C(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = sub_22F10D058(a1);
  if ((v4 & 0xCFFFFFFF8) != 0)
    return sub_22EF5DBC4(a2, v3, v4);
  else
    return v3 & 0xFFFFFFFFFFFFFFF0 | v4 & 7;
}

uint64_t sub_22F4098F0(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if ((v3 & 8) != 0)
  {
    v6 = v4[3];
    v4 = (_QWORD *)*v4;
    v5 = v6 | v3 & 7;
  }
  else
  {
    v5 = v3 & 7;
  }
  v7 = sub_22F10D19C((uint64_t)v4);
  return sub_22EA28548(a2, v7, v5);
}

uint64_t sub_22F409940(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

BOOL sub_22F409948(uint64_t a1)
{
  return sub_22F10D8C0(a1) != 0;
}

BOOL sub_22F409964(uint64_t a1)
{
  return sub_22F10DCA4(a1) != 0;
}

uint64_t sub_22F409980(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  v5 = a1;
  *a3 = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 32)
    goto LABEL_3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
    return 0;
  result = sub_22F10CF48(a1);
  v5 = result;
  if (result)
  {
LABEL_3:
    if (sub_22E5761BC(v5))
      return 1;
    result = sub_22F36CE1C(v5);
    if ((_DWORD)result)
    {
      if (!sub_22E509ED0(v5) && !sub_22E509F54(v5))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v7 || *(unsigned __int8 *)(v7 + 16) - 35 <= 0xFFFFFFFD)
          v7 = sub_22F10CF48(v7);
        v8 = sub_22F409A68(v7, a2);
        *a3 = sub_22E4EBB74(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
        return 1;
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_22F409A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if ((sub_22F409D44(a1) & 1) == 0 && (*(_BYTE *)(a1 + 19) & 0xFC) == 0)
    return a1 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  if ((v4 & 8) != 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0) + 0x18) | *(_QWORD *)(a1 + 24) & 7;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 24) & 7;
  }
  v7 = sub_22E4EBB74(v5);
  if (v7)
    v8 = sub_22F409A68(v7, a2);
  else
    v8 = v5 & 0xFFFFFFFFFFFFFFF0;
  v9 = sub_22EA28548(a2, v8, v6);
  return sub_22EF667E8(a2, v9, (uint64_t *)(a1 + 48), (*(_QWORD *)(a1 + 16) >> 19) & 0x7FLL, 0, 0, 0);
}

uint64_t sub_22F409B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1;
  if (a1 && *(_BYTE *)(a1 + 16) == 32)
    goto LABEL_3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
    return 0;
  result = sub_22F10CF48(a1);
  v1 = result;
  if (result)
  {
LABEL_3:
    if (!sub_22E509ED0(v1))
    {
      result = sub_22F36CE1C(v1);
      if (!(_DWORD)result)
        return result;
      if (!sub_22E509ED0(v1))
        return sub_22E509F54(v1);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22F409BC0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t *__src, uint64_t a5, void *a6, uint64_t a7, int a8)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;

  v8 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v9 = result & 0xFFFFFFFFFFFFFFF0;
  if (a2 >= 0x10)
    v9 = a2;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v9;
  *(_DWORD *)(result + 16) = v8 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x21;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  v10 = 0x100000000;
  if (!a8)
    v10 = 0;
  v11 = v10 & 0xFFFFFFFFFC07FFFFLL | ((unint64_t)(a5 & 0x7F) << 19) | *(_QWORD *)(result + 16) & 0xFFFFFFFEFC07FFFFLL;
  *(_QWORD *)(result + 16) = v11;
  if (a5)
  {
    v18 = v11;
    v15 = a7;
    v16 = a6;
    v19 = result;
    v12 = 8 * a5;
    v17 = __src;
    memcpy((void *)(result + 48), __src, 8 * a5);
    do
    {
      v13 = *v17++;
      v18 |= *(_DWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1700;
      *(_DWORD *)(v19 + 16) = v18;
      v12 -= 8;
    }
    while (v12);
    result = v19;
    v11 = *(_QWORD *)(v19 + 16);
    a7 = v15;
    a6 = v16;
  }
  *(_QWORD *)(result + 16) = v11 & 0xFFFFFFFF03FFFFFFLL | ((_DWORD)a7 << 26);
  if (a7)
  {
    v14 = result;
    memcpy((void *)(result + 8 * ((v11 >> 19) & 0x7F) + 48), a6, 8 * a7);
    return v14;
  }
  return result;
}

BOOL sub_22F409CF8(uint64_t a1)
{
  uint64_t v1;

  do
  {
    v1 = *(_QWORD *)(a1 + 16) & 0x3F80000;
    if (v1)
      break;
    a1 = sub_22E4EBB74(*(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0));
    if (!a1)
      break;
  }
  while (*(_BYTE *)(a1 + 16) != 34);
  return v1 != 0;
}

uint64_t sub_22F409D44(uint64_t a1)
{
  unint64_t v1;

  do
  {
    v1 = *(_QWORD *)(a1 + 16);
    if ((v1 & 0x100000000) != 0)
      break;
    a1 = sub_22E4EBB74(*(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0));
    if (!a1)
      break;
  }
  while (*(_BYTE *)(a1 + 16) != 34);
  return HIDWORD(v1) & 1;
}

uint64_t sub_22F409D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v2 = v1;
  v3 = *(_QWORD *)(v1 + 120);
  if (!v3)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 96) + 88), *(_QWORD *)(v1 + 96));
    v3 = *(_QWORD *)(v2 + 120);
  }
  if (v3 < 8)
    v4 = 0;
  else
    v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if (v4)
    return v4;
  else
    return v2;
}

uint64_t sub_22F409DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v3 = a1;
  v4 = sub_22F36CE1C(a1);
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)(v5 + 16) - 35;
  if ((v4 & 1) == 0)
  {
    if (v5)
      v7 = *(unsigned __int8 *)(v5 + 16) - 35 > 0xFFFFFFFD;
    else
      v7 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (!v7)
      v8 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0));
    if ((*(_BYTE *)(v8 + 19) & 0xFC) == 0)
      return v3;
  }
  if (v6 <= 0xFFFFFFFD)
    v5 = sub_22F10CF48(v5);
  v10 = sub_22F409A68(v5, a2);
  v11 = sub_22F36CC4C(a2, v10);
  v3 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 32)
    return v3;
  else
    return sub_22F10CF48(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
}

void sub_22F409EB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD v5[3];
  int v6;

  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  v6 = a5;
  sub_22F10E588((uint64_t)v5, *a1);
}

void sub_22F409EE0(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  int v12;

  sub_22F10F4E4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), a3, (uint64_t)&v8);
  if (v9)
  {
    v7 = sub_22EFCAD5C(a3);
    v10 = sub_22EFC72E8(v7);
    v11 = v8;
    v12 = a4;
    sub_22F10E588((uint64_t)&v10, *a1);
  }
}

uint64_t sub_22F409F60(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;

  result = sub_22E4EBB74(a1);
  if (result)
  {
    v2 = result;
    result = sub_22F272660(result);
    if (result)
    {
      v3 = (uint64_t *)sub_22F272660(v2);
      return v3 && sub_22F3B4828(v3);
    }
  }
  return result;
}

uint64_t sub_22F409FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_22E4EBB74(a1);
  if (!v1)
    return 0;
  v2 = v1;
  if (!sub_22F272660(v1))
    return 0;
  return v2;
}

void sub_22F409FE8(uint64_t a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v16[3];
  int v17;

  v2 = sub_22F272660(a1);
  if (v2
    && (v6 = (uint64_t *)v2, (v7 = sub_22F3346EC(v2)) != 0)
    && (v4 = v7, (v8 = (uint64_t *)sub_22F272660(v7)) != 0))
  {
    v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if (!sub_22F3B4828(v8))
      goto LABEL_7;
    if (!sub_22F409CF8(v4))
    {
      v3 = (uint64_t *)(a1 + 32);
      goto LABEL_3;
    }
    if (sub_22F3B4828(v6))
    {
      if (sub_22F409CF8(a1))
      {
        v10 = sub_22F10E414(a1);
        v12 = v11;
        v3 = (uint64_t *)(a1 + 32);
        v16[0] = sub_22EFC72E8((unint64_t)v6);
        v16[1] = v10;
        v16[2] = v12;
        v17 = 4;
        sub_22F10E588((uint64_t)v16, (uint64_t)v9);
      }
      else
      {
        v14 = sub_22EFC72E8((unint64_t)v6);
        v15 = (uint64_t *)sub_22F272660(v4);
        v13 = sub_22F36D148(v14, v15, 0);
        v3 = (uint64_t *)(a1 + 32);
      }
      v4 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
      if (!v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      v3 = (uint64_t *)(a1 + 32);
      v4 = *v9;
      if (!*v9)
      {
LABEL_9:
        v4 = sub_22F10CF48(v4);
        goto LABEL_3;
      }
    }
    if (*(unsigned __int8 *)(v4 + 16) - 35 <= 0xFFFFFFFD)
      goto LABEL_9;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v3 = (uint64_t *)(a1 + 32);
    v4 = v5;
  }
LABEL_3:
  *v3 = v4 | 4;
}

unint64_t sub_22F40A120(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  unint64_t result;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  result = sub_22F272660(v1);
  if (result)
  {
    v4 = (uint64_t *)result;
    v5 = sub_22EFC72E8(result);
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F36D148(v5, v4, 0) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  }
  return result;
}

uint64_t sub_22F40A18C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (!a1 || *(_BYTE *)(a1 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v1 = sub_22F10CF48(a1);
    if (!v1)
      return 0;
  }
  if (!sub_22E491464(v1))
    return 0;
  return v1;
}

uint64_t sub_22F40A1F8(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (!a1 || *(_BYTE *)(a1 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v1 = sub_22F10CF48(a1);
    if (!v1)
      return 0;
  }
  if (!sub_22E509F54(v1))
    return 0;
  return v1;
}

uint64_t sub_22F40A264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1;
  if (a1 && *(_BYTE *)(a1 + 16) == 32)
  {
LABEL_8:
    if (sub_22F40A120(v1))
      return v1;
    return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
  {
    v2 = sub_22F10CF48(a1);
    if (v2)
    {
      v1 = v2;
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t sub_22F40A2D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD *v9;

  result = sub_22F10C2A4(a1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
      return 0;
    v2 = *(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(result + 40) & 7) != 0 || v2 == 0)
      return 0;
    v4 = *(_QWORD *)(v2 + 16);
    if (*(_DWORD *)v4 != 9)
      return 0;
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(unsigned __int8 *)(v4 + 24);
    if (v5 != 0x5F776F7268746F6ELL || v6 != 116)
      return 0;
    v8 = *(_QWORD *)(result + 16);
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0)
      v9 = (_QWORD *)*v9;
    return v9 && sub_22EFC84D4((unint64_t)v9);
  }
  return result;
}

uint64_t sub_22F40A378(uint64_t a1, unsigned __int8 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  if (a3)
  {
    v14 = sub_22F0AAC5C(a3);
    v15 = (((2 * v14) & 0x10 | v14 & 1) << 8) | 0x600;
  }
  else
  {
    v15 = 1536;
  }
  v16 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a7 >= 0x10)
    v16 = a7;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v16;
  v17 = v15 & 0xF807FFFF | (a2 << 19) | 0x14 | *(_DWORD *)(a1 + 16) & 0xF8000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 16) = v17;
  *(_DWORD *)(a1 + 20) = a6;
  if (a6)
  {
    v18 = a1 + 48;
    v19 = 24 * a6;
    do
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFE0FF | ((BYTE1(*(_DWORD *)(a1 + 16)) & 0x1F | sub_22F0EEB00(a5) & 1) << 8);
      v20 = *(_OWORD *)a5;
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(a5 + 16);
      *(_OWORD *)v18 = v20;
      v18 += 24;
      a5 += 24;
      v19 -= 24;
    }
    while (v19);
  }
  return a1;
}

void sub_22F40A470(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v14;
  uint64_t v15;

  v14 = *(_DWORD *)(a1 + 8);
  if (v14 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v14) = a3;
  ++*(_DWORD *)(a1 + 8);
  sub_22E3CF554(a1, a4);
  sub_22E3CF554(a1, a5);
  if (a7)
  {
    v15 = 24 * a7;
    do
    {
      sub_22F0EED38(a6, a1, a2);
      a6 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

uint64_t sub_22F40A538(uint64_t a1)
{
  return *(uint64_t *)((char *)off_24FAC7A90 + ((uint64_t)((unint64_t)*(unsigned int *)(a1 + 16) << 56) >> 53));
}

char *sub_22F40A550(int a1)
{
  return off_24FAC7C58[a1];
}

unint64_t *sub_22F40A56C(unint64_t *result, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = 4;
  if (!a3)
    v3 = 0;
  *result = a2 & 0xFFFFFFFFFFFFFFFBLL | v3;
  return result;
}

uint64_t sub_22F40A588(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;

  v7 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v8 = result & 0xFFFFFFFFFFFFFFF0;
  if (a3 >= 0x10)
    v8 = a3;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 48) = a7;
  *(_QWORD *)(result + 56) = a4;
  if (a5)
    v9 = -2147483626;
  else
    v9 = 22;
  *(_DWORD *)(result + 16) = v9 & 0x8007FFFF | ((a7 & 0xFFF) << 19) | v7;
  *(_QWORD *)(result + 40) = result + 64;
  if (a7)
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(result + 64 + 8 * v10) = *(_QWORD *)(a6 + 8 * v10);
      ++v10;
    }
    while (a7 != v10);
  }
  return result;
}

uint64_t sub_22F40A5FC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v17;

  v10 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  v11 = result & 0xFFFFFFFFFFFFFFF0;
  if (a3 >= 0x10)
    v11 = a3;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v11;
  v12 = *(_DWORD *)(result + 16) & 0xFFF80000 | 0x17;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 56) = a4;
  *(_QWORD *)(result + 64) = a5;
  *(_DWORD *)(result + 16) = v10 & 0x1F00 | v12;
  *(_DWORD *)(result + 20) = (unsigned __int16)a10 | ((unsigned __int16)a7 << 16);
  v13 = (_QWORD *)(result + 72);
  *(_QWORD *)(result + 40) = result + 72;
  *(_QWORD *)(result + 48) = a10 + a7;
  if (a7)
  {
    v14 = 1;
    do
    {
      v15 = *a6++;
      *v13++ = v15;
    }
    while (a7 != v14++);
  }
  if (a10)
  {
    v17 = 0;
    do
    {
      v13[v17] = *(_QWORD *)(a9 + 8 * v17);
      ++v17;
    }
    while (a10 != v17);
  }
  return result;
}

uint64_t sub_22F40A694(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_22F40A5FC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_22F40A6A0(uint64_t result, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v8 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  v9 = result & 0xFFFFFFFFFFFFFFF0;
  if (a3 >= 0x10)
    v9 = a3;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v9;
  v10 = *(_DWORD *)(result + 16) & 0xFE000000;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 16) = ((a5 & 7) << 19) & 0xFE3FFFFF | ((a4 & 7) << 22) | v10 | v8 & 0x1F00 | 4;
  *(_QWORD *)(result + 40) = a6;
  *(_DWORD *)(result + 48) = a8;
  if (a8)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(result + 56 + 8 * v11) = *(_QWORD *)(a7 + 8 * v11);
      ++v11;
    }
    while (a8 != v11);
  }
  return result;
}

uint64_t sub_22F40A714(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  unint64_t v5;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1E00;
  v5 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v5 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 16) = v4 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x35;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

unint64_t sub_22F40A754(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F40A768(uint64_t result, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  int v5;
  unint64_t v6;

  v5 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v6 = result & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v6 = a5;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 16) = v5 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x33;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 40) = a4;
  return result;
}

uint64_t sub_22F40A7AC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;

  v4 = *(_QWORD *)(a2 + 16832);
  v5 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = result & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(result + 16) = v5 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x33;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = v4;
  *(_DWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_22F40A7F0(uint64_t a1)
{
  return (((*(_DWORD *)(a1 + 16) >> 19) - 11) < 0x3E) & (0x3FFCBCC000000001uLL >> ((*(_DWORD *)(a1 + 16) >> 19) - 11));
}

uint64_t sub_22F40A81C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;

  v4 = result & 0xFFFFFFFFFFFFFFF0;
  if (a3 >= 0x10)
    v4 = a3;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFF80000 | 0x72A;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a4 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a4 + 4);
  return result;
}

uint64_t sub_22F40A854@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(result + 20);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 40);
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_22F40A86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _DWORD v6[2];
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 20);
  v7 = *(_QWORD *)(a1 + 40);
  v6[0] = 8;
  v6[1] = v4;
  return sub_22F1143F4(a2, v3, (uint64_t)v6);
}

unint64_t sub_22F40A8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a1 > 7u || (*(_BYTE *)(a1 + 4) & 0xC) != 0)
    return sub_22EA28548(a2, a3, *(_QWORD *)a1);
  else
    return a3 & 0xFFFFFFFFFFFFFFF8 | (*(_DWORD *)a1 | a3) & 7;
}

uint64_t sub_22F40A8E8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *a1;
  if (v3 <= 7 && (a1[1] & 0xC) == 0)
    return a3 & 0xFFFFFFFFFFFFFFF0 | v3;
  if ((*(_QWORD *)a1 & 0xCFFFFFFF8) != 0)
    return sub_22EF5DBC4(a2, a3, *(_QWORD *)a1);
  return a3 & 0xFFFFFFFFFFFFFFF0 | *(_QWORD *)a1 & 7;
}

uint64_t sub_22F40A93C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_22E3CF554(a1, a2);
  sub_22E3CF554(a1, a4);
  if (a4)
  {
    v15 = 8 * a4;
    do
    {
      v16 = *a3++;
      sub_22E3CF554(a1, v16);
      v15 -= 8;
    }
    while (v15);
  }
  result = sub_22E3CF554(a1, a6);
  if (a6)
  {
    v17 = 8 * a6;
    do
    {
      v18 = *a5++;
      result = sub_22E3CF554(a1, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v14 = *(_DWORD *)(a1 + 8);
  if (v14 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v14) = a7;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F40AA14(_QWORD *a1, uint64_t a2)
{
  return sub_22F40A93C(a2, a1[3], a1 + 6, (a1[2] >> 19) & 0x7FLL, &a1[((a1[2] >> 19) & 0x7FLL) + 6], a1[2] >> 26, HIDWORD(a1[2]) & 1);
}

uint64_t sub_22F40AA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  sub_22E3CF554(a1, a2);
  sub_22E3CF554(a1, a3);
  result = sub_22E3CF554(a1, a5);
  if (a5)
  {
    v10 = 8 * a5;
    do
    {
      v11 = *a4++;
      result = sub_22E3CF554(a1, v11);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_22F40AAA0(uint64_t a1, uint64_t a2)
{
  return sub_22F40AA38(a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 48), *(_BYTE *)(a1 + 32) & 0x3F);
}

BOOL sub_22F40AAC0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_22F110744(a1, a2);
  if (result)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
    {
      return 0;
    }
    else
    {
      v5 = sub_22EF5CDF0(a2, a1);
      return v5 == sub_22EF5CDF0(a2, *(_QWORD *)(*(_QWORD *)(a2 + 16816) & 0xFFFFFFFFFFFFFFF0));
    }
  }
  return result;
}

uint64_t sub_22F40AB34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v3 = a1;
  if (a1 && *(_BYTE *)(a1 + 16) == 32)
    goto LABEL_3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
    return 0;
  result = sub_22F10CF48(a1);
  v3 = result;
  if (result)
  {
LABEL_3:
    if (sub_22E5761BC(v3))
      return 1;
    v5 = sub_22F31179C(v3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 40);
      if ((v6 & 7) != 0)
        v7 = 0;
      else
        v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      v8 = *(_QWORD *)(a2 + 1352);
      if (!v8)
      {
        v8 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "NSObject", 8uLL);
        *(_QWORD *)(a2 + 1352) = v8;
      }
      if (v7 != v8)
        return 0;
    }
    else
    {
      result = sub_22E491464(v3);
      if (!(_DWORD)result)
        return result;
    }
    v9 = sub_22F3174CC(v3);
    if (v9 == v10)
      return 1;
    v11 = v9;
    v12 = v10;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      if ((v14 & 7) != 0)
        v15 = 0;
      else
        v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = *(_QWORD *)(a2 + 1352);
      if (!v16)
      {
        v16 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "NSObject", 8uLL);
        *(_QWORD *)(a2 + 1352) = v16;
      }
      if (v15 != v16)
      {
        v17 = *(_QWORD *)(v13 + 40);
        v18 = (v17 & 7) != 0 ? 0 : v17 & 0xFFFFFFFFFFFFFFF8;
        v19 = *(_QWORD *)(a2 + 1360);
        if (!v19)
        {
          v19 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "NSCopying", 9uLL);
          *(_QWORD *)(a2 + 1360) = v19;
        }
        if (v18 != v19)
          break;
      }
      v11 += 8;
      result = 1;
      if (v11 == v12)
        return result;
    }
    return 0;
  }
  return result;
}

BOOL sub_22F40ACB8(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  int v3;

  for (i = a1; ; a1 = i)
  {
    v2 = sub_22EFFD7A4(a1);
    if (!v2)
      break;
    i = *(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  return v3 == 10 || v3 == 32 || sub_22F115064(i);
}

uint64_t sub_22F40AD24(uint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x800) != 0)
  {
    v3 = a1;
    do
    {
      if (v1 == 39)
      {
        result = v3;
      }
      else
      {
        v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v6 != 39 || (result = sub_22F10CF48(v3)) == 0)
        {
          if ((v1 & 0xFE) == 0x28)
          {
            v7 = v3;
LABEL_14:
            if ((*(_BYTE *)(v7 + 18) & 0x10) != 0)
            {
              do
              {
                v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v7)
                {
                  v8 = *(_DWORD *)(v7 + 16);
                  if ((v8 & 0xFE) == 0x28)
                    continue;
                }
                v7 = sub_22F10CF48(v7);
                v8 = *(_DWORD *)(v7 + 16);
              }
              while ((v8 & 0x100000) != 0);
            }
            v4 = *(_QWORD *)(v7 + 32);
            goto LABEL_8;
          }
          if ((v6 & 0xFE) == 0x28)
          {
            v7 = sub_22F10CF48(v3);
            if (v7)
              goto LABEL_14;
          }
          result = sub_22EFFD7A4(v3);
          if (!result)
            return result;
          if (*(_BYTE *)(result + 16) == 5 && *(_QWORD *)(result + 40))
            return 1;
        }
      }
      v4 = *(_QWORD *)(result + 32);
LABEL_8:
      v5 = v4 & 0xFFFFFFFFFFFFFFF0;
      v3 = *(_QWORD *)v5;
      v1 = *(_DWORD *)(*(_QWORD *)v5 + 16);
    }
    while ((v1 & 0x800) != 0);
  }
  return 0;
}

unint64_t sub_22F40AE38(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_22F10C2A4(*(_QWORD *)(a1 + 40));
  if (v1 && (*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v1 = 0;
  return sub_22E6939D8(v1);
}

uint64_t sub_22F40AE68(uint64_t a1, const llvm::APInt *a2)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _BYTE v6[8];
  unsigned int v7;

  v2 = *((_DWORD *)a2 + 2);
  v7 = v2;
  if (v2 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)v6, a2);
    v2 = v7;
    a2 = (const llvm::APInt *)v6;
  }
  v5 = v2;
  v4 = *(_QWORD *)a2;
  result = llvm::APFixedPoint::toString();
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

__n128 sub_22F40AF14(unint64_t a1, unint64_t a2, char a3, char a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unsigned int v10;
  __n128 *v11;
  uint64_t v12;
  char v13;
  __n128 result;
  __n128 *v16;

  if (a2 < 0x10)
    v8 = 0;
  else
    v8 = *(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 0x17;
  v9 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v9 = a5;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *(_DWORD *)(a1 + 16) & 0xFFE00000;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 16) = (v10 | ((v8 | a4 & 0x1F) << 8)) & 0xFFE7FFFF | ((a3 & 3) << 19) | 0xE;
  *(_DWORD *)(a1 + 20) = a8;
  *(_QWORD *)(a1 + 40) = a6;
  if (a6 && a8)
  {
    v11 = (__n128 *)(a1 + 48);
    v12 = 24 * a8;
    do
    {
      v16 = (__n128 *)a7;
      v13 = sub_22F0EEB00(a7);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFE0FF | ((v13 & 3 | (16 * ((v13 & 8) != 0)) & 0x1F | BYTE1(*(_DWORD *)(a1 + 16)) & 0x1F) << 8);
      result = *v16;
      v11[1].n128_u64[0] = v16[1].n128_u64[0];
      *v11 = result;
      v11 = (__n128 *)((char *)v11 + 24);
      a7 = (uint64_t)&v16[1].n128_i64[1];
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

void sub_22F40AFFC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int32x4_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *__src;
  size_t __n;

  v5 = (int32x4_t *)a1[1];
  v5->i32[0] = a3;
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 32);
  if (!v7)
  {
    v5->i64[1] = 0;
    goto LABEL_11;
  }
  v12 = 0;
  __src = 0;
  __n = 0;
  sub_22F0AB9D8((uint64_t)&v12, a2, v7, a3 | (unint64_t)(a3 << 32));
  v9 = HIDWORD(__n);
  if (!v12)
  {
    v11 = 0;
LABEL_8:
    v5 = (int32x4_t *)a1[1];
    v5->i64[1] = v11;
    if (v9)
    {
      free(__src);
      v5 = (int32x4_t *)a1[1];
    }
    goto LABEL_10;
  }
  if (HIDWORD(__n))
  {
    v10 = (void *)sub_22E3CD3D4(a2 + 2032, __n, 3);
    memcpy(v10, __src, __n);
    if (v12)
      v11 = (uint64_t)v10;
    else
      v11 = 0;
    v9 = HIDWORD(__n);
    goto LABEL_8;
  }
  v5 = (int32x4_t *)a1[1];
  v5->i64[1] = (uint64_t)__src;
LABEL_10:
  v6 = *a1;
LABEL_11:
  v5[1] = vdupq_n_s32(a3);
  sub_22F116B38(a2, *(_DWORD *)(v6 + 20), v6 + 48, (unint64_t *)&v5[2], a3);
}

void sub_22F40B104(_DWORD **a1, uint64_t a2, unsigned int a3)
{
  int v5;
  void *v6;
  uint64_t v7;
  void *__src;
  size_t __n;

  *a1[1] = a3;
  v7 = 0;
  __src = 0;
  __n = 0;
  sub_22F0AB9D8((uint64_t)&v7, a2, *((_QWORD *)*a1 + 4), a3 | ((unint64_t)a3 << 32));
  v5 = HIDWORD(__n);
  if (v7)
  {
    if (!HIDWORD(__n))
    {
      *((_QWORD *)a1[1] + 1) = __src;
      return;
    }
    v6 = (void *)sub_22E3CD3D4(a2 + 2032, __n, 3);
    memcpy(v6, __src, __n);
    v5 = HIDWORD(__n);
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)a1[1] + 1) = v6;
  if (v5)
    free(__src);
}

uint64_t *sub_22F40B1B4(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v3 = *result;
  v4 = result[1];
  *(_BYTE *)(v4 + 16) = 1;
  *(_DWORD *)v4 = a3;
  *(_DWORD *)(v4 + 4) = a3;
  v5 = *(unsigned int *)(v3 + 16);
  if (((v5 >> 19) & 0x7F) != 0)
  {
    v12 = a3;
    v7 = result;
    v8 = 0;
    v9 = a3;
    v10 = 8 * ((v5 >> 19) & 0x7F);
    do
    {
      result = sub_22EF579A8(a2, *(_QWORD *)(*v7 + v8 + 48), v9);
      *(_QWORD *)(v7[1] + v8 + 24) = result;
      v8 += 8;
    }
    while (v10 != v8);
    v3 = *v7;
    v4 = v7[1];
    a3 = v12;
  }
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(v4 + 12) = a3;
  v6 = *(_DWORD *)(v3 + 16) >> 26;
  if (v6)
  {
    v11 = v4 + 24;
    do
    {
      *(_DWORD *)(v11 + 8 * ((*(_QWORD *)(v3 + 16) >> 19) & 0x7FLL)) = a3;
      v11 += 4;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22F40B28C(uint64_t *a1)
{
  uint64_t v1;
  BOOL v3;
  uint64_t v4;

  v1 = *a1;
  if ((*a1 & 0xF) == 0
    && (v1 ? (v3 = *(_BYTE *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 16) == 7) : (v3 = 0),
        v3 && (v4 = *(_QWORD *)a1[1]) != 0 && *(unsigned __int16 *)(v4 + 32) - 33 <= 2))
  {
    return *(unsigned int *)(v4 + 16);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_22F40B2DC(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)a1;
  if ((result & 0xF) == 0 && *(_BYTE *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 16) == 37)
    return sub_22F1169C8(result, *(_QWORD *)(a1 + 8));
  return result;
}

uint64_t sub_22F40B320@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 40);
  v3 = *(_DWORD *)(a1[1] + 28);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v3;
  return sub_22EFC6DC4(a2 + 16, v2);
}

unint64_t sub_22F40B340(_QWORD *a1)
{
  int *v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7[2];

  v2 = (int *)a1[1];
  v3 = *v2;
  if (!*v2)
  {
    v5 = *((_QWORD *)v2 + 1);
    if (v5 && (v6 = *(_QWORD *)(*a1 + 32)) != 0)
    {
      v7[0] = v6;
      v7[1] = v5;
      v3 = sub_22F0AB0EC(v7);
    }
    else
    {
      v3 = v2[5];
      if (!v3)
        v3 = v2[4];
    }
  }
  return v3 | ((unint64_t)v2[7] << 32);
}

void *sub_22F40B3B0(_QWORD **a1, uint64_t a2, _QWORD *a3)
{
  void *result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned int v15;
  BOOL v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  size_t v22;

  result = (void *)sub_22E8BADE8((uint64_t)a1);
  if ((_DWORD)result)
  {
    *a1[1] = *a3;
    v7 = (*((_DWORD *)*a1 + 4) >> 19) & 0x1FF;
    v8 = v7 - 173;
    v9 = 4;
    v11 = (v7 - 181) < 0x25 || v7 == 168 || v7 == 179;
    v12 = 4;
    if (!v11)
      v12 = 1;
    if (v8 >= 5)
      v9 = v12;
    v13 = (char *)a1[1] + ((v9 + 7) & -v9);
    v14 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1FF;
    v15 = v14 - 173;
    v17 = (v14 - 181) < 0x25 || v14 == 168 || v14 == 179;
    v18 = 4;
    if (!v17)
      v18 = 1;
    if (v15 < 5)
      v18 = 4;
    v20 = (v7 - 181) < 0x25 || v7 == 168 || v7 == 179;
    v21 = 4;
    if (!v20)
      v21 = 0;
    if (v8 >= 5)
      v22 = v21;
    else
      v22 = 4;
    return memcpy(v13, (char *)a3 + ((v18 + 7) & -v18), v22);
  }
  return result;
}

char *sub_22F40B4AC(int a1)
{
  return off_24FAC7D50[a1 - 1];
}

uint64_t sub_22F40B4D0@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  unsigned int v6[216];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_22F1D4230((uint64_t)v6);
  sub_22E462F04(&v5, v6);
  sub_22F11813C(a1, a2);
  return sub_22E54B4D4((uint64_t)v6);
}

uint64_t sub_22F40B554@<X0>(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v5[2];
  unsigned int v6[216];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_22F1D4230((uint64_t)v6);
  sub_22E462F04(v5, v6);
  sub_22F40B5DC(a1, v5, a2);
  return sub_22E54B4D4((uint64_t)v6);
}

void sub_22F40B5DC(_DWORD *a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  _BYTE v6[64];
  uint64_t v7;
  void *v8;
  __int128 v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v6, (uint64_t)&v8);
  sub_22F1186E0(a1, (llvm::raw_ostream *)v6, a2, 0);
  std::string::__init(a3, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v6);
  if (v8 != v10)
    free(v8);
}

uint64_t **sub_22F40B69C(uint64_t **a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 v6;
  __int128 v7;
  _DWORD v8[2];
  unsigned int v9[216];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 8) != 0)
  {
    v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
  }
  else
  {
    v4 = a2 & 7;
  }
  sub_22F1D4230((uint64_t)v9);
  sub_22E462F04((unint64_t *)&v6, v9);
  v7 = v6;
  v8[0] = 0;
  *(_DWORD *)((char *)v8 + 3) = 0;
  sub_22F119710((uint64_t)&v7, (unint64_t)v3, v4, a1, &unk_22F5CEC72, 0);
  sub_22E54B4D4((uint64_t)v9);
  return a1;
}

_QWORD *sub_22F40B764(_QWORD *result)
{
  if ((result & 7) != 0)
    return ((_QWORD *(*)(const char *__return_ptr))((char *)sub_22F40B794
                                                             + 4 * byte_22F4A9B82[(result & 7) - 1]))("__unsafe_indexable");
  return result;
}

llvm::raw_ostream *sub_22F40B794(int a1, llvm::raw_ostream *a2)
{
  return sub_22E47DAC0(a2, "__bidi_indexable");
}

_QWORD *sub_22F40B7C0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_24FAC7D80;
  result[1] = a2;
  result[2] = a3;
  return result;
}

BOOL sub_22F40B7D4(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;
  _QWORD v4[2];
  uint64_t v5;
  void *__p;
  void *v7;

  v1 = a1 + 16;
  sub_22F40B974((uint64_t)v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_22F40B984(v4);
  v2 = sub_22F40BBBC(v1 + 8, v1, (uint64_t)&v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v2;
}

uint64_t sub_22F40B83C(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t result;
  char v4;

  v1 = *(char **)(a1 + 32);
  v2 = *(char **)(a1 + 40);
  if (v1 == v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v4 = *v1++;
    result = (1 << v4) | result;
  }
  while (v1 != v2);
  return result;
}

_QWORD *sub_22F40B870(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FAC7DA8;
  a1[3] = &off_24FAC7DF8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_22F40B8BC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FAC7DA8;
  a1[3] = &off_24FAC7DF8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F40B920(uint64_t a1, _DWORD *a2)
{
  _QWORD v3[3];

  memset(v3, 0, sizeof(v3));
  sub_22F120AB0(v3, a2);
  if (v3[0])
    return *(_QWORD *)(*(_QWORD *)(v3[0] + 16) + 8 * ((*(_BYTE *)(v3[0] + 2) & 0x40) == 0));
  else
    return 0;
}

double sub_22F40B974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

double sub_22F40B984(_QWORD *a1)
{
  void *v2;
  double result;
  __int128 v4;
  uint64_t v5;

  a1[2] = sub_22EF5CDF0(*a1, *(_QWORD *)(a1[1] & 0xFFFFFFFFFFFFFFF0));
  sub_22F120BCC((char **)&v4, (void *)*a1, a1[1], 0);
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 3) = v4;
  a1[5] = v5;
  return result;
}

uint64_t sub_22F40B9F0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)())((char *)nullsub_1108 + 4 * byte_22F4A9CED[*(_DWORD *)(a2 + 28) & 0x7F]))();
}

void sub_22F40BA14(uint64_t *a1, unint64_t a2)
{
  sub_22F120F24(a1, a2, 0, 1);
}

void sub_22F40BA20(uint64_t *a1, unint64_t a2)
{
  sub_22F121228(a1, a2, 0);
}

uint64_t sub_22F40BA2C(uint64_t a1, _QWORD *a2, uint64_t *a3, __n128 a4)
{
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(a1 + 8) = 0;
  sub_22F12151C(a1, a3, a4);
  v6 = sub_22F10B9CC(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0));
  if (v6)
  {
    v7 = v6;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104));
    if ((**(_QWORD **)(v7 + 128) & 0x400) != 0)
      *(_WORD *)(a1 + 8) |= 1u;
  }
  return 1;
}

_QWORD *sub_22F40BA98(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FAC7DD0;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  return a1;
}

void sub_22F40BAEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FAC7DD0;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F40BB50(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[1];
  v5 = v4 + a2;
  if ((unint64_t)(v4 + a2) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = a1[1];
    v5 = v4 + a2;
  }
  bzero((void *)(*a1 + 2 * v4), 2 * a2);
  a1[1] = v5;
}

BOOL sub_22F40BBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;

  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(_QWORD *)(a3 + 16);
  if (v4 == v5)
    return 1;
  v7 = *(_DWORD *)a3 + 63;
  v8 = v7 >> 6;
  if (v7 >= 0x40)
  {
    sub_22F1228BC((unint64_t *)(a1 + 8), v7 >> 6);
    v4 = *(_QWORD *)(a3 + 8);
    v5 = *(_QWORD *)(a3 + 16);
  }
  if (v4 == v5)
    return 1;
  do
  {
    v9 = sub_22F12276C((uint64_t *)v4);
    v10 = *(_QWORD *)(v4 + 8);
    v11 = (*(_DWORD *)(v4 + 16) + v10 + 63) >> 6;
    result = v11 <= v8;
    if (v11 > v8)
      break;
    if (v11 > (v10 >> 6))
    {
      v13 = (v10 >> 6);
      do
        *(_BYTE *)(*v3 + v13++) |= v9;
      while (v11 != v13);
    }
    v4 += 32;
  }
  while (v4 != v5);
  return result;
}

uint64_t sub_22F40BC98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[3];
  if (!v2 || (*(_BYTE *)(v2 + 29) & 1) == 0)
    goto LABEL_3;
  sub_22EFC8E88(v2);
  v6 = *(uint64_t **)v5;
  v7 = *(unsigned int *)(v5 + 8);
  v8 = *(uint64_t **)v5;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v8 = *(uint64_t **)v5;
    while (*(_WORD *)(*v8 + 32) != 38)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_3;
    }
  }
  if (v8 != &v6[v7])
  {
    do
    {
      v15 = *v6++;
      result = v15;
    }
    while (*(_WORD *)(v15 + 32) != 38);
  }
  else
  {
LABEL_3:
    result = sub_22F10D4DC(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0));
    if (result)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((*(_BYTE *)(v4 + 29) & 1) == 0)
        return 0;
      sub_22EFC8E88(v4);
      v11 = *(uint64_t **)v10;
      v12 = *(unsigned int *)(v10 + 8);
      i = *(uint64_t **)v10;
      if ((_DWORD)v12)
      {
        v14 = 8 * v12;
        for (i = *(uint64_t **)v10; *(_WORD *)(*i + 32) != 38; ++i)
        {
          v14 -= 8;
          if (!v14)
            return 0;
        }
      }
      if (i == &v11[v12])
      {
        return 0;
      }
      else
      {
        do
        {
          v16 = *v11++;
          result = v16;
        }
        while (*(_WORD *)(v16 + 32) != 38);
      }
    }
  }
  return result;
}

_QWORD *sub_22F40BDA0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FAC7DF8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_22F40BDDC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FAC7DF8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F40BE28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 72);
  if (v2 != (void *)(a1 + 88))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(24 * *(unsigned int *)(a1 + 64)));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    MEMORY[0x2348A0E84](v3, 0x1060C80766BE61ALL);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  if (*(_QWORD *)a1)
    MEMORY[0x2348A0E84](*(_QWORD *)a1, 0x1000C8000313F17);
  return a1;
}

unint64_t sub_22F40BECC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t result;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((*(_BYTE *)(v2 + 82) & 0xC) != 0)
    return (a1[10] & 0xC0000000) != 0x80000000;
  result = sub_22EFD7260(v2);
  if ((_DWORD)result)
    return (a1[10] & 0xC0000000) != 0x80000000;
  return result;
}

uint64_t sub_22F40BF20(uint64_t result, uint64_t a2, int a3)
{
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_24FAC7E20;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 136) = a3;
  return result;
}

uint64_t sub_22F40BF60(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC7E20;
  llvm::deallocate_buffer(*(llvm **)(a1 + 112), (void *)(16 * *(unsigned int *)(a1 + 128)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 88), (void *)(24 * *(unsigned int *)(a1 + 104)));
  sub_22F40D768(a1 + 64);
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(16 * *(unsigned int *)(a1 + 80)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(24 * *(unsigned int *)(a1 + 56)));
  *(_QWORD *)a1 = off_24FAC7E50;
  sub_22F40C4F0(a1 + 8);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(80 * *(unsigned int *)(a1 + 24)));
  return a1;
}

void sub_22F40C01C(uint64_t a1)
{
  sub_22F40BF60(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F40C040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a3;
  v12 = a3;
  v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8 | a2 & 7;
  LODWORD(v12) = v3;
  v13 = 0;
  v5 = sub_22F40CA94((uint64_t *)(a1 + 40), (uint64_t)&v11, &v13);
  v6 = v13;
  if (!v5)
    v6 = *(_QWORD *)(a1 + 40) + 24 * *(unsigned int *)(a1 + 56);
  if (v6 == *(_QWORD *)(a1 + 40) + 24 * *(unsigned int *)(a1 + 56))
  {
    v8 = *(_QWORD *)(sub_22EFCAD5C((v11 & 0xFFFFFFFFFFFFFFF8) + 72) + 16);
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0)
      v9 = (_QWORD *)*v9;
    if (v9)
      v10 = v9 - 8;
    else
      v10 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v10);
    v13 = 0;
    if ((sub_22F40CA94((uint64_t *)(a1 + 40), (uint64_t)&v11, &v13) & 1) != 0)
      v6 = v13;
    else
      v6 = *(_QWORD *)(a1 + 40) + 24 * *(unsigned int *)(a1 + 56);
  }
  return *(_QWORD *)(v6 + 16);
}

uint64_t sub_22F40C144(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)(a1 + 112);
  while (1)
  {
    v9 = 0;
    v10 = a2;
    if (sub_22F246C54(v4, &v10, &v9))
    {
      v5 = v9;
      v6 = *(_QWORD *)(a1 + 112);
      v7 = *(unsigned int *)(a1 + 128);
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 112);
      v7 = *(unsigned int *)(a1 + 128);
      v5 = v6 + 16 * v7;
    }
    if (v5 == v6 + 16 * v7)
      break;
    a2 = *(_QWORD *)(v5 + 8);
  }
  return a2;
}

uint64_t sub_22F40C1C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD v8[116];

  v8[115] = *MEMORY[0x24BDAC8D0];
  sub_22F1234AC((uint64_t)v8, a1, a2, a3, a4, a5);
  sub_22F12653C((uint64_t)v8, a6);
  return sub_22F126660((uint64_t)v8);
}

uint64_t sub_22F40C244(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC7E80;
  sub_22F40D63C(a1 + 120);
  llvm::deallocate_buffer(*(llvm **)(a1 + 120), (void *)(16 * *(unsigned int *)(a1 + 136)));
  sub_22F40D598(a1 + 96);
  llvm::deallocate_buffer(*(llvm **)(a1 + 96), (void *)(24 * *(unsigned int *)(a1 + 112)));
  sub_22F40D524(a1 + 72);
  llvm::deallocate_buffer(*(llvm **)(a1 + 72), (void *)(16 * *(unsigned int *)(a1 + 88)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(48 * *(unsigned int *)(a1 + 64)));
  *(_QWORD *)a1 = off_24FAC7E50;
  sub_22F40C4F0(a1 + 8);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(80 * *(unsigned int *)(a1 + 24)));
  return a1;
}

void sub_22F40C30C(uint64_t a1)
{
  sub_22F40C244(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F40C330(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_22F129AE4(a1, a2);
  v8 = 0;
  v9 = a3;
  v5 = sub_22F246C54((uint64_t *)v4, &v9, &v8);
  v6 = v8;
  if (!v5)
    v6 = *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16);
  return *(unsigned int *)(v6 + 8);
}

uint64_t sub_22F40C388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1 + 96;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7[0] = a2;
  v7[1] = a3;
  return sub_22F40E11C(v5, v7)[2];
}

__n128 sub_22F40C3DC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v15 = a3;
  v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8 | a2 & 7;
  LODWORD(v15) = v4;
  v16 = 0;
  v7 = sub_22F40D3B8((uint64_t *)(a1 + 48), (uint64_t)&v14, &v16);
  v8 = v16;
  if (!v7)
    v8 = *(_QWORD *)(a1 + 48) + 48 * *(unsigned int *)(a1 + 64);
  if (v8 == *(_QWORD *)(a1 + 48) + 48 * *(unsigned int *)(a1 + 64))
  {
    v11 = *(_QWORD *)(sub_22EFCAD5C((v14 & 0xFFFFFFFFFFFFFFF8) + 72) + 16);
    v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)*v12;
    if (v12)
      v13 = v12 - 8;
    else
      v13 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v13);
    v16 = 0;
    if ((sub_22F40D3B8((uint64_t *)(a1 + 48), (uint64_t)&v14, &v16) & 1) != 0)
      v8 = v16;
    else
      v8 = *(_QWORD *)(a1 + 48) + 48 * *(unsigned int *)(a1 + 64);
  }
  result = *(__n128 *)(v8 + 16);
  v10 = *(_OWORD *)(v8 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v10;
  return result;
}

void sub_22F40C4F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 80 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 80;
      v2 -= 80;
    }
    while (v2);
  }
}

BOOL sub_22F40C554(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[16];
  unsigned __int8 v9;

  sub_22F33A3F0((uint64_t)v8, a1, a2);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

_QWORD *sub_22F40C5E4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F40C65C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40C6F8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

uint64_t sub_22F40C65C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 80 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 80 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F40C6F8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F12DAF8(a1, v6);
  v8 = 0;
  sub_22F40C65C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F40C7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 80 * v6;
    do
    {
      *v7 = -4096;
      v7 += 10;
      v8 -= 80;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F40C65C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x100000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F40C8A0(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

uint64_t sub_22F40C8A0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 56 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 56 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 56 * v10), (const void *)(*(_QWORD *)a2 + 56 * v10), *(_QWORD *)a2 + 56 * v11 - (*(_QWORD *)a2 + 56 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

BOOL sub_22F40C9C8(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  BOOL v4;

  if (*a1 == *a2
    && (a1[1] == a2[1] ? (v2 = a1[2] == a2[2]) : (v2 = 0),
        v2 && (a1[3] == a2[3] ? (v4 = a1[4] == a2[4]) : (v4 = 0), v4 && a1[5] == a2[5])))
  {
    return a1[6] == a2[6];
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F40CA2C(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22F40CA94(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40CB50((uint64_t)a1, a2, v8);
    v7 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = v7;
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_22F40CA94(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v17;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = *(_DWORD *)(a2 + 8);
    v7 = ((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) & (v3 - 1);
    v8 = *a1 + 24 * v7;
    v9 = *(_QWORD *)v8;
    v10 = *(_DWORD *)(v8 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v8 && v6 == v10)
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      result = 1;
      while (v9 || v10)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v10 == 0;
        if (v15 && v9 == -1)
          v12 = v8;
        v17 = v7 + v13++;
        v7 = v17 & v5;
        v8 = v4 + 24 * (v17 & v5);
        v9 = *(_QWORD *)v8;
        v10 = *(_DWORD *)(v8 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)v8 && v6 == v10)
          goto LABEL_8;
      }
      result = 0;
      if (v12)
        v8 = v12;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v8;
  return result;
}

uint64_t sub_22F40CB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F12EFA0(a1, v6);
  v8 = 0;
  sub_22F40CA94((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 | *(unsigned int *)(a3 + 8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40CC00(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F24D0EC((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F40CC98(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_QWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F40CC98(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F12F18C(a1, v6);
  v9 = 0;
  sub_22F24D0EC((uint64_t *)a1, a2, &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40CD4C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v12;
  _OWORD *v13;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45B630;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = v4[1];
      if ((*v4 != -4096 || v9 != 0x7FFFFFFFFFFFFFFFLL) && (*v4 != -8192 || v9 != 0x8000000000000000))
      {
        v13 = 0;
        result = sub_22F24D0EC((uint64_t *)v5, v4, &v13);
        v12 = v13;
        *v13 = *(_OWORD *)v4;
        *((_QWORD *)v12 + 2) = v4[2];
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL sub_22F40CE28(uint64_t a1)
{
  return !*(_QWORD *)a1
      && *(_OWORD *)(a1 + 8) == 0
      && !*(_QWORD *)(a1 + 24)
      && !*(_QWORD *)(a1 + 32)
      && *(_QWORD *)(a1 + 40) == 0;
}

uint64_t sub_22F40CEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 56 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 56 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 56 * v5), (const void *)(*(_QWORD *)a2 + 56 * v5), *(_QWORD *)a2 + 56 * v6 - (*(_QWORD *)a2 + 56 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22F40CF80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F40D010(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F40D100(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F40D010(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == 0x8000000000000000;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_22F40D100(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1322CC(a1, v6);
  v9 = 0;
  sub_22F40D010(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40D1B8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v13;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_22F45B630;
      v8 -= 16;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      v10 = v4[1];
      if ((*v4 != -4096 || v10 != 0x7FFFFFFFFFFFFFFFLL) && (v9 != -8192 || v10 != 0x8000000000000000))
      {
        v13 = 0;
        result = sub_22F40D010(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v13);
        *v13 = *(_OWORD *)v4;
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F40D288(uint64_t result)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_OWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2++ = xmmword_22F45B630;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22F132390(result);
    }
  }
  return result;
}

void sub_22F40D2DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_22F244D40((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_22F40D34C(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22F40D3B8(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40D474((uint64_t)a1, a2, v8);
    v7 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = v7;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
  }
  return v5;
}

uint64_t sub_22F40D3B8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v17;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = *(_DWORD *)(a2 + 8);
    v7 = ((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) & (v3 - 1);
    v8 = *a1 + 48 * v7;
    v9 = *(_QWORD *)v8;
    v10 = *(_DWORD *)(v8 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v8 && v6 == v10)
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      result = 1;
      while (v9 || v10)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v10 == 0;
        if (v15 && v9 == -1)
          v12 = v8;
        v17 = v7 + v13++;
        v7 = v17 & v5;
        v8 = v4 + 48 * (v17 & v5);
        v9 = *(_QWORD *)v8;
        v10 = *(_DWORD *)(v8 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)v8 && v6 == v10)
          goto LABEL_8;
      }
      result = 0;
      if (v12)
        v8 = v12;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v8;
  return result;
}

uint64_t sub_22F40D474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F13390C(a1, v6);
  v8 = 0;
  sub_22F40D3B8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 | *(unsigned int *)(a3 + 8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40D524(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char **v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          v4 = sub_22F40DEA8((char **)result);
          result = MEMORY[0x2348A0E9C](v4, 0x1080C40ABB4582ELL);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22F40D598(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v9;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 24 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 16);
    do
    {
      v4 = *(v3 - 2);
      v5 = *(v3 - 1);
      v6 = v3 - 2;
      if ((v4 != -4096 || v5 != 0x7FFFFFFFFFFFFFFFLL) && (v4 != -8192 || v5 != 0x8000000000000000))
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          v9 = sub_22F40BE28(result);
          result = MEMORY[0x2348A0E9C](v9, 0x10F0C40DF88B1A7);
        }
      }
      v3 += 3;
    }
    while (v6 + 3 != (uint64_t *)v2);
  }
  return result;
}

uint64_t sub_22F40D63C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          v4 = sub_22F40E5D4(result);
          result = MEMORY[0x2348A0E9C](v4, 0x10A0C40A75E38C8);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

char **sub_22F40D6B0(char **a1, uint64_t a2, char *a3)
{
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = (_QWORD)a3 << 6;
  v7 = (char *)operator new[]();
  v8 = v7;
  if (a3)
  {
    bzero(v7, v6);
    *a1 = v8;
    a1[1] = a3;
    v9 = a2 + ((_QWORD)a3 << 6);
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a2;
      v10 = *(_OWORD *)(a2 + 8);
      v11 = *(_OWORD *)(a2 + 24);
      v12 = *(_OWORD *)(a2 + 40);
      *((_QWORD *)v8 + 7) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(v8 + 40) = v12;
      *(_OWORD *)(v8 + 24) = v11;
      *(_OWORD *)(v8 + 8) = v10;
      a2 += 64;
      v8 += 64;
    }
    while (a2 != v9);
  }
  else
  {
    *a1 = v7;
    a1[1] = 0;
  }
  return a1;
}

uint64_t sub_22F40D768(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          v4 = sub_22F40BE28(result);
          result = MEMORY[0x2348A0E9C](v4, 0x10F0C40DF88B1A7);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22F40D7DC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_22F2C52BC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F40D880(a2, a3, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v12 = *a4;
    *(_QWORD *)(result + 8) = a3[1];
    *(_QWORD *)(result + 16) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F40D880(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22F1361A8(a1, v6);
    v8 = 0;
    sub_22F2C52BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40D93C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v14 = 0;
      result = sub_22F2C52BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v14);
      v12 = v14;
      *v14 = *a2;
      v13 = a2[2];
      v12[1] = a2[1];
      v12[2] = v13;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_22F40DA0C(uint64_t result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = a2;
  v7 = result;
  if (a2 == a4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = a2;
    do
    {
      ++v8;
      v10 = v9 + 8;
      while (v10 != a3)
      {
        v11 = *v10;
        v10 += 8;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v9 = v10 - 8;
          goto LABEL_8;
        }
      }
      v9 = a3;
LABEL_8:
      ;
    }
    while (v9 != a4);
  }
  v12 = *(unsigned int *)(result + 8);
  if (v8 + v12 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(unsigned int *)(v7 + 8);
  }
  if (v6 != a4)
  {
    v13 = (_OWORD *)(*(_QWORD *)v7 + (v12 << 6));
    do
    {
      v14 = *(_OWORD *)v6;
      v15 = *((_OWORD *)v6 + 1);
      v16 = *((_OWORD *)v6 + 3);
      v13[2] = *((_OWORD *)v6 + 2);
      v13[3] = v16;
      *v13 = v14;
      v13[1] = v15;
      v17 = v6 + 8;
      while (v17 != a3)
      {
        v18 = *v17;
        v17 += 8;
        if (v18 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = v17 - 8;
          goto LABEL_18;
        }
      }
      v6 = a3;
LABEL_18:
      v13 += 4;
    }
    while (v6 != a4);
    LODWORD(v12) = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(v7 + 8) = v12 + v8;
  return result;
}

uint64_t sub_22F40DB0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  result = sub_22F40CA94((uint64_t *)a2, a3, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_22F40CB50(a2, a3, v13);
    v9 = result;
    v12 = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)result = v12;
    *(_QWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F40DBAC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F40C65C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F40DC3C(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 80 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F40DC3C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_22F40C6F8(a1, a3, a2);
  *v6 = *a3;
  v6[1] = v6 + 3;
  v6[2] = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
    sub_22F40CEA4((uint64_t)(v6 + 1), a4);
  return v6;
}

_QWORD *sub_22F40DCA8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[7];
  if (v3 != a1 + 9)
    free(v3);
  v4 = (_QWORD *)a1[3];
  if (v4 != a1 + 5)
    free(v4);
  return a1;
}

void sub_22F40DD04(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F40DD70(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F40DD70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = 8 * v2;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        v8 = sub_22F40DCA8((_QWORD *)result);
        result = MEMORY[0x2348A0E9C](v8, 0x10E0C40B594695DLL);
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_22F40DDEC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  v5 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0x100000000;
  if (*((_DWORD *)a2 + 8))
    sub_22F24C890(v5, (uint64_t)a2 + 24);
  v6 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = 0x100000000;
  if (*((_DWORD *)a2 + 16))
    sub_22F24C890(a1 + 56, (uint64_t)a2 + 56);
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x100000000;
  if (*((_DWORD *)a2 + 22))
    sub_22F24C890(a1 + 80, (uint64_t)(a2 + 5));
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  return a1;
}

char **sub_22F40DEA8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD **)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = sub_22F40DCA8(v6);
        MEMORY[0x2348A0E9C](v7, 0x10E0C40B594695DLL);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_22F40DF2C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40DF94(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F40DF94(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F136278(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40E044(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char **v12;
  uint64_t *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(char **)result;
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_22F24C318(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v13);
      v10 = v13;
      *v13 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
      {
        v12 = sub_22F40DEA8((char **)result);
        result = MEMORY[0x2348A0E9C](v12, 0x1080C40ABB4582ELL);
      }
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F40E11C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F2A24EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40E188(a1, a2, v8);
    v7 = a2[1];
    *v5 = *a2;
    v5[1] = v7;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_22F40E188(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F136338(a1, v6);
  v9 = 0;
  sub_22F2A24EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40E240(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45B630;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      v10 = v4[1];
      if ((*v4 != -4096 || v10 != 0x7FFFFFFFFFFFFFFFLL) && (v9 != -8192 || v10 != 0x8000000000000000))
      {
        v17 = 0;
        sub_22F2A24EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v17);
        v13 = v17;
        v14 = v4[1];
        *v17 = *v4;
        v13[1] = v14;
        v15 = v4[2];
        v4[2] = 0;
        v13[2] = v15;
        ++*(_DWORD *)(v5 + 8);
        result = v4[2];
        v4[2] = 0;
        if (result)
        {
          v16 = sub_22F40BE28(result);
          result = MEMORY[0x2348A0E9C](v16, 0x10F0C40DF88B1A7);
        }
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F40E344(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  result = sub_22F40D3B8((uint64_t *)a2, a3, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_22F40D474(a2, a3, v14);
    v9 = result;
    v12 = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)result = v12;
    v13 = a4[1];
    *(_OWORD *)(result + 16) = *a4;
    *(_OWORD *)(result + 32) = v13;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F40E3E4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40E44C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F40E44C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F13655C(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40E4FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_22F24C318(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v13);
      v10 = v13;
      *v13 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
      {
        v12 = sub_22F40E5D4(result);
        result = MEMORY[0x2348A0E9C](v12, 0x10A0C40A75E38C8);
      }
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F40E5D4(uint64_t a1)
{
  sub_22F40DEA8((char **)(a1 + 24));
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F40E610(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x4000000000;
  *(_QWORD *)(a1 + 1056) = a1 + 1072;
  *(_QWORD *)(a1 + 1064) = 0x4000000000;
  *(_QWORD *)(a1 + 2608) = sub_22F0C975C(a2, a3);
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_DWORD *)(a1 + 2632) = 0;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_DWORD *)(a1 + 2656) = 0;
  *(_BYTE *)(a1 + 2664) = a4;
  sub_22F13661C(a1, a3, 0, 0);
  return a1;
}

__n128 sub_22F40E6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  v16[0] = a2;
  v16[1] = a3;
  if (*(_QWORD *)(a1 + 8) == a5)
  {
    v12 = *(unsigned int *)(a1 + 1064);
    sub_22F40E7B8(a1 + 2640, v16)[2] = v12;
  }
  if (*(_BYTE *)(a1 + 2664))
  {
    v13 = a4;
    v14 = a2;
    v15 = a3;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  v9 = (__n128 *)sub_22E5BBF6C(a1 + 1056, (unint64_t)&v13);
  v10 = (__n128 *)(*(_QWORD *)(a1 + 1056) + 24 * *(unsigned int *)(a1 + 1064));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 1064);
  return result;
}

void sub_22F40E760(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  _BYTE v8[32];

  v4 = v8;
  v5 = v8;
  v6 = 4;
  v7 = 0;
  sub_22F136804(a1, a2, a3, 0, a4, a2, (uint64_t)&v4);
  if (v5 != v4)
    free(v5);
}

_QWORD *sub_22F40E7B8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2A24EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F40E824(a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_22F40E824(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F136ACC(a1, v6);
  v9 = 0;
  sub_22F2A24EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F40E8DC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v13;
  _OWORD *v14;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45B630;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      v10 = v4[1];
      if ((*v4 != -4096 || v10 != 0x7FFFFFFFFFFFFFFFLL) && (v9 != -8192 || v10 != 0x8000000000000000))
      {
        v14 = 0;
        result = sub_22F2A24EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
        v13 = v14;
        *v14 = *(_OWORD *)v4;
        *((_QWORD *)v13 + 2) = v4[2];
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL sub_22F40E9B8(uint64_t a1, _BYTE *a2, int8x8_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  uint8x8_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - v3;
  if (v4 < 0x19)
    return 0;
  if (*(_DWORD *)v3 == 1885433192)
  {
    if (*(_WORD *)(v3 + 4) != 256)
      return 0;
    *a2 = 1;
    if (*(_WORD *)(v3 + 6))
      return 0;
    v6 = bswap32(*(_DWORD *)(v3 + 16));
    goto LABEL_12;
  }
  if (*(_DWORD *)v3 != 1751998832 || *(_WORD *)(v3 + 4) != 1)
    return 0;
  result = 0;
  *a2 = 0;
  if (!*(_WORD *)(v3 + 6))
  {
    v6 = *(_DWORD *)(v3 + 16);
LABEL_12:
    a3.i32[0] = v6;
    v7 = (uint8x8_t)vcnt_s8(a3);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0] == 1)
      return v4 >= 12 * (unint64_t)v6 + 24;
    return 0;
  }
  return result;
}

uint64_t sub_22F40EA70(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

size_t sub_22F40EA80(size_t result, uint64_t a2, uint64_t a3, char a4, int a5)
{
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = bswap32(v6);
  if (a4)
    v6 = v7;
  v8 = v6 + a5;
  v9 = a3 - a2;
  if (a3 - a2 <= v8
    || (v10 = a2 + v8,
        v11 = v9 - v8,
        result = strnlen((const char *)(a2 + v8), (v9 - v8)),
        v11 == (_DWORD)result)
    && *(_BYTE *)(v10 + (result - 1)))
  {
    v12 = 0;
    *(_BYTE *)v5 = 0;
  }
  else
  {
    *(_QWORD *)v5 = v10;
    *(_QWORD *)(v5 + 8) = result;
    v12 = 1;
  }
  *(_BYTE *)(v5 + 16) = v12;
  return result;
}

uint64_t *sub_22F40EB08(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 25, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

llvm::raw_ostream *sub_22F40EBF8(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  llvm *v4;
  _WORD *v5;
  uint64_t v6;
  int v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_22E47DAC0(v2, "\n*** HeaderSearch Stats:\n");
  v3 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v4 = sub_22E47DAC0(v3, " files tracked.\n");
  v5 = (_WORD *)*((_QWORD *)a1 + 24);
  v6 = -1762037865 * ((*((_QWORD *)a1 + 25) - (_QWORD)v5) >> 3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    do
    {
      if ((*v5 & 3) != 0)
        ++v7;
      v5 += 156;
      --v6;
    }
    while (v6);
  }
  v8 = (llvm::raw_ostream *)llvm::errs(v4);
  sub_22E47DAC0(v8, "  ");
  v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v10 = sub_22E47DAC0(v9, " #import/#pragma once files.\n");
  v11 = (llvm::raw_ostream *)llvm::errs(v10);
  sub_22E47DAC0(v11, "  ");
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = sub_22E47DAC0(v12, " #include/#include_next/#import.\n");
  sub_22E47DAC0(v13, "    ");
  v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v15 = sub_22E47DAC0(v14, " #includes skipped due to the multi-include optimization.\n");
  llvm::errs(v15);
  v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v16, " framework lookups.\n");
  v17 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  return sub_22E47DAC0(v17, " subframework lookups.\n");
}

uint64_t sub_22F40ED34(uint64_t a1, __n128 *a2, int a3, int a4, char a5, uint64_t a6)
{
  unint64_t v11;
  char v13;

  sub_22F4102CC((_QWORD *)(a1 + 56), a2);
  v11 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4;
  v13 = 0;
  sub_22F137910(a1 + 80, v11, &v13);
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = a4;
  *(_BYTE *)(a1 + 112) = a5;
  return sub_22F40EDB0(a1 + 16, a6);
}

uint64_t sub_22F40EDB0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void sub_22F40EE28(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, size_t a5@<X4>, _QWORD *a6@<X8>)
{
  char v6;
  int v7;
  void *v8;
  size_t v9;
  size_t v10;

  v6 = *(_BYTE *)(a1 + 191);
  v7 = v6;
  if (v6 >= 0)
    v8 = (void *)(a1 + 168);
  else
    v8 = *(void **)(a1 + 168);
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(a1 + 176);
  sub_22F13854C(v8, v10, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_22F40EE50(uint64_t *a1, uint64_t a2, uint64_t a3, const void **a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t result;
  int v10;

  v8 = a1 + 61;
  result = sub_22F1502C8(a1 + 61);
  if (!result)
  {
    v10 = sub_22F40EF0C((uint64_t)a1, (uint64_t)a4, a5, 1);
    result = 0;
    if (v10)
    {
      if (v10 != 2)
      {
        if (v10 == 3 && (*(_BYTE *)(*a1 + 216) & 0x10) != 0)
          sub_22F412D90((uint64_t)v8, a4, a5, 0);
        return sub_22F1502C8(v8);
      }
    }
  }
  return result;
}

uint64_t sub_22F40EF0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 1864), *(_DWORD *)(a1 + 1880), a2, &v13))
    v8 = v13 == *(_QWORD *)(a1 + 1864) + 16 * *(unsigned int *)(a1 + 1880);
  else
    v8 = 1;
  if (!v8)
  {
    if (*(_BYTE *)(v13 + 8))
      return 0;
    else
      return 3;
  }
  v10 = (_QWORD *)sub_22F40FAF8((uint64_t *)a1, a2, a4);
  if (!v10)
    return 3;
  result = sub_22F40F870((uint64_t *)a1, v10, a3, a2, 0, 0);
  if ((_DWORD)result == 3)
  {
    *((_BYTE *)sub_22F309434(a1 + 1864, &v12) + 8) = 0;
    return 3;
  }
  if ((_DWORD)result == 1)
  {
    v11 = sub_22F309434(a1 + 1864, &v12);
    result = 1;
    *((_BYTE *)v11 + 8) = 1;
  }
  return result;
}

uint64_t sub_22F40F004(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_22F1D0728(*(_QWORD *)(a1 + 48), a2, a3, 1, (uint64_t)&v9);
  if ((v10 & 1) != 0)
    return 2;
  else
    return sub_22F40EF0C(a1, v9, a4, a5);
}

void sub_22F40F0BC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;
  char v12;
  _BOOL4 v13;
  char v14;
  char *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE *v25;
  std::__shared_weak_count *v26;
  __int16 v27;
  void *v28[2];
  void *v29;
  __int128 v30;
  _BYTE v31[128];
  _QWORD *v32;
  __int128 v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x24BDAC8D0];
  if ((a2[8] & 0x20) == 0)
  {
    LODWORD(v28[0]) = 0;
    v28[1] = (void *)std::system_category();
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v5 = *(_BYTE **)v4;
    v6 = (_BYTE *)(*(_QWORD *)v4 + *(_QWORD *)(v4 + 8));
    v32 = v34;
    v33 = xmmword_22F44E310;
    sub_22E61131C((uint64_t)&v32, v5, v6);
    sub_22F1D1908(*(_QWORD *)(a1 + 48), (void **)&v32);
    v29 = v31;
    v30 = xmmword_22F44E310;
    v27 = 261;
    v25 = v32;
    v26 = (std::__shared_weak_count *)v33;
    llvm::sys::path::native();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v27 = 261;
    v25 = v31;
    v26 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE **, void **))(*(_QWORD *)v7 + 32))(&v23, v7, &v25, v28);
    v25 = 0;
    v26 = 0;
    if (!sub_22E6D5ADC(&v23, (uint64_t *)&v25) && !LODWORD(v28[0]))
    {
      while (1)
      {
        v8 = llvm::sys::path::extension();
        if (v9 == 10)
          break;
        v12 = a2[8];
        if ((v12 & 0xC) != 4)
        {
          v13 = 0;
LABEL_18:
          v14 = *(_BYTE *)(v23 + 31);
          if (v14 >= 0)
            v15 = (char *)(v23 + 8);
          else
            v15 = *(char **)(v23 + 8);
          if (v14 >= 0)
            v16 = v14 & 0x7F;
          else
            v16 = *(_QWORD *)(v23 + 16);
          sub_22F40F004(a1, v15, v16, (v12 & 3) != 0, v13);
        }
LABEL_14:
        sub_22E6D5A44(&v23, v28);
        if (sub_22E6D5ADC(&v23, (uint64_t *)&v25) || LODWORD(v28[0]))
          goto LABEL_25;
      }
      v11 = *(_QWORD *)v8 == 0x6F77656D6172662ELL && *(_WORD *)(v8 + 8) == 27506;
      v12 = a2[8];
      v13 = (v12 & 0xC) == 4;
      if (((v11 ^ v13) & 1) != 0)
        goto LABEL_14;
      goto LABEL_18;
    }
LABEL_25:
    v17 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v24;
    if (v24)
    {
      v21 = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    a2[8] |= 0x20u;
    if (v29 != v31)
      free(v29);
    if (v32 != v34)
      free(v32);
  }
}

uint64_t sub_22F40F380(uint64_t a1)
{
  int v1;

  v1 = *(_BYTE *)(a1 + 8) & 0xC;
  if (v1 == 8)
    return sub_22F40EA70(*(_QWORD **)a1);
  if (v1 != 4 && (*(_BYTE *)(a1 + 8) & 0xC) != 0)
    return sub_22F40EA70(0);
  return **(_QWORD **)(*(_QWORD *)a1 + 8);
}

uint64_t sub_22F40F3BC(uint64_t a1, uint64_t a2)
{
  return sub_22F4124F0(a1 + 488, a2);
}

uint64_t sub_22F40F3C4(_QWORD *a1, unint64_t a2, uint64_t a3, int a4, char a5, unint64_t a6, _BYTE *a7)
{
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  unsigned __int16 v17;
  llvm *v18;
  uint64_t result;
  unsigned int v20;
  unsigned __int8 v21;
  _QWORD v22[4];
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;

  v24 = a3;
  v23 = a5;
  do
    v12 = __ldxr((unsigned int *)&dword_253E4BB18);
  while (__stxr(v12 + 1, (unsigned int *)&dword_253E4BB18));
  v13 = atomic_load(byte_253E4BB1C);
  if ((v13 & 1) == 0)
    llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_253E4BB00);
  *a7 = 0;
  v14 = v24;
  v15 = sub_22F13B0E4(a1, v24);
  v16 = (uint64_t)v15;
  v22[0] = &v23;
  v22[1] = a1;
  v22[2] = &v24;
  v22[3] = v15;
  v17 = v15->n128_u16[0];
  if (a4)
  {
    v15->n128_u16[0] = v17 | 1;
    v25 = 0;
    v26[0] = v14;
    if (sub_22E67A334(a2 + 1592, v26, &v25) && (sub_22F13C288((uint64_t)v22) & 1) == 0)
      return 0;
    goto LABEL_7;
  }
  if ((v17 & 3) == 0 || (result = sub_22F13C288((uint64_t)v22), (_DWORD)result))
  {
LABEL_7:
    v18 = (llvm *)sub_22F137718(v16, a1[257]);
    if (!v18)
    {
LABEL_8:
      v25 = v24;
      sub_22F13B0E4(*(_QWORD **)(a2 + 104), v24);
      sub_22E67A2B0((_DWORD *)(a2 + 1592), &v25, (uint64_t)v26);
      *a7 = v27;
      return 1;
    }
    if (a6)
    {
      if ((sub_22F40F568(a2, (uint64_t)v18, a6) & 1) == 0)
        goto LABEL_8;
    }
    else if (!sub_22F2EE534(a2, v18))
    {
      goto LABEL_8;
    }
    do
      v20 = __ldxr((unsigned int *)&dword_255E04DF0);
    while (__stxr(v20 + 1, (unsigned int *)&dword_255E04DF0));
    v21 = atomic_load(byte_255E04DF4);
    if ((v21 & 1) == 0)
      llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_255E04DD8);
    return 0;
  }
  return result;
}

uint64_t *sub_22F40F568(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t *result;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(a2 + 3) & 2) == 0)
    return 0;
  v3 = *(_QWORD **)(a1 + 1512);
  if (!v3)
    return 0;
  v5 = (_QWORD *)(a1 + 1512);
  do
  {
    v6 = v3[4];
    v7 = v6 >= a3;
    if (v6 >= a3)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == (_QWORD *)(a1 + 1512) || v5[4] > a3)
    return 0;
  v13 = a2;
  v14 = 0;
  if (!sub_22E3B9914((uint64_t)(v5 + 5), &v13, &v14) || v14 == v5[5] + 16 * *((unsigned int *)v5 + 14))
    return 0;
  v10 = *(_QWORD *)(v14 + 8);
  result = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0 && result)
    result = (uint64_t *)*result;
  if (result)
    return (uint64_t *)(sub_22F14FEA4(result) && v11 == 0);
  return result;
}

uint64_t sub_22F40F630(_QWORD *a1, uint64_t a2)
{
  if (a1[258])
    sub_22F13C01C(a1, a2, 1);
  return sub_22F412908((uint64_t)(a1 + 61), a2);
}

BOOL sub_22F40F670(uint64_t *a1, _QWORD *a2, uint64_t a3, unsigned int a4, _DWORD *a5, const void *a6, size_t a7)
{
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  char *v22;
  unint64_t v23;
  _QWORD v26[2];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + 216) & 0x20) != 0)
  {
    sub_22F1D0728(a1[6], ".", 1uLL, 1, (uint64_t)v26);
    if ((v27 & 1) != 0)
      v13 = 0;
    else
      v13 = v26[0];
  }
  else
  {
    if (a7)
    {
      v17 = a1[6];
      v18 = (char *)llvm::sys::path::parent_path();
      v19 = v26;
      sub_22F1D0728(v17, v18, v20, 1, (uint64_t)v26);
      if ((v27 & 1) != 0)
        v19 = (uint64_t *)(sub_22F41B1AC(a1[6], a6, a7, 0, 0) + 40);
      v13 = *v19;
    }
    else
    {
      v13 = a2[5];
    }
    v14 = (_DWORD *)llvm::sys::path::filename();
    if (v15 == 7 && *v14 == 1969516365 && *(_DWORD *)((char *)v14 + 3) == 1936026741)
    {
      v22 = (char *)llvm::sys::path::parent_path();
      if (v23 >= 0xA && *(_QWORD *)&v22[v23 - 10] == 0x6F77656D6172662ELL && *(_WORD *)&v22[v23 - 2] == 27506)
      {
        sub_22F1D0728(a1[6], v22, v23, 1, (uint64_t)v26);
        if ((v27 & 1) == 0)
          v13 = v26[0];
      }
    }
  }
  return sub_22F40F870(a1, a2, a3, v13, a4, a5) > 1;
}

uint64_t sub_22F40F870(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  const char *v24;
  uint64_t v25;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  const char *v34;
  char v35;
  __int16 v36;
  void *v37;
  __int128 v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v12 = a1 + 236;
  v37 = a2;
  *(_QWORD *)&v38 = 1;
  sub_22F41064C((uint64_t)&v28, (uint64_t)(a1 + 236), &v37, &v38);
  if (v29)
  {
    v13 = a1 + 61;
    if (sub_22F412D98(a1 + 61, (uint64_t)a2, a3, a4, a5, a6, 0))
    {
LABEL_30:
      *((_BYTE *)sub_22F410840(v12, &v30) + 8) = 0;
      return 3;
    }
    v14 = a1[6];
    v15 = a2[11];
    do
    {
      v16 = *(_QWORD *)(v15 + 8);
      if ((v16 & 2) == 0)
        break;
      v15 = v16 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v15);
    v17 = (_QWORD *)llvm::sys::path::filename();
    v19 = v18;
    v20 = a2[5];
    v21 = *(_BYTE **)v20;
    v22 = (_BYTE *)(*(_QWORD *)v20 + *(_QWORD *)(v20 + 8));
    v37 = v39;
    v38 = xmmword_22F44E310;
    sub_22E61131C((uint64_t)&v37, v21, v22);
    if (v19 == 16)
    {
      if (*v17 != 0x6D2E656C75646F6DLL || v17[1] != 0x70616D656C75646FLL)
      {
LABEL_28:
        v25 = 0;
        goto LABEL_16;
      }
      v24 = "module.private.modulemap";
    }
    else
    {
      if (v19 != 10)
        goto LABEL_28;
      if (*v17 != 0x6D2E656C75646F6DLL || *((_WORD *)v17 + 4) != 28769)
        goto LABEL_28;
      v24 = "module_private.map";
    }
    v34 = v24;
    v36 = 259;
    v33 = 257;
    v32 = 257;
    v31 = 257;
    llvm::sys::path::append();
    sub_22F1D07D8(v14, v37, v38, 0, 1, (uint64_t)&v34);
    if ((v35 & 1) != 0)
      v25 = 0;
    else
      v25 = (uint64_t)v34;
LABEL_16:
    if (v37 != v39)
      free(v37);
    if (!v25 || !sub_22F412D98(v13, v25, a3, a4, 0, 0, 0))
      return 1;
    goto LABEL_30;
  }
  if (*(_BYTE *)(v28 + 8))
    return 0;
  else
    return 3;
}

uint64_t sub_22F40FAF8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _QWORD v14[2];
  char v15;
  __int16 v16;
  void *v17;
  __int128 v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + 216) & 0x10) == 0)
    return 0;
  v8 = *(_BYTE **)a2;
  v9 = &v8[*(_QWORD *)(a2 + 8)];
  v17 = v19;
  v18 = xmmword_22F44E310;
  sub_22E61131C((uint64_t)&v17, v8, v9);
  if (a3)
  {
    v14[0] = "Modules";
    v16 = 259;
    llvm::sys::path::append();
  }
  v14[0] = "module.modulemap";
  v16 = 259;
  llvm::sys::path::append();
  sub_22F1D07D8(a1[6], v17, v18, 0, 1, (uint64_t)v14);
  if ((v15 & 1) == 0)
    goto LABEL_8;
  v10 = *(_BYTE **)a2;
  v11 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  *(_QWORD *)&v18 = 0;
  sub_22E61131C((uint64_t)&v17, v10, v11);
  v14[0] = "module.map";
  v16 = 259;
  llvm::sys::path::append();
  sub_22F1D07D8(a1[6], v17, v18, 0, 1, (uint64_t)v14);
  if ((v15 & 1) == 0)
    goto LABEL_8;
  if (!a3)
    goto LABEL_13;
  v12 = *(_BYTE **)a2;
  v13 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  *(_QWORD *)&v18 = 0;
  sub_22E61131C((uint64_t)&v17, v12, v13);
  v14[0] = "Modules";
  v16 = 259;
  llvm::sys::path::append();
  sub_22F1D07D8(a1[6], v17, v18, 0, 1, (uint64_t)v14);
  if ((v15 & 1) != 0)
LABEL_13:
    v3 = 0;
  else
LABEL_8:
    v3 = v14[0];
  if (v17 != v19)
    free(v17);
  return v3;
}

void sub_22F40FD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD v43[2];
  const void **v44;
  uint64_t v45;
  char v46;
  __int16 v47;
  void *v48;
  __int128 v49;
  _QWORD v50[18];

  v50[16] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 8) = 0;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 216) & 0x10) != 0)
  {
    v8 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
    if (v8)
    {
      v9 = 0;
      v10 = v8 >> 4;
      do
      {
        v11 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 16 * v9);
        v12 = v11[8] & 3;
        v13 = v11[8] & 0xC;
        if (v13 == 4)
        {
          LODWORD(v43[0]) = 0;
          v43[1] = std::system_category();
          v48 = v50;
          v49 = xmmword_22F44E310;
          v14 = *(_QWORD *)(*(_QWORD *)v11 + 8);
          v16 = *(const void ***)v14;
          v15 = *(_QWORD *)(v14 + 8);
          v47 = 261;
          v44 = v16;
          v45 = v15;
          llvm::sys::path::native();
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          v47 = 261;
          v44 = (const void **)v48;
          v45 = v49;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const void ***, _QWORD *))(*(_QWORD *)v17 + 32))(&v41, v17, &v44, v43);
          v39 = 0;
          v40 = 0;
          while (!sub_22E6D5ADC(&v41, &v39) && !LODWORD(v43[0]))
          {
            v18 = llvm::sys::path::extension();
            if (v19 == 10 && *(_QWORD *)v18 == 0x6F77656D6172662ELL && *(_WORD *)(v18 + 8) == 27506)
            {
              v21 = *(_BYTE *)(v41 + 31);
              v22 = v21 >= 0 ? (char *)(v41 + 8) : *(char **)(v41 + 8);
              v23 = v21 >= 0 ? v21 & 0x7F : *(_QWORD *)(v41 + 16);
              sub_22F1D0728(*(_QWORD *)(a1 + 48), v22, v23, 1, (uint64_t)&v44);
              if ((v46 & 1) == 0)
              {
                v24 = llvm::sys::path::stem();
                sub_22F40EE50((uint64_t *)a1, v24, v25, v44, v12 != 0);
              }
            }
            sub_22E6D5A44(&v41, v43);
          }
          v26 = v40;
          if (v40)
          {
            p_shared_owners = (unint64_t *)&v40->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = v42;
          if (v42)
          {
            v30 = (unint64_t *)&v42->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if (v48 != v50)
            free(v48);
        }
        else if (v13 != 8)
        {
          if ((v11[8] & 0xC) != 0)
            v32 = 0;
          else
            v32 = *(_QWORD *)(*(_QWORD *)v11 + 8);
          sub_22F40EF0C(a1, v32, v12 != 0, 0);
          sub_22F40F0BC(a1, v11);
        }
        ++v9;
      }
      while (v9 != v10);
    }
  }
  v4 = *(_QWORD *)(a1 + 1512);
  v5 = *(unsigned int *)(a1 + 1520);
  if ((_DWORD)v5)
  {
    for (i = *(uint64_t **)(a1 + 1512); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 1512);
  }
  v33 = (uint64_t *)(v4 + 8 * v5);
  if (i != v33)
  {
    v34 = *i;
    v35 = *(_DWORD *)(a2 + 8);
    do
    {
      v36 = *(_QWORD *)(v34 + 8);
      if (v35 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v35) = v36;
      v35 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v35;
      do
      {
        v37 = i[1];
        ++i;
        v34 = v37;
        if (v37)
          v38 = v34 == -8;
        else
          v38 = 1;
      }
      while (v38);
    }
    while (i != v33);
  }
}

_QWORD *sub_22F41010C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(*result + 216) & 0x10) != 0)
  {
    v1 = result;
    v2 = result[8] - result[7];
    if (v2)
    {
      v3 = 0;
      v4 = v2 >> 4;
      do
      {
        v5 = v1[7];
        if ((*(_BYTE *)(v5 + v3 + 8) & 0xC) == 0)
          result = (_QWORD *)sub_22F40EF0C(v1, *(_QWORD *)(*(_QWORD *)(v5 + v3) + 8), (*(_BYTE *)(v5 + v3 + 8) & 3) != 0, 0);
        v3 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void sub_22F410194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a2 + 88);
  do
  {
    v6 = (unint64_t *)v5;
    v7 = *(_QWORD *)(v5 + 8);
    if ((v7 & 2) == 0)
      break;
    v5 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v5);
  sub_22F13C5F0(a1, (uint64_t)(v6 + 4), *v6, (uint64_t)&unk_22F5CF7E2, 0, a3, a4, a5);
}

uint64_t *sub_22F4101CC(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 25, 3);
  v10 = (_QWORD *)v9;
  v11 = v9 + 24;
  if (a3)
    memcpy((void *)(v9 + 24), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = a3;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

__n128 sub_22F4102CC(_QWORD *a1, __n128 *a2)
{
  void *v2;
  __n128 result;
  __n128 *v4;
  _QWORD *v5;

  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = v2;
    v4 = a2;
    v5 = a1;
    operator delete(v2);
    a2 = v4;
    a1 = v5;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

unint64_t sub_22F410324(char *a1, _QWORD *a2, char *a3, uint64_t a4)
{
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v14[2];

  *(_QWORD *)v14 = 0;
  v7 = *(_BYTE *)(a4 + 23);
  v8 = v7 < 0;
  if (v7 >= 0)
    v9 = a4;
  else
    v9 = *(_QWORD *)a4;
  v10 = v7 & 0x7F;
  if (v8)
    v10 = *(_QWORD *)(a4 + 8);
  v11 = sub_22F13D018(v9, v9 + v10);
  v12 = (char *)sub_22E54F04C(a1, (uint64_t *)v14, a2, (unint64_t)a3, v11);
  return sub_22E54F2E8(a1, *(uint64_t *)v14, v12, a3);
}

_QWORD *sub_22F4103AC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F13D36C(a1, v6);
  v8 = 0;
  sub_22F13D2D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F410460(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 96 * v6;
    do
    {
      *v7 = -4096;
      v7 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F13D2D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *v4;
        *((_OWORD *)v10 + 1) = xmmword_22F44E300;
        v10[1] = (uint64_t)(v10 + 4);
        v11 = (uint64_t)(v10 + 1);
        if (v4[2])
          sub_22E3B2DB8(v11, (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v12 = (uint64_t *)v4[1];
        if (v4 + 4 != v12)
          free(v12);
      }
      v4 += 12;
    }
    while (v4 != a3);
  }
}

uint64_t *sub_22F410550(llvm::StringMapImpl *a1, const void *a2, size_t a3, _OWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v12 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 25, 3);
  v13 = v12;
  v14 = v12 + 24;
  if (a3)
    memcpy((void *)(v12 + 24), a2, a3);
  *(_BYTE *)(v14 + a3) = 0;
  *(_QWORD *)v13 = a3;
  *(_OWORD *)(v13 + 8) = *a4;
  *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F41064C(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F13D768((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F4106E4(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_BYTE *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F4106E4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_22F13D804(a1, v7);
    v9 = 0;
    sub_22F13D768((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F410794(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F13D768((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F410840(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F13D768(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F4106E4((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_22F4108A4(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4, _DWORD *a5, char a6)
{
  _DWORD *v10;
  int v11;

  v10 = sub_22E49F3DC(a4, a2);
  if (v10)
    v11 = *v10 & 0x7FFFFFFF;
  else
    v11 = 0;
  return sub_22F140DA4(a1, v11, a5, *(unsigned __int16 **)a3, *(unsigned __int16 **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8), a6);
}

uint64_t sub_22F41090C(uint64_t result)
{
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  char v11;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = (uint64_t *)result;
    v3 = 0;
    while (1)
    {
      v4 = (_BYTE *)(*v2 + v3);
      v5 = *v4;
      if (v5 <= 0xC)
        break;
      if (v5 == 13)
        goto LABEL_9;
      if (v5 != 92 && v5 != 34)
        goto LABEL_21;
      v10 = 92;
      result = sub_22F2AF9DC(v2, (uint64_t)v4, &v10);
      v3 += 2;
      ++v1;
LABEL_19:
      if (v3 >= v1)
        return result;
    }
    if (v5 == 10)
    {
LABEL_9:
      if (v3 >= v1 - 1
        || ((v6 = *(unsigned __int8 *)(*v2 + v3 + 1), v6 != 13) ? (v7 = v6 == 10) : (v7 = 1),
            v7 ? (v8 = v5 == v6) : (v8 = 1),
            v8))
      {
        *v4 = 92;
        v9 = *v2 + v3 + 1;
        v11 = 110;
        result = sub_22F2AF9DC(v2, v9, &v11);
        ++v1;
      }
      else
      {
        *v4 = 92;
        *(_BYTE *)(*v2 + v3 + 1) = 110;
      }
      v3 += 2;
      goto LABEL_19;
    }
LABEL_21:
    ++v3;
    goto LABEL_19;
  }
  return result;
}

unsigned __int16 *sub_22F410A14(int a1, uint64_t *a2, _QWORD *a3, _DWORD *a4, _BYTE *a5)
{
  unint64_t v9;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  _BYTE v20[4];
  unsigned int v21;
  __int16 v22;
  char v23;
  _QWORD v24[8];
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x24BDAC8D0];
  v9 = sub_22E677168((uint64_t)a3, a1);
  v23 = 0;
  v10 = v9;
  v11 = sub_22F1E1E1C(a3, v9, &v23);
  if (v23)
  {
    v13 = 0;
    if (a5)
      *a5 = 1;
  }
  else
  {
    v15 = (unsigned __int16 *)v11;
    v16 = v12;
    v13 = (unsigned __int16 *)&v11[HIDWORD(v9)];
    v17 = sub_22E49F3DC(a3, v10);
    if (v17)
      v18 = *v17 & 0x7FFFFFFF;
    else
      v18 = 0;
    sub_22F140DA4((uint64_t)v24, v18, a4, v15, v13, (uint64_t)v15 + v16, 1);
    sub_22F14651C(v24, (uint64_t)v20);
    if ((v22 & 8) != 0)
    {
      sub_22E4CE690(a2, v21);
      v19 = sub_22F141218((uint64_t)v20, (unsigned __int8 *)v13, a4, *a2);
      sub_22E4CE690(a2, v19);
      v13 = (unsigned __int16 *)*a2;
    }
    v24[0] = &unk_24FAC8A48;
    sub_22E730D24((uint64_t)v27);
    if (v25 != &v26)
      free(v25);
  }
  return v13;
}

_QWORD *sub_22F410BA0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_24FAC8A48;
  sub_22E730D24((uint64_t)(a1 + 14));
  v2 = (_QWORD *)a1[8];
  if (v2 != a1 + 10)
    free(v2);
  return a1;
}

uint64_t sub_22F410BE8(int a1, _QWORD *a2, _DWORD *a3)
{
  _BYTE v4[4];
  unsigned int v5;

  if (sub_22F1415D0(a1, (uint64_t)v4, a2, a3, 0))
    return 0;
  else
    return v5;
}

uint64_t sub_22F410C24(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  int v9;
  unint64_t v10;

  v5 = a1;
  v6 = a1;
  if ((a1 & 0x80000000) == 0)
    return sub_22F141740(a1, a2, a3);
  if (sub_22F1E2440(a2, a1, 0))
  {
    v8 = sub_22F1E238C(a2, v6);
    v9 = sub_22F141740(v8, a2, a3);
    v10 = sub_22E677168((uint64_t)a2, v8) >> 32;
    return (v5 - v10 + (sub_22E677168((uint64_t)a2, v9) >> 32));
  }
  return v5;
}

unsigned __int8 *sub_22F410CD8(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;

BOOL sub_22F410D78(unint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;

  v2 = a2 - 1;
  if ((unint64_t)(a2 - 1) < a1)
    return 0;
  v4 = *a2;
  if (v4 == 13)
  {
    if (*v2 != 10)
    {
LABEL_6:
      v2 = a2;
      goto LABEL_7;
    }
  }
  else if (v4 != 10 || *v2 != 13)
  {
    goto LABEL_6;
  }
  if ((unint64_t)(a2 - 2) < a1)
    return 0;
LABEL_7:
  v5 = v2 - 1;
  do
  {
    v6 = (unint64_t)v5 > a1;
    v8 = *v5--;
    v7 = v8;
  }
  while (v6 && (word_22F4ADB24[v7] & 5) != 0);
  return (_DWORD)v7 == 92;
}

uint64_t sub_22F410E00(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;

  v4 = a2 - *(_DWORD *)(a1 + 144);
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 < 0)
    return sub_22F142B40(*(_QWORD *)(a1 + 8), v5, v4, a3);
  else
    return (v5 + v4);
}

uint64_t sub_22F410E24(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = a3 - *(_DWORD *)(a2 + 144);
  v8 = *(_DWORD *)(a2 + 160);
  if (v8 < 0)
    v9 = sub_22F142B40(v6, v8, v7, 1);
  else
    v9 = v8 + v7;
  v10 = *(_QWORD *)(v6 + 48);
  *(_DWORD *)(v10 + 312) = v9;
  *(_DWORD *)(v10 + 316) = a4;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  return sub_22E78E558(a1, v10);
}

void sub_22F410EA4(unsigned int a1@<W0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  _DWORD *v14;
  int v15;
  char v16;
  unsigned int v17;
  _QWORD v18[8];
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v17 = a1;
  if ((a1 & 0x80000000) != 0)
  {
    if (!sub_22F141AE0(a1, a2, a3, &v17))
      goto LABEL_3;
    a1 = v17;
  }
  v17 = sub_22F141A3C(a1, 0, a2, a3);
  v7 = sub_22E677168((uint64_t)a2, v17);
  v16 = 0;
  v8 = v7;
  v9 = sub_22F1E1E1C(a2, v7, &v16);
  if (v16)
  {
LABEL_3:
    *a4 = 0;
    a4[24] = 0;
    return;
  }
  v11 = (unsigned __int16 *)v9;
  v12 = v10;
  v13 = (unsigned __int16 *)&v9[HIDWORD(v7)];
  v14 = sub_22E49F3DC(a2, v8);
  if (v14)
    v15 = *v14 & 0x7FFFFFFF;
  else
    v15 = 0;
  sub_22F140DA4((uint64_t)v18, v15, a3, v11, v13, (uint64_t)v11 + v12, 1);
  sub_22F14651C(v18, (uint64_t)a4);
  a4[24] = 1;
  v18[0] = &unk_24FAC8A48;
  sub_22E730D24((uint64_t)v21);
  if (v19 != &v20)
    free(v19);
}

uint64_t sub_22F41101C(unsigned int a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  _DWORD *v13;
  int v14;
  _DWORD v15[6];
  char v16;
  unsigned int v17;
  _QWORD v18[8];
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v17 = a1;
  if ((a1 & 0x80000000) != 0)
  {
    if (!sub_22F141AE0(a1, a2, a3, &v17))
      return 0;
    a1 = v17;
  }
  v17 = sub_22F141A3C(a1, 0, a2, a3);
  v5 = sub_22E677168((uint64_t)a2, v17);
  v16 = 0;
  v6 = sub_22F1E1E1C(a2, v5, &v16);
  v8 = 0;
  if (!v16)
  {
    v10 = (unsigned __int16 *)v6;
    v11 = v7;
    v12 = (unsigned __int16 *)&v6[HIDWORD(v5)];
    v13 = sub_22E49F3DC(a2, v5);
    if (v13)
      v14 = *v13 & 0x7FFFFFFF;
    else
      v14 = 0;
    sub_22F140DA4((uint64_t)v18, v14, a3, v10, v12, (uint64_t)v10 + v11, 1);
    sub_22F14651C(v18, (uint64_t)v15);
    v8 = v15[0];
    v18[0] = &unk_24FAC8A48;
    sub_22E730D24((uint64_t)v21);
    if (v19 != &v20)
      free(v19);
  }
  return v8;
}

uint64_t sub_22F411194(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  unsigned __int8 *v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned __int8 *v27;

  v7 = *a2;
  v27 = &(*a2)[a3];
  result = sub_22F143094(a1, &v27, (int)v7, 0);
  if ((_DWORD)result)
  {
    v9 = result;
    v10 = *(_QWORD **)(a1 + 168);
    if (sub_22F1435D8(result, *v10))
    {
      v11 = v27;
      if (!*(_BYTE *)(a1 + 26))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        v13 = sub_22F1439DC(a1, (int)*a2, (int)v27);
        sub_22F143A60(v12, v9, v13, v14, 0);
      }
    }
    else
    {
      if (v9 < 0x80)
        return 0;
      v17 = (char *)&unk_22F4AC820;
      v18 = 9;
      do
      {
        v19 = v18 >> 1;
        v20 = &v17[8 * (v18 >> 1)];
        v21 = *((_DWORD *)v20 + 1);
        v22 = v20 + 8;
        v18 += ~(v18 >> 1);
        if (v9 > v21)
          v17 = v22;
        else
          v18 = v19;
      }
      while (v18);
      if (v17 != (char *)&unk_22F4AC868 && v9 >= *(_DWORD *)v17 || *(_BYTE *)(a1 + 26))
        return 0;
      if (*(_BYTE *)(a1 + 24))
      {
        v11 = v27;
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 8);
        v11 = v27;
        if ((*(_WORD *)(v23 + 536) & 0x200) == 0)
        {
          v24 = *(_QWORD *)(v23 + 48);
          v25 = sub_22F1439DC(a1, (int)*a2, (int)v27);
          sub_22F14373C(v24, *v10, v9, v25, v26, 0);
        }
      }
    }
    *(_WORD *)(a4 + 18) |= 0x40u;
    v15 = *a2;
    v16 = v11 - *a2;
    if (v16 == 10)
    {
      if (v15[1] != 85)
        goto LABEL_8;
    }
    else if (v16 != 6 || v15[1] != 117)
    {
LABEL_8:
      if (v15 != v11)
      {
        do
        {
          sub_22F411378(a1, a2, a4);
          result = 1;
        }
        while (*a2 != v11);
        return result;
      }
      return 1;
    }
    *a2 = v11;
    return 1;
  }
  return result;
}

uint64_t sub_22F411378(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;

  v4 = *a2;
  v5 = *v4;
  if (v5 == 63 || v5 == 92)
  {
    v7 = 0;
    result = sub_22F142CD4(result, v4, (int *)&v7, a3);
    v6 = &(*a2)[v7];
  }
  else
  {
    v6 = v4 + 1;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_22F4113DC(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *a2;
  v4 = sub_22F311A7C(&v12, *(_QWORD *)(a1 + 152));
  result = 0;
  if (!v4)
  {
    if (sub_22F1435D8(0, **(_QWORD **)(a1 + 168)))
    {
      if (!*(_BYTE *)(a1 + 26))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        v7 = sub_22F1439DC(a1, *a2, v12);
        sub_22F143A60(v6, 0, v7, v8, 0);
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        v10 = sub_22F1439DC(a1, *a2, v12);
        sub_22F143CD4(v9, 0, v10, v11);
      }
      *a2 = v12;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F411584(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  _QWORD *v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;

  v8 = *(_QWORD **)(a1 + 168);
  if (sub_22F143F38(a3, *v8))
  {
    if (!*(_BYTE *)(a1 + 26) && !*(_BYTE *)(a1 + 24))
    {
      v14 = *(_QWORD *)(a1 + 8);
      if ((*(_WORD *)(v14 + 536) & 0x200) == 0)
      {
        v15 = *(_QWORD *)(v14 + 48);
        v16 = sub_22F1439DC(a1, *(_QWORD *)(a1 + 184), (int)a4);
        sub_22F143A60(v15, a3, v16, v17, 1);
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        v19 = sub_22F1439DC(a1, *(_QWORD *)(a1 + 184), (int)a4);
        sub_22F143CD4(v18, a3, v19, v20);
      }
    }
    *(_WORD *)(a1 + 32) = 1;
    return sub_22F14407C(a1, a2, a4);
  }
  else
  {
    if (*(_BYTE *)(a1 + 26))
      goto LABEL_5;
    if (*(_BYTE *)(a1 + 24))
      goto LABEL_5;
    v21 = *(_QWORD *)(a1 + 8);
    if ((*(_WORD *)(v21 + 536) & 0x200) != 0)
      goto LABEL_5;
    v22 = *(char **)(a1 + 184);
    if ((*v22 & 0x80000000) == 0)
      goto LABEL_5;
    v23 = (char *)&unk_22F4AC820;
    v24 = 9;
    do
    {
      v25 = v24 >> 1;
      v26 = &v23[8 * (v24 >> 1)];
      v27 = *((_DWORD *)v26 + 1);
      v28 = v26 + 8;
      v24 += ~(v24 >> 1);
      if (v27 < a3)
        v23 = v28;
      else
        v24 = v25;
    }
    while (v24);
    if (v23 != (char *)&unk_22F4AC868 && *(_DWORD *)v23 <= a3)
    {
LABEL_5:
      *(_WORD *)(a1 + 32) = 1;
      v10 = *(_DWORD *)(a1 + 184);
      *(_DWORD *)(a2 + 4) = (_DWORD)a4 - v10;
      v11 = v10 - *(_DWORD *)(a1 + 144);
      v12 = *(_DWORD *)(a1 + 160);
      if (v12 < 0)
        v13 = sub_22F142B40(*(_QWORD *)(a1 + 8), v12, v11, (int)a4 - v10);
      else
        v13 = v12 + v11;
      *(_DWORD *)a2 = v13;
      *(_WORD *)(a2 + 16) = 0;
      result = 1;
    }
    else
    {
      v29 = *(_QWORD *)(v21 + 48);
      v30 = sub_22F1439DC(a1, (int)v22, (int)a4);
      sub_22F14373C(v29, *v8, a3, v30, v31, 1);
      result = 0;
    }
    *(_QWORD *)(a1 + 184) = a4;
  }
  return result;
}

BOOL sub_22F411760(unsigned __int8 *a1, _QWORD *a2)
{
  _QWORD *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v8;
  unsigned int v9;

  v2 = a2;
  v3 = *a1;
  if (v3 == 63 || v3 == 92)
  {
    v9 = 0;
    v8 = a1;
    LOBYTE(v3) = sub_22F142EEC(a1, (int *)&v9, a2);
    v2 = a2;
    a1 = v8;
  }
  else
  {
    v9 = 1;
  }
  if (v3 != 48)
    return 0;
  v4 = &a1[v9];
  v5 = *v4;
  if (v5 == 92 || v5 == 63)
  {
    v9 = 0;
    LOBYTE(v5) = sub_22F142EEC(v4, (int *)&v9, v2);
  }
  return (v5 & 0xDF) == 88;
}

uint64_t sub_22F411808(uint64_t a1, uint64_t a2, char *__s2, __int16 a4)
{
  uint64_t v8;
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35[4];
  _BYTE v36[32];
  _BYTE v37[32];

  if (!*(_BYTE *)(a1 + 26))
  {
    sub_22F410E24((uint64_t)v37, a1, *(_QWORD *)(a1 + 184), 1309);
    sub_22E3BB0B8((uint64_t)v37);
  }
  v8 = 0;
  while (1)
  {
    v9 = __s2[v8];
    v10 = word_22F4ADB24[__s2[v8]] & 0x3E8;
    if (!v10)
      break;
    if (++v8 == 16)
    {
      v9 = __s2[16];
      break;
    }
  }
  if (v9 == 40)
  {
    v11 = v8;
    v12 = (v8 + 1);
    v13 = (unsigned __int8 *)&__s2[v12];
    do
    {
      while (1)
      {
        v14 = v13;
        v16 = *v13++;
        v15 = v16;
        if (!v16)
          break;
        if (v15 == 41 && !strncmp((const char *)v13, __s2, v11))
        {
          v17 = v13[v11];
          v18 = v17 == 34;
          v19 = v17 == 34 ? v12 : 0;
          v13 += v19;
          if (v18)
          {
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 1) != 0)
              v13 = sub_22F1446B4(a1, a2, v13, 1);
            v30 = *(_QWORD *)(a1 + 184);
            *(_DWORD *)(a2 + 4) = (_DWORD)v13 - v30;
            v31 = v30 - *(_DWORD *)(a1 + 144);
            v32 = *(_DWORD *)(a1 + 160);
            if (v32 < 0)
              result = sub_22F142B40(*(_QWORD *)(a1 + 8), v32, v31, (int)v13 - (int)v30);
            else
              result = (v32 + v31);
            *(_DWORD *)a2 = result;
            *(_WORD *)(a2 + 16) = a4;
            *(_QWORD *)(a1 + 184) = v13;
            *(_QWORD *)(a2 + 8) = v30;
            return result;
          }
        }
      }
    }
    while (v14 != *(unsigned __int8 **)(a1 + 152));
    if (!*(_BYTE *)(a1 + 26))
    {
      sub_22F410E24((uint64_t)v35, a1, *(_QWORD *)(a1 + 184), 1192);
      sub_22E3B89A8(v35, __s2, v11);
      sub_22E3BB0B8((uint64_t)v35);
    }
    v20 = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a2 + 4) = (_DWORD)v14 - v20;
    v21 = v20 - *(_DWORD *)(a1 + 144);
    v22 = *(_DWORD *)(a1 + 160);
    if (v22 < 0)
      result = sub_22F142B40(*(_QWORD *)(a1 + 8), v22, v21, (int)v14 - v20);
    else
      result = (v22 + v21);
    *(_DWORD *)a2 = result;
    *(_WORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 184) = v14;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 26))
    {
      v33 = &__s2[v8];
      if (v10)
      {
        sub_22F410E24((uint64_t)v36, a1, (_DWORD)__s2 + v8, 1179);
        v34 = (unsigned __int8 **)v36;
      }
      else
      {
        sub_22F410E24((uint64_t)v35, a1, (_DWORD)__s2 + v8, 1049);
        sub_22E3B89A8(v35, v33, 1uLL);
        v34 = v35;
      }
      sub_22E3BB0B8((uint64_t)v34);
    }
    do
    {
      while (1)
      {
        v24 = __s2;
        v26 = *__s2++;
        v25 = v26;
        if (v26)
          break;
        if (v24 == *(char **)(a1 + 152))
          goto LABEL_29;
      }
    }
    while (v25 != 34);
    ++v24;
LABEL_29:
    v27 = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a2 + 4) = (_DWORD)v24 - v27;
    v28 = v27 - *(_DWORD *)(a1 + 144);
    v29 = *(_DWORD *)(a1 + 160);
    if (v29 < 0)
      result = sub_22F142B40(*(_QWORD *)(a1 + 8), v29, v28, (int)v24 - v27);
    else
      result = (v29 + v28);
    *(_DWORD *)a2 = result;
    *(_WORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 184) = v24;
  }
  return result;
}

uint64_t sub_22F411AA0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  char *v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[4];

  if (*(_BYTE *)(a1 + 26) || (*(_WORD *)(*(_QWORD *)(a1 + 8) + 536) & 0x200) != 0)
    return 0;
  v8 = (char *)&unk_22F4AC820;
  v9 = 9;
  do
  {
    v10 = v9 >> 1;
    v11 = &v8[8 * (v9 >> 1)];
    v12 = *((_DWORD *)v11 + 1);
    v13 = v11 + 8;
    v9 += ~(v9 >> 1);
    if (v12 < a3)
      v8 = v13;
    else
      v9 = v10;
  }
  while (v9);
  if (v8 == (char *)&unk_22F4AC868 || *(_DWORD *)v8 > a3)
    return 0;
  sub_22F410E24((uint64_t)v18, a1, *(_QWORD *)(a1 + 184), 1240);
  v14 = sub_22F1439DC(a1, *(_QWORD *)(a1 + 184), a4);
  v16 = v15;
  v17 = v18[0];
  if (!v18[0])
  {
    v17 = sub_22E3B8AAC(v18[1]);
    v18[0] = v17;
  }
  sub_22E4D6448(v17 + 336, v14, v16);
  sub_22E3BB0B8((uint64_t)v18);
  *(_WORD *)(a2 + 18) |= 2u;
  return 1;
}

uint64_t sub_22F411BAC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 144);
  v7 = *a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v8 = *(_DWORD *)(a1 + 160);
  if (v8 < 0)
  {
    v10 = sub_22F142B40(*(_QWORD *)(a1 + 8), v8, v7, 1);
    v9 = *(_WORD *)(a3 + 18);
  }
  else
  {
    v9 = 0;
    v10 = v8 + v7;
  }
  *(_WORD *)(a3 + 16) = *((_WORD *)a2 + 4);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 5) | v9;
  v11 = a2[1];
  *(_DWORD *)a3 = v10;
  *(_DWORD *)(a3 + 4) = v11;
  *(_QWORD *)(a1 + 184) = v6 + v7 + v11;
  return v6 + v7;
}

uint64_t sub_22F411C48(uint64_t result, unsigned __int8 *a2, char **a3)
{
  unsigned __int8 *v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  int v6;
  _BYTE *v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  _BYTE *v16;
  _BYTE __src[4];

  if (a3)
  {
    v3 = a2;
    v4 = (_QWORD *)result;
    v5 = (unsigned __int8 *)a3 + (_QWORD)a2;
    while (1)
    {
      v6 = *v3;
      if (v6 != 92)
      {
        v11 = v4[1];
        a3 = (char **)(v11 + 1);
        if ((unint64_t)(v11 + 1) > v4[2])
        {
          result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v11 = v4[1];
        }
        *(_BYTE *)(*v4 + v11) = v6;
        ++v4[1];
        goto LABEL_16;
      }
      v7 = v3 + 2;
      if (v3[1] != 117)
        break;
      if (*v7 != 123)
      {
        v12 = 4;
LABEL_12:
        LODWORD(v10) = 0;
        v13 = v12 - 4;
        do
        {
          v14 = *v7++;
          v10 = (word_22F4A1464[v14] + 16 * v10);
          --v12;
        }
        while (v12);
        v3 += v13 + 5;
        goto LABEL_15;
      }
      v9 = v3[3];
      v3 += 3;
      v8 = v9;
      if (v9 == 125)
      {
        v10 = 0;
      }
      else
      {
        LODWORD(v10) = 0;
        do
        {
          v10 = (word_22F4A1464[v8] + 16 * v10);
          v15 = *++v3;
          v8 = v15;
        }
        while (v15 != 125);
      }
LABEL_15:
      v16 = __src;
      llvm::ConvertCodePointToUTF8((llvm *)v10, (uint64_t)&v16, a3);
      result = (uint64_t)sub_22F14E7A8(v4, __src, v16);
LABEL_16:
      if (++v3 == v5)
        return result;
    }
    v12 = 8;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_22F411D88(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  char v19;
  char *v20;
  unsigned __int8 v21;
  __int16 v22;
  unsigned int v23;
  void *v24;
  __int128 v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = xmmword_22F44E330;
  sub_22E4CE690(&v24, a2[1]);
  v21 = 0;
  v20 = (char *)v24;
  v6 = sub_22F1414C0((uint64_t)a2, (uint64_t *)&v20, *(uint64_t **)a1, *(_QWORD **)(a1 + 8), &v21);
  v7 = 0;
  if (v21)
    goto LABEL_2;
  v9 = v20;
  v10 = *v20;
  v11 = v20;
  if (v10 != 117)
    goto LABEL_8;
  v11 = v20;
  if (v20[1] == 56)
  {
    v11 = v20 + 2;
    v10 = v20[2];
LABEL_8:
    if (v10 == 82)
    {
      v12 = v11 + 2;
      v7 = &v11[a3] - v20 + 2;
      do
      {
        v20 = v12;
        v13 = *v12++;
        ++v7;
      }
      while (v13 != 40);
      goto LABEL_2;
    }
  }
  v14 = v11 + 1;
  v20 = v11 + 1;
  if (!a3)
    goto LABEL_34;
  v15 = &v9[v6];
  do
  {
    v14 = v20;
    if (*v20 != 92)
    {
      ++v20;
LABEL_28:
      --a3;
      continue;
    }
    v19 = 0;
    if ((v20[1] | 0x20) != 0x75)
    {
      sub_22F14CAD0((uint64_t)v9, (void **)&v20, v15, &v19, *a2, *(uint64_t **)a1, 8 * *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 8));
      goto LABEL_28;
    }
    v16 = *(_QWORD **)(a1 + 8);
    v23 = 0;
    v22 = 0;
    if ((sub_22F14C500((uint64_t)v9, (void **)&v20, v15, (int *)&v23, &v22, 0, 0, 0, v16) & 1) != 0)
    {
      if (v23 < 0x10000)
        v17 = 3;
      else
        v17 = 4;
      if (v23 < 0x800)
        v17 = 2;
      if (v23 >= 0x80)
        v18 = v17;
      else
        v18 = 1;
      if (v18 > a3)
        goto LABEL_34;
    }
    else
    {
      v18 = 0;
    }
    a3 -= v18;
  }
  while (a3);
  v14 = v20;
LABEL_34:
  v7 = v14 - v9;
LABEL_2:
  if (v24 != v26)
    free(v24);
  return v7;
}

BOOL sub_22F411FBC(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (sub_22F14ADA0(a1, a2, a3))
    return 1;
  if (a3 == 2)
    return *(unsigned __int16 *)a2 == 30323;
  return 0;
}

uint64_t sub_22F41200C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = (void **)(a1 + 8);
  sub_22F14F208(&v4);
  free((void *)a1);
  return v2;
}

BOOL sub_22F412050(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (*(_WORD *)(a2 + 36) & 0xC) != 0
      && *((unsigned __int16 *)*sub_22F14E94C(a1, *(_DWORD *)(a1 + 40) - 1, a3) + 8) != 1;
}

void sub_22F412090(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((v2 - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_22F14F284((char **)a1, v5);
  }
  else if (!v4)
  {
    v6 = *(_QWORD *)a1 + 24 * a2;
    if (v2 != v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v2 - 16) = v8;
          operator delete(v8);
        }
        v2 = v7;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
}

uint64_t sub_22F412124(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    v5 = *(_QWORD *)(a1 + 16);
    do
    {
      v7 = *(void **)(v5 - 24);
      v5 -= 24;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v5;
      if (v7)
      {
        *(_QWORD *)(v3 - 16) = v6;
        v8 = v2;
        operator delete(v6);
        v2 = v8;
        v5 = *(_QWORD *)(a1 + 16);
      }
      v3 = v5;
    }
    while (v5 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_22F4121A0(uint64_t *a1, int a2, _QWORD *a3)
{
  int v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;

  v6 = sub_22F14FEA4(a1);
  if (v6)
  {
    v7 = v5;
    while (1)
    {
      v8 = *((_DWORD *)v6 + 2);
      if (!v8 || sub_22F1E3C34(a3, v8, a2))
        break;
      if (!*v6)
        return 0;
      v6 = sub_22F14FEA4((uint64_t *)*v6);
      v7 = v9;
      if (!v6)
        return v6;
    }
    if (v7 && !sub_22F1E3C34(a3, a2, v7))
      return 0;
  }
  return v6;
}

uint64_t sub_22F41224C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  result = llvm::StringMapImpl::FindKey();
  if ((_DWORD)result != -1 && (int)result != (unint64_t)*(unsigned int *)(a1 + 1128))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 8 * (int)result);
    v4 = *(_QWORD **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v5)
    {
      for (i = v4; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = v4;
    }
    v8 = &v4[v5];
    while (i != v8)
    {
      result = sub_22F1502C8((uint64_t *)a1);
      if (result)
        *(_BYTE *)(result + 2056) = 1;
      do
      {
        v10 = i[1];
        ++i;
        v9 = v10;
        if (v10)
          v11 = v9 == -8;
        else
          v11 = 1;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t *sub_22F412324(uint64_t *a1, const void **a2)
{
  const void *v4;
  uint64_t *result;
  char v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  size_t v10;
  llvm::StringMapImpl *v11;
  char v12;
  BOOL v13;
  const void *v14;
  size_t v15;
  size_t v16;

  v4 = a2 + 19;
  result = (uint64_t *)sub_22F1502C8(a1);
  if (result)
  {
    *((_BYTE *)a2 + 2056) = 1;
  }
  else
  {
    v6 = *((_BYTE *)a2 + 175);
    v7 = v6 < 0;
    if (v6 >= 0)
      v8 = v4;
    else
      v8 = a2[19];
    v9 = v6 & 0x7F;
    if (v7)
      v10 = (size_t)a2[20];
    else
      v10 = v9;
    v11 = (llvm::StringMapImpl *)(*sub_22F413748((llvm::StringMapImpl *)(a1 + 140), v8, v10) + 8);
    v12 = *((_BYTE *)a2 + 23);
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = a2;
    else
      v14 = *a2;
    v15 = v12 & 0x7F;
    if (v13)
      v16 = (size_t)a2[1];
    else
      v16 = v15;
    return sub_22E3B39D4(v11, v14, v16);
  }
  return result;
}

uint64_t sub_22F4123D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    return sub_22F41FEF0(a4);
  else
    return sub_22F1502C8(a1);
}

uint64_t sub_22F4123E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x100000000;
  *(_QWORD *)(a1 + 64) = 0;
  sub_22F1D4230(a1 + 72);
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 944) = a1 + 960;
  *(_QWORD *)(a1 + 952) = 0x800000000;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1040) = 0x1000000000;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_DWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1080) = a1 + 1096;
  *(_QWORD *)(a1 + 1088) = 0x200000000;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1136) = 0x2800000000;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_DWORD *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_DWORD *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_DWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_DWORD *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1368) = 0;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_QWORD *)(a1 + 72) |= 0x200000uLL;
  return a1;
}

uint64_t sub_22F4124F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

BOOL sub_22F4124F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a1 + 64))
    return 0;
  v3 = *(_QWORD *)(a2 + 88);
  do
  {
    v4 = *(_QWORD *)(v3 + 8);
    if ((v4 & 2) == 0)
      break;
    v3 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v3);
  v5 = llvm::sys::path::filename();
  return sub_22F151934(v5, v6);
}

BOOL sub_22F412548(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[21];

  v27[20] = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t)(a2 + 218);
  v4 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (*((_DWORD *)a2 + 438))
  {
    v22 = a1;
    v24 = a2;
    v8 = a2 + 218;
    v23 = a3;
    sub_22F1623CC((uint64_t)&v25, (uint64_t)(a2 + 218));
    v4 = v27;
    v3 = (uint64_t)v8;
    a1 = v22;
    a3 = v23;
    a2 = v24;
    v9 = *((unsigned int *)v24 + 438);
    if ((_DWORD)v9)
    {
      v10 = 80 * v9;
      v11 = v24[218] - 80;
      do
      {
        sub_22E5762C8((char **)(v11 + v10));
        v4 = v27;
        v3 = (uint64_t)v8;
        a1 = v22;
        a3 = v23;
        a2 = v24;
        v10 -= 80;
      }
      while (v10);
    }
  }
  *((_DWORD *)a2 + 438) = 0;
  v5 = v25;
  if ((_DWORD)v26)
  {
    v20 = v27;
    v21 = (char *)v25;
    v19 = v3;
    v22 = a1;
    v23 = a3;
    v24 = a2;
    v12 = 80 * v26;
    v13 = a2;
    do
    {
      v14 = sub_22F1503B4(v22, (uint64_t)v21, v24, v23);
      if (v14)
      {
        v15 = v14;
        v16 = *((unsigned int *)v24 + 430);
        if (v16 >= *((unsigned int *)v24 + 431))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = *((unsigned int *)v13 + 430);
        }
        *(_QWORD *)(v24[214] + 8 * v16) = v15;
        ++*((_DWORD *)v24 + 430);
      }
      else
      {
        sub_22F41356C(v19, (unint64_t)v21);
      }
      v21 += 80;
      v12 -= 80;
    }
    while (v12);
    v6 = *((_DWORD *)v24 + 438);
    v5 = v25;
    if ((_DWORD)v26)
    {
      v17 = 80 * v26;
      v18 = (char *)v25 - 80;
      do
      {
        sub_22E5762C8((char **)&v18[v17]);
        v17 -= 80;
      }
      while (v17);
      v5 = v25;
    }
    v4 = v20;
  }
  else
  {
    v6 = 0;
  }
  if (v5 != v4)
    free(v5);
  return v6 != 0;
}

char **sub_22F41274C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19[2];
  _QWORD v20[10];

  v20[9] = *MEMORY[0x24BDAC8D0];
  v19[0] = (char *)v20;
  v19[1] = (char *)0x100000000;
  v4 = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(a3 + 32);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2 + 1080;
  v8 = *(unsigned int *)(a2 + 1088);
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(a2 + 1080);
    v11 = 72 * v8;
    do
    {
      v13 = v7;
      v14 = v5;
      v15 = v6;
      v16 = a2;
      v17 = a1;
      v12 = v4;
      if (v4
        && (*(_BYTE *)(v10 + 64) && *(_QWORD *)(v10 + 56) != v6 || *(_BYTE *)(v10 + 48) && *(_QWORD *)(v10 + 40) != v5))
      {
        sub_22F15185C((uint64_t)v19, v10);
      }
      else
      {
        sub_22F150C6C(a1, (uint64_t *)a2, (int *)v10, &v18);
      }
      v10 += 72;
      v11 -= 72;
      a2 = v16;
      a1 = v17;
      v4 = v12;
      v7 = v13;
      v5 = v14;
      v6 = v15;
    }
    while (v11);
  }
  sub_22F159D58(v7, (uint64_t)v19);
  return sub_22F161D18(v19);
}

BOOL sub_22F412874(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v5[0] = v6;
  v5[1] = (void *)0x200000000;
  v2 = sub_22F151FD0(a1, a2, (uint64_t)v5);
  if (v5[0] != v6)
  {
    v4 = v2;
    free(v5[0]);
    v2 = v4;
  }
  return v2 > 7;
}

uint64_t sub_22F412908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_22F151CF0(a1, a2);
  if (*(_QWORD *)(a1 + 1152) + 32 * *(unsigned int *)(a1 + 1168) == v4)
  {
    if (sub_22F15274C(a1, a2) < 8)
      return 0;
    v7 = a2;
    v8 = 0;
    if ((sub_22E54D320(a1 + 1152, &v7, &v8) & 1) != 0)
      v4 = v8;
    else
      v4 = *(_QWORD *)(a1 + 1152) + 32 * *(unsigned int *)(a1 + 1168);
  }
  return *(_QWORD *)(v4 + 8);
}

uint64_t sub_22F4129A4(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  sub_22F151DC8(a1, a2);
  v8 = 0;
  v9 = a2;
  if (sub_22E54D320((uint64_t)&a1[144], &v9, &v8))
  {
    v4 = v8;
    v5 = a1[144];
    v6 = a1[146].u32[0];
  }
  else
  {
    v5 = a1[144];
    v6 = a1[146].u32[0];
    v4 = *(_QWORD *)&v5 + 32 * v6;
  }
  if (v4 == *(_QWORD *)&v5 + 32 * v6)
    return 0;
  else
    return *(_QWORD *)(v4 + 8);
}

char *sub_22F412A24(uint64_t a1, int a2, uint64_t a3)
{
  char *v6;
  int v7;
  char *v8;
  uint64_t v10;
  char *v11;

  v6 = (char *)operator new();
  v7 = *(_DWORD *)(a1 + 1112);
  *(_DWORD *)(a1 + 1112) = v7 + 1;
  v8 = sub_22F1D7750(v6, "<global>", 8uLL, a2, a3, 0, 1, v7);
  v11 = v8;
  *((_DWORD *)v8 + 7) = 5;
  if (!*((_QWORD *)v8 + 4))
  {
    v10 = *(unsigned int *)(a1 + 952);
    if (v10 >= *(_DWORD *)(a1 + 956))
    {
      sub_22F413BD4(a1 + 944, &v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 944) + 8 * v10) = v6;
      *(_DWORD *)(a1 + 952) = v10 + 1;
    }
  }
  return v6;
}

char *sub_22F412AEC(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  int v7;
  char *result;

  v6 = (char *)operator new();
  v7 = *(_DWORD *)(a1 + 1112);
  *(_DWORD *)(a1 + 1112) = v7 + 1;
  result = sub_22F1D7750(v6, "<private>", 9uLL, a3, a2, 0, 1, v7);
  *((_DWORD *)result + 7) = 6;
  return result;
}

uint64_t sub_22F412B64(_DWORD *a1, int a2, void *a3, size_t a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t v17;

  v8 = operator new();
  v9 = a1[278];
  a1[278] = v9 + 1;
  v10 = sub_22F1D7750((char *)v8, a3, a4, a2, 0, 0, 0, v9);
  *((_DWORD *)v10 + 7) = 1;
  *((_QWORD *)a1 + 117) = v10;
  *(_QWORD *)(*sub_22F161990((llvm::StringMapImpl *)(a1 + 256), a3, a4) + 8) = v8;
  v11 = a1[238];
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)*((_QWORD *)a1 + 118);
    v13 = 8 * v11;
    do
    {
      sub_22F412CA8(*v12, (_QWORD *)v8);
      *v12++ = 0;
      v13 -= 8;
    }
    while (v13);
  }
  sub_22F412D28((uint64_t)(a1 + 236));
  v17 = sub_22E6155EC(*(_QWORD **)a1, *(_DWORD *)(*(_QWORD *)a1 + 344));
  v14 = sub_22F16164C(a1 + 288, &v17);
  v15 = *((_DWORD *)v14 + 4);
  if (v15 >= *((_DWORD *)v14 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *((_DWORD *)v14 + 4);
  }
  *(_QWORD *)(v14[1] + 8 * v15) = v8 & 0xFFFFFFFFFFFFFFF8 | 1;
  ++*((_DWORD *)v14 + 4);
  return v8;
}

_QWORD *sub_22F412CA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  llvm::StringMapImpl *v4;
  char v5;
  BOOL v6;
  const void *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = a2;
  v3 = (a2[26] - a2[25]) >> 3;
  v4 = (llvm::StringMapImpl *)(a2 + 28);
  v5 = *(_BYTE *)(a1 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (const void *)a1;
  else
    v7 = *(const void **)a1;
  v8 = v5 & 0x7F;
  if (v6)
    v9 = *(_QWORD *)(a1 + 8);
  else
    v9 = v8;
  *(_DWORD *)(*sub_22F161284(v4, v7, v9) + 8) = v3;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(uint64_t **)(v10 + 208);
  if ((unint64_t)v11 >= *(_QWORD *)(v10 + 216))
  {
    result = sub_22E566A8C((void **)(v10 + 200), a1);
  }
  else
  {
    *v11 = a1;
    result = v11 + 1;
  }
  *(_QWORD *)(v10 + 208) = result;
  return result;
}

uint64_t sub_22F412D28(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = 8 * v2;
    v4 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v4 + v3);
      *(_QWORD *)(v4 + v3) = 0;
      if (result)
      {
        v5 = sub_22F1D7BC4(result);
        result = MEMORY[0x2348A0E9C](v5, 0x10F2C40A72A4818);
      }
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_22F412D90(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  return sub_22F159088(a1, a2, a3, a4);
}

BOOL sub_22F412D98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _DWORD *a6, unsigned int a7)
{
  uint64_t *v14;
  unsigned int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26[4];
  char v27;
  uint64_t v28;
  _QWORD v29[9];
  int v30[32];
  void *v31;
  void *v32;
  _QWORD v33[8];
  void *v34;
  uint64_t v35;
  int v36[32];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v28 = a2;
  v29[0] = 0;
  v14 = a1 + 169;
  v33[0] = a2;
  if (sub_22F13D768(a1 + 169, v33, v29) && v29[0] != a1[169] + 16 * *((unsigned int *)a1 + 342))
    return *(_BYTE *)(v29[0] + 8) != 0;
  if (!a5)
  {
    if ((_DWORD)a3)
      v15 = 4;
    else
      v15 = 3;
    a5 = sub_22F423804(*a1, a2, a7, v15, 0, 0);
  }
  sub_22E490D40((_QWORD *)*a1, a5, 0, v26);
  if (v27)
  {
    v16 = sub_22E49F3DC((_QWORD *)*a1, a5);
    if (v16)
      v17 = *v16 & 0x7FFFFFFF;
    else
      v17 = 0;
    if (a6)
      v18 = *a6;
    else
      v18 = 0;
    sub_22F140E3C((uint64_t)v33, v17, (_DWORD *)a1 + 18, v26[0], (unsigned __int16 *)((char *)v26[0] + v18), (uint64_t)v26[0] + (unint64_t)v26[1], 1);
    v19 = sub_22F410E00((uint64_t)v33, v36[18], 1);
    sub_22F4136AC((uint64_t)v29, (uint64_t)v33, *a1, a1[3], a1[1], (uint64_t)a1, v28, a4, a3);
    v20 = sub_22F161170((uint64_t)v29);
    *((_BYTE *)sub_22F410840(v14, &v28) + 8) = v20;
    if (a6)
      *a6 = sub_22E677168(*a1, v30[25]) >> 32;
    v21 = *((unsigned int *)a1 + 12);
    if ((_DWORD)v21)
    {
      v23 = (uint64_t *)a1[5];
      v24 = 8 * v21;
      do
      {
        v25 = *v23++;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v19, v28, a3);
        v24 -= 8;
      }
      while (v24);
    }
    if (v32 != v31)
      free(v32);
    sub_22E3B4EF4((uint64_t)v30);
    v33[0] = &unk_24FAC8A48;
    sub_22E730D24((uint64_t)v36);
    if (v34 != &v35)
      free(v34);
  }
  else
  {
    v20 = 1;
    *((_BYTE *)sub_22F410840(v14, &v28) + 8) = 1;
  }
  return v20;
}

char *sub_22F41301C(uint64_t a1, void *a2, size_t a3, int a4, uint64_t a5)
{
  char *v10;
  int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  char *v16;

  v10 = (char *)operator new();
  v11 = *(_DWORD *)(a1 + 1112);
  *(_DWORD *)(a1 + 1112) = v11 + 1;
  v12 = sub_22F1D7750(v10, a2, a3, 0, 0, a4, 0, v11);
  v16 = v12;
  *((_QWORD *)v12 + 167) = a5;
  sub_22F1D9260((uint64_t)v12, 1);
  LODWORD(a5) = *(_DWORD *)(a1 + 1248);
  *((_DWORD *)sub_22E7448C8((_DWORD *)(a1 + 1256), &v16) + 2) = a5;
  v13 = v16;
  v14 = *(_DWORD *)(a1 + 1088);
  if (v14 >= *(_DWORD *)(a1 + 1092))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 1088);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1080) + 8 * v14) = v13;
  ++*(_DWORD *)(a1 + 1088);
  return v16;
}

uint64_t sub_22F41310C(uint64_t a1)
{
  char *v2;
  size_t v3;
  size_t v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)llvm::sys::path::parent_path();
  v4 = v3;
  v5 = (_DWORD *)llvm::sys::path::filename();
  if (v6 != 7)
    goto LABEL_2;
  if (*v5 != 1969516365 || *(_DWORD *)((char *)v5 + 3) != 1936026741)
    goto LABEL_2;
  v20 = llvm::sys::path::parent_path();
  if (v21 < 0xA)
    goto LABEL_2;
  v7 = (char *)v20;
  v10 = v21;
  v22 = 0x2E6672616D65776FLL;
  v23 = bswap64(*(_QWORD *)(v20 + v21 - 10));
  if (v23 == 0x2E6672616D65776FLL
    && (v23 = bswap32(*(unsigned __int16 *)(v20 + v21 - 2)) >> 16, v22 = 29291, (_DWORD)v23 == 29291))
  {
    v24 = 0;
  }
  else
  {
    v24 = v23 < v22 ? -1 : 1;
  }
  if (!v24)
  {
    v9 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v2 = (char *)v20;
    v11 = v21;
  }
  else
  {
LABEL_2:
    v7 = ".";
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v9 = v4 == 0;
    if (v4)
      v10 = v4;
    else
      v10 = 0;
    if (v4)
      v11 = v4;
    else
      v11 = 1;
    if (v4)
      v7 = v2;
  }
  sub_22F1D0728(v8, v7, v11, 1, (uint64_t)&v27);
  if ((v28 & 1) == 0)
  {
    v12 = v27;
    v13 = sub_22F1D1F3C();
    v15 = (char *)v13;
    v16 = v14;
    v17 = v14 != v10 || v9;
    if ((v17 & 1) != 0)
    {
      if (v14 == v10)
        goto LABEL_16;
    }
    else if (!memcmp(v13, v2, v10))
    {
LABEL_16:
      llvm::sys::path::remove_dots();
      std::system_category();
      return 0;
    }
    sub_22F1D0728(v8, v15, v16, 1, (uint64_t)&v25);
    if ((v26 & 1) == 0 && v25 == v12)
      llvm::sys::path::replace_path_prefix();
    goto LABEL_16;
  }
  return v27;
}

uint64_t sub_22F41333C(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *v4;
  uint64_t v6;

  v6 = a2;
  v4 = sub_22F413F68((uint64_t *)(a1 + 1328), &v6);
  return sub_22E3BA850((uint64_t)(v4 + 1), a3);
}

BOOL sub_22F41337C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[25];

  v25[24] = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1504;
  v23 = v25;
  v24 = 0x200000000;
  if (*(_DWORD *)(a2 + 1512))
  {
    sub_22F161E54((uint64_t)&v23, a2 + 1504);
    v7 = *(unsigned int *)(a2 + 1512);
    if ((_DWORD)v7)
    {
      v17 = *(_QWORD *)(a2 + 1504) - 88;
      v18 = 96 * v7;
      do
      {
        sub_22E5762C8((char **)(v17 + v18));
        v18 -= 96;
      }
      while (v18);
    }
  }
  *(_DWORD *)(a2 + 1512) = 0;
  v8 = v23;
  if (!(_DWORD)v24)
  {
    v9 = 0;
    goto LABEL_16;
  }
  v10 = a2 + 1472;
  v11 = 96 * v24;
  do
  {
    if (v8[4])
    {
      v21 = v8;
      v22 = v10;
      v20 = v11;
      v19 = sub_22F1503B4(a1, (uint64_t)(v8 + 2), (uint64_t *)a2, a3);
      v8 = v21;
      v10 = v22;
      if (!v19
        || (v12 = (unint64_t)v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * *((unsigned __int8 *)v21 + 88)), v12 < 4))
      {
        sub_22F15A4E0(v6, (unint64_t)v21);
        v11 = v20;
        v8 = v21;
        v10 = v22;
        goto LABEL_11;
      }
    }
    else
    {
      v12 = 4;
    }
    v13 = *(unsigned int *)(a2 + 1480);
    if (v13 >= *(unsigned int *)(a2 + 1484))
    {
      v21 = v8;
      v22 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v21;
      v10 = v22;
      v13 = *(unsigned int *)(a2 + 1480);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 1472) + 8 * v13) = v12;
    ++*(_DWORD *)(a2 + 1480);
LABEL_11:
    v8 += 24;
    v11 -= 96;
  }
  while (v11);
  v9 = *(_DWORD *)(a2 + 1512);
  v8 = v23;
  if ((_DWORD)v24)
  {
    v14 = (char *)v23 - 88;
    v15 = 96 * v24;
    do
    {
      sub_22E5762C8((char **)&v14[v15]);
      v15 -= 96;
    }
    while (v15);
    v8 = v23;
  }
LABEL_16:
  if (v8 != (_DWORD *)v25)
    free(v8);
  return v9 != 0;
}

_QWORD *sub_22F41356C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_22F1625D0(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x200000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_22F162838((uint64_t)result, (uint64_t *)v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F4135CC(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  v3 = result;
  v4 = 0;
  v5 = 0;
  while (2)
  {
    v6 = *(_DWORD *)(v3 + 168);
    switch(v6)
    {
      case 24:
        ++v5;
        goto LABEL_15;
      case 25:
        if (v5)
        {
          --v5;
        }
        else
        {
          if (a2 == 25)
            return result;
LABEL_8:
          v5 = 0;
        }
        goto LABEL_15;
      case 26:
        if (a2 == 26 && !v5 && !v4)
          return result;
        ++v4;
        goto LABEL_15;
      case 27:
        if (v4)
        {
          --v4;
          goto LABEL_15;
        }
        if (a2 != 27)
        {
          v4 = 0;
LABEL_15:
          result = sub_22F15A7BC((_BYTE **)v3);
          continue;
        }
        return result;
      default:
        if (v6 == 3)
          return result;
        if (v5 | v4)
          goto LABEL_15;
        if (v6 == a2)
          return result;
        v4 = 0;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F4136AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a8;
  *(_BYTE *)(a1 + 64) = a9;
  *(_BYTE *)(a1 + 65) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 200) = a1 + 232;
  *(_QWORD *)(a1 + 208) = a1 + 232;
  *(_QWORD *)(a1 + 216) = 2;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 168) = 3;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_22F15A7BC((_BYTE **)a1);
  return a1;
}

uint64_t *sub_22F413748(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 41, 8);
  v10 = v9;
  v11 = v9 + 40;
  if (a3)
    memcpy((void *)(v9 + 40), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *(_QWORD *)v10 = a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_DWORD *)(v10 + 28) = 8;
  *i = v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

void sub_22F413854(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F1615B0((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void **sub_22F4138C0(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void **v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v7 = result;
    v3 = 8 * v2;
    v4 = (char *)(v1 - 1);
    do
    {
      v5 = *(_QWORD *)&v4[v3];
      *(_QWORD *)&v4[v3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v3 -= 8;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

void **sub_22F413944(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v8 = result;
    v3 = 8 * v2;
    v4 = (char *)(v1 - 1);
    do
    {
      v5 = *(_QWORD *)&v4[v3];
      *(_QWORD *)&v4[v3] = 0;
      if (v5)
      {
        v6 = sub_22F1D7BC4(v5);
        MEMORY[0x2348A0E9C](v6, 0x10F2C40A72A4818);
      }
      v3 -= 8;
    }
    while (v3);
    result = v8;
    v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

uint64_t sub_22F4139D4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  void *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
        {
          v8 = (void *)(*(_QWORD *)v6 + 41);
          sub_22E3B3AD0((uint64_t)v6 + 8);
          llvm::deallocate_buffer(v6, v8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F413A68(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  void *v4;
  uint64_t v6;
  uint64_t *v7;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v6 = 16 * v2;
    v7 = (uint64_t *)((char *)v3 + 8);
    do
    {
      if ((unint64_t)(*(v7 - 1) - 0x7FFFFFFFFFFFFFFFLL) >= 2)
        v7 = sub_22F29CFE8(v7);
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    v3 = *(llvm **)a1;
    v4 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v4 = 0;
  }
  llvm::deallocate_buffer(v3, v4);
  return a1;
}

uint64_t sub_22F413AEC(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  void *v4;
  uint64_t v6;
  uint64_t *v7;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v6 = 16 * v2;
    v7 = (uint64_t *)((char *)v3 + 8);
    do
    {
      if (*(v7 - 1) <= 0x7FFFFFFFFFFFFFFDLL)
        v7 = sub_22F29CFE8(v7);
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    v3 = *(llvm **)a1;
    v4 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v4 = 0;
  }
  llvm::deallocate_buffer(v3, v4);
  return a1;
}

void sub_22F413B70(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
}

void sub_22F413BD4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v4[*(unsigned int *)(a1 + 8)] = *a2;
  sub_22F413C5C(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F413C5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = 8 * v2;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        v8 = sub_22F1D7BC4(result);
        result = MEMORY[0x2348A0E9C](v8, 0x10F2C40A72A4818);
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_22F413CD0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F2ABDF8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F413D5C(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 88 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F413D5C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_22F413DCC(a1, a3, a2);
  *v6 = *a3;
  *(_OWORD *)(v6 + 1) = *(_OWORD *)a4;
  v6[3] = v6 + 5;
  v6[4] = 0x200000000;
  if (*(_DWORD *)(a4 + 24))
    sub_22F161378((uint64_t)(v6 + 3), a4 + 16);
  return v6;
}

_QWORD *sub_22F413DCC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F161A8C(a1, v6);
  v8 = 0;
  sub_22F2ABDF8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F413E78(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 88 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      v7 += 88;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F2ABDF8((uint64_t *)v5, (_QWORD *)v4, &v13);
        v9 = v13;
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v11 = *(_OWORD *)(v4 + 8);
        v9[3] = v10 + 5;
        v12 = (uint64_t)(v9 + 3);
        *(_OWORD *)(v12 - 16) = v11;
        *(_QWORD *)(v12 + 8) = 0x200000000;
        if (*(_DWORD *)(v4 + 32))
          sub_22F161378(v12, v4 + 24);
        ++*((_DWORD *)v5 + 2);
        result = sub_22E3B9848((char **)(v4 + 24));
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *sub_22F413F68(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E78D100(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F413FDC((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 5;
    v5[2] = v5 + 5;
    v5[3] = 1;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_22F413FDC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F161D88(a1, v6);
  v8 = 0;
  sub_22E78D100((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F414088(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 48 * v6;
    do
    {
      *v7 = -4096;
      v7 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      sub_22E78D100((uint64_t *)a1, a2, &v10);
      *v10 = *a2;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
      ++*(_DWORD *)(a1 + 8);
      v9 = (void *)a2[2];
      if (v9 != (void *)a2[1])
        free(v9);
    }
    a2 += 6;
  }
}

double sub_22F414158(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 88;
    v7 = 96 * v5;
    do
    {
      sub_22E5762C8((char **)&v6[v7]);
      v7 -= 96;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F4141D4(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F4142AC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F414240(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F162348((__int128 **)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F4142AC(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 96 * v2;
    result = a2 + 8;
    v6 = v4 + 8;
    do
    {
      v7 = v6 - 8;
      *(_DWORD *)(result - 8) = *(_DWORD *)(v6 - 8);
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 8))
        result = sub_22F1620B0(result, v6);
      *(_BYTE *)(result + 80) = *(_BYTE *)(v6 + 80);
      result += 96;
      v6 += 96;
    }
    while (v7 + 96 != v5);
    v8 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v3 - 88;
      v10 = 96 * v8;
      do
      {
        result = (uint64_t)sub_22E5762C8((char **)(v9 + v10));
        v10 -= 96;
      }
      while (v10);
    }
  }
  return result;
}

double sub_22F414368(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 80 * v5;
    v7 = v4 - 80;
    do
    {
      sub_22E5762C8((char **)&v7[v6]);
      v6 -= 80;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F4143E4(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F414450(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F414450(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 80 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x200000000;
      if (*(_DWORD *)(v5 + 8))
        result = sub_22F1620B0((uint64_t)a2, v5);
      v5 += 80;
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 80 * v7;
      v10 = v8 - 80;
      do
      {
        result = (uint64_t)sub_22E5762C8((char **)(v10 + v9));
        v9 -= 80;
      }
      while (v9);
    }
  }
  return result;
}

_QWORD *sub_22F4144F4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2ABDF8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F413DCC((uint64_t)a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) &= ~1u;
    *((_BYTE *)v5 + 12) &= 0xE8u;
    v5[3] = v5 + 5;
    v5[4] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F414580(uint64_t result)
{
  *(_QWORD *)(result + 2832) -= 8;
  return result;
}

_QWORD *sub_22F414594(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FAC7F78;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_22F4145F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FAC7F78;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F41465C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 264))(*(_QWORD *)(a1 + 16), v13, a3, a4, a5, a6, a7);
}

uint64_t sub_22F4146E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_22F41473C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a3;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2, v7, a4);
}

uint64_t sub_22F414798(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a3;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, v7, a4);
}

uint64_t sub_22F4147F4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), v9, a3, a4, a5);
}

uint64_t sub_22F414860(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22F414898(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F4148F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), v5, a3);
}

uint64_t sub_22F414948(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16), v9, a3, a4, a5);
}

uint64_t sub_22F4149B4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F414A10(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16), v11, a3, a4, a5, a6);
}

uint64_t sub_22F414A84(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F414AE0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 128))(*(_QWORD *)(a1 + 16), v13, a3, a4, a5, a6, a7);
}

uint64_t sub_22F414B64(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F414BC0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F414C1C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 152))(*(_QWORD *)(a1 + 16), v13, a3, a4, a5, a6, a7);
}

uint64_t sub_22F414CA0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a4;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16), v8, a3, v9, a5);
}

uint64_t sub_22F414D10(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), v9, a3, a4, a5);
}

uint64_t sub_22F414D7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16), v5, a3);
}

uint64_t sub_22F414DD0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16), v3);
}

uint64_t sub_22F414E14(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F414E70(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16), v3);
}

uint64_t sub_22F414EB4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16), v3);
}

uint64_t sub_22F414EF8(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16), v3);
}

uint64_t sub_22F414F3C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F414F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 248))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_22F414FF0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a5;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 288))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 288))(*(_QWORD *)(a1 + 16), v8, a3, a4, v9);
}

uint64_t sub_22F415060(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 296))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 296))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F4150BC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 304))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F415118(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a4;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 312))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 312))(*(_QWORD *)(a1 + 16), v6, a3, v7);
}

uint64_t sub_22F415178(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 320))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 320))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F4151D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 328))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 328))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F415230(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a4;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 336))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 336))(*(_QWORD *)(a1 + 16), v6, a3, v7);
}

uint64_t sub_22F415290(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int v13;
  _BOOL4 v14;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 56) == v4)
    return 0;
  if (sub_22F1E3C34(*(_QWORD **)(a1 + 8), *(_DWORD *)(v4 - 8), a2))
  {
    v5 = (unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * *(unsigned int *)(a1 + 24) - 4);
  }
  else
  {
    v7 = *(int **)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64) - (_QWORD)v7;
    if (v8)
    {
      v9 = *(_QWORD **)(a1 + 8);
      v10 = v8 >> 3;
      do
      {
        v11 = &v7[2 * (v10 >> 1)];
        v13 = *v11;
        v12 = v11 + 2;
        v14 = sub_22F1E3C34(v9, v13, a2);
        if (v14)
          v10 += ~(v10 >> 1);
        else
          v10 >>= 1;
        if (v14)
          v7 = v12;
      }
      while (v10);
    }
    v5 = (unsigned int *)(v7 + 1);
  }
  return *v5;
}

uint64_t *sub_22F415358(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v3;
  int v4;

  if ((*(_BYTE *)(a2 + 3) & 2) == 0)
    return 0;
  result = (uint64_t *)sub_22F175F40(a1, a2);
  if (result)
  {
    v3 = result;
    sub_22F14FEA4(result);
    if (v4)
      return 0;
    else
      return v3;
  }
  return result;
}

char *sub_22F415398(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  int v6;
  unint64_t v8;
  uint64_t v9;

  v6 = a2;
  v8 = HIDWORD(a2);
  v9 = operator new[]();
  *(_QWORD *)(v9 + 8) = a4;
  *(_QWORD *)(v9 + 16) = 0;
  *(_WORD *)(v9 + 16) = a3;
  *(_DWORD *)v9 = v6;
  *(_DWORD *)(v9 + 4) = v8;
  return sub_22F1735E4(a1, (_BYTE *)v9, 1, 1, 1, 0);
}

uint64_t sub_22F415410(uint64_t a1)
{
  uint64_t v2;
  int Key;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 456);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    v4 = *(unsigned int *)(v2 + 8);
  else
    v4 = Key;
  v5 = (uint64_t *)(*(_QWORD *)v2 + 8 * v4);
  if (v5 == (uint64_t *)(**(_QWORD **)(a1 + 456) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 456) + 8)))
    return 0;
  v6 = *v5;
  v9 = *(_QWORD *)(v6 + 8);
  v7 = v6 + 8;
  v8 = v9;
  if (*(char *)(v7 + 23) >= 0)
    return v7;
  else
    return v8;
}

uint64_t sub_22F41549C(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 32;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v10 = 0;
      result = 0;
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v17 = *a2;
  v7 = sub_22F422E70(&v17);
  v8 = v6 - 1;
  v9 = v7 & (v6 - 1);
  v10 = (_DWORD *)(v5 + 4 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
    result = 1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    result = 1;
    while (v11 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v11 == -2;
      if (v15)
        v13 = v10;
      v16 = v9 + v14++;
      v9 = v16 & v8;
      v10 = (_DWORD *)(v5 + 4 * (v16 & v8));
      v11 = *v10;
      if (*a2 == *v10)
        goto LABEL_7;
    }
    result = 0;
    if (v13)
      v10 = v13;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

_DWORD *sub_22F415580(uint64_t a1, uint64_t a2, int *a3)
{
  _DWORD *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v14 = 0;
  result = (_DWORD *)sub_22F41549C(a2, a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 32;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 4 * v9;
  }
  else
  {
    result = sub_22F41563C((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 32;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 4 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_DWORD *sub_22F41563C(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 32;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22F16F2A0((uint64_t)a1, v6);
  v8 = 0;
  sub_22F41549C((uint64_t)a1, a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1)
    --a1[1];
  return a3;
}

uint64_t sub_22F4156F8(uint64_t result, int *a2, int *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  int *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(result + 8);
    v9 = 128;
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(void **)(result + 8);
    v9 = 4 * v7;
  }
  result = (uint64_t)memset(v8, 255, v9);
LABEL_6:
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      v10 = 0;
      result = sub_22F41549C((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F4157AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[126];
  if (v1)
  {
    if (*(_BYTE *)(v1 + 177))
      goto LABEL_3;
    return a1[133] == a1[134];
  }
  if (a1[127])
    return a1[133] == a1[134];
LABEL_3:
  v2 = a1[133];
  while (1)
  {
    v2 += 56;
    if (v2 == a1[134])
      break;
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 177))
        return 0;
    }
    else if (*(_QWORD *)(v2 + 24))
    {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22F415818(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;
  char v5;

  v2 = *(_QWORD *)(result + 1040);
  if (v2)
  {
    v5 = *(_BYTE *)(v2 + 64) & 0xFE | *(_BYTE *)(a2 + 18) & 1;
    *(_BYTE *)(v2 + 64) = v5;
    *(_BYTE *)(v2 + 64) = *(_BYTE *)(a2 + 18) & 2 | v5 & 0xFD;
  }
  else
  {
    v3 = *(_BYTE **)(result + 1008);
    if (v3)
    {
      v4 = *(_BYTE *)(a2 + 18);
      v3[192] = v4 & 1;
      v3[194] = (v4 & 2) != 0;
      v3[195] = (v4 & 0x10) != 0;
    }
  }
  return result;
}

uint64_t sub_22F415870(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a2 == result)
    return a2;
  v2 = a2 - 1;
  v3 = *(unsigned __int8 *)(a2 - 1);
  if (v3 != 10 && v3 != 13)
    return a2;
  if (v2 != result)
  {
    v7 = *(unsigned __int8 *)(a2 - 2);
    v5 = a2 - 2;
    v6 = v7;
    if (v7 == v3)
      v8 = v2;
    else
      v8 = v5;
    if (v6 == 10 || v6 == 13)
      return v8;
    else
      return v2;
  }
  return result;
}

uint64_t *sub_22F4158B8(uint64_t *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;

  v4 = *result;
  if ((*result & 4) == 0 || (v5 = v4 & 0xFFFFFFFFFFFFFFF8, (v4 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    if (!a4)
      return result;
    v6 = result;
    v13 = a3;
    v7 = a4;
    v8 = sub_22E3CD3D4(a2 + 128, 32, 3);
    a4 = v7;
    a3 = v13;
    v5 = v8;
    *(_QWORD *)v8 = *v6 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 20) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *v6 = v8 | 4;
  }
  v9 = (uint64_t *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 24);
  if ((v10 & 4) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
      *(_DWORD *)(v12 + 8) = 0;
    v11 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
  }
  else
  {
    *v9 = 0;
    v11 = v5 + 24;
  }
  result = sub_22F175DC8(v9, v11, a3, &a3[a4]);
  *(_DWORD *)(v5 + 16) = 0;
  return result;
}

_BYTE *sub_22F415978(uint64_t a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_22E5B5498(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_22F246808(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      *(_DWORD *)(a1 + 8) = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

_DWORD *sub_22F415AD4(_DWORD *a1)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;
  _DWORD *v7;

  v2 = *a1;
  if (*a1 > 1u)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 34;
LABEL_11:
      while (*result >= 0xFFFFFFFE)
      {
        if (++result == v7)
          return v7;
      }
    }
    else
    {
      result = (_DWORD *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[v6];
        goto LABEL_11;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 32;
    }
    else
    {
      v3 = (_DWORD *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[v4];
  }
  return result;
}

_OWORD *sub_22F415B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _OWORD *result;
  int v7;

  v5 = a2 + 8;
  result = operator new(0x60uLL);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  result[2] = *(_OWORD *)a3;
  *((_QWORD *)result + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)result + 14) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a3 + 24) = 0;
  result[4] = *(_OWORD *)(a3 + 32);
  *((_QWORD *)result + 10) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v7 = *(_DWORD *)(a3 + 56);
  *((_DWORD *)result + 22) = v7 != 0;
  *(_DWORD *)(a3 + 56) = v7 + 1;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_22F415BD8@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E3B9914((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E6D7314(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    *a3 = 0;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F415C6C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      v3 = result;
      v4 = a2;
      if (*(unsigned int *)(result + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(v3 + 8);
      }
      result = v3;
      LODWORD(a2) = v4;
      if (v4 != v2)
      {
        bzero((void *)(*(_QWORD *)v3 + 8 * v2), 8 * (v4 - v2));
        result = v3;
        LODWORD(a2) = v4;
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_22F415CEC(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v18 = a2;
  v7 = sub_22E6D72B8(*(_DWORD **)(a1 + 1584), &v18);
  v8 = v7[1];
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0 && v9)
  {
    if (*v9)
    {
      *a3 = *v9;
      *v9 = a4;
      goto LABEL_8;
    }
  }
  else if (v9)
  {
    *a3 = v9;
  }
  v7[1] = (unint64_t)a4 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_8:
  if ((*v18 & 0x2000000) == 0)
    *v18 |= 0x86000000uLL;
  result = (uint64_t)sub_22F14FEA4(a4);
  if (!result || v11)
  {
    v19 = v18;
    v20 = 0;
    result = sub_22E3B9914(a1 + 1960, &v19, &v20);
    if (!(_DWORD)result || v20 == *(_QWORD *)(a1 + 1960) + 16 * *(unsigned int *)(a1 + 1976))
    {
      v12 = *v18;
      if ((*v18 & 0x2000000) != 0)
      {
        v13 = -2181038081;
        if ((v12 & 0x10000000000) == 0)
          v13 = 0xFFFFFF3F7DFFFFFFLL;
        v14 = v13 & v12;
        v15 = (v12 >> 5) & 0x80000000;
        v16 = (v12 & 0x838000000) == 0;
        v17 = 0x80000000;
        if (v16)
          v17 = v15;
        *v18 = v14 | v17;
      }
    }
  }
  return result;
}

uint64_t sub_22F415E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  void *v6[2];
  _QWORD v7[17];

  v7[16] = *MEMORY[0x24BDAC8D0];
  v6[0] = v7;
  v6[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v6, a2);
  sub_22E3CF554((uint64_t)v6, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (v6[0] != v7)
    free(v6[0]);
  return NodeOrInsertPos;
}

llvm *sub_22F415ECC(_QWORD *a1)
{
  llvm *v2;
  llvm *v3;
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  llvm *result;

  a1[28] = sub_22F1775D4((uint64_t)a1, "__LINE__");
  a1[29] = sub_22F1775D4((uint64_t)a1, "__FILE__");
  a1[30] = sub_22F1775D4((uint64_t)a1, "__DATE__");
  a1[31] = sub_22F1775D4((uint64_t)a1, "__TIME__");
  a1[36] = sub_22F1775D4((uint64_t)a1, "__COUNTER__");
  a1[37] = sub_22F1775D4((uint64_t)a1, "_Pragma");
  a1[62] = sub_22F1775D4((uint64_t)a1, "__FLT_EVAL_METHOD__");
  if ((*(_BYTE *)(a1[7] + 1) & 1) != 0)
    v2 = sub_22F1775D4((uint64_t)a1, "__has_cpp_attribute");
  else
    v2 = 0;
  a1[52] = v2;
  a1[33] = sub_22F1775D4((uint64_t)a1, "__BASE_FILE__");
  a1[32] = sub_22F1775D4((uint64_t)a1, "__INCLUDE_LEVEL__");
  a1[35] = sub_22F1775D4((uint64_t)a1, "__TIMESTAMP__");
  if ((*(_BYTE *)a1[7] & 0x20) != 0)
  {
    a1[39] = sub_22F1775D4((uint64_t)a1, "__identifier");
    v3 = sub_22F1775D4((uint64_t)a1, "__pragma");
  }
  else
  {
    v3 = 0;
    a1[39] = 0;
  }
  a1[38] = v3;
  a1[34] = sub_22F1775D4((uint64_t)a1, "__FILE_NAME__");
  a1[42] = sub_22F1775D4((uint64_t)a1, "__has_feature");
  a1[43] = sub_22F1775D4((uint64_t)a1, "__has_extension");
  a1[44] = sub_22F1775D4((uint64_t)a1, "__has_builtin");
  a1[45] = sub_22F1775D4((uint64_t)a1, "__has_attribute");
  if ((*(_BYTE *)(a1[7] + 1) & 1) != 0)
    v4 = 0;
  else
    v4 = sub_22F1775D4((uint64_t)a1, "__has_c_attribute");
  a1[53] = v4;
  a1[54] = sub_22F1775D4((uint64_t)a1, "__has_declspec_attribute");
  a1[46] = sub_22F1775D4((uint64_t)a1, "__has_include");
  a1[47] = sub_22F1775D4((uint64_t)a1, "__has_include_next");
  a1[48] = sub_22F1775D4((uint64_t)a1, "__has_warning");
  a1[49] = sub_22F1775D4((uint64_t)a1, "__is_identifier");
  a1[55] = sub_22F1775D4((uint64_t)a1, "__is_target_arch");
  a1[56] = sub_22F1775D4((uint64_t)a1, "__is_target_vendor");
  a1[57] = sub_22F1775D4((uint64_t)a1, "__is_target_os");
  a1[58] = sub_22F1775D4((uint64_t)a1, "__is_target_environment");
  a1[59] = sub_22F1775D4((uint64_t)a1, "__has_target_variant");
  a1[60] = sub_22F1775D4((uint64_t)a1, "__is_target_variant_os");
  a1[61] = sub_22F1775D4((uint64_t)a1, "__is_target_variant_environment");
  a1[50] = sub_22F1775D4((uint64_t)a1, "__building_module");
  v5 = a1[7];
  if (*(char *)(v5 + 519) < 0)
    v6 = *(_QWORD *)(v5 + 504);
  else
    v6 = *(unsigned __int8 *)(v5 + 519);
  if (v6)
    result = sub_22F1775D4((uint64_t)a1, "__MODULE__");
  else
    result = 0;
  a1[51] = result;
  return result;
}

uint64_t sub_22F4161DC(unint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;

  v6 = *(_QWORD *)(a1 + 1096);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, a1, *a2, 0) | 0x100;
  else
    v7 = 0;
  return sub_22F17ADB4(a2, a3, a1, 0, 0, 0, v7);
}

uint64_t sub_22F416250(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v10[3];

  v6 = a1[137];
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1, *a2, 1);
    v8 = 256;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  sub_22F16BBCC(a1, a2, v10);
  return sub_22F17ADB4(a2, a3, (unint64_t)a1, v10[0], v10[1], v10[2], v8 | v7);
}

unsigned int *sub_22F4162EC(unsigned int *result, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 *v12;
  unint64_t v13;
  __int128 v14;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 24 * v8 == a2)
    return (unsigned int *)sub_22F25DE94((uint64_t)result, __src, a4);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v7) >> 3);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a4 - __src) >> 3);
  if (v10 + v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v11 = (char *)(v7 + 24 * v9);
  v12 = (__int128 *)(v7 + 24 * v8);
  v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v11) >> 3);
  if (v13 >= v10)
  {
    result = (unsigned int *)sub_22F1635B8((uint64_t)v6, (__int128 *)((char *)v12 - 8 * ((a4 - (_BYTE *)v5) >> 3)), v12);
    if ((char *)v12 - 8 * ((a4 - (_BYTE *)v5) >> 3) != v11)
      result = (unsigned int *)memmove(&v11[8 * ((a4 - (_BYTE *)v5) >> 3)], v11, (char *)v12 - 8 * ((a4 - (_BYTE *)v5) >> 3) - v11);
    if (v5 != (_QWORD *)a4)
      return (unsigned int *)memmove(v11, v5, a4 - (_BYTE *)v5);
  }
  else
  {
    v6[2] = v8 + v10;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 24 * (v8 + v10) - 8 * (((char *)v12 - v11) >> 3)), v11, (char *)v12 - v11);
      do
      {
        v14 = *(_OWORD *)v5;
        *((_QWORD *)v11 + 2) = v5[2];
        *(_OWORD *)v11 = v14;
        v11 += 24;
        v5 += 3;
        --v13;
      }
      while (v13);
    }
    if (v5 != (_QWORD *)a4)
      return (unsigned int *)memcpy(v12, v5, a4 - (_BYTE *)v5);
  }
  return result;
}

uint64_t sub_22F4164B4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

uint64_t sub_22F4164EC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
}

uint64_t sub_22F416528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  sub_22E3CF554(a3, *(_QWORD *)(a2 + 24));
  return sub_22E3CF554(a3, v4);
}

uint64_t sub_22F416560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 8);
  sub_22E3CF554(a5, *(_QWORD *)(a2 + 24));
  sub_22E3CF554(a5, v6);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F4165B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  sub_22E3CF554(a3, *(_QWORD *)(a2 + 24));
  sub_22E3CF554(a3, v4);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F416608(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  result = *(_QWORD *)(a1 + 1088);
  if (result)
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)result + 88))(result, HIDWORD(a2), a2);
  if ((*(_WORD *)(a1 + 536) & 0x100) != 0)
  {
    ++*(_DWORD *)(a1 + 2188);
    (*(void (**)(_QWORD, uint64_t, unint64_t, _BYTE *))(**(_QWORD **)(a1 + 688) + 16))(*(_QWORD *)(a1 + 688), a1, a2, v6);
    result = *(_QWORD *)(a1 + 1040);
    if (result)
    {
      result = sub_22F418800(result);
      if ((result & 1) != 0)
        return sub_22F163BBC(a1);
    }
    v5 = *(_QWORD *)(a1 + 1016);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 24))
        return sub_22F163BBC(a1);
    }
  }
  return result;
}

void sub_22F4166A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  _QWORD v7[9];

  v7[8] = *MEMORY[0x24BDAC8D0];
  v5 = v7;
  v6 = xmmword_22F44E300;
  sub_22F146378(*(_QWORD *)(a1 + 1008), &v5);
  v4 = *(_QWORD *)(a1 + 1088);
  if (v4)
    (*(void (**)(uint64_t, _QWORD, void *, _QWORD))(*(_QWORD *)v4 + 104))(v4, *a2, v5, v6);
  if (v5 != v7)
    free(v5);
}

void sub_22F416758(_QWORD *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  __n128 *v6;
  void *v7;
  __int128 v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F13B0E4(a1, a2);
  v7 = v9;
  v8 = xmmword_22F44E330;
  sub_22E61131C((uint64_t)&v7, a3, &a3[a4]);
  if ((sub_22F1847EC((uint64_t)&v6[2], (unint64_t)&v7) & 0x100000000) != 0)
    sub_22F417488((uint64_t)&v6[11].n128_i64[1], (unint64_t)&v7);
  if (v7 != v9)
    free(v7);
}

llvm *sub_22F416818(unint64_t a1, uint64_t a2)
{
  llvm *result;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  uint64_t *v7;
  llvm *v8;

  result = (llvm *)sub_22F1838DC(a1, a2);
  v8 = result;
  if (result)
  {
    v4 = sub_22E6D7128(a1, result);
    v5 = (uint64_t)v4;
    if (v4)
      *((_WORD *)v4 + 18) |= 0x100u;
    v6 = (void **)sub_22F258DCC(a1 + 2152, (uint64_t *)&v8);
    v7 = (uint64_t *)v6[2];
    if (v7 >= v6[3])
    {
      result = (llvm *)sub_22E566A8C(v6 + 1, v5);
    }
    else
    {
      *v7 = v5;
      result = (llvm *)(v7 + 1);
    }
    v6[2] = result;
  }
  return result;
}

uint64_t sub_22F4168A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = operator new();
  *(_BYTE *)(v2 + 31) = 4;
  strcpy((char *)(v2 + 8), "once");
  *(_QWORD *)v2 = off_24FAC83A8;
  sub_22F182804(*(_QWORD *)(a1 + 688), v2);
  v3 = operator new();
  *(_BYTE *)(v3 + 31) = 4;
  strcpy((char *)(v3 + 8), "mark");
  *(_QWORD *)v3 = off_24FAC83D8;
  sub_22F182804(*(_QWORD *)(a1 + 688), v3);
  v4 = operator new();
  *(_BYTE *)(v4 + 31) = 10;
  *(_QWORD *)v4 = off_24FAC8408;
  strcpy((char *)(v4 + 8), "push_macro");
  sub_22F182804(*(_QWORD *)(a1 + 688), v4);
  v5 = operator new();
  *(_BYTE *)(v5 + 31) = 9;
  *(_QWORD *)v5 = off_24FAC8438;
  strcpy((char *)(v5 + 8), "pop_macro");
  sub_22F182804(*(_QWORD *)(a1 + 688), v5);
  v6 = operator new();
  *(_BYTE *)(v6 + 31) = 7;
  strcpy((char *)(v6 + 8), "message");
  *(_QWORD *)v6 = off_24FAC8468;
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  sub_22F182804(*(_QWORD *)(a1 + 688), v6);
  v7 = operator new();
  *(_BYTE *)(v7 + 31) = 6;
  strcpy((char *)(v7 + 8), "poison");
  *(_QWORD *)v7 = off_24FAC8498;
  sub_22F184264(a1, "GCC", 3uLL, v7);
  v8 = operator new();
  *(_BYTE *)(v8 + 31) = 13;
  *(_QWORD *)v8 = off_24FAC84C8;
  strcpy((char *)(v8 + 8), "system_header");
  sub_22F184264(a1, "GCC", 3uLL, v8);
  v9 = operator new();
  *(_BYTE *)(v9 + 31) = 10;
  *(_QWORD *)v9 = off_24FAC84F8;
  strcpy((char *)(v9 + 8), "dependency");
  sub_22F184264(a1, "GCC", 3uLL, v9);
  v10 = operator new();
  *(_BYTE *)(v10 + 31) = 10;
  *(_QWORD *)v10 = off_24FAC8528;
  strcpy((char *)(v10 + 8), "diagnostic");
  *(_QWORD *)(v10 + 32) = "GCC";
  sub_22F184264(a1, "GCC", 3uLL, v10);
  v11 = operator new();
  *(_BYTE *)(v11 + 31) = 7;
  strcpy((char *)(v11 + 8), "warning");
  *(_QWORD *)v11 = off_24FAC8468;
  *(_DWORD *)(v11 + 32) = 1;
  *(_QWORD *)(v11 + 40) = "GCC";
  *(_QWORD *)(v11 + 48) = 3;
  sub_22F184264(a1, "GCC", 3uLL, v11);
  v12 = operator new();
  *(_BYTE *)(v12 + 31) = 5;
  strcpy((char *)(v12 + 8), "error");
  *(_QWORD *)v12 = off_24FAC8468;
  *(_DWORD *)(v12 + 32) = 2;
  *(_QWORD *)(v12 + 40) = "GCC";
  *(_QWORD *)(v12 + 48) = 3;
  sub_22F184264(a1, "GCC", 3uLL, v12);
  v13 = operator new();
  *(_BYTE *)(v13 + 31) = 6;
  strcpy((char *)(v13 + 8), "poison");
  *(_QWORD *)v13 = off_24FAC8498;
  sub_22F184264(a1, "clang", 5uLL, v13);
  v14 = operator new();
  *(_BYTE *)(v14 + 31) = 13;
  *(_QWORD *)v14 = off_24FAC84C8;
  strcpy((char *)(v14 + 8), "system_header");
  sub_22F184264(a1, "clang", 5uLL, v14);
  v15 = operator new();
  *(_BYTE *)(v15 + 31) = 15;
  *(_QWORD *)v15 = off_24FAC8558;
  strcpy((char *)(v15 + 8), "include_instead");
  sub_22F184264(a1, "clang", 5uLL, v15);
  v16 = operator new();
  *(_BYTE *)(v16 + 31) = 7;
  strcpy((char *)(v16 + 8), "__debug");
  *(_QWORD *)v16 = off_24FAC8588;
  sub_22F184264(a1, "clang", 5uLL, v16);
  v17 = operator new();
  *(_BYTE *)(v17 + 31) = 10;
  *(_QWORD *)v17 = off_24FAC84F8;
  strcpy((char *)(v17 + 8), "dependency");
  sub_22F184264(a1, "clang", 5uLL, v17);
  v18 = operator new();
  *(_BYTE *)(v18 + 31) = 10;
  *(_QWORD *)v18 = off_24FAC8528;
  strcpy((char *)(v18 + 8), "diagnostic");
  *(_QWORD *)(v18 + 32) = "clang";
  sub_22F184264(a1, "clang", 5uLL, v18);
  v19 = operator new();
  *(_BYTE *)(v19 + 31) = 19;
  strcpy((char *)(v19 + 8), "arc_cf_code_audited");
  *(_QWORD *)v19 = off_24FAC85B8;
  sub_22F184264(a1, "clang", 5uLL, v19);
  v20 = operator new();
  *(_BYTE *)(v20 + 31) = 14;
  *(_QWORD *)v20 = off_24FAC85E8;
  strcpy((char *)(v20 + 8), "assume_nonnull");
  sub_22F184264(a1, "clang", 5uLL, v20);
  v21 = operator new();
  *(_BYTE *)(v21 + 31) = 10;
  *(_QWORD *)v21 = off_24FAC8618;
  strcpy((char *)(v21 + 8), "deprecated");
  sub_22F184264(a1, "clang", 5uLL, v21);
  v22 = operator new();
  *(_BYTE *)(v22 + 31) = 18;
  strcpy((char *)(v22 + 8), "restrict_expansion");
  *(_QWORD *)v22 = off_24FAC8648;
  sub_22F184264(a1, "clang", 5uLL, v22);
  v23 = operator new();
  *(_BYTE *)(v23 + 31) = 5;
  strcpy((char *)(v23 + 8), "final");
  *(_QWORD *)v23 = off_24FAC8678;
  sub_22F184264(a1, "clang", 5uLL, v23);
  v24 = operator new();
  *(_BYTE *)(v24 + 31) = 6;
  strcpy((char *)(v24 + 8), "module");
  *(_QWORD *)v24 = off_24FAC8888;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = 0;
  *(_QWORD *)(v24 + 48) = 0x1000000000;
  sub_22F184264(a1, "clang", 5uLL, v24);
  v25 = operator new();
  *(_BYTE *)(v25 + 31) = 6;
  strcpy((char *)(v25 + 8), "import");
  *(_QWORD *)v25 = off_24FAC86A8;
  sub_22F182804(v24, v25);
  v26 = operator new();
  *(_BYTE *)(v26 + 31) = 5;
  strcpy((char *)(v26 + 8), "begin");
  *(_QWORD *)v26 = off_24FAC86D8;
  sub_22F182804(v24, v26);
  v27 = operator new();
  *(_BYTE *)(v27 + 31) = 3;
  *(_DWORD *)(v27 + 8) = 6581861;
  *(_QWORD *)v27 = off_24FAC8708;
  sub_22F182804(v24, v27);
  v28 = operator new();
  *(_BYTE *)(v28 + 31) = 5;
  strcpy((char *)(v28 + 8), "build");
  *(_QWORD *)v28 = off_24FAC8738;
  sub_22F182804(v24, v28);
  v29 = operator new();
  *(_BYTE *)(v29 + 31) = 4;
  strcpy((char *)(v29 + 8), "load");
  *(_QWORD *)v29 = off_24FAC8768;
  sub_22F182804(v24, v29);
  v30 = operator new();
  *(_BYTE *)(v30 + 31) = 6;
  strcpy((char *)(v30 + 8), "region");
  *(_QWORD *)v30 = off_24FAC8798;
  sub_22F182804(*(_QWORD *)(a1 + 688), v30);
  v31 = operator new();
  *(_BYTE *)(v31 + 31) = 9;
  *(_QWORD *)v31 = off_24FAC8798;
  strcpy((char *)(v31 + 8), "endregion");
  sub_22F182804(*(_QWORD *)(a1 + 688), v31);
  if ((**(_BYTE **)(a1 + 56) & 0x20) != 0)
  {
    v33 = operator new();
    *(_BYTE *)(v33 + 31) = 7;
    strcpy((char *)(v33 + 8), "warning");
    *(_QWORD *)v33 = off_24FAC87C8;
    sub_22F182804(*(_QWORD *)(a1 + 688), v33);
    v34 = operator new();
    v35 = (char *)operator new(0x19uLL);
    *(_OWORD *)(v34 + 16) = xmmword_22F44E710;
    strcpy(v35, "execution_character_set");
    *(_QWORD *)v34 = off_24FAC87F8;
    *(_QWORD *)(v34 + 8) = v35;
    sub_22F182804(*(_QWORD *)(a1 + 688), v34);
    v36 = operator new();
    *(_BYTE *)(v36 + 31) = 13;
    *(_QWORD *)v36 = off_24FAC8828;
    strcpy((char *)(v36 + 8), "include_alias");
    sub_22F182804(*(_QWORD *)(a1 + 688), v36);
    v37 = operator new();
    *(_BYTE *)(v37 + 31) = 7;
    strcpy((char *)(v37 + 8), "hdrstop");
    *(_QWORD *)v37 = off_24FAC8858;
    sub_22F182804(*(_QWORD *)(a1 + 688), v37);
    v38 = operator new();
    *(_BYTE *)(v38 + 31) = 13;
    *(_QWORD *)v38 = off_24FAC84C8;
    strcpy((char *)(v38 + 8), "system_header");
    sub_22F182804(*(_QWORD *)(a1 + 688), v38);
  }
  result = sub_22F306774();
  if (result)
  {
    v39 = (_QWORD *)result;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(v39[1] + 32))(&v41);
      v40 = v41;
      v41 = 0;
      sub_22F182804(*(_QWORD *)(a1 + 688), v40);
      result = v41;
      v41 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v39 = (_QWORD *)*v39;
    }
    while (v39);
  }
  return result;
}

uint64_t sub_22F417488(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t result;

  v3 = sub_22F18491C(a1, a2);
  v4 = *(_DWORD *)(a1 + 8);
  result = *(_QWORD *)a1 + 56 * v4;
  *(_QWORD *)result = result + 24;
  *(_OWORD *)(result + 8) = xmmword_22F44E330;
  if (*(_QWORD *)(v3 + 8))
  {
    result = sub_22E3B3B4C(result, v3);
    v4 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v4 + 1;
  return result;
}

uint64_t sub_22F4174E8(uint64_t a1, char **a2, uint64_t a3)
{
  char **v5;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (char **)sub_22E78DBBC(a1, &v11, a2);
  if (*v5)
    return 0;
  v7 = v5;
  v8 = (char *)operator new(0x58uLL);
  *((_QWORD *)v8 + 4) = v8 + 56;
  *(_OWORD *)(v8 + 40) = xmmword_22F44E330;
  if (*(_QWORD *)(a3 + 8))
    sub_22E3B3B4C((uint64_t)(v8 + 32), a3);
  v9 = v11;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = v9;
  *v7 = v8;
  v10 = **(_QWORD **)a1;
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    v8 = *v7;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), (uint64_t *)v8);
  ++*(_QWORD *)(a1 + 16);
  return 1;
}

uint64_t sub_22F4175A8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 96 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 96 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_22F41764C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F4175A8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = sub_22F4176F0(a2, a3, v12);
    *v9 = *a3;
    result = sub_22F417860((uint64_t)(v9 + 1), a4);
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 96 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F4176F0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1889B4(a1, v6);
  v8 = 0;
  sub_22F4175A8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F41779C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 96 * v6;
    do
    {
      *v7 = -4096;
      v7 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      sub_22F4175A8((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      sub_22F417860((uint64_t)(v9 + 1), (uint64_t)(a2 + 1));
      ++*(_DWORD *)(v5 + 8);
      result = sub_22F188A80((uint64_t)(a2 + 1));
    }
    a2 += 12;
  }
  return result;
}

uint64_t sub_22F417860(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    v2 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(result + 8) = v2;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
    v3 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 48) = v3;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(result + 72) = 1;
  }
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

uint64_t sub_22F4178DC(uint64_t a1, uint64_t a2, char a3, const void *a4, size_t a5, char a6, int a7, uint64_t a8, uint64_t a9)
{
  char v12;
  void *v13;

  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 4) = a9;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a7)
    v12 = 8;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 32) = a6 & 0xF9 | (2 * (a3 & 3)) | v12 | *(_BYTE *)(a1 + 32) & 0xF0;
  *(_QWORD *)(a1 + 40) = a8;
  v13 = (void *)sub_22E3CD3D4(a2 + 16, (a5 + 1), 0);
  memcpy(v13, a4, a5);
  *((_BYTE *)v13 + a5) = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = a5;
  return a1;
}

double sub_22F417974(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_24FAC88D0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  return result;
}

uint64_t sub_22F4179CC(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 136);
  result = *(_QWORD *)(v3 + 8 * a2);
  if (!result)
  {
    v5 = a2;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208));
    *(_QWORD *)(v3 + 8 * v5) = result;
    if (!result)
    {
      result = sub_22E3CD3D4(a1 + 16, 12, 3);
      *(_DWORD *)result = 0;
      *(_QWORD *)(result + 4) = 0;
      *(_QWORD *)(v3 + 8 * v5) = result;
    }
  }
  return result;
}

char *sub_22F417A38(char *result, _DWORD *a2)
{
  _QWORD *v3;
  void **v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  char *v11;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;

  v3 = result;
  v20 = a2;
  v4 = (void **)(result + 112);
  if (*a2 == 2)
  {
    v5 = (_QWORD *)*((_QWORD *)result + 15);
    if ((unint64_t)v5 >= v3[16])
    {
      result = (char *)sub_22E566A8C(v4, (uint64_t)a2);
    }
    else
    {
      *v5 = a2;
      result = (char *)(v5 + 1);
    }
    v3[15] = result;
  }
  else
  {
    v7 = (char *)*((_QWORD *)result + 14);
    v6 = (char *)*((_QWORD *)result + 15);
    if (v7 == v6
      || (v8 = a2[1],
          result = (char *)sub_22F1E3C34(*((_QWORD **)result + 1), v8, *(_DWORD *)(*((_QWORD *)v6 - 1) + 4)),
          v7 = (char *)v3[15],
          (result & 1) == 0))
    {
      if ((unint64_t)v7 >= v3[16])
      {
        result = (char *)sub_22E566A8C(v4, (uint64_t)a2);
        v19 = result;
      }
      else
      {
        *(_QWORD *)v7 = a2;
        v19 = v7 + 8;
      }
      v3[15] = v19;
    }
    else
    {
      v9 = (char *)*v4;
      if (v7 != *v4)
      {
        v10 = 0;
        v11 = v7 - 8;
        while (sub_22F1E3C34((_QWORD *)v3[1], v8, *(_DWORD *)(*(_QWORD *)v11 + 4)))
        {
          if (v11 != v9)
          {
            v7 -= 8;
            v11 -= 8;
            if (v10++ <= 2)
              continue;
          }
          v13 = (char *)v3[14];
          v7 = (char *)v3[15];
          if (v7 != v13)
          {
            v14 = (_QWORD *)v3[1];
            v15 = (v7 - v13) >> 3;
            do
            {
              v16 = &v13[8 * (v15 >> 1)];
              v18 = *(_QWORD *)v16;
              v17 = v16 + 8;
              if (sub_22F1E3C34(v14, v8, *(_DWORD *)(v18 + 4)))
              {
                v15 >>= 1;
              }
              else
              {
                v13 = v17;
                v15 += ~(v15 >> 1);
              }
            }
            while (v15);
            v7 = v13;
          }
          return sub_22F18BED8((char **)v4, v7, (char *)&v20);
        }
      }
      return sub_22F18BED8((char **)v4, v7, (char *)&v20);
    }
  }
  return result;
}

unint64_t sub_22F417BB8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144) - v2;
  v4 = (v3 >> 3) + a2;
  if (v3 >> 3 >= v4)
  {
    if (v3 >> 3 > v4)
      *(_QWORD *)(a1 + 144) = v2 + 8 * v4;
  }
  else
  {
    sub_22F18C3FC((char **)(a1 + 136), a2);
  }
  return (unint64_t)v3 >> 3;
}

uint64_t sub_22F417C0C(uint64_t a1, int a2)
{
  if (a2 < 0)
    return sub_22F4179CC(a1, ~a2);
  if (a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (a2 - 1));
  return 0;
}

uint64_t sub_22F417C34(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_22F246C54((uint64_t *)(a1 + 184), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 184) + 16 * *(unsigned int *)(a1 + 200))
      return *(_QWORD *)(v6 + 8);
  }
  return result;
}

char *sub_22F417C94(char *result, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = *a4;
  v5 = a4[2];
  if ((unint64_t)*a4 > 7 || v5 != 0)
  {
    v8 = result;
    if (v5)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a4[1] + 8 * v5 - 8) + 16);
    }
    else
    {
      if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0 || (v11 = sub_22F14FEA4((uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8))) == 0)
      {
        v10 = 0;
        return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
      }
      v9 = v11 + 2;
    }
    v10 = *v9;
    return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
  }
  return result;
}

char *sub_22F417D1C(char *result, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = *a4;
  v5 = a4[2];
  if ((unint64_t)*a4 > 7 || v5 != 0)
  {
    v8 = result;
    if (v5)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a4[1] + 8 * v5 - 8) + 16);
    }
    else
    {
      if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0 || (v11 = sub_22F14FEA4((uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8))) == 0)
      {
        v10 = 0;
        return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
      }
      v9 = v11 + 2;
    }
    v10 = *v9;
    return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
  }
  return result;
}

char *sub_22F417DA4(char *result, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = *a4;
  v5 = a4[2];
  if ((unint64_t)*a4 > 7 || v5 != 0)
  {
    v8 = result;
    if (v5)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a4[1] + 8 * v5 - 8) + 16);
    }
    else
    {
      if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0 || (v11 = sub_22F14FEA4((uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8))) == 0)
      {
        v10 = 0;
        return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
      }
      v9 = v11 + 2;
    }
    v10 = *v9;
    return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
  }
  return result;
}

char *sub_22F417E2C(char *result, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = *a4;
  v5 = a4[2];
  if ((unint64_t)*a4 > 7 || v5 != 0)
  {
    v8 = result;
    if (v5)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a4[1] + 8 * v5 - 8) + 16);
    }
    else
    {
      if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0 || (v11 = sub_22F14FEA4((uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8))) == 0)
      {
        v10 = 0;
        return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
      }
      v9 = v11 + 2;
    }
    v10 = *v9;
    return sub_22F18C0E8(v8, (uint64_t)a3, v10, *a3 | ((unint64_t)*a3 << 32));
  }
  return result;
}

char *sub_22F417EB4(char *result, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = *a3;
  v4 = a3[2];
  if ((unint64_t)*a3 > 7 || v4 != 0)
  {
    v7 = result;
    if (v4)
    {
      v8 = (uint64_t *)(*(_QWORD *)(a3[1] + 8 * v4 - 8) + 16);
    }
    else
    {
      if ((v3 & 0xFFFFFFFFFFFFFFF8) == 0 || (v10 = sub_22F14FEA4((uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8))) == 0)
      {
        v9 = 0;
        return sub_22F18C0E8(v7, (uint64_t)a2, v9, *a2 | ((unint64_t)*a2 << 32));
      }
      v8 = v10 + 2;
    }
    v9 = *v8;
    return sub_22F18C0E8(v7, (uint64_t)a2, v9, *a2 | ((unint64_t)*a2 << 32));
  }
  return result;
}

char *sub_22F417F3C(uint64_t a1, int a2, int a3)
{
  int *v4;
  char *result;

  v4 = *(int **)(a1 + 168);
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 176))
  {
    result = sub_22F18C520((char **)(a1 + 160), a2, a3);
  }
  else
  {
    *v4 = a2;
    v4[1] = a3;
    result = (char *)(v4 + 2);
  }
  *(_QWORD *)(a1 + 168) = result;
  return result;
}

char *sub_22F417F7C(char *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;

  v7 = a3[2];
  if (v7)
  {
    v8 = (uint64_t *)(*(_QWORD *)(a3[1] + 8 * v7 - 8) + 16);
  }
  else
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0 || (v11 = sub_22F14FEA4((uint64_t *)(*a3 & 0xFFFFFFFFFFFFFFF8))) == 0)
    {
      v9 = 0;
      return sub_22F18C0E8(a1, a2, v9, a4);
    }
    v8 = v11 + 2;
  }
  v9 = *v8;
  return sub_22F18C0E8(a1, a2, v9, a4);
}

uint64_t *sub_22F417FF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  result = (uint64_t *)(*a3 & 0xFFFFFFFFFFFFFFF8);
  if (result)
  {
    v9 = sub_22F14FEA4(result);
    v10 = v9 ? v9[2] : 0;
    v11 = v10;
    v12 = 0;
    result = (uint64_t *)sub_22F246C54((uint64_t *)(a1 + 184), &v11, &v12);
    if ((_DWORD)result)
    {
      *v12 = -8192;
      *(int32x2_t *)(a1 + 192) = vadd_s32(*(int32x2_t *)(a1 + 192), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  v6 = a3[2];
  if (v6)
  {
    v7 = a3[1];
    v8 = 8 * v6;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 16);
      v12 = 0;
      result = (uint64_t *)sub_22F246C54((uint64_t *)(a1 + 184), &v11, &v12);
      if ((_DWORD)result)
      {
        *v12 = -8192;
        *(int32x2_t *)(a1 + 192) = vadd_s32(*(int32x2_t *)(a1 + 192), (int32x2_t)0x1FFFFFFFFLL);
      }
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22F4180F4(uint64_t a1)
{
  sub_22F418118(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F418118(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24FAC88D0;
  llvm::deallocate_buffer(*(llvm **)(a1 + 184), (void *)(16 * *(unsigned int *)(a1 + 200)));
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 112);
  if (v4)
  {
    *(_QWORD *)(a1 + 120) = v4;
    operator delete(v4);
  }
  sub_22E3B4EF4(a1 + 16);
  return nullsub_910(a1);
}

_QWORD *sub_22F418190(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22E669BD0((uint64_t *)(a1 + 2888), &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_22F4181CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  sub_22F4193FC(*(uint64_t **)(a1 + 680), a2, a3);
  sub_22F40F3BC(*(_QWORD *)(a1 + 104), a2);
  sub_22F41B5E0((llvm::StringMapImpl *)(a1 + 544), *(_QWORD *)(a1 + 56));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 192))(*(_QWORD *)(a1 + 64));
  *(_DWORD *)(a1 + 528) = result;
  return result;
}

uint64_t sub_22F418224(uint64_t a1, int a2)
{
  uint64_t v3;
  __int16 v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (v3)
    {
      v4 = *(_WORD *)(a1 + 536);
      if ((v4 & 0x80) == 0)
      {
        *(_WORD *)(a1 + 536) = v4 | 0x80;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  return **(_QWORD **)(a1 + 1584) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 1584) + 16);
}

uint64_t *sub_22F41827C(uint64_t a1, int a2, _QWORD *a3)
{
  char v3;
  uint64_t *result;

  v3 = a1;
  result = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && result)
    result = (uint64_t *)*result;
  if (result)
    return sub_22F4121A0(result, a2, a3);
  return result;
}

BOOL sub_22F4182AC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8;
  char *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[5];
  __int16 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;

  sub_22F423904(*(_QWORD *)(a1 + 88), a2, &v31);
  v8 = v35;
  if (v35)
  {
    v9 = v31;
    v10 = (unsigned __int8 *)v31;
    if (a3 >= 2)
    {
      v11 = 1;
      v10 = (unsigned __int8 *)v31;
      while (1)
      {
        while (1)
        {
          v12 = *v10++;
          if (*(v10 - 1))
            break;
          --v10;
LABEL_18:
          if (++v11 == a3)
            goto LABEL_21;
        }
        if (v12 == 13 || v12 == 10)
        {
          v14 = v10 - 1;
          v15 = *v10;
          if (v12 == v15)
            --v10;
          if (v15 != 10 && v15 != 13)
            v10 = v14;
          ++v10;
          goto LABEL_18;
        }
      }
    }
LABEL_21:
    v17 = (char *)&v10[a4 - 1];
    if (*(_DWORD *)(a1 + 896))
    {
      v18 = sub_22E6155EC(*(_QWORD **)(a1 + 88), *(_DWORD *)(*(_QWORD *)(a1 + 88) + 344));
      v9 = v31;
      if (v18 == a2)
      {
        v19 = *(int *)(a1 + 896);
        if (v17 - v31 < v19)
          v17 = &v31[v19];
      }
    }
    v20 = v33;
    if (v17 > &v9[v32])
      v17 = &v9[v32];
    *(_QWORD *)(a1 + 752) = a2;
    *(_DWORD *)(a1 + 760) = (_DWORD)v17 - (_DWORD)v9;
    v29 = 261;
    v28[1] = v20;
    v28[2] = v34;
    llvm::WritableMemoryBuffer::getNewUninitMemBuffer();
    v21 = *(_QWORD *)(v30 + 8);
    v22 = v17 - v31;
    if (v17 != v31)
      memmove(*(void **)(v30 + 8), v31, v17 - v31);
    *(_BYTE *)(v21 + v22) = 0;
    if (&v31[v32] != v17)
      memmove((void *)(v21 + v22 + 1), v17, &v31[v32] - v17);
    v23 = *(_QWORD *)(a1 + 88);
    v24 = v30;
    v30 = 0;
    v28[0] = v24;
    sub_22F42393C(v23, a2, v28);
    v25 = v28[0];
    v28[0] = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v30;
    v30 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  return v8 == 0;
}

uint64_t sub_22F418474(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v5;
  const void **v6;
  unint64_t v7;
  const void **v8;
  const void **v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v1 + 240) & 0xE0) != 0)
    return 0;
  v2 = *(unsigned __int8 *)(v1 + 495);
  if (!(*(char *)(v1 + 495) < 0 ? *(_QWORD *)(v1 + 480) : *(unsigned __int8 *)(v1 + 495)))
    return 0;
  v5 = *(uint64_t **)(a1 + 104);
  v6 = (const void **)(v1 + 472);
  v8 = *(const void ***)(v1 + 472);
  v7 = *(_QWORD *)(v1 + 480);
  if ((v2 & 0x80u) == 0)
    v9 = v6;
  else
    v9 = v8;
  if ((v2 & 0x80u) == 0)
    v10 = v2;
  else
    v10 = v7;
  return sub_22F138980(v5, v9, v10, 0, 1, 0);
}

void sub_22F4184D4(unint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 1000) == 2)
  {
    v1 = *(_QWORD *)(a1 + 1016);
    v2 = *(_BYTE **)(a1 + 952);
    v3 = *(unsigned int *)(a1 + 960);
    *(_DWORD *)(v1 + 72) = 0;
    sub_22F2633B0(v1 + 64, v2, &v2[8 * v3]);
    *(_DWORD *)(a1 + 960) = 0;
    *(_DWORD *)(a1 + 1000) = 0;
    if (*(_BYTE *)(a1 + 944))
      sub_22F164590(a1, *(unsigned int *)(a1 + 928), *(_DWORD *)(a1 + 932), *(unsigned __int8 *)(a1 + 936), *(unsigned __int8 *)(a1 + 937), *(_DWORD *)(a1 + 940));
  }
}

uint64_t sub_22F418550(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120));
}

uint64_t sub_22F418560(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  int v7;

  v4 = 0;
  do
  {
    while (1)
    {
      do
      {
        while (1)
        {
          sub_22F418628(a2);
          result = sub_22F18FB4C(a1, *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 24);
          v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 8);
          if (v6 != 62)
            break;
          if (!v4)
            return result;
        }
      }
      while (v6 > 0x18);
      if (((1 << v6) & 0xA80000) != 0)
      {
        v7 = 1;
        goto LABEL_11;
      }
      if (((1 << v6) & 0x1500000) == 0)
        break;
      if (!v4)
        return result;
      v7 = -1;
LABEL_11:
      v4 += v7;
    }
  }
  while (v6 != 1);
  return result;
}

unint64_t sub_22F418628(unint64_t result)
{
  unint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[3];

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    memset(v6, 0, sizeof(v6));
    result = sub_22E4EF088(result, (unint64_t)v6, 1);
    v4 = *(_QWORD *)v1 + 24 * *(unsigned int *)(v1 + 8);
    v5 = *(_OWORD *)result;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v4 = v5;
  }
  else
  {
    v3 = (_QWORD *)(*(_QWORD *)result + 24 * v2);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  ++*(_DWORD *)(v1 + 8);
  return result;
}

uint64_t sub_22F4186B4(uint64_t result, uint64_t a2)
{
  char *v2;
  char *v3;
  size_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;

  v2 = *(char **)(result + 704);
  v3 = *(char **)(result + 712);
  if (v2 != v3)
  {
    while (*(_QWORD *)v2 != a2)
    {
      v2 += 8;
      if (v2 == v3)
      {
        v2 = *(char **)(result + 712);
        break;
      }
    }
  }
  v4 = v3 - (v2 + 8);
  if (v4)
  {
    v5 = result;
    v7 = v2;
    v6 = v4;
    memmove(v2, v2 + 8, v4);
    result = v5;
    v4 = v6;
    v2 = v7;
  }
  *(_QWORD *)(result + 712) = &v2[v4];
  return result;
}

_QWORD *sub_22F418734(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (!result[346])
  {
    v1 = (uint64_t)result;
    v2 = operator new();
    sub_22F417974(v2, *(_QWORD *)(v1 + 88));
    *(_QWORD *)(v1 + 2768) = v3;
    v4 = (_QWORD *)v3;
    sub_22F2968D4(v1, (uint64_t *)&v4);
    result = v4;
    v4 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_22F4187B0(_QWORD *a1)
{
  if (a1)
  {
    sub_22F4187B0(*a1);
    sub_22F4187B0(a1[1]);
    sub_22F175D04((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

BOOL sub_22F418800(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32);
  return *(_WORD *)(*(_QWORD *)(a1 + 24) + 24 * (v1 - 1) + 16) == 2 && *(_DWORD *)(a1 + 36) != v1;
}

void sub_22F418838(std::string *__str@<X0>, int64_t a2@<X1>, char a3@<W2>, std::string::size_type *a4@<X8>)
{
  llvm::cas *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  if (__str[5].__r_.__value_.__s.__data_[16])
  {
    v12 = __str[2].__r_.__value_.__r.__words[2];
    *a4 = __str[2].__r_.__value_.__l.__size_;
    a4[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    sub_22F193A38(__str, a2);
    size = __str[2].__r_.__value_.__l.__size_;
    if (size)
    {
      v9 = __str[2].__r_.__value_.__r.__words[2];
      *a4 = size;
      a4[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else if ((a3 & 1) != 0)
    {
      llvm::cas::createInMemoryCAS(v7);
      sub_22E721CDC(&__str[2].__r_.__value_.__l.__size_, &v19);
      v15 = v19;
      v19 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 128))(v15);
      v16 = __str[2].__r_.__value_.__r.__words[2];
      *a4 = __str[2].__r_.__value_.__l.__size_;
      a4[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
    }
  }
}

void sub_22F418928(std::string *__str@<X0>, int64_t a2@<X1>, char a3@<W2>, std::string::pointer *a4@<X8>)
{
  llvm::cas *v7;
  std::string::pointer data;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type size;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t *v25;

  if (__str[5].__r_.__value_.__s.__data_[16])
  {
    size = __str[3].__r_.__value_.__l.__size_;
    *a4 = __str[3].__r_.__value_.__l.__data_;
    a4[1] = (std::string::pointer)size;
    if (size)
    {
      v13 = (unint64_t *)(size + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    sub_22F193A38(__str, a2);
    data = __str[3].__r_.__value_.__l.__data_;
    if (data)
    {
      v9 = __str[3].__r_.__value_.__l.__size_;
      *a4 = data;
      a4[1] = (std::string::pointer)v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else if ((a3 & 1) != 0)
    {
      v15 = __str[2].__r_.__value_.__l.__size_;
      if (v15)
      {
        v16 = (unint64_t *)__str[2].__r_.__value_.__r.__words[2];
        if (v16)
        {
          v17 = v16 + 1;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = v15;
      }
      else
      {
        llvm::cas::createInMemoryCAS(v7);
        v19 = (std::string::size_type)v25;
        if (v25)
        {
          v16 = (unint64_t *)operator new();
          *v16 = (unint64_t)&unk_24FA70100;
          v16[1] = 0;
          v16[2] = 0;
          v16[3] = (unint64_t)v25;
        }
        else
        {
          v16 = 0;
        }
        v25 = 0;
      }
      v20 = (std::__shared_weak_count *)__str[2].__r_.__value_.__r.__words[2];
      __str[2].__r_.__value_.__l.__size_ = v19;
      __str[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (!v15)
      {
        v16 = v25;
        if (v25)
          v16 = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*v25 + 128))(v25);
      }
      llvm::cas::createInMemoryActionCache((llvm::cas *)v16);
      *a4 = v24;
      if (v24)
      {
        v23 = (char *)operator new();
        *(_QWORD *)v23 = &off_24FAC8A80;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *((_QWORD *)v23 + 3) = v24;
      }
      else
      {
        v23 = 0;
      }
      a4[1] = v23;
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
    }
  }
}

char *sub_22F418AF0(char *result, uint64_t a2)
{
  char *v2;
  char v3;
  char *v4;
  char v5;
  char *v6;
  char *v7;

  v2 = result;
  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(char **)a2;
  *(_QWORD *)a2 = 0;
  if ((v3 & 1) != 0)
  {
    v6 = v4;
    sub_22E6C5940(&v6, &v7);
    result = v6;
    if (v6)
      result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    v5 = 0;
    *v2 = 0;
  }
  else
  {
    *(_QWORD *)result = v4;
    v5 = 1;
  }
  v2[8] = v5;
  return result;
}

void sub_22F418B68(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F418B8C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22F418BA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  llvm *v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  std::error_code v11;

  v10 = *MEMORY[0x24BDAC8D0];
  result = llvm::cas::ObjectStore::getProxy();
  if ((v9 & 1) != 0)
  {
    v3 = v7;
    *(_QWORD *)&v7 = 0;
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = v3;
  }
  else
  {
    result = sub_22F418C9C(&v7);
    if ((result & 1) != 0)
    {
      *(_OWORD *)a1 = v7;
      *(_QWORD *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 24) &= ~1u;
    }
    else
    {
      v4 = (llvm *)llvm::inconvertibleErrorCode((llvm *)result);
      v11.__cat_ = (const std::error_category *)"not a IncludeTreeRoot node kind";
      result = llvm::createStringError(v4, v11, v5);
      *(_BYTE *)(a1 + 24) |= 1u;
      *(_QWORD *)a1 = v6;
    }
  }
  if ((v9 & 1) != 0)
  {
    result = v7;
    *(_QWORD *)&v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL sub_22F418C9C(_QWORD *a1)
{
  _DWORD *v2;
  _BOOL8 result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 88))(*a1, a1[2], 0);
  result = 0;
  if (v4 >= 4)
  {
    if (*v2 == 1953460050
      && ((v5 = *a1, v6 = a1[2], (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6) == 2)
       || (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6) == 3))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 88))(v5, v6, 0);
      return v7 < 5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F418D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  char v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3, 1);
  result = llvm::cas::ObjectStore::getProxy();
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    *(_OWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) &= ~1u;
  }
  return result;
}

_QWORD *sub_22F418E18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_22F418D60((uint64_t)v21, *a1, a1[2]);
  if ((v22 & 1) != 0)
  {
    v14 = v21[0];
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v14;
  }
  else
  {
    v5 = operator new();
    v6 = *a1;
    *(_QWORD *)v5 = &off_24FAC8AB8;
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = v5 + 56;
    *(_QWORD *)(v5 + 48) = 0x400000000;
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 88) = v5 + 104;
    *(_QWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 112) = 1;
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)(v5 + 128) = 0;
    *(_QWORD *)(v5 + 136) = 0x2800000000;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0;
    *(_QWORD *)(v5 + 144) = v5 + 24;
    *(_DWORD *)(v5 + 168) = 0;
    *(_DWORD *)(v5 + 172) = 24;
    *(_QWORD *)(v5 + 176) = v5 + 24;
    v17 = v5;
    *(_DWORD *)(v5 + 8) = 0;
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v15 = &v17;
    v20[0] = sub_22F194F54;
    v20[1] = &v15;
    v18[0] = v21;
    v18[1] = v20;
    v18[2] = &v19;
    v19 = 0;
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), _QWORD *))(*(_QWORD *)v21[0] + 64))(&v16, v21[0], v21[2], sub_22F194E74, v18);
    v9 = v16;
    v10 = *(_BYTE *)(a2 + 8);
    if (v16)
    {
      *(_BYTE *)(a2 + 8) = v10 | 1;
      *(_QWORD *)a2 = v9;
      result = (_QWORD *)v17;
      if (v17)
      {
        v11 = (unsigned int *)(v17 + 8);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 8) = v10 & 0xFE;
      *(_QWORD *)a2 = v17;
    }
    if ((v22 & 1) != 0)
    {
      result = (_QWORD *)v21[0];
      v21[0] = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_22F418FF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  std::error_code v5;
  std::error_code v6;

  *(_QWORD *)&v6.__val_ = std::generic_category();
  *(_QWORD *)&v5.__val_ = a1;
  v5.__cat_ = (const std::error_category *)45;
  result = sub_22F419158((uint64_t *)a2, v5, v6);
  *(_BYTE *)(a2 + 8) |= 1u;
  return result;
}

uint64_t sub_22F419038()
{
  return 0;
}

llvm::raw_ostream *sub_22F419040(int a1, llvm::raw_ostream *a2, uint64_t a3, int a4)
{
  int v5;

  if (a4)
  {
    v5 = a4;
    do
    {
      sub_22E47DAC0(a2, "  ");
      --v5;
    }
    while (v5);
  }
  return sub_22E47DAC0(a2, "FileSystem\n");
}

uint64_t sub_22F419094(uint64_t *a1, llvm::Twine *a2, _QWORD **a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v13[8];

  v5 = *a3;
  *a3 = 0;
  v10 = &v11;
  v11 = 0;
  v12 = v5;
  sub_22F194858((uint64_t)v13, &v12, &v10);
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v6 = operator new();
  v7 = v11;
  v11 = 0;
  v9 = v7;
  *a1 = sub_22F1949D0(v6, a2, &v9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F419158(uint64_t *a1, std::error_code this, std::error_code a3)
{
  llvm::Twine *v3;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(llvm::Twine **)&this.__val_;
  *(_QWORD *)&this.__val_ = *(_QWORD *)&a3.__val_;
  llvm::errorCodeToError((llvm *)this.__cat_, this);
  v7 = v6;
  sub_22F419094(a1, v3, &v7);
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return 0;
}

uint64_t sub_22F4191D0(uint64_t a1)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  char v5;

  result = llvm::cas::ObjectStore::getProxy();
  if ((v5 & 1) != 0)
  {
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) &= ~1u;
  }
  return result;
}

uint64_t *sub_22F41926C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = sub_22E3CD3D4(*(_QWORD *)(a1 + 24), a3 + 25, 3);
  v11 = (_QWORD *)v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1));
        !*i || *i == -8;
  return i;
}

char *sub_22F419360(int a1)
{
  return off_24FAC8B78[a1];
}

void sub_22F419370(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *v3[3];
  _QWORD v4[9];

  v4[8] = *MEMORY[0x24BDAC8D0];
  sub_22F1ACE98(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 30) & 7, v3);
  std::string::__init(a2, (const std::string::value_type *)v3[0], (std::string::size_type)v3[1]);
  if (v3[0] != v4)
    free(v3[0]);
}

uint64_t sub_22F4193FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 264))(a2);
  *a1 = result;
  a1[1] = v6;
  if (a3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 264))(a3);
    a1[2] = result;
    a1[3] = v7;
  }
  return result;
}

BOOL sub_22F41944C(uint64_t *a1, unsigned int a2)
{
  char **v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (a2 > 0x7E7)
  {
    v3 = a1[1];
    if (v3 + 2024 <= (unint64_t)a2)
    {
      v4 = a2 - v3 - 2024;
      v5 = a1[2];
    }
    else
    {
      v4 = a2 - 2024;
      v5 = *a1;
    }
    v2 = (char **)(v5 + 48 * v4);
  }
  else
  {
    v2 = &(&off_24FAC8C40)[6 * a2];
  }
  return strchr(v2[2], 102) != 0;
}

BOOL sub_22F4194C0(uint64_t *a1, unsigned int a2)
{
  char **v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (a2 > 0x7E7)
  {
    v3 = a1[1];
    if (v3 + 2024 <= (unint64_t)a2)
    {
      v4 = a2 - v3 - 2024;
      v5 = a1[2];
    }
    else
    {
      v4 = a2 - 2024;
      v5 = *a1;
    }
    v2 = (char **)(v5 + 48 * v4);
  }
  else
  {
    v2 = &(&off_24FAC8C40)[6 * a2];
  }
  return strchr(v2[2], 122) != 0;
}

char *sub_22F419534(uint64_t *a1, unsigned int a2)
{
  char **v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char *result;
  char *__endptr;

  if (a2 > 0x7E7)
  {
    v3 = a1[1];
    if (v3 + 2024 <= (unint64_t)a2)
    {
      v4 = a2 - v3 - 2024;
      v5 = a1[2];
    }
    else
    {
      v4 = a2 - 2024;
      v5 = *a1;
    }
    v2 = (char **)(v5 + 48 * v4);
  }
  else
  {
    v2 = &(&off_24FAC8C40)[6 * a2];
  }
  result = strchr(v2[2], 86);
  if (result)
  {
    __endptr = 0;
    return (char *)strtol(result + 2, &__endptr, 10);
  }
  return result;
}

BOOL sub_22F4195C0(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  char **v4;
  char **v5;
  uint64_t v7;
  uint64_t v8;
  char **v9;

  v2 = a2;
  v3 = a2 - 2024;
  if (a2 >= 0x7E8)
  {
    v7 = a1[1];
    if (v7 + 2024 > (unint64_t)a2)
    {
      v8 = *a1;
      if (strchr(*(char **)(*a1 + 48 * v3 + 8), 38))
        return 1;
      v9 = (char **)(v8 + 48 * v3);
      return strchr(v9[1], 65) != 0;
    }
    v2 = a2 - v7 - 2024;
    v4 = (char **)a1[2];
    v5 = &v4[6 * v2];
  }
  else
  {
    v4 = &off_24FAC8C40;
    v5 = &(&off_24FAC8C40)[6 * a2];
  }
  if (strchr(v5[1], 38))
    return 1;
  v9 = &v4[6 * v2];
  return strchr(v9[1], 65) != 0;
}

BOOL sub_22F419678(uint64_t *a1, unsigned int a2)
{
  char **v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (a2 > 0x7E7)
  {
    v3 = a1[1];
    if (v3 + 2024 <= (unint64_t)a2)
    {
      v4 = a2 - v3 - 2024;
      v5 = a1[2];
    }
    else
    {
      v4 = a2 - 2024;
      v5 = *a1;
    }
    v2 = (char **)(v5 + 48 * v4);
  }
  else
  {
    v2 = &(&off_24FAC8C40)[6 * a2];
  }
  return strchr(v2[2], 116) != 0;
}

__n128 sub_22F4196EC(uint64_t a1)
{
  __n128 result;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_OWORD *)(a1 + 4) &= __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
  *(_OWORD *)(a1 + 20) &= __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
  *(_OWORD *)(a1 + 36) &= __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
  result = (__n128)(*(_OWORD *)(a1 + 52) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL));
  *(__n128 *)(a1 + 52) = result;
  return result;
}

uint64_t sub_22F419728(const void *a1, size_t a2)
{
  uint64_t v4;
  const void *v5;

  v4 = 0;
  while (1)
  {
    v5 = *(const void **)&dword_24FAE07C0[v4 + 2];
    if (v5)
      break;
    if (!a2)
      return dword_24FAE07C0[v4];
LABEL_8:
    v4 += 6;
    if (v4 == 318)
      return 1;
  }
  if (a2 != strlen(*(const char **)&dword_24FAE07C0[v4 + 2]) || a2 && memcmp(a1, v5, a2))
    goto LABEL_8;
  return dword_24FAE07C0[v4];
}

BOOL sub_22F4197B8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4;
  unsigned int v5;

  v4 = sub_22F1CA5D0(a1);
  if (a3)
    v5 = 7;
  else
    v5 = 5;
  return v5 < v4;
}

uint64_t sub_22F4197F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  result = sub_22E3B38EC((_DWORD *)a2, (_DWORD *)a1);
  if ((_DWORD)result)
  {
    v11 = *a3;
LABEL_3:
    *(_OWORD *)a5 = v11;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  result = sub_22E3B38EC((_DWORD *)(a1 + 16), (_DWORD *)a2);
  if ((_DWORD)result)
  {
    *(_OWORD *)a5 = *a4;
    *(_DWORD *)(a5 + 16) = *((_DWORD *)a4 + 4);
    return result;
  }
  v12 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = v13 & 0x7FFFFFFFFFFFFFFFLL;
  v15 = *(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)a2 & 0x7FFFFFFF00000000) != 0)
    v15 = *(_QWORD *)a2;
  if ((v13 & 0x7FFFFFFF) != 0)
    v15 = *(_QWORD *)a2;
  else
    v14 = v13 & 0x7FFFFFFF7FFFFFFFLL;
  if ((v13 & 0x7FFFFFFF00000000) == 0)
  {
    v12 = v15;
    v13 = v14;
  }
  v21 = v12;
  v22 = v13;
  v23 = 0;
  result = sub_22F419D28((uint64_t *)(a1 + 64), &v21, &v23);
  if ((_DWORD)result)
  {
    v16 = v23;
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(unsigned int *)(a1 + 80);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(unsigned int *)(a1 + 80);
    v16 = (uint64_t *)(v17 + 32 * v18);
  }
  if (v16 != (uint64_t *)(v17 + 32 * v18))
  {
    v11 = *((_OWORD *)v16 + 1);
    goto LABEL_3;
  }
  if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
  {
    v21 = *(_QWORD *)a2;
    v22 = 0;
    v19 = *a4;
    v20 = *((_DWORD *)a4 + 4);
    return sub_22F4197F0(a1, &v21, a3, &v19);
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
  }
  return result;
}

uint64_t sub_22F41993C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  llvm *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29[2];
  __int128 v30;
  __int128 v31;
  llvm *v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v36 = 0xFFFFFFFFuLL;
  v35 = 0uLL;
  v34 = 0xFFFFFFFFuLL;
  v32 = 0;
  memset(v33, 0, 12);
  v8 = sub_22F419BC4(a2);
  *((_QWORD *)&v22 + 1) = v9;
  v10 = *(_QWORD *)a2 + 56 * *(unsigned int *)(a2 + 16);
  if (v10 == v8)
    goto LABEL_22;
  v11 = v8;
  do
  {
    v12 = *(unsigned __int16 *)(v11 + 24);
    if (v12 == 6 || v12 == 5)
    {
      v31 = 0uLL;
      v30 = 0uLL;
      if ((llvm::VersionTuple::tryParse() & 1) != 0 || llvm::VersionTuple::tryParse())
        goto LABEL_22;
      v14 = *((_QWORD *)&v31 + 1);
      v13 = v31;
      if ((*((_QWORD *)&v31 + 1) & 0x7FFFFFFF00000000) == 0)
      {
        if ((DWORD2(v31) & 0x7FFFFFFF) != 0)
        {
          v14 = *((_QWORD *)&v31 + 1) & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v14 = *((_QWORD *)&v31 + 1) & 0x7FFFFFFF7FFFFFFFLL;
          if ((v31 & 0x7FFFFFFF00000000) == 0)
            v13 = v31 & 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      v29[0] = v13;
      v29[1] = v14;
      v15 = sub_22F419E30((uint64_t *)&v32, v29);
      *((_OWORD *)v15 + 1) = v30;
      if (sub_22E3B38EC(&v31, &v36))
        v36 = v31;
      if (sub_22E3B38EC(&v35, &v31))
        v35 = v31;
      if (sub_22E3B38EC(&v30, &v34))
        v34 = v30;
    }
    *(_QWORD *)&v22 = v11 + 56;
    sub_22F1CAF30((uint64_t *)&v22);
    v11 = v22;
  }
  while ((_QWORD)v22 != v10);
  if (!LODWORD(v33[0]))
  {
LABEL_22:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v19 = v32;
    v32 = 0;
    v20 = v33[0];
    v21 = *(_QWORD *)((char *)v33 + 4);
    v22 = v36;
    v23 = v35;
    memset(v33, 0, 12);
    v24 = v34;
    *(_QWORD *)&v25 = a3;
    *((_QWORD *)&v25 + 1) = a4;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    sub_22E80B1EC((uint64_t)&v26, (uint64_t)&v19);
    v16 = v23;
    *(_OWORD *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v16;
    v17 = v25;
    *(_OWORD *)(a1 + 32) = v24;
    *(_OWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 64) = v26;
    v26 = 0;
    *(_QWORD *)(a1 + 72) = v27;
    v27 = 0;
    *(_DWORD *)(a1 + 80) = v28;
    v28 = 0;
    *(_BYTE *)(a1 + 88) = 1;
    llvm::deallocate_buffer(0, 0);
    llvm::deallocate_buffer(v19, (void *)(32 * HIDWORD(v21)));
  }
  return llvm::deallocate_buffer(v32, (void *)(32 * LODWORD(v33[1])));
}

uint64_t sub_22F419BC4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4[2];

  v1 = *(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)a1;
  result = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
  if (v1)
  {
    v4[0] = v2;
    v4[1] = result;
    sub_22F1CAF30(v4);
    return v4[0];
  }
  return result;
}

uint64_t sub_22F419C0C(uint64_t a1, __int128 *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  int v8;
  int v9;

  if (*((_BYTE *)a2 + 88))
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    v4 = a2[3];
    v6 = *a2;
    v5 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v4;
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v5;
    v7 = (_QWORD *)(a1 + 64);
    if (v3)
    {
      sub_22F419CB0((uint64_t)v7, (uint64_t)(a2 + 4));
    }
    else
    {
      *v7 = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_DWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a2 + 8) = 0;
      *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
      *((_DWORD *)a2 + 18) = 0;
      v8 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
      *((_DWORD *)a2 + 19) = v8;
      v9 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
      *((_DWORD *)a2 + 20) = v9;
      *(_BYTE *)(a1 + 88) = 1;
    }
  }
  else
  {
    sub_22F2E081C(a1);
  }
  return a1;
}

uint64_t sub_22F419CB0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * *(unsigned int *)(a1 + 16)));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

uint64_t sub_22F419D28(uint64_t *a1, unint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  int i;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v12 = 0;
    result = 0;
    goto LABEL_18;
  }
  v5 = *a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = sub_22F1CB0B4(*a2, v6);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & (v4 - 1);
    v12 = (uint64_t *)(v5 + 32 * v11);
    v14 = *v12;
    v13 = v12[1];
    if ((_DWORD)v7 == *v12
      && ((*v12 ^ v7) & 0x7FFFFFFF00000000 | (v13 ^ v6) & 0x7FFFFFFF7FFFFFFFLL) == 0)
    {
      result = 1;
      goto LABEL_18;
    }
    if ((_DWORD)v14 != 2147483646)
      break;
    if (v14 & 0x7FFFFFFF00000000 | v12[1] & 0x7FFFFFFF)
      goto LABEL_12;
    v16 = (v13 & 0x7FFFFFFF00000000) == 0;
LABEL_13:
    if (v16 && v9 == 0)
      v9 = (uint64_t *)(v5 + 32 * v11);
    v8 = v11 + i;
  }
  if ((_DWORD)v14 != 0x7FFFFFFF || v14 & 0x7FFFFFFF00000000 | v13 & 0x7FFFFFFF7FFFFFFFLL)
  {
LABEL_12:
    v16 = 0;
    goto LABEL_13;
  }
  result = 0;
  if (v9)
    v12 = v9;
LABEL_18:
  *a3 = v12;
  return result;
}

uint64_t *sub_22F419E30(uint64_t *a1, unint64_t *a2)
{
  char v4;
  uint64_t *v5;
  uint64_t *v7;

  v7 = 0;
  v4 = sub_22F419D28(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F419E90((uint64_t)a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = 0;
    v5[3] = 0;
  }
  return v5;
}

uint64_t *sub_22F419E90(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1CB188(a1, v6);
  v8 = 0;
  sub_22F419D28((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 & 0x7FFFFFFFFFFFFFFFLL ^ 0x7FFFFFFF | a3[1] & 0x7FFFFFFF7FFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F419F48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t *v14;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = xmmword_22F4ADD40;
      v7 += 2;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      v9 = *(_QWORD *)(v4 + 8);
      if (*(_QWORD *)v4 == 2147483646)
      {
        if (!(v10 & 0x7FFFFFFF00000000 | v9 & 0x7FFFFFFF7FFFFFFFLL))
          goto LABEL_12;
      }
      else
      {
        v11 = v10 & 0x7FFFFFFF00000000 | v9 & 0x7FFFFFFF7FFFFFFFLL;
        if ((_DWORD)v10 == 0x7FFFFFFF && v11 == 0)
          goto LABEL_12;
      }
      v14 = 0;
      result = sub_22F419D28((uint64_t *)v5, (unint64_t *)v4, &v14);
      v13 = v14;
      *(_OWORD *)v14 = *(_OWORD *)v4;
      *((_OWORD *)v13 + 1) = *(_OWORD *)(v4 + 16);
      ++*(_DWORD *)(v5 + 8);
LABEL_12:
      v4 += 32;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *sub_22F41A034(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F41A0B8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F41A154(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

uint64_t sub_22F41A0B8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 104 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 104 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F41A154(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1CB24C(a1, v6);
  v8 = 0;
  sub_22F41A0B8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F41A204(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 104 * v6;
    do
    {
      *v7 = -1;
      v7 += 13;
      v8 -= 104;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      sub_22F41A0B8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      sub_22F41A2C4((uint64_t)(v10 + 1), (__int128 *)(a2 + 8));
      ++*(_DWORD *)(v5 + 8);
      result = sub_22F2E081C(a2 + 8);
    }
    a2 += 104;
  }
  return result;
}

uint64_t sub_22F41A2C4(uint64_t a1, __int128 *a2)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    sub_22F2E081C(a1);
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = 0;
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 0;
    v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = v8;
    v9 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

unsigned __int8 **sub_22F41A35C(unsigned __int8 **a1, __int16 a2)
{
  BOOL v3;
  char *v4;
  uint64_t v5;
  size_t v6;

  switch((char)a2)
  {
    case 0:
      v3 = (a2 & 0x100) == 0;
      if ((a2 & 0x100) != 0)
        v4 = "'nonnull'";
      else
        v4 = "'_Nonnull'";
      v5 = 9;
      goto LABEL_15;
    case 1:
      v3 = (a2 & 0x100) == 0;
      if ((a2 & 0x100) != 0)
        v4 = "'nullable'";
      else
        v4 = "'_Nullable'";
      v5 = 10;
      goto LABEL_15;
    case 2:
      v3 = (a2 & 0x100) == 0;
      if ((a2 & 0x100) != 0)
        v4 = "'null_unspecified'";
      else
        v4 = "'_Null_unspecified'";
      v5 = 18;
LABEL_15:
      if (v3)
        v6 = v5 + 1;
      else
        v6 = v5;
      break;
    case 3:
      v4 = "_Nullable_result";
      v6 = 16;
      break;
    default:
      v4 = 0;
      v6 = 0;
      break;
  }
  sub_22E3B89A8(a1, v4, v6);
  return a1;
}

uint64_t sub_22F41A428(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t result;

  if (a3)
    v5 = a2;
  else
    v5 = 0;
  result = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 48) = a2;
  return result;
}

uint64_t sub_22F41A470(uint64_t a1)
{
  return sub_22F1CB6D4((int *)(a1 + 96), *(_QWORD **)(a1 + 64), 0, 0);
}

uint64_t sub_22F41A488(uint64_t a1, const void *a2, size_t a3)
{
  return sub_22F1CB6D4((int *)(a1 + 96), *(_QWORD **)(a1 + 64), a2, a3);
}

_QWORD *sub_22F41A4A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 128);
  v5 = v2;
  v3 = *(_QWORD **)(a1 + 152);
  if ((unint64_t)v3 < *(_QWORD *)(a1 + 160))
  {
    *v3 = v2;
    result = v3 + 1;
  }
  else
  {
    result = sub_22E4A02B0((void **)(a1 + 144), &v5);
  }
  *(_QWORD *)(a1 + 152) = result;
  return result;
}

uint64_t sub_22F41A4F4(uint64_t a1, void *__s2, size_t a3, int a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  if (a4)
    return sub_22F1CCCF4(a1, 0, __s2, a3, 5, 0);
  v12 = v14;
  v13 = 0x800000000;
  v6 = sub_22F1CFA08(*(_QWORD *)(a1 + 32), 0, __s2, a3, (uint64_t)&v12);
  v7 = (unsigned int *)v12;
  if ((v6 & 1) == 0 && (_DWORD)v13)
  {
    v8 = 4 * v13;
    do
    {
      v9 = *v7++;
      v10 = (char *)sub_22F1CEF60(*(_QWORD *)(a1 + 128), v9);
      v11 = *v10;
      if ((*v10 & 7) == 5)
        v11 = *v10 & 0xB8 | 4;
      *v10 = v11 | 0x40;
      v8 -= 4;
    }
    while (v8);
    v7 = (unsigned int *)v12;
  }
  if (v7 != (unsigned int *)v14)
    free(v7);
  return v6;
}

void sub_22F41A638(uint64_t a1, char *a2, int a3, int a4, int a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_22F41AA48(a2, (uint64_t)&v12);
  v9 = v12;
  v10 = v13;
  if (v12 != v13)
  {
    do
    {
      v11 = *v9;
      if (sub_22F41A8B4(*v9) && (!a5 || !sub_22F41A8A0(v11)))
        sub_22F1CCBD0(a1, v11, a3, a4);
      ++v9;
    }
    while (v9 != v10);
    v9 = v12;
  }
  if (v9)
  {
    v13 = v9;
    operator delete(v9);
  }
}

uint64_t sub_22F41A6FC(_DWORD *a1, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
  if ((_DWORD)result)
  {
    if (a2 == 3)
    {
      ++a1[2];
    }
    else if (a2 >= 4)
    {
      ++a1[3];
    }
  }
  return result;
}

void sub_22F41A758(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v4 = a1[2];
  if (v4)
  {
    sub_22E61131C((uint64_t)a2, (_BYTE *)a1[1], (_BYTE *)(a1[1] + v4));
  }
  else
  {
    v5 = (unsigned __int8 *)sub_22F41A934(*(_QWORD *)(*a1 + 32), *(_DWORD *)(*a1 + 316));
    sub_22F1CCFB4(a1, v5, (char *)&v5[v6], a2);
  }
}

uint64_t sub_22F41A7BC()
{
  return 1;
}

void sub_22F41A7C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F41A7DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22F41A7EC(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22F41A800(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22F41A810(uint64_t a1, int a2, void *__src, size_t __len)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  v8 = (uint64_t *)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 8);
  if (!v7)
  {
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_QWORD *)(v9 + 24) = v9 + 32;
    sub_22F1CEFE0(v8, v9);
    v7 = (_QWORD *)*v8;
  }
  return sub_22F1CF078(v7, a2, __src, __len);
}

BOOL sub_22F41A8A0(int a1)
{
  return (a1 - 7107) < 2;
}

BOOL sub_22F41A8B4(unsigned int a1)
{
  unsigned __int16 *v1;

  if (a1 > 0x2118)
    return 0;
  v1 = sub_22F1CEE18(a1);
  return !v1 || (*(_DWORD *)(v1 + 1) & 0x38) != 40;
}

unsigned __int16 *sub_22F41A8F8(unsigned int a1)
{
  unsigned __int16 *result;

  if (a1 > 0x2118)
    return 0;
  result = sub_22F1CEE18(a1);
  if (result)
    return (unsigned __int16 *)((*(_DWORD *)(result + 1) & 0x38) == 8);
  return result;
}

char *sub_22F41A934(uint64_t a1, unsigned int a2)
{
  unsigned __int16 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_22F1CEE18(a2);
  if (v4)
    return (char *)&unk_22F4BAA50
         + *((unsigned int *)&unk_22F4B44B8
           + 0xCCCCCCCCCCCCCCDLL * ((unint64_t)((char *)v4 - (char *)&unk_22F5396DE) >> 1));
  v6 = **(_QWORD **)(a1 + 8) + 32 * (a2 - 8473);
  v9 = *(_QWORD *)(v6 + 8);
  v7 = v6 + 8;
  v8 = v9;
  if (*(char *)(v7 + 23) >= 0)
    return (char *)v7;
  else
    return (char *)v8;
}

char *sub_22F41A9D4(int a1)
{
  return (char *)&unk_22F4AF43A + (unsigned __int16)word_22F4ADD90[3 * a1] + 1;
}

unsigned __int16 *sub_22F41A9FC(unsigned int a1)
{
  unsigned __int16 *result;

  result = sub_22F1CEE18(a1);
  if (result)
    return (unsigned __int16 *)&byte_22F4AF43A[(unsigned __int16)word_22F4ADD90[3 * (*(_DWORD *)(result + 1) >> 17)] + 1];
  return result;
}

char *sub_22F41AA48(char *result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int *v5;
  int v6;
  int *v7;

  v3 = (int)result;
  v4 = 6502;
  v5 = &dword_22F5396E0;
  do
  {
    if (((*v5 & 0x38) == 16) == v3)
    {
      v6 = *((unsigned __int16 *)v5 - 1);
      v7 = *(int **)(a2 + 8);
      if ((unint64_t)v7 >= *(_QWORD *)(a2 + 16))
      {
        result = sub_22F1D00AC((char **)a2, v6);
      }
      else
      {
        *v7 = v6;
        result = (char *)(v7 + 1);
      }
      *(_QWORD *)(a2 + 8) = result;
    }
    v5 = (int *)((char *)v5 + 10);
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_22F41AAC4(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned __int16 *v4;

  if (a2 >= 0x2119)
    return *(_DWORD *)(**(_QWORD **)(a1 + 8) + 32 * (a2 - 8473)) > 3;
  v4 = sub_22F1CEE18(a2);
  if (v4 && (*(_DWORD *)(v4 + 1) & 0x38u) < 0x28uLL)
    return 0;
  result = 0;
  if (a2 != 5035 && a2 != 5037)
    return sub_22F41AB5C(a2) ^ 1;
  return result;
}

unsigned __int16 *sub_22F41AB5C(unsigned int a1)
{
  unsigned __int16 *result;

  result = sub_22F1CEE18(a1);
  if (result)
  {
    if (((*(_DWORD *)(result + 1) >> 8) & 0x3Fu) - 40 >= 0xFFFFFFD9)
      return (unsigned __int16 *)(*(_DWORD *)*(&off_24FAE0D20 + 2 * ((*(_DWORD *)(result + 1) >> 8) & 0x3F)) == 541282881);
    else
      return 0;
  }
  return result;
}

uint64_t sub_22F41ABB4(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  llvm::vfs *v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *a3;
  *a3 = 0;
  sub_22E6C8BF0((char *)(a1 + 16), a2);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0x400000000;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x400000000;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 344;
  *(_QWORD *)(a1 + 336) = 0x400000000;
  *(_QWORD *)(a1 + 376) = a1 + 392;
  *(_QWORD *)(a1 + 384) = 0x400000000;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0;
  v4 = llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)(a1 + 440));
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = a1 + 496;
  *(_QWORD *)(a1 + 488) = 0x400000000;
  *(_QWORD *)(a1 + 528) = a1 + 544;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(a1 + 552) = 1;
  v5 = (llvm::vfs *)llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)(a1 + 560));
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 600) = a1 + 616;
  *(_QWORD *)(a1 + 608) = 0x400000000;
  *(_QWORD *)(a1 + 648) = a1 + 664;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 1;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_DWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 736) = a1 + 752;
  *(_QWORD *)(a1 + 744) = 0x400000000;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 808) = 1;
  *(_DWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  if (!*(_QWORD *)(a1 + 8))
  {
    llvm::vfs::getRealFileSystem(v5);
    v7 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t sub_22F41AD5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_22E3B4EF4(a1 + 720);
  llvm::deallocate_buffer(*(llvm **)(a1 + 696), (void *)(24 * *(unsigned int *)(a1 + 712)));
  v3 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = 0;
  if (v3)
  {
    v12 = sub_22F41B2B8(v3);
    MEMORY[0x2348A0E9C](v12, 0x1080C401BEB856BLL);
  }
  free(*(void **)(a1 + 560));
  sub_22E3B4EF4(a1 + 584);
  free(*(void **)(a1 + 440));
  sub_22E3B4EF4(a1 + 464);
  v4 = *(void **)(a1 + 424);
  if (v4 != (void *)(a1 + 440))
    free(v4);
  v5 = *(void **)(a1 + 376);
  if (v5 != (void *)(a1 + 392))
    free(v5);
  v6 = *(void **)(a1 + 328);
  if (v6 != (void *)(a1 + 344))
    free(v6);
  llvm::deallocate_buffer(*(llvm **)(a1 + 304), (void *)(24 * *(unsigned int *)(a1 + 320)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 280), (void *)(24 * *(unsigned int *)(a1 + 296)));
  sub_22E6188F4(a1 + 184);
  sub_22E3B4EF4(a1 + 184);
  sub_22F1D22B8(a1 + 88);
  sub_22E3B4EF4(a1 + 88);
  sub_22F1D2268(a1 + 16);
  v7 = *(unsigned int **)(a1 + 8);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t *sub_22F41AEC8(uint64_t a1)
{
  llvm::StringMapImpl *v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  const std::error_category *v8;
  uint64_t *result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16;

  v2 = (llvm::StringMapImpl *)(a1 + 440);
  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 184;
  while (1)
  {
    v4 = (const char *)llvm::sys::path::parent_path();
    v6 = v5 ? (char *)v4 : ".";
    v7 = v5 <= 1 ? 1 : v5;
    v15 = -1;
    v8 = std::generic_category();
    v14[0] = 2;
    v14[1] = (uint64_t)v8;
    result = sub_22F1D23B4(v2, v6, v7, v14);
    v10 = *result;
    if ((*(_BYTE *)(*result + 24) & 1) == 0)
      break;
    v11 = (_QWORD *)sub_22E3CD3D4(v3, 24, 3);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    v12 = *(_QWORD *)v10;
    *v11 = v10 + 32;
    v11[1] = v12;
    *(_BYTE *)(v10 + 24) &= ~1u;
    *(_QWORD *)(v10 + 8) = v11;
    v13 = *(unsigned int *)(a1 + 336);
    if (v13 >= *(unsigned int *)(a1 + 340))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(unsigned int *)(a1 + 336);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v13) = v11;
    ++*(_DWORD *)(a1 + 336);
  }
  return result;
}

llvm::MemoryBuffer *sub_22F41B034@<X0>(llvm::MemoryBuffer *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::error_code v5;
  llvm *v6;
  const void *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  char v14;

  v3 = *((_QWORD *)result + 86);
  if (v3)
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
LABEL_3:
    *(_QWORD *)a2 = v3;
    return result;
  }
  v4 = (uint64_t)result;
  result = (llvm::MemoryBuffer *)llvm::MemoryBuffer::getSTDIN(result);
  if ((v14 & 1) != 0)
  {
    *(_QWORD *)&v5.__val_ = v13;
    result = (llvm::MemoryBuffer *)llvm::errorCodeToError(v12, v5);
    v6 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v11;
  }
  else
  {
    v6 = v12;
    v12 = 0;
  }
  if ((v14 & 1) == 0)
  {
    result = v12;
    if (v12)
      result = (llvm::MemoryBuffer *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v12 + 8))(v12);
  }
  if ((v14 & 1) == 0)
  {
    v7 = (const void *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v6 + 16))(v6);
    v9 = sub_22F1D1104(v4, v7, v8, *((_QWORD *)v6 + 2) - *((_QWORD *)v6 + 1), 0);
    *(_QWORD *)(v4 + 688) = v9;
    do
    {
      v10 = *(_QWORD *)(v9 + 8);
      v9 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v10 & 2) != 0 && v9);
    result = *(llvm::MemoryBuffer **)(v9 + 80);
    *(_QWORD *)(v9 + 80) = v6;
    if (result)
      result = (llvm::MemoryBuffer *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(v9 + 68) = 1;
    *(_BYTE *)(a2 + 8) &= ~1u;
    v3 = *(_QWORD *)(v4 + 688);
    goto LABEL_3;
  }
  if (v6)
    return (llvm::MemoryBuffer *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

unint64_t sub_22F41B1AC(uint64_t a1, const void *a2, size_t a3, uint64_t a4, time_t a5)
{
  unint64_t result;
  uint64_t v6;

  result = sub_22F1D1104(a1, a2, a3, a4, a5);
  do
  {
    v6 = *(_QWORD *)(result + 8);
    result = v6 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v6 & 2) != 0 && result);
  return result;
}

llvm::raw_ostream *sub_22F41B1D0(llvm *a1)
{
  llvm::raw_ostream *v1;
  llvm *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;

  v1 = (llvm::raw_ostream *)llvm::errs(a1);
  v2 = sub_22E47DAC0(v1, "\n*** File Manager Stats:\n");
  llvm::errs(v2);
  v3 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v3, " real files found, ");
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v5 = sub_22E47DAC0(v4, " real dirs found.\n");
  llvm::errs(v5);
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v6, " virtual files found, ");
  v7 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v8 = sub_22E47DAC0(v7, " virtual dirs found.\n");
  llvm::errs(v8);
  v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v9, " dir lookups, ");
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v11 = sub_22E47DAC0(v10, " dir cache misses.\n");
  llvm::errs(v11);
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v12, " file lookups, ");
  v13 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  return sub_22E47DAC0(v13, " file cache misses.\n");
}

uint64_t sub_22F41B2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 33));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F41B330(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v12;
  _OWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -1;
      v7[1] = -1;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -1 || v9 != -1) && (*(_QWORD *)a2 != -2 || v9 != -2))
    {
      v13 = 0;
      result = sub_22F1D24F4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), (__int128 *)a2, &v13);
      v12 = v13;
      *v13 = *(_OWORD *)a2;
      *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t *sub_22F41B3F0(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x23489D23C](a3 + 33, 8);
  v12 = (_QWORD *)v11;
  v13 = v11 + 32;
  if (a3)
    memcpy((void *)(v11 + 32), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *v12 = a3;
  sub_22F1D27B8((uint64_t)(v12 + 1), a4);
  *i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F41B4F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F251EFC((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F3E8B2C(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

double sub_22F41B58C(llvm::StringMapImpl *a1, uint64_t a2)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)llvm::StringMapImpl::StringMapImpl(a1);
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = v3 + 7;
  *(_QWORD *)&result = 0x400000000;
  v3[6] = 0x400000000;
  v3[13] = 0;
  v3[11] = v3 + 13;
  v3[12] = 0;
  v3[14] = 1;
  v3[15] = a2;
  return result;
}

_QWORD *sub_22F41B5E0(llvm::StringMapImpl *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;

  sub_22F1D2E60("auto", 4uLL, 76, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("break", 5uLL, 77, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("case", 4uLL, 78, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("char", 4uLL, 79, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("const", 5uLL, 80, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("continue", 8uLL, 81, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("default", 7uLL, 82, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("do", 2uLL, 83, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("double", 6uLL, 84, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("else", 4uLL, 85, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("enum", 4uLL, 86, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("extern", 6uLL, 87, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("float", 5uLL, 88, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("for", 3uLL, 89, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("goto", 4uLL, 90, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("if", 2uLL, 91, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("inline", 6uLL, 92, 0xBu, a2, a1);
  sub_22F1D2E60("int", 3uLL, 93, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_ExtInt", 7uLL, 94, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_BitInt", 7uLL, 95, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("long", 4uLL, 96, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("register", 8uLL, 97, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("restrict", 8uLL, 98, 1u, a2, a1);
  sub_22F1D2E60("return", 6uLL, 99, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("short", 5uLL, 100, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("signed", 6uLL, 101, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("sizeof", 6uLL, 102, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("static", 6uLL, 103, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("struct", 6uLL, 104, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("switch", 6uLL, 105, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("typedef", 7uLL, 106, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("union", 5uLL, 107, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("unsigned", 8uLL, 108, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("void", 4uLL, 109, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("volatile", 8uLL, 110, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("while", 5uLL, 111, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Alignas", 8uLL, 112, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Alignof", 8uLL, 113, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Atomic", 7uLL, 114, 0x1FFFF7FFu, a2, a1);
  sub_22F1D2E60("_Bool", 5uLL, 115, 0x80u, a2, a1);
  sub_22F1D2E60("_Complex", 8uLL, 116, 0x1FFFE7FFu, a2, a1);
  sub_22F1D2E60("_Generic", 8uLL, 117, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Imaginary", 0xAuLL, 118, 0x1FFFE7FFu, a2, a1);
  sub_22F1D2E60("_Noreturn", 9uLL, 119, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Static_assert", 0xEuLL, 120, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Thread_local", 0xDuLL, 121, 0x1FFFE7FFu, a2, a1);
  sub_22F1D2E60("__func__", 8uLL, 122, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__objc_yes", 0xAuLL, 123, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__objc_no", 9uLL, 124, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__ptrauth", 9uLL, 125, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__ptrauth_restricted_intptr", 0x1BuLL, 126, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("asm", 3uLL, 127, 0xAu, a2, a1);
  sub_22F1D2E60("BOOL", 4uLL, 128, 0x20u, a2, a1);
  sub_22F1D2E60("catch", 5uLL, 129, 2u, a2, a1);
  sub_22F1D2E60("class", 5uLL, 130, 2u, a2, a1);
  sub_22F1D2E60("const_cast", 0xAuLL, 131, 2u, a2, a1);
  sub_22F1D2E60("delete", 6uLL, 132, 2u, a2, a1);
  sub_22F1D2E60("dynamic_cast", 0xCuLL, 133, 2u, a2, a1);
  sub_22F1D2E60("explicit", 8uLL, 134, 2u, a2, a1);
  sub_22F1D2E60("export", 6uLL, 135, 2u, a2, a1);
  sub_22F1D2E60("false", 5uLL, 136, 0x20u, a2, a1);
  sub_22F1D2E60("friend", 6uLL, 137, 2u, a2, a1);
  sub_22F1D2E60("mutable", 7uLL, 138, 2u, a2, a1);
  sub_22F1D2E60("namespace", 9uLL, 139, 2u, a2, a1);
  sub_22F1D2E60("new", 3uLL, 140, 2u, a2, a1);
  sub_22F1D2E60("operator", 8uLL, 141, 2u, a2, a1);
  sub_22F1D2E60("private", 7uLL, 142, 2u, a2, a1);
  sub_22F1D2E60("protected", 9uLL, 143, 2u, a2, a1);
  sub_22F1D2E60("public", 6uLL, 144, 2u, a2, a1);
  sub_22F1D2E60("reinterpret_cast", 0x10uLL, 145, 2u, a2, a1);
  sub_22F1D2E60("static_cast", 0xBuLL, 146, 2u, a2, a1);
  sub_22F1D2E60("template", 8uLL, 147, 2u, a2, a1);
  sub_22F1D2E60("this", 4uLL, 148, 2u, a2, a1);
  sub_22F1D2E60("throw", 5uLL, 149, 2u, a2, a1);
  sub_22F1D2E60("true", 4uLL, 150, 0x20u, a2, a1);
  sub_22F1D2E60("try", 3uLL, 151, 2u, a2, a1);
  sub_22F1D2E60("typename", 8uLL, 152, 2u, a2, a1);
  sub_22F1D2E60("typeid", 6uLL, 153, 2u, a2, a1);
  sub_22F1D2E60("using", 5uLL, 154, 2u, a2, a1);
  sub_22F1D2E60("virtual", 7uLL, 155, 2u, a2, a1);
  sub_22F1D2E60("wchar_t", 7uLL, 156, 0x2000u, a2, a1);
  if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
  {
    v4 = (_QWORD *)sub_22E3CB704(a1, "and", 3uLL);
    *v4 = (*v4 & 0xFFFFFFFFBFFFFE00 | 0x4000001B) + 1;
    if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
    {
      v5 = (_QWORD *)sub_22E3CB704(a1, "and_eq", 6uLL);
      *v5 = *v5 & 0xFFFFFFFFBFFFFE00 | 0x4000001D;
      if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
      {
        v6 = (_QWORD *)sub_22E3CB704(a1, "bitand", 6uLL);
        *v6 = *v6 & 0xFFFFFFFFBFFFFE00 | 0x4000001B;
        if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
        {
          v7 = (_QWORD *)sub_22E3CB704(a1, "bitor", 5uLL);
          *v7 = *v7 & 0xFFFFFFFFBFFFFE00 | 0x40000039;
          if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
          {
            v8 = (_QWORD *)sub_22E3CB704(a1, "compl", 5uLL);
            *v8 = *v8 & 0xFFFFFFFFBFFFFE00 | 0x40000027;
            if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
            {
              v9 = (_QWORD *)sub_22E3CB704(a1, "not", 3uLL);
              *v9 = *v9 & 0xFFFFFFFFBFFFFE00 | 0x40000028;
              if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
              {
                v10 = (_QWORD *)sub_22E3CB704(a1, "not_eq", 6uLL);
                *v10 = *v10 & 0xFFFFFFFFBFFFFE00 | 0x40000029;
                if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
                {
                  v11 = (_QWORD *)sub_22E3CB704(a1, "or", 2uLL);
                  *v11 = *v11 & 0xFFFFFFFFBFFFFE00 | 0x4000003A;
                  if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
                  {
                    v12 = (_QWORD *)sub_22E3CB704(a1, "or_eq", 5uLL);
                    *v12 = *v12 & 0xFFFFFFFFBFFFFE00 | 0x4000003B;
                    if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
                    {
                      v13 = (_QWORD *)sub_22E3CB704(a1, "xor", 3uLL);
                      *v13 = *v13 & 0xFFFFFFFFBFFFFE00 | 0x40000037;
                      if ((*(_QWORD *)(a2 + 8) & 0x1000000000) != 0)
                      {
                        v14 = (_QWORD *)sub_22E3CB704(a1, "xor_eq", 6uLL);
                        *v14 = *v14 & 0xFFFFFFFFBFFFFE00 | 0x40000038;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_22F1D2E60("alignas", 7uLL, 157, 4u, a2, a1);
  sub_22F1D2E60("alignof", 7uLL, 158, 4u, a2, a1);
  sub_22F1D2E60("char16_t", 8uLL, 159, 0x804u, a2, a1);
  sub_22F1D2E60("char32_t", 8uLL, 160, 0x804u, a2, a1);
  sub_22F1D2E60("constexpr", 9uLL, 161, 4u, a2, a1);
  sub_22F1D2E60("decltype", 8uLL, 162, 4u, a2, a1);
  sub_22F1D2E60("noexcept", 8uLL, 163, 4u, a2, a1);
  sub_22F1D2E60("nullptr", 7uLL, 164, 4u, a2, a1);
  sub_22F1D2E60("static_assert", 0xDuLL, 165, 0x800004u, a2, a1);
  sub_22F1D2E60("thread_local", 0xCuLL, 166, 4u, a2, a1);
  sub_22F1D2E60("concept", 7uLL, 167, 0x210000u, a2, a1);
  sub_22F1D2E60("requires", 8uLL, 168, 0x210000u, a2, a1);
  sub_22F1D2E60("co_await", 8uLL, 169, 0x280000u, a2, a1);
  sub_22F1D2E60("co_return", 9uLL, 170, 0x280000u, a2, a1);
  sub_22F1D2E60("co_yield", 8uLL, 171, 0x280000u, a2, a1);
  sub_22F1D2E60("module", 6uLL, 172, 0x100000u, a2, a1);
  sub_22F1D2E60("import", 6uLL, 173, 0x100000u, a2, a1);
  sub_22F1D2E60("consteval", 9uLL, 174, 0x200000u, a2, a1);
  sub_22F1D2E60("constinit", 9uLL, 175, 0x200000u, a2, a1);
  sub_22F1D2E60("char8_t", 7uLL, 176, 0x8000u, a2, a1);
  sub_22F1D2E60("_Float16", 8uLL, 177, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Accum", 6uLL, 178, 0x80u, a2, a1);
  sub_22F1D2E60("_Fract", 6uLL, 179, 0x80u, a2, a1);
  sub_22F1D2E60("_Sat", 4uLL, 180, 0x80u, a2, a1);
  sub_22F1D2E60("_Decimal32", 0xAuLL, 181, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Decimal64", 0xAuLL, 182, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Decimal128", 0xBuLL, 183, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__null", 6uLL, 184, 2u, a2, a1);
  sub_22F1D2E60("__alignof", 9uLL, 185, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__attribute", 0xBuLL, 186, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_choose_expr", 0x15uLL, 187, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_offsetof", 0x12uLL, 188, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_FILE", 0xEuLL, 189, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_FUNCTION", 0x12uLL, 190, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_LINE", 0xEuLL, 191, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_COLUMN", 0x10uLL, 192, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_source_location", 0x19uLL, 193, 2u, a2, a1);
  sub_22F1D2E60("__builtin_types_compatible_p", 0x1CuLL, 194, 0x80u, a2, a1);
  sub_22F1D2E60("__builtin_va_arg", 0x10uLL, 195, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__extension__", 0xDuLL, 196, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__float128", 0xAuLL, 197, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__ibm128", 8uLL, 198, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__imag", 6uLL, 199, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__int128", 8uLL, 200, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__label__", 9uLL, 201, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__real", 6uLL, 202, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__thread", 8uLL, 203, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__FUNCTION__", 0xCuLL, 204, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__PRETTY_FUNCTION__", 0x13uLL, 205, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__auto_type", 0xBuLL, 206, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("typeof", 6uLL, 207, 8u, a2, a1);
  sub_22F1D2E60("__FUNCDNAME__", 0xDuLL, 208, 0x10u, a2, a1);
  sub_22F1D2E60("__FUNCSIG__", 0xBuLL, 209, 0x10u, a2, a1);
  sub_22F1D2E60("L__FUNCTION__", 0xDuLL, 210, 0x10u, a2, a1);
  sub_22F1D2E60("L__FUNCSIG__", 0xCuLL, 211, 0x10u, a2, a1);
  sub_22F1D2E60("__is_interface_class", 0x14uLL, 212, 0x10u, a2, a1);
  sub_22F1D2E60("__is_sealed", 0xBuLL, 213, 0x10u, a2, a1);
  sub_22F1D2E60("__is_destructible", 0x11uLL, 214, 0x10u, a2, a1);
  sub_22F1D2E60("__is_trivially_destructible", 0x1BuLL, 215, 2u, a2, a1);
  sub_22F1D2E60("__is_nothrow_destructible", 0x19uLL, 216, 0x10u, a2, a1);
  sub_22F1D2E60("__is_nothrow_assignable", 0x17uLL, 217, 2u, a2, a1);
  sub_22F1D2E60("__is_constructible", 0x12uLL, 218, 2u, a2, a1);
  sub_22F1D2E60("__is_nothrow_constructible", 0x1AuLL, 219, 2u, a2, a1);
  sub_22F1D2E60("__is_assignable", 0xFuLL, 220, 2u, a2, a1);
  sub_22F1D2E60("__has_nothrow_move_assign", 0x19uLL, 221, 2u, a2, a1);
  sub_22F1D2E60("__has_trivial_move_assign", 0x19uLL, 222, 2u, a2, a1);
  sub_22F1D2E60("__has_trivial_move_constructor", 0x1EuLL, 223, 2u, a2, a1);
  sub_22F1D2E60("__has_nothrow_assign", 0x14uLL, 224, 2u, a2, a1);
  sub_22F1D2E60("__has_nothrow_copy", 0x12uLL, 225, 2u, a2, a1);
  sub_22F1D2E60("__has_nothrow_constructor", 0x19uLL, 226, 2u, a2, a1);
  sub_22F1D2E60("__has_trivial_assign", 0x14uLL, 227, 2u, a2, a1);
  sub_22F1D2E60("__has_trivial_copy", 0x12uLL, 228, 2u, a2, a1);
  sub_22F1D2E60("__has_trivial_constructor", 0x19uLL, 229, 2u, a2, a1);
  sub_22F1D2E60("__has_trivial_destructor", 0x18uLL, 230, 2u, a2, a1);
  sub_22F1D2E60("__has_virtual_destructor", 0x18uLL, 231, 2u, a2, a1);
  sub_22F1D2E60("__is_abstract", 0xDuLL, 232, 2u, a2, a1);
  sub_22F1D2E60("__is_aggregate", 0xEuLL, 233, 2u, a2, a1);
  sub_22F1D2E60("__is_base_of", 0xCuLL, 234, 2u, a2, a1);
  sub_22F1D2E60("__is_class", 0xAuLL, 235, 2u, a2, a1);
  sub_22F1D2E60("__is_convertible_to", 0x13uLL, 236, 2u, a2, a1);
  sub_22F1D2E60("__is_empty", 0xAuLL, 237, 2u, a2, a1);
  sub_22F1D2E60("__is_enum", 9uLL, 238, 2u, a2, a1);
  sub_22F1D2E60("__is_final", 0xAuLL, 239, 2u, a2, a1);
  sub_22F1D2E60("__is_literal", 0xCuLL, 240, 2u, a2, a1);
  sub_22F1D2E60("__is_literal_type", 0x11uLL, 240, 2u, a2, a1);
  sub_22F1D2E60("__is_pod", 8uLL, 241, 2u, a2, a1);
  sub_22F1D2E60("__is_polymorphic", 0x10uLL, 242, 2u, a2, a1);
  sub_22F1D2E60("__is_standard_layout", 0x14uLL, 243, 2u, a2, a1);
  sub_22F1D2E60("__is_trivial", 0xCuLL, 244, 2u, a2, a1);
  sub_22F1D2E60("__is_trivially_assignable", 0x19uLL, 245, 2u, a2, a1);
  sub_22F1D2E60("__is_trivially_constructible", 0x1CuLL, 246, 2u, a2, a1);
  sub_22F1D2E60("__is_trivially_copyable", 0x17uLL, 247, 2u, a2, a1);
  sub_22F1D2E60("__is_union", 0xAuLL, 248, 2u, a2, a1);
  sub_22F1D2E60("__has_unique_object_representations", 0x23uLL, 249, 2u, a2, a1);
  sub_22F1D2E60("__underlying_type", 0x11uLL, 250, 2u, a2, a1);
  sub_22F1D2E60("__reference_binds_to_temporary", 0x1EuLL, 251, 2u, a2, a1);
  sub_22F1D2E60("__is_lvalue_expr", 0x10uLL, 252, 2u, a2, a1);
  sub_22F1D2E60("__is_rvalue_expr", 0x10uLL, 253, 2u, a2, a1);
  sub_22F1D2E60("__is_arithmetic", 0xFuLL, 254, 2u, a2, a1);
  sub_22F1D2E60("__is_floating_point", 0x13uLL, 255, 2u, a2, a1);
  sub_22F1D2E60("__is_integral", 0xDuLL, 256, 2u, a2, a1);
  sub_22F1D2E60("__is_complete_type", 0x12uLL, 257, 2u, a2, a1);
  sub_22F1D2E60("__is_void", 9uLL, 258, 2u, a2, a1);
  sub_22F1D2E60("__is_array", 0xAuLL, 259, 2u, a2, a1);
  sub_22F1D2E60("__is_function", 0xDuLL, 260, 2u, a2, a1);
  sub_22F1D2E60("__is_reference", 0xEuLL, 261, 2u, a2, a1);
  sub_22F1D2E60("__is_lvalue_reference", 0x15uLL, 262, 2u, a2, a1);
  sub_22F1D2E60("__is_rvalue_reference", 0x15uLL, 263, 2u, a2, a1);
  sub_22F1D2E60("__is_fundamental", 0x10uLL, 264, 2u, a2, a1);
  sub_22F1D2E60("__is_object", 0xBuLL, 265, 2u, a2, a1);
  sub_22F1D2E60("__is_scalar", 0xBuLL, 266, 2u, a2, a1);
  sub_22F1D2E60("__is_compound", 0xDuLL, 267, 2u, a2, a1);
  sub_22F1D2E60("__is_pointer", 0xCuLL, 268, 2u, a2, a1);
  sub_22F1D2E60("__is_member_object_pointer", 0x1AuLL, 269, 2u, a2, a1);
  sub_22F1D2E60("__is_member_function_pointer", 0x1CuLL, 270, 2u, a2, a1);
  sub_22F1D2E60("__is_member_pointer", 0x13uLL, 271, 2u, a2, a1);
  sub_22F1D2E60("__is_const", 0xAuLL, 272, 2u, a2, a1);
  sub_22F1D2E60("__is_volatile", 0xDuLL, 273, 2u, a2, a1);
  sub_22F1D2E60("__is_signed", 0xBuLL, 274, 2u, a2, a1);
  sub_22F1D2E60("__is_unsigned", 0xDuLL, 275, 2u, a2, a1);
  sub_22F1D2E60("__is_same", 9uLL, 276, 2u, a2, a1);
  sub_22F1D2E60("__is_convertible", 0x10uLL, 277, 2u, a2, a1);
  sub_22F1D2E60("__array_rank", 0xCuLL, 278, 2u, a2, a1);
  sub_22F1D2E60("__array_extent", 0xEuLL, 279, 2u, a2, a1);
  sub_22F1D2E60("__is_same_as", 0xCuLL, 276, 2u, a2, a1);
  sub_22F1D2E60("__is_metal_buffer", 0x11uLL, 280, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_buffer_pointee", 0x19uLL, 281, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_color_texture_channel", 0x20uLL, 282, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_depth_texture_channel", 0x20uLL, 283, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_explicit_layout_imageblock_slice_storage", 0x33uLL, 284, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_explicit_layout_imageblock_struct", 0x2CuLL, 285, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_implicit_layout_imageblock_slice_storage", 0x33uLL, 286, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_implicit_layout_imageblock_struct", 0x2CuLL, 287, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_intersection_tag", 0x1BuLL, 288, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_mesh_primitive", 0x19uLL, 289, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_mesh_vertex", 0x16uLL, 290, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_patch_control_point_struct", 0x25uLL, 291, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_simdgroup_matrix_element", 0x23uLL, 292, 0x8000000u, a2, a1);
  sub_22F1D2E60("__is_metal_color_texture_imageblock_slice_storage_valid", 0x37uLL, 293, 0x8000000u, a2, a1);
  sub_22F1D2E60("__private_extern__", 0x12uLL, 294, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__module_private__", 0x12uLL, 295, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_ptrauth_type_discriminator", 0x24uLL, 296, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_xnu_type_signature", 0x1CuLL, 297, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_xnu_type_summary", 0x1AuLL, 298, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_xnu_types_compatible", 0x1EuLL, 299, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_tmo_get_type_data", 0x1BuLL, 300, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_tmo_get_type_descriptor", 0x21uLL, 301, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__declspec", 0xAuLL, 302, 0, a2, a1);
  sub_22F1D2E60("__cdecl", 7uLL, 303, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__stdcall", 9uLL, 304, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__fastcall", 0xAuLL, 305, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__thiscall", 0xAuLL, 306, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__regcall", 9uLL, 307, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__vectorcall", 0xCuLL, 308, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__forceinline", 0xDuLL, 309, 0x10u, a2, a1);
  sub_22F1D2E60("__unaligned", 0xBuLL, 310, 0x10u, a2, a1);
  sub_22F1D2E60("__super", 7uLL, 311, 0x10u, a2, a1);
  sub_22F1D2E60("__global", 8uLL, 312, 0x400200u, a2, a1);
  sub_22F1D2E60("__local", 7uLL, 313, 0x400200u, a2, a1);
  sub_22F1D2E60("__constant", 0xAuLL, 314, 0x400200u, a2, a1);
  sub_22F1D2E60("__private", 9uLL, 315, 0x400200u, a2, a1);
  sub_22F1D2E60("__generic", 9uLL, 316, 0x400200u, a2, a1);
  sub_22F1D2E60("global", 6uLL, 312, 0x400200u, a2, a1);
  sub_22F1D2E60("local", 5uLL, 313, 0x400200u, a2, a1);
  sub_22F1D2E60("constant", 8uLL, 314, 0x400200u, a2, a1);
  sub_22F1D2E60("private", 7uLL, 315, 0x200u, a2, a1);
  sub_22F1D2E60("generic", 7uLL, 316, 0x400200u, a2, a1);
  sub_22F1D2E60("__kernel", 8uLL, 317, 0x400200u, a2, a1);
  sub_22F1D2E60("kernel", 6uLL, 317, 0x400200u, a2, a1);
  sub_22F1D2E60("thread", 6uLL, 318, 0x8000000u, a2, a1);
  sub_22F1D2E60("device", 6uLL, 319, 0x8000000u, a2, a1);
  sub_22F1D2E60("threadgroup", 0xBuLL, 320, 0x8000000u, a2, a1);
  sub_22F1D2E60("constant", 8uLL, 321, 0x8000000u, a2, a1);
  sub_22F1D2E60("threadgroup_imageblock", 0x16uLL, 322, 0, a2, a1);
  sub_22F1D2E60("ray_data", 8uLL, 323, 0, a2, a1);
  sub_22F1D2E60("object_data", 0xBuLL, 324, 0, a2, a1);
  sub_22F1D2E60("coherent", 8uLL, 325, 0, a2, a1);
  sub_22F1D2E60("ocl_global", 0xAuLL, 326, 0x4000000u, a2, a1);
  sub_22F1D2E60("ocl_local", 9uLL, 327, 0x4000000u, a2, a1);
  sub_22F1D2E60("ocl_constant", 0xCuLL, 328, 0x4000000u, a2, a1);
  sub_22F1D2E60("ocl_private", 0xBuLL, 329, 0x4000000u, a2, a1);
  sub_22F1D2E60("__read_only", 0xBuLL, 330, 0x400200u, a2, a1);
  sub_22F1D2E60("__write_only", 0xCuLL, 331, 0x400200u, a2, a1);
  sub_22F1D2E60("__read_write", 0xCuLL, 332, 0x400200u, a2, a1);
  sub_22F1D2E60("read_only", 9uLL, 330, 0x400200u, a2, a1);
  sub_22F1D2E60("write_only", 0xAuLL, 331, 0x400200u, a2, a1);
  sub_22F1D2E60("read_write", 0xAuLL, 332, 0x400200u, a2, a1);
  sub_22F1D2E60("__builtin_astype", 0x10uLL, 333, 0x8400202u, a2, a1);
  sub_22F1D2E60("vec_step", 8uLL, 334, 0x440240u, a2, a1);
  sub_22F1D2E60("image1d_t", 9uLL, 335, 0x400200u, a2, a1);
  sub_22F1D2E60("image1d_array_t", 0xFuLL, 336, 0x400200u, a2, a1);
  sub_22F1D2E60("image1d_buffer_t", 0x10uLL, 337, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_t", 9uLL, 338, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_array_t", 0xFuLL, 339, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_depth_t", 0xFuLL, 340, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_array_depth_t", 0x15uLL, 341, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_msaa_t", 0xEuLL, 342, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_array_msaa_t", 0x14uLL, 343, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_msaa_depth_t", 0x14uLL, 344, 0x400200u, a2, a1);
  sub_22F1D2E60("image2d_array_msaa_depth_t", 0x1AuLL, 345, 0x400200u, a2, a1);
  sub_22F1D2E60("image3d_t", 9uLL, 346, 0x400200u, a2, a1);
  sub_22F1D2E60("pipe", 4uLL, 347, 0x400200u, a2, a1);
  sub_22F1D2E60("addrspace_cast", 0xEuLL, 348, 0x400000u, a2, a1);
  sub_22F1D2E60("kernel", 6uLL, 349, 0x8000000u, a2, a1);
  sub_22F1D2E60("vertex", 6uLL, 350, 0x8000000u, a2, a1);
  sub_22F1D2E60("fragment", 8uLL, 351, 0x8000000u, a2, a1);
  sub_22F1D2E60("as_type", 7uLL, 352, 0x8000000u, a2, a1);
  sub_22F1D2E60("__builtin_omp_required_simd_align", 0x21uLL, 353, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__pascal", 8uLL, 354, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__vector", 8uLL, 355, 0x40040u, a2, a1);
  sub_22F1D2E60("__pixel", 7uLL, 356, 0x40u, a2, a1);
  sub_22F1D2E60("__BOOL", 6uLL, 357, 0x40040u, a2, a1);
  sub_22F1D2E60("__fp16", 6uLL, 359, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__bf16", 6uLL, 358, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("half", 4uLL, 359, 0x4000u, a2, a1);
  sub_22F1D2E60("__bridge", 8uLL, 360, 0x20000u, a2, a1);
  sub_22F1D2E60("__bridge_transfer", 0x11uLL, 361, 0x20000u, a2, a1);
  sub_22F1D2E60("__bridge_retained", 0x11uLL, 362, 0x20000u, a2, a1);
  sub_22F1D2E60("__bridge_retain", 0xFuLL, 363, 0x20000u, a2, a1);
  sub_22F1D2E60("__covariant", 0xBuLL, 364, 0x20000u, a2, a1);
  sub_22F1D2E60("__contravariant", 0xFuLL, 365, 0x20000u, a2, a1);
  sub_22F1D2E60("__kindof", 8uLL, 366, 0x20000u, a2, a1);
  sub_22F1D2E60("__alignof__", 0xBuLL, 185, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__asm", 5uLL, 127, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__asm__", 7uLL, 127, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__attribute__", 0xDuLL, 186, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__complex", 9uLL, 116, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__complex__", 0xBuLL, 116, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__const", 7uLL, 80, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__const__", 9uLL, 80, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__decltype", 0xAuLL, 162, 2u, a2, a1);
  sub_22F1D2E60("__imag__", 8uLL, 199, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__inline", 8uLL, 92, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__inline__", 0xAuLL, 92, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__nullptr", 9uLL, 164, 2u, a2, a1);
  sub_22F1D2E60("__real__", 8uLL, 202, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__restrict", 0xAuLL, 98, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__restrict__", 0xCuLL, 98, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__signed", 8uLL, 101, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__signed__", 0xAuLL, 101, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__typeof", 8uLL, 207, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__typeof__", 0xAuLL, 207, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__volatile", 0xAuLL, 110, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__volatile__", 0xCuLL, 110, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Nonnull", 8uLL, 367, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Nullable", 9uLL, 368, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Nullable_result", 0x10uLL, 369, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("_Null_unspecified", 0x11uLL, 370, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__ptr64", 7uLL, 371, 0x10u, a2, a1);
  sub_22F1D2E60("__ptr32", 7uLL, 372, 0x10u, a2, a1);
  sub_22F1D2E60("__sptr", 6uLL, 373, 0x10u, a2, a1);
  sub_22F1D2E60("__uptr", 6uLL, 374, 0x10u, a2, a1);
  sub_22F1D2E60("__w64", 5uLL, 375, 0x10u, a2, a1);
  sub_22F1D2E60("__uuidof", 8uLL, 376, 0x110u, a2, a1);
  sub_22F1D2E60("__try", 5uLL, 377, 0x110u, a2, a1);
  sub_22F1D2E60("__finally", 9uLL, 378, 0x110u, a2, a1);
  sub_22F1D2E60("__leave", 7uLL, 379, 0x110u, a2, a1);
  sub_22F1D2E60("uint64_t", 7uLL, 380, 0x10u, a2, a1);
  sub_22F1D2E60("__if_exists", 0xBuLL, 381, 0x10u, a2, a1);
  sub_22F1D2E60("__if_not_exists", 0xFuLL, 382, 0x10u, a2, a1);
  sub_22F1D2E60("__single_inheritance", 0x14uLL, 383, 0x10u, a2, a1);
  sub_22F1D2E60("__multiple_inheritance", 0x16uLL, 384, 0x10u, a2, a1);
  sub_22F1D2E60("__virtual_inheritance", 0x15uLL, 385, 0x10u, a2, a1);
  sub_22F1D2E60("__interface", 0xBuLL, 386, 0x10u, a2, a1);
  sub_22F1D2E60("__int8", 6uLL, 79, 0x10u, a2, a1);
  sub_22F1D2E60("__int16", 7uLL, 100, 0x10u, a2, a1);
  sub_22F1D2E60("__int32", 7uLL, 93, 0x10u, a2, a1);
  sub_22F1D2E60("__wchar_t", 9uLL, 156, 0x10u, a2, a1);
  sub_22F1D2E60("__builtin_alignof", 0x11uLL, 185, 0x10u, a2, a1);
  sub_22F1D2E60("_asm", 4uLL, 127, 0x10u, a2, a1);
  sub_22F1D2E60("_alignof", 8uLL, 185, 0x10u, a2, a1);
  sub_22F1D2E60("_cdecl", 6uLL, 303, 0x110u, a2, a1);
  sub_22F1D2E60("_declspec", 9uLL, 302, 0x10u, a2, a1);
  sub_22F1D2E60("_fastcall", 9uLL, 305, 0x110u, a2, a1);
  sub_22F1D2E60("_finally", 8uLL, 378, 0x800000u, a2, a1);
  sub_22F1D2E60("_forceinline", 0xCuLL, 309, 0x800000u, a2, a1);
  sub_22F1D2E60("_inline", 7uLL, 92, 0x10u, a2, a1);
  sub_22F1D2E60("_int8", 5uLL, 79, 0x10u, a2, a1);
  sub_22F1D2E60("_int16", 6uLL, 100, 0x10u, a2, a1);
  sub_22F1D2E60("_int32", 6uLL, 93, 0x10u, a2, a1);
  sub_22F1D2E60("_int64", 6uLL, 380, 0x10u, a2, a1);
  sub_22F1D2E60("_leave", 6uLL, 379, 0x800000u, a2, a1);
  sub_22F1D2E60("_multiple_inheritance", 0x15uLL, 384, 0x800000u, a2, a1);
  sub_22F1D2E60("_ptr32", 6uLL, 372, 0x800000u, a2, a1);
  sub_22F1D2E60("_ptr64", 6uLL, 371, 0x800000u, a2, a1);
  sub_22F1D2E60("_restrict", 9uLL, 98, 0x800000u, a2, a1);
  sub_22F1D2E60("_stdcall", 8uLL, 304, 0x110u, a2, a1);
  sub_22F1D2E60("_thiscall", 9uLL, 306, 0x10u, a2, a1);
  sub_22F1D2E60("_try", 4uLL, 377, 0x800000u, a2, a1);
  sub_22F1D2E60("_vectorcall", 0xBuLL, 308, 0x10u, a2, a1);
  sub_22F1D2E60("_unaligned", 0xAuLL, 310, 0x800000u, a2, a1);
  sub_22F1D2E60("_uptr", 5uLL, 374, 0x800000u, a2, a1);
  sub_22F1D2E60("_uuidof", 7uLL, 376, 0x110u, a2, a1);
  sub_22F1D2E60("_virtual_inheritance", 0x14uLL, 385, 0x800000u, a2, a1);
  sub_22F1D2E60("_w64", 4uLL, 375, 0x800000u, a2, a1);
  sub_22F1D2E60("_pascal", 7uLL, 354, 0x100u, a2, a1);
  sub_22F1D2E60("__builtin_convertvector", 0x17uLL, 387, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__char16_t", 0xAuLL, 159, 2u, a2, a1);
  sub_22F1D2E60("__char32_t", 0xAuLL, 160, 2u, a2, a1);
  sub_22F1D2E60("__builtin_bit_cast", 0x12uLL, 388, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_available", 0x13uLL, 389, 0xFFFE7FFu, a2, a1);
  sub_22F1D2E60("__builtin_sycl_unique_stable_name", 0x21uLL, 390, 0x1000000u, a2, a1);
  sub_22F1D2E60("__builtin_unsafe_forge_bidi_indexable", 0x25uLL, 392, 0x2000000u, a2, a1);
  sub_22F1D2E60("__builtin_unsafe_forge_single", 0x1DuLL, 393, 0x2000000u, a2, a1);
  sub_22F1D2E60("__builtin_get_pointer_lower_bound", 0x21uLL, 394, 0x2000000u, a2, a1);
  sub_22F1D2E60("__builtin_get_pointer_upper_bound", 0x21uLL, 395, 0x2000000u, a2, a1);
  sub_22F1D2E60("__builtin_terminated_by_to_indexable", 0x24uLL, 396, 0x2000000u, a2, a1);
  sub_22F1D2E60("__builtin_unsafe_terminated_by_to_indexable", 0x2BuLL, 397, 0x2000000u, a2, a1);
  sub_22F1D2E60("__builtin_unsafe_terminated_by_from_indexable", 0x2DuLL, 398, 0x2000000u, a2, a1);
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    v19 = (_QWORD *)sub_22E3CB704(a1, "not_keyword", 0xBuLL);
    *v19 &= 0xFFFFFFFFFE0001FFLL;
    if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
    {
      v20 = (_QWORD *)sub_22E3CB704(a1, "class", 5uLL);
      *v20 = *v20 & 0xFFFFFFFFFE0001FFLL | 0x200;
      if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
      {
        v21 = (_QWORD *)sub_22E3CB704(a1, "compatibility_alias", 0x13uLL);
        *v21 = *v21 & 0xFFFFFFFFFE0001FFLL | 0x400;
        if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
        {
          v22 = (_QWORD *)sub_22E3CB704(a1, "defs", 4uLL);
          *v22 = *v22 & 0xFFFFFFFFFE0001FFLL | 0x600;
          if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
          {
            v23 = (_QWORD *)sub_22E3CB704(a1, "encode", 6uLL);
            *v23 = *v23 & 0xFFFFFFFFFE0001FFLL | 0x800;
            if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
            {
              v24 = (_QWORD *)sub_22E3CB704(a1, "end", 3uLL);
              *v24 = *v24 & 0xFFFFFFFFFE0001FFLL | 0xA00;
              if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
              {
                v25 = (_QWORD *)sub_22E3CB704(a1, "implementation", 0xEuLL);
                *v25 = *v25 & 0xFFFFFFFFFE0001FFLL | 0xC00;
                if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                {
                  v26 = (_QWORD *)sub_22E3CB704(a1, "interface", 9uLL);
                  *v26 = *v26 & 0xFFFFFFFFFE0001FFLL | 0xE00;
                  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                  {
                    v27 = (_QWORD *)sub_22E3CB704(a1, "private", 7uLL);
                    *v27 = *v27 & 0xFFFFFFFFFE0001FFLL | 0x1000;
                    if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                    {
                      v28 = (_QWORD *)sub_22E3CB704(a1, "protected", 9uLL);
                      *v28 = *v28 & 0xFFFFFFFFFE0001FFLL | 0x1200;
                      if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                      {
                        v29 = (_QWORD *)sub_22E3CB704(a1, "protocol", 8uLL);
                        *v29 = *v29 & 0xFFFFFFFFFE0001FFLL | 0x1400;
                        if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                        {
                          v30 = (_QWORD *)sub_22E3CB704(a1, "public", 6uLL);
                          *v30 = *v30 & 0xFFFFFFFFFE0001FFLL | 0x1600;
                          if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                          {
                            v31 = (_QWORD *)sub_22E3CB704(a1, "selector", 8uLL);
                            *v31 = *v31 & 0xFFFFFFFFFE0001FFLL | 0x1800;
                            if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                            {
                              v32 = (_QWORD *)sub_22E3CB704(a1, "throw", 5uLL);
                              *v32 = *v32 & 0xFFFFFFFFFE0001FFLL | 0x1A00;
                              if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                              {
                                v33 = (_QWORD *)sub_22E3CB704(a1, "try", 3uLL);
                                *v33 = *v33 & 0xFFFFFFFFFE0001FFLL | 0x1C00;
                                if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                {
                                  v34 = (_QWORD *)sub_22E3CB704(a1, "catch", 5uLL);
                                  *v34 = *v34 & 0xFFFFFFFFFE0001FFLL | 0x1E00;
                                  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                  {
                                    v35 = (_QWORD *)sub_22E3CB704(a1, "finally", 7uLL);
                                    *v35 = *v35 & 0xFFFFFFFFFE0001FFLL | 0x2000;
                                    if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                    {
                                      v36 = (_QWORD *)sub_22E3CB704(a1, "synchronized", 0xCuLL);
                                      *v36 = *v36 & 0xFFFFFFFFFE0001FFLL | 0x2200;
                                      if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                      {
                                        v37 = (_QWORD *)sub_22E3CB704(a1, "autoreleasepool", 0xFuLL);
                                        *v37 = *v37 & 0xFFFFFFFFFE0001FFLL | 0x2400;
                                        if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                        {
                                          v38 = (_QWORD *)sub_22E3CB704(a1, "property", 8uLL);
                                          *v38 = *v38 & 0xFFFFFFFFFE0001FFLL | 0x2600;
                                          if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                          {
                                            v39 = (_QWORD *)sub_22E3CB704(a1, "package", 7uLL);
                                            *v39 = *v39 & 0xFFFFFFFFFE0001FFLL | 0x2800;
                                            if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                            {
                                              v40 = (_QWORD *)sub_22E3CB704(a1, "required", 8uLL);
                                              *v40 = *v40 & 0xFFFFFFFFFE0001FFLL | 0x2A00;
                                              if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                              {
                                                v41 = (_QWORD *)sub_22E3CB704(a1, "optional", 8uLL);
                                                *v41 = *v41 & 0xFFFFFFFFFE0001FFLL | 0x2C00;
                                                if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                                {
                                                  v42 = (_QWORD *)sub_22E3CB704(a1, "synthesize", 0xAuLL);
                                                  *v42 = *v42 & 0xFFFFFFFFFE0001FFLL | 0x2E00;
                                                  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                                  {
                                                    v43 = (_QWORD *)sub_22E3CB704(a1, "dynamic", 7uLL);
                                                    *v43 = *v43 & 0xFFFFFFFFFE0001FFLL | 0x3000;
                                                    if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                                    {
                                                      v44 = (_QWORD *)sub_22E3CB704(a1, "import", 6uLL);
                                                      *v44 = *v44 & 0xFFFFFFFFFE0001FFLL | 0x3200;
                                                      if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
                                                      {
                                                        v45 = (_QWORD *)sub_22E3CB704(a1, "available", 9uLL);
                                                        *v45 = *v45 & 0xFFFFFFFFFE0001FFLL | 0x3400;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)(a2 + 140) & 0x10000000000000) != 0)
    sub_22F1D2E60("__unknown_anytype", 0x11uLL, 391, 0xFFFE7FFu, a2, a1);
  v15 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x10000000) != 0)
  {
    sub_22F1D2E60("__declspec", 0xAuLL, 302, 0xFFFE7FFu, a2, a1);
    v15 = *(_QWORD *)a2;
  }
  if ((v15 & 0x8000000) != 0)
  {
    sub_22F1D2E60("__ieee128", 9uLL, 197, 0xFFFE7FFu, a2, a1);
    v15 = *(_QWORD *)a2;
  }
  if ((v15 & 0x400000) != 0)
    sub_22F1D2E60("bfloat", 6uLL, 358, 0x8000000u, a2, a1);
  v16 = *(_QWORD *)(a2 + 124);
  if ((v16 & 0x4000000) != 0)
  {
    sub_22F1D2E60("object_data", 0xBuLL, 324, 0x8000000u, a2, a1);
    v16 = *(_QWORD *)(a2 + 124);
  }
  v17 = *(_QWORD *)(a2 + 116);
  if ((v16 & 0x1000000000) != 0)
  {
    sub_22F1D2E60("ray_data", 8uLL, 323, 0x8000000u, a2, a1);
    v16 = *(_QWORD *)(a2 + 124);
    v17 = *(_QWORD *)(a2 + 116);
  }
  if ((v16 & 0x8000000000000) != 0)
  {
    sub_22F1D2E60("restrict", 8uLL, 98, 0x8000000u, a2, a1);
    v16 = *(_QWORD *)(a2 + 124);
    v17 = *(_QWORD *)(a2 + 116);
  }
  if ((v16 & 0x8000) != 0)
  {
    sub_22F1D2E60("threadgroup_imageblock", 0x16uLL, 322, 0x8000000u, a2, a1);
    v17 = *(_QWORD *)(a2 + 116);
  }
  if ((v17 & 0x4000000000000000) != 0)
    sub_22F1D2E60("coherent", 8uLL, 325, 0x8000000u, a2, a1);
  result = (_QWORD *)sub_22E3CB704(a1, "import", 6uLL);
  *result |= 0x1080000000uLL;
  return result;
}

llvm::StringMapImpl *sub_22F41F1AC(llvm::StringMapImpl *a1, uint64_t a2, uint64_t a3)
{
  llvm::StringMapImpl *v6;

  v6 = (llvm::StringMapImpl *)llvm::StringMapImpl::StringMapImpl(a1);
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = (char *)v6 + 56;
  *((_QWORD *)v6 + 13) = 0;
  *((_QWORD *)v6 + 6) = 0x400000000;
  *((_QWORD *)v6 + 11) = (char *)v6 + 104;
  *((_QWORD *)v6 + 12) = 0;
  *((_QWORD *)v6 + 14) = 1;
  *((_QWORD *)v6 + 15) = a3;
  sub_22F41B5E0(v6, a2);
  return a1;
}

BOOL sub_22F41F21C(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v6[109];

  v6[108] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 1) & 1) == 0 || !sub_22F1D2F98(a1, (uint64_t *)a2))
    return 0;
  sub_22E71FFBC((uint64_t)v6, (__int128 *)a2);
  v6[0] &= 0xFFFFFFFFFFFFECFFLL;
  v4 = !sub_22F1D2F98(a1, v6);
  sub_22E54B4D4((uint64_t)v6);
  return v4;
}

uint64_t sub_22F41F2C8(unsigned int a1)
{
  return (a1 >> 4) ^ (a1 >> 9);
}

uint64_t sub_22F41F2D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 & 7;
  if (v1 < 2)
    return 0;
  if ((_DWORD)v1 == 2)
    return 1;
  return (*(_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8) - 3);
}

void sub_22F41F308(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_22F1D3D6C((uint64_t *)a1, v2);
}

uint64_t sub_22F41F330(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t result;
  _DWORD *v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  BOOL v14;
  BOOL v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  BOOL v37;

  v1 = a1 & 7;
  v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (v1 == 7)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(unsigned int **)(v3 + 16);
      v7 = *v4;
      v6 = v4 + 4;
      result = v7;
      goto LABEL_4;
    }
  }
  else if (v2)
  {
    v9 = *(unsigned int **)(v2 + 16);
    v10 = *v9;
    v6 = v9 + 4;
    result = v10;
    if (v1 == 1)
    {
      switch((int)result)
      {
        case 4:
          if (*v6 != 1718379891)
          {
            result = 4;
            goto LABEL_38;
          }
          return 12;
        case 6:
          if (*v6 != 1635018098 || *((_WORD *)v6 + 2) != 28265)
          {
            result = 6;
            goto LABEL_38;
          }
          return 10;
        case 7:
          if (*v6 == 1818322276 && *(_DWORD *)((char *)v6 + 3) == 1668246636)
            return 7;
          if (*v6 != 1701602674 || *(_DWORD *)((char *)v6 + 3) != 1702060389)
          {
            result = 7;
            goto LABEL_38;
          }
          return 9;
        case 8:
          result = 8;
          if (*(_QWORD *)v6 != 0x657A696C616E6966)
            goto LABEL_38;
          return result;
        case 10:
          if (*(_QWORD *)v6 != 0x696C616974696E69 || *((_WORD *)v6 + 4) != 25978)
          {
            result = 10;
            goto LABEL_38;
          }
          return 13;
        case 11:
          if (*(_QWORD *)v6 == 0x656C65726F747561 && *(_QWORD *)((char *)v6 + 3) == 0x657361656C65726FLL)
            return 6;
          v37 = *(_QWORD *)v6 == 0x6F436E6961746572 && *(_QWORD *)((char *)v6 + 3) == 0x746E756F436E6961;
          result = 11;
          if (!v37)
            goto LABEL_38;
          return result;
        default:
          break;
      }
    }
LABEL_4:
    if ((_DWORD)result == 27)
    {
      if (*(_QWORD *)v6 != 0x536D726F66726570
        || *((_QWORD *)v6 + 1) != 0x49726F7463656C65
        || *((_QWORD *)v6 + 2) != 0x6F72676B6361426ELL
        || *(_QWORD *)((char *)v6 + 19) != 0x646E756F72676B63)
      {
        v14 = *(_QWORD *)v6 == 0x536D726F66726570 && *((_QWORD *)v6 + 1) == 0x4F726F7463656C65;
        v15 = v14 && *((_QWORD *)v6 + 2) == 0x7268546E69614D6ELL;
        if (!v15 || *(_QWORD *)((char *)v6 + 19) != 0x6461657268546E69)
        {
          result = 27;
          goto LABEL_38;
        }
      }
    }
    else
    {
      if ((_DWORD)result != 15)
      {
        if (!result)
          return result;
        goto LABEL_38;
      }
      if (*(_QWORD *)v6 != 0x536D726F66726570 || *(_QWORD *)((char *)v6 + 7) != 0x726F7463656C6553)
      {
        result = 15;
LABEL_38:
        v17 = 0;
        while (1)
        {
          v18 = *((char *)v6 + v17);
          if (v18 != 95)
            break;
          if (result == ++v17)
            return 0;
        }
        v19 = result - 4;
        v20 = result - v17;
        v21 = (unsigned __int16 *)((char *)v6 + v17);
        if (v18 <= 104)
        {
          if (v18 == 97)
          {
            if (v20 >= 5 && (result - 5 == v17 || (word_22F4ADB24[*((unsigned __int8 *)v6 + v17 + 5)] & 0x40) == 0))
            {
              v29 = *(_DWORD *)v21;
              v30 = *((unsigned __int8 *)v21 + 4);
              if (v29 == 1869376609 && v30 == 99)
                return 1;
            }
          }
          else
          {
            v25 = v18 == 99 && v20 >= 4;
            if (v25
              && (v19 == v17 || (word_22F4ADB24[*((unsigned __int8 *)v6 + v17 + 4)] & 0x40) == 0)
              && *(_DWORD *)v21 == 2037411683)
            {
              return 2;
            }
          }
        }
        else if (v18 == 105)
        {
          if (v20 >= 4
            && (v19 == v17 || (word_22F4ADB24[*((unsigned __int8 *)v6 + v17 + 4)] & 0x40) == 0)
            && *(_DWORD *)v21 == 1953066601)
          {
            return 3;
          }
        }
        else if (v18 == 109)
        {
          if (v20 >= 0xB && (result - 11 == v17 || (word_22F4ADB24[*((unsigned __int8 *)v6 + v17 + 11)] & 0x40) == 0))
          {
            v26 = *(_QWORD *)v21;
            v27 = *(_QWORD *)((char *)v21 + 3);
            if (v26 == 0x43656C626174756DLL && v27 == 0x79706F43656C6261)
              return 4;
          }
        }
        else if (v18 == 110
               && v20 >= 3
               && (result - 3 == v17 || (word_22F4ADB24[*((unsigned __int8 *)v6 + v17 + 3)] & 0x40) == 0))
        {
          v22 = *v21;
          v23 = *((unsigned __int8 *)v21 + 2);
          if (v22 == 25966 && v23 == 119)
            return 5;
        }
        return 0;
      }
    }
    return 14;
  }
  return 0;
}

BOOL sub_22F41F810(uint64_t a1)
{
  unint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((~(_BYTE)a1 & 7) == 0)
    v1 = *(_QWORD *)(v1 + 16);
  if (!v1)
    return 0;
  v2 = *(unsigned int **)(v1 + 16);
  v3 = *v2;
  v4 = *((char *)v2 + 16);
  if (v4 > 107)
  {
    if (v4 == 108)
    {
      if (v3 == 25)
      {
        v16 = *((_QWORD *)v2 + 2);
        v17 = *((_QWORD *)v2 + 3);
        v18 = *((_QWORD *)v2 + 4);
        v13 = *((unsigned __int8 *)v2 + 40);
        v14 = v16 == 0x657A696C61636F6CLL && v17 == 0x57676E6972745364 && v18 == 0x616D726F46687469;
        v15 = 116;
        return v14 && v13 == v15;
      }
    }
    else if (v4 == 115)
    {
      if ((_DWORD)v3 != 16)
      {
        if ((_DWORD)v3 != 23)
          return 0;
        v7 = *((_QWORD *)v2 + 2);
        v8 = *((_QWORD *)v2 + 3);
        v9 = *(_QWORD *)((char *)v2 + 31);
        v10 = v7 == 0x7942676E69727473 && v8 == 0x6E69646E65707041;
        return v10 && v9 == 0x74616D726F46676ELL;
      }
      v21 = *((_QWORD *)v2 + 2);
      v22 = *((_QWORD *)v2 + 3);
      v23 = 0x6957676E69727473;
      return v21 == v23 && v22 == 0x74616D726F466874;
    }
    return 0;
  }
  if (v4 == 97)
  {
    if (v3 == 12)
    {
      v12 = *((_QWORD *)v2 + 2);
      v13 = v2[6];
      v14 = v12 == 0x6F46646E65707061;
      v15 = 1952542066;
      return v14 && v13 == v15;
    }
    return 0;
  }
  if (v4 != 105 || v3 != 14)
    return 0;
  v21 = *((_QWORD *)v2 + 2);
  v22 = *(_QWORD *)((char *)v2 + 22);
  v23 = 0x6874695774696E69;
  return v21 == v23 && v22 == 0x74616D726F466874;
}

uint64_t sub_22F41F9AC@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  *(_QWORD *)a3 = a3 + 24;
  *(_OWORD *)(a3 + 8) = xmmword_22F44E300;
  sub_22E61131C(a3, "set", "");
  result = sub_22E61131C(a3, a1, &a1[a2]);
  v7 = *(unsigned __int8 *)(*(_QWORD *)a3 + 3);
  if ((word_22F4ADB24[v7] & 0x40) != 0)
    LOBYTE(v7) = v7 - 32;
  *(_BYTE *)(*(_QWORD *)a3 + 3) = v7;
  return result;
}

uint64_t sub_22F41FA34(llvm::StringMapImpl *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  __int128 v10;
  _WORD v11[32];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)(a3 + 16);
  v5 = *v4;
  v9 = v11;
  qmemcpy(v11, "set", 3);
  v10 = xmmword_22F549660;
  sub_22E61131C((uint64_t)&v9, (_BYTE *)v4 + 16, (_BYTE *)v4 + v5 + 16);
  v6 = *((unsigned __int8 *)v9 + 3);
  if ((word_22F4ADB24[v6] & 0x40) != 0)
    LOBYTE(v6) = v6 - 32;
  *((_BYTE *)v9 + 3) = v6;
  v7 = sub_22E3CB704(a1, v9, v10);
  if (v9 != v11)
    free(v9);
  return v7 | 2;
}

_QWORD *sub_22F41FB08(_QWORD *a1)
{
  _OWORD *v2;
  _QWORD *v3;
  _OWORD *v4;
  _QWORD *v5;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v3 = v2 + 6;
  v2[3] = 0u;
  v4 = v2 + 3;
  v5 = (_QWORD *)llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)v2);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  v5[5] = 0x400000000;
  *v3 = 0;
  v5[10] = v3;
  v5[11] = 0;
  v5[13] = 1;
  *a1 = v5;
  return a1;
}

llvm::FoldingSetBase **sub_22F41FB98(llvm::FoldingSetBase **a1)
{
  llvm::FoldingSetBase *v2;

  v2 = *a1;
  sub_22E3B4EF4((uint64_t)*a1 + 16);
  llvm::FoldingSetBase::~FoldingSetBase(v2);
  MEMORY[0x2348A0E9C]();
  return a1;
}

uint64_t sub_22F41FBE0(int a1)
{
  return qword_24FAE0FD8[a1];
}

uint64_t sub_22F41FBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 8;
  else
    v3 = 0;
  return sub_22F1D3F9C(a3, (uint64_t *)(v3 + 16), *(_DWORD *)v3 - 3);
}

unint64_t sub_22F41FC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2)
    v4 = a2 - 8;
  else
    v4 = 0;
  sub_22F1D3F9C(a3, (uint64_t *)(v4 + 16), *(_DWORD *)v4 - 3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

unint64_t sub_22F41FC54(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 56);
  if ((v1 & 0x100000000) != 0)
  {
    v3 = *(_DWORD *)(a1 + 64);
    if (v3 != 100)
      return (v3 / 100);
    LODWORD(v1) = 100;
  }
  return ((int)v1 / 100) | ((unint64_t)((((103 * ((int)v1 % 100)) >> 15) & 1)
                                                           + ((103 * ((int)v1 % 100)) >> 10)) << 32) | 0x8000000000000000;
}

llvm::raw_ostream *sub_22F41FCD0(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  llvm *v14;
  llvm::raw_ostream *v15;
  llvm *v16;
  llvm::raw_ostream *v17;
  llvm *v18;
  llvm::raw_ostream *v19;
  llvm *v20;
  llvm::raw_ostream *v21;
  llvm *v22;
  llvm::raw_ostream *v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  llvm *v26;
  llvm::raw_ostream *v27;
  llvm *v28;
  llvm::raw_ostream *v29;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_22E47DAC0(v2, "\n FPContractMode ");
  v3 = (llvm *)llvm::raw_ostream::operator<<();
  v4 = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = sub_22E47DAC0(v4, "\n RoundingMode ");
  v6 = sub_22F40326C(v5, (*(unsigned __int8 *)a1 >> 2) & 7);
  v7 = (llvm::raw_ostream *)llvm::errs(v6);
  sub_22E47DAC0(v7, "\n FPExceptionMode ");
  v8 = (llvm *)llvm::raw_ostream::operator<<();
  v9 = (llvm::raw_ostream *)llvm::errs(v8);
  sub_22E47DAC0(v9, "\n AllowFEnvAccess ");
  v10 = (llvm *)llvm::raw_ostream::operator<<();
  v11 = (llvm::raw_ostream *)llvm::errs(v10);
  sub_22E47DAC0(v11, "\n AllowFPReassociate ");
  v12 = (llvm *)llvm::raw_ostream::operator<<();
  v13 = (llvm::raw_ostream *)llvm::errs(v12);
  sub_22E47DAC0(v13, "\n NoHonorNaNs ");
  v14 = (llvm *)llvm::raw_ostream::operator<<();
  v15 = (llvm::raw_ostream *)llvm::errs(v14);
  sub_22E47DAC0(v15, "\n NoHonorInfs ");
  v16 = (llvm *)llvm::raw_ostream::operator<<();
  v17 = (llvm::raw_ostream *)llvm::errs(v16);
  sub_22E47DAC0(v17, "\n NoSignedZero ");
  v18 = (llvm *)llvm::raw_ostream::operator<<();
  v19 = (llvm::raw_ostream *)llvm::errs(v18);
  sub_22E47DAC0(v19, "\n AllowReciprocal ");
  v20 = (llvm *)llvm::raw_ostream::operator<<();
  v21 = (llvm::raw_ostream *)llvm::errs(v20);
  sub_22E47DAC0(v21, "\n AllowApproxFunc ");
  v22 = (llvm *)llvm::raw_ostream::operator<<();
  v23 = (llvm::raw_ostream *)llvm::errs(v22);
  sub_22E47DAC0(v23, "\n FPEvalMethod ");
  v24 = (llvm *)llvm::raw_ostream::operator<<();
  v25 = (llvm::raw_ostream *)llvm::errs(v24);
  sub_22E47DAC0(v25, "\n Float16ExcessPrecision ");
  v26 = (llvm *)llvm::raw_ostream::operator<<();
  v27 = (llvm::raw_ostream *)llvm::errs(v26);
  sub_22E47DAC0(v27, "\n BFloat16ExcessPrecision ");
  v28 = (llvm *)llvm::raw_ostream::operator<<();
  v29 = (llvm::raw_ostream *)llvm::errs(v28);
  return sub_22E47DAC0(v29, "\n");
}

BOOL sub_22F41FE64(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_22F4201F4(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return v4 != 0;
}

uint64_t sub_22F41FEF0(uint64_t a1)
{
  int Key;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 232))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 200)
                     + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * Key) + 8));
}

uint64_t sub_22F41FF48(uint64_t a1, void *a2, size_t a3)
{
  int Key;
  uint64_t v7;
  char *v9;
  __int16 v10;
  unsigned int v11;

  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 232))
    return *(_QWORD *)(*(_QWORD *)(a1 + 200)
                     + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * Key) + 8));
  if ((*(_WORD *)(a1 + 1344) & 0x200) == 0)
    return 0;
  v7 = operator new();
  v9 = sub_22F1D7750((char *)v7, a2, a3, 0, a1, 0, (*(unsigned __int16 *)(a1 + 1344) >> 10) & 1, 0);
  v10 = *(_WORD *)(a1 + 1344);
  *((_WORD *)v9 + 672) = *((_WORD *)v9 + 672) & 0xF1FF | v10 & 0xE00;
  if ((v10 & 0x800) != 0)
  {
    v11 = *(_DWORD *)(v7 + 1480);
    if (v11 >= *(_DWORD *)(v7 + 1484))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(v7 + 1480);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 1472) + 8 * v11) = 4;
    ++*(_DWORD *)(v7 + 1480);
  }
  return v7;
}

void sub_22F420060(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 408;
  v7[0] = a1;
  sub_22F275184(a1 + 408, v7, (uint64_t)&v9);
  v3 = *(_BYTE **)(a1 + 1384);
  v4 = &v3[8 * *(unsigned int *)(a1 + 1392)];
  v9 = v11;
  v10 = 0x1000000000;
  sub_22F2633B0((uint64_t)&v9, v3, v4);
  while ((_DWORD)v10)
  {
    v6 = 0;
    v5 = *((_QWORD *)v9 + v10 - 1);
    LODWORD(v10) = v10 - 1;
    v6 = v5;
    sub_22F275184(v2, &v6, (uint64_t)v7);
    if (v8)
      sub_22F1D93A0(v6, (uint64_t)&v9);
  }
  if (v9 != v11)
    free(v9);
}

uint64_t sub_22F420160(llvm *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)llvm::errs(a1);
  return sub_22F1D9648((uint64_t)a1, v2, 0, 1);
}

uint64_t sub_22F420190(uint64_t result, uint64_t a2)
{
  __int128 v2;
  _OWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  v2 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 72) = a2;
  v3 = *(_OWORD **)(a2 + 40);
  if (v3)
    *(_OWORD *)(result + 16) = *v3;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 32);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 256);
  if (v5)
  {
    do
    {
      v6 = (uint64_t *)v5;
      v7 = *(_QWORD *)(v5 + 8);
      if ((v7 & 2) == 0)
        break;
      v5 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v5);
    v8 = *v6;
    *(_QWORD *)(result + 32) = v6 + 4;
    *(_QWORD *)(result + 40) = v8;
  }
  return result;
}

_QWORD *sub_22F4201F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F4202AC(a1, *a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 2;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_22F420350((_DWORD *)a1, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 2;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_22F4202AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F420350(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_22F1DB648((uint64_t)a1, v6);
  v8 = 0;
  sub_22F4202AC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F420410(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F4202AC((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

llvm::raw_ostream *sub_22F4204C8(llvm::raw_ostream *a1, int *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _QWORD v7[2];

  v4 = *a2;
  if (v4 <= 7)
    sub_22E47DAC0(a1, off_24FAE1780[v4]);
  v7[0] = 0;
  v7[1] = 0;
  if (sub_22E3B38EC(v7, a2 + 1))
  {
    v5 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v5 + 1;
      *v5 = 45;
    }
    llvm::operator<<();
  }
  return a1;
}

BOOL sub_22F420564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int Key;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  v10 = llvm::StringMapImpl::FindKey();
  if (v10 == -1)
    v11 = *(unsigned int *)(a1 + 8);
  else
    v11 = v10;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) + 8;
  if (sub_22F420670(v12, a4) || sub_22F4206F4(v12, a4))
    return sub_22F420778(a1, a2, a3, a4);
  v13 = llvm::StringMapImpl::FindKey();
  if (v13 == -1 || v13 == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v13) + 25) != 0;
}

BOOL sub_22F420670(uint64_t a1, uint64_t a2)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (sub_22F1D46D4(a2) < *(_DWORD *)(a1 + 4))
    return 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = sub_22F1D46D4(a2);
  if (v6 == 200)
    v7 = 8;
  else
    v7 = 16;
  if (v6 == 120)
    v8 = 4;
  else
    v8 = v7;
  if (v6 == 100)
    v9 = 1;
  else
    v9 = 2;
  if (v6 > 119)
    v9 = v8;
  return (v9 & v5) != 0;
}

BOOL sub_22F4206F4(uint64_t a1, uint64_t a2)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (sub_22F1D46D4(a2) < *(_DWORD *)(a1 + 4))
    return 0;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = sub_22F1D46D4(a2);
  if (v6 == 200)
    v7 = 8;
  else
    v7 = 16;
  if (v6 == 120)
    v8 = 4;
  else
    v8 = v7;
  if (v6 == 100)
    v9 = 1;
  else
    v9 = 2;
  if (v6 > 119)
    v9 = v8;
  return (v9 & v5) != 0;
}

BOOL sub_22F420778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int Key;
  uint64_t v8;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8 * Key);
  return *(_BYTE *)(v8 + 24) && sub_22F1D46D4(a4) >= *(_DWORD *)(v8 + 12);
}

BOOL sub_22F4207E0(uint64_t a1)
{
  int Key;

  Key = llvm::StringMapImpl::FindKey();
  return Key != -1
      && Key != (unint64_t)*(unsigned int *)(a1 + 8)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * Key) + 8) != 0;
}

BOOL sub_22F420834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int Key;
  uint64_t v7;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * Key);
  return *(_BYTE *)(v7 + 24) && sub_22F420670(v7 + 8, a4);
}

BOOL sub_22F420898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int Key;
  uint64_t v7;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * Key);
  return *(_BYTE *)(v7 + 24) && sub_22F4206F4(v7 + 8, a4);
}

BOOL sub_22F4208FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22F420834(a1, a2, a3, a4) || sub_22F420898(a1, a2, a3, a4);
}

BOOL sub_22F420958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int Key;
  uint64_t v9;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * Key);
  return *(_BYTE *)(v9 + 24)
      && sub_22F1D46D4(a4) >= *(_DWORD *)(v9 + 12)
      && !sub_22F420834(a1, a2, a3, a4)
      && !sub_22F420898(a1, a2, a3, a4);
}

llvm::StringMapImpl *sub_22F420A08(llvm::StringMapImpl *a1)
{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  char v9;
  uint64_t *v10;
  char v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  char v17;
  uint64_t *v18;
  char v19;
  uint64_t *v20;
  char v21;
  uint64_t *v22;
  char v23;
  uint64_t *v24;
  char v25;
  uint64_t *v26;
  char v27;
  uint64_t *v28;
  char v29;
  uint64_t *v30;
  char v31;
  uint64_t *v32;
  char v33;
  uint64_t *v34;
  char v35;
  uint64_t *v36;
  char v37;
  uint64_t *v38;
  char v39;
  uint64_t *v40;
  char v41;
  uint64_t *v42;
  char v43;
  uint64_t *v44;
  char v45;
  uint64_t *v46;
  char v47;
  uint64_t *v48;
  char v49;
  uint64_t *v50;
  char v51;
  uint64_t *v52;
  char v53;
  uint64_t *v54;
  char v55;
  uint64_t *v56;
  char v57;
  uint64_t *v58;
  char v59;
  uint64_t *v60;
  char v61;
  uint64_t *v62;
  char v63;
  uint64_t *v64;
  char v65;
  uint64_t *v66;
  char v67;
  uint64_t *v68;
  char v69;
  uint64_t *v70;
  char v71;
  uint64_t *v72;
  char v73;
  uint64_t *v74;
  char v75;
  uint64_t *v76;
  char v77;
  uint64_t *v78;
  char v79;
  uint64_t *v80;
  char v81;
  uint64_t *v82;
  char v83;
  uint64_t *v84;
  char v85;
  uint64_t *v86;
  char v87;
  uint64_t *v88;
  char v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int16 v136;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0x2000000000;
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 0x1E00000064;
  HIDWORD(v135) = 0;
  v136 = 0;
  v2 = sub_22F1DC194(a1, "cl_khr_byte_addressable_store", 0x1DuLL, (uint64_t)&v135);
  if (!v3)
  {
    v91 = *v2;
    *(_OWORD *)(v91 + 8) = v135;
    *(_WORD *)(v91 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 0x1E00000064;
  HIDWORD(v135) = 0;
  v136 = 0;
  v4 = sub_22F1DC194(a1, "cl_khr_global_int32_base_atomics", 0x20uLL, (uint64_t)&v135);
  if (!v5)
  {
    v92 = *v4;
    *(_OWORD *)(v92 + 8) = v135;
    *(_WORD *)(v92 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 0x1E00000064;
  HIDWORD(v135) = 0;
  v136 = 0;
  v6 = sub_22F1DC194(a1, "cl_khr_global_int32_extended_atomics", 0x24uLL, (uint64_t)&v135);
  if (!v7)
  {
    v93 = *v6;
    *(_OWORD *)(v93 + 8) = v135;
    *(_WORD *)(v93 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 0x1E00000064;
  HIDWORD(v135) = 0;
  v136 = 0;
  v8 = sub_22F1DC194(a1, "cl_khr_local_int32_base_atomics", 0x1FuLL, (uint64_t)&v135);
  if (!v9)
  {
    v94 = *v8;
    *(_OWORD *)(v94 + 8) = v135;
    *(_WORD *)(v94 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 0x1E00000064;
  HIDWORD(v135) = 0;
  v136 = 0;
  v10 = sub_22F1DC194(a1, "cl_khr_local_int32_extended_atomics", 0x23uLL, (uint64_t)&v135);
  if (!v11)
  {
    v95 = *v10;
    *(_OWORD *)(v95 + 8) = v135;
    *(_WORD *)(v95 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 100;
  HIDWORD(v135) = 28;
  v136 = 0;
  v12 = sub_22F1DC194(a1, "cl_khr_fp64", 0xBuLL, (uint64_t)&v135);
  if (!v13)
  {
    v96 = *v12;
    *(_OWORD *)(v96 + 8) = v135;
    *(_WORD *)(v96 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v14 = sub_22F1DC194(a1, "cl_khr_fp16", 0xBuLL, (uint64_t)&v135);
  if (!v15)
  {
    v97 = *v14;
    *(_OWORD *)(v97 + 8) = v135;
    *(_WORD *)(v97 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v16 = sub_22F1DC194(a1, "cl_khr_int64_base_atomics", 0x19uLL, (uint64_t)&v135);
  if (!v17)
  {
    v98 = *v16;
    *(_OWORD *)(v98 + 8) = v135;
    *(_WORD *)(v98 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v18 = sub_22F1DC194(a1, "cl_khr_int64_extended_atomics", 0x1DuLL, (uint64_t)&v135);
  if (!v19)
  {
    v99 = *v18;
    *(_OWORD *)(v99 + 8) = v135;
    *(_WORD *)(v99 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  *(_QWORD *)((char *)&v135 + 4) = 0x800000064;
  HIDWORD(v135) = 16;
  v136 = 0;
  v20 = sub_22F1DC194(a1, "cl_khr_3d_image_writes", 0x16uLL, (uint64_t)&v135);
  if (!v21)
  {
    v100 = *v20;
    *(_OWORD *)(v100 + 8) = v135;
    *(_WORD *)(v100 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 110;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v22 = sub_22F1DC194(a1, "cles_khr_int64", 0xEuLL, (uint64_t)&v135);
  if (!v23)
  {
    v101 = *v22;
    *(_OWORD *)(v101 + 8) = v135;
    *(_WORD *)(v101 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v24 = sub_22F1DC194(a1, "cl_khr_depth_images", 0x13uLL, (uint64_t)&v135);
  if (!v25)
  {
    v102 = *v24;
    *(_OWORD *)(v102 + 8) = v135;
    *(_WORD *)(v102 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v26 = sub_22F1DC194(a1, "cl_khr_gl_msaa_sharing", 0x16uLL, (uint64_t)&v135);
  if (!v27)
  {
    v103 = *v26;
    *(_OWORD *)(v103 + 8) = v135;
    *(_WORD *)(v103 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 200;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v28 = sub_22F1DC194(a1, "cl_khr_mipmap_image", 0x13uLL, (uint64_t)&v135);
  if (!v29)
  {
    v104 = *v28;
    *(_OWORD *)(v104 + 8) = v135;
    *(_WORD *)(v104 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 200;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v30 = sub_22F1DC194(a1, "cl_khr_mipmap_image_writes", 0x1AuLL, (uint64_t)&v135);
  if (!v31)
  {
    v105 = *v30;
    *(_OWORD *)(v105 + 8) = v135;
    *(_WORD *)(v105 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 200;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v32 = sub_22F1DC194(a1, "cl_khr_srgb_image_writes", 0x18uLL, (uint64_t)&v135);
  if (!v33)
  {
    v106 = *v32;
    *(_OWORD *)(v106 + 8) = v135;
    *(_WORD *)(v106 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 200;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v34 = sub_22F1DC194(a1, "cl_khr_subgroups", 0x10uLL, (uint64_t)&v135);
  if (!v35)
  {
    v107 = *v34;
    *(_OWORD *)(v107 + 8) = v135;
    *(_WORD *)(v107 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v36 = sub_22F1DC194(a1, "cl_clang_storage_class_specifiers", 0x21uLL, (uint64_t)&v135);
  if (!v37)
  {
    v108 = *v36;
    *(_OWORD *)(v108 + 8) = v135;
    *(_WORD *)(v108 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v38 = sub_22F1DC194(a1, "__cl_clang_function_pointers", 0x1CuLL, (uint64_t)&v135);
  if (!v39)
  {
    v109 = *v38;
    *(_OWORD *)(v109 + 8) = v135;
    *(_WORD *)(v109 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v40 = sub_22F1DC194(a1, "__cl_clang_variadic_functions", 0x1DuLL, (uint64_t)&v135);
  if (!v41)
  {
    v110 = *v40;
    *(_OWORD *)(v110 + 8) = v135;
    *(_WORD *)(v110 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v42 = sub_22F1DC194(a1, "__cl_clang_non_portable_kernel_param_types", 0x2AuLL, (uint64_t)&v135);
  if (!v43)
  {
    v111 = *v42;
    *(_OWORD *)(v111 + 8) = v135;
    *(_WORD *)(v111 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v44 = sub_22F1DC194(a1, "__cl_clang_bitfields", 0x14uLL, (uint64_t)&v135);
  if (!v45)
  {
    v112 = *v44;
    *(_OWORD *)(v112 + 8) = v135;
    *(_WORD *)(v112 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v46 = sub_22F1DC194(a1, "cl_APPLE_BOOL_vec", 0x11uLL, (uint64_t)&v135);
  if (!v47)
  {
    v113 = *v46;
    *(_OWORD *)(v113 + 8) = v135;
    *(_WORD *)(v113 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v48 = sub_22F1DC194(a1, "cl_APPLE_vload_vstore_half", 0x1AuLL, (uint64_t)&v135);
  if (!v49)
  {
    v114 = *v48;
    *(_OWORD *)(v114 + 8) = v135;
    *(_WORD *)(v114 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v50 = sub_22F1DC194(a1, "cl_amd_media_ops", 0x10uLL, (uint64_t)&v135);
  if (!v51)
  {
    v115 = *v50;
    *(_OWORD *)(v115 + 8) = v135;
    *(_WORD *)(v115 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 100;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v52 = sub_22F1DC194(a1, "cl_amd_media_ops2", 0x11uLL, (uint64_t)&v135);
  if (!v53)
  {
    v116 = *v52;
    *(_OWORD *)(v116 + 8) = v135;
    *(_WORD *)(v116 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v54 = sub_22F1DC194(a1, "cl_arm_integer_dot_product_int8", 0x1FuLL, (uint64_t)&v135);
  if (!v55)
  {
    v117 = *v54;
    *(_OWORD *)(v117 + 8) = v135;
    *(_WORD *)(v117 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v56 = sub_22F1DC194(a1, "cl_arm_integer_dot_product_accumulate_int8", 0x2AuLL, (uint64_t)&v135);
  if (!v57)
  {
    v118 = *v56;
    *(_OWORD *)(v118 + 8) = v135;
    *(_WORD *)(v118 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v58 = sub_22F1DC194(a1, "cl_arm_integer_dot_product_accumulate_int16", 0x2BuLL, (uint64_t)&v135);
  if (!v59)
  {
    v119 = *v58;
    *(_OWORD *)(v119 + 8) = v135;
    *(_WORD *)(v119 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v60 = sub_22F1DC194(a1, "cl_arm_integer_dot_product_accumulate_saturate_int8", 0x33uLL, (uint64_t)&v135);
  if (!v61)
  {
    v120 = *v60;
    *(_OWORD *)(v120 + 8) = v135;
    *(_WORD *)(v120 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v62 = sub_22F1DC194(a1, "cl_intel_subgroups", 0x12uLL, (uint64_t)&v135);
  if (!v63)
  {
    v121 = *v62;
    *(_OWORD *)(v121 + 8) = v135;
    *(_WORD *)(v121 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v64 = sub_22F1DC194(a1, "cl_intel_subgroups_short", 0x18uLL, (uint64_t)&v135);
  if (!v65)
  {
    v122 = *v64;
    *(_OWORD *)(v122 + 8) = v135;
    *(_WORD *)(v122 + 24) = v136;
  }
  LOBYTE(v135) = 1;
  DWORD1(v135) = 120;
  *((_QWORD *)&v135 + 1) = 0;
  v136 = 0;
  v66 = sub_22F1DC194(a1, "cl_intel_device_side_avc_motion_estimation", 0x2AuLL, (uint64_t)&v135);
  if (!v67)
  {
    v123 = *v66;
    *(_OWORD *)(v123 + 8) = v135;
    *(_WORD *)(v123 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v68 = sub_22F1DC194(a1, "__opencl_c_pipes", 0x10uLL, (uint64_t)&v135);
  if (!v69)
  {
    v124 = *v68;
    *(_OWORD *)(v124 + 8) = v135;
    *(_WORD *)(v124 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v70 = sub_22F1DC194(a1, "__opencl_c_generic_address_space", 0x20uLL, (uint64_t)&v135);
  if (!v71)
  {
    v125 = *v70;
    *(_OWORD *)(v125 + 8) = v135;
    *(_WORD *)(v125 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v72 = sub_22F1DC194(a1, "__opencl_c_atomic_order_acq_rel", 0x1FuLL, (uint64_t)&v135);
  if (!v73)
  {
    v126 = *v72;
    *(_OWORD *)(v126 + 8) = v135;
    *(_WORD *)(v126 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v74 = sub_22F1DC194(a1, "__opencl_c_atomic_order_seq_cst", 0x1FuLL, (uint64_t)&v135);
  if (!v75)
  {
    v127 = *v74;
    *(_OWORD *)(v127 + 8) = v135;
    *(_WORD *)(v127 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v76 = sub_22F1DC194(a1, "__opencl_c_subgroups", 0x14uLL, (uint64_t)&v135);
  if (!v77)
  {
    v128 = *v76;
    *(_OWORD *)(v128 + 8) = v135;
    *(_WORD *)(v128 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v78 = sub_22F1DC194(a1, "__opencl_c_3d_image_writes", 0x1AuLL, (uint64_t)&v135);
  if (!v79)
  {
    v129 = *v78;
    *(_OWORD *)(v129 + 8) = v135;
    *(_WORD *)(v129 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v80 = sub_22F1DC194(a1, "__opencl_c_device_enqueue", 0x19uLL, (uint64_t)&v135);
  if (!v81)
  {
    v130 = *v80;
    *(_OWORD *)(v130 + 8) = v135;
    *(_WORD *)(v130 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v82 = sub_22F1DC194(a1, "__opencl_c_read_write_images", 0x1CuLL, (uint64_t)&v135);
  if (!v83)
  {
    v131 = *v82;
    *(_OWORD *)(v131 + 8) = v135;
    *(_WORD *)(v131 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v84 = sub_22F1DC194(a1, "__opencl_c_program_scope_global_variables", 0x29uLL, (uint64_t)&v135);
  if (!v85)
  {
    v132 = *v84;
    *(_OWORD *)(v132 + 8) = v135;
    *(_WORD *)(v132 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v86 = sub_22F1DC194(a1, "__opencl_c_fp64", 0xFuLL, (uint64_t)&v135);
  if (!v87)
  {
    v133 = *v86;
    *(_OWORD *)(v133 + 8) = v135;
    *(_WORD *)(v133 + 24) = v136;
  }
  LOBYTE(v135) = 0;
  *(_QWORD *)((char *)&v135 + 4) = 300;
  HIDWORD(v135) = 16;
  v136 = 0;
  v88 = sub_22F1DC194(a1, "__opencl_c_images", 0x11uLL, (uint64_t)&v135);
  if (!v89)
  {
    v134 = *v88;
    *(_OWORD *)(v134 + 8) = v135;
    *(_WORD *)(v134 + 24) = v136;
  }
  return a1;
}

uint64_t sub_22F421710(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v4 = (unsigned int *)result;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    for (i = *(uint64_t **)a2; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)a2;
  }
  v8 = *(_QWORD *)a2 + 8 * v5;
  if (i != (uint64_t *)v8)
  {
    v9 = *i;
    do
    {
      if (*(_BYTE *)(v9 + 8))
      {
        v10 = (const void *)(v9 + 16);
        v11 = *(_QWORD *)v9;
        result = llvm::StringMapImpl::FindKey();
        if ((_DWORD)result != -1 && (int)result != (unint64_t)v4[2])
        {
          v14 = *sub_22F2BBFD8((llvm::StringMapImpl *)v4, v10, v11);
          result = sub_22F1D46D4(a3);
          if (result >= *(_DWORD *)(v14 + 12))
          {
            result = (uint64_t)sub_22F2BBFD8((llvm::StringMapImpl *)v4, v10, v11);
            *(_BYTE *)(*(_QWORD *)result + 24) = 1;
          }
        }
      }
      do
      {
        v12 = i[1];
        ++i;
        v9 = v12;
        if (v12)
          v13 = v9 == -8;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t *)v8);
  }
  return result;
}

uint64_t sub_22F421820(uint64_t result)
{
  uint64_t v1;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    for (i = *(uint64_t **)result; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)result;
  }
  v4 = *(_QWORD *)result + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    v5 = *i;
    do
    {
      *(_BYTE *)(v5 + 25) = 0;
      do
      {
        v6 = i[1];
        ++i;
        v5 = v6;
        if (v6)
          v7 = v5 == -8;
        else
          v7 = 1;
      }
      while (v7);
    }
    while (i != (uint64_t *)v4);
  }
  return result;
}

const char *sub_22F42187C(const char *result, int a2)
{
  char **v2;
  const char *v3;

  if ((int)result <= 42)
  {
    switch((int)result)
    {
      case 9:
        v2 = off_24FAE1A48;
        return v2[a2];
      case 10:
        v2 = off_24FAE1B20;
        return v2[a2];
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
        __break(1u);
        return result;
      case 16:
        v2 = off_24FAE18A0;
        return v2[a2];
      case 17:
        v2 = off_24FAE19E0;
        return v2[a2];
      case 18:
        goto LABEL_8;
      case 22:
        v2 = off_24FAE1AD0;
        return v2[a2];
      case 23:
        v2 = off_24FAE1A68;
        return v2[a2];
      case 24:
        v3 = "static";
        goto LABEL_26;
      default:
        if ((_DWORD)result != 2)
          goto LABEL_14;
        v2 = off_24FAE1B08;
        return v2[a2];
    }
  }
  if ((int)result > 63)
  {
    if ((int)result > 70)
    {
      if ((_DWORD)result == 71)
      {
        v2 = off_24FAE18F0;
      }
      else if ((_DWORD)result == 81)
      {
LABEL_14:
        v2 = off_24FAE19C8;
      }
      else
      {
LABEL_8:
        v2 = off_24FAE1A88;
      }
      return v2[a2];
    }
    if ((_DWORD)result == 64)
      return off_24FAE18C0[a2 - 2];
    v2 = off_24FAE1AE8;
    return v2[a2];
  }
  if ((int)result > 45)
  {
    if ((_DWORD)result == 46)
    {
      v2 = off_24FAE1960;
      return v2[a2];
    }
    v3 = "concurrent";
  }
  else
  {
    if ((_DWORD)result != 43)
    {
      v2 = off_24FAE1940;
      return v2[a2];
    }
    v3 = "conditional";
  }
LABEL_26:
  if (a2 == 1)
    return "unknown";
  else
    return v3;
}

uint64_t sub_22F4219DC(unsigned int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case '!':
    case '"':
    case '$':
    case '%':
    case '+':
    case ',':
    case '.':
    case '/':
    case '6':
    case '?':
    case '@':
    case 'A':
    case 'C':
    case 'F':
    case 'G':
    case 'H':
    case 'L':
    case 'M':
    case 'Q':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Z':
    case '^':
    case 'a':
    case 'b':
    case 'c':
      return result;
    case '#':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '-':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case 'B':
    case 'D':
    case 'E':
    case 'I':
    case 'J':
    case 'K':
    case 'N':
    case 'O':
    case 'P':
    case 'R':
    case 'S':
    case 'W':
    case 'Y':
    case '[':
    case '\\':
    case ']':
    case '_':
      goto LABEL_5;
    default:
      if (a1 > 0x15 || ((1 << a1) & 0x390000) == 0)
LABEL_5:
        result = 0;
      break;
  }
  return result;
}

BOOL sub_22F421A30(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 33) > 0x34 || ((1 << (a1 - 33)) & 0x180060C0588C03) == 0)
    return (a1 - 19) < 2;
  return result;
}

BOOL sub_22F421A78(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 40) > 0x39 || ((1 << (a1 - 40)) & 0x3003000C19001F9) == 0)
    return (a1 - 19) < 2;
  return result;
}

BOOL sub_22F421AC0(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 34) > 0x34 || ((1 << (a1 - 34)) & 0x180860C0102409) == 0)
    return (a1 - 20) < 2;
  return result;
}

uint64_t sub_22F421B08(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if ((a1 - 16) > 0x38 || ((1 << (a1 - 16)) & 0x1C8000000000039) == 0)
  {
    v3 = a1 - 81;
    if (v3 > 5 || ((1 << v3) & 0x39) == 0)
      return 0;
  }
  return result;
}

uint64_t sub_22F421B60(int a1)
{
  return ((a1 - 94) < 6) & (0x3Du >> (a1 - 94));
}

BOOL sub_22F421B7C(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 70) > 0xF || ((1 << (a1 - 70)) & 0xC003) == 0)
    return (a1 - 19) < 2;
  return result;
}

void sub_22F421BB4(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F421BE0()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t result;

  v1 = *(_DWORD *)(v0 + 8);
  if (v1 >= *(_DWORD *)(v0 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1 = *(_DWORD *)(v0 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v0 + 4 * v1) = 89;
  ++*(_DWORD *)(v0 + 8);
  return result;
}

uint64_t sub_22F421EB0(llvm::SpecialCaseList **a1)
{
  llvm::SpecialCaseList *v2;
  uint64_t result;

  v2 = (llvm::SpecialCaseList *)operator new();
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  result = llvm::SpecialCaseList::createInternal();
  if ((result & 1) == 0)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v2);
    result = MEMORY[0x2348A0E9C]();
    v2 = 0;
  }
  *a1 = v2;
  return result;
}

uint64_t sub_22F421F48(uint64_t a1, int a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 16);
  if (a2 < 0)
    a2 = sub_22F423AE4(*(_QWORD *)(a1 + 16), a2);
  sub_22F1E27D0(v2, a2);
  return sub_22F1DD50C();
}

llvm::SpecialCaseList **sub_22F421FAC(llvm::SpecialCaseList **a1)
{
  llvm::SpecialCaseList *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_22F42208C(v2);
    MEMORY[0x2348A0E9C]();
  }
  return a1;
}

uint64_t sub_22F421FF0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;

  if (!a4)
    return 0;
  v7 = (_QWORD *)a1[1];
  if (a4 < 0)
    a4 = sub_22F423AE4(a1[1], a4);
  sub_22F1E27D0(v7, a4);
  return sub_22F422AE0(*a1, a2, a3);
}

void sub_22F42208C(llvm::SpecialCaseList *a1)
{
  void *v1;

  v1 = (void *)*((_QWORD *)a1 + 3);
  if (v1)
  {
    *((_QWORD *)a1 + 4) = v1;
    operator delete(v1);
    llvm::SpecialCaseList::~SpecialCaseList(a1);
  }
  else
  {
    llvm::SpecialCaseList::~SpecialCaseList(a1);
  }
}

char **sub_22F4220C4(uint64_t *a1)
{
  uint64_t v2;
  char **result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  if (llvm::SpecialCaseList::createInternal())
  {
    result = sub_22F422168((char **)v2);
  }
  else
  {
    sub_22F42208C((llvm::SpecialCaseList *)v2);
    result = (char **)MEMORY[0x2348A0E9C]();
    v2 = 0;
  }
  *a1 = v2;
  return result;
}

char **sub_22F422168(char **result)
{
  char *v1;
  char *v2;
  char **v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;

  v2 = *result;
  v1 = result[1];
  if (*result != v1)
  {
    do
    {
      v3 = result;
      v4 = llvm::SpecialCaseList::Matcher::match() != 0;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 2uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 4uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 8uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x10uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x20uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x40uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x80uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0xC0uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x200uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x400uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x800uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x1000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x2000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x4000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x8000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x10000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x20000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x40000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x80000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x100000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x200000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x400000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x800000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x1000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x2000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x4000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x8000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x10000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x1C000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x40000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x80000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x100000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x200000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x400000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x800000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0xC00000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x2000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x4000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x8000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x10000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x20000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x40000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x80000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x100000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x200000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x400000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x800000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x1000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x2000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x4000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x7E00000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x10000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x20000000000000uLL;
      v5 = llvm::SpecialCaseList::Matcher::match();
      if (llvm::SpecialCaseList::Matcher::match() | v5)
        v4 |= 0x1EFC3DF8000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x100000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x200000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x300000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x800000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0xA00000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0x2000000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0xB00000000000000uLL;
      if (llvm::SpecialCaseList::Matcher::match())
        v4 |= 0xB00062C00800000uLL;
      v6 = llvm::SpecialCaseList::Matcher::match();
      v7 = llvm::SpecialCaseList::Matcher::match();
      if (v7)
        v4 |= 0x10000uLL;
      v8 = (v7 | v6) != 0;
      if (llvm::SpecialCaseList::Matcher::match())
        v8 |= 4uLL;
      v9 = llvm::SpecialCaseList::Matcher::match();
      if (v9)
        v10 = -1;
      else
        v10 = v4;
      if (v9)
        v11 = -1;
      else
        v11 = v8;
      v12 = (uint64_t *)v3[4];
      if (v12 >= (uint64_t *)v3[5])
      {
        v13 = sub_22F1DD688(v3 + 3, v10, v11, (uint64_t)(v2 + 8));
      }
      else
      {
        *v12 = v10;
        v12[1] = v11;
        v13 = (char *)(v12 + 3);
        v12[2] = (uint64_t)(v2 + 8);
      }
      result = v3;
      v3[4] = v13;
      v2 += 40;
    }
    while (v2 != v1);
  }
  return result;
}

_QWORD *sub_22F422AAC(_QWORD *result, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  int v4;
  uint64_t v5;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  *result = v2;
  v3 = *((_BYTE *)a2 + 23);
  v4 = v3;
  v5 = v3 & 0x7F;
  if (v4 < 0)
    v5 = a2[1];
  result[1] = v5;
  return result;
}

uint64_t sub_22F422AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == v4)
    return 0;
  for (i = v3 + 16; ; i += 24)
  {
    v8 = i - 16;
    if (*(_QWORD *)(i - 16) & a2 | *(_QWORD *)(i - 8) & a3)
    {
      if (llvm::SpecialCaseList::inSectionBlame())
        break;
    }
    if (v8 + 24 == v4)
      return 0;
  }
  return 1;
}

uint64_t sub_22F422BA4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a1 | 0xC0;
  if ((a1 & 0x100) == 0)
    v2 = a1;
  if ((v2 & 0x20000000) != 0)
    v2 |= 0x1C000000uLL;
  if ((v2 & 0x1000000000) != 0)
    v2 |= 0xC00000000uLL;
  if ((v2 & 0x8000000000000) != 0)
    v2 |= 0x7E00000000000uLL;
  if ((v2 & 0x40000000000000) != 0)
    v3 = v2 | 0x1EFC3DF8000;
  else
    v3 = v2;
  v4 = v3 & 0x80000000000000 | v2 & 0x40000000000000;
  if ((v3 & 0x80000000000000) != 0)
    v3 = v2 | 0x1EFC3DF8000;
  if (v4)
    v2 |= 0x1EFC3DF8000uLL;
  v5 = v2 | 0x300000000000000;
  if ((v3 & 0x400000000000000) != 0)
    v2 |= 0x300000000000000uLL;
  else
    v5 = v3;
  v6 = v2 | 0xA00000000000000;
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2 |= 0xA00000000000000uLL;
    v5 = v6;
  }
  v7 = v2 | 0xB00000000000000;
  if ((v5 & 0x4000000000000000) == 0)
  {
    v7 = v2;
    v2 = v5;
  }
  if (v2 >= 0)
    v8 = v7;
  else
    v8 = v7 | 0xB00062C00800000;
  v9 = v8 | ((unint64_t)(a2 & 2) << 15);
  if ((a2 & 8) != 0)
    return -1;
  else
    return v9;
}

llvm::raw_ostream *sub_22F422C6C(uint64_t a1, llvm::raw_ostream *a2)
{
  int *v4;
  int v5;
  llvm::raw_ostream *result;
  _BYTE *v7;

  v5 = *(_DWORD *)(a1 + 32);
  v4 = (int *)(a1 + 32);
  if (v5)
  {
    sub_22F422CEC(v4, a2, *(_QWORD **)(a1 + 24));
    sub_22E47DAC0(a2, ": ");
  }
  result = sub_22E47DAC0(a2, *(char **)(a1 + 40));
  v7 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v7 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v7 + 1;
  *v7 = 10;
  return result;
}

llvm::raw_ostream *sub_22F422CEC(int *a1, llvm::raw_ostream *a2, _QWORD *a3)
{
  int v4;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  int v12;
  _BYTE *v13;
  char *__s;

  v4 = *a1;
  if (!*a1)
    return sub_22E47DAC0(a2, "<invalid loc>");
  if (v4 < 0)
  {
    LODWORD(__s) = sub_22F1E22F0(a3, v4);
    sub_22F422CEC(&__s, a2, a3);
    sub_22E47DAC0(a2, " <Spelling=");
    v12 = *a1;
    if (*a1 < 0)
      v12 = sub_22F1E238C(a3, v12);
    LODWORD(__s) = v12;
    result = (llvm::raw_ostream *)sub_22F422CEC(&__s, a2, a3);
    v13 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 3))
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(a2);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v13 + 1;
      *v13 = 62;
    }
  }
  else
  {
    sub_22F1E2F68((uint64_t)a3, v4, 1, (uint64_t)&__s);
    if (__s)
    {
      v6 = sub_22E47DAC0(a2, __s);
      v7 = (_BYTE *)*((_QWORD *)v6 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
      {
        llvm::raw_ostream::write(v6);
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 58;
      }
      v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v10 + 1;
        *v10 = 58;
      }
      return (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    }
    else
    {
      return sub_22E47DAC0(a2, "<invalid>");
    }
  }
  return result;
}

uint64_t sub_22F422E70(_DWORD *a1)
{
  return (37 * *a1);
}

llvm::raw_ostream *sub_22F422E80(llvm *a1, _QWORD *a2)
{
  llvm::raw_ostream *v4;
  llvm *v5;
  llvm::raw_ostream *result;
  _BYTE *v7;

  v4 = (llvm::raw_ostream *)llvm::errs(a1);
  v5 = sub_22F422CEC((int *)a1, v4, a2);
  result = (llvm::raw_ostream *)llvm::errs(v5);
  v7 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v7 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v7 + 1;
  *v7 = 10;
  return result;
}

llvm::raw_ostream *sub_22F422EE4(llvm *a1, _QWORD *a2)
{
  llvm::raw_ostream *v4;
  llvm *v5;
  llvm::raw_ostream *result;
  _BYTE *v7;

  v4 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_22F422F48((int *)a1, v4, a2);
  result = (llvm::raw_ostream *)llvm::errs(v5);
  v7 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v7 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v7 + 1;
  *v7 = 10;
  return result;
}

void sub_22F422F48(int *a1, llvm::raw_ostream *this, _QWORD *a3)
{
  _BYTE *v6;
  int v7;
  int v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13[3];
  __int128 v14;
  uint64_t v15;

  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v6 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v6 + 1;
    *v6 = 60;
  }
  v7 = *a1;
  memset(v13, 0, sizeof(v13));
  sub_22F1DFB34(&v14, this, a3, v7, v13);
  if (*a1 != a1[1])
  {
    sub_22E47DAC0(this, ", ");
    v8 = a1[1];
    v11 = v14;
    v12 = v15;
    sub_22F1DFB34(&v10, this, a3, v8, (char **)&v11);
  }
  v9 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v9 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v9 + 1;
    *v9 = 62;
  }
}

uint64_t sub_22F423044(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
    return sub_22F1E238C(*(_QWORD **)(a1 + 8), v1);
  return v1;
}

uint64_t sub_22F423080@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;

  if (*(_DWORD *)result)
  {
    v3 = result;
    result = sub_22F4230E8((uint64_t)&v6, *(_QWORD *)(result + 8), *(_DWORD *)result);
    v4 = v6;
    v5 = *(_QWORD *)(v3 + 8);
    *(_OWORD *)(a2 + 16) = v7;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    *(_DWORD *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  *(_DWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_22F4230E8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t result;
  int v7;

  v5 = a3 & 0x7FFFFFFF;
  result = sub_22E63AF88(a2, *(_DWORD *)(a2 + 304), a3 & 0x7FFFFFFF);
  if ((_DWORD)result)
  {
    v7 = *(_DWORD *)(a2 + 304);
  }
  else
  {
    result = sub_22F1E1EE8(a2, v5);
    v7 = result;
  }
  if (v7 < -1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 296) + 24))(*(_QWORD *)(a2 + 296));
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "";
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_22F423178(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_22F1DFF28(a1);
  v6 = sub_22E677168(*(_QWORD *)(a1 + 8), *(_DWORD *)a1) >> 32;
  return sub_22F1E33FC(v4, v5, v6, a2);
}

uint64_t sub_22F4231C8(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_22F1DFF28(a1);
  v6 = sub_22E677168(*(_QWORD *)(a1 + 8), *(_DWORD *)a1) >> 32;
  return sub_22F1E2E38(v4, v5, v6, a2);
}

unint64_t sub_22F423218(uint64_t a1)
{
  _QWORD *v1;
  unsigned int v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = sub_22F1DFF28(a1);
  return sub_22E6155EC(v1, v2);
}

llvm::raw_ostream *sub_22F423240(llvm *a1)
{
  return sub_22F422E80(a1, *((_QWORD **)a1 + 1));
}

const char *sub_22F423248(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)a1 & 0x7FFFFFFF;
  if (sub_22E63AF88(v3, *(_DWORD *)(v3 + 304), v4))
    v5 = *(_DWORD *)(v3 + 304);
  else
    v5 = sub_22F1E1EE8(v3, v4);
  return sub_22F1E1E1C((_QWORD *)v3, v5, a2);
}

void sub_22F4232B0(llvm::PrettyStackTraceEntry *a1)
{
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry(a1);
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F4232D4(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  char *v16;
  unsigned int v17;
  uint64_t *v18;
  char *result;
  __int128 v20;
  unsigned int v21;
  int v22;

  v22 = a2;
  *(_QWORD *)&v20 = &v22;
  v13 = sub_22F1E51FC((uint64_t **)(a1 + 144), &v22, (uint64_t)&unk_22F457020, (_DWORD **)&v20);
  v14 = v13;
  if (a6 == 1)
  {
    v17 = a3 - 1;
  }
  else
  {
    v15 = v13[6];
    if (v13[5] == v15)
      v16 = 0;
    else
      v16 = (char *)v15 - 20;
    if (a6 == 2)
      v16 = sub_22F1E096C(a1, v22, *((_DWORD *)v16 + 4));
    if (v16)
    {
      v17 = *((_DWORD *)v16 + 4);
      if (a5 == -1)
        a5 = *((_DWORD *)v16 + 2);
    }
    else
    {
      v17 = 0;
    }
  }
  *(_QWORD *)&v20 = __PAIR64__(a4, a3);
  *((_QWORD *)&v20 + 1) = __PAIR64__(a7, a5);
  v21 = v17;
  v18 = v14[6];
  if (v18 < v14[7])
  {
    *(_OWORD *)v18 = v20;
    *((_DWORD *)v18 + 4) = v21;
    result = (char *)v18 + 20;
  }
  else
  {
    result = sub_22F1E52E4((void **)v14 + 5, (uint64_t)&v20);
  }
  v14[6] = (uint64_t *)result;
  return result;
}

uint64_t sub_22F4233E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x400000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 1;
  *(_BYTE *)(a1 + 145) = a4;
  *(_BYTE *)(a1 + 146) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x600000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 480) = a1 + 496;
  *(_QWORD *)(a1 + 488) = 0x200000000;
  sub_22F4234E4(a1);
  *(_QWORD *)(a2 + 64) = a1;
  return a1;
}

__n128 sub_22F4234E4(uint64_t a1)
{
  uint64_t v2;
  __n128 *v3;
  __n128 *v4;
  __n128 result;
  unsigned int v6;
  __int128 v7;

  *(_DWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  v2 = *(_QWORD *)(a1 + 312);
  if (v2)
    sub_22F4235A4(v2);
  *(_QWORD *)(a1 + 216) = 0x8000000000000000;
  v6 = 0x80000000;
  v7 = xmmword_22F549960;
  v3 = (__n128 *)sub_22E4EF088(a1 + 184, (unint64_t)&v6, 1);
  v4 = (__n128 *)(*(_QWORD *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 192));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 216) += 2;
  return result;
}

void sub_22F4235A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v1 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v1)
    {
      v2 = 0;
      v3 = 8 * v1;
      do
      {
        *(_QWORD *)(*(_QWORD *)a1 + v2) = 0;
        v2 += 8;
      }
      while (v3 != v2);
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  v5 = (_QWORD *)(a1 + 152);
  v4 = *(_QWORD **)(a1 + 152);
  *(v5 - 3) = *(v5 - 4);
  sub_22F1E505C(v4);
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
}

uint64_t sub_22F423608(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _OWORD v6[2];
  _OWORD v7[2];
  char v8;

  result = *(_QWORD *)(a1 + 440);
  if (!result)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_BYTE *)(v3 + 48) &= 0xF0u;
    v4 = *(uint64_t **)(a1 + 440);
    *(_QWORD *)(a1 + 440) = v3;
    if (v4)
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      MEMORY[0x2348A0E9C](v4, 0x1070C409107E0D6);
      v3 = *(_QWORD *)(a1 + 440);
    }
    sub_22F4236E0(a1, (llvm::MemoryBufferRef *)v6);
    v7[0] = v6[0];
    v7[1] = v6[1];
    v8 = 1;
    sub_22F42377C((uint64_t *)v3, (uint64_t)v7);
    return *(_QWORD *)(a1 + 440);
  }
  return result;
}

uint64_t sub_22F4236E0@<X0>(uint64_t a1@<X0>, llvm::MemoryBufferRef *a2@<X8>)
{
  const llvm::MemoryBuffer *v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(const llvm::MemoryBuffer **)(a1 + 432);
  if (!v3)
  {
    llvm::MemoryBuffer::getMemBuffer();
    v6 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v7;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v3 = *(const llvm::MemoryBuffer **)(a1 + 432);
  }
  return llvm::MemoryBufferRef::MemoryBufferRef(a2, v3);
}

uint64_t *sub_22F42377C(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (*(_BYTE *)(a2 + 32))
  {
    v2 = result;
    llvm::MemoryBuffer::getMemBuffer();
    *((_BYTE *)v2 + 48) &= ~8u;
    result = (uint64_t *)*v2;
    *v2 = v3;
    if (result)
    {
      (*(void (**)(uint64_t *))(*result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F423804(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6)
{
  return sub_22F1E170C(a1, *(_QWORD *)(a2 + 88), a3, a4, a5, a6);
}

uint64_t sub_22F423810(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  llvm::MemoryBuffer::getMemBuffer();
  v11 = sub_22F1E1980(a1, &v14, a3, a4, a5, a6);
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v11;
}

uint64_t sub_22F4238A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = sub_22F1E1A48(a1, a2);
  if (!(_DWORD)result)
    return sub_22F1E170C(a1, *(_QWORD *)(a2 + 88), 0, a3, 0, 0);
  return result;
}

void sub_22F423904(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;

  v5 = sub_22F1E1214(a1, *(_QWORD *)(a2 + 88), 0);
  sub_22F1E005C(v5, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0, a3);
}

uint64_t sub_22F42393C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[31];

  v11 = a2;
  v5 = sub_22F1E1214(a1, *(_QWORD *)(a2 + 88), 0);
  v6 = *a3;
  *a3 = 0;
  v7 = *(_BYTE *)(v5 + 48) & 0xF7;
  *(_BYTE *)(v5 + 48) = v7;
  v8 = *(_QWORD *)v5;
  *(_QWORD *)v5 = v6;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v7 = *(_BYTE *)(v5 + 48);
  }
  *(_BYTE *)(v5 + 48) = v7 | 1;
  v9 = sub_22F4239D4(a1);
  return sub_22E67A2B0((_DWORD *)(v9 + 24), &v11, (uint64_t)v12);
}

uint64_t sub_22F4239D4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 152);
  if (!result)
  {
    result = operator new();
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    v3 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = result;
    if (v3)
    {
      v4 = sub_22F423E0C(v3);
      MEMORY[0x2348A0E9C](v4, 0x1020C40355347DDLL);
      return *(_QWORD *)(a1 + 152);
    }
  }
  return result;
}

uint64_t sub_22F423A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v5 = sub_22F4239D4(a1);
  v7 = a2;
  v8 = a3;
  result = sub_22F423F7C(v5, &v7, &v8, (uint64_t)&v9);
  if (!v10)
    *(_QWORD *)(v9 + 8) = a3;
  return result;
}

unint64_t sub_22F423AA4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = sub_22F1D1544(*(_QWORD *)(a1 + 16), a2);
  if (v3)
    sub_22F1E1214(a1, v3, 0);
  return v3;
}

uint64_t sub_22F423AE4(uint64_t result, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)result;
  LODWORD(result) = a2;
  do
  {
    v3 = result;
    if (sub_22F1E2440(v2, result, 0))
      result = sub_22F1E2500(v2, v3);
    else
      result = sub_22F1E25A4(v2, v3);
  }
  while ((result & 0x80000000) != 0);
  return result;
}

uint64_t sub_22F423B3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = a2;
  for (i = a2; sub_22F1E2440(a1, v2, 0); i = v2)
    v2 = sub_22F1E2500(a1, i);
  return v2;
}

uint64_t sub_22F423BA4(uint64_t a1, int a2, BOOL *a3)
{
  unint64_t v5;

  if (a3)
    *a3 = a2 == 0;
  if (!a2)
    return 0;
  v5 = sub_22E678830(a1, a2);
  return sub_22F1E2E38(a1, v5, HIDWORD(v5), a3);
}

uint64_t sub_22F423C04(uint64_t a1, int a2, BOOL *a3)
{
  unint64_t v5;

  if (a3)
    *a3 = a2 == 0;
  if (!a2)
    return 0;
  v5 = sub_22E74B2B0(a1, a2);
  return sub_22F1E2E38(a1, v5, HIDWORD(v5), a3);
}

uint64_t sub_22F423C68(uint64_t a1, int a2, BOOL *a3)
{
  unint64_t v4;

  if (a3)
    *a3 = a2 == 0;
  if (!a2)
    return 0;
  v4 = sub_22E678830(a1, a2);
  return sub_22F1E33FC(a1, v4, SHIDWORD(v4), 0);
}

uint64_t sub_22F423CC4(uint64_t a1, int a2, BOOL *a3)
{
  unint64_t v4;

  if (a3)
    *a3 = a2 == 0;
  if (!a2)
    return 0;
  v4 = sub_22E74B2B0(a1, a2);
  return sub_22F1E33FC(a1, v4, SHIDWORD(v4), 0);
}

_QWORD *sub_22F423D24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7[2];
  uint64_t v8;

  v7[0] = a2;
  v7[1] = a3;
  if (*(_DWORD *)(a1 + 392) <= 0x12Bu)
    return sub_22F424008(a1 + 384, v7) + 1;
  v8 = 0;
  v5 = sub_22F424080(*(_QWORD *)(a1 + 384), *(_DWORD *)(a1 + 400), a2, a3, &v8);
  v6 = v8;
  if (!v5)
    v6 = *(_QWORD *)(a1 + 384) + 32 * *(unsigned int *)(a1 + 400);
  if (v6 == *(_QWORD *)(a1 + 384) + 32 * *(unsigned int *)(a1 + 400))
    return (_QWORD *)(a1 + 408);
  else
    return (_QWORD *)(v6 + 8);
}

uint64_t sub_22F423DB0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F424390(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

uint64_t sub_22F423E0C(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(8 * *(unsigned int *)(a1 + 40)));
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F423E54(uint64_t a1)
{
  void *v2;

  sub_22F1E505C(*(_QWORD **)(a1 + 152));
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  free(*(void **)a1);
  sub_22E3B4EF4(a1 + 24);
  return a1;
}

uint64_t sub_22F423EA0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if ((*((_DWORD *)v3 - 2) + 1) >= 2)
      {
        v4 = *v3;
        *v3 = 0;
        if (v4)
        {
          sub_22F258024(*(_QWORD **)(v4 + 8));
          result = MEMORY[0x2348A0E9C](v4, 0x1020C4062D53EE8);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_22F423F24(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AFD8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F1E556C((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F423F7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F247398(a1, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22F424008(uint64_t a1, unsigned int *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F424080(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F424150(a1, a2, v7);
    *(_DWORD *)v5 = *a2;
    *((_DWORD *)v5 + 1) = a2[1];
    v5[2] = 0;
    v5[3] = 0;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F424080(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t v13;
  _DWORD *v15;
  int v16;
  BOOL v17;
  int v18;

  if (a2)
  {
    v5 = (a4 | (unint64_t)(a3 << 32)) + ~((unint64_t)a4 << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = (_DWORD *)(a1 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 == (_DWORD)a3 && v11 == a4)
    {
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (1)
      {
        v13 = v10 | v11;
        if (!(_DWORD)v13)
          break;
        if (v15)
          v17 = 0;
        else
          v17 = (v10 & v11) == -1;
        if (v17)
          v15 = v9;
        v18 = v8 + v16++;
        v8 = v18 & (a2 - 1);
        v9 = (_DWORD *)(a1 + 32 * v8);
        v10 = *v9;
        v11 = v9[1];
        v13 = 1;
        if (*v9 == (_DWORD)a3 && v11 == a4)
          goto LABEL_8;
      }
      if (v15)
        v9 = v15;
    }
  }
  else
  {
    v9 = 0;
    v13 = 0;
  }
LABEL_8:
  *a5 = v9;
  return v13;
}

_QWORD *sub_22F424150(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1E59EC(a1, v6);
  v8 = 0;
  sub_22F424080(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F424200(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v12;
  __int128 v13;
  unsigned int *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = 0;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    v10 = a2[1];
    if (*(_QWORD *)a2)
    {
      if ((_DWORD)v9 != -1 || v10 != -1)
      {
        v14 = 0;
        result = sub_22F424080(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
        v12 = v14;
        *v14 = *a2;
        v12[1] = a2[1];
        v13 = *(_OWORD *)(a2 + 2);
        *((_QWORD *)v12 + 3) = *((_QWORD *)a2 + 3);
        *(_OWORD *)(v12 + 2) = v13;
        ++*(_DWORD *)(v5 + 8);
      }
    }
    a2 += 8;
  }
  return result;
}

_DWORD *sub_22F4242C8(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  _DWORD *result;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v16 = 0;
  result = (_DWORD *)sub_22F424390(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 16;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 8 * v11;
  }
  else
  {
    result = sub_22F424430((_DWORD *)a2, a3, v16);
    v9 = result;
    *result = *a3;
    result[1] = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 16;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 8 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_22F424390(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & a2;
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -1;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_22F424430(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 16;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22F1E5AA8((uint64_t)a1, v6);
  v8 = 0;
  sub_22F424390((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3)
    --a1[1];
  return a3;
}

uint64_t sub_22F4244E8(uint64_t result, int *a2, int *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int *v11;
  int *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 + 1) >= 2)
    {
      v12 = 0;
      result = sub_22F424390((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F4245AC(uint64_t a1, uint64_t a2)
{
  return sub_22F1E5C24(a2, a1);
}

uint64_t sub_22F4245BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_22F2C4D8C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, *(_DWORD *)(a3 + 8), &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_22F424664(a2, a3, v12);
    v9 = result;
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F424664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F1E6120(a1, v6);
  v9 = 0;
  sub_22F2C4D8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F424720(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v13;
  _QWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45F5C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v14 = 0;
      result = sub_22F2C4D8C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *(_QWORD *)a2;
      *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v13 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F4247F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v5[32];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a1;
  v9 = a2;
  v6 = a3;
  v7 = a4;
  llvm::CrashRecoveryContext::CrashRecoveryContext((llvm::CrashRecoveryContext *)v5);
  llvm::CrashRecoveryContext::RunSafelyOnThread();
  return MEMORY[0x23489D6D4](v5);
}

_OWORD *sub_22F424848(uint64_t a1, void *a2, size_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = (void **)sub_22F1E679C(a1, &v13, a2, a3);
  v7 = *v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_BYTE *)v7 + 48) = 0;
    v10 = v13;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = v7;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t sub_22F4248FC(_QWORD *a1, int a2, int a3)
{
  BOOL v3;
  unsigned int v4;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;

  if (a2 == 16)
  {
    v3 = a3 == 0;
    v4 = 3;
    goto LABEL_5;
  }
  if (a2 == 8)
  {
    v3 = a3 == 0;
    v4 = 1;
    goto LABEL_5;
  }
  v6 = (unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24);
  if (v6[4] == a2)
  {
    v3 = a3 == 0;
    v4 = 5;
    goto LABEL_5;
  }
  if (v6[20] == a2)
  {
    v3 = a3 == 0;
    v4 = 7;
LABEL_5:
    if (v3)
      return v4 + 1;
    else
      return v4;
  }
  v7 = v6[22];
  if (a3)
    v8 = 9;
  else
    v8 = 10;
  if (v7 == a2)
    return v8;
  else
    return 0;
}

uint64_t sub_22F424980(llvm::APFloatBase *a1, int a2, int a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  BOOL v8;
  unsigned int v9;
  llvm::APFloatBase *v10;
  llvm::APFloatBase *v11;

  v3 = *(_QWORD *)a1;
  v4 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (v4[10] == a2)
    return 0;
  if (v4[12] == a2)
    return 1;
  if (a2 != 128)
  {
    if (a2 != 96)
      return 255;
    v6 = *((_QWORD *)v4 + 11);
    if (v6 != llvm::APFloatBase::x87DoubleExtended(a1))
      return 255;
    return 2;
  }
  if (a3 == 4)
  {
    v8 = (*(unsigned int (**)(llvm::APFloatBase *))(v3 + 120))(a1) == 0;
    v9 = 4;
LABEL_13:
    if (v8)
      return 255;
    else
      return v9;
  }
  if (a3 == 3)
  {
    v8 = (*(unsigned int (**)(llvm::APFloatBase *))(v3 + 88))(a1) == 0;
    v9 = 3;
    goto LABEL_13;
  }
  v10 = (llvm::APFloatBase *)*((_QWORD *)v4 + 11);
  v11 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v11 || v10 == (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v11))
    return 2;
  if (((*(uint64_t (**)(llvm::APFloatBase *))(v3 + 88))(a1) & 1) == 0)
    return 255;
  return 3;
}

uint64_t sub_22F424A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  signed __int8 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a6;
  v7 = a6[1];
  while (v6 != v7)
  {
    v14 = v7;
    v15 = v6;
    v16 = a2;
    v17 = a1;
    v9 = v6[23];
    v10 = v9 < 0;
    v11 = *((_QWORD *)v6 + 1);
    if (v9 < 0)
      v6 = *(unsigned __int8 **)v6;
    v12 = v9 & 0x7F;
    if (v10)
      v12 = v11;
    if (v12)
      v13 = v6 + 1;
    else
      v13 = v6;
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, BOOL))(*(_QWORD *)a1 + 528))(a1, a2, v13, v12 - (v12 != 0), *v6 == 43);
    v7 = v14;
    a1 = v17;
    a2 = v16;
    v6 = v15 + 24;
  }
  return 1;
}

uint64_t sub_22F424B18(uint64_t a1, int a2)
{
  if ((a2 - 3) > 4)
    return 0;
  else
    return dword_22F549A54[(char)(a2 - 3)];
}

BOOL sub_22F424B40(uint64_t a1, _WORD *a2, uint64_t a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1) & 1) != 0)
    return 1;
  if (a3 == 2)
    return *a2 == 25443;
  if (a3 != 6)
    return 0;
  if (*(_DWORD *)a2 == 1869440365 && a2[2] == 31090)
    return 1;
  return *(_DWORD *)a2 == 1769434741 && a2[2] == 25710;
}

uint64_t sub_22F424BE0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  signed __int8 i;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;

  v4 = *(unsigned __int8 **)(a2 + 80);
  if (*(char *)(a2 + 103) >= 0)
    v4 = (unsigned __int8 *)(a2 + 80);
  v5 = *v4;
  if (v5 != 61)
  {
    if (v5 != 43)
      return 0;
    *(_DWORD *)a2 |= 4u;
  }
  v6 = v4 + 1;
  v16 = v4 + 1;
  for (i = v4[1]; i; i = v4[1])
  {
    if (i <= 68)
    {
      if (i <= 59)
      {
        switch(i)
        {
          case '!':
          case '%':
          case '*':
            goto LABEL_12;
          case '#':
            while (1)
            {
              v10 = *++v6;
              v9 = v10;
              if (!v10 || v9 == 44)
                break;
              v16 = v6;
            }
            --v6;
            goto LABEL_12;
          case '&':
            v8 = *(_DWORD *)a2 | 0x20;
            goto LABEL_11;
          case ',':
            v14 = v4[2];
            v12 = v4 + 2;
            v13 = v14;
            if (v14 == 43)
              v6 = v12;
            if (v13 == 61)
              v6 = v12;
            goto LABEL_12;
          default:
            goto LABEL_28;
        }
      }
      if (i == 60 || i == 62)
        goto LABEL_10;
      if (i == 63)
        goto LABEL_12;
    }
    else
    {
      if (i > 102)
      {
        switch(i)
        {
          case 'g':
            goto LABEL_24;
          case 'i':
          case 'n':
            goto LABEL_12;
          case 'm':
          case 'o':
            goto LABEL_10;
          case 'r':
            v8 = *(_DWORD *)a2 | 2;
            goto LABEL_11;
          default:
            goto LABEL_28;
        }
      }
      if ((i - 69) < 2)
        goto LABEL_12;
      if (i == 86)
      {
LABEL_10:
        v8 = *(_DWORD *)a2 | 1;
LABEL_11:
        *(_DWORD *)a2 = v8;
        goto LABEL_12;
      }
      if (i == 88)
      {
LABEL_24:
        v8 = *(_DWORD *)a2 | 3;
        goto LABEL_11;
      }
    }
LABEL_28:
    result = (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t))(*(_QWORD *)a1 + 352))(a1, &v16, a2);
    if (!(_DWORD)result)
      return result;
    v6 = v16;
LABEL_12:
    v4 = v6++;
    v16 = v6;
  }
  if ((*(_DWORD *)a2 & 1) != 0)
    v15 = 1;
  else
    v15 = (*(_DWORD *)a2 >> 1) & 1;
  if ((*(_DWORD *)a2 & 0x26) == 0x24)
    return 0;
  else
    return v15;
}

uint64_t sub_22F424DB8()
{
  return 0;
}

uint64_t sub_22F424DC0()
{
  return 0;
}

uint64_t sub_22F424DC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t sub_22F424DD0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 85);
}

BOOL sub_22F424DD8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 88) || *(_BYTE *)(a1 + 89) != 0;
}

uint64_t sub_22F424DF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_22F424E00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 93);
}

const char *sub_22F424E08()
{
  return "e";
}

const char *sub_22F424E14()
{
  return "g";
}

const char *sub_22F424E24()
{
  return "DF16b";
}

uint64_t sub_22F424E30()
{
  return 0;
}

BOOL sub_22F424E3C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _BOOL4 v4;

  if (a2 > a3)
    return 0;
  v4 = a2 < 9 || (((a2 >> 3) - 1) & (a2 >> 3)) == 0;
  return *(unsigned __int8 *)(a1 + 95) >= a2 && v4;
}

uint64_t sub_22F424E78(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40);
}

uint64_t sub_22F424E8C(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_22F424E9C(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_22F424EAC()
{
  return 1;
}

uint64_t sub_22F424EB4()
{
  return 1;
}

uint64_t sub_22F424EBC()
{
  return 0;
}

void *sub_22F424EC4()
{
  return &unk_22F5E0A76;
}

uint64_t sub_22F424ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  *a5 = 0;
  return 1;
}

uint64_t sub_22F424EE0()
{
  return 1;
}

uint64_t sub_22F424EE8()
{
  return 1;
}

uint64_t sub_22F424EF0()
{
  return 1;
}

void sub_22F424EF8(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_22F424F04()
{
  return 1;
}

void sub_22F424F0C(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_22F424F18()
{
  return 1;
}

BOOL sub_22F424F20(_DWORD *a1)
{
  if (a1[14] == 42 && a1[16] == 3 && a1[17] == 25)
    return 1;
  if (a1[17] == 15 && a1[18] == 17)
    return a1[16] == 3;
  return 0;
}

uint64_t sub_22F424F80()
{
  return 0;
}

uint64_t sub_22F424F8C()
{
  return 0;
}

uint64_t sub_22F424F98(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 464))(a1);
}

uint64_t sub_22F424FA4()
{
  return 1;
}

uint64_t sub_22F424FAC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 480))(a1);
}

uint64_t sub_22F424FB8()
{
  return 0;
}

uint64_t sub_22F424FC0()
{
  return 0;
}

uint64_t sub_22F424FC8()
{
  return 0;
}

BOOL sub_22F424FD0(uint64_t a1, uint64_t a2)
{
  int Key;
  _BOOL8 result;

  Key = llvm::StringMapImpl::FindKey();
  result = 0;
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a2 + 8))
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * Key) + 8) != 0;
  return result;
}

uint64_t *sub_22F425030(uint64_t a1, llvm::StringMapImpl *a2, const void *a3, size_t a4, char a5)
{
  uint64_t *result;

  result = sub_22E80ABE0(a2, a3, a4);
  *(_BYTE *)(*result + 8) = a5;
  return result;
}

uint64_t sub_22F425064()
{
  return 1;
}

uint64_t sub_22F42506C()
{
  return 0;
}

uint64_t sub_22F425074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  *a7 = &unk_22F5E0A76;
  a7[1] = 0;
  return 0;
}

uint64_t sub_22F425088()
{
  return 1;
}

uint64_t sub_22F425090()
{
  return 0;
}

uint64_t sub_22F425098()
{
  return 0;
}

uint64_t sub_22F4250A0()
{
  return 0;
}

uint64_t sub_22F4250A8()
{
  return 0;
}

uint64_t sub_22F4250BC()
{
  return 0;
}

uint64_t sub_22F4250C4()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_22F4250CC()
{
  return 0;
}

uint64_t sub_22F4250D4(uint64_t a1, int a2)
{
  return (a2 + 27);
}

uint64_t sub_22F4250DC(uint64_t a1, int a2)
{
  return (a2 + 27);
}

uint64_t sub_22F4250E4(uint64_t a1, int a2)
{
  return (a2 + 27);
}

uint64_t sub_22F4250EC()
{
  return 0x100000000;
}

uint64_t sub_22F4250F8()
{
  return 0;
}

uint64_t sub_22F425100()
{
  return 0;
}

BOOL sub_22F425108(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t sub_22F425114()
{
  return 0;
}

uint64_t sub_22F425120(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_byte_addressable_store", 29, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_global_int32_base_atomics", 32, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_global_int32_extended_atomics", 36, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_local_int32_base_atomics", 31, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_local_int32_extended_atomics", 35, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_fp64", 11, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_fp16", 11, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_int64_base_atomics", 25, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_int64_extended_atomics", 29, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_3d_image_writes", 22, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cles_khr_int64", 14, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_depth_images", 19, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_gl_msaa_sharing", 22, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_mipmap_image", 19, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_mipmap_image_writes", 26, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_srgb_image_writes", 24, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_khr_subgroups", 16, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_clang_storage_class_specifiers", 33, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__cl_clang_function_pointers", 28, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__cl_clang_variadic_functions", 29, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__cl_clang_non_portable_kernel_param_types", 42, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__cl_clang_bitfields", 20, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_APPLE_BOOL_vec", 17, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_APPLE_vload_vstore_half", 26, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_amd_media_ops", 16, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_amd_media_ops2", 17, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_arm_integer_dot_product_int8", 31, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_arm_integer_dot_product_accumulate_int8", 42, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_arm_integer_dot_product_accumulate_int16", 43, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_arm_integer_dot_product_accumulate_saturate_int8", 51, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_intel_subgroups", 18, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_intel_subgroups_short", 24, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "cl_intel_device_side_avc_motion_estimation", 42, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_pipes", 16, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_generic_address_space", 32, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_atomic_order_acq_rel", 31, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_atomic_order_seq_cst", 31, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_subgroups", 20, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_3d_image_writes", 26, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_device_enqueue", 25, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_read_write_images", 28, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_program_scope_global_variables", 41, a2);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_fp64", 15, a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, const char *, uint64_t, uint64_t))(*a1 + 528))(a1, a1[2] + 256, "__opencl_c_images", 17, a2);
}

uint64_t sub_22F425818()
{
  return 0;
}

uint64_t sub_22F425820()
{
  return 0;
}

uint64_t sub_22F425828()
{
  return 1;
}

uint64_t sub_22F425834()
{
  return 0;
}

uint64_t sub_22F42583C(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_22F42584C(_QWORD *a1)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 1);
}

uint64_t sub_22F425860(_QWORD *a1)
{
  return *(unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 120);
}

uint64_t sub_22F425874()
{
  return 0;
}

uint64_t sub_22F425880(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  if ((*(_BYTE *)(a4 + 3) & 0x80) != 0)
  {
    v15 = 261;
    v14[0] = a2;
    v14[1] = a3;
    v12[0] = (uint64_t)"1";
    v13 = 259;
    sub_22E7333BC(a1, (llvm::Twine *)v14, (llvm::Twine *)v12);
  }
  v15 = 1283;
  v14[0] = "__";
  v14[2] = a2;
  v14[3] = a3;
  v12[0] = (uint64_t)"1";
  v13 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v14, (llvm::Twine *)v12);
  v13 = 1283;
  v12[0] = (uint64_t)"__";
  v12[2] = a2;
  v12[3] = a3;
  v10 = "__";
  v11 = 259;
  sub_22E78CF44(v12, (uint64_t *)&v10, (uint64_t)v14);
  v8 = "1";
  v9 = 259;
  return sub_22E7333BC(a1, (llvm::Twine *)v14, (llvm::Twine *)&v8);
}

uint64_t sub_22F42596C(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11[4];
  __int16 v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;

  v18 = 1283;
  v17[0] = "__";
  v17[2] = a2;
  v17[3] = a3;
  v13[0] = (uint64_t)"1";
  v16 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v17, (llvm::Twine *)v13);
  v16 = 1283;
  v13[0] = (uint64_t)"__";
  v14 = a2;
  v15 = a3;
  v11[0] = (uint64_t)"__";
  v12 = 259;
  sub_22E78CF44(v13, v11, (uint64_t)v17);
  v9[0] = "1";
  v10 = 259;
  result = sub_22E7333BC(a1, (llvm::Twine *)v17, (llvm::Twine *)v9);
  if (a4)
  {
    v16 = 1283;
    v13[0] = (uint64_t)"__tune_";
    v14 = a2;
    v15 = a3;
    v11[0] = (uint64_t)"__";
    v12 = 259;
    sub_22E78CF44(v13, v11, (uint64_t)v17);
    v9[0] = "1";
    v10 = 259;
    return sub_22E7333BC(a1, (llvm::Twine *)v17, (llvm::Twine *)v9);
  }
  return result;
}

uint64_t *sub_22F425A70(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FBE8F28, this);
  *v3 = (uint64_t)&off_24FBE8B90;
  *((_BYTE *)v3 + 83) = 1;
  *((_BYTE *)v3 + 391) = 32;
  *((_WORD *)v3 + 205) = 32;
  *((_BYTE *)v3 + 383) = 32;
  *((_BYTE *)v3 + 381) = 32;
  *((_DWORD *)v3 + 120) = 6;
  v3[61] = 0x500000005;
  *((_BYTE *)v3 + 528) |= 4u;
  sub_22F1E6F0C((uint64_t)v3, "e-m:e-p:32:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32", 0x54uLL, (uint64_t)"");
  return a1;
}

uint64_t *sub_22F425AFC(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FCACCB8, this);
  *v3 = (uint64_t)&off_24FCAC920;
  *((_BYTE *)v3 + 83) = 1;
  *((_BYTE *)v3 + 391) = 32;
  *((_WORD *)v3 + 205) = 32;
  *((_BYTE *)v3 + 383) = 32;
  *((_BYTE *)v3 + 381) = 32;
  *((_DWORD *)v3 + 120) = 6;
  *(_OWORD *)(v3 + 61) = xmmword_22F549A80;
  *((_BYTE *)v3 + 528) |= 4u;
  sub_22F1E6F0C((uint64_t)v3, "e-m:e-p:32:32-i1:8:32-i8:8:32-i16:16:32-i64:32-f64:32-a:0:32-n32", 0x40uLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F425B90(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  const char *v6;

  result = sub_22F436570(a1, (uint64_t *)off_24FB19110, a2, a3);
  *(_QWORD *)result = off_24FB18D58;
  *(_QWORD *)(result + 552) = 0x500000005;
  *(_DWORD *)(result + 540) = 9;
  *(_DWORD *)(result + 568) = 9;
  v5 = *((_DWORD *)a2 + 6);
  v6 = "__mcount";
  if (v5 > 0x2A)
    goto LABEL_4;
  if (((1 << v5) & 0x401AC0000) != 0)
  {
    v6 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v6;
    return result;
  }
  if (((1 << v5) & 0x180000000) == 0)
  {
    if (((1 << v5) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F425C40(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  const char *v6;

  result = sub_22F1F3D08(a1, (uint64_t *)&off_24FB23828, a2, a3);
  *(_QWORD *)result = &off_24FB23478;
  *(_QWORD *)(result + 608) = 0x500000005;
  *(_DWORD *)(result + 596) = 9;
  *(_DWORD *)(result + 624) = 9;
  v5 = *((_DWORD *)a2 + 6);
  v6 = "__mcount";
  if (v5 > 0x2A)
    goto LABEL_4;
  if (((1 << v5) & 0x401AC0000) != 0)
  {
    v6 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v6;
    return result;
  }
  if (((1 << v5) & 0x180000000) == 0)
  {
    if (((1 << v5) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F425CF0(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  size_t v8;

  v5 = sub_22F1F3D08(a1, (uint64_t *)&off_24FB25D28, a2, a3);
  *(_QWORD *)v5 = &off_24FB25978;
  *(_WORD *)(v5 + 480) = 8224;
  *(_DWORD *)(v5 + 624) = 9;
  *(_WORD *)(v5 + 493) = 16448;
  *(_BYTE *)(v5 + 495) = 64;
  *(_DWORD *)(v5 + 500) = 1077944352;
  *(_OWORD *)(v5 + 592) = xmmword_22F549A90;
  *(_QWORD *)(a1 + 568) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v5);
  v6 = *((_DWORD *)a2 + 6);
  if (v6 > 40)
  {
    if (v6 == 41)
    {
      v7 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32-S128";
      v8 = 67;
      goto LABEL_10;
    }
    if (v6 == 42)
    {
      v7 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32:64-S128";
      v8 = 70;
LABEL_10:
      sub_22F1E6F0C(a1, v7, v8, (uint64_t)"");
      return a1;
    }
LABEL_8:
    v7 = "e-p:32:32-i64:64";
    v8 = 16;
    goto LABEL_10;
  }
  if (v6 != 1 && v6 != 17)
    goto LABEL_8;
  return a1;
}

uint64_t sub_22F425DE4(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  const char *v6;

  result = sub_22F1F3D08(a1, (uint64_t *)&off_24FB2A728, a2, a3);
  *(_QWORD *)result = &off_24FB2A378;
  *(_QWORD *)(result + 608) = 0x500000005;
  *(_DWORD *)(result + 596) = 9;
  *(_DWORD *)(result + 624) = 9;
  v5 = *((_DWORD *)a2 + 6);
  v6 = "__mcount";
  if (v5 > 0x2A)
    goto LABEL_4;
  if (((1 << v5) & 0x401AC0000) != 0)
  {
    v6 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v6;
    return result;
  }
  if (((1 << v5) & 0x180000000) == 0)
  {
    if (((1 << v5) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F425E94(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  size_t v8;

  v5 = sub_22F1F3D08(a1, (uint64_t *)&off_24FB2CC28, a2, a3);
  *(_QWORD *)v5 = &off_24FB2C878;
  *(_WORD *)(v5 + 480) = 8224;
  *(_DWORD *)(v5 + 624) = 9;
  *(_WORD *)(v5 + 493) = 16448;
  *(_BYTE *)(v5 + 495) = 64;
  *(_DWORD *)(v5 + 500) = 1077944352;
  *(_OWORD *)(v5 + 592) = xmmword_22F549A90;
  *(_QWORD *)(a1 + 568) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v5);
  v6 = *((_DWORD *)a2 + 6);
  if (v6 > 40)
  {
    if (v6 == 41)
    {
      v7 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32-S128";
      v8 = 67;
      goto LABEL_10;
    }
    if (v6 == 42)
    {
      v7 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32:64-S128";
      v8 = 70;
LABEL_10:
      sub_22F1E6F0C(a1, v7, v8, (uint64_t)"");
      return a1;
    }
LABEL_8:
    v7 = "e-p:32:32-i64:64";
    v8 = 16;
    goto LABEL_10;
  }
  if (v6 != 1 && v6 != 17)
    goto LABEL_8;
  return a1;
}

uint64_t sub_22F425F88(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v4;
  char *v5;

  v4 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC2BDE0, this);
  *v4 = (uint64_t)&off_24FC2BA48;
  *((_BYTE *)v4 + 361) = 0;
  *((_WORD *)v4 + 184) = 16448;
  *((_WORD *)v4 + 194) = 16448;
  *((_OWORD *)v4 + 30) = xmmword_22F549AA0;
  *((_DWORD *)v4 + 128) = 7;
  *((_BYTE *)v4 + 144) = 5;
  if (*((_DWORD *)this + 6) == 9)
    v5 = "E-m:e-p:64:64-i64:64-i128:128-n32:64-S128";
  else
    v5 = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128";
  sub_22F1E6F0C((uint64_t)v4, v5, 0x29uLL, (uint64_t)"");
  *(_WORD *)(a1 + 94) = 16448;
  *(_BYTE *)(a1 + 81) = 0;
  return a1;
}

uint64_t *sub_22F426030(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC46F58, this);
  *v3 = (uint64_t)&off_24FC46BC0;
  *((_BYTE *)v3 + 81) = 0;
  *((_WORD *)v3 + 186) = 4112;
  *((_DWORD *)v3 + 97) = 272633888;
  *((_WORD *)v3 + 191) = 4160;
  *(_DWORD *)((char *)v3 + 378) = 272633888;
  *((_WORD *)v3 + 184) = 4112;
  *((_WORD *)v3 + 205) = 16;
  *((_OWORD *)v3 + 30) = xmmword_22F549A90;
  *((_DWORD *)v3 + 130) = 7;
  sub_22F1E6F0C((uint64_t)v3, "e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16", 0x37uLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F4260CC(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  size_t v7;

  v4 = sub_22F1EFBE0(a1, (uint64_t *)&off_24FB319E8, a2);
  *(_QWORD *)v4 = &off_24FB31638;
  *(_WORD *)(v4 + 440) = 8224;
  *(_DWORD *)(v4 + 584) = 9;
  *(_WORD *)(v4 + 453) = 16448;
  *(_BYTE *)(v4 + 455) = 64;
  *(_DWORD *)(v4 + 460) = 1077944352;
  *(_OWORD *)(v4 + 552) = xmmword_22F549A90;
  *(_QWORD *)(a1 + 528) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v4);
  v5 = *((_DWORD *)a2 + 6);
  if (v5 > 40)
  {
    if (v5 == 41)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32-S128";
      v7 = 67;
      goto LABEL_10;
    }
    if (v5 == 42)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32:64-S128";
      v7 = 70;
LABEL_10:
      sub_22F1E6F0C(a1, v6, v7, (uint64_t)"");
      return a1;
    }
LABEL_8:
    v6 = "e-p:32:32-i64:64";
    v7 = 16;
    goto LABEL_10;
  }
  if (v5 != 1 && v5 != 17)
    goto LABEL_8;
  return a1;
}

uint64_t sub_22F4261C0(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F1EFBE0(a1, (uint64_t *)&off_24FB33770, a2);
  *(_QWORD *)result = &off_24FB333C8;
  *(_QWORD *)(result + 568) = 0x500000005;
  *(_DWORD *)(result + 556) = 9;
  *(_DWORD *)(result + 584) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t *sub_22F42626C(uint64_t *a1, llvm::Triple *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  size_t v7;

  sub_22F42F298(a1, a2);
  *(_QWORD *)v4 = &off_24FB36038;
  *(_WORD *)(v4 + 368) = 8224;
  *(_DWORD *)(v4 + 512) = 9;
  *(_WORD *)(v4 + 381) = 16448;
  *(_BYTE *)(v4 + 383) = 64;
  *(_DWORD *)(v4 + 388) = 1077944352;
  *(_OWORD *)(v4 + 480) = xmmword_22F549A90;
  a1[57] = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v4);
  v5 = *((_DWORD *)a2 + 6);
  if (v5 > 40)
  {
    if (v5 == 41)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32-S128";
      v7 = 67;
      goto LABEL_10;
    }
    if (v5 == 42)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32:64-S128";
      v7 = 70;
LABEL_10:
      sub_22F1E6F0C((uint64_t)a1, v6, v7, (uint64_t)"");
      return a1;
    }
LABEL_8:
    v6 = "e-p:32:32-i64:64";
    v7 = 16;
    goto LABEL_10;
  }
  if (v5 != 1 && v5 != 17)
    goto LABEL_8;
  return a1;
}

uint64_t *sub_22F426350(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC45F90, this);
  *v3 = (uint64_t)&off_24FC45BF8;
  *((_BYTE *)v3 + 83) = 1;
  *((_WORD *)v3 + 184) = 16448;
  *((_WORD *)v3 + 194) = 16448;
  *((_WORD *)v3 + 47) = 16448;
  sub_22F1E6F0C((uint64_t)v3, "e-m:e-v128:32-v16:16-v32:32-v96:32-n8:16:32:64-S128", 0x33uLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F4263BC(uint64_t a1, llvm::Triple *a2, const std::string *a3)
{
  uint64_t v4;

  v4 = sub_22F1ED578(a1, a2, a3);
  *(_QWORD *)v4 = off_24FAE1BC8;
  *(_DWORD *)(v4 + 288) |= 1u;
  *(_WORD *)(v4 + 474) = 8224;
  *(_DWORD *)(v4 + 592) = 5;
  *(_BYTE *)(v4 + 495) = 32;
  sub_22F1E6F0C(v4, "E-m:o-p:32:32-f64:32:64-n32", 0x1BuLL, (uint64_t)"_");
  return a1;
}

uint64_t sub_22F426428(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F427C50(a1, &off_24FB3AA30, a2);
  *(_QWORD *)result = &off_24FB3A688;
  *(_QWORD *)(result + 576) = 0x500000005;
  *(_DWORD *)(result + 564) = 9;
  *(_DWORD *)(result + 592) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F4264D4(uint64_t a1, llvm::Triple *a2)
{
  _QWORD *v4;
  const char *v5;
  char *v6;
  llvm::APFloatBase *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;

  v4 = (_QWORD *)sub_22F1EE0AC(a1, (uint64_t *)off_24FAE4818, a2);
  *v4 = &off_24FAE4480;
  if (*((_DWORD *)a2 + 6) == 22)
    v5 = "e-m:e-p:32:32-i64:64-n32";
  else
    v5 = "E-m:e-p:32:32-i64:64-n32";
  if (*((_DWORD *)a2 + 9) == 21)
    v6 = "E-m:a-p:32:32-i64:64-n32";
  else
    v6 = (char *)v5;
  sub_22F1E6F0C((uint64_t)v4, v6, 0x18uLL, (uint64_t)"");
  v8 = *(_DWORD *)(a1 + 68);
  if (v8 <= 11)
  {
    if (v8 != 5 && v8 != 9)
      goto LABEL_14;
LABEL_13:
    v9 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = 6;
    *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 120) = 5;
    *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 124) = 5;
    goto LABEL_14;
  }
  if (v8 != 21)
  {
    if (v8 != 12)
      goto LABEL_14;
    goto LABEL_13;
  }
  v13 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = 8;
  *(_DWORD *)(a1 + *(_QWORD *)(v13 - 24) + 120) = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v13 - 24) + 124) = 7;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 14) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 13) = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 15) = 32;
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v7);
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24) + 88) = v7;
LABEL_14:
  v10 = *((_DWORD *)a2 + 9);
  if (v10 <= 0xD && ((1 << v10) & 0x3020) != 0 || (*((_DWORD *)a2 + 10) & 0xFFFFFFFC) == 0xC)
  {
    v11 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 15) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v11 - 24) + 14) = 64;
    *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24) + 88) = llvm::APFloatBase::IEEEdouble(v7);
  }
  *(_WORD *)(a1 + 94) = 8224;
  return a1;
}

uint64_t sub_22F426698(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v3;

  v3 = sub_22F1EE38C(a1, (uint64_t *)&off_24FB3E1B0, a2);
  *(_QWORD *)v3 = &off_24FB3DE08;
  *(_WORD *)(v3 + 468) = 8224;
  *(_WORD *)(v3 + 448) = 8224;
  *(_DWORD *)(v3 + 592) = 9;
  *(_QWORD *)(v3 + 560) = 0x900000006;
  sub_22F1E6F0C(v3, "E-m:e-p:32:32-i64:64-n32:64", 0x1BuLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F42670C(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F1EE38C(a1, (uint64_t *)&off_24FB41930, a2);
  *(_QWORD *)result = &off_24FB41588;
  *(_QWORD *)(result + 576) = 0x500000005;
  *(_DWORD *)(result + 564) = 9;
  *(_DWORD *)(result + 592) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F4267B8(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v3;

  v3 = sub_22F1EE58C(a1, (uint64_t *)&off_24FC722C8, a2);
  *(_QWORD *)v3 = &off_24FC71F30;
  *(_QWORD *)(v3 + 544) = 0x500000005;
  *(_DWORD *)(v3 + 536) = 6;
  sub_22F1E6F0C(v3, "e-m:e-p:32:32-i64:64-n32-S128", 0x1DuLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F42681C(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F430B04(a1, (uint64_t *)off_24FB46330, a2);
  *(_QWORD *)result = &off_24FB45F88;
  *(_QWORD *)(result + 552) = 0x500000005;
  *(_DWORD *)(result + 540) = 9;
  *(_DWORD *)(result + 568) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F4268C8(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v3;

  v3 = sub_22F1EE58C(a1, (uint64_t *)&off_24FC72DD8, a2);
  *(_QWORD *)v3 = &off_24FC72A40;
  *(_WORD *)(v3 + 424) = 16448;
  *(_WORD *)(v3 + 444) = 16448;
  *(_DWORD *)(v3 + 568) = 7;
  *(_DWORD *)(v3 + 540) = 7;
  sub_22F1E6F0C(v3, "e-m:e-p:64:64-i64:64-i128:128-n64-S128", 0x26uLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F426934(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  int v4;

  result = sub_22F428E64(a1, (uint64_t *)off_24FB4AD30, a2);
  *(_QWORD *)result = &off_24FB4A988;
  if (*(_BYTE *)(result + 368) == 64)
    v4 = 5;
  else
    v4 = 7;
  *(_DWORD *)(result + 500) = v4;
  *(_DWORD *)(result + 496) = v4;
  if ((*((_DWORD *)a2 + 6) - 41) <= 1)
    *(_BYTE *)(result + 86) = 1;
  return result;
}

uint64_t sub_22F4269A0(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;

  v3 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC799F0, this);
  *((_BYTE *)v3 + 361) = 0;
  *((_DWORD *)v3 + 91) = 0;
  *v3 = (uint64_t)&off_24FC79650;
  sub_22F1E6F0C((uint64_t)v3, "E-m:e-p:32:32-i64:64-f128:64-n32-S64", 0x24uLL, (uint64_t)"");
  v4 = *(_QWORD *)a1;
  if ((*(_DWORD *)(a1 + 68) & 0xFFFFFFFE) == 0xC)
    v5 = 8;
  else
    v5 = 6;
  if ((*(_DWORD *)(a1 + 68) & 0xFFFFFFFE) == 0xC)
    v6 = 7;
  else
    v6 = 5;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = v5;
  *(_DWORD *)(a1 + *(_QWORD *)(v4 - 24) + 124) = v6;
  *(_DWORD *)(a1 + *(_QWORD *)(v4 - 24) + 120) = v6;
  *(_BYTE *)(a1 + 94) = 64;
  if (sub_22F43E1D4(a1, *(_DWORD *)(a1 + 364)) == 1)
    v7 = 64;
  else
    v7 = 32;
  *(_BYTE *)(a1 + 95) = v7;
  return a1;
}

uint64_t sub_22F426A6C(uint64_t a1, llvm::Triple *a2)
{
  _QWORD *v4;
  unsigned int v5;

  v4 = (_QWORD *)sub_22F428E64(a1, (uint64_t *)off_24FB4E4B8, a2);
  *v4 = &off_24FB4E898;
  sub_22F1E6F0C((uint64_t)v4, "e-m:e-p:32:32-i64:64-f128:64-n32-S64", 0x24uLL, (uint64_t)"");
  *(_QWORD *)a1 = &off_24FB4E108;
  *(_DWORD *)(a1 + 500) = 6;
  v5 = *((_DWORD *)a2 + 6);
  if (v5 <= 0x2A)
  {
    if (((1 << v5) & 0x1EF0000) != 0)
    {
      *(_QWORD *)(a1 + 136) = "_mcount";
    }
    else if (((1 << v5) & 0x60000000000) != 0)
    {
      *(_BYTE *)(a1 + 86) = 1;
    }
  }
  return a1;
}

uint64_t sub_22F426B1C(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  int v4;

  result = sub_22F432040(a1, (uint64_t *)off_24FB539C0, a2);
  *(_QWORD *)result = &off_24FB53618;
  if (*(_BYTE *)(result + 368) == 64)
    v4 = 5;
  else
    v4 = 7;
  *(_DWORD *)(result + 500) = v4;
  *(_DWORD *)(result + 496) = v4;
  if ((*((_DWORD *)a2 + 6) - 41) <= 1)
    *(_BYTE *)(result + 86) = 1;
  return result;
}

uint64_t sub_22F426B88(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F432040(a1, (uint64_t *)off_24FB55EC0, a2);
  *(_QWORD *)result = &off_24FB55B18;
  *(_QWORD *)(result + 496) = 0x500000005;
  *(_DWORD *)(result + 484) = 9;
  *(_DWORD *)(result + 512) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F426C34(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v3;
  llvm::APFloatBase *v4;
  uint64_t v5;
  int v6;

  v3 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC7A500, this);
  *((_BYTE *)v3 + 361) = 0;
  *((_DWORD *)v3 + 91) = 0;
  *v3 = (uint64_t)&off_24FC7A160;
  sub_22F1E6F0C((uint64_t)v3, "E-m:e-i64:64-n32:64-S128", 0x18uLL, (uint64_t)"");
  v5 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 1) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24)) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 21) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 20) = 64;
  if (*(_DWORD *)(a1 + 68) == 13)
    v6 = 9;
  else
    v6 = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 116) = v6;
  *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 144) = *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 116);
  *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 14) = 0x80;
  *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 15) = 0x80;
  *(_WORD *)(a1 + *(_QWORD *)(v5 - 24) + 42) = 128;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24) + 88) = llvm::APFloatBase::IEEEquad(v4);
  *(_WORD *)(a1 + 94) = 16448;
  return a1;
}

uint64_t sub_22F426D34(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;

  result = sub_22F432DE4(a1, (uint64_t *)&off_24FB59290, a2);
  *(_QWORD *)result = off_24FB58EE8;
  *(_DWORD *)(result + 528) = 6;
  *(_BYTE *)(result + 560) = *(_BYTE *)(result + 560) & 0xF1 | 4;
  *(_QWORD *)(result + 564) = 0x8000000020;
  return result;
}

uint64_t sub_22F426D88(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v4;
  char *v5;
  size_t v6;

  v4 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC7E8D8, this);
  *v4 = (uint64_t)off_24FC7E540;
  *((_BYTE *)v4 + 391) = 3;
  *((_DWORD *)v4 + 92) = 3158394;
  *((_DWORD *)v4 + 98) = 8;
  *((_WORD *)v4 + 198) = 0;
  *((_BYTE *)v4 + 398) = 0;
  *((_DWORD *)v4 + 129) = 7;
  *((_DWORD *)v4 + 136) = 7;
  *((_BYTE *)v4 + 81) = 1;
  *((_WORD *)v4 + 202) = 8224;
  *((_WORD *)v4 + 200) = 16448;
  *((_DWORD *)v4 + 105) = 1077952576;
  *((_WORD *)v4 + 207) = 16512;
  *(_QWORD *)(a1 + 488) = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)v4);
  *(_WORD *)(a1 + 440) = 4160;
  if (*((_DWORD *)this + 9) == 16)
  {
    *(_DWORD *)(a1 + 448) = 64;
    v5 = "E-m:l-i1:8:16-i8:8:16-i64:64-f128:64-v128:64-a:8:16-n32:64";
    v6 = 58;
  }
  else
  {
    v5 = "E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64";
    v6 = 50;
  }
  sub_22F1E6F0C(a1, v5, v6, (uint64_t)"");
  *(_BYTE *)(a1 + 95) = 64;
  *(_WORD *)(a1 + 93) = 16385;
  return a1;
}

uint64_t sub_22F426E80(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;

  v3 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC7F170, this);
  *v3 = (uint64_t)&off_24FC7EDD8;
  *((_BYTE *)v3 + 81) = 0;
  *((_WORD *)v3 + 186) = 8224;
  *((_WORD *)v3 + 184) = 8224;
  *((_DWORD *)v3 + 97) = 538976288;
  *((_WORD *)v3 + 205) = 32;
  *((_OWORD *)v3 + 30) = xmmword_22F549AB0;
  v4 = (_DWORD *)((char *)v3 + 378);
  v5 = llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)v3);
  *v4 = 538976288;
  *(_WORD *)(a1 + 382) = 8224;
  *(_QWORD *)(a1 + 440) = v5;
  *(_QWORD *)(a1 + 448) = v5;
  *(_QWORD *)(a1 + 456) = v5;
  sub_22F1E6F0C(a1, "E-p:32:32:32-i1:8:8-i8:8:32-i16:16:32-i32:32:32-i64:32:32-f32:32:32-f64:32:32-v64:32:32-v128:32:32-v256:32:32-v512:32:32-v1024:32:32-a0:0:32-n32", 0x90uLL, (uint64_t)"");
  *(_QWORD *)(a1 + 152) = &unk_22F549E34;
  *(_BYTE *)(a1 + 360) = 1;
  return a1;
}

uint64_t sub_22F426F38(uint64_t a1, llvm::Triple *a2)
{
  llvm::APFloatBase *v4;
  unsigned int v5;

  v4 = (llvm::APFloatBase *)sub_22F429848(a1, (uint64_t *)&off_24FAF1040, a2);
  *((_DWORD *)v4 + 149) = 6;
  v5 = *((_DWORD *)a2 + 6);
  if (v5 <= 0x2A)
  {
    if (((1 << v5) & 0x1EF0000) != 0)
    {
      *(_QWORD *)(a1 + 136) = "_mcount";
    }
    else if (((1 << v5) & 0x60000000000) != 0)
    {
      *(_BYTE *)(a1 + 86) = 1;
    }
  }
  *(_QWORD *)a1 = &off_24FAF0C88;
  *(_WORD *)(a1 + 506) = 32;
  *(_BYTE *)(a1 + 478) = 64;
  *(_QWORD *)(a1 + 552) = llvm::APFloatBase::IEEEdouble(v4);
  return a1;
}

uint64_t sub_22F426FDC(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  int v4;

  result = sub_22F429848(a1, (uint64_t *)&off_24FB623C8, a2);
  *(_QWORD *)result = &off_24FB62018;
  if (*(_BYTE *)(result + 464) == 64)
    v4 = 5;
  else
    v4 = 7;
  *(_DWORD *)(result + 596) = v4;
  *(_DWORD *)(result + 592) = v4;
  if ((*((_DWORD *)a2 + 6) - 41) <= 1)
    *(_BYTE *)(result + 86) = 1;
  return result;
}

uint64_t sub_22F427048(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  size_t v7;

  v4 = sub_22F429848(a1, (uint64_t *)&off_24FB63668, a2);
  *(_QWORD *)v4 = &off_24FB632B8;
  *(_WORD *)(v4 + 464) = 8224;
  *(_DWORD *)(v4 + 608) = 9;
  *(_WORD *)(v4 + 477) = 16448;
  *(_BYTE *)(v4 + 479) = 64;
  *(_DWORD *)(v4 + 484) = 1077944352;
  *(_OWORD *)(v4 + 576) = xmmword_22F549A90;
  *(_QWORD *)(a1 + 552) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v4);
  v5 = *((_DWORD *)a2 + 6);
  if (v5 > 40)
  {
    if (v5 == 41)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32-S128";
      v7 = 67;
      goto LABEL_10;
    }
    if (v5 == 42)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32:64-S128";
      v7 = 70;
LABEL_10:
      sub_22F1E6F0C(a1, v6, v7, (uint64_t)"");
      return a1;
    }
LABEL_8:
    v6 = "e-p:32:32-i64:64";
    v7 = 16;
    goto LABEL_10;
  }
  if (v5 != 1 && v5 != 17)
    goto LABEL_8;
  return a1;
}

_QWORD *sub_22F427138(_QWORD *a1, llvm::Triple *a2)
{
  llvm::APFloatBase *v3;

  v3 = (llvm::APFloatBase *)sub_22F429848((uint64_t)a1, (uint64_t *)&off_24FB02F18, a2);
  *(_QWORD *)v3 = &off_24FB02B78;
  *((_BYTE *)v3 + 478) = 64;
  a1[69] = llvm::APFloatBase::IEEEdouble(v3);
  sub_22F1E6F0C((uint64_t)a1, "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:32-f64:32-f128:32-n8:16:32-a:0:32-S32", 0x58uLL, (uint64_t)"");
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 132) = 6;
  return a1;
}

uint64_t sub_22F4271B4(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  uint64_t v8;

  v4 = sub_22F429954(a1, (uint64_t *)&off_24FCAC470, a2);
  *(_QWORD *)v4 = &off_24FCAC0D0;
  *(_BYTE *)(v4 + 487) = 32;
  *(_WORD *)(v4 + 477) = 24608;
  *(_BYTE *)(v4 + 479) = 32;
  *(_WORD *)(v4 + 506) = 128;
  v5 = *((_DWORD *)a2 + 11);
  if (v5 == 5)
    v6 = "_";
  else
    v6 = "";
  if (v5 == 5)
    v7 = "e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128";
  else
    v7 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128";
  sub_22F1E6F0C(v4, v7, 0x4DuLL, (uint64_t)v6);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = 6;
  *(_DWORD *)(a1 + *(_QWORD *)(v8 - 24) + 120) = 5;
  *(_DWORD *)(a1 + *(_QWORD *)(v8 - 24) + 124) = 5;
  *(_BYTE *)(a1 + 144) = 3;
  *(_DWORD *)(a1 + 288) |= 0xEu;
  *(_WORD *)(a1 + 94) = 8256;
  return a1;
}

uint64_t sub_22F427298(uint64_t a1, llvm::Triple *a2)
{
  llvm::APFloatBase *v4;
  unsigned int v5;

  v4 = (llvm::APFloatBase *)sub_22F42AB4C(a1, (uint64_t *)&off_24FB06708, a2);
  *((_DWORD *)v4 + 149) = 6;
  v5 = *((_DWORD *)a2 + 6);
  if (v5 <= 0x2A)
  {
    if (((1 << v5) & 0x1EF0000) != 0)
    {
      *(_QWORD *)(a1 + 136) = "_mcount";
    }
    else if (((1 << v5) & 0x60000000000) != 0)
    {
      *(_BYTE *)(a1 + 86) = 1;
    }
  }
  *(_QWORD *)a1 = &off_24FB06350;
  *(_QWORD *)(a1 + 552) = llvm::APFloatBase::IEEEquad(v4);
  return a1;
}

uint64_t sub_22F42732C(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  int v4;

  result = sub_22F42AB4C(a1, (uint64_t *)&off_24FB6DE08, a2);
  *(_QWORD *)result = &off_24FB6DA58;
  if (*(_BYTE *)(result + 464) == 64)
    v4 = 5;
  else
    v4 = 7;
  *(_DWORD *)(result + 596) = v4;
  *(_DWORD *)(result + 592) = v4;
  if ((*((_DWORD *)a2 + 6) - 41) <= 1)
    *(_BYTE *)(result + 86) = 1;
  return result;
}

uint64_t sub_22F427398(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  size_t v7;

  v4 = sub_22F42AB4C(a1, (uint64_t *)&off_24FB70348, a2);
  *(_QWORD *)v4 = &off_24FB6FF98;
  *(_WORD *)(v4 + 464) = 8224;
  *(_DWORD *)(v4 + 608) = 9;
  *(_WORD *)(v4 + 477) = 16448;
  *(_BYTE *)(v4 + 479) = 64;
  *(_DWORD *)(v4 + 484) = 1077944352;
  *(_OWORD *)(v4 + 576) = xmmword_22F549A90;
  *(_QWORD *)(a1 + 552) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v4);
  v5 = *((_DWORD *)a2 + 6);
  if (v5 > 40)
  {
    if (v5 == 41)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32-S128";
      v7 = 67;
      goto LABEL_10;
    }
    if (v5 == 42)
    {
      v6 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-n8:16:32:64-S128";
      v7 = 70;
LABEL_10:
      sub_22F1E6F0C(a1, v6, v7, (uint64_t)"");
      return a1;
    }
LABEL_8:
    v6 = "e-p:32:32-i64:64";
    v7 = 16;
    goto LABEL_10;
  }
  if (v5 != 1 && v5 != 17)
    goto LABEL_8;
  return a1;
}

uint64_t sub_22F427488(uint64_t a1, llvm::Triple *a2)
{
  uint64_t v3;
  int v4;
  const char *v5;
  BOOL v6;
  char v7;
  int v8;
  int v9;
  int v10;
  size_t v11;
  char *v12;

  v3 = sub_22F429954(a1, (uint64_t *)&off_24FCAC838, a2);
  *(_QWORD *)v3 = &off_24FCAC498;
  v4 = *(_DWORD *)(v3 + 72);
  v5 = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128";
  if (*(_DWORD *)(v3 + 68) == 15 && *(_DWORD *)(a1 + 76) == 1)
    v5 = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128";
  v6 = v4 == 6 || v4 == 15;
  if (v6)
    v7 = 32;
  else
    v7 = 64;
  *(_BYTE *)(a1 + 465) = v7;
  *(_BYTE *)(a1 + 464) = v7;
  *(_BYTE *)(a1 + 485) = v7;
  *(_BYTE *)(a1 + 484) = v7;
  *(_WORD *)(a1 + 478) = -32640;
  *(_WORD *)(a1 + 482) = -32640;
  *(_WORD *)(a1 + 506) = 128;
  if (v6)
    v8 = 6;
  else
    v8 = 8;
  *(_DWORD *)(a1 + 576) = v8;
  if (v6)
    v9 = 5;
  else
    v9 = 7;
  *(_DWORD *)(a1 + 584) = v9;
  *(_DWORD *)(a1 + 588) = v9;
  if (v6)
    v10 = 9;
  else
    v10 = 7;
  if (v6)
    v11 = 78;
  else
    v11 = 70;
  *(_DWORD *)(a1 + 580) = v10;
  *(_DWORD *)(a1 + 608) = v10;
  if (v6)
    v12 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128";
  else
    v12 = (char *)v5;
  *(_BYTE *)(a1 + 144) = 6;
  sub_22F1E6F0C(a1, v12, v11, (uint64_t)"");
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFFFFC1 | 0x38;
  *(_WORD *)(a1 + 94) = 16512;
  return a1;
}

uint64_t *sub_22F42759C(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC74408, this);
  *((_WORD *)v3 + 194) = 16448;
  v3[19] = (uint64_t)&unk_22F549F0C;
  *((_BYTE *)v3 + 360) = 1;
  *((_BYTE *)v3 + 87) = 1;
  *(_DWORD *)((char *)v3 + 81) = 16842752;
  *v3 = (uint64_t)&off_24FC74060;
  *((_WORD *)v3 + 184) = 8224;
  *((_DWORD *)v3 + 120) = 6;
  v3[61] = 0x500000005;
  sub_22F1E6F0C((uint64_t)v3, "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024", 0x5AuLL, (uint64_t)"");
  return a1;
}

uint64_t *sub_22F427634(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC752C8, this);
  *((_WORD *)v3 + 194) = 16448;
  v3[19] = (uint64_t)&unk_22F549F0C;
  *((_BYTE *)v3 + 360) = 1;
  *((_BYTE *)v3 + 87) = 1;
  *(_DWORD *)((char *)v3 + 81) = 16842752;
  *v3 = (uint64_t)&off_24FC74F20;
  *((_WORD *)v3 + 184) = 16448;
  *((_DWORD *)v3 + 120) = 8;
  v3[61] = 0x700000007;
  sub_22F1E6F0C((uint64_t)v3, "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024", 0x52uLL, (uint64_t)"");
  return a1;
}

uint64_t *sub_22F4276C8(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC76C98, this);
  *((_WORD *)v3 + 194) = 16448;
  v3[19] = (uint64_t)&unk_22F549F0C;
  *((_BYTE *)v3 + 360) = 1;
  *((_BYTE *)v3 + 87) = 1;
  *(_DWORD *)((char *)v3 + 81) = 16842752;
  *v3 = (uint64_t)&off_24FC768F0;
  *((_WORD *)v3 + 184) = 8224;
  *((_DWORD *)v3 + 120) = 6;
  v3[61] = 0x500000005;
  sub_22F1E6F0C((uint64_t)v3, "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024", 0x5AuLL, (uint64_t)"");
  return a1;
}

uint64_t *sub_22F427760(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC77B58, this);
  *((_WORD *)v3 + 194) = 16448;
  v3[19] = (uint64_t)&unk_22F549F0C;
  *((_BYTE *)v3 + 360) = 1;
  *((_BYTE *)v3 + 87) = 1;
  *(_DWORD *)((char *)v3 + 81) = 16842752;
  *v3 = (uint64_t)&off_24FC777B0;
  *((_WORD *)v3 + 184) = 16448;
  *((_DWORD *)v3 + 120) = 8;
  v3[61] = 0x700000007;
  sub_22F1E6F0C((uint64_t)v3, "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024", 0x52uLL, (uint64_t)"");
  return a1;
}

uint64_t *sub_22F4277F4(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848(a1, (uint64_t *)&off_24FC2DAF0, this);
  *v3 = (uint64_t)&off_24FC2D758;
  *((_WORD *)v3 + 194) = 16448;
  v3[19] = (uint64_t)&unk_22F549F78;
  *((_BYTE *)v3 + 360) = 1;
  *((_BYTE *)v3 + 87) = 1;
  *(_DWORD *)((char *)v3 + 81) = 16842752;
  sub_22F1E6F0C((uint64_t)v3, "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64", 0x4EuLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F427874(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F427890()
{
  return 1;
}

const char *sub_22F427898(llvm::APFloatBase *a1)
{
  char *v1;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (v1[14] == 64)
    return "e";
  v3 = *((_QWORD *)v1 + 11);
  if (v3 == llvm::APFloatBase::PPCDoubleDouble(a1))
    return "g";
  else
    return "u9__ieee128";
}

const char *sub_22F4278F4()
{
  return "u9__ieee128";
}

const char *sub_22F427900()
{
  return "g";
}

uint64_t sub_22F42790C(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F4279E0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1FC4C0(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F427A28()
{
  return 0;
}

uint64_t sub_22F427A30()
{
  return 4;
}

BOOL sub_22F427A38(uint64_t a1, _WORD *a2, uint64_t a3)
{
  if (a3 != 2)
    return 0;
  if (*a2 == 12658)
    return 1;
  return *a2 == 12664;
}

uint64_t sub_22F427A74(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t result;
  _BYTE *v5;
  int v6;
  _BYTE *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  result = 0;
  v5 = (_BYTE *)*a2;
  switch(*(_BYTE *)*a2)
  {
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'W':
    case 'a':
    case 'j':
    case 't':
      return 1;
    case 'Q':
      v10 = *a3 | 2;
      goto LABEL_11;
    case 'Z':
      v10 = *a3;
LABEL_11:
      v6 = v10 | 1;
      goto LABEL_6;
    case 'b':
    case 'c':
    case 'h':
    case 'l':
    case 'q':
    case 'x':
    case 'y':
    case 'z':
      goto LABEL_5;
    case 'd':
    case 'f':
    case 'v':
      if (*(_DWORD *)(a1 + 392) == 1)
        return 0;
LABEL_5:
      v6 = *a3 | 2;
LABEL_6:
      *a3 = v6;
      return 1;
    case 'e':
    case 'm':
      v8 = v5[1];
      v7 = v5 + 1;
      if (v8 != 115)
        return 0;
      v9 = *a3 | 1;
      goto LABEL_17;
    case 'w':
      v11 = (char)v5[1];
      v7 = v5 + 1;
      v12 = (1 << (v11 - 97)) & 0x44012D;
      if ((v11 - 97) > 0x16 || v12 == 0)
        return 0;
      v9 = *a3 | 2;
LABEL_17:
      *a3 = v9;
      *a2 = v7;
      return 1;
    default:
      return result;
  }
}

const char *sub_22F427B40()
{
  return "";
}

uint64_t sub_22F427B4C()
{
  return 0;
}

uint64_t sub_22F427B54(uint64_t a1)
{
  if (*(char *)(a1 + 447) >= 0)
    return a1 + 424;
  else
    return *(_QWORD *)(a1 + 424);
}

uint64_t sub_22F427B78(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 4;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 3;
}

const char *sub_22F427B94()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

uint64_t sub_22F427BA0()
{
  return 1;
}

double sub_22F427BA8(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 471);
  if (v5 >= 0)
    v6 = a1 + 448;
  else
    v6 = *(_QWORD *)(a1 + 448);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 456);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F427C08(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FAE4818);
}

void sub_22F427C14(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FAE4818);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F427C48()
{
  return 0;
}

uint64_t sub_22F427C50(uint64_t a1, _QWORD *a2, llvm::Triple *a3)
{
  _QWORD *v6;
  const char *v7;
  char *v8;
  llvm::APFloatBase *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;

  v6 = (_QWORD *)sub_22F1EE0AC(a1, a2 + 1, a3);
  *v6 = *a2;
  if (*((_DWORD *)a3 + 6) == 22)
    v7 = "e-m:e-p:32:32-i64:64-n32";
  else
    v7 = "E-m:e-p:32:32-i64:64-n32";
  if (*((_DWORD *)a3 + 9) == 21)
    v8 = "E-m:a-p:32:32-i64:64-n32";
  else
    v8 = (char *)v7;
  sub_22F1E6F0C((uint64_t)v6, v8, 0x18uLL, (uint64_t)"");
  v10 = *(_DWORD *)(a1 + 68);
  if (v10 <= 11)
  {
    if (v10 != 5 && v10 != 9)
      goto LABEL_14;
LABEL_13:
    v11 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = 6;
    *(_DWORD *)(a1 + *(_QWORD *)(v11 - 24) + 120) = 5;
    *(_DWORD *)(a1 + *(_QWORD *)(v11 - 24) + 124) = 5;
    goto LABEL_14;
  }
  if (v10 != 21)
  {
    if (v10 != 12)
      goto LABEL_14;
    goto LABEL_13;
  }
  v15 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = 8;
  *(_DWORD *)(a1 + *(_QWORD *)(v15 - 24) + 120) = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v15 - 24) + 124) = 7;
  *(_BYTE *)(a1 + *(_QWORD *)(v15 - 24) + 14) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v15 - 24) + 13) = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v15 - 24) + 15) = 32;
  v9 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v9);
  *(_QWORD *)(a1 + *(_QWORD *)(v15 - 24) + 88) = v9;
LABEL_14:
  v12 = *((_DWORD *)a3 + 9);
  if (v12 <= 0xD && ((1 << v12) & 0x3020) != 0 || (*((_DWORD *)a3 + 10) & 0xFFFFFFFC) == 0xC)
  {
    v13 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 15) = 64;
    *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 14) = 64;
    *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24) + 88) = llvm::APFloatBase::IEEEdouble(v9);
  }
  *(_WORD *)(a1 + 94) = 8224;
  return a1;
}

uint64_t sub_22F427E0C(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  int v3;

  result = sub_22F427C50(a1, &off_24FAE5340, a2);
  *(_QWORD *)result = &off_24FAE5370;
  *(_DWORD *)(result + 148) = 9;
  if (*(_BYTE *)(result + 448) == 64)
    v3 = 6;
  else
    v3 = 4;
  *(_DWORD *)(result + 576) = v3;
  *(_BYTE *)(result + 608) |= 4u;
  return result;
}

uint64_t sub_22F427E64(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FAE6978);
}

void sub_22F427E70(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FAE6978);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F427E9C()
{
  return 1;
}

uint64_t sub_22F427EA4()
{
  return 1;
}

uint64_t sub_22F427EAC(_QWORD *a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  _QWORD v11[4];
  __int16 v12;
  const char *v13;
  uint64_t v14;
  __int16 v15;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v13 = "_IBMR2";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "_POWER";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "__THW_BIG_ENDIAN__";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "_AIX";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "__TOS_AIX__";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "__HOS_AIX__";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v13 = "__STDC_NO_ATOMICS__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
    v13 = "__STDC_NO_THREADS__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  if ((*(_DWORD *)(a2 + 52) & 2) != 0)
  {
    v13 = "__EXTABI__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v10[0] = llvm::Triple::getOSVersion(a3);
  v10[1] = v8;
  v13 = (const char *)0x8000000200000003;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX32";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000004;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX41";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000300000004;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX43";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000000000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX50";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX51";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000200000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX52";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000300000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX53";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000006;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX61";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000007;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX71";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000200000007;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX72";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000300000007;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX73";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = "_LONG_LONG";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v13 = "_THREAD_SAFE";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  if (*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24)) == 64)
  {
    v13 = "__64BIT__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  if ((~*(_DWORD *)a2 & 0x2000100) == 0)
  {
    v13 = "_WCHAR_T";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  return result;
}

uint64_t sub_22F4284A8(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FAE5348);
}

void sub_22F4284B4(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FAE5348);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4284E0()
{
  return 0;
}

uint64_t sub_22F4284E8(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

_DWORD *sub_22F428504(_DWORD *result)
{
  _DWORD *v1;

  if (result[17] != 21)
  {
    v1 = result;
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, const char *, uint64_t))(*(_QWORD *)result + 568))(result, "quadword-atomics", 16);
    if ((_DWORD)result)
      *((_BYTE *)v1 + 95) = 0x80;
  }
  return result;
}

uint64_t sub_22F428550(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F428624(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1FC4C0(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42866C()
{
  return 0;
}

uint64_t sub_22F428674()
{
  return 0;
}

BOOL sub_22F42867C(uint64_t a1, std::string *a2)
{
  _BOOL8 result;

  if (sub_22F1ED4D8(a2, "elfv1") || (result = sub_22F1ED4D8(a2, "elfv2")))
  {
    std::string::operator=((std::string *)(a1 + 424), a2);
    return 1;
  }
  return result;
}

const char *sub_22F4286D4()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

uint64_t sub_22F4286E0(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 15)
    v2 = 3;
  else
    v2 = 1;
  if (a2 == 14)
    return 0;
  else
    return v2;
}

double sub_22F4286F8(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 471);
  if (v5 >= 0)
    v6 = a1 + 448;
  else
    v6 = *(_QWORD *)(a1 + 448);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 456);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F428758(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FAEA498);
}

void sub_22F428764(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FAEA498);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F428790(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  int v3;

  result = sub_22F1EE38C(a1, (uint64_t *)&off_24FAEAFC0, a2);
  *(_QWORD *)result = &off_24FAEAFF0;
  *(_DWORD *)(result + 148) = 9;
  if (*(_BYTE *)(result + 448) == 64)
    v3 = 6;
  else
    v3 = 4;
  *(_DWORD *)(result + 576) = v3;
  *(_BYTE *)(result + 608) |= 4u;
  return result;
}

uint64_t sub_22F4287E8(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FAEC5F8);
}

void sub_22F4287F4(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FAEC5F8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F428820()
{
  return 1;
}

uint64_t sub_22F428828()
{
  return 1;
}

uint64_t sub_22F428830(_QWORD *a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  _QWORD v11[4];
  __int16 v12;
  const char *v13;
  uint64_t v14;
  __int16 v15;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v13 = "_IBMR2";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "_POWER";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "__THW_BIG_ENDIAN__";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "_AIX";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "__TOS_AIX__";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  v13 = "__HOS_AIX__";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v13 = "__STDC_NO_ATOMICS__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
    v13 = "__STDC_NO_THREADS__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  if ((*(_DWORD *)(a2 + 52) & 2) != 0)
  {
    v13 = "__EXTABI__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v10[0] = llvm::Triple::getOSVersion(a3);
  v10[1] = v8;
  v13 = (const char *)0x8000000200000003;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX32";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000004;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX41";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000300000004;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX43";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000000000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX50";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX51";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000200000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX52";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000300000005;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX53";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000006;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX61";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000100000007;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX71";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000200000007;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX72";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = (const char *)0x8000000300000007;
  v14 = 0;
  if ((sub_22E3B38EC(v10, &v13) & 1) == 0)
  {
    v13 = "_AIX73";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  v13 = "_LONG_LONG";
  v15 = 259;
  v11[0] = "1";
  v12 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v13 = "_THREAD_SAFE";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  if (*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24)) == 64)
  {
    v13 = "__64BIT__";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  if ((~*(_DWORD *)a2 & 0x2000100) == 0)
  {
    v13 = "_WCHAR_T";
    v15 = 259;
    v11[0] = "1";
    v12 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)&v13, (llvm::Twine *)v11);
  }
  return result;
}

uint64_t sub_22F428E2C(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FAEAFC8);
}

void sub_22F428E38(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FAEAFC8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F428E64(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;

  v5 = sub_22F1E6848((uint64_t *)a1, a2 + 2, a3);
  *v5 = a2[1];
  *((_BYTE *)v5 + 361) = 0;
  *((_DWORD *)v5 + 91) = 0;
  *v5 = *a2;
  sub_22F1E6F0C((uint64_t)v5, "E-m:e-p:32:32-i64:64-f128:64-n32-S64", 0x24uLL, (uint64_t)"");
  v6 = *(_QWORD *)a1;
  if ((*(_DWORD *)(a1 + 68) & 0xFFFFFFFE) == 0xC)
    v7 = 8;
  else
    v7 = 6;
  if ((*(_DWORD *)(a1 + 68) & 0xFFFFFFFE) == 0xC)
    v8 = 7;
  else
    v8 = 5;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = v7;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 124) = v8;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 120) = v8;
  *(_BYTE *)(a1 + 94) = 64;
  if (sub_22F43E1D4(a1, *(_DWORD *)(a1 + 364)) == 1)
    v9 = 64;
  else
    v9 = 32;
  *(_BYTE *)(a1 + 95) = v9;
  return a1;
}

uint64_t sub_22F428F30(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC799F0);
}

void sub_22F428F3C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC799F0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F428F68()
{
  return 1;
}

uint64_t sub_22F428F70()
{
  return 0;
}

uint64_t sub_22F428F7C()
{
  return 1;
}

uint64_t sub_22F428F84(uint64_t a1, char **a2, _DWORD *a3)
{
  int v3;

  v3 = **a2;
  if ((v3 - 73) < 7)
    return 1;
  if ((v3 - 101) <= 1)
  {
    *a3 |= 2u;
    return 1;
  }
  return 0;
}

const char *sub_22F428FC4()
{
  return "";
}

BOOL sub_22F428FD0(uint64_t a1, _BYTE *a2)
{
  char v3;
  BOOL v4;
  size_t v5;
  size_t v6;
  size_t v7;
  int v8;

  v3 = a2[23];
  v4 = v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if (v3 < 0)
    a2 = *(_BYTE **)a2;
  v6 = v3 & 0x7F;
  if (v4)
    v7 = v5;
  else
    v7 = v6;
  v8 = sub_22F43E220(a1, a2, v7);
  *(_DWORD *)(a1 + 364) = v8;
  return v8 != 0;
}

BOOL sub_22F429018(int a1, void *a2, size_t a3)
{
  return sub_22F43E220(a1, a2, a3) != 0;
}

uint64_t sub_22F429034(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v4)
  {
    v6 = *(_QWORD **)a2;
  }
  else
  {
    while (!sub_22F1ED4D8(v3, "+soft-float"))
    {
      v3 += 3;
      if (v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    v6 = v3;
    v3 = *(_QWORD **)(a2 + 8);
  }
  if (v6 != v3)
    *(_BYTE *)(a1 + 361) = 1;
  return 1;
}

uint64_t sub_22F4290BC(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 25;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 24;
}

uint64_t sub_22F4290D8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC79288);
}

void sub_22F4290E4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC79288);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F429110(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAED870);
}

void sub_22F42911C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAED870);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F429148(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;

  v3 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FC7F8D8, this);
  *v3 = (uint64_t)&off_24FC7F8F8;
  *((_BYTE *)v3 + 81) = 0;
  *((_WORD *)v3 + 186) = 8224;
  *((_WORD *)v3 + 184) = 8224;
  *((_DWORD *)v3 + 97) = 538976288;
  *((_WORD *)v3 + 205) = 32;
  *((_OWORD *)v3 + 30) = xmmword_22F549AB0;
  v4 = (_DWORD *)((char *)v3 + 378);
  v5 = llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)v3);
  *v4 = 538976288;
  *(_WORD *)(a1 + 382) = 8224;
  *(_QWORD *)(a1 + 440) = v5;
  *(_QWORD *)(a1 + 448) = v5;
  *(_QWORD *)(a1 + 456) = v5;
  sub_22F1E6F0C(a1, "E-p:32:32:32-i1:8:8-i8:8:32-i16:16:32-i32:32:32-i64:32:32-f32:32:32-f64:32:32-v64:32:32-v128:32:32-v256:32:32-v512:32:32-v1024:32:32-a0:0:32-n32", 0x90uLL, (uint64_t)"");
  *(_QWORD *)(a1 + 152) = &unk_22F549E34;
  *(_BYTE *)(a1 + 360) = 1;
  return a1;
}

uint64_t sub_22F429200(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F42921C()
{
  return 1;
}

const char *sub_22F429224(llvm::APFloatBase *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 88);
  if (v1 == llvm::APFloatBase::IEEEquad(a1))
    return "g";
  else
    return "e";
}

uint64_t sub_22F429268(uint64_t a1)
{
  return 2 * (*(_DWORD *)(a1 + 364) == 0);
}

BOOL sub_22F42927C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 364) > 0;
}

BOOL sub_22F42928C(uint64_t a1)
{
  _BOOL8 result;

  result = sub_22F2064C8(a1, (uint64_t)"cx8", 3);
  if (result)
    *(_BYTE *)(a1 + 95) = 64;
  return result;
}

uint64_t sub_22F4292C4(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F429398()
{
  return 0;
}

uint64_t sub_22F4293A0(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  sub_22F207438(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F4293E8()
{
  return 0;
}

BOOL sub_22F4293F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
    return 0;
  if (*(_WORD *)a2 == 29541 && *(_BYTE *)(a2 + 2) == 112)
    return 1;
  return *(_WORD *)a2 == 29554 && *(_BYTE *)(a2 + 2) == 112;
}

uint64_t sub_22F429440(uint64_t a1, uint64_t a2, uint64_t a3, int a4, BOOL *a5)
{
  if (a3 != 3)
    return 0;
  if ((*(_WORD *)a2 != 29541 || *(_BYTE *)(a2 + 2) != 112) && (*(_WORD *)a2 != 25189 || *(_BYTE *)(a2 + 2) != 112))
    return 0;
  *a5 = a4 != 32;
  return 1;
}

const char *sub_22F429498()
{
  return "~{dirflag},~{fpsr},~{flags}";
}

uint64_t sub_22F4294A4()
{
  return 0;
}

const char *sub_22F4294AC(_DWORD *a1)
{
  int v1;
  int v2;

  v1 = a1[14];
  if (v1 == 41)
  {
    if (!a1[92])
      return "no-mmx";
    return "";
  }
  if (v1 != 42)
    return "";
  v2 = a1[91];
  if (v2 <= 8)
  {
    if (v2 > 6)
      return "avx";
    return "";
  }
  return "avx512";
}

BOOL sub_22F429518(uint64_t a1)
{
  int v2;

  v2 = llvm::X86::parseArchX86();
  *(_DWORD *)(a1 + 456) = v2;
  return v2 != 0;
}

BOOL sub_22F42956C()
{
  return llvm::X86::parseArchX86() != 0;
}

BOOL sub_22F4295A0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v3;

  if (a3 == 7 && (*a2 == 1701733735 ? (v3 = *(_DWORD *)((char *)a2 + 3) == 1667854949) : (v3 = 0), v3))
    return 1;
  else
    return llvm::X86::parseTuneCPU() != 0;
}

uint64_t sub_22F4295FC()
{
  return 1;
}

uint64_t sub_22F429604(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 2;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 0;
}

const char *sub_22F42961C()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

BOOL sub_22F429628(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) != 41;
}

uint64_t sub_22F429638()
{
  return 1;
}

uint64_t sub_22F429640()
{
  return 0;
}

uint64_t sub_22F429648(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x10)
    return 1;
  else
    return dword_22F549FE4[a2];
}

uint64_t sub_22F429668()
{
  return 1;
}

uint64_t sub_22F429670()
{
  return 1;
}

uint64_t sub_22F429678()
{
  return 1;
}

uint64_t sub_22F429680(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 792))(a1, 1);
}

uint64_t sub_22F429690(_QWORD *a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) == 0x10E)
    return 32;
  if (a2 == 272)
    return 64;
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_22F4296C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
}

uint64_t sub_22F4296D0()
{
  return 0;
}

uint64_t sub_22F4296DC(int *a1, uint64_t a2, char *a3, uint64_t a4, unsigned int a5)
{
  unsigned int v5;
  BOOL v6;

  v5 = *a3 - 65;
  if (v5 > 0x30)
    return sub_22F20D0A4(a1, a2, a3, a4, a5);
  if (((1 << v5) & 0x1000F00070008) != 0)
  {
    v6 = a5 >= 0x21;
    return !v6;
  }
  if (*a3 != 65)
    return sub_22F20D0A4(a1, a2, a3, a4, a5);
  v6 = a5 >= 0x41;
  return !v6;
}

double sub_22F429728(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 487);
  if (v5 >= 0)
    v6 = a1 + 464;
  else
    v6 = *(_QWORD *)(a1 + 464);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 472);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F429788(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FCAC478);
}

void sub_22F429794(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FCAC478);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4297C8(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  v4 = sub_22F204BD4((uint64_t)a1, a2, a3);
  if ((_DWORD)v4)
  {
    if (sub_22F2064C8((uint64_t)a1, (uint64_t)"avx512f", 7))
    {
      v5 = 512;
    }
    else if (sub_22F2064C8((uint64_t)a1, (uint64_t)"avx", 3))
    {
      v5 = 256;
    }
    else
    {
      v5 = 128;
    }
    *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 48) = v5;
  }
  return v4;
}

uint64_t sub_22F429848(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  char *v10;
  uint64_t v11;

  v6 = (_QWORD *)sub_22F429954(a1, a2 + 1, a3);
  v7 = *a2;
  *v6 = *a2;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 23) = 32;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 13) = 32;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 14) = 96;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 15) = 32;
  *(_WORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 42) = 128;
  v8 = *((_DWORD *)a3 + 11);
  if (v8 == 5)
    v9 = "_";
  else
    v9 = "";
  if (v8 == 5)
    v10 = "e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128";
  else
    v10 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128";
  sub_22F1E6F0C((uint64_t)v6, v10, 0x4DuLL, (uint64_t)v9);
  v11 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112) = 6;
  *(_DWORD *)(a1 + *(_QWORD *)(v11 - 24) + 120) = 5;
  *(_DWORD *)(a1 + *(_QWORD *)(v11 - 24) + 124) = 5;
  *(_BYTE *)(a1 + 144) = 3;
  *(_DWORD *)(a1 + 288) |= 0xEu;
  *(_WORD *)(a1 + 94) = 8256;
  return a1;
}

uint64_t sub_22F429954(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v5;
  uint64_t v6;
  llvm::APFloatBase *v7;

  v5 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v6 = *a2;
  *v5 = v6;
  v5[57] = 0;
  *(_OWORD *)((char *)v5 + 364) = 0u;
  *(_OWORD *)((char *)v5 + 380) = 0u;
  *(_OWORD *)((char *)v5 + 396) = 0u;
  *(_OWORD *)((char *)v5 + 412) = 0u;
  *(_OWORD *)((char *)v5 + 428) = 0u;
  *(_OWORD *)((char *)v5 + 437) = 0u;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 9) = 16;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) = 16;
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::BFloat((llvm::APFloatBase *)v5);
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24) + 64) = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24) + 88) = llvm::APFloatBase::x87DoubleExtended(v7);
  *(_QWORD *)(a1 + 152) = &unk_22F549EA0;
  *(_BYTE *)(a1 + 93) = 1;
  *(_BYTE *)(a1 + 87) = 1;
  if (*(_DWORD *)(a1 + 68) == 15 && *(_DWORD *)(a1 + 76) == 1)
  {
    *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 52) = 0x10000;
    *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 48) = 0x10000;
  }
  return a1;
}

uint64_t sub_22F429A2C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF26A8);
}

void sub_22F429A38(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF26A8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F429A64()
{
  return ".text.startup";
}

uint64_t sub_22F429A70(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F429C70(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF1050);
}

void sub_22F429C7C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF1050);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F429CA8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF4FA8);
}

void sub_22F429CB4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF4FA8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F429CE0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F429DC4(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF3950);
}

void sub_22F429DD0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF3950);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F429DFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v5[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v5[1] = v2;
  v4[0] = 0x8000006300000006;
  v4[1] = 2147483674;
  if (sub_22E3B38EC(v5, v4) && LODWORD(v5[0]))
    return 1;
  else
    return 2 * (*(_DWORD *)(a1 + 364) == 0);
}

uint64_t sub_22F429E74(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F429848(a1, (uint64_t *)&off_24FAF6240, a2);
  *(_QWORD *)result = &off_24FAF6270;
  *(_QWORD *)(result + 592) = 0x500000005;
  *(_DWORD *)(result + 580) = 9;
  *(_DWORD *)(result + 608) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F429F20(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF78A8);
}

void sub_22F429F2C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF78A8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F429F58(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42A0A0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF6250);
}

void sub_22F42A0AC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF6250);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A0D8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF8B38);
}

void sub_22F42A0E4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF8B38);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A110(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  sub_22F207438(a1, a2, a3);
  v8[0] = "_X86_";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__CYGWIN__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__CYGWIN32__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  sub_22F1E8630(a2, a3);
  result = sub_22F425880(a3, (uint64_t)"unix", 4, (uint64_t)a2);
  if ((a2[1] & 1) != 0)
  {
    v8[0] = "_GNU_SOURCE";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  return result;
}

uint64_t sub_22F42A21C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAFB448);
}

void sub_22F42A228(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAFB448);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F42A254(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  sub_22F43CF94(a3, a2, a4);
}

uint64_t sub_22F42A260(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAFCAA0);
}

void sub_22F42A26C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAFCAA0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A298(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAF9A30);
}

void sub_22F42A2A4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAF9A30);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A2D0(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;

  sub_22F207438(a1, a2, a3);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
  v9 = "_X86_";
  v10 = 259;
  v7 = "1";
  v8 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v9, (llvm::Twine *)&v7);
}

uint64_t sub_22F42A358(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAFDD50);
}

void sub_22F42A364(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAFDD50);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A390(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;

  sub_22F207438(a1, a2, a3);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
  v9 = "_M_IX86";
  v10 = 259;
  v7 = "600";
  v8 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v9, (llvm::Twine *)&v7);
}

uint64_t sub_22F42A418(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;

  result = sub_22F429848(a1, (uint64_t *)&off_24FAFF758, a2);
  *(_QWORD *)result = &off_24FAFF788;
  *(_DWORD *)(result + 576) = 8;
  *(_QWORD *)(result + 584) = 0x700000007;
  *(_DWORD *)(result + 620) = 7;
  *(_BYTE *)(result + 81) = 0;
  if ((*((_DWORD *)a2 + 6) - 41) <= 1)
    *(_BYTE *)(result + 86) = 1;
  return result;
}

uint64_t sub_22F42A484(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB00DC0);
}

void sub_22F42A490(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB00DC0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A4BC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__HAIKU__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  result = sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42A59C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FAFF768);
}

void sub_22F42A5A8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FAFF768);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A5D4(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;

  sub_22F207438(a1, a2, a3);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
  v9 = "__INTEL__";
  v10 = 259;
  v7 = "1";
  v8 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v9, (llvm::Twine *)&v7);
}

uint64_t sub_22F42A65C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB02050);
}

void sub_22F42A668(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB02050);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A694(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  sub_22F207438(a1, a2, a3);
  v7[0] = "__INTEL__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__rtems__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

uint64_t sub_22F42A720(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB02F28);
}

void sub_22F42A72C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB02F28);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42A758(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  sub_22F207438(a1, a2, a3);
  v7[0] = "__iamcu";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__iamcu__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

BOOL sub_22F42A7E4(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t sub_22F42A7F0()
{
  return 0;
}

uint64_t sub_22F42A7F8(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F42A814()
{
  return 1;
}

uint64_t sub_22F42A81C()
{
  return 1;
}

BOOL sub_22F42A824(uint64_t a1)
{
  _BOOL8 result;

  result = sub_22F2064C8(a1, (uint64_t)"cx16", 4);
  if (result)
    *(_BYTE *)(a1 + 95) = 0x80;
  return result;
}

uint64_t sub_22F42A85C(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F42A930()
{
  return 64;
}

uint64_t sub_22F42A938()
{
  return 64;
}

uint64_t sub_22F42A940(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  sub_22F207438(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42A988()
{
  return 5;
}

uint64_t sub_22F42A990(uint64_t a1, uint64_t a2, uint64_t a3, int a4, BOOL *a5)
{
  if (a3 != 3)
    return sub_22F429440(a1, a2, a3, a4, a5);
  if ((*(_WORD *)a2 != 29554 || *(_BYTE *)(a2 + 2) != 112) && (*(_WORD *)a2 != 25202 || *(_BYTE *)(a2 + 2) != 112))
    return sub_22F429440(a1, a2, a3, a4, a5);
  *a5 = a4 != 64;
  return 1;
}

uint64_t sub_22F42A9E4()
{
  return 0;
}

uint64_t sub_22F42A9EC(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 1;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 0;
}

const char *sub_22F42AA00()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

uint64_t sub_22F42AA0C()
{
  return 0;
}

uint64_t sub_22F42AA14(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x11)
    return 1;
  else
    return dword_22F54A028[a2];
}

double sub_22F42AA34(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 487);
  if (v5 >= 0)
    v6 = a1 + 464;
  else
    v6 = *(_QWORD *)(a1 + 464);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 472);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F42AA94(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FCAC840);
}

void sub_22F42AAA0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FCAC840);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42AACC(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  v4 = sub_22F204BD4((uint64_t)a1, a2, a3);
  if ((_DWORD)v4)
  {
    if (sub_22F2064C8((uint64_t)a1, (uint64_t)"avx512f", 7))
    {
      v5 = 512;
    }
    else if (sub_22F2064C8((uint64_t)a1, (uint64_t)"avx", 3))
    {
      v5 = 256;
    }
    else
    {
      v5 = 128;
    }
    *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 48) = v5;
  }
  return v4;
}

uint64_t sub_22F42AB4C(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  BOOL v9;
  char v10;
  int v11;
  int v12;
  int v13;
  size_t v14;
  char *v15;

  v5 = sub_22F429954(a1, a2 + 1, a3);
  v6 = *a2;
  *(_QWORD *)v5 = *a2;
  v7 = *(_DWORD *)(v5 + 72);
  v8 = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128";
  if (*(_DWORD *)(v5 + 68) == 15 && *(_DWORD *)(a1 + 76) == 1)
    v8 = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128";
  v9 = v7 == 6 || v7 == 15;
  if (v9)
    v10 = 32;
  else
    v10 = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 1) = v10;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24)) = v10;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 21) = v10;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 20) = v10;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 14) = 0x80;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 15) = 0x80;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 18) = 0x80;
  *(_BYTE *)(a1 + *(_QWORD *)(v6 - 24) + 19) = 0x80;
  *(_WORD *)(a1 + *(_QWORD *)(v6 - 24) + 42) = 128;
  if (v9)
    v11 = 6;
  else
    v11 = 8;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 112) = v11;
  if (v9)
    v12 = 5;
  else
    v12 = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 120) = v12;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 124) = v12;
  if (v9)
    v13 = 9;
  else
    v13 = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 116) = v13;
  *(_DWORD *)(a1 + *(_QWORD *)(v6 - 24) + 144) = v13;
  *(_BYTE *)(a1 + 144) = 6;
  if (v9)
    v14 = 78;
  else
    v14 = 70;
  if (v9)
    v15 = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128";
  else
    v15 = (char *)v8;
  sub_22F1E6F0C(a1, v15, v14, (uint64_t)"");
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFFFFC1 | 0x38;
  *(_WORD *)(a1 + 94) = 16512;
  return a1;
}

uint64_t sub_22F42ACC8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB07D70);
}

void sub_22F42ACD4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB07D70);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42AD00()
{
  return ".text.startup";
}

uint64_t sub_22F42AD0C(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42AF0C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB06718);
}

void sub_22F42AF18(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB06718);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42AF44(uint64_t a1, llvm::Triple *a2)
{
  uint64_t result;
  unsigned int v4;
  const char *v5;

  result = sub_22F42AB4C(a1, (uint64_t *)&off_24FB09008, a2);
  *(_QWORD *)result = &off_24FB09038;
  *(_QWORD *)(result + 592) = 0x500000005;
  *(_DWORD *)(result + 580) = 9;
  *(_DWORD *)(result + 608) = 9;
  v4 = *((_DWORD *)a2 + 6);
  v5 = "__mcount";
  if (v4 > 0x2A)
    goto LABEL_4;
  if (((1 << v4) & 0x401AC0000) != 0)
  {
    v5 = "_mcount";
LABEL_4:
    *(_QWORD *)(result + 136) = v5;
    return result;
  }
  if (((1 << v4) & 0x180000000) == 0)
  {
    if (((1 << v4) & 0x60000000000) != 0)
      *(_BYTE *)(result + 86) = 1;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F42AFF0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB0A670);
}

void sub_22F42AFFC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB0A670);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B028(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42B170(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB09018);
}

void sub_22F42B17C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB09018);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B1A8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB0B900);
}

void sub_22F42B1B4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB0B900);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B1E0(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  sub_22F207438(a1, a2, a3);
  v8[0] = "__x86_64__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__CYGWIN__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__CYGWIN64__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  sub_22F1E8630(a2, a3);
  result = sub_22F425880(a3, (uint64_t)"unix", 4, (uint64_t)a2);
  if ((a2[1] & 1) != 0)
  {
    v8[0] = "_GNU_SOURCE";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  return result;
}

_QWORD *sub_22F42B2EC(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  result = (_QWORD *)sub_22F42AB4C(a1, a2 + 3, a3);
  *result = a2[2];
  v5 = a2[1];
  *result = v5;
  *(_DWORD *)((char *)result + *(_QWORD *)(v5 - 24) + 128) = 4;
  *(_DWORD *)((char *)result + *(_QWORD *)(v5 - 24) + 132) = 4;
  v6 = *a2;
  *result = *a2;
  *((_BYTE *)result + *(_QWORD *)(v6 - 24) + 21) = 32;
  *((_BYTE *)result + *(_QWORD *)(v6 - 24) + 20) = 32;
  *((_BYTE *)result + *(_QWORD *)(v6 - 24) + 23) = 64;
  *((_BYTE *)result + *(_QWORD *)(v6 - 24) + 13) = 64;
  *(_DWORD *)((char *)result + *(_QWORD *)(v6 - 24) + 116) = 9;
  *(_DWORD *)((char *)result + *(_QWORD *)(v6 - 24) + 144) = 9;
  *(_DWORD *)((char *)result + *(_QWORD *)(v6 - 24) + 112) = 10;
  *(_DWORD *)((char *)result + *(_QWORD *)(v6 - 24) + 120) = 9;
  *(_DWORD *)((char *)result + *(_QWORD *)(v6 - 24) + 124) = 9;
  return result;
}

uint64_t sub_22F42B3C0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB0E210);
}

void sub_22F42B3CC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB0E210);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B3F8()
{
  return 0;
}

uint64_t sub_22F42B400(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x11)
    return 1;
  else
    return dword_22F54A070[a2];
}

void sub_22F42B420(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  sub_22F43CF94(a3, a2, a4);
}

uint64_t sub_22F42B42C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB0F868);
}

void sub_22F42B438(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB0F868);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B464(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB0C7F8);
}

void sub_22F42B470(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB0C7F8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B49C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB10B18);
}

void sub_22F42B4A8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB10B18);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B4D4(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  sub_22F207438(a1, a2, a3);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
  v9[0] = "_M_X64";
  v10 = 259;
  v7[0] = "100";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_M_AMD64";
  v10 = 259;
  v7[0] = "100";
  v8 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F42B584()
{
  return 2;
}

uint64_t sub_22F42B594()
{
  return 1;
}

uint64_t sub_22F42B59C(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1F7984(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42B5E4()
{
  return 0;
}

uint64_t sub_22F42B5EC(uint64_t a1)
{
  return 8 * ((*(_DWORD *)(a1 + 72) & 0xFFFFFFFC) == 12);
}

uint64_t sub_22F42B604(uint64_t a1, char **a2, _DWORD *a3)
{
  int v3;

  v3 = **a2;
  if (v3 > 114)
  {
    if (v3 == 115)
      return 1;
    if (v3 != 118)
      return 0;
  }
  else
  {
    if (v3 == 97)
    {
LABEL_8:
      *a3 |= 2u;
      return 1;
    }
    if (v3 != 113)
      return 0;
  }
  if (*(_BYTE *)(a1 + 416))
    goto LABEL_8;
  return 0;
}

const char *sub_22F42B65C()
{
  return "";
}

uint64_t sub_22F42B668(uint64_t a1, std::string *a2)
{
  const std::string *v2;
  char v4;
  BOOL v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;

  v2 = a2;
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  size = a2->__r_.__value_.__l.__size_;
  if (v4 < 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v7 = v4 & 0x7F;
  if (v5)
    v8 = size;
  else
    v8 = v7;
  v9 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1 + 480))(a1, a2, v8);
  if ((_DWORD)v9)
    std::string::operator=((std::string *)(a1 + 368), v2);
  return v9;
}

BOOL sub_22F42B6D0(int a1, void *__s2, char *__n)
{
  return sub_22F43C128(__s2, __n) != 0;
}

uint64_t sub_22F42B6F4(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
    return 0xFFFFFFFFLL;
  else
    return a2;
}

uint64_t sub_22F42B700(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FC44D38);
}

void sub_22F42B70C(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FC44D38);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42B738(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB12510);
}

void sub_22F42B744(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB12510);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42B770()
{
  return ".text.startup";
}

uint64_t sub_22F42B77C(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42B984()
{
  return 1;
}

const char *sub_22F42B98C()
{
  return "u6__bf16";
}

uint64_t sub_22F42B998()
{
  return 0;
}

uint64_t sub_22F42B9A0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F437448(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42B9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_22F42B9FC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__CloudABI__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_ISO_10646__";
  v9 = 259;
  v6[0] = "201206L";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_16__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_32__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F42BB04(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42BC50(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  int v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  v11[0] = "__Fuchsia__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "_GNU_SOURCE";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "__Fuchsia_API_level__";
  v12 = 259;
  v7 = *(_DWORD *)(a2 + 224);
  v10 = 264;
  LODWORD(v9[0]) = v7;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  a1[28] = "fuchsia";
  a1[29] = 7;
  a1[30] = *(unsigned int *)(a2 + 224);
  a1[31] = 0;
  return result;
}

const char *sub_22F42BD98()
{
  return ".text.startup";
}

uint64_t sub_22F42BDA4(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42BFA4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42C088(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42C1D8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F4374C0(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42C220(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42C36C(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  int v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  v11[0] = "__Fuchsia__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "_GNU_SOURCE";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "__Fuchsia_API_level__";
  v12 = 259;
  v7 = *(_DWORD *)(a2 + 224);
  v10 = 264;
  LODWORD(v9[0]) = v7;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  a1[28] = "fuchsia";
  a1[29] = 7;
  a1[30] = *(unsigned int *)(a2 + 224);
  a1[31] = 0;
  return result;
}

const char *sub_22F42C4B4()
{
  return ".text.startup";
}

uint64_t sub_22F42C4C0(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42C6C0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42C7AC()
{
  return 1;
}

const char *sub_22F42C7B4()
{
  return "u6__bf16";
}

uint64_t sub_22F42C7C0()
{
  return 0;
}

uint64_t sub_22F42C7C8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43AEE0(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

BOOL sub_22F42C81C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (a3 != 14)
    return 1;
  return *a2 != 0x6F6C662D74666F73 || *(_QWORD *)((char *)a2 + 6) != 0x6962612D74616F6CLL;
}

uint64_t sub_22F42C864(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FC1BFA0);
}

void sub_22F42C870(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FC1BFA0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42C89C(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FBE9780);
}

void sub_22F42C8A8(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FBE9780);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42C8D4(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB1EE28);
}

void sub_22F42C8E0(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB1EE28);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42C90C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__CloudABI__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_ISO_10646__";
  v9 = 259;
  v6[0] = "201206L";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_16__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_32__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F42CA14(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB200A8);
}

void sub_22F42CA20(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB200A8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42CA4C()
{
  return ".text.startup";
}

uint64_t sub_22F42CA58(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42CC58(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB21328);
}

void sub_22F42CC64(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB21328);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42CC90(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42CDDC(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB225A8);
}

void sub_22F42CDE8(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB225A8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42CE14(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42CEF8(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB23828);
}

void sub_22F42CF04(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB23828);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42CF30(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42D078(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB24AA8);
}

void sub_22F42D084(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB24AA8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D0B0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__rtems__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42D16C(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB25D28);
}

void sub_22F42D178(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB25D28);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D1A4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__native_client__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F42D2B8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43AF58(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42D300(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FC1C360);
}

void sub_22F42D30C(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FC1C360);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D338(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB26FA8);
}

void sub_22F42D344(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB26FA8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42D370()
{
  return ".text.startup";
}

uint64_t sub_22F42D37C(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42D57C(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB28228);
}

void sub_22F42D588(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB28228);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D5B4(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42D700(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB294A8);
}

void sub_22F42D70C(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB294A8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D738(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42D81C(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB2A728);
}

void sub_22F42D828(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB2A728);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D854(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42D99C(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB2B9A8);
}

void sub_22F42D9A8(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB2B9A8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42D9D4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__rtems__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42DA90(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB2CC28);
}

void sub_22F42DA9C(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB2CC28);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42DAC8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__native_client__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

BOOL sub_22F42DBDC(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 416);
  return sub_22F1ED4D8((_QWORD *)(a1 + 416), "n32")
      || sub_22F1ED4D8(v2, "n64")
      || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 312) != 0;
}

uint64_t sub_22F42DC3C()
{
  return 1;
}

uint64_t sub_22F42DC44(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1F9120(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42DC8C()
{
  return 0;
}

uint64_t sub_22F42DC94()
{
  return 1;
}

uint64_t sub_22F42DC9C(uint64_t a1, char **a2, int *a3)
{
  uint64_t result;
  _BYTE *v4;
  int v5;
  int v7;
  char *v8;
  int v9;

  result = 0;
  v4 = *a2;
  v5 = **a2;
  switch(**a2)
  {
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
      return 1;
    case 'Q':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'b':
    case 'e':
      return result;
    case 'R':
      v7 = *a3 | 1;
      goto LABEL_9;
    case 'Z':
      v9 = v4[1];
      v8 = v4 + 1;
      if (v9 != 67)
        return 0;
      *a3 |= 1u;
      *a2 = v8;
      return 1;
    case 'c':
    case 'd':
    case 'f':
      goto LABEL_8;
    default:
      if ((v5 - 108) > 0xD || ((1 << (v5 - 108)) & 0x3041) == 0)
        return result;
LABEL_8:
      v7 = *a3 | 2;
LABEL_9:
      *a3 = v7;
      return 1;
  }
}

const char *sub_22F42DD38()
{
  return "~{$1}";
}

uint64_t sub_22F42DD44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 394);
}

uint64_t sub_22F42DD4C(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 **a6)
{
  uint64_t v10;
  int v13;
  const char *v15;
  size_t v16;

  if (a5)
  {
    v10 = a5;
  }
  else
  {
    v13 = *(char *)(a1 + 391);
    if (v13 >= 0)
      a4 = a1 + 368;
    else
      a4 = *(_QWORD *)(a1 + 368);
    if (v13 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 391);
    else
      v10 = *(_QWORD *)(a1 + 376);
  }
  if (v10 == 7)
  {
    if (*(_DWORD *)a4 != 1702126447 || *(_DWORD *)(a4 + 3) != 728657765)
      goto LABEL_21;
    *(_BYTE *)(*sub_22E80ABE0(a2, "cnmipsp", 7uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "cnmips", 6uLL) + 8) = 1;
LABEL_24:
    v15 = "mips64r2";
    v16 = 8;
    goto LABEL_22;
  }
  if (v10 == 6 && *(_DWORD *)a4 == 1702126447 && *(_WORD *)(a4 + 4) == 28271)
  {
    *(_BYTE *)(*sub_22E80ABE0(a2, "cnmips", 6uLL) + 8) = 1;
    goto LABEL_24;
  }
LABEL_21:
  v15 = (const char *)a4;
  v16 = v10;
LABEL_22:
  *(_BYTE *)(*sub_22E80ABE0(a2, v15, v16) + 8) = 1;
  return sub_22F424A84(a1, (uint64_t)a2, a3, a4, v10, a6);
}

uint64_t sub_22F42DEB0(uint64_t a1)
{
  if (*(char *)(a1 + 439) >= 0)
    return a1 + 416;
  else
    return *(_QWORD *)(a1 + 416);
}

uint64_t sub_22F42DED4(uint64_t a1, const std::string *a2)
{
  char v4;
  BOOL v5;
  uint64_t *v6;
  std::string::size_type v7;
  std::string::size_type size;

  std::string::operator=((std::string *)(a1 + 368), a2);
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (uint64_t *)a2;
  else
    v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  v7 = v4 & 0x7F;
  if (v5)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t *, std::string::size_type))(*(_QWORD *)a1 + 480))(a1, v6, size);
}

BOOL sub_22F42DF24(uint64_t a1, std::string *a2)
{
  _BOOL8 result;
  uint64_t v5;

  if (sub_22F1ED4D8(a2, "o32"))
  {
    sub_22F42E30C((llvm::APFloatBase *)a1);
LABEL_8:
    std::string::operator=((std::string *)(a1 + 416), a2);
    return 1;
  }
  if (sub_22F1ED4D8(a2, "n32"))
  {
    sub_22F42E47C((uint64_t *)a1);
    v5 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 144) = 9;
    *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 116) = *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 144);
    *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 21) = 32;
    *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 20) = 32;
    *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24) + 1) = 32;
    *(_BYTE *)(a1 + *(_QWORD *)(v5 - 24)) = 32;
    *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 120) = 5;
    *(_DWORD *)(a1 + *(_QWORD *)(v5 - 24) + 112) = 6;
    goto LABEL_8;
  }
  result = sub_22F1ED4D8(a2, "n64");
  if (result)
  {
    sub_22F42E3DC(a1);
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_22F42E028(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 5;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 4;
}

char **sub_22F42E044()
{
  return off_24FB7ECC8;
}

char **sub_22F42E054(uint64_t a1)
{
  if (sub_22F1ED4D8((_QWORD *)(a1 + 416), "o32"))
    return &off_24FB7F090;
  else
    return &off_24FB7F660;
}

uint64_t sub_22F42E090(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FC4F9A8);
}

void sub_22F42E09C(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FC4F9A8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42E0C8(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB2DEA0);
}

void sub_22F42E0D4(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB2DEA0);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42E100()
{
  return ".text.startup";
}

uint64_t sub_22F42E10C(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42E30C(llvm::APFloatBase *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 144) = 9;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 116) = *(_DWORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 144);
  result = llvm::APFloatBase::IEEEdouble(a1);
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 88) = result;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 15) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 14) = 64;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 21) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 20) = 32;
  *((_WORD *)a1 + 47) = 8224;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 1) = 32;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24)) = 32;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 120) = 5;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 112) = 6;
  *(_WORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 42) = 64;
  return result;
}

llvm::APFloatBase *sub_22F42E3DC(uint64_t a1)
{
  llvm::APFloatBase *result;
  uint64_t v3;
  int v4;

  result = sub_22F42E47C((uint64_t *)a1);
  v3 = *(_QWORD *)a1;
  if (*(_DWORD *)(a1 + 68) == 13)
    v4 = 9;
  else
    v4 = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 144) = v4;
  *(_DWORD *)(a1 + *(_QWORD *)(v3 - 24) + 116) = *(_DWORD *)(a1 + *(_QWORD *)(v3 - 24) + 144);
  *(_BYTE *)(a1 + *(_QWORD *)(v3 - 24) + 21) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v3 - 24) + 20) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v3 - 24) + 1) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v3 - 24)) = 64;
  *(_DWORD *)(a1 + *(_QWORD *)(v3 - 24) + 120) = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v3 - 24) + 112) = 8;
  return result;
}

llvm::APFloatBase *sub_22F42E47C(uint64_t *a1)
{
  uint64_t v2;
  llvm::APFloatBase *result;

  v2 = *a1;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 15) = 0x80;
  *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 14) = 0x80;
  result = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)a1);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v2 - 24) + 88) = (uint64_t)result;
  if (*((_DWORD *)a1 + 17) == 5)
  {
    *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 15) = 64;
    *((_BYTE *)a1 + *(_QWORD *)(v2 - 24) + 14) = 64;
    result = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(result);
    *(uint64_t *)((char *)a1 + *(_QWORD *)(v2 - 24) + 88) = (uint64_t)result;
  }
  *((_WORD *)a1 + 47) = 16448;
  *(_WORD *)((char *)a1 + *(_QWORD *)(v2 - 24) + 42) = 128;
  return result;
}

BOOL sub_22F42E51C(uint64_t a1)
{
  _QWORD *v2;

  if (sub_22F1ED4D8((_QWORD *)(a1 + 368), "mips32r6"))
    return 1;
  v2 = (_QWORD *)(a1 + 416);
  return sub_22F1ED4D8(v2, "n32") || sub_22F1ED4D8(v2, "n64") || sub_22F1ED4D8(v2, "64");
}

uint64_t sub_22F42E594(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB2ED70);
}

void sub_22F42E5A0(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB2ED70);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42E5CC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__rtems__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42E688(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB2FC40);
}

void sub_22F42E694(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB2FC40);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42E6C0(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42E80C(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB30B10);
}

void sub_22F42E818(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB30B10);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42E844(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42E930(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1F9120(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42E978()
{
  return 3;
}

uint64_t sub_22F42E980(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB32C50);
}

void sub_22F42E98C(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB32C50);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42E9B8(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB319E8);
}

void sub_22F42E9C4(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB319E8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42E9F0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__native_client__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F42EAFC(uint64_t a1)
{
  return sub_22F1EFEDC(a1, &off_24FB33770);
}

void sub_22F42EB08(uint64_t a1)
{
  sub_22F1EFEDC(a1, &off_24FB33770);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42EB34(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42EC84(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43C4DC(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42ECCC(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC466F0);
}

void sub_22F42ECD8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC466F0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42ED04(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB34648);
}

void sub_22F42ED10(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB34648);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42ED3C()
{
  return ".text.startup";
}

uint64_t sub_22F42ED48(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42EF48(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB35518);
}

void sub_22F42EF54(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB35518);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42EF80(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42F06C()
{
  return 1;
}

uint64_t sub_22F42F074(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43D56C(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F42F0BC()
{
  return 0;
}

uint64_t sub_22F42F0C8()
{
  return 3;
}

uint64_t sub_22F42F0D0()
{
  return 0;
}

const char *sub_22F42F0D8()
{
  return "";
}

BOOL sub_22F42F0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 5)
    return 0;
  return *(_DWORD *)a2 == 1667329648 && *(_BYTE *)(a2 + 4) == 108;
}

uint64_t sub_22F42F118(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC58278);
}

void sub_22F42F124(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC58278);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42F154(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB363E8);
}

void sub_22F42F160(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB363E8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42F18C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__native_client__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

double sub_22F42F298(uint64_t *a1, llvm::Triple *this)
{
  uint64_t *v2;
  double result;

  v2 = sub_22F1E6848(a1, (uint64_t *)&off_24FB363E8, this);
  *v2 = (uint64_t)&off_24FB367B8;
  *((_WORD *)v2 + 194) = 8224;
  *((_WORD *)v2 + 184) = 8224;
  *((_DWORD *)v2 + 128) = 9;
  *(_WORD *)((char *)v2 + 381) = 16448;
  *((_BYTE *)v2 + 383) = 64;
  *(_QWORD *)&result = 0x900000006;
  *((_OWORD *)v2 + 30) = xmmword_22F549A90;
  *((_BYTE *)v2 + 144) = 0;
  return result;
}

uint64_t sub_22F42F2FC(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB372B8);
}

void sub_22F42F308(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB372B8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42F334()
{
  return ".text.startup";
}

uint64_t sub_22F42F340(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42F540(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB38538);
}

void sub_22F42F54C(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB38538);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42F578(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42F6C4(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB397B8);
}

void sub_22F42F6D0(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB397B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42F6FC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42F7E0(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB3AA38);
}

void sub_22F42F7EC(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB3AA38);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42F818(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F42F960(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB3BCB8);
}

void sub_22F42F96C(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB3BCB8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42F998(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__rtems__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F42FA54(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB3CF38);
}

void sub_22F42FA60(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB3CF38);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F42FA8C()
{
  return ".text.startup";
}

uint64_t sub_22F42FA98(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F42FC98(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB3E1B8);
}

void sub_22F42FCA4(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB3E1B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42FCD0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__PPC__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__PPU__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__CELLOS_LV2__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__LP32__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "_ARCH_PPC64";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__powerpc64__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F42FE20(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB3F438);
}

void sub_22F42FE2C(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB3F438);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42FE58(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F42FFA4(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB406B8);
}

void sub_22F42FFB0(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB406B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F42FFDC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F4300C0(uint64_t a1)
{
  return sub_22F1EE154(a1, off_24FB41938);
}

void sub_22F4300CC(uint64_t a1)
{
  sub_22F1EE154(a1, off_24FB41938);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4300F8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F430248()
{
  return 1;
}

uint64_t sub_22F430250(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 94) = 0x80;
  result = llvm::RISCVISAInfo::hasExtension();
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 95) = 32;
  return result;
}

uint64_t sub_22F430294(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F2019AC(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F4302DC()
{
  return 1;
}

uint64_t sub_22F4302E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

const char *sub_22F4302F0()
{
  return "";
}

uint64_t sub_22F4302FC(uint64_t a1)
{
  if (*(char *)(a1 + 391) >= 0)
    return a1 + 368;
  else
    return *(_QWORD *)(a1 + 368);
}

uint64_t sub_22F430320(uint64_t a1, std::string *a2)
{
  const std::string *v2;
  char v4;
  BOOL v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;

  v2 = a2;
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  size = a2->__r_.__value_.__l.__size_;
  if (v4 < 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v7 = v4 & 0x7F;
  if (v5)
    v8 = size;
  else
    v8 = v7;
  v9 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1 + 480))(a1, a2, v8);
  if ((_DWORD)v9)
    std::string::operator=((std::string *)(a1 + 392), v2);
  return v9;
}

BOOL sub_22F430388(uint64_t a1, std::string *a2)
{
  _BOOL8 result;

  if (sub_22F1ED4D8(a2, "ilp32") || sub_22F1ED4D8(a2, "ilp32f") || (result = sub_22F1ED4D8(a2, "ilp32d")))
  {
    std::string::operator=((std::string *)(a1 + 368), a2);
    return 1;
  }
  return result;
}

uint64_t sub_22F4303F4(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 11;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 10;
}

uint64_t sub_22F430410(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FC722C8);
}

void sub_22F43041C(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FC722C8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F430448(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FC71B60);
}

void sub_22F430454(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FC71B60);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F430480(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FB42BB8);
}

void sub_22F43048C(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FB42BB8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4304B8(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F430604(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FB43E38);
}

void sub_22F430610(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FB43E38);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F43063C()
{
  return ".text.startup";
}

uint64_t sub_22F430648(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F430850(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 94) = 0x80;
  result = llvm::RISCVISAInfo::hasExtension();
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 95) = 64;
  return result;
}

uint64_t sub_22F430894(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F2019AC(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

BOOL sub_22F4308DC(uint64_t a1, std::string *a2)
{
  _BOOL8 result;

  if (sub_22F1ED4D8(a2, "lp64") || sub_22F1ED4D8(a2, "lp64f") || (result = sub_22F1ED4D8(a2, "lp64d")))
  {
    std::string::operator=((std::string *)(a1 + 368), a2);
    return 1;
  }
  return result;
}

uint64_t sub_22F430948(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FC72DD8);
}

void sub_22F430954(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FC72DD8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F430980(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FB450B8);
}

void sub_22F43098C(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FB450B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4309B8(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F430B04(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)sub_22F1EE58C(a1, a2 + 1, a3);
  v6 = *a2;
  *v5 = *a2;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 1) = 64;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24)) = 64;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 21) = 64;
  *((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 20) = 64;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 144) = 7;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 116) = 7;
  sub_22F1E6F0C((uint64_t)v5, "e-m:e-p:64:64-i64:64-i128:128-n64-S128", 0x26uLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F430B9C(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FB46338);
}

void sub_22F430BA8(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FB46338);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F430BD4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F430D1C(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FB475B8);
}

void sub_22F430D28(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FB475B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F430D54(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  int v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  v11[0] = "__Fuchsia__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "_GNU_SOURCE";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "__Fuchsia_API_level__";
  v12 = 259;
  v7 = *(_DWORD *)(a2 + 224);
  v10 = 264;
  LODWORD(v9[0]) = v7;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  a1[28] = "fuchsia";
  a1[29] = 7;
  a1[30] = *(unsigned int *)(a2 + 224);
  a1[31] = 0;
  return result;
}

uint64_t sub_22F430E9C(uint64_t a1)
{
  return sub_22F1EFF2C(a1, &off_24FB48838);
}

void sub_22F430EA8(uint64_t a1)
{
  sub_22F1EFF2C(a1, &off_24FB48838);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F430ED4()
{
  return ".text.startup";
}

uint64_t sub_22F430EE0(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F4310E8(_DWORD *a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F202DD8(a1, a2, a3);
  return (*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 8, a3);
}

uint64_t sub_22F431130(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB49AC0);
}

void sub_22F43113C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB49AC0);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F431168()
{
  return ".text.startup";
}

uint64_t sub_22F431174(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F431374(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB4AD40);
}

void sub_22F431380(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB4AD40);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4313AC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  const char *v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  sub_22F425880(a4, (uint64_t)"sun", 3, a2);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__svr4__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__SVR4";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "600";
  }
  else
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "500";
  }
  v9[0] = v7;
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "__C99FEATURES__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
    v11[0] = "_FILE_OFFSET_BITS";
    v12 = 259;
    v9[0] = "64";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "_LARGEFILE_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "_LARGEFILE64_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__EXTENSIONS__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v11[0] = "__FLOAT128__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  return result;
}

uint64_t sub_22F43162C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB4BFC0);
}

void sub_22F431638(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB4BFC0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F431664(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F431748(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB4D240);
}

void sub_22F431754(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB4D240);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F431780(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__rtems__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F431844(_DWORD *a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F202DD8(a1, a2, a3);
  return (*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 8, a3);
}

uint64_t sub_22F43188C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB4E4C8);
}

void sub_22F431898(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB4E4C8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F4318C4()
{
  return ".text.startup";
}

uint64_t sub_22F4318D0(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F431AD0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB4FAF8);
}

void sub_22F431ADC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB4FAF8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F431B08(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F431BEC(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB51128);
}

void sub_22F431BF8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB51128);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F431C24(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__rtems__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F431CE8()
{
  return 1;
}

uint64_t sub_22F431CF0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43E34C(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F431D38(uint64_t a1, _BYTE *a2)
{
  char v3;
  BOOL v4;
  size_t v5;
  size_t v6;
  size_t v7;
  uint64_t result;

  v3 = a2[23];
  v4 = v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if (v3 < 0)
    a2 = *(_BYTE **)a2;
  v6 = v3 & 0x7F;
  if (v4)
    v7 = v5;
  else
    v7 = v6;
  result = sub_22F43E220(a1, a2, v7);
  *(_DWORD *)(a1 + 364) = result;
  if ((_DWORD)result)
    return sub_22F43E1D4(a1, result) == 1;
  return result;
}

BOOL sub_22F431D90(uint64_t a1, void *a2, size_t a3)
{
  int v4;

  v4 = sub_22F43E220(a1, a2, a3);
  return sub_22F43E1D4(a1, v4) == 1;
}

uint64_t sub_22F431DC4(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC7A500);
}

void sub_22F431DD0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC7A500);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F431DFC(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB52750);
}

void sub_22F431E08(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB52750);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F431E34()
{
  return ".text.startup";
}

uint64_t sub_22F431E40(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F432040(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v5;
  llvm::APFloatBase *v6;
  uint64_t v7;
  int v8;

  v5 = sub_22F1E6848((uint64_t *)a1, a2 + 2, a3);
  *v5 = a2[1];
  *((_BYTE *)v5 + 361) = 0;
  *((_DWORD *)v5 + 91) = 0;
  *v5 = *a2;
  sub_22F1E6F0C((uint64_t)v5, "E-m:e-i64:64-n32:64-S128", 0x18uLL, (uint64_t)"");
  v7 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 1) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24)) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 21) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 20) = 64;
  if (*(_DWORD *)(a1 + 68) == 13)
    v8 = 9;
  else
    v8 = 7;
  *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 116) = v8;
  *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 144) = *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 116);
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 14) = 0x80;
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 15) = 0x80;
  *(_WORD *)(a1 + *(_QWORD *)(v7 - 24) + 42) = 128;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24) + 88) = llvm::APFloatBase::IEEEquad(v6);
  *(_WORD *)(a1 + 94) = 16448;
  return a1;
}

uint64_t sub_22F432140(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB539D0);
}

void sub_22F43214C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB539D0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F432178(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  const char *v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  sub_22F425880(a4, (uint64_t)"sun", 3, a2);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__svr4__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__SVR4";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "600";
  }
  else
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "500";
  }
  v9[0] = v7;
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "__C99FEATURES__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
    v11[0] = "_FILE_OFFSET_BITS";
    v12 = 259;
    v9[0] = "64";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "_LARGEFILE_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "_LARGEFILE64_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__EXTENSIONS__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v11[0] = "__FLOAT128__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  return result;
}

uint64_t sub_22F4323F8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB54C50);
}

void sub_22F432404(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB54C50);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F432430(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F432514(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB55ED0);
}

void sub_22F432520(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB55ED0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43254C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__OpenBSD__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v10[0] = "_REENTRANT";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v10[0] = "__STDC_NO_THREADS__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F432694(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB57150);
}

void sub_22F4326A0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB57150);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4326CC(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F432820()
{
  return 1;
}

const char *sub_22F432828()
{
  return "g";
}

uint64_t sub_22F432834(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43E610(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F43287C()
{
  return 7;
}

BOOL sub_22F432884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
    return 0;
  return *(_WORD *)a2 == 12658 && *(_BYTE *)(a2 + 2) == 53;
}

const char *sub_22F4328B4()
{
  return "";
}

uint64_t sub_22F4328C0(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, void *__s2, size_t __n, unsigned __int8 **a6)
{
  int v12;
  unsigned int v13;

  v12 = sub_22F43E590(a1, __s2, __n);
  if (v12 >= 10)
  {
    v13 = v12;
    *(_BYTE *)(*sub_22E80ABE0(a2, "transactional-execution", 0x17uLL) + 8) = 1;
    if (v13 != 10)
    {
      *(_BYTE *)(*sub_22E80ABE0(a2, "vector", 6uLL) + 8) = 1;
      if (v13 >= 0xC)
      {
        *(_BYTE *)(*sub_22E80ABE0(a2, "vector-enhancements-1", 0x15uLL) + 8) = 1;
        if (v13 != 12)
        {
          *(_BYTE *)(*sub_22E80ABE0(a2, "vector-enhancements-2", 0x15uLL) + 8) = 1;
          if (v13 >= 0xE)
            *(_BYTE *)(*sub_22E80ABE0(a2, "nnp-assist", 0xAuLL) + 8) = 1;
        }
      }
    }
  }
  return sub_22F424A84(a1, (uint64_t)a2, a3, (uint64_t)__s2, __n, a6);
}

const char *sub_22F4329EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 397))
    return "vector";
  else
    return "";
}

BOOL sub_22F432A14(uint64_t a1, const std::string *a2)
{
  void *v3;
  char v4;
  BOOL v5;
  void *v6;
  size_t v7;
  size_t v8;
  int v9;

  v3 = (void *)(a1 + 368);
  std::string::operator=((std::string *)(a1 + 368), a2);
  v4 = *(_BYTE *)(a1 + 391);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = v3;
  else
    v6 = *(void **)(a1 + 368);
  v7 = v4 & 0x7F;
  if (v5)
    v8 = *(_QWORD *)(a1 + 376);
  else
    v8 = v7;
  v9 = sub_22F43E590(a1, v6, v8);
  *(_DWORD *)(a1 + 392) = v9;
  return v9 != -1;
}

BOOL sub_22F432A6C(int a1, void *a2, size_t a3)
{
  return sub_22F43E590(a1, a2, a3) != -1;
}

uint64_t sub_22F432A88(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v5;
  BOOL v6;

  *(_WORD *)(a1 + 396) = 0;
  *(_BYTE *)(a1 + 398) = 0;
  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    do
    {
      if (sub_22F1ED4D8(v2, "+transactional-execution"))
      {
        *(_BYTE *)(a1 + 396) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+vector"))
      {
        *(_BYTE *)(a1 + 397) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+soft-float"))
      {
        *(_BYTE *)(a1 + 398) = 1;
      }
      v2 += 3;
    }
    while (v2 != v3);
    v5 = *(unsigned __int8 *)(a1 + 397);
    v6 = (v5 & (*(unsigned __int8 *)(a1 + 398) ^ 1)) == 0;
    *(_BYTE *)(a1 + 397) = v5 & (*(_BYTE *)(a1 + 398) ^ 1);
    if (!v6 && *(_DWORD *)(a1 + 68) != 16)
    {
      *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 48) = 64;
      sub_22F1E6F0C(a1, "E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-v128:64-a:8:16-n32:64", 0x3AuLL, (uint64_t)"");
    }
  }
  return 1;
}

uint64_t sub_22F432B98(uint64_t a1, unsigned int a2)
{
  if (a2 >= 4)
    return 0xFFFFFFFFLL;
  else
    return a2 + 6;
}

uint64_t sub_22F432BA8(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 15)
    v2 = 3;
  else
    v2 = 1;
  if ((a2 - 13) < 2 || a2 == 0)
    return 0;
  else
    return v2;
}

uint64_t sub_22F432BCC()
{
  return 0;
}

const char *sub_22F432BD8()
{
  return ".text.startup";
}

uint64_t sub_22F432BE4(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F432DE4(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  size_t v9;

  v6 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v7 = *a2;
  *v6 = v7;
  *((_BYTE *)v6 + 391) = 3;
  *((_DWORD *)v6 + 92) = 3158394;
  *((_DWORD *)v6 + 98) = 8;
  *((_WORD *)v6 + 198) = 0;
  *((_BYTE *)v6 + 398) = 0;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 116) = 7;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 144) = 7;
  *((_BYTE *)v6 + 81) = 1;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 5) = 32;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 4) = 32;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 23) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 21) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 22) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 20) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 1) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24)) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 14) = 0x80;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 15) = 64;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24) + 88) = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)v6);
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 40) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 41) = 16;
  if (*((_DWORD *)a3 + 9) == 16)
  {
    *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 48) = 64;
    v8 = "E-m:l-i1:8:16-i8:8:16-i64:64-f128:64-v128:64-a:8:16-n32:64";
    v9 = 58;
  }
  else
  {
    v8 = "E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64";
    v9 = 50;
  }
  sub_22F1E6F0C(a1, v8, v9, (uint64_t)"");
  *(_BYTE *)(a1 + 95) = 64;
  *(_WORD *)(a1 + 93) = 16385;
  return a1;
}

uint64_t sub_22F432F68(_QWORD *a1, uint64_t *a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;

  v13[0] = "_LONG_LONG";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "_OPEN_DEFAULT";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "_UNIX03_WITHDRAWN";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__370__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__BFP__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__BOOL__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__LONGNAME__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__MVS__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__THW_370__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__THW_BIG_ENDIAN__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__TOS_390__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__TOS_MVS__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  v13[0] = "__XPLINK__";
  v14 = 259;
  v11[0] = "1";
  v12 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  if (*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24)) == 64)
  {
    v13[0] = "__64BIT__";
    v14 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  }
  v8 = *a2;
  if ((*a2 & 0x100) != 0)
  {
    v13[0] = "__DLL__";
    v14 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
    v13[0] = "_XOPEN_SOURCE";
    v14 = 259;
    v11[0] = "600";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
    v8 = *a2;
  }
  if ((v8 & 0x80000000) != 0)
  {
    v13[0] = "_MI_BUILTIN";
    v14 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
    v13[0] = "_EXT";
    v14 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
    v8 = *a2;
  }
  if ((~(_DWORD)v8 & 0x2000100) == 0)
  {
    v13[0] = "__wchar_t";
    v14 = 259;
    v11[0] = "1";
    v12 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v13, (llvm::Twine *)v11);
  }
  result = llvm::Triple::getOSTypeName((llvm::Triple *)*(unsigned int *)(a3 + 36));
  a1[28] = result;
  a1[29] = v10;
  return result;
}

uint64_t sub_22F433300(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB5A178);
}

void sub_22F43330C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB5A178);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F433338(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__Ananas__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F4333C0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB5B418);
}

void sub_22F4333CC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB5B418);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4333F8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__CloudABI__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_ISO_10646__";
  v9 = 259;
  v6[0] = "201206L";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_16__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_32__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F433500(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB5C6B8);
}

void sub_22F43350C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB5C6B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F433538(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__DragonFly__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__DragonFly_cc_version";
  v11 = 259;
  v8[0] = "100001";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__KPRINTF_ATTRIBUTE__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__tune_i386__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  result = sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F433698(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB5D958);
}

void sub_22F4336A4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB5D958);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4336D0(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F43381C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB5EBF8);
}

void sub_22F433828(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB5EBF8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F433854(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  int v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  v11[0] = "__Fuchsia__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "_GNU_SOURCE";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "__Fuchsia_API_level__";
  v12 = 259;
  v7 = *(_DWORD *)(a2 + 224);
  v10 = 264;
  LODWORD(v9[0]) = v7;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  a1[28] = "fuchsia";
  a1[29] = 7;
  a1[30] = *(unsigned int *)(a2 + 224);
  a1[31] = 0;
  return result;
}

uint64_t sub_22F43399C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB5FE98);
}

void sub_22F4339A8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB5FE98);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4339D4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__FreeBSD_kernel__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__GLIBC__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F433B04(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB61138);
}

void sub_22F433B10(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB61138);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F433B3C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__minix";
  v10 = 259;
  v7[0] = "3";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_EM_WSIZE";
  v10 = 259;
  v7[0] = "4";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_EM_PSIZE";
  v10 = 259;
  v7[0] = "4";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_EM_SSIZE";
  v10 = 259;
  v7[0] = "2";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_EM_LSIZE";
  v10 = 259;
  v7[0] = "4";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_EM_FSIZE";
  v10 = 259;
  v7[0] = "4";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "_EM_DSIZE";
  v10 = 259;
  v7[0] = "8";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  return sub_22F425880(a4, (uint64_t)"unix", 4, a2);
}

uint64_t sub_22F433CF0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB623D8);
}

void sub_22F433CFC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB623D8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F433D28(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  const char *v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  sub_22F425880(a4, (uint64_t)"sun", 3, a2);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__svr4__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__SVR4";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "600";
  }
  else
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "500";
  }
  v9[0] = v7;
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "__C99FEATURES__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
    v11[0] = "_FILE_OFFSET_BITS";
    v12 = 259;
    v9[0] = "64";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "_LARGEFILE_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "_LARGEFILE64_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__EXTENSIONS__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v11[0] = "__FLOAT128__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  return result;
}

uint64_t sub_22F433FA8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB63678);
}

void sub_22F433FB4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB63678);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F433FE0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__native_client__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F4340EC(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB64918);
}

void sub_22F4340F8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB64918);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434124(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__GNU__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__gnu_hurd__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__MACH__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__GLIBC__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F4342A4(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB65BB8);
}

void sub_22F4342B0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB65BB8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4342DC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__Ananas__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F434364(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB66E58);
}

void sub_22F434370(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB66E58);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43439C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__CloudABI__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ELF__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_ISO_10646__";
  v9 = 259;
  v6[0] = "201206L";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_16__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__STDC_UTF_32__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

uint64_t sub_22F4344A4(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB680F8);
}

void sub_22F4344B0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB680F8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4344DC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__DragonFly__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__DragonFly_cc_version";
  v11 = 259;
  v8[0] = "100001";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__KPRINTF_ATTRIBUTE__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__tune_i386__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  result = sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F43463C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB69398);
}

void sub_22F434648(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB69398);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434674(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__NetBSD__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__unix__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F434758(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB6A638);
}

void sub_22F434764(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB6A638);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434790(int a1, uint64_t a2, llvm::Triple *this, llvm::raw_ostream **a4)
{
  int OSVersion;
  int v7;
  int v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  OSVersion = llvm::Triple::getOSVersion(this);
  if (OSVersion)
    v7 = OSVersion;
  else
    v7 = 8;
  v8 = (100000 * v7) | 1;
  v12[0] = "__FreeBSD__";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v7;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__FreeBSD_cc_version";
  v13 = 259;
  v11 = 264;
  LODWORD(v10[0]) = v8;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__KPRINTF_ATTRIBUTE__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__STDC_MB_MIGHT_NEQ_WC__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F4348DC(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB6B8D8);
}

void sub_22F4348E8(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB6B8D8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434914(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  int v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  v11[0] = "__Fuchsia__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "_GNU_SOURCE";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "__Fuchsia_API_level__";
  v12 = 259;
  v7 = *(_DWORD *)(a2 + 224);
  v10 = 264;
  LODWORD(v9[0]) = v7;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  a1[28] = "fuchsia";
  a1[29] = 7;
  a1[30] = *(unsigned int *)(a2 + 224);
  a1[31] = 0;
  return result;
}

uint64_t sub_22F434A5C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB6CB78);
}

void sub_22F434A68(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB6CB78);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434A94(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__FreeBSD_kernel__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__GLIBC__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F434BC4(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB6DE18);
}

void sub_22F434BD0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB6DE18);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434BFC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  const char *v7;
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  sub_22F425880(a4, (uint64_t)"sun", 3, a2);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v11[0] = "__ELF__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__svr4__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__SVR4";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "600";
  }
  else
  {
    v11[0] = "_XOPEN_SOURCE";
    v12 = 259;
    v7 = "500";
  }
  v9[0] = v7;
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v11[0] = "__C99FEATURES__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
    v11[0] = "_FILE_OFFSET_BITS";
    v12 = 259;
    v9[0] = "64";
    v10 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  v11[0] = "_LARGEFILE_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "_LARGEFILE64_SOURCE";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  v11[0] = "__EXTENSIONS__";
  v12 = 259;
  v9[0] = "1";
  v10 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v11[0] = "_REENTRANT";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v11[0] = "__FLOAT128__";
    v12 = 259;
    v9[0] = "1";
    v10 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v11, (llvm::Twine *)v9);
  }
  return result;
}

uint64_t sub_22F434E7C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB6F0B8);
}

void sub_22F434E88(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB6F0B8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434EB4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__HAIKU__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__ELF__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  result = sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  if (*(_BYTE *)(a1 + 86))
  {
    v10[0] = "__FLOAT128__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_22F434F94(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB70358);
}

void sub_22F434FA0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB70358);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F434FCC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__native_client__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F4350D8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB715F8);
}

void sub_22F4350E4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB715F8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F435110(uint64_t a1, int a2)
{
  if (a2)
    return 3;
  else
    return 0;
}

uint64_t sub_22F435120(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__FreeBSD__";
  v10 = 259;
  v7[0] = "9";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__FreeBSD_cc_version";
  v10 = 259;
  v7[0] = "900001";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__KPRINTF_ATTRIBUTE__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__ELF__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__SCE__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ORBIS__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F435274(_QWORD *a1, int a2, int a3)
{
  if (a2 != 64)
    return sub_22F4248FC(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F435290(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F4352AC()
{
  return 1;
}

uint64_t sub_22F4352B4()
{
  return 1;
}

uint64_t sub_22F4352BC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43F378(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F435304()
{
  return 0;
}

uint64_t sub_22F43530C()
{
  return 1;
}

uint64_t sub_22F435314()
{
  return 0;
}

const char *sub_22F43531C()
{
  return "";
}

uint64_t sub_22F435328()
{
  return 0;
}

BOOL sub_22F435330(int a1, _BYTE *a2)
{
  char v2;
  BOOL v3;
  size_t v4;
  size_t v5;
  size_t v6;

  v2 = a2[23];
  v3 = v2 < 0;
  v4 = *((_QWORD *)a2 + 1);
  if (v2 < 0)
    a2 = *(_BYTE **)a2;
  v5 = v2 & 0x7F;
  if (v3)
    v6 = v4;
  else
    v6 = v5;
  return sub_22F43ED14(a1, a2, v6);
}

uint64_t sub_22F435350(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 15)
    v2 = 3;
  else
    v2 = 1;
  if (a2 == 14)
    v2 = 0;
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t sub_22F435374()
{
  return 0;
}

uint64_t sub_22F435380()
{
  return 0;
}

uint64_t sub_22F43538C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  v9[0] = "__FLOAT128__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F435460(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;

  sub_22F43538C(a1, a2, a3, a4);
  v8 = "__wasi__";
  v9 = 259;
  v6 = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)&v8, (llvm::Twine *)&v6);
}

uint64_t sub_22F4354BC(uint64_t a1, _QWORD *a2, llvm::Triple *a3)
{
  _QWORD *v6;
  int v7;
  char *v8;
  size_t v9;

  v6 = (_QWORD *)sub_22F1F04F8(a1, a2 + 1, a3);
  *v6 = *a2;
  v7 = *((_DWORD *)a3 + 9);
  if (v7 == 40)
    v8 = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-f128:64-n32:64-S128-ni:1:10:20";
  else
    v8 = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20";
  if (v7 == 40)
    v9 = 67;
  else
    v9 = 59;
  sub_22F1E6F0C((uint64_t)v6, v8, v9, (uint64_t)"");
  return a1;
}

uint64_t sub_22F435530(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  sub_22F43538C(a1, a2, a3, a4);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__EMSCRIPTEN__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "__EMSCRIPTEN_PTHREADS__";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F4355E0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43F3AC(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F435628(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "_REENTRANT";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  v9[0] = "__FLOAT128__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
}

uint64_t sub_22F4356FC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;

  sub_22F435628(a1, a2, a3, a4);
  v8 = "__wasi__";
  v9 = 259;
  v6 = "1";
  v7 = 259;
  return sub_22E7333BC(a4, (llvm::Twine *)&v8, (llvm::Twine *)&v6);
}

uint64_t sub_22F435758(uint64_t a1, uint64_t *a2, llvm::Triple *a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  char *v9;
  size_t v10;

  v6 = (_QWORD *)sub_22F1F04F8(a1, a2 + 1, a3);
  v7 = *a2;
  *v6 = *a2;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 20) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 21) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24)) = 64;
  *((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 1) = 64;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 112) = 8;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 120) = 7;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 124) = 7;
  v8 = *((_DWORD *)a3 + 9);
  if (v8 == 40)
    v9 = "e-m:e-p:64:64-p10:8:8-p20:8:8-i64:64-f128:64-n32:64-S128-ni:1:10:20";
  else
    v9 = "e-m:e-p:64:64-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20";
  if (v8 == 40)
    v10 = 67;
  else
    v10 = 59;
  sub_22F1E6F0C((uint64_t)v6, v9, v10, (uint64_t)"");
  return a1;
}

uint64_t sub_22F435828(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  sub_22F435628(a1, a2, a3, a4);
  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  v9[0] = "__EMSCRIPTEN__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v9[0] = "__EMSCRIPTEN_PTHREADS__";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F4358E0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43B36C(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F435928(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FC1DE68);
}

void sub_22F435934(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FC1DE68);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F435960(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FB7A670);
}

void sub_22F43596C(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FB7A670);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F435998()
{
  return ".text.startup";
}

uint64_t sub_22F4359A4(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F435BAC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F437958(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 920))(a1, a2, a1 + 32, a3);
}

const char *sub_22F435BF4()
{
  return ".text.startup";
}

uint64_t sub_22F435C00(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F435E08(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43EAE8(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F435E50()
{
  return 1;
}

BOOL sub_22F435E58(uint64_t a1, unsigned __int8 **a2, _DWORD *a3)
{
  int v3;

  v3 = **a2;
  if (v3 == 118)
    *a3 |= 2u;
  return v3 == 118;
}

const char *sub_22F435E80()
{
  return "";
}

BOOL sub_22F435E8C(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t sub_22F435E98()
{
  return 1;
}

uint64_t sub_22F435EA0()
{
  return 0;
}

char **sub_22F435EA8()
{
  return off_24FB7FC30;
}

char **sub_22F435EB8()
{
  return &off_24FB7FE30;
}

uint64_t sub_22F435EC8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC8EF90);
}

void sub_22F435ED4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC8EF90);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F435F00(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FB7D2F0);
}

void sub_22F435F0C(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FB7D2F0);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F435F38()
{
  return ".text.startup";
}

uint64_t sub_22F435F44(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F436144(uint64_t a1, llvm::Triple *this)
{
  uint64_t *v3;

  v3 = sub_22F1E6848((uint64_t *)a1, (uint64_t *)&off_24FB7D2F0, this);
  *v3 = (uint64_t)&off_24FB7D6C0;
  *((_BYTE *)v3 + 83) = 1;
  *((_WORD *)v3 + 191) = -32640;
  *(_QWORD *)(a1 + 456) = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)v3);
  *(_BYTE *)(a1 + 391) = 64;
  *(_BYTE *)(a1 + 381) = 64;
  *(_WORD *)(a1 + 410) = 64;
  *(_WORD *)(a1 + 368) = 16448;
  *(_WORD *)(a1 + 388) = 16448;
  *(_OWORD *)(a1 + 480) = xmmword_22F549AA0;
  *(_DWORD *)(a1 + 512) = 7;
  *(_BYTE *)(a1 + 144) = 8;
  *(_WORD *)(a1 + 94) = 16448;
  *(_QWORD *)(a1 + 496) = 0x600000006;
  *(_BYTE *)(a1 + 528) |= 4u;
  sub_22F1E6F0C(a1, "e-m:e-i64:64-n32:64-S128-v64:64:64-v128:64:64-v256:64:64-v512:64:64-v1024:64:64-v2048:64:64-v4096:64:64-v8192:64:64-v16384:64:64", 0x80uLL, (uint64_t)"");
  return a1;
}

uint64_t sub_22F43620C()
{
  return 1;
}

uint64_t sub_22F436214(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1F7048(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F43625C()
{
  return 1;
}

const char *sub_22F436264()
{
  return "";
}

uint64_t sub_22F436270(uint64_t a1)
{
  if (*(char *)(a1 + 391) >= 0)
    return a1 + 368;
  else
    return *(_QWORD *)(a1 + 368);
}

BOOL sub_22F436294(uint64_t a1, std::string *a2)
{
  _BOOL8 result;

  if (sub_22F1ED4D8(a2, "abiv2") || (result = sub_22F1ED4D8(a2, "abiv1")))
  {
    std::string::operator=((std::string *)(a1 + 368), a2);
    return 1;
  }
  return result;
}

uint64_t sub_22F4362EC()
{
  return 0;
}

uint64_t sub_22F4362F4(uint64_t a1)
{
  return sub_22F1F0A28(a1, &off_24FC2D388);
}

void sub_22F436300(uint64_t a1)
{
  sub_22F1F0A28(a1, &off_24FC2D388);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43632C(uint64_t a1)
{
  return sub_22F1F0A28(a1, &off_24FB7E1B8);
}

void sub_22F436338(uint64_t a1)
{
  sub_22F1F0A28(a1, &off_24FB7E1B8);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F436364()
{
  return ".text.startup";
}

uint64_t sub_22F436370(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  sub_22F425880(a4, (uint64_t)"unix", 4, a2);
  sub_22F425880(a4, (uint64_t)"linux", 5, a2);
  v12[0] = "__ELF__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 10) == 11)
  {
    v12[0] = "__ANDROID__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    *(_QWORD *)(a1 + 224) = "android";
    *(_QWORD *)(a1 + 232) = 7;
    result = llvm::Triple::getEnvironmentVersion(a3);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 248) = v9;
    if (!(_DWORD)result)
      goto LABEL_6;
    v12[0] = "__ANDROID_MIN_SDK_VERSION__";
    v13 = 259;
    v11 = 264;
    LODWORD(v10[0]) = result;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
    v12[0] = "__ANDROID_API__";
    v13 = 259;
    v10[0] = "__ANDROID_MIN_SDK_VERSION__";
  }
  else
  {
    v12[0] = "__gnu_linux__";
    v13 = 259;
    v10[0] = "1";
  }
  v11 = 259;
  result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
LABEL_6:
  if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
  {
    v12[0] = "_REENTRANT";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v12[0] = "_GNU_SOURCE";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    result = sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  if (*(_BYTE *)(a1 + 86))
  {
    v12[0] = "__FLOAT128__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    return sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_22F436570(uint64_t a1, uint64_t *a2, llvm::Triple *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  llvm::APFloatBase *isArch64Bit;
  uint64_t v13;
  char v14;
  llvm::APFloatBase *v15;
  int v16;
  const char *v17;
  uint64_t ArchName;
  uint64_t v19;

  v8 = sub_22F1E6848((uint64_t *)a1, a2 + 1, a3);
  v9 = *a2;
  *v8 = *a2;
  *((_BYTE *)v8 + 423) = 5;
  strcpy((char *)v8 + 400, "aapcs");
  v10 = *((unsigned int *)v8 + 17);
  if (v10 > 0x21)
    goto LABEL_22;
  if (((1 << v10) & 0x3F0001888) != 0)
  {
LABEL_3:
    v11 = 7;
    goto LABEL_4;
  }
  if (v10 != 13)
  {
LABEL_22:
    *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 128) = 6;
    goto LABEL_3;
  }
  v11 = 9;
LABEL_4:
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 144) = v11;
  *(_DWORD *)(a1 + *(_QWORD *)(v9 - 24) + 116) = v11;
  *(_WORD *)(a1 + 84) = 257;
  *(_BYTE *)(a1 + 87) = 1;
  isArch64Bit = (llvm::APFloatBase *)llvm::Triple::isArch64Bit(a3);
  v13 = *(_QWORD *)a1;
  if ((_DWORD)isArch64Bit)
    v14 = 64;
  else
    v14 = 32;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 1) = v14;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24)) = v14;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 21) = v14;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 20) = v14;
  *(_DWORD *)(a1 + *(_QWORD *)(v13 - 24) + 48) = 128;
  *(_WORD *)(a1 + 94) = -32640;
  *(_WORD *)(a1 + *(_QWORD *)(v13 - 24) + 42) = 128;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 15) = 0x80;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 14) = 0x80;
  v15 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(isArch64Bit);
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24) + 88) = v15;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 9) = 16;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 8) = 16;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24) + 64) = llvm::APFloatBase::BFloat(v15);
  *(_DWORD *)(a1 + 288) |= 0xA0u;
  *(_BYTE *)(a1 + 83) = 1;
  *(_BYTE *)(a1 + *(_QWORD *)(v13 - 24) + 160) |= 4u;
  *(_DWORD *)(a1 + 148) = 5;
  v16 = *((_DWORD *)a3 + 9);
  v17 = "\x01_mcount";
  if (v16 != 9)
  {
    if (v16)
      goto LABEL_12;
    if (*(_DWORD *)(a4 + 144) != 4)
      v17 = "mcount";
  }
  *(_QWORD *)(a1 + 136) = v17;
LABEL_12:
  ArchName = llvm::Triple::getArchName(a3);
  if (v19 == 6 && *(_DWORD *)ArchName == 913142369 && *(_WORD *)(ArchName + 4) == 25908)
    *(_DWORD *)(a1 + 288) |= 0x40000u;
  return a1;
}

uint64_t sub_22F4367A8(uint64_t a1)
{
  if (*(char *)(a1 + 423) >= 0)
    return a1 + 400;
  else
    return *(_QWORD *)(a1 + 400);
}

BOOL sub_22F4367CC(uint64_t a1, std::string *a2)
{
  _BOOL8 result;

  if (sub_22F1ED4D8(a2, "aapcs") || (result = sub_22F1ED4D8(a2, "darwinpcs")))
  {
    std::string::operator=((std::string *)(a1 + 400), a2);
    return 1;
  }
  return result;
}

uint64_t sub_22F436824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v8;

  result = llvm::ARM::parseBranchProtection();
  if ((_DWORD)result)
  {
    *(_DWORD *)a6 = 0;
    *(_DWORD *)(a6 + 4) = 1;
    *(_BYTE *)(a6 + 8) = v8;
  }
  return result;
}

BOOL sub_22F43692C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v3;

  if (a3 == 7 && (*a2 == 1701733735 ? (v3 = *(_DWORD *)((char *)a2 + 3) == 1667854949) : (v3 = 0), v3))
    return 1;
  else
    return llvm::AArch64::parseCPUArch() != 0;
}

uint64_t sub_22F436984(uint64_t a1, uint64_t *a2)
{
  char v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_BYTE *)a2 + 23);
  v3 = v2 < 0;
  v4 = a2[1];
  if (v2 < 0)
    a2 = (uint64_t *)*a2;
  v5 = v2 & 0x7F;
  if (v3)
    v6 = v4;
  else
    v6 = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 480))(a1, a2, v6);
}

uint64_t sub_22F4369AC()
{
  return llvm::AArch64::fillValidCPUArchList();
}

uint64_t sub_22F4369B4(llvm::raw_ostream **a1)
{
  _QWORD v3[4];
  __int16 v4;
  _QWORD v5[4];
  __int16 v6;

  v5[0] = "__ARM_FEATURE_QRDMX";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  v5[0] = "__ARM_FEATURE_ATOMICS";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  v5[0] = "__ARM_FEATURE_CRC32";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  return sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
}

uint64_t sub_22F436A60(llvm::raw_ostream **a1)
{
  _QWORD v3[4];
  __int16 v4;
  _QWORD v5[4];
  __int16 v6;

  v5[0] = "__ARM_ARCH_8_3__";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  v5[0] = "__ARM_FEATURE_COMPLEX";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  v5[0] = "__ARM_FEATURE_JCVT";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  return sub_22F4369B4(a1);
}

uint64_t sub_22F436B14(llvm::raw_ostream **a1)
{
  _QWORD v3[4];
  __int16 v4;
  _QWORD v5[4];
  __int16 v6;

  v5[0] = "__ARM_FEATURE_FRINT";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  sub_22F436A60(a1);
  v5[0] = "__ARM_ARCH_8_4__";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  v5[0] = "__ARM_ARCH_8_5__";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  return sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
}

char **sub_22F436BC8()
{
  return off_24FB80A30;
}

uint64_t sub_22F436BD8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_22F2ABF14(a1, "sve", 3, a2);
  v4 = sub_22F2ABF14(v3, "sve2", 4, a2);
  v5 = sub_22F2ABF14(v4, "sve2-bitperm", 12, a2);
  return sub_22F1F2218(v5, a2);
}

uint64_t sub_22F436C34(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = (_DWORD *)(a1 + 364);
  *(_WORD *)(a1 + 372) = 256;
  *(_QWORD *)(a1 + 364) = 0;
  v4 = (_BYTE *)(a1 + 374);
  v5 = (_BYTE *)(a1 + 380);
  *(_BYTE *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(_BYTE *)(a1 + 378) = 0;
  *(_DWORD *)(a1 + 374) = 0;
  *(_QWORD *)(a1 + 380) = 0;
  *(_DWORD *)(a1 + 387) = 0;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v7)
  {
    do
    {
      if (sub_22F1ED4D8(v6, "+neon"))
        *v3 |= 1u;
      if (sub_22F1ED4D8(v6, "+sve"))
      {
        *v3 |= 2u;
        *v4 = 1;
      }
      if (sub_22F1ED4D8(v6, "+sve2"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 374) = 1;
        *(_BYTE *)(a1 + 383) = 1;
      }
      if (sub_22F1ED4D8(v6, "+sve2-aes"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 374) = 1;
        *(_WORD *)(a1 + 383) = 257;
      }
      if (sub_22F1ED4D8(v6, "+sve2-sha3"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 374) = 1;
        *(_BYTE *)(a1 + 383) = 1;
        *(_BYTE *)(a1 + 385) = 1;
      }
      if (sub_22F1ED4D8(v6, "+sve2-sm4"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 374) = 1;
        *(_BYTE *)(a1 + 383) = 1;
        *(_BYTE *)(a1 + 386) = 1;
      }
      if (sub_22F1ED4D8(v6, "+sve2-bitperm"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 374) = 1;
        *(_BYTE *)(a1 + 383) = 1;
        *(_BYTE *)(a1 + 387) = 1;
      }
      if (sub_22F1ED4D8(v6, "+f32mm"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 389) = 1;
      }
      if (sub_22F1ED4D8(v6, "+f64mm"))
      {
        *(_DWORD *)(a1 + 364) |= 2u;
        *(_BYTE *)(a1 + 388) = 1;
      }
      if (sub_22F1ED4D8(v6, "+crc"))
        *(_BYTE *)(a1 + 368) = 1;
      if (sub_22F1ED4D8(v6, "+xs"))
        *(_BYTE *)(a1 + 393) = 1;
      if (sub_22F1ED4D8(v6, "+aes"))
        *(_BYTE *)(a1 + 369) = 1;
      if (sub_22F1ED4D8(v6, "+sha2"))
        *(_BYTE *)(a1 + 370) = 1;
      if (sub_22F1ED4D8(v6, "+sha3"))
        *(_WORD *)(a1 + 370) = 257;
      if (sub_22F1ED4D8(v6, "+sm4"))
        *(_BYTE *)(a1 + 372) = 1;
      if (sub_22F1ED4D8(v6, "+strict-align"))
        *(_BYTE *)(a1 + 373) = 0;
      if (sub_22F1ED4D8(v6, "+v8a"))
        *(_DWORD *)(a1 + 396) = 1;
      if (sub_22F1ED4D8(v6, "+v8.1a"))
        *(_DWORD *)(a1 + 396) = 2;
      if (sub_22F1ED4D8(v6, "+v8.2a"))
        *(_DWORD *)(a1 + 396) = 3;
      if (sub_22F1ED4D8(v6, "+v8.3a"))
        *(_DWORD *)(a1 + 396) = 4;
      if (sub_22F1ED4D8(v6, "+v8.4a"))
        *(_DWORD *)(a1 + 396) = 5;
      if (sub_22F1ED4D8(v6, "+v8.5a"))
        *(_DWORD *)(a1 + 396) = 6;
      if (sub_22F1ED4D8(v6, "+v8.6a"))
        *(_DWORD *)(a1 + 396) = 7;
      if (sub_22F1ED4D8(v6, "+v8.7a"))
        *(_DWORD *)(a1 + 396) = 8;
      if (sub_22F1ED4D8(v6, "+v8.8a"))
        *(_DWORD *)(a1 + 396) = 9;
      if (sub_22F1ED4D8(v6, "+v9a"))
        *(_DWORD *)(a1 + 396) = 10;
      if (sub_22F1ED4D8(v6, "+v9.1a"))
        *(_DWORD *)(a1 + 396) = 11;
      if (sub_22F1ED4D8(v6, "+v9.2a"))
        *(_DWORD *)(a1 + 396) = 12;
      if (sub_22F1ED4D8(v6, "+v9.3a"))
        *(_DWORD *)(a1 + 396) = 13;
      if (sub_22F1ED4D8(v6, "+v8r"))
        *(_DWORD *)(a1 + 396) = 14;
      if (sub_22F1ED4D8(v6, "+fullfp16"))
        *v4 = 1;
      if (sub_22F1ED4D8(v6, "+dotprod"))
        *(_BYTE *)(a1 + 375) = 1;
      if (sub_22F1ED4D8(v6, "+fp16fml"))
        *(_BYTE *)(a1 + 376) = 1;
      if (sub_22F1ED4D8(v6, "+mte"))
        *(_BYTE *)(a1 + 377) = 1;
      if (sub_22F1ED4D8(v6, "+tme"))
        *(_BYTE *)(a1 + 378) = 1;
      if (sub_22F1ED4D8(v6, "+pauth"))
        *(_BYTE *)(a1 + 379) = 1;
      if (sub_22F1ED4D8(v6, "+i8mm"))
        *(_BYTE *)(a1 + 382) = 1;
      if (sub_22F1ED4D8(v6, "+bf16"))
        *(_BYTE *)(a1 + 88) = 1;
      if (sub_22F1ED4D8(v6, "+lse"))
        *(_BYTE *)(a1 + 390) = 1;
      if (sub_22F1ED4D8(v6, "+ls64"))
        *v5 = 1;
      if (sub_22F1ED4D8(v6, "+rand"))
        *(_BYTE *)(a1 + 381) = 1;
      if (sub_22F1ED4D8(v6, "+flagm"))
        *(_BYTE *)(a1 + 391) = 1;
      if (sub_22F1ED4D8(v6, "+mops"))
        *(_BYTE *)(a1 + 392) = 1;
      v6 += 3;
    }
    while (v6 != v7);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 912))(a1);
  return 1;
}

uint64_t sub_22F4371B0()
{
  return 1;
}

uint64_t sub_22F4371B8(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x13)
    return 1;
  else
    return dword_22F54A0E0[a2];
}

uint64_t sub_22F4371D8()
{
  return 0;
}

uint64_t sub_22F4371E0()
{
  return 2;
}

char **sub_22F4371E8()
{
  return off_24FBD4490;
}

char **sub_22F4371F8()
{
  return &off_24FBD4B10;
}

uint64_t sub_22F437208(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t result;
  _BYTE *v4;
  int v5;
  _BYTE *v6;
  int v7;
  int v8;

  result = 0;
  v4 = (_BYTE *)*a2;
  switch(*(_BYTE *)*a2)
  {
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'Y':
    case 'Z':
      return 1;
    case 'O':
    case 'P':
    case 'R':
    case 'T':
    case 'V':
    case 'W':
    case 'X':
      return result;
    case 'Q':
      v5 = *a3 | 1;
      goto LABEL_5;
    case 'S':
LABEL_4:
      v5 = *a3 | 2;
LABEL_5:
      *a3 = v5;
      return 1;
    case 'U':
      if (v4[1] != 112)
        return 0;
      v8 = v4[2];
      v6 = v4 + 2;
      v7 = v8;
      if (v8 != 108 && v7 != 97)
        return 0;
      *a3 |= 2u;
      *a2 = v6;
      return 1;
    default:
      switch(*(_BYTE *)*a2)
      {
        case 'w':
        case 'x':
        case 'y':
        case 'z':
          goto LABEL_4;
        default:
          return result;
      }
      return result;
  }
}

BOOL sub_22F4372BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  unsigned int v6;

  while (1)
  {
    v6 = *a2;
    if (v6 > 0x3D || ((1 << v6) & 0x2000084000000000) == 0)
      break;
    if (a3)
      ++a2;
    a3 -= a3 != 0;
  }
  if (((char)v6 | 8) != 0x7A || (a4 - 119) < 2 || a5 == 64)
    return 1;
  if (a5 == 512)
    return *(_BYTE *)(a1 + 380) != 0;
  MEMORY[0x2348A0C14](a6, "w");
  return 0;
}

const char *sub_22F43735C()
{
  return "";
}

uint64_t sub_22F437368(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 1;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 0;
}

BOOL sub_22F43737C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_22F30FDA8(a2, 0);
  if (result)
    return sub_22F30FE14(a2, 3);
  return result;
}

uint64_t sub_22F4373BC()
{
  return 1;
}

double sub_22F4373C4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  const char *v3;
  size_t v4;

  v1 = a1;
  if (*(_DWORD *)(a1 + 76) == 5)
  {
    if (llvm::Triple::isArch32Bit((llvm::Triple *)(a1 + 32)))
    {
      v2 = "e-m:o-p:32:32-i64:64-i128:128-n32:64-S128";
      v3 = "_";
      a1 = v1;
      v4 = 41;
    }
    else
    {
      v2 = "e-m:o-i64:64-i128:128-n32:64-S128";
      v3 = "_";
      a1 = v1;
      v4 = 33;
    }
  }
  else
  {
    v2 = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128";
    v3 = "";
    v4 = 51;
  }
  return sub_22F1E6F0C(a1, v2, v4, (uint64_t)v3);
}

void sub_22F437448(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;

  v8 = "__AARCH64EL__";
  v9 = 259;
  v6 = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v8, (llvm::Twine *)&v6);
  sub_22F1F0A78(a1, a2, a3);
}

void sub_22F4374C0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__AARCH64EB__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__AARCH_BIG_ENDIAN";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__ARM_BIG_ENDIAN";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  sub_22F1F0A78(a1, a2, a3);
}

double sub_22F437590(uint64_t a1)
{
  return sub_22F1E6F0C(a1, "E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", 0x33uLL, (uint64_t)"");
}

double sub_22F4375A8(uint64_t a1)
{
  size_t v1;
  const char *v2;
  char *v3;

  if (*(_DWORD *)(a1 + 468) == 5)
    v1 = 33;
  else
    v1 = 48;
  if (*(_DWORD *)(a1 + 468) == 5)
    v2 = "_";
  else
    v2 = "";
  if (*(_DWORD *)(a1 + 468) == 5)
    v3 = "e-m:o-i64:64-i128:128-n32:64-S128";
  else
    v3 = "e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128";
  return sub_22F1E6F0C(a1, v3, v1, (uint64_t)v2);
}

uint64_t sub_22F4375E8()
{
  return 0;
}

uint64_t sub_22F4375F0(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x11)
    return 1;
  else
    return dword_22F54A130[a2];
}

uint64_t sub_22F437610()
{
  return 2;
}

uint64_t sub_22F437618(uint64_t a1, llvm::Triple *a2, const std::string *a3)
{
  uint64_t v4;
  llvm::Triple *v5;
  llvm::APFloatBase *isArch32Bit;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = sub_22F1F1E6C(a1, &off_24FBD6858, a2, a3);
  *(_QWORD *)v4 = &off_24FBD64B0;
  *(_DWORD *)(v4 + 592) = 9;
  v5 = (llvm::Triple *)(v4 + 32);
  isArch32Bit = (llvm::APFloatBase *)llvm::Triple::isArch32Bit((llvm::Triple *)(v4 + 32));
  v7 = *(_QWORD *)a1;
  if ((_DWORD)isArch32Bit)
    *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 116) = 9;
  *(_DWORD *)(a1 + *(_QWORD *)(v7 - 24) + 128) = 5;
  *(_BYTE *)(a1 + *(_QWORD *)(v7 - 24) + 160) &= ~1u;
  v8 = *(_QWORD *)a1;
  *(_WORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 42) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v8 - 24) + 15) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v8 - 24) + 14) = 64;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24) + 88) = llvm::APFloatBase::IEEEdouble(isArch32Bit);
  *(_BYTE *)(a1 + 93) = 1;
  *(_BYTE *)(a1 + *(_QWORD *)(v8 - 24) + 160) &= ~4u;
  if (llvm::Triple::isArch32Bit(v5))
  {
    *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160) &= ~2u;
    v9 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 164) = 32;
    *(_BYTE *)(a1 + *(_QWORD *)(v9 - 24) + 160) |= 4u;
    v10 = 4;
  }
  else
  {
    v10 = 3;
  }
  *(_DWORD *)(a1 + 148) = v10;
  return a1;
}

double sub_22F437760(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  const char *v8;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  v12[0] = "__AARCH64_SIMD__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (llvm::Triple::isArch32Bit(a3))
    v8 = "__ARM64_ARCH_8_32__";
  else
    v8 = "__ARM64_ARCH_8__";
  v12[0] = v8;
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__ARM_NEON__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__LITTLE_ENDIAN__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__REGISTER_PREFIX__";
  v13 = 259;
  v11 = 257;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__arm64";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  v12[0] = "__arm64__";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  if (*((_DWORD *)a3 + 6) == 3 && *((_DWORD *)a3 + 7) == 31)
  {
    v12[0] = "__arm64e__";
    v13 = 259;
    v10[0] = "1";
    v11 = 259;
    sub_22E7333BC(a4, (llvm::Twine *)v12, (llvm::Twine *)v10);
  }
  return sub_22F1FB794(a4, a2, (unsigned int *)a3, (uint64_t)"", 0, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F437950()
{
  return 0;
}

void sub_22F437958(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__RENDERSCRIPT__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__AARCH64EL__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  sub_22F1F0A78(a1, a2, a3);
}

void sub_22F437A00(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  sub_22F43CF94(a3, a2, a4);
}

uint64_t sub_22F437A0C(uint64_t a1)
{
  return sub_22F1F2168(a1, &off_24FBD5C88);
}

void sub_22F437A18(uint64_t a1)
{
  sub_22F1F2168(a1, &off_24FBD5C88);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F437A44(uint64_t a1)
{
  return sub_22F1F2168(a1, off_24FBD6078);
}

void sub_22F437A50(uint64_t a1)
{
  sub_22F1F2168(a1, off_24FBD6078);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F437A7C(uint64_t a1)
{
  return sub_22F1F21C0(a1, &off_24FBDEDB0);
}

void sub_22F437A88(uint64_t a1)
{
  sub_22F1F21C0(a1, &off_24FBDEDB0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F437AB4(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F437AD0(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F437BA4()
{
  return 0;
}

const char *sub_22F437BAC()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

double sub_22F437BB8(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 447);
  if (v5 >= 0)
    v6 = a1 + 424;
  else
    v6 = *(_QWORD *)(a1 + 424);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 432);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F437C10(uint64_t a1)
{
  return sub_22F1F21C0(a1, &off_24FBD6858);
}

void sub_22F437C1C(uint64_t a1)
{
  sub_22F1F21C0(a1, &off_24FBD6858);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F437C48(uint64_t a1)
{
  return sub_22F1F2168(a1, off_24FBD6468);
}

void sub_22F437C54(uint64_t a1)
{
  sub_22F1F2168(a1, off_24FBD6468);
  JUMPOUT(0x2348A0E9CLL);
}

char **sub_22F437C80()
{
  return off_24FBE0050;
}

uint64_t sub_22F437C90(uint64_t a1, llvm::Triple *a2, const std::string *a3)
{
  uint64_t v4;
  void *AIRTargetDataLayout;
  size_t v6;

  v4 = sub_22F1F298C(a1, &off_24FBE0588, a2, a3);
  *(_QWORD *)v4 = &off_24FBE01E8;
  *(_DWORD *)(v4 + 436) = -2139078592;
  *(_WORD *)(v4 + 416) = 8224;
  *(_OWORD *)(v4 + 528) = xmmword_22F549A90;
  *(_DWORD *)(v4 + 560) = 7;
  AIRTargetDataLayout = (void *)llvm::air::getAIRTargetDataLayout();
  sub_22F1E6F0C(a1, AIRTargetDataLayout, v6, (uint64_t)&unk_22F61AD89);
  *(_QWORD *)(a1 + 152) = &unk_22F54A1A0;
  return a1;
}

uint64_t sub_22F437D30(uint64_t a1, llvm::Triple *a2, const std::string *a3)
{
  uint64_t v4;
  void *AIRTargetDataLayout;
  size_t v6;

  v4 = sub_22F1F298C(a1, &off_24FBE0960, a2, a3);
  *(_QWORD *)v4 = &off_24FBE05C0;
  *(_DWORD *)(v4 + 436) = -2139078592;
  *(_WORD *)(v4 + 416) = 16448;
  *(_OWORD *)(v4 + 528) = xmmword_22F54A180;
  *(_DWORD *)(v4 + 560) = 7;
  AIRTargetDataLayout = (void *)llvm::air::getAIRTargetDataLayout();
  sub_22F1E6F0C(a1, AIRTargetDataLayout, v6, (uint64_t)&unk_22F61AD89);
  *(_QWORD *)(a1 + 152) = &unk_22F54A1A0;
  return a1;
}

char **sub_22F437DD0()
{
  return off_24FBE0980;
}

uint64_t sub_22F437DE0()
{
  return 0;
}

uint64_t sub_22F437DE8()
{
  return 0;
}

uint64_t sub_22F437DF0()
{
  return 0;
}

void *sub_22F437DF8()
{
  return &unk_22F61AD89;
}

const char *sub_22F437E04()
{
  return "air.static_init";
}

uint64_t sub_22F437E10(uint64_t a1, unsigned int a2)
{
  if (a2 >= 4)
    return a2 + 27;
  else
    return dword_22F49CA10[a2];
}

uint64_t sub_22F437E30(uint64_t a1, unsigned int a2)
{
  if (a2 >= 5)
    return a2 + 27;
  else
    return dword_22F54A20C[a2];
}

uint64_t sub_22F437E50(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1E)
    return 1;
  else
    return dword_22F54A220[a2];
}

uint64_t *sub_22F437E70(uint64_t a1)
{
  llvm::StringMapImpl *v1;
  uint64_t *result;

  v1 = (llvm::StringMapImpl *)(*(_QWORD *)(a1 + 16) + 256);
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_3d_image_writes", 0x16uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_fp16", 0xBuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_fp64", 0xBuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_global_int32_base_atomics", 0x20uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_global_int32_extended_atomics", 0x24uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_local_int32_base_atomics", 0x1FuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_local_int32_extended_atomics", 0x23uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_gl_sharing", 0x11uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_gl_event", 0xFuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_depth_images", 0x13uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_image2d_from_buffer", 0x1AuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_gl_depth_images", 0x16uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_gl_msaa_sharing", 0x16uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_APPLE_BOOL_vec", 0x11uLL) + 8) = 1;
  result = sub_22E80ABE0(v1, "cl_APPLE_vload_vstore_half", 0x1AuLL);
  *(_BYTE *)(*result + 8) = 1;
  return result;
}

uint64_t sub_22F438038(uint64_t a1, unsigned int a2)
{
  return a2 | 0x100000000;
}

uint64_t sub_22F438044()
{
  return 0;
}

uint64_t sub_22F438050()
{
  return 0;
}

uint64_t sub_22F43805C(uint64_t a1)
{
  return sub_22F1F2C98(a1, &off_24FBE3A90);
}

void sub_22F438068(uint64_t a1)
{
  sub_22F1F2C98(a1, &off_24FBE3A90);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F438094(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F438168(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F1F22B4(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 912))(a1, a2, a1 + 32, a3);
}

uint64_t sub_22F4381B0()
{
  return 0;
}

const char *sub_22F4381B8()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

double sub_22F4381C4(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 415);
  if (v5 >= 0)
    v6 = a1 + 392;
  else
    v6 = *(_QWORD *)(a1 + 392);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 400);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F438224(uint64_t a1)
{
  return sub_22F1F2C98(a1, &off_24FBE0960);
}

void sub_22F438230(uint64_t a1)
{
  sub_22F1F2C98(a1, &off_24FBE0960);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43825C(uint64_t a1, char **a2, _DWORD *a3)
{
  int v3;

  v3 = **a2;
  if (v3 != 118 && v3 != 115)
    return 0;
  *a3 |= 2u;
  return 1;
}

uint64_t sub_22F438290(uint64_t a1)
{
  return sub_22F1F2C98(a1, &off_24FBE0588);
}

void sub_22F43829C(uint64_t a1)
{
  sub_22F1F2C98(a1, &off_24FBE0588);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F4382C8()
{
  return "air.static_init";
}

uint64_t sub_22F4382D4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
}

char **sub_22F438310()
{
  return off_24FBE6EB0;
}

uint64_t sub_22F438320(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, unsigned __int8 **a6)
{
  uint64_t v7;
  char *v12;

  v7 = a5;
  if (*(_DWORD *)(a1 + 56) == 30)
  {
    v12 = (char *)&loc_22F438384 + 4 * word_22F54A29C[llvm::AMDGPU::parseArchAMDGCN()];
    __asm { BR              X10 }
  }
  if (!a5)
  {
    v7 = 4;
    a4 = "r600";
  }
  llvm::AMDGPU::parseArchR600();
  return sub_22F424A84(a1, a2, a3, (uint64_t)a4, v7, a6);
}

void sub_22F4385A0()
{
  llvm::StringMapImpl *v0;

  *(_BYTE *)(*sub_22E80ABE0(v0, "dot1-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot2-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot5-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot6-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot7-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dl-insts", 8uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "ci-insts", 8uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "flat-address-space", 0x12uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "16-bit-insts", 0xCuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dpp", 3uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "gfx8-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "gfx9-insts", 0xAuLL) + 8) = 1;
  JUMPOUT(0x22F438504);
}

void sub_22F43870C()
{
  llvm::StringMapImpl *v0;

  *(_BYTE *)(*sub_22E80ABE0(v0, "gfx940-insts", 0xCuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "gfx90a-insts", 0xCuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot3-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot4-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot5-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot6-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "mai-insts", 9uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dl-insts", 8uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot1-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot2-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dot7-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "gfx9-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "gfx8-insts", 0xAuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "16-bit-insts", 0xCuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "dpp", 3uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "s-memrealtime", 0xDuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "ci-insts", 8uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "flat-address-space", 0x12uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v0, "s-memtime-inst", 0xEuLL) + 8) = 1;
  JUMPOUT(0x22F438570);
}

uint64_t sub_22F438948(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) == 30)
    return llvm::AMDGPU::fillValidArchListAMDGCN();
  else
    return llvm::AMDGPU::fillValidArchListR600();
}

uint64_t sub_22F438960(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) == 30)
    return 64;
  else
    return 32;
}

void sub_22F438978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  sub_22F1E73BC((_QWORD *)a1, a2, a3);
  v5 = &unk_22F54A3AC;
  if ((*(_DWORD *)(a3 + 52) & 0x40000000) == 0 && *(_DWORD *)(a1 + 56) == 30)
    v5 = &unk_22F54A340;
  *(_QWORD *)(a1 + 152) = v5;
}

char **sub_22F4389C4()
{
  return off_24FBE45D0;
}

uint64_t sub_22F4389D4(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t result;
  __int128 v6;

  v4 = (_OWORD *)(a1 + 520);
  v6 = *(_OWORD *)(a1 + 520);
  sub_22F1E82DC((_QWORD *)a1, a2);
  *v4 = v6;
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 88))(a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 86) = 1;
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a1 + 512);
  }
  return result;
}

void sub_22F438A44(uint64_t a1)
{
  sub_22F1F3B6C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F438A68(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a2 == 2 || a2 == 4;
  return v3 << 63 >> 63;
}

uint64_t sub_22F438A7C()
{
  return 1;
}

uint64_t sub_22F438A84()
{
  return 0;
}

uint64_t sub_22F438A8C()
{
  return 0;
}

const char *sub_22F438A94()
{
  return "";
}

BOOL sub_22F438AA0(_DWORD *a1)
{
  int ArchAttrAMDGCN;

  if (a1[14] == 30)
  {
    a1[91] = llvm::AMDGPU::parseArchAMDGCN();
    ArchAttrAMDGCN = llvm::AMDGPU::getArchAttrAMDGCN();
  }
  else
  {
    a1[91] = llvm::AMDGPU::parseArchR600();
    ArchAttrAMDGCN = llvm::AMDGPU::getArchAttrR600();
  }
  a1[92] = ArchAttrAMDGCN;
  return a1[91] != 0;
}

BOOL sub_22F438B10(uint64_t a1)
{
  int v1;

  if (*(_DWORD *)(a1 + 56) == 30)
    v1 = llvm::AMDGPU::parseArchAMDGCN();
  else
    v1 = llvm::AMDGPU::parseArchR600();
  return v1 != 0;
}

uint64_t sub_22F438B48(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];
  void *v9[2];
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 32;
  llvm::AMDGPU::getArchNameAMDGCN();
  sub_22F1E623C(v4, (uint64_t)v9);
  v5 = *a2;
  v6 = a2[1];
  v8[0] = a1;
  v8[1] = (uint64_t)v9;
  while (v5 != v6)
  {
    sub_22F439018(v8, v5);
    v5 += 24;
  }
  if (v9[0] != v10)
    free(v9[0]);
  return 1;
}

uint64_t sub_22F438C0C(uint64_t a1, unsigned int a2)
{
  if (a2 < 6 && ((0x3Bu >> a2) & 1) != 0)
    return dword_22F54A448[a2];
  else
    return a2 + 27;
}

uint64_t sub_22F438C38(uint64_t a1, unsigned int a2)
{
  if (a2 < 5 && ((0x1Bu >> a2) & 1) != 0)
    return dword_22F54A460[a2];
  else
    return a2 + 27;
}

uint64_t sub_22F438C64()
{
  return 0x10000001FLL;
}

void *sub_22F438C70(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 372) == 32)
    return &unk_22F54A418;
  else
    return &unk_22F54A430;
}

BOOL sub_22F438C90(uint64_t a1, int a2)
{
  BOOL v2;

  if (a2)
    v2 = a2 == 13;
  else
    v2 = 1;
  return !v2;
}

uint64_t *sub_22F438CA0(uint64_t a1)
{
  llvm::StringMapImpl *v2;
  int v3;
  int v4;
  int v5;
  uint64_t *result;

  v2 = (llvm::StringMapImpl *)(*(_QWORD *)(a1 + 16) + 256);
  LOBYTE(v3) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v2, "cl_clang_storage_class_specifiers", 0x21uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v2, "__cl_clang_variadic_functions", 0x1DuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v2, "__cl_clang_function_pointers", 0x1CuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v2, "__cl_clang_non_portable_kernel_param_types", 0x2AuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v2, "__cl_clang_bitfields", 0x14uLL) + 8) = 1;
  v4 = *(_DWORD *)(a1 + 56);
  if (v4 != 30)
    v3 = (*(unsigned __int8 *)(a1 + 368) >> 3) & 1;
  *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_fp64", 0xBuLL) + 8) = v3;
  if (*(_DWORD *)(a1 + 56) == 30)
    LOBYTE(v5) = 1;
  else
    v5 = (*(unsigned __int8 *)(a1 + 368) >> 3) & 1;
  result = sub_22E80ABE0(v2, "__opencl_c_fp64", 0xFuLL);
  *(_BYTE *)(*result + 8) = v5;
  if (v4 == 30 || *(_DWORD *)(a1 + 364) >= 8u)
  {
    *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_byte_addressable_store", 0x1DuLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_global_int32_base_atomics", 0x20uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_global_int32_extended_atomics", 0x24uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_local_int32_base_atomics", 0x1FuLL) + 8) = 1;
    result = sub_22E80ABE0(v2, "cl_khr_local_int32_extended_atomics", 0x23uLL);
    *(_BYTE *)(*result + 8) = 1;
    if (v4 == 30)
    {
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_fp16", 0xBuLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_int64_base_atomics", 0x19uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_int64_extended_atomics", 0x1DuLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_mipmap_image", 0x13uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_mipmap_image_writes", 0x1AuLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_khr_subgroups", 0x10uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_amd_media_ops", 0x10uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "cl_amd_media_ops2", 0x11uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "__opencl_c_images", 0x11uLL) + 8) = 1;
      *(_BYTE *)(*sub_22E80ABE0(v2, "__opencl_c_3d_image_writes", 0x1AuLL) + 8) = 1;
      result = sub_22E80ABE0(v2, "cl_khr_3d_image_writes", 0x16uLL);
      *(_BYTE *)(*result + 8) = 1;
    }
  }
  return result;
}

uint64_t sub_22F438FA4(uint64_t a1, int a2)
{
  char v2;

  v2 = a2 - 1;
  if ((a2 - 1) < 6 && ((0x35u >> v2) & 1) != 0)
    return dword_22F54A474[v2];
  else
    return sub_22F424B18(a1, a2);
}

uint64_t sub_22F438FD4()
{
  return 4;
}

uint64_t sub_22F438FDC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0x100000000;
  v3 = 1;
  v4 = 0x100000000;
  v5 = 2;
  if (a2 != 3)
  {
    v4 = 0;
    v5 = 0;
  }
  if (a2 != 5)
  {
    v2 = v4;
    v3 = v5;
  }
  return v3 | v2;
}

uint64_t sub_22F43900C()
{
  return 0;
}

uint64_t *sub_22F439018(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t *result;
  BOOL v12;

  v4 = *a1;
  if (sub_22F1ED4D8((_QWORD *)a2, "+wavefrontsize64"))
    *(_DWORD *)(v4 + 372) = 64;
  v5 = *(_BYTE *)(a2 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  v8 = v5 & 0x7F;
  if (v6)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
    v9 = v7 + 1;
  else
    v9 = v7;
  v10 = v8 - (v8 != 0);
  result = (uint64_t *)sub_22F4390D4(*(_QWORD *)a1[1], *(_DWORD *)(a1[1] + 8), v9, v10);
  if ((_DWORD)result)
  {
    v12 = *v7 == 43;
    result = sub_22E80ABE0((llvm::StringMapImpl *)(v4 + 376), v9, v10);
    *(_BYTE *)(*result + 8) = v12;
  }
  return result;
}

BOOL sub_22F4390D4(uint64_t a1, unsigned int a2, void *__s2, size_t __n)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v5 = a2;
  v6 = a1;
  if (a2)
  {
    v9 = 16 * a2;
    v6 = a1;
    v10 = a1 + v9;
    while (*(_QWORD *)(v6 + 8) != __n || __n && memcmp(*(const void **)v6, __s2, __n))
    {
      v6 += 16;
      v9 -= 16;
      if (!v9)
      {
        v6 = v10;
        return v5 != (v6 - a1) >> 4;
      }
    }
  }
  return v5 != (v6 - a1) >> 4;
}

uint64_t sub_22F439168(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;

  v6 = "__arc__";
  v7 = 259;
  v4 = "1";
  v5 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v6, (llvm::Twine *)&v4);
}

uint64_t sub_22F4391B4(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FBE8F28);
}

void sub_22F4391C0(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FBE8F28);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4391EC()
{
  return 1;
}

uint64_t sub_22F4391F4()
{
  return 0;
}

uint64_t sub_22F439200()
{
  return 0;
}

uint64_t sub_22F439208()
{
  return 1;
}

uint64_t sub_22F439210()
{
  return 0;
}

const char *sub_22F439218()
{
  return "";
}

char **sub_22F439224()
{
  return off_24FBE92D8;
}

uint64_t sub_22F439234()
{
  return 0;
}

double sub_22F439240(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  char *v4;
  const char *v5;
  uint64_t v6;
  size_t v7;
  int v9;

  *(_DWORD *)(a1 + 468) |= 0x80u;
  v2 = *(_QWORD *)a1;
  *(_WORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 42) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v2 - 24) + 15) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v2 - 24) + 23) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v2 - 24) + 13) = 64;
  *(_BYTE *)(a1 + *(_QWORD *)(v2 - 24) + 9) = 16;
  *(_BYTE *)(a1 + *(_QWORD *)(v2 - 24) + 8) = 16;
  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 24) + 64) = llvm::APFloatBase::BFloat((llvm::APFloatBase *)a1);
  v3 = *(_DWORD *)(a1 + 68);
  if (v3 > 0xF || ((1 << v3) & 0xB000) == 0)
    *(_DWORD *)(a1 + *(_QWORD *)(v2 - 24) + 128) = 6;
  *(_BYTE *)(a1 + *(_QWORD *)(v2 - 24) + 160) |= 2u;
  *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 164) = 0;
  if (*(_DWORD *)(a1 + 76) == 5)
  {
    if (*(_BYTE *)(a1 + 80))
      v4 = "E-m:o-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64";
    else
      v4 = "e-m:o-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64";
    v5 = "_";
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 68);
    if (v9 == 20)
    {
      v4 = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S128";
      v5 = (const char *)&unk_22F61DA77;
      v6 = a1;
      v7 = 52;
      return sub_22F1E6F0C(v6, v4, v7, (uint64_t)v5);
    }
    if (v9 == 15)
    {
      v4 = "e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64";
    }
    else if (*(_BYTE *)(a1 + 80))
    {
      v4 = "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64";
    }
    else
    {
      v4 = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64";
    }
    v5 = (const char *)&unk_22F61DA77;
  }
  v6 = a1;
  v7 = 51;
  return sub_22F1E6F0C(v6, v4, v7, (uint64_t)v5);
}

char *sub_22F4393C0(uint64_t a1, int a2)
{
  char *result;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 456) = a2;
  llvm::ARM::getSubArch();
  *(_DWORD *)(a1 + 460) = llvm::ARM::parseArchProfile();
  *(_DWORD *)(a1 + 464) = llvm::ARM::parseArchVersion();
  result = sub_22F439450(*(_DWORD *)(a1 + 456));
  *(_QWORD *)(a1 + 432) = result;
  *(_QWORD *)(a1 + 440) = v4;
  v5 = *(_DWORD *)(a1 + 460) - 1;
  if (v5 > 2)
  {
    v7 = 0;
    v6 = (char *)&unk_22F61DA77;
  }
  else
  {
    v6 = off_24FC29278[v5];
    v7 = 1;
  }
  *(_QWORD *)(a1 + 416) = v6;
  *(_QWORD *)(a1 + 424) = v7;
  return result;
}

char *sub_22F439450(int a1)
{
  int v1;

  v1 = a1 - 14;
  if ((a1 - 14) < 0x1B && ((0x47FFFFFu >> v1) & 1) != 0)
    return off_24FC29290[v1];
  else
    return (char *)llvm::ARM::getCPUAttr();
}

BOOL sub_22F439498(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  int v3;
  int v4;
  int *v7;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 440);
  if (v1 == 3)
  {
    v2 = *(unsigned __int16 **)(a1 + 432);
    v3 = *v2;
    v4 = *((unsigned __int8 *)v2 + 2);
    if (v3 != 21558 || v4 != 50)
      return *(_DWORD *)(a1 + 464) > 6u;
    return 1;
  }
  if (*(_DWORD *)(a1 + 464) <= 6u)
    return 0;
  if (v1 != 7)
    return 1;
  v7 = *(int **)(a1 + 432);
  v8 = *v7;
  v9 = *(int *)((char *)v7 + 3);
  return v8 != 1113541944 || v9 != 1163084098;
}

uint64_t sub_22F439524(uint64_t a1)
{
  if (*(char *)(a1 + 391) >= 0)
    return a1 + 368;
  else
    return *(_QWORD *)(a1 + 368);
}

BOOL sub_22F439548(uint64_t a1, std::string *a2)
{
  _BOOL4 v4;
  _BOOL8 result;

  std::string::operator=((std::string *)(a1 + 368), a2);
  if (sub_22F1ED4D8(a2, "apcs-gnu") || sub_22F1ED4D8(a2, "aapcs16"))
  {
    v4 = sub_22F1ED4D8(a2, "aapcs16");
    sub_22F1F3BAC(a1, v4);
    return 1;
  }
  if (sub_22F1ED4D8(a2, "aapcs") || sub_22F1ED4D8(a2, "aapcs-vfp") || (result = sub_22F1ED4D8(a2, "aapcs-linux")))
  {
    sub_22F439240(a1);
    return 1;
  }
  return result;
}

uint64_t sub_22F439600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v11;

  result = llvm::ARM::parseBranchProtection();
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 544))(a1, a4, a5);
    if ((_DWORD)result)
    {
      *(_DWORD *)a6 = 0;
      *(_DWORD *)(a6 + 4) = 0;
      *(_BYTE *)(a6 + 8) = v11;
      return 1;
    }
  }
  return result;
}

BOOL sub_22F43974C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 88) && (*(_BYTE *)(a1 + 469) & 4) == 0;
}

BOOL sub_22F43976C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v3;

  if (a3 == 7 && (*a2 == 1701733735 ? (v3 = *(_DWORD *)((char *)a2 + 3) == 1667854949) : (v3 = 0), v3))
    return 1;
  else
    return llvm::ARM::parseCPUArch() != 0;
}

uint64_t sub_22F4397C4()
{
  return llvm::ARM::fillValidCPUArchList();
}

uint64_t sub_22F4397CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  if (a3 == 3)
  {
    if (*(_WORD *)a2 == 26230 && *(_BYTE *)(a2 + 2) == 112)
      goto LABEL_7;
  }
  else if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1852794222)
    {
      v3 = 2;
      goto LABEL_8;
    }
    if (*(_DWORD *)a2 == 846227062 || *(_DWORD *)a2 == 863004278 || *(_DWORD *)a2 == 879781494)
    {
LABEL_7:
      v3 = 1;
LABEL_8:
      *(_DWORD *)(a1 + 448) = v3;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_22F439868(llvm::raw_ostream **a1)
{
  _QWORD v3[4];
  __int16 v4;
  _QWORD v5[4];
  __int16 v6;

  v5[0] = "__ARM_FEATURE_COMPLEX";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
  v5[0] = "__ARM_FEATURE_QRDMX";
  v6 = 259;
  v3[0] = "1";
  v4 = 259;
  return sub_22E7333BC(a1, (llvm::Twine *)v5, (llvm::Twine *)v3);
}

uint64_t sub_22F4398EC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  char v26;
  int v27;
  const char *v28;
  char v29;
  uint64_t result;
  unsigned int v31;
  const char *v32;
  char v33;
  int *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44[2];
  uint64_t v45;
  __int16 v46;
  uint64_t v47[4];
  __int16 v48;
  uint64_t v49[4];
  __int16 v50;
  _QWORD v51[4];
  __int16 v52;

  v51[0] = "__arm";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v51[0] = "__arm__";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  if (!*(_DWORD *)(a1 + 68) && (*(_DWORD *)(a1 + 72) - 9) <= 1)
  {
    v51[0] = "__ELF__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v51[0] = "__REGISTER_PREFIX__";
  v52 = 259;
  v50 = 257;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  if (*(_DWORD *)(a1 + 60) == 22)
  {
    v51[0] = "__ARM_ARCH_7K__";
    v52 = 259;
    v49[0] = (uint64_t)"2";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_ARCH_7A__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    v6 = v49;
LABEL_6:
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v6);
    goto LABEL_7;
  }
  v13 = *(_QWORD *)(a1 + 440);
  if (v13)
  {
    v50 = 1283;
    v14 = *(_QWORD *)(a1 + 432);
    v49[0] = (uint64_t)"__ARM_ARCH_";
    v49[2] = v14;
    v49[3] = v13;
    v47[0] = (uint64_t)"__";
    v48 = 259;
    sub_22E78CF44(v49, v47, (uint64_t)v51);
    v44[0] = (uint64_t)"1";
    v46 = 259;
    v6 = v44;
    goto LABEL_6;
  }
LABEL_7:
  v51[0] = "__ARM_ARCH";
  v52 = 259;
  v7 = *(_DWORD *)(a1 + 464);
  v50 = 264;
  LODWORD(v49[0]) = v7;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  if (*(_DWORD *)(a1 + 464) >= 8u)
  {
    v8 = *(_DWORD *)(a1 + 468);
    if ((~v8 & 0xC000) == 0)
    {
      v51[0] = "__ARM_FEATURE_CRYPTO";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v8 = *(_DWORD *)(a1 + 468);
    }
    if ((v8 & 0x4000) != 0)
    {
      v51[0] = "__ARM_FEATURE_SHA2";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v8 = *(_DWORD *)(a1 + 468);
    }
    if ((v8 & 0x8000) != 0)
    {
      v51[0] = "__ARM_FEATURE_AES";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v8 = *(_DWORD *)(a1 + 468);
    }
    if ((v8 & 0x1000) != 0)
    {
      v51[0] = "__ARM_FEATURE_CRC32";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    }
    v51[0] = "__ARM_FEATURE_NUMERIC_MAXMIN";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_FEATURE_DIRECTED_ROUNDING";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (!*(_QWORD *)(a1 + 424) || *(_DWORD *)(a1 + 460) != 3)
  {
    v51[0] = "__ARM_ARCH_ISA_ARM";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (sub_22F439498(a1))
  {
    v51[0] = "__ARM_ARCH_ISA_THUMB";
    v52 = 259;
    v49[0] = (uint64_t)"2";
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 440);
    if (!v15)
      goto LABEL_42;
    v16 = 0;
    v17 = *(unsigned __int8 **)(a1 + 432);
    do
    {
      v18 = *v17++;
      if (v18 == 84)
        ++v16;
      --v15;
    }
    while (v15);
    if (!v16)
    {
LABEL_42:
      if (*(_DWORD *)(a1 + 464) < 6u)
        goto LABEL_23;
    }
    v51[0] = "__ARM_ARCH_ISA_THUMB";
    v52 = 259;
    v49[0] = (uint64_t)"1";
  }
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
LABEL_23:
  v51[0] = "__ARM_32BIT_STATE";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v9 = *(_QWORD *)(a1 + 424);
  if (v9)
  {
    v51[0] = "__ARM_ARCH_PROFILE";
    v52 = 259;
    v48 = 1283;
    v10 = *(_QWORD *)(a1 + 416);
    v47[0] = (uint64_t)"'";
    v47[2] = v10;
    v47[3] = v9;
    v44[0] = (uint64_t)"'";
    v46 = 259;
    sub_22E78CF44(v47, v44, (uint64_t)v49);
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if ((*(_BYTE *)(a1 + 470) & 2) != 0)
  {
    v51[0] = "__ARM_FEATURE_UNALIGNED";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v11 = *(unsigned int *)(a1 + 472);
  if ((_DWORD)v11)
  {
    v51[0] = "__ARM_FEATURE_LDREX";
    v52 = 259;
    v47[0] = (uint64_t)"0x";
    v48 = 259;
    v43 = v11;
    v44[0] = (uint64_t)&v43;
    v45 = 0;
    v46 = 270;
    sub_22E78CF44(v47, v44, (uint64_t)v49);
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v12 = *(_DWORD *)(a1 + 464);
  if (v12 == 5)
    goto LABEL_45;
  if (v12 != 6)
  {
    if (v12 < 7)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (*(_QWORD *)(a1 + 424) != 1 || **(_BYTE **)(a1 + 416) != 77)
  {
LABEL_45:
    v51[0] = "__ARM_FEATURE_CLZ";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
LABEL_46:
  v19 = *(unsigned int *)(a1 + 476);
  if ((_DWORD)v19)
  {
    v51[0] = "__ARM_FP";
    v52 = 259;
    v47[0] = (uint64_t)"0x";
    v48 = 259;
    v43 = v19;
    v44[0] = (uint64_t)&v43;
    v45 = 0;
    v46 = 270;
    sub_22E78CF44(v47, v44, (uint64_t)v49);
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v51[0] = "__ARM_ACLE";
  v52 = 259;
  v49[0] = (uint64_t)"200";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v51[0] = "__ARM_FP16_FORMAT_IEEE";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v51[0] = "__ARM_FP16_ARGS";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v20 = *(_DWORD *)(a1 + 464);
  if (v20 >= 7 && (*(_BYTE *)(a1 + 468) & 4) != 0)
  {
    v51[0] = "__ARM_FEATURE_FMA";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v20 = *(_DWORD *)(a1 + 464);
  }
  if (v20 - 5 <= 3 && *(_DWORD *)(a1 + 68) != 15)
  {
    v51[0] = "__THUMB_INTERWORK__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (sub_22F1ED4D8((_QWORD *)(a1 + 368), "aapcs")
    || sub_22F1ED4D8((_QWORD *)(a1 + 368), "aapcs-linux")
    || sub_22F1ED4D8((_QWORD *)(a1 + 368), "aapcs-vfp"))
  {
    if (*(_DWORD *)(a1 + 76) != 5 && *(_DWORD *)(a1 + 68) != 15)
    {
      v51[0] = "__ARM_EABI__";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    }
    v51[0] = "__ARM_PCS";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if ((*(_BYTE *)(a1 + 469) & 0xC) == 0
    || sub_22F1ED4D8((_QWORD *)(a1 + 368), "aapcs-vfp")
    || sub_22F1ED4D8((_QWORD *)(a1 + 368), "aapcs16"))
  {
    v51[0] = "__ARM_PCS_VFP";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if ((*(_BYTE *)(a1 + 469) & 4) != 0)
  {
    v51[0] = "__SOFTFP__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v21 = *(_DWORD *)(a2 + 52);
  if ((v21 & 0x20) != 0)
  {
    v51[0] = "__ARM_ROPI";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v21 = *(_DWORD *)(a2 + 52);
  }
  if ((v21 & 0x40) != 0)
  {
    v51[0] = "__ARM_RWPI";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (*(_DWORD *)(a1 + 456) == 39)
  {
    v51[0] = "__XSCALE__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (*(_DWORD *)(a1 + 452) == 2)
  {
    v51[0] = "__THUMBEL__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__thumb__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    if (sub_22F439498(a1))
    {
      v51[0] = "__thumb2__";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    }
  }
  if (*(_QWORD *)(a1 + 424) != 1 || **(_BYTE **)(a1 + 416) != 77)
  {
    if (*(_DWORD *)(a1 + 464) <= 5u)
      goto LABEL_80;
    goto LABEL_79;
  }
  if ((*(_BYTE *)(a1 + 470) & 1) != 0)
  {
LABEL_79:
    v51[0] = "__ARM_FEATURE_SIMD32";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
LABEL_80:
  v22 = *(_DWORD *)(a1 + 468);
  if ((v22 & 0x100) != 0 && *(_DWORD *)(a1 + 452) == 2 || (v22 & 0x200) != 0 && *(_DWORD *)(a1 + 452) != 2)
  {
    v51[0] = "__ARM_FEATURE_IDIV";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_ARCH_EXT_IDIV__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v51[0] = "__APCS_32__";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v51[0] = "__VFP_FP__";
  v52 = 259;
  v49[0] = (uint64_t)"1";
  v50 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v23 = *(_DWORD *)(a1 + 468);
  if ((v23 & 0x1F) != 0)
  {
    if ((v23 & 1) != 0)
    {
      v51[0] = "__ARM_VFPV2__";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v23 = *(_DWORD *)(a1 + 468);
    }
    if ((v23 & 2) != 0)
    {
      v51[0] = "__ARM_VFPV3__";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v23 = *(_DWORD *)(a1 + 468);
    }
    if ((v23 & 4) != 0)
    {
      v51[0] = "__ARM_VFPV4__";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v23 = *(_DWORD *)(a1 + 468);
    }
    if ((v23 & 0x10) != 0)
    {
      v51[0] = "__ARM_FPV5__";
      v52 = 259;
      v49[0] = (uint64_t)"1";
      v50 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
      v23 = *(_DWORD *)(a1 + 468);
    }
  }
  if ((v23 & 0x408) == 8 && *(_DWORD *)(a1 + 464) >= 7u)
  {
    v51[0] = "__ARM_NEON";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_NEON__";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_NEON_FP";
    v52 = 259;
    v47[0] = (uint64_t)"0x";
    v48 = 259;
    v43 = *(_DWORD *)(a1 + 476) & 0xFFFFFFF7;
    v44[0] = (uint64_t)&v43;
    v45 = 0;
    v46 = 270;
    sub_22E78CF44(v47, v44, (uint64_t)v49);
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (*(_DWORD *)(a1 + 456) == 36)
  {
    v24 = *(_DWORD *)(a1 + 468);
    if ((v24 & 0x60) != 0)
    {
      v51[0] = "__ARM_FEATURE_MVE";
      v52 = 259;
      if ((v24 & 0x40) != 0)
        v25 = "3";
      else
        v25 = "1";
      v26 = 1;
      HIBYTE(v50) = 1;
      if (*v25)
      {
        v49[0] = (uint64_t)v25;
        v26 = 3;
      }
      LOBYTE(v50) = v26;
      sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    }
  }
  if ((*(_DWORD *)(a1 + 288) & 0x3FC00) != 0)
  {
    v51[0] = "__ARM_FEATURE_CDE";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_FEATURE_CDE_COPROC";
    v52 = 259;
    v47[0] = (uint64_t)"0x";
    v48 = 259;
    v43 = ((unint64_t)*(unsigned int *)(a1 + 288) >> 10);
    v44[0] = (uint64_t)&v43;
    v45 = 0;
    v46 = 270;
    sub_22E78CF44(v47, v44, (uint64_t)v49);
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v51[0] = "__ARM_SIZEOF_WCHAR_T";
  v52 = 259;
  v27 = *(_BYTE *)(a2 + 55) & 0xF;
  if ((*(_BYTE *)(a2 + 55) & 0xF) == 0)
    v27 = 4;
  v50 = 265;
  LODWORD(v49[0]) = v27;
  sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v51[0] = "__ARM_SIZEOF_MINIMAL_ENUM";
  v52 = 259;
  if ((*(_DWORD *)(a2 + 52) & 0x20000000) != 0)
    v28 = "1";
  else
    v28 = "4";
  v29 = 1;
  HIBYTE(v50) = 1;
  if (*v28)
  {
    v49[0] = (uint64_t)v28;
    v29 = 3;
  }
  LOBYTE(v50) = v29;
  result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  v31 = *(_DWORD *)(a1 + 464);
  if (v31 == 8)
  {
    if (*(_DWORD *)(a1 + 460) != 3)
      goto LABEL_121;
    v51[0] = "__ARM_FEATURE_CMSE";
    v52 = 259;
    if ((*(_QWORD *)(a2 + 192) & 0x10000000000) != 0)
      v32 = "3";
    else
      v32 = "1";
    v33 = 1;
    HIBYTE(v50) = 1;
    if (*v32)
    {
      v49[0] = (uint64_t)v32;
      v33 = 3;
    }
    LOBYTE(v50) = v33;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v31 = *(_DWORD *)(a1 + 464);
  }
  if (v31 < 6)
    goto LABEL_133;
LABEL_121:
  v34 = *(int **)(a1 + 432);
  v35 = *(_QWORD *)(a1 + 440);
  if (v35 != 7)
  {
    if (v35 == 2 && *(_WORD *)v34 == 19766)
      goto LABEL_133;
LABEL_132:
    v51[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    goto LABEL_133;
  }
  v36 = *v34;
  v37 = *(int *)((char *)v34 + 3);
  if (v36 != 1113541944 || v37 != 1163084098)
    goto LABEL_132;
LABEL_133:
  if ((*(_BYTE *)(a1 + 470) & 1) != 0)
  {
    v51[0] = "__ARM_FEATURE_DSP";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v39 = *(_DWORD *)(a1 + 464);
  if (v39 == 6)
  {
    if (*(_QWORD *)(a1 + 424) != 1 || **(_BYTE **)(a1 + 416) != 77)
      goto LABEL_138;
  }
  else if (v39 >= 7)
  {
LABEL_138:
    v51[0] = "__ARM_FEATURE_SAT";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
LABEL_139:
    v51[0] = "__ARM_FEATURE_QBIT";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    goto LABEL_140;
  }
  if ((*(_BYTE *)(a1 + 470) & 1) != 0)
    goto LABEL_139;
LABEL_140:
  if ((*(_DWORD *)(a2 + 52) & 0x2000) != 0)
  {
    v51[0] = "__ARM_FP_FAST";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if ((*(_BYTE *)(a1 + 468) & 8) != 0 && *(_BYTE *)(a1 + 84))
  {
    v51[0] = "__ARM_FEATURE_FP16_VECTOR_ARITHMETIC";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (*(_BYTE *)(a1 + 84))
  {
    v51[0] = "__ARM_FEATURE_FP16_SCALAR_ARITHMETIC";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v40 = *(_DWORD *)(a1 + 468);
  if ((v40 & 0x40000) != 0)
  {
    v51[0] = "__ARM_FEATURE_DOTPROD";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v40 = *(_DWORD *)(a1 + 468);
  }
  if ((v40 & 0x80000) != 0)
  {
    v51[0] = "__ARM_FEATURE_MATMUL_INT8";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v40 = *(_DWORD *)(a1 + 468);
  }
  if ((v40 & 0x200000) != 0)
  {
    v51[0] = "__ARM_FEATURE_PAUTH";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v40 = *(_DWORD *)(a1 + 468);
  }
  if ((v40 & 0x400000) != 0)
  {
    v51[0] = "__ARM_FEATURE_BTI";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v51[0] = "__ARM_FEATURE_BF16";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_FEATURE_BF16_VECTOR_ARITHMETIC";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
    v51[0] = "__ARM_BF16_FORMAT_ALTERNATIVE";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if ((*(_BYTE *)(a2 + 212) & 0x10) != 0)
  {
    v51[0] = "__ARM_FEATURE_BTI_DEFAULT";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  if (((*(unsigned __int8 *)(a2 + 250) << 16) & 0x300000) != 0)
  {
    if (((*(unsigned __int8 *)(a2 + 250) << 16) & 0x300000) == 0x200000)
      v41 = 5;
    else
      v41 = 1;
    v51[0] = "__ARM_FEATURE_PAC_DEFAULT";
    v52 = 259;
    v50 = 264;
    LODWORD(v49[0]) = v41;
    result = sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  v42 = *(_DWORD *)(a1 + 456);
  if (v42 == 21 || v42 == 22)
  {
    v51[0] = "__ARM_FEATURE_QRDMX";
    v52 = 259;
    v49[0] = (uint64_t)"1";
    v50 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v51, (llvm::Twine *)v49);
  }
  else if ((v42 - 23) < 0xA)
  {
    return sub_22F439868(a3);
  }
  return result;
}

char **sub_22F43ABB4()
{
  return off_24FBE9790;
}

uint64_t sub_22F43ABC4()
{
  return 0;
}

uint64_t sub_22F43ABCC(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 468) & 0x80) != 0)
    return 6;
  else
    return *(_DWORD *)(a1 + 60) != 22;
}

char **sub_22F43ABEC()
{
  return off_24FC1B5F0;
}

char **sub_22F43ABFC()
{
  return &off_24FC1B8F0;
}

uint64_t sub_22F43AC0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE *v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int16 *v19;
  int v20;
  int v21;
  BOOL v22;

  v5 = (_BYTE *)*a2;
  switch(*(_BYTE *)*a2)
  {
    case 'I':
      if (*(_DWORD *)(a1 + 452) != 2)
        goto LABEL_17;
      v6 = sub_22F439498(a1);
      *(_DWORD *)a3 |= 0x10u;
      result = 1;
      if (!v6)
      {
        v8 = 0xFF00000000;
        goto LABEL_46;
      }
      return result;
    case 'J':
      if (*(_DWORD *)(a1 + 452) != 2 || sub_22F439498(a1))
      {
        *(_DWORD *)a3 |= 0x10u;
        v9 = 0xFFFFFFFF001;
      }
      else
      {
        *(_DWORD *)a3 |= 0x10u;
        v9 = -255;
      }
      goto LABEL_10;
    case 'K':
      goto LABEL_17;
    case 'L':
      if (*(_DWORD *)(a1 + 452) != 2)
        goto LABEL_17;
      v10 = sub_22F439498(a1);
      *(_DWORD *)a3 |= 0x10u;
      result = 1;
      if (v10)
        return result;
      v8 = 0x7FFFFFFF9;
LABEL_46:
      *(_QWORD *)(a3 + 8) = v8;
LABEL_11:
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    case 'M':
      if (*(_DWORD *)(a1 + 452) == 2)
        sub_22F439498(a1);
      goto LABEL_17;
    case 'N':
      if (*(_DWORD *)(a1 + 452) != 2 || sub_22F439498(a1))
        return 0;
      *(_DWORD *)a3 |= 0x10u;
      v9 = 0x1F00000000;
LABEL_10:
      *(_QWORD *)(a3 + 8) = v9;
      result = 1;
      goto LABEL_11;
    case 'O':
      if (*(_DWORD *)(a1 + 452) != 2 || sub_22F439498(a1))
        return 0;
LABEL_17:
      v11 = *(_DWORD *)a3 | 0x10;
      goto LABEL_18;
    case 'P':
    case 'R':
    case 'S':
      return 0;
    case 'Q':
      v11 = *(_DWORD *)a3 | 1;
LABEL_18:
      *(_DWORD *)a3 = v11;
      return 1;
    case 'T':
      v14 = (char)v5[1];
      v13 = v5 + 1;
      v12 = v14;
      if (v14 != 111 && v12 != 101)
        return 0;
      v15 = *(_DWORD *)a3 | 2;
      goto LABEL_36;
    case 'U':
      v16 = (char)v5[1];
      v13 = v5 + 1;
      v17 = (1 << (v16 - 109)) & 0x12D3;
      if ((v16 - 109) > 0xC || v17 == 0)
        return 0;
      v15 = *(_DWORD *)a3 | 1;
LABEL_36:
      *(_DWORD *)a3 = v15;
      *a2 = v13;
      return 1;
    default:
      result = 1;
      switch(*(_BYTE *)*a2)
      {
        case 'h':
          if (*(_DWORD *)(a1 + 452) != 2)
            return 0;
          goto LABEL_7;
        case 'j':
          if (*(_QWORD *)(a1 + 440) != 3
            || ((v19 = *(unsigned __int16 **)(a1 + 432), v20 = *v19, v21 = *((unsigned __int8 *)v19 + 2), v20 == 21558)
              ? (v22 = v21 == 50)
              : (v22 = 0),
                !v22))
          {
            if (*(_DWORD *)(a1 + 464) < 7u)
              return 0;
          }
          *(_DWORD *)a3 |= 0x10u;
          v8 = 0xFFFF00000000;
          goto LABEL_46;
        case 'l':
          goto LABEL_7;
        case 's':
          return result;
        case 't':
        case 'w':
        case 'x':
          if ((*(_BYTE *)(a1 + 470) & 0x10) != 0)
            return 0;
LABEL_7:
          *(_DWORD *)a3 |= 2u;
          break;
        default:
          return 0;
      }
      return result;
  }
}

void *sub_22F43AE94()
{
  return &unk_22F61DA77;
}

uint64_t sub_22F43AEA0(uint64_t a1, int a2)
{
  if ((a2 - 9) > 6)
    return 1;
  else
    return dword_22F54A5E8[a2 - 9];
}

uint64_t sub_22F43AEC4(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 1;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 0;
}

uint64_t sub_22F43AED8()
{
  return 1;
}

uint64_t sub_22F43AEE0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;

  v9 = "__ARMEL__";
  v10 = 259;
  v7 = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)&v9, (llvm::Twine *)&v7);
  return sub_22F4398EC(a1, a2, a3);
}

uint64_t sub_22F43AF58(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__ARMEB__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ARM_BIG_ENDIAN";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  return sub_22F4398EC(a1, a2, a3);
}

uint64_t sub_22F43B000()
{
  return 0;
}

uint64_t sub_22F43B008(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x11)
    return 1;
  else
    return dword_22F54A604[a2];
}

uint64_t sub_22F43B028(uint64_t a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  uint64_t result;

  result = sub_22F42C7C8(a1, (uint64_t)a2, a3);
  if ((*a2 & 0x10) != 0)
    return sub_22F1F6040(a1, a3);
  return result;
}

uint64_t sub_22F43B078(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F42C7C8(a1, a2, a3);
  return sub_22F1F6040(a1, a3);
}

uint64_t sub_22F43B0A4(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;

  sub_22F42C7C8(a1, a2, a3);
  v7 = "_ARM_";
  v8 = 259;
  v5 = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v7, (llvm::Twine *)&v5);
}

uint64_t sub_22F43B100(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_22F1F3D08(a1, (uint64_t *)&off_24FC1D6C0, a2, a3);
  *(_QWORD *)v4 = &off_24FC1D320;
  *(_DWORD *)(v4 + 608) = 4;
  *(_BYTE *)(v4 + 81) = 0;
  *(_BYTE *)(v4 + 503) = 64;
  *(_BYTE *)(v4 + 493) = 64;
  sub_22F1E6F0C(v4, "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64", 0x33uLL, (uint64_t)&unk_22F61DA77);
  return a1;
}

uint64_t sub_22F43B170(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__ARMEL__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  sub_22F4398EC(a1, a2, a3);
  v9[0] = "_ARM_";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__CYGWIN__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__CYGWIN32__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  result = sub_22F425880(a3, (uint64_t)"unix", 4, a2);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v9[0] = "_GNU_SOURCE";
    v10 = 259;
    v7[0] = "1";
    v8 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  }
  return result;
}

uint64_t sub_22F43B2B0(uint64_t a1, llvm::Triple *a2, const std::string *a3)
{
  uint64_t result;
  int v5;

  result = sub_22F1F617C(a1, &off_24FC1DA88, a2, a3);
  *(_QWORD *)result = off_24FC1D6E8;
  *(_DWORD *)(result + 288) |= 1u;
  *(_BYTE *)(result + 95) = 64;
  if (*((_DWORD *)a2 + 7) == 22)
  {
    *(_BYTE *)(result + 664) &= ~1u;
    v5 = 4;
  }
  else
  {
    v5 = 2;
  }
  *(_DWORD *)(result + 148) = v5;
  return result;
}

double sub_22F43B328(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  return sub_22F1FB794(a4, a2, a3, (uint64_t)&unk_22F61DA77, 0, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F43B36C(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__RENDERSCRIPT__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__ARMEL__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  return sub_22F4398EC(a1, a2, a3);
}

uint64_t sub_22F43B414(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FC27140);
}

void sub_22F43B420(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FC27140);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F43B44C(uint64_t a1, uint64_t a2, llvm::Triple *a3, llvm::raw_ostream **a4)
{
  sub_22F43CF94(a3, a2, a4);
}

uint64_t sub_22F43B458(uint64_t a1)
{
  return sub_22F1EEBE4(a1, &off_24FC1D6C0);
}

void sub_22F43B464(uint64_t a1)
{
  sub_22F1EEBE4(a1, &off_24FC1D6C0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43B490(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 64)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 9;
  return 10;
}

uint64_t sub_22F43B4AC(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 68);
  result = 64;
  if (v2 > 27)
  {
    switch(v2)
    {
      case 28:
        goto LABEL_8;
      case 29:
        v4 = 5;
        goto LABEL_9;
      case 30:
        v4 = 3;
        goto LABEL_9;
      case 31:
      case 33:
        v7 = 0;
        v8 = 0;
        goto LABEL_10;
      default:
        return result;
    }
    return result;
  }
  if (v2 == 3)
    goto LABEL_7;
  if (v2 != 7)
  {
    if (v2 != 11)
      return result;
LABEL_7:
    v4 = 0x8000000E0000000ALL;
    goto LABEL_9;
  }
LABEL_8:
  v4 = 12;
LABEL_9:
  v7 = v4;
  v8 = 0;
LABEL_10:
  v6[0] = llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 32));
  v6[1] = v5;
  if ((sub_22E3B38EC(v6, &v7) & 1) != 0)
    return 64;
  else
    return *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
}

uint64_t sub_22F43B580()
{
  return 0;
}

const char *sub_22F43B588()
{
  return "__TEXT,__StaticInit,regular,pure_instructions";
}

double sub_22F43B594(uint64_t a1, uint64_t a2, unsigned int *a3, llvm::raw_ostream **a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a1 + 503);
  if (v5 >= 0)
    v6 = a1 + 480;
  else
    v6 = *(_QWORD *)(a1 + 480);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(a1 + 488);
  return sub_22F1FB794(a4, a2, a3, v6, v7, (const char **)(a1 + 224), (_OWORD *)(a1 + 240), (_QWORD *)(a1 + 256), (uint64_t *)(a1 + 272));
}

uint64_t sub_22F43B5EC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  char v10;
  int v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v14[0] = "AVR";
  v15 = 259;
  v12[0] = "1";
  v13 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
  v14[0] = "__AVR";
  v15 = 259;
  v12[0] = "1";
  v13 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
  v14[0] = "__AVR__";
  v15 = 259;
  v12[0] = "1";
  v13 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
  v14[0] = "__ELF__";
  v15 = 259;
  v12[0] = "1";
  v13 = 259;
  result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
  if (*(char *)(a1 + 391) < 0)
    v6 = *(_QWORD *)(a1 + 376);
  else
    v6 = *(unsigned __int8 *)(a1 + 391);
  if (v6)
  {
    v7 = (_QWORD *)(a1 + 368);
    v8 = 0x1FFFFFFFFFFFFC85uLL;
    while (1)
    {
      result = sub_22F1F6E24(off_24FC29368[v8 + 891], v7);
      if ((result & 1) != 0)
        break;
      v8 += 3;
      if (!(v8 * 8))
        return result;
    }
    v9 = off_24FC29368[v8 + 892];
    v10 = 1;
    HIBYTE(v15) = 1;
    if (*v9)
    {
      v14[0] = v9;
      v10 = 3;
    }
    LOBYTE(v15) = v10;
    v12[0] = "1";
    v13 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
    v11 = (int)off_24FC29368[v8 + 893];
    if (v11 >= 1)
    {
      v14[0] = "__flash";
      v15 = 259;
      v12[0] = "__attribute__((address_space(1)))";
      v13 = 259;
      result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
      if (v11 != 1)
      {
        v14[0] = "__flash1";
        v15 = 259;
        v12[0] = "__attribute__((address_space(2)))";
        v13 = 259;
        result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
        if (v11 >= 3)
        {
          v14[0] = "__flash2";
          v15 = 259;
          v12[0] = "__attribute__((address_space(3)))";
          v13 = 259;
          result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
          if (v11 != 3)
          {
            v14[0] = "__flash3";
            v15 = 259;
            v12[0] = "__attribute__((address_space(4)))";
            v13 = 259;
            result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
            if (v11 >= 5)
            {
              v14[0] = "__flash4";
              v15 = 259;
              v12[0] = "__attribute__((address_space(5)))";
              v13 = 259;
              result = sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
              if (v11 != 5)
              {
                v14[0] = "__flash5";
                v15 = 259;
                v12[0] = "__attribute__((address_space(6)))";
                v13 = 259;
                return sub_22E7333BC(a3, (llvm::Twine *)v14, (llvm::Twine *)v12);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F43B8B0(_QWORD *a1, int a2, int a3)
{
  if (a2 != 16)
    return sub_22F4248FC(a1, a2, a3);
  if (a3)
    return 5;
  return 6;
}

uint64_t sub_22F43B8CC(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 != 16)
    return sub_22F1E72C0(a1, a2, a3);
  if (a3)
    return 5;
  return 6;
}

uint64_t sub_22F43B8E8()
{
  return 0;
}

uint64_t sub_22F43B8F4()
{
  return 1;
}

uint64_t sub_22F43B8FC(uint64_t a1, const char **a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*a2 && strlen(*a2) > 1)
    return 0;
  v5 = 0;
  switch(*v4)
  {
    case 'G':
    case 'Q':
      goto LABEL_6;
    case 'I':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0x3F00000000;
      goto LABEL_21;
    case 'J':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 4294967233;
      goto LABEL_21;
    case 'K':
      v8 = 2;
      goto LABEL_14;
    case 'L':
      LODWORD(v12) = 0;
      goto LABEL_15;
    case 'M':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0xFF00000000;
      goto LABEL_21;
    case 'N':
      v8 = -1;
LABEL_14:
      LODWORD(v12) = v8;
LABEL_15:
      *(_DWORD *)a3 |= 0x10u;
      sub_22F1F6EC0(a3 + 24, (int *)&v12);
      goto LABEL_6;
    case 'O':
      v9 = 0;
      v12 = 0x1000000008;
      v13 = 24;
      *(_DWORD *)a3 |= 0x10u;
      v10 = a3 + 24;
      do
      {
        v11 = *(_DWORD *)((char *)&v12 + v9);
        sub_22F1F6EC0(v10, &v11);
        v9 += 4;
      }
      while (v9 != 12);
      goto LABEL_6;
    case 'P':
      v5 = 1;
      LODWORD(v12) = 1;
      *(_DWORD *)a3 |= 0x10u;
      sub_22F1F6EC0(a3 + 24, (int *)&v12);
      return v5;
    case 'R':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0x5FFFFFFFALL;
LABEL_21:
      *(_QWORD *)(a3 + 8) = v7;
      v5 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return v5;
    case 'X':
    case 'Y':
    case 'Z':
    case 'a':
    case 'b':
    case 'd':
    case 'e':
    case 'l':
    case 'q':
    case 'r':
    case 't':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
      *(_DWORD *)a3 |= 2u;
LABEL_6:
      v5 = 1;
      break;
    default:
      return v5;
  }
  return v5;
}

const char *sub_22F43BAC0()
{
  return "";
}

uint64_t sub_22F43BACC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 392);
}

char **sub_22F43BAD8()
{
  return off_24FC2B7C0;
}

uint64_t sub_22F43BAE8()
{
  return 0;
}

char **sub_22F43BAF4()
{
  return off_24FC2B8B0;
}

uint64_t sub_22F43BB04(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = "__bpf__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__BPF__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

BOOL sub_22F43BB8C(int a1, void *__s2, size_t __n)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = 0;
  v6 = (_QWORD *)&xmmword_24FC2C190 + 1;
  do
  {
    if (*v6 == __n && (!__n || !memcmp((const void *)*(v6 - 1), __s2, __n)))
      break;
    v6 += 2;
    ++v5;
  }
  while (v5 != 5);
  return v5 != 5;
}

char **sub_22F43BBFC()
{
  return off_24FC2B970;
}

uint64_t sub_22F43BC0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    do
    {
      if (sub_22F1ED4D8(v2, "+alu32"))
        *(_BYTE *)(a1 + 361) = 1;
      v2 += 3;
    }
    while (v2 != v3);
  }
  return 1;
}

uint64_t sub_22F43BC74(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC2BDE0);
}

void sub_22F43BC80(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC2BDE0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43BCAC()
{
  return 1;
}

uint64_t sub_22F43BCB4()
{
  return 1;
}

uint64_t sub_22F43BCBC(uint64_t a1, _BYTE **a2, _DWORD *a3)
{
  if (**a2 == 119 && *(_BYTE *)(a1 + 361))
    *a3 |= 2u;
  return 1;
}

const char *sub_22F43BCE8()
{
  return "";
}

uint64_t sub_22F43BCF4(_BYTE *a1, uint64_t *a2)
{
  char v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_22F1ED4D8(a2, "v3"))
    a1[361] = 1;
  v4 = *((_BYTE *)a2 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = a2[1];
  else
    v8 = v7;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 480))(a1, v6, v8);
}

uint64_t *sub_22F43BD58(uint64_t a1, llvm::StringMapImpl *a2, const void *a3, size_t a4, char a5)
{
  uint64_t *result;

  result = sub_22E80ABE0(a2, a3, a4);
  *(_BYTE *)(*result + 8) = a5;
  return result;
}

BOOL sub_22F43BD8C(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  int v5;

  switch(a3)
  {
    case 8:
      return *(_QWORD *)a2 == 0x7369726672617764;
    case 5:
      v3 = *((unsigned __int8 *)a2 + 4);
      v4 = *(_DWORD *)a2 == 863333473;
      v5 = 50;
      break;
    case 3:
      v3 = *((unsigned __int8 *)a2 + 2);
      v4 = *a2 == 28770;
      v5 = 102;
      break;
    default:
      return 0;
  }
  return v4 && v3 == v5;
}

BOOL sub_22F43BE0C(uint64_t a1, int a2)
{
  BOOL v2;

  if (a2)
    v2 = a2 == 13;
  else
    v2 = 1;
  return !v2;
}

uint64_t sub_22F43BE1C()
{
  return 1;
}

uint64_t sub_22F43BE24()
{
  return 0;
}

uint64_t sub_22F43BE30()
{
  return 0;
}

BOOL sub_22F43BE3C()
{
  return llvm::CSKY::parseCPUArch() != 0;
}

BOOL sub_22F43BE60(uint64_t a1, const std::string *a2)
{
  int v4;

  v4 = llvm::CSKY::parseCPUArch();
  if (v4)
  {
    std::string::operator=((std::string *)(a1 + 400), a2);
    *(_DWORD *)(a1 + 392) = v4;
  }
  return v4 != 0;
}

uint64_t sub_22F43BEC8(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BYTE *v5;

  a1[428] = 0;
  *((_DWORD *)a1 + 106) = 0;
  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    v5 = a1 + 424;
    do
    {
      if (sub_22F1ED4D8(v2, "+hard-float"))
        *v5 = 1;
      if (sub_22F1ED4D8(v2, "+vdspv2"))
        a1[425] = 1;
      if (sub_22F1ED4D8(v2, "+dspv2"))
        a1[427] = 1;
      if (sub_22F1ED4D8(v2, "+vdspv1"))
        a1[426] = 1;
      if (sub_22F1ED4D8(v2, "+3e3r1"))
        a1[428] = 1;
      v2 += 3;
    }
    while (v2 != v3);
  }
  return 1;
}

uint64_t sub_22F43BFBC()
{
  return 0;
}

char **sub_22F43BFC8()
{
  return off_24FC2C1E0;
}

char **sub_22F43BFD8()
{
  return &off_24FC2C3E0;
}

uint64_t sub_22F43BFE8(uint64_t a1, char **a2, _DWORD *a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  v3 = **a2 - 97;
  v4 = v3 > 0x19;
  v5 = (1 << v3) & 0x3600887;
  if (v4 || v5 == 0)
    return 0;
  *a3 |= 2u;
  return 1;
}

uint64_t sub_22F43C030(uint64_t a1, unint64_t a2)
{
  return 32 * (a2 > 0x1F);
}

uint64_t sub_22F43C040(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  return sub_22F425880(a3, (uint64_t)"DIRECTX", 7, a2);
}

uint64_t sub_22F43C058(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC2DAF0);
}

void sub_22F43C064(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC2DAF0);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43C090()
{
  return 0;
}

uint64_t sub_22F43C09C()
{
  return 1;
}

uint64_t sub_22F43C0A4()
{
  return 1;
}

const char *sub_22F43C0AC()
{
  return "";
}

BOOL sub_22F43C0B8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a3 != 7)
    return 0;
  return *a2 == 1701996900 && *(_DWORD *)((char *)a2 + 3) == 2020893541;
}

uint64_t sub_22F43C0F0()
{
  return 0;
}

uint64_t sub_22F43C0FC()
{
  return 0;
}

char **sub_22F43C108()
{
  return off_24FC2DEA0;
}

char **sub_22F43C118()
{
  return &off_24FC2E460;
}

char *sub_22F43C128(void *__s2, char *__n)
{
  char **i;
  char **v5;

  for (i = &off_24FC45100; ; i += 4)
  {
    v5 = i - 2;
    if (*(i - 1) == __n && (!__n || !memcmp(*(i - 2), __s2, (size_t)__n)))
      break;
    if (v5 + 4 == off_24FC45230)
      return 0;
  }
  return *i;
}

char **sub_22F43C1A8()
{
  return off_24FC2E4F0;
}

char **sub_22F43C1B8()
{
  return off_24FC45230;
}

char **sub_22F43C1C8()
{
  return &off_24FC45330;
}

BOOL sub_22F43C1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
    return 0;
  return *(_WORD *)a2 == 12662 && *(_BYTE *)(a2 + 2) == 49;
}

uint64_t sub_22F43C208(uint64_t a1, uint64_t a2)
{
  return sub_22F43C210(a2);
}

uint64_t sub_22F43C210(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F1F897C(a1);
  v2 = (_QWORD *)(*(_QWORD *)a1 + 16 * v1);
  *v2 = "v11";
  v2[1] = 3;
  *(_DWORD *)(a1 + 8) = v1 + 1;
  return a1;
}

BOOL sub_22F43C244(uint64_t a1, unsigned __int16 *a2)
{
  char v2;
  int v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  _BOOL8 v9;

  v2 = *((_BYTE *)a2 + 23);
  v3 = v2;
  v4 = v2 & 0x7F;
  if (v3 < 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v4 == 3)
  {
    if (v3 >= 0)
      v5 = a2;
    else
      v5 = *(unsigned __int16 **)a2;
    v6 = *v5;
    v7 = *((unsigned __int8 *)v5 + 2);
    v9 = v6 == 12662 && v7 == 49;
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a1 + 364) = v9;
  return v9;
}

BOOL sub_22F43C2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 5)
    return 0;
  return *(_DWORD *)a2 == 1634623852 && *(_BYTE *)(a2 + 4) == 105;
}

uint64_t sub_22F43C2D4(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v8[0] = "__lanai__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  if (*(_DWORD *)(a1 + 364) == 1)
  {
    v8[0] = "__LANAI_V11__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  return result;
}

uint64_t sub_22F43C36C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC45830);
}

void sub_22F43C378(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC45830);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43C3A4()
{
  return 1;
}

uint64_t sub_22F43C3AC()
{
  return 0;
}

uint64_t sub_22F43C3B8()
{
  return 1;
}

uint64_t sub_22F43C3C0()
{
  return 0;
}

const char *sub_22F43C3C8()
{
  return "";
}

uint64_t sub_22F43C3D4()
{
  return 0;
}

uint64_t sub_22F43C3E0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;

  sub_22F425880(a3, (uint64_t)"unix", 4, a2);
  sub_22F42596C(a3, (uint64_t)"le64", 4, 0);
  v7 = "__ELF__";
  v8 = 259;
  v5 = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)&v7, (llvm::Twine *)&v5);
}

uint64_t sub_22F43C468(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC45F90);
}

void sub_22F43C474(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC45F90);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43C4A0()
{
  return 3;
}

uint64_t sub_22F43C4A8()
{
  return 0;
}

const char *sub_22F43C4B0()
{
  return "";
}

uint64_t sub_22F43C4BC()
{
  return 0;
}

uint64_t sub_22F43C4C4()
{
  return 0;
}

uint64_t sub_22F43C4D0()
{
  return 0;
}

uint64_t sub_22F43C4DC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  const char *v6;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v9[0] = "__m68k__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "mc68000";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__mc68000";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  v9[0] = "__mc68000__";
  v10 = 259;
  v7[0] = "1";
  v8 = 259;
  result = sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
  switch(*(_DWORD *)(a1 + 364))
  {
    case 2:
      v9[0] = "mc68010";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v9[0] = "__mc68010";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v6 = "__mc68010__";
      goto LABEL_7;
    case 3:
      v9[0] = "mc68020";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v9[0] = "__mc68020";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v6 = "__mc68020__";
      goto LABEL_7;
    case 4:
      v9[0] = "mc68030";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v9[0] = "__mc68030";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v6 = "__mc68030__";
      goto LABEL_7;
    case 5:
      v9[0] = "mc68040";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v9[0] = "__mc68040";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v6 = "__mc68040__";
      goto LABEL_7;
    case 6:
      v9[0] = "mc68060";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v9[0] = "__mc68060";
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      v6 = "__mc68060__";
LABEL_7:
      v9[0] = v6;
      v10 = 259;
      v7[0] = "1";
      v8 = 259;
      result = sub_22E7333BC(a3, (llvm::Twine *)v9, (llvm::Twine *)v7);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F43C7DC()
{
  return 0;
}

BOOL sub_22F43C7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 6)
    return 0;
  return *(_DWORD *)a2 == 808990285 && *(_WORD *)(a2 + 4) == 12336;
}

char **sub_22F43C81C()
{
  return off_24FC466F8;
}

uint64_t sub_22F43C82C()
{
  return 0;
}

uint64_t sub_22F43C838(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t result;
  _BYTE *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;

  result = 0;
  v4 = *a2;
  v5 = **a2;
  switch(**a2)
  {
    case 'C':
      *a2 = v4 + 1;
      v8 = (char)v4[1];
      if ((v8 - 105) < 2)
        goto LABEL_2;
      if (v8 == 48)
      {
        v12 = 0;
        *(_DWORD *)a3 |= 0x10u;
        v9 = a3 + 24;
        v10 = &v12;
        goto LABEL_17;
      }
      return 0;
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
      return result;
    case 'I':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0x800000001;
      goto LABEL_19;
    case 'J':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0x7FFFFFFF8000;
      goto LABEL_19;
    case 'K':
    case 'M':
LABEL_2:
      v6 = *(_DWORD *)a3 | 0x10;
      goto LABEL_3;
    case 'L':
      *(_DWORD *)a3 |= 0x10u;
      v7 = -8;
      goto LABEL_19;
    case 'N':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0x1F00000018;
      goto LABEL_19;
    case 'O':
      v11 = 16;
      *(_DWORD *)a3 |= 0x10u;
      v9 = a3 + 24;
      v10 = &v11;
LABEL_17:
      sub_22F1F6EC0(v9, v10);
      goto LABEL_4;
    case 'P':
      *(_DWORD *)a3 |= 0x10u;
      v7 = 0xF00000008;
LABEL_19:
      *(_QWORD *)(a3 + 8) = v7;
      result = 1;
      *(_BYTE *)(a3 + 16) = 1;
      break;
    default:
      if (v5 == 100 || v5 == 97)
      {
        v6 = *(_DWORD *)a3 | 2;
LABEL_3:
        *(_DWORD *)a3 = v6;
LABEL_4:
        result = 1;
      }
      break;
  }
  return result;
}

void *sub_22F43C994()
{
  return &unk_22F648AA5;
}

uint64_t sub_22F43C9A0()
{
  return 1;
}

char **sub_22F43C9A8()
{
  return off_24FC46B28;
}

uint64_t sub_22F43C9B8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = "MSP430";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__MSP430__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__ELF__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

uint64_t sub_22F43CA68(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC46F58);
}

void sub_22F43CA74(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC46F58);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43CAA0()
{
  return 0;
}

uint64_t sub_22F43CAAC()
{
  return 0;
}

BOOL sub_22F43CAB4(uint64_t a1, char **a2)
{
  return (**a2 - 75) < 3;
}

const char *sub_22F43CACC()
{
  return "";
}

BOOL sub_22F43CAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 6)
    return 0;
  return *(_DWORD *)a2 == 879784813 && *(_WORD *)(a2 + 4) == 12339;
}

uint64_t sub_22F43CB0C()
{
  return 0;
}

char **sub_22F43CB14()
{
  return &off_24FC47308;
}

BOOL sub_22F43CB24(int a1, void *__s2, size_t __n)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = 0;
  v6 = &qword_24FC4F4E8;
  do
  {
    if (*v6 == __n && (!__n || !memcmp((const void *)*(v6 - 1), __s2, __n)))
      break;
    v6 += 2;
    ++v5;
  }
  while (v5 != 18);
  return v5 != 18;
}

char **sub_22F43CB94()
{
  return off_24FC473C8;
}

char **sub_22F43CBA4()
{
  return &off_24FC576C8;
}

char **sub_22F43CBB4()
{
  return off_24FC4F9B8;
}

uint64_t sub_22F43CBC4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24FC576E8;
  v2 = a1[47];
  a1[47] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_22F1E6E70((uint64_t)a1, &off_24FC57A80);
}

void sub_22F43CC10(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24FC576E8;
  v2 = a1[47];
  a1[47] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_22F1E6E70((uint64_t)a1, &off_24FC57A80);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43CC70()
{
  return 1;
}

uint64_t sub_22F43CC78()
{
  return 0;
}

uint64_t sub_22F43CC80(uint64_t a1, char **a2, _DWORD *a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  v3 = **a2 - 99;
  v4 = v3 > 0xF;
  v5 = (1 << v3) & 0x822B;
  if (v4 || v5 == 0)
    return 0;
  *a3 |= 2u;
  return 1;
}

const char *sub_22F43CCC4()
{
  return "";
}

BOOL sub_22F43CCD0(uint64_t a1, const void **a2)
{
  char v3;
  BOOL v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;

  v3 = *((_BYTE *)a2 + 23);
  v4 = v3 < 0;
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  v6 = v3 & 0x7F;
  if (v4)
    v7 = (size_t)a2[1];
  else
    v7 = v6;
  v8 = sub_22F419728(v5, v7);
  *(_DWORD *)(a1 + 364) = v8;
  return v8 != 1;
}

uint64_t sub_22F43CD18(uint64_t a1, uint64_t a2)
{
  int i;
  uint64_t v4;
  const char *v5;
  uint64_t result;
  const char *v7;

  for (i = 2; i != 53; ++i)
  {
    v4 = 0;
    while (dword_24FAE07C0[v4] != i)
    {
      v4 += 6;
      if (v4 == 318)
      {
        v5 = "unknown";
        goto LABEL_7;
      }
    }
    v5 = *(const char **)&dword_24FAE07C0[v4 + 2];
LABEL_7:
    v7 = v5;
    result = sub_22F2E0710(a2, &v7);
  }
  return result;
}

BOOL sub_22F43CDA0(uint64_t a1, const void *a2, size_t a3)
{
  return sub_22F419728(a2, a3) != 1;
}

void *sub_22F43CDC4()
{
  return &unk_22F54A770;
}

uint64_t sub_22F43CDD0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 376);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 728))(v1);
  else
    return 1;
}

uint64_t *sub_22F43CDEC(uint64_t a1)
{
  llvm::StringMapImpl *v1;
  uint64_t *result;

  v1 = (llvm::StringMapImpl *)(*(_QWORD *)(a1 + 16) + 256);
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_clang_storage_class_specifiers", 0x21uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "__cl_clang_function_pointers", 0x1CuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "__cl_clang_variadic_functions", 0x1DuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "__cl_clang_non_portable_kernel_param_types", 0x2AuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "__cl_clang_bitfields", 0x14uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_fp64", 0xBuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "__opencl_c_fp64", 0xFuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_byte_addressable_store", 0x1DuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_global_int32_base_atomics", 0x20uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_global_int32_extended_atomics", 0x24uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(v1, "cl_khr_local_int32_base_atomics", 0x1FuLL) + 8) = 1;
  result = sub_22E80ABE0(v1, "cl_khr_local_int32_extended_atomics", 0x23uLL);
  *(_BYTE *)(*result + 8) = 1;
  return result;
}

uint64_t sub_22F43CF60(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 4 && (a2 & 0xFFFFFFFD) != 0)
    return dword_22F54A788[a2] | 0x100000000;
  return result;
}

uint64_t sub_22F43CF88()
{
  return 0;
}

void sub_22F43CF94(llvm::Triple *a1, uint64_t a2, llvm::raw_ostream **a3)
{
  int v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v18[0] = "_WIN32";
  v19 = 259;
  v16[0] = "1";
  v17 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
  if (llvm::Triple::isArch64Bit(a1))
  {
    v18[0] = "_WIN64";
    v19 = 259;
    v16[0] = "1";
    v17 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
  }
  v7 = *((_DWORD *)a1 + 9);
  v6 = *((_DWORD *)a1 + 10);
  if (v7 != 15 || v6 != 1)
  {
    if (v7 == 15 && v6 == 16)
    {
      v9 = *(_QWORD *)a2;
    }
    else
    {
      if (v7 != 15)
        return;
      if (v6 != 17)
        return;
      v9 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x10) == 0)
        return;
    }
    if ((v9 & 0x100) != 0)
    {
      v15 = *(_QWORD *)(a2 + 8);
      if ((v15 & 0x10000000000000) != 0)
      {
        v18[0] = "_CPPRTTI";
        v19 = 259;
        v16[0] = "1";
        v17 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
        v15 = *(_QWORD *)(a2 + 8);
      }
      if ((v15 & 0x400000000000) != 0)
      {
        v18[0] = "_CPPUNWIND";
        v19 = 259;
        v16[0] = "1";
        v17 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
      }
    }
    if ((*(_BYTE *)(a2 + 2) & 0x80) != 0)
    {
      v18[0] = "__BOOL_DEFINED";
      v19 = 259;
      v16[0] = "1";
      v17 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    }
    if ((*(_DWORD *)(a2 + 52) & 0x800000) == 0)
    {
      v18[0] = "_CHAR_UNSIGNED";
      v19 = 259;
      v16[0] = "1";
      v17 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    }
    if ((*(_QWORD *)(a2 + 20) & 0x10000000000) != 0)
    {
      v18[0] = "_MT";
      v19 = 259;
      v16[0] = "1";
      v17 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    }
    v10 = *(_DWORD *)(a2 + 192);
    if (!v10)
      goto LABEL_41;
    v18[0] = "_MSC_VER";
    v19 = 259;
    v17 = 264;
    LODWORD(v16[0]) = v10 / 0x186A0;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    v18[0] = "_MSC_FULL_VER";
    v19 = 259;
    v11 = *(_DWORD *)(a2 + 192);
    v17 = 264;
    LODWORD(v16[0]) = v11;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    v18[0] = "_MSC_BUILD";
    v19 = 259;
    v17 = 265;
    LODWORD(v16[0]) = 1;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    v12 = *(_DWORD *)(a2 + 192);
    if ((*(_BYTE *)(a2 + 1) & 2) != 0)
    {
      if (v12 <= 0xB532B7F)
        goto LABEL_41;
      v18[0] = "_HAS_CHAR16_T_LANGUAGE_SUPPORT";
      v19 = 259;
      v17 = 265;
      LODWORD(v16[0]) = 1;
      sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
      v12 = *(_DWORD *)(a2 + 192);
    }
    if (v12 > 0xB532B7F)
    {
      v13 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x2000) != 0)
      {
        v18[0] = "_MSVC_LANG";
        v19 = 259;
        v14 = "202004L";
        goto LABEL_40;
      }
      if ((v13 & 0x1000) != 0)
      {
        v18[0] = "_MSVC_LANG";
        v19 = 259;
        v14 = "202002L";
        goto LABEL_40;
      }
      if ((v13 & 0x800) != 0)
      {
        v18[0] = "_MSVC_LANG";
        v19 = 259;
        v14 = "201703L";
        goto LABEL_40;
      }
      if ((v13 & 0x400) != 0)
      {
        v18[0] = "_MSVC_LANG";
        v19 = 259;
        v14 = "201402L";
LABEL_40:
        v16[0] = v14;
        v17 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
      }
    }
LABEL_41:
    if ((*(_BYTE *)a2 & 0x20) != 0)
    {
      v18[0] = "_MSC_EXTENSIONS";
      v19 = 259;
      v16[0] = "1";
      v17 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
      if ((*(_BYTE *)(a2 + 1) & 2) != 0)
      {
        v18[0] = "_RVALUE_REFERENCES_V2_SUPPORTED";
        v19 = 259;
        v16[0] = "1";
        v17 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
        v18[0] = "_RVALUE_REFERENCES_SUPPORTED";
        v19 = 259;
        v16[0] = "1";
        v17 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
        v18[0] = "_NATIVE_NULLPTR_SUPPORTED";
        v19 = 259;
        v16[0] = "1";
        v17 = 259;
        sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
      }
    }
    v18[0] = "_INTEGRAL_MAX_BITS";
    v19 = 259;
    v16[0] = "64";
    v17 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    v18[0] = "__STDC_NO_THREADS__";
    v19 = 259;
    v16[0] = "1";
    v17 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    v18[0] = "_MSVC_EXECUTION_CHARACTER_SET";
    v19 = 259;
    v16[0] = "65001";
    v17 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
    return;
  }
  sub_22F425880(a3, (uint64_t)"WIN32", 5, a2);
  sub_22F425880(a3, (uint64_t)"WINNT", 5, a2);
  if (llvm::Triple::isArch64Bit(a1))
  {
    sub_22F425880(a3, (uint64_t)"WIN64", 5, a2);
    v18[0] = "__MINGW64__";
    v19 = 259;
    v16[0] = "1";
    v17 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
  }
  v18[0] = "__MSVCRT__";
  v19 = 259;
  v16[0] = "1";
  v17 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
  v18[0] = "__MINGW32__";
  v19 = 259;
  v16[0] = "1";
  v17 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v18, (llvm::Twine *)v16);
  sub_22F1E8630((_BYTE *)a2, a3);
}

uint64_t sub_22F43D554()
{
  return 0;
}

uint64_t sub_22F43D560()
{
  return 0;
}

uint64_t sub_22F43D56C(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = "__le32__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__pnacl__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

uint64_t sub_22F43D5F4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  *((_DWORD *)a1 + 98) = 0;
  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    v9 = (uint64_t)a1 + 14;
    v10 = (uint64_t)a1 + 15;
    v8 = a1 + 11;
    do
    {
      if (sub_22F1ED4D8(v2, "+altivec"))
      {
        *((_BYTE *)a1 + 396) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+vsx"))
      {
        *((_BYTE *)a1 + 400) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+bpermd"))
      {
        *((_BYTE *)a1 + 405) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+extdiv"))
      {
        *((_BYTE *)a1 + 406) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+power8-vector"))
      {
        *((_BYTE *)a1 + 401) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+crypto"))
      {
        *((_BYTE *)a1 + 402) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+direct-move"))
      {
        *((_BYTE *)a1 + 403) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+htm"))
      {
        *((_BYTE *)a1 + 404) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+float128"))
      {
        *((_BYTE *)a1 + 86) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+power9-vector"))
      {
        *((_BYTE *)a1 + 407) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+power10-vector"))
      {
        *((_BYTE *)a1 + 410) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+pcrelative-memops"))
      {
        *((_BYTE *)a1 + 411) = 1;
      }
      else if (sub_22F1ED4D8(v2, "+prefix-instrs"))
      {
        *((_BYTE *)a1 + 412) = 1;
      }
      else
      {
        v6 = sub_22F1ED4D8(v2, "+spe");
        if (v6 || (v6 = sub_22F1ED4D8(v2, "+efpu2")))
        {
          *((_BYTE *)a1 + 93) = 0;
          *((_BYTE *)a1 + 408) = 1;
          v7 = *a1;
          *(_BYTE *)(v10 + *(_QWORD *)(v7 - 24)) = 64;
          *(_BYTE *)(v9 + *(_QWORD *)(v7 - 24)) = 64;
          *(uint64_t *)((char *)v8 + *(_QWORD *)(v7 - 24)) = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)v6);
        }
        else if (sub_22F1ED4D8(v2, "-hard-float"))
        {
          *((_DWORD *)a1 + 98) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+paired-vector-memops"))
        {
          *((_BYTE *)a1 + 409) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+mma"))
        {
          *((_BYTE *)a1 + 397) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+rop-protect"))
        {
          *((_BYTE *)a1 + 398) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+privileged"))
        {
          *((_BYTE *)a1 + 399) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+isa-v206-instructions"))
        {
          *((_BYTE *)a1 + 413) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+isa-v207-instructions"))
        {
          *((_BYTE *)a1 + 414) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+isa-v30-instructions"))
        {
          *((_BYTE *)a1 + 415) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+isa-v31-instructions"))
        {
          *((_BYTE *)a1 + 416) = 1;
        }
        else if (sub_22F1ED4D8(v2, "+quadword-atomics"))
        {
          *((_BYTE *)a1 + 417) = 1;
        }
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return 1;
}

uint64_t *sub_22F43D974(llvm::StringMapImpl *a1)
{
  uint64_t *result;

  *(_BYTE *)(*sub_22E80ABE0(a1, "htm", 3uLL) + 8) = 0;
  *(_BYTE *)(*sub_22E80ABE0(a1, "paired-vector-memops", 0x14uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(a1, "mma", 3uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(a1, "power10-vector", 0xEuLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(a1, "pcrelative-memops", 0x11uLL) + 8) = 1;
  *(_BYTE *)(*sub_22E80ABE0(a1, "prefix-instrs", 0xDuLL) + 8) = 1;
  result = sub_22E80ABE0(a1, "isa-v31-instructions", 0x14uLL);
  *(_BYTE *)(*result + 8) = 1;
  return result;
}

char **sub_22F43DA54()
{
  return off_24FC604B8;
}

char **sub_22F43DA64()
{
  return &off_24FC60848;
}

char **sub_22F43DA74(uint64_t a1)
{
  if (sub_22F1ED4D8((_QWORD *)(a1 + 424), "elfv2"))
    return &off_24FC61478;
  else
    return 0;
}

BOOL sub_22F43DAAC(int a1, void *__s2, size_t __n)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = 0;
  v6 = &qword_24FC62080;
  do
  {
    if (*v6 == __n && (!__n || !memcmp((const void *)*(v6 - 1), __s2, __n)))
      break;
    v6 += 2;
    ++v5;
  }
  while (v5 != 53);
  return v5 != 53;
}

llvm::APFloatBase *sub_22F43DB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm::APFloatBase *v6;
  llvm::APFloatBase *v7;
  llvm::APFloatBase *result;

  if (*(_BYTE *)(a1 + 396))
    *(_QWORD *)(a3 + 8) |= 0x40000000000uLL;
  sub_22F1E73BC((_QWORD *)a1, a2, a3);
  v5 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v6 = *(llvm::APFloatBase **)(v5 + 88);
  result = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v7);
  if (v6 != result)
  {
    if ((*(_DWORD *)(a3 + 52) & 1) != 0)
      result = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(result);
    else
      result = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(result);
    *(_QWORD *)(v5 + 88) = result;
  }
  *(_QWORD *)a3 |= 0x8000000uLL;
  return result;
}

char **sub_22F43DBA4()
{
  return off_24FC58628;
}

char **sub_22F43DBB4()
{
  return off_24FC623C8;
}

char **sub_22F43DBC4()
{
  return &off_24FC626C8;
}

uint64_t sub_22F43DBD4(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  result = 0;
  v4 = (uint64_t)*a2;
  v5 = **a2;
  if (v5 <= 74)
  {
    if (v5 == 65)
    {
      v9 = *(_DWORD *)a3 | 1;
      goto LABEL_16;
    }
    if (v5 != 73)
    {
      if (v5 != 74)
        return result;
      v11 = 0;
      *(_DWORD *)a3 |= 0x10u;
      sub_22F1F6EC0(a3 + 24, &v11);
      return 1;
    }
    *(_DWORD *)a3 |= 0x10u;
    v10 = 0x7FFFFFFF800;
    goto LABEL_22;
  }
  if (v5 <= 101)
  {
    if (v5 != 75)
    {
      if (v5 != 83)
        return result;
      goto LABEL_15;
    }
    *(_DWORD *)a3 |= 0x10u;
    v10 = 0x1F00000000;
LABEL_22:
    *(_QWORD *)(a3 + 8) = v10;
    result = 1;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if (v5 == 102)
  {
LABEL_15:
    v9 = *(_DWORD *)a3 | 2;
LABEL_16:
    *(_DWORD *)a3 = v9;
    return 1;
  }
  if (v5 != 118)
    return result;
  v8 = *(unsigned __int8 *)(v4 + 1);
  v6 = (char *)(v4 + 1);
  v7 = v8;
  if (v8 != 114 && v7 != 109)
    return 0;
  *(_DWORD *)a3 |= 2u;
  *a2 = v6;
  return 1;
}

char **sub_22F43DCEC()
{
  return &off_24FC632C8;
}

uint64_t sub_22F43DCFC()
{
  llvm::RISCV::parseCPUKind();
  return llvm::RISCV::checkCPUKind();
}

uint64_t sub_22F43DD1C()
{
  return llvm::RISCV::fillValidCPUArchList();
}

uint64_t sub_22F43DD28()
{
  llvm::RISCV::parseTuneCPUKind();
  return llvm::RISCV::checkTuneCPUKind();
}

uint64_t sub_22F43DD4C()
{
  return llvm::RISCV::fillValidTuneCPUArchList();
}

uint64_t sub_22F43DD58()
{
  llvm::RISCV::parseCPUKind();
  return llvm::RISCV::checkCPUKind();
}

uint64_t sub_22F43DD78()
{
  return llvm::RISCV::fillValidCPUArchList();
}

uint64_t sub_22F43DD84()
{
  llvm::RISCV::parseTuneCPUKind();
  return llvm::RISCV::checkTuneCPUKind();
}

uint64_t sub_22F43DDA8()
{
  return llvm::RISCV::fillValidTuneCPUArchList();
}

uint64_t sub_22F43DDB4(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  return sub_22F425880(a3, (uint64_t)"SPIR", 4, a2);
}

uint64_t sub_22F43DDCC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F425880(a3, (uint64_t)"SPIR", 4, a2);
  return sub_22F425880(a3, (uint64_t)"SPIR32", 6, a2);
}

uint64_t sub_22F43DE18(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F425880(a3, (uint64_t)"SPIR", 4, a2);
  return sub_22F425880(a3, (uint64_t)"SPIR64", 6, a2);
}

uint64_t sub_22F43DE64(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  return sub_22F425880(a3, (uint64_t)"SPIRV", 5, a2);
}

uint64_t sub_22F43DE7C(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F425880(a3, (uint64_t)"SPIRV", 5, a2);
  return sub_22F425880(a3, (uint64_t)"SPIRV32", 7, a2);
}

uint64_t sub_22F43DEC8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F425880(a3, (uint64_t)"SPIRV", 5, a2);
  return sub_22F425880(a3, (uint64_t)"SPIRV64", 7, a2);
}

uint64_t sub_22F43DF1C()
{
  return 0;
}

uint64_t sub_22F43DF24()
{
  return 1;
}

uint64_t sub_22F43DF2C()
{
  return 0;
}

uint64_t sub_22F43DF34()
{
  return 0;
}

uint64_t sub_22F43DF40()
{
  return 1;
}

uint64_t sub_22F43DF48()
{
  return 1;
}

const char *sub_22F43DF50()
{
  return "";
}

void sub_22F43DF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  sub_22F1E73BC((_QWORD *)a1, a2, a3);
  v5 = &unk_22F54A800;
  if ((*(_BYTE *)(a3 + 104) & 4) == 0)
  {
    v5 = &unk_22F54A86C;
    if ((*(_DWORD *)(a1 + 56) & 0xFFFFFFFE) == 0x3A && (*(_WORD *)(a3 + 96) & 0x80) != 0)
      v5 = &unk_22F54A800;
  }
  *(_QWORD *)(a1 + 152) = v5;
}

uint64_t sub_22F43DFBC()
{
  return 12;
}

BOOL sub_22F43DFC4(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFE) != 12;
}

uint64_t sub_22F43DFD4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 792))(a1, 1);
}

uint64_t sub_22F43DFE4(uint64_t a1, unsigned int a2)
{
  return a2 | 0x100000000;
}

uint64_t sub_22F43DFF0()
{
  return 0;
}

uint64_t sub_22F43DFFC()
{
  return 0;
}

uint64_t sub_22F43E008(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC738F0);
}

void sub_22F43E014(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC738F0);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F43E040(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  return a3 == 4 && *a2 == 1919512691;
}

uint64_t sub_22F43E068(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC74408);
}

void sub_22F43E074(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC74408);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43E0A0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC752C8);
}

void sub_22F43E0AC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC752C8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43E0D8(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC76180);
}

void sub_22F43E0E4(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC76180);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F43E110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 5)
    return 0;
  return *(_DWORD *)a2 == 1919512691 && *(_BYTE *)(a2 + 4) == 118;
}

uint64_t sub_22F43E144(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC76C98);
}

void sub_22F43E150(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC76C98);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43E17C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC77B58);
}

void sub_22F43E188(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC77B58);
  JUMPOUT(0x2348A0E9CLL);
}

char **sub_22F43E1B4()
{
  return off_24FC78658;
}

char **sub_22F43E1C4()
{
  return &off_24FC788D8;
}

uint64_t sub_22F43E1D4(uint64_t a1, int a2)
{
  uint64_t v2;
  char **v3;

  if (!a2)
    return 0;
  v2 = 0;
  v3 = off_24FC7AFE8;
  while (*(_DWORD *)((char *)&xmmword_24FC7AC58 + v2 + 16) != a2)
  {
    v2 += 24;
    if (v2 == 912)
      return *((unsigned int *)v3 + 5);
  }
  v3 = (char **)((char *)&xmmword_24FC7AC58 + v2);
  return *((unsigned int *)v3 + 5);
}

uint64_t sub_22F43E220(int a1, void *__s2, size_t __n)
{
  int *i;
  int *v6;

  for (i = &dword_24FC7AC68; ; i += 6)
  {
    v6 = i - 4;
    if (*((_QWORD *)i - 1) == __n && (!__n || !memcmp(*((const void **)i - 2), __s2, __n)))
      break;
    if (v6 + 6 == (int *)off_24FC7AFE8)
      return 0;
  }
  return *i;
}

uint64_t sub_22F43E2A0(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  sub_22F425880(a3, (uint64_t)"sparc", 5, a2);
  v8[0] = "__REGISTER_PREFIX__";
  v9 = 259;
  v7 = 257;
  result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  if (*(_BYTE *)(a1 + 361))
  {
    v8[0] = "SOFT_FLOAT";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  return result;
}

uint64_t sub_22F43E34C(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  sub_22F43E2A0(a1, a2, a3);
  v8[0] = "__sparcv9";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__arch64__";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  if (*(_DWORD *)(a1 + 68) != 14)
  {
    v8[0] = "__sparc64__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
    v8[0] = "__sparc_v9__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
    v8[0] = "__sparcv9__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  v8[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  v8[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
  v9 = 259;
  v6[0] = "1";
  v7 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
}

char **sub_22F43E500()
{
  return off_24FC7E078;
}

char **sub_22F43E510()
{
  return &off_24FC7E228;
}

uint64_t sub_22F43E520(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;

  result = 0;
  switch(**(_BYTE **)a2)
  {
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
      goto LABEL_6;
    case 'N':
    case 'O':
    case 'P':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'b':
    case 'c':
    case 'e':
      return result;
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
      v4 = *a3 | 1;
      goto LABEL_5;
    case 'Z':
      if ((*(char *)(*(_QWORD *)a2 + 1) - 81) <= 3)
        goto LABEL_4;
      result = 0;
      break;
    case 'a':
    case 'd':
    case 'f':
      goto LABEL_4;
    default:
      if (**(_BYTE **)a2 == 118)
      {
LABEL_4:
        v4 = *a3 | 2;
LABEL_5:
        *a3 = v4;
LABEL_6:
        result = 1;
      }
      break;
  }
  return result;
}

uint64_t sub_22F43E590(int a1, void *__s2, size_t __n)
{
  int *i;
  int *v6;

  for (i = &dword_24FC7EC98; ; i += 6)
  {
    v6 = i - 4;
    if (*((_QWORD *)i - 1) == __n && (!__n || !memcmp(*((const void **)i - 2), __s2, __n)))
      break;
    if (v6 + 6 == (int *)&unk_24FC7EDC0)
      return 0xFFFFFFFFLL;
  }
  return *i;
}

uint64_t sub_22F43E610(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  int v6;
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "__s390__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__s390x__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__zarch__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__LONG_DOUBLE_128__";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__ARCH__";
  v11 = 259;
  v6 = *(_DWORD *)(a1 + 392);
  v9 = 265;
  LODWORD(v8[0]) = v6;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  v10[0] = "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8";
  v11 = 259;
  v8[0] = "1";
  v9 = 259;
  result = sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  if (*(_BYTE *)(a1 + 396))
  {
    v10[0] = "__HTM__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if (*(_BYTE *)(a1 + 397))
  {
    v10[0] = "__VX__";
    v11 = 259;
    v8[0] = "1";
    v9 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  if ((*(_QWORD *)(a2 + 8) & 0x80000000000) != 0)
  {
    v10[0] = "__VEC__";
    v11 = 259;
    v8[0] = "10304";
    v9 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v10, (llvm::Twine *)v8);
  }
  return result;
}

char **sub_22F43E868()
{
  return off_24FC7AFE8;
}

uint64_t sub_22F43E878(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  sub_22F425880(a3, (uint64_t)"tce", 3, a2);
  v7[0] = "__TCE__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__TCE_V1__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

uint64_t sub_22F43E918(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  sub_22F425880(a3, (uint64_t)"tcele", 5, a2);
  v7[0] = "__TCE__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__TCE_V1__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__TCELE__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__TCELE_V1__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

uint64_t sub_22F43EA08(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC7F170);
}

void sub_22F43EA14(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC7F170);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43EA40()
{
  return 0;
}

uint64_t sub_22F43EA4C()
{
  return 1;
}

uint64_t sub_22F43EA54()
{
  return 1;
}

const char *sub_22F43EA5C()
{
  return "";
}

BOOL sub_22F43EA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
    return 0;
  return *(_WORD *)a2 == 25460 && *(_BYTE *)(a2 + 2) == 101;
}

uint64_t sub_22F43EA98()
{
  return 0;
}

uint64_t sub_22F43EAA4()
{
  return 0;
}

uint64_t sub_22F43EAB0(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FC7F8D8);
}

void sub_22F43EABC(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FC7F8D8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43EAE8(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = "_LP64";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "unix";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__unix__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__linux__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__ve";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__ve__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__STDC_HOSTED__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__STDC__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__NEC__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

char **sub_22F43EC88()
{
  return off_24FC80030;
}

uint64_t sub_22F43EC98(uint64_t a1)
{
  if (*(char *)(a1 + 407) >= 0)
    return a1 + 384;
  else
    return *(_QWORD *)(a1 + 384);
}

BOOL sub_22F43ECBC(std::string *a1, std::string *a2)
{
  _BOOL8 result;

  if (sub_22F1ED4D8(a2, "mvp") || (result = sub_22F1ED4D8(a2, "experimental-mv")))
  {
    std::string::operator=(a1 + 16, a2);
    return 1;
  }
  return result;
}

BOOL sub_22F43ED14(int a1, void *__s2, size_t __n)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = 0;
  v6 = (_QWORD *)&xmmword_24FC92740 + 1;
  do
  {
    if (*v6 == __n && (!__n || !memcmp((const void *)*(v6 - 1), __s2, __n)))
      break;
    v6 += 2;
    ++v5;
  }
  while (v5 != 3);
  return v5 != 3;
}

uint64_t sub_22F43ED84(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  result = sub_22F42596C(a3, (uint64_t)"wasm", 4, 0);
  if (*(int *)(a1 + 364) >= 1)
  {
    v8[0] = "__wasm_simd128__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
    if (*(int *)(a1 + 364) >= 2)
    {
      v8[0] = "__wasm_relaxed_simd__";
      v9 = 259;
      v6[0] = "1";
      v7 = 259;
      result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
    }
  }
  if (*(_BYTE *)(a1 + 368))
  {
    v8[0] = "__wasm_nontrapping_fptoint__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 369))
  {
    v8[0] = "__wasm_sign_ext__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 370))
  {
    v8[0] = "__wasm_exception_handling__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 371))
  {
    v8[0] = "__wasm_bulk_memory__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 372))
  {
    v8[0] = "__wasm_atomics__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 373))
  {
    v8[0] = "__wasm_mutable_globals__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 374))
  {
    v8[0] = "__wasm_multivalue__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 375))
  {
    v8[0] = "__wasm_tail_call__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 376))
  {
    v8[0] = "__wasm_reference_types__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    result = sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  if (*(_BYTE *)(a1 + 377))
  {
    v8[0] = "__wasm_extended_const__";
    v9 = 259;
    v6[0] = "1";
    v7 = 259;
    return sub_22E7333BC(a3, (llvm::Twine *)v8, (llvm::Twine *)v6);
  }
  return result;
}

uint64_t *sub_22F43F048(uint64_t *result, unsigned int a2, int a3)
{
  llvm::StringMapImpl *v3;
  const char *v4;
  char v5;
  size_t v6;
  const char *v7;
  size_t v8;

  v3 = (llvm::StringMapImpl *)result;
  if (!a3)
  {
    v5 = 0;
    v4 = "relaxed-simd";
    v6 = 12;
    if (a2 >= 2)
    {
      if (a2 != 2)
        return result;
      goto LABEL_8;
    }
    v7 = "simd128";
    v8 = 7;
    goto LABEL_7;
  }
  v4 = "simd128";
  v5 = 1;
  v6 = 7;
  if (a2 != 1)
  {
    if (a2 != 2)
      return result;
    v7 = "relaxed-simd";
    v8 = 12;
LABEL_7:
    *(_BYTE *)(*sub_22E80ABE0((llvm::StringMapImpl *)result, v7, v8) + 8) = v5;
  }
LABEL_8:
  result = sub_22E80ABE0(v3, v4, v6);
  *(_BYTE *)(*result + 8) = v5;
  return result;
}

uint64_t *sub_22F43F0F4(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, size_t a4, char a5)
{
  BOOL v7;
  unsigned int v8;
  uint64_t *result;

  if (a4 == 12)
  {
    if (*(_QWORD *)a3 != 0x2D646578616C6572 || *(_DWORD *)(a3 + 8) != 1684892019)
      goto LABEL_13;
    v8 = 2;
  }
  else
  {
    if (a4 != 7 || (*(_DWORD *)a3 == 1684892019 ? (v7 = *(_DWORD *)(a3 + 3) == 942813540) : (v7 = 0), !v7))
    {
LABEL_13:
      result = sub_22E80ABE0(a2, (const void *)a3, a4);
      *(_BYTE *)(*result + 8) = a5;
      return result;
    }
    v8 = 1;
  }
  return sub_22F43F048((uint64_t *)a2, v8, a5);
}

uint64_t sub_22F43F1A4(uint64_t a1, llvm::StringMapImpl *a2, uint64_t a3, _QWORD *a4, uint64_t a5, unsigned __int8 **a6)
{
  if (a5 == 13 && *a4 == 0x676E696465656C62 && *(_QWORD *)((char *)a4 + 5) == 0x656764652D676E69)
  {
    *(_BYTE *)(*sub_22E80ABE0(a2, "nontrapping-fptoint", 0x13uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "sign-ext", 8uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "bulk-memory", 0xBuLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "atomics", 7uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "mutable-globals", 0xFuLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "tail-call", 9uLL) + 8) = 1;
    *(_BYTE *)(*sub_22E80ABE0(a2, "simd128", 7uLL) + 8) = 1;
  }
  return sub_22F424A84(a1, (uint64_t)a2, a3, (uint64_t)a4, a5, a6);
}

char **sub_22F43F308()
{
  return off_24FC8F340;
}

void sub_22F43F318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  sub_22F1E73BC((_QWORD *)a1, a2, a3);
  if (!*(_BYTE *)(a1 + 372) || !*(_BYTE *)(a1 + 371))
  {
    v6 = *(unsigned __int16 *)(a3 + 248);
    v5 = a3 + 248;
    v7 = *(_QWORD *)(v5 - 228);
    v8 = v6 & 0xFFFFDFFF | (*(unsigned __int8 *)(v5 + 2) << 16);
    *(_WORD *)v5 = v6 & 0xCFFF | 0x1000;
    *(_BYTE *)(v5 + 2) = BYTE2(v8);
    *(_QWORD *)(v5 - 228) = v7 & 0xFFFFFE7FFFFFFFFFLL;
  }
}

uint64_t sub_22F43F378(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43ED84(a1, a2, a3);
  return sub_22F42596C(a3, (uint64_t)"wasm32", 6, 0);
}

uint64_t sub_22F43F3AC(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  sub_22F43ED84(a1, a2, a3);
  return sub_22F42596C(a3, (uint64_t)"wasm64", 6, 0);
}

uint64_t sub_22F43F3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;

  if (a3 != 3)
    return 0;
  if (*(_WORD *)a2 == 14387 && *(_BYTE *)(a2 + 2) == 55)
  {
    v6 = 2;
  }
  else
  {
    if (*(_WORD *)a2 != 29555 || *(_BYTE *)(a2 + 2) != 101)
      return 0;
    v6 = 1;
  }
  *(_DWORD *)(a1 + 460) = v6;
  return 1;
}

uint64_t sub_22F43F440(uint64_t a1, llvm::StringMapImpl *a2, const char *a3, size_t a4, int a5)
{
  const char *v5;
  const char *v6;
  size_t v7;

  v5 = a3;
  if (a4 == 4)
  {
    v6 = "sse4.1";
    if (a5)
      v6 = "sse4.2";
    if (*(_DWORD *)a3 == 879063923)
    {
      v5 = v6;
      v7 = 6;
    }
    else
    {
      v7 = 4;
    }
  }
  else
  {
    v7 = a4;
  }
  *(_BYTE *)(*sub_22E80ABE0(a2, v5, v7) + 8) = a5;
  return llvm::X86::updateImpliedFeatures();
}

uint64_t sub_22F43F4DC(uint64_t a1)
{
  return qword_22F54AD98[*(int *)(a1 + 456)] | qword_22F54AB78[*(int *)(a1 + 456)];
}

uint64_t sub_22F43F500(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  while (1)
  {
    v4 = *a3;
    v5 = v4 > 0x3D;
    v6 = (1 << v4) & 0x2000084000000000;
    if (v5 || v6 == 0)
      break;
    if (a4)
      ++a3;
    a4 -= a4 != 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 912))(a1);
}

uint64_t sub_22F43F544(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 912))(a1);
}

uint64_t sub_22F43F550()
{
  return llvm::X86::fillValidCPUArchList();
}

uint64_t sub_22F43F568()
{
  return llvm::X86::fillValidTuneCPUList();
}

char **sub_22F43F574()
{
  return off_24FC92770;
}

char **sub_22F43F584()
{
  return off_24FC92C98;
}

char **sub_22F43F594()
{
  return off_24FC92F98;
}

char **sub_22F43F5A4()
{
  return off_24FC92F98;
}

uint64_t sub_22F43F5B4(uint64_t a1, uint64_t a2, llvm::raw_ostream **a3)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = "__xcore__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
  v7[0] = "__XS1B__";
  v8 = 259;
  v5[0] = "1";
  v6 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v7, (llvm::Twine *)v5);
}

char **sub_22F43F63C()
{
  return off_24FCAC848;
}

uint64_t sub_22F43F64C(uint64_t a1)
{
  return sub_22F1E6E70(a1, &off_24FCACCB8);
}

void sub_22F43F658(uint64_t a1)
{
  sub_22F1E6E70(a1, &off_24FCACCB8);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F43F684()
{
  return 1;
}

uint64_t sub_22F43F68C()
{
  return 1;
}

uint64_t sub_22F43F694()
{
  return 0;
}

const char *sub_22F43F69C()
{
  return "";
}

uint64_t sub_22F43F6A8(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
    return 0xFFFFFFFFLL;
  else
    return a2;
}

uint64_t sub_22F43F6B4()
{
  return 0;
}

char **sub_22F43F6BC()
{
  return off_24FCAD068;
}

uint64_t sub_22F43F6CC()
{
  return 0;
}

char *sub_22F43F6D8(int a1)
{
  if ((a1 - 19) > 0x38)
    return 0;
  else
    return off_24FCADEB0[(__int16)(a1 - 19)];
}

uint64_t sub_22F43F700(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_22E618148(&v15, a2, a2 + 24 * a3, a3);
  llvm::SpecialCaseList::createOrDie();
  v18 = (void **)&v15;
  sub_22E3B3CC8(&v18);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_22E618148(&v15, a4, a4 + 24 * a5, a5);
  llvm::SpecialCaseList::createOrDie();
  v18 = (void **)&v15;
  sub_22E3B3CC8(&v18);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_22E618148(&v15, a6, a6 + 24 * a7, a7);
  llvm::SpecialCaseList::createOrDie();
  v18 = (void **)&v15;
  sub_22E3B3CC8(&v18);
  *(_QWORD *)(a1 + 24) = a8;
  return a1;
}

llvm::SpecialCaseList **sub_22F43F820(llvm::SpecialCaseList **a1)
{
  llvm::SpecialCaseList *v2;
  llvm::SpecialCaseList *v3;
  llvm::SpecialCaseList *v4;

  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v2);
    MEMORY[0x2348A0E9C]();
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v3);
    MEMORY[0x2348A0E9C]();
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v4);
    MEMORY[0x2348A0E9C]();
  }
  return a1;
}

uint64_t sub_22F43F8AC()
{
  uint64_t v0;

  v0 = 3;
  if ((llvm::SpecialCaseList::inSection() & 1) == 0)
  {
    v0 = 3;
    if ((llvm::SpecialCaseList::inSection() & 1) == 0)
    {
      if ((llvm::SpecialCaseList::inSection() & 1) != 0 || (llvm::SpecialCaseList::inSection() & 1) != 0)
      {
        return 1;
      }
      else
      {
        v0 = 2;
        if ((llvm::SpecialCaseList::inSection() & 1) == 0)
        {
          if (llvm::SpecialCaseList::inSection())
            return 2;
          else
            return 0;
        }
      }
    }
  }
  return v0;
}

uint64_t sub_22F43FA38()
{
  uint64_t v0;

  if ((llvm::SpecialCaseList::inSection() & 1) != 0 || (llvm::SpecialCaseList::inSection() & 1) != 0)
    return 1;
  v0 = 2;
  if ((llvm::SpecialCaseList::inSection() & 1) == 0)
  {
    if (llvm::SpecialCaseList::inSection())
      return 2;
    else
      return 0;
  }
  return v0;
}

uint64_t sub_22F43FB50(uint64_t a1, int a2)
{
  _QWORD *v3;

  if (!a2)
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (a2 < 0)
    a2 = sub_22F423AE4(*(_QWORD *)(a1 + 24), a2);
  sub_22F1E27D0(v3, a2);
  return sub_22F43FA38();
}

_BYTE *sub_22F43FBC8(_BYTE *result, _QWORD *a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *result;
  if (*result)
  {
    v4 = result + 1;
    do
    {
      if (v2 == 10 || v2 == 32 || v2 == 92)
      {
        v5 = a2[1];
        if ((unint64_t)(v5 + 1) > a2[2])
        {
          result = (_BYTE *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v5 = a2[1];
        }
        *(_BYTE *)(*a2 + v5) = 92;
        v6 = a2[1] + 1;
        a2[1] = v6;
        v2 = *(v4 - 1);
      }
      else
      {
        v6 = a2[1];
      }
      if ((unint64_t)(v6 + 1) > a2[2])
      {
        result = (_BYTE *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v6 = a2[1];
      }
      *(_BYTE *)(*a2 + v6) = v2;
      ++a2[1];
      v7 = *v4++;
      v2 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F43FCAC(int a1, std::error_code this, std::error_code a3)
{
  uint64_t result;
  uint64_t v4;

  *(_QWORD *)&this.__val_ = *(_QWORD *)&a3.__val_;
  llvm::errorCodeToError((llvm *)this.__cat_, this);
  llvm::air::ErrorHandler::error();
  result = v4;
  if (v4)
    return (*(uint64_t (**)())(*(_QWORD *)v4 + 8))();
  return result;
}

uint64_t sub_22F43FD08(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 324);
  if ((_DWORD)v1 == 4)
    return sub_22F213540();
  else
    return ((uint64_t (*)())((char *)sub_22F43FD30 + 4 * byte_22F54B05C[v1]))();
}

uint64_t sub_22F43FD40()
{
  return 1;
}

uint64_t sub_22F43FD4C(llvm::vfs *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  llvm::vfs *File;
  const std::error_category *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const std::error_category *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  unsigned int *v35;
  const std::error_category *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  std::error_code v40;
  std::error_code v41;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    llvm::vfs::getRealFileSystem(a1);
    v4 = v35;
    v35 = (unsigned int *)*((_QWORD *)a1 + 71);
    v5 = v35;
    *((_QWORD *)a1 + 71) = v4;
    if (v5)
    {
      v20 = v5 + 2;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21 == 1)
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
    return 1;
  }
  v34 = 261;
  v33[0] = a2;
  v33[1] = a3;
  File = (llvm::vfs *)llvm::MemoryBuffer::getFile();
  if ((v38 & 1) != 0)
  {
    v9 = v36;
    if ((_DWORD)v36)
    {
      v22 = v37;
      v32 = 1283;
      v29[0] = (uint64_t)"cannot open '";
      v30 = a2;
      v31 = a3;
      v27[0] = (uint64_t)"'";
      v28 = 259;
      sub_22E78CF44(v29, v27, (uint64_t)v33);
      *(_QWORD *)&v40.__val_ = v33;
      v40.__cat_ = v9;
      *(_QWORD *)&v41.__val_ = v22;
      sub_22F43FCAC((int)a1, v40, v41);
LABEL_34:
      v6 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    File = (llvm::vfs *)std::system_category();
    v9 = v36;
  }
  v36 = 0;
  llvm::vfs::getRealFileSystem(File);
  llvm::vfs::getVFSFromYAML();
  if (v26)
  {
    v10 = (unsigned int *)(v26 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (unsigned int *)*((_QWORD *)a1 + 71);
  *((_QWORD *)a1 + 71) = v26;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v25)
  {
    v16 = v25 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)())(*(_QWORD *)v25 + 8))();
  }
  if (v9)
    ((void (*)(const std::error_category *))v9->~error_category_0)(v9);
  if (!*((_QWORD *)a1 + 71))
  {
    v32 = 1283;
    v29[0] = (uint64_t)"cannot read '";
    v30 = a2;
    v31 = a3;
    v27[0] = (uint64_t)"'";
    v28 = 259;
    sub_22E78CF44(v29, v27, (uint64_t)v33);
    llvm::air::ErrorHandler::error();
    goto LABEL_34;
  }
  v6 = 1;
LABEL_24:
  if ((v38 & 1) == 0)
  {
    v19 = v36;
    v36 = 0;
    if (v19)
      ((void (*)(const std::error_category *))v19->~error_category_0)(v19);
  }
  return v6;
}

uint64_t sub_22F440010(uint64_t result, uint64_t a2, uint64_t a3)
{
  llvm::MemoryBuffer *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13[2];
  const char *v14;
  const char *v15;
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  const char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24[2];
  char v25;
  uint64_t v26;
  std::error_code v27;
  std::error_code v28;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return result;
  *(_QWORD *)v13 = result;
  v18 = 261;
  v17[0] = a2;
  v17[1] = a3;
  llvm::vfs::FileSystem::getBufferForFile();
  if ((v25 & 1) == 0)
  {
    std::system_category();
    v5 = (llvm::MemoryBuffer *)v24[0];
    goto LABEL_5;
  }
  v5 = (llvm::MemoryBuffer *)v24[0];
  if (!LODWORD(v24[0]))
  {
LABEL_5:
    llvm::MemoryBuffer::getMemBufferRef(v5);
    llvm::air::ExportFile::create();
    if ((v20 & 1) != 0 && (v6 = v19, v19 = 0, v6))
    {
      v17[0] = "cannot load export file";
      v18 = 259;
      v14 = v6;
      llvm::air::ErrorHandler::error();
      (*(void (**)(const char *))(*(_QWORD *)v14 + 8))(v14);
    }
    else
    {
      v7 = *(uint64_t **)(*(_QWORD *)v13 + 552);
      if ((unint64_t)v7 >= *(_QWORD *)(*(_QWORD *)v13 + 560))
      {
        v9 = sub_22E3B94F4((char **)(*(_QWORD *)v13 + 544), v24);
      }
      else
      {
        v8 = v24[0];
        v24[0] = 0;
        *v7 = v8;
        v9 = (char *)(v7 + 1);
      }
      *(_QWORD *)(*(_QWORD *)v13 + 552) = v9;
      v11 = v19;
      v19 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)v13 + 600);
      *(_QWORD *)(*(_QWORD *)v13 + 600) = v11;
      if (v12)
        sub_22E3B4D0C(*(_QWORD *)v13 + 600, v12);
    }
    result = sub_22F4406A8((uint64_t)&v19);
    goto LABEL_15;
  }
  v10 = v24[1];
  v23 = 1283;
  v19 = "cannot open '";
  v21 = a2;
  v22 = a3;
  v15 = "'";
  v16 = 259;
  sub_22E78CF44((uint64_t *)&v19, (uint64_t *)&v15, (uint64_t)v17);
  *(_QWORD *)&v27.__val_ = v17;
  v27.__cat_ = (const std::error_category *)v5;
  *(_QWORD *)&v28.__val_ = v10;
  result = sub_22F43FCAC(v13[0], v27, v28);
LABEL_15:
  if ((v25 & 1) == 0)
  {
    result = v24[0];
    v24[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *sub_22F44020C(char **a1, char **a2, char **a3, char **a4)
{
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *result;
  char *v12;
  char *v13;

  v7 = *a1;
  *a1 = 0;
  v12 = v7;
  sub_22E6C5940(&v12, &v13);
  if (v12)
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  v8 = *a2;
  *a2 = 0;
  v12 = v8;
  sub_22E6C5940(&v12, &v13);
  if (v12)
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  v9 = *a3;
  *a3 = 0;
  v12 = v9;
  sub_22E6C5940(&v12, &v13);
  if (v12)
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  v10 = *a4;
  *a4 = 0;
  v12 = v10;
  sub_22E6C5940(&v12, &v13);
  result = v12;
  if (v12)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t sub_22F440308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
  {
    v3 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v3, 0x10B2C407FF26C1CLL);
  }
  if (*(_QWORD *)a1 != a1 + 24)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22F440368()
{
  return 1;
}

uint64_t sub_22F440370()
{
  return 1;
}

uint64_t sub_22F440378()
{
  return 1;
}

uint64_t sub_22F440380()
{
  return 1;
}

uint64_t sub_22F440388()
{
  return 1;
}

uint64_t sub_22F440390()
{
  return 1;
}

uint64_t sub_22F440398(uint64_t a1)
{
  sub_22F4403DC(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_22F215870(a1 + 80);
  sub_22F36FF38(a1 + 48);
  sub_22F440428(a1 + 16);
  return a1;
}

void sub_22F4403DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_22F4403DC(a1, *a2);
    sub_22F4403DC(a1, a2[1]);
    sub_22F215704((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_22F440428(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  uint64_t v8;
  _QWORD *v9;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
        {
          v8 = *(_QWORD *)v6;
          v9 = (_QWORD *)*((_QWORD *)v6 + 2);
          if (v9 != (_QWORD *)((char *)v6 + 32))
            free(v9);
          llvm::deallocate_buffer(v6, (void *)(v8 + 97));
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F4404C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24FCAFD88;
  v2 = a1[58];
  a1[58] = 0;
  if (v2)
  {
    v3 = sub_22E3B45BC(v2);
    MEMORY[0x2348A0E9C](v3, 0x10B2C408BDE5BD4);
  }
  return sub_22F215594((uint64_t)a1);
}

uint64_t sub_22F44051C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24FCAFDE0;
  v2 = a1[57];
  a1[57] = 0;
  if (v2)
  {
    v3 = sub_22E3B46CC(v2);
    MEMORY[0x2348A0E9C](v3, 0x1032C40B18B30E6);
  }
  return sub_22F215594((uint64_t)a1);
}

uint64_t sub_22F440570(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24FCAFE38;
  v2 = *(_QWORD *)(a1 + 4800);
  *(_QWORD *)(a1 + 4800) = 0;
  if (v2)
  {
    v4 = sub_22E3B46CC(v2);
    MEMORY[0x2348A0E9C](v4, 0x1032C40B18B30E6);
  }
  if (*(_BYTE *)(a1 + 4792))
    sub_22F4405E4(a1 + 480);
  return sub_22F215594(a1);
}

void sub_22F4405E4(uint64_t a1)
{
  sub_22F2446A4(a1 + 2312);
  sub_22E3BAA3C((char **)(a1 + 984));
  sub_22F2448C4((_QWORD *)(a1 + 288));
}

uint64_t sub_22F44060C()
{
  uint64_t v0;

  sub_22F215938(v0 + 216);
  sub_22F215938(v0 + 144);
  sub_22F215938(v0 + 72);
  return sub_22F215938(v0);
}

uint64_t sub_22F440634(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  if (*(_QWORD **)result != v2)
  {
    v3 = result;
    do
    {
      if (*v1)
      {
        for (i = 16; i != 52; i += 4)
        {
          if (!*(_DWORD *)(v3 + i))
            break;
          result = llvm::opt::Option::matches();
          if ((result & 1) != 0)
            return result;
        }
        v1 = *(_QWORD **)v3;
        v2 = *(_QWORD **)(v3 + 8);
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_22F4406A8(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    sub_22E3B4D0C(a1, v3);
  }
  return a1;
}

uint64_t sub_22F4406FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  operator new();
  result = llvm::opt::OptTable::OptTable();
  *a1 = result;
  return result;
}

uint64_t sub_22F440748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = v4;
  result = llvm::Triple::getAIRVersion((llvm::Triple *)a2);
  *(_QWORD *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_22F44078C(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t i;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  llvm::object::IRObjectFile *v15;
  int v16;
  _DWORD *v18;
  llvm::object::IRObjectFile *v19;
  _DWORD *v20;
  llvm::object::IRObjectFile *v21;
  unint64_t v22;

  if (a3)
  {
    v4 = (uint64_t *)result;
    for (i = 8 * a3; i; i -= 8)
    {
      v6 = *a2;
      v7 = *a2 & 6;
      if (v7 == 2)
      {
        *a2 = 2;
        v8 = v6 & 0xFFFFFFFFFFFFFFF8;
        if (!v8)
          goto LABEL_27;
        v22 = v8;
        sub_22F215A7C(v4, (uint64_t *)&v22);
        result = v22;
        v22 = 0;
        if (result)
        {
          v12 = MEMORY[0x23489F15C](result, v9, v10, v11);
          v13 = 2146593820;
LABEL_7:
          result = MEMORY[0x2348A0E9C](v12, v13 | 0x10B2C4000000000);
        }
      }
      else if (v6 >= 8 && v7 == 0)
      {
        v15 = (llvm::object::IRObjectFile *)(v6 & 0xFFFFFFFFFFFFFFF8);
        v16 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v16 != 3)
        {
          if (v16)
LABEL_27:
            v15 = 0;
          else
            *a2 = 2;
          v19 = v15;
          sub_22F44098C(v4, &v19);
          result = (uint64_t)v19;
          v19 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          goto LABEL_15;
        }
        *a2 = 2;
        v21 = v15;
        sub_22F215E24((uint64_t)v4, &v21);
        v21 = 0;
        result = (*(uint64_t (**)(llvm::object::IRObjectFile *))(*(_QWORD *)v15 + 8))(v15);
      }
      else
      {
        if (v6 < 8 || v7 != 4)
          goto LABEL_27;
        v18 = (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
        if (*v18 != 1)
          goto LABEL_27;
        *a2 = 2;
        v20 = v18;
        sub_22F440900(v4, &v20);
        result = (uint64_t)v20;
        v20 = 0;
        if (result)
        {
          v12 = sub_22E3B45BC(result);
          v13 = -1948361772;
          goto LABEL_7;
        }
      }
LABEL_15:
      ++a2;
    }
  }
  return result;
}

uint64_t *sub_22F440900(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = (_QWORD *)a1[14];
  v5 = (_QWORD *)a1[15];
  result = a1 + 14;
  v6 = *a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  while (v4 != v5)
  {
    if (*v4 == v6)
      return result;
    ++v4;
  }
  *a2 = 0;
  v9 = v6;
  v7 = (unint64_t *)a1[15];
  if ((unint64_t)v7 >= a1[16])
  {
    v8 = sub_22F215978((uint64_t **)result, (uint64_t *)&v9);
  }
  else
  {
    *v7 = v6;
    v8 = (uint64_t *)(v7 + 1);
    v9 = 2;
  }
  a1[15] = v8;
  return sub_22E3B4400((uint64_t *)&v9);
}

uint64_t *sub_22F44098C(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = (_QWORD *)a1[14];
  v5 = (_QWORD *)a1[15];
  result = a1 + 14;
  v6 = *a2 & 0xFFFFFFFFFFFFFFF9;
  while (v4 != v5)
  {
    if (*v4 == v6)
      return result;
    ++v4;
  }
  *a2 = 0;
  v9 = v6;
  v7 = (unint64_t *)a1[15];
  if ((unint64_t)v7 >= a1[16])
  {
    v8 = sub_22F215978((uint64_t **)result, (uint64_t *)&v9);
  }
  else
  {
    *v7 = v6;
    v8 = (uint64_t *)(v7 + 1);
    v9 = 2;
  }
  a1[15] = v8;
  return sub_22E3B4400((uint64_t *)&v9);
}

uint64_t sub_22F440A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  sub_22F442820(&v5, *(llvm::LLVMContext **)(a1 + 8), *(_QWORD *)(a1 + 16));
  if (sub_22F440AA0(a1) && sub_22F440B08(a1))
    v2 = sub_22F2160B0(a1);
  else
    v2 = 0;
  llvm::LLVMContext::setDiagnosticHandler();
  v3 = v6;
  v6 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v2;
}

uint64_t sub_22F440AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  llvm::object::Archive *v5;
  uint64_t result;
  BOOL v7;

  v1 = *(_QWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 120);
  if (v1 == v2)
    return 1;
  v4 = v1 + 8;
  do
  {
    if (*(_DWORD *)((*(_QWORD *)(v4 - 8) & 0xFFFFFFFFFFFFFFF8) + 8))
      v5 = 0;
    else
      v5 = (llvm::object::Archive *)(*(_QWORD *)(v4 - 8) & 0xFFFFFFFFFFFFFFF8);
    result = sub_22F21641C(a1, v5);
    if ((_DWORD)result)
      v7 = v4 == v2;
    else
      v7 = 1;
    v4 += 8;
  }
  while (!v7);
  return result;
}

uint64_t sub_22F440B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  llvm::Module *v5;
  llvm::NamedMDNode *NamedMetadata;
  llvm::Module *v7;
  llvm::NamedMDNode *v8;
  llvm::Module *v9;
  llvm::NamedMDNode *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  const char *v25;
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;

  if (*(char *)(a1 + 159) < 0)
    v1 = *(_QWORD *)(a1 + 144);
  else
    v1 = *(unsigned __int8 *)(a1 + 159);
  if (v1)
    return 1;
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  if (v3 == v4)
    return 1;
  while (1)
  {
    llvm::Module::materializeMetadata(*(llvm::Module **)(v3 + 48));
    if (v29)
      break;
    v5 = *(llvm::Module **)(v3 + 48);
    v27[0] = "llvm.commandline";
    v28 = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v5, (const llvm::Twine *)v27);
    v7 = *(llvm::Module **)(v3 + 48);
    v27[0] = "llvm_utils.sources";
    v28 = 259;
    v8 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v7, (const llvm::Twine *)v27);
    v9 = *(llvm::Module **)(v3 + 48);
    v27[0] = "llvm_utils.workingdir";
    v28 = 259;
    v10 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v9, (const llvm::Twine *)v27);
    if (NamedMetadata)
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v3 + 48), NamedMetadata);
    if (v8)
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v3 + 48), v8);
    if (v10)
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v3 + 48), v10);
    v3 += 56;
    if (v3 == v4)
      return 1;
  }
  v25 = "cannot materialize module metadata";
  v26 = 259;
  v11 = *(_QWORD *)(v3 + 48);
  v12 = *(_BYTE *)(v11 + 191);
  v13 = v12;
  v14 = v12 & 0x7F;
  if (v13 < 0)
    v14 = *(_QWORD *)(v11 + 176);
  if (v14)
  {
    v17 = *(_QWORD *)(v11 + 168);
    v15 = v11 + 168;
    v16 = v17;
    if (v13 < 0)
      v15 = v16;
    v22 = 1283;
    v21[0] = (uint64_t)" in '";
    v21[2] = v15;
    v21[3] = v14;
    v19 = "'";
    v20 = 259;
    sub_22E78CF44(v21, (uint64_t *)&v19, (uint64_t)v23);
  }
  else
  {
    v24 = 257;
  }
  sub_22E78CF44((uint64_t *)&v25, v23, (uint64_t)v27);
  v18 = v29;
  v29 = 0;
  llvm::air::ErrorHandler::error();
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  return 0;
}

uint64_t sub_22F440D10(uint64_t *a1, _BYTE *a2, size_t a3, char *a4, uint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = a1[1];
  if (v8 >= a1[2])
  {
    result = sub_22F227E14(a1, a2, a3, a4, a5);
  }
  else
  {
    *(_QWORD *)v8 = v8 + 24;
    *(_OWORD *)(v8 + 8) = xmmword_22F44E350;
    sub_22E61131C(v8, a2, &a2[a3]);
    *(_BYTE *)(v8 + 40) = *a4;
    v9 = *a5;
    *a5 = 0;
    *(_QWORD *)(v8 + 48) = v9;
    result = v8 + 56;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_22F440D98@<X0>(llvm::object::Archive *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  llvm::object::Archive::child_begin();
  llvm::object::Archive::child_end(a1);
  sub_22F4428DC(&v7, &v6, a2);
  v4 = *((_QWORD *)&v6 + 1);
  *((_QWORD *)&v6 + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  result = *((_QWORD *)&v7 + 1);
  *((_QWORD *)&v7 + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22F440E14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_22F4435C4(a1, &v5);
  v2 = v5;
  if (v5)
  {
    v5 = 0;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8) = v2;
    *(_QWORD *)(a1 + 40) = v4 & 3 | 4;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) = 0;
  }
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

llvm::object::IRObjectFile *sub_22F440E90(llvm::object::IRObjectFile *result, unint64_t *a2, uint64_t a3)
{
  llvm::object::IRObjectFile *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  llvm::object::IRObjectFile *v20;
  llvm::object::Binary *v21;
  llvm::object::IRObjectFile *v22;
  llvm::object::Binary *v23;
  llvm::object::IRObjectFile *v24;
  llvm::object::IRObjectFile *v25;
  llvm::object::IRObjectFile *v26;

  if (a3)
  {
    v4 = result;
    v5 = 8 * a3;
    while (1)
    {
      v6 = *a2;
      v7 = *a2 & 6;
      if (v7 != 2)
        break;
      *a2 = 2;
      v9 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        goto LABEL_26;
      v26 = (llvm::object::IRObjectFile *)v9;
      sub_22F216E74(v4, (uint64_t **)&v26);
      result = v26;
      v26 = 0;
      if (result)
      {
        v16 = MEMORY[0x23489F15C](result, v11, v12, v13, v14, v15);
        v17 = 2146593820;
        goto LABEL_19;
      }
LABEL_14:
      ++a2;
      v5 -= 8;
      if (!v5)
        return result;
    }
    if (v6 >= 8 && v7 == 0)
    {
      v9 = v6 & 0xFFFFFFFFFFFFFFF8;
      v10 = *(_DWORD *)(v9 + 8);
      switch(v10)
      {
        case 3:
          *a2 = 2;
          v25 = (llvm::object::IRObjectFile *)v9;
          sub_22F217210(v4, &v25);
          result = v25;
          v25 = 0;
          if (result)
            goto LABEL_27;
          goto LABEL_14;
        case 0:
          *a2 = 2;
          v23 = (llvm::object::Binary *)v9;
          sub_22F4410FC((uint64_t)v4, &v23);
          result = v23;
          v23 = 0;
          if (result)
            goto LABEL_27;
          goto LABEL_14;
        case 21:
          *a2 = 2;
LABEL_26:
          v21 = (llvm::object::Binary *)v9;
          sub_22F2177FC((uint64_t)v4, &v21);
          result = v21;
          v21 = 0;
          if (result)
          {
LABEL_27:
            result = (llvm::object::IRObjectFile *)(*(uint64_t (**)(llvm::object::IRObjectFile *))(*(_QWORD *)result + 8))(result);
            goto LABEL_14;
          }
          goto LABEL_14;
      }
    }
    else if (v6 >= 8 && v7 == 4)
    {
      v20 = (llvm::object::IRObjectFile *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if (*(_DWORD *)v20 == 2)
      {
        *a2 = 2;
        v22 = v20;
        sub_22F217488((uint64_t)v4, &v22);
        result = v22;
        v22 = 0;
        if (!result)
          goto LABEL_14;
        v16 = sub_22E3B46CC((uint64_t)result);
        v18 = 0x1032C40B18B30E6;
        goto LABEL_20;
      }
      if (*(_DWORD *)v20 == 1)
      {
        *a2 = 2;
        v24 = v20;
        sub_22F441068(v4, &v24);
        result = v24;
        v24 = 0;
        if (!result)
          goto LABEL_14;
        v16 = sub_22E3B45BC((uint64_t)result);
        v17 = -1948361772;
LABEL_19:
        v18 = v17 | 0x10B2C4000000000;
LABEL_20:
        result = (llvm::object::IRObjectFile *)MEMORY[0x2348A0E9C](v16, v18);
        goto LABEL_14;
      }
    }
    v9 = 0;
    goto LABEL_26;
  }
  return result;
}

uint64_t *sub_22F441068(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 40))(a1, *a2);
  if ((_DWORD)result)
  {
    v6 = *a2 & 0xFFFFFFFFFFFFFFF9 | 4;
    sub_22F21B774(a1 + 41, &v6);
    v5 = *a2 & 0xFFFFFFFFFFFFFFF9 | 4;
    *a2 = 0;
    v6 = v5;
    v7 = v5;
    sub_22F44137C(a1 + 29, (uint64_t *)&v6);
    return sub_22E3B4400((uint64_t *)&v7);
  }
  return result;
}

uint64_t *sub_22F4410FC(uint64_t a1, llvm::object::Binary **a2)
{
  llvm::StringMapImpl *v4;
  uint64_t *result;
  const void *FileName;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19[5];
  uint64_t v20[5];
  unint64_t v21;
  unint64_t v22[4];

  v4 = (llvm::StringMapImpl *)(a1 + 296);
  llvm::object::Binary::getFileName(*a2);
  result = (uint64_t *)llvm::StringMapImpl::FindKey();
  if ((_DWORD)result == -1 || (int)result == (unint64_t)*(unsigned int *)(a1 + 304))
  {
    if ((llvm::object::Archive::hasSymbolTable(*a2) & 1) != 0)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, llvm::object::Binary *))(*(_QWORD *)a1 + 48))(a1, *a2);
      if ((_DWORD)result)
      {
        FileName = (const void *)llvm::object::Binary::getFileName(*a2);
        sub_22E3B39D4(v4, FileName, v7);
        v21 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF9;
        sub_22F21B774((_QWORD *)(a1 + 328), &v21);
        v8 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF9;
        *a2 = 0;
        v21 = v8;
        v22[0] = v8;
        sub_22F44137C((_QWORD *)(a1 + 232), (uint64_t *)&v21);
        return sub_22E3B4400((uint64_t *)v22);
      }
    }
    else
    {
      v9 = llvm::object::Binary::getFileName(*a2);
      v18 = 1283;
      v17[0] = (uint64_t)"archive '";
      v17[2] = v9;
      v17[3] = v10;
      v15 = "' has no table of contents for the target being linked (";
      v16 = 259;
      sub_22E78CF44(v17, (uint64_t *)&v15, (uint64_t)v19);
      v14 = 260;
      v13[0] = a1 + 24;
      sub_22E78CF44(v19, v13, (uint64_t)v20);
      v11 = ")";
      v12 = 259;
      sub_22E78CF44(v20, (uint64_t *)&v11, (uint64_t)&v21);
      llvm::air::ErrorHandler::error();
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F4412A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  const void *v9;
  size_t v10;
  __int128 v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 112);
  if ((_DWORD)v2)
  {
    for (i = *(_QWORD *)(result + 104); !*(_QWORD *)i || *(_QWORD *)i == -8; i += 8)
      ;
  }
  else
  {
    i = *(_QWORD *)(result + 104);
  }
  v5 = *(_QWORD *)(result + 104) + 8 * v2;
  while (i != v5)
  {
    if ((*(_DWORD *)(v1 + 288) - 1) <= 1)
    {
      v9 = (const void *)(*(_QWORD *)i + 96);
      v10 = **(_QWORD **)i;
      LODWORD(v11) = *(_DWORD *)(*(_QWORD *)i + 8);
      *((_QWORD *)&v11 + 1) = 2;
      result = sub_22F442A30((llvm::StringMapImpl *)(v1 + 136), v9, v10, &v11);
    }
    do
    {
      v7 = *(_QWORD *)(i + 8);
      i += 8;
      v6 = v7;
      if (v7)
        v8 = v6 == -8;
      else
        v8 = 1;
    }
    while (v8);
  }
  return result;
}

void *sub_22F44137C(_QWORD *a1, uint64_t *a2)
{
  void *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v9 = *a2;
  v10 = 0;
  result = sub_22F227FC8(&v7, (uint64_t)a1, &v9, &v10);
  if (v8)
  {
    v5 = v7;
    v6 = (uint64_t *)a1[4];
    if ((unint64_t)v6 < a1[5])
    {
      *v6 = *a2;
      v6[1] = a2[1];
      a2[1] = 2;
      result = v6 + 2;
    }
    else
    {
      result = sub_22F228388((uint64_t)(a1 + 3), (uint64_t)a2);
    }
    a1[4] = result;
    *(_DWORD *)(v5 + 8) = (((unint64_t)result - a1[3]) >> 4) - 1;
  }
  return result;
}

void sub_22F44142C(uint64_t a1, _BYTE *a2, size_t a3, char *a4, uint64_t a5)
{
  char *v9;
  char *v10;
  void *v11;
  __int128 v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = xmmword_22F44E330;
  sub_22E61131C((uint64_t)&v11, "      ", "");
  if (a3)
  {
    sub_22E61131C((uint64_t)&v11, a2, &a2[a3]);
    if (a5 == a3 && !memcmp(a4, a2, a3))
      goto LABEL_6;
    sub_22E61131C((uint64_t)&v11, "(", "");
    sub_22E61131C((uint64_t)&v11, a4, &a4[a5]);
    v9 = ")";
    v10 = "";
  }
  else if (a5)
  {
    v10 = &a4[a5];
    v9 = a4;
  }
  else
  {
    v9 = "object";
    v10 = "";
  }
  sub_22E61131C((uint64_t)&v11, v9, v10);
LABEL_6:
  llvm::air::ErrorHandler::explain();
  if (v11 != v13)
    free(v11);
}

void sub_22F441580(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, size_t a5, char *a6, uint64_t a7)
{
  char *v13;
  char *v14;
  void *v15;
  __int128 v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = xmmword_22F44E330;
  sub_22E61131C((uint64_t)&v15, "      ", "");
  sub_22E61131C((uint64_t)&v15, a2, &a2[a3]);
  if (a5)
  {
    sub_22E61131C((uint64_t)&v15, " in ", "");
    sub_22E61131C((uint64_t)&v15, a4, &a4[a5]);
    if (a7 == a5 && !memcmp(a6, a4, a5))
      goto LABEL_6;
    sub_22E61131C((uint64_t)&v15, "(", "");
    sub_22E61131C((uint64_t)&v15, a6, &a6[a7]);
    v13 = ")";
    v14 = "";
    goto LABEL_5;
  }
  if (a7)
  {
    sub_22E61131C((uint64_t)&v15, " in ", "");
    v14 = &a6[a7];
    v13 = a6;
LABEL_5:
    sub_22E61131C((uint64_t)&v15, v13, v14);
  }
LABEL_6:
  llvm::air::ErrorHandler::explain();
  if (v15 != v17)
    free(v15);
}

void sub_22F44170C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;

  v7 = *a2;
  v8 = 0;
  sub_22F227FC8(&v5, a1, &v7, &v8);
  if (v6)
  {
    v4 = v5;
    sub_22F228494((void **)(a1 + 24), (uint64_t)a2);
    *(_DWORD *)(v4 + 8) = -991146299 * ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  }
}

unint64_t sub_22F441798(unint64_t result, _OWORD *a2, __int128 *a3)
{
  unint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD v9[2];

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v6 = *a3;
    v9[0] = *a2;
    v9[1] = v6;
    result = sub_22E5C425C(result, (unint64_t)v9);
    v7 = (_OWORD *)(*(_QWORD *)v3 + 32 * *(unsigned int *)(v3 + 8));
    v8 = *(_OWORD *)(result + 16);
    *v7 = *(_OWORD *)result;
    v7[1] = v8;
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)result + 32 * v4);
    *v5 = *a2;
    v5[1] = *a3;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

unint64_t sub_22F44181C(uint64_t *a1)
{
  unint64_t v2;
  unsigned int v3;

  v2 = sub_22F22C51C(a1);
  if ((_DWORD)v2
    || (v2 = sub_22F444F50((uint64_t)a1), (_DWORD)v2)
    || (v2 = sub_22F44572C(a1), (_DWORD)v2)
    || (v2 = sub_22F444FA0((uint64_t)a1), (_DWORD)v2)
    || (v2 = sub_22F22CF40((uint64_t)a1), (_DWORD)v2))
  {
    v3 = v2;
  }
  else
  {
    std::system_category();
    v3 = 0;
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t sub_22F4418A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;

  v18 = *a2;
  v19 = 0;
  sub_22F227FC8(&v16, a1, &v18, &v19);
  v4 = v16;
  if (v17)
  {
    v5 = *a2;
    v14[1] = 0;
    v15 = 0;
    v14[0] = v5;
    v6 = *(_QWORD **)(a1 + 32);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
    {
      v10 = sub_22F22881C((void **)(a1 + 24), (uint64_t)v14);
      v11 = v15;
      *(_QWORD *)(a1 + 32) = v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      v6[1] = 0;
      v6[2] = 0;
      *v6 = v5;
      *(_QWORD *)(a1 + 32) = v6 + 3;
    }
    v7 = *(_QWORD *)(a1 + 24);
    v8 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v7) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v16 + 8);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 24 * v8 + 8;
}

uint64_t sub_22F4419AC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (**v6)(void);
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  *a2 = 0;
  v9 = v3;
  v4 = (_QWORD *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v10);
    }
    else
    {
      v11 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v5 = llvm::Linker::linkInModule();
  if (v11 == v10)
  {
    v6 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_8;
    v6 = (void (**)(void))(*v11 + 40);
  }
  (*v6)();
LABEL_8:
  if (v9)
  {
    v7 = MEMORY[0x23489F15C](v9);
    MEMORY[0x2348A0E9C](v7, 0x10B2C407FF26C1CLL);
  }
  return v5;
}

uint64_t sub_22F441ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  llvm::air *v11;
  _QWORD *v12;
  uint64_t v13;
  void (**v14)(void);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[96];
  char v19;
  _BYTE v20[20];
  uint64_t v21[3];
  uint64_t *v22;
  char v23;
  uint64_t v24[26];

  v24[25] = *MEMORY[0x24BDAC8D0];
  v6 = (_DWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager() + 72);
  llvm::AnalysisManager<llvm::Function>::AnalysisManager();
  llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::AnalysisManager();
  llvm::AnalysisManager<llvm::Module>::AnalysisManager();
  llvm::StandardInstrumentations::StandardInstrumentations();
  sub_22F443240(a1 + 984);
  llvm::PipelineTuningOptions::PipelineTuningOptions((llvm::PipelineTuningOptions *)v20);
  v18[0] = 0;
  v19 = 0;
  MEMORY[0x23489D5B4](a1 + 2312, a2, 0, v20, v18, a1 + 984);
  if (v19)
  {
    sub_22E3B9218((uint64_t)v18);
    v19 = 0;
  }
  *(_QWORD *)(a1 + 4304) = a3;
  llvm::StandardInstrumentations::registerCallbacks();
  v21[0] = MEMORY[0x24BED6000];
  v7 = sub_22E3B98B8(v6, v21);
  if (!v7[1])
  {
    v10 = v7;
    v11 = (llvm::air *)operator new();
    llvm::air::getAIRTargetIRAnalysis(v11);
    *(_QWORD *)v11 = &unk_24FA2E2E8;
    v12 = (_QWORD *)((char *)v11 + 8);
    if (v22)
    {
      if (v22 == v21)
      {
        *((_QWORD *)v11 + 4) = v12;
        (*(void (**)(uint64_t *))(v21[0] + 24))(v21);
      }
      else
      {
        *((_QWORD *)v11 + 4) = v22;
        v22 = 0;
      }
    }
    else
    {
      *((_QWORD *)v11 + 4) = 0;
    }
    v13 = v10[1];
    v10[1] = v11;
    if (v13)
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 8))(v13, v12);
    if (v22 == v21)
    {
      v14 = (void (**)(void))(v21[0] + 32);
    }
    else
    {
      if (!v22)
        goto LABEL_4;
      v14 = (void (**)(void))(*v22 + 40);
    }
    (*v14)();
  }
LABEL_4:
  v21[0] = MEMORY[0x24BED63A8];
  v8 = sub_22E3B98B8(v6, v21);
  if (!v8[1])
  {
    v15 = v8;
    v16 = operator new();
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl();
    MEMORY[0x23489D7F4](v21, v24);
    v23 = 1;
    sub_22F243D5C(v24);
    *(_QWORD *)v16 = &unk_24FA2E340;
    *(_BYTE *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 208) = 0;
    if (v23)
    {
      MEMORY[0x23489D7F4](v16 + 8, v21);
      *(_BYTE *)(v16 + 208) = 1;
    }
    v17 = v15[1];
    v15[1] = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v23)
      sub_22F243D5C(v21);
  }
  llvm::PassBuilder::registerModuleAnalyses();
  llvm::PassBuilder::registerCGSCCAnalyses();
  llvm::PassBuilder::registerFunctionAnalyses();
  llvm::PassBuilder::registerLoopAnalyses();
  llvm::PassBuilder::crossRegisterProxies();
  return a1;
}

BOOL sub_22F441DD4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[3];
  char v15;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;

  sub_22F442820(&v17, *(llvm::LLVMContext **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 280);
  if (v2)
    sub_22F22B91C(a1 + 88, v2);
  if (*(_DWORD *)(a1 + 116))
    sub_22F217AD4(a1);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 120))
    goto LABEL_6;
  if (*(_DWORD *)(a1 + 200))
  {
    sub_22F218688(a1);
LABEL_6:
    v3 = 0;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 116) && !sub_22F218CF0(a1))
    goto LABEL_6;
  sub_22F21932C((uint64_t)v16, a1);
  if (!v16[48])
    goto LABEL_6;
  sub_22F21EBEC();
  v3 = v15 != 0;
  if (v15)
  {
    sub_22F220030(&v13, (void **)(a1 + 376), (void **)(a1 + 400));
    v6 = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 464) = v13;
    if (v6)
    {
      v7 = sub_22E3B45BC(v6);
      MEMORY[0x2348A0E9C](v7, 0x10B2C408BDE5BD4);
    }
    v8 = (uint64_t *)v14[0];
    v9 = (uint64_t *)v14[1];
    while (v8 != v9)
    {
      v10 = *v8;
      *v8 = 0;
      v12 = v10;
      llvm::air::Archive::addMember();
      if (v12)
      {
        v11 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v11, 0x10B2C407FF26C1CLL);
      }
      v8 += 3;
    }
  }
  sub_22F4432CC(v14);
  sub_22F442C38((uint64_t)v16);
LABEL_7:
  llvm::LLVMContext::setDiagnosticHandler();
  v4 = v18;
  v18 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3;
}

uint64_t sub_22F441F64()
{
  llvm::air::ErrorHandler::warning();
  return 0;
}

uint64_t sub_22F441FA0(int a1, llvm::object::Binary *this)
{
  uint64_t v2;
  const char *v4;
  __int16 v5;
  uint64_t v6[4];
  __int16 v7;
  _BYTE v8[40];

  v7 = 1283;
  v6[0] = (uint64_t)"ignoring file '";
  v6[2] = llvm::object::Binary::getFileName(this);
  v6[3] = v2;
  v4 = "', file type is not compatible with lowering libraries";
  v5 = 259;
  sub_22E78CF44(v6, (uint64_t *)&v4, (uint64_t)v8);
  llvm::air::ErrorHandler::warning();
  return 0;
}

uint64_t sub_22F442018()
{
  llvm::air::ErrorHandler::warning();
  return 0;
}

uint64_t sub_22F442054(int a1, llvm::object::Binary *this)
{
  uint64_t v2;
  const char *v4;
  __int16 v5;
  uint64_t v6[4];
  __int16 v7;
  _BYTE v8[40];

  v7 = 1283;
  v6[0] = (uint64_t)"ignoring file '";
  v6[2] = llvm::object::Binary::getFileName(this);
  v6[3] = v2;
  v4 = "', file type is not compatible with ci libraries";
  v5 = 259;
  sub_22E78CF44(v6, (uint64_t *)&v4, (uint64_t)v8);
  llvm::air::ErrorHandler::warning();
  return 0;
}

uint64_t sub_22F4420CC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  llvm::air *v9;
  _QWORD *v10;
  uint64_t v11;
  void (**v12)(void);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[96];
  char v17;
  _BYTE v18[20];
  uint64_t v19[3];
  uint64_t *v20;
  char v21;
  uint64_t v22[26];

  v22[25] = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager() + 72);
  llvm::AnalysisManager<llvm::Function>::AnalysisManager();
  llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::AnalysisManager();
  llvm::AnalysisManager<llvm::Module>::AnalysisManager();
  llvm::StandardInstrumentations::StandardInstrumentations();
  sub_22F443240(a1 + 984);
  llvm::PipelineTuningOptions::PipelineTuningOptions((llvm::PipelineTuningOptions *)v18);
  v16[0] = 0;
  v17 = 0;
  MEMORY[0x23489D5B4](a1 + 2312, a2, 0, v18, v16, a1 + 984);
  if (v17)
  {
    sub_22E3B9218((uint64_t)v16);
    v17 = 0;
  }
  llvm::StandardInstrumentations::registerCallbacks();
  v19[0] = MEMORY[0x24BED6000];
  v5 = sub_22E3B98B8(v4, v19);
  if (!v5[1])
  {
    v8 = v5;
    v9 = (llvm::air *)operator new();
    llvm::air::getAIRTargetIRAnalysis(v9);
    *(_QWORD *)v9 = &unk_24FA2E2E8;
    v10 = (_QWORD *)((char *)v9 + 8);
    if (v20)
    {
      if (v20 == v19)
      {
        *((_QWORD *)v9 + 4) = v10;
        (*(void (**)(uint64_t *))(v19[0] + 24))(v19);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v20;
        v20 = 0;
      }
    }
    else
    {
      *((_QWORD *)v9 + 4) = 0;
    }
    v11 = v8[1];
    v8[1] = v9;
    if (v11)
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 8))(v11, v10);
    if (v20 == v19)
    {
      v12 = (void (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
        goto LABEL_4;
      v12 = (void (**)(void))(*v20 + 40);
    }
    (*v12)();
  }
LABEL_4:
  v19[0] = MEMORY[0x24BED63A8];
  v6 = sub_22E3B98B8(v4, v19);
  if (!v6[1])
  {
    v13 = v6;
    v14 = operator new();
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl();
    MEMORY[0x23489D7F4](v19, v22);
    v21 = 1;
    sub_22F243D5C(v22);
    *(_QWORD *)v14 = &unk_24FA2E340;
    *(_BYTE *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 208) = 0;
    if (v21)
    {
      MEMORY[0x23489D7F4](v14 + 8, v19);
      *(_BYTE *)(v14 + 208) = 1;
    }
    v15 = v13[1];
    v13[1] = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v21)
      sub_22F243D5C(v19);
  }
  llvm::PassBuilder::registerModuleAnalyses();
  llvm::PassBuilder::registerCGSCCAnalyses();
  llvm::PassBuilder::registerFunctionAnalyses();
  llvm::PassBuilder::registerLoopAnalyses();
  llvm::PassBuilder::crossRegisterProxies();
  return a1;
}

uint64_t sub_22F4423DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;

  v3 = a1 + 480;
  v4 = (_BYTE *)(a1 + 4792);
  if (*(_BYTE *)(a1 + 4792))
    sub_22F4405E4(v3);
  result = sub_22F44243C(v3, a2, a1 + 456);
  *v4 = 1;
  return result;
}

void sub_22F442430()
{
  _BYTE *v0;

  *v0 = 0;
  JUMPOUT(0x22F442404);
}

uint64_t sub_22F44243C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::air *v9;
  uint64_t v10;
  uint64_t *v11;
  void (**v12)(uint64_t *);
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[96];
  char v19;
  _BYTE v20[20];
  uint64_t v21[3];
  uint64_t *v22;
  char v23;
  uint64_t v24[26];

  v24[25] = *MEMORY[0x24BDAC8D0];
  v6 = (_DWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager() + 72);
  llvm::AnalysisManager<llvm::Function>::AnalysisManager();
  llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::AnalysisManager();
  llvm::AnalysisManager<llvm::Module>::AnalysisManager();
  llvm::StandardInstrumentations::StandardInstrumentations();
  sub_22F443240(a1 + 984);
  llvm::PipelineTuningOptions::PipelineTuningOptions((llvm::PipelineTuningOptions *)v20);
  v18[0] = 0;
  v19 = 0;
  MEMORY[0x23489D5B4](a1 + 2312, a2, 0, v20, v18, a1 + 984);
  if (v19)
  {
    sub_22E3B9218((uint64_t)v18);
    v19 = 0;
  }
  *(_QWORD *)(a1 + 4304) = a3;
  llvm::StandardInstrumentations::registerCallbacks();
  v21[0] = MEMORY[0x24BED6000];
  v7 = sub_22E3B98B8(v6, v21);
  if (!v7[1])
  {
    v8 = v7;
    v9 = (llvm::air *)operator new();
    llvm::air::getAIRTargetIRAnalysis(v9);
    *(_QWORD *)v9 = &unk_24FA2E2E8;
    if (v22)
    {
      if (v22 == v21)
      {
        *((_QWORD *)v9 + 4) = (char *)v9 + 8;
        (*(void (**)(uint64_t *))(v21[0] + 24))(v21);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v22;
        v22 = 0;
      }
    }
    else
    {
      *((_QWORD *)v9 + 4) = 0;
    }
    v10 = v8[1];
    v8[1] = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v22;
    if (v22 == v21)
    {
      v12 = (void (**)(uint64_t *))(v21[0] + 32);
      v11 = v21;
LABEL_11:
      (*v12)(v11);
      goto LABEL_12;
    }
    if (v22)
    {
      v12 = (void (**)(uint64_t *))(*v22 + 40);
      goto LABEL_11;
    }
  }
LABEL_12:
  v21[0] = MEMORY[0x24BED63A8];
  v13 = sub_22E3B98B8(v6, v21);
  if (!v13[1])
  {
    v14 = v13;
    v15 = operator new();
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl();
    MEMORY[0x23489D7F4](v21, v24);
    v23 = 1;
    sub_22F243D5C(v24);
    *(_QWORD *)v15 = &unk_24FA2E340;
    *(_BYTE *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 208) = 0;
    if (v23)
    {
      MEMORY[0x23489D7F4](v15 + 8, v21);
      *(_BYTE *)(v15 + 208) = 1;
    }
    v16 = v14[1];
    v14[1] = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v23)
      sub_22F243D5C(v21);
  }
  llvm::PassBuilder::registerModuleAnalyses();
  llvm::PassBuilder::registerCGSCCAnalyses();
  llvm::PassBuilder::registerFunctionAnalyses();
  llvm::PassBuilder::registerLoopAnalyses();
  llvm::PassBuilder::crossRegisterProxies();
  return a1;
}

void sub_22F44275C(uint64_t a1)
{
  sub_22F227980(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F442784(uint64_t a1)
{
  sub_22F227A38(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F4427AC(_QWORD *a1)
{
  sub_22F4404C8(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F4427D4(_QWORD *a1)
{
  sub_22F44051C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F4427FC(uint64_t a1)
{
  sub_22F440570(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F442820(_QWORD *a1, llvm::LLVMContext *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  *a1 = this;
  llvm::LLVMContext::getDiagnosticHandler(this);
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = &off_24FCAFE90;
  *(_BYTE *)(v5 + 24) = 0;
  v7 = v5;
  llvm::LLVMContext::setDiagnosticHandler();
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_22F4428C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4428DC@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[2];
  __int16 v10;
  uint64_t v11;
  _OWORD v12[2];
  __int16 v13;
  uint64_t v14;

  v3 = *a1;
  v4 = a1[1];
  *((_QWORD *)a1 + 1) = 0;
  v12[0] = v3;
  v12[1] = v4;
  v13 = *((_WORD *)a1 + 16);
  v14 = *((_QWORD *)a1 + 5);
  v5 = *a2;
  v6 = a2[1];
  *((_QWORD *)a2 + 1) = 0;
  v9[0] = v5;
  v9[1] = v6;
  v10 = *((_WORD *)a2 + 16);
  v11 = *((_QWORD *)a2 + 5);
  sub_22F44296C(a3, (uint64_t)v12, (uint64_t *)v9);
  v7 = *((_QWORD *)&v9[0] + 1);
  *((_QWORD *)&v9[0] + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  result = *((_QWORD *)&v12[0] + 1);
  *((_QWORD *)&v12[0] + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22F44296C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 16) = 0;
  v6 = (_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  *v6 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *a3;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = a3[1];
  a3[1] = 0;
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a3 + 1);
  *(_WORD *)(a1 + 80) = *((_WORD *)a3 + 16);
  *(_QWORD *)(a1 + 88) = a3[5];
  return a1;
}

uint64_t sub_22F442A30(llvm::StringMapImpl *a1, const void *a2, size_t a3, _OWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v9 = *(_QWORD *)a1;
  v10 = result;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v11 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v11)
  {
    return result;
  }
  v12 = MEMORY[0x23489D23C](a3 + 25, 8);
  v13 = v12;
  v14 = v12 + 24;
  if (a3)
    memcpy((void *)(v12 + 24), a2, a3);
  *(_BYTE *)(v14 + a3) = 0;
  *(_QWORD *)v13 = a3;
  *(_OWORD *)(v13 + 8) = *a4;
  *(_QWORD *)(v9 + 8 * v10) = v13;
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

BOOL sub_22F442B28(void *__s2, size_t __n, uint64_t a3)
{
  uint64_t v3;
  const void **v4;

  v3 = *(_QWORD *)(a3 + 80);
  if (v3)
  {
    if (v3 == __n)
    {
      v4 = (const void **)(a3 + 72);
      return memcmp(*v4, __s2, __n) == 0;
    }
    return 0;
  }
  if (*(_QWORD *)(a3 + 40) != __n)
    return 0;
  if (__n)
  {
    v4 = (const void **)(a3 + 32);
    return memcmp(*v4, __s2, __n) == 0;
  }
  return 1;
}

uint64_t sub_22F442B90(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(result + 96))
    {
      return sub_22F21BCBC(result, (__int128 *)a2);
    }
    else
    {
      v2 = *(_OWORD *)a2;
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)result = v2;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      v3 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(result + 24) = v3;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v4 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v4;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_BYTE *)(result + 96) = 1;
    }
  }
  else if (*(_BYTE *)(result + 96))
  {
    result = sub_22F226BA4(result);
    *(_BYTE *)(result + 96) = 0;
  }
  return result;
}

uint64_t sub_22F442C38(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22F22658C(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

unint64_t **sub_22F442C84(unint64_t **result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v6;

  if (a2 != a3)
  {
    do
    {
      v3 = *a2;
      v4 = *a2 & 6;
      if (*a2 >= 8 && v4 == 4)
      {
        if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8) == 2)
          goto LABEL_14;
      }
      else
      {
        v6 = v3 >= 8 && v4 == 0;
        if (v6 && *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 8) == 21)
          goto LABEL_14;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
  }
LABEL_14:
  *result = a2;
  result[1] = a3;
  result[3] = a3;
  result[4] = a3;
  return result;
}

uint64_t sub_22F442CEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F442D7C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F442E64(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F442D7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((37 * a4) | (unint64_t)(0x2500000000 * a3))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -2)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_22F442E64(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F226630(a1, v6);
  v9 = 0;
  sub_22F442D7C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F442F18(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
    result = (uint64_t)memset(*(void **)result, 255, 16 * v6);
  while (a2 != a3)
  {
    v7 = *a2;
    v8 = a2[1];
    if ((*a2 != -1 || v8 != -1) && (v7 != -2 || v8 != -2))
    {
      v12 = 0;
      result = sub_22F442D7C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v7, v8, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_22F442FCC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_22F443018((uint64_t)(a1 + 3));
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22E3B45BC(v2);
    MEMORY[0x2348A0E9C](v3, 0x10B2C408BDE5BD4);
  }
  return a1;
}

uint64_t sub_22F443018(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22F226C0C(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F443064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_22F226C88(*(_QWORD **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = sub_22E3B46CC(v2);
    MEMORY[0x2348A0E9C](v3, 0x1032C40B18B30E6);
  }
  return a1;
}

uint64_t sub_22F4430B0(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    sub_22F227538((uint64_t *)(a1 + 24));
    operator delete(*v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F443104(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12[6];

  sub_22F442C84(v12, *(unint64_t **)(a1 + 352), *(unint64_t **)(a1 + 360));
  v3 = v12[0];
  v2 = v12[1];
  sub_22F442C84(&v10, *(unint64_t **)(a1 + 352), *(unint64_t **)(a1 + 360));
  if (v3 == v11)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v5 = v3 + 1;
    v3 = v2;
    if (v5 != v2)
    {
      v3 = v5;
      do
      {
        v6 = *v3;
        v7 = *v3 & 6;
        if (*v3 >= 8 && v7 == 4)
        {
          if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFFFF8) == 2)
            goto LABEL_21;
        }
        else
        {
          v9 = v6 >= 8 && v7 == 0;
          if (v9 && *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8) == 21)
            goto LABEL_21;
        }
        ++v3;
      }
      while (v3 != v2);
      v3 = v2;
    }
LABEL_21:
    result = (result + 1);
  }
  while (v3 != v11);
  return result;
}

_QWORD *sub_22F4431D8(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

double sub_22F443240(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x400000000;
  *(_QWORD *)(a1 + 288) = a1 + 304;
  *(_QWORD *)(a1 + 296) = 0x400000000;
  *(_QWORD *)(a1 + 432) = a1 + 448;
  *(_QWORD *)(a1 + 440) = 0x400000000;
  *(_QWORD *)(a1 + 576) = a1 + 592;
  *(_QWORD *)(a1 + 584) = 0x400000000;
  *(_QWORD *)(a1 + 720) = a1 + 736;
  *(_QWORD *)(a1 + 728) = 0x400000000;
  *(_QWORD *)(a1 + 864) = a1 + 880;
  *(_QWORD *)(a1 + 872) = 0x400000000;
  *(_QWORD *)(a1 + 1008) = a1 + 1024;
  *(_QWORD *)(a1 + 1016) = 0x400000000;
  *(_QWORD *)(a1 + 1152) = a1 + 1168;
  *(_QWORD *)(a1 + 1160) = 0x400000000;
  result = 0.0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_DWORD *)(a1 + 1316) = 32;
  return result;
}

void sub_22F4432CC(void **a1)
{
  if (*((_BYTE *)a1 + 24))
  {
    if (*a1)
    {
      sub_22F22998C((uint64_t)a1, *a1);
      operator delete(*a1);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
}

_QWORD *sub_22F44330C(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_22F443388(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F4433AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    MEMORY[0x23489F15C]();
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F4433E4(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    v4 = sub_22E3B46CC(v3);
    MEMORY[0x2348A0E9C](v4, 0x1032C40B18B30E6);
  }
  return a1;
}

uint64_t *sub_22F443444(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      *(_QWORD *)(v6 + v7 - 56) = v6 + v7 - 32;
      result = (uint64_t *)(v6 + v7 - 56);
      v9 = v4 + v7;
      *(_OWORD *)(v6 + v7 - 48) = xmmword_22F44E350;
      if (*(_QWORD *)(v4 + v7 - 48))
        result = (uint64_t *)sub_22E3B2DB8((uint64_t)result, v9 - 56);
      *(_BYTE *)(v8 - 16) = *(_BYTE *)(v9 - 16);
      v10 = *(_QWORD *)(v9 - 8);
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v8 - 8) = v10;
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F443530(uint64_t a1, uint64_t a2)
{
  void (***v3)(uint64_t *__return_ptr);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(void (****)(uint64_t *__return_ptr))(a2 + 8);
  if (v3)
  {
    (**v3)(&v8);
    v4 = v8;
    v8 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v7 = v8;
      v8 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  return a1;
}

_QWORD *sub_22F4435C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _OWORD v10[2];
  __int16 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::object::Archive::Child::getNext((llvm::object::Archive::Child *)a1);
  v4 = v12;
  if ((v12 & 1) != 0)
  {
    v7 = *(_QWORD *)&v10[0];
    *(_QWORD *)&v10[0] = 0;
  }
  else if (v10 == (_OWORD *)a1)
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = v10[0];
    *((_QWORD *)&v10[0] + 1) = 0;
    *(_OWORD *)a1 = v6;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v4 = v12;
    }
    v7 = 0;
    *(_OWORD *)(a1 + 16) = v10[1];
    *(_WORD *)(a1 + 32) = v11;
  }
  *a2 = v7;
  if ((v4 & 1) == 0)
  {
    result = (_QWORD *)*((_QWORD *)&v10[0] + 1);
    *((_QWORD *)&v10[0] + 1) = 0;
    if (!result)
      return result;
    v9 = 2;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  result = *(_QWORD **)&v10[0];
  *(_QWORD *)&v10[0] = 0;
  if (result)
  {
    v9 = 1;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

_QWORD *sub_22F4436C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    v9 = *(_QWORD *)a2;
    v11 = (37 * *a3) & (v6 - 1);
    result = (_QWORD *)(*(_QWORD *)a2 + 8 * v11);
    v12 = *result;
    if (*a3 == *result)
    {
LABEL_6:
      v10 = 0;
      goto LABEL_4;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -4094)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8190;
      if (v15)
        v13 = result;
      v16 = v11 + v14++;
      v11 = v16 & (v6 - 1);
      result = (_QWORD *)(v9 + 8 * v11);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_6;
    }
    if (v13)
      v7 = v13;
    else
      v7 = result;
  }
  else
  {
    v7 = 0;
  }
  result = sub_22F4437A4(a2, a3, v7);
  *result = *a3;
  v9 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 16);
  v10 = 1;
LABEL_4:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 8 * v6;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F4437A4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_8;
    sub_22F228754(a1, v6);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = (37 * *a2) & v15;
      a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v16);
      v17 = *a3;
      if (*a2 == *a3)
        goto LABEL_8;
      v11 = 0;
      v18 = 1;
      while (v17 != -4094)
      {
        if (v11)
          v19 = 0;
        else
          v19 = v17 == -8190;
        if (v19)
          v11 = a3;
        v20 = v16 + v18++;
        v16 = v20 & v15;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v16);
        v17 = *a3;
        if (*a2 == *a3)
          goto LABEL_8;
      }
      goto LABEL_6;
    }
LABEL_23:
    a3 = 0;
    goto LABEL_8;
  }
  sub_22F228754(a1, 2 * v6);
  v7 = *(_DWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_23;
  v8 = v7 - 1;
  v9 = (37 * *a2) & v8;
  a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
  v10 = *a3;
  if (*a2 == *a3)
    goto LABEL_8;
  v11 = 0;
  v12 = 1;
  while (v10 != -4094)
  {
    if (v11)
      v21 = 0;
    else
      v21 = v10 == -8190;
    if (v21)
      v11 = a3;
    v22 = v9 + v12++;
    v9 = v22 & v8;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
    v10 = *a3;
    if (*a2 == *a3)
      goto LABEL_8;
  }
LABEL_6:
  if (v11)
    a3 = v11;
LABEL_8:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4094)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F443928(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_22F54B070, 8 * v6);
  for (; a2 != a3; ++a2)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF002)
    {
      v8 = *(_DWORD *)(a1 + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -4094)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -8190;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v15 & v8));
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_8;
        }
        if (v12)
          v10 = v12;
      }
LABEL_8:
      *v10 = v7;
      ++*(_DWORD *)(a1 + 8);
    }
  }
}

void sub_22F443A24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FCAFF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F443A34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FCAFF10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F443A64(uint64_t a1)
{
  return sub_22F228A74(a1 + 24);
}

uint64_t sub_22F443A70(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_22F44E350;
  sub_22E61131C(a1, a2, &a2[a3]);
  v4 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(a1 + 16))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_BYTE *)(*(_QWORD *)a1 + v4) = 0;
  return a1;
}

void *sub_22F443AE0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443AF0(a2, a3, a4);
}

void *sub_22F443AF0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F228CB8();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F443B8C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443B9C(a2, a3, a4);
}

void *sub_22F443B9C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F228D94();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

_QWORD *sub_22F443C34(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24FCB0010;
  sub_22E3B3AD0((uint64_t)(a1 + 6));
  v2 = (_QWORD *)a1[5];
  if (v2 == a1 + 2)
  {
    v3 = 4;
    v2 = a1 + 2;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void *sub_22F443C94(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443CA4(a2, a3, a4);
}

void *sub_22F443CA4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F228FAC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

_QWORD *sub_22F443D3C(_QWORD *a1)
{
  *a1 = &off_24FCB0050;
  sub_22F227708((uint64_t)(a1 + 1));
  return a1;
}

void *sub_22F443D6C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443D7C(a2, a3, a4);
}

void *sub_22F443D7C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F229288();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F443E18(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443E28(a2, a3, a4);
}

void *sub_22F443E28(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F229364();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F443EC4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443ED4(a2, a3, a4);
}

void *sub_22F443ED4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F229440();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F443F70(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F443F80(a2, a3, a4);
}

void *sub_22F443F80(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22951C();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

BOOL sub_22F444018(uint64_t *a1, llvm::Value *this)
{
  _DWORD *Name;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  Name = (_DWORD *)llvm::Value::getName(this);
  if (v5 >= 4 && *Name == 779250017)
    return 1;
  v6 = *a1;
  llvm::Value::getName(this);
  sub_22F2228A0(v8, v6);
  return v8[0] != *(_QWORD *)(v6 + 80) + 8 * *(unsigned int *)(v6 + 88);
}

void *sub_22F4440A8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F4440B8(a2, a3, a4);
}

void *sub_22F4440B8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F229CFC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

llvm::StringMapImpl *sub_22F444150(llvm::StringMapImpl *this, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this);
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(_QWORD *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = v4 + 8 * v5 + 8;
      v9 = v6 + 8 * v5 + 8;
      do
      {
        v10 = *(size_t **)(*a2 + 8 * v7);
        if (v10)
          v11 = v10 + 1 == 0;
        else
          v11 = 1;
        if (v11)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v10;
        }
        else
        {
          v12 = *v10;
          v13 = MEMORY[0x23489D23C](*v10 + 9, 8);
          v14 = (_QWORD *)v13;
          v15 = v13 + 8;
          if (v12)
            memcpy((void *)(v13 + 8), v10 + 1, v12);
          *(_BYTE *)(v15 + v12) = 0;
          *v14 = v12;
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v14;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v9 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

void sub_22F444258(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void *sub_22F444280(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F444290(a2, a3, a4);
}

void *sub_22F444290(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22A1DC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F44432C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F44433C(a2, a3, a4);
}

void *sub_22F44433C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22A2B8();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F4443D8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F4443E8(a2, a3, a4);
}

void *sub_22F4443E8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22A394();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F444484(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F444494(a2, a3, a4);
}

void *sub_22F444494(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22A538();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F444530(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F444540(a2, a3, a4);
}

void *sub_22F444540(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22A614();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F4445DC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F4445EC(a2, a3, a4);
}

void *sub_22F4445EC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22A6F0();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t sub_22F444688()
{
  return llvm::SimplifyCFGPass::printPipeline();
}

_QWORD *sub_22F444690(_QWORD *a1)
{
  *a1 = off_24FCB0460;
  sub_22F2278FC((uint64_t)(a1 + 1));
  return a1;
}

void *sub_22F4446C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F4446D0(a2, a3, a4);
}

void *sub_22F4446D0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22AB00();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t sub_22F444768(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_24FCB04A0;
  v3 = (void **)(a1 + 8);
  sub_22E3B4AF8(&v3);
  return a1;
}

uint64_t sub_22F4447AC()
{
  return llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::printPipeline();
}

void *sub_22F4447B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F4447C8(a2, a3, a4);
}

void *sub_22F4447C8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22ACF4();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F444864(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F444874(a2, a3, a4);
}

void *sub_22F444874(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22ADD0();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void *sub_22F444910(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F444920(a2, a3, a4);
}

void *sub_22F444920(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22F22AEAC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void sub_22F4449B8(uint64_t a1, uint64_t *a2)
{
  uint64_t **v2;
  char v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Section;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  void *v14;
  int SymbolFlags;
  _BYTE v17[72];
  unint64_t v18;
  void *v19[3];
  _QWORD v20[19];

  v20[17] = *MEMORY[0x24BDAC8D0];
  v18 = (unint64_t)a2;
  memset(&v20[7], 0, 72);
  memset(&v20[1], 0, 40);
  memset(v19, 0, sizeof(v19));
  v20[0] = &v20[2];
  HIDWORD(v20[1]) = 4;
  v20[6] = &v20[8];
  v2 = sub_22F22BCE0((uint64_t **)(a1 + 120), &v18, (uint64_t **)&v18, (uint64_t)v19);
  v4 = v3;
  sub_22F215704((uint64_t)v19);
  if (v4)
    llvm::ModuleSymbolTable::addModule();
  v5 = (char *)v2[18];
  v6 = (char *)v2[19] - v5;
  if (v6)
  {
    v7 = 8 * (v6 >> 3);
    do
    {
      v8 = *(_QWORD *)v5;
      v19[0] = v20;
      *(_OWORD *)&v19[1] = xmmword_22F44E300;
      sub_22F242C48((uint64_t)v17, (uint64_t)v19);
      llvm::ModuleSymbolTable::printSymbolName();
      Section = (_QWORD *)llvm::GlobalValue::getSection((llvm::GlobalValue *)(v8 & 0xFFFFFFFFFFFFFFF8));
      v11 = v10;
      v12 = v19[0];
      v13 = v18 & 0xFFFFFFFFFFFFFFF9 | 2;
      v14 = v19[1];
      SymbolFlags = llvm::ModuleSymbolTable::getSymbolFlags();
      sub_22F22B004(a1, v13, v12, (unint64_t)v14, SymbolFlags, Section, v11);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v17);
      if (v19[0] != v20)
        free(v19[0]);
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
  }
}

uint64_t sub_22F444B68(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_22F22BDCC(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  v4 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = v4;
  v5 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = v5;
  return a1;
}

uint64_t *sub_22F444BF8(llvm::StringMapImpl *a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v11 = i[1];
        ++i;
        v9 = v11;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  *i = sub_22F444CC8(a2, a3, a4);
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F444CC8(const void *a1, size_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x23489D23C](a2 + 97, 8);
  v7 = v6;
  v8 = v6 + 96;
  if (a2)
    memcpy((void *)(v6 + 96), a1, a2);
  *(_BYTE *)(v8 + a2) = 0;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = *a3;
  *(_QWORD *)(v7 + 16) = v7 + 32;
  *(_QWORD *)(v7 + 24) = 0x800000000;
  if (a3[4])
    sub_22F309A2C(v7 + 16, (uint64_t)(a3 + 2));
  return v7;
}

BOOL sub_22F444D60(uint64_t *a1)
{
  unint64_t v2;
  BOOL v3;

  v2 = a1[11];
  v3 = v2 >= 8 && (a1[11] & 6) == 4;
  if (v3 && *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) == 2)
    sub_22F22C038((uint64_t)a1);
  else
    sub_22F22C168(a1);
  return *(_DWORD *)(a1[2] + 120) == 0;
}

unint64_t sub_22F444DC4(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;

  v2 = sub_22F444F50(a1);
  if ((_DWORD)v2
    || (v2 = sub_22F22D0AC(a1), (_DWORD)v2)
    || (v2 = sub_22F444FA0(a1), (_DWORD)v2)
    || (v2 = sub_22F22DC18(a1), (_DWORD)v2)
    || (v2 = sub_22F22E384(a1), (_DWORD)v2)
    || (v2 = sub_22F446E94(a1), (_DWORD)v2))
  {
    v3 = v2;
  }
  else
  {
    std::system_category();
    v3 = 0;
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t sub_22F444E58(uint64_t *a1)
{
  unint64_t v2;
  unsigned int v3;

  v2 = sub_22F444F50((uint64_t)a1);
  if ((_DWORD)v2
    || (v2 = sub_22F22D6AC(a1), (_DWORD)v2)
    || (v2 = sub_22F444FA0((uint64_t)a1), (_DWORD)v2)
    || (v2 = sub_22F22DFCC((uint64_t)a1), (_DWORD)v2)
    || (v2 = sub_22F22E598((uint64_t)a1), (_DWORD)v2)
    || (v2 = sub_22F446EF8((uint64_t)a1), (_DWORD)v2))
  {
    v3 = v2;
  }
  else
  {
    std::system_category();
    v3 = 0;
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t sub_22F444EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_22F258024(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    v4 = sub_22E3B45BC(v3);
    MEMORY[0x2348A0E9C](v4, 0x10B2C408BDE5BD4);
  }
  return a1;
}

uint64_t sub_22F444F50(uint64_t a1)
{
  uint64_t v2;

  sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 16), "!<arch>\n");
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 && *(_DWORD *)(v2 + 72))
    return *(_QWORD *)(v2 + 72);
  std::system_category();
  return 0;
}

unint64_t sub_22F444FA0(uint64_t a1)
{
  char v2;
  const void *v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  const void *v9;
  size_t v10;

  v2 = *(_BYTE *)(*(_QWORD *)a1 + 55);
  if (v2 >= 0)
    v3 = (const void *)(*(_QWORD *)a1 + 32);
  else
    v3 = *(const void **)(*(_QWORD *)a1 + 32);
  if (v2 >= 0)
    v4 = v2 & 0x7F;
  else
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = sub_22F445058(a1, "__.CMDLINE", 0xAuLL, v3, v4);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else
  {
    v8 = *(_BYTE *)(*(_QWORD *)a1 + 79);
    if (v8 >= 0)
      v9 = (const void *)(*(_QWORD *)a1 + 56);
    else
      v9 = *(const void **)(*(_QWORD *)a1 + 56);
    if (v8 >= 0)
      v10 = v8 & 0x7F;
    else
      v10 = *(_QWORD *)(*(_QWORD *)a1 + 64);
    v5 = sub_22F445058(a1, "__.WDIR", 7uLL, v9, v10);
    v6 = v5;
    if (!(_DWORD)v5)
    {
      std::system_category();
      LODWORD(v5) = 0;
    }
  }
  return v6 & 0xFFFFFFFF00000000 | v5;
}

unint64_t sub_22F445058(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  uint64_t v37;
  void *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  llvm::raw_ostream *v48;
  _BYTE *v49;
  unint64_t *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  _QWORD v55[5];
  unint64_t v56;

  if (!a5)
    goto LABEL_63;
  v10 = *(_QWORD **)(a1 + 16);
  v11 = (*(uint64_t (**)(_QWORD *))(*v10 + 80))(v10);
  v56 = v10[2] - (v10[4] + v11) + ((a3 + v10[4] + v11 - v10[2] + 67) & 0xFFFFFFFFFFFFFFF8) - 60;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  v12 = *(llvm::raw_ostream **)(a1 + 16);
  v53 = "#1/";
  v54 = 259;
  v52 = 268;
  v51 = &v56;
  sub_22E78CF44((uint64_t *)&v53, (uint64_t *)&v51, (uint64_t)v55);
  llvm::Twine::print((llvm::Twine *)v55, v12);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v17 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v17 + 80))(v17);
  llvm::raw_ostream::indent(v17);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  llvm::raw_ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v18 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v18 + 80))(v18);
  llvm::raw_ostream::indent(v18);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  getuid();
  llvm::raw_ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v19 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v19 + 80))(v19);
  llvm::raw_ostream::indent(v19);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  getgid();
  llvm::raw_ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v20 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v20 + 80))(v20);
  llvm::raw_ostream::indent(v20);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  v55[0] = &unk_24FCB0610;
  v55[1] = "%o";
  v55[2] = 420;
  llvm::raw_ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v21 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v21 + 80))(v21);
  llvm::raw_ostream::indent(v21);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  llvm::raw_ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v22 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v22 + 80))(v22);
  llvm::raw_ostream::indent(v22);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v23 = *(_QWORD **)(a1 + 16);
  v24 = (*(uint64_t (**)(_QWORD *))(*v23 + 80))(v23);
  v25 = v23[4];
  v26 = v23[2];
  v27 = *(_QWORD *)(a1 + 16);
  v28 = *(void **)(v27 + 32);
  if (a3 <= *(_QWORD *)(v27 + 24) - (_QWORD)v28)
  {
    if (a3)
    {
      memcpy(v28, a2, a3);
      *(_QWORD *)(v27 + 32) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)a2);
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v29 = v56;
  v30 = *(_QWORD **)(a1 + 16);
  v31 = (*(uint64_t (**)(_QWORD *))(*v30 + 80))(v30);
  v32 = v30[4];
  v33 = v30[2];
  if (v24 + v25 + v29 - (v31 + v26 + v32) + v33)
  {
    v34 = v24 + v29 + v25 + v33 - v31 - v26 - v32;
    do
    {
      v35 = *(llvm::raw_ostream **)(a1 + 16);
      v36 = (_BYTE *)*((_QWORD *)v35 + 4);
      if ((unint64_t)v36 >= *((_QWORD *)v35 + 3))
      {
        llvm::raw_ostream::write(v35);
      }
      else
      {
        *((_QWORD *)v35 + 4) = v36 + 1;
        *v36 = 0;
      }
      --v34;
    }
    while (v34);
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v37 = *(_QWORD *)(a1 + 16);
  v38 = *(void **)(v37 + 32);
  if (a5 <= *(_QWORD *)(v37 + 24) - (_QWORD)v38)
  {
    memcpy(v38, a4, a5);
    *(_QWORD *)(v37 + 32) += a5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)a4);
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v39 = *(llvm::raw_ostream **)(a1 + 16);
  v40 = (_BYTE *)*((_QWORD *)v39 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
  {
    llvm::raw_ostream::write(v39);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 10;
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    if (*(_DWORD *)(v13 + 72))
      goto LABEL_4;
  }
  v41 = *(_QWORD **)(a1 + 16);
  v42 = (*(uint64_t (**)(_QWORD *))(*v41 + 80))(v41);
  v43 = v41[4];
  v44 = v41[2];
  v45 = v43 - v44 + v42;
  v46 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v46 != v45)
  {
    v47 = v42 + v43 - v44 - v46;
    do
    {
      v48 = *(llvm::raw_ostream **)(a1 + 16);
      v49 = (_BYTE *)*((_QWORD *)v48 + 4);
      if ((unint64_t)v49 >= *((_QWORD *)v48 + 3))
      {
        llvm::raw_ostream::write(v48);
      }
      else
      {
        *((_QWORD *)v48 + 4) = v49 + 1;
        *v49 = 10;
      }
    }
    while (!__CFADD__(v47++, 1));
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 && *(_DWORD *)(v13 + 72))
  {
LABEL_4:
    v14 = *(_QWORD *)(v13 + 72);
    v15 = v14 & 0xFFFFFFFF00000000;
  }
  else
  {
LABEL_63:
    std::system_category();
    LODWORD(v14) = 0;
    v15 = 0;
  }
  return v15 & 0xFFFFFFFF00000000 | v14;
}

unint64_t sub_22F44572C(uint64_t *a1)
{
  if (sub_22F445764(a1))
    return sub_22F445884(a1);
  else
    return sub_22F4457D0(a1);
}

BOOL sub_22F445764(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t i;

  v2 = *a1;
  v3 = sub_22F22CFE8(*a1);
  v4 = v3 + sub_22F445938(v2) + 88;
  for (i = a1[6]; i != a1[7]; i += 56)
    v4 += *(_QWORD *)(i + 32);
  return HIDWORD(v4) == 0;
}

unint64_t sub_22F4457D0(uint64_t *a1)
{
  uint64_t v2;
  size_t v3;
  const char *v4;
  int v5;
  unint64_t v6;
  unsigned int v7;

  v2 = *a1;
  if (*(_BYTE *)(v2 + 104))
    v3 = 16;
  else
    v3 = 9;
  if (*(_BYTE *)(v2 + 104))
    v4 = "__.SYMDEF SORTED";
  else
    v4 = "__.SYMDEF";
  v5 = sub_22F22CFE8(v2);
  v6 = sub_22F445990((uint64_t)a1, v4, v3);
  if ((_DWORD)v6 || (v6 = sub_22F22E7D4((uint64_t)a1, (uint64_t)v4, v3, v5), (_DWORD)v6))
  {
    v7 = v6;
  }
  else
  {
    std::system_category();
    v7 = 0;
  }
  return v6 & 0xFFFFFFFF00000000 | v7;
}

unint64_t sub_22F445884(uint64_t *a1)
{
  uint64_t v2;
  size_t v3;
  const char *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  v2 = *a1;
  if (*(_BYTE *)(v2 + 104))
    v3 = 19;
  else
    v3 = 12;
  if (*(_BYTE *)(v2 + 104))
    v4 = "__.SYMDEF_64 SORTED";
  else
    v4 = "__.SYMDEF_64";
  v5 = sub_22F22EB9C(v2);
  v6 = sub_22F445990((uint64_t)a1, v4, v3);
  if ((_DWORD)v6 || (v6 = sub_22F22EC60((uint64_t)a1, (uint64_t)v4, v3, v5), (_DWORD)v6))
  {
    v7 = v6;
  }
  else
  {
    std::system_category();
    v7 = 0;
  }
  return v6 & 0xFFFFFFFF00000000 | v7;
}

unint64_t sub_22F445938(uint64_t a1)
{
  char v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_BYTE *)(a1 + 55);
  v2 = v1;
  v3 = v1 & 0x7F;
  if (v2 < 0)
    v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 80;
  else
    v4 = 0;
  v5 = *(_BYTE *)(a1 + 79);
  v6 = v5;
  v7 = v5 & 0x7F;
  if (v6 < 0)
    v7 = *(_QWORD *)(a1 + 64);
  if (v7)
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 80;
  else
    v8 = 0;
  return v8 + v4;
}

unint64_t sub_22F445990(uint64_t a1, const void *a2, size_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  unint64_t *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  _QWORD v37[5];
  unint64_t v38;

  v6 = *(_QWORD **)(a1 + 16);
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 80))(v6);
  v38 = v6[2] - (v6[4] + v7) + ((a3 + v6[4] + v7 - v6[2] + 67) & 0xFFFFFFFFFFFFFFF8) - 60;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  v8 = *(llvm::raw_ostream **)(a1 + 16);
  v35 = "#1/";
  v36 = 259;
  v34 = 268;
  v33 = &v38;
  sub_22E78CF44((uint64_t *)&v35, (uint64_t *)&v33, (uint64_t)v37);
  llvm::Twine::print((llvm::Twine *)v37, v8);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
    goto LABEL_3;
  v13 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 80))(v13);
  llvm::raw_ostream::indent(v13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  llvm::raw_ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v14 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v14 + 80))(v14);
  llvm::raw_ostream::indent(v14);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  getuid();
  llvm::raw_ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v15 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v15 + 80))(v15);
  llvm::raw_ostream::indent(v15);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  getgid();
  llvm::raw_ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v16 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v16 + 80))(v16);
  llvm::raw_ostream::indent(v16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  v37[0] = &unk_24FCB0610;
  v37[1] = "%o";
  v37[2] = 420;
  llvm::raw_ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v17 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v17 + 80))(v17);
  llvm::raw_ostream::indent(v17);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  llvm::raw_ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v18 = *(llvm::raw_ostream **)(a1 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v18 + 80))(v18);
  llvm::raw_ostream::indent(v18);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v19 = *(_QWORD **)(a1 + 16);
  v20 = (*(uint64_t (**)(_QWORD *))(*v19 + 80))(v19);
  v21 = v19[4];
  v22 = v19[2];
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(void **)(v23 + 32);
  if (a3 <= *(_QWORD *)(v23 + 24) - (_QWORD)v24)
  {
    if (a3)
    {
      memcpy(v24, a2, a3);
      *(_QWORD *)(v23 + 32) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)a2);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 72))
      goto LABEL_3;
  }
  v25 = v38;
  v26 = *(_QWORD **)(a1 + 16);
  v27 = (*(uint64_t (**)(_QWORD *))(*v26 + 80))(v26);
  v28 = v26[4];
  v29 = v26[2];
  if (v20 + v21 + v25 - (v27 + v22 + v28) + v29)
  {
    v30 = v20 + v25 + v21 + v29 - v27 - v22 - v28;
    do
    {
      v31 = *(llvm::raw_ostream **)(a1 + 16);
      v32 = (_BYTE *)*((_QWORD *)v31 + 4);
      if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
      {
        llvm::raw_ostream::write(v31);
      }
      else
      {
        *((_QWORD *)v31 + 4) = v32 + 1;
        *v32 = 0;
      }
      --v30;
    }
    while (v30);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
  {
LABEL_3:
    v10 = *(_OWORD *)(v9 + 72);
    v11 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFF00000000;
  }
  else
  {
    std::system_category();
    v11 = 0;
    LODWORD(v10) = 0;
  }
  return v11 | v10;
}

__n128 sub_22F445F54(__n128 *a1, uint64_t a2, const void *a3, size_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  _QWORD v41[5];
  unint64_t v42;

  v8 = *(_QWORD **)(a2 + 16);
  v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 80))(v8);
  v42 = v8[2] - (v8[4] + v9) + ((a4 + v8[4] + v9 - v8[2] + 67) & 0xFFFFFFFFFFFFFFF8) - 60;
  v10 = *(_QWORD **)(a2 + 16);
  v11 = (*(uint64_t (**)(_QWORD *))(*v10 + 80))(v10);
  v35 = v10[4];
  v36 = v10[2];
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  v12 = *(llvm::raw_ostream **)(a2 + 16);
  v39 = "#1/";
  v40 = 259;
  v38 = 268;
  v37 = &v42;
  sub_22E78CF44((uint64_t *)&v39, (uint64_t *)&v37, (uint64_t)v41);
  llvm::Twine::print((llvm::Twine *)v41, v12);
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v13 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 80))(v13);
  llvm::raw_ostream::indent(v13);
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v14 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v14 + 80))(v14);
  llvm::raw_ostream::indent(v14);
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  getuid();
  llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v15 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v15 + 80))(v15);
  llvm::raw_ostream::indent(v15);
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  getgid();
  llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v16 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v16 + 80))(v16);
  llvm::raw_ostream::indent(v16);
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  v41[0] = &unk_24FCB0610;
  v41[1] = "%o";
  v41[2] = 420;
  llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v17 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v17 + 80))(v17);
  llvm::raw_ostream::indent(v17);
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a2 + 16));
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v18 = *(_QWORD **)(a2 + 16);
  v19 = (*(uint64_t (**)(_QWORD *))(*v18 + 80))(v18);
  v20 = v18[4];
  v21 = v18[2];
  v22 = *(_QWORD *)(a2 + 16);
  v23 = *(void **)(v22 + 32);
  if (a4 <= *(_QWORD *)(v22 + 24) - (_QWORD)v23)
  {
    if (a4)
    {
      memcpy(v23, a3, a4);
      *(_QWORD *)(v22 + 32) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a2 + 16), (const char *)a3);
  }
  if (!*(_QWORD *)(a2 + 24))
  {
    v34 = *(_QWORD *)(a2 + 8);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 72))
        goto LABEL_26;
    }
  }
  v24 = v42;
  v25 = *(_QWORD **)(a2 + 16);
  v26 = (*(uint64_t (**)(_QWORD *))(*v25 + 80))(v25);
  v28 = v25[4];
  v29 = v25[2];
  if (v19 + v20 + v24 - (v26 + v21 + v28) + v29)
  {
    v30 = v19 + v24 + v20 + v29 - v26 - v21 - v28;
    do
    {
      v31 = *(llvm::raw_ostream **)(a2 + 16);
      v32 = (_BYTE *)*((_QWORD *)v31 + 4);
      if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
      {
        llvm::raw_ostream::write(v31);
      }
      else
      {
        *((_QWORD *)v31 + 4) = v32 + 1;
        *v32 = 0;
      }
      --v30;
    }
    while (v30);
  }
  if (!*(_QWORD *)(a2 + 24) && (v34 = *(_QWORD *)(a2 + 8)) != 0 && *(_DWORD *)(v34 + 72))
  {
LABEL_26:
    a1[1].n128_u8[0] |= 1u;
    result = *(__n128 *)(v34 + 72);
    *a1 = result;
  }
  else
  {
    v33 = v42;
    a1[1].n128_u8[0] &= ~1u;
    a1->n128_u64[0] = (v11 + v35 - v36 + 48) | (v33 << 32);
  }
  return result;
}

_QWORD *sub_22F446580(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _QWORD *result;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  _QWORD v38[5];
  unint64_t v39;

  v8 = *(_QWORD **)(a2 + 16);
  v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 80))(v8);
  v39 = v8[2] - (v8[4] + v9) + ((a4 + v8[4] + v9 - v8[2] + 67) & 0xFFFFFFFFFFFFFFF8) - 60;
  v10 = *(_QWORD **)(a2 + 16);
  v11 = (*(uint64_t (**)(_QWORD *))(*v10 + 80))(v10);
  v32 = v10[2];
  v33 = v10[4];
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  v12 = *(llvm::raw_ostream **)(a2 + 16);
  v36 = "#1/";
  v37 = 259;
  v35 = 268;
  v34 = &v39;
  sub_22E78CF44((uint64_t *)&v36, (uint64_t *)&v34, (uint64_t)v38);
  result = (_QWORD *)llvm::Twine::print((llvm::Twine *)v38, v12);
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v14 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v14 + 80))(v14);
  result = (_QWORD *)llvm::raw_ostream::indent(v14);
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  result = (_QWORD *)llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v15 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v15 + 80))(v15);
  result = (_QWORD *)llvm::raw_ostream::indent(v15);
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  getuid();
  result = (_QWORD *)llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v16 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v16 + 80))(v16);
  result = (_QWORD *)llvm::raw_ostream::indent(v16);
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  getgid();
  result = (_QWORD *)llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v17 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v17 + 80))(v17);
  result = (_QWORD *)llvm::raw_ostream::indent(v17);
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16));
  v38[0] = &unk_24FCB0610;
  v38[1] = "%o";
  v38[2] = 420;
  result = (_QWORD *)llvm::raw_ostream::operator<<();
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v18 = *(llvm::raw_ostream **)(a2 + 16);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v18 + 80))(v18);
  result = (_QWORD *)llvm::raw_ostream::indent(v18);
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  result = (_QWORD *)llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a2 + 16));
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v19 = *(_QWORD **)(a2 + 16);
  v20 = (*(uint64_t (**)(_QWORD *))(*v19 + 80))(v19);
  v21 = v19[4];
  v22 = v19[2];
  v23 = *(_QWORD *)(a2 + 16);
  result = *(_QWORD **)(v23 + 32);
  if (a4 <= *(_QWORD *)(v23 + 24) - (_QWORD)result)
  {
    if (a4)
    {
      result = memcpy(result, a3, a4);
      *(_QWORD *)(v23 + 32) += a4;
    }
  }
  else
  {
    result = (_QWORD *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a2 + 16), (const char *)a3);
  }
  if (!*(_QWORD *)(a2 + 24))
  {
    v31 = *(_QWORD *)(a2 + 8);
    if (v31)
    {
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_26;
    }
  }
  v24 = v39;
  v25 = *(_QWORD **)(a2 + 16);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v25 + 80))(v25);
  v26 = v25[4];
  v27 = v25[2];
  if (v20 + v21 + v24 - ((_QWORD)result + v22 + v26) + v27)
  {
    v28 = v20 + v24 + v21 + v27 - (_QWORD)result - v22 - v26;
    do
    {
      result = *(_QWORD **)(a2 + 16);
      v29 = (_BYTE *)result[4];
      if ((unint64_t)v29 >= result[3])
      {
        result = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result);
      }
      else
      {
        result[4] = v29 + 1;
        *v29 = 0;
      }
      --v28;
    }
    while (v28);
  }
  if (!*(_QWORD *)(a2 + 24) && (v31 = *(_QWORD *)(a2 + 8)) != 0 && *(_DWORD *)(v31 + 72))
  {
LABEL_26:
    v30 = *(_OWORD *)(v31 + 72);
    *(_BYTE *)(a1 + 16) |= 1u;
  }
  else
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)&v30 = v11 + v33 - v32 + 48;
    *((_QWORD *)&v30 + 1) = v39;
  }
  *(_OWORD *)a1 = v30;
  return result;
}

llvm::raw_ostream *sub_22F446BAC(uint64_t a1, _QWORD *a2)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  llvm::raw_ostream *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  uint64_t v17;
  _DWORD *v18;
  int v19;

  v4 = (_DWORD *)a2[2];
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 80))(v4);
  v6 = v4[8];
  v7 = v4[4];
  llvm::air::NormalizeModuleForAIRBitcode();
  result = (llvm::raw_ostream *)llvm::air::WriteAIRBitcodeToFile();
  if (!a2[3])
  {
    v17 = a2[1];
    if (v17)
    {
      if (*(_DWORD *)(v17 + 72))
        goto LABEL_11;
    }
  }
  v9 = (_QWORD *)a2[2];
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD *))(*v9 + 80))(v9);
  v10 = v9[4];
  v11 = v9[2];
  v12 = (char *)result + v10 - v11;
  v13 = (unint64_t)(v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((char *)v13 != v12)
  {
    v14 = (char *)result + v10 - v11 - v13;
    do
    {
      result = (llvm::raw_ostream *)a2[2];
      v15 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v15 >= *((_QWORD *)result + 3))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      }
      else
      {
        *((_QWORD *)result + 4) = v15 + 1;
        *v15 = 10;
      }
    }
    while (!__CFADD__(v14++, 1));
  }
  v17 = a2[1];
  if (v17 && *(_DWORD *)(v17 + 72))
  {
LABEL_11:
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_OWORD *)a1 = *(_OWORD *)(v17 + 72);
  }
  else
  {
    v18 = (_DWORD *)a2[2];
    result = (llvm::raw_ostream *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 80))(v18);
    v19 = (_DWORD)result + v18[8] - v18[4] + v7 - v6 - v5;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_DWORD *)a1 = v19;
  }
  return result;
}

llvm::raw_ostream *sub_22F446D20(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  uint64_t v17;
  _QWORD *v18;
  char *v19;

  v4 = (_QWORD *)a2[2];
  v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
  v6 = v4[4];
  v7 = v4[2];
  llvm::air::NormalizeModuleForAIRBitcode();
  result = (llvm::raw_ostream *)llvm::air::WriteAIRBitcodeToFile();
  if (!a2[3])
  {
    v17 = a2[1];
    if (v17)
    {
      if (*(_DWORD *)(v17 + 72))
        goto LABEL_11;
    }
  }
  v9 = (_QWORD *)a2[2];
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD *))(*v9 + 80))(v9);
  v10 = v9[4];
  v11 = v9[2];
  v12 = (char *)result + v10 - v11;
  v13 = (unint64_t)(v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((char *)v13 != v12)
  {
    v14 = (char *)result + v10 - v11 - v13;
    do
    {
      result = (llvm::raw_ostream *)a2[2];
      v15 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v15 >= *((_QWORD *)result + 3))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      }
      else
      {
        *((_QWORD *)result + 4) = v15 + 1;
        *v15 = 10;
      }
    }
    while (!__CFADD__(v14++, 1));
  }
  v17 = a2[1];
  if (v17 && *(_DWORD *)(v17 + 72))
  {
LABEL_11:
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_OWORD *)a1 = *(_OWORD *)(v17 + 72);
  }
  else
  {
    v18 = (_QWORD *)a2[2];
    result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD *))(*v18 + 80))(v18);
    v19 = (char *)result + v7 - (v5 + v6) + v18[4] - v18[2];
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v19;
  }
  return result;
}

uint64_t sub_22F446E94(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)((*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2]) >> 32)
  {
    v2 = 27;
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v2;
}

uint64_t sub_22F446EF8(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  std::system_category();
  return 0;
}

uint64_t sub_22F446F24(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

_OWORD *sub_22F446F58(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (void **)sub_22E80A9B4(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x38uLL);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = 0;
    v9 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t *sub_22F447000(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = v4 + v7;
      *(_QWORD *)(v8 - 56) = *(_QWORD *)(v4 + v7 - 56);
      v10 = *(_OWORD *)(v4 + v7 - 48);
      v11 = (_QWORD *)(v6 + v7 - 8);
      *(_QWORD *)(v8 - 32) = v11;
      result = (uint64_t *)(v6 + v7 - 32);
      *((_OWORD *)result - 1) = v10;
      result[1] = 0;
      result[2] = 0;
      if (*(_QWORD *)(v4 + v7 - 24))
        result = (uint64_t *)sub_22E3B2DB8((uint64_t)result, v9 - 32);
      *v11 = *(_QWORD *)(v9 - 8);
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v12 = *v3;
  *v3 = v6;
  a2[1] = v12;
  v13 = v3[1];
  v3[1] = a2[2];
  a2[2] = v13;
  v14 = v3[2];
  v3[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F4470D4(uint64_t a1)
{
  uint64_t v1;

  if (*(char *)(a1 + 39) < 0)
    v1 = *(_QWORD *)(a1 + 24);
  else
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 39);
  return (unsigned __int16)(v1 + 5);
}

uint64_t sub_22F4470F4(uint64_t a1, llvm::raw_ostream *this)
{
  char v5[4];

  *(_DWORD *)v5 = *(_DWORD *)(a1 + 8);
  llvm::raw_ostream::write(this, v5);
  return sub_22F449148(this, (const char *)(a1 + 16));
}

uint64_t sub_22F447140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v1 == v2)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0)
        v4 = *(_QWORD *)(v1 + 8);
      else
        LOWORD(v4) = *(unsigned __int8 *)(v1 + 23);
      v3 += v4 + 1;
      v1 += 24;
    }
    while (v1 != v2);
  }
  return v3;
}

uint64_t sub_22F447188(uint64_t result, llvm::raw_ostream *a2)
{
  const char *v2;
  const char *i;

  v2 = *(const char **)(result + 8);
  for (i = *(const char **)(result + 16); v2 != i; v2 += 24)
    result = sub_22F449148(a2, v2);
  return result;
}

uint64_t sub_22F4471D0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FCB0630;
  v3 = (void **)(a1 + 8);
  sub_22E3B3CC8(&v3);
  return a1;
}

uint64_t sub_22F447214(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FCB0630;
  v3 = (void **)(a1 + 8);
  sub_22E3B3CC8(&v3);
  return MEMORY[0x2348A0E9C](a1, 0xA1C4030951706);
}

_QWORD *sub_22F44726C(_QWORD *a1, char *__s)
{
  size_t v3;

  *a1 = __s;
  if (__s)
    v3 = strlen(__s);
  else
    v3 = 0;
  a1[1] = v3;
  return a1;
}

void sub_22F4472A8(uint64_t *a1)
{
  const char *v1[2];

  sub_22F422AAC(v1, a1);
  sub_22F4490C8(v1[0], (size_t)v1[1]);
}

uint64_t sub_22F4472C8(uint64_t a1)
{
  llvm::MDString *v1;
  _DWORD *String;
  uint64_t v3;
  unint64_t v4;

  v1 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (!v1)
    goto LABEL_5;
  String = (_DWORD *)llvm::MDString::getString(v1);
  if (v3 == 4)
  {
    v4 = 0x100000002;
    if (*String != 1684108657)
      v4 = 0;
  }
  else
  {
    if (v3 != 8 || *(_QWORD *)String != 0x656C676E61697274)
    {
LABEL_5:
      v4 = 0;
      goto LABEL_6;
    }
    v4 = 0x100000001;
  }
LABEL_6:
  if (v4 <= 0x100000000)
    return 0x100000000;
  else
    return v4;
}

void sub_22F447350(char *__s)
{
  const char *v1[2];

  sub_22F44726C(v1, __s);
  sub_22F4490C8(v1[0], (size_t)v1[1]);
}

llvm::raw_ostream *sub_22F447370(llvm::raw_ostream *this, const char *a2, size_t a3)
{
  void *v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3);
  v5 = (void *)*((_QWORD *)this + 4);
  if (a3 > v6 - (uint64_t)v5)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this, a2);
  if (a3)
  {
    memcpy(v5, a2, a3);
    *((_QWORD *)this + 4) += a3;
  }
  return this;
}

uint64_t sub_22F4473D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[15];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[10];
  _QWORD v31[10];
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[6];
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x24BDAC8D0];
  v22[0] = v23;
  v22[1] = 0x800000000;
  v23[13] = &v24;
  v23[14] = 0x400000000;
  v25 = &v27;
  v26 = 0x200000000;
  v28 = v30;
  v29 = 0x800000000;
  v30[8] = v31;
  v30[9] = 0x800000000;
  v31[8] = &v32;
  v31[9] = 0x400000000;
  v33 = v35;
  v34 = 0x400000000;
  v35[4] = &v36;
  v35[5] = 0x400000000;
  v37 = v39;
  v38 = 0x400000000;
  llvm::air::AIRInfoFinder::processModule();
  if ((_DWORD)v29)
  {
    v2 = v28;
    v3 = 8 * v29;
    do
    {
      v4 = *v2;
      v5 = *(_QWORD *)(*v2 - 8 * *(unsigned int *)(*v2 + 8));
      if (v5)
      {
        v5 = *(_QWORD *)(v5 + 128);
        if (*(_BYTE *)(v5 + 16) != 3)
          v5 = 0;
      }
      v21 = v5;
      sub_22F447E7C(a1 + 768, &v21)[1] = v4;
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  if ((_DWORD)v26)
  {
    v13 = v25;
    v14 = 8 * v26;
    do
    {
      v15 = *v13;
      v16 = *(_QWORD *)(*v13 - 8 * *(unsigned int *)(*v13 + 8) + 8);
      if (v16)
      {
        v16 = *(_QWORD *)(v16 + 128);
        if (*(_BYTE *)(v16 + 16) != 3)
          v16 = 0;
      }
      v21 = v16;
      sub_22F447F94(a1 + 864, &v21)[1] = v15;
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  if ((_DWORD)v34)
  {
    v17 = v33;
    v18 = 8 * v34;
    do
    {
      v19 = *v17;
      v20 = *(_QWORD *)(*v17 - 8 * *(unsigned int *)(*v17 + 8) + 8);
      if (v20)
      {
        v20 = *(_QWORD *)(v20 + 128);
        if (*(_BYTE *)(v20 + 16) != 3)
          v20 = 0;
      }
      v21 = v20;
      sub_22F447F94(a1 + 888, &v21)[1] = v19;
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  if ((_DWORD)v38)
  {
    v6 = v37;
    v7 = a1 + 840;
    v8 = 8 * v38;
    do
    {
      v9 = *v6;
      v10 = *(_QWORD *)(*v6 - 8 * *(unsigned int *)(*v6 + 8) + 8);
      if (v10)
      {
        v11 = *(llvm::Value **)(v10 + 128);
        if (v11)
          v11 = (llvm::Value *)llvm::Value::stripPointerCasts(v11);
      }
      else
      {
        v11 = 0;
      }
      v21 = (uint64_t)v11;
      sub_22F448158(v7, &v21)[1] = v9;
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return sub_22F227614((uint64_t)v22);
}

llvm::MDString *sub_22F447634(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v6;

  v2 = sub_22F2362F4(a1);
  v3 = 40;
  if (v2)
    v3 = 56;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    return (llvm::MDString *)(v6 == 21
                           && *String == 0x67616D692E726961
                           && String[1] == 0x6D5F6B636F6C6265
                           && *(_QWORD *)((char *)String + 13) == 0x72657473616D5F6BLL);
  }
  return result;
}

llvm::MDString *sub_22F4476D0(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  llvm::MDString *result;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t String;
  uint64_t v8;

  v2 = sub_22F236510(a1);
  v3 = 16;
  if (!v2)
    v3 = 0;
  if (**(_BYTE **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3))
    return 0;
  v5 = sub_22F236510(a1);
  v6 = 16;
  if (!v5)
    v6 = 0;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v6);
  if (result)
  {
    String = llvm::MDString::getString(result);
    if (v8 != 20)
      return 0;
    return (llvm::MDString *)(*(_QWORD *)String == 0x696C6E692E726961
                           && *(_QWORD *)(String + 8) == 0x5F657079745F656ELL
                           && *(_DWORD *)(String + 16) == 1868983913);
  }
  return result;
}

uint64_t sub_22F447788(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  llvm::MDString *v7;
  _QWORD *String;
  uint64_t v9;
  BOOL v10;
  BOOL v11;

  v2 = 2;
  if (sub_22F236510(a1))
    v3 = 2;
  else
    v3 = 0;
  if ((sub_22F4476D0(a1) & 1) == 0)
  {
    if (sub_22F23647C(a1))
      v2 = 2;
    else
      v2 = 0;
  }
  v4 = v2 + v3;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != v4 + 4
    && (v7 = *(llvm::MDString **)(a1 - 8 * v5 + 8 * (v4 + 4))) != 0
    && (String = (_QWORD *)llvm::MDString::getString(v7), v9 == 21)
    && (*String == 0x69646E692E726961 ? (v10 = String[1] == 0x6772615F74636572) : (v10 = 0),
        v10 ? (v11 = *(_QWORD *)((char *)String + 13) == 0x746E656D75677261) : (v11 = 0),
        v11))
  {
    return sub_22F236584(**(_BYTE **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v4 + 5)));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F447874(uint64_t a1)
{
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;

  if (!sub_22F447788(a1))
    return 0;
  v3 = sub_22F236510(a1);
  if ((sub_22F4476D0(a1) & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v5 = sub_22F23647C(a1);
    v4 = 2;
    if (!v5)
      v4 = 0;
  }
  v6 = 5;
  if (v3)
    v6 = 7;
  return *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v4 + v6));
}

uint64_t sub_22F4478F4(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = *(unsigned int *)(a1 + 8);
  v3 = sub_22F22F2CC(a1);
  v4 = *(unsigned int *)(a1 + 8);
  v8[0] = "air.arg_unused";
  v8[1] = 14;
  if ((_DWORD)v4)
  {
    v5 = -8 * v4;
    do
    {
      if (sub_22F23686C((uint64_t)v8, *(llvm::MDString **)(a1 + v5)))
        break;
      v5 += 8;
    }
    while (v5);
  }
  v6 = 16;
  if (!v3)
    v6 = 0;
  return a1 - 8 * v2 + v6 + 24;
}

llvm::MDString *sub_22F447998(uint64_t a1)
{
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    if (v4 == 21
      && (*String == 0x636E75662E726961 ? (v5 = String[1] == 0x6E6F635F6E6F6974) : (v5 = 0),
          v5 ? (v6 = *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63) : (v6 = 0),
          v6))
    {
      return *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::MDString *sub_22F447A2C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v6;

  v2 = sub_22F22F2CC(a1);
  v3 = 24;
  if (v2)
    v3 = 40;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    return (llvm::MDString *)(v6 == 22
                           && *String == 0x747361722E726961
                           && String[1] == 0x726564726F5F7265
                           && *(_QWORD *)((char *)String + 14) == 0x70756F72675F7265);
  }
  return result;
}

llvm::MDString *sub_22F447AC8(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v6;

  v2 = sub_22F22F2CC(a1);
  v3 = 16;
  if (v2)
    v3 = 32;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    if (v6 == 8)
      return (llvm::MDString *)(*String == 0x746963696C707865);
    else
      return 0;
  }
  return result;
}

llvm::MDString *sub_22F447B38(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v6;

  v2 = sub_22F22F2CC(a1);
  v3 = 16;
  if (v2)
    v3 = 32;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    if (v6 == 8)
      return (llvm::MDString *)(*String == 0x746963696C706D69);
    else
      return 0;
  }
  return result;
}

llvm::MDString *sub_22F447BA8(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v6;

  v2 = sub_22F22F2CC(a1);
  v3 = 48;
  if (v2)
    v3 = 64;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    return (llvm::MDString *)(v6 == 21
                           && *String == 0x67616D692E726961
                           && String[1] == 0x6D5F6B636F6C6265
                           && *(_QWORD *)((char *)String + 13) == 0x72657473616D5F6BLL);
  }
  return result;
}

void sub_22F447C48(_QWORD *a1)
{
  if (a1)
  {
    sub_22F447C48(*a1);
    sub_22F447C48(a1[1]);
    operator delete(a1);
  }
}

void sub_22F447C84(uint64_t a1)
{
  sub_22F236E6C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F447CA8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F237054(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F447D10(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    *((_DWORD *)v5 + 4) = 0;
  }
  return v5;
}

_QWORD *sub_22F447D10(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22F2370EC(a1, v6);
  v8 = 0;
  sub_22F237054(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F447DC4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F237054(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_QWORD *sub_22F447E7C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F447EE0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F447EE0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F2371B8(a1, v6);
  v8 = 0;
  sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F447F94(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E7B6870(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F447FFC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F447FFC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F237278(a1, v6);
  v8 = 0;
  sub_22E7B6870(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F4480AC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E7B6870(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F448158(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F4481BC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F4481BC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7B59F8(a1, v6);
  v8 = 0;
  sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F448270(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F4482FC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F448390(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F4482FC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v7 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v9 = v6;
        v13 = v5 + v10++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_8;
      }
      v8 = 0;
      if (v9)
        v6 = v9;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_8:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F448390(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22F237530(a1, v6);
    v8 = 0;
    sub_22F4482FC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F448444(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F4482FC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F4484F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F2382C0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F448594(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_22F23E860((_QWORD *)a1, a2, a3, (a3 - (uint64_t)a2) >> 3);
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x2800000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = &unk_24FCB0690;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x1000000000;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x1000000000;
  *(_QWORD *)(a1 + 416) = a1 + 448;
  *(_QWORD *)(a1 + 424) = a1 + 448;
  *(_QWORD *)(a1 + 432) = 16;
  *(_DWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 672) = 128;
  v8 = MEMORY[0x23489D23C](0x2000, 8);
  *(_QWORD *)(a1 + 656) = v8;
  *(_QWORD *)(a1 + 664) = 0;
  v9 = *(unsigned int *)(a1 + 672);
  if ((_DWORD)v9)
  {
    v10 = v9 << 6;
    v11 = (_QWORD *)(v8 + 16);
    do
    {
      *v11 = 0;
      v11[1] = -4096;
      *(v11 - 2) = &unk_24FA66978;
      *(v11 - 1) = 2;
      v11[2] = 0;
      v11 += 8;
      v10 -= 64;
    }
    while (v10);
  }
  *(_BYTE *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_BYTE *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 720) = a1 + 728;
  *(_QWORD *)(a1 + 744) = a1 + 752;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_DWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = a1 + 808;
  *(_QWORD *)(a1 + 800) = 0x400000000;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 928;
  *(_QWORD *)(a1 + 920) = 0x1000000000;
  *(_QWORD *)(a1 + 1056) = a1 + 1072;
  *(_QWORD *)(a1 + 1064) = 0x1000000000;
  *(_QWORD *)(a1 + 1200) = a1 + 1216;
  *(_QWORD *)(a1 + 1208) = 0x1000000000;
  return a1;
}

void sub_22F44873C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  size_t v9;
  char *v10;
  char *v11;

  v1 = a1[12];
  v2 = a1[13];
  if (v1 != v2)
  {
    v3 = a1 + 23;
    do
    {
      v4 = sub_22F22F478();
      sub_22F23E8E0(v3, *(_QWORD *)(v4 + 40), &v10);
      v5 = v10;
      v6 = v11;
      if (v10 != v11)
      {
        v7 = v10;
        do
        {
          v8 = *(void **)v7;
          v9 = *((_QWORD *)v7 + 1);
          v7 += 16;
          sub_22F22F054((_QWORD *)(v1 + 144), v8, v9);
        }
        while (v7 != v6);
      }
      if (v5)
        operator delete(v5);
      v1 += 272;
    }
    while (v1 != v2);
  }
}

_OWORD *sub_22F4487DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;
  _OWORD *result;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)&v10 = a3;
  *((_QWORD *)&v10 + 1) = a4;
  v9 = a2;
  v5 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
  {
    v6 = sub_22E4A02B0((void **)a1, &v9);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 40))
  {
    result = sub_22E67983C((void **)(a1 + 24), &v10);
  }
  else
  {
    *v7 = v10;
    result = v7 + 1;
  }
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

BOOL sub_22F44885C(uint64_t a1, llvm::Value *this)
{
  int Key;
  uint64_t v4;
  uint64_t v5;

  llvm::Value::getName(this);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
  {
    v5 = *(unsigned int *)(a1 + 88);
    v4 = v5;
  }
  else
  {
    v4 = Key;
    v5 = *(unsigned int *)(a1 + 88);
  }
  return v4 != v5;
}

void ***sub_22F4488C0(void ***result, void ***a2, void ***a3)
{
  void ***v3;
  void ***v4;
  void ***v5;
  uint64_t v6;
  void **v7;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result;
    result = a3;
    v5 = (void ***)v4[1];
    if (a3 != v5)
    {
      v6 = a3 - a2;
      do
      {
        if (v6 * 8)
        {
          sub_22EDCB260(v3);
          v7 = *v3;
          *v3 = v3[v6];
          v3[v6] = v7;
        }
        ++v3;
      }
      while (&v3[v6] != v5);
      result = (void ***)v4[1];
    }
    while (result != v3)
      result = sub_22E54C5D0(result - 1);
    v4[1] = (void **)v3;
  }
  return result;
}

uint64_t sub_22F448960(uint64_t result, int a2, int a3)
{
  char v3;
  char v4;

  if (a2 == 11)
  {
    v3 = 1;
  }
  else if (a2 > 28)
  {
    if (a3 == 20)
      v3 = 9;
    else
      v3 = 4;
    if (a3 == 20)
      v4 = 12;
    else
      v4 = 11;
    if (a2 != 29)
      v3 = v4;
  }
  else if (a2 == 7)
  {
    if (a3)
    {
      if (a3 == 21)
        v3 = 6;
      else
        v3 = 7;
    }
    else
    {
      v3 = 2;
    }
  }
  else if (a3 == 20)
  {
    v3 = 8;
  }
  else
  {
    v3 = 3;
  }
  *(_BYTE *)(result + 11) = *(_BYTE *)(result + 11) & 0x80 | v3;
  return result;
}

uint64_t sub_22F4489EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v3 = *(_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 != v3)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = *(_QWORD *)(v3 + 8 * v8);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 80) && *(_QWORD *)(v10 + 72))
        {
          v11 = MEMORY[0x23489F15C]();
          MEMORY[0x2348A0E9C](v11, 0x10B2C407FF26C1CLL);
        }
        MEMORY[0x2348A0E9C](v10, 0x1020C400BAB6D8ALL);
        v3 = *(_QWORD *)(a1 + 120);
        v2 = *(_QWORD *)(a1 + 128);
      }
      v8 = v9++;
    }
    while (v8 < (v2 - v3) >> 3);
  }
  sub_22F448B18(a1 + 184);
  v4 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v4)
  {
    v12 = sub_22F2411FC(v4);
    MEMORY[0x2348A0E9C](v12, 0x1032C40B1B786CCLL);
  }
  v13 = (void **)(a1 + 144);
  sub_22E576240(&v13);
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v13 = (void **)(a1 + 96);
  sub_22F24118C(&v13);
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    MEMORY[0x2348A0E9C](v6, 0x1000C4057661CB1);
  return a1;
}

uint64_t sub_22F448B18(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_22E3B3AD0(a1 + 80);
  sub_22F240A68(a1 + 48);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_22F448B68(char *__s2)
{
  unint64_t v2;
  char **v3;
  const char **v4;
  char **v5;
  const char *v6;
  int v7;

  v2 = 103;
  v3 = &off_24FCB06F8;
  do
  {
    v4 = (const char **)&v3[2 * (v2 >> 1)];
    v6 = *v4;
    v5 = (char **)(v4 + 2);
    v7 = strcmp(v6, __s2);
    if (v7 >= 0)
      v2 >>= 1;
    else
      v2 += ~(v2 >> 1);
    if (v7 < 0)
      v3 = v5;
  }
  while (v2);
  if (v3 == (char **)0x24FCB0D68)
    return 0;
  else
    return *((unsigned int *)v3 + 2);
}

uint64_t sub_22F448BEC(uint64_t a1, llvm::Module *a2)
{
  int v3;
  int v4;

  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 16) = xmmword_22F54B150;
  *(_OWORD *)(a1 + 32) = unk_22F54B160;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 48) = sub_22F242538(a2);
  *(_DWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 60) = sub_22F242640(*(llvm::Module **)(a1 + 72));
  *(_DWORD *)(a1 + 68) = v4;
  return a1;
}

uint64_t sub_22F448C58(uint64_t a1, uint64_t a2, llvm::StructType *a3)
{
  _BYTE *Name;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  __int128 v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  llvm::StructType::setBody();
  if (*((_QWORD *)a3 + 3))
  {
    Name = (_BYTE *)llvm::StructType::getName(a3);
    v10 = v12;
    v11 = xmmword_22F44E350;
    sub_22E61131C((uint64_t)&v10, Name, &Name[v7]);
    llvm::StructType::setName();
    llvm::StructType::setName();
    if (v10 != v12)
      free(v10);
  }
  v9 = a2;
  return sub_22F448D68(a1 + 504, &v9, (uint64_t)&v10);
}

uint64_t sub_22F448D58()
{
  return -4096;
}

uint64_t sub_22F448D60()
{
  return -8192;
}

uint64_t sub_22F448D68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_22F448DEC((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F448ED0(a1, (uint64_t)a2, a2, v10);
    v7 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_22F448DEC(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_22F242088(*a2);
    v8 = v4 - 1;
    v9 = *a2;
    v10 = v7 & (v4 - 1);
    v11 = (uint64_t *)(v6 + 8 * v10);
    v12 = *v11;
    if (sub_22F241F64(v9, *v11))
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v11;
        v16 = v14 + 1;
        v10 = (v10 + v14) & v8;
        v11 = (uint64_t *)(v6 + 8 * v10);
        v12 = *v11;
        v17 = sub_22F241F64(v9, *v11);
        v14 = v16;
        if (v17)
          goto LABEL_11;
      }
      result = 0;
      if (v13)
        v11 = v13;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
  *a3 = v11;
  return result;
}

uint64_t *sub_22F448ED0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F2420E0(a1, v7);
  v9 = 0;
  sub_22F448DEC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F448F80(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22F448DEC((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F449024(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22F2421A0(v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void sub_22F4490C8(const char *a1, size_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  ssize_t v6;
  _BYTE v7[64];
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;

  v9 = &v11;
  v10 = xmmword_22F44E300;
  sub_22F242534((uint64_t)v7, (uint64_t)&v9);
  v4 = sub_22E47DAC0((llvm::raw_ostream *)v7, "LLVM ERROR: ");
  v5 = sub_22F447370(v4, a1, a2);
  sub_22E47DAC0(v5, "\n");
  v6 = write(2, *(const void **)v8, *(_QWORD *)(v8 + 8));
  MEMORY[0x23489E67C](v6);
  exit(1);
}

uint64_t sub_22F449148(llvm::raw_ostream *a1, const char *a2)
{
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return llvm::raw_ostream::write(a1, a2);
}

uint64_t sub_22F44916C(llvm::Triple *a1)
{
  uint64_t OSVersion;

  OSVersion = llvm::Triple::getOSVersion(a1);
  return OSVersion & (OSVersion >> 63) & 0x7FFFFFFF00000000 | OSVersion;
}

uint64_t createDebugifyModulePass()
{
  return MEMORY[0x24BED5268]();
}

uint64_t createDebugifyFunctionPass()
{
  return MEMORY[0x24BED5270]();
}

uint64_t createCheckDebugifyModulePass()
{
  return MEMORY[0x24BED5278]();
}

uint64_t createCheckDebugifyFunctionPass()
{
  return MEMORY[0x24BED5280]();
}

uint64_t llvm_utils::getMangledTypeStr()
{
  return MEMORY[0x24BE38818]();
}

uint64_t llvm::AllocaInst::AllocaInst()
{
  return MEMORY[0x24BED5288]();
}

{
  return MEMORY[0x24BED5290]();
}

{
  return MEMORY[0x24BED5298]();
}

uint64_t llvm::BasicBlock::eraseFromParent(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED52A8](this);
}

uint64_t llvm::BasicBlock::BasicBlock()
{
  return MEMORY[0x24BED52C8]();
}

void llvm::BasicBlock::~BasicBlock(llvm::BasicBlock *this)
{
  MEMORY[0x24BED52D0](this);
}

uint64_t llvm::BranchInst::BranchInst()
{
  return MEMORY[0x24BED52D8]();
}

{
  return MEMORY[0x24BED52E8]();
}

uint64_t llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  return MEMORY[0x24BED52E0](this, a2, a3);
}

uint64_t llvm::CallBrInst::init()
{
  return MEMORY[0x24BED52F0]();
}

uint64_t llvm::ConstantFP::getInfinity()
{
  return MEMORY[0x24BED52F8]();
}

uint64_t llvm::ConstantFP::getZeroValueForNegation()
{
  return MEMORY[0x24BED5300]();
}

uint64_t llvm::ConstantFP::get()
{
  return MEMORY[0x24BED5308]();
}

{
  return MEMORY[0x24BED5310]();
}

{
  return MEMORY[0x24BED5318]();
}

uint64_t llvm::ConstantFP::getQNaN()
{
  return MEMORY[0x24BED5320]();
}

uint64_t llvm::DILocation::getImpl()
{
  return MEMORY[0x24BED5328]();
}

uint64_t llvm::DataLayout::clear(llvm::DataLayout *this)
{
  return MEMORY[0x24BED5330](this);
}

uint64_t llvm::DataLayout::reset()
{
  return MEMORY[0x24BED5338]();
}

uint64_t llvm::DataLayout::DataLayout()
{
  return MEMORY[0x24BED5340]();
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  MEMORY[0x24BED5348](this);
}

uint64_t llvm::FreezeInst::FreezeInst()
{
  return MEMORY[0x24BED5350]();
}

uint64_t llvm::InvokeInst::init()
{
  return MEMORY[0x24BED5358]();
}

uint64_t llvm::NoCFIValue::get()
{
  return MEMORY[0x24BED5368]();
}

uint64_t llvm::PassPlugin::Load()
{
  return MEMORY[0x24BED5370]();
}

uint64_t llvm::ResumeInst::ResumeInst()
{
  return MEMORY[0x24BED5378]();
}

uint64_t llvm::ReturnInst::ReturnInst()
{
  return MEMORY[0x24BED5380]();
}

{
  return MEMORY[0x24BED5388]();
}

uint64_t llvm::StructType::getTypeByName()
{
  return MEMORY[0x24BED5398]();
}

uint64_t llvm::StructType::get()
{
  return MEMORY[0x24BED53A0]();
}

{
  return MEMORY[0x24BED53A8]();
}

uint64_t llvm::StructType::create()
{
  return MEMORY[0x24BED53B0]();
}

{
  return MEMORY[0x24BED53B8]();
}

{
  return MEMORY[0x24BED53C0]();
}

{
  return MEMORY[0x24BED53C8]();
}

uint64_t llvm::StructType::setBody()
{
  return MEMORY[0x24BED53D0]();
}

uint64_t llvm::StructType::setName()
{
  return MEMORY[0x24BED53D8]();
}

uint64_t llvm::SwitchInst::addCase()
{
  return MEMORY[0x24BED53E0]();
}

uint64_t llvm::SwitchInst::SwitchInst()
{
  return MEMORY[0x24BED53E8]();
}

{
  return MEMORY[0x24BED53F0]();
}

uint64_t llvm::TimeRecord::getCurrentTime(llvm::TimeRecord *this)
{
  return MEMORY[0x24BED53F8](this);
}

uint64_t llvm::TimerGroup::TimerGroup()
{
  return MEMORY[0x24BED5400]();
}

void llvm::TimerGroup::~TimerGroup(llvm::TimerGroup *this)
{
  MEMORY[0x24BED5408](this);
}

uint64_t llvm::TypeFinder::run()
{
  return MEMORY[0x24BED5410]();
}

uint64_t llvm::UndefValue::get()
{
  return MEMORY[0x24BED5418]();
}

uint64_t llvm::VectorType::get()
{
  return MEMORY[0x24BED5420]();
}

uint64_t llvm::hash_value()
{
  return MEMORY[0x24BED5428]();
}

uint64_t llvm::APFloatBase::IEEEdouble(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5430](this);
}

uint64_t llvm::APFloatBase::IEEEsingle(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5438](this);
}

uint64_t llvm::APFloatBase::getSizeInBits()
{
  return MEMORY[0x24BED5440]();
}

uint64_t llvm::APFloatBase::EnumToSemantics()
{
  return MEMORY[0x24BED5448]();
}

uint64_t llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5450](this);
}

uint64_t llvm::APFloatBase::SemanticsToEnum()
{
  return MEMORY[0x24BED5458]();
}

uint64_t llvm::APFloatBase::x87DoubleExtended(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5460](this);
}

uint64_t llvm::APFloatBase::semanticsPrecision()
{
  return MEMORY[0x24BED5468]();
}

uint64_t llvm::APFloatBase::semanticsSizeInBits()
{
  return MEMORY[0x24BED5470]();
}

uint64_t llvm::APFloatBase::Bogus(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5478](this);
}

uint64_t llvm::APFloatBase::BFloat(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5480](this);
}

uint64_t llvm::APFloatBase::IEEEhalf(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5488](this);
}

uint64_t llvm::APFloatBase::IEEEquad(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5490](this);
}

uint64_t llvm::AttrBuilder::addAttribute()
{
  return MEMORY[0x24BED5498]();
}

{
  return MEMORY[0x24BED54A8]();
}

uint64_t llvm::AttrBuilder::addByRefAttr()
{
  return MEMORY[0x24BED54B0]();
}

uint64_t llvm::AttrBuilder::addByValAttr()
{
  return MEMORY[0x24BED54B8]();
}

uint64_t llvm::AttrBuilder::addUWTableAttr()
{
  return MEMORY[0x24BED54C0]();
}

uint64_t llvm::AttrBuilder::addInAllocaAttr()
{
  return MEMORY[0x24BED54C8]();
}

uint64_t llvm::AttrBuilder::removeAttribute()
{
  return MEMORY[0x24BED54D0]();
}

{
  return MEMORY[0x24BED54D8]();
}

uint64_t llvm::AttrBuilder::addAlignmentAttr()
{
  return MEMORY[0x24BED54E0]();
}

uint64_t llvm::AttrBuilder::addAllocSizeAttr()
{
  return MEMORY[0x24BED54E8]();
}

uint64_t llvm::AttrBuilder::addStructRetAttr()
{
  return MEMORY[0x24BED54F0]();
}

uint64_t llvm::AttrBuilder::addStackAlignmentAttr()
{
  return MEMORY[0x24BED54F8]();
}

uint64_t llvm::AttrBuilder::addDereferenceableAttr(llvm::AttrBuilder *this)
{
  return MEMORY[0x24BED5500](this);
}

uint64_t llvm::AttrBuilder::addDereferenceableOrNullAttr(llvm::AttrBuilder *this)
{
  return MEMORY[0x24BED5508](this);
}

uint64_t llvm::AttrBuilder::AttrBuilder()
{
  return MEMORY[0x24BED5510]();
}

uint64_t llvm::BitCastInst::BitCastInst()
{
  return MEMORY[0x24BED5518]();
}

{
  return MEMORY[0x24BED5520]();
}

uint64_t llvm::BuryPointer(llvm *this, const void *a2)
{
  return MEMORY[0x24BED5528](this, a2);
}

uint64_t llvm::CloneModule()
{
  return MEMORY[0x24BED5530]();
}

uint64_t llvm::ConstantInt::get()
{
  return MEMORY[0x24BED5538]();
}

{
  return MEMORY[0x24BED5540]();
}

{
  return MEMORY[0x24BED5548]();
}

{
  return MEMORY[0x24BED5550]();
}

uint64_t llvm::ConstantInt::getBool()
{
  return MEMORY[0x24BED5558]();
}

uint64_t llvm::ConstantInt::getTrue()
{
  return MEMORY[0x24BED5560]();
}

uint64_t llvm::ConstantInt::getFalse()
{
  return MEMORY[0x24BED5568]();
}

{
  return MEMORY[0x24BED5570]();
}

uint64_t llvm::ConstantInt::getSigned()
{
  return MEMORY[0x24BED5578]();
}

{
  return MEMORY[0x24BED5580]();
}

uint64_t llvm::GlobalAlias::setAliasee()
{
  return MEMORY[0x24BED5588]();
}

uint64_t llvm::GlobalAlias::eraseFromParent(llvm::GlobalAlias *this)
{
  return MEMORY[0x24BED5590](this);
}

uint64_t llvm::GlobalAlias::create()
{
  return MEMORY[0x24BED5598]();
}

{
  return MEMORY[0x24BED55A0]();
}

{
  return MEMORY[0x24BED55A8]();
}

{
  return MEMORY[0x24BED55B0]();
}

uint64_t llvm::GlobalIFunc::create()
{
  return MEMORY[0x24BED55B8]();
}

uint64_t llvm::GlobalValue::setPartition()
{
  return MEMORY[0x24BED55C0]();
}

uint64_t llvm::GlobalValue::eraseFromParent(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED55C8](this);
}

uint64_t llvm::Instruction::moveBefore()
{
  return MEMORY[0x24BED55D0]();
}

uint64_t llvm::Instruction::setIsExact(llvm::Instruction *this)
{
  return MEMORY[0x24BED55D8](this);
}

uint64_t llvm::Instruction::insertAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  return MEMORY[0x24BED55E0](this, a2);
}

uint64_t llvm::Instruction::setMetadata()
{
  return MEMORY[0x24BED55E8]();
}

{
  return MEMORY[0x24BED55F0]();
}

uint64_t llvm::Instruction::copyMetadata()
{
  return MEMORY[0x24BED55F8]();
}

uint64_t llvm::Instruction::insertBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  return MEMORY[0x24BED5600](this, a2);
}

uint64_t llvm::Instruction::eraseFromParent(llvm::Instruction *this)
{
  return MEMORY[0x24BED5608](this);
}

uint64_t llvm::Instruction::removeFromParent(llvm::Instruction *this)
{
  return MEMORY[0x24BED5610](this);
}

uint64_t llvm::Instruction::setFastMathFlags()
{
  return MEMORY[0x24BED5618]();
}

uint64_t llvm::Instruction::setHasNoSignedWrap(llvm::Instruction *this)
{
  return MEMORY[0x24BED5630](this);
}

uint64_t llvm::Instruction::applyMergedLocation()
{
  return MEMORY[0x24BED5638]();
}

uint64_t llvm::Instruction::setHasNoUnsignedWrap(llvm::Instruction *this)
{
  return MEMORY[0x24BED5640](this);
}

uint64_t llvm::Instruction::addAnnotationMetadata()
{
  return MEMORY[0x24BED5648]();
}

uint64_t llvm::Instruction::Instruction()
{
  return MEMORY[0x24BED5658]();
}

{
  return MEMORY[0x24BED5660]();
}

uint64_t llvm::IntegerType::get()
{
  return MEMORY[0x24BED5670]();
}

uint64_t llvm::LLVMContext::getDiagnosticHandler(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED5678](this);
}

uint64_t llvm::LLVMContext::setDiagnosticHandler()
{
  return MEMORY[0x24BED5680]();
}

uint64_t llvm::LLVMContext::setDiscardValueNames(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED5688](this);
}

uint64_t llvm::LLVMContext::getOrInsertSyncScopeID()
{
  return MEMORY[0x24BED5698]();
}

uint64_t llvm::LLVMContext::setMisExpectWarningRequested(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED56A8](this);
}

uint64_t llvm::LLVMContext::setDiagnosticsHotnessRequested(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED56B0](this);
}

uint64_t llvm::LLVMContext::setDiagnosticsMisExpectTolerance()
{
  return MEMORY[0x24BED56B8]();
}

uint64_t llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED56C8](this);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContext *this)
{
  MEMORY[0x24BED56D8](this);
}

uint64_t llvm::MCAsmParser::setTargetParser()
{
  return MEMORY[0x24BED56E0]();
}

uint64_t llvm::NamedMDNode::addOperand()
{
  return MEMORY[0x24BED56E8]();
}

uint64_t llvm::NamedMDNode::clearOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED56F8](this);
}

uint64_t llvm::NamedMDNode::eraseFromParent(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED5700](this);
}

uint64_t llvm::PassBuilder::crossRegisterProxies()
{
  return MEMORY[0x24BED5708]();
}

uint64_t llvm::PassBuilder::registerLoopAnalyses()
{
  return MEMORY[0x24BED5710]();
}

uint64_t llvm::PassBuilder::registerCGSCCAnalyses()
{
  return MEMORY[0x24BED5718]();
}

uint64_t llvm::PassBuilder::buildO0DefaultPipeline()
{
  return MEMORY[0x24BED5720]();
}

uint64_t llvm::PassBuilder::registerModuleAnalyses()
{
  return MEMORY[0x24BED5728]();
}

uint64_t llvm::PassBuilder::registerFunctionAnalyses()
{
  return MEMORY[0x24BED5730]();
}

uint64_t llvm::PassBuilder::setEnableHotColdSplitting(llvm::PassBuilder *this)
{
  return MEMORY[0x24BED5738](this);
}

uint64_t llvm::PassBuilder::buildPerModuleDefaultPipeline()
{
  return MEMORY[0x24BED5740]();
}

uint64_t llvm::PassBuilder::buildLTOPreLinkDefaultPipeline()
{
  return MEMORY[0x24BED5748]();
}

uint64_t llvm::PassBuilder::buildThinLTOPreLinkDefaultPipeline()
{
  return MEMORY[0x24BED5750]();
}

uint64_t llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run()
{
  return off_24FA2ADC8();
}

uint64_t llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::printPipeline()
{
  return off_24FA2ADD0();
}

uint64_t llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::run()
{
  return off_24FA2ADD8();
}

uint64_t llvm::PointerType::get()
{
  return MEMORY[0x24BED5758]();
}

uint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED5760](this, a2);
}

uint64_t llvm::PoisonValue::get()
{
  return MEMORY[0x24BED5768]();
}

uint64_t llvm::SplitString()
{
  return MEMORY[0x24BED5770]();
}

uint64_t llvm::StringError::StringError()
{
  return MEMORY[0x24BED5780]();
}

uint64_t llvm::StringSaver::save()
{
  return MEMORY[0x24BED5788]();
}

uint64_t llvm::ValueMapper::mapConstant()
{
  return MEMORY[0x24BED5790]();
}

uint64_t llvm::ValueMapper::mapMDNode()
{
  return MEMORY[0x24BED57A8]();
}

uint64_t llvm::ValueMapper::ValueMapper()
{
  return MEMORY[0x24BED57B0]();
}

void llvm::ValueMapper::~ValueMapper(llvm::ValueMapper *this)
{
  MEMORY[0x24BED57B8](this);
}

uint64_t llvm::raw_ostream::write_escaped()
{
  return MEMORY[0x24BED57C0]();
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57C8](this);
}

uint64_t llvm::raw_ostream::SetBufferAndMode()
{
  return MEMORY[0x24BED57D0]();
}

uint64_t llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2)
{
  return MEMORY[0x24BED57D8](this, a2);
}

uint64_t llvm::raw_ostream::write(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57E0](this);
}

uint64_t llvm::raw_ostream::indent(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57E8](this);
}

uint64_t llvm::raw_ostream::write_hex(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57F0](this);
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  MEMORY[0x24BED57F8](this);
}

uint64_t llvm::raw_ostream::operator<<()
{
  return MEMORY[0x24BED5800]();
}

{
  return MEMORY[0x24BED5808]();
}

{
  return MEMORY[0x24BED5810]();
}

{
  return MEMORY[0x24BED5818]();
}

{
  return MEMORY[0x24BED5820]();
}

{
  return MEMORY[0x24BED5828]();
}

{
  return MEMORY[0x24BED5830]();
}

{
  return MEMORY[0x24BED5838]();
}

uint64_t llvm::APFixedPoint::getFromIntValue()
{
  return MEMORY[0x24BED5840]();
}

uint64_t llvm::APFixedPoint::getFromFloatValue()
{
  return MEMORY[0x24BED5848]();
}

uint64_t llvm::APFixedPoint::promoteFloatSemantics()
{
  return MEMORY[0x24BED5850]();
}

uint64_t llvm::APFixedPoint::getMax()
{
  return MEMORY[0x24BED5858]();
}

uint64_t llvm::APFixedPoint::getMin()
{
  return MEMORY[0x24BED5860]();
}

uint64_t llvm::AttributeSet::get(llvm::AttributeSet *this, llvm::LLVMContext *a2, const llvm::AttrBuilder *a3)
{
  return MEMORY[0x24BED5868](this, a2, a3);
}

uint64_t llvm::BlockAddress::get(llvm::BlockAddress *this, Function *a2, llvm::BasicBlock *a3)
{
  return MEMORY[0x24BED5870](this, a2, a3);
}

uint64_t llvm::ConstantExpr::getBitCast()
{
  return MEMORY[0x24BED5878]();
}

uint64_t llvm::ConstantExpr::getIntToPtr()
{
  return MEMORY[0x24BED5880]();
}

uint64_t llvm::ConstantExpr::getPtrToInt()
{
  return MEMORY[0x24BED5888]();
}

uint64_t llvm::ConstantExpr::getInsertValue()
{
  return MEMORY[0x24BED5890]();
}

uint64_t llvm::ConstantExpr::getIntegerCast()
{
  return MEMORY[0x24BED5898]();
}

uint64_t llvm::ConstantExpr::getPointerCast()
{
  return MEMORY[0x24BED58A0]();
}

uint64_t llvm::ConstantExpr::getExtractValue()
{
  return MEMORY[0x24BED58A8]();
}

uint64_t llvm::ConstantExpr::getAddrSpaceCast()
{
  return MEMORY[0x24BED58B0]();
}

uint64_t llvm::ConstantExpr::getGetElementPtr()
{
  return MEMORY[0x24BED58B8]();
}

uint64_t llvm::ConstantExpr::getTruncOrBitCast()
{
  return MEMORY[0x24BED58C0]();
}

uint64_t llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast()
{
  return MEMORY[0x24BED58C8]();
}

uint64_t llvm::ConstantExpr::getAdd()
{
  return MEMORY[0x24BED58D0]();
}

uint64_t llvm::ConstantExpr::getMul()
{
  return MEMORY[0x24BED58D8]();
}

uint64_t llvm::ConstantExpr::getSub()
{
  return MEMORY[0x24BED58E0]();
}

uint64_t llvm::ConstantExpr::getZExt()
{
  return MEMORY[0x24BED58E8]();
}

uint64_t llvm::ConstantExpr::getTrunc()
{
  return MEMORY[0x24BED58F0]();
}

uint64_t llvm::ConstantExpr::getSizeOf()
{
  return MEMORY[0x24BED58F8]();
}

uint64_t llvm::DIExpression::getImpl()
{
  return MEMORY[0x24BED5908]();
}

uint64_t llvm::DISubprogram::getImpl()
{
  return MEMORY[0x24BED5910]();
}

uint64_t llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue()
{
  return MEMORY[0x24BED5918]();
}

uint64_t llvm::FunctionType::get()
{
  return MEMORY[0x24BED5920]();
}

{
  return MEMORY[0x24BED5928]();
}

uint64_t llvm::GlobalObject::setSection()
{
  return MEMORY[0x24BED5930]();
}

uint64_t llvm::GlobalObject::setAlignment()
{
  return MEMORY[0x24BED5940]();
}

uint64_t llvm::GlobalObject::addTypeMetadata()
{
  return MEMORY[0x24BED5948]();
}

uint64_t llvm::GlobalObject::setVCallVisibilityMetadata()
{
  return MEMORY[0x24BED5950]();
}

uint64_t llvm::GlobalObject::setComdat()
{
  return MEMORY[0x24BED5958]();
}

uint64_t llvm::MemoryBuffer::getMemBuffer()
{
  return MEMORY[0x24BED5980]();
}

{
  return MEMORY[0x24BED5990]();
}

uint64_t llvm::MemoryBuffer::getFileOrSTDIN()
{
  return MEMORY[0x24BED5998]();
}

uint64_t llvm::MemoryBuffer::getMemBufferCopy()
{
  return MEMORY[0x24BED59A0]();
}

uint64_t llvm::MemoryBuffer::getFile()
{
  return MEMORY[0x24BED59A8]();
}

uint64_t llvm::MemoryBuffer::getSTDIN(llvm::MemoryBuffer *this)
{
  return MEMORY[0x24BED59B0](this);
}

uint64_t llvm::RISCVISAInfo::parseFeatures()
{
  return MEMORY[0x24BED59C0]();
}

uint64_t llvm::RISCVISAInfo::isSupportedExtensionFeature()
{
  return MEMORY[0x24BED59C8]();
}

uint64_t llvm::VerifierPass::run()
{
  return MEMORY[0x24BED59D0]();
}

uint64_t llvm::VersionTuple::tryParse()
{
  return MEMORY[0x24BED59D8]();
}

uint64_t llvm::getImageKind()
{
  return MEMORY[0x24BED59E8]();
}

uint64_t llvm::AtomicRMWInst::AtomicRMWInst()
{
  return MEMORY[0x24BED5A00]();
}

uint64_t llvm::AttributeList::get()
{
  return MEMORY[0x24BED5A08]();
}

{
  return MEMORY[0x24BED5A18]();
}

uint64_t llvm::AttributeList::get(llvm::AttributeList *this, llvm::LLVMContext *a2, uint64_t a3, const llvm::AttrBuilder *a4)
{
  return MEMORY[0x24BED5A20](this, a2, a3, a4);
}

uint64_t llvm::CloneFunction()
{
  return MEMORY[0x24BED5A28]();
}

uint64_t llvm::ConstantArray::get()
{
  return MEMORY[0x24BED5A30]();
}

uint64_t llvm::FileCollector::PathCanonicalizer::canonicalize()
{
  return MEMORY[0x24BED5A40]();
}

uint64_t llvm::GlobalDCEPass::run()
{
  return MEMORY[0x24BED5A50]();
}

uint64_t llvm::GlobalOptPass::run()
{
  return MEMORY[0x24BED5A58]();
}

uint64_t llvm::IRBuilderBase::CreateMemSet()
{
  return MEMORY[0x24BED5A60]();
}

uint64_t llvm::IRBuilderBase::CreateSelect()
{
  return MEMORY[0x24BED5A68]();
}

uint64_t llvm::IRBuilderBase::CreateMemMove()
{
  return MEMORY[0x24BED5A70]();
}

uint64_t llvm::IRBuilderBase::CreatePtrDiff()
{
  return MEMORY[0x24BED5A78]();
}

uint64_t llvm::IRBuilderBase::CreateIntrinsic()
{
  return MEMORY[0x24BED5A80]();
}

uint64_t llvm::IRBuilderBase::CreateAssumption()
{
  return MEMORY[0x24BED5A88]();
}

uint64_t llvm::IRBuilderBase::CreateFCmpHelper()
{
  return MEMORY[0x24BED5A90]();
}

uint64_t llvm::IRBuilderBase::CreateMaskedLoad()
{
  return MEMORY[0x24BED5A98]();
}

uint64_t llvm::IRBuilderBase::CreateMaskedStore()
{
  return MEMORY[0x24BED5AA0]();
}

uint64_t llvm::IRBuilderBase::CreateVectorSplat()
{
  return MEMORY[0x24BED5AA8]();
}

{
  return MEMORY[0x24BED5AB0]();
}

uint64_t llvm::IRBuilderBase::CreateGlobalString()
{
  return MEMORY[0x24BED5AB8]();
}

uint64_t llvm::IRBuilderBase::CreateMemCpyInline()
{
  return MEMORY[0x24BED5AC0]();
}

uint64_t llvm::IRBuilderBase::CreateBinaryIntrinsic()
{
  return MEMORY[0x24BED5AC8]();
}

uint64_t llvm::IRBuilderBase::CreateMemTransferInst()
{
  return MEMORY[0x24BED5AD0]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCall()
{
  return MEMORY[0x24BED5AD8]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast()
{
  return MEMORY[0x24BED5AE0]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPBinOp()
{
  return MEMORY[0x24BED5AE8]();
}

uint64_t llvm::IRBuilderBase::CreateAlignmentAssumption()
{
  return MEMORY[0x24BED5AF0]();
}

uint64_t llvm::IRBuilderBase::CreateStripInvariantGroup()
{
  return MEMORY[0x24BED5AF8]();
}

uint64_t llvm::IRBuilderBase::CreateLaunderInvariantGroup()
{
  return MEMORY[0x24BED5B00]();
}

uint64_t llvm::IRBuilderBase::CreatePreserveArrayAccessIndex()
{
  return MEMORY[0x24BED5B08]();
}

uint64_t llvm::IRBuilderBase::CreatePreserveUnionAccessIndex()
{
  return MEMORY[0x24BED5B10]();
}

uint64_t llvm::IRBuilderBase::CreatePreserveStructAccessIndex()
{
  return MEMORY[0x24BED5B18]();
}

uint64_t llvm::OffloadBinary::write()
{
  return MEMORY[0x24BED5B20]();
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this)
{
  return MEMORY[0x24BED5B28](this);
}

uint64_t llvm::StringMapImpl::LookupBucketFor()
{
  return MEMORY[0x24BED5B30]();
}

uint64_t llvm::StringMapImpl::init(llvm::StringMapImpl *this)
{
  return MEMORY[0x24BED5B38](this);
}

uint64_t llvm::StringMapImpl::RemoveKey()
{
  return MEMORY[0x24BED5B40]();
}

uint64_t llvm::StringMapImpl::StringMapImpl(llvm::StringMapImpl *this)
{
  return MEMORY[0x24BED5B48](this);
}

uint64_t llvm::TargetMachine::parseBinutilsVersion()
{
  return MEMORY[0x24BED5B50]();
}

uint64_t llvm::UnaryOperator::Create()
{
  return MEMORY[0x24BED5B58]();
}

uint64_t llvm::raw_fd_stream::read(llvm::raw_fd_stream *this, char *a2)
{
  return MEMORY[0x24BED5B70](this, a2);
}

uint64_t llvm::BinaryOperator::Create()
{
  return MEMORY[0x24BED5B78]();
}

uint64_t llvm::BinaryOperator::CreateNeg()
{
  return MEMORY[0x24BED5B80]();
}

uint64_t llvm::BinaryOperator::CreateNot()
{
  return MEMORY[0x24BED5B88]();
}

uint64_t llvm::ConstantStruct::getTypeForElements()
{
  return MEMORY[0x24BED5B90]();
}

{
  return MEMORY[0x24BED5B98]();
}

uint64_t llvm::ConstantStruct::get()
{
  return MEMORY[0x24BED5BA0]();
}

uint64_t llvm::ConstantVector::get()
{
  return MEMORY[0x24BED5BA8]();
}

uint64_t llvm::ConstantVector::getSplat()
{
  return MEMORY[0x24BED5BB0]();
}

uint64_t llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>()
{
  return off_24FA2B1B8();
}

uint64_t llvm::FoldingSetBase::InsertNode()
{
  return MEMORY[0x24BED5BB8]();
}

uint64_t llvm::FoldingSetBase::GetOrInsertNode()
{
  return MEMORY[0x24BED5BC0]();
}

uint64_t llvm::FoldingSetBase::FindNodeOrInsertPos()
{
  return MEMORY[0x24BED5BC8]();
}

uint64_t llvm::FoldingSetBase::clear(llvm::FoldingSetBase *this)
{
  return MEMORY[0x24BED5BD0](this);
}

uint64_t llvm::FoldingSetBase::FoldingSetBase(llvm::FoldingSetBase *this)
{
  return MEMORY[0x24BED5BD8](this);
}

void llvm::FoldingSetBase::~FoldingSetBase(llvm::FoldingSetBase *this)
{
  MEMORY[0x24BED5BE0](this);
}

uint64_t llvm::FuncletPadInst::FuncletPadInst()
{
  return MEMORY[0x24BED5BE8]();
}

uint64_t llvm::GlobalVariable::addDebugInfo()
{
  return MEMORY[0x24BED5BF0]();
}

uint64_t llvm::GlobalVariable::setInitializer()
{
  return MEMORY[0x24BED5BF8]();
}

uint64_t llvm::GlobalVariable::eraseFromParent(llvm::GlobalVariable *this)
{
  return MEMORY[0x24BED5C00](this);
}

uint64_t llvm::GlobalVariable::removeFromParent(llvm::GlobalVariable *this)
{
  return MEMORY[0x24BED5C08](this);
}

uint64_t llvm::GlobalVariable::copyAttributesFrom(llvm::GlobalVariable *this, const llvm::GlobalVariable *a2)
{
  return MEMORY[0x24BED5C18](this, a2);
}

uint64_t llvm::GlobalVariable::GlobalVariable()
{
  return MEMORY[0x24BED5C20]();
}

{
  return MEMORY[0x24BED5C28]();
}

uint64_t llvm::IndirectBrInst::addDestination(llvm::IndirectBrInst *this, llvm::BasicBlock *a2)
{
  return MEMORY[0x24BED5C30](this, a2);
}

uint64_t llvm::IndirectBrInst::IndirectBrInst()
{
  return MEMORY[0x24BED5C38]();
}

uint64_t llvm::LandingPadInst::Create()
{
  return MEMORY[0x24BED5C50]();
}

uint64_t llvm::LandingPadInst::addClause()
{
  return MEMORY[0x24BED5C58]();
}

uint64_t llvm::MCSectionMachO::ParseSectionSpecifier()
{
  return MEMORY[0x24BED5C60]();
}

uint64_t llvm::ProfileSummary::getMD(llvm::ProfileSummary *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED5C68](this, a2);
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parse()
{
  return MEMORY[0x24BED5C70]();
}

uint64_t llvm::TargetRegistry::lookupTarget()
{
  return MEMORY[0x24BED5C78]();
}

void llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(llvm::ToolOutputFile::CleanupInstaller *this)
{
  MEMORY[0x24BED5C80](this);
}

uint64_t llvm::ToolOutputFile::ToolOutputFile()
{
  return MEMORY[0x24BED5C88]();
}

uint64_t llvm::getOffloadKind()
{
  return MEMORY[0x24BED5CA0]();
}

uint64_t llvm::getPGOFuncName()
{
  return MEMORY[0x24BED5CA8]();
}

uint64_t llvm::isKnownNonZero()
{
  return MEMORY[0x24BED5CB8]();
}

uint64_t llvm::raw_fd_ostream::lock(llvm::raw_fd_ostream *this)
{
  return MEMORY[0x24BED5CC0](this);
}

uint64_t llvm::raw_fd_ostream::seek(llvm::raw_fd_ostream *this)
{
  return MEMORY[0x24BED5CC8](this);
}

uint64_t llvm::raw_fd_ostream::close(llvm::raw_fd_ostream *this)
{
  return MEMORY[0x24BED5CD0](this);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream()
{
  return MEMORY[0x24BED5CD8]();
}

void llvm::raw_fd_ostream::~raw_fd_ostream(llvm::raw_fd_ostream *this)
{
  MEMORY[0x24BED5CE0](this);
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::AnalysisManager()
{
  return off_24FA2B2C8();
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager()
{
  return off_24FA2B2D0();
}

uint64_t llvm::AnalysisManager<llvm::Module>::AnalysisManager()
{
  return off_24FA2B2D8();
}

uint64_t llvm::AnalysisManager<llvm::Function>::AnalysisManager()
{
  return off_24FA2B2E0();
}

uint64_t llvm::BitstreamCursor::readRecord()
{
  return MEMORY[0x24BED5CE8]();
}

uint64_t llvm::BitstreamCursor::skipRecord(llvm::BitstreamCursor *this)
{
  return MEMORY[0x24BED5CF0](this);
}

uint64_t llvm::BitstreamCursor::EnterSubBlock(llvm::BitstreamCursor *this, uint64_t a2, unsigned int *a3)
{
  return MEMORY[0x24BED5CF8](this, a2, a3);
}

uint64_t llvm::BitstreamCursor::ReadAbbrevRecord(llvm::BitstreamCursor *this)
{
  return MEMORY[0x24BED5D00](this);
}

uint64_t llvm::BitstreamCursor::ReadBlockInfoBlock(llvm::BitstreamCursor *this)
{
  return MEMORY[0x24BED5D08](this);
}

uint64_t llvm::CatchReturnInst::CatchReturnInst()
{
  return MEMORY[0x24BED5D10]();
}

uint64_t llvm::CatchSwitchInst::addHandler(llvm::CatchSwitchInst *this, llvm::BasicBlock *a2)
{
  return MEMORY[0x24BED5D18](this, a2);
}

uint64_t llvm::CatchSwitchInst::CatchSwitchInst()
{
  return MEMORY[0x24BED5D20]();
}

uint64_t llvm::DebugInfoFinder::processModule()
{
  return MEMORY[0x24BED5D28]();
}

uint64_t llvm::FixedVectorType::get()
{
  return MEMORY[0x24BED5D38]();
}

void llvm::IRBuilderFolder::~IRBuilderFolder(llvm::IRBuilderFolder *this)
{
  MEMORY[0x24BED5D40](this);
}

uint64_t llvm::InsertValueInst::init()
{
  return MEMORY[0x24BED5D48]();
}

uint64_t llvm::InstCombinePass::run()
{
  return MEMORY[0x24BED5D50]();
}

uint64_t llvm::InstCombinePass::InstCombinePass(llvm::InstCombinePass *this)
{
  return MEMORY[0x24BED5D58](this);
}

uint64_t llvm::InternalizePass::internalizeModule()
{
  return MEMORY[0x24BED5D60]();
}

uint64_t llvm::InternalizePass::run()
{
  return MEMORY[0x24BED5D68]();
}

uint64_t llvm::LockFileManager::waitForUnlock(llvm::LockFileManager *this)
{
  return MEMORY[0x24BED5D70](this);
}

uint64_t llvm::LockFileManager::unsafeRemoveLockFile(llvm::LockFileManager *this)
{
  return MEMORY[0x24BED5D78](this);
}

uint64_t llvm::LockFileManager::LockFileManager()
{
  return MEMORY[0x24BED5D80]();
}

void llvm::LockFileManager::~LockFileManager(llvm::LockFileManager *this)
{
  MEMORY[0x24BED5D88](this);
}

uint64_t llvm::MCTargetOptions::MCTargetOptions(llvm::MCTargetOptions *this)
{
  return MEMORY[0x24BED5D90](this);
}

uint64_t llvm::MemProfilerPass::run()
{
  return MEMORY[0x24BED5D98]();
}

uint64_t llvm::MemProfilerPass::MemProfilerPass(llvm::MemProfilerPass *this)
{
  return MEMORY[0x24BED5DA0](this);
}

uint64_t llvm::MemoryBufferRef::MemoryBufferRef(llvm::MemoryBufferRef *this, const llvm::MemoryBuffer *a2)
{
  return MEMORY[0x24BED5DA8](this, a2);
}

uint64_t llvm::MetadataAsValue::get()
{
  return MEMORY[0x24BED5DB0]();
}

uint64_t llvm::OpenMPIRBuilder::initialize(llvm::OpenMPIRBuilder *this)
{
  return MEMORY[0x24BED5DB8](this);
}

uint64_t llvm::OpenMPIRBuilder::createFlush()
{
  return MEMORY[0x24BED5DC0]();
}

uint64_t llvm::OpenMPIRBuilder::createCancel()
{
  return MEMORY[0x24BED5DC8]();
}

uint64_t llvm::OpenMPIRBuilder::createMasked()
{
  return MEMORY[0x24BED5DD0]();
}

uint64_t llvm::OpenMPIRBuilder::createMaster()
{
  return MEMORY[0x24BED5DD8]();
}

uint64_t llvm::OpenMPIRBuilder::createBarrier()
{
  return MEMORY[0x24BED5DE0]();
}

uint64_t llvm::OpenMPIRBuilder::createOMPFree()
{
  return MEMORY[0x24BED5DE8]();
}

uint64_t llvm::OpenMPIRBuilder::createSection()
{
  return MEMORY[0x24BED5DF0]();
}

uint64_t llvm::OpenMPIRBuilder::createCritical()
{
  return MEMORY[0x24BED5DF8]();
}

uint64_t llvm::OpenMPIRBuilder::createOMPAlloc()
{
  return MEMORY[0x24BED5E00]();
}

uint64_t llvm::OpenMPIRBuilder::createParallel()
{
  return MEMORY[0x24BED5E08]();
}

uint64_t llvm::OpenMPIRBuilder::createSections()
{
  return MEMORY[0x24BED5E10]();
}

uint64_t llvm::OpenMPIRBuilder::createTaskwait()
{
  return MEMORY[0x24BED5E18]();
}

uint64_t llvm::OpenMPIRBuilder::unrollLoopFull()
{
  return MEMORY[0x24BED5E20]();
}

uint64_t llvm::OpenMPIRBuilder::createTaskyield()
{
  return MEMORY[0x24BED5E28]();
}

uint64_t llvm::OpenMPIRBuilder::createGlobalFlag()
{
  return MEMORY[0x24BED5E30]();
}

uint64_t llvm::OpenMPIRBuilder::createTargetInit()
{
  return MEMORY[0x24BED5E38]();
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateIdent()
{
  return MEMORY[0x24BED5E40]();
}

uint64_t llvm::OpenMPIRBuilder::unrollLoopPartial()
{
  return MEMORY[0x24BED5E48]();
}

uint64_t llvm::OpenMPIRBuilder::applyWorkshareLoop()
{
  return MEMORY[0x24BED5E50]();
}

uint64_t llvm::OpenMPIRBuilder::createTargetDeinit()
{
  return MEMORY[0x24BED5E58]();
}

uint64_t llvm::OpenMPIRBuilder::createAtomicCompare()
{
  return MEMORY[0x24BED5E60]();
}

uint64_t llvm::OpenMPIRBuilder::createCanonicalLoop()
{
  return MEMORY[0x24BED5E68]();
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropUse()
{
  return MEMORY[0x24BED5E70]();
}

uint64_t llvm::OpenMPIRBuilder::createOrderedDepend()
{
  return MEMORY[0x24BED5E78]();
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateThreadID()
{
  return MEMORY[0x24BED5E80]();
}

uint64_t llvm::OpenMPIRBuilder::unrollLoopHeuristic()
{
  return MEMORY[0x24BED5E88]();
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropInit()
{
  return MEMORY[0x24BED5E90]();
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr()
{
  return MEMORY[0x24BED5E98]();
}

{
  return MEMORY[0x24BED5EA0]();
}

uint64_t llvm::OpenMPIRBuilder::createOffloadMapnames()
{
  return MEMORY[0x24BED5EA8]();
}

uint64_t llvm::OpenMPIRBuilder::createOffloadMaptypes()
{
  return MEMORY[0x24BED5EB0]();
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropDestroy()
{
  return MEMORY[0x24BED5EB8]();
}

uint64_t llvm::OpenMPIRBuilder::createOrderedThreadsSimd()
{
  return MEMORY[0x24BED5EC0]();
}

uint64_t llvm::OpenMPIRBuilder::createCachedThreadPrivate()
{
  return MEMORY[0x24BED5EC8]();
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction()
{
  return MEMORY[0x24BED5ED0]();
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateDefaultSrcLocStr(llvm::OpenMPIRBuilder *this, unsigned int *a2)
{
  return MEMORY[0x24BED5ED8](this, a2);
}

uint64_t llvm::OpenMPIRBuilder::finalize(llvm::OpenMPIRBuilder *this, Function *a2)
{
  return MEMORY[0x24BED5EE0](this, a2);
}

uint64_t llvm::OpenMPIRBuilder::applySimd()
{
  return MEMORY[0x24BED5EE8]();
}

void llvm::OpenMPIRBuilder::~OpenMPIRBuilder(llvm::OpenMPIRBuilder *this)
{
  MEMORY[0x24BED5EF0](this);
}

uint64_t llvm::PrintModulePass::run()
{
  return MEMORY[0x24BED5EF8]();
}

uint64_t llvm::PrintModulePass::PrintModulePass()
{
  return MEMORY[0x24BED5F00]();
}

uint64_t llvm::PrintStatistics(llvm *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED5F08](this, a2);
}

uint64_t llvm::PromoteMemToReg()
{
  return MEMORY[0x24BED5F10]();
}

uint64_t llvm::SimplifyCFGPass::printPipeline()
{
  return MEMORY[0x24BED5F20]();
}

uint64_t llvm::SimplifyCFGPass::run()
{
  return MEMORY[0x24BED5F28]();
}

uint64_t llvm::SimplifyCFGPass::SimplifyCFGPass(llvm::SimplifyCFGPass *this)
{
  return MEMORY[0x24BED5F30](this);
}

uint64_t llvm::SmallVectorBase<unsigned int>::mallocForGrow()
{
  return off_24FA2B528();
}

uint64_t llvm::SmallVectorBase<unsigned int>::grow_pod()
{
  return off_24FA2B530();
}

uint64_t llvm::SmallVectorBase<unsigned long long>::grow_pod()
{
  return off_24FA2B538();
}

uint64_t llvm::SpecialCaseList::createOrDie()
{
  return MEMORY[0x24BED5F38]();
}

uint64_t llvm::SpecialCaseList::createInternal()
{
  return MEMORY[0x24BED5F40]();
}

void llvm::SpecialCaseList::~SpecialCaseList(llvm::SpecialCaseList *this)
{
  MEMORY[0x24BED5F48](this);
}

{
  MEMORY[0x24BED5F50](this);
}

uint64_t llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::BasicBlock *a3)
{
  return MEMORY[0x24BED5F58](this, a2, a3);
}

uint64_t llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::Instruction *a3)
{
  return MEMORY[0x24BED5F60](this, a2, a3);
}

uint64_t llvm::ValueAsMetadata::get()
{
  return MEMORY[0x24BED5F70]();
}

uint64_t llvm::ValueHandleBase::AddToUseList(llvm::ValueHandleBase *this)
{
  return MEMORY[0x24BED5F78](this);
}

uint64_t llvm::ValueHandleBase::RemoveFromUseList(llvm::ValueHandleBase *this)
{
  return MEMORY[0x24BED5F80](this);
}

uint64_t llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBase *this, llvm::ValueHandleBase **a2)
{
  return MEMORY[0x24BED5F88](this, a2);
}

uint64_t llvm::allocate_buffer(llvm *this)
{
  return MEMORY[0x24BED5F90](this);
}

uint64_t llvm::isBytewiseValue()
{
  return MEMORY[0x24BED5F98]();
}

uint64_t llvm::EnableStatistics(llvm *this)
{
  return MEMORY[0x24BED5FA0](this);
}

uint64_t llvm::ExtractValueInst::getIndexedType()
{
  return MEMORY[0x24BED5FA8]();
}

uint64_t llvm::ExtractValueInst::init()
{
  return MEMORY[0x24BED5FB0]();
}

uint64_t llvm::FoldingSetNodeID::AddNodeID()
{
  return MEMORY[0x24BED5FB8]();
}

uint64_t llvm::FoldingSetNodeID::AddString()
{
  return MEMORY[0x24BED5FC0]();
}

void llvm::IRChangedPrinter::~IRChangedPrinter(llvm::IRChangedPrinter *this)
{
  MEMORY[0x24BED5FC8](this);
}

uint64_t llvm::MCObjectFileInfo::initMCObjectFileInfo()
{
  return MEMORY[0x24BED5FD0]();
}

uint64_t llvm::MetadataTracking::track()
{
  return MEMORY[0x24BED5FD8]();
}

uint64_t llvm::MetadataTracking::retrack()
{
  return MEMORY[0x24BED5FE0]();
}

uint64_t llvm::MetadataTracking::untrack()
{
  return MEMORY[0x24BED5FE8]();
}

uint64_t llvm::StoreIntToMemory()
{
  return MEMORY[0x24BED5FF8]();
}

uint64_t llvm::TargetIRAnalysis::run()
{
  return MEMORY[0x24BED6008]();
}

uint64_t llvm::TargetIRAnalysis::TargetIRAnalysis(llvm::TargetIRAnalysis *this)
{
  return MEMORY[0x24BED6010](this);
}

uint64_t llvm::errorCodeToError(llvm *this, std::error_code a2)
{
  return MEMORY[0x24BED6030](this, *(_QWORD *)&a2.__val_, a2.__cat_);
}

uint64_t llvm::errorToErrorCode()
{
  return MEMORY[0x24BED6038]();
}

uint64_t llvm::isIRPrintingPass()
{
  return MEMORY[0x24BED6048]();
}

uint64_t llvm::parseBitcodeFile()
{
  return MEMORY[0x24BED6050]();
}

void llvm::raw_null_ostream::~raw_null_ostream(llvm::raw_null_ostream *this)
{
  MEMORY[0x24BED6058](this);
}

uint64_t llvm::AlwaysInlinerPass::run()
{
  return MEMORY[0x24BED6060]();
}

uint64_t llvm::AtomicCmpXchgInst::AtomicCmpXchgInst()
{
  return MEMORY[0x24BED6068]();
}

uint64_t llvm::BitcodeWriterPass::run()
{
  return MEMORY[0x24BED6070]();
}

uint64_t llvm::CleanupReturnInst::CleanupReturnInst()
{
  return MEMORY[0x24BED6078]();
}

uint64_t llvm::CloneFunctionInto()
{
  return MEMORY[0x24BED6080]();
}

uint64_t llvm::ConstantDataArray::getString()
{
  return MEMORY[0x24BED6088]();
}

uint64_t llvm::ConstantTokenNone::get(llvm::ConstantTokenNone *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6090](this, a2);
}

uint64_t llvm::ConvertUTF8toWide()
{
  return MEMORY[0x24BED6098]();
}

uint64_t llvm::GetElementPtrInst::setIsInBounds(llvm::GetElementPtrInst *this)
{
  return MEMORY[0x24BED60A0](this);
}

uint64_t llvm::GetElementPtrInst::getIndexedType()
{
  return MEMORY[0x24BED60A8]();
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex()
{
  return MEMORY[0x24BED60B0]();
}

uint64_t llvm::GetElementPtrInst::init()
{
  return MEMORY[0x24BED60B8]();
}

uint64_t llvm::GlobalPtrAuthInfo::analyze()
{
  return MEMORY[0x24BED60C0]();
}

uint64_t llvm::InsertElementInst::InsertElementInst()
{
  return MEMORY[0x24BED60C8]();
}

uint64_t llvm::LoadIntFromMemory()
{
  return MEMORY[0x24BED60D0]();
}

uint64_t llvm::ModuleSymbolTable::addModule()
{
  return MEMORY[0x24BED60D8]();
}

uint64_t llvm::ShuffleVectorInst::getShuffleMask()
{
  return MEMORY[0x24BED60F8]();
}

uint64_t llvm::ShuffleVectorInst::ShuffleVectorInst()
{
  return MEMORY[0x24BED6100]();
}

uint64_t llvm::TimePassesHandler::print(llvm::TimePassesHandler *this)
{
  return MEMORY[0x24BED6108](this);
}

uint64_t llvm::TracepointBuilder::CreateDataTracepoint()
{
  return MEMORY[0x24BE38820]();
}

uint64_t llvm::TracepointBuilder::CreateDataValueTracepoint()
{
  return MEMORY[0x24BE38830]();
}

uint64_t llvm::TracepointBuilder::CreateGlobalVariableTracepoint(llvm::TracepointBuilder *this, llvm::GlobalVariable *a2)
{
  return MEMORY[0x24BE38858](this, a2);
}

uint64_t llvm::TracepointBuilder::CreateGlobalVariableTracepoint()
{
  return MEMORY[0x24BE38860]();
}

uint64_t llvm::TracepointBuilder::TracepointBuilder(llvm::TracepointBuilder *this, Function *a2)
{
  return MEMORY[0x24BE388A0](this, a2);
}

uint64_t llvm::TrackingStatistic::RegisterStatistic(llvm::TrackingStatistic *this)
{
  return MEMORY[0x24BED6110](this);
}

uint64_t llvm::annotateValueSite()
{
  return MEMORY[0x24BED6118]();
}

uint64_t llvm::createMCAsmParser()
{
  return MEMORY[0x24BED6120]();
}

uint64_t llvm::createStringError(llvm *this, std::error_code a2, const char *a3)
{
  return MEMORY[0x24BED6128](this, *(_QWORD *)&a2.__val_, a2.__cat_, a3);
}

uint64_t llvm::deallocate_buffer(llvm *this, void *a2)
{
  return MEMORY[0x24BED6130](this, a2);
}

uint64_t llvm::isLegalUTF8String(llvm *this, const unsigned __int8 **a2, const unsigned __int8 *a3)
{
  return MEMORY[0x24BED6138](this, a2, a3);
}

uint64_t llvm::ConstantDataVector::get()
{
  return MEMORY[0x24BED6148]();
}

uint64_t llvm::ConvertUTF8toUTF16()
{
  return MEMORY[0x24BED6178]();
}

uint64_t llvm::ConvertUTF8toUTF32()
{
  return MEMORY[0x24BED6180]();
}

uint64_t llvm::DSOLocalEquivalent::get(llvm::DSOLocalEquivalent *this, llvm::GlobalValue *a2)
{
  return MEMORY[0x24BED6188](this, a2);
}

uint64_t llvm::ExtractElementInst::ExtractElementInst()
{
  return MEMORY[0x24BED6190]();
}

uint64_t llvm::PassManagerBuilder::populateModulePassManager()
{
  return MEMORY[0x24BED6198]();
}

uint64_t llvm::PassManagerBuilder::populateFunctionPassManager()
{
  return MEMORY[0x24BED61A0]();
}

void llvm::PassManagerBuilder::~PassManagerBuilder(llvm::PassManagerBuilder *this)
{
  MEMORY[0x24BED61A8](this);
}

uint64_t llvm::ScalableVectorType::get()
{
  return MEMORY[0x24BED61B0]();
}

uint64_t llvm::StringTableBuilder::add()
{
  return MEMORY[0x24BED61B8]();
}

uint64_t llvm::StringTableBuilder::StringTableBuilder()
{
  return MEMORY[0x24BED61C0]();
}

void llvm::StringTableBuilder::~StringTableBuilder(llvm::StringTableBuilder *this)
{
  MEMORY[0x24BED61C8](this);
}

uint64_t llvm::TracepointCallInst::classof(llvm::TracepointCallInst *this, const llvm::Instruction *a2)
{
  return MEMORY[0x24BE388A8](this, a2);
}

uint64_t llvm::WriteBitcodeToFile()
{
  return MEMORY[0x24BED61D0]();
}

uint64_t llvm::createNullStreamer()
{
  return MEMORY[0x24BED61E8]();
}

uint64_t llvm::createVerifierPass(llvm *this)
{
  return MEMORY[0x24BED61F0](this);
}

uint64_t llvm::getAsSignedInteger()
{
  return MEMORY[0x24BED61F8]();
}

uint64_t llvm::getNumBytesForUTF8(llvm *this)
{
  return MEMORY[0x24BED6200](this);
}

uint64_t llvm::report_fatal_error()
{
  return MEMORY[0x24BED6210]();
}

{
  return MEMORY[0x24BED6220]();
}

uint64_t llvm::report_fatal_error(llvm *this, const char *a2)
{
  return MEMORY[0x24BED6218](this, a2);
}

uint64_t llvm::ConstantPointerNull::get(llvm::ConstantPointerNull *this, llvm::PointerType *a2)
{
  return MEMORY[0x24BED6228](this, a2);
}

uint64_t llvm::ExtendedPassBuilder::buildAIRO0DefaultPipeline()
{
  return MEMORY[0x24BE388B0]();
}

uint64_t llvm::ExtendedPassBuilder::buildAIRPerModuleDefaultPipeline()
{
  return MEMORY[0x24BE388B8]();
}

uint64_t llvm::ExtendedPassBuilder::ExtendedPassBuilder()
{
  return MEMORY[0x24BE388C0]();
}

void llvm::InLineChangePrinter::~InLineChangePrinter(llvm::InLineChangePrinter *this)
{
  MEMORY[0x24BED6230](this);
}

uint64_t llvm::PrintStatisticsJSON(llvm *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED6238](this, a2);
}

uint64_t llvm::SanitizerStatReport::create()
{
  return MEMORY[0x24BED6248]();
}

uint64_t llvm::SanitizerStatReport::finish(llvm::SanitizerStatReport *this)
{
  return MEMORY[0x24BED6250](this);
}

uint64_t llvm::SanitizerStatReport::SanitizerStatReport()
{
  return MEMORY[0x24BED6258]();
}

uint64_t llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  return MEMORY[0x24BED6260](this, a2);
}

uint64_t llvm::SmallPtrSetImplBase::shrink_and_clear(llvm::SmallPtrSetImplBase *this)
{
  return MEMORY[0x24BED6268](this);
}

uint64_t llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase *this, llvm::SmallPtrSetImplBase *a2)
{
  return MEMORY[0x24BED6270](this, a2);
}

uint64_t llvm::SmallPtrSetImplBase::CopyFrom(llvm::SmallPtrSetImplBase *this, const llvm::SmallPtrSetImplBase *a2)
{
  return MEMORY[0x24BED6278](this, a2);
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(llvm::SmallPtrSetImplBase *this, const void **a2, const llvm::SmallPtrSetImplBase *a3)
{
  return MEMORY[0x24BED6280](this, a2, a3);
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase()
{
  return MEMORY[0x24BED6288]();
}

uint64_t llvm::TargetTransformInfo::TargetTransformInfo()
{
  return MEMORY[0x24BED6290]();
}

void llvm::TargetTransformInfo::~TargetTransformInfo(llvm::TargetTransformInfo *this)
{
  MEMORY[0x24BED6298](this);
}

uint64_t llvm::embedBufferInModule()
{
  return MEMORY[0x24BED62B0]();
}

uint64_t llvm::isBitcodeWriterPass()
{
  return MEMORY[0x24BED62C0]();
}

uint64_t llvm::isLegalUTF8Sequence(llvm *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x24BED62C8](this, a2, a3);
}

uint64_t llvm::setTracepointThread()
{
  return MEMORY[0x24BE388C8]();
}

uint64_t llvm::writeFileAtomically()
{
  return MEMORY[0x24BED62D8]();
}

uint64_t llvm::CrashRecoveryContext::GetCurrent(llvm::CrashRecoveryContext *this)
{
  return MEMORY[0x24BED62E0](this);
}

uint64_t llvm::CrashRecoveryContext::registerCleanup()
{
  return MEMORY[0x24BED62E8]();
}

uint64_t llvm::CrashRecoveryContext::RunSafelyOnThread()
{
  return MEMORY[0x24BED62F0]();
}

uint64_t llvm::CrashRecoveryContext::unregisterCleanup()
{
  return MEMORY[0x24BED62F8]();
}

uint64_t llvm::CrashRecoveryContext::CrashRecoveryContext(llvm::CrashRecoveryContext *this)
{
  return MEMORY[0x24BED6300](this);
}

void llvm::CrashRecoveryContext::~CrashRecoveryContext(llvm::CrashRecoveryContext *this)
{
  MEMORY[0x24BED6308](this);
}

void llvm::DotCfgChangeReporter::~DotCfgChangeReporter(llvm::DotCfgChangeReporter *this)
{
  MEMORY[0x24BED6310](this);
}

uint64_t llvm::NullPointerIsDefined(llvm *this, const Function *a2)
{
  return MEMORY[0x24BED6318](this, a2);
}

uint64_t llvm::SavePrettyStackState(llvm *this)
{
  return MEMORY[0x24BED6320](this);
}

uint64_t llvm::WritableMemoryBuffer::getNewMemBuffer()
{
  return MEMORY[0x24BED6328]();
}

uint64_t llvm::WritableMemoryBuffer::getNewUninitMemBuffer()
{
  return MEMORY[0x24BED6330]();
}

uint64_t llvm::createPGOFuncNameVar()
{
  return MEMORY[0x24BED6340]();
}

uint64_t llvm::embedBitcodeInModule()
{
  return MEMORY[0x24BED6348]();
}

uint64_t llvm::emitAMDGPUPrintfCall()
{
  return MEMORY[0x24BED6350]();
}

uint64_t llvm::getAsUnsignedInteger()
{
  return MEMORY[0x24BED6358]();
}

uint64_t llvm::timeTraceProfilerEnd(llvm *this)
{
  return MEMORY[0x24BED6370](this);
}

uint64_t llvm::ConstantAggregateZero::get()
{
  return MEMORY[0x24BED6378]();
}

uint64_t llvm::ModuleMemProfilerPass::run()
{
  return MEMORY[0x24BED6380]();
}

uint64_t llvm::ModuleMemProfilerPass::ModuleMemProfilerPass(llvm::ModuleMemProfilerPass *this)
{
  return MEMORY[0x24BED6388](this);
}

uint64_t llvm::PipelineTuningOptions::PipelineTuningOptions(llvm::PipelineTuningOptions *this)
{
  return MEMORY[0x24BED6390](this);
}

uint64_t llvm::PrettyStackTraceEntry::PrettyStackTraceEntry()
{
  return MEMORY[0x24BED6398]();
}

void llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry(llvm::PrettyStackTraceEntry *this)
{
  MEMORY[0x24BED63A0](this);
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList()
{
  return off_24FA2B9B8();
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList()
{
  return off_24FA2B9C0();
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::transferNodesFromList()
{
  return off_24FA2B9C8();
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList()
{
  return off_24FA2B9D0();
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::addNodeToList()
{
  return off_24FA2B9D8();
}

uint64_t llvm::TargetLibraryAnalysis::run()
{
  return MEMORY[0x24BED63B0]();
}

uint64_t llvm::TargetLibraryInfoImpl::addVectorizableFunctionsFromVecLib()
{
  return MEMORY[0x24BED63B8]();
}

uint64_t llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl()
{
  return MEMORY[0x24BED63C0]();
}

{
  return MEMORY[0x24BED63C8]();
}

{
  return MEMORY[0x24BED63D0]();
}

uint64_t llvm::createPrintModulePass()
{
  return MEMORY[0x24BED63E0]();
}

uint64_t llvm::getConstantStringInfo()
{
  return MEMORY[0x24BED63E8]();
}

uint64_t llvm::ConstantDataSequential::getImpl()
{
  return MEMORY[0x24BED63F8]();
}

uint64_t llvm::ConvertCodePointToUTF8(llvm *this, uint64_t a2, char **a3)
{
  return MEMORY[0x24BED6408](this, a2, a3);
}

uint64_t llvm::FoldingSetIteratorImpl::advance(llvm::FoldingSetIteratorImpl *this)
{
  return MEMORY[0x24BED6410](this);
}

uint64_t llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl(llvm::FoldingSetIteratorImpl *this, void **a2)
{
  return MEMORY[0x24BED6418](this, a2);
}

uint64_t llvm::IndexedInstrProfReader::getInstrProfRecord()
{
  return MEMORY[0x24BED6420]();
}

uint64_t llvm::IndexedInstrProfReader::create()
{
  return MEMORY[0x24BED6428]();
}

void llvm::PrintIRInstrumentation::~PrintIRInstrumentation(llvm::PrintIRInstrumentation *this)
{
  MEMORY[0x24BED6438](this);
}

uint64_t llvm::consumeUnsignedInteger()
{
  return MEMORY[0x24BED6440]();
}

uint64_t llvm::inconvertibleErrorCode(llvm *this)
{
  return MEMORY[0x24BED6450](this);
}

uint64_t llvm::report_bad_alloc_error(llvm *this, const char *a2)
{
  return MEMORY[0x24BED6458](this, a2);
}

uint64_t llvm::setTracepointResources(llvm *this, Function *a2)
{
  return MEMORY[0x24BE388D0](this, a2);
}

uint64_t llvm::timeTraceProfilerBegin()
{
  return MEMORY[0x24BED6460]();
}

{
  return MEMORY[0x24BED6468]();
}

uint64_t llvm::ItaniumPartialDemangler::partialDemangle(llvm::ItaniumPartialDemangler *this, const char *a2)
{
  return MEMORY[0x24BED6478](this, a2);
}

uint64_t llvm::ItaniumPartialDemangler::ItaniumPartialDemangler(llvm::ItaniumPartialDemangler *this)
{
  return MEMORY[0x24BED6480](this);
}

void llvm::ItaniumPartialDemangler::~ItaniumPartialDemangler(llvm::ItaniumPartialDemangler *this)
{
  MEMORY[0x24BED6488](this);
}

void llvm::MCAsmParserSemaCallback::~MCAsmParserSemaCallback(llvm::MCAsmParserSemaCallback *this)
{
  MEMORY[0x24BED6490](this);
}

uint64_t llvm::ReplaceableMetadataImpl::replaceAllUsesWith()
{
  return MEMORY[0x24BED6498]();
}

uint64_t llvm::RestorePrettyStackState(llvm *this, const void *a2)
{
  return MEMORY[0x24BED64A0](this, a2);
}

uint64_t llvm::TracepointFinalizerPass::run()
{
  return MEMORY[0x24BE388D8]();
}

uint64_t llvm::createBitcodeWriterPass(llvm *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED64B0](this, a2);
}

uint64_t llvm::getInstrProfSectionName()
{
  return MEMORY[0x24BED64C0]();
}

void llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(llvm::IRBuilderDefaultInserter *this)
{
  MEMORY[0x24BED64D8](this);
}

{
  MEMORY[0x24BED64E0](this);
}

uint64_t llvm::StandardInstrumentations::registerCallbacks()
{
  return MEMORY[0x24BED64F0]();
}

uint64_t llvm::StandardInstrumentations::StandardInstrumentations()
{
  return MEMORY[0x24BED64F8]();
}

uint64_t llvm::ThinLTOBitcodeWriterPass::run()
{
  return MEMORY[0x24BED6500]();
}

uint64_t llvm::TracepointInstrumentPass::run()
{
  return MEMORY[0x24BE388E0]();
}

uint64_t llvm::convertUTF16ToUTF8String()
{
  return MEMORY[0x24BED6508]();
}

uint64_t llvm::createLowerTypeTestsPass()
{
  return MEMORY[0x24BED6510]();
}

uint64_t llvm::createRewriteSymbolsPass()
{
  return MEMORY[0x24BED6518]();
}

uint64_t llvm::TracepointWorkaroundsPass::run()
{
  return MEMORY[0x24BE388E8]();
}

uint64_t llvm::createObjCARCContractPass(llvm *this)
{
  return MEMORY[0x24BED6548](this);
}

uint64_t llvm::createPGOFuncNameMetadata()
{
  return MEMORY[0x24BED6550]();
}

uint64_t llvm::setTracepointAddressSpace(llvm *this, Function *a2)
{
  return MEMORY[0x24BE388F0](this, a2);
}

uint64_t llvm::TracepointVariableCallInst::classof(llvm::TracepointVariableCallInst *this, const llvm::Instruction *a2)
{
  return MEMORY[0x24BE388F8](this, a2);
}

uint64_t llvm::createFunctionInliningPass(llvm *this)
{
  return MEMORY[0x24BED6568](this);
}

uint64_t llvm::getOrEnforceKnownAlignment()
{
  return MEMORY[0x24BED6578]();
}

uint64_t llvm::getOwningLazyBitcodeModule()
{
  return MEMORY[0x24BED6580]();
}

void llvm::CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup(llvm::CrashRecoveryContextCleanup *this)
{
  MEMORY[0x24BED6590](this);
}

uint64_t llvm::ModuleToFunctionPassAdaptor::printPipeline()
{
  return MEMORY[0x24BED65A0]();
}

uint64_t llvm::ModuleToFunctionPassAdaptor::run()
{
  return MEMORY[0x24BED65A8]();
}

uint64_t llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass()
{
  return MEMORY[0x24BED65C0]();
}

uint64_t llvm::getTimeTraceProfilerInstance(llvm *this)
{
  return MEMORY[0x24BED65D8](this);
}

uint64_t llvm::setTracepointArgumentBuffers(llvm *this, Function *a2)
{
  return MEMORY[0x24BE38900](this, a2);
}

uint64_t llvm::setupLLVMOptimizationRemarks()
{
  return MEMORY[0x24BED65E0]();
}

uint64_t llvm::createAlwaysInlinerLegacyPass(llvm *this)
{
  return MEMORY[0x24BED65F0](this);
}

uint64_t llvm::createWriteThinLTOBitcodePass(llvm *this, llvm::raw_ostream *a2, llvm::raw_ostream *a3)
{
  return MEMORY[0x24BED6600](this, a2, a3);
}

uint64_t llvm::errorToErrorCodeAndEmitErrors()
{
  return MEMORY[0x24BED6608]();
}

uint64_t llvm::cl::PrintOptionValues(llvm::cl *this)
{
  return MEMORY[0x24BED6610](this);
}

uint64_t llvm::cl::getGeneralCategory(llvm::cl *this)
{
  return MEMORY[0x24BED6618](this);
}

uint64_t llvm::cl::TokenizeGNUCommandLine()
{
  return MEMORY[0x24BED6620]();
}

uint64_t llvm::cl::ParseCommandLineOptions()
{
  return MEMORY[0x24BED6628]();
}

uint64_t llvm::cl::Option::addArgument(llvm::cl::Option *this)
{
  return MEMORY[0x24BED6630](this);
}

uint64_t llvm::cl::Option::setArgStr()
{
  return MEMORY[0x24BED6638]();
}

uint64_t llvm::setTracepointInstrumentFunction(llvm *this, Function *a2)
{
  return MEMORY[0x24BE38908](this, a2);
}

uint64_t llvm::createTargetTransformInfoWrapperPass()
{
  return MEMORY[0x24BED6658]();
}

uint64_t llvm::createTracepointInstrumentLegacyPass(llvm *this)
{
  return MEMORY[0x24BE38910](this);
}

uint64_t llvm::ARM::getCPUAttr()
{
  return MEMORY[0x24BED66F0]();
}

uint64_t llvm::ARM::getSubArch()
{
  return MEMORY[0x24BED66F8]();
}

uint64_t llvm::ARM::getArchName()
{
  return MEMORY[0x24BED6700]();
}

uint64_t llvm::ARM::parseArchISA()
{
  return MEMORY[0x24BED6708]();
}

uint64_t llvm::ARM::parseCPUArch()
{
  return MEMORY[0x24BED6710]();
}

uint64_t llvm::ARM::getDefaultCPU()
{
  return MEMORY[0x24BED6718]();
}

uint64_t llvm::ARM::getDefaultFPU()
{
  return MEMORY[0x24BED6720]();
}

uint64_t llvm::ARM::getFPUFeatures()
{
  return MEMORY[0x24BED6728]();
}

uint64_t llvm::ARM::parseArchProfile()
{
  return MEMORY[0x24BED6730]();
}

uint64_t llvm::ARM::parseArchVersion()
{
  return MEMORY[0x24BED6738]();
}

uint64_t llvm::ARM::fillValidCPUArchList()
{
  return MEMORY[0x24BED6740]();
}

uint64_t llvm::ARM::getDefaultExtensions()
{
  return MEMORY[0x24BED6748]();
}

uint64_t llvm::ARM::getExtensionFeatures()
{
  return MEMORY[0x24BED6750]();
}

uint64_t llvm::ARM::parseBranchProtection()
{
  return MEMORY[0x24BED6758]();
}

uint64_t llvm::ARM::parseArch()
{
  return MEMORY[0x24BED6760]();
}

uint64_t llvm::DOT::EscapeString()
{
  return MEMORY[0x24BED6768]();
}

uint64_t llvm::MD5::stringifyResult()
{
  return MEMORY[0x24BED6770]();
}

uint64_t llvm::MD5::hash()
{
  return MEMORY[0x24BED6778]();
}

uint64_t llvm::MD5::final()
{
  return MEMORY[0x24BED6780]();
}

uint64_t llvm::MD5::update()
{
  return MEMORY[0x24BED6788]();
}

{
  return MEMORY[0x24BED6790]();
}

uint64_t llvm::MD5::MD5(llvm::MD5 *this)
{
  return MEMORY[0x24BED6798](this);
}

uint64_t llvm::X86::parseArchX86()
{
  return MEMORY[0x24BED67A0]();
}

uint64_t llvm::X86::parseTuneCPU()
{
  return MEMORY[0x24BED67A8]();
}

uint64_t llvm::X86::getKeyFeature()
{
  return MEMORY[0x24BED67B0]();
}

uint64_t llvm::X86::getFeaturesForCPU()
{
  return MEMORY[0x24BED67B8]();
}

uint64_t llvm::X86::getCpuSupportsMask()
{
  return MEMORY[0x24BED67C0]();
}

uint64_t llvm::X86::getFeaturePriority()
{
  return MEMORY[0x24BED67C8]();
}

uint64_t llvm::X86::fillValidCPUArchList()
{
  return MEMORY[0x24BED67D0]();
}

uint64_t llvm::X86::fillValidTuneCPUList()
{
  return MEMORY[0x24BED67D8]();
}

uint64_t llvm::X86::updateImpliedFeatures()
{
  return MEMORY[0x24BED67E0]();
}

uint64_t llvm::air::AIArgument::classof()
{
  return MEMORY[0x24BE38918]();
}

uint64_t llvm::air::AICIStruct::getImpl()
{
  return MEMORY[0x24BE38920]();
}

uint64_t llvm::air::AIConstant::getImpl()
{
  return MEMORY[0x24BE38928]();
}

uint64_t llvm::air::AIDepthRet::getImpl()
{
  return MEMORY[0x24BE38930]();
}

uint64_t llvm::air::AIEnumType::getImpl()
{
  return MEMORY[0x24BE38938]();
}

uint64_t llvm::air::AIMeshType::getImpl()
{
  return MEMORY[0x24BE38940]();
}

uint64_t llvm::air::AIPosition::getImpl()
{
  return MEMORY[0x24BE38948]();
}

uint64_t llvm::air::AIUserAttr::getImpl()
{
  return MEMORY[0x24BE38950]();
}

uint64_t llvm::air::ExportFile::create()
{
  return MEMORY[0x24BE38958]();
}

uint64_t llvm::air::AIArrayType::getImpl()
{
  return MEMORY[0x24BE38960]();
}

uint64_t llvm::air::AICIPadding::getImpl()
{
  return MEMORY[0x24BE38968]();
}

uint64_t llvm::air::AICIPointer::getImpl()
{
  return MEMORY[0x24BE38970]();
}

uint64_t llvm::air::AICITexture::getImpl()
{
  return MEMORY[0x24BE38978]();
}

uint64_t llvm::air::AIFieldDesc::getImpl()
{
  return MEMORY[0x24BE38980]();
}

uint64_t llvm::air::AICIFunction::getImpl()
{
  return MEMORY[0x24BE38988]();
}

uint64_t llvm::air::AIMatrixType::getImpl()
{
  return MEMORY[0x24BE38990]();
}

uint64_t llvm::air::AIOpaqueType::getImpl()
{
  return MEMORY[0x24BE38998]();
}

uint64_t llvm::air::AIPatchInput::getImpl()
{
  return MEMORY[0x24BE389A0]();
}

uint64_t llvm::air::AIRecordBase::getImpl()
{
  return MEMORY[0x24BE389A8]();
}

uint64_t llvm::air::AIRecordType::classof()
{
  return MEMORY[0x24BE389B0]();
}

uint64_t llvm::air::AIRecordType::getImpl()
{
  return MEMORY[0x24BE389B8]();
}

uint64_t llvm::air::AIReturnType::classof()
{
  return MEMORY[0x24BE389C0]();
}

uint64_t llvm::air::AISourceFile::getImpl()
{
  return MEMORY[0x24BE389C8]();
}

uint64_t llvm::air::AIVectorType::getImpl()
{
  return MEMORY[0x24BE389D0]();
}

uint64_t llvm::air::ErrorHandler::note()
{
  return MEMORY[0x24BE389D8]();
}

uint64_t llvm::air::ErrorHandler::error()
{
  return MEMORY[0x24BE389E0]();
}

uint64_t llvm::air::ErrorHandler::remark()
{
  return MEMORY[0x24BE389E8]();
}

uint64_t llvm::air::ErrorHandler::explain()
{
  return MEMORY[0x24BE389F0]();
}

uint64_t llvm::air::ErrorHandler::message()
{
  return MEMORY[0x24BE389F8]();
}

uint64_t llvm::air::ErrorHandler::warning()
{
  return MEMORY[0x24BE38A00]();
}

uint64_t llvm::air::cloneArchive()
{
  return MEMORY[0x24BE38A08]();
}

uint64_t llvm::air::AIArrayOfType::getImpl()
{
  return MEMORY[0x24BE38A18]();
}

uint64_t llvm::air::AIBuiltinType::getImpl()
{
  return MEMORY[0x24BE38A20]();
}

uint64_t llvm::air::AICIStructRet::getImpl()
{
  return MEMORY[0x24BE38A28]();
}

uint64_t llvm::air::AIPositionRet::getImpl()
{
  return MEMORY[0x24BE38A30]();
}

uint64_t llvm::air::AIRInfoFinder::processModule()
{
  return MEMORY[0x24BE38A38]();
}

uint64_t llvm::air::AIRInfoFinder::reset(llvm::air::AIRInfoFinder *this)
{
  return MEMORY[0x24BE38A40](this);
}

uint64_t llvm::air::AIRecordField::getImpl()
{
  return MEMORY[0x24BE38A48]();
}

uint64_t llvm::air::AITagOnlyAttr::getImpl()
{
  return MEMORY[0x24BE38A50]();
}

uint64_t llvm::air::AITextureType::getImpl()
{
  return MEMORY[0x24BE38A58]();
}

uint64_t llvm::air::AIVecTypeHint::getImpl()
{
  return MEMORY[0x24BE38A60]();
}

uint64_t llvm::air::AIVertexInput::getImpl()
{
  return MEMORY[0x24BE38A68]();
}

uint64_t llvm::air::MetalFunction::MetalFunction()
{
  return MEMORY[0x24BE38A70]();
}

uint64_t llvm::air::MetalVariable::MetalVariable()
{
  return MEMORY[0x24BE38A78]();
}

uint64_t llvm::air::AICIPointerRet::getImpl()
{
  return MEMORY[0x24BE38A80]();
}

uint64_t llvm::air::AICITextureRet::getImpl()
{
  return MEMORY[0x24BE38A88]();
}

uint64_t llvm::air::AIClipDistance::getImpl()
{
  return MEMORY[0x24BE38A90]();
}

uint64_t llvm::air::AIFunctionType::getImpl()
{
  return MEMORY[0x24BE38A98]();
}

uint64_t llvm::air::AIMeshFunction::getImpl()
{
  return MEMORY[0x24BE38AA0]();
}

uint64_t llvm::air::AIMeshTypeInfo::getImpl()
{
  return MEMORY[0x24BE38AA8]();
}

uint64_t llvm::air::AIRecordMember::classof()
{
  return MEMORY[0x24BE38AB0]();
}

uint64_t llvm::air::AIRenderTarget::getImpl()
{
  return MEMORY[0x24BE38AB8]();
}

uint64_t llvm::air::AISampleMaskIn::getImpl()
{
  return MEMORY[0x24BE38AC0]();
}

uint64_t llvm::air::AISamplerState::getImpl()
{
  return MEMORY[0x24BE38AC8]();
}

uint64_t llvm::air::AIVertexOutput::getImpl()
{
  return MEMORY[0x24BE38AD0]();
}

uint64_t llvm::air::AIVisibleInput::getImpl()
{
  return MEMORY[0x24BE38AD8]();
}

uint64_t llvm::air::MetalLibCloner::clone(llvm::air::MetalLibCloner *this)
{
  return MEMORY[0x24BE38AE0](this);
}

uint64_t llvm::air::MetalLibCloner::MetalLibCloner()
{
  return MEMORY[0x24BE38AE8]();
}

uint64_t llvm::air::AICommandBuffer::getImpl()
{
  return MEMORY[0x24BE38AF0]();
}

uint64_t llvm::air::AIFragmentInput::getImpl()
{
  return MEMORY[0x24BE38AF8]();
}

uint64_t llvm::air::AIFunctionGroup::getImpl()
{
  return MEMORY[0x24BE38B00]();
}

uint64_t llvm::air::AIGlobalBinding::getImpl()
{
  return MEMORY[0x24BE38B08]();
}

uint64_t llvm::air::AIGroupSizeImpl::getImpl()
{
  return MEMORY[0x24BE38B10]();
}

uint64_t llvm::air::AIImageblockArg::getImpl()
{
  return MEMORY[0x24BE38B18]();
}

uint64_t llvm::air::AIPipelineState::getImpl()
{
  return MEMORY[0x24BE38B20]();
}

uint64_t llvm::air::AIPixelDataType::getImpl()
{
  return MEMORY[0x24BE38B28]();
}

uint64_t llvm::air::AIRFunctionInfo::createAIRFunctionInfo()
{
  return MEMORY[0x24BE38B30]();
}

uint64_t llvm::air::AIRFunctionInfo::getUniqueIdentifierDeclaration()
{
  return MEMORY[0x24BE38B38]();
}

uint64_t llvm::air::AIRModuleLinker::takeModule(llvm::air::AIRModuleLinker *this)
{
  return MEMORY[0x24BE38B40](this);
}

uint64_t llvm::air::AIRModuleLinker::AIRModuleLinker()
{
  return MEMORY[0x24BE38B48]();
}

void llvm::air::AIRModuleLinker::~AIRModuleLinker(llvm::air::AIRModuleLinker *this)
{
  MEMORY[0x24BE38B50](this);
}

uint64_t llvm::air::AIRSamplerState::create()
{
  return MEMORY[0x24BE38B58]();
}

uint64_t llvm::air::AIRSamplerState::classof()
{
  return MEMORY[0x24BE38B60]();
}

uint64_t llvm::air::AIRVerifierPass::run()
{
  return MEMORY[0x24BE38B68]();
}

uint64_t llvm::air::AIStitchingInfo::getImpl()
{
  return MEMORY[0x24BE38B70]();
}

uint64_t llvm::air::AIStitchingType::getImpl()
{
  return MEMORY[0x24BE38B78]();
}

uint64_t llvm::air::AIVisibleOutput::getImpl()
{
  return MEMORY[0x24BE38B80]();
}

uint64_t llvm::air::ResourceTracker::get(llvm::air::ResourceTracker *this)
{
  return MEMORY[0x24BE38B88](this);
}

uint64_t llvm::air::ResourceTracker::set(llvm::air::ResourceTracker *this)
{
  return MEMORY[0x24BE38B90](this);
}

uint64_t llvm::air::getAICIFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38BA0](this, a2);
}

uint64_t llvm::air::verifyAIRModule()
{
  return MEMORY[0x24BE38BA8]();
}

uint64_t llvm::air::AIArrayRefOfType::getImpl()
{
  return MEMORY[0x24BE38BB0]();
}

uint64_t llvm::air::AIImageblockType::getImpl()
{
  return MEMORY[0x24BE38BB8]();
}

uint64_t llvm::air::AIInlineTypeInfo::getImpl()
{
  return MEMORY[0x24BE38BC0]();
}

uint64_t llvm::air::AIKernelFunction::getImpl()
{
  return MEMORY[0x24BE38BC8]();
}

uint64_t llvm::air::AIMeshVertexData::getImpl()
{
  return MEMORY[0x24BE38BD0]();
}

uint64_t llvm::air::AIObjectFunction::getImpl()
{
  return MEMORY[0x24BE38BD8]();
}

uint64_t llvm::air::AIStructTypeInfo::getImpl()
{
  return MEMORY[0x24BE38BE0]();
}

uint64_t llvm::air::AIVertexFunction::getImpl()
{
  return MEMORY[0x24BE38BE8]();
}

uint64_t llvm::air::AIVisiblePadding::getImpl()
{
  return MEMORY[0x24BE38BF0]();
}

uint64_t llvm::air::upgradeAIRModule()
{
  return MEMORY[0x24BE38BF8]();
}

uint64_t llvm::air::AIInterpolantType::getImpl()
{
  return MEMORY[0x24BE38C00]();
}

uint64_t llvm::air::AILanguageVersion::getImpl()
{
  return MEMORY[0x24BE38C08]();
}

uint64_t llvm::air::AIPointerLikeType::getImpl()
{
  return MEMORY[0x24BE38C10]();
}

uint64_t llvm::air::AIRenderTargetRet::getImpl()
{
  return MEMORY[0x24BE38C18]();
}

uint64_t llvm::air::AITagOnlyArgument::getImpl()
{
  return MEMORY[0x24BE38C20]();
}

uint64_t llvm::air::AIVisibleFunction::getImpl()
{
  return MEMORY[0x24BE38C28]();
}

uint64_t llvm::air::GlobalCtorOptPass::run()
{
  return MEMORY[0x24BE38C30]();
}

uint64_t llvm::air::getAIMeshFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38C38](this, a2);
}

uint64_t llvm::air::AIBarycentricCoord::getImpl()
{
  return MEMORY[0x24BE38C40]();
}

uint64_t llvm::air::AIFragmentFunction::getImpl()
{
  return MEMORY[0x24BE38C48]();
}

uint64_t llvm::air::AIFunctionConstant::getImpl()
{
  return MEMORY[0x24BE38C50]();
}

uint64_t llvm::air::AIIndirectConstant::getImpl()
{
  return MEMORY[0x24BE38C58]();
}

uint64_t llvm::air::AIPackedVectorType::getImpl()
{
  return MEMORY[0x24BE38C60]();
}

uint64_t llvm::air::AIRenderTargetAttr::getImpl()
{
  return MEMORY[0x24BE38C68]();
}

uint64_t llvm::air::AIWorkgroupMaxSize::getImpl()
{
  return MEMORY[0x24BE38C70]();
}

uint64_t llvm::air::AIControlPointInput::getImpl()
{
  return MEMORY[0x24BE38C78]();
}

uint64_t llvm::air::AIImageblockDataArg::getImpl()
{
  return MEMORY[0x24BE38C80]();
}

uint64_t llvm::air::AIImageblockDataRet::getImpl()
{
  return MEMORY[0x24BE38C88]();
}

uint64_t llvm::air::AILocationIndexAttr::getImpl()
{
  return MEMORY[0x24BE38C90]();
}

uint64_t llvm::air::AIMaxMeshWorkgroups::getImpl()
{
  return MEMORY[0x24BE38C98]();
}

uint64_t llvm::air::AIMeshPrimitiveData::getImpl()
{
  return MEMORY[0x24BE38CA0]();
}

uint64_t llvm::air::AIRMDGlobalsHandler::processModule(llvm::air::AIRMDGlobalsHandler *this)
{
  return MEMORY[0x24BE38CA8](this);
}

uint64_t llvm::air::AIRMDGlobalsHandler::eraseUnreachableGlobals(llvm::air::AIRMDGlobalsHandler *this)
{
  return MEMORY[0x24BE38CB0](this);
}

uint64_t llvm::air::AIRMDGlobalsHandler::rebuildCompilerUsedListImpl(llvm::air::AIRMDGlobalsHandler *this)
{
  return MEMORY[0x24BE38CB8](this);
}

uint64_t llvm::air::AIStitchingArgument::getImpl()
{
  return MEMORY[0x24BE38CC0]();
}

uint64_t llvm::air::AITagOnlyCustomType::getImpl()
{
  return MEMORY[0x24BE38CC8]();
}

uint64_t llvm::air::AITagOnlyReturnType::getImpl()
{
  return MEMORY[0x24BE38CD0]();
}

uint64_t llvm::air::getAIKernelFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38CD8](this, a2);
}

uint64_t llvm::air::getAIObjectFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38CE0](this, a2);
}

uint64_t llvm::air::getAIVertexFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38CE8](this, a2);
}

uint64_t llvm::air::AIRDyldTablesEmitter::emit()
{
  return MEMORY[0x24BE38CF0]();
}

uint64_t llvm::air::AIRFixupMetadataPass::run()
{
  return MEMORY[0x24BE38CF8]();
}

uint64_t llvm::air::AIRTargetInfoBuilder::setMaxBindings()
{
  return MEMORY[0x24BE38D00]();
}

uint64_t llvm::air::AIRTargetInfoBuilder::setABI()
{
  return MEMORY[0x24BE38D08]();
}

uint64_t llvm::air::MetalLibObjectWriter::write(llvm::air::MetalLibObjectWriter *this)
{
  return MEMORY[0x24BE38D10](this);
}

uint64_t llvm::air::MetalLibObjectWriter::MetalLibObjectWriter()
{
  return MEMORY[0x24BE38D18]();
}

{
  return MEMORY[0x24BE38D20]();
}

uint64_t llvm::air::getAIVisibleFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38D28](this, a2);
}

uint64_t llvm::air::AIRMetadataPrunerPass::run()
{
  return MEMORY[0x24BE38D30]();
}

uint64_t llvm::air::WriteAIRBitcodeToFile()
{
  return MEMORY[0x24BE38D38]();
}

uint64_t llvm::air::getAIFragmentFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38D40](this, a2);
}

uint64_t llvm::air::AIAddressSpaceTypeQual::getImpl()
{
  return MEMORY[0x24BE38D48]();
}

uint64_t llvm::air::AIControlPointFunction::getImpl()
{
  return MEMORY[0x24BE38D50]();
}

uint64_t llvm::air::AIIntersectionFunction::getImpl()
{
  return MEMORY[0x24BE38D58]();
}

uint64_t llvm::air::AIRDyldTablePrunerPass::run()
{
  return MEMORY[0x24BE38D60]();
}

uint64_t llvm::air::AIRSamplerStateEncoder::encode()
{
  return MEMORY[0x24BE38D68]();
}

uint64_t llvm::air::AIRUnusedArgumentsPass::run()
{
  return MEMORY[0x24BE38D70]();
}

uint64_t llvm::air::getAIRTargetDataLayout()
{
  return MEMORY[0x24BE38D78]();
}

uint64_t llvm::air::getAIRTargetIRAnalysis(llvm::air *this)
{
  return MEMORY[0x24BE38D80](this);
}

uint64_t llvm::air::getDWARFRegisterNumber()
{
  return MEMORY[0x24BE38D88]();
}

uint64_t llvm::air::AIExternallyInitialized::getImpl()
{
  return MEMORY[0x24BE38D90]();
}

uint64_t llvm::air::AIPatchControlPointType::getImpl()
{
  return MEMORY[0x24BE38D98]();
}

uint64_t llvm::air::AIRCallGraphCheckerPass::run()
{
  return MEMORY[0x24BE38DA0]();
}

uint64_t llvm::air::AITagOnlySharedReturnType::getImpl()
{
  return MEMORY[0x24BE38DA8]();
}

uint64_t llvm::air::getAIIntersectionFunction(llvm::air *this, const Function *a2)
{
  return MEMORY[0x24BE38DB0](this, a2);
}

uint64_t llvm::air::AIRDisabledEliminationPass::run()
{
  return MEMORY[0x24BE38DB8]();
}

uint64_t llvm::air::AIVisibleFunctionReference::getImpl()
{
  return MEMORY[0x24BE38DC0]();
}

uint64_t llvm::air::AIVisibleFunctionTableType::getImpl()
{
  return MEMORY[0x24BE38DC8]();
}

uint64_t llvm::air::ExtendedPassManagerBuilder::populateAIRModulePassManager()
{
  return MEMORY[0x24BE38DD0]();
}

uint64_t llvm::air::ExtendedPassManagerBuilder::ExtendedPassManagerBuilder()
{
  return MEMORY[0x24BE38DD8]();
}

uint64_t llvm::air::AIAccelerationStructureType::getImpl()
{
  return MEMORY[0x24BE38DE0]();
}

uint64_t llvm::air::createAIRVerifierLegacyPass()
{
  return MEMORY[0x24BE38DE8]();
}

uint64_t llvm::air::getOSEnvironmentForPlatform()
{
  return MEMORY[0x24BE38DF0]();
}

uint64_t llvm::air::getPlatformForOSEnvironment()
{
  return MEMORY[0x24BE38DF8]();
}

uint64_t llvm::air::NormalizeModuleForAIRBitcode()
{
  return MEMORY[0x24BE38E00]();
}

uint64_t llvm::air::AIStructTypeInfoFieldIterator::initialize(llvm::air::AIStructTypeInfoFieldIterator *this)
{
  return MEMORY[0x24BE38E08](this);
}

uint64_t llvm::air::AIFunctionConstantPredicateAttr::getImpl()
{
  return MEMORY[0x24BE38E10]();
}

uint64_t llvm::air::AIIntersectionFunctionTableType::getImpl()
{
  return MEMORY[0x24BE38E18]();
}

uint64_t llvm::air::AIRInvarianceLateAttributesPass::run()
{
  return MEMORY[0x24BE38E20]();
}

uint64_t llvm::air::AIRFunctionConstantsRequiredPass::run()
{
  return MEMORY[0x24BE38E30]();
}

uint64_t llvm::air::AIRFunctionPredicateResolverPass::run()
{
  return MEMORY[0x24BE38E38]();
}

uint64_t llvm::air::AIRExternallyInitializedInitializationPass::run()
{
  return MEMORY[0x24BE38E50]();
}

uint64_t llvm::air::AIAttr::classof()
{
  return MEMORY[0x24BE38E58]();
}

uint64_t llvm::air::AIMesh::getImpl()
{
  return MEMORY[0x24BE38E60]();
}

uint64_t llvm::air::AIType::classof()
{
  return MEMORY[0x24BE38E68]();
}

uint64_t llvm::air::AIPatch::getImpl()
{
  return MEMORY[0x24BE38E70]();
}

uint64_t llvm::air::Archive::findSym()
{
  return MEMORY[0x24BE38E78]();
}

uint64_t llvm::air::Archive::addMember()
{
  return MEMORY[0x24BE38E80]();
}

uint64_t llvm::air::AIBuffer::getImpl()
{
  return MEMORY[0x24BE38E88]();
}

uint64_t llvm::air::AICIArray::getImpl()
{
  return MEMORY[0x24BE38E90]();
}

uint64_t llvm::air::AIPayload::getImpl()
{
  return MEMORY[0x24BE38E98]();
}

uint64_t llvm::air::AISampler::getImpl()
{
  return MEMORY[0x24BE38EA0]();
}

uint64_t llvm::air::AIStageIn::getImpl()
{
  return MEMORY[0x24BE38EA8]();
}

uint64_t llvm::air::AITexture::getImpl()
{
  return MEMORY[0x24BE38EB0]();
}

uint64_t llvm::air::AIVersion::getImpl()
{
  return MEMORY[0x24BE38EB8]();
}

uint64_t llvm::cas::TreeSchema::create()
{
  return MEMORY[0x24BED67F0]();
}

uint64_t llvm::cas::TreeSchema::TreeSchema()
{
  return MEMORY[0x24BED67F8]();
}

uint64_t llvm::cas::ObjectStore::createUnknownObjectError()
{
  return MEMORY[0x24BED6800]();
}

uint64_t llvm::cas::ObjectStore::getProxy()
{
  return MEMORY[0x24BED6808]();
}

uint64_t llvm::cas::createOnDiskCAS()
{
  return MEMORY[0x24BED6810]();
}

uint64_t llvm::cas::createInMemoryCAS(llvm::cas *this)
{
  return MEMORY[0x24BED6818](this);
}

uint64_t llvm::cas::createCASFileSystem()
{
  return MEMORY[0x24BED6820]();
}

uint64_t llvm::cas::createOnDiskActionCache()
{
  return MEMORY[0x24BED6828]();
}

uint64_t llvm::cas::getDefaultOnDiskCASPath()
{
  return MEMORY[0x24BED6830]();
}

uint64_t llvm::cas::createInMemoryActionCache(llvm::cas *this)
{
  return MEMORY[0x24BED6838](this);
}

uint64_t llvm::cas::getDefaultOnDiskActionCachePath(llvm::cas *this)
{
  return MEMORY[0x24BED6840](this);
}

uint64_t llvm::cas::CacheKey::CacheKey()
{
  return MEMORY[0x24BED6848]();
}

uint64_t llvm::omp::OMPContext::OMPContext()
{
  return MEMORY[0x24BED6850]();
}

uint64_t llvm::omp::getOpenMPClauseKind()
{
  return MEMORY[0x24BED6858]();
}

uint64_t llvm::omp::getOpenMPClauseName()
{
  return MEMORY[0x24BED6860]();
}

uint64_t llvm::omp::getOpenMPDirectiveKind()
{
  return MEMORY[0x24BED6868]();
}

uint64_t llvm::omp::getOpenMPDirectiveName()
{
  return MEMORY[0x24BED6870]();
}

uint64_t llvm::omp::listOpenMPContextTraitSets(llvm::omp *this)
{
  return MEMORY[0x24BED6878](this);
}

uint64_t llvm::omp::isAllowedClauseForDirective()
{
  return MEMORY[0x24BED6880]();
}

uint64_t llvm::omp::getOpenMPContextTraitSetKind()
{
  return MEMORY[0x24BED6888]();
}

uint64_t llvm::omp::getOpenMPContextTraitSetName()
{
  return MEMORY[0x24BED6890]();
}

uint64_t llvm::omp::isVariantApplicableInContext()
{
  return MEMORY[0x24BED6898]();
}

uint64_t llvm::omp::getBestVariantMatchForContext()
{
  return MEMORY[0x24BED68A0]();
}

uint64_t llvm::omp::isValidTraitSelectorForTraitSet()
{
  return MEMORY[0x24BED68A8]();
}

uint64_t llvm::omp::listOpenMPContextTraitSelectors()
{
  return MEMORY[0x24BED68B0]();
}

uint64_t llvm::omp::listOpenMPContextTraitProperties()
{
  return MEMORY[0x24BED68B8]();
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyKind()
{
  return MEMORY[0x24BED68C0]();
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyName()
{
  return MEMORY[0x24BED68C8]();
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorKind()
{
  return MEMORY[0x24BED68D0]();
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorName()
{
  return MEMORY[0x24BED68D8]();
}

uint64_t llvm::omp::getOpenMPContextTraitSetForProperty()
{
  return MEMORY[0x24BED68E0]();
}

uint64_t llvm::omp::getOpenMPContextTraitSetForSelector()
{
  return MEMORY[0x24BED68E8]();
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyForSelector()
{
  return MEMORY[0x24BED68F0]();
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorForProperty()
{
  return MEMORY[0x24BED68F8]();
}

uint64_t llvm::omp::isValidTraitPropertyForTraitSetAndSelector()
{
  return MEMORY[0x24BED6900]();
}

uint64_t llvm::opt::InputArgList::releaseMemory(llvm::opt::InputArgList *this)
{
  return MEMORY[0x24BED6908](this);
}

uint64_t llvm::opt::OptTable::addValues(llvm::opt::OptTable *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BED6910](this, a2, a3);
}

uint64_t llvm::opt::OptTable::OptTable()
{
  return MEMORY[0x24BED6918]();
}

void llvm::opt::OptTable::~OptTable(llvm::opt::OptTable *this)
{
  MEMORY[0x24BED6920](this);
}

uint64_t llvm::sys::RemoveFileOnSignal()
{
  return MEMORY[0x24BED6928]();
}

uint64_t llvm::sys::RunInterruptHandlers(llvm::sys *this)
{
  return MEMORY[0x24BED6930](this);
}

uint64_t llvm::sys::getDefaultTargetTriple(llvm::sys *this)
{
  return MEMORY[0x24BED6938](this);
}

uint64_t llvm::sys::fs::unlockFile(llvm::sys::fs *this)
{
  return MEMORY[0x24BED6940](this);
}

uint64_t llvm::sys::fs::getUniqueID()
{
  return MEMORY[0x24BED6948]();
}

uint64_t llvm::sys::fs::current_path()
{
  return MEMORY[0x24BED6950]();
}

uint64_t llvm::sys::fs::is_directory()
{
  return MEMORY[0x24BED6958]();
}

uint64_t llvm::sys::fs::make_absolute()
{
  return MEMORY[0x24BED6960]();
}

{
  return MEMORY[0x24BED6968]();
}

uint64_t llvm::sys::fs::create_directories()
{
  return MEMORY[0x24BED6978]();
}

uint64_t llvm::sys::fs::createTemporaryFile()
{
  return MEMORY[0x24BED6980]();
}

uint64_t llvm::sys::fs::access()
{
  return MEMORY[0x24BED6988]();
}

uint64_t llvm::sys::fs::detail::directory_iterator_destruct()
{
  return MEMORY[0x24BED6990]();
}

uint64_t llvm::sys::fs::detail::directory_iterator_construct()
{
  return MEMORY[0x24BED6998]();
}

uint64_t llvm::sys::fs::detail::directory_iterator_increment()
{
  return MEMORY[0x24BED69A0]();
}

uint64_t llvm::sys::fs::remove()
{
  return MEMORY[0x24BED69A8]();
}

uint64_t llvm::sys::fs::status()
{
  return MEMORY[0x24BED69B0]();
}

uint64_t llvm::sys::fs::copy_file()
{
  return MEMORY[0x24BED69B8]();
}

uint64_t llvm::sys::fs::real_path()
{
  return MEMORY[0x24BED69C0]();
}

uint64_t llvm::sys::path::is_absolute()
{
  return MEMORY[0x24BED69C8]();
}

uint64_t llvm::sys::path::is_relative()
{
  return MEMORY[0x24BED69D0]();
}

uint64_t llvm::sys::path::parent_path()
{
  return MEMORY[0x24BED69D8]();
}

uint64_t llvm::sys::path::remove_dots()
{
  return MEMORY[0x24BED69E0]();
}

uint64_t llvm::sys::path::is_separator(llvm::sys::path *this)
{
  return MEMORY[0x24BED69E8](this);
}

uint64_t llvm::sys::path::get_separator(llvm::sys::path *this)
{
  return MEMORY[0x24BED69F0](this);
}

uint64_t llvm::sys::path::relative_path()
{
  return MEMORY[0x24BED69F8]();
}

uint64_t llvm::sys::path::const_iterator::operator++()
{
  return MEMORY[0x24BED6A00]();
}

uint64_t llvm::sys::path::has_parent_path()
{
  return MEMORY[0x24BED6A08]();
}

uint64_t llvm::sys::path::convert_to_slash()
{
  return MEMORY[0x24BED6A10]();
}

uint64_t llvm::sys::path::reverse_iterator::operator++()
{
  return MEMORY[0x24BED6A18]();
}

uint64_t llvm::sys::path::replace_extension()
{
  return MEMORY[0x24BED6A20]();
}

uint64_t llvm::sys::path::replace_path_prefix()
{
  return MEMORY[0x24BED6A28]();
}

uint64_t llvm::sys::path::remove_leading_dotslash()
{
  return MEMORY[0x24BED6A30]();
}

uint64_t llvm::sys::path::end()
{
  return MEMORY[0x24BED6A38]();
}

uint64_t llvm::sys::path::rend()
{
  return MEMORY[0x24BED6A40]();
}

uint64_t llvm::sys::path::stem()
{
  return MEMORY[0x24BED6A48]();
}

uint64_t llvm::sys::path::begin()
{
  return MEMORY[0x24BED6A50]();
}

uint64_t llvm::sys::path::append()
{
  return MEMORY[0x24BED6A58]();
}

{
  return MEMORY[0x24BED6A60]();
}

uint64_t llvm::sys::path::native()
{
  return MEMORY[0x24BED6A68]();
}

{
  return MEMORY[0x24BED6A70]();
}

uint64_t llvm::sys::path::rbegin()
{
  return MEMORY[0x24BED6A78]();
}

uint64_t llvm::sys::path::filename()
{
  return MEMORY[0x24BED6A80]();
}

uint64_t llvm::sys::path::extension()
{
  return MEMORY[0x24BED6A88]();
}

uint64_t llvm::sys::path::root_path()
{
  return MEMORY[0x24BED6A90]();
}

uint64_t llvm::sys::locale::columnWidth()
{
  return MEMORY[0x24BED6A98]();
}

uint64_t llvm::sys::locale::isPrint(llvm::sys::locale *this)
{
  return MEMORY[0x24BED6AA0](this);
}

uint64_t llvm::sys::Process::UseANSIEscapeCodes(llvm::sys::Process *this)
{
  return MEMORY[0x24BED6AA8](this);
}

uint64_t llvm::sys::Process::StandardErrHasColors(llvm::sys::Process *this)
{
  return MEMORY[0x24BED6AB0](this);
}

uint64_t llvm::sys::printArg()
{
  return MEMORY[0x24BED6AB8]();
}

uint64_t llvm::vfs::FileSystem::getBufferForFile()
{
  return MEMORY[0x24BED6AC0]();
}

void llvm::vfs::FileSystem::~FileSystem(llvm::vfs::FileSystem *this)
{
  MEMORY[0x24BED6AC8](this);
}

uint64_t llvm::vfs::OutputFile::createProxy(llvm::vfs::OutputFile *this)
{
  return MEMORY[0x24BED6AD0](this);
}

uint64_t llvm::vfs::OutputFile::keep(llvm::vfs::OutputFile *this)
{
  return MEMORY[0x24BED6AD8](this);
}

uint64_t llvm::vfs::OutputFile::destroy(llvm::vfs::OutputFile *this)
{
  return MEMORY[0x24BED6AE0](this);
}

uint64_t llvm::vfs::OutputFile::discard(llvm::vfs::OutputFile *this)
{
  return MEMORY[0x24BED6AE8](this);
}

uint64_t llvm::vfs::OutputBackend::createFile()
{
  return MEMORY[0x24BED6AF8]();
}

uint64_t llvm::vfs::YAMLVFSWriter::addFileMapping()
{
  return MEMORY[0x24BED6B00]();
}

uint64_t llvm::vfs::YAMLVFSWriter::write(llvm::vfs::YAMLVFSWriter *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED6B08](this, a2);
}

uint64_t llvm::vfs::getVFSFromYAML()
{
  return MEMORY[0x24BED6B10]();
}

uint64_t llvm::vfs::getRealFileSystem(llvm::vfs *this)
{
  return MEMORY[0x24BED6B18](this);
}

uint64_t llvm::vfs::collectVFSFromYAML()
{
  return MEMORY[0x24BED6B20]();
}

uint64_t llvm::vfs::StatCacheFileSystem::create()
{
  return MEMORY[0x24BED6B28]();
}

uint64_t llvm::vfs::getNextVirtualUniqueID(llvm::vfs *this)
{
  return MEMORY[0x24BED6B38](this);
}

uint64_t llvm::vfs::recursive_directory_iterator::increment(llvm::vfs::recursive_directory_iterator *this, std::error_code *a2)
{
  return MEMORY[0x24BED6B40](this, a2);
}

uint64_t llvm::vfs::recursive_directory_iterator::recursive_directory_iterator()
{
  return MEMORY[0x24BED6B48]();
}

void llvm::vfs::File::~File(llvm::vfs::File *this)
{
  MEMORY[0x24BED6B50](this);
}

uint64_t llvm::vfs::Status::Status()
{
  return MEMORY[0x24BED6B58]();
}

uint64_t llvm::CSKY::getArchName()
{
  return MEMORY[0x24BED6B68]();
}

uint64_t llvm::CSKY::parseCPUArch()
{
  return MEMORY[0x24BED6B70]();
}

uint64_t llvm::SHA1::init(llvm::SHA1 *this)
{
  return MEMORY[0x24BED6B80](this);
}

uint64_t llvm::SHA1::result(llvm::SHA1 *this)
{
  return MEMORY[0x24BED6B88](this);
}

uint64_t llvm::SHA1::update()
{
  return MEMORY[0x24BED6B90]();
}

uint64_t llvm::Type::getFP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6B98](this, a2);
}

uint64_t llvm::Type::getFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BA0](this, a2);
}

uint64_t llvm::Type::getInt16Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BA8](this, a2);
}

uint64_t llvm::Type::getInt32Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BB0](this, a2);
}

uint64_t llvm::Type::getInt64Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BB8](this, a2);
}

uint64_t llvm::Type::getBFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BC0](this, a2);
}

uint64_t llvm::Type::getDoubleTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BC8](this, a2);
}

uint64_t llvm::Type::getInt8PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BD0](this, a2);
}

uint64_t llvm::Type::getIntNPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BD8](this, a2);
}

uint64_t llvm::Type::getX86_MMXTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BE0](this, a2);
}

uint64_t llvm::Type::getInt32PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BF0](this, a2);
}

uint64_t llvm::Type::getX86_FP80Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BF8](this, a2);
}

uint64_t llvm::Type::getPPC_FP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C00](this, a2);
}

uint64_t llvm::Type::getFloatingPointTy()
{
  return MEMORY[0x24BED6C08]();
}

uint64_t llvm::Type::getHalfTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C10](this, a2);
}

uint64_t llvm::Type::getInt1Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C18](this, a2);
}

uint64_t llvm::Type::getInt8Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C20](this, a2);
}

uint64_t llvm::Type::getIntNTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C28](this, a2);
}

uint64_t llvm::Type::getVoidTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C30](this, a2);
}

uint64_t llvm::User::getDescriptor(llvm::User *this)
{
  return MEMORY[0x24BED6C38](this);
}

uint64_t llvm::User::allocHungoffUses(llvm::User *this)
{
  return MEMORY[0x24BED6C40](this);
}

uint64_t llvm::User::replaceUsesOfWith()
{
  return MEMORY[0x24BED6C48]();
}

uint64_t llvm::User::operator new(llvm::User *this)
{
  return MEMORY[0x24BED6C58](this);
}

{
  return MEMORY[0x24BED6C60](this);
}

{
  return MEMORY[0x24BED6C68](this);
}

uint64_t llvm::dbgs(llvm *this)
{
  return MEMORY[0x24BED6C70](this);
}

uint64_t llvm::errs(llvm *this)
{
  return MEMORY[0x24BED6C78](this);
}

uint64_t llvm::json::Value::destroy(llvm::json::Value *this)
{
  return MEMORY[0x24BED6C80](this);
}

uint64_t llvm::json::Value::moveFrom()
{
  return MEMORY[0x24BED6C88]();
}

uint64_t llvm::json::Value::Value()
{
  return MEMORY[0x24BED6C90]();
}

uint64_t llvm::json::parse()
{
  return MEMORY[0x24BED6C98]();
}

uint64_t llvm::json::Object::operator[]()
{
  return MEMORY[0x24BED6CA0]();
}

uint64_t llvm::json::isUTF8()
{
  return MEMORY[0x24BED6CA8]();
}

uint64_t llvm::json::OStream::arrayBegin(llvm::json::OStream *this)
{
  return MEMORY[0x24BED6CB0](this);
}

uint64_t llvm::json::OStream::objectBegin(llvm::json::OStream *this)
{
  return MEMORY[0x24BED6CB8](this);
}

uint64_t llvm::json::OStream::attributeEnd(llvm::json::OStream *this)
{
  return MEMORY[0x24BED6CC0](this);
}

uint64_t llvm::json::OStream::attributeBegin()
{
  return MEMORY[0x24BED6CC8]();
}

uint64_t llvm::json::OStream::value(llvm::json::OStream *this, const llvm::json::Value *a2)
{
  return MEMORY[0x24BED6CD0](this, a2);
}

uint64_t llvm::json::OStream::arrayEnd(llvm::json::OStream *this)
{
  return MEMORY[0x24BED6CD8](this);
}

uint64_t llvm::json::OStream::objectEnd(llvm::json::OStream *this)
{
  return MEMORY[0x24BED6CE0](this);
}

uint64_t llvm::json::fixUTF8()
{
  return MEMORY[0x24BED6CE8]();
}

uint64_t llvm::outs(llvm *this)
{
  return MEMORY[0x24BED6CF0](this);
}

uint64_t llvm::yaml::ScalarTraits<llvm::VersionTuple,void>::input()
{
  return MEMORY[0x24BED6CF8]();
}

uint64_t llvm::yaml::ScalarTraits<llvm::VersionTuple,void>::output()
{
  return MEMORY[0x24BED6D00]();
}

uint64_t llvm::yaml::ScalarTraits<llvm::StringRef,void>::input()
{
  return MEMORY[0x24BED6D08]();
}

uint64_t llvm::yaml::ScalarTraits<llvm::StringRef,void>::output()
{
  return MEMORY[0x24BED6D10]();
}

uint64_t llvm::yaml::ScalarTraits<BOOL,void>::input()
{
  return MEMORY[0x24BED6D18]();
}

uint64_t llvm::yaml::ScalarTraits<BOOL,void>::output()
{
  return MEMORY[0x24BED6D20]();
}

uint64_t llvm::yaml::ScalarTraits<unsigned int,void>::input()
{
  return MEMORY[0x24BED6D28]();
}

uint64_t llvm::yaml::ScalarTraits<unsigned int,void>::output()
{
  return MEMORY[0x24BED6D30]();
}

uint64_t llvm::yaml::Input::setCurrentDocument(llvm::yaml::Input *this)
{
  return MEMORY[0x24BED6D38](this);
}

uint64_t llvm::yaml::Input::error(llvm::yaml::Input *this)
{
  return MEMORY[0x24BED6D40](this);
}

uint64_t llvm::yaml::Input::Input()
{
  return MEMORY[0x24BED6D48]();
}

void llvm::yaml::Input::~Input(llvm::yaml::Input *this)
{
  MEMORY[0x24BED6D50](this);
}

uint64_t llvm::yaml::Output::endDocuments(llvm::yaml::Output *this)
{
  return MEMORY[0x24BED6D58](this);
}

uint64_t llvm::yaml::Output::beginDocuments(llvm::yaml::Output *this)
{
  return MEMORY[0x24BED6D60](this);
}

uint64_t llvm::yaml::Output::preflightDocument(llvm::yaml::Output *this)
{
  return MEMORY[0x24BED6D68](this);
}

uint64_t llvm::yaml::Output::postflightDocument(llvm::yaml::Output *this)
{
  return MEMORY[0x24BED6D70](this);
}

uint64_t llvm::yaml::Output::Output(llvm::yaml::Output *this, llvm::raw_ostream *a2, void *a3)
{
  return MEMORY[0x24BED6D78](this, a2, a3);
}

void llvm::yaml::Output::~Output(llvm::yaml::Output *this)
{
  MEMORY[0x24BED6D80](this);
}

uint64_t llvm::zlib::uncompress()
{
  return MEMORY[0x24BED6D88]();
}

uint64_t llvm::zlib::isAvailable(llvm::zlib *this)
{
  return MEMORY[0x24BED6D90](this);
}

uint64_t llvm::zlib::compress()
{
  return MEMORY[0x24BED6D98]();
}

uint64_t llvm::APInt::shlSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED6DA0](this);
}

uint64_t llvm::APInt::ashrSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED6DA8](this);
}

uint64_t llvm::APInt::initSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED6DB0](this, a2);
}

uint64_t llvm::APInt::initSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED6DB8](this);
}

uint64_t llvm::APInt::lshrSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED6DC0](this);
}

uint64_t llvm::APInt::assignSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED6DC8](this, a2);
}

uint64_t llvm::APInt::setBitsSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED6DD0](this);
}

uint64_t llvm::APInt::orAssignSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED6DD8](this, a2);
}

uint64_t llvm::APInt::andAssignSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED6DE0](this, a2);
}

uint64_t llvm::APInt::xorAssignSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED6DE8](this, a2);
}

uint64_t llvm::APInt::flipAllBitsSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED6DF0](this);
}

uint64_t llvm::APInt::getSufficientBitsNeeded()
{
  return MEMORY[0x24BED6DF8]();
}

uint64_t llvm::APInt::udivrem(llvm::APInt *this, const llvm::APInt *a2, const llvm::APInt *a3, llvm::APInt *a4, llvm::APInt *a5)
{
  return MEMORY[0x24BED6E00](this, a2, a3, a4, a5);
}

uint64_t llvm::APInt::udivrem(llvm::APInt *this, const llvm::APInt *a2, uint64_t a3, llvm::APInt *a4, unint64_t *a5)
{
  return MEMORY[0x24BED6E08](this, a2, a3, a4, a5);
}

uint64_t llvm::APInt::getSplat(llvm::APInt *this, uint64_t a2, const llvm::APInt *a3)
{
  return MEMORY[0x24BED6E10](this, a2, a3);
}

uint64_t llvm::APInt::APInt()
{
  return MEMORY[0x24BED6E18]();
}

{
  return MEMORY[0x24BED6E20]();
}

uint64_t llvm::APInt::APInt(llvm::APInt *this, uint64_t a2, uint64_t a3, const unint64_t *a4)
{
  return MEMORY[0x24BED6E28](this, a2, a3, a4);
}

uint64_t llvm::APInt::operator<<=()
{
  return MEMORY[0x24BED6E30]();
}

uint64_t llvm::APInt::operator-=()
{
  return MEMORY[0x24BED6E38]();
}

{
  return MEMORY[0x24BED6E40]();
}

uint64_t llvm::APInt::operator*=()
{
  return MEMORY[0x24BED6E48]();
}

{
  return MEMORY[0x24BED6E50]();
}

uint64_t llvm::APInt::operator--()
{
  return MEMORY[0x24BED6E58]();
}

uint64_t llvm::APInt::operator+=()
{
  return MEMORY[0x24BED6E60]();
}

{
  return MEMORY[0x24BED6E68]();
}

uint64_t llvm::APInt::operator++()
{
  return MEMORY[0x24BED6E70]();
}

uint64_t llvm::MachO::mapToArchitecture()
{
  return MEMORY[0x24BED6E78]();
}

uint64_t llvm::MachO::getArchitectureName()
{
  return MEMORY[0x24BED6E80]();
}

uint64_t llvm::RISCV::checkCPUKind()
{
  return MEMORY[0x24BED6E88]();
}

uint64_t llvm::RISCV::parseCPUKind()
{
  return MEMORY[0x24BED6E90]();
}

uint64_t llvm::RISCV::checkTuneCPUKind()
{
  return MEMORY[0x24BED6E98]();
}

uint64_t llvm::RISCV::parseTuneCPUKind()
{
  return MEMORY[0x24BED6EA0]();
}

uint64_t llvm::RISCV::fillValidCPUArchList()
{
  return MEMORY[0x24BED6EA8]();
}

uint64_t llvm::RISCV::fillValidTuneCPUArchList()
{
  return MEMORY[0x24BED6EB0]();
}

uint64_t llvm::Regex::escape()
{
  return MEMORY[0x24BED6EB8]();
}

uint64_t llvm::Regex::Regex()
{
  return MEMORY[0x24BED6EC0]();
}

void llvm::Regex::~Regex(llvm::Regex *this)
{
  MEMORY[0x24BED6EC8](this);
}

uint64_t llvm::Timer::startTimer(llvm::Timer *this)
{
  return MEMORY[0x24BED6ED0](this);
}

uint64_t llvm::Timer::init()
{
  return MEMORY[0x24BED6ED8]();
}

{
  return MEMORY[0x24BED6EE0]();
}

uint64_t llvm::Timer::stopTimer(llvm::Timer *this)
{
  return MEMORY[0x24BED6EF0](this);
}

void llvm::Timer::~Timer(llvm::Timer *this)
{
  MEMORY[0x24BED6EF8](this);
}

uint64_t llvm::Value::addMetadata()
{
  return MEMORY[0x24BED6F00]();
}

uint64_t llvm::Value::setMetadata()
{
  return MEMORY[0x24BED6F08]();
}

uint64_t llvm::Value::replaceAllUsesWith()
{
  return MEMORY[0x24BED6F18]();
}

uint64_t llvm::Value::setName()
{
  return MEMORY[0x24BED6F30]();
}

uint64_t llvm::Value::takeName()
{
  return MEMORY[0x24BED6F38]();
}

uint64_t llvm::crc32()
{
  return MEMORY[0x24BED6F40]();
}

uint64_t llvm::AMDGPU::parseArchR600()
{
  return MEMORY[0x24BED6F48]();
}

uint64_t llvm::AMDGPU::getArchAttrR600()
{
  return MEMORY[0x24BED6F50]();
}

uint64_t llvm::AMDGPU::getArchNameR600()
{
  return MEMORY[0x24BED6F58]();
}

uint64_t llvm::AMDGPU::parseArchAMDGCN()
{
  return MEMORY[0x24BED6F60]();
}

uint64_t llvm::AMDGPU::getArchAttrAMDGCN()
{
  return MEMORY[0x24BED6F68]();
}

uint64_t llvm::AMDGPU::getArchNameAMDGCN()
{
  return MEMORY[0x24BED6F70]();
}

uint64_t llvm::AMDGPU::fillValidArchListR600()
{
  return MEMORY[0x24BED6F78]();
}

uint64_t llvm::AMDGPU::fillValidArchListAMDGCN()
{
  return MEMORY[0x24BED6F80]();
}

uint64_t llvm::JamCRC::update()
{
  return MEMORY[0x24BED6F88]();
}

uint64_t llvm::Linker::linkModules()
{
  return MEMORY[0x24BED6F90]();
}

uint64_t llvm::Linker::linkInModule()
{
  return MEMORY[0x24BED6F98]();
}

uint64_t llvm::MDNode::resolveCycles(llvm::MDNode *this)
{
  return MEMORY[0x24BED6FA0](this);
}

uint64_t llvm::MDNode::deleteTemporary(llvm::MDNode *this, llvm::MDNode *a2)
{
  return MEMORY[0x24BED6FA8](this, a2);
}

uint64_t llvm::MDNode::replaceOperandWith()
{
  return MEMORY[0x24BED6FB0]();
}

uint64_t llvm::MDNode::replaceWithUniquedImpl(llvm::MDNode *this)
{
  return MEMORY[0x24BED6FB8](this);
}

uint64_t llvm::MDNode::replaceWithDistinctImpl(llvm::MDNode *this)
{
  return MEMORY[0x24BED6FC0](this);
}

uint64_t llvm::MDNode::replaceWithPermanentImpl(llvm::MDNode *this)
{
  return MEMORY[0x24BED6FC8](this);
}

uint64_t llvm::MDNode::resolve(llvm::MDNode *this)
{
  return MEMORY[0x24BED6FD0](this);
}

uint64_t llvm::Module::setUwtable()
{
  return MEMORY[0x24BED6FD8]();
}

uint64_t llvm::Module::setPICLevel()
{
  return MEMORY[0x24BED6FE0]();
}

uint64_t llvm::Module::setPIELevel()
{
  return MEMORY[0x24BED6FE8]();
}

uint64_t llvm::Module::setCodeModel()
{
  return MEMORY[0x24BED6FF0]();
}

uint64_t llvm::Module::addModuleFlag()
{
  return MEMORY[0x24BED6FF8]();
}

{
  return MEMORY[0x24BED7000]();
}

{
  return MEMORY[0x24BED7008]();
}

uint64_t llvm::Module::global_values(llvm::Module *this)
{
  return MEMORY[0x24BED7010](this);
}

uint64_t llvm::Module::setDataLayout()
{
  return MEMORY[0x24BED7018]();
}

uint64_t llvm::Module::setDataLayout(llvm::Module *this, const llvm::DataLayout *a2)
{
  return MEMORY[0x24BED7020](this, a2);
}

uint64_t llvm::Module::setSDKVersion()
{
  return MEMORY[0x24BED7028]();
}

uint64_t llvm::Module::materializeAll(llvm::Module *this)
{
  return MEMORY[0x24BED7030](this);
}

uint64_t llvm::Module::setRtLibUseGOT(llvm::Module *this)
{
  return MEMORY[0x24BED7038](this);
}

uint64_t llvm::Module::setFramePointer()
{
  return MEMORY[0x24BED7040]();
}

uint64_t llvm::Module::getOrInsertComdat()
{
  return MEMORY[0x24BED7048]();
}

uint64_t llvm::Module::getOrInsertGlobal()
{
  return MEMORY[0x24BED7050]();
}

uint64_t llvm::Module::setProfileSummary()
{
  return MEMORY[0x24BED7058]();
}

uint64_t llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  return MEMORY[0x24BED7060](this, a2);
}

uint64_t llvm::Module::getOrInsertFunction()
{
  return MEMORY[0x24BED7068]();
}

uint64_t llvm::Module::materializeMetadata(llvm::Module *this)
{
  return MEMORY[0x24BED7078](this);
}

uint64_t llvm::Module::setPtrAuthABIVersion()
{
  return MEMORY[0x24BED7080]();
}

uint64_t llvm::Module::setStackProtectorGuard()
{
  return MEMORY[0x24BED7088]();
}

uint64_t llvm::Module::getOrInsertNamedMetadata()
{
  return MEMORY[0x24BED7090]();
}

uint64_t llvm::Module::setSemanticInterposition(llvm::Module *this)
{
  return MEMORY[0x24BED7098](this);
}

uint64_t llvm::Module::setOverrideStackAlignment(llvm::Module *this)
{
  return MEMORY[0x24BED70A0](this);
}

uint64_t llvm::Module::setStackProtectorGuardReg()
{
  return MEMORY[0x24BED70A8]();
}

uint64_t llvm::Module::setDarwinTargetVariantTriple()
{
  return MEMORY[0x24BED70B0]();
}

uint64_t llvm::Module::setStackProtectorGuardOffset(llvm::Module *this)
{
  return MEMORY[0x24BED70B8](this);
}

uint64_t llvm::Module::setDarwinTargetVariantSDKVersion()
{
  return MEMORY[0x24BED70C0]();
}

uint64_t llvm::Module::Module()
{
  return MEMORY[0x24BED70C8]();
}

void llvm::Module::~Module(llvm::Module *this)
{
  MEMORY[0x24BED70D8](this);
}

void llvm::SHA256::~SHA256(llvm::SHA256 *this)
{
  MEMORY[0x24BED70E0](this);
}

uint64_t llvm::Triple::getOSTypeName(llvm::Triple *this)
{
  return MEMORY[0x24BED70E8](this);
}

uint64_t llvm::Triple::getArchTypePrefix()
{
  return MEMORY[0x24BED70F0]();
}

uint64_t llvm::Triple::getEnvironmentTypeName()
{
  return MEMORY[0x24BED70F8]();
}

uint64_t llvm::Triple::getCanonicalVersionForOS()
{
  return MEMORY[0x24BED7100]();
}

uint64_t llvm::Triple::normalize()
{
  return MEMORY[0x24BED7108]();
}

uint64_t llvm::Triple::setOSName()
{
  return MEMORY[0x24BED7110]();
}

uint64_t llvm::Triple::Triple()
{
  return MEMORY[0x24BED7118]();
}

{
  return MEMORY[0x24BED7120]();
}

uint64_t llvm::detail::DoubleAPFloat::changeSign(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED7128](this);
}

uint64_t llvm::detail::DoubleAPFloat::makeLargest(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED7130](this);
}

uint64_t llvm::detail::DoubleAPFloat::makeSmallest(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED7138](this);
}

uint64_t llvm::detail::DoubleAPFloat::convertFromAPInt()
{
  return MEMORY[0x24BED7140]();
}

uint64_t llvm::detail::DoubleAPFloat::makeSmallestNormalized(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED7148](this);
}

uint64_t llvm::detail::DoubleAPFloat::add()
{
  return MEMORY[0x24BED7150]();
}

uint64_t llvm::detail::DoubleAPFloat::divide()
{
  return MEMORY[0x24BED7158]();
}

uint64_t llvm::detail::DoubleAPFloat::makeInf(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED7160](this);
}

uint64_t llvm::detail::DoubleAPFloat::makeNaN(llvm::detail::DoubleAPFloat *this, uint64_t a2, uint64_t a3, const llvm::APInt *a4)
{
  return MEMORY[0x24BED7168](this, a2, a3, a4);
}

uint64_t llvm::detail::DoubleAPFloat::makeZero(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED7170](this);
}

uint64_t llvm::detail::DoubleAPFloat::multiply()
{
  return MEMORY[0x24BED7178]();
}

uint64_t llvm::detail::DoubleAPFloat::subtract()
{
  return MEMORY[0x24BED7180]();
}

uint64_t llvm::detail::DoubleAPFloat::DoubleAPFloat()
{
  return MEMORY[0x24BED7188]();
}

{
  return MEMORY[0x24BED7190]();
}

{
  return MEMORY[0x24BED7198]();
}

{
  return MEMORY[0x24BED71A0]();
}

{
  return MEMORY[0x24BED71A8]();
}

uint64_t llvm::detail::DoubleAPFloat::DoubleAPFloat(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  return MEMORY[0x24BED71B0](this, a2);
}

uint64_t llvm::detail::DoubleAPFloat::operator=()
{
  return MEMORY[0x24BED71B8]();
}

uint64_t llvm::detail::printBumpPtrAllocatorStats(llvm::detail *this)
{
  return MEMORY[0x24BED71C0](this);
}

uint64_t llvm::detail::ilogb()
{
  return MEMORY[0x24BED71C8]();
}

uint64_t llvm::detail::scalbn()
{
  return MEMORY[0x24BED71D0]();
}

{
  return MEMORY[0x24BED71D8]();
}

uint64_t llvm::detail::IEEEFloat::changeSign(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED71E0](this);
}

uint64_t llvm::detail::IEEEFloat::makeLargest(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED71E8](this);
}

uint64_t llvm::detail::IEEEFloat::makeSmallest(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED71F0](this);
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt()
{
  return MEMORY[0x24BED71F8]();
}

uint64_t llvm::detail::IEEEFloat::makeSmallestNormalized(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED7200](this);
}

uint64_t llvm::detail::IEEEFloat::add()
{
  return MEMORY[0x24BED7208]();
}

uint64_t llvm::detail::IEEEFloat::divide()
{
  return MEMORY[0x24BED7210]();
}

uint64_t llvm::detail::IEEEFloat::makeInf(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED7218](this);
}

uint64_t llvm::detail::IEEEFloat::makeNaN(llvm::detail::IEEEFloat *this, uint64_t a2, uint64_t a3, const llvm::APInt *a4)
{
  return MEMORY[0x24BED7220](this, a2, a3, a4);
}

uint64_t llvm::detail::IEEEFloat::makeZero(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED7228](this);
}

uint64_t llvm::detail::IEEEFloat::multiply()
{
  return MEMORY[0x24BED7230]();
}

uint64_t llvm::detail::IEEEFloat::subtract()
{
  return MEMORY[0x24BED7238]();
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat()
{
  return MEMORY[0x24BED7240]();
}

{
  return MEMORY[0x24BED7248]();
}

{
  return MEMORY[0x24BED7250]();
}

{
  return MEMORY[0x24BED7258]();
}

{
  return MEMORY[0x24BED7260]();
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  return MEMORY[0x24BED7268](this, a2);
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, double a2)
{
  return MEMORY[0x24BED7270](this, a2);
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, float a2)
{
  return MEMORY[0x24BED7278](this, a2);
}

void llvm::detail::IEEEFloat::~IEEEFloat(llvm::detail::IEEEFloat *this)
{
  MEMORY[0x24BED7280](this);
}

uint64_t llvm::detail::IEEEFloat::operator=()
{
  return MEMORY[0x24BED7288]();
}

{
  return MEMORY[0x24BED7290]();
}

uint64_t llvm::legacy::PassManager::add()
{
  return MEMORY[0x24BED7298]();
}

uint64_t llvm::legacy::PassManager::run(llvm::legacy::PassManager *this, llvm::Module *a2)
{
  return MEMORY[0x24BED72A0](this, a2);
}

uint64_t llvm::legacy::PassManager::PassManager(llvm::legacy::PassManager *this)
{
  return MEMORY[0x24BED72A8](this);
}

{
  return MEMORY[0x24BED72B0](this);
}

void llvm::legacy::PassManager::~PassManager(llvm::legacy::PassManager *this)
{
  MEMORY[0x24BED72B8](this);
}

{
  MEMORY[0x24BED72C0](this);
}

uint64_t llvm::legacy::FunctionPassManager::doFinalization(llvm::legacy::FunctionPassManager *this)
{
  return MEMORY[0x24BED72C8](this);
}

uint64_t llvm::legacy::FunctionPassManager::doInitialization(llvm::legacy::FunctionPassManager *this)
{
  return MEMORY[0x24BED72D0](this);
}

uint64_t llvm::legacy::FunctionPassManager::add()
{
  return MEMORY[0x24BED72D8]();
}

uint64_t llvm::legacy::FunctionPassManager::run(llvm::legacy::FunctionPassManager *this, Function *a2)
{
  return MEMORY[0x24BED72E0](this, a2);
}

uint64_t llvm::legacy::FunctionPassManager::FunctionPassManager(llvm::legacy::FunctionPassManager *this, llvm::Module *a2)
{
  return MEMORY[0x24BED72E8](this, a2);
}

void llvm::legacy::FunctionPassManager::~FunctionPassManager(llvm::legacy::FunctionPassManager *this)
{
  MEMORY[0x24BED72F0](this);
}

uint64_t llvm::object::IRObjectFile::create()
{
  return MEMORY[0x24BED72F8]();
}

uint64_t llvm::object::createBinary()
{
  return MEMORY[0x24BED7300]();
}

uint64_t llvm::object::MachOUniversalBinary::MachOUniversalBinary()
{
  return MEMORY[0x24BED7310]();
}

uint64_t llvm::AArch64::parseCPUArch()
{
  return MEMORY[0x24BED7318]();
}

uint64_t llvm::AArch64::fillValidCPUArchList()
{
  return MEMORY[0x24BED7320]();
}

uint64_t llvm::APFloat::getAllOnesValue()
{
  return MEMORY[0x24BED7328]();
}

uint64_t llvm::APFloat::convertFromString()
{
  return MEMORY[0x24BED7330]();
}

uint64_t llvm::APFloat::Storage::Storage()
{
  return MEMORY[0x24BED7338]();
}

uint64_t llvm::APFloat::convert()
{
  return MEMORY[0x24BED7340]();
}

uint64_t llvm::CmpInst::CmpInst()
{
  return MEMORY[0x24BED7348]();
}

uint64_t llvm::MDTuple::getImpl()
{
  return MEMORY[0x24BED7350]();
}

uint64_t llvm::Mangler::getNameWithPrefix()
{
  return MEMORY[0x24BED7358]();
}

uint64_t llvm::PHINode::growOperands(llvm::PHINode *this)
{
  return MEMORY[0x24BED7360](this);
}

uint64_t llvm::parseIR()
{
  return MEMORY[0x24BED7370]();
}

uint64_t llvm::Argument::removeAttr()
{
  return MEMORY[0x24BED7390]();
}

uint64_t llvm::Argument::addAttr()
{
  return MEMORY[0x24BED7398]();
}

{
  return MEMORY[0x24BED73A0]();
}

uint64_t llvm::Argument::addAttrs(llvm::Argument *this, llvm::AttrBuilder *a2)
{
  return MEMORY[0x24BED73A8](this, a2);
}

uint64_t llvm::CallBase::addOperandBundle()
{
  return MEMORY[0x24BED73B0]();
}

uint64_t llvm::CallInst::init()
{
  return MEMORY[0x24BED73B8]();
}

uint64_t llvm::CallInst::CallInst()
{
  return MEMORY[0x24BED73C0]();
}

uint64_t llvm::CastInst::CreateFPCast()
{
  return MEMORY[0x24BED73C8]();
}

uint64_t llvm::CastInst::isBitCastable(llvm::CastInst *this, llvm::Type *a2, llvm::Type *a3)
{
  return MEMORY[0x24BED73D0](this, a2, a3);
}

uint64_t llvm::CastInst::CreateIntegerCast()
{
  return MEMORY[0x24BED73D8]();
}

uint64_t llvm::CastInst::CreatePointerCast()
{
  return MEMORY[0x24BED73E0]();
}

uint64_t llvm::CastInst::CreateSExtOrBitCast()
{
  return MEMORY[0x24BED73E8]();
}

uint64_t llvm::CastInst::CreateZExtOrBitCast()
{
  return MEMORY[0x24BED73F0]();
}

uint64_t llvm::CastInst::CreateTruncOrBitCast()
{
  return MEMORY[0x24BED73F8]();
}

uint64_t llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast()
{
  return MEMORY[0x24BED7400]();
}

uint64_t llvm::CastInst::Create()
{
  return MEMORY[0x24BED7408]();
}

uint64_t llvm::Constant::getNullValue(llvm::Constant *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7410](this, a2);
}

uint64_t llvm::Constant::destroyConstant(llvm::Constant *this)
{
  return MEMORY[0x24BED7418](this);
}

uint64_t llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7420](this, a2);
}

uint64_t llvm::Constant::getIntegerValue(llvm::Constant *this, llvm::Type *a2, const llvm::APInt *a3)
{
  return MEMORY[0x24BED7428](this, a2, a3);
}

uint64_t llvm::DebugLoc::DebugLoc()
{
  return MEMORY[0x24BED7440]();
}

uint64_t llvm::DebugLoc::DebugLoc(llvm::DebugLoc *this, const llvm::MDNode *a2)
{
  return MEMORY[0x24BED7448](this, a2);
}

uint64_t llvm::Function::addFnAttrs(llvm::Function *this, const llvm::AttrBuilder *a2)
{
  return MEMORY[0x24BED7450](this, a2);
}

uint64_t llvm::Function::addParamAttr()
{
  return MEMORY[0x24BED7458]();
}

{
  return MEMORY[0x24BED7460]();
}

uint64_t llvm::Function::removeFnAttr()
{
  return MEMORY[0x24BED7468]();
}

{
  return MEMORY[0x24BED7470]();
}

uint64_t llvm::Function::removeFnAttrs()
{
  return MEMORY[0x24BED7480]();
}

uint64_t llvm::Function::setEntryCount()
{
  return MEMORY[0x24BED7488]();
}

uint64_t llvm::Function::setSubprogram()
{
  return MEMORY[0x24BED7490]();
}

uint64_t llvm::Function::eraseFromParent(llvm::Function *this)
{
  return MEMORY[0x24BED7498](this);
}

uint64_t llvm::Function::setPrologueData(llvm::Function *this, llvm::Constant *a2)
{
  return MEMORY[0x24BED74A0](this, a2);
}

uint64_t llvm::Function::removeFromParent(llvm::Function *this)
{
  return MEMORY[0x24BED74A8](this);
}

uint64_t llvm::Function::setPersonalityFn(llvm::Function *this, llvm::Constant *a2)
{
  return MEMORY[0x24BED74B0](this, a2);
}

uint64_t llvm::Function::copyAttributesFrom(llvm::Function *this, const llvm::Function *a2)
{
  return MEMORY[0x24BED74C0](this, a2);
}

uint64_t llvm::Function::addFnAttr()
{
  return MEMORY[0x24BED74D0]();
}

{
  return MEMORY[0x24BED74D8]();
}

{
  return MEMORY[0x24BED74E0]();
}

uint64_t llvm::Function::Function()
{
  return MEMORY[0x24BED74E8]();
}

uint64_t llvm::LoadInst::LoadInst()
{
  return MEMORY[0x24BED74F0]();
}

uint64_t llvm::MDString::get()
{
  return MEMORY[0x24BED74F8]();
}

uint64_t llvm::coverage::CoverageMappingWriter::write(llvm::coverage::CoverageMappingWriter *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7508](this, a2);
}

uint64_t llvm::coverage::CounterExpressionBuilder::add()
{
  return MEMORY[0x24BED7510]();
}

uint64_t llvm::coverage::CounterExpressionBuilder::subtract()
{
  return MEMORY[0x24BED7518]();
}

uint64_t llvm::coverage::RawCoverageMappingReader::read(llvm::coverage::RawCoverageMappingReader *this)
{
  return MEMORY[0x24BED7520](this);
}

uint64_t llvm::coverage::CoverageFilenamesSectionWriter::write(llvm::coverage::CoverageFilenamesSectionWriter *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7528](this, a2);
}

uint64_t llvm::coverage::CoverageFilenamesSectionWriter::CoverageFilenamesSectionWriter()
{
  return MEMORY[0x24BED7530]();
}

uint64_t llvm::demangle()
{
  return MEMORY[0x24BED7538]();
}

uint64_t llvm::xxHash64()
{
  return MEMORY[0x24BED7540]();
}

uint64_t llvm::ArrayType::get(llvm::ArrayType *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7548](this, a2);
}

uint64_t llvm::Attribute::getWithAlignment()
{
  return MEMORY[0x24BED7550]();
}

uint64_t llvm::Attribute::getWithByValType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return MEMORY[0x24BED7558](this, a2, a3);
}

uint64_t llvm::Attribute::getWithVScaleRangeArgs(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED7560](this, a2);
}

uint64_t llvm::Attribute::getWithDereferenceableBytes(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED7568](this, a2);
}

uint64_t llvm::Attribute::get()
{
  return MEMORY[0x24BED7570]();
}

{
  return MEMORY[0x24BED7578]();
}

{
  return MEMORY[0x24BED7580]();
}

uint64_t llvm::DIBuilder::createFile()
{
  return MEMORY[0x24BED7598]();
}

uint64_t llvm::DIBuilder::retainType()
{
  return MEMORY[0x24BED75A0]();
}

uint64_t llvm::DIBuilder::createLabel()
{
  return MEMORY[0x24BED75A8]();
}

uint64_t llvm::DIBuilder::createMacro()
{
  return MEMORY[0x24BED75B0]();
}

uint64_t llvm::DIBuilder::insertLabel()
{
  return MEMORY[0x24BED75B8]();
}

uint64_t llvm::DIBuilder::createMethod()
{
  return MEMORY[0x24BED75C0]();
}

uint64_t llvm::DIBuilder::createModule()
{
  return MEMORY[0x24BED75C8]();
}

uint64_t llvm::DIBuilder::createTypedef()
{
  return MEMORY[0x24BED75D0]();
}

uint64_t llvm::DIBuilder::insertDeclare()
{
  return MEMORY[0x24BED75D8]();
}

{
  return MEMORY[0x24BED75E0]();
}

uint64_t llvm::DIBuilder::replaceArrays()
{
  return MEMORY[0x24BED75E8]();
}

uint64_t llvm::DIBuilder::createFunction()
{
  return MEMORY[0x24BED75F0]();
}

uint64_t llvm::DIBuilder::createObjCIVar()
{
  return MEMORY[0x24BED75F8]();
}

uint64_t llvm::DIBuilder::createArrayType()
{
  return MEMORY[0x24BED7600]();
}

uint64_t llvm::DIBuilder::createBasicType()
{
  return MEMORY[0x24BED7608]();
}

uint64_t llvm::DIBuilder::createNameSpace()
{
  return MEMORY[0x24BED7610]();
}

uint64_t llvm::DIBuilder::createEnumerator()
{
  return MEMORY[0x24BED7618]();
}

uint64_t llvm::DIBuilder::createExpression()
{
  return MEMORY[0x24BED7620]();
}

uint64_t llvm::DIBuilder::createMemberType()
{
  return MEMORY[0x24BED7628]();
}

uint64_t llvm::DIBuilder::createStructType()
{
  return MEMORY[0x24BED7630]();
}

uint64_t llvm::DIBuilder::createVectorType()
{
  return MEMORY[0x24BED7638]();
}

uint64_t llvm::DIBuilder::getOrCreateArray()
{
  return MEMORY[0x24BED7640]();
}

uint64_t llvm::DIBuilder::createCompileUnit()
{
  return MEMORY[0x24BED7648]();
}

uint64_t llvm::DIBuilder::createForwardDecl()
{
  return MEMORY[0x24BED7650]();
}

uint64_t llvm::DIBuilder::createInheritance()
{
  return MEMORY[0x24BED7658]();
}

uint64_t llvm::DIBuilder::createNullPtrType(llvm::DIBuilder *this)
{
  return MEMORY[0x24BED7660](this);
}

uint64_t llvm::DIBuilder::createPointerType()
{
  return MEMORY[0x24BED7668]();
}

uint64_t llvm::DIBuilder::createAutoVariable()
{
  return MEMORY[0x24BED7670]();
}

uint64_t llvm::DIBuilder::createLexicalBlock()
{
  return MEMORY[0x24BED7678]();
}

uint64_t llvm::DIBuilder::createObjCProperty()
{
  return MEMORY[0x24BED7680]();
}

uint64_t llvm::DIBuilder::finalizeSubprogram()
{
  return MEMORY[0x24BED7688]();
}

uint64_t llvm::DIBuilder::createQualifiedType()
{
  return MEMORY[0x24BED7690]();
}

uint64_t llvm::DIBuilder::createReferenceType()
{
  return MEMORY[0x24BED7698]();
}

uint64_t llvm::DIBuilder::createTempMacroFile()
{
  return MEMORY[0x24BED76A0]();
}

uint64_t llvm::DIBuilder::getOrCreateSubrange()
{
  return MEMORY[0x24BED76A8]();
}

uint64_t llvm::DIBuilder::replaceVTableHolder()
{
  return MEMORY[0x24BED76B0]();
}

uint64_t llvm::DIBuilder::createArtificialType()
{
  return MEMORY[0x24BED76B8]();
}

uint64_t llvm::DIBuilder::createImportedModule()
{
  return MEMORY[0x24BED76C0]();
}

uint64_t llvm::DIBuilder::createSubroutineType()
{
  return MEMORY[0x24BED76C8]();
}

uint64_t llvm::DIBuilder::getOrCreateTypeArray()
{
  return MEMORY[0x24BED76D0]();
}

uint64_t llvm::DIBuilder::createEnumerationType()
{
  return MEMORY[0x24BED76D8]();
}

uint64_t llvm::DIBuilder::createUnspecifiedType()
{
  return MEMORY[0x24BED76E0]();
}

uint64_t llvm::DIBuilder::createLexicalBlockFile()
{
  return MEMORY[0x24BED76E8]();
}

uint64_t llvm::DIBuilder::createStaticMemberType()
{
  return MEMORY[0x24BED76F0]();
}

uint64_t llvm::DIBuilder::createMemberPointerType()
{
  return MEMORY[0x24BED76F8]();
}

uint64_t llvm::DIBuilder::createObjectPointerType()
{
  return MEMORY[0x24BED7700]();
}

uint64_t llvm::DIBuilder::createParameterVariable()
{
  return MEMORY[0x24BED7708]();
}

uint64_t llvm::DIBuilder::createBitFieldMemberType()
{
  return MEMORY[0x24BED7710]();
}

uint64_t llvm::DIBuilder::createImportedDeclaration()
{
  return MEMORY[0x24BED7718]();
}

uint64_t llvm::DIBuilder::createTempFunctionFwdDecl()
{
  return MEMORY[0x24BED7720]();
}

uint64_t llvm::DIBuilder::createPtrAuthQualifiedType()
{
  return MEMORY[0x24BED7728]();
}

uint64_t llvm::DIBuilder::createUnspecifiedParameter(llvm::DIBuilder *this)
{
  return MEMORY[0x24BED7730](this);
}

uint64_t llvm::DIBuilder::createTemplateParameterPack()
{
  return MEMORY[0x24BED7738]();
}

uint64_t llvm::DIBuilder::createTemplateTypeParameter()
{
  return MEMORY[0x24BED7740]();
}

uint64_t llvm::DIBuilder::createTemplateValueParameter()
{
  return MEMORY[0x24BED7748]();
}

uint64_t llvm::DIBuilder::createGlobalVariableExpression()
{
  return MEMORY[0x24BED7750]();
}

uint64_t llvm::DIBuilder::createReplaceableCompositeType()
{
  return MEMORY[0x24BED7758]();
}

uint64_t llvm::DIBuilder::createTempGlobalVariableFwdDecl()
{
  return MEMORY[0x24BED7760]();
}

uint64_t llvm::DIBuilder::createTemplateTemplateParameter()
{
  return MEMORY[0x24BED7768]();
}

uint64_t llvm::DIBuilder::finalize(llvm::DIBuilder *this)
{
  return MEMORY[0x24BED7770](this);
}

uint64_t llvm::DIBuilder::DIBuilder()
{
  return MEMORY[0x24BED7778]();
}

uint64_t llvm::FenceInst::FenceInst()
{
  return MEMORY[0x24BED7788]();
}

uint64_t llvm::InlineAsm::containArchDependentInlineAsm(llvm::InlineAsm *this, llvm::Module *a2)
{
  return MEMORY[0x24BED7790](this, a2);
}

uint64_t llvm::InlineAsm::get()
{
  return MEMORY[0x24BED7798]();
}

uint64_t llvm::Intrinsic::getAttributes(llvm::Intrinsic *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED77A0](this, a2);
}

uint64_t llvm::Intrinsic::getDeclaration()
{
  return MEMORY[0x24BED77A8]();
}

uint64_t llvm::Intrinsic::getIntrinsicForMSBuiltin()
{
  return MEMORY[0x24BED77B0]();
}

uint64_t llvm::Intrinsic::getIntrinsicForGCCBuiltin()
{
  return MEMORY[0x24BED77B8]();
}

uint64_t llvm::MCContext::MCContext()
{
  return MEMORY[0x24BED77C0]();
}

void llvm::MCContext::~MCContext(llvm::MCContext *this)
{
  MEMORY[0x24BED77C8](this);
}

uint64_t llvm::MDBuilder::createRange(llvm::MDBuilder *this, const llvm::APInt *a2, const llvm::APInt *a3)
{
  return MEMORY[0x24BED77D0](this, a2, a3);
}

uint64_t llvm::MDBuilder::createFPMath(llvm::MDBuilder *this, float a2)
{
  return MEMORY[0x24BED77D8](this, a2);
}

uint64_t llvm::MDBuilder::createString()
{
  return MEMORY[0x24BED77E0]();
}

uint64_t llvm::MDBuilder::createTBAARoot()
{
  return MEMORY[0x24BED77E8]();
}

uint64_t llvm::MDBuilder::createTBAATypeNode()
{
  return MEMORY[0x24BED77F0]();
}

uint64_t llvm::MDBuilder::createBranchWeights()
{
  return MEMORY[0x24BED77F8]();
}

uint64_t llvm::MDBuilder::createBranchWeights(llvm::MDBuilder *this)
{
  return MEMORY[0x24BED7800](this);
}

uint64_t llvm::MDBuilder::createTBAAAccessTag(llvm::MDBuilder *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  return MEMORY[0x24BED7808](this, a2, a3);
}

uint64_t llvm::MDBuilder::createUnpredictable(llvm::MDBuilder *this)
{
  return MEMORY[0x24BED7810](this);
}

uint64_t llvm::MDBuilder::createTBAAStructNode()
{
  return MEMORY[0x24BED7818]();
}

uint64_t llvm::MDBuilder::createCallbackEncoding()
{
  return MEMORY[0x24BED7820]();
}

uint64_t llvm::MDBuilder::createTBAAStructTagNode(llvm::MDBuilder *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  return MEMORY[0x24BED7828](this, a2, a3);
}

uint64_t llvm::MDBuilder::createTBAAScalarTypeNode()
{
  return MEMORY[0x24BED7830]();
}

uint64_t llvm::MDBuilder::createTBAAStructTypeNode()
{
  return MEMORY[0x24BED7838]();
}

uint64_t llvm::SourceMgr::SrcBuffer::SrcBuffer()
{
  return MEMORY[0x24BED7840]();
}

void llvm::SourceMgr::SrcBuffer::~SrcBuffer(llvm::SourceMgr::SrcBuffer *this)
{
  MEMORY[0x24BED7848](this);
}

uint64_t llvm::SourceMgr::SourceMgr(llvm::SourceMgr *this)
{
  return MEMORY[0x24BED7850](this);
}

void llvm::SourceMgr::~SourceMgr(llvm::SourceMgr *this)
{
  MEMORY[0x24BED7858](this);
}

uint64_t llvm::StoreInst::StoreInst()
{
  return MEMORY[0x24BED7860]();
}

{
  return MEMORY[0x24BED7870]();
}

uint64_t llvm::write_hex()
{
  return MEMORY[0x24BED7878]();
}

uint64_t llvm::operator<<()
{
  return MEMORY[0x24BED7880]();
}

uint64_t metalfe::GPUCompiler::computeDriverPathFromImageAddr(metalfe::GPUCompiler *this, const void *a2)
{
  return MEMORY[0x24BE38EC0](this, a2);
}

uint64_t metalfe::GPUCompiler::computeResourceDirFromImageAddr(metalfe::GPUCompiler *this, const void *a2)
{
  return MEMORY[0x24BE38EC8](this, a2);
}

uint64_t llvm::AllocaInst::isStaticAlloca(llvm::AllocaInst *this)
{
  return MEMORY[0x24BED7888](this);
}

uint64_t llvm::AllocaInst::getAllocationSizeInBits(llvm::AllocaInst *this, const llvm::DataLayout *a2)
{
  return MEMORY[0x24BED7890](this, a2);
}

uint64_t llvm::BasicBlock::getContext(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED7898](this);
}

uint64_t llvm::BasicBlock::isLandingPad(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78A0](this);
}

uint64_t llvm::BasicBlock::getFirstNonPHI(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78A8](this);
}

uint64_t llvm::BasicBlock::getLandingPadInst(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78B0](this);
}

uint64_t llvm::BasicBlock::getSingleSuccessor(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78B8](this);
}

uint64_t llvm::BasicBlock::getUniqueSuccessor(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78C0](this);
}

uint64_t llvm::BasicBlock::getFirstInsertionPt(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78C8](this);
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78D8](this);
}

uint64_t llvm::BasicBlock::getModule(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78E8](this);
}

uint64_t llvm::DataLayout::getIndexType(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7908](this, a2);
}

uint64_t llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7910](this, a2);
}

uint64_t llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED7918](this, a2);
}

uint64_t llvm::DataLayout::getPointerSize(llvm::DataLayout *this)
{
  return MEMORY[0x24BED7920](this);
}

uint64_t llvm::DataLayout::getABITypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7928](this, a2);
}

uint64_t llvm::DataLayout::getStructLayout()
{
  return MEMORY[0x24BED7930]();
}

uint64_t llvm::DataLayout::getPrefTypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7938](this, a2);
}

uint64_t llvm::DataLayout::getABITypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7940](this, a2);
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this)
{
  return MEMORY[0x24BED7948](this);
}

uint64_t llvm::DataLayout::getPrefTypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7950](this, a2);
}

uint64_t llvm::DataLayout::getIndexTypeSizeInBits(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7958](this, a2);
}

uint64_t llvm::DataLayout::getPointerTypeSizeInBits(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7968](this, a2);
}

uint64_t llvm::StructType::getTypeAtIndex()
{
  return MEMORY[0x24BED7970]();
}

uint64_t llvm::StructType::isLayoutIdentical()
{
  return MEMORY[0x24BED7978]();
}

uint64_t llvm::StructType::getName(llvm::StructType *this)
{
  return MEMORY[0x24BED7980](this);
}

uint64_t llvm::GEPOperator::getSourceElementType(llvm::GEPOperator *this)
{
  return MEMORY[0x24BED7988](this);
}

uint64_t llvm::GlobPattern::match()
{
  return MEMORY[0x24BED7990]();
}

uint64_t llvm::GlobalAlias::getAliaseeObject(llvm::GlobalAlias *this)
{
  return MEMORY[0x24BED7998](this);
}

uint64_t llvm::GlobalValue::getSection(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79A0](this);
}

uint64_t llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79A8](this);
}

uint64_t llvm::GlobalValue::isInterposable(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79B0](this);
}

uint64_t llvm::GlobalValue::getAddressSpace(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79B8](this);
}

uint64_t llvm::GlobalValue::getAliaseeObject(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79C0](this);
}

uint64_t llvm::GlobalValue::getGlobalIdentifier(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79C8](this);
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79D0](this);
}

uint64_t llvm::GlobalValue::canBenefitFromLocalAlias(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79D8](this);
}

uint64_t llvm::Instruction::getFunction(llvm::Instruction *this)
{
  return MEMORY[0x24BED79E0](this);
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this)
{
  return MEMORY[0x24BED79E8](this);
}

uint64_t llvm::Instruction::getMetadataImpl()
{
  return MEMORY[0x24BED79F0]();
}

uint64_t llvm::Instruction::getMetadataImpl(llvm::Instruction *this)
{
  return MEMORY[0x24BED79F8](this);
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A08](this);
}

uint64_t llvm::Instruction::mayWriteToMemory(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A10](this);
}

uint64_t llvm::Instruction::mayReadFromMemory(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A18](this);
}

uint64_t llvm::Instruction::clone(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A20](this);
}

uint64_t llvm::Instruction::isAtomic(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A28](this);
}

uint64_t llvm::Instruction::mayThrow(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A30](this);
}

uint64_t llvm::LLVMContext::getMDKindID()
{
  return MEMORY[0x24BED7A40]();
}

uint64_t llvm::LLVMContext::setOpaquePointers(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED7A48](this);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED7A68](this);
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED7A70](this);
}

uint64_t llvm::APFixedPoint::convertToInt(llvm::APFixedPoint *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  return MEMORY[0x24BED7A80](this, a2, a3, a4);
}

uint64_t llvm::APFixedPoint::convertToFloat()
{
  return MEMORY[0x24BED7A88]();
}

uint64_t llvm::APFixedPoint::add(llvm::APFixedPoint *this, const llvm::APFixedPoint *a2, BOOL *a3)
{
  return MEMORY[0x24BED7A90](this, a2, a3);
}

uint64_t llvm::APFixedPoint::div(llvm::APFixedPoint *this, const llvm::APFixedPoint *a2, BOOL *a3)
{
  return MEMORY[0x24BED7A98](this, a2, a3);
}

uint64_t llvm::APFixedPoint::mul(llvm::APFixedPoint *this, const llvm::APFixedPoint *a2, BOOL *a3)
{
  return MEMORY[0x24BED7AA0](this, a2, a3);
}

uint64_t llvm::APFixedPoint::shl(llvm::APFixedPoint *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x24BED7AA8](this, a2, a3);
}

uint64_t llvm::APFixedPoint::sub(llvm::APFixedPoint *this, const llvm::APFixedPoint *a2, BOOL *a3)
{
  return MEMORY[0x24BED7AB0](this, a2, a3);
}

uint64_t llvm::APFixedPoint::negate(llvm::APFixedPoint *this, BOOL *a2)
{
  return MEMORY[0x24BED7AB8](this, a2);
}

uint64_t llvm::APFixedPoint::compare(llvm::APFixedPoint *this, const llvm::APFixedPoint *a2)
{
  return MEMORY[0x24BED7AC0](this, a2);
}

uint64_t llvm::APFixedPoint::convert()
{
  return MEMORY[0x24BED7AC8]();
}

uint64_t llvm::APFixedPoint::toString()
{
  return MEMORY[0x24BED7AD0]();
}

uint64_t llvm::AttributeSet::addAttribute()
{
  return MEMORY[0x24BED7AE0]();
}

uint64_t llvm::AttributeSet::addAttributes()
{
  return MEMORY[0x24BED7AE8]();
}

uint64_t llvm::ConstantExpr::getAsInstruction(llvm::ConstantExpr *this, llvm::Instruction *a2)
{
  return MEMORY[0x24BED7B08](this, a2);
}

uint64_t llvm::GlobalObject::getSectionImpl(llvm::GlobalObject *this)
{
  return MEMORY[0x24BED7B30](this);
}

uint64_t llvm::MemoryBuffer::getMemBufferRef(llvm::MemoryBuffer *this)
{
  return MEMORY[0x24BED7B38](this);
}

uint64_t llvm::RISCVISAInfo::hasExtension()
{
  return MEMORY[0x24BED7B48]();
}

uint64_t llvm::RISCVISAInfo::toFeatureVector(llvm::RISCVISAInfo *this)
{
  return MEMORY[0x24BED7B50](this);
}

uint64_t llvm::RISCVISAInfo::computeDefaultABI(llvm::RISCVISAInfo *this)
{
  return MEMORY[0x24BED7B58](this);
}

uint64_t llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, llvm::raw_ostream *a3)
{
  return MEMORY[0x24BED7B60](this, a2, a3);
}

uint64_t llvm::StructLayout::getElementContainingOffset(llvm::StructLayout *this)
{
  return MEMORY[0x24BED7B68](this);
}

uint64_t llvm::VersionTuple::getAsString(llvm::VersionTuple *this)
{
  return MEMORY[0x24BED7B70](this);
}

uint64_t llvm::AttributeList::getFnAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B78](this);
}

uint64_t llvm::AttributeList::getRetAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B80](this);
}

uint64_t llvm::AttributeList::getParamAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B90](this);
}

uint64_t llvm::AttributeList::getNumAttrSets(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B98](this);
}

uint64_t llvm::AttributeList::getRetAlignment(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7BA0](this);
}

uint64_t llvm::AttributeList::addParamAttribute()
{
  return MEMORY[0x24BED7BA8]();
}

uint64_t llvm::AttributeList::addAttributeAtIndex()
{
  return MEMORY[0x24BED7BB0]();
}

{
  return MEMORY[0x24BED7BB8]();
}

{
  return MEMORY[0x24BED7BC0]();
}

uint64_t llvm::AttributeList::getAttributeAtIndex()
{
  return MEMORY[0x24BED7BC8]();
}

uint64_t llvm::AttributeList::hasAttributeAtIndex()
{
  return MEMORY[0x24BED7BD0]();
}

uint64_t llvm::AttributeList::hasAttributesAtIndex(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7BD8](this);
}

uint64_t llvm::AttributeList::removeAttributeAtIndex()
{
  return MEMORY[0x24BED7BE0]();
}

uint64_t llvm::AttributeList::hasFnAttr()
{
  return MEMORY[0x24BED7BF8]();
}

uint64_t llvm::IRBuilderBase::getCurrentDebugLocation(llvm::IRBuilderBase *this)
{
  return MEMORY[0x24BED7C00](this);
}

uint64_t llvm::StringMapImpl::FindKey()
{
  return MEMORY[0x24BED7C08]();
}

uint64_t llvm::TargetExtType::getLayoutType(llvm::TargetExtType *this)
{
  return MEMORY[0x24BED7C10](this);
}

uint64_t llvm::TargetMachine::getTargetIRAnalysis(llvm::TargetMachine *this)
{
  return MEMORY[0x24BED7C18](this);
}

uint64_t llvm::TracepointSet::getBaseID(llvm::TracepointSet *this)
{
  return MEMORY[0x24BE38ED0](this);
}

uint64_t llvm::GlobalVariable::getDebugInfo()
{
  return MEMORY[0x24BED7C20]();
}

uint64_t llvm::LockFileManager::getErrorMessage(llvm::LockFileManager *this)
{
  return MEMORY[0x24BED7C28](this);
}

uint64_t llvm::LockFileManager::getState(llvm::LockFileManager *this)
{
  return MEMORY[0x24BED7C30](this);
}

uint64_t llvm::SpecialCaseList::inSectionBlame()
{
  return MEMORY[0x24BED7C38]();
}

uint64_t llvm::SpecialCaseList::Matcher::match()
{
  return MEMORY[0x24BED7C40]();
}

uint64_t llvm::SpecialCaseList::inSection()
{
  return MEMORY[0x24BED7C48]();
}

uint64_t llvm::FoldingSetNodeID::operator==()
{
  return MEMORY[0x24BED7C50]();
}

uint64_t llvm::TracepointBaseID::getBaseID(llvm::TracepointBaseID *this)
{
  return MEMORY[0x24BE38ED8](this);
}

uint64_t llvm::GetElementPtrInst::accumulateConstantOffset(llvm::GetElementPtrInst *this, const llvm::DataLayout *a2, llvm::APInt *a3)
{
  return MEMORY[0x24BED7C68](this, a2, a3);
}

uint64_t llvm::ManagedStaticBase::RegisterManagedStatic(llvm::ManagedStaticBase *this, void *(*a2)(void), void (*a3)(void *))
{
  return MEMORY[0x24BED7C70](this, a2, a3);
}

uint64_t llvm::ModuleSymbolTable::getSymbolFlags()
{
  return MEMORY[0x24BED7C78]();
}

uint64_t llvm::ModuleSymbolTable::printSymbolName()
{
  return MEMORY[0x24BED7C80]();
}

uint64_t llvm::FixedPointSemantics::getCommonSemantics()
{
  return MEMORY[0x24BED7C88]();
}

uint64_t llvm::FixedPointSemantics::fitsInFloatSemantics()
{
  return MEMORY[0x24BED7C90]();
}

uint64_t llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  return MEMORY[0x24BED7C98](this, a2);
}

uint64_t llvm::ConstantDataSequential::getElementType(llvm::ConstantDataSequential *this)
{
  return MEMORY[0x24BED7CA0](this);
}

uint64_t llvm::ConstantDataSequential::getNumElements(llvm::ConstantDataSequential *this)
{
  return MEMORY[0x24BED7CA8](this);
}

uint64_t llvm::ConstantDataSequential::getElementAsConstant(llvm::ConstantDataSequential *this)
{
  return MEMORY[0x24BED7CB8](this);
}

uint64_t llvm::ItaniumPartialDemangler::getFunctionName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  return MEMORY[0x24BED7CC0](this, a2, a3);
}

uint64_t llvm::TracepointVariableCallInst::getVariableAddress(llvm::TracepointVariableCallInst *this)
{
  return MEMORY[0x24BE38EE0](this);
}

uint64_t llvm::DiagnosticInfoOptimizationBase::getMsg(llvm::DiagnosticInfoOptimizationBase *this)
{
  return MEMORY[0x24BED7CC8](this);
}

uint64_t llvm::DiagnosticInfoWithLocationBase::getLocation()
{
  return MEMORY[0x24BED7CD0]();
}

uint64_t llvm::DiagnosticInfoWithLocationBase::getAbsolutePath(llvm::DiagnosticInfoWithLocationBase *this)
{
  return MEMORY[0x24BED7CD8](this);
}

uint64_t llvm::LLT::print(llvm::LLT *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7D00](this, a2);
}

uint64_t llvm::air::MetalFunction::getKind(llvm::air::MetalFunction *this)
{
  return MEMORY[0x24BE38EE8](this);
}

uint64_t llvm::air::AIRTypeFactory::getTypeForMangling()
{
  return MEMORY[0x24BE38EF0]();
}

uint64_t llvm::air::AIRTypeFactory::getType()
{
  return MEMORY[0x24BE38EF8]();
}

uint64_t llvm::air::AIRFunctionInfo::lookupName()
{
  return MEMORY[0x24BE38F00]();
}

uint64_t llvm::air::AIRFunctionInfo::getDeclaration()
{
  return MEMORY[0x24BE38F08]();
}

uint64_t llvm::air::AIRFunctionInfo::getIntersectDeclaration(llvm::air::AIRFunctionInfo *this, llvm::Module *a2)
{
  return MEMORY[0x24BE38F10](this, a2);
}

uint64_t llvm::air::AIRFunctionInfo::getIntersectDirectAccessDeclaration(llvm::air::AIRFunctionInfo *this, llvm::Module *a2)
{
  return MEMORY[0x24BE38F18](this, a2);
}

uint64_t llvm::air::AIRFunctionInfo::getReleaseIntersectPayloadDeclaration(llvm::air::AIRFunctionInfo *this, llvm::Module *a2)
{
  return MEMORY[0x24BE38F20](this, a2);
}

uint64_t llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration()
{
  return MEMORY[0x24BE38F28]();
}

uint64_t llvm::air::AIRFunctionInfo::getIntersectionResultFunctionDeclaration()
{
  return MEMORY[0x24BE38F30]();
}

uint64_t llvm::air::AIFunctionConstant::getIndex(llvm::air::AIFunctionConstant *this)
{
  return MEMORY[0x24BE38F38](this);
}

uint64_t llvm::air::AIType::getWithAlignment(llvm::air::AIType *this)
{
  return MEMORY[0x24BE38F40](this);
}

uint64_t llvm::cas::ObjectProxy::getMemoryBuffer()
{
  return MEMORY[0x24BED7D10]();
}

uint64_t llvm::cas::CASID::toString(llvm::cas::CASID *this)
{
  return MEMORY[0x24BED7D18](this);
}

uint64_t llvm::opt::Arg::getAsString()
{
  return MEMORY[0x24BED7D20]();
}

uint64_t llvm::opt::Arg::render()
{
  return MEMORY[0x24BED7D28]();
}

uint64_t llvm::opt::Option::matches()
{
  return MEMORY[0x24BED7D30]();
}

uint64_t llvm::opt::ArgList::ClaimAllArgs()
{
  return MEMORY[0x24BED7D38]();
}

uint64_t llvm::opt::ArgList::getAllArgValues()
{
  return MEMORY[0x24BED7D40]();
}

uint64_t llvm::opt::ArgList::getLastArgValue()
{
  return MEMORY[0x24BED7D48]();
}

uint64_t llvm::opt::ArgList::hasFlag()
{
  return MEMORY[0x24BED7D50]();
}

uint64_t llvm::opt::ArgList::getRange()
{
  return MEMORY[0x24BED7D58]();
}

uint64_t llvm::opt::OptTable::findNearest()
{
  return MEMORY[0x24BED7D60]();
}

uint64_t llvm::opt::OptTable::ParseArgs()
{
  return MEMORY[0x24BED7D68]();
}

uint64_t llvm::opt::OptTable::getOption()
{
  return MEMORY[0x24BED7D70]();
}

uint64_t llvm::opt::OptTable::printHelp(llvm::opt::OptTable *this, llvm::raw_ostream *a2, const char *a3, const char *a4)
{
  return MEMORY[0x24BED7D78](this, a2, a3, a4);
}

uint64_t llvm::sys::fs::basic_file_status::getLastAccessedTime(llvm::sys::fs::basic_file_status *this)
{
  return MEMORY[0x24BED7D80](this);
}

uint64_t llvm::sys::fs::basic_file_status::getLastModificationTime(llvm::sys::fs::basic_file_status *this)
{
  return MEMORY[0x24BED7D88](this);
}

uint64_t llvm::sys::path::const_iterator::operator==()
{
  return MEMORY[0x24BED7D90]();
}

uint64_t llvm::sys::path::const_iterator::operator-()
{
  return MEMORY[0x24BED7D98]();
}

uint64_t llvm::sys::path::reverse_iterator::operator==()
{
  return MEMORY[0x24BED7DA0]();
}

uint64_t llvm::sys::path::reverse_iterator::operator-()
{
  return MEMORY[0x24BED7DA8]();
}

uint64_t llvm::vfs::Status::isDirectory(llvm::vfs::Status *this)
{
  return MEMORY[0x24BED7DB0](this);
}

uint64_t llvm::Type::isIntegerTy(llvm::Type *this)
{
  return MEMORY[0x24BED7DB8](this);
}

uint64_t llvm::Type::getPointerTo(llvm::Type *this)
{
  return MEMORY[0x24BED7DC0](this);
}

uint64_t llvm::Type::getFltSemantics(llvm::Type *this)
{
  return MEMORY[0x24BED7DC8](this);
}

uint64_t llvm::Type::isSizedDerivedType()
{
  return MEMORY[0x24BED7DD8]();
}

uint64_t llvm::Type::getScalarSizeInBits(llvm::Type *this)
{
  return MEMORY[0x24BED7DE0](this);
}

uint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  return MEMORY[0x24BED7DE8](this);
}

uint64_t llvm::Type::print(llvm::Type *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7DF0](this, a2);
}

uint64_t llvm::Type::isIEEE(llvm::Type *this)
{
  return MEMORY[0x24BED7DF8](this);
}

uint64_t llvm::json::Object::getObject()
{
  return MEMORY[0x24BED7E00]();
}

uint64_t llvm::json::Object::getString()
{
  return MEMORY[0x24BED7E08]();
}

uint64_t llvm::yaml::IO::getContext(llvm::yaml::IO *this)
{
  return MEMORY[0x24BED7E10](this);
}

uint64_t llvm::yaml::Input::getCurrentNode(llvm::yaml::Input *this)
{
  return MEMORY[0x24BED7E18](this);
}

uint64_t llvm::APInt::sextOrSelf(llvm::APInt *this)
{
  return MEMORY[0x24BED7E20](this);
}

uint64_t llvm::APInt::zextOrSelf(llvm::APInt *this)
{
  return MEMORY[0x24BED7E28](this);
}

uint64_t llvm::APInt::reverseBits(llvm::APInt *this)
{
  return MEMORY[0x24BED7E30](this);
}

uint64_t llvm::APInt::sextOrTrunc(llvm::APInt *this)
{
  return MEMORY[0x24BED7E38](this);
}

uint64_t llvm::APInt::zextOrTrunc(llvm::APInt *this)
{
  return MEMORY[0x24BED7E40](this);
}

uint64_t llvm::APInt::compareSigned(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7E48](this, a2);
}

uint64_t llvm::APInt::equalSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7E50](this, a2);
}

uint64_t llvm::APInt::extractBitsAsZExtValue(llvm::APInt *this)
{
  return MEMORY[0x24BED7E58](this);
}

uint64_t llvm::APInt::countPopulationSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED7E60](this);
}

uint64_t llvm::APInt::countLeadingOnesSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED7E68](this);
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED7E70](this);
}

uint64_t llvm::APInt::countTrailingOnesSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED7E78](this);
}

uint64_t llvm::APInt::countTrailingZerosSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED7E80](this);
}

uint64_t llvm::APInt::rotl(llvm::APInt *this)
{
  return MEMORY[0x24BED7E88](this);
}

uint64_t llvm::APInt::rotr(llvm::APInt *this)
{
  return MEMORY[0x24BED7E90](this);
}

uint64_t llvm::APInt::sdiv(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7E98](this, a2);
}

uint64_t llvm::APInt::sext(llvm::APInt *this)
{
  return MEMORY[0x24BED7EA0](this);
}

uint64_t llvm::APInt::srem(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7EA8](this, a2);
}

uint64_t llvm::APInt::udiv(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7EB0](this, a2);
}

uint64_t llvm::APInt::udiv(llvm::APInt *this)
{
  return MEMORY[0x24BED7EB8](this);
}

uint64_t llvm::APInt::urem(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7EC0](this, a2);
}

uint64_t llvm::APInt::urem(llvm::APInt *this)
{
  return MEMORY[0x24BED7EC8](this);
}

uint64_t llvm::APInt::zext(llvm::APInt *this)
{
  return MEMORY[0x24BED7ED0](this);
}

uint64_t llvm::APInt::print(llvm::APInt *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7ED8](this, a2);
}

uint64_t llvm::APInt::trunc(llvm::APInt *this)
{
  return MEMORY[0x24BED7EE0](this);
}

uint64_t llvm::APInt::Profile()
{
  return MEMORY[0x24BED7EE8]();
}

uint64_t llvm::APInt::compare(llvm::APInt *this, const llvm::APInt *a2)
{
  return MEMORY[0x24BED7EF0](this, a2);
}

uint64_t llvm::APInt::sadd_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7EF8](this, a2, a3);
}

uint64_t llvm::APInt::sdiv_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F00](this, a2, a3);
}

uint64_t llvm::APInt::smul_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F08](this, a2, a3);
}

uint64_t llvm::APInt::sshl_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F10](this, a2, a3);
}

uint64_t llvm::APInt::ssub_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F18](this, a2, a3);
}

uint64_t llvm::APInt::uadd_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F20](this, a2, a3);
}

uint64_t llvm::APInt::umul_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F28](this, a2, a3);
}

uint64_t llvm::APInt::ushl_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F30](this, a2, a3);
}

uint64_t llvm::APInt::usub_ov(llvm::APInt *this, const llvm::APInt *a2, BOOL *a3)
{
  return MEMORY[0x24BED7F38](this, a2, a3);
}

uint64_t llvm::APInt::byteSwap(llvm::APInt *this)
{
  return MEMORY[0x24BED7F40](this);
}

uint64_t llvm::APInt::toString()
{
  return MEMORY[0x24BED7F48]();
}

uint64_t llvm::APInt::getHiBits(llvm::APInt *this)
{
  return MEMORY[0x24BED7F50](this);
}

uint64_t llvm::APInt::getLoBits(llvm::APInt *this)
{
  return MEMORY[0x24BED7F58](this);
}

uint64_t llvm::APInt::operator*()
{
  return MEMORY[0x24BED7F60]();
}

uint64_t llvm::Regex::match()
{
  return MEMORY[0x24BED7F68]();
}

uint64_t llvm::Regex::isValid()
{
  return MEMORY[0x24BED7F70]();
}

uint64_t llvm::Twine::str(llvm::Twine *this)
{
  return MEMORY[0x24BED7F78](this);
}

uint64_t llvm::Twine::print(llvm::Twine *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7F80](this, a2);
}

uint64_t llvm::Twine::toVector()
{
  return MEMORY[0x24BED7F88]();
}

uint64_t llvm::Value::getContext(llvm::Value *this)
{
  return MEMORY[0x24BED7F90](this);
}

uint64_t llvm::Value::getNumUses(llvm::Value *this)
{
  return MEMORY[0x24BED7F98](this);
}

uint64_t llvm::Value::getMetadata()
{
  return MEMORY[0x24BED7FA0]();
}

uint64_t llvm::Value::hasNUsesOrMore(llvm::Value *this)
{
  return MEMORY[0x24BED7FA8](this);
}

uint64_t llvm::Value::stripPointerCasts(llvm::Value *this)
{
  return MEMORY[0x24BED7FB0](this);
}

uint64_t llvm::Value::getPointerAlignment(llvm::Value *this, const llvm::DataLayout *a2)
{
  return MEMORY[0x24BED7FB8](this, a2);
}

uint64_t llvm::Value::stripInBoundsOffsets()
{
  return MEMORY[0x24BED7FC0]();
}

uint64_t llvm::Value::stripPointerCastsAndAliases(llvm::Value *this)
{
  return MEMORY[0x24BED7FC8](this);
}

uint64_t llvm::Value::getName(llvm::Value *this)
{
  return MEMORY[0x24BED7FE0](this);
}

uint64_t llvm::APSInt::Profile()
{
  return MEMORY[0x24BED7FE8]();
}

uint64_t llvm::DINode::getTag(llvm::DINode *this)
{
  return MEMORY[0x24BED7FF8](this);
}

uint64_t llvm::Module::getFunction()
{
  return MEMORY[0x24BED8000]();
}

uint64_t llvm::Module::getMDKindID()
{
  return MEMORY[0x24BED8008]();
}

uint64_t llvm::Module::getDataLayout(llvm::Module *this)
{
  return MEMORY[0x24BED8010](this);
}

uint64_t llvm::Module::getModuleFlag()
{
  return MEMORY[0x24BED8018]();
}

uint64_t llvm::Module::getNamedAlias()
{
  return MEMORY[0x24BED8020]();
}

uint64_t llvm::Module::getNamedValue()
{
  return MEMORY[0x24BED8028]();
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const llvm::Twine *a2)
{
  return MEMORY[0x24BED8038](this, a2);
}

uint64_t llvm::Module::getGlobalVariable()
{
  return MEMORY[0x24BED8040]();
}

uint64_t llvm::Triple::getArchName(llvm::Triple *this)
{
  return MEMORY[0x24BED8058](this);
}

uint64_t llvm::Triple::isArch16Bit(llvm::Triple *this)
{
  return MEMORY[0x24BED8060](this);
}

uint64_t llvm::Triple::isArch32Bit(llvm::Triple *this)
{
  return MEMORY[0x24BED8068](this);
}

uint64_t llvm::Triple::isArch64Bit(llvm::Triple *this)
{
  return MEMORY[0x24BED8070](this);
}

uint64_t llvm::Triple::getOSVersion(llvm::Triple *this)
{
  return MEMORY[0x24BED8078](this);
}

uint64_t llvm::Triple::getAIRVersion(llvm::Triple *this)
{
  return MEMORY[0x24BED8080](this);
}

uint64_t llvm::Triple::getVendorName(llvm::Triple *this)
{
  return MEMORY[0x24BED8088](this);
}

uint64_t llvm::Triple::getiOSVersion(llvm::Triple *this)
{
  return MEMORY[0x24BED8090](this);
}

uint64_t llvm::Triple::isLittleEndian(llvm::Triple *this)
{
  return MEMORY[0x24BED8098](this);
}

uint64_t llvm::Triple::getMacOSXVersion(llvm::Triple *this, llvm::VersionTuple *a2)
{
  return MEMORY[0x24BED80A0](this, a2);
}

uint64_t llvm::Triple::isCompatibleWith(llvm::Triple *this, const llvm::Triple *a2)
{
  return MEMORY[0x24BED80A8](this, a2);
}

uint64_t llvm::Triple::isMacOSXVersionLT(llvm::Triple *this)
{
  return MEMORY[0x24BED80B0](this);
}

uint64_t llvm::Triple::getEnvironmentName(llvm::Triple *this)
{
  return MEMORY[0x24BED80B8](this);
}

uint64_t llvm::Triple::getEnvironmentVersion(llvm::Triple *this)
{
  return MEMORY[0x24BED80C0](this);
}

uint64_t llvm::Triple::getOSAndEnvironmentName(llvm::Triple *this)
{
  return MEMORY[0x24BED80C8](this);
}

uint64_t llvm::Triple::getEffectiveMacCatalystVariant(llvm::Triple *this)
{
  return MEMORY[0x24BED80D0](this);
}

uint64_t llvm::Triple::getOSName(llvm::Triple *this)
{
  return MEMORY[0x24BED80D8](this);
}

uint64_t llvm::detail::DoubleAPFloat::isDenormal(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED80E0](this);
}

uint64_t llvm::detail::DoubleAPFloat::bitcastToAPInt(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED80E8](this);
}

uint64_t llvm::detail::DoubleAPFloat::bitwiseIsEqual(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  return MEMORY[0x24BED80F0](this, a2);
}

uint64_t llvm::detail::DoubleAPFloat::compare(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  return MEMORY[0x24BED80F8](this, a2);
}

uint64_t llvm::detail::DoubleAPFloat::toString()
{
  return MEMORY[0x24BED8100]();
}

uint64_t llvm::detail::IEEEFloat::isDenormal(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED8108](this);
}

uint64_t llvm::detail::IEEEFloat::bitcastToAPInt(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED8110](this);
}

uint64_t llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  return MEMORY[0x24BED8118](this, a2);
}

uint64_t llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  return MEMORY[0x24BED8120](this, a2);
}

uint64_t llvm::detail::IEEEFloat::toString()
{
  return MEMORY[0x24BED8128]();
}

uint64_t llvm::detail::IEEEFloat::partCount(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED8130](this);
}

uint64_t llvm::object::IRObjectFile::getTargetTriple(llvm::object::IRObjectFile *this)
{
  return MEMORY[0x24BED8138](this);
}

uint64_t llvm::object::MetalLibObjectFile::findDynamicSymbol()
{
  return MEMORY[0x24BED8140]();
}

uint64_t llvm::object::MetalLibObjectFile::dynamic_symbol_end(llvm::object::MetalLibObjectFile *this)
{
  return MEMORY[0x24BED8148](this);
}

uint64_t llvm::object::MetalLibObjectFile::libraryInstallName(llvm::object::MetalLibObjectFile *this)
{
  return MEMORY[0x24BED8150](this);
}

uint64_t llvm::object::MachOUniversalBinary::ObjectForArch::getAsIRObject(llvm::object::MachOUniversalBinary::ObjectForArch *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED8168](this, a2);
}

uint64_t llvm::object::MachOUniversalBinary::getObjectForArch()
{
  return MEMORY[0x24BED8170]();
}

uint64_t llvm::object::MachOUniversalBinary::getArchiveForArch()
{
  return MEMORY[0x24BED8178]();
}

uint64_t llvm::object::MachOUniversalBinary::getIRObjectForArch()
{
  return MEMORY[0x24BED8180]();
}

uint64_t llvm::object::MachOUniversalBinary::getMetalLibForArch()
{
  return MEMORY[0x24BED8188]();
}

uint64_t llvm::object::Binary::getFileName(llvm::object::Binary *this)
{
  return MEMORY[0x24BED8190](this);
}

uint64_t llvm::object::Binary::getData(llvm::object::Binary *this)
{
  return MEMORY[0x24BED8198](this);
}

uint64_t llvm::object::Archive::child_begin()
{
  return MEMORY[0x24BED81A0]();
}

uint64_t llvm::object::Archive::hasSymbolTable(llvm::object::Archive *this)
{
  return MEMORY[0x24BED81A8](this);
}

uint64_t llvm::object::Archive::Child::getMemoryBufferRef(llvm::object::Archive::Child *this)
{
  return MEMORY[0x24BED81B0](this);
}

uint64_t llvm::object::Archive::Child::getName(llvm::object::Archive::Child *this)
{
  return MEMORY[0x24BED81B8](this);
}

uint64_t llvm::object::Archive::Child::getNext(llvm::object::Archive::Child *this)
{
  return MEMORY[0x24BED81C0](this);
}

uint64_t llvm::object::Archive::findSym()
{
  return MEMORY[0x24BED81C8]();
}

uint64_t llvm::object::Archive::child_end(llvm::object::Archive *this)
{
  return MEMORY[0x24BED81D0](this);
}

uint64_t llvm::APFloat::convertToDouble(llvm::APFloat *this)
{
  return MEMORY[0x24BED81D8](this);
}

uint64_t llvm::APFloat::convertToInteger()
{
  return MEMORY[0x24BED81E0]();
}

uint64_t llvm::APFloat::Profile()
{
  return MEMORY[0x24BED81E8]();
}

uint64_t llvm::Argument::getParamAlign(llvm::Argument *this)
{
  return MEMORY[0x24BED81F0](this);
}

uint64_t llvm::CallBase::getIntrinsicID(llvm::CallBase *this)
{
  return MEMORY[0x24BED8210](this);
}

uint64_t llvm::CallBase::getOperandBundlesAsDefs()
{
  return MEMORY[0x24BED8218]();
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction()
{
  return MEMORY[0x24BED8228]();
}

uint64_t llvm::CallBase::getNumSubclassExtraOperandsDynamic(llvm::CallBase *this)
{
  return MEMORY[0x24BED8230](this);
}

uint64_t llvm::Constant::isOneValue(llvm::Constant *this)
{
  return MEMORY[0x24BED8238](this);
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  return MEMORY[0x24BED8240](this);
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  return MEMORY[0x24BED8248](this);
}

uint64_t llvm::Constant::isAllOnesValue(llvm::Constant *this)
{
  return MEMORY[0x24BED8250](this);
}

uint64_t llvm::Constant::getUniqueInteger(llvm::Constant *this)
{
  return MEMORY[0x24BED8258](this);
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Constant *a2)
{
  return MEMORY[0x24BED8260](this, a2);
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this)
{
  return MEMORY[0x24BED8268](this);
}

uint64_t llvm::Constant::removeDeadConstantUsers(llvm::Constant *this)
{
  return MEMORY[0x24BED8270](this);
}

uint64_t llvm::DebugLoc::getInlinedAt(llvm::DebugLoc *this)
{
  return MEMORY[0x24BED8278](this);
}

uint64_t llvm::DebugLoc::get(llvm::DebugLoc *this)
{
  return MEMORY[0x24BED8280](this);
}

uint64_t llvm::Function::getContext(llvm::Function *this)
{
  return MEMORY[0x24BED8288](this);
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  return MEMORY[0x24BED8290](this);
}

uint64_t llvm::Function::getFnAttribute()
{
  return MEMORY[0x24BED8298]();
}

uint64_t llvm::Function::hasFnAttribute()
{
  return MEMORY[0x24BED82A0]();
}

{
  return MEMORY[0x24BED82A8]();
}

uint64_t llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  return MEMORY[0x24BED82B8](this);
}

uint64_t llvm::Function::isConstrainedFPIntrinsic(llvm::Function *this)
{
  return MEMORY[0x24BED82C0](this);
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return MEMORY[0x24BED82D0](this);
}

uint64_t llvm::TypeSize::operator unsigned long long()
{
  return MEMORY[0x24BED82D8]();
}

uint64_t llvm::coverage::CounterMappingContext::dump()
{
  return MEMORY[0x24BED82E0]();
}

uint64_t llvm::Attribute::getKindAsEnum(llvm::Attribute *this)
{
  return MEMORY[0x24BED82E8](this);
}

uint64_t llvm::Attribute::getValueAsBool(llvm::Attribute *this)
{
  return MEMORY[0x24BED82F0](this);
}

uint64_t llvm::Attribute::getValueAsType(llvm::Attribute *this)
{
  return MEMORY[0x24BED82F8](this);
}

uint64_t llvm::InlineAsm::getFunctionType(llvm::InlineAsm *this)
{
  return MEMORY[0x24BED8310](this);
}

uint64_t llvm::SourceMgr::FindBufferContainingLoc()
{
  return MEMORY[0x24BED8318]();
}

uint64_t llvm::StringRef::find_last_of()
{
  return MEMORY[0x24BED8320]();
}

uint64_t llvm::StringRef::getAsInteger(llvm::StringRef *this, uint64_t a2, llvm::APInt *a3)
{
  return MEMORY[0x24BED8328](this, a2, a3);
}

uint64_t llvm::StringRef::edit_distance()
{
  return MEMORY[0x24BED8330]();
}

uint64_t llvm::StringRef::find_first_of()
{
  return MEMORY[0x24BED8338]();
}

uint64_t llvm::StringRef::find_insensitive()
{
  return MEMORY[0x24BED8340]();
}

uint64_t llvm::StringRef::find_last_not_of()
{
  return MEMORY[0x24BED8348]();
}

uint64_t llvm::StringRef::find_last_not_of(llvm::StringRef *this)
{
  return MEMORY[0x24BED8350](this);
}

uint64_t llvm::StringRef::find_first_not_of()
{
  return MEMORY[0x24BED8358]();
}

uint64_t llvm::StringRef::find_first_not_of(llvm::StringRef *this)
{
  return MEMORY[0x24BED8360](this);
}

uint64_t llvm::StringRef::compare_insensitive()
{
  return MEMORY[0x24BED8368]();
}

uint64_t llvm::StringRef::endswith_insensitive()
{
  return MEMORY[0x24BED8370]();
}

uint64_t llvm::StringRef::startswith_insensitive()
{
  return MEMORY[0x24BED8378]();
}

uint64_t llvm::StringRef::find()
{
  return MEMORY[0x24BED8380]();
}

uint64_t llvm::StringRef::lower(llvm::StringRef *this)
{
  return MEMORY[0x24BED8388](this);
}

uint64_t llvm::StringRef::rfind()
{
  return MEMORY[0x24BED8390]();
}

uint64_t llvm::StringRef::split()
{
  return MEMORY[0x24BED8398]();
}

{
  return MEMORY[0x24BED83A0]();
}

uint64_t llvm::StringRef::upper(llvm::StringRef *this)
{
  return MEMORY[0x24BED83A8](this);
}

uint64_t metalfe::GPUCompiler::getTargetTriple()
{
  return MEMORY[0x24BE38F48]();
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x24BEDA988](retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x24BEDA9C0](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return (std::string::reference)MEMORY[0x24BEDAC10](this, __n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

void std::string::__init(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  MEMORY[0x24BEDAC28](this, __s, __sz);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC60](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x24BEDAC78](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDACA0](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF68]();
}

{
  return MEMORY[0x24BEDAF70]();
}

{
  return MEMORY[0x24BEDAF78]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x24BEDB1B8](__format);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x24BEDB3B8]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::from_time_t(time_t __t)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3E8](__t);
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x24BEDB3F8](__t);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB628](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

uint64_t operator delete[]()
{
  return off_24FA2DF80();
}

void operator delete(void *__p)
{
  off_24FA2DF88(__p);
}

uint64_t operator delete()
{
  return off_24FA2DF90();
}

uint64_t operator new[]()
{
  return off_24FA2DF98();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24FA2DFA0(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24FA2DFA8(__sz, a2);
}

uint64_t operator new()
{
  return off_24FA2DFB0();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

char *__cdecl asctime(const tm *a1)
{
  return (char *)MEMORY[0x24BDAD178](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x24BDAE438](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

gid_t getgid(void)
{
  return MEMORY[0x24BDAE610]();
}

uid_t getuid(void)
{
  return MEMORY[0x24BDAE788]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

uint64_t kdebug_trace_string()
{
  return MEMORY[0x24BDAE960]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x24BDAEA30](*(_QWORD *)&__e, __x);
  return result;
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFF90](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0030](__str, __endptr, *(_QWORD *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

