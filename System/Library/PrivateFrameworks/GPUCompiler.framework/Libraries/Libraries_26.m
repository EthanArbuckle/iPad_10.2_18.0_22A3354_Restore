uint64_t sub_22F0A9C44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  uint64_t v25;

  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 15088) + *(_QWORD *)(**(_QWORD **)(v6 + 15088) - 24));
  v8 = sub_22EF5CDF0(v6, *(_QWORD *)(*(_QWORD *)(v6 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a3 + 24);
  v10 = (llvm::raw_ostream *)a1[1];
  v11 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 2)
  {
    *(_BYTE *)(v11 + 2) = 57;
    *(_WORD *)v11 = 24383;
    *((_QWORD *)v10 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v10, "?_9");
  }
  v12 = *(_WORD *)(a2 + 80) & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 == 83)
      goto LABEL_19;
    if (v12 == 71)
    {
      v13 = -56;
      goto LABEL_19;
    }
    if (v12 != 81)
    {
LABEL_14:
      v14 = v12 - 52;
      v15 = v12 - 33 >= 5;
      v16 = -48;
      if (!v15)
        v16 = -64;
      if (v14 >= 6)
        v13 = v16;
      else
        v13 = -72;
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_13;
    if (v12 == 16)
    {
LABEL_6:
      v13 = -48;
      goto LABEL_19;
    }
    if (((1 << v12) & 0x1066) == 0)
    {
      if (v12 == 24)
        goto LABEL_6;
LABEL_13:
      if (v12 == 70)
      {
        v13 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  v17 = v9 * (v7 / v8);
  v18 = *(_QWORD *)(a2 + 72 + v13 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  if (v19)
    v20 = v19 - 8;
  else
    v20 = 0;
  sub_22F09CFFC(a1, v20, 0);
  v21 = (llvm::raw_ostream *)a1[1];
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 16932;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, "$B");
  }
  sub_22F0A8DC0((uint64_t)a1, v17);
  v23 = (llvm::raw_ostream *)a1[1];
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
  {
    llvm::raw_ostream::write(v23);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 65;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v25 || *(_BYTE *)(v25 + 16) != 26)
    v25 = sub_22F10CF48(v25);
  return sub_22F0A962C((uint64_t)a1, (*(_DWORD *)(v25 + 16) >> 19) & 0x1F);
}

void sub_22F0A9E64(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  llvm::raw_ostream *v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v4 = (llvm::raw_ostream *)llvm::APFloatBase::SemanticsToEnum();
  switch((int)v4)
  {
    case 0:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
        goto LABEL_17;
      *((_QWORD *)v4 + 4) = v5 + 1;
      v6 = 86;
      goto LABEL_16;
    case 1:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
        goto LABEL_17;
      *((_QWORD *)v4 + 4) = v5 + 1;
      v6 = 87;
      goto LABEL_16;
    case 2:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
        goto LABEL_17;
      *((_QWORD *)v4 + 4) = v5 + 1;
      v6 = 65;
      goto LABEL_16;
    case 3:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
        goto LABEL_17;
      *((_QWORD *)v4 + 4) = v5 + 1;
      v6 = 66;
      goto LABEL_16;
    case 4:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
        goto LABEL_17;
      *((_QWORD *)v4 + 4) = v5 + 1;
      v6 = 89;
      goto LABEL_16;
    case 5:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
        goto LABEL_17;
      *((_QWORD *)v4 + 4) = v5 + 1;
      v6 = 90;
      goto LABEL_16;
    case 8:
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
      {
LABEL_17:
        v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v5 + 1;
        v6 = 88;
LABEL_16:
        *v5 = v6;
      }
LABEL_18:
      v7 = *(_QWORD *)v3;
      if (llvm::APFloatBase::PPCDoubleDouble(v4) == v7)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v3);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt(v3);
      sub_22F0A9110(a1, (llvm::APInt *)&v8);
      if (v9 >= 0x41)
      {
        if (v8)
          MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
      }
      return;
    default:
      goto LABEL_18;
  }
}

uint64_t sub_22F0AA038(_QWORD *a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21[2];
  uint64_t v22;

  v22 = a2;
  v6 = sub_22F09CA5C(a2);
  v7 = *(_WORD *)(v6 + 8) & 0x7F;
  v8 = v7 > 0x18 || ((1 << v7) & 0x1000006) == 0;
  if (v8 && v7 - 52 > 5)
    return 0;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v9 = *(_QWORD *)(a2 + 128);
      if (v9)
      {
        if (((*(unsigned __int16 *)(v9 + 8) | (*(unsigned __int8 *)(v9 + 10) << 16)) & 0x100000) != 0)
          goto LABEL_11;
      }
    }
  }
  if (sub_22EFB948C(a2) >= 3)
  {
    v10 = a1[1];
    v21[0] = a2;
    v11 = sub_22EF7402C(v10 + 1800, v21);
    if (*(_QWORD *)(v10 + 1832) != v11)
    {
      v12 = *(_DWORD *)(v11 + 8);
      goto LABEL_12;
    }
LABEL_11:
    v12 = 1;
LABEL_12:
    *a3 = v12;
    return 1;
  }
  if (!a2
    || (*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 < 0xFFFFFFFB
    || *(_QWORD *)(a2 + 40)
    || (v14 = *(_QWORD *)(a2 + 120), v14 >= 8) && (v14 & 4) == 0
    || (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[1] + 15064) + 88))(*(_QWORD *)(a1[1] + 15064), a2)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[1] + 15064) + 72))(*(_QWORD *)(a1[1] + 15064), a2)) != 0)
  {
    v15 = sub_22F3E1914(a1 + 16, &v22);
    v16 = *((_DWORD *)v15 + 2);
    if (!v16)
    {
      v17 = v15;
      v18 = *(_QWORD *)(v22 + 40);
      if ((v18 & 7) != 0)
        v19 = 0;
      else
        v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      v21[0] = v6;
      v21[1] = v19;
      v20 = sub_22F3E1974(a1 + 13, v21);
      v16 = *((_DWORD *)v20 + 4) + 1;
      *((_DWORD *)v20 + 4) = v16;
      *((_DWORD *)v17 + 2) = v16;
    }
    v12 = v16 + 1;
    goto LABEL_12;
  }
  return result;
}

void sub_22F0AA1E8(uint64_t a1, const char *a2, uint64_t a3, int a4, int a5)
{
  _BYTE *v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *__p[2];
  uint64_t v23;

  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v13 = MEMORY[0x24BED83D8] + 16;
  v21 = __p;
  llvm::raw_ostream::SetBufferAndMode();
  if (a3)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v13, a2);
  if (a4)
  {
    v10 = v17;
    if ((unint64_t)v17 >= v16)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v13);
    }
    else
    {
      ++v17;
      *v10 = 95;
    }
    llvm::raw_ostream::operator<<();
  }
  if (a5)
  {
    v11 = v17;
    if ((unint64_t)v17 >= v16)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v13);
    }
    else
    {
      ++v17;
      *v11 = 95;
    }
    llvm::raw_ostream::operator<<();
  }
  if (*((char *)v21 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a1, *v21, (unint64_t)v21[1]);
  }
  else
  {
    v12 = *(_OWORD *)v21;
    *(_QWORD *)(a1 + 16) = v21[2];
    *(_OWORD *)a1 = v12;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v13);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
}

void sub_22F0AA378(unsigned int a1, unsigned int *a2, uint64_t a3, char **this)
{
  llvm::raw_ostream *v4;
  char *v8;
  char *v9;
  char v10;
  char v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;

  v4 = (llvm::raw_ostream *)this;
  if (*(_OWORD *)(a2 + 2) != 0)
  {
    v8 = this[4];
    if (v8 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this);
    }
    else
    {
      this[4] = v8 + 1;
      *v8 = 36;
    }
    if (a1 >= 3)
      v11 = 0;
    else
      v11 = 52 - 2 * a1;
    v13 = *((_QWORD *)v4 + 3);
    v12 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (a2[3])
    {
      if ((unint64_t)v12 >= v13)
      {
        v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v12 + 1;
        *v12 = 82;
      }
      v14 = (_BYTE *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)v4 + 3))
      {
        llvm::raw_ostream::write(v4);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v14 + 1;
        *v14 = v11;
      }
      sub_22F0A8DC0(a3, a2[3]);
      sub_22F0A8DC0(a3, a2[4]);
      sub_22F0A8DC0(a3, a2[2]);
      v15 = *a2;
      goto LABEL_47;
    }
    if ((unint64_t)v12 >= v13)
    {
      llvm::raw_ostream::write(v4);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v12 + 1;
      *v12 = v11;
    }
    sub_22F0A8DC0(a3, a2[2]);
LABEL_46:
    v15 = -*a2;
LABEL_47:
    sub_22F0A8DC0(a3, v15);
    return;
  }
  if (*(_QWORD *)a2)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        v9 = this[4];
        if (v9 < this[3])
        {
          this[4] = v9 + 1;
          v10 = 79;
          goto LABEL_35;
        }
        v18 = (llvm::raw_ostream *)this;
      }
      else
      {
        if (a1 != 2)
          goto LABEL_46;
        v9 = this[4];
        if (v9 < this[3])
        {
          this[4] = v9 + 1;
          v10 = 71;
LABEL_35:
          *v9 = v10;
          goto LABEL_46;
        }
        v18 = (llvm::raw_ostream *)this;
      }
    }
    else
    {
      v9 = this[4];
      if (v9 < this[3])
      {
        this[4] = v9 + 1;
        v10 = 87;
        goto LABEL_35;
      }
      v18 = (llvm::raw_ostream *)this;
    }
    llvm::raw_ostream::write(v18);
    goto LABEL_46;
  }
  if (!a1)
  {
    v16 = this[4];
    if (v16 < this[3])
    {
      this[4] = v16 + 1;
      v17 = 81;
      goto LABEL_40;
    }
    v19 = (llvm::raw_ostream *)this;
LABEL_51:
    llvm::raw_ostream::write(v19);
    return;
  }
  if (a1 == 1)
  {
    v16 = this[4];
    if (v16 < this[3])
    {
      this[4] = v16 + 1;
      v17 = 73;
      goto LABEL_40;
    }
    v19 = (llvm::raw_ostream *)this;
    goto LABEL_51;
  }
  if (a1 != 2)
    return;
  v16 = this[4];
  if (v16 >= this[3])
  {
    v19 = (llvm::raw_ostream *)this;
    goto LABEL_51;
  }
  this[4] = v16 + 1;
  v17 = 65;
LABEL_40:
  *v16 = v17;
}

uint64_t sub_22F0AA6AC(llvm::APInt *a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  llvm::APInt *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  int v22;
  char *v23[2];
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD v35[4];
  _QWORD v36[6];
  _QWORD v37[3];
  _QWORD *v38[2];
  BOOL v39;
  _QWORD v40[4];
  _QWORD v41[6];
  _QWORD *v42;
  __int128 v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v40[0] = &off_24FAC6870;
  v8 = (_QWORD *)sub_22F242C48((uint64_t)v40, (uint64_t)&v42);
  v40[0] = &off_24FAC6870;
  v41[5] = a4;
  v42 = v44;
  v43 = xmmword_22F44E300;
  v19 = a1;
  v20 = (llvm::raw_ostream *)v40;
  v21 = 0;
  v22 = -1;
  v23[0] = (char *)&v24;
  v23[1] = (char *)0xA00000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  v35[2] = v36;
  v35[3] = 0x400000000;
  v36[4] = v37;
  v36[5] = 0;
  v37[0] = 0;
  v37[1] = 1;
  v38[0] = 0;
  v38[1] = 0;
  v37[2] = v38;
  v39 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 1) + 15088) - 24)) == 64;
  if (v40[3] - v41[0] > 3uLL)
  {
    v9 = v41;
    *(_DWORD *)v41[0] = 1600077631;
    v10 = (_BYTE *)(v41[0] + 4);
    v41[0] += 4;
  }
  else
  {
    v8 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v8, "??__");
    v9 = v8 + 4;
    v10 = (_BYTE *)v8[4];
  }
  if ((unint64_t)v10 >= v8[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v8);
  }
  else
  {
    *v9 = v10 + 1;
    *v10 = a3;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
    goto LABEL_12;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 4) != 0)
    v12 = *(_QWORD *)v12;
  if ((*(_WORD *)(v12 + 8) & 0x7Eu) - 34 > 3)
  {
LABEL_12:
    sub_22F09CFFC((uint64_t)&v19, a2, 0);
  }
  else
  {
    v13 = (_BYTE *)*((_QWORD *)v20 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v20 + 3))
    {
      llvm::raw_ostream::write(v20);
    }
    else
    {
      *((_QWORD *)v20 + 4) = v13 + 1;
      *v13 = 63;
    }
    sub_22F09CFFC((uint64_t)&v19, a2, 0);
    sub_22F09D500(&v19, a2);
    v14 = v20;
    v15 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v15 > 1uLL)
    {
      *v15 = 16448;
      *((_QWORD *)v14 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, "@@");
    }
  }
  v16 = v20;
  v17 = *((_QWORD *)v20 + 4);
  if ((unint64_t)(*((_QWORD *)v20 + 3) - v17) > 4)
  {
    *(_BYTE *)(v17 + 4) = 90;
    *(_DWORD *)v17 = 1482178905;
    *((_QWORD *)v16 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v20, "YAXXZ");
  }
  sub_22F258024(v38[0]);
  sub_22E3B4EF4((uint64_t)v35);
  llvm::deallocate_buffer(v31, (void *)(24 * v33));
  llvm::deallocate_buffer(v28, (void *)(16 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  sub_22E3B9848(v23);
  return sub_22F09CD88((uint64_t)v40);
}

uint64_t sub_22F0AA9D0(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  uint64_t v5;
  uint64_t v6;

  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
    return NodeOrInsertPos;
  v5 = sub_22E3CD3D4(a1 + 2032, 24, 3);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_QWORD *)(v5 + 16) = v6;
  llvm::FoldingSetBase::InsertNode();
  return v5;
}

uint64_t sub_22F0AAADC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];

  v4 = 4;
  if (a3)
    v4 = 6;
  v6[0] = 0;
  v6[1] = a2 & 0xFFFFFFFFFFFFFFF9 | v4;
  v6[2] = a4;
  return sub_22F0AA9D0(a1, (uint64_t)v6);
}

_QWORD *sub_22F0AAB1C(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 920);
  if (!result)
  {
    result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 24, 3);
    result[1] = 0;
    result[2] = 0;
    *result = 0;
    *(_QWORD *)(a1 + 920) = result;
  }
  return result;
}

uint64_t sub_22F0AAB60(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 5;
  v2 = (*(_DWORD *)(a1 + 8) >> 1) & 3;
  if (v2 == 2)
    return 3;
  if (v2 == 1)
  {
    v4 = *(_DWORD *)(v1 + 28) & 0x7F;
    v5 = v4 - 35;
    if (v4 == 16)
      v6 = 1;
    else
      v6 = 2;
    if (v5 >= 3)
      return v6;
    else
      return 6;
  }
  else if (v2)
  {
    return 4;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F0AABC8(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 6) != 2)
    return 0;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 28) & 0x7F) == 0x10)
    return *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t sub_22F0AABF8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (v1 >> 1) & 3;
  if (v2 - 2 >= 2)
  {
    if (!v2)
      return 0;
    result = *(_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if ((v1 & 4) != 0)
    v3 = *(_QWORD *)(a1 + 16);
  else
    v3 = 0;
  result = sub_22F10C2A4(v3);
  if (result)
  {
LABEL_5:
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
      return 0;
  }
  return result;
}

uint64_t sub_22F0AAC5C(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    while (1)
    {
      v4 = *(_QWORD *)(v1 + 8);
      v5 = (v4 >> 1) & 3;
      if (v5 - 2 < 2)
      {
        v6 = *(_BYTE *)(v2 + 17) & 7 | (8 * ((*(unsigned __int8 *)(v2 + 17) >> 4) & 1));
        return (v6 | v3);
      }
      if (v5 == 1)
        break;
      v1 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (!v1)
      {
        LOBYTE(v6) = 6;
        return (v6 | v3);
      }
      LOBYTE(v6) = 0;
      v2 = *(_QWORD *)(v1 + 16);
      v3 = 6;
      if (!v2)
        return (v6 | v3);
    }
    if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 35 >= 3)
      goto LABEL_19;
    v13 = v3;
    v8 = sub_22E46A3A0(v2);
    if (v8 == v9)
    {
LABEL_17:
      LOBYTE(v6) = 0;
    }
    else
    {
      v10 = v8;
      v11 = v9;
      while (1)
      {
        v12 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
          v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
        if ((*(_BYTE *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          break;
        v10 += 24;
        if (v10 == v11)
          goto LABEL_17;
      }
      LOBYTE(v6) = 4;
    }
    v3 = v13;
  }
  else
  {
    v3 = 0;
LABEL_19:
    LOBYTE(v6) = 0;
  }
  return (v6 | v3);
}

uint64_t sub_22F0AAD70(unint64_t a1)
{
  return (sub_22F0AAC5C(a1) >> 2) & 1;
}

void *sub_22F0AAD88(uint64_t a1, llvm::raw_ostream *a2, __int128 *a3, int a4)
{
  void *result;
  unint64_t v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  __int128 *v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  const void *v25;
  size_t v26;
  unsigned int v27;
  void *v28;
  _WORD *v29;
  int v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  _DWORD *v36;
  const char *v37;
  size_t v38;
  unsigned int v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44[4];
  __int16 v45;
  unint64_t v46;
  __int128 v47;

  result = (void *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (result)
    result = (void *)sub_22F0AAD88(result, a2, a3, 0);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_29;
  v10 = (*(_DWORD *)(a1 + 8) >> 1) & 3;
  if (v10 == 2)
    goto LABEL_5;
  if (v10 != 1)
  {
    if (v10)
    {
      v42 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v42) > 8)
      {
        *(_BYTE *)(v42 + 8) = 32;
        *(_QWORD *)v42 = *(_QWORD *)"template ";
        *((_QWORD *)a2 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(a2, "template ");
      }
LABEL_5:
      v11 = (_DWORD *)sub_22F0AABF8(a1);
      if (v11 && a4 && (v12 = v11, (v11[7] & 0x7E) == 0x24))
      {
        (*(void (**)(_DWORD *, llvm::raw_ostream *))(*(_QWORD *)v11 + 88))(v11, a2);
        v13 = (uint64_t *)*((_QWORD *)v12 + 21);
        v14 = *v13;
        v15 = *((unsigned int *)v13 + 2);
        v16 = *((_QWORD *)v12 + 19);
        v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
        if ((v16 & 4) != 0 && v17)
        {
          do
          {
            v18 = *(_QWORD *)(*v17 + 152);
            v17 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
          }
          while ((v18 & 4) != 0 && v17);
        }
        v19 = v17[7];
        v20 = a2;
        v21 = a3;
      }
      else
      {
        if ((*(_BYTE *)(a1 + 8) & 4) != 0)
          v22 = *(_QWORD *)(a1 + 16);
        else
          v22 = 0;
        v47 = *a3;
        *(_QWORD *)&v47 = v47 | 0x1000;
        v23 = *(unsigned __int8 *)(v22 + 16);
        if (v22 && v23 == 46)
        {
          v44[0] = *(_QWORD *)(v22 + 32);
          sub_22F402048(v44, a2, (uint64_t)&v47, 0);
          v14 = v22 + 40;
        }
        else
        {
          if (!v22 || v23 != 20)
          {
            v46 = v22 & 0xFFFFFFFFFFFFFFF0;
            v45 = 257;
            result = (void *)sub_22F119558(&v46, a2, &v47, v44, 0);
            goto LABEL_29;
          }
          v24 = *(unsigned int **)(*(_QWORD *)(v22 + 40) + 16);
          v27 = *v24;
          v25 = v24 + 4;
          v26 = v27;
          v28 = (void *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v27 <= *((_QWORD *)a2 + 3) - (_QWORD)v28)
          {
            if (v26)
            {
              memcpy(v28, v25, v26);
              *((_QWORD *)a2 + 4) += v26;
            }
          }
          else
          {
            llvm::raw_ostream::write(a2, (const char *)v25);
          }
          v14 = v22 + 48;
        }
        v15 = *(unsigned int *)(v22 + 20);
        v21 = &v47;
        v20 = a2;
        v19 = 0;
      }
      result = (void *)sub_22F117B8C(v20, v14, v15, v21, v19, 0, 0);
LABEL_29:
      v29 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v29 <= 1uLL)
        return (void *)llvm::raw_ostream::write(a2, "::");
      *v29 = 14906;
      *((_QWORD *)a2 + 4) += 2;
      return result;
    }
    goto LABEL_48;
  }
  v30 = *(_DWORD *)(v9 + 28) & 0x7F;
  if ((v30 - 35) < 3)
  {
    v43 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v43 <= 6uLL)
    {
      v37 = "__super";
      v40 = a2;
      goto LABEL_50;
    }
    *(_DWORD *)((char *)v43 + 3) = 1919250549;
    *v43 = 1970495327;
    v41 = *((_QWORD *)a2 + 4) + 7;
LABEL_53:
    *((_QWORD *)a2 + 4) = v41;
    goto LABEL_29;
  }
  if (v30 != 16)
  {
    if (v30 != 17)
      v9 = 0;
    v33 = *(_QWORD *)(v9 + 40);
    v34 = v33 & 7;
    v9 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (v34)
      v35 = 1;
    else
      v35 = v9 == 0;
    if (v35)
      goto LABEL_29;
LABEL_48:
    v36 = *(_DWORD **)(v9 + 16);
    v39 = *v36;
    v37 = (const char *)(v36 + 4);
    v38 = v39;
    result = (void *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v39 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    {
      v40 = a2;
LABEL_50:
      result = (void *)llvm::raw_ostream::write(v40, v37);
      goto LABEL_29;
    }
    if (!v38)
      goto LABEL_29;
    result = memcpy(result, v37, v38);
    v41 = *((_QWORD *)a2 + 4) + v38;
    goto LABEL_53;
  }
  v31 = *(_QWORD *)(v9 + 40);
  if (v31 >= 8 && (v31 & 7) == 0)
  {
    v9 = v31 & 0xFFFFFFFFFFFFFFF8;
    if (!v9)
      goto LABEL_29;
    goto LABEL_48;
  }
  return result;
}

unint64_t sub_22F0AB0EC(unint64_t *a1)
{
  unint64_t v1;
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;

  v1 = *a1;
  if (!*a1)
    return 0;
  v3 = (unsigned int *)a1[1];
  v4 = *(_QWORD *)(v1 + 8);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    do
    {
      v6 = v5;
      v4 = *(_QWORD *)(v5 + 8);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v4 & 0xFFFFFFFFFFFFFFF8) != 0);
  }
  else
  {
    v6 = *a1;
  }
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8 || (v4 & 4) == 0)
  {
    v15 = *v3;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)v3;
  v10 = *(_QWORD *)(v6 + 16);
  for (i = *(_QWORD *)v3; ; i = v14)
  {
    while (1)
    {
      if ((v10 & 0xF) != 0)
        goto LABEL_20;
      v12 = *(unsigned __int8 *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v12 <= 0x39)
        break;
LABEL_15:
      if (sub_22F115668(v10, i))
      {
        v8 = v10;
        v9 = i;
      }
      v10 = sub_22F115B7C(v10);
      i = v13;
      if (!v10)
        goto LABEL_22;
    }
    if (v12 == 24)
      goto LABEL_21;
    if (v12 == 26)
      break;
    if (((1 << v12) & 0x20000000200003CLL) == 0)
      goto LABEL_15;
LABEL_20:
    v10 = sub_22F115B7C(v10);
  }
  if ((*(_BYTE *)(v10 + 23) & 0x10) == 0)
    goto LABEL_20;
LABEL_21:
  v8 = v10;
  v9 = i;
LABEL_22:
  v15 = sub_22F115668(v8, v9);
  v1 = *a1;
LABEL_23:
  v16 = v15;
  if (!v1)
    return v1 | v16;
  v17 = *(_QWORD *)(v1 + 8);
  v18 = 0;
  v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    do
    {
      v30 = v19 + 8;
      v28 = *(_QWORD *)(v19 + 8);
      v29 = *(_QWORD *)(v30 + 8);
      if ((v28 & 4) != 0)
        v31 = 12;
      else
        v31 = 8;
      if (v29)
        v32 = v31;
      else
        v32 = 4;
      v18 += v32;
      v19 = v28 & 0xFFFFFFFFFFFFFFF8;
    }
    while (v19);
  }
  v20 = *(_QWORD *)(v1 + 16);
  if (!v20)
  {
    v21 = a1[1];
    goto LABEL_41;
  }
  v21 = a1[1];
  if ((v17 & 4) == 0)
  {
    v18 += 4;
    goto LABEL_41;
  }
  v22 = *(_QWORD *)(v21 + v18);
  v23 = v20;
  v24 = v22;
  while (2)
  {
    while (2)
    {
      if ((v23 & 0xF) != 0)
        goto LABEL_38;
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v25 > 0x39)
      {
LABEL_33:
        if (sub_22F115668(v23, v24))
        {
          v20 = v23;
          v22 = v24;
        }
        v23 = sub_22F115B7C(v23);
        v24 = v26;
        if (!v23)
          goto LABEL_40;
        continue;
      }
      break;
    }
    if (v25 == 24)
      break;
    if (v25 != 26)
    {
      if (((1 << v25) & 0x20000000200003CLL) != 0)
        goto LABEL_38;
      goto LABEL_33;
    }
    if ((*(_BYTE *)(v23 + 23) & 0x10) == 0)
    {
LABEL_38:
      v23 = sub_22F115B7C(v23);
      v24 = v27;
      continue;
    }
    break;
  }
  v20 = v23;
  v22 = v24;
LABEL_40:
  sub_22F115668(v20, v22);
  v21 = a1[1];
  v18 += 8;
LABEL_41:
  v1 = (unint64_t)*(unsigned int *)(v21 + v18) << 32;
  return v1 | v16;
}

unint64_t sub_22F0AB364(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v1 = *a1;
  if (!*a1)
  {
    v12 = 0;
    v10 = 0;
    return v10 | (unint64_t)(v12 << 32);
  }
  v3 = *(_QWORD *)(v1 + 8);
  v4 = 0;
  v5 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    do
    {
      v4 += *(_DWORD *)&asc_22F4A6AE0[4 * sub_22F0AAB60(v5)];
      v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5);
  }
  v6 = *(_QWORD *)(v1 + 16);
  if (!v6)
  {
    v12 = *(unsigned int *)(a1[1] + v4);
    v10 = *(_DWORD *)(a1[1] + v4);
    return v10 | (unint64_t)(v12 << 32);
  }
  v7 = a1[1];
  if ((v3 & 4) == 0)
  {
    v10 = *(_DWORD *)(v7 + v4);
    v11 = v4 + 4;
    goto LABEL_15;
  }
  for (i = *(_QWORD *)(v1 + 16); ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_18;
      v9 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v9 <= 0x39)
        break;
LABEL_11:
      if (sub_22F115668(i))
        v6 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v9 == 24)
      goto LABEL_19;
    if (v9 == 26)
      break;
    if (((1 << v9) & 0x20000000200003CLL) == 0)
      goto LABEL_11;
LABEL_18:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_18;
LABEL_19:
  v6 = i;
LABEL_14:
  v10 = sub_22F115668(v6);
  v7 = a1[1];
  v11 = v4 + 8;
LABEL_15:
  v12 = *(unsigned int *)(v7 + v11);
  return v10 | (unint64_t)(v12 << 32);
}

uint64_t sub_22F0AB4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((v2 & 6) != 4 && (v2 & 6) != 6)
    return 0;
  v4 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v5 = 0;
    do
    {
      v8 = v4 + 8;
      v6 = *(_QWORD *)(v4 + 8);
      v7 = *(_QWORD *)(v8 + 8);
      if ((v6 & 4) != 0)
        v9 = 12;
      else
        v9 = 8;
      if (v7)
        v10 = v9;
      else
        v10 = 4;
      v5 += v10;
      v4 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while (v4);
  }
  return v1 & (v2 << 61 >> 63);
}

_QWORD *sub_22F0AB560(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  void **v3;
  _DWORD *v4;
  _BYTE *v5;
  _QWORD *v7;

  v2 = a1;
  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  v3 = (void **)(a1 + 1);
  a1[2] = 0;
  v4 = a1 + 2;
  v5 = *(_BYTE **)(a2 + 8);
  if (v5)
  {
    if (*(_DWORD *)(a2 + 20))
    {
      v7 = v2;
      sub_22F0AB5D4(v5, &v5[*(unsigned int *)(a2 + 16)], v3, v4, (_DWORD *)v2 + 5);
      return v7;
    }
    else
    {
      *v3 = v5;
      *v4 = *(_DWORD *)(a2 + 16);
    }
  }
  return v2;
}

_BYTE *sub_22F0AB5D4(_BYTE *__src, _BYTE *a2, void **a3, _DWORD *a4, _DWORD *a5)
{
  const void *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  char *v15;
  uint64_t v16;

  if (__src != a2)
  {
    v8 = __src;
    v9 = *a4;
    v10 = a2 - __src;
    v11 = *a5;
    if (a2 - __src + v9 <= v11)
    {
      v15 = (char *)*a3;
    }
    else
    {
      v12 = 2 * v11;
      if (!(_DWORD)v11)
        v12 = 16;
      v13 = v9 + v10;
      if (v12 <= v13)
        v14 = v13;
      else
        v14 = v12;
      if ((_DWORD)v11)
      {
        v15 = (char *)malloc_type_realloc(*a3, v14, 0x1DB68EDCuLL);
        if (!v15 && ((_DWORD)v14 || (v15 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        {
LABEL_22:
          v16 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          return (_BYTE *)sub_22F0AB718(v16);
        }
      }
      else
      {
        v15 = (char *)malloc_type_malloc(v14, 0x4065EBACuLL);
        if (!v15)
        {
          if ((_DWORD)v14)
            goto LABEL_22;
          v15 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v15)
            goto LABEL_22;
        }
        if (*a3)
          memcpy(v15, *a3, *a4);
      }
      *a3 = v15;
      *a5 = v14;
      v9 = *a4;
    }
    __src = memcpy(&v15[v9], v8, v10);
    *a4 += v10;
  }
  return __src;
}

uint64_t sub_22F0AB71C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;
  _DWORD *v5;
  _BYTE *v6;
  const void *v8;
  size_t v9;
  void **v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (void **)(a1 + 8);
  v3 = *(void **)(a1 + 8);
  if (v3
    && (v8 = *(const void **)(a2 + 8)) != 0
    && (v9 = *(unsigned int *)(a2 + 16), *(_DWORD *)(a1 + 20) >= v9))
  {
    *(_DWORD *)(a1 + 16) = v9;
    memcpy(v3, v8, v9);
  }
  else
  {
    v5 = (_DWORD *)(a1 + 20);
    if (*(_DWORD *)(a1 + 20))
    {
      v11 = a2;
      v10 = v4;
      free(v3);
      v4 = v10;
      v5 = (_DWORD *)(a1 + 20);
      a2 = v11;
      *(_DWORD *)(a1 + 20) = 0;
    }
    v6 = *(_BYTE **)(a2 + 8);
    if (v6)
    {
      if (*(_DWORD *)(a2 + 20))
      {
        *(_DWORD *)(a1 + 16) = 0;
        sub_22F0AB5D4(v6, &v6[*(unsigned int *)(a2 + 16)], v4, (_DWORD *)(a1 + 16), v5);
      }
      else
      {
        *(_QWORD *)(a1 + 8) = v6;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
  return a1;
}

_BYTE *sub_22F0AB7EC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _DWORD *v14;
  uint64_t __src;
  _QWORD v17[2];

  v10 = a1 + 2;
  v9 = *a1;
  v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v12 = 6;
  if (!a3)
    v12 = 4;
  __src = 0;
  v17[0] = v9 & 0xFFFFFFFFFFFFFFF9 | v12;
  v17[1] = v11;
  v13 = (void **)(a1 + 1);
  *a1 = sub_22F0AA9D0(a2, (uint64_t)&__src);
  v14 = (_DWORD *)a1 + 5;
  __src = a5;
  sub_22F0AB5D4(&__src, v17, v13, v10, v14);
  LODWORD(__src) = a6;
  return sub_22F0AB5D4(&__src, (_BYTE *)&__src + 4, v13, v10, v14);
}

_BYTE *sub_22F0AB8AC(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t *v7;
  _DWORD *v8;
  unint64_t v9;
  void **v10;
  _QWORD __src[3];

  v7 = a1;
  v8 = a1 + 2;
  v9 = *a1 & 0xFFFFFFFFFFFFFFF9 | 2;
  __src[0] = 0;
  __src[1] = v9;
  __src[2] = a3;
  v10 = (void **)(a1 + 1);
  *a1 = sub_22F0AA9D0(a2, (uint64_t)__src);
  v7 = (uint64_t *)((char *)v7 + 20);
  LODWORD(__src[0]) = a4;
  sub_22F0AB5D4(__src, (_BYTE *)__src + 4, v10, v8, v7);
  LODWORD(__src[0]) = a5;
  return sub_22F0AB5D4(__src, (_BYTE *)__src + 4, v10, v8, v7);
}

_BYTE *sub_22F0AB958(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  int __src;
  uint64_t v9;

  v5 = *(_QWORD **)(a2 + 920);
  if (!v5)
  {
    v5 = (_QWORD *)sub_22E3CD3D4(a2 + 2032, 24, 3);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    *(_QWORD *)(a2 + 920) = v5;
  }
  *(_QWORD *)a1 = v5;
  __src = a3;
  return sub_22F0AB5D4(&__src, &v9, (void **)(a1 + 8), (_DWORD *)(a1 + 16), (_DWORD *)(a1 + 20));
}

void sub_22F0AB9D8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  _DWORD *v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  void **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void **v17;
  unsigned int v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 16) = 0;
  v4 = (_DWORD *)(a1 + 16);
  v20 = v22;
  v21 = 0x400000000;
  if (a3)
  {
    v5 = a4;
    v6 = a3;
    v9 = 0;
    v10 = HIDWORD(a4);
    do
    {
      if (v9 >= HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v21;
      }
      *((_QWORD *)v20 + v9) = v6;
      v9 = v21 + 1;
      LODWORD(v21) = v21 + 1;
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v6);
    if (v9)
    {
      v11 = (void **)(a1 + 8);
      v12 = (_DWORD *)(a1 + 20);
      do
      {
        v13 = *((_QWORD *)v20 + v9 - 1);
        LODWORD(v21) = v9 - 1;
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(_QWORD *)(v13 + 8);
          v16 = (v15 >> 1) & 3;
          if (v16 - 2 < 2)
          {
            v19 = sub_22EF579A8(a2, v14 & (v15 << 61 >> 63) & 0xFFFFFFFFFFFFFFF0, v5) + 1;
            v17 = &v20;
LABEL_11:
            sub_22F0AB5D4(&v19, v17, v11, v4, v12);
            goto LABEL_12;
          }
          if (v16 != 1 || (*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
          {
            v17 = (void **)((char *)&v19 + 4);
            LODWORD(v19) = v5;
            goto LABEL_11;
          }
        }
LABEL_12:
        if ((_DWORD)v21)
          v18 = v5;
        else
          v18 = v10;
        LODWORD(v19) = v18;
        sub_22F0AB5D4(&v19, (_BYTE *)&v19 + 4, v11, v4, v12);
        v9 = v21;
      }
      while ((_DWORD)v21);
    }
  }
  if (v20 != v22)
    free(v20);
}

void sub_22F0ABBC8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  if (*(_DWORD *)(a1 + 20))
    free(*(void **)(a1 + 8));
  if (a2)
  {
    v6 = 0;
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    do
    {
      v7 = *(_QWORD *)(a2 + 8);
      if ((v7 & 4) != 0)
        v8 = 12;
      else
        v8 = 8;
      if (*(_QWORD *)(a2 + 16))
        v9 = v8;
      else
        v9 = 4;
      v6 += v9;
      a2 = v7 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v7 & 0xFFFFFFFFFFFFFFF8) != 0);
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t sub_22F0ABC50(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  void *v4;

  result = *a1;
  if (result)
  {
    if (*((_DWORD *)a1 + 5))
    {
      v4 = (void *)sub_22E3CD3D4(a2 + 2032, *((unsigned int *)a1 + 4), 3);
      memcpy(v4, (const void *)a1[1], *((unsigned int *)a1 + 4));
      return *a1;
    }
  }
  return result;
}

uint64_t sub_22F0ABCB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (a3)
  {
    v3 = a3;
    do
    {
      if (sub_22EFCBE78(v3, a2))
        break;
      v6 = *(_WORD *)(v3 + 8) & 0x7F;
      if ((v6 > 0x21 || ((1 << v6) & 0x1001026) == 0 && (v6 != 33 || (*(_BYTE *)(v3 + 12) & 0x80) != 0))
        && (v6 - 52) >= 6)
      {
        v7 = v23;
        if (v23 >= (unint64_t)HIDWORD(v23))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = v23;
        }
        *((_QWORD *)v22 + v7) = v3;
        LODWORD(v23) = v23 + 1;
      }
      v3 = sub_22EFCB77C(v3);
    }
    while (v3);
    v8 = v23;
    if ((_DWORD)v23)
    {
      v9 = 0;
      while (1)
      {
        v10 = *((_QWORD *)v22 + v8 - 1);
        LODWORD(v23) = v8 - 1;
        v11 = *(_WORD *)(v10 + 8) & 0x7F;
        if (v10)
          v12 = v11 == 16;
        else
          v12 = 0;
        if (v12)
        {
          if (*(_QWORD *)(v10 - 8) < 8uLL || (*(_QWORD *)(v10 - 8) & 7) != 0)
            goto LABEL_37;
          v18 = v10 - 48;
          v19 = v9 & 0xFFFFFFFFFFFFFFF9 | 2;
        }
        else
        {
          v13 = v11 - 38;
          if (v10)
            v14 = v13 >= 0xFFFFFFFB;
          else
            v14 = 0;
          if (!v14)
            goto LABEL_37;
          v15 = *(_QWORD *)(v10 - 16);
          if (v15)
            v16 = v15 & 0xFFFFFFFFFFFFFFF0;
          else
            v16 = sub_22EF6462C(a1, v10 - 64);
          v18 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
          v19 = v9 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        v21[0] = 0;
        v21[1] = v19;
        v21[2] = v18;
        v9 = sub_22F0AA9D0(a1, (uint64_t)v21);
LABEL_37:
        v8 = v23;
        if (!(_DWORD)v23)
          goto LABEL_40;
      }
    }
  }
  v9 = 0;
LABEL_40:
  if (v22 != v24)
    free(v22);
  return v9;
}

uint64_t sub_22F0ABEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a5 + 8);
  if (v7 >= *(_DWORD *)(a5 + 12))
  {
    v16 = a2;
    v18 = *(_QWORD *)(a2 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v16;
    v6 = v18;
    v7 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v7) = v6;
  v8 = *(_DWORD *)(a5 + 12);
  v9 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v9;
  if (v9 >= v8)
  {
    v17 = a2;
    v20 = HIDWORD(v6);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v17;
    HIDWORD(v6) = v20;
    v9 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = HIDWORD(v6);
  v10 = *(_DWORD *)(a5 + 12);
  v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  if (v11 >= v10)
  {
    v19 = *(_QWORD *)(a2 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v19;
    v11 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v11) = v12;
  v13 = *(_DWORD *)(a5 + 12);
  v14 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v14;
  if (v14 >= v13)
  {
    v21 = HIDWORD(v12);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v12) = v21;
    v14 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v14) = HIDWORD(v12);
  ++*(_DWORD *)(a5 + 8);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F0AC004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    v15 = a2;
    v17 = *(_QWORD *)(a2 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v15;
    v4 = v17;
    v5 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v5) = v4;
  v6 = *(_DWORD *)(a3 + 12);
  v7 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v7;
  if (v7 >= v6)
  {
    v16 = a2;
    v19 = HIDWORD(v4);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v16;
    HIDWORD(v4) = v19;
    v7 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) = HIDWORD(v4);
  v8 = *(_DWORD *)(a3 + 12);
  v9 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v9;
  v10 = *(_QWORD *)(a2 + 16);
  if (v9 >= v8)
  {
    v18 = *(_QWORD *)(a2 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v18;
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v9) = v10;
  v11 = *(_DWORD *)(a3 + 12);
  v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  if (v12 >= v11)
  {
    v20 = HIDWORD(v10);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v10) = v20;
    v12 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v12) = HIDWORD(v10);
  v13 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v13;
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v13);
}

uint64_t sub_22F0AC150(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (!v5)
  {
LABEL_5:
    v6 = 0;
    v7 = 0;
    return v7 | v6;
  }
  v9 = sub_22F10D4DC(v3);
  if (v9)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
    if (sub_22F3E9660((uint64_t)a1, v9 & 0xFFFFFFFFFFFFFFF0, "BOOL", 4uLL, a1 + 84))
    {
      v6 = 0x100000000;
LABEL_20:
      v7 = 12;
      return v7 | v6;
    }
    if (sub_22F3E9660((uint64_t)a1, v10, "NSInteger", 9uLL, a1 + 85))
    {
      v6 = 0x100000000;
      v7 = 13;
      return v7 | v6;
    }
    if (sub_22F3E9660((uint64_t)a1, v10, "NSUInteger", 0xAuLL, a1 + 86))
    {
      v6 = 0x100000000;
      v7 = 14;
      return v7 | v6;
    }
  }
  v7 = 0;
  v6 = 0x100000000;
  switch((*(_DWORD *)(v4 + 16) >> 19) & 0x1FF)
  {
    case 0xA6:
      goto LABEL_20;
    case 0xA7:
    case 0xA8:
      v7 = 1;
      break;
    case 0xAD:
      v7 = 3;
      break;
    case 0xAE:
      v7 = 5;
      break;
    case 0xAF:
      v7 = 7;
      break;
    case 0xB0:
      v7 = 9;
      break;
    case 0xB2:
    case 0xB3:
      return v7 | v6;
    case 0xB5:
      v7 = 2;
      break;
    case 0xB6:
      v7 = 4;
      break;
    case 0xB7:
      v7 = 6;
      break;
    case 0xB8:
      v7 = 8;
      break;
    default:
      goto LABEL_5;
  }
  return v7 | v6;
}

void sub_22F0AC2D8(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;

  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0 && (*(_BYTE *)(a1 + 8) & 6) != 0 && (v3 = (uint64_t *)sub_22EFC7594(a1)) != 0)
  {
    sub_22F1D8A24(v3, 0, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t sub_22F0AC32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  const void *v14;
  size_t v15;
  unsigned int v16;
  int *v17;
  const void *v18;
  int v19;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  _BOOL4 v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  _QWORD v101[4];
  uint64_t v102[5];

  v102[0] = a2;
  v102[1] = a7;
  v102[2] = a3;
  v102[3] = a4;
  v102[4] = a1;
  v101[0] = a8;
  v101[1] = a5;
  v101[2] = a6;
  v101[3] = a1;
  v9 = *(_QWORD *)(a7 + 40);
  if ((v9 & 7) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(a8 + 40);
  if ((v11 & 7) != 0)
    v12 = 0;
  else
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned int **)(v10 + 16);
  v16 = *v13;
  v14 = v13 + 4;
  v15 = v16;
  v17 = *(int **)(v12 + 16);
  v19 = *v17;
  v18 = v17 + 4;
  if (v15 != v19 || v15 && memcmp(v14, v18, v15))
  {
    sub_22F0ACA80((uint64_t)&v99, v102, 0);
    v22 = v99;
    if (!v99)
    {
      v22 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v22;
    }
    v23 = *v22;
    v22[v23 + 1] = 5;
    *v22 = v23 + 1;
    *(_QWORD *)&v22[8 * v23 + 16] = v10;
    sub_22E3BB0B8((uint64_t)&v99);
    sub_22F0ACC3C((uint64_t)&v99, v101, 0);
    v24 = v99;
    if (!v99)
    {
      v24 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v24;
    }
    v25 = *v24;
    v24[v25 + 1] = 5;
    *v24 = v25 + 1;
    *(_QWORD *)&v24[8 * v25 + 16] = v12;
    goto LABEL_35;
  }
  v26 = *(_QWORD *)(a7 + 48);
  v27 = *(_QWORD *)(a8 + 48);
  v28 = sub_22F0ACDAC(v26);
  if (v28 != sub_22F0ACDAC(v27))
  {
    sub_22F0ACA80((uint64_t)&v99, v102, 1u);
    v33 = v99;
    if (!v99)
    {
      v33 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v33;
    }
    v34 = v33 + 1;
    v35 = *v33;
    v34[v35] = 5;
    *v33 = v35 + 2;
    v36 = v33 + 16;
    *(_QWORD *)&v36[8 * v35] = v10;
    v37 = (v35 + 1);
    v34[v37] = 9;
    *(_QWORD *)&v36[8 * v37] = v26;
    sub_22E3BB0B8((uint64_t)&v99);
    sub_22F0ACC3C((uint64_t)&v99, v101, 1u);
    v38 = v99;
    if (!v99)
    {
      v38 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v38;
    }
    v39 = v38 + 1;
    v40 = *v38;
    v39[v40] = 5;
    *v38 = v40 + 2;
    v41 = v38 + 16;
    *(_QWORD *)&v41[8 * v40] = v12;
    v42 = (v40 + 1);
    v39[v42] = 9;
    goto LABEL_34;
  }
  v29 = *(_DWORD *)(a7 + 68) & 1;
  v27 = *(_DWORD *)(a8 + 68) & 1;
  if ((*(_DWORD *)(a7 + 68) & 1) != (*(_DWORD *)(a8 + 68) & 1))
  {
    sub_22F0ACA80((uint64_t)&v99, v102, 2u);
    v43 = v99;
    if (!v99)
    {
      v43 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v43;
    }
    v44 = v43 + 1;
    v45 = *v43;
    v44[v45] = 5;
    *v43 = v45 + 2;
    v46 = v43 + 16;
    *(_QWORD *)&v46[8 * v45] = v10;
    v47 = (v45 + 1);
    v44[v47] = 2;
    *(_QWORD *)&v46[8 * v47] = v29;
    sub_22E3BB0B8((uint64_t)&v99);
    sub_22F0ACC3C((uint64_t)&v99, v101, 2u);
    v48 = v99;
    if (!v99)
    {
      v48 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v48;
    }
    v49 = v48 + 1;
    v50 = *v48;
    v49[v50] = 5;
    *v48 = v50 + 2;
    v41 = v48 + 16;
    *(_QWORD *)&v41[8 * v50] = v12;
    v42 = (v50 + 1);
    v49[v42] = 2;
LABEL_34:
    *(_QWORD *)&v41[8 * v42] = v27;
LABEL_35:
    sub_22E3BB0B8((uint64_t)&v99);
    return 1;
  }
  if ((*(_DWORD *)(a7 + 68) & 1) == 0 || (*(_DWORD *)(a8 + 68) & 1) == 0)
    goto LABEL_41;
  v30 = *(_QWORD *)(a7 + 72) & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(a7 + 72) & 3) != 0 && (*(_DWORD *)(a7 + 72) & 3) != 3)
    v30 = *(_QWORD *)(v30 + 8);
  v31 = sub_22F0ACE88((unsigned __int8 *)v30);
  if ((*(_BYTE *)(a8 + 68) & 1) != 0)
  {
    v32 = *(_QWORD *)(a8 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_DWORD *)(a8 + 72) & 3) != 0 && (*(_DWORD *)(a8 + 72) & 3) != 3)
      v32 = *(_QWORD *)(v32 + 8);
  }
  else
  {
    v32 = 0;
  }
  if (v31 != sub_22F0ACE88((unsigned __int8 *)v32))
  {
    sub_22F0ACA80((uint64_t)&v99, v102, 3u);
    v59 = v99;
    if (!v99)
    {
      v59 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v59;
    }
    v60 = *v59;
    v59[v60 + 1] = 5;
    *v59 = v60 + 1;
    *(_QWORD *)&v59[8 * v60 + 16] = v10;
    if ((*(_BYTE *)(a7 + 68) & 1) != 0)
    {
      v61 = *(_QWORD *)(a7 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_DWORD *)(a7 + 72) & 3) != 0 && (*(_DWORD *)(a7 + 72) & 3) != 3)
        v61 = *(_QWORD *)(v61 + 8);
    }
    else
    {
      v61 = 0;
    }
    sub_22F0D4E74(v61);
    sub_22E4D6448((uint64_t)(v59 + 336), v72, 1);
    sub_22E3BB0B8((uint64_t)&v99);
    sub_22F0ACC3C((uint64_t)&v99, v101, 3u);
    v73 = v99;
    if (!v99)
    {
      v73 = (_BYTE *)sub_22E3B8AAC(v100);
      v99 = v73;
    }
    v74 = *v73;
    v73[v74 + 1] = 5;
    *v73 = v74 + 1;
    *(_QWORD *)&v73[8 * v74 + 16] = v12;
    if ((*(_BYTE *)(a8 + 68) & 1) != 0)
    {
      v75 = *(_QWORD *)(a8 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_DWORD *)(a8 + 72) & 3) != 0 && (*(_DWORD *)(a8 + 72) & 3) != 3)
        v75 = *(_QWORD *)(v75 + 8);
    }
    else
    {
      v75 = 0;
    }
    sub_22F0D4E74(v75);
    v77 = v76;
    v78 = (uint64_t)(v73 + 336);
    v51 = 1;
    sub_22E4D6448(v78, v77, 1);
    sub_22E3BB0B8((uint64_t)&v99);
  }
  else
  {
LABEL_41:
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1) & 1) == 0)
      return 0;
    v53 = *(_DWORD *)(a7 + 68);
    v54 = (v53 >> 1) & 1;
    v55 = *(_DWORD *)(a8 + 68);
    v56 = (v55 >> 1) & 1;
    if ((_DWORD)v54 != (_DWORD)v56)
    {
      sub_22F0ACA80((uint64_t)&v99, v102, 4u);
      v62 = v99;
      if (!v99)
      {
        v62 = (_BYTE *)sub_22E3B8AAC(v100);
        v99 = v62;
      }
      v63 = v62 + 1;
      v64 = *v62;
      v63[v64] = 5;
      *v62 = v64 + 2;
      v65 = v62 + 16;
      *(_QWORD *)&v65[8 * v64] = v10;
      v66 = (v64 + 1);
      v63[v66] = 2;
      *(_QWORD *)&v65[8 * v66] = v54;
      sub_22E3BB0B8((uint64_t)&v99);
      sub_22F0ACC3C((uint64_t)&v99, v101, 4u);
      v67 = v99;
      if (!v99)
      {
        v67 = (_BYTE *)sub_22E3B8AAC(v100);
        v99 = v67;
      }
      v68 = v67 + 1;
      v69 = *v67;
      v68[v69] = 5;
      *v67 = v69 + 2;
      v70 = v67 + 16;
      *(_QWORD *)&v70[8 * v69] = v12;
      v71 = (v69 + 1);
      v68[v71] = 2;
      *(_QWORD *)&v70[8 * v71] = v56;
      goto LABEL_35;
    }
    v57 = 0;
    if ((*(_DWORD *)(a7 + 72) & 3) != 0 && (*(_DWORD *)(a7 + 72) & 3) != 3)
    {
      v57 = (unsigned __int8 *)(*(_QWORD *)(a7 + 72) & 0xFFFFFFFFFFFFFFFCLL);
      if ((v53 & 1) != 0)
        v57 = *(unsigned __int8 **)v57;
    }
    if ((*(_DWORD *)(a8 + 72) & 3) == 0 || (*(_DWORD *)(a8 + 72) & 3) == 3)
    {
      v58 = 0;
      v51 = 0;
      if (!v57)
        return v51;
      goto LABEL_83;
    }
    v79 = (unsigned __int8 *)(*(_QWORD *)(a8 + 72) & 0xFFFFFFFFFFFFFFFCLL);
    if ((v55 & 1) != 0)
      v79 = *(unsigned __int8 **)v79;
    v58 = v79 != 0;
    if ((v57 == 0) == v58)
    {
LABEL_83:
      sub_22F0ACA80((uint64_t)&v99, v102, 5u);
      v89 = v99;
      if (!v99)
      {
        v89 = (_BYTE *)sub_22E3B8AAC(v100);
        v99 = v89;
      }
      v90 = v89 + 1;
      v91 = *v89;
      v89[v91 + 1] = 5;
      *v89 = v91 + 2;
      v92 = v89 + 16;
      *(_QWORD *)&v92[8 * v91] = v10;
      v93 = (v91 + 1);
      v90[v93] = 2;
      *(_QWORD *)&v92[8 * v93] = v57 != 0;
      sub_22E3BB0B8((uint64_t)&v99);
      sub_22F0ACC3C((uint64_t)&v99, v101, 5u);
      v94 = v99;
      if (!v99)
      {
        v94 = (_BYTE *)sub_22E3B8AAC(v100);
        v99 = v94;
      }
      v95 = v94 + 1;
      v96 = *v94;
      v95[v96] = 5;
      *v94 = v96 + 2;
      v97 = v94 + 16;
      *(_QWORD *)&v97[8 * v96] = v12;
      v98 = (v96 + 1);
      v95[v98] = 2;
      *(_QWORD *)&v97[8 * v98] = v58;
      goto LABEL_35;
    }
    v51 = 0;
    if (v57 && v79)
    {
      v80 = sub_22F0ACE88(v57);
      if (v80 == sub_22F0ACE88(v79))
        return 0;
      sub_22F0ACA80((uint64_t)&v99, v102, 6u);
      v81 = v99;
      if (!v99)
      {
        v81 = (_BYTE *)sub_22E3B8AAC(v100);
        v99 = v81;
      }
      v82 = *v81;
      v81[v82 + 1] = 5;
      *v81 = v82 + 1;
      *(_QWORD *)&v81[8 * v82 + 16] = v10;
      sub_22F0D4E74((uint64_t)v57);
      sub_22E4D6448((uint64_t)(v81 + 336), v83, 1);
      sub_22E3BB0B8((uint64_t)&v99);
      sub_22F0ACC3C((uint64_t)&v99, v101, 6u);
      v84 = v99;
      if (!v99)
      {
        v84 = (_BYTE *)sub_22E3B8AAC(v100);
        v99 = v84;
      }
      v85 = *v84;
      v84[v85 + 1] = 5;
      *v84 = v85 + 1;
      *(_QWORD *)&v84[8 * v85 + 16] = v12;
      sub_22F0D4E74((uint64_t)v79);
      v87 = v86;
      v88 = (uint64_t)(v84 + 336);
      v51 = 1;
      sub_22E4D6448(v88, v87, 1);
      sub_22E3BB0B8((uint64_t)&v99);
    }
  }
  return v51;
}

uint64_t sub_22F0ACA80(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v6 = *(_QWORD *)a2[4];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(a2[1] + 24);
  *(_DWORD *)(v6 + 316) = 2134;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v21 = (unsigned __int8 *)(v6 + 320);
  v22 = 0;
  v23 = v6;
  v24 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
    LODWORD(v7) = *(unsigned __int8 *)(v6 + 320);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = *a2;
  *(_BYTE *)(v6 + 321 + v7) = 11;
  *(_QWORD *)(v6 + 336 + 8 * v7) = v10;
  v11 = a2[3] == 0;
  v12 = (v7 + 1);
  *(_BYTE *)(v6 + 321 + v12) = 2;
  *(_BYTE *)(v6 + 320) = v7 + 2;
  *(_QWORD *)(v6 + 336 + 8 * v12) = v11;
  v13 = sub_22E3B89A8(&v21, (void *)a2[2], a2[3]);
  v14 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a2[1] + 16))(a2[1], v13);
  v15 = v21;
  if (!v21)
  {
    v15 = (unsigned __int8 *)sub_22E3B8AAC(v22);
    v21 = v15;
  }
  sub_22E4D6448((uint64_t)(v15 + 336), v14, 1);
  v16 = v21;
  if (!v21)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v22);
    v21 = v16;
  }
  v16[*v16 + 1] = 2;
  v17 = v21;
  v18 = *v21;
  *v21 = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = a3;
  v19 = v23;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)a1 = v17;
  *(_WORD *)(a1 + 24) = v24;
  v23 = 0;
  v24 = 0;
  return sub_22E3BB0B8((uint64_t)&v21);
}

uint64_t sub_22F0ACC3C(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v6 = *(_QWORD *)a2[3];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*a2 + 24);
  *(_DWORD *)(v6 + 316) = 2297;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v18 = (unsigned __int8 *)(v6 + 320);
  v19 = 0;
  v20 = v6;
  v21 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = sub_22E3B89A8(&v18, (void *)a2[1], a2[2]);
  v11 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a2 + 16))(*a2, v10);
  v12 = v18;
  if (!v18)
  {
    v12 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v12;
  }
  sub_22E4D6448((uint64_t)(v12 + 336), v11, 1);
  v13 = v18;
  if (!v18)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v18;
  v15 = *v18;
  *v18 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = a3;
  v16 = v20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = v14;
  *(_WORD *)(a1 + 24) = v21;
  v20 = 0;
  v21 = 0;
  return sub_22E3BB0B8((uint64_t)&v18);
}

unint64_t sub_22F0ACDAC(unint64_t a1)
{
  unint64_t v1;
  llvm *v3[2];
  unsigned int v4;
  void *v5;
  __int128 v6;
  _BYTE v7[128];
  void *v8;
  uint64_t v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  v5 = v7;
  v6 = xmmword_22F44E310;
  v8 = v10;
  v9 = 0x2000000000;
  sub_22F0BC29C((uint64_t)v3, a1);
  v1 = sub_22F0BCA28((uint64_t)v3);
  if (v8 != v10)
    free(v8);
  if (v5 != v7)
    free(v5);
  llvm::deallocate_buffer(v3[0], (void *)(16 * v4));
  return v1;
}

unint64_t sub_22F0ACE88(unsigned __int8 *a1)
{
  unint64_t v1;
  _QWORD v3[2];
  char v4;
  llvm **v5;
  llvm *v6[2];
  unsigned int v7;
  void *v8;
  __int128 v9;
  _BYTE v10[128];
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8 = v10;
  v9 = xmmword_22F44E310;
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  v4 = 0;
  v3[0] = &off_24FAC6EC8;
  v3[1] = v11;
  v5 = v6;
  sub_22F0E9FEC(v3, a1);
  v1 = sub_22F0BCA28((uint64_t)v6);
  if (v11[0] != v12)
    free(v11[0]);
  if (v8 != v10)
    free(v8);
  llvm::deallocate_buffer(v6[0], (void *)(16 * v7));
  return v1;
}

uint64_t sub_22F0ACF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD v36[4];
  uint64_t v37[5];

  v37[0] = a2;
  v37[1] = a7;
  v37[2] = a3;
  v37[3] = a4;
  v37[4] = a1;
  v36[0] = a8;
  v36[1] = a5;
  v36[2] = a6;
  v36[3] = a1;
  v9 = *(_QWORD *)(a7 + 40);
  v10 = *(_QWORD *)(a8 + 40);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)((*(_QWORD *)(a7 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a7 + 80)) & 8));
    v10 = *(_QWORD *)((*(_QWORD *)(a8 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a8 + 80)) & 8));
    v12 = sub_22F0ACDAC(v11);
    if (v12 == sub_22F0ACDAC(v10))
      return 0;
    sub_22F0AD1A8((uint64_t)&v34, v37, 1u);
    v24 = v34;
    if (!v34)
    {
      v24 = (_BYTE *)sub_22E3B8AAC(v35);
      v34 = v24;
    }
    v25 = v24 + 1;
    v26 = *v24;
    v25[v26] = 2;
    *v24 = v26 + 3;
    v27 = v24 + 16;
    *(_QWORD *)&v27[8 * v26] = a9;
    v28 = (v26 + 1);
    v25[v28] = 10;
    *(_QWORD *)&v27[8 * v28] = v9;
    v29 = (v26 + 2);
    v25[v29] = 9;
    *(_QWORD *)&v27[8 * v29] = v11;
    sub_22E3BB0B8((uint64_t)&v34);
    sub_22F0AD364((uint64_t)&v34, v36, 1u);
    v30 = v34;
    if (!v34)
    {
      v30 = (_BYTE *)sub_22E3B8AAC(v35);
      v34 = v30;
    }
    v31 = v30 + 1;
    v32 = *v30;
    v31[v32] = 2;
    *v30 = v32 + 3;
    v22 = v30 + 16;
    *(_QWORD *)&v22[8 * v32] = a9;
    v33 = (v32 + 1);
    v31[v33] = 10;
    *(_QWORD *)&v22[8 * v33] = v9;
    v23 = (v32 + 2);
    v31[v23] = 9;
  }
  else
  {
    sub_22F0AD1A8((uint64_t)&v34, v37, 0);
    v14 = v34;
    if (!v34)
    {
      v14 = (_BYTE *)sub_22E3B8AAC(v35);
      v34 = v14;
    }
    v15 = v14 + 1;
    v16 = *v14;
    v15[v16] = 2;
    *v14 = v16 + 2;
    v17 = v14 + 16;
    *(_QWORD *)&v17[8 * v16] = a9;
    v18 = (v16 + 1);
    v15[v18] = 10;
    *(_QWORD *)&v17[8 * v18] = v9;
    sub_22E3BB0B8((uint64_t)&v34);
    sub_22F0AD364((uint64_t)&v34, v36, 0);
    v19 = v34;
    if (!v34)
    {
      v19 = (_BYTE *)sub_22E3B8AAC(v35);
      v34 = v19;
    }
    v20 = v19 + 1;
    v21 = *v19;
    v20[v21] = 2;
    *v19 = v21 + 2;
    v22 = v19 + 16;
    *(_QWORD *)&v22[8 * v21] = a9;
    v23 = (v21 + 1);
    v20[v23] = 10;
  }
  *(_QWORD *)&v22[8 * v23] = v10;
  sub_22E3BB0B8((uint64_t)&v34);
  return 1;
}

uint64_t sub_22F0AD1A8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v6 = *(_QWORD *)a2[4];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(a2[1] + 24);
  *(_DWORD *)(v6 + 316) = 2145;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v21 = (unsigned __int8 *)(v6 + 320);
  v22 = 0;
  v23 = v6;
  v24 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
    LODWORD(v7) = *(unsigned __int8 *)(v6 + 320);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = *a2;
  *(_BYTE *)(v6 + 321 + v7) = 11;
  *(_QWORD *)(v6 + 336 + 8 * v7) = v10;
  v11 = a2[3] == 0;
  v12 = (v7 + 1);
  *(_BYTE *)(v6 + 321 + v12) = 2;
  *(_BYTE *)(v6 + 320) = v7 + 2;
  *(_QWORD *)(v6 + 336 + 8 * v12) = v11;
  v13 = sub_22E3B89A8(&v21, (void *)a2[2], a2[3]);
  v14 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a2[1] + 16))(a2[1], v13);
  v15 = v21;
  if (!v21)
  {
    v15 = (unsigned __int8 *)sub_22E3B8AAC(v22);
    v21 = v15;
  }
  sub_22E4D6448((uint64_t)(v15 + 336), v14, 1);
  v16 = v21;
  if (!v21)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v22);
    v21 = v16;
  }
  v16[*v16 + 1] = 2;
  v17 = v21;
  v18 = *v21;
  *v21 = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = a3;
  v19 = v23;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)a1 = v17;
  *(_WORD *)(a1 + 24) = v24;
  v23 = 0;
  v24 = 0;
  return sub_22E3BB0B8((uint64_t)&v21);
}

uint64_t sub_22F0AD364(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v6 = *(_QWORD *)a2[3];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*a2 + 24);
  *(_DWORD *)(v6 + 316) = 2308;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v18 = (unsigned __int8 *)(v6 + 320);
  v19 = 0;
  v20 = v6;
  v21 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = sub_22E3B89A8(&v18, (void *)a2[1], a2[2]);
  v11 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a2 + 16))(*a2, v10);
  v12 = v18;
  if (!v18)
  {
    v12 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v12;
  }
  sub_22E4D6448((uint64_t)(v12 + 336), v11, 1);
  v13 = v18;
  if (!v18)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v18;
  v15 = *v18;
  *v18 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = a3;
  v16 = v20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = v14;
  *(_WORD *)(a1 + 24) = v21;
  v20 = 0;
  v21 = 0;
  return sub_22E3BB0B8((uint64_t)&v18);
}

uint64_t sub_22F0AD4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned __int8 *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  _QWORD v68[4];
  uint64_t v69[5];

  v69[0] = a2;
  v69[1] = a7;
  v69[2] = a3;
  v69[3] = a4;
  v69[4] = a1;
  v68[0] = a8;
  v68[1] = a5;
  v68[2] = a6;
  v68[3] = a1;
  v8 = *(_QWORD *)(a7 + 40);
  v9 = *(_QWORD *)(a8 + 40);
  if (v8 != v9)
  {
    sub_22F0ADA38((uint64_t)&v66, v69, 0);
    v17 = v66;
    if (!v66)
    {
      v17 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v17;
    }
    v18 = *v17;
    v17[v18 + 1] = 10;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v8;
    sub_22E3BB0B8((uint64_t)&v66);
    sub_22F0ADBF4((uint64_t)&v66, v68, 0);
    v19 = v66;
    if (!v66)
    {
      v19 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v19;
    }
    v20 = *v19;
    v19[v20 + 1] = 10;
    *v19 = v20 + 1;
    *(_QWORD *)&v19[8 * v20 + 16] = v9;
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(a7 + 48);
  v14 = *(_QWORD *)(a8 + 48);
  v15 = sub_22F0ACDAC(v13);
  if (v15 != sub_22F0ACDAC(v14))
  {
    sub_22F0ADA38((uint64_t)&v66, v69, 1u);
    v21 = v66;
    if (!v66)
    {
      v21 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v21;
    }
    v22 = v21 + 1;
    v23 = *v21;
    v22[v23] = 10;
    *v21 = v23 + 2;
    v24 = v21 + 16;
    *(_QWORD *)&v24[8 * v23] = v8;
    v25 = (v23 + 1);
    v22[v25] = 9;
    *(_QWORD *)&v24[8 * v25] = v13;
    sub_22E3BB0B8((uint64_t)&v66);
    sub_22F0ADBF4((uint64_t)&v66, v68, 1u);
    v26 = v66;
    if (!v66)
    {
      v26 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v26;
    }
    v27 = v26 + 1;
    v28 = *v26;
    v27[v28] = 10;
    *v26 = v28 + 2;
    v29 = v26 + 16;
    *(_QWORD *)&v29[8 * v28] = v8;
    v30 = (v28 + 1);
    v27[v30] = 9;
    *(_QWORD *)&v29[8 * v30] = v14;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1) & 1) == 0)
    return 0;
  v32 = (unsigned __int8 *)sub_22EFBC5B4(a7);
  v33 = sub_22EFBC5B4(a8);
  v34 = (unsigned __int8 *)v33;
  if ((v32 == 0) != (v33 == 0))
  {
    sub_22F0ADA38((uint64_t)&v66, v69, 2u);
    v35 = v66;
    if (!v66)
    {
      v35 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v35;
    }
    v36 = v35 + 1;
    v37 = *v35;
    v36[v37] = 10;
    *v35 = v37 + 2;
    *(_QWORD *)&v35[8 * v37 + 16] = v8;
    v38 = (v37 + 1);
    v36[v38] = 2;
    *(_QWORD *)&v35[8 * v38 + 16] = v32 == 0;
    if (v32)
    {
      sub_22F0D4E74((uint64_t)v32);
      v40 = v39;
    }
    else
    {
      v40 = 0;
    }
    sub_22E4D6448((uint64_t)(v35 + 336), v40, 1);
    sub_22E3BB0B8((uint64_t)&v66);
    sub_22F0ADBF4((uint64_t)&v66, v68, 2u);
    v43 = v66;
    if (!v66)
    {
      v43 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v43;
    }
    v44 = v43 + 1;
    v45 = *v43;
    v44[v45] = 10;
    *v43 = v45 + 2;
    *(_QWORD *)&v43[8 * v45 + 16] = v8;
    v46 = (v45 + 1);
    v44[v46] = 2;
    *(_QWORD *)&v43[8 * v46 + 16] = v34 == 0;
    if (v34)
    {
      sub_22F0D4E74((uint64_t)v34);
      v48 = v47;
    }
    else
    {
      v48 = 0;
    }
    v16 = 1;
    sub_22E4D6448((uint64_t)(v43 + 336), v48, 1);
    sub_22E3BB0B8((uint64_t)&v66);
    return v16;
  }
  if (!v32 || !v33 || (v41 = sub_22F0ACE88(v32), v41 == sub_22F0ACE88(v34)))
  {
    if ((*(_DWORD *)(a7 + 28) & 0x7F) == 0x40)
    {
      if ((*(_DWORD *)(a8 + 28) & 0x7F) == 0x40)
        return 0;
      v42 = 0;
      if ((*(_BYTE *)(a8 + 97) & 0x80) == 0)
        return 0;
      LODWORD(v16) = 1;
    }
    else
    {
      v49 = *(_DWORD *)(a7 + 96);
      if ((*(_DWORD *)(a8 + 28) & 0x7F) == 0x40)
      {
        v16 = 0;
        if ((v49 & 0x8000) == 0)
          return v16;
        v42 = 1;
      }
      else
      {
        LODWORD(v16) = *(unsigned __int8 *)(a8 + 97) >> 7;
        if ((_DWORD)v16 == (*(_DWORD *)(a7 + 96) & 0x8000u) >> 15)
          return 0;
        v42 = (v49 >> 15) & 1;
      }
    }
    sub_22F0ADA38((uint64_t)&v66, v69, 4u);
    v56 = v66;
    if (!v66)
    {
      v56 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v56;
    }
    v57 = v56 + 1;
    v58 = *v56;
    v57[v58] = 10;
    *v56 = v58 + 2;
    v59 = v56 + 16;
    *(_QWORD *)&v59[8 * v58] = v8;
    v60 = (v58 + 1);
    v57[v60] = 2;
    *(_QWORD *)&v59[8 * v60] = v42;
    sub_22E3BB0B8((uint64_t)&v66);
    sub_22F0ADBF4((uint64_t)&v66, v68, 4u);
    v61 = v66;
    if (!v66)
    {
      v61 = (_BYTE *)sub_22E3B8AAC(v67);
      v66 = v61;
    }
    v62 = v61 + 1;
    v63 = *v61;
    v62[v63] = 10;
    *v61 = v63 + 2;
    v64 = v61 + 16;
    *(_QWORD *)&v64[8 * v63] = v8;
    v65 = (v63 + 1);
    v62[v65] = 2;
    *(_QWORD *)&v64[8 * v65] = v16;
LABEL_15:
    sub_22E3BB0B8((uint64_t)&v66);
    return 1;
  }
  sub_22F0ADA38((uint64_t)&v66, v69, 3u);
  v50 = v66;
  if (!v66)
  {
    v50 = (_BYTE *)sub_22E3B8AAC(v67);
    v66 = v50;
  }
  v51 = *v50;
  v50[v51 + 1] = 10;
  *v50 = v51 + 1;
  *(_QWORD *)&v50[8 * v51 + 16] = v8;
  sub_22F0D4E74((uint64_t)v32);
  sub_22E4D6448((uint64_t)(v50 + 336), v52, 1);
  sub_22E3BB0B8((uint64_t)&v66);
  sub_22F0ADBF4((uint64_t)&v66, v68, 3u);
  v53 = v66;
  if (!v66)
  {
    v53 = (_BYTE *)sub_22E3B8AAC(v67);
    v66 = v53;
  }
  v54 = *v53;
  v53[v54 + 1] = 10;
  *v53 = v54 + 1;
  *(_QWORD *)&v53[8 * v54 + 16] = v8;
  sub_22F0D4E74((uint64_t)v34);
  v16 = 1;
  sub_22E4D6448((uint64_t)(v53 + 336), v55, 1);
  sub_22E3BB0B8((uint64_t)&v66);
  return v16;
}

uint64_t sub_22F0ADA38(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v6 = *(_QWORD *)a2[4];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(a2[1] + 24);
  *(_DWORD *)(v6 + 316) = 2146;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v21 = (unsigned __int8 *)(v6 + 320);
  v22 = 0;
  v23 = v6;
  v24 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
    LODWORD(v7) = *(unsigned __int8 *)(v6 + 320);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = *a2;
  *(_BYTE *)(v6 + 321 + v7) = 11;
  *(_QWORD *)(v6 + 336 + 8 * v7) = v10;
  v11 = a2[3] == 0;
  v12 = (v7 + 1);
  *(_BYTE *)(v6 + 321 + v12) = 2;
  *(_BYTE *)(v6 + 320) = v7 + 2;
  *(_QWORD *)(v6 + 336 + 8 * v12) = v11;
  v13 = sub_22E3B89A8(&v21, (void *)a2[2], a2[3]);
  v14 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a2[1] + 16))(a2[1], v13);
  v15 = v21;
  if (!v21)
  {
    v15 = (unsigned __int8 *)sub_22E3B8AAC(v22);
    v21 = v15;
  }
  sub_22E4D6448((uint64_t)(v15 + 336), v14, 1);
  v16 = v21;
  if (!v21)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v22);
    v21 = v16;
  }
  v16[*v16 + 1] = 2;
  v17 = v21;
  v18 = *v21;
  *v21 = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = a3;
  v19 = v23;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)a1 = v17;
  *(_WORD *)(a1 + 24) = v24;
  v23 = 0;
  v24 = 0;
  return sub_22E3BB0B8((uint64_t)&v21);
}

uint64_t sub_22F0ADBF4(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v6 = *(_QWORD *)a2[3];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*a2 + 24);
  *(_DWORD *)(v6 + 316) = 2309;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v18 = (unsigned __int8 *)(v6 + 320);
  v19 = 0;
  v20 = v6;
  v21 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = sub_22E3B89A8(&v18, (void *)a2[1], a2[2]);
  v11 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a2 + 16))(*a2, v10);
  v12 = v18;
  if (!v18)
  {
    v12 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v12;
  }
  sub_22E4D6448((uint64_t)(v12 + 336), v11, 1);
  v13 = v18;
  if (!v18)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v18;
  v15 = *v18;
  *v18 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = a3;
  v16 = v20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = v14;
  *(_WORD *)(a1 + 24) = v21;
  v20 = 0;
  v21 = 0;
  return sub_22E3BB0B8((uint64_t)&v18);
}

uint64_t sub_22F0ADD64(unsigned int a1)
{
  int v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  v2 = a1 & 0x7F;
  result = 15;
  if (v2 > 40)
  {
    switch(v2)
    {
      case '1':
        result = 5;
        break;
      case '2':
      case '4':
      case '5':
      case '8':
      case ':':
      case ';':
        return result;
      case '3':
        result = 13;
        break;
      case '6':
      case '7':
      case '9':
        result = 6;
        break;
      case '<':
        result = 9;
        break;
      default:
        v4 = 8;
        if (v2 == 82)
          v5 = 4;
        else
          v5 = 15;
        v6 = v2 == 41;
        goto LABEL_21;
    }
  }
  else
  {
    if (v2 > 24)
    {
      v4 = 14;
      if (v2 == 40)
        v7 = 7;
      else
        v7 = 15;
      if (v2 == 29)
        v5 = 11;
      else
        v5 = v7;
      v6 = v2 == 25;
    }
    else
    {
      if (!v2)
        return dword_22F4A6B60[(a1 >> 13) & 3];
      v4 = 10;
      if (v2 == 24)
        v5 = 12;
      else
        v5 = 15;
      v6 = v2 == 8;
    }
LABEL_21:
    if (v6)
      return v4;
    else
      return v5;
  }
  return result;
}

uint64_t sub_22F0ADE34(uint64_t *a1, _QWORD *a2, uint64_t a3, void *__src, size_t __len, uint64_t a6, void *a7, size_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v9 = a3;
  v10 = *a1;
  *(_DWORD *)(v10 + 312) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v10 + 316) = 2132;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  v44 = (unsigned __int8 *)(v10 + 320);
  v45 = 0;
  v46 = v10;
  v47 = 1;
  *(_BYTE *)(v10 + 320) = 0;
  *(_DWORD *)(v10 + 664) = 0;
  v15 = *(unsigned int *)(v10 + 776);
  if ((_DWORD)v15)
  {
    v16 = __src;
    v17 = *(_QWORD *)(v10 + 768);
    v18 = 56 * v15;
    do
    {
      if (*(char *)(v17 + v18 - 9) < 0)
        operator delete(*(void **)(v17 + v18 - 32));
      v18 -= 56;
    }
    while (v18);
    LODWORD(v15) = *(unsigned __int8 *)(v10 + 320);
    v19 = a8;
    v20 = a6;
    v21 = a2;
    v22 = a1;
    __src = v16;
    v9 = a3;
  }
  else
  {
    v19 = a8;
    v20 = a6;
    v21 = a2;
    v22 = a1;
  }
  *(_DWORD *)(v10 + 776) = 0;
  *(_BYTE *)(v10 + 321 + v15) = 11;
  *(_QWORD *)(v10 + 336 + 8 * v15) = v9;
  v23 = (v15 + 1);
  *(_BYTE *)(v10 + 321 + v23) = 2;
  *(_BYTE *)(v10 + 320) = v15 + 2;
  *(_QWORD *)(v10 + 336 + 8 * v23) = __len == 0;
  sub_22E3B89A8(&v44, __src, __len);
  sub_22E3BB0B8((uint64_t)&v44);
  if (*v21)
  {
    v24 = *v22;
    *(_DWORD *)(v24 + 312) = *(_DWORD *)(*v21 + 24);
    *(_DWORD *)(v24 + 316) = 2293;
    if (*(char *)(v24 + 311) < 0)
    {
      **(_BYTE **)(v24 + 288) = 0;
      *(_QWORD *)(v24 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v24 + 288) = 0;
      *(_BYTE *)(v24 + 311) = 0;
    }
    v25 = (unsigned __int8 *)(v24 + 320);
    v44 = (unsigned __int8 *)(v24 + 320);
    v45 = 0;
    v46 = v24;
    v47 = 1;
    *(_BYTE *)(v24 + 320) = 0;
    *(_DWORD *)(v24 + 664) = 0;
    v26 = *(unsigned int *)(v24 + 776);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(v24 + 768);
      v28 = 56 * v26;
      do
      {
        if (*(char *)(v27 + v28 - 9) < 0)
          operator delete(*(void **)(v27 + v28 - 32));
        v28 -= 56;
      }
      while (v28);
      LODWORD(v26) = *v25;
    }
    *(_DWORD *)(v24 + 776) = 0;
    v25[v26 + 1] = 11;
    *(_BYTE *)(v24 + 320) = v26 + 1;
    *(_QWORD *)&v25[8 * v26 + 16] = v9;
    v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 16))(*v21);
    sub_22E4D6448(v24 + 656, v29, 1);
    sub_22E3BB0B8((uint64_t)&v44);
  }
  v30 = *(_DWORD *)(v20 + 24);
  v31 = *v22;
  *(_DWORD *)(v31 + 312) = v30;
  *(_DWORD *)(v31 + 316) = 2295;
  if (*(char *)(v31 + 311) < 0)
  {
    **(_BYTE **)(v31 + 288) = 0;
    *(_QWORD *)(v31 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v31 + 288) = 0;
    *(_BYTE *)(v31 + 311) = 0;
  }
  v44 = (unsigned __int8 *)(v31 + 320);
  v45 = 0;
  v46 = v31;
  v47 = 1;
  *(_BYTE *)(v31 + 320) = 0;
  *(_DWORD *)(v31 + 664) = 0;
  v32 = *(unsigned int *)(v31 + 776);
  if ((_DWORD)v32)
  {
    v33 = *(_QWORD *)(v31 + 768);
    v34 = 56 * v32;
    do
    {
      if (*(char *)(v33 + v34 - 9) < 0)
        operator delete(*(void **)(v33 + v34 - 32));
      v34 -= 56;
    }
    while (v34);
  }
  *(_DWORD *)(v31 + 776) = 0;
  sub_22E3B89A8(&v44, a7, v19);
  result = sub_22E3BB0B8((uint64_t)&v44);
  v36 = v21[1];
  if (v36)
  {
    v37 = *v22;
    *(_DWORD *)(v37 + 312) = *(_DWORD *)(v36 + 24);
    *(_DWORD *)(v37 + 316) = 2332;
    if (*(char *)(v37 + 311) < 0)
    {
      **(_BYTE **)(v37 + 288) = 0;
      *(_QWORD *)(v37 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v37 + 288) = 0;
      *(_BYTE *)(v37 + 311) = 0;
    }
    v44 = (unsigned __int8 *)(v37 + 320);
    v45 = 0;
    v46 = v37;
    v47 = 1;
    *(_BYTE *)(v37 + 320) = 0;
    *(_DWORD *)(v37 + 664) = 0;
    v38 = *(unsigned int *)(v37 + 776);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD *)(v37 + 768);
      v40 = 56 * v38;
      do
      {
        if (*(char *)(v39 + v40 - 9) < 0)
          operator delete(*(void **)(v39 + v40 - 32));
        v40 -= 56;
      }
      while (v40);
    }
    *(_DWORD *)(v37 + 776) = 0;
    v41 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v21[1] + 16))(v21[1]);
    sub_22E4D6448(v37 + 656, v41, 1);
    return sub_22E3BB0B8((uint64_t)&v44);
  }
  return result;
}

uint64_t sub_22F0AE1D0(uint64_t *a1, _DWORD *a2, uint64_t a3, void *a4, size_t a5, uint64_t a6, void *a7, size_t a8)
{
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  _BYTE v49[12];

  if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 33 >= 5)
    v14 = 0;
  else
    v14 = a3;
  if (a2[4])
    v15 = 1;
  else
    v15 = v14 == 0;
  if (v15)
  {
    v17 = *(_DWORD *)(*(_QWORD *)a2 + 24);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2);
  }
  else
  {
    v16 = 0;
    v17 = *(_DWORD *)(v14 + 116);
  }
  LODWORD(v46) = v17;
  *(_QWORD *)((char *)&v46 + 4) = v16;
  *(_QWORD *)v49 = v46;
  *(_DWORD *)&v49[8] = HIDWORD(v16);
  v18 = *a1;
  *(_DWORD *)(v18 + 312) = v17;
  *(_DWORD *)(v18 + 316) = 2137;
  if (*(char *)(v18 + 311) < 0)
  {
    **(_BYTE **)(v18 + 288) = 0;
    *(_QWORD *)(v18 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v18 + 288) = 0;
    *(_BYTE *)(v18 + 311) = 0;
  }
  v46 = (unint64_t)(v18 + 320);
  v47 = v18;
  v48 = 1;
  *(_BYTE *)(v18 + 320) = 0;
  *(_DWORD *)(v18 + 664) = 0;
  v19 = *(unsigned int *)(v18 + 776);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(v18 + 768);
    v21 = 56 * v19;
    do
    {
      if (*(char *)(v20 + v21 - 9) < 0)
        operator delete(*(void **)(v20 + v21 - 32));
      v21 -= 56;
    }
    while (v21);
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 320);
  }
  *(_DWORD *)(v18 + 776) = 0;
  *(_BYTE *)(v18 + 321 + v19) = 11;
  *(_QWORD *)(v18 + 336 + 8 * v19) = a3;
  v22 = (v19 + 1);
  *(_BYTE *)(v18 + 321 + v22) = 2;
  *(_BYTE *)(v18 + 320) = v19 + 2;
  *(_QWORD *)(v18 + 336 + 8 * v22) = a5 == 0;
  sub_22E3B89A8((unsigned __int8 **)&v46, a4, a5);
  v23 = *(_QWORD *)&v49[4];
  v24 = v46;
  if (!(_QWORD)v46)
  {
    v24 = sub_22E3B8AAC(*((uint64_t *)&v46 + 1));
    *(_QWORD *)&v46 = v24;
  }
  sub_22E4D6448(v24 + 336, v23, 1);
  v25 = (int)a2[4];
  v26 = (unsigned __int8 *)v46;
  if (!(_QWORD)v46)
  {
    v26 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v46 + 1));
    *(_QWORD *)&v46 = v26;
  }
  v26[*v26 + 1] = 2;
  v27 = v46;
  v28 = *(unsigned __int8 *)v46;
  *(_BYTE *)v46 = v28 + 1;
  *(_QWORD *)(v27 + 8 * v28 + 16) = v25;
  sub_22E3BB0B8((uint64_t)&v46);
  if ((*(_DWORD *)(a6 + 28) & 0x7Fu) - 33 >= 5)
    v29 = 0;
  else
    v29 = a6;
  if (a2[5] || !v29)
  {
    v32 = (_DWORD *)*((_QWORD *)a2 + 1);
    v31 = v32[6];
    v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
  }
  else
  {
    v30 = 0;
    v31 = *(_DWORD *)(v29 + 116);
  }
  LODWORD(v46) = v31;
  *(_QWORD *)((char *)&v46 + 4) = v30;
  v45 = v30;
  v33 = *a1;
  *(_DWORD *)(v33 + 312) = v31;
  *(_DWORD *)(v33 + 316) = 2300;
  if (*(char *)(v33 + 311) < 0)
  {
    **(_BYTE **)(v33 + 288) = 0;
    *(_QWORD *)(v33 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v33 + 288) = 0;
    *(_BYTE *)(v33 + 311) = 0;
  }
  v46 = (unint64_t)(v33 + 320);
  v47 = v33;
  v48 = 1;
  *(_BYTE *)(v33 + 320) = 0;
  *(_DWORD *)(v33 + 664) = 0;
  v34 = *(unsigned int *)(v33 + 776);
  if ((_DWORD)v34)
  {
    v35 = *(_QWORD *)(v33 + 768);
    v36 = 56 * v34;
    do
    {
      if (*(char *)(v35 + v36 - 9) < 0)
        operator delete(*(void **)(v35 + v36 - 32));
      v36 -= 56;
    }
    while (v36);
  }
  *(_DWORD *)(v33 + 776) = 0;
  sub_22E3B89A8((unsigned __int8 **)&v46, a7, a8);
  v37 = v46;
  if (!(_QWORD)v46)
  {
    v37 = sub_22E3B8AAC(*((uint64_t *)&v46 + 1));
    *(_QWORD *)&v46 = v37;
  }
  sub_22E4D6448(v37 + 336, v45, 1);
  v38 = (int)a2[5];
  v39 = (unsigned __int8 *)v46;
  if (!(_QWORD)v46)
  {
    v39 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v46 + 1));
    *(_QWORD *)&v46 = v39;
  }
  v39[*v39 + 1] = 2;
  v40 = v46;
  v41 = *(unsigned __int8 *)v46;
  *(_BYTE *)v46 = v41 + 1;
  *(_QWORD *)(v40 + 8 * v41 + 16) = v38;
  return sub_22E3BB0B8((uint64_t)&v46);
}

BOOL sub_22F0AE518(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t i;
  unint64_t j;
  const void *v52;
  uint64_t v53;
  void *v55;
  size_t v56;
  void *v57;
  size_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  _BOOL4 v67;
  BOOL v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  llvm *v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unsigned int v79;
  int v80;
  _BOOL4 v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  void *v99;
  size_t v100;
  double v101;
  uint64_t v102;
  llvm *v103;
  llvm *v104;
  llvm *v105;
  uint64_t v106;
  llvm *v107;
  uint64_t v108;
  llvm *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  size_t v116;
  double v117;
  uint64_t v118;
  llvm *v119;
  llvm *v120;
  llvm *v121;
  uint64_t v122;
  llvm *v123;
  uint64_t v124;
  llvm *v125;
  uint64_t v126;
  llvm *v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  llvm *v132;
  uint64_t v133;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  llvm *v140;
  uint64_t v141;
  unsigned __int8 v142;
  unint64_t v143;
  llvm *v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  llvm *v148;
  char *v149;
  uint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  llvm *v158;
  uint64_t v159;
  unsigned __int8 v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  llvm *v165;
  uint64_t v166;
  unsigned __int8 v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  void *v172;
  size_t v173;
  void *v174;
  size_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v181;
  uint64_t v182;
  llvm *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  llvm *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  int v195;
  _DWORD *v196;
  _DWORD *v197;
  int v198;
  size_t v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  unint64_t v216;
  _DWORD *v218;
  const char *v219;
  size_t v220;
  unsigned int v221;
  unint64_t v222;
  int *v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  _BOOL8 v229;
  unint64_t v230;
  unint64_t v231;
  _BOOL8 v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  _BOOL8 v245;
  _BOOL8 v247;
  _QWORD *v248;
  unint64_t v249;
  int v250;
  unint64_t v251;
  unint64_t v252;
  _BOOL8 v254;
  unint64_t v255;
  unint64_t v256;
  _BOOL8 v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int *v264;
  int *v265;
  int v266;
  void *v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  size_t v275;
  uint64_t v276;
  void *v277;
  size_t v278;
  __n128 v279;
  llvm *v280;
  llvm *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  size_t v289;
  __n128 v290;
  llvm *v291;
  llvm *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  int v299;
  unint64_t v300;
  llvm *v301;
  uint64_t v302;
  int v303;
  unint64_t v304;
  llvm *v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  uint64_t v310;
  llvm *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  llvm *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  llvm *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  llvm *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  uint64_t *v342;
  unint64_t *v343;
  BOOL v344;
  int v345;
  unint64_t v346;
  llvm *v347;
  uint64_t v348;
  int v349;
  unint64_t v350;
  llvm *v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  llvm *v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  llvm *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  unint64_t v375;
  llvm *v376;
  uint64_t v377;
  int v378;
  unint64_t v379;
  int v380;
  uint64_t v381;
  llvm *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  llvm *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  llvm *v398;
  uint64_t v399;
  llvm *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  llvm *v405;
  uint64_t v406;
  char *v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  _BOOL8 v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  llvm *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  _BOOL8 v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  llvm *v430;
  uint64_t v431;
  uint64_t v432;
  unsigned __int8 v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  int v439;
  uint64_t v440;
  llvm *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  int v448;
  int v449;
  int v450;
  uint64_t v451;
  llvm *v452;
  uint64_t v453;
  char *v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  llvm *v461;
  uint64_t v462;
  char *v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  llvm *v470;
  uint64_t v471;
  char *v472;
  char *v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  uint64_t v477;
  llvm *v478;
  uint64_t v479;
  char *v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  llvm *v486;
  uint64_t v487;
  char *v488;
  char *v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  llvm *v495;
  uint64_t v496;
  char *v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unsigned int v502;
  unsigned int v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  llvm *v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  llvm *v513;
  uint64_t v514;
  char *v515;
  char *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  llvm *v522;
  uint64_t v523;
  uint64_t v524;
  unsigned __int8 v525;
  int v526;
  uint64_t v527;
  int v528;
  uint64_t v529;
  llvm *v530;
  uint64_t v531;
  char *v532;
  char *v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  llvm *v538;
  uint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  llvm *v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  llvm *v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  llvm *v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  llvm *v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  llvm *v566;
  uint64_t v567;
  char *v568;
  char *v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  llvm *v574;
  uint64_t v575;
  char *v576;
  char *v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  void *v582;
  size_t v583;
  void *v584;
  void *v585;
  size_t v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  unsigned int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  BOOL v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned __int8 *v605;
  unint64_t v606;
  unsigned __int8 *v607;
  BOOL v608;
  int v609;
  unint64_t v610;
  unsigned int *v612;
  unint64_t v613;
  unsigned int *v614;
  unsigned int v615;
  unsigned int v616;
  int v617;
  uint64_t v618;
  llvm *v619;
  uint64_t v620;
  char *v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  llvm *v626;
  uint64_t v627;
  char *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  llvm *v633;
  uint64_t v634;
  char *v635;
  char *v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  llvm *v641;
  uint64_t v642;
  char *v643;
  char *v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  llvm *v649;
  uint64_t v650;
  char *v651;
  char *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  llvm *v658;
  uint64_t v659;
  char *v660;
  char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  void **v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  llvm *v669;
  uint64_t v670;
  char *v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  llvm *v678;
  uint64_t v679;
  char *v680;
  char *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  uint64_t v686;
  llvm *v687;
  uint64_t v688;
  char *v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  char *v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  llvm *v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  uint64_t v703;
  llvm *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  _BYTE *v708;
  uint64_t v709;
  _BYTE *v710;
  uint64_t v711;
  _BYTE *v712;
  _BYTE *v713;
  uint64_t v714;
  _BYTE *v715;
  uint64_t v716;
  _BYTE *v717;
  _BYTE *v718;
  uint64_t v719;
  _BYTE *v720;
  uint64_t v721;
  int v722;
  uint64_t v723;
  llvm *v724;
  uint64_t v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  llvm *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unsigned int *v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  llvm *v739;
  uint64_t v740;
  char *v741;
  char *v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  BOOL v750;
  _BYTE *v751;
  _BYTE *v752;
  uint64_t v753;
  _BYTE *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int *v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  llvm *v766;
  uint64_t v767;
  char *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  uint64_t v774;
  llvm *v775;
  uint64_t v776;
  char *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  __int128 *v782;
  __int128 *v783;
  int v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  char *v788;
  char *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  _BYTE *v795;
  _BYTE *v796;
  uint64_t v797;
  _BYTE *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  BOOL v802;
  _BYTE *v803;
  _BYTE *v804;
  uint64_t v805;
  _BYTE *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  _BYTE *v811;
  _BYTE *v812;
  uint64_t v813;
  _BYTE *v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  uint64_t v818;
  _BYTE *v819;
  _BYTE *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unsigned __int8 *v824;
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  _BYTE *v829;
  _BYTE *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  unsigned __int8 *v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  uint64_t v843;
  llvm *v844;
  _BOOL8 v845;
  uint64_t v846;
  char *v847;
  uint64_t v848;
  uint64_t v849;
  int v850;
  uint64_t v851;
  llvm *v852;
  uint64_t v853;
  char *v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  uint64_t v858;
  llvm *v859;
  char *v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  uint64_t v864;
  llvm *v865;
  char *v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  uint64_t v870;
  _BYTE *v871;
  _BYTE *v872;
  uint64_t v873;
  uint64_t v874;
  unsigned __int8 *v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  uint64_t v879;
  _BYTE *v880;
  _BYTE *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  unint64_t v895;
  unint64_t v896;
  int v897[2];
  uint64_t *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  _QWORD v902[3];
  __int16 v903;
  _QWORD v904[3];
  __int16 v905;
  __int128 v906;
  uint64_t v907;
  __int16 v908;
  _QWORD v909[3];
  __int16 v910;
  _QWORD v911[3];
  __int16 v912;
  _BYTE v913[32];
  _BYTE v914[32];
  _BYTE v915[32];
  _BYTE v916[32];
  void **v917[2];
  _QWORD v918[3];
  uint64_t v919;
  uint64_t v920;
  int v921;
  int v922;
  void *__p;
  size_t v924;
  char v925;
  void *v926;
  size_t v927;
  char v928;
  __int128 v929;
  uint64_t v930;
  __int16 v931;
  void *v932;
  uint64_t v933;
  uint64_t v934;
  size_t v935;
  uint64_t v936;
  void *p_p;
  uint64_t v938;
  _BYTE v939[64];
  void *v940;
  uint64_t v941;
  _QWORD v942[8];
  llvm *v943;
  uint64_t v944;
  uint64_t v945;
  void *v946;
  __int128 v947;
  _BYTE v948[128];
  void *v949;
  uint64_t v950;
  _QWORD v951[19];

  v4 = a3;
  v5 = a2;
  v951[16] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return v5 != v4;
  sub_22F0AC2D8(a2, &v926);
  sub_22F0AC2D8(v4, &__p);
  v8 = *(_QWORD *)(v5 + 128);
  if (v8 == a4)
    goto LABEL_20;
  v940 = (void *)v5;
  v941 = (uint64_t)&v926;
  v942[0] = a1;
  p_p = &__p;
  v938 = (uint64_t)a1;
  v9 = *(unsigned int *)(v8 + 16);
  v10 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v9 == (_DWORD)v10)
  {
    v11 = *(unsigned int *)(v8 + 20);
    v10 = *(unsigned int *)(a4 + 20);
    if ((_DWORD)v11 == (_DWORD)v10)
    {
      v894 = v4;
      v12 = *(_QWORD *)(v8 + 24);
      if ((v12 & 1) != 0)
        v12 = sub_22EFCF510(v8);
      *(_QWORD *)v897 = a1;
      v899 = v5;
      v13 = *(_QWORD *)(a4 + 24);
      if ((v13 & 1) != 0)
        v13 = sub_22EFCF510(a4);
      if ((_DWORD)v9)
      {
        v14 = 0;
        v887 = 24 * v9;
        v15 = 1;
        while (1)
        {
          v16 = *(_QWORD *)(v12 + v14);
          v17 = *(unsigned __int8 *)(v12 + v14 + 12);
          v18 = *(uint64_t **)(v12 + v14 + 16);
          v891 = *(_QWORD *)(v13 + v14);
          v19 = *(unsigned __int8 *)(v13 + v14 + 12);
          v20 = *(uint64_t **)(v13 + v14 + 16);
          v21 = *(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v21 + 8) & 0xF) != 0)
            v21 = (unint64_t)sub_22F10D2BC(*v18);
          v22 = sub_22F0ACDAC(v21 & 0xFFFFFFFFFFFFFFF0);
          v23 = *(_QWORD *)(*v20 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v23 + 8) & 0xF) != 0)
            v23 = (unint64_t)sub_22F10D2BC(*v20);
          if (v22 != sub_22F0ACDAC(v23 & 0xFFFFFFFFFFFFFFF0))
            break;
          v24 = v16;
          v25 = v20;
          v26 = v17 & 1;
          v27 = v19 & 1;
          if (((v17 & 1) != 0) != ((v19 & 1) != 0))
          {
            sub_22F0B3970((uint64_t)&v943, (uint64_t *)&v940, *(_DWORD *)(v899 + 24), v24, 3u);
            v148 = v943;
            v4 = v894;
            if (!v943)
            {
              v148 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v148;
            }
            v149 = (char *)v148 + 1;
            v150 = *(unsigned __int8 *)v148;
            v149[v150] = 3;
            v151 = v150 + 2;
            *(_BYTE *)v148 = v150 + 2;
            *((_QWORD *)v148 + v150 + 2) = v15;
            v152 = (v150 + 1);
            v149[v152] = 2;
            *((_QWORD *)v148 + v152 + 2) = v26;
            v153 = *(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v153 + 8) & 0xF) != 0)
            {
              v153 = (unint64_t)sub_22F10D2BC(*v18);
              v151 = *(_BYTE *)v148;
            }
            *((_BYTE *)v148 + v151 + 1) = 9;
            *(_BYTE *)v148 = v151 + 1;
            *((_QWORD *)v148 + v151 + 2) = v153 & 0xFFFFFFFFFFFFFFF0;
            sub_22E3BB0B8((uint64_t)&v943);
            sub_22F0B3B50((uint64_t)&v943, (void ***)&p_p, *(_DWORD *)(v894 + 24), v891, 3u);
            v144 = v943;
            if (!v943)
            {
              v144 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v144;
            }
            v154 = (char *)v144 + 1;
            v155 = *(unsigned __int8 *)v144;
            v154[v155] = 3;
            v146 = v155 + 2;
            *(_BYTE *)v144 = v155 + 2;
            *((_QWORD *)v144 + v155 + 2) = v15;
            v156 = (v155 + 1);
            v154[v156] = 2;
            *((_QWORD *)v144 + v156 + 2) = v27;
            v147 = *v25;
            goto LABEL_208;
          }
          v28 = (v17 >> 2) & 3;
          v29 = (v19 >> 2) & 3;
          if ((_DWORD)v28 != (_DWORD)v29)
          {
            sub_22F0B3970((uint64_t)&v943, (uint64_t *)&v940, *(_DWORD *)(v899 + 24), v24, 4u);
            v158 = v943;
            v4 = v894;
            if (!v943)
            {
              v158 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v158;
            }
            v159 = *(unsigned __int8 *)v158;
            *((_BYTE *)v158 + v159 + 1) = 3;
            v160 = v159 + 1;
            *(_BYTE *)v158 = v159 + 1;
            *((_QWORD *)v158 + v159 + 2) = v15;
            v161 = *(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v161 + 8) & 0xF) != 0)
            {
              v161 = (unint64_t)sub_22F10D2BC(*v18);
              v160 = *(_BYTE *)v158;
            }
            v162 = (char *)v158 + 1;
            v162[v160] = 9;
            *(_BYTE *)v158 = v160 + 2;
            v163 = (char *)v158 + 16;
            *(_QWORD *)&v163[8 * v160] = v161 & 0xFFFFFFFFFFFFFFF0;
            v164 = (v160 + 1);
            v162[v164] = 2;
            *(_QWORD *)&v163[8 * v164] = v28;
            sub_22E3BB0B8((uint64_t)&v943);
            sub_22F0B3B50((uint64_t)&v943, (void ***)&p_p, *(_DWORD *)(v894 + 24), v891, 4u);
            v165 = v943;
            if (!v943)
            {
              v165 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v165;
            }
            v166 = *(unsigned __int8 *)v165;
            *((_BYTE *)v165 + v166 + 1) = 3;
            v167 = v166 + 1;
            *(_BYTE *)v165 = v166 + 1;
            *((_QWORD *)v165 + v166 + 2) = v15;
            v168 = *(_QWORD *)(*v25 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v168 + 8) & 0xF) != 0)
            {
              v168 = (unint64_t)sub_22F10D2BC(*v25);
              v167 = *(_BYTE *)v165;
            }
            v5 = v899;
            v169 = (char *)v165 + 1;
            v169[v167] = 9;
            *(_BYTE *)v165 = v167 + 2;
            v170 = (char *)v165 + 16;
            *(_QWORD *)&v170[8 * v167] = v168 & 0xFFFFFFFFFFFFFFF0;
            v171 = (v167 + 1);
            v169[v171] = 2;
            *(_QWORD *)&v170[8 * v171] = v29;
            goto LABEL_172;
          }
          ++v15;
          v14 += 24;
          if (v887 == v14)
            goto LABEL_19;
        }
        sub_22F0B3970((uint64_t)&v943, (uint64_t *)&v940, *(_DWORD *)(v899 + 24), v16, 2u);
        v140 = v943;
        if (!v943)
        {
          v140 = (llvm *)sub_22E3B8AAC(v944);
          v943 = v140;
        }
        v141 = *(unsigned __int8 *)v140;
        *((_BYTE *)v140 + v141 + 1) = 3;
        v142 = v141 + 1;
        *(_BYTE *)v140 = v141 + 1;
        *((_QWORD *)v140 + v141 + 2) = v15;
        v143 = *(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF0);
        v4 = v894;
        if ((*(_BYTE *)(v143 + 8) & 0xF) != 0)
        {
          v143 = (unint64_t)sub_22F10D2BC(*v18);
          v142 = *(_BYTE *)v140;
        }
        *((_BYTE *)v140 + v142 + 1) = 9;
        *(_BYTE *)v140 = v142 + 1;
        *((_QWORD *)v140 + v142 + 2) = v143 & 0xFFFFFFFFFFFFFFF0;
        sub_22E3BB0B8((uint64_t)&v943);
        sub_22F0B3B50((uint64_t)&v943, (void ***)&p_p, *(_DWORD *)(v894 + 24), v891, 2u);
        v144 = v943;
        if (!v943)
        {
          v144 = (llvm *)sub_22E3B8AAC(v944);
          v943 = v144;
        }
        v145 = *(unsigned __int8 *)v144;
        *((_BYTE *)v144 + v145 + 1) = 3;
        v146 = v145 + 1;
        *(_BYTE *)v144 = v145 + 1;
        *((_QWORD *)v144 + v145 + 2) = v15;
        v147 = *v20;
LABEL_208:
        v157 = *(_QWORD *)(v147 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v157 + 8) & 0xF) != 0)
        {
          v157 = (unint64_t)sub_22F10D2BC(v147);
          v146 = *(_BYTE *)v144;
        }
        v5 = v899;
        *((_BYTE *)v144 + v146 + 1) = 9;
        *(_BYTE *)v144 = v146 + 1;
        *((_QWORD *)v144 + v146 + 2) = v157 & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_172;
      }
LABEL_19:
      v4 = v894;
      a1 = *(uint64_t **)v897;
      v5 = v899;
LABEL_20:
      v898 = a1;
      v30 = *(_QWORD *)(v5 + 136);
      if ((v30 & 4) != 0)
        v31 = 0;
      else
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      v32 = *(_QWORD *)(v4 + 136);
      v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if ((v32 & 4) != 0)
        v33 = 0;
      if (v31)
        v34 = v33 == 0;
      else
        v34 = 1;
      if (!v34)
      {
        v35 = *(_QWORD *)(v31 + 56);
        v36 = *(_DWORD *)(v35 + 12) & 0x1FFFFFFF;
        v37 = *(_QWORD *)(v33 + 56);
        v38 = *(_DWORD *)(v37 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v36 && (_DWORD)v38 != 0)
        {
          v40 = (uint64_t *)(v35 + 16);
          v41 = (uint64_t *)(v37 + 16);
          v42 = 8 * v38 - 8;
          v43 = 8 * v36 - 8;
          while (1)
          {
            v44 = *v40;
            v45 = *v41;
            v46 = sub_22F0B3CCC(*v40);
            if (v46 != sub_22F0B3CCC(v45))
              break;
            if (v43)
            {
              ++v40;
              ++v41;
              v47 = v42;
              v42 -= 8;
              v43 -= 8;
              if (v47)
                continue;
            }
            goto LABEL_37;
          }
          v61 = *(_DWORD *)(v44 + 28) & 0x7F;
          v900 = v5;
          if (v44 && v61 == 38)
          {
            v62 = *(_QWORD *)(v44 + 72) >= 8uLL && (*(_QWORD *)(v44 + 72) & 6) != 2;
            v63 = v898;
          }
          else
          {
            v63 = v898;
            if (v44 && v61 == 59)
            {
              v67 = (*(_QWORD *)(v44 + 72) & 3) != 1;
              v68 = *(_QWORD *)(v44 + 72) >= 4uLL;
            }
            else
            {
              v67 = (*(_QWORD *)(v44 + 72) & 6) != 2;
              v68 = *(_QWORD *)(v44 + 72) >= 8uLL;
            }
            v62 = v68 && v67;
          }
          v80 = *(_DWORD *)(v45 + 28) & 0x7F;
          v895 = v4;
          if (v45 && v80 == 38 || !v45 || v80 != 59)
          {
            v81 = (*(_QWORD *)(v45 + 72) & 6) != 2;
            v82 = *(_QWORD *)(v45 + 72) >= 8uLL;
          }
          else
          {
            v81 = (*(_QWORD *)(v45 + 72) & 3) != 1;
            v82 = *(_QWORD *)(v45 + 72) >= 4uLL;
          }
          v83 = v82 && v81;
          v84 = *(_QWORD *)(v44 + 40);
          v85 = *(_QWORD *)(v45 + 40);
          if (v62 != v83)
            v86 = 2;
          else
            v86 = 3;
          if (v84 == v85)
            v87 = v86;
          else
            v87 = v85 != 0;
          if (v84 == v85)
            v88 = v86;
          else
            v88 = v84 != 0;
          v89 = *v63;
          *(_DWORD *)(v89 + 312) = *(_DWORD *)(v44 + 24);
          *(_DWORD *)(v89 + 316) = 2144;
          if (*(char *)(v89 + 311) < 0)
          {
            **(_BYTE **)(v89 + 288) = 0;
            *(_QWORD *)(v89 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v89 + 288) = 0;
            *(_BYTE *)(v89 + 311) = 0;
          }
          v943 = (llvm *)(v89 + 320);
          v944 = 0;
          v945 = v89;
          LOWORD(v946) = 1;
          *(_BYTE *)(v89 + 320) = 0;
          *(_DWORD *)(v89 + 664) = 0;
          v90 = *(unsigned int *)(v89 + 776);
          if ((_DWORD)v90)
          {
            v888 = v88;
            v892 = v84;
            v91 = v62;
            v92 = v87;
            v93 = v85;
            v94 = v83;
            v95 = *(_QWORD *)(v89 + 768);
            v96 = 56 * v90;
            do
            {
              if (*(char *)(v95 + v96 - 9) < 0)
                operator delete(*(void **)(v95 + v96 - 32));
              v96 -= 56;
            }
            while (v96);
            LODWORD(v90) = *(unsigned __int8 *)(v89 + 320);
            v83 = v94;
            v85 = v93;
            v87 = v92;
            v62 = v91;
            v84 = v892;
            v88 = v888;
          }
          *(_BYTE *)(v89 + 321 + v90) = 11;
          *(_DWORD *)(v89 + 776) = 0;
          *(_QWORD *)(v89 + 336 + 8 * v90) = v900;
          v97 = v928 & 0x7F;
          if (v928 < 0)
            v97 = v927;
          v98 = (v90 + 1);
          *(_BYTE *)(v89 + 321 + v98) = 2;
          *(_BYTE *)(v89 + 320) = v90 + 2;
          *(_QWORD *)(v89 + 336 + 8 * v98) = v97 == 0;
          if (v928 >= 0)
            v99 = &v926;
          else
            v99 = v926;
          if (v928 >= 0)
            v100 = v928 & 0x7F;
          else
            v100 = v927;
          v101 = sub_22E3B89A8((unsigned __int8 **)&v943, v99, v100);
          v102 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v44 + 16))(v44, v101);
          v103 = v943;
          if (!v943)
          {
            v103 = (llvm *)sub_22E3B8AAC(v944);
            v943 = v103;
          }
          sub_22E4D6448((uint64_t)v103 + 336, v102, 1);
          v104 = v943;
          if (!v943)
          {
            v104 = (llvm *)sub_22E3B8AAC(v944);
            v943 = v104;
          }
          *((_BYTE *)v104 + *(unsigned __int8 *)v104 + 1) = 2;
          v105 = v943;
          v106 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v106 + 1;
          *((_QWORD *)v105 + v106 + 2) = v88;
          *((_BYTE *)v105 + (v106 + 1) + 1) = 2;
          v107 = v943;
          v108 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v108 + 1;
          *((_QWORD *)v107 + v108 + 2) = v62;
          *((_BYTE *)v107 + (v108 + 1) + 1) = 10;
          v109 = v943;
          v110 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v110 + 1;
          *((_QWORD *)v109 + v110 + 2) = v84;
          sub_22E3BB0B8((uint64_t)&v943);
          v111 = *v898;
          *(_DWORD *)(v111 + 312) = *(_DWORD *)(v45 + 24);
          *(_DWORD *)(v111 + 316) = 2307;
          if (*(char *)(v111 + 311) < 0)
          {
            **(_BYTE **)(v111 + 288) = 0;
            *(_QWORD *)(v111 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v111 + 288) = 0;
            *(_BYTE *)(v111 + 311) = 0;
          }
          v4 = v895;
          v5 = v900;
          v943 = (llvm *)(v111 + 320);
          v944 = 0;
          v945 = v111;
          LOWORD(v946) = 1;
          *(_BYTE *)(v111 + 320) = 0;
          *(_DWORD *)(v111 + 664) = 0;
          v112 = *(unsigned int *)(v111 + 776);
          if ((_DWORD)v112)
          {
            v113 = *(_QWORD *)(v111 + 768);
            v114 = 56 * v112;
            do
            {
              if (*(char *)(v113 + v114 - 9) < 0)
                operator delete(*(void **)(v113 + v114 - 32));
              v114 -= 56;
            }
            while (v114);
          }
          *(_DWORD *)(v111 + 776) = 0;
          if (v925 >= 0)
            v115 = &__p;
          else
            v115 = __p;
          if (v925 >= 0)
            v116 = v925 & 0x7F;
          else
            v116 = v924;
          v117 = sub_22E3B89A8((unsigned __int8 **)&v943, v115, v116);
          v118 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v45 + 16))(v45, v117);
          v119 = v943;
          if (!v943)
          {
            v119 = (llvm *)sub_22E3B8AAC(v944);
            v943 = v119;
          }
          sub_22E4D6448((uint64_t)v119 + 336, v118, 1);
          v120 = v943;
          if (!v943)
          {
            v120 = (llvm *)sub_22E3B8AAC(v944);
            v943 = v120;
          }
          *((_BYTE *)v120 + *(unsigned __int8 *)v120 + 1) = 2;
          v121 = v943;
          v122 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v122 + 1;
          *((_QWORD *)v121 + v122 + 2) = v87;
          *((_BYTE *)v121 + (v122 + 1) + 1) = 2;
          v123 = v943;
          v124 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v124 + 1;
          *((_QWORD *)v123 + v124 + 2) = v83;
          *((_BYTE *)v123 + (v124 + 1) + 1) = 10;
          v125 = v943;
          v126 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v126 + 1;
          *((_QWORD *)v125 + v126 + 2) = v85;
          goto LABEL_172;
        }
      }
LABEL_37:
      v48 = v942;
      v940 = v942;
      v941 = 0x400000000;
      p_p = v939;
      v938 = 0x400000000;
      if (v5)
        v49 = v5 + 64;
      else
        v49 = 0;
      if ((*(_BYTE *)(v5 + 72) & 0x80) != 0)
        sub_22EFCC320(v5 + 64);
      for (i = *(_QWORD *)(v5 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if (sub_22F0BCB54(i, v49))
        {
          v59 = sub_22F0B3CCC(i);
          sub_22F33F6D0((uint64_t)&v940, i, v59);
        }
      }
      if ((*(_WORD *)(v4 + 72) & 0x80) != 0)
        sub_22EFCC320(v4 + 64);
      for (j = *(_QWORD *)(v4 + 80); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if (sub_22F0BCB54(j, v49))
        {
          v60 = sub_22F0B3CCC(j);
          sub_22F33F6D0((uint64_t)&p_p, j, v60);
        }
      }
      sub_22F3E9900(&v919, (uint64_t)v940, v941, (uint64_t *)p_p, v938);
      v53 = v921;
      if (v921 == 15 || v922 == 15)
      {
        if (v928 >= 0)
          v55 = &v926;
        else
          v55 = v926;
        if (v928 >= 0)
          v56 = v928 & 0x7F;
        else
          v56 = v927;
        if (v925 >= 0)
          v57 = &__p;
        else
          v57 = __p;
        if (v925 >= 0)
          v58 = v925 & 0x7F;
        else
          v58 = v924;
        sub_22F0ADE34(v898, &v919, v5, v55, v56, v4, v57, v58);
        goto LABEL_423;
      }
      if (v921 != v922)
      {
        if (v928 >= 0)
          v172 = &v926;
        else
          v172 = v926;
        if (v928 >= 0)
          v173 = v928 & 0x7F;
        else
          v173 = v927;
        if (v925 >= 0)
          v174 = &__p;
        else
          v174 = __p;
        if (v925 >= 0)
          v175 = v925 & 0x7F;
        else
          v175 = v924;
        sub_22F0AE1D0(v898, &v919, v5, v172, v173, v4, v174, v175);
        goto LABEL_423;
      }
      v135 = v919;
      v893 = v920;
      v896 = v4;
      v901 = v5;
      v918[0] = v5;
      v918[1] = &v926;
      v918[2] = v898;
      v917[0] = &__p;
      v917[1] = (void **)v898;
      switch(v921)
      {
        case 4:
          v193 = (unsigned __int8 *)(*(_QWORD *)(v919 + 40) & 0xFFFFFFFFFFFFFFFCLL);
          v194 = (unsigned __int8 *)(*(_QWORD *)(v920 + 40) & 0xFFFFFFFFFFFFFFFCLL);
          v195 = sub_22F0ACE88(v193);
          if (v195 == sub_22F0ACE88(v194))
          {
            v196 = *(_DWORD **)(v135 + 48);
            v197 = *(_DWORD **)(v893 + 48);
            if ((v196 == 0) == (v197 != 0))
            {
              if (v196)
              {
                v371 = v196[5];
                sub_22F0D4E74((uint64_t)v196);
              }
              else
              {
                v372 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                v371 = v372;
              }
              v394 = v372;
              if (v197)
              {
                v395 = v197[5];
                sub_22F0D4E74((uint64_t)v197);
              }
              else
              {
                v396 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                v395 = v396;
              }
              v397 = v396;
              sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v371, v394, 2);
              v398 = v943;
              if (!v943)
              {
                v398 = (llvm *)sub_22E3B8AAC(v944);
                v943 = v398;
              }
              v399 = *(unsigned __int8 *)v398;
              *((_BYTE *)v398 + v399 + 1) = 2;
              *(_BYTE *)v398 = v399 + 1;
              *((_QWORD *)v398 + v399 + 2) = v196 == 0;
              sub_22E3BB0B8((uint64_t)&v943);
              sub_22F0B3FCC((uint64_t)&v943, v917, v395, v397, 2);
              v400 = v943;
              v48 = v942;
              if (!v943)
              {
                v400 = (llvm *)sub_22E3B8AAC(v944);
                v943 = v400;
              }
              v401 = *(unsigned __int8 *)v400;
              *((_BYTE *)v400 + v401 + 1) = 2;
              *(_BYTE *)v400 = v401 + 1;
              *((_QWORD *)v400 + v401 + 2) = v197 == 0;
              v341 = &v943;
              goto LABEL_496;
            }
            v48 = v942;
            if (!v196)
              goto LABEL_385;
            if (!v197)
              goto LABEL_385;
            v198 = ((*v196 >> 21) & 7) * v196[4];
            v199 = ((*v197 >> 21) & 7u) * v197[4];
            if (v198 == (_DWORD)v199 && (!v198 || !memcmp(&v196[v196[1] + 5], &v197[v197[1] + 5], v199)))
              goto LABEL_385;
            v200 = v196[5];
            sub_22F0D4E74((uint64_t)v196);
            sub_22F0B3DB0((uint64_t)v914, (uint64_t)v918, v200, v201, 1);
            sub_22E3BB0B8((uint64_t)v914);
            v202 = v197[5];
            sub_22F0D4E74((uint64_t)v197);
            sub_22F0B3FCC((uint64_t)v913, v917, v202, v203, 1);
            sub_22E3BB0B8((uint64_t)v913);
          }
          else
          {
            sub_22F0D5A50((uint64_t)v193);
            v324 = v323;
            sub_22F0D4E74((uint64_t)v193);
            sub_22F0B3DB0((uint64_t)v916, (uint64_t)v918, v324, v325, 0);
            sub_22E3BB0B8((uint64_t)v916);
            sub_22F0D5A50((uint64_t)v194);
            v327 = v326;
            sub_22F0D4E74((uint64_t)v194);
            sub_22F0B3FCC((uint64_t)v915, v917, v327, v328, 0);
            sub_22E3BB0B8((uint64_t)v915);
            v48 = v942;
          }
          goto LABEL_422;
        case 5:
          if (v928 >= 0)
            v204 = &v926;
          else
            v204 = v926;
          if (v928 >= 0)
            v205 = v928 & 0x7F;
          else
            v205 = v927;
          if (v925 >= 0)
            v206 = &__p;
          else
            v206 = __p;
          if (v925 >= 0)
            v207 = v925 & 0x7F;
          else
            v207 = v924;
          if ((sub_22F0AC32C((uint64_t)v898, v5, (uint64_t)v204, v205, (uint64_t)v206, v207, v919, v920) & 1) == 0)
            goto LABEL_385;
          goto LABEL_422;
        case 6:
          if ((*(_DWORD *)(v919 + 28) & 0x7F) == 0x37)
            v176 = 1;
          else
            v176 = 2 * ((*(_DWORD *)(v919 + 28) & 0x7F) == 57);
          if ((*(_DWORD *)(v920 + 28) & 0x7F) == 0x37)
            v177 = 1;
          else
            v177 = 2 * ((*(_DWORD *)(v920 + 28) & 0x7F) == 57);
          v178 = *(_QWORD *)(v919 + 40);
          v179 = *(_QWORD *)(v920 + 40);
          if ((_DWORD)v176 != (_DWORD)v177 || v178 != v179)
          {
            v181 = *(_DWORD *)(v919 + 24);
            v182 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 16))(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v181, v182, 3);
            v183 = v943;
            if (!v943)
            {
              v183 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v183;
            }
            v184 = (char *)v183 + 1;
            v185 = *(unsigned __int8 *)v183;
            v184[v185] = 2;
            *(_BYTE *)v183 = v185 + 2;
            *((_QWORD *)v183 + v185 + 2) = v176;
            v186 = (v185 + 1);
            v184[v186] = 10;
            *((_QWORD *)v183 + v186 + 2) = v178;
            v911[1] = 0;
            v911[2] = v945;
            v911[0] = v183;
            v912 = (__int16)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            sub_22E3BB0B8((uint64_t)v911);
            v187 = *(_DWORD *)(v893 + 24);
            v188 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v187, v188, 3);
            v189 = v943;
            if (!v943)
            {
              v189 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v189;
            }
            v190 = (char *)v189 + 1;
            v191 = *(unsigned __int8 *)v189;
            v190[v191] = 2;
            *(_BYTE *)v189 = v191 + 2;
            *((_QWORD *)v189 + v191 + 2) = v177;
            v192 = (v191 + 1);
            v190[v192] = 10;
            *((_QWORD *)v189 + v192 + 2) = v179;
            v909[1] = 0;
            v909[2] = v945;
            v909[0] = v189;
            v910 = (__int16)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            sub_22E3BB0B8((uint64_t)v909);
            goto LABEL_422;
          }
          v307 = *(_QWORD *)(v919 + 80);
          v308 = *(_QWORD *)(v920 + 80);
          if (((v307 & 0x2400000) == 0x400000) != ((v308 & 0x2400000) == 0x400000))
          {
            v309 = *(_DWORD *)(v919 + 24);
            v310 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 16))(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v309, v310, 4);
            v311 = v943;
            if (!v943)
            {
              v311 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v311;
            }
            v312 = *(unsigned __int8 *)v311;
            v313 = (char *)v311 + 1;
            v313[v312] = 2;
            *((_QWORD *)v311 + v312 + 2) = v176;
            v314 = (v312 + 1);
            v313[v314] = 10;
            *(_BYTE *)v311 = v312 + 2;
            *((_QWORD *)v311 + v314 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v311;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v315 = *(unsigned __int8 *)v311;
            v313[v315] = 2;
            *(_BYTE *)v311 = v315 + 1;
            *((_QWORD *)v311 + v315 + 2) = (v307 & 0x2400000) == 0x400000;
            sub_22E3BB0B8((uint64_t)&v932);
            v316 = *(_DWORD *)(v893 + 24);
            v317 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v316, v317, 4);
            v318 = v943;
            if (!v943)
            {
              v318 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v318;
            }
            v319 = *(unsigned __int8 *)v318;
            v320 = (char *)v318 + 1;
            v320[v319] = 2;
            *((_QWORD *)v318 + v319 + 2) = v176;
            v321 = (v319 + 1);
            v320[v321] = 10;
            *(_BYTE *)v318 = v319 + 2;
            *((_QWORD *)v318 + v321 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v318;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v322 = *(unsigned __int8 *)v318;
            v320[v322] = 2;
            *(_BYTE *)v318 = v322 + 1;
            *((_QWORD *)v318 + v322 + 2) = (v308 & 0x2400000) == 0x400000;
LABEL_486:
            sub_22E3BB0B8((uint64_t)&v932);
            goto LABEL_422;
          }
          if (((v308 ^ v307) & 0x4000000) != 0)
          {
            v380 = *(_DWORD *)(v919 + 24);
            v381 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 16))(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v380, v381, 5);
            v382 = v943;
            if (!v943)
            {
              v382 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v382;
            }
            v383 = *(unsigned __int8 *)v382;
            v384 = (char *)v382 + 1;
            v384[v383] = 2;
            *((_QWORD *)v382 + v383 + 2) = v176;
            v385 = (v383 + 1);
            v384[v385] = 10;
            *(_BYTE *)v382 = v383 + 2;
            *((_QWORD *)v382 + v385 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v382;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v386 = *(unsigned __int8 *)v382;
            v384[v386] = 2;
            *(_BYTE *)v382 = v386 + 1;
            *((_QWORD *)v382 + v386 + 2) = (v307 >> 26) & 1;
            sub_22E3BB0B8((uint64_t)&v932);
            v387 = *(_DWORD *)(v893 + 24);
            v388 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v387, v388, 5);
            v389 = v943;
            if (!v943)
            {
              v389 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v389;
            }
            v390 = *(unsigned __int8 *)v389;
            v391 = (char *)v389 + 1;
            v391[v390] = 2;
            *((_QWORD *)v389 + v390 + 2) = v176;
            v392 = (v390 + 1);
            v391[v392] = 10;
            *(_BYTE *)v389 = v390 + 2;
            *((_QWORD *)v389 + v392 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v389;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v393 = *(unsigned __int8 *)v389;
            v391[v393] = 2;
            *(_BYTE *)v389 = v393 + 1;
            *((_QWORD *)v389 + v393 + 2) = (v308 >> 26) & 1;
            goto LABEL_486;
          }
          v353 = (v307 >> 18);
          v354 = (v308 >> 18);
          if (((v354 | v353) & 1) != 0
            && ((((v308 >> 19) ^ (v307 >> 19)) & 1) != 0 || ((v354 ^ v353) & 1) != 0))
          {
            v450 = *(_DWORD *)(v919 + 24);
            v451 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 16))(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v450, v451, 6);
            v452 = v943;
            if (!v943)
            {
              v452 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v452;
            }
            v453 = *(unsigned __int8 *)v452;
            v454 = (char *)v452 + 1;
            v454[v453] = 2;
            v455 = (char *)v452 + 16;
            *((_QWORD *)v452 + v453 + 2) = v176;
            v456 = (v453 + 1);
            v454[v456] = 10;
            *(_BYTE *)v452 = v453 + 2;
            *((_QWORD *)v452 + v456 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v452;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v457 = *(unsigned __int8 *)v452;
            v454[v457] = 2;
            *(_QWORD *)&v455[8 * v457] = (v307 >> 19) & 1;
            v458 = (v457 + 1);
            v454[v458] = 2;
            *(_BYTE *)v452 = v457 + 2;
            *(_QWORD *)&v455[8 * v458] = (v307 >> 18) & 1;
            sub_22E3BB0B8((uint64_t)&v932);
            v459 = *(_DWORD *)(v893 + 24);
            v460 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v459, v460, 6);
            v461 = v943;
            if (!v943)
            {
              v461 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v461;
            }
            v462 = *(unsigned __int8 *)v461;
            v463 = (char *)v461 + 1;
            v463[v462] = 2;
            v464 = (char *)v461 + 16;
            *((_QWORD *)v461 + v462 + 2) = v176;
            v465 = (v462 + 1);
            v463[v465] = 10;
            *(_BYTE *)v461 = v462 + 2;
            *((_QWORD *)v461 + v465 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v461;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v466 = *(unsigned __int8 *)v461;
            v463[v466] = 2;
            *(_QWORD *)&v464[8 * v466] = (v308 >> 19) & 1;
            v467 = (v466 + 1);
            v463[v467] = 2;
            *(_BYTE *)v461 = v466 + 2;
            *(_QWORD *)&v464[8 * v467] = (v308 >> 18) & 1;
            goto LABEL_486;
          }
          v355 = (unsigned __int16)v307 & 0xE000;
          v356 = (unsigned __int16)v308 & 0xE000;
          if ((v355 == 0x4000) != (v356 == 0x4000))
          {
            v357 = *(_DWORD *)(v919 + 24);
            v358 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 16))(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v357, v358, 7);
            v359 = v943;
            if (!v943)
            {
              v359 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v359;
            }
            v360 = *(unsigned __int8 *)v359;
            v361 = (char *)v359 + 1;
            v361[v360] = 2;
            *((_QWORD *)v359 + v360 + 2) = v176;
            v362 = (v360 + 1);
            v361[v362] = 10;
            *(_BYTE *)v359 = v360 + 2;
            *((_QWORD *)v359 + v362 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v359;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v363 = *(unsigned __int8 *)v359;
            v361[v363] = 2;
            *(_BYTE *)v359 = v363 + 1;
            *((_QWORD *)v359 + v363 + 2) = v355 == 0x4000;
            sub_22E3BB0B8((uint64_t)&v932);
            v364 = *(_DWORD *)(v893 + 24);
            v365 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v364, v365, 7);
            v366 = v943;
            if (!v943)
            {
              v366 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v366;
            }
            v367 = *(unsigned __int8 *)v366;
            v368 = (char *)v366 + 1;
            v368[v367] = 2;
            *((_QWORD *)v366 + v367 + 2) = v176;
            v369 = (v367 + 1);
            v368[v369] = 10;
            *(_BYTE *)v366 = v367 + 2;
            *((_QWORD *)v366 + v369 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v366;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v370 = *(unsigned __int8 *)v366;
            v368[v370] = 2;
            *(_BYTE *)v366 = v370 + 1;
            *((_QWORD *)v366 + v370 + 2) = v356 == 0x4000;
            goto LABEL_486;
          }
          v436 = sub_22EF9550C(v919);
          v437 = sub_22EF9550C(v893);
          if (v436 != v437)
          {
            v438 = v437;
            v439 = *(_DWORD *)(v135 + 24);
            v440 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v439, v440, 8);
            v441 = v943;
            if (!v943)
            {
              v441 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v441;
            }
            v442 = *(unsigned __int8 *)v441;
            v443 = (char *)v441 + 1;
            v443[v442] = 2;
            *((_QWORD *)v441 + v442 + 2) = v176;
            v444 = (v442 + 1);
            v443[v444] = 10;
            *(_BYTE *)v441 = v442 + 2;
            *((_QWORD *)v441 + v444 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v441;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v445 = *(unsigned __int8 *)v441;
            v443[v445] = 2;
            *(_BYTE *)v441 = v445 + 1;
            *((_QWORD *)v441 + v445 + 2) = v436;
            sub_22E3BB0B8((uint64_t)&v932);
            v446 = *(_DWORD *)(v893 + 24);
            v447 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            v448 = v446;
            v449 = 8;
LABEL_541:
            sub_22F0B3FCC((uint64_t)&v943, v917, v448, v447, v449);
            v513 = v943;
            if (!v943)
            {
              v513 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v513;
            }
            v514 = *(unsigned __int8 *)v513;
            v515 = (char *)v513 + 1;
            v515[v514] = 2;
            v516 = (char *)v513 + 16;
            *((_QWORD *)v513 + v514 + 2) = v176;
            v517 = (v514 + 1);
            v515[v517] = 10;
            *(_BYTE *)v513 = v514 + 2;
            *((_QWORD *)v513 + v517 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v513;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v518 = *(unsigned __int8 *)v513;
            v519 = v438;
            v515[v518] = 2;
LABEL_544:
            *(_BYTE *)v513 = v518 + 1;
            *(_QWORD *)&v516[8 * v518] = v519;
            goto LABEL_632;
          }
          v502 = sub_22E8FB7BC(v135);
          v503 = sub_22E8FB7BC(v893);
          if (v502 != v503)
          {
            v438 = v503;
            v505 = *(_DWORD *)(v135 + 24);
            v506 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v505, v506, 9);
            v507 = v943;
            if (!v943)
            {
              v507 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v507;
            }
            v508 = *(unsigned __int8 *)v507;
            v509 = (char *)v507 + 1;
            v509[v508] = 2;
            *((_QWORD *)v507 + v508 + 2) = v176;
            v510 = (v508 + 1);
            v509[v510] = 10;
            *(_BYTE *)v507 = v508 + 2;
            *((_QWORD *)v507 + v510 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v507;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v511 = *(unsigned __int8 *)v507;
            v509[v511] = 2;
            *(_BYTE *)v507 = v511 + 1;
            *((_QWORD *)v507 + v511 + 2) = v502;
            sub_22E3BB0B8((uint64_t)&v932);
            v512 = *(_DWORD *)(v893 + 24);
            v447 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            v448 = v512;
            v449 = 9;
            goto LABEL_541;
          }
          v580 = *(_QWORD *)(v135 + 80);
          v581 = *(_QWORD *)(v893 + 80);
          if (((v581 ^ v580) & 0x20000) != 0)
          {
            v685 = *(_DWORD *)(v135 + 24);
            v686 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v685, v686, 10);
            v687 = v943;
            if (!v943)
            {
              v687 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v687;
            }
            v688 = *(unsigned __int8 *)v687;
            v689 = (char *)v687 + 1;
            v689[v688] = 2;
            *((_QWORD *)v687 + v688 + 2) = v176;
            v690 = (v688 + 1);
            v689[v690] = 10;
            *(_BYTE *)v687 = v688 + 2;
            *((_QWORD *)v687 + v690 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v687;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v691 = *(unsigned __int8 *)v687;
            v689[v691] = 2;
            *(_BYTE *)v687 = v691 + 1;
            *((_QWORD *)v687 + v691 + 2) = (v580 >> 17) & 1;
            sub_22E3BB0B8((uint64_t)&v932);
            v692 = *(_DWORD *)(v893 + 24);
            v693 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v692, v693, 10);
            v513 = v943;
            if (!v943)
            {
              v513 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v513;
            }
            v694 = *(unsigned __int8 *)v513;
            v695 = (char *)v513 + 1;
            v695[v694] = 2;
            v516 = (char *)v513 + 16;
            *((_QWORD *)v513 + v694 + 2) = v176;
            v696 = (v694 + 1);
            v695[v696] = 10;
            *(_BYTE *)v513 = v694 + 2;
            *((_QWORD *)v513 + v696 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v513;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v518 = *(unsigned __int8 *)v513;
            v519 = (v581 >> 17) & 1;
            v695[v518] = 2;
            goto LABEL_544;
          }
          v582 = &v926;
          if (v928 < 0)
            v582 = v926;
          v583 = v928 & 0x7F;
          if (v928 < 0)
            v583 = v927;
          v584 = &__p;
          if (v925 < 0)
            v584 = __p;
          v585 = (void *)*v898;
          v586 = v925 & 0x7F;
          if (v925 < 0)
            v586 = v924;
          v943 = (llvm *)*v898;
          v944 = (uint64_t)&v906;
          v945 = v901;
          v946 = v582;
          *(_QWORD *)&v947 = v583;
          *((_QWORD *)&v947 + 1) = v135;
          v932 = v585;
          v933 = (uint64_t)&v906;
          v934 = (uint64_t)v584;
          v935 = v586;
          v936 = v893;
          v587 = *(_QWORD *)(*(_QWORD *)(v135 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v587 && *(_BYTE *)(v587 + 16) == 26
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v587 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v587 = sub_22F10CF48(v587)) != 0)
          {
            v588 = (unsigned __int16)(*(_QWORD *)(v587 + 16) >> 38);
          }
          else
          {
            v588 = 0;
          }
          v890 = v588;
          v589 = *(_QWORD *)(*(_QWORD *)(v893 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v589 && *(_BYTE *)(v589 + 16) == 26
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v589 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v589 = sub_22F10CF48(v589)) != 0)
          {
            v590 = (unsigned __int16)(*(_QWORD *)(v589 + 16) >> 38);
          }
          else
          {
            v590 = 0;
          }
          if ((_DWORD)v890 != v590)
          {
            v707 = v590;
            sub_22F0BB8CC((uint64_t)&v929, (uint64_t *)&v943, 0);
            v708 = (_BYTE *)v929;
            if (!(_QWORD)v929)
            {
              v708 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
              *(_QWORD *)&v929 = v708;
            }
            v709 = *v708;
            v708[v709 + 1] = 3;
            *v708 = v709 + 1;
            *(_QWORD *)&v708[8 * v709 + 16] = v890;
            sub_22E3BB0B8((uint64_t)&v929);
            sub_22F0BBB34((uint64_t)&v929, (uint64_t *)&v932, 0);
            v710 = (_BYTE *)v929;
            if (!(_QWORD)v929)
            {
              v710 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
              *(_QWORD *)&v929 = v710;
            }
            v711 = *v710;
            v710[v711 + 1] = 3;
            *v710 = v711 + 1;
            *(_QWORD *)&v710[8 * v711 + 16] = v707;
LABEL_731:
            v665 = (void **)&v929;
LABEL_633:
            sub_22E3BB0B8((uint64_t)v665);
            v48 = v942;
            goto LABEL_422;
          }
          if ((_DWORD)v890)
          {
            v591 = 0;
            while (1)
            {
              v592 = *(_QWORD *)(*(_QWORD *)(v135 + 120) + 8 * v591);
              v593 = *(_QWORD *)(*(_QWORD *)(v893 + 120) + 8 * v591);
              v594 = *(_QWORD *)(v592 + 48);
              v595 = *(_QWORD *)(v593 + 48);
              if (v594 != v595)
              {
                v596 = sub_22F0ACDAC(*(_QWORD *)(v592 + 48));
                if (v596 != sub_22F0ACDAC(v595))
                  break;
              }
              v597 = *(_QWORD *)(v592 + 40);
              v598 = *(_QWORD *)(v593 + 40);
              if (v597 != v598)
              {
                sub_22F0BB8CC((uint64_t)&v929, (uint64_t *)&v943, 2u);
                v712 = (_BYTE *)v929;
                if (!(_QWORD)v929)
                {
                  v712 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                  *(_QWORD *)&v929 = v712;
                }
                v713 = v712 + 1;
                v714 = *v712;
                v713[v714] = 3;
                *v712 = v714 + 2;
                v715 = v712 + 16;
                *(_QWORD *)&v715[8 * v714] = v591 + 1;
                v716 = (v714 + 1);
                v713[v716] = 10;
                *(_QWORD *)&v715[8 * v716] = v597;
                sub_22E3BB0B8((uint64_t)&v929);
                sub_22F0BBB34((uint64_t)&v929, (uint64_t *)&v932, 2u);
                v717 = (_BYTE *)v929;
                if (!(_QWORD)v929)
                {
                  v717 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                  *(_QWORD *)&v929 = v717;
                }
                v718 = v717 + 1;
                v719 = *v717;
                v718[v719] = 3;
                *v717 = v719 + 2;
                v720 = v717 + 16;
                *(_QWORD *)&v720[8 * v719] = v591 + 1;
                v721 = (v719 + 1);
                v718[v721] = 10;
                *(_QWORD *)&v720[8 * v721] = v598;
                goto LABEL_731;
              }
              if (v890 == ++v591)
                goto LABEL_595;
            }
            v749 = *(_QWORD *)(v594 & 0xFFFFFFFFFFFFFFF0);
            if (v749)
              v750 = *(_BYTE *)(v749 + 16) == 1;
            else
              v750 = 0;
            if (v750
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v749 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1
              && (v749 = sub_22F10CF48(*(_QWORD *)(v594 & 0xFFFFFFFFFFFFFFF0))) != 0)
            {
              sub_22F0BB8CC((uint64_t)&v929, (uint64_t *)&v943, 1u);
              v751 = (_BYTE *)v929;
              if (!(_QWORD)v929)
              {
                v751 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                *(_QWORD *)&v929 = v751;
              }
              v752 = v751 + 1;
              v753 = *v751;
              v752[v753] = 3;
              *v751 = v753 + 4;
              v754 = v751 + 16;
              *(_QWORD *)&v754[8 * v753] = v591 + 1;
              v755 = (v753 + 1);
              v752[v755] = 9;
              *(_QWORD *)&v754[8 * v755] = v594;
              v756 = (v753 + 2);
              v752[v756] = 2;
              *(_QWORD *)&v754[8 * v756] = 1;
              v757 = *(_QWORD *)(v749 + 32);
              v758 = (v753 + 3);
              v752[v758] = 9;
              *(_QWORD *)&v754[8 * v758] = v757;
            }
            else
            {
              sub_22F0BB8CC((uint64_t)&v929, (uint64_t *)&v943, 1u);
              v795 = (_BYTE *)v929;
              if (!(_QWORD)v929)
              {
                v795 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                *(_QWORD *)&v929 = v795;
              }
              v796 = v795 + 1;
              v797 = *v795;
              v796[v797] = 3;
              *v795 = v797 + 3;
              v798 = v795 + 16;
              *(_QWORD *)&v798[8 * v797] = v591 + 1;
              v799 = (v797 + 1);
              v796[v799] = 9;
              *(_QWORD *)&v798[8 * v799] = v594;
              v800 = (v797 + 2);
              v796[v800] = 2;
              *(_QWORD *)&v798[8 * v800] = 0;
            }
            sub_22E3BB0B8((uint64_t)&v929);
            v801 = *(_QWORD *)(v595 & 0xFFFFFFFFFFFFFFF0);
            if (v801)
              v802 = *(_BYTE *)(v801 + 16) == 1;
            else
              v802 = 0;
            if (v802
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v801 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1
              && (v801 = sub_22F10CF48(*(_QWORD *)(v595 & 0xFFFFFFFFFFFFFFF0))) != 0)
            {
              sub_22F0BBB34((uint64_t)&v929, (uint64_t *)&v932, 1u);
              v803 = (_BYTE *)v929;
              if (!(_QWORD)v929)
              {
                v803 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                *(_QWORD *)&v929 = v803;
              }
              v804 = v803 + 1;
              v805 = *v803;
              v804[v805] = 3;
              *v803 = v805 + 4;
              v806 = v803 + 16;
              *(_QWORD *)&v806[8 * v805] = v591 + 1;
              v807 = (v805 + 1);
              v804[v807] = 9;
              *(_QWORD *)&v806[8 * v807] = v595;
              v808 = (v805 + 2);
              v804[v808] = 2;
              *(_QWORD *)&v806[8 * v808] = 1;
              v809 = *(_QWORD *)(v801 + 32);
              v810 = (v805 + 3);
              v804[v810] = 9;
              *(_QWORD *)&v806[8 * v810] = v809;
            }
            else
            {
              sub_22F0BBB34((uint64_t)&v929, (uint64_t *)&v932, 1u);
              v811 = (_BYTE *)v929;
              if (!(_QWORD)v929)
              {
                v811 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                *(_QWORD *)&v929 = v811;
              }
              v812 = v811 + 1;
              v813 = *v811;
              v812[v813] = 3;
              *v811 = v813 + 3;
              v814 = v811 + 16;
              *(_QWORD *)&v814[8 * v813] = v591 + 1;
              v815 = (v813 + 1);
              v812[v815] = 9;
              *(_QWORD *)&v814[8 * v815] = v595;
              v816 = (v813 + 2);
              v812[v816] = 2;
              *(_QWORD *)&v814[8 * v816] = 0;
            }
            goto LABEL_731;
          }
LABEL_595:
          v599 = *(_QWORD *)(*(_QWORD *)(v135 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v599)
            v600 = *(_BYTE *)(v599 + 16) == 26;
          else
            v600 = 0;
          if (v600
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v599 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v599 = sub_22F10CF48(v599)) != 0)
          {
            v601 = *(_QWORD *)(v599 + 16);
            if ((v601 & 0x3FFFC000000000) != 0)
            {
              v602 = 0;
              v603 = (unsigned __int16)(v601 >> 38);
              while (1)
              {
                v604 = *(_QWORD *)(*(_QWORD *)(v893 + 120) + 8 * v602);
                v605 = (unsigned __int8 *)sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)(v135 + 120) + 8 * v602));
                v606 = sub_22EFBC5B4(v604);
                v607 = (unsigned __int8 *)v606;
                if ((v605 == 0) != (v606 == 0))
                  break;
                if (v605)
                  v608 = v606 == 0;
                else
                  v608 = 1;
                if (!v608)
                {
                  v609 = sub_22F0ACE88(v605);
                  if (v609 != sub_22F0ACE88(v607))
                  {
                    v764 = *(_DWORD *)(v135 + 24);
                    v765 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                    sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v764, v765, 12);
                    v766 = v943;
                    if (!v943)
                    {
                      v766 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v766;
                    }
                    v767 = *(unsigned __int8 *)v766;
                    v768 = (char *)v766 + 1;
                    v768[v767] = 2;
                    *((_QWORD *)v766 + v767 + 2) = v176;
                    v769 = (v767 + 1);
                    v768[v769] = 10;
                    *(_BYTE *)v766 = v767 + 2;
                    *((_QWORD *)v766 + v769 + 2) = v178;
                    v934 = v945;
                    v933 = 0;
                    v932 = v766;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v770 = (v602 + 1);
                    v771 = *(unsigned __int8 *)v766;
                    v768[v771] = 3;
                    *(_BYTE *)v766 = v771 + 1;
                    *((_QWORD *)v766 + v771 + 2) = v770;
                    sub_22F0D4E74((uint64_t)v605);
                    sub_22E4D6448((uint64_t)v766 + 336, v772, 1);
                    sub_22E3BB0B8((uint64_t)&v932);
                    v773 = *(_DWORD *)(v893 + 24);
                    v774 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                    sub_22F0B3FCC((uint64_t)&v943, v917, v773, v774, 12);
                    v775 = v943;
                    if (!v943)
                    {
                      v775 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v775;
                    }
                    v776 = *(unsigned __int8 *)v775;
                    v777 = (char *)v775 + 1;
                    v777[v776] = 2;
                    *((_QWORD *)v775 + v776 + 2) = v176;
                    v778 = (v776 + 1);
                    v777[v778] = 10;
                    *(_BYTE *)v775 = v776 + 2;
                    *((_QWORD *)v775 + v778 + 2) = v178;
                    v934 = v945;
                    v933 = 0;
                    v932 = v775;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v779 = *(unsigned __int8 *)v775;
                    v777[v779] = 3;
                    *(_BYTE *)v775 = v779 + 1;
                    *((_QWORD *)v775 + v779 + 2) = v770;
LABEL_713:
                    sub_22F0D4E74((uint64_t)v607);
                    v794 = v793;
                    goto LABEL_715;
                  }
                }
                if (v603 == ++v602)
                  goto LABEL_609;
              }
              v737 = *(_DWORD *)(v135 + 24);
              v738 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
              sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v737, v738, 11);
              v739 = v943;
              if (!v943)
              {
                v739 = (llvm *)sub_22E3B8AAC(v944);
                v943 = v739;
              }
              v740 = *(unsigned __int8 *)v739;
              v741 = (char *)v739 + 1;
              v741[v740] = 2;
              v742 = (char *)v739 + 16;
              *((_QWORD *)v739 + v740 + 2) = v176;
              v743 = (v740 + 1);
              v741[v743] = 10;
              *(_BYTE *)v739 = v740 + 2;
              *((_QWORD *)v739 + v743 + 2) = v178;
              v934 = v945;
              v933 = 0;
              v932 = v739;
              LOWORD(v935) = (_WORD)v946;
              v945 = 0;
              LOWORD(v946) = 0;
              sub_22E3BB0B8((uint64_t)&v943);
              v744 = (v602 + 1);
              v745 = *(unsigned __int8 *)v739;
              v741[v745] = 3;
              *(_QWORD *)&v742[8 * v745] = v744;
              v746 = (v745 + 1);
              v741[v746] = 2;
              *(_BYTE *)v739 = v745 + 2;
              *(_QWORD *)&v742[8 * v746] = v605 == 0;
              if (v605)
              {
                sub_22F0D4E74((uint64_t)v605);
                v748 = v747;
              }
              else
              {
                v748 = 0;
              }
              sub_22E4D6448((uint64_t)v739 + 336, v748, 1);
              sub_22E3BB0B8((uint64_t)&v932);
              v785 = *(_DWORD *)(v893 + 24);
              v786 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
              sub_22F0B3FCC((uint64_t)&v943, v917, v785, v786, 11);
              v775 = v943;
              if (!v943)
              {
                v775 = (llvm *)sub_22E3B8AAC(v944);
                v943 = v775;
              }
              v787 = *(unsigned __int8 *)v775;
              v788 = (char *)v775 + 1;
              v788[v787] = 2;
              v789 = (char *)v775 + 16;
              *((_QWORD *)v775 + v787 + 2) = v176;
              v790 = (v787 + 1);
              v788[v790] = 10;
              *(_BYTE *)v775 = v787 + 2;
              *((_QWORD *)v775 + v790 + 2) = v178;
              v934 = v945;
              v933 = 0;
              v932 = v775;
              LOWORD(v935) = (_WORD)v946;
              v945 = 0;
              LOWORD(v946) = 0;
              sub_22E3BB0B8((uint64_t)&v943);
              v791 = *(unsigned __int8 *)v775;
              v788[v791] = 3;
              *(_QWORD *)&v789[8 * v791] = v744;
              v792 = (v791 + 1);
              v788[v792] = 2;
              *(_BYTE *)v775 = v791 + 2;
              *(_QWORD *)&v789[8 * v792] = v607 == 0;
              if (v607)
                goto LABEL_713;
              v794 = 0;
LABEL_715:
              sub_22E4D6448((uint64_t)v775 + 336, v794, 1);
LABEL_632:
              v665 = &v932;
              goto LABEL_633;
            }
          }
LABEL_609:
          v610 = *(_QWORD *)(v135 + 144) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v135 + 144) & 6) != 4 || v610 == 0)
            v612 = 0;
          else
            v612 = *(unsigned int **)(v610 + 24);
          if ((*(_QWORD *)(v893 + 144) & 6) != 4 || (v613 = *(_QWORD *)(v893 + 144) & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            if (v612)
            {
              v616 = 0;
              v615 = 1;
              goto LABEL_617;
            }
            goto LABEL_749;
          }
          v614 = *(unsigned int **)(v613 + 24);
          v615 = v612 != 0;
          v616 = v614 != 0;
          if (v615 != v616)
          {
LABEL_617:
            v617 = *(_DWORD *)(v135 + 24);
            v618 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v617, v618, 13);
            v619 = v943;
            if (!v943)
            {
              v619 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v619;
            }
            v620 = *(unsigned __int8 *)v619;
            v621 = (char *)v619 + 1;
            v621[v620] = 2;
            *((_QWORD *)v619 + v620 + 2) = v176;
            v622 = (v620 + 1);
            v621[v622] = 10;
            *(_BYTE *)v619 = v620 + 2;
            *((_QWORD *)v619 + v622 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v619;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v623 = *(unsigned __int8 *)v619;
            v621[v623] = 2;
            *(_BYTE *)v619 = v623 + 1;
            *((_QWORD *)v619 + v623 + 2) = v615;
            sub_22E3BB0B8((uint64_t)&v932);
            v624 = *(_DWORD *)(v893 + 24);
            v625 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v624, v625, 13);
            v626 = v943;
            if (!v943)
            {
              v626 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v626;
            }
            v627 = *(unsigned __int8 *)v626;
            v628 = (char *)v626 + 1;
            v628[v627] = 2;
            *((_QWORD *)v626 + v627 + 2) = v176;
            v629 = (v627 + 1);
            v628[v629] = 10;
            *(_BYTE *)v626 = v627 + 2;
            *((_QWORD *)v626 + v629 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v626;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v630 = *(unsigned __int8 *)v626;
            v628[v630] = 2;
            *(_BYTE *)v626 = v630 + 1;
            *((_QWORD *)v626 + v630 + 2) = v616;
            goto LABEL_632;
          }
          if (!v612 || !v614)
            goto LABEL_749;
          v943 = (llvm *)&v945;
          v944 = 0x800000000;
          v732 = v612[2];
          if ((_DWORD)v732)
          {
            v733 = *(_QWORD *)v612;
            v734 = 24 * v732;
            v735 = (unsigned int *)(*(_QWORD *)v612 + 4);
            do
            {
              if (*(v735 - 1) == 8)
              {
                sub_22F0BAB6C((uint64_t)&v943, (uint64_t)v943 + 8 * v944, *(_QWORD *)(v735 + 1), v504, *(_QWORD *)(v735 + 1) + 24 * *v735);
              }
              else
              {
                v736 = v944;
                if (v944 >= (unint64_t)HIDWORD(v944))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v736 = v944;
                }
                *((_QWORD *)v943 + v736) = v733;
                LODWORD(v944) = v944 + 1;
              }
              v735 += 6;
              v733 += 24;
              v734 -= 24;
            }
            while (v734);
          }
          v932 = &v934;
          v933 = 0x800000000;
          v759 = v614[2];
          if ((_DWORD)v759)
          {
            v760 = *(_QWORD *)v614;
            v761 = 24 * v759;
            v762 = (unsigned int *)(*(_QWORD *)v614 + 4);
            do
            {
              if (*(v762 - 1) == 8)
              {
                sub_22F0BAB6C((uint64_t)&v932, (uint64_t)v932 + 8 * v933, *(_QWORD *)(v762 + 1), v504, *(_QWORD *)(v762 + 1) + 24 * *v762);
              }
              else
              {
                v763 = v933;
                if (v933 >= (unint64_t)HIDWORD(v933))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v763 = v933;
                }
                *((_QWORD *)v932 + v763) = v760;
                LODWORD(v933) = v933 + 1;
              }
              v762 += 6;
              v760 += 24;
              v761 -= 24;
            }
            while (v761);
            v780 = v933;
            if ((_DWORD)v944 == (_DWORD)v933)
            {
              if ((_DWORD)v933)
              {
                v781 = 0;
                while (1)
                {
                  v782 = (__int128 *)*((_QWORD *)v943 + v781);
                  v783 = (__int128 *)*((_QWORD *)v932 + v781);
                  v784 = sub_22F0B4148(v782);
                  if (v784 != sub_22F0B4148(v783))
                    break;
                  if (v780 == ++v781)
                    goto LABEL_743;
                }
                v869 = *(_DWORD *)(v135 + 24);
                v870 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                sub_22F0B3DB0((uint64_t)&v929, (uint64_t)v918, v869, v870, 15);
                v871 = (_BYTE *)v929;
                if (!(_QWORD)v929)
                {
                  v871 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                  *(_QWORD *)&v929 = v871;
                }
                v872 = v871 + 1;
                v873 = *v871;
                v872[v873] = 2;
                *v871 = v873 + 2;
                *(_QWORD *)&v871[8 * v873 + 16] = v176;
                v874 = (v873 + 1);
                v872[v874] = 10;
                *(_QWORD *)&v871[8 * v874 + 16] = v178;
                v907 = v930;
                v906 = (unint64_t)v871;
                v908 = v931;
                v930 = 0;
                v931 = 0;
                sub_22E3BB0B8((uint64_t)&v929);
                sub_22F0EFFCC((uint64_t)&v906, (uint64_t)v782);
                v875 = (unsigned __int8 *)v906;
                if (!(_QWORD)v906)
                {
                  v875 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v906 + 1));
                  *(_QWORD *)&v906 = v875;
                }
                v833 = v781 + 1;
                v875[*v875 + 1] = 3;
                v876 = v906;
                v877 = *(unsigned __int8 *)v906;
                *(_BYTE *)v906 = v877 + 1;
                *(_QWORD *)(v876 + 8 * v877 + 16) = v833;
                sub_22E3BB0B8((uint64_t)&v906);
                v878 = *(_DWORD *)(v893 + 24);
                v879 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                sub_22F0B3FCC((uint64_t)&v929, v917, v878, v879, 15);
                v880 = (_BYTE *)v929;
                if (!(_QWORD)v929)
                {
                  v880 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
                  *(_QWORD *)&v929 = v880;
                }
                v881 = v880 + 1;
                v882 = *v880;
                v881[v882] = 2;
                *v880 = v882 + 2;
                *(_QWORD *)&v880[8 * v882 + 16] = v176;
                v883 = (v882 + 1);
                v881[v883] = 10;
                *(_QWORD *)&v880[8 * v883 + 16] = v178;
                v907 = v930;
                v906 = (unint64_t)v880;
                v908 = v931;
                v930 = 0;
                v931 = 0;
                sub_22E3BB0B8((uint64_t)&v929);
                sub_22F0EFFCC((uint64_t)&v906, (uint64_t)v783);
                goto LABEL_740;
              }
LABEL_743:
              v837 = 1;
              goto LABEL_744;
            }
          }
          else if (!(_DWORD)v944)
          {
            goto LABEL_743;
          }
          v817 = *(_DWORD *)(v135 + 24);
          v818 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
          sub_22F0B3DB0((uint64_t)&v929, (uint64_t)v918, v817, v818, 14);
          v819 = (_BYTE *)v929;
          if (!(_QWORD)v929)
          {
            v819 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
            *(_QWORD *)&v929 = v819;
          }
          v820 = v819 + 1;
          v821 = *v819;
          v820[v821] = 2;
          *v819 = v821 + 2;
          *(_QWORD *)&v819[8 * v821 + 16] = v176;
          v822 = (v821 + 1);
          v820[v822] = 10;
          *(_QWORD *)&v819[8 * v822 + 16] = v178;
          v907 = v930;
          v906 = (unint64_t)v819;
          v908 = v931;
          v930 = 0;
          v931 = 0;
          sub_22E3BB0B8((uint64_t)&v929);
          v823 = v944;
          v824 = (unsigned __int8 *)v906;
          if (!(_QWORD)v906)
          {
            v824 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v906 + 1));
            *(_QWORD *)&v906 = v824;
          }
          v824[*v824 + 1] = 3;
          v825 = v906;
          v826 = *(unsigned __int8 *)v906;
          *(_BYTE *)v906 = v826 + 1;
          *(_QWORD *)(v825 + 8 * v826 + 16) = v823;
          sub_22E3BB0B8((uint64_t)&v906);
          v827 = *(_DWORD *)(v893 + 24);
          v828 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
          sub_22F0B3FCC((uint64_t)&v929, v917, v827, v828, 14);
          v829 = (_BYTE *)v929;
          if (!(_QWORD)v929)
          {
            v829 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v929 + 1));
            *(_QWORD *)&v929 = v829;
          }
          v830 = v829 + 1;
          v831 = *v829;
          v830[v831] = 2;
          *v829 = v831 + 2;
          *(_QWORD *)&v829[8 * v831 + 16] = v176;
          v832 = (v831 + 1);
          v830[v832] = 10;
          *(_QWORD *)&v829[8 * v832 + 16] = v178;
          v907 = v930;
          v906 = (unint64_t)v829;
          v908 = v931;
          v930 = 0;
          v931 = 0;
          sub_22E3BB0B8((uint64_t)&v929);
          v833 = v933;
LABEL_740:
          v834 = (unsigned __int8 *)v906;
          if (!(_QWORD)v906)
          {
            v834 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v906 + 1));
            *(_QWORD *)&v906 = v834;
          }
          v834[*v834 + 1] = 3;
          v835 = v906;
          v836 = *(unsigned __int8 *)v906;
          *(_BYTE *)v906 = v836 + 1;
          *(_QWORD *)(v835 + 8 * v836 + 16) = v833;
          sub_22E3BB0B8((uint64_t)&v906);
          v837 = 0;
LABEL_744:
          if (v932 != &v934)
            free(v932);
          if (v943 != (llvm *)&v945)
            free(v943);
          v48 = v942;
          if (!v837)
            goto LABEL_422;
LABEL_749:
          v944 = 0;
          v943 = 0;
          LODWORD(v945) = 0;
          v947 = xmmword_22F44E310;
          v946 = v948;
          v949 = v951;
          v950 = 0x2000000000;
          sub_22F0BEC9C((uint64_t)&v943, v135, 1);
          v838 = sub_22F0BCA28((uint64_t)&v943);
          if (v949 != v951)
            free(v949);
          if (v946 != v948)
            free(v946);
          llvm::deallocate_buffer(v943, (void *)(16 * v945));
          v839 = *(_DWORD *)(v135 + 136);
          v944 = 0;
          v943 = 0;
          LODWORD(v945) = 0;
          v947 = xmmword_22F44E310;
          v946 = v948;
          v949 = v951;
          v950 = 0x2000000000;
          sub_22F0BEC9C((uint64_t)&v943, v893, 1);
          v840 = sub_22F0BCA28((uint64_t)&v943);
          if (v949 != v951)
            free(v949);
          if (v946 != v948)
            free(v946);
          llvm::deallocate_buffer(v943, (void *)(16 * v945));
          v841 = *(_DWORD *)(v893 + 136);
          if ((v838 != v839) != (v840 != v841))
          {
            v842 = *(_DWORD *)(v135 + 24);
            v843 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v842, v843, 16);
            v844 = v943;
            if (!v943)
            {
              v844 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v844;
            }
            v845 = v838 != v839;
            v846 = *(unsigned __int8 *)v844;
            v847 = (char *)v844 + 1;
            v847[v846] = 2;
            *((_QWORD *)v844 + v846 + 2) = v176;
            v848 = (v846 + 1);
            v847[v848] = 10;
            *(_BYTE *)v844 = v846 + 2;
            *((_QWORD *)v844 + v848 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v844;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v849 = *(unsigned __int8 *)v844;
            v847[v849] = 2;
            *(_BYTE *)v844 = v849 + 1;
            *((_QWORD *)v844 + v849 + 2) = v845;
            sub_22E3BB0B8((uint64_t)&v932);
            v850 = *(_DWORD *)(v893 + 24);
            v851 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v850, v851, 16);
            v852 = v943;
            if (!v943)
            {
              v852 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v852;
            }
            v853 = *(unsigned __int8 *)v852;
            v854 = (char *)v852 + 1;
            v854[v853] = 2;
            *((_QWORD *)v852 + v853 + 2) = v176;
            v855 = (v853 + 1);
            v854[v855] = 10;
            *(_BYTE *)v852 = v853 + 2;
            *((_QWORD *)v852 + v855 + 2) = v178;
            v934 = v945;
            v933 = 0;
            v932 = v852;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v856 = *(unsigned __int8 *)v852;
            v854[v856] = 2;
            *(_BYTE *)v852 = v856 + 1;
            *((_QWORD *)v852 + v856 + 2) = v840 != v841;
            goto LABEL_632;
          }
          v48 = v942;
          if (v838 != v839 && v840 != v841)
          {
            v857 = *(_DWORD *)(v135 + 24);
            v858 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v857, v858, 17);
            v859 = v943;
            if (!v943)
            {
              v859 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v859;
            }
            v860 = (char *)v859 + 1;
            v861 = *(unsigned __int8 *)v859;
            v860[v861] = 2;
            *(_BYTE *)v859 = v861 + 2;
            *((_QWORD *)v859 + v861 + 2) = v176;
            v862 = (v861 + 1);
            v860[v862] = 10;
            *((_QWORD *)v859 + v862 + 2) = v178;
            v904[1] = 0;
            v904[2] = v945;
            v904[0] = v859;
            v905 = (__int16)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            sub_22E3BB0B8((uint64_t)v904);
            v863 = *(_DWORD *)(v893 + 24);
            v864 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v863, v864, 17);
            v865 = v943;
            if (!v943)
            {
              v865 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v865;
            }
            v866 = (char *)v865 + 1;
            v867 = *(unsigned __int8 *)v865;
            v866[v867] = 2;
            *(_BYTE *)v865 = v867 + 2;
            *((_QWORD *)v865 + v867 + 2) = v176;
            v868 = (v867 + 1);
            v866[v868] = 10;
            *((_QWORD *)v865 + v868 + 2) = v178;
            v902[1] = 0;
            v902[2] = v945;
            v902[0] = v865;
            v903 = (__int16)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v665 = (void **)v902;
            goto LABEL_633;
          }
LABEL_385:
          v271 = *v898;
          *(_DWORD *)(v271 + 312) = *(_DWORD *)(v135 + 24);
          *(_DWORD *)(v271 + 316) = 2138;
          if (*(char *)(v271 + 311) < 0)
          {
            **(_BYTE **)(v271 + 288) = 0;
            *(_QWORD *)(v271 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v271 + 288) = 0;
            *(_BYTE *)(v271 + 311) = 0;
          }
          v943 = (llvm *)(v271 + 320);
          v944 = 0;
          v945 = v271;
          LOWORD(v946) = 1;
          *(_BYTE *)(v271 + 320) = 0;
          *(_DWORD *)(v271 + 664) = 0;
          v272 = *(unsigned int *)(v271 + 776);
          if ((_DWORD)v272)
          {
            v273 = *(_QWORD *)(v271 + 768);
            v274 = 56 * v272;
            do
            {
              if (*(char *)(v273 + v274 - 9) < 0)
                operator delete(*(void **)(v273 + v274 - 32));
              v274 -= 56;
            }
            while (v274);
            LODWORD(v272) = *(unsigned __int8 *)(v271 + 320);
          }
          *(_BYTE *)(v271 + 321 + v272) = 11;
          *(_DWORD *)(v271 + 776) = 0;
          *(_QWORD *)(v271 + 336 + 8 * v272) = v901;
          v275 = v928 & 0x7F;
          if (v928 < 0)
            v275 = v927;
          v276 = (v272 + 1);
          *(_BYTE *)(v271 + 321 + v276) = 2;
          *(_BYTE *)(v271 + 320) = v272 + 2;
          *(_QWORD *)(v271 + 336 + 8 * v276) = v275 == 0;
          if (v928 >= 0)
            v277 = &v926;
          else
            v277 = v926;
          if (v928 >= 0)
            v278 = v928 & 0x7F;
          else
            v278 = v927;
          v279.n128_f64[0] = sub_22E3B89A8((unsigned __int8 **)&v943, v277, v278);
          v280 = v943;
          if (!v943)
          {
            v280 = (llvm *)sub_22E3B8AAC(v944);
            v943 = v280;
          }
          *((_BYTE *)v280 + *(unsigned __int8 *)v280 + 1) = 2;
          v281 = v943;
          v282 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v282 + 1;
          *((_QWORD *)v281 + v282 + 2) = v53;
          v283 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v135 + 16))(v135, v279);
          sub_22E4D6448((uint64_t)v281 + 336, v283, 1);
          sub_22E3BB0B8((uint64_t)&v943);
          v284 = *v898;
          *(_DWORD *)(v284 + 312) = *(_DWORD *)(v893 + 24);
          *(_DWORD *)(v284 + 316) = 2301;
          if (*(char *)(v284 + 311) < 0)
          {
            **(_BYTE **)(v284 + 288) = 0;
            *(_QWORD *)(v284 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v284 + 288) = 0;
            *(_BYTE *)(v284 + 311) = 0;
          }
          v943 = (llvm *)(v284 + 320);
          v944 = 0;
          v945 = v284;
          LOWORD(v946) = 1;
          *(_BYTE *)(v284 + 320) = 0;
          *(_DWORD *)(v284 + 664) = 0;
          v285 = *(unsigned int *)(v284 + 776);
          if ((_DWORD)v285)
          {
            v286 = *(_QWORD *)(v284 + 768);
            v287 = 56 * v285;
            do
            {
              if (*(char *)(v286 + v287 - 9) < 0)
                operator delete(*(void **)(v286 + v287 - 32));
              v287 -= 56;
            }
            while (v287);
          }
          *(_DWORD *)(v284 + 776) = 0;
          if (v925 >= 0)
            v288 = &__p;
          else
            v288 = __p;
          if (v925 >= 0)
            v289 = v925 & 0x7F;
          else
            v289 = v924;
          v290.n128_f64[0] = sub_22E3B89A8((unsigned __int8 **)&v943, v288, v289);
          v291 = v943;
          if (!v943)
          {
            v291 = (llvm *)sub_22E3B8AAC(v944);
            v943 = v291;
          }
          *((_BYTE *)v291 + *(unsigned __int8 *)v291 + 1) = 2;
          v292 = v943;
          v293 = *(unsigned __int8 *)v943;
          *(_BYTE *)v943 = v293 + 1;
          *((_QWORD *)v292 + v293 + 2) = v53;
          v294 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v893 + 16))(v893, v290);
          sub_22E4D6448((uint64_t)v292 + 336, v294, 1);
LABEL_421:
          sub_22E3BB0B8((uint64_t)&v943);
LABEL_422:
          v4 = v896;
          v5 = v901;
LABEL_423:
          if (p_p != v939)
            free(p_p);
          if (v940 != v48)
            free(v940);
          goto LABEL_173;
        case 7:
        case 8:
          if (v928 >= 0)
            v136 = &v926;
          else
            v136 = v926;
          if (v928 >= 0)
            v137 = v928 & 0x7F;
          else
            v137 = v927;
          if (v925 >= 0)
            v138 = &__p;
          else
            v138 = __p;
          if (v925 >= 0)
            v139 = v925 & 0x7F;
          else
            v139 = v924;
          if ((sub_22F0ACF7C((uint64_t)v898, v5, (uint64_t)v136, v137, (uint64_t)v138, v139, v919, v920, v921 == 7) & 1) != 0)
            goto LABEL_422;
          goto LABEL_385;
        case 9:
          if (v928 >= 0)
            v267 = &v926;
          else
            v267 = v926;
          if (v928 >= 0)
            v268 = v928 & 0x7F;
          else
            v268 = v927;
          if (v925 >= 0)
            v269 = &__p;
          else
            v269 = __p;
          if (v925 >= 0)
            v270 = v925 & 0x7F;
          else
            v270 = v924;
          if ((sub_22F0AD4D4((uint64_t)v898, v5, (uint64_t)v267, v268, (uint64_t)v269, v270, v919, v920) & 1) == 0)
            goto LABEL_385;
          goto LABEL_422;
        case 10:
          v295 = *(_QWORD *)(v919 + 40);
          if ((v295 & 4) != 0)
            v296 = 0;
          else
            v296 = v295 & 0xFFFFFFFFFFFFFFF8;
          v297 = *(_QWORD *)(v920 + 40);
          if ((v297 & 4) != 0)
            v298 = 0;
          else
            v298 = v297 & 0xFFFFFFFFFFFFFFF8;
          if (v296 && v298)
          {
            v299 = *(_DWORD *)(v919 + 56);
            v300 = sub_22EFDA014(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v299, v300, 20);
            v301 = v943;
            if (!v943)
            {
              v301 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v301;
            }
            v302 = *(unsigned __int8 *)v301;
            *((_BYTE *)v301 + v302 + 1) = 11;
            *(_BYTE *)v301 = v302 + 1;
            *((_QWORD *)v301 + v302 + 2) = v296;
            sub_22E3BB0B8((uint64_t)&v943);
            v303 = *(_DWORD *)(v893 + 56);
            v304 = sub_22EFDA014(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v303, v304, 20);
            v305 = v943;
            if (!v943)
            {
              v305 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v305;
            }
            v306 = *(unsigned __int8 *)v305;
            *((_BYTE *)v305 + v306 + 1) = 11;
          }
          else
          {
            v342 = (uint64_t *)(v295 & 0xFFFFFFFFFFFFFFF8 & (v295 << 61 >> 63));
            v343 = (unint64_t *)(v297 & 0xFFFFFFFFFFFFFFF8 & (v297 << 61 >> 63));
            if (v342)
              v344 = v343 == 0;
            else
              v344 = 1;
            if (v344)
            {
              v345 = *(_DWORD *)(v919 + 56);
              v346 = sub_22EFDA014(v919);
              sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v345, v346, 18);
              v347 = v943;
              if (!v943)
              {
                v347 = (llvm *)sub_22E3B8AAC(v944);
                v943 = v347;
              }
              v348 = *(unsigned __int8 *)v347;
              *((_BYTE *)v347 + v348 + 1) = 2;
              *(_BYTE *)v347 = v348 + 1;
              *((_QWORD *)v347 + v348 + 2) = v342 == 0;
              sub_22E3BB0B8((uint64_t)&v943);
              v349 = *(_DWORD *)(v893 + 56);
              v350 = sub_22EFDA014(v893);
              sub_22F0B3FCC((uint64_t)&v943, v917, v349, v350, 18);
              v351 = v943;
              if (!v943)
              {
                v351 = (llvm *)sub_22E3B8AAC(v944);
                v943 = v351;
              }
              v352 = *(unsigned __int8 *)v351;
              *((_BYTE *)v351 + v352 + 1) = 2;
              *(_BYTE *)v351 = v352 + 1;
              *((_QWORD *)v351 + v352 + 2) = v343 == 0;
              goto LABEL_421;
            }
            v373 = *v342;
            v298 = *v343;
            v374 = *(_DWORD *)(v919 + 56);
            v375 = sub_22EFDA014(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v374, v375, 19);
            v376 = v943;
            if (!v943)
            {
              v376 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v376;
            }
            v377 = *(unsigned __int8 *)v376;
            *((_BYTE *)v376 + v377 + 1) = 9;
            *(_BYTE *)v376 = v377 + 1;
            *((_QWORD *)v376 + v377 + 2) = v373;
            sub_22E3BB0B8((uint64_t)&v943);
            v378 = *(_DWORD *)(v893 + 56);
            v379 = sub_22EFDA014(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v378, v379, 19);
            v305 = v943;
            if (!v943)
            {
              v305 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v305;
            }
            v306 = *(unsigned __int8 *)v305;
            *((_BYTE *)v305 + v306 + 1) = 9;
          }
          *(_BYTE *)v305 = v306 + 1;
          *((_QWORD *)v305 + v306 + 2) = v298;
          goto LABEL_421;
        case 11:
          v208 = *(_QWORD *)(v919 + 56);
          v209 = *(_QWORD *)(v920 + 56);
          v210 = *(_DWORD *)(v208 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v210 == (*(_DWORD *)(v209 + 12) & 0x1FFFFFFF))
          {
            if (!(_DWORD)v210)
              goto LABEL_385;
            v211 = 0;
            v885 = v209 + 16;
            v886 = v208 + 16;
            while (1)
            {
              v212 = *(_QWORD *)(v886 + 8 * v211);
              v889 = v211;
              v213 = *(_QWORD *)(v885 + 8 * v211);
              v214 = *(_DWORD *)(v212 + 28);
              v215 = *(_DWORD *)(v213 + 28);
              if (((v215 ^ v214) & 0x7F) != 0)
                break;
              v216 = *(_QWORD *)(v212 + 40) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)(v212 + 40) & 7) != 0 || v216 == 0)
              {
                v220 = 0;
                v219 = "";
              }
              else
              {
                v218 = *(_DWORD **)(v216 + 16);
                v221 = *v218;
                v219 = (const char *)(v218 + 4);
                v220 = v221;
              }
              v222 = *(_QWORD *)(v213 + 40) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)(v213 + 40) & 7) != 0 || v222 == 0)
              {
                if (v220)
                  goto LABEL_497;
              }
              else
              {
                v224 = *(int **)(v222 + 16);
                v225 = *v224;
                v52 = v224 + 4;
                if (v220 != v225 || v220 && memcmp(v219, v52, v220))
                {
LABEL_497:
                  v402 = v213;
                  v248 = v48;
                  v403 = *(_DWORD *)(v135 + 24);
                  v404 = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v135 + 16))(v135, v52);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v403, v404, 23);
                  v405 = v943;
                  if (!v943)
                  {
                    v405 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v405;
                  }
                  v406 = *(unsigned __int8 *)v405;
                  v407 = (char *)v405 + 1;
                  *((_BYTE *)v405 + v406 + 1) = 11;
                  *(_BYTE *)v405 = v406 + 1;
                  v408 = (char *)v405 + 16;
                  *((_QWORD *)v405 + v406 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v405;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v409 = *(unsigned __int8 *)v405;
                  *((_BYTE *)v405 + v409 + 1) = 3;
                  *((_QWORD *)v405 + v409 + 2) = v889 + 1;
                  v410 = *(_QWORD *)(v212 + 40);
                  v412 = (v410 & 7) == 0 && v410 > 7;
                  v413 = (v409 + 1);
                  v407[v413] = 2;
                  *(_QWORD *)&v408[8 * v413] = v412;
                  v414 = (v409 + 2);
                  v407[v414] = 11;
                  *(_BYTE *)v405 = v409 + 3;
                  *(_QWORD *)&v408[8 * v414] = v212;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v415 = *(_DWORD *)(v893 + 24);
                  v416 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v415, v416, 23);
                  v417 = v943;
                  if (!v943)
                  {
                    v417 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v417;
                  }
                  v418 = *(unsigned __int8 *)v417;
                  v419 = (char *)v417 + 1;
                  *((_BYTE *)v417 + v418 + 1) = 11;
                  *(_BYTE *)v417 = v418 + 1;
                  v420 = (char *)v417 + 16;
                  *((_QWORD *)v417 + v418 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v417;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v421 = *(unsigned __int8 *)v417;
                  *((_BYTE *)v417 + v421 + 1) = 3;
                  *((_QWORD *)v417 + v421 + 2) = v889 + 1;
                  v422 = *(_QWORD *)(v402 + 40);
                  v424 = (v422 & 7) == 0 && v422 > 7;
                  v425 = (v421 + 1);
                  v419[v425] = 2;
                  *(_QWORD *)&v420[8 * v425] = v424;
                  v426 = (v421 + 2);
                  v419[v426] = 11;
                  *(_BYTE *)v417 = v421 + 3;
                  *(_QWORD *)&v420[8 * v426] = v402;
                  goto LABEL_649;
                }
              }
              if ((v214 & 0x7F) == 0x26 && (v215 & 0x7F) == 0x26)
              {
                v226 = *(_QWORD *)(v212 + 72);
                v227 = v226 & 6;
                v229 = v226 > 7 && v227 != 2;
                v230 = *(_QWORD *)(v213 + 72);
                v231 = v230 & 6;
                v233 = v230 > 7 && v231 != 2;
                if (v229 != v233)
                {
                  v468 = *(_DWORD *)(v135 + 24);
                  v469 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v468, v469, 24);
                  v470 = v943;
                  if (!v943)
                  {
                    v470 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v470;
                  }
                  v471 = *(unsigned __int8 *)v470;
                  v472 = (char *)v470 + 1;
                  *((_BYTE *)v470 + v471 + 1) = 11;
                  *(_BYTE *)v470 = v471 + 1;
                  v473 = (char *)v470 + 16;
                  *((_QWORD *)v470 + v471 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v470;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v474 = *(unsigned __int8 *)v470;
                  v472[v474] = 3;
                  *(_QWORD *)&v473[8 * v474] = v889 + 1;
                  v475 = (v474 + 1);
                  v472[v475] = 2;
                  *(_BYTE *)v470 = v474 + 2;
                  *(_QWORD *)&v473[8 * v475] = v229;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v476 = *(_DWORD *)(v893 + 24);
                  v477 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v476, v477, 24);
                  v478 = v943;
                  if (!v943)
                  {
                    v478 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v478;
                  }
                  v479 = *(unsigned __int8 *)v478;
                  v480 = (char *)v478 + 1;
                  *((_BYTE *)v478 + v479 + 1) = 11;
                  *(_BYTE *)v478 = v479 + 1;
                  v481 = (char *)v478 + 16;
                  *((_QWORD *)v478 + v479 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v478;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v482 = *(unsigned __int8 *)v478;
                  v480[v482] = 3;
                  *(_QWORD *)&v481[8 * v482] = v889 + 1;
                  v483 = (v482 + 1);
                  v480[v483] = 2;
                  *(_BYTE *)v478 = v482 + 2;
                  *(_QWORD *)&v481[8 * v483] = v233;
                  goto LABEL_562;
                }
                v234 = v213;
                if (v229 && v233)
                {
                  v235 = (unint64_t *)(v226 & 0xFFFFFFFFFFFFFFF8);
                  if (v227 == 4 && v235)
                    v235 = (unint64_t *)v235[1];
                  v236 = (unint64_t *)(v230 & 0xFFFFFFFFFFFFFFF8);
                  if (v231 == 4 && v236)
                    v236 = (unint64_t *)v236[1];
                  v237 = *v235;
                  v238 = *v236;
                  v239 = sub_22F0ACDAC(*v235);
                  if (v239 != sub_22F0ACDAC(v238))
                  {
                    v528 = *(_DWORD *)(v135 + 24);
                    v529 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                    sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v528, v529, 25);
                    v530 = v943;
                    if (!v943)
                    {
                      v530 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v530;
                    }
                    v531 = *(unsigned __int8 *)v530;
                    v532 = (char *)v530 + 1;
                    *((_BYTE *)v530 + v531 + 1) = 11;
                    *(_BYTE *)v530 = v531 + 1;
                    v533 = (char *)v530 + 16;
                    *((_QWORD *)v530 + v531 + 2) = v135;
                    v934 = v945;
                    v933 = 0;
                    v932 = v530;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v534 = *(unsigned __int8 *)v530;
                    v532[v534] = 3;
                    *(_QWORD *)&v533[8 * v534] = v889 + 1;
                    v535 = (v534 + 1);
                    v532[v535] = 9;
                    *(_BYTE *)v530 = v534 + 2;
                    *(_QWORD *)&v533[8 * v535] = v237;
                    sub_22E3BB0B8((uint64_t)&v932);
                    v536 = *(_DWORD *)(v893 + 24);
                    v537 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                    sub_22F0B3FCC((uint64_t)&v943, v917, v536, v537, 25);
                    v538 = v943;
                    if (!v943)
                    {
                      v538 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v538;
                    }
                    v539 = *(unsigned __int8 *)v538;
                    v540 = (char *)v538 + 1;
                    *((_BYTE *)v538 + v539 + 1) = 11;
                    *(_BYTE *)v538 = v539 + 1;
                    v541 = (char *)v538 + 16;
                    *((_QWORD *)v538 + v539 + 2) = v893;
                    v934 = v945;
                    v933 = 0;
                    v932 = v538;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v542 = *(unsigned __int8 *)v538;
                    v540[v542] = 3;
                    *(_QWORD *)&v541[8 * v542] = v889 + 1;
                    v543 = (v542 + 1);
                    v540[v543] = 9;
                    *(_BYTE *)v538 = v542 + 2;
                    *(_QWORD *)&v541[8 * v543] = v238;
                    goto LABEL_562;
                  }
                }
                if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v212 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 33) ^ *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v234 + 48) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                               + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                       + 33)) & 0x80) != 0)
                {
                  v484 = *(_DWORD *)(v135 + 24);
                  v485 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v484, v485, 27);
                  v486 = v943;
                  if (!v943)
                  {
                    v486 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v486;
                  }
                  v487 = *(unsigned __int8 *)v486;
                  v488 = (char *)v486 + 1;
                  *((_BYTE *)v486 + v487 + 1) = 11;
                  *(_BYTE *)v486 = v487 + 1;
                  v489 = (char *)v486 + 16;
                  *((_QWORD *)v486 + v487 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v486;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v490 = *(unsigned __int8 *)v486;
                  v488[v490] = 3;
                  *(_BYTE *)v486 = v490 + 1;
                  *(_QWORD *)&v489[8 * v490] = v889 + 1;
                  v491 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v212 + 48) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                                            + 32) >> 15) & 1;
                  v492 = (v490 + 1);
                  v488[v492] = 2;
                  *(_BYTE *)v486 = v490 + 2;
                  *(_QWORD *)&v489[8 * v492] = v491;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v493 = *(_DWORD *)(v893 + 24);
                  v494 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v493, v494, 27);
                  v495 = v943;
                  if (!v943)
                  {
                    v495 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v495;
                  }
                  v496 = *(unsigned __int8 *)v495;
                  v497 = (char *)v495 + 1;
                  *((_BYTE *)v495 + v496 + 1) = 11;
                  *(_BYTE *)v495 = v496 + 1;
                  v498 = (char *)v495 + 16;
                  *((_QWORD *)v495 + v496 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v495;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v499 = *(unsigned __int8 *)v495;
                  v497[v499] = 3;
                  *(_BYTE *)v495 = v499 + 1;
                  *(_QWORD *)&v498[8 * v499] = v889 + 1;
                  v500 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v234 + 48) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                                            + 32) >> 15) & 1;
                  v501 = (v499 + 1);
                  v497[v501] = 2;
                  *(_BYTE *)v495 = v499 + 2;
                  *(_QWORD *)&v498[8 * v501] = v500;
                  goto LABEL_562;
                }
                v213 = v234;
                v214 = *(_DWORD *)(v212 + 28);
                v48 = v942;
              }
              if ((v214 & 0x7F) == 0x20 && (*(_DWORD *)(v213 + 28) & 0x7F) == 0x20)
              {
                v240 = *(_QWORD *)(v212 + 56);
                v884 = v213;
                v241 = *(_QWORD *)(v213 + 56);
                v944 = 0;
                v943 = 0;
                LODWORD(v945) = 0;
                v947 = xmmword_22F44E310;
                v946 = v948;
                v949 = v951;
                v950 = 0x2000000000;
                sub_22F0BC984((uint64_t)&v943, v240);
                v242 = sub_22F0BCA28((uint64_t)&v943);
                if (v949 != v951)
                  free(v949);
                if (v946 != v948)
                  free(v946);
                llvm::deallocate_buffer(v943, (void *)(16 * v945));
                v944 = 0;
                v943 = 0;
                LODWORD(v945) = 0;
                v947 = xmmword_22F44E310;
                v946 = v948;
                v949 = v951;
                v950 = 0x2000000000;
                sub_22F0BC984((uint64_t)&v943, v241);
                v243 = sub_22F0BCA28((uint64_t)&v943);
                if (v949 != v951)
                  free(v949);
                if (v946 != v948)
                  free(v946);
                llvm::deallocate_buffer(v943, (void *)(16 * v945));
                if (v242 != v243)
                {
                  v544 = *(_DWORD *)(v135 + 24);
                  v545 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v544, v545, 26);
                  v546 = v943;
                  if (!v943)
                  {
                    v546 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v546;
                  }
                  v547 = *(unsigned __int8 *)v546;
                  *((_BYTE *)v546 + v547 + 1) = 11;
                  *(_BYTE *)v546 = v547 + 1;
                  *((_QWORD *)v546 + v547 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v546;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v548 = *(unsigned __int8 *)v546;
                  *((_BYTE *)v546 + v548 + 1) = 3;
                  *(_BYTE *)v546 = v548 + 1;
                  *((_QWORD *)v546 + v548 + 2) = v889 + 1;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v549 = *(_DWORD *)(v893 + 24);
                  v550 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v549, v550, 26);
                  v551 = v943;
                  if (!v943)
                  {
                    v551 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v551;
                  }
                  v552 = *(unsigned __int8 *)v551;
                  *((_BYTE *)v551 + v552 + 1) = 11;
                  *(_BYTE *)v551 = v552 + 1;
                  *((_QWORD *)v551 + v552 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v551;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v553 = *(unsigned __int8 *)v551;
                  *((_BYTE *)v551 + v553 + 1) = 3;
                  *(_BYTE *)v551 = v553 + 1;
                  *((_QWORD *)v551 + v553 + 2) = v889 + 1;
                  goto LABEL_562;
                }
                v245 = *(_QWORD *)(v212 + 72) > 7uLL && (*(_QWORD *)(v212 + 72) & 6) != 2;
                v213 = v884;
                v247 = *(_QWORD *)(v884 + 72) > 7uLL && (*(_QWORD *)(v884 + 72) & 6) != 2;
                v48 = v942;
                if (v245 != v247)
                {
                  v564 = *(_DWORD *)(v135 + 24);
                  v565 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v564, v565, 24);
                  v566 = v943;
                  if (!v943)
                  {
                    v566 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v566;
                  }
                  v567 = *(unsigned __int8 *)v566;
                  v568 = (char *)v566 + 1;
                  *((_BYTE *)v566 + v567 + 1) = 11;
                  *(_BYTE *)v566 = v567 + 1;
                  v569 = (char *)v566 + 16;
                  *((_QWORD *)v566 + v567 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v566;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v570 = *(unsigned __int8 *)v566;
                  v568[v570] = 3;
                  *(_QWORD *)&v569[8 * v570] = v889 + 1;
                  v571 = (v570 + 1);
                  v568[v571] = 2;
                  *(_BYTE *)v566 = v570 + 2;
                  *(_QWORD *)&v569[8 * v571] = v245;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v572 = *(_DWORD *)(v893 + 24);
                  v573 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v572, v573, 24);
                  v574 = v943;
                  if (!v943)
                  {
                    v574 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v574;
                  }
                  v575 = *(unsigned __int8 *)v574;
                  v576 = (char *)v574 + 1;
                  *((_BYTE *)v574 + v575 + 1) = 11;
                  *(_BYTE *)v574 = v575 + 1;
                  v577 = (char *)v574 + 16;
                  *((_QWORD *)v574 + v575 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v574;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v578 = *(unsigned __int8 *)v574;
                  v576[v578] = 3;
                  *(_QWORD *)&v577[8 * v578] = v889 + 1;
                  v579 = (v578 + 1);
                  v576[v579] = 2;
                  *(_BYTE *)v574 = v578 + 2;
                  *(_QWORD *)&v577[8 * v579] = v247;
                  goto LABEL_632;
                }
                if (v245 && v247)
                {
                  v264 = sub_22F259350(v212);
                  v929 = *(_OWORD *)v264;
                  v930 = *((_QWORD *)v264 + 2);
                  v265 = sub_22F259350(v884);
                  v906 = *(_OWORD *)v265;
                  v907 = *((_QWORD *)v265 + 2);
                  v266 = sub_22F0B4148(&v929);
                  if (v266 != sub_22F0B4148(&v906))
                  {
                    v722 = *(_DWORD *)(v135 + 24);
                    v723 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                    sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v722, v723, 25);
                    v724 = v943;
                    if (!v943)
                    {
                      v724 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v724;
                    }
                    v725 = *(unsigned __int8 *)v724;
                    *((_BYTE *)v724 + v725 + 1) = 11;
                    *(_BYTE *)v724 = v725 + 1;
                    *((_QWORD *)v724 + v725 + 2) = v135;
                    v934 = v945;
                    v933 = 0;
                    v932 = v724;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v726 = *(unsigned __int8 *)v724;
                    *((_BYTE *)v724 + v726 + 1) = 3;
                    *(_BYTE *)v724 = v726 + 1;
                    *((_QWORD *)v724 + v726 + 2) = v889 + 1;
                    sub_22F0EFFCC((uint64_t)&v932, (uint64_t)&v929);
                    sub_22E3BB0B8((uint64_t)&v932);
                    v727 = *(_DWORD *)(v893 + 24);
                    v728 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                    sub_22F0B3FCC((uint64_t)&v943, v917, v727, v728, 25);
                    v729 = v943;
                    if (!v943)
                    {
                      v729 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v729;
                    }
                    v730 = *(unsigned __int8 *)v729;
                    *((_BYTE *)v729 + v730 + 1) = 11;
                    *(_BYTE *)v729 = v730 + 1;
                    *((_QWORD *)v729 + v730 + 2) = v893;
                    v934 = v945;
                    v933 = 0;
                    v932 = v729;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v731 = *(unsigned __int8 *)v729;
                    *((_BYTE *)v729 + v731 + 1) = 3;
                    *(_BYTE *)v729 = v731 + 1;
                    *((_QWORD *)v729 + v731 + 2) = v889 + 1;
                    sub_22F0EFFCC((uint64_t)&v932, (uint64_t)&v906);
LABEL_562:
                    sub_22E3BB0B8((uint64_t)&v932);
                    v48 = v942;
                    goto LABEL_422;
                  }
                  v48 = v942;
                  v213 = v884;
                }
                if ((*(_BYTE *)(v212 + 80) != 0) != (*(_BYTE *)(v213 + 80) != 0))
                {
                  v647 = *(_DWORD *)(v135 + 24);
                  v648 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v647, v648, 27);
                  v649 = v943;
                  if (!v943)
                  {
                    v649 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v649;
                  }
                  v650 = *(unsigned __int8 *)v649;
                  v651 = (char *)v649 + 1;
                  *((_BYTE *)v649 + v650 + 1) = 11;
                  *(_BYTE *)v649 = v650 + 1;
                  v652 = (char *)v649 + 16;
                  *((_QWORD *)v649 + v650 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v649;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v653 = *(unsigned __int8 *)v649;
                  v651[v653] = 3;
                  *(_QWORD *)&v652[8 * v653] = v889 + 1;
                  v654 = *(unsigned __int8 *)(v212 + 80);
                  v655 = (v653 + 1);
                  v651[v655] = 2;
                  *(_BYTE *)v649 = v653 + 2;
                  *(_QWORD *)&v652[8 * v655] = v654;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v656 = *(_DWORD *)(v893 + 24);
                  v657 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v656, v657, 27);
                  v658 = v943;
                  if (!v943)
                  {
                    v658 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v658;
                  }
                  v659 = *(unsigned __int8 *)v658;
                  v660 = (char *)v658 + 1;
                  *((_BYTE *)v658 + v659 + 1) = 11;
                  *(_BYTE *)v658 = v659 + 1;
                  v661 = (char *)v658 + 16;
                  *((_QWORD *)v658 + v659 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v658;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v662 = *(unsigned __int8 *)v658;
                  v660[v662] = 3;
                  *(_QWORD *)&v661[8 * v662] = v889 + 1;
                  v663 = *(unsigned __int8 *)(v884 + 80);
                  v664 = (v662 + 1);
                  v660[v664] = 2;
                  *(_BYTE *)v658 = v662 + 2;
                  *(_QWORD *)&v661[8 * v664] = v663;
                  goto LABEL_632;
                }
                v214 = *(_DWORD *)(v212 + 28);
              }
              if ((v214 & 0x7F) == 0x3B && (*(_DWORD *)(v213 + 28) & 0x7F) == 0x3B)
              {
                v248 = v48;
                v249 = *(_QWORD *)(v213 + 48);
                v250 = sub_22F0ACDAC(*(_QWORD *)(v212 + 48));
                if (v250 != sub_22F0ACDAC(v249))
                {
                  v554 = *(_DWORD *)(v135 + 24);
                  v555 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v554, v555, 26);
                  v556 = v943;
                  if (!v943)
                  {
                    v556 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v556;
                  }
                  v557 = *(unsigned __int8 *)v556;
                  *((_BYTE *)v556 + v557 + 1) = 11;
                  *(_BYTE *)v556 = v557 + 1;
                  *((_QWORD *)v556 + v557 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v556;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v558 = *(unsigned __int8 *)v556;
                  *((_BYTE *)v556 + v558 + 1) = 3;
                  *(_BYTE *)v556 = v558 + 1;
                  *((_QWORD *)v556 + v558 + 2) = v889 + 1;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v559 = *(_DWORD *)(v893 + 24);
                  v560 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v559, v560, 26);
                  v561 = v943;
                  if (!v943)
                  {
                    v561 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v561;
                  }
                  v562 = *(unsigned __int8 *)v561;
                  *((_BYTE *)v561 + v562 + 1) = 11;
                  *(_BYTE *)v561 = v562 + 1;
                  *((_QWORD *)v561 + v562 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v561;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v563 = *(unsigned __int8 *)v561;
                  *((_BYTE *)v561 + v563 + 1) = 3;
                  *(_BYTE *)v561 = v563 + 1;
                  *((_QWORD *)v561 + v563 + 2) = v889 + 1;
                  goto LABEL_649;
                }
                v251 = *(_QWORD *)(v212 + 72);
                v252 = v251 & 3;
                v254 = v251 > 3 && v252 != 1;
                v255 = *(_QWORD *)(v213 + 72);
                v256 = v255 & 3;
                v258 = v255 > 3 && v256 != 1;
                if (v254 != v258)
                {
                  v631 = *(_DWORD *)(v135 + 24);
                  v632 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v631, v632, 24);
                  v633 = v943;
                  if (!v943)
                  {
                    v633 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v633;
                  }
                  v634 = *(unsigned __int8 *)v633;
                  v635 = (char *)v633 + 1;
                  *((_BYTE *)v633 + v634 + 1) = 11;
                  *(_BYTE *)v633 = v634 + 1;
                  v636 = (char *)v633 + 16;
                  *((_QWORD *)v633 + v634 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v633;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v637 = *(unsigned __int8 *)v633;
                  v635[v637] = 3;
                  *(_QWORD *)&v636[8 * v637] = v889 + 1;
                  v638 = (v637 + 1);
                  v635[v638] = 2;
                  *(_BYTE *)v633 = v637 + 2;
                  *(_QWORD *)&v636[8 * v638] = v254;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v639 = *(_DWORD *)(v893 + 24);
                  v640 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v639, v640, 24);
                  v641 = v943;
                  if (!v943)
                  {
                    v641 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v641;
                  }
                  v642 = *(unsigned __int8 *)v641;
                  v643 = (char *)v641 + 1;
                  *((_BYTE *)v641 + v642 + 1) = 11;
                  *(_BYTE *)v641 = v642 + 1;
                  v644 = (char *)v641 + 16;
                  *((_QWORD *)v641 + v642 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v641;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v645 = *(unsigned __int8 *)v641;
                  v643[v645] = 3;
                  *(_QWORD *)&v644[8 * v645] = v889 + 1;
                  v646 = (v645 + 1);
                  v643[v646] = 2;
                  *(_BYTE *)v641 = v645 + 2;
                  *(_QWORD *)&v644[8 * v646] = v258;
                  goto LABEL_649;
                }
                if (v254 && v258)
                {
                  v259 = v251 & 0xFFFFFFFFFFFFFFFCLL;
                  if (v252 == 2 && v259)
                    v259 = *(_QWORD *)(v259 + 8);
                  v260 = v255 & 0xFFFFFFFFFFFFFFFCLL;
                  v261 = v213;
                  if (v256 == 2 && v260)
                    v260 = *(_QWORD *)(v260 + 8);
                  v262 = v259;
                  v263 = sub_22F0ACE88((unsigned __int8 *)v259);
                  v34 = v263 == sub_22F0ACE88((unsigned __int8 *)v260);
                  v213 = v261;
                  if (!v34)
                  {
                    v697 = *(_DWORD *)(v135 + 24);
                    v698 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                    sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v697, v698, 25);
                    v699 = v943;
                    if (!v943)
                    {
                      v699 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v699;
                    }
                    v700 = *(unsigned __int8 *)v699;
                    *((_BYTE *)v699 + v700 + 1) = 11;
                    *(_BYTE *)v699 = v700 + 1;
                    *((_QWORD *)v699 + v700 + 2) = v135;
                    v934 = v945;
                    v933 = 0;
                    v932 = v699;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v701 = *(unsigned __int8 *)v699;
                    *((_BYTE *)v699 + v701 + 1) = 3;
                    *(_BYTE *)v699 = v701 + 1;
                    *((_QWORD *)v699 + v701 + 2) = v889 + 1;
                    LODWORD(v943) = 7;
                    v944 = v262;
                    sub_22F0EFFCC((uint64_t)&v932, (uint64_t)&v943);
                    sub_22E3BB0B8((uint64_t)&v932);
                    v702 = *(_DWORD *)(v893 + 24);
                    v703 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                    sub_22F0B3FCC((uint64_t)&v943, v917, v702, v703, 25);
                    v704 = v943;
                    if (!v943)
                    {
                      v704 = (llvm *)sub_22E3B8AAC(v944);
                      v943 = v704;
                    }
                    v705 = *(unsigned __int8 *)v704;
                    *((_BYTE *)v704 + v705 + 1) = 11;
                    *(_BYTE *)v704 = v705 + 1;
                    *((_QWORD *)v704 + v705 + 2) = v893;
                    v934 = v945;
                    v933 = 0;
                    v932 = v704;
                    LOWORD(v935) = (_WORD)v946;
                    v945 = 0;
                    LOWORD(v946) = 0;
                    sub_22E3BB0B8((uint64_t)&v943);
                    v706 = *(unsigned __int8 *)v704;
                    *((_BYTE *)v704 + v706 + 1) = 3;
                    *(_BYTE *)v704 = v706 + 1;
                    *((_QWORD *)v704 + v706 + 2) = v889 + 1;
                    LODWORD(v943) = 7;
                    v944 = v260;
                    sub_22F0EFFCC((uint64_t)&v932, (uint64_t)&v943);
LABEL_649:
                    sub_22E3BB0B8((uint64_t)&v932);
                    v48 = v248;
                    goto LABEL_422;
                  }
                }
                v48 = v248;
                if ((*(_BYTE *)(v212 + 80) != 0) != (*(_BYTE *)(v213 + 80) != 0))
                {
                  v666 = v213;
                  v667 = *(_DWORD *)(v135 + 24);
                  v668 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v667, v668, 27);
                  v669 = v943;
                  if (!v943)
                  {
                    v669 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v669;
                  }
                  v670 = *(unsigned __int8 *)v669;
                  v671 = (char *)v669 + 1;
                  *((_BYTE *)v669 + v670 + 1) = 11;
                  *(_BYTE *)v669 = v670 + 1;
                  v672 = (char *)v669 + 16;
                  *((_QWORD *)v669 + v670 + 2) = v135;
                  v934 = v945;
                  v933 = 0;
                  v932 = v669;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v673 = *(unsigned __int8 *)v669;
                  v671[v673] = 3;
                  *(_QWORD *)&v672[8 * v673] = v889 + 1;
                  v674 = *(unsigned __int8 *)(v212 + 80);
                  v675 = (v673 + 1);
                  v671[v675] = 2;
                  *(_BYTE *)v669 = v673 + 2;
                  *(_QWORD *)&v672[8 * v675] = v674;
                  sub_22E3BB0B8((uint64_t)&v932);
                  v676 = *(_DWORD *)(v893 + 24);
                  v677 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
                  sub_22F0B3FCC((uint64_t)&v943, v917, v676, v677, 27);
                  v678 = v943;
                  if (!v943)
                  {
                    v678 = (llvm *)sub_22E3B8AAC(v944);
                    v943 = v678;
                  }
                  v679 = *(unsigned __int8 *)v678;
                  v680 = (char *)v678 + 1;
                  *((_BYTE *)v678 + v679 + 1) = 11;
                  *(_BYTE *)v678 = v679 + 1;
                  v681 = (char *)v678 + 16;
                  *((_QWORD *)v678 + v679 + 2) = v893;
                  v934 = v945;
                  v933 = 0;
                  v932 = v678;
                  LOWORD(v935) = (_WORD)v946;
                  v945 = 0;
                  LOWORD(v946) = 0;
                  sub_22E3BB0B8((uint64_t)&v943);
                  v682 = *(unsigned __int8 *)v678;
                  v680[v682] = 3;
                  *(_QWORD *)&v681[8 * v682] = v889 + 1;
                  v683 = *(unsigned __int8 *)(v666 + 80);
                  v684 = (v682 + 1);
                  v680[v684] = 2;
                  *(_BYTE *)v678 = v682 + 2;
                  *(_QWORD *)&v681[8 * v684] = v683;
                  goto LABEL_649;
                }
              }
              v211 = v889 + 1;
              if (v210 == v889 + 1)
                goto LABEL_385;
            }
            v427 = *(_QWORD *)(v885 + 8 * v211);
            v428 = *(_DWORD *)(v135 + 24);
            v429 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v428, v429, 22);
            v430 = v943;
            if (!v943)
            {
              v430 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v430;
            }
            v431 = *(unsigned __int8 *)v430;
            *((_BYTE *)v430 + v431 + 1) = 11;
            *(_BYTE *)v430 = v431 + 1;
            *((_QWORD *)v430 + v431 + 2) = v135;
            v934 = v945;
            v933 = 0;
            v932 = v430;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v432 = *(unsigned __int8 *)v430;
            *((_BYTE *)v430 + v432 + 1) = 3;
            v433 = v432 + 1;
            *(_BYTE *)v430 = v432 + 1;
            *((_QWORD *)v430 + v432 + 2) = v889 + 1;
            v434 = *(_DWORD *)(v212 + 28) & 0x7F;
            if (v434 == 32)
              v435 = 2;
            else
              v435 = v434 != 38;
            *((_BYTE *)v430 + v433 + 1) = 2;
            *(_BYTE *)v430 = v432 + 2;
            *((_QWORD *)v430 + v433 + 2) = v435;
            sub_22E3BB0B8((uint64_t)&v932);
            v520 = *(_DWORD *)(v893 + 24);
            v521 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v520, v521, 22);
            v522 = v943;
            if (!v943)
            {
              v522 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v522;
            }
            v523 = *(unsigned __int8 *)v522;
            *((_BYTE *)v522 + v523 + 1) = 11;
            *(_BYTE *)v522 = v523 + 1;
            *((_QWORD *)v522 + v523 + 2) = v893;
            v934 = v945;
            v933 = 0;
            v932 = v522;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v524 = *(unsigned __int8 *)v522;
            *((_BYTE *)v522 + v524 + 1) = 3;
            v525 = v524 + 1;
            *(_BYTE *)v522 = v524 + 1;
            *((_QWORD *)v522 + v524 + 2) = v889 + 1;
            v526 = *(_DWORD *)(v427 + 28) & 0x7F;
            if (v526 == 32)
              v527 = 2;
            else
              v527 = v526 != 38;
            *((_BYTE *)v522 + v525 + 1) = 2;
            *(_BYTE *)v522 = v524 + 2;
            *((_QWORD *)v522 + v525 + 2) = v527;
          }
          else
          {
            v329 = *(_DWORD *)(v919 + 24);
            v330 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 16))(v919);
            sub_22F0B3DB0((uint64_t)&v943, (uint64_t)v918, v329, v330, 21);
            v331 = v943;
            if (!v943)
            {
              v331 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v331;
            }
            v332 = *(unsigned __int8 *)v331;
            *((_BYTE *)v331 + v332 + 1) = 11;
            *(_BYTE *)v331 = v332 + 1;
            *((_QWORD *)v331 + v332 + 2) = v135;
            v934 = v945;
            v933 = 0;
            v932 = v331;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v333 = *(_DWORD *)(v208 + 12) & 0x1FFFFFFF;
            v334 = *(unsigned __int8 *)v331;
            *((_BYTE *)v331 + v334 + 1) = 3;
            *(_BYTE *)v331 = v334 + 1;
            *((_QWORD *)v331 + v334 + 2) = v333;
            sub_22E3BB0B8((uint64_t)&v932);
            v335 = *(_DWORD *)(v893 + 24);
            v336 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v893 + 16))(v893);
            sub_22F0B3FCC((uint64_t)&v943, v917, v335, v336, 21);
            v337 = v943;
            if (!v943)
            {
              v337 = (llvm *)sub_22E3B8AAC(v944);
              v943 = v337;
            }
            v338 = *(unsigned __int8 *)v337;
            *((_BYTE *)v337 + v338 + 1) = 11;
            *(_BYTE *)v337 = v338 + 1;
            *((_QWORD *)v337 + v338 + 2) = v893;
            v934 = v945;
            v933 = 0;
            v932 = v337;
            LOWORD(v935) = (_WORD)v946;
            v945 = 0;
            LOWORD(v946) = 0;
            sub_22E3BB0B8((uint64_t)&v943);
            v339 = *(_DWORD *)(v209 + 12) & 0x1FFFFFFF;
            v340 = *(unsigned __int8 *)v337;
            *((_BYTE *)v337 + v340 + 1) = 3;
            *(_BYTE *)v337 = v340 + 1;
            *((_QWORD *)v337 + v340 + 2) = v339;
          }
          v341 = &v932;
LABEL_496:
          sub_22E3BB0B8((uint64_t)v341);
          goto LABEL_422;
        default:
          goto LABEL_385;
      }
    }
    v69 = *(_DWORD *)(v5 + 24);
    if ((_DWORD)v9)
    {
      v70 = *(_QWORD *)(v8 + 24);
      if ((v70 & 1) != 0)
        v70 = sub_22EFCF510(v8);
      v71 = *(unsigned int *)v70 | ((unint64_t)*(unsigned int *)(v70 + 24 * (v9 - 1) + 4) << 32);
    }
    else
    {
      v71 = 0;
    }
    sub_22F0B3970((uint64_t)&v943, (uint64_t *)&v940, v69, v71, 1u);
    v127 = v943;
    if (!v943)
    {
      v127 = (llvm *)sub_22E3B8AAC(v944);
      v943 = v127;
    }
    v128 = *(unsigned __int8 *)v127;
    *((_BYTE *)v127 + v128 + 1) = 3;
    *(_BYTE *)v127 = v128 + 1;
    *((_QWORD *)v127 + v128 + 2) = v11;
    sub_22E3BB0B8((uint64_t)&v943);
    v129 = *(_DWORD *)(v4 + 24);
    v130 = *(_DWORD *)(a4 + 16);
    if (v130)
    {
      v131 = *(_QWORD *)(a4 + 24);
      if ((v131 & 1) != 0)
        v131 = sub_22EFCF510(a4);
      v77 = *(unsigned int *)v131 | ((unint64_t)*(unsigned int *)(v131 + 24 * (v130 - 1) + 4) << 32);
    }
    else
    {
      v77 = 0;
    }
    v78 = v129;
    v79 = 1;
  }
  else
  {
    v64 = *(_DWORD *)(v5 + 24);
    if ((_DWORD)v9)
    {
      v65 = *(_QWORD *)(v8 + 24);
      if ((v65 & 1) != 0)
        v65 = sub_22EFCF510(v8);
      v66 = *(unsigned int *)v65 | ((unint64_t)*(unsigned int *)(v65 + 24 * (v9 - 1) + 4) << 32);
    }
    else
    {
      v66 = 0;
    }
    sub_22F0B3970((uint64_t)&v943, (uint64_t *)&v940, v64, v66, 0);
    v72 = v943;
    if (!v943)
    {
      v72 = (llvm *)sub_22E3B8AAC(v944);
      v943 = v72;
    }
    v73 = *(unsigned __int8 *)v72;
    *((_BYTE *)v72 + v73 + 1) = 3;
    *(_BYTE *)v72 = v73 + 1;
    *((_QWORD *)v72 + v73 + 2) = v9;
    sub_22E3BB0B8((uint64_t)&v943);
    v74 = *(_DWORD *)(v4 + 24);
    v75 = *(_DWORD *)(a4 + 16);
    if (v75)
    {
      v76 = *(_QWORD *)(a4 + 24);
      if ((v76 & 1) != 0)
        v76 = sub_22EFCF510(a4);
      v77 = *(unsigned int *)v76 | ((unint64_t)*(unsigned int *)(v76 + 24 * (v75 - 1) + 4) << 32);
    }
    else
    {
      v77 = 0;
    }
    v78 = v74;
    v79 = 0;
  }
  sub_22F0B3B50((uint64_t)&v943, (void ***)&p_p, v78, v77, v79);
  v132 = v943;
  if (!v943)
  {
    v132 = (llvm *)sub_22E3B8AAC(v944);
    v943 = v132;
  }
  v133 = *(unsigned __int8 *)v132;
  *((_BYTE *)v132 + v133 + 1) = 3;
  *(_BYTE *)v132 = v133 + 1;
  *((_QWORD *)v132 + v133 + 2) = v10;
LABEL_172:
  sub_22E3BB0B8((uint64_t)&v943);
LABEL_173:
  if (v925 < 0)
    operator delete(__p);
  if (v928 < 0)
    operator delete(v926);
  return v5 != v4;
}

uint64_t sub_22F0B3970(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  size_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;

  v9 = *(_QWORD *)a2[2];
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2131;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v10 = (unsigned __int8 *)(v9 + 320);
  v28 = (unsigned __int8 *)(v9 + 320);
  v29 = 0;
  v30 = v9;
  v31 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v11 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v9 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
    LODWORD(v11) = *v10;
  }
  *(_DWORD *)(v9 + 776) = 0;
  v14 = *a2;
  v10[v11 + 1] = 11;
  v15 = v11 + 1;
  *(_BYTE *)(v9 + 320) = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = v14;
  v16 = a2[1];
  if (*(char *)(v16 + 23) < 0)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = *(unsigned __int8 *)(v16 + 23);
  *(_BYTE *)(v9 + 320 + v15 + 1) = 2;
  *(_BYTE *)(v9 + 320) = v11 + 2;
  *(_QWORD *)(v9 + 320 + 8 * v15 + 16) = v17 == 0;
  v18 = a2[1];
  v19 = *(_BYTE *)(v18 + 23);
  if (v19 >= 0)
    v20 = (void *)a2[1];
  else
    v20 = *(void **)v18;
  if (v19 >= 0)
    v21 = v19 & 0x7F;
  else
    v21 = *(_QWORD *)(v18 + 8);
  sub_22E3B89A8(&v28, v20, v21);
  v22 = v28;
  if (!v28)
  {
    v22 = (unsigned __int8 *)sub_22E3B8AAC(v29);
    v28 = v22;
  }
  sub_22E4D6448((uint64_t)(v22 + 336), a4, 1);
  v23 = v28;
  if (!v28)
  {
    v23 = (unsigned __int8 *)sub_22E3B8AAC(v29);
    v28 = v23;
  }
  v23[*v23 + 1] = 2;
  v24 = v28;
  v25 = *v28;
  *v28 = v25 + 1;
  *(_QWORD *)&v24[8 * v25 + 16] = a5;
  v26 = v30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)a1 = v24;
  *(_WORD *)(a1 + 24) = v31;
  v30 = 0;
  v31 = 0;
  return sub_22E3BB0B8((uint64_t)&v28);
}

uint64_t sub_22F0B3B50(uint64_t a1, void ***a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  size_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v9 = (uint64_t)*a2[1];
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2294;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v22 = (unsigned __int8 *)(v9 + 320);
  v23 = 0;
  v24 = v9;
  v25 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v13 = *((_BYTE *)*a2 + 23);
  if (v13 >= 0)
    v14 = *a2;
  else
    v14 = **a2;
  if (v13 >= 0)
    v15 = v13 & 0x7F;
  else
    v15 = (size_t)(*a2)[1];
  sub_22E3B89A8(&v22, v14, v15);
  v16 = v22;
  if (!v22)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v16;
  }
  sub_22E4D6448((uint64_t)(v16 + 336), a4, 1);
  v17 = v22;
  if (!v22)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v17;
  }
  v17[*v17 + 1] = 2;
  v18 = v22;
  v19 = *v22;
  *v22 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = a5;
  v20 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)a1 = v18;
  *(_WORD *)(a1 + 24) = v25;
  v24 = 0;
  v25 = 0;
  return sub_22E3BB0B8((uint64_t)&v22);
}

unint64_t sub_22F0B3CCC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3[2];
  llvm *v4[2];
  unsigned int v5;
  void *v6;
  __int128 v7;
  _BYTE v8[128];
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  v6 = v8;
  v7 = xmmword_22F44E310;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  v3[0] = (uint64_t)v9;
  v3[1] = (uint64_t)v4;
  sub_22F0BCCF4(v3, a1);
  v1 = sub_22F0BCA28((uint64_t)v4);
  if (v9[0] != v10)
    free(v9[0]);
  if (v6 != v8)
    free(v6);
  llvm::deallocate_buffer(v4[0], (void *)(16 * v5));
  return v1;
}

uint64_t sub_22F0B3DB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  size_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;

  v9 = **(_QWORD **)(a2 + 16);
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2142;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v32 = (unsigned __int8 *)(v9 + 320);
  v33 = 0;
  v34 = v9;
  v35 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  sub_22F0BA854((uint64_t)__p, *(_QWORD *)a2);
  if (v31 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v31 >= 0)
    v14 = v31 & 0x7F;
  else
    v14 = (size_t)__p[1];
  sub_22E3B89A8(&v32, v13, v14);
  v15 = *(_QWORD *)(a2 + 8);
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = v32;
  if (!v32)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v17;
  }
  v17[*v17 + 1] = 2;
  v18 = v32;
  v19 = *v32;
  *v32 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = v16 == 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = *(_BYTE *)(v20 + 23);
  if (v21 >= 0)
    v22 = *(void **)(a2 + 8);
  else
    v22 = *(void **)v20;
  if (v21 >= 0)
    v23 = v21 & 0x7F;
  else
    v23 = *(_QWORD *)(v20 + 8);
  sub_22E3B89A8(&v32, v22, v23);
  v24 = v32;
  if (!v32)
  {
    v24 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v24;
  }
  sub_22E4D6448((uint64_t)(v24 + 336), a4, 1);
  v25 = v32;
  if (!v32)
  {
    v25 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v25;
  }
  v25[*v25 + 1] = 2;
  v26 = v32;
  v27 = *v32;
  *v32 = v27 + 1;
  *(_QWORD *)&v26[8 * v27 + 16] = a5;
  v28 = v34;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)a1 = v26;
  *(_WORD *)(a1 + 24) = v35;
  v34 = 0;
  v35 = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  return sub_22E3BB0B8((uint64_t)&v32);
}

uint64_t sub_22F0B3FCC(uint64_t a1, void ***a2, int a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  size_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v9 = (uint64_t)*a2[1];
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2305;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v22 = (unsigned __int8 *)(v9 + 320);
  v23 = 0;
  v24 = v9;
  v25 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v13 = *((_BYTE *)*a2 + 23);
  if (v13 >= 0)
    v14 = *a2;
  else
    v14 = **a2;
  if (v13 >= 0)
    v15 = v13 & 0x7F;
  else
    v15 = (size_t)(*a2)[1];
  sub_22E3B89A8(&v22, v14, v15);
  v16 = v22;
  if (!v22)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v16;
  }
  sub_22E4D6448((uint64_t)(v16 + 336), a4, 1);
  v17 = v22;
  if (!v22)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v17;
  }
  v17[*v17 + 1] = 2;
  v18 = v22;
  v19 = *v22;
  *v22 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = a5;
  v20 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)a1 = v18;
  *(_WORD *)(a1 + 24) = v25;
  v24 = 0;
  v25 = 0;
  return sub_22E3BB0B8((uint64_t)&v22);
}

unint64_t sub_22F0B4148(__int128 *a1)
{
  unint64_t v1;
  __int128 v3;
  uint64_t v4;
  llvm *v5[2];
  unsigned int v6;
  void *v7;
  __int128 v8;
  _BYTE v9[128];
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v5[0] = 0;
  v5[1] = 0;
  v6 = 0;
  v7 = v9;
  v8 = xmmword_22F44E310;
  v10 = v12;
  v11 = 0x2000000000;
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  sub_22F0BC7F8((uint64_t)v5, (int *)&v3);
  v1 = sub_22F0BCA28((uint64_t)v5);
  if (v10 != v12)
    free(v10);
  if (v7 != v9)
    free(v7);
  llvm::deallocate_buffer(v5[0], (void *)(16 * v6));
  return v1;
}

BOOL sub_22F0B4234(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  void *v17;
  size_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  size_t v36;
  void *v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  char v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  void *v63;
  size_t v64;
  __n128 v65;
  llvm *v66;
  llvm *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  size_t v75;
  __n128 v76;
  llvm *v77;
  llvm *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  size_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  void *v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  void *v117;
  size_t v118;
  void *v119;
  size_t v120;
  void *v121;
  size_t v122;
  size_t v123;
  void *v124;
  size_t v125;
  void *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  int v132;
  _DWORD *v133;
  _DWORD *v134;
  int v135;
  int v136;
  void *v137;
  size_t v138;
  char v139;
  void *v140;
  size_t v141;
  char v142;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  int v154;
  void **v155;
  void *v156[2];
  uint64_t v157;
  void *v158[2];
  uint64_t v159;
  void *__p[2];
  char v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  void *v166;
  uint64_t v167;
  _BYTE v168[16];
  void *v169;
  uint64_t v170;
  _BYTE v171[16];
  void *v172;
  uint64_t v173;
  _BYTE v174[64];
  void *v175;
  uint64_t v176;
  _BYTE v177[64];
  llvm *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  uint64_t v183;
  int v184;
  void **v185;
  void *v186;
  uint64_t v187;
  _QWORD v188[18];

  v188[16] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return a2 != a3;
  sub_22F0AC2D8(a2, &v140);
  sub_22F0AC2D8(a3, &v137);
  v175 = v177;
  v176 = 0x400000000;
  v172 = v174;
  v173 = 0x400000000;
  if (a2)
    v7 = a2 + 64;
  else
    v7 = 0;
  sub_22F0B50E0((uint64_t)&v175, a2, v7);
  sub_22F0B50E0((uint64_t)&v172, a3, v7);
  sub_22F3E9900(&v133, (uint64_t)v175, v176, (uint64_t *)v172, v173);
  v8 = v135;
  if (v135 == 15 || v136 == 15)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      v169 = v171;
      v170 = 0x200000000;
      v166 = v168;
      v167 = 0x200000000;
      sub_22EFC8E88(a2);
      v20 = *((unsigned int *)v19 + 2);
      if ((_DWORD)v20)
      {
        v21 = *v19;
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          if (*(unsigned __int16 *)(*v21 + 32) - 253 <= 1)
          {
            v24 = v170;
            if (v170 >= (unint64_t)HIDWORD(v170))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v24 = v170;
            }
            *((_QWORD *)v169 + v24) = v23;
            LODWORD(v170) = v170 + 1;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = 126 - 2 * __clz(v170);
      if ((_DWORD)v170)
        v26 = v25;
      else
        v26 = 0;
      sub_22F0BAE00((uint64_t)v169, (uint64_t *)v169 + v170, v26, 1);
      if ((*(_BYTE *)(a3 + 29) & 1) == 0)
      {
LABEL_64:
        if (v142 >= 0)
          v35 = &v140;
        else
          v35 = v140;
        if (v142 >= 0)
          v36 = v142 & 0x7F;
        else
          v36 = v141;
        v37 = &v137;
        if (v139 >= 0)
        {
          v38 = v139 & 0x7F;
        }
        else
        {
          v37 = v137;
          v38 = v138;
        }
        v39 = v170;
        v40 = v167;
        if (v170 | v167
          && (v170 <= v167 ? (v41 = v167) : (v41 = v170),
              v129 = v41,
              (_DWORD)v41))
        {
          v123 = v36;
          v124 = v35;
          v125 = v38;
          v126 = v37;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v127 = v166;
          v128 = v169;
          while (1)
          {
            if (v42 < v39)
              v43 = v128[v42];
            if (v42 < v40)
              v44 = v127[v42];
            v131 = v43 != 0;
            v45 = v44 != 0;
            if (!v43)
            {
              v46 = v44;
              goto LABEL_161;
            }
            v46 = v44;
            if (!v44)
              goto LABEL_161;
            v179 = 0;
            v178 = 0;
            LODWORD(v180) = 0;
            v182 = xmmword_22F44E310;
            v181 = &v183;
            v186 = v188;
            v187 = 0x2000000000;
            v130 = v43;
            sub_22F3E9C1C((uint64_t)&v178, v43);
            v132 = sub_22F0BCA28((uint64_t)&v178);
            if (v186 != v188)
              free(v186);
            if (v181 != &v183)
              free(v181);
            llvm::deallocate_buffer(v178, (void *)(16 * v180));
            v179 = 0;
            v178 = 0;
            LODWORD(v180) = 0;
            v182 = xmmword_22F44E310;
            v181 = &v183;
            v186 = v188;
            v187 = 0x2000000000;
            sub_22F3E9C1C((uint64_t)&v178, v46);
            v47 = sub_22F0BCA28((uint64_t)&v178);
            if (v186 != v188)
              free(v186);
            if (v181 != &v183)
              free(v181);
            llvm::deallocate_buffer(v178, (void *)(16 * v180));
            if (v132 != v47)
              break;
            v48 = 0;
            ++v42;
            v43 = v130;
            v44 = v46;
            if (v129 == v42)
              goto LABEL_228;
          }
          v131 = 1;
          v45 = 1;
          v43 = v130;
LABEL_161:
          v81 = v43;
          v158[0] = 0;
          v158[1] = 0;
          v159 = 0;
          v156[0] = 0;
          v156[1] = 0;
          v157 = 0;
          LODWORD(v179) = 0;
          BYTE8(v182) = 0;
          v183 = 0;
          v184 = 1;
          *(_QWORD *)&v182 = 0;
          v180 = 0;
          v181 = 0;
          v82 = MEMORY[0x24BED83D8] + 16;
          v178 = (llvm *)(MEMORY[0x24BED83D8] + 16);
          v185 = v158;
          llvm::raw_ostream::SetBufferAndMode();
          v148 = 0;
          v152 = 0;
          v153 = 0;
          v154 = 1;
          v150 = 0;
          v151 = 0;
          v149 = 0;
          v147 = v82;
          v155 = v156;
          llvm::raw_ostream::SetBufferAndMode();
          if (v131)
            sub_22EF9CD90(v81);
          v83 = v45;
          if (v45)
            sub_22EF9CD90(v46);
          if (v131)
            v84 = *(_DWORD *)(v81 + 16);
          else
            v84 = *(_DWORD *)(a2 + 24);
          v85 = v46;
          if (v45)
            v86 = *(_DWORD *)(v46 + 16);
          else
            v86 = *(_DWORD *)(a3 + 24);
          if (v131)
          {
            v87 = *(_QWORD *)(v81 + 16);
          }
          else
          {
            v88 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
            v85 = v46;
            v87 = v88;
          }
          if (v83)
            v89 = *(_QWORD *)(v85 + 16);
          else
            v89 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 16))(a3);
          v90 = *a1;
          *(_DWORD *)(v90 + 312) = v84;
          *(_DWORD *)(v90 + 316) = 2142;
          if (*(char *)(v90 + 311) < 0)
          {
            **(_BYTE **)(v90 + 288) = 0;
            *(_QWORD *)(v90 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v90 + 288) = 0;
            *(_BYTE *)(v90 + 311) = 0;
          }
          v162 = (unsigned __int8 *)(v90 + 320);
          v163 = 0;
          v164 = v90;
          v165 = 1;
          *(_BYTE *)(v90 + 320) = 0;
          *(_DWORD *)(v90 + 664) = 0;
          v91 = *(unsigned int *)(v90 + 776);
          if ((_DWORD)v91)
          {
            v92 = *(_QWORD *)(v90 + 768);
            v93 = 56 * v91;
            do
            {
              if (*(char *)(v92 + v93 - 9) < 0)
                operator delete(*(void **)(v92 + v93 - 32));
              v93 -= 56;
            }
            while (v93);
          }
          *(_DWORD *)(v90 + 776) = 0;
          sub_22F0BA854((uint64_t)__p, a2);
          if (v161 >= 0)
            v94 = __p;
          else
            v94 = (void **)__p[0];
          if (v161 >= 0)
            v95 = v161 & 0x7F;
          else
            v95 = (size_t)__p[1];
          sub_22E3B89A8(&v162, v94, v95);
          v96 = v162;
          if (!v162)
          {
            v96 = (unsigned __int8 *)sub_22E3B8AAC(v163);
            v162 = v96;
          }
          v96[*v96 + 1] = 2;
          v97 = v162;
          v98 = *v162;
          *v162 = v98 + 1;
          *(_QWORD *)&v97[8 * v98 + 16] = v123 == 0;
          sub_22E3B89A8(&v162, v124, v123);
          v99 = v162;
          if (!v162)
          {
            v99 = (unsigned __int8 *)sub_22E3B8AAC(v163);
            v162 = v99;
          }
          sub_22E4D6448((uint64_t)(v99 + 336), v87, 1);
          v100 = v162;
          if (!v162)
          {
            v100 = (unsigned __int8 *)sub_22E3B8AAC(v163);
            v162 = v100;
          }
          v100[*v100 + 1] = 2;
          v101 = v162;
          v102 = *v162;
          *v162 = v102 + 1;
          *(_QWORD *)&v101[8 * v102 + 16] = 28;
          v144 = 0;
          v145 = v164;
          v143 = v101;
          v146 = v165;
          v164 = 0;
          v165 = 0;
          if (v161 < 0)
            operator delete(__p[0]);
          sub_22E3BB0B8((uint64_t)&v162);
          v103 = *v101;
          v101[v103 + 1] = 2;
          *v101 = v103 + 1;
          *(_QWORD *)&v101[8 * v103 + 16] = v131;
          v104 = *((_BYTE *)v185 + 23);
          if (v104 >= 0)
            v105 = v185;
          else
            v105 = *v185;
          if (v104 >= 0)
            v106 = v104 & 0x7F;
          else
            v106 = (size_t)v185[1];
          sub_22E3B89A8(&v143, v105, v106);
          sub_22E3BB0B8((uint64_t)&v143);
          v107 = *a1;
          *(_DWORD *)(v107 + 312) = v86;
          *(_DWORD *)(v107 + 316) = 2305;
          if (*(char *)(v107 + 311) < 0)
          {
            **(_BYTE **)(v107 + 288) = 0;
            *(_QWORD *)(v107 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v107 + 288) = 0;
            *(_BYTE *)(v107 + 311) = 0;
          }
          v162 = (unsigned __int8 *)(v107 + 320);
          v163 = 0;
          v164 = v107;
          v165 = 1;
          *(_BYTE *)(v107 + 320) = 0;
          *(_DWORD *)(v107 + 664) = 0;
          v108 = *(unsigned int *)(v107 + 776);
          if ((_DWORD)v108)
          {
            v109 = *(_QWORD *)(v107 + 768);
            v110 = 56 * v108;
            do
            {
              if (*(char *)(v109 + v110 - 9) < 0)
                operator delete(*(void **)(v109 + v110 - 32));
              v110 -= 56;
            }
            while (v110);
          }
          *(_DWORD *)(v107 + 776) = 0;
          sub_22E3B89A8(&v162, v126, v125);
          v111 = v162;
          if (!v162)
          {
            v111 = (unsigned __int8 *)sub_22E3B8AAC(v163);
            v162 = v111;
          }
          sub_22E4D6448((uint64_t)(v111 + 336), v89, 1);
          v112 = v162;
          if (!v162)
          {
            v112 = (unsigned __int8 *)sub_22E3B8AAC(v163);
            v162 = v112;
          }
          v112[*v112 + 1] = 2;
          v113 = v162;
          v114 = *v162;
          *v162 = v114 + 1;
          *(_QWORD *)&v113[8 * v114 + 16] = 28;
          v144 = 0;
          v145 = v164;
          v143 = v113;
          v146 = v165;
          v164 = 0;
          v165 = 0;
          sub_22E3BB0B8((uint64_t)&v162);
          v115 = *v113;
          v113[v115 + 1] = 2;
          *v113 = v115 + 1;
          *(_QWORD *)&v113[8 * v115 + 16] = v83;
          v116 = *((_BYTE *)v155 + 23);
          if (v116 >= 0)
            v117 = v155;
          else
            v117 = *v155;
          if (v116 >= 0)
            v118 = v116 & 0x7F;
          else
            v118 = (size_t)v155[1];
          sub_22E3B89A8(&v143, v117, v118);
          sub_22E3BB0B8((uint64_t)&v143);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v147);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v178);
          if (SHIBYTE(v157) < 0)
            operator delete(v156[0]);
          if (SHIBYTE(v159) < 0)
            operator delete(v158[0]);
          v48 = 1;
        }
        else
        {
          v48 = 0;
        }
LABEL_228:
        if (v166 != v168)
          free(v166);
        if (v169 != v171)
          free(v169);
        if ((v48 & 1) != 0)
          goto LABEL_246;
        goto LABEL_233;
      }
    }
    else
    {
      if ((*(_BYTE *)(a3 + 29) & 1) == 0)
      {
LABEL_233:
        if (v142 >= 0)
          v119 = &v140;
        else
          v119 = v140;
        if (v142 >= 0)
          v120 = v142 & 0x7F;
        else
          v120 = v141;
        if (v139 >= 0)
          v121 = &v137;
        else
          v121 = v137;
        if (v139 >= 0)
          v122 = v139 & 0x7F;
        else
          v122 = v138;
        sub_22F0ADE34(a1, &v133, a2, v119, v120, a3, v121, v122);
        goto LABEL_246;
      }
      v169 = v171;
      v170 = 0x200000000;
      v166 = v168;
      v167 = 0x200000000;
    }
    sub_22EFC8E88(a3);
    v28 = *((unsigned int *)v27 + 2);
    if ((_DWORD)v28)
    {
      v29 = *v27;
      v30 = 8 * v28;
      do
      {
        v31 = *v29;
        if (*(unsigned __int16 *)(*v29 + 32) - 253 <= 1)
        {
          v32 = v167;
          if (v167 >= (unint64_t)HIDWORD(v167))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v32 = v167;
          }
          *((_QWORD *)v166 + v32) = v31;
          LODWORD(v167) = v167 + 1;
        }
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
    v33 = 126 - 2 * __clz(v167);
    if ((_DWORD)v167)
      v34 = v33;
    else
      v34 = 0;
    sub_22F0BAE00((uint64_t)v166, (uint64_t *)v166 + v167, v34, 1);
    goto LABEL_64;
  }
  if (v135 != v136)
  {
    if (v142 >= 0)
      v15 = &v140;
    else
      v15 = v140;
    if (v142 >= 0)
      v16 = v142 & 0x7F;
    else
      v16 = v141;
    if (v139 >= 0)
      v17 = &v137;
    else
      v17 = v137;
    if (v139 >= 0)
      v18 = v139 & 0x7F;
    else
      v18 = v138;
    sub_22F0AE1D0(a1, &v133, a2, v15, v16, a3, v17, v18);
    goto LABEL_246;
  }
  v10 = v133;
  v9 = v134;
  if (v135 == 9)
  {
    if (v142 >= 0)
      v49 = &v140;
    else
      v49 = v140;
    if (v142 >= 0)
      v50 = v142 & 0x7F;
    else
      v50 = v141;
    if (v139 >= 0)
      v51 = &v137;
    else
      v51 = v137;
    if (v139 >= 0)
      v52 = v139 & 0x7F;
    else
      v52 = v138;
    if ((sub_22F0AD4D4((uint64_t)a1, a2, (uint64_t)v49, v50, (uint64_t)v51, v52, (uint64_t)v133, (uint64_t)v134) & 1) != 0)
      goto LABEL_246;
    goto LABEL_124;
  }
  if (v135 == 8)
  {
    if (v142 >= 0)
      v53 = &v140;
    else
      v53 = v140;
    if (v142 >= 0)
      v54 = v142 & 0x7F;
    else
      v54 = v141;
    if (v139 >= 0)
      v55 = &v137;
    else
      v55 = v137;
    if (v139 >= 0)
      v56 = v139 & 0x7F;
    else
      v56 = v138;
    if ((sub_22F0ACF7C((uint64_t)a1, a2, (uint64_t)v53, v54, (uint64_t)v55, v56, (uint64_t)v133, (uint64_t)v134, 0) & 1) != 0)
      goto LABEL_246;
LABEL_124:
    v57 = *a1;
    *(_DWORD *)(v57 + 312) = v10[6];
    *(_DWORD *)(v57 + 316) = 2138;
    if (*(char *)(v57 + 311) < 0)
    {
      **(_BYTE **)(v57 + 288) = 0;
      *(_QWORD *)(v57 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v57 + 288) = 0;
      *(_BYTE *)(v57 + 311) = 0;
    }
    v178 = (llvm *)(v57 + 320);
    v179 = 0;
    v180 = v57;
    LOWORD(v181) = 1;
    *(_BYTE *)(v57 + 320) = 0;
    *(_DWORD *)(v57 + 664) = 0;
    v58 = *(unsigned int *)(v57 + 776);
    if ((_DWORD)v58)
    {
      v59 = *(_QWORD *)(v57 + 768);
      v60 = 56 * v58;
      do
      {
        if (*(char *)(v59 + v60 - 9) < 0)
          operator delete(*(void **)(v59 + v60 - 32));
        v60 -= 56;
      }
      while (v60);
      LODWORD(v58) = *(unsigned __int8 *)(v57 + 320);
    }
    *(_BYTE *)(v57 + 321 + v58) = 11;
    *(_DWORD *)(v57 + 776) = 0;
    *(_QWORD *)(v57 + 336 + 8 * v58) = a2;
    v61 = v142 & 0x7F;
    if (v142 < 0)
      v61 = v141;
    v62 = (v58 + 1);
    *(_BYTE *)(v57 + 321 + v62) = 2;
    *(_BYTE *)(v57 + 320) = v58 + 2;
    *(_QWORD *)(v57 + 336 + 8 * v62) = v61 == 0;
    if (v142 >= 0)
      v63 = &v140;
    else
      v63 = v140;
    if (v142 >= 0)
      v64 = v142 & 0x7F;
    else
      v64 = v141;
    v65.n128_f64[0] = sub_22E3B89A8((unsigned __int8 **)&v178, v63, v64);
    v66 = v178;
    if (!v178)
    {
      v66 = (llvm *)sub_22E3B8AAC(v179);
      v178 = v66;
    }
    *((_BYTE *)v66 + *(unsigned __int8 *)v66 + 1) = 2;
    v67 = v178;
    v68 = *(unsigned __int8 *)v178;
    *(_BYTE *)v178 = v68 + 1;
    *((_QWORD *)v67 + v68 + 2) = v8;
    v69 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v10 + 16))(v10, v65);
    sub_22E4D6448((uint64_t)v67 + 336, v69, 1);
    sub_22E3BB0B8((uint64_t)&v178);
    v70 = *a1;
    *(_DWORD *)(v70 + 312) = v9[6];
    *(_DWORD *)(v70 + 316) = 2301;
    if (*(char *)(v70 + 311) < 0)
    {
      **(_BYTE **)(v70 + 288) = 0;
      *(_QWORD *)(v70 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v70 + 288) = 0;
      *(_BYTE *)(v70 + 311) = 0;
    }
    v178 = (llvm *)(v70 + 320);
    v179 = 0;
    v180 = v70;
    LOWORD(v181) = 1;
    *(_BYTE *)(v70 + 320) = 0;
    *(_DWORD *)(v70 + 664) = 0;
    v71 = *(unsigned int *)(v70 + 776);
    if ((_DWORD)v71)
    {
      v72 = *(_QWORD *)(v70 + 768);
      v73 = 56 * v71;
      do
      {
        if (*(char *)(v72 + v73 - 9) < 0)
          operator delete(*(void **)(v72 + v73 - 32));
        v73 -= 56;
      }
      while (v73);
    }
    *(_DWORD *)(v70 + 776) = 0;
    if (v139 >= 0)
      v74 = &v137;
    else
      v74 = v137;
    if (v139 >= 0)
      v75 = v139 & 0x7F;
    else
      v75 = v138;
    v76.n128_f64[0] = sub_22E3B89A8((unsigned __int8 **)&v178, v74, v75);
    v77 = v178;
    if (!v178)
    {
      v77 = (llvm *)sub_22E3B8AAC(v179);
      v178 = v77;
    }
    *((_BYTE *)v77 + *(unsigned __int8 *)v77 + 1) = 2;
    v78 = v178;
    v79 = *(unsigned __int8 *)v178;
    *(_BYTE *)v178 = v79 + 1;
    *((_QWORD *)v78 + v79 + 2) = v8;
    v80 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v9 + 16))(v9, v76);
    sub_22E4D6448((uint64_t)v78 + 336, v80, 1);
    sub_22E3BB0B8((uint64_t)&v178);
    goto LABEL_246;
  }
  if (v135 != 5)
    goto LABEL_124;
  v11 = v142 >= 0 ? &v140 : (void **)v140;
  v12 = v142 >= 0 ? v142 & 0x7F : v141;
  v13 = v139 >= 0 ? &v137 : (void **)v137;
  v14 = v139 >= 0 ? v139 & 0x7F : v138;
  if ((sub_22F0AC32C((uint64_t)a1, a2, (uint64_t)v11, v12, (uint64_t)v13, v14, (uint64_t)v133, (uint64_t)v134) & 1) == 0)
    goto LABEL_124;
LABEL_246:
  if (v172 != v174)
    free(v172);
  if (v175 != v177)
    free(v175);
  if (v139 < 0)
    operator delete(v137);
  if (v142 < 0)
    operator delete(v140);
  return a2 != a3;
}

void sub_22F0B50E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *i;
  void *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t j;
  void **v56;
  void **v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *__p[2];
  __int128 v63;
  __int128 v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  char *v68;

  v63 = 0u;
  v64 = 0u;
  *(_OWORD *)__p = 0u;
  if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
    sub_22EFCC320(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (char *)v63;
      v10 = (char *)__p[1];
      v11 = v63 - (unint64_t)__p[1];
      if ((void *)v63 == __p[1])
        v12 = 0;
      else
        v12 = 32 * (v63 - (unint64_t)__p[1]) - 1;
      v13 = v7 + v8;
      if (v12 != v7 + v8)
        goto LABEL_30;
      if (v8 < 0x100)
      {
        if (v11 >= *((_QWORD *)&v63 + 1) - (unint64_t)__p[0])
        {
          if (*((void **)&v63 + 1) == __p[0])
            v38 = 1;
          else
            v38 = (uint64_t)(*((_QWORD *)&v63 + 1) - (unint64_t)__p[0]) >> 2;
          v68 = (char *)&v63 + 8;
          if (v38 >> 61)
LABEL_91:
            sub_22E3B3F8C();
          *(_QWORD *)&v66 = operator new(8 * v38);
          *((_QWORD *)&v66 + 1) = v66 + v11;
          *(_QWORD *)&v67 = v66 + v11;
          *((_QWORD *)&v67 + 1) = v66 + 8 * v38;
          v65 = operator new(0x1000uLL);
          sub_22F2D2D80((uint64_t)&v66, &v65);
          for (i = (_QWORD *)v63; i != __p[1]; sub_22F2D2EA4((void **)&v66, i))
            --i;
          v40 = __p[0];
          *(_OWORD *)__p = v66;
          v63 = v67;
          if (v40)
            operator delete(v40);
          goto LABEL_29;
        }
        if (*((_QWORD *)&v63 + 1) != (_QWORD)v63)
        {
          *(_QWORD *)&v66 = operator new(0x1000uLL);
          sub_22F2D2D80((uint64_t)__p, &v66);
          goto LABEL_29;
        }
        *(_QWORD *)&v66 = operator new(0x1000uLL);
        sub_22F2D2EA4(__p, &v66);
        v30 = (char *)v63;
        v31 = (char *)__p[1] + 8;
        v32 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v63 == *((_QWORD *)&v63 + 1))
        {
          v33 = __p[0];
          if (v31 <= __p[0])
          {
            if ((void *)v63 == __p[0])
              v41 = 1;
            else
              v41 = (uint64_t)(v63 - (unint64_t)__p[0]) >> 2;
            if (v41 >> 61)
              goto LABEL_91;
            v42 = (char *)operator new(8 * v41);
            v43 = v30 - v31;
            v24 = v30 == v31;
            v30 = &v42[8 * (v41 >> 2)];
            if (!v24)
            {
              v30 = &v42[8 * (v41 >> 2) + (v43 & 0xFFFFFFFFFFFFFFF8)];
              v44 = 8 * (v43 >> 3);
              v45 = &v42[8 * (v41 >> 2)];
              do
              {
                v46 = *(_QWORD *)v31;
                v31 += 8;
                *(_QWORD *)v45 = v46;
                v45 += 8;
                v44 -= 8;
              }
              while (v44);
            }
            __p[0] = v42;
            __p[1] = &v42[8 * (v41 >> 2)];
            *(_QWORD *)&v63 = v30;
            *((_QWORD *)&v63 + 1) = &v42[8 * v41];
            if (v33)
            {
              operator delete(v33);
              v30 = (char *)v63;
            }
          }
          else
          {
            v34 = (v31 - (char *)__p[0]) >> 3;
            if (v34 >= -1)
              v35 = v34 + 1;
            else
              v35 = v34 + 2;
            v36 = &v31[-8 * (v35 >> 1)];
            v37 = v63 - (_QWORD)v31;
            if ((_QWORD)v63 != (_QWORD)v31)
            {
              memmove(&v31[-8 * (v35 >> 1)], v31, v63 - (_QWORD)v31);
              v31 = (char *)__p[1];
            }
            v30 = &v36[v37];
            __p[1] = &v31[-8 * (v35 >> 1)];
            *(_QWORD *)&v63 = v30;
          }
        }
        *(_QWORD *)v30 = v32;
      }
      else
      {
        *(_QWORD *)&v64 = v8 - 256;
        v14 = (char *)__p[1] + 8;
        v15 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v63 == *((_QWORD *)&v63 + 1))
        {
          v16 = __p[0];
          if (v14 <= __p[0])
          {
            if ((void *)v63 == __p[0])
              v22 = 1;
            else
              v22 = (uint64_t)(v63 - (unint64_t)__p[0]) >> 2;
            if (v22 >> 61)
              goto LABEL_91;
            v23 = (char *)operator new(8 * v22);
            v25 = v9 - v14;
            v24 = v9 == v14;
            v9 = &v23[8 * (v22 >> 2)];
            if (!v24)
            {
              v9 = &v23[8 * (v22 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF8)];
              v26 = 8 * (v25 >> 3);
              v27 = &v23[8 * (v22 >> 2)];
              do
              {
                v28 = *(_QWORD *)v14;
                v14 += 8;
                *(_QWORD *)v27 = v28;
                v27 += 8;
                v26 -= 8;
              }
              while (v26);
            }
            __p[0] = v23;
            __p[1] = &v23[8 * (v22 >> 2)];
            *(_QWORD *)&v63 = v9;
            *((_QWORD *)&v63 + 1) = &v23[8 * v22];
            if (v16)
            {
              operator delete(v16);
              v9 = (char *)v63;
            }
          }
          else
          {
            v17 = (v14 - (char *)__p[0]) >> 3;
            if (v17 >= -1)
              v18 = v17 + 1;
            else
              v18 = v17 + 2;
            v19 = &v14[-8 * (v18 >> 1)];
            v20 = v63 - (_QWORD)v14;
            if ((char *)v63 != v14)
            {
              memmove(&v14[-8 * (v18 >> 1)], v14, v63 - (_QWORD)v14);
              v9 = (char *)__p[1];
            }
            v21 = &v9[-8 * (v18 >> 1)];
            v9 = &v19[v20];
            __p[1] = v21;
            *(_QWORD *)&v63 = &v19[v20];
          }
        }
        *(_QWORD *)v9 = v15;
      }
      *(_QWORD *)&v63 = v63 + 8;
LABEL_29:
      v7 = *((_QWORD *)&v64 + 1);
      v8 = v64;
      v10 = (char *)__p[1];
      v13 = v64 + *((_QWORD *)&v64 + 1);
LABEL_30:
      v29 = (unint64_t *)(*(_QWORD *)&v10[(v13 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v13);
      *v29 = v6;
      v29[1] = a3;
      *((_QWORD *)&v64 + 1) = ++v7;
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v6)
      {
        if (v7)
        {
          do
          {
            v47 = v64;
            v48 = *(_QWORD *)((char *)__p[1] + (((unint64_t)v64 >> 5) & 0x7FFFFFFFFFFFFF8));
            *(_QWORD *)&v64 = v64 + 1;
            *((_QWORD *)&v64 + 1) = v7 - 1;
            if ((unint64_t)v64 >= 0x200)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(_QWORD *)&v64 = v64 - 256;
            }
            v49 = (uint64_t *)(v48 + 16 * v47);
            v50 = *v49;
            if (*v49)
              v51 = (*(_DWORD *)(*v49 + 28) & 0x7Eu) - 38 > 0xFFFFFFFB;
            else
              v51 = 0;
            if (v51)
            {
              v53 = *(_QWORD *)(v50 + 72);
              if ((v53 & 0x1000000) != 0)
              {
                v54 = v50 + 64;
                if ((v53 & 0x80) != 0)
                  sub_22EFCC320(v50 + 64);
                for (j = *(_QWORD *)(v50 + 80); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
                {
                  *(_QWORD *)&v66 = j;
                  *((_QWORD *)&v66 + 1) = v54;
                  sub_22F3E99E8((int64x2_t *)__p, &v66);
                }
              }
            }
            else if (sub_22F0BCB54(*v49, *(_QWORD *)(v48 + 16 * v47 + 8)))
            {
              v52 = sub_22F0B3CCC(v50);
              sub_22F33F6D0(a1, *v49, v52);
            }
            v7 = *((_QWORD *)&v64 + 1);
          }
          while (*((_QWORD *)&v64 + 1));
        }
        break;
      }
    }
  }
  v56 = (void **)__p[1];
  v57 = (void **)v63;
  *((_QWORD *)&v64 + 1) = 0;
  v58 = v63 - (unint64_t)__p[1];
  if ((unint64_t)v63 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v56);
      v57 = (void **)v63;
      v56 = (void **)((char *)__p[1] + 8);
      __p[1] = v56;
      v58 = v63 - (_QWORD)v56;
    }
    while ((_QWORD)v63 - (_QWORD)v56 > 0x10uLL);
  }
  v59 = v58 >> 3;
  if (v59 == 1)
  {
    v60 = 128;
    goto LABEL_83;
  }
  if (v59 == 2)
  {
    v60 = 256;
LABEL_83:
    *(_QWORD *)&v64 = v60;
  }
  if (v56 != v57)
  {
    do
    {
      v61 = *v56++;
      operator delete(v61);
    }
    while (v56 != v57);
    if ((void *)v63 != __p[1])
      *(_QWORD *)&v63 = v63 + (((unint64_t)__p[1] - v63 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

uint64_t sub_22F0B55F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  const void *v13;
  size_t v14;
  unsigned int v15;
  int *v16;
  const void *v17;
  int v18;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t result;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned __int8 v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned __int8 v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE v57[32];
  _BYTE *v58;
  uint64_t v59;
  _QWORD v60[4];
  _QWORD v61[5];

  v61[0] = a2;
  v61[1] = a7;
  v61[2] = a3;
  v61[3] = a4;
  v61[4] = a1;
  v60[0] = a8;
  v60[1] = a5;
  v60[2] = a6;
  v60[3] = a1;
  v8 = *(_QWORD *)(a7 + 40);
  if ((v8 & 7) != 0)
    v9 = 0;
  else
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(a8 + 40);
  if ((v10 & 7) != 0)
    v11 = 0;
  else
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned int **)(v9 + 16);
  v15 = *v12;
  v13 = v12 + 4;
  v14 = v15;
  v16 = *(int **)(v11 + 16);
  v18 = *v16;
  v17 = v16 + 4;
  if (v14 != v18 || v14 && memcmp(v13, v17, v14))
  {
    sub_22F0B5988((uint64_t)&v58, (uint64_t)v61, 0);
    v21 = v58;
    if (!v58)
    {
      v21 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v21;
    }
    v22 = *v21;
    v21[v22 + 1] = 5;
    *v21 = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = v9;
    sub_22E3BB0B8((uint64_t)&v58);
    sub_22F0B5B84((uint64_t)&v58, v60, 0);
    v23 = v58;
    if (!v58)
    {
      v23 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v23;
    }
    v24 = *v23;
    v23[v24 + 1] = 5;
    *v23 = v24 + 1;
    *(_QWORD *)&v23[8 * v24 + 16] = v11;
LABEL_15:
    v25 = &v58;
LABEL_16:
    sub_22E3BB0B8((uint64_t)v25);
    return 1;
  }
  v27 = sub_22F0ACDAC(*(_QWORD *)(a7 + 56));
  if (v27 != sub_22F0ACDAC(*(_QWORD *)(a8 + 56)))
  {
    sub_22F0B5988((uint64_t)&v58, (uint64_t)v61, 1u);
    v36 = v58;
    if (!v58)
    {
      v36 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v36;
    }
    v37 = v36 + 1;
    v38 = *v36;
    v37[v38] = 5;
    v39 = v38 + 1;
    *v36 = v38 + 2;
    v40 = v36 + 16;
    *(_QWORD *)&v40[8 * v38] = v9;
    v41 = *(_QWORD *)(a7 + 56);
    v37[v39] = 9;
    *(_QWORD *)&v40[8 * v39] = v41;
    sub_22E3BB0B8((uint64_t)&v58);
    sub_22F0B5B84((uint64_t)&v58, v60, 1u);
    v42 = v58;
    if (!v58)
    {
      v42 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v42;
    }
    v43 = v42 + 1;
    v44 = *v42;
    v43[v44] = 5;
    v45 = v44 + 1;
    *v42 = v44 + 2;
    v46 = v42 + 16;
    *(_QWORD *)&v46[8 * v44] = v11;
    v47 = *(_QWORD *)(a8 + 56);
    v43[v45] = 9;
    *(_QWORD *)&v46[8 * v45] = v47;
    goto LABEL_15;
  }
  v28 = *(_DWORD *)(a7 + 76);
  v29 = *(_DWORD *)(a8 + 76);
  if (((v29 ^ v28) & 0x60000) != 0)
  {
    sub_22F0B5988((uint64_t)&v58, (uint64_t)v61, 2u);
    v30 = ((unint64_t)*(unsigned int *)(a7 + 76) >> 17) & 3;
    v31 = v58;
    if (!v58)
    {
      v31 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v31;
    }
    v32 = *v31;
    v31[v32 + 1] = 2;
    *v31 = v32 + 1;
    *(_QWORD *)&v31[8 * v32 + 16] = v30;
    sub_22E3BB0B8((uint64_t)&v58);
    sub_22F0B5B84((uint64_t)&v58, v60, 2u);
    v33 = ((unint64_t)*(unsigned int *)(a8 + 76) >> 17) & 3;
    v34 = v58;
    if (!v58)
    {
      v34 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v34;
    }
    v35 = *v34;
    v34[v35 + 1] = 2;
    *v34 = v35 + 1;
    *(_QWORD *)&v34[8 * v35 + 16] = v33;
    goto LABEL_15;
  }
  v48 = *(_DWORD *)(a7 + 72) & 0x1FFFF;
  v49 = *(_DWORD *)(a8 + 72) & 0x1FFFF;
  if (v48 != v49)
  {
    v50 = 1;
    while ((v48 & 1) == (v49 & 1))
    {
      result = 0;
      v48 >>= 1;
      v49 >>= 1;
      if ((_DWORD)++v50 == 18)
        return result;
    }
    if ((v48 & 1) == 0)
      v28 = v29;
    v51 = (1 << (v50 - 1)) & v28 & 0x1FFFF;
    sub_22F0B5988((uint64_t)&v58, (uint64_t)v61, 3u);
    v52 = v58;
    if (!v58)
    {
      v52 = (_BYTE *)sub_22E3B8AAC(v59);
      v58 = v52;
    }
    v53 = v52 + 1;
    v54 = *v52;
    v53[v54] = 3;
    *v52 = v54 + 2;
    v55 = v52 + 16;
    *(_QWORD *)&v55[8 * v54] = v50;
    v56 = (v54 + 1);
    v53[v56] = 2;
    *(_QWORD *)&v55[8 * v56] = v51 != 0;
    sub_22E3BB0B8((uint64_t)&v58);
    sub_22F0B5B84((uint64_t)v57, v60, 3u);
    v25 = v57;
    goto LABEL_16;
  }
  return 0;
}

uint64_t sub_22F0B5988(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v6 = **(_QWORD **)(a2 + 32);
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 24);
  *(_DWORD *)(v6 + 316) = 2141;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v26 = (unsigned __int8 *)(v6 + 320);
  v27 = 0;
  v28 = v6;
  v29 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  sub_22F0BA854((uint64_t)__p, *(_QWORD *)a2);
  if (v25 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v25 >= 0)
    v11 = v25 & 0x7F;
  else
    v11 = (size_t)__p[1];
  sub_22E3B89A8(&v26, v10, v11);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = v26;
  if (!v26)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v26;
  v15 = *v26;
  *v26 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = v12 == 0;
  v16 = sub_22E3B89A8(&v26, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  v17 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), v16);
  v18 = v26;
  if (!v26)
  {
    v18 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v18;
  }
  sub_22E4D6448((uint64_t)(v18 + 336), v17, 1);
  v19 = v26;
  if (!v26)
  {
    v19 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v19;
  }
  v19[*v19 + 1] = 2;
  v20 = v26;
  v21 = *v26;
  *v26 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = a3;
  v22 = v28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)a1 = v20;
  *(_WORD *)(a1 + 24) = v29;
  v28 = 0;
  v29 = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  return sub_22E3BB0B8((uint64_t)&v26);
}

uint64_t sub_22F0B5B84(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v6 = *(_QWORD *)a2[3];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*a2 + 24);
  *(_DWORD *)(v6 + 316) = 2304;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v18 = (unsigned __int8 *)(v6 + 320);
  v19 = 0;
  v20 = v6;
  v21 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = sub_22E3B89A8(&v18, (void *)a2[1], a2[2]);
  v11 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a2 + 16))(*a2, v10);
  v12 = v18;
  if (!v18)
  {
    v12 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v12;
  }
  sub_22E4D6448((uint64_t)(v12 + 336), v11, 1);
  v13 = v18;
  if (!v18)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v18;
  v15 = *v18;
  *v18 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = a3;
  v16 = v20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = v14;
  *(_WORD *)(a1 + 24) = v21;
  v20 = 0;
  v21 = 0;
  return sub_22E3BB0B8((uint64_t)&v18);
}

uint64_t sub_22F0B5CF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _BOOL4 v37;
  _BOOL8 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[4];
  _QWORD v111[5];
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114[5];
  _BYTE *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;

  v111[0] = a2;
  v111[1] = a7;
  v111[2] = a3;
  v111[3] = a4;
  v111[4] = a1;
  v110[0] = a8;
  v110[1] = a5;
  v110[2] = a6;
  v110[3] = a1;
  v16 = sub_22F0ACDAC(*(_QWORD *)(a7 + 80));
  if (v16 != sub_22F0ACDAC(*(_QWORD *)(a8 + 80)))
  {
    sub_22F0B65E8((uint64_t)&v115, (uint64_t)v111, 0);
    v26 = *(_QWORD *)(a7 + 80);
    v27 = v115;
    if (!v115)
    {
      v27 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
      v115 = v27;
    }
    v28 = *v27;
    v29 = 9;
    v27[v28 + 1] = 9;
    *v27 = v28 + 1;
    *(_QWORD *)&v27[8 * v28 + 16] = v26;
    v30 = sub_22E3BB0B8((uint64_t)&v115);
    sub_22F0B67E4(v30, v110, 0);
    v23 = *(_QWORD *)(a8 + 80);
    goto LABEL_16;
  }
  v17 = *(_QWORD *)(a7 + 56);
  v18 = *(_QWORD *)(a8 + 56);
  if (((v17 >> 17) & 1) == ((v18 >> 17) & 1))
  {
    if (((v18 ^ v17) & 0x3000000) != 0)
    {
      sub_22F0B65E8((uint64_t)&v115, (uint64_t)v111, 3u);
      v31 = (*(_QWORD *)(a7 + 56) >> 24) & 3;
      v32 = v115;
      if (!v115)
      {
        v32 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
        v115 = v32;
      }
      v33 = *v32;
      v29 = 2;
      v32[v33 + 1] = 2;
      *v32 = v33 + 1;
      *(_QWORD *)&v32[8 * v33 + 16] = v31;
      v34 = sub_22E3BB0B8((uint64_t)&v115);
      sub_22F0B67E4(v34, v110, 3u);
      v23 = (*(_QWORD *)(a8 + 56) >> 24) & 3;
LABEL_16:
      v24 = v115;
      if (!v115)
      {
        v24 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
        v115 = v24;
      }
      v25 = *v24;
      v24[v25 + 1] = v29;
      goto LABEL_19;
    }
    if (sub_22EFDBF50(a7) == 3)
    {
      v37 = sub_22EA7D688(a7);
      if (sub_22EFDBF50(a8) == 3)
      {
        if (v37 == sub_22EA7D688(a8))
          goto LABEL_32;
      }
      else if (!v37)
      {
        goto LABEL_32;
      }
    }
    else if (sub_22EFDBF50(a8) != 3 || !sub_22EA7D688(a8))
    {
LABEL_32:
      v39 = sub_22EFDBD9C(a7);
      if (v39 != sub_22EFDBD9C(a8))
      {
        sub_22F0B65E8((uint64_t)&v115, (uint64_t)v111, 5u);
        v40 = sub_22EFDBD9C(a7);
        v41 = v115;
        if (!v115)
        {
          v41 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
          v115 = v41;
        }
        v42 = *v41;
        v41[v42 + 1] = 2;
        *v41 = v42 + 1;
        *(_QWORD *)&v41[8 * v42 + 16] = v40;
        v43 = sub_22E3BB0B8((uint64_t)&v115);
        sub_22F0B67E4(v43, v110, 5u);
        v44 = sub_22EFDBD9C(a8);
        v45 = v115;
        if (!v115)
        {
          v45 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
          v115 = v45;
        }
        v46 = *v45;
        v45[v46 + 1] = 2;
        *v45 = v46 + 1;
        *(_QWORD *)&v45[8 * v46 + 16] = v44;
        goto LABEL_20;
      }
      v115 = (_BYTE *)*a1;
      v116 = &v121;
      v117 = a2;
      v118 = a3;
      v119 = a4;
      v120 = a7;
      v114[0] = (uint64_t)v115;
      v114[1] = (uint64_t)&v121;
      v114[2] = a5;
      v114[3] = a6;
      v114[4] = a8;
      v47 = *(unsigned int *)(a7 + 104);
      v48 = *(unsigned int *)(a8 + 104);
      if ((_DWORD)v47 == (_DWORD)v48)
      {
        if (!(_DWORD)v47)
        {
LABEL_45:
          v57 = *(_QWORD *)(a7 + 40);
          v23 = *(_QWORD *)(a8 + 40);
          if (v57 == v23)
            return 0;
          sub_22F0B65E8((uint64_t)&v115, (uint64_t)v111, 1u);
          v65 = v115;
          if (!v115)
          {
            v65 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
            v115 = v65;
          }
          v66 = *v65;
          v65[v66 + 1] = 10;
          *v65 = v66 + 1;
          *(_QWORD *)&v65[8 * v66 + 16] = v57;
          v67 = sub_22E3BB0B8((uint64_t)&v115);
          sub_22F0B67E4(v67, v110, 1u);
          v24 = v115;
          if (!v115)
          {
            v24 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
            v115 = v24;
          }
          v25 = *v24;
          v24[v25 + 1] = 10;
          goto LABEL_19;
        }
        v49 = 0;
        while (1)
        {
          v50 = *(_QWORD *)(*(_QWORD *)(a7 + 96) + 8 * v49);
          v51 = *(_QWORD *)(*(_QWORD *)(a8 + 96) + 8 * v49);
          v52 = *(_QWORD *)(v50 + 48);
          v53 = *(_QWORD *)(v51 + 48);
          if (v52 != v53)
          {
            v54 = sub_22F0ACDAC(*(_QWORD *)(v50 + 48));
            if (v54 != sub_22F0ACDAC(v53))
              break;
          }
          v55 = *(_QWORD *)(v50 + 40);
          v56 = *(_QWORD *)(v51 + 40);
          if (v55 != v56)
          {
            sub_22F0BB8CC((uint64_t)&v112, (uint64_t *)&v115, 2u);
            v68 = v112;
            if (!v112)
            {
              v68 = (_BYTE *)sub_22E3B8AAC(v113);
              v112 = v68;
            }
            v69 = v68 + 1;
            v70 = *v68;
            v69[v70] = 3;
            *v68 = v70 + 2;
            v71 = v68 + 16;
            *(_QWORD *)&v71[8 * v70] = v49 + 1;
            v72 = (v70 + 1);
            v69[v72] = 10;
            *(_QWORD *)&v71[8 * v72] = v55;
            sub_22E3BB0B8((uint64_t)&v112);
            sub_22F0BBB34((uint64_t)&v112, v114, 2u);
            v73 = v112;
            if (!v112)
            {
              v73 = (_BYTE *)sub_22E3B8AAC(v113);
              v112 = v73;
            }
            v74 = v73 + 1;
            v75 = *v73;
            v74[v75] = 3;
            *v73 = v75 + 2;
            v76 = v73 + 16;
            *(_QWORD *)&v76[8 * v75] = v49 + 1;
            v77 = (v75 + 1);
            v74[v77] = 10;
            *(_QWORD *)&v76[8 * v77] = v56;
            goto LABEL_92;
          }
          if (v47 == ++v49)
            goto LABEL_45;
        }
        v78 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0);
        if (v78)
          v79 = *(_BYTE *)(v78 + 16) == 1;
        else
          v79 = 0;
        if (v79
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1
          && (v78 = sub_22F10CF48(*(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0))) != 0)
        {
          sub_22F0BB8CC((uint64_t)&v112, (uint64_t *)&v115, 1u);
          v80 = v112;
          if (!v112)
          {
            v80 = (_BYTE *)sub_22E3B8AAC(v113);
            v112 = v80;
          }
          v81 = v80 + 1;
          v82 = *v80;
          v81[v82] = 3;
          *v80 = v82 + 4;
          v83 = v80 + 16;
          *(_QWORD *)&v83[8 * v82] = v49 + 1;
          v84 = (v82 + 1);
          v81[v84] = 9;
          *(_QWORD *)&v83[8 * v84] = v52;
          v85 = (v82 + 2);
          v81[v85] = 2;
          *(_QWORD *)&v83[8 * v85] = 1;
          v86 = *(_QWORD *)(v78 + 32);
          v87 = (v82 + 3);
          v81[v87] = 9;
          *(_QWORD *)&v83[8 * v87] = v86;
        }
        else
        {
          sub_22F0BB8CC((uint64_t)&v112, (uint64_t *)&v115, 1u);
          v88 = v112;
          if (!v112)
          {
            v88 = (_BYTE *)sub_22E3B8AAC(v113);
            v112 = v88;
          }
          v89 = v88 + 1;
          v90 = *v88;
          v89[v90] = 3;
          *v88 = v90 + 3;
          v91 = v88 + 16;
          *(_QWORD *)&v91[8 * v90] = v49 + 1;
          v92 = (v90 + 1);
          v89[v92] = 9;
          *(_QWORD *)&v91[8 * v92] = v52;
          v93 = (v90 + 2);
          v89[v93] = 2;
          *(_QWORD *)&v91[8 * v93] = 0;
        }
        sub_22E3BB0B8((uint64_t)&v112);
        v94 = *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0);
        if (v94)
          v95 = *(_BYTE *)(v94 + 16) == 1;
        else
          v95 = 0;
        if (v95
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1
          && (v94 = sub_22F10CF48(*(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0))) != 0)
        {
          sub_22F0BBB34((uint64_t)&v112, v114, 1u);
          v96 = v112;
          if (!v112)
          {
            v96 = (_BYTE *)sub_22E3B8AAC(v113);
            v112 = v96;
          }
          v97 = v96 + 1;
          v98 = *v96;
          v97[v98] = 3;
          *v96 = v98 + 4;
          v99 = v96 + 16;
          *(_QWORD *)&v99[8 * v98] = v49 + 1;
          v100 = (v98 + 1);
          v97[v100] = 9;
          *(_QWORD *)&v99[8 * v100] = v53;
          v101 = (v98 + 2);
          v97[v101] = 2;
          *(_QWORD *)&v99[8 * v101] = 1;
          v102 = *(_QWORD *)(v94 + 32);
          v103 = (v98 + 3);
          v97[v103] = 9;
          *(_QWORD *)&v99[8 * v103] = v102;
        }
        else
        {
          sub_22F0BBB34((uint64_t)&v112, v114, 1u);
          v104 = v112;
          if (!v112)
          {
            v104 = (_BYTE *)sub_22E3B8AAC(v113);
            v112 = v104;
          }
          v105 = v104 + 1;
          v106 = *v104;
          v105[v106] = 3;
          *v104 = v106 + 3;
          v107 = v104 + 16;
          *(_QWORD *)&v107[8 * v106] = v49 + 1;
          v108 = (v106 + 1);
          v105[v108] = 9;
          *(_QWORD *)&v107[8 * v108] = v53;
          v109 = (v106 + 2);
          v105[v109] = 2;
          *(_QWORD *)&v107[8 * v109] = 0;
        }
      }
      else
      {
        sub_22F0BB8CC((uint64_t)&v112, (uint64_t *)&v115, 0);
        v61 = v112;
        if (!v112)
        {
          v61 = (_BYTE *)sub_22E3B8AAC(v113);
          v112 = v61;
        }
        v62 = *v61;
        v61[v62 + 1] = 3;
        *v61 = v62 + 1;
        *(_QWORD *)&v61[8 * v62 + 16] = v47;
        sub_22E3BB0B8((uint64_t)&v112);
        sub_22F0BBB34((uint64_t)&v112, v114, 0);
        v63 = v112;
        if (!v112)
        {
          v63 = (_BYTE *)sub_22E3B8AAC(v113);
          v112 = v63;
        }
        v64 = *v63;
        v63[v64 + 1] = 3;
        *v63 = v64 + 1;
        *(_QWORD *)&v63[8 * v64 + 16] = v48;
      }
LABEL_92:
      v35 = (uint64_t *)&v112;
      goto LABEL_21;
    }
    sub_22F0B65E8((uint64_t)&v115, (uint64_t)v111, 4u);
    v38 = sub_22EFDBF50(a7) == 3 && sub_22EA7D688(a7);
    v58 = v115;
    if (!v115)
    {
      v58 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
      v115 = v58;
    }
    v59 = *v58;
    v58[v59 + 1] = 2;
    *v58 = v59 + 1;
    *(_QWORD *)&v58[8 * v59 + 16] = v38;
    v60 = sub_22E3BB0B8((uint64_t)&v115);
    sub_22F0B67E4(v60, v110, 4u);
    v23 = sub_22EFDBF50(a8) == 3 && sub_22EA7D688(a8);
    goto LABEL_6;
  }
  sub_22F0B65E8((uint64_t)&v115, (uint64_t)v111, 2u);
  v19 = (*(_QWORD *)(a7 + 56) >> 17) & 1;
  v20 = v115;
  if (!v115)
  {
    v20 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
    v115 = v20;
  }
  v21 = *v20;
  v20[v21 + 1] = 2;
  *v20 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = v19;
  v22 = sub_22E3BB0B8((uint64_t)&v115);
  sub_22F0B67E4(v22, v110, 2u);
  v23 = (*(_QWORD *)(a8 + 56) >> 17) & 1;
LABEL_6:
  v24 = v115;
  if (!v115)
  {
    v24 = (_BYTE *)sub_22E3B8AAC((uint64_t)v116);
    v115 = v24;
  }
  v25 = *v24;
  v24[v25 + 1] = 2;
LABEL_19:
  *v24 = v25 + 1;
  *(_QWORD *)&v24[8 * v25 + 16] = v23;
LABEL_20:
  v35 = (uint64_t *)&v115;
LABEL_21:
  sub_22E3BB0B8((uint64_t)v35);
  return 1;
}

uint64_t sub_22F0B65E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v6 = **(_QWORD **)(a2 + 32);
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 24);
  *(_DWORD *)(v6 + 316) = 2140;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v26 = (unsigned __int8 *)(v6 + 320);
  v27 = 0;
  v28 = v6;
  v29 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  sub_22F0BA854((uint64_t)__p, *(_QWORD *)a2);
  if (v25 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v25 >= 0)
    v11 = v25 & 0x7F;
  else
    v11 = (size_t)__p[1];
  sub_22E3B89A8(&v26, v10, v11);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = v26;
  if (!v26)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v26;
  v15 = *v26;
  *v26 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = v12 == 0;
  v16 = sub_22E3B89A8(&v26, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  v17 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), v16);
  v18 = v26;
  if (!v26)
  {
    v18 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v18;
  }
  sub_22E4D6448((uint64_t)(v18 + 336), v17, 1);
  v19 = v26;
  if (!v26)
  {
    v19 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v19;
  }
  v19[*v19 + 1] = 2;
  v20 = v26;
  v21 = *v26;
  *v26 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = a3;
  v22 = v28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)a1 = v20;
  *(_WORD *)(a1 + 24) = v29;
  v28 = 0;
  v29 = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  return sub_22E3BB0B8((uint64_t)&v26);
}

uint64_t sub_22F0B67E4(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v6 = *(_QWORD *)a2[3];
  *(_DWORD *)(v6 + 312) = *(_DWORD *)(*a2 + 24);
  *(_DWORD *)(v6 + 316) = 2303;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v18 = (unsigned __int8 *)(v6 + 320);
  v19 = 0;
  v20 = v6;
  v21 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v7 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v6 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v10 = sub_22E3B89A8(&v18, (void *)a2[1], a2[2]);
  v11 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a2 + 16))(*a2, v10);
  v12 = v18;
  if (!v18)
  {
    v12 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v12;
  }
  sub_22E4D6448((uint64_t)(v12 + 336), v11, 1);
  v13 = v18;
  if (!v18)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
    v18 = v13;
  }
  v13[*v13 + 1] = 2;
  v14 = v18;
  v15 = *v18;
  *v18 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = a3;
  v16 = v20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = v14;
  *(_WORD *)(a1 + 24) = v21;
  v20 = 0;
  v21 = 0;
  return sub_22E3BB0B8((uint64_t)&v18);
}

uint64_t sub_22F0B6954(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, uint64_t a6, void *a7, size_t a8, int a9, int a10, int a11)
{
  int v17;
  _DWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int16 v59;
  _BYTE v60[12];

  v17 = *(_DWORD *)(a2 + 16);
  v18 = *(_DWORD **)a2;
  v19 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) >> 32;
  if (v17)
  {
    if (v18)
    {
      v20 = v18[6];
      v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      LODWORD(v57) = v20;
      *(_QWORD *)((char *)&v57 + 4) = v21;
      v22 = v57;
      v23 = HIDWORD(v21);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x16)
    goto LABEL_9;
  v24 = *(_QWORD *)(a3 + 120);
  if (!v24)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 96) + 88), *(_QWORD *)(a3 + 96));
    v24 = *(_QWORD *)(a3 + 120);
  }
  if (v24 < 8)
  {
LABEL_9:
    LODWORD(v23) = 0;
    LODWORD(v57) = v19;
    goto LABEL_10;
  }
  LODWORD(v23) = 0;
  LODWORD(v57) = a9;
LABEL_10:
  *(_QWORD *)((char *)&v57 + 4) = 0;
  v22 = v57;
LABEL_11:
  *(_QWORD *)v60 = v22;
  *(_DWORD *)&v60[8] = v23;
  v25 = *a1;
  *(_DWORD *)(v25 + 312) = v22;
  *(_DWORD *)(v25 + 316) = 2137;
  if (*(char *)(v25 + 311) < 0)
  {
    **(_BYTE **)(v25 + 288) = 0;
    *(_QWORD *)(v25 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v25 + 288) = 0;
    *(_BYTE *)(v25 + 311) = 0;
  }
  v57 = (unint64_t)(v25 + 320);
  v58 = v25;
  v59 = 1;
  *(_BYTE *)(v25 + 320) = 0;
  *(_DWORD *)(v25 + 664) = 0;
  v26 = *(unsigned int *)(v25 + 776);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD *)(v25 + 768);
    v28 = 56 * v26;
    do
    {
      if (*(char *)(v27 + v28 - 9) < 0)
        operator delete(*(void **)(v27 + v28 - 32));
      v28 -= 56;
    }
    while (v28);
    LODWORD(v26) = *(unsigned __int8 *)(v25 + 320);
  }
  *(_DWORD *)(v25 + 776) = 0;
  *(_BYTE *)(v25 + 321 + v26) = 11;
  *(_QWORD *)(v25 + 336 + 8 * v26) = a3;
  v29 = (v26 + 1);
  *(_BYTE *)(v25 + 321 + v29) = 2;
  *(_BYTE *)(v25 + 320) = v26 + 2;
  *(_QWORD *)(v25 + 336 + 8 * v29) = a5 == 0;
  sub_22E3B89A8((unsigned __int8 **)&v57, a4, a5);
  v30 = *(_QWORD *)&v60[4];
  v31 = v57;
  if (!(_QWORD)v57)
  {
    v31 = sub_22E3B8AAC(*((uint64_t *)&v57 + 1));
    *(_QWORD *)&v57 = v31;
  }
  sub_22E4D6448(v31 + 336, v30, 1);
  v32 = *(int *)(a2 + 16);
  v33 = (unsigned __int8 *)v57;
  if (!(_QWORD)v57)
  {
    v33 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v57 + 1));
    *(_QWORD *)&v57 = v33;
  }
  v33[*v33 + 1] = 2;
  v34 = v57;
  v35 = *(unsigned __int8 *)v57;
  *(_BYTE *)v57 = v35 + 1;
  *(_QWORD *)(v34 + 8 * v35 + 16) = v32;
  sub_22E3BB0B8((uint64_t)&v57);
  v36 = *(_DWORD *)(a2 + 20);
  v37 = *(_DWORD **)(a2 + 8);
  v38 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6) >> 32;
  if (v36)
  {
    if (v37)
    {
      v39 = v37[6];
      v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
      LODWORD(v57) = v39;
      *(_QWORD *)((char *)&v57 + 4) = v40;
      v41 = v57;
      v42 = HIDWORD(v40);
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a6 + 28) & 0x7F) != 0x16)
    goto LABEL_32;
  v43 = *(_QWORD *)(a6 + 120);
  if (!v43)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a6 + 96) + 88), *(_QWORD *)(a6 + 96));
    v43 = *(_QWORD *)(a6 + 120);
  }
  if (v43 < 8)
  {
LABEL_32:
    LODWORD(v42) = 0;
    LODWORD(v57) = v38;
    goto LABEL_33;
  }
  LODWORD(v42) = 0;
  LODWORD(v57) = a11;
LABEL_33:
  *(_QWORD *)((char *)&v57 + 4) = 0;
  v41 = v57;
LABEL_34:
  v56 = __PAIR64__(v42, HIDWORD(v41));
  v44 = *a1;
  *(_DWORD *)(v44 + 312) = v41;
  *(_DWORD *)(v44 + 316) = 2300;
  if (*(char *)(v44 + 311) < 0)
  {
    **(_BYTE **)(v44 + 288) = 0;
    *(_QWORD *)(v44 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v44 + 288) = 0;
    *(_BYTE *)(v44 + 311) = 0;
  }
  v57 = (unint64_t)(v44 + 320);
  v58 = v44;
  v59 = 1;
  *(_BYTE *)(v44 + 320) = 0;
  *(_DWORD *)(v44 + 664) = 0;
  v45 = *(unsigned int *)(v44 + 776);
  if ((_DWORD)v45)
  {
    v46 = *(_QWORD *)(v44 + 768);
    v47 = 56 * v45;
    do
    {
      if (*(char *)(v46 + v47 - 9) < 0)
        operator delete(*(void **)(v46 + v47 - 32));
      v47 -= 56;
    }
    while (v47);
  }
  *(_DWORD *)(v44 + 776) = 0;
  sub_22E3B89A8((unsigned __int8 **)&v57, a7, a8);
  v48 = v57;
  if (!(_QWORD)v57)
  {
    v48 = sub_22E3B8AAC(*((uint64_t *)&v57 + 1));
    *(_QWORD *)&v57 = v48;
  }
  sub_22E4D6448(v48 + 336, v56, 1);
  v49 = *(int *)(a2 + 20);
  v50 = (unsigned __int8 *)v57;
  if (!(_QWORD)v57)
  {
    v50 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v57 + 1));
    *(_QWORD *)&v57 = v50;
  }
  v50[*v50 + 1] = 2;
  v51 = v57;
  v52 = *(unsigned __int8 *)v57;
  *(_BYTE *)v57 = v52 + 1;
  *(_QWORD *)(v51 + 8 * v52 + 16) = v49;
  return sub_22E3BB0B8((uint64_t)&v57);
}

uint64_t sub_22F0B6D38(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD v46[3];
  _QWORD v47[4];

  v47[0] = a3;
  v47[1] = a4;
  v47[2] = a5;
  v47[3] = a1;
  v46[0] = a9;
  v46[1] = a10;
  v46[2] = a1;
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12 == *(_DWORD *)(a6 + 8))
  {
    if (!(_DWORD)v12)
      return 0;
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v13) + 40);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 8 * v13) + 40);
      if (v14 != v15)
        break;
      if (v12 == ++v13)
        return 0;
    }
    v33 = *(_DWORD *)(*(_QWORD *)(a6 + 16) + 4 * v13);
    sub_22F0B6FC0((uint64_t)&v44, (uint64_t)v47, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v13), 0, 1u);
    v34 = v44;
    if (!v44)
    {
      v34 = (_BYTE *)sub_22E3B8AAC(v45);
      v44 = v34;
    }
    v35 = v34 + 1;
    v36 = *v34;
    v35[v36] = 3;
    *v34 = v36 + 2;
    v37 = v34 + 16;
    *(_QWORD *)&v37[8 * v36] = v13 + 1;
    v38 = (v36 + 1);
    v35[v38] = 10;
    *(_QWORD *)&v37[8 * v38] = v14;
    sub_22E3BB0B8((uint64_t)&v44);
    sub_22F0B71AC((uint64_t)&v44, (uint64_t)v46, v33, 0, 1u);
    v39 = v44;
    if (!v44)
    {
      v39 = (_BYTE *)sub_22E3B8AAC(v45);
      v44 = v39;
    }
    v40 = v39 + 1;
    v41 = *v39;
    v40[v41] = 3;
    *v39 = v41 + 2;
    v42 = v39 + 16;
    *(_QWORD *)&v42[8 * v41] = v13 + 1;
    v43 = (v41 + 1);
    v40[v43] = 10;
    *(_QWORD *)&v42[8 * v43] = v15;
  }
  else
  {
    v18 = a3[6];
    if ((_DWORD)v12)
    {
      v19 = *(_DWORD **)(a2 + 16);
      LODWORD(v20) = *v19;
      v21 = v19[v12 - 1];
    }
    else
    {
      v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a3 + 16))(a3);
      v21 = HIDWORD(v20);
    }
    sub_22F0B6FC0((uint64_t)&v44, (uint64_t)v47, v18, v20 | (v21 << 32), 0);
    v22 = *(unsigned int *)(a2 + 8);
    v23 = v44;
    if (!v44)
    {
      v23 = (_BYTE *)sub_22E3B8AAC(v45);
      v44 = v23;
    }
    v24 = *v23;
    v23[v24 + 1] = 3;
    *v23 = v24 + 1;
    *(_QWORD *)&v23[8 * v24 + 16] = v22;
    sub_22E3BB0B8((uint64_t)&v44);
    v25 = a7[6];
    v26 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v26)
    {
      v27 = *(_DWORD **)(a6 + 16);
      LODWORD(v28) = *v27;
      v29 = v27[v26 - 1];
    }
    else
    {
      v28 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a7 + 16))(a7);
      v29 = HIDWORD(v28);
    }
    sub_22F0B71AC((uint64_t)&v44, (uint64_t)v46, v25, v28 | (v29 << 32), 0);
    v30 = *(unsigned int *)(a6 + 8);
    v31 = v44;
    if (!v44)
    {
      v31 = (_BYTE *)sub_22E3B8AAC(v45);
      v44 = v31;
    }
    v32 = *v31;
    v31[v32 + 1] = 3;
    *v31 = v32 + 1;
    *(_QWORD *)&v31[8 * v32 + 16] = v30;
  }
  sub_22E3BB0B8((uint64_t)&v44);
  return 1;
}

uint64_t sub_22F0B6FC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;

  v9 = **(_QWORD **)(a2 + 24);
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2143;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v27 = (unsigned __int8 *)(v9 + 320);
  v28 = 0;
  v29 = v9;
  v30 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  sub_22F0BA854((uint64_t)__p, *(_QWORD *)a2);
  if (v26 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v26 >= 0)
    v14 = v26 & 0x7F;
  else
    v14 = (size_t)__p[1];
  sub_22E3B89A8(&v27, v13, v14);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = v27;
  if (!v27)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v28);
    v27 = v16;
  }
  v16[*v16 + 1] = 2;
  v17 = v27;
  v18 = *v27;
  *v27 = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
  sub_22E3B89A8(&v27, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  v19 = v27;
  if (!v27)
  {
    v19 = (unsigned __int8 *)sub_22E3B8AAC(v28);
    v27 = v19;
  }
  sub_22E4D6448((uint64_t)(v19 + 336), a4, 1);
  v20 = v27;
  if (!v27)
  {
    v20 = (unsigned __int8 *)sub_22E3B8AAC(v28);
    v27 = v20;
  }
  v20[*v20 + 1] = 2;
  v21 = v27;
  v22 = *v27;
  *v27 = v22 + 1;
  *(_QWORD *)&v21[8 * v22 + 16] = a5;
  v23 = v29;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)a1 = v21;
  *(_WORD *)(a1 + 24) = v30;
  v29 = 0;
  v30 = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  return sub_22E3BB0B8((uint64_t)&v27);
}

uint64_t sub_22F0B71AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v9 = **(_QWORD **)(a2 + 16);
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2306;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v19 = (unsigned __int8 *)(v9 + 320);
  v20 = 0;
  v21 = v9;
  v22 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  sub_22E3B89A8(&v19, *(void **)a2, *(_QWORD *)(a2 + 8));
  v13 = v19;
  if (!v19)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(v20);
    v19 = v13;
  }
  sub_22E4D6448((uint64_t)(v13 + 336), a4, 1);
  v14 = v19;
  if (!v19)
  {
    v14 = (unsigned __int8 *)sub_22E3B8AAC(v20);
    v19 = v14;
  }
  v14[*v14 + 1] = 2;
  v15 = v19;
  v16 = *v19;
  *v19 = v16 + 1;
  *(_QWORD *)&v15[8 * v16 + 16] = a5;
  v17 = v21;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)a1 = v15;
  *(_WORD *)(a1 + 24) = v22;
  v21 = 0;
  v22 = 0;
  return sub_22E3BB0B8((uint64_t)&v19);
}

BOOL sub_22F0B730C(void **a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  unint64_t j;
  uint64_t v13;
  void *v15;
  size_t v16;
  void *p_p;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  _QWORD *v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t k;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _DWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  void *v62;
  size_t v63;
  void *v64;
  size_t v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  void *v93;
  size_t v94;
  __n128 v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  size_t v105;
  __n128 v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  void *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  _DWORD *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  char *v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  void **v140[2];
  _QWORD v141[3];
  void *__p;
  size_t v143;
  char v144;
  void *v145;
  size_t v146;
  char v147;
  void *v148;
  uint64_t v149;
  _BYTE v150[64];
  _QWORD *v151;
  uint64_t v152;
  _QWORD v153[10];

  v153[8] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return a2 != a3;
  sub_22F0AC2D8(a2, &v145);
  sub_22F0AC2D8(a3, &__p);
  v141[0] = a2;
  v141[1] = &v145;
  v141[2] = a1;
  v140[0] = &__p;
  v140[1] = a1;
  v9 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == a4)
  {
LABEL_4:
    v151 = v153;
    v152 = 0x400000000;
    v148 = v150;
    v149 = 0x400000000;
    if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
      sub_22EFCC320(a2 + 48);
    for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(i, a2 + 48))
      {
        v19 = sub_22F0B3CCC(i);
        sub_22F33F6D0((uint64_t)&v151, i, v19);
      }
    }
    if (a3)
      v11 = a3 + 48;
    else
      v11 = 0;
    if ((*(_WORD *)(a3 + 56) & 0x80) != 0)
      sub_22EFCC320(a3 + 48);
    for (j = *(_QWORD *)(a3 + 64); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(j, v11))
      {
        v20 = sub_22F0B3CCC(j);
        sub_22F33F6D0((uint64_t)&v148, j, v20);
      }
    }
    sub_22F3E9900(&v136, (uint64_t)v151, v152, (uint64_t *)v148, v149);
    v13 = v138;
    if (v138 == 15 || v139 == 15)
    {
      if (v147 >= 0)
        v15 = &v145;
      else
        v15 = v145;
      if (v147 >= 0)
        v16 = v147 & 0x7F;
      else
        v16 = v146;
      if (v144 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v144 >= 0)
        v18 = v144 & 0x7F;
      else
        v18 = v143;
      sub_22F0ADE34((uint64_t *)a1, &v136, a2, v15, v16, a3, p_p, v18);
      goto LABEL_194;
    }
    if (v138 != v139)
    {
      if (v147 >= 0)
        v62 = &v145;
      else
        v62 = v145;
      if (v147 >= 0)
        v63 = v147 & 0x7F;
      else
        v63 = v146;
      if (v144 >= 0)
        v64 = &__p;
      else
        v64 = __p;
      if (v144 >= 0)
        v65 = v144 & 0x7F;
      else
        v65 = v143;
      sub_22F0B6954((uint64_t *)a1, (uint64_t)&v136, a2, v62, v63, a3, v64, v65, *(_DWORD *)(v9 + 80), 0, *(_DWORD *)(a4 + 80));
      goto LABEL_194;
    }
    v31 = v136;
    v30 = v137;
    switch(v138)
    {
      case 12:
        if (v147 >= 0)
          v69 = &v145;
        else
          v69 = v145;
        if (v147 >= 0)
          v70 = v147 & 0x7F;
        else
          v70 = v146;
        if (v144 >= 0)
          v71 = &__p;
        else
          v71 = __p;
        if (v144 >= 0)
          v72 = v144 & 0x7F;
        else
          v72 = v143;
        if ((sub_22F0B5CF4((uint64_t *)a1, a2, (uint64_t)v69, v70, (uint64_t)v71, v72, v136, v137) & 1) != 0)
          goto LABEL_194;
        break;
      case 14:
        if (v147 >= 0)
          v73 = &v145;
        else
          v73 = v145;
        if (v147 >= 0)
          v74 = v147 & 0x7F;
        else
          v74 = v146;
        if (v144 >= 0)
          v75 = &__p;
        else
          v75 = __p;
        if (v144 >= 0)
          v76 = v144 & 0x7F;
        else
          v76 = v143;
        if ((sub_22F0B55F0((uint64_t)a1, a2, (uint64_t)v73, v74, (uint64_t)v75, v76, v136, v137) & 1) != 0)
          goto LABEL_194;
        break;
      case 13:
        if (v147 >= 0)
          v32 = &v145;
        else
          v32 = v145;
        if (v147 >= 0)
          v33 = v147 & 0x7F;
        else
          v33 = v146;
        if (v144 >= 0)
          v34 = &__p;
        else
          v34 = __p;
        if (v144 >= 0)
          v35 = v144 & 0x7F;
        else
          v35 = v143;
        if ((sub_22F0AC32C((uint64_t)a1, a2, (uint64_t)v32, v33, (uint64_t)v34, v35, v136, v137) & 1) != 0)
          goto LABEL_194;
        v36 = *(_BYTE *)(v31 + 88) & 7;
        if ((*(_BYTE *)(v31 + 88) & 7) == 0)
          v36 = 2;
        v37 = (*(_BYTE *)(v30 + 88) & 7) != 0 ? *(_BYTE *)(v30 + 88) & 7 : 2;
        if (v36 != v37)
        {
          v38 = *(_DWORD *)(v31 + 24);
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
          sub_22F0B7EF8((uint64_t)&v132, (uint64_t)v141, v38, v39, 1u);
          v40 = 0;
          v41 = *(_QWORD *)(v31 + 40);
          v42 = "";
          if ((v41 & 7) == 0)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if (v43)
            {
              v44 = *(_DWORD **)(v43 + 16);
              v45 = *v44;
              v42 = (char *)(v44 + 4);
              v40 = v45;
            }
          }
          sub_22E3B89A8(&v132, v42, v40);
          if ((*(_BYTE *)(v31 + 88) & 7) != 0)
            v46 = *(_BYTE *)(v31 + 88) & 7;
          else
            v46 = 2;
          v47 = v132;
          if (!v132)
          {
            v47 = (unsigned __int8 *)sub_22E3B8AAC(v133);
            v132 = v47;
          }
          v47[*v47 + 1] = 2;
          v48 = v132;
          v49 = *v132;
          *v132 = v49 + 1;
          *(_QWORD *)&v48[8 * v49 + 16] = v46;
          sub_22E3BB0B8((uint64_t)&v132);
          v50 = *(_DWORD *)(v30 + 24);
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          sub_22F0B8114((uint64_t)&v132, v140, v50, v51, 1u);
          v52 = 0;
          v53 = *(_QWORD *)(v30 + 40);
          v54 = "";
          if ((v53 & 7) == 0)
          {
            v55 = v53 & 0xFFFFFFFFFFFFFFF8;
            if (v55)
            {
              v56 = *(_DWORD **)(v55 + 16);
              v57 = *v56;
              v54 = (char *)(v56 + 4);
              v52 = v57;
            }
          }
          sub_22E3B89A8(&v132, v54, v52);
          if ((*(_BYTE *)(v30 + 88) & 7) != 0)
            v58 = *(_BYTE *)(v30 + 88) & 7;
          else
            v58 = 2;
          v59 = v132;
          if (!v132)
          {
            v59 = (unsigned __int8 *)sub_22E3B8AAC(v133);
            v132 = v59;
          }
          v59[*v59 + 1] = 2;
          v60 = v132;
          v61 = *v132;
          *v132 = v61 + 1;
          *(_QWORD *)&v60[8 * v61 + 16] = v58;
LABEL_193:
          sub_22E3BB0B8((uint64_t)&v132);
LABEL_194:
          if (v148 != v150)
            free(v148);
          if (v151 != v153)
            free(v151);
          goto LABEL_221;
        }
        break;
    }
    v131 = (_DWORD *)v30;
    v77 = (char *)*a1;
    *((_DWORD *)v77 + 78) = *(_DWORD *)(v31 + 24);
    *((_DWORD *)v77 + 79) = 2138;
    if (v77[311] < 0)
    {
      **((_BYTE **)v77 + 36) = 0;
      *((_QWORD *)v77 + 37) = 0;
    }
    else
    {
      v77[288] = 0;
      v77[311] = 0;
    }
    v132 = (unsigned __int8 *)(v77 + 320);
    v133 = 0;
    v134 = v77;
    v135 = 1;
    v77[320] = 0;
    *((_DWORD *)v77 + 166) = 0;
    v88 = *((unsigned int *)v77 + 194);
    if ((_DWORD)v88)
    {
      v130 = v31;
      v89 = *((_QWORD *)v77 + 96);
      v90 = 56 * v88;
      do
      {
        if (*(char *)(v89 + v90 - 9) < 0)
          operator delete(*(void **)(v89 + v90 - 32));
        v90 -= 56;
      }
      while (v90);
      LODWORD(v88) = v77[320];
      v31 = v130;
    }
    v77[v88 + 321] = 11;
    *((_DWORD *)v77 + 194) = 0;
    *(_QWORD *)&v77[8 * v88 + 336] = a2;
    v91 = v147 & 0x7F;
    if (v147 < 0)
      v91 = v146;
    v92 = (v88 + 1);
    v77[v92 + 321] = 2;
    v77[320] = v88 + 2;
    *(_QWORD *)&v77[8 * v92 + 336] = v91 == 0;
    if (v147 >= 0)
      v93 = &v145;
    else
      v93 = v145;
    if (v147 >= 0)
      v94 = v147 & 0x7F;
    else
      v94 = v146;
    v95.n128_f64[0] = sub_22E3B89A8(&v132, v93, v94);
    v96 = v132;
    if (!v132)
    {
      v96 = (unsigned __int8 *)sub_22E3B8AAC(v133);
      v132 = v96;
    }
    v96[*v96 + 1] = 2;
    v97 = v132;
    v98 = *v132;
    *v132 = v98 + 1;
    *(_QWORD *)&v97[8 * v98 + 16] = v13;
    v99 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v31 + 16))(v31, v95);
    sub_22E4D6448((uint64_t)(v97 + 336), v99, 1);
    sub_22E3BB0B8((uint64_t)&v132);
    v100 = (char *)*a1;
    *((_DWORD *)v100 + 78) = v131[6];
    *((_DWORD *)v100 + 79) = 2301;
    if (v100[311] < 0)
    {
      **((_BYTE **)v100 + 36) = 0;
      *((_QWORD *)v100 + 37) = 0;
    }
    else
    {
      v100[288] = 0;
      v100[311] = 0;
    }
    v132 = (unsigned __int8 *)(v100 + 320);
    v133 = 0;
    v134 = v100;
    v135 = 1;
    v100[320] = 0;
    *((_DWORD *)v100 + 166) = 0;
    v101 = *((unsigned int *)v100 + 194);
    if ((_DWORD)v101)
    {
      v102 = *((_QWORD *)v100 + 96);
      v103 = 56 * v101;
      do
      {
        if (*(char *)(v102 + v103 - 9) < 0)
          operator delete(*(void **)(v102 + v103 - 32));
        v103 -= 56;
      }
      while (v103);
    }
    *((_DWORD *)v100 + 194) = 0;
    if (v144 >= 0)
      v104 = &__p;
    else
      v104 = __p;
    if (v144 >= 0)
      v105 = v144 & 0x7F;
    else
      v105 = v143;
    v106.n128_f64[0] = sub_22E3B89A8(&v132, v104, v105);
    v107 = v132;
    if (!v132)
    {
      v107 = (unsigned __int8 *)sub_22E3B8AAC(v133);
      v132 = v107;
    }
    v107[*v107 + 1] = 2;
    v108 = v132;
    v109 = *v132;
    *v132 = v109 + 1;
    *(_QWORD *)&v108[8 * v109 + 16] = v13;
    v110 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v131 + 16))(v131, v106);
    sub_22E4D6448((uint64_t)(v108 + 336), v110, 1);
    goto LABEL_193;
  }
  v21 = sub_22F3B46CC(a2);
  v23 = (void **)sub_22F259044(a2);
  v24 = *(_QWORD **)(a4 + 8);
  if (v24)
  {
    v78 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
    if (v78)
      v79 = *(unsigned __int8 *)(v78 + 16) - 35 > 0xFFFFFFFD;
    else
      v79 = 0;
    if (!v79)
      v78 = sub_22F10CF48(v78);
    v80 = sub_22F272660(v78);
    v81 = v80;
    if (v21 && v80)
    {
      v129 = sub_22F3B4F18(v21);
      if (v129 != sub_22F3B4F18(v81))
        goto LABEL_41;
    }
    else if ((v21 != 0) != (v80 != 0))
    {
      goto LABEL_41;
    }
LABEL_145:
    v82 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(v82 + 72) & 1) != 0)
    {
      sub_22F3B48C4(a2);
      v82 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
    }
    v83 = v82 + 16;
    if (v147 >= 0)
      v84 = &v145;
    else
      v84 = v145;
    if (v147 >= 0)
      v85 = v147 & 0x7F;
    else
      v85 = v146;
    v86 = &__p;
    if (v144 < 0)
      v86 = __p;
    v87 = v144 & 0x7F;
    if (v144 < 0)
      v87 = v143;
    if ((sub_22F0B6D38((uint64_t)a1, v83, (_DWORD *)a2, (uint64_t)v84, v85, a4 + 16, (_DWORD *)a3, v22, (uint64_t)v86, v87) & 1) != 0)goto LABEL_221;
    goto LABEL_4;
  }
  if (!v21)
    goto LABEL_145;
LABEL_41:
  if (!v23)
  {
    v26 = *(_DWORD *)(a2 + 24);
    v66 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
    v67 = v66;
    v25 = 0;
    v68 = HIDWORD(v66);
    goto LABEL_200;
  }
  v25 = *v23;
  v26 = *(_DWORD *)(a2 + 24);
  v148 = v25;
  v149 = (uint64_t)(v23 + 1);
  v27 = (uint64_t)v25;
  for (k = (uint64_t)v25; ; k = sub_22F115B7C(k))
  {
    while (1)
    {
      if ((k & 0xF) != 0)
        goto LABEL_53;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(k & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_48:
      if (sub_22F115668(k))
        v27 = k;
      k = sub_22F115B7C(k);
      if (!k)
        goto LABEL_199;
    }
    if (v29 == 24)
      goto LABEL_198;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_48;
LABEL_53:
    ;
  }
  if ((*(_BYTE *)(k + 23) & 0x10) == 0)
    goto LABEL_53;
LABEL_198:
  v27 = k;
LABEL_199:
  v67 = sub_22F115668(v27);
  LODWORD(v68) = sub_22F1167E8((uint64_t *)&v148);
LABEL_200:
  sub_22F0B7EF8((uint64_t)&v151, (uint64_t)v141, v26, v67 | ((unint64_t)v68 << 32), 0);
  v111 = v151;
  if (!v151)
  {
    v111 = (_BYTE *)sub_22E3B8AAC(v152);
    v151 = v111;
  }
  v112 = v111 + 1;
  v113 = *v111;
  v112[v113] = 2;
  *v111 = v113 + 2;
  v114 = v111 + 16;
  *(_QWORD *)&v114[8 * v113] = v23 != 0;
  v115 = (v113 + 1);
  v112[v115] = 9;
  *(_QWORD *)&v114[8 * v115] = v25;
  sub_22E3BB0B8((uint64_t)&v151);
  if (!v24)
  {
    v117 = *(_DWORD *)(a3 + 24);
    v121 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 16))(a3);
    v122 = v121;
    v116 = 0;
    v123 = HIDWORD(v121);
    goto LABEL_218;
  }
  v116 = (void *)*v24;
  v117 = *(_DWORD *)(a3 + 24);
  v148 = v116;
  v149 = (uint64_t)(v24 + 1);
  v118 = (uint64_t)v116;
  v119 = (uint64_t)v116;
  while (2)
  {
    while (2)
    {
      if ((v119 & 0xF) != 0)
        goto LABEL_214;
      v120 = *(unsigned __int8 *)(*(_QWORD *)(v119 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v120 > 0x39)
      {
LABEL_209:
        if (sub_22F115668(v119))
          v118 = v119;
        v119 = sub_22F115B7C(v119);
        if (!v119)
          goto LABEL_217;
        continue;
      }
      break;
    }
    if (v120 == 24)
      break;
    if (v120 != 26)
    {
      if (((1 << v120) & 0x20000000200003CLL) != 0)
        goto LABEL_214;
      goto LABEL_209;
    }
    if ((*(_BYTE *)(v119 + 23) & 0x10) == 0)
    {
LABEL_214:
      v119 = sub_22F115B7C(v119);
      continue;
    }
    break;
  }
  v118 = v119;
LABEL_217:
  v122 = sub_22F115668(v118);
  LODWORD(v123) = sub_22F1167E8((uint64_t *)&v148);
LABEL_218:
  sub_22F0B8114((uint64_t)&v151, v140, v117, v122 | ((unint64_t)v123 << 32), 0);
  v124 = v151;
  if (!v151)
  {
    v124 = (_BYTE *)sub_22E3B8AAC(v152);
    v151 = v124;
  }
  v125 = v124 + 1;
  v126 = *v124;
  v125[v126] = 2;
  *v124 = v126 + 2;
  v127 = v124 + 16;
  *(_QWORD *)&v127[8 * v126] = v24 != 0;
  v128 = (v126 + 1);
  v125[v128] = 9;
  *(_QWORD *)&v127[8 * v128] = v116;
  sub_22E3BB0B8((uint64_t)&v151);
LABEL_221:
  if (v144 < 0)
    operator delete(__p);
  if (v147 < 0)
    operator delete(v145);
  return a2 != a3;
}

uint64_t sub_22F0B7EF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  size_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;

  v9 = **(_QWORD **)(a2 + 16);
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2139;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v32 = (unsigned __int8 *)(v9 + 320);
  v33 = 0;
  v34 = v9;
  v35 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  sub_22F0BA854((uint64_t)__p, *(_QWORD *)a2);
  if (v31 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v31 >= 0)
    v14 = v31 & 0x7F;
  else
    v14 = (size_t)__p[1];
  sub_22E3B89A8(&v32, v13, v14);
  v15 = *(_QWORD *)(a2 + 8);
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = v32;
  if (!v32)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v17;
  }
  v17[*v17 + 1] = 2;
  v18 = v32;
  v19 = *v32;
  *v32 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = v16 == 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = *(_BYTE *)(v20 + 23);
  if (v21 >= 0)
    v22 = *(void **)(a2 + 8);
  else
    v22 = *(void **)v20;
  if (v21 >= 0)
    v23 = v21 & 0x7F;
  else
    v23 = *(_QWORD *)(v20 + 8);
  sub_22E3B89A8(&v32, v22, v23);
  v24 = v32;
  if (!v32)
  {
    v24 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v24;
  }
  sub_22E4D6448((uint64_t)(v24 + 336), a4, 1);
  v25 = v32;
  if (!v32)
  {
    v25 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v25;
  }
  v25[*v25 + 1] = 2;
  v26 = v32;
  v27 = *v32;
  *v32 = v27 + 1;
  *(_QWORD *)&v26[8 * v27 + 16] = a5;
  v28 = v34;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)a1 = v26;
  *(_WORD *)(a1 + 24) = v35;
  v34 = 0;
  v35 = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  return sub_22E3BB0B8((uint64_t)&v32);
}

uint64_t sub_22F0B8114(uint64_t a1, void ***a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  size_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v9 = (uint64_t)*a2[1];
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2302;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v22 = (unsigned __int8 *)(v9 + 320);
  v23 = 0;
  v24 = v9;
  v25 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v13 = *((_BYTE *)*a2 + 23);
  if (v13 >= 0)
    v14 = *a2;
  else
    v14 = **a2;
  if (v13 >= 0)
    v15 = v13 & 0x7F;
  else
    v15 = (size_t)(*a2)[1];
  sub_22E3B89A8(&v22, v14, v15);
  v16 = v22;
  if (!v22)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v16;
  }
  sub_22E4D6448((uint64_t)(v16 + 336), a4, 1);
  v17 = v22;
  if (!v22)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v17;
  }
  v17[*v17 + 1] = 2;
  v18 = v22;
  v19 = *v22;
  *v22 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = a5;
  v20 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)a1 = v18;
  *(_WORD *)(a1 + 24) = v25;
  v24 = 0;
  v25 = 0;
  return sub_22E3BB0B8((uint64_t)&v22);
}

BOOL sub_22F0B8290(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *p_p;
  uint64_t v14;
  unint64_t i;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  void *v21;
  size_t v22;
  void *v23;
  size_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  void *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  size_t v48;
  __n128 v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  size_t v59;
  __n128 v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  int v74;
  void *__p;
  size_t v76;
  char v77;
  void *v78;
  size_t v79;
  char v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[64];
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[10];

  v86[8] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return a2 != a3;
  sub_22F0AC2D8(a2, &v78);
  sub_22F0AC2D8(a3, &__p);
  v9 = *(_QWORD *)(a2 + 104) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == a4)
    goto LABEL_19;
  v10 = v9 + 8;
  if (v80 >= 0)
    v11 = &v78;
  else
    v11 = v78;
  if (v80 >= 0)
    v12 = v80 & 0x7F;
  else
    v12 = v79;
  p_p = __p;
  if (v77 >= 0)
    p_p = &__p;
  v14 = v77 & 0x7F;
  if (v77 < 0)
    v14 = v76;
  if ((sub_22F0B6D38((uint64_t)a1, v10, (_DWORD *)a2, (uint64_t)v11, v12, a4 + 8, (_DWORD *)a3, v8, (uint64_t)p_p, v14) & 1) == 0)
  {
LABEL_19:
    v84 = v86;
    v85 = 0x400000000;
    v81 = v83;
    v82 = 0x400000000;
    if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
      sub_22EFCC320(a2 + 48);
    for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(i, a2 + 48))
      {
        v25 = sub_22F0B3CCC(i);
        sub_22F33F6D0((uint64_t)&v84, i, v25);
      }
    }
    if (a3)
      v17 = a3 + 48;
    else
      v17 = 0;
    if ((*(_WORD *)(a3 + 56) & 0x80) != 0)
      sub_22EFCC320(a3 + 48);
    for (j = *(_QWORD *)(a3 + 64); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(j, v17))
      {
        v26 = sub_22F0B3CCC(j);
        sub_22F33F6D0((uint64_t)&v81, j, v26);
      }
    }
    sub_22F3E9900(&v71, (uint64_t)v84, v85, (uint64_t *)v81, v82);
    v19 = v73;
    if (v73 == 15 || v74 == 15)
    {
      if (v80 >= 0)
        v21 = &v78;
      else
        v21 = v78;
      if (v80 >= 0)
        v22 = v80 & 0x7F;
      else
        v22 = v79;
      if (v77 >= 0)
        v23 = &__p;
      else
        v23 = __p;
      if (v77 >= 0)
        v24 = v77 & 0x7F;
      else
        v24 = v76;
      sub_22F0ADE34(a1, &v71, a2, v21, v22, a3, v23, v24);
      goto LABEL_133;
    }
    if (v73 != v74)
    {
      if (v80 >= 0)
        v33 = &v78;
      else
        v33 = v78;
      if (v80 >= 0)
        v34 = v80 & 0x7F;
      else
        v34 = v79;
      if (v77 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v77 >= 0)
        v36 = v77 & 0x7F;
      else
        v36 = v76;
      sub_22F0B6954(a1, (uint64_t)&v71, a2, v33, v34, a3, v35, v36, 0, 0, 0);
      goto LABEL_133;
    }
    v28 = v71;
    v27 = v72;
    if (v73 == 12)
    {
      if (v80 >= 0)
        v37 = &v78;
      else
        v37 = v78;
      if (v80 >= 0)
        v38 = v80 & 0x7F;
      else
        v38 = v79;
      if (v77 >= 0)
        v39 = &__p;
      else
        v39 = __p;
      if (v77 >= 0)
        v40 = v77 & 0x7F;
      else
        v40 = v76;
      if ((sub_22F0B5CF4(a1, a2, (uint64_t)v37, v38, (uint64_t)v39, v40, (uint64_t)v71, v72) & 1) != 0)
        goto LABEL_133;
    }
    else if (v73 == 14)
    {
      v29 = v80 >= 0 ? &v78 : (void **)v78;
      v30 = v80 >= 0 ? v80 & 0x7F : v79;
      v31 = v77 >= 0 ? &__p : (void **)__p;
      v32 = v77 >= 0 ? v77 & 0x7F : v76;
      if ((sub_22F0B55F0((uint64_t)a1, a2, (uint64_t)v29, v30, (uint64_t)v31, v32, (uint64_t)v71, v72) & 1) != 0)
      {
LABEL_133:
        if (v81 != v83)
          free(v81);
        if (v84 != v86)
          free(v84);
        goto LABEL_14;
      }
    }
    v66 = (_DWORD *)v27;
    v41 = *a1;
    *(_DWORD *)(v41 + 312) = v28[6];
    *(_DWORD *)(v41 + 316) = 2138;
    if (*(char *)(v41 + 311) < 0)
    {
      **(_BYTE **)(v41 + 288) = 0;
      *(_QWORD *)(v41 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v41 + 288) = 0;
      *(_BYTE *)(v41 + 311) = 0;
    }
    v67 = (unsigned __int8 *)(v41 + 320);
    v68 = 0;
    v69 = v41;
    v70 = 1;
    *(_BYTE *)(v41 + 320) = 0;
    *(_DWORD *)(v41 + 664) = 0;
    v42 = *(unsigned int *)(v41 + 776);
    if ((_DWORD)v42)
    {
      v65 = v28;
      v43 = *(_QWORD *)(v41 + 768);
      v44 = 56 * v42;
      do
      {
        if (*(char *)(v43 + v44 - 9) < 0)
          operator delete(*(void **)(v43 + v44 - 32));
        v44 -= 56;
      }
      while (v44);
      LODWORD(v42) = *(unsigned __int8 *)(v41 + 320);
      v28 = v65;
    }
    *(_BYTE *)(v41 + 321 + v42) = 11;
    *(_DWORD *)(v41 + 776) = 0;
    *(_QWORD *)(v41 + 336 + 8 * v42) = a2;
    v45 = v80 & 0x7F;
    if (v80 < 0)
      v45 = v79;
    v46 = (v42 + 1);
    *(_BYTE *)(v41 + 321 + v46) = 2;
    *(_BYTE *)(v41 + 320) = v42 + 2;
    *(_QWORD *)(v41 + 336 + 8 * v46) = v45 == 0;
    if (v80 >= 0)
      v47 = &v78;
    else
      v47 = v78;
    if (v80 >= 0)
      v48 = v80 & 0x7F;
    else
      v48 = v79;
    v49.n128_f64[0] = sub_22E3B89A8(&v67, v47, v48);
    v50 = v67;
    if (!v67)
    {
      v50 = (unsigned __int8 *)sub_22E3B8AAC(v68);
      v67 = v50;
    }
    v50[*v50 + 1] = 2;
    v51 = v67;
    v52 = *v67;
    *v67 = v52 + 1;
    *(_QWORD *)&v51[8 * v52 + 16] = v19;
    v53 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v28 + 16))(v28, v49);
    sub_22E4D6448((uint64_t)(v51 + 336), v53, 1);
    sub_22E3BB0B8((uint64_t)&v67);
    v54 = *a1;
    *(_DWORD *)(v54 + 312) = v66[6];
    *(_DWORD *)(v54 + 316) = 2301;
    if (*(char *)(v54 + 311) < 0)
    {
      **(_BYTE **)(v54 + 288) = 0;
      *(_QWORD *)(v54 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v54 + 288) = 0;
      *(_BYTE *)(v54 + 311) = 0;
    }
    v67 = (unsigned __int8 *)(v54 + 320);
    v68 = 0;
    v69 = v54;
    v70 = 1;
    *(_BYTE *)(v54 + 320) = 0;
    *(_DWORD *)(v54 + 664) = 0;
    v55 = *(unsigned int *)(v54 + 776);
    if ((_DWORD)v55)
    {
      v56 = *(_QWORD *)(v54 + 768);
      v57 = 56 * v55;
      do
      {
        if (*(char *)(v56 + v57 - 9) < 0)
          operator delete(*(void **)(v56 + v57 - 32));
        v57 -= 56;
      }
      while (v57);
    }
    *(_DWORD *)(v54 + 776) = 0;
    if (v77 >= 0)
      v58 = &__p;
    else
      v58 = __p;
    if (v77 >= 0)
      v59 = v77 & 0x7F;
    else
      v59 = v76;
    v60.n128_f64[0] = sub_22E3B89A8(&v67, v58, v59);
    v61 = v67;
    if (!v67)
    {
      v61 = (unsigned __int8 *)sub_22E3B8AAC(v68);
      v67 = v61;
    }
    v61[*v61 + 1] = 2;
    v62 = v67;
    v63 = *v67;
    *v67 = v63 + 1;
    *(_QWORD *)&v62[8 * v63 + 16] = v19;
    v64 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v66 + 16))(v66, v60);
    sub_22E4D6448((uint64_t)(v62 + 336), v64, 1);
    sub_22E3BB0B8((uint64_t)&v67);
    goto LABEL_133;
  }
LABEL_14:
  if (v77 < 0)
    operator delete(__p);
  if (v80 < 0)
    operator delete(v78);
  return a2 != a3;
}

BOOL sub_22F0B88F4(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *p_p;
  uint64_t v14;
  unint64_t i;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  void *v21;
  size_t v22;
  void *v23;
  size_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  void *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  size_t v48;
  __n128 v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  size_t v59;
  __n128 v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  int v74;
  void *__p;
  size_t v76;
  char v77;
  void *v78;
  size_t v79;
  char v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[64];
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[10];

  v86[8] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return a2 != a3;
  sub_22F0AC2D8(a2, &v78);
  sub_22F0AC2D8(a3, &__p);
  v9 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == a4)
    goto LABEL_19;
  v10 = v9 + 16;
  if (v80 >= 0)
    v11 = &v78;
  else
    v11 = v78;
  if (v80 >= 0)
    v12 = v80 & 0x7F;
  else
    v12 = v79;
  p_p = __p;
  if (v77 >= 0)
    p_p = &__p;
  v14 = v77 & 0x7F;
  if (v77 < 0)
    v14 = v76;
  if ((sub_22F0B6D38((uint64_t)a1, v10, (_DWORD *)a2, (uint64_t)v11, v12, a4 + 16, (_DWORD *)a3, v8, (uint64_t)p_p, v14) & 1) == 0)
  {
LABEL_19:
    v84 = v86;
    v85 = 0x400000000;
    v81 = v83;
    v82 = 0x400000000;
    if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
      sub_22EFCC320(a2 + 48);
    for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(i, a2 + 48))
      {
        v25 = sub_22F0B3CCC(i);
        sub_22F33F6D0((uint64_t)&v84, i, v25);
      }
    }
    if (a3)
      v17 = a3 + 48;
    else
      v17 = 0;
    if ((*(_WORD *)(a3 + 56) & 0x80) != 0)
      sub_22EFCC320(a3 + 48);
    for (j = *(_QWORD *)(a3 + 64); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(j, v17))
      {
        v26 = sub_22F0B3CCC(j);
        sub_22F33F6D0((uint64_t)&v81, j, v26);
      }
    }
    sub_22F3E9900(&v71, (uint64_t)v84, v85, (uint64_t *)v81, v82);
    v19 = v73;
    if (v73 == 15 || v74 == 15)
    {
      if (v80 >= 0)
        v21 = &v78;
      else
        v21 = v78;
      if (v80 >= 0)
        v22 = v80 & 0x7F;
      else
        v22 = v79;
      if (v77 >= 0)
        v23 = &__p;
      else
        v23 = __p;
      if (v77 >= 0)
        v24 = v77 & 0x7F;
      else
        v24 = v76;
      sub_22F0ADE34(a1, &v71, a2, v21, v22, a3, v23, v24);
      goto LABEL_133;
    }
    if (v73 != v74)
    {
      if (v80 >= 0)
        v33 = &v78;
      else
        v33 = v78;
      if (v80 >= 0)
        v34 = v80 & 0x7F;
      else
        v34 = v79;
      if (v77 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v77 >= 0)
        v36 = v77 & 0x7F;
      else
        v36 = v76;
      sub_22F0B6954(a1, (uint64_t)&v71, a2, v33, v34, a3, v35, v36, 0, 0, 0);
      goto LABEL_133;
    }
    v28 = v71;
    v27 = v72;
    if (v73 == 12)
    {
      if (v80 >= 0)
        v37 = &v78;
      else
        v37 = v78;
      if (v80 >= 0)
        v38 = v80 & 0x7F;
      else
        v38 = v79;
      if (v77 >= 0)
        v39 = &__p;
      else
        v39 = __p;
      if (v77 >= 0)
        v40 = v77 & 0x7F;
      else
        v40 = v76;
      if ((sub_22F0B5CF4(a1, a2, (uint64_t)v37, v38, (uint64_t)v39, v40, (uint64_t)v71, v72) & 1) != 0)
        goto LABEL_133;
    }
    else if (v73 == 14)
    {
      v29 = v80 >= 0 ? &v78 : (void **)v78;
      v30 = v80 >= 0 ? v80 & 0x7F : v79;
      v31 = v77 >= 0 ? &__p : (void **)__p;
      v32 = v77 >= 0 ? v77 & 0x7F : v76;
      if ((sub_22F0B55F0((uint64_t)a1, a2, (uint64_t)v29, v30, (uint64_t)v31, v32, (uint64_t)v71, v72) & 1) != 0)
      {
LABEL_133:
        if (v81 != v83)
          free(v81);
        if (v84 != v86)
          free(v84);
        goto LABEL_14;
      }
    }
    v66 = (_DWORD *)v27;
    v41 = *a1;
    *(_DWORD *)(v41 + 312) = v28[6];
    *(_DWORD *)(v41 + 316) = 2138;
    if (*(char *)(v41 + 311) < 0)
    {
      **(_BYTE **)(v41 + 288) = 0;
      *(_QWORD *)(v41 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v41 + 288) = 0;
      *(_BYTE *)(v41 + 311) = 0;
    }
    v67 = (unsigned __int8 *)(v41 + 320);
    v68 = 0;
    v69 = v41;
    v70 = 1;
    *(_BYTE *)(v41 + 320) = 0;
    *(_DWORD *)(v41 + 664) = 0;
    v42 = *(unsigned int *)(v41 + 776);
    if ((_DWORD)v42)
    {
      v65 = v28;
      v43 = *(_QWORD *)(v41 + 768);
      v44 = 56 * v42;
      do
      {
        if (*(char *)(v43 + v44 - 9) < 0)
          operator delete(*(void **)(v43 + v44 - 32));
        v44 -= 56;
      }
      while (v44);
      LODWORD(v42) = *(unsigned __int8 *)(v41 + 320);
      v28 = v65;
    }
    *(_BYTE *)(v41 + 321 + v42) = 11;
    *(_DWORD *)(v41 + 776) = 0;
    *(_QWORD *)(v41 + 336 + 8 * v42) = a2;
    v45 = v80 & 0x7F;
    if (v80 < 0)
      v45 = v79;
    v46 = (v42 + 1);
    *(_BYTE *)(v41 + 321 + v46) = 2;
    *(_BYTE *)(v41 + 320) = v42 + 2;
    *(_QWORD *)(v41 + 336 + 8 * v46) = v45 == 0;
    if (v80 >= 0)
      v47 = &v78;
    else
      v47 = v78;
    if (v80 >= 0)
      v48 = v80 & 0x7F;
    else
      v48 = v79;
    v49.n128_f64[0] = sub_22E3B89A8(&v67, v47, v48);
    v50 = v67;
    if (!v67)
    {
      v50 = (unsigned __int8 *)sub_22E3B8AAC(v68);
      v67 = v50;
    }
    v50[*v50 + 1] = 2;
    v51 = v67;
    v52 = *v67;
    *v67 = v52 + 1;
    *(_QWORD *)&v51[8 * v52 + 16] = v19;
    v53 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v28 + 16))(v28, v49);
    sub_22E4D6448((uint64_t)(v51 + 336), v53, 1);
    sub_22E3BB0B8((uint64_t)&v67);
    v54 = *a1;
    *(_DWORD *)(v54 + 312) = v66[6];
    *(_DWORD *)(v54 + 316) = 2301;
    if (*(char *)(v54 + 311) < 0)
    {
      **(_BYTE **)(v54 + 288) = 0;
      *(_QWORD *)(v54 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v54 + 288) = 0;
      *(_BYTE *)(v54 + 311) = 0;
    }
    v67 = (unsigned __int8 *)(v54 + 320);
    v68 = 0;
    v69 = v54;
    v70 = 1;
    *(_BYTE *)(v54 + 320) = 0;
    *(_DWORD *)(v54 + 664) = 0;
    v55 = *(unsigned int *)(v54 + 776);
    if ((_DWORD)v55)
    {
      v56 = *(_QWORD *)(v54 + 768);
      v57 = 56 * v55;
      do
      {
        if (*(char *)(v56 + v57 - 9) < 0)
          operator delete(*(void **)(v56 + v57 - 32));
        v57 -= 56;
      }
      while (v57);
    }
    *(_DWORD *)(v54 + 776) = 0;
    if (v77 >= 0)
      v58 = &__p;
    else
      v58 = __p;
    if (v77 >= 0)
      v59 = v77 & 0x7F;
    else
      v59 = v76;
    v60.n128_f64[0] = sub_22E3B89A8(&v67, v58, v59);
    v61 = v67;
    if (!v67)
    {
      v61 = (unsigned __int8 *)sub_22E3B8AAC(v68);
      v67 = v61;
    }
    v61[*v61 + 1] = 2;
    v62 = v67;
    v63 = *v67;
    *v67 = v63 + 1;
    *(_QWORD *)&v62[8 * v63 + 16] = v19;
    v64 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v66 + 16))(v66, v60);
    sub_22E4D6448((uint64_t)(v62 + 336), v64, 1);
    sub_22E3BB0B8((uint64_t)&v67);
    goto LABEL_133;
  }
LABEL_14:
  if (v77 < 0)
    operator delete(__p);
  if (v80 < 0)
    operator delete(v78);
  return a2 != a3;
}

BOOL sub_22F0B8F58(void **a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned __int8 v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned __int8 v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[32];
  _BYTE v127[32];
  _BYTE *v128;
  uint64_t v129;
  void **v130[2];
  uint64_t v131[3];
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;

  if (a2 == a3)
    return a2 != a3;
  sub_22F0AC2D8(a2, v134);
  sub_22F0AC2D8(a3, v132);
  v131[0] = a2;
  v131[1] = (uint64_t)v134;
  v131[2] = (uint64_t)a1;
  v130[0] = v132;
  v130[1] = a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 16) - 27 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(v6);
  v8 = sub_22F0ACDAC(*(_QWORD *)(v6 + 24));
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) - 27 > 0xFFFFFFFD;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  if (v8 != sub_22F0ACDAC(*(_QWORD *)(v9 + 24)))
  {
    v78 = sub_22F3AC46C(a2);
    v79 = sub_22F3AC46C(a2);
    sub_22F0B9924((uint64_t)&v128, v131, v78, v79, 0);
    v80 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v80 || *(unsigned __int8 *)(v80 + 16) - 27 <= 0xFFFFFFFD)
      v80 = sub_22F10CF48(v80);
    v81 = *(_QWORD *)(v80 + 24);
    v82 = v128;
    if (!v128)
    {
      v82 = (_BYTE *)sub_22E3B8AAC(v129);
      v128 = v82;
    }
    v83 = *v82;
    v82[v83 + 1] = 9;
    *v82 = v83 + 1;
    *(_QWORD *)&v82[8 * v83 + 16] = v81;
    sub_22E3BB0B8((uint64_t)&v128);
    v84 = sub_22F3AC46C(a3);
    v85 = sub_22F3AC46C(a3);
    sub_22F0B9B04((uint64_t)&v128, v130, v84, v85, 0);
    v86 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v86 || *(unsigned __int8 *)(v86 + 16) - 27 <= 0xFFFFFFFD)
      v86 = sub_22F10CF48(v86);
    v87 = *(_QWORD *)(v86 + 24);
    v88 = v128;
    if (!v128)
    {
      v88 = (_BYTE *)sub_22E3B8AAC(v129);
      v128 = v88;
    }
    v89 = *v88;
    v88[v89 + 1] = 9;
    *v88 = v89 + 1;
    *(_QWORD *)&v88[8 * v89 + 16] = v87;
LABEL_72:
    v30 = &v128;
    goto LABEL_73;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (v12
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v11 = sub_22F10CF48(v11)) != 0)
  {
    v13 = *(_QWORD *)(v11 + 16);
    if ((v13 & 0x3FFFC000000000) != 0)
    {
      v14 = 0;
      v15 = (unsigned __int16)(v13 >> 38);
      while (1)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v14);
        v17 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v14);
        if (*(_QWORD *)(v16 + 40) != *(_QWORD *)(v17 + 40))
          break;
        v18 = *(_QWORD *)(v16 + 48);
        v19 = *(_QWORD *)(v17 + 48);
        if (v18 != v19)
        {
          v20 = sub_22F0ACDAC(*(_QWORD *)(v16 + 48));
          if (v20 != sub_22F0ACDAC(v19))
          {
            v56 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
            if (v56)
              v57 = *(_BYTE *)(v56 + 16) == 1;
            else
              v57 = 0;
            if (v57
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1
              && (v56 = sub_22F10CF48(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0))) != 0)
            {
              v58 = *(_DWORD *)(v16 + 24);
              v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
              sub_22F0B9924((uint64_t)&v128, v131, v58, v59, 2u);
              v60 = v128;
              if (!v128)
              {
                v60 = (_BYTE *)sub_22E3B8AAC(v129);
                v128 = v60;
              }
              v61 = v60 + 1;
              v62 = *v60;
              v61[v62] = 3;
              *v60 = v62 + 4;
              v63 = v60 + 16;
              *(_QWORD *)&v63[8 * v62] = (v14 + 1);
              v64 = (v62 + 1);
              v61[v64] = 9;
              *(_QWORD *)&v63[8 * v64] = v18;
              v65 = (v62 + 2);
              v61[v65] = 2;
              *(_QWORD *)&v63[8 * v65] = 1;
              v66 = *(_QWORD *)(v56 + 32);
              v67 = (v62 + 3);
              v61[v67] = 9;
              *(_QWORD *)&v63[8 * v67] = v66;
            }
            else
            {
              v98 = *(_DWORD *)(v16 + 24);
              v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
              sub_22F0B9924((uint64_t)&v128, v131, v98, v99, 2u);
              v100 = v128;
              if (!v128)
              {
                v100 = (_BYTE *)sub_22E3B8AAC(v129);
                v128 = v100;
              }
              v101 = v100 + 1;
              v102 = *v100;
              v101[v102] = 3;
              *v100 = v102 + 3;
              v103 = v100 + 16;
              *(_QWORD *)&v103[8 * v102] = (v14 + 1);
              v104 = (v102 + 1);
              v101[v104] = 9;
              *(_QWORD *)&v103[8 * v104] = v18;
              v105 = (v102 + 2);
              v101[v105] = 2;
              *(_QWORD *)&v103[8 * v105] = 0;
            }
            sub_22E3BB0B8((uint64_t)&v128);
            v106 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
            if (v106)
              v107 = *(_BYTE *)(v106 + 16) == 1;
            else
              v107 = 0;
            if (v107
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v106 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1
              && (v106 = sub_22F10CF48(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0))) != 0)
            {
              v108 = *(_DWORD *)(v17 + 24);
              v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
              sub_22F0B9B04((uint64_t)&v128, v130, v108, v109, 2u);
              v110 = v128;
              if (!v128)
              {
                v110 = (_BYTE *)sub_22E3B8AAC(v129);
                v128 = v110;
              }
              v111 = v110 + 1;
              v112 = *v110;
              v111[v112] = 3;
              *v110 = v112 + 4;
              v113 = v110 + 16;
              *(_QWORD *)&v113[8 * v112] = (v14 + 1);
              v114 = (v112 + 1);
              v111[v114] = 9;
              *(_QWORD *)&v113[8 * v114] = v19;
              v115 = (v112 + 2);
              v111[v115] = 2;
              *(_QWORD *)&v113[8 * v115] = 1;
              v116 = *(_QWORD *)(v106 + 32);
              v117 = (v112 + 3);
              v111[v117] = 9;
              *(_QWORD *)&v113[8 * v117] = v116;
            }
            else
            {
              v118 = *(_DWORD *)(v17 + 24);
              v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
              sub_22F0B9B04((uint64_t)&v128, v130, v118, v119, 2u);
              v120 = v128;
              if (!v128)
              {
                v120 = (_BYTE *)sub_22E3B8AAC(v129);
                v128 = v120;
              }
              v121 = v120 + 1;
              v122 = *v120;
              v121[v122] = 3;
              *v120 = v122 + 3;
              v123 = v120 + 16;
              *(_QWORD *)&v123[8 * v122] = (v14 + 1);
              v124 = (v122 + 1);
              v121[v124] = 9;
              *(_QWORD *)&v123[8 * v124] = v19;
              v125 = (v122 + 2);
              v121[v125] = 2;
              *(_QWORD *)&v123[8 * v125] = 0;
            }
            goto LABEL_72;
          }
        }
        v21 = (unsigned __int8 *)sub_22EFBC5B4(v16);
        v22 = sub_22EFBC5B4(v17);
        v23 = (unsigned __int8 *)v22;
        if ((v21 == 0) != (v22 == 0))
        {
          v47 = *(_DWORD *)(v16 + 24);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
          sub_22F0B9924((uint64_t)&v128, v131, v47, v48, 3u);
          v49 = v128;
          if (!v128)
          {
            v49 = (_BYTE *)sub_22E3B8AAC(v129);
            v128 = v49;
          }
          v50 = (v14 + 1);
          v51 = v49 + 1;
          v52 = *v49;
          v51[v52] = 3;
          *v49 = v52 + 2;
          *(_QWORD *)&v49[8 * v52 + 16] = v50;
          v53 = (v52 + 1);
          v51[v53] = 2;
          *(_QWORD *)&v49[8 * v53 + 16] = v21 == 0;
          if (v21)
          {
            sub_22F0D4E74((uint64_t)v21);
            v55 = v54;
          }
          else
          {
            v55 = 0;
          }
          sub_22E4D6448((uint64_t)(v49 + 336), v55, 1);
          sub_22E3BB0B8((uint64_t)&v128);
          v90 = *(_DWORD *)(v17 + 24);
          v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
          sub_22F0B9B04((uint64_t)&v128, v130, v90, v91, 3u);
          v76 = v128;
          if (!v128)
          {
            v76 = (_BYTE *)sub_22E3B8AAC(v129);
            v128 = v76;
          }
          v92 = v76 + 1;
          v93 = *v76;
          v92[v93] = 3;
          *v76 = v93 + 2;
          *(_QWORD *)&v76[8 * v93 + 16] = v50;
          v94 = (v93 + 1);
          v92[v94] = 2;
          *(_QWORD *)&v76[8 * v94 + 16] = v23 == 0;
          if (v23)
          {
LABEL_69:
            sub_22F0D4E74((uint64_t)v23);
            v96 = v95;
          }
          else
          {
            v96 = 0;
          }
          sub_22E4D6448((uint64_t)(v76 + 336), v96, 1);
          goto LABEL_72;
        }
        if (v21)
          v24 = v22 == 0;
        else
          v24 = 1;
        if (!v24)
        {
          v25 = sub_22F0ACE88(v21);
          if (v25 != sub_22F0ACE88(v23))
          {
            v68 = *(_DWORD *)(v16 + 24);
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
            sub_22F0B9924((uint64_t)&v128, v131, v68, v69, 4u);
            v70 = v128;
            if (!v128)
            {
              v70 = (_BYTE *)sub_22E3B8AAC(v129);
              v128 = v70;
            }
            v71 = (v14 + 1);
            v72 = *v70;
            v70[v72 + 1] = 3;
            *v70 = v72 + 1;
            *(_QWORD *)&v70[8 * v72 + 16] = v71;
            sub_22F0D4E74((uint64_t)v21);
            sub_22E4D6448((uint64_t)(v70 + 336), v73, 1);
            sub_22E3BB0B8((uint64_t)&v128);
            v74 = *(_DWORD *)(v17 + 24);
            v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
            sub_22F0B9B04((uint64_t)&v128, v130, v74, v75, 4u);
            v76 = v128;
            if (!v128)
            {
              v76 = (_BYTE *)sub_22E3B8AAC(v129);
              v128 = v76;
            }
            v77 = *v76;
            v76[v77 + 1] = 3;
            *v76 = v77 + 1;
            *(_QWORD *)&v76[8 * v77 + 16] = v71;
            goto LABEL_69;
          }
        }
        if (v15 == ++v14)
          goto LABEL_30;
      }
      v31 = *(_DWORD *)(v16 + 24);
      v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v14));
      sub_22F0B9924((uint64_t)&v128, v131, v31, v32, 1u);
      v33 = v128;
      if (!v128)
      {
        v33 = (_BYTE *)sub_22E3B8AAC(v129);
        v128 = v33;
      }
      v34 = v33 + 1;
      v35 = *v33;
      v34[v35] = 3;
      v36 = v35 + 1;
      *v33 = v35 + 2;
      v37 = v33 + 16;
      *(_QWORD *)&v37[8 * v35] = (v14 + 1);
      v38 = *(_QWORD *)(v16 + 40);
      v34[v36] = 10;
      *(_QWORD *)&v37[8 * v36] = v38;
      sub_22E3BB0B8((uint64_t)&v128);
      v39 = *(_DWORD *)(v17 + 24);
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      sub_22F0B9B04((uint64_t)&v128, v130, v39, v40, 1u);
      v41 = v128;
      if (!v128)
      {
        v41 = (_BYTE *)sub_22E3B8AAC(v129);
        v128 = v41;
      }
      v42 = v41 + 1;
      v43 = *v41;
      v42[v43] = 3;
      v44 = v43 + 1;
      *v41 = v43 + 2;
      v45 = v41 + 16;
      *(_QWORD *)&v45[8 * v43] = (v14 + 1);
      v46 = *(_QWORD *)(v17 + 40);
      v42[v44] = 10;
      *(_QWORD *)&v45[8 * v44] = v46;
      goto LABEL_72;
    }
  }
LABEL_30:
  v26 = *(_DWORD *)(a2 + 24);
  v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22F0B9924((uint64_t)v127, v131, v26, v27, 5u);
  sub_22E3BB0B8((uint64_t)v127);
  v28 = *(_DWORD *)(a3 + 24);
  v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 16))(a3);
  sub_22F0B9B04((uint64_t)v126, v130, v28, v29, 5u);
  v30 = v126;
LABEL_73:
  sub_22E3BB0B8((uint64_t)v30);
  if (v133 < 0)
    operator delete(v132[0]);
  if (v135 < 0)
    operator delete(v134[0]);
  return a2 != a3;
}

uint64_t sub_22F0B9924(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  size_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;

  v9 = *(_QWORD *)a2[2];
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2135;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v10 = (unsigned __int8 *)(v9 + 320);
  v28 = (unsigned __int8 *)(v9 + 320);
  v29 = 0;
  v30 = v9;
  v31 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v11 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v9 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
    LODWORD(v11) = *v10;
  }
  *(_DWORD *)(v9 + 776) = 0;
  v14 = *a2;
  v10[v11 + 1] = 11;
  v15 = v11 + 1;
  *(_BYTE *)(v9 + 320) = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = v14;
  v16 = a2[1];
  if (*(char *)(v16 + 23) < 0)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = *(unsigned __int8 *)(v16 + 23);
  *(_BYTE *)(v9 + 320 + v15 + 1) = 2;
  *(_BYTE *)(v9 + 320) = v11 + 2;
  *(_QWORD *)(v9 + 320 + 8 * v15 + 16) = v17 == 0;
  v18 = a2[1];
  v19 = *(_BYTE *)(v18 + 23);
  if (v19 >= 0)
    v20 = (void *)a2[1];
  else
    v20 = *(void **)v18;
  if (v19 >= 0)
    v21 = v19 & 0x7F;
  else
    v21 = *(_QWORD *)(v18 + 8);
  sub_22E3B89A8(&v28, v20, v21);
  v22 = v28;
  if (!v28)
  {
    v22 = (unsigned __int8 *)sub_22E3B8AAC(v29);
    v28 = v22;
  }
  sub_22E4D6448((uint64_t)(v22 + 336), a4, 1);
  v23 = v28;
  if (!v28)
  {
    v23 = (unsigned __int8 *)sub_22E3B8AAC(v29);
    v28 = v23;
  }
  v23[*v23 + 1] = 2;
  v24 = v28;
  v25 = *v28;
  *v28 = v25 + 1;
  *(_QWORD *)&v24[8 * v25 + 16] = a5;
  v26 = v30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)a1 = v24;
  *(_WORD *)(a1 + 24) = v31;
  v30 = 0;
  v31 = 0;
  return sub_22E3BB0B8((uint64_t)&v28);
}

uint64_t sub_22F0B9B04(uint64_t a1, void ***a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  size_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v9 = (uint64_t)*a2[1];
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 2298;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v22 = (unsigned __int8 *)(v9 + 320);
  v23 = 0;
  v24 = v9;
  v25 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  v13 = *((_BYTE *)*a2 + 23);
  if (v13 >= 0)
    v14 = *a2;
  else
    v14 = **a2;
  if (v13 >= 0)
    v15 = v13 & 0x7F;
  else
    v15 = (size_t)(*a2)[1];
  sub_22E3B89A8(&v22, v14, v15);
  v16 = v22;
  if (!v22)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v16;
  }
  sub_22E4D6448((uint64_t)(v16 + 336), a4, 1);
  v17 = v22;
  if (!v22)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v17;
  }
  v17[*v17 + 1] = 2;
  v18 = v22;
  v19 = *v22;
  *v22 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = a5;
  v20 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)a1 = v18;
  *(_WORD *)(a1 + 24) = v25;
  v24 = 0;
  v25 = 0;
  return sub_22E3BB0B8((uint64_t)&v22);
}

uint64_t sub_22F0B9C80(void **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t i;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  BOOL v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  void **v92[2];
  uint64_t v93[3];
  void *__p[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[64];
  char *v101;
  uint64_t v102;
  _QWORD v103[9];

  v103[8] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return 0;
  sub_22F0AC2D8(a2, v96);
  sub_22F0AC2D8(a3, __p);
  v93[0] = a2;
  v93[1] = (uint64_t)v96;
  v93[2] = (uint64_t)a1;
  v92[0] = __p;
  v92[1] = a1;
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a3 + 72);
  if (((v6 >> 39) & 1) == ((v7 >> 39) & 1))
  {
    v15 = (v6 & 0x8000000000 & v7) == 0;
    v14 = (v7 >> 40) & 1;
    v15 = v15 || ((v6 >> 40) & 1) == (_DWORD)v14;
    if (!v15)
    {
      sub_22F0BA4C8((uint64_t)&v101, v93, (_DWORD *)a2, 1u);
      v28 = (*(_QWORD *)(a2 + 72) >> 40) & 1;
      v29 = v101;
      if (!v101)
      {
        v29 = (char *)sub_22E3B8AAC(v102);
        v101 = v29;
      }
      v30 = *v29;
      v29[v30 + 1] = 2;
      *v29 = v30 + 1;
      *(_QWORD *)&v29[8 * v30 + 16] = v28;
      v31 = sub_22E3BB0B8((uint64_t)&v101);
      sub_22F0BA6C0(v31, v92, (_DWORD *)a3, 1u);
      v12 = (*(_QWORD *)(a3 + 72) >> 40) & 1;
      goto LABEL_33;
    }
    v16 = 0;
    v17 = *(_QWORD *)(a2 + 128);
    if ((v17 & 4) != 0)
    {
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if (v18)
        v16 = *v18;
    }
    v19 = *(_QWORD *)(a3 + 128);
    if ((v19 & 4) != 0 && (v20 = (unint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8)) != 0)
    {
      v21 = *v20;
      v22 = v16 < 0x10;
      v23 = *v20 < 0x10;
      if (v22 == v23)
      {
        if (v16 >= 0x10 && v21 >= 0x10)
        {
          v24 = sub_22F0ACDAC(v16);
          if (v24 != sub_22F0ACDAC(v21))
          {
            sub_22F0BA4C8((uint64_t)&v101, v93, (_DWORD *)a2, 3u);
            v55 = v101;
            if (!v101)
            {
              v55 = (char *)sub_22E3B8AAC(v102);
              v101 = v55;
            }
            v56 = *v55;
            v55[v56 + 1] = 9;
            *v55 = v56 + 1;
            *(_QWORD *)&v55[8 * v56 + 16] = v16;
            v57 = sub_22E3BB0B8((uint64_t)&v101);
            sub_22F0BA6C0(v57, v92, (_DWORD *)a3, 3u);
            v58 = v101;
            if (!v101)
            {
              v58 = (char *)sub_22E3B8AAC(v102);
              v101 = v58;
            }
            v59 = *v58;
            v58[v59 + 1] = 9;
            *v58 = v59 + 1;
            *(_QWORD *)&v58[8 * v59 + 16] = v21;
            goto LABEL_64;
          }
          LOWORD(v6) = *(_WORD *)(a2 + 72);
        }
LABEL_23:
        v101 = (char *)v103;
        v102 = 0x400000000;
        v25 = a2 + 64;
        if ((v6 & 0x80) != 0)
          sub_22EFCC320(a2 + 64);
        for (i = *(_QWORD *)(a2 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
        {
          if (sub_22F0BCB54(i, a2 + 64))
          {
            v27 = sub_22F0B3CCC(i);
            sub_22F33F6D0((uint64_t)&v101, i, v27);
          }
        }
        v98 = v100;
        v99 = 0x400000000;
        if ((*(_BYTE *)(a3 + 72) & 0x80) != 0)
          sub_22EFCC320(a3 + 64);
        v34 = *(_QWORD *)(a3 + 80);
        if (v34)
        {
          if (!a2)
            v25 = 0;
          do
          {
            if (sub_22F0BCB54(v34, v25))
            {
              v35 = sub_22F0B3CCC(v34);
              sub_22F33F6D0((uint64_t)&v98, v34, v35);
            }
            v34 = *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8;
          }
          while (v34);
        }
        v36 = v102;
        if ((_DWORD)v102 == (_DWORD)v99)
        {
          if ((_DWORD)v102)
          {
            v37 = 0;
            for (j = 0; v36 != j; ++j)
            {
              if (*(_DWORD *)&v101[v37 + 8] != *(_DWORD *)((char *)v98 + v37 + 8))
              {
                v39 = *(_QWORD *)&v101[v37];
                v40 = *(_QWORD *)((char *)v98 + v37);
                if (*(_QWORD *)(v39 + 40) != *(_QWORD *)(v40 + 40))
                {
                  sub_22F0BA4C8((uint64_t)&v90, v93, (_DWORD *)v39, 5u);
                  v60 = v90;
                  if (!v90)
                  {
                    v60 = (_BYTE *)sub_22E3B8AAC(v91);
                    v90 = v60;
                  }
                  v61 = j + 1;
                  v62 = v60 + 1;
                  v63 = *v60;
                  v62[v63] = 3;
                  *v60 = v63 + 2;
                  v64 = v60 + 16;
                  *(_QWORD *)&v64[8 * v63] = j + 1;
                  v65 = (v63 + 1);
                  v62[v65] = 11;
                  *(_QWORD *)&v64[8 * v65] = v39;
                  sub_22E3BB0B8((uint64_t)&v90);
                  v66 = (_DWORD *)v40;
                  v67 = 5;
                  goto LABEL_96;
                }
                v41 = *(_QWORD *)(v39 + 56);
                v42 = *(unsigned __int8 **)(v40 + 56);
                if (v41 | (unint64_t)v42)
                {
                  if (v41)
                    v43 = v42 == 0;
                  else
                    v43 = 1;
                  if (v43)
                  {
                    sub_22F0BA4C8((uint64_t)&v90, v93, (_DWORD *)v39, 6u);
                    v68 = v90;
                    if (!v90)
                    {
                      v68 = (_BYTE *)sub_22E3B8AAC(v91);
                      v90 = v68;
                    }
                    v69 = v68 + 1;
                    v70 = *v68;
                    v69[v70] = 3;
                    *v68 = v70 + 3;
                    v71 = v68 + 16;
                    *(_QWORD *)&v71[8 * v70] = j + 1;
                    v72 = (v70 + 1);
                    v69[v72] = 11;
                    *(_QWORD *)&v71[8 * v72] = v39;
                    v73 = (v70 + 2);
                    v69[v73] = 2;
                    *(_QWORD *)&v71[8 * v73] = v41 != 0;
                    sub_22E3BB0B8((uint64_t)&v90);
                    sub_22F0BA6C0((uint64_t)&v90, v92, (_DWORD *)v40, 6u);
                    v74 = v90;
                    if (!v90)
                    {
                      v74 = (_BYTE *)sub_22E3B8AAC(v91);
                      v90 = v74;
                    }
                    v75 = v74 + 1;
                    v76 = *v74;
                    v74[v76 + 1] = 3;
                    *v74 = v76 + 3;
                    v77 = v74 + 16;
                    *(_QWORD *)&v77[8 * v76] = j + 1;
                    v78 = (v76 + 1);
                    v75[v78] = 11;
                    *(_QWORD *)&v77[8 * v78] = v40;
                    v79 = (v76 + 2);
                    v75[v79] = 2;
                    *(_QWORD *)&v77[8 * v79] = v42 != 0;
                    goto LABEL_75;
                  }
                  v44 = sub_22F0ACE88(*(unsigned __int8 **)(v39 + 56));
                  if (v44 != sub_22F0ACE88(v42))
                  {
                    sub_22F0BA4C8((uint64_t)&v90, v93, (_DWORD *)v39, 7u);
                    v80 = v90;
                    if (!v90)
                    {
                      v80 = (_BYTE *)sub_22E3B8AAC(v91);
                      v90 = v80;
                    }
                    v61 = j + 1;
                    v81 = v80 + 1;
                    v82 = *v80;
                    v81[v82] = 3;
                    *v80 = v82 + 2;
                    v83 = v80 + 16;
                    *(_QWORD *)&v83[8 * v82] = j + 1;
                    v84 = (v82 + 1);
                    v81[v84] = 11;
                    *(_QWORD *)&v83[8 * v84] = v39;
                    sub_22E3BB0B8((uint64_t)&v90);
                    v66 = (_DWORD *)v40;
                    v67 = 7;
LABEL_96:
                    sub_22F0BA6C0((uint64_t)&v90, v92, v66, v67);
                    v85 = v90;
                    if (!v90)
                    {
                      v85 = (_BYTE *)sub_22E3B8AAC(v91);
                      v90 = v85;
                    }
                    v86 = v85 + 1;
                    v87 = *v85;
                    v86[v87] = 3;
                    *v85 = v87 + 2;
                    v88 = v85 + 16;
                    *(_QWORD *)&v88[8 * v87] = v61;
                    v89 = (v87 + 1);
                    v86[v89] = 11;
                    *(_QWORD *)&v88[8 * v89] = v40;
                    goto LABEL_75;
                  }
                }
              }
              v37 += 16;
            }
          }
          v13 = 0;
        }
        else
        {
          sub_22F0BA4C8((uint64_t)&v90, v93, (_DWORD *)a2, 4u);
          v49 = (int)v102;
          v50 = v90;
          if (!v90)
          {
            v50 = (_BYTE *)sub_22E3B8AAC(v91);
            v90 = v50;
          }
          v51 = *v50;
          v50[v51 + 1] = 2;
          *v50 = v51 + 1;
          *(_QWORD *)&v50[8 * v51 + 16] = v49;
          sub_22E3BB0B8((uint64_t)&v90);
          sub_22F0BA6C0((uint64_t)&v90, v92, (_DWORD *)a3, 4u);
          v52 = (int)v99;
          v53 = v90;
          if (!v90)
          {
            v53 = (_BYTE *)sub_22E3B8AAC(v91);
            v90 = v53;
          }
          v54 = *v53;
          v53[v54 + 1] = 2;
          *v53 = v54 + 1;
          *(_QWORD *)&v53[8 * v54 + 16] = v52;
LABEL_75:
          sub_22E3BB0B8((uint64_t)&v90);
          v13 = 1;
        }
        if (v98 != v100)
          free(v98);
        if (v101 != (char *)v103)
          free(v101);
        goto LABEL_65;
      }
    }
    else
    {
      if (v16 < 0x10)
        goto LABEL_23;
      v22 = 0;
      v23 = 1;
    }
    sub_22F0BA4C8((uint64_t)&v101, v93, (_DWORD *)a2, 2u);
    v45 = v101;
    if (!v101)
    {
      v45 = (char *)sub_22E3B8AAC(v102);
      v101 = v45;
    }
    v46 = *v45;
    v45[v46 + 1] = 2;
    *v45 = v46 + 1;
    *(_QWORD *)&v45[8 * v46 + 16] = v22 ^ 1u;
    v47 = sub_22E3BB0B8((uint64_t)&v101);
    sub_22F0BA6C0(v47, v92, (_DWORD *)a3, 2u);
    v12 = v23 ^ 1u;
    v32 = v101;
    if (!v101)
    {
      v32 = (char *)sub_22E3B8AAC(v102);
      v101 = v32;
    }
    v33 = *v32;
    v32[v33 + 1] = 2;
    goto LABEL_63;
  }
  sub_22F0BA4C8((uint64_t)&v101, v93, (_DWORD *)a2, 0);
  v8 = (*(_QWORD *)(a2 + 72) >> 39) & 1;
  v9 = v101;
  if (!v101)
  {
    v9 = (char *)sub_22E3B8AAC(v102);
    v101 = v9;
  }
  v10 = *v9;
  v9[v10 + 1] = 2;
  *v9 = v10 + 1;
  *(_QWORD *)&v9[8 * v10 + 16] = v8;
  v11 = sub_22E3BB0B8((uint64_t)&v101);
  sub_22F0BA6C0(v11, v92, (_DWORD *)a3, 0);
  v12 = (*(_QWORD *)(a3 + 72) >> 39) & 1;
LABEL_33:
  v32 = v101;
  if (!v101)
  {
    v32 = (char *)sub_22E3B8AAC(v102);
    v101 = v32;
  }
  v33 = *v32;
  v32[v33 + 1] = 2;
LABEL_63:
  *v32 = v33 + 1;
  *(_QWORD *)&v32[8 * v33 + 16] = v12;
LABEL_64:
  sub_22E3BB0B8((uint64_t)&v101);
  v13 = 1;
LABEL_65:
  if (v95 < 0)
    operator delete(__p[0]);
  if (v97 < 0)
    operator delete(v96[0]);
  return v13;
}

uint64_t sub_22F0BA4C8(uint64_t a1, uint64_t *a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  size_t v20;
  double v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  v8 = *(_QWORD *)a2[2];
  *(_DWORD *)(v8 + 312) = a3[6];
  *(_DWORD *)(v8 + 316) = 2133;
  if (*(char *)(v8 + 311) < 0)
  {
    **(_BYTE **)(v8 + 288) = 0;
    *(_QWORD *)(v8 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 311) = 0;
  }
  v9 = (unsigned __int8 *)(v8 + 320);
  v29 = (unsigned __int8 *)(v8 + 320);
  v30 = 0;
  v31 = v8;
  v32 = 1;
  *(_BYTE *)(v8 + 320) = 0;
  *(_DWORD *)(v8 + 664) = 0;
  v10 = *(unsigned int *)(v8 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v8 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
    LODWORD(v10) = *v9;
  }
  *(_DWORD *)(v8 + 776) = 0;
  v13 = *a2;
  v9[v10 + 1] = 11;
  v14 = v10 + 1;
  *(_BYTE *)(v8 + 320) = v10 + 1;
  *(_QWORD *)&v9[8 * v10 + 16] = v13;
  v15 = a2[1];
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  *(_BYTE *)(v8 + 320 + v14 + 1) = 2;
  *(_BYTE *)(v8 + 320) = v10 + 2;
  *(_QWORD *)(v8 + 320 + 8 * v14 + 16) = v16 == 0;
  v17 = a2[1];
  v18 = *(_BYTE *)(v17 + 23);
  if (v18 >= 0)
    v19 = (void *)a2[1];
  else
    v19 = *(void **)v17;
  if (v18 >= 0)
    v20 = v18 & 0x7F;
  else
    v20 = *(_QWORD *)(v17 + 8);
  v21 = sub_22E3B89A8(&v29, v19, v20);
  v22 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a3 + 16))(a3, v21);
  v23 = v29;
  if (!v29)
  {
    v23 = (unsigned __int8 *)sub_22E3B8AAC(v30);
    v29 = v23;
  }
  sub_22E4D6448((uint64_t)(v23 + 336), v22, 1);
  v24 = v29;
  if (!v29)
  {
    v24 = (unsigned __int8 *)sub_22E3B8AAC(v30);
    v29 = v24;
  }
  v24[*v24 + 1] = 2;
  v25 = v29;
  v26 = *v29;
  *v29 = v26 + 1;
  *(_QWORD *)&v25[8 * v26 + 16] = a4;
  v27 = v31;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v27;
  *(_QWORD *)a1 = v25;
  *(_WORD *)(a1 + 24) = v32;
  v31 = 0;
  v32 = 0;
  return sub_22E3BB0B8((uint64_t)&v29);
}

uint64_t sub_22F0BA6C0(uint64_t a1, void ***a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  size_t v14;
  double v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;

  v8 = (uint64_t)*a2[1];
  *(_DWORD *)(v8 + 312) = a3[6];
  *(_DWORD *)(v8 + 316) = 2296;
  if (*(char *)(v8 + 311) < 0)
  {
    **(_BYTE **)(v8 + 288) = 0;
    *(_QWORD *)(v8 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 311) = 0;
  }
  v23 = (unsigned __int8 *)(v8 + 320);
  v24 = 0;
  v25 = v8;
  v26 = 1;
  *(_BYTE *)(v8 + 320) = 0;
  *(_DWORD *)(v8 + 664) = 0;
  v9 = *(unsigned int *)(v8 + 776);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(v8 + 768);
    v11 = 56 * v9;
    do
    {
      if (*(char *)(v10 + v11 - 9) < 0)
        operator delete(*(void **)(v10 + v11 - 32));
      v11 -= 56;
    }
    while (v11);
  }
  *(_DWORD *)(v8 + 776) = 0;
  v12 = *((_BYTE *)*a2 + 23);
  if (v12 >= 0)
    v13 = *a2;
  else
    v13 = **a2;
  if (v12 >= 0)
    v14 = v12 & 0x7F;
  else
    v14 = (size_t)(*a2)[1];
  v15 = sub_22E3B89A8(&v23, v13, v14);
  v16 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a3 + 16))(a3, v15);
  v17 = v23;
  if (!v23)
  {
    v17 = (unsigned __int8 *)sub_22E3B8AAC(v24);
    v23 = v17;
  }
  sub_22E4D6448((uint64_t)(v17 + 336), v16, 1);
  v18 = v23;
  if (!v23)
  {
    v18 = (unsigned __int8 *)sub_22E3B8AAC(v24);
    v23 = v18;
  }
  v18[*v18 + 1] = 2;
  v19 = v23;
  v20 = *v23;
  *v23 = v20 + 1;
  *(_QWORD *)&v19[8 * v20 + 16] = a4;
  v21 = v25;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)a1 = v19;
  *(_WORD *)(a1 + 24) = v26;
  v25 = 0;
  v26 = 0;
  return sub_22E3BB0B8((uint64_t)&v23);
}

void sub_22F0BA854(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  const void *v8;
  size_t v9;
  unsigned int v10;
  void *v11;
  llvm::raw_ostream *v12;
  const char *p_p;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  const void *v20;
  size_t v21;
  unsigned int v22;
  void *v23;
  _BYTE *v24;
  __int128 v25;
  void *__p;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  void **v36;
  void *v37[2];
  uint64_t v38;

  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v29 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v28 = MEMORY[0x24BED83D8] + 16;
  v36 = v37;
  llvm::raw_ostream::SetBufferAndMode();
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x13)
  {
    if ((unint64_t)(v31 - v32) > 9)
    {
      *(_WORD *)(v32 + 8) = 10016;
      MEMORY[0] = *(_QWORD *)"category '";
      v32 += 10;
      v4 = &v28;
    }
    else
    {
      v4 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v28, "category '");
    }
    v5 = *(_QWORD *)(a2 + 40);
    if ((v5 & 7) == 0)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v6)
      {
        v7 = *(unsigned int **)(v6 + 16);
        v10 = *v7;
        v8 = v7 + 4;
        v9 = v10;
        v11 = (void *)v4[4];
        if (v10 <= (unint64_t)(v4[3] - (_QWORD)v11))
        {
          if (v9)
          {
            memcpy(v11, v8, v9);
            v4[4] += v9;
          }
        }
        else
        {
          v4 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v4, (const char *)v8);
        }
      }
    }
    v16 = (_OWORD *)v4[4];
    if ((unint64_t)(v4[3] - (_QWORD)v16) > 0xF)
    {
      *v16 = *(_OWORD *)"' on interface '";
      v4[4] += 16;
    }
    else
    {
      v4 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v4, "' on interface '");
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 40);
    if ((v17 & 7) == 0)
    {
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = *(unsigned int **)(v18 + 16);
        v22 = *v19;
        v20 = v19 + 4;
        v21 = v22;
        v23 = (void *)v4[4];
        if (v22 <= (unint64_t)(v4[3] - (_QWORD)v23))
        {
          if (v21)
          {
            memcpy(v23, v20, v21);
            v4[4] += v21;
          }
        }
        else
        {
          v4 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v4, (const char *)v20);
        }
      }
    }
    v24 = (_BYTE *)v4[4];
    if ((_BYTE *)v4[3] == v24)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v4, "'");
    }
    else
    {
      *v24 = 39;
      ++v4[4];
    }
  }
  else
  {
    v12 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v28, "'");
    sub_22EFB9E74(a2, &__p);
    if (v27 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, p_p);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, "'");
    }
    else
    {
      *v15 = 39;
      ++*((_QWORD *)v14 + 4);
    }
    if (v27 < 0)
      operator delete(__p);
  }
  if (*((char *)v36 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a1, *v36, (unint64_t)v36[1]);
  }
  else
  {
    v25 = *(_OWORD *)v36;
    *(_QWORD *)(a1 + 16) = v36[2];
    *(_OWORD *)a1 = v25;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
}

uint64_t sub_22F0BAB6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;

  v6 = a3;
  v7 = result;
  v8 = *(_QWORD *)result;
  v9 = *(unsigned int *)(result + 8);
  v10 = *(unsigned int *)(result + 12);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a5 - a3) >> 3);
  v12 = v11 + v9;
  if (*(_QWORD *)result + 8 * v9 == a2)
  {
    if (v12 > v10)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(unsigned int *)(v7 + 8);
      v8 = *(_QWORD *)v7;
    }
    if (v6 != a5)
    {
      v17 = (_QWORD *)(v8 + 8 * v9);
      do
      {
        *v17++ = v6;
        v6 += 24;
      }
      while (v6 != a5);
    }
    *(_DWORD *)(v7 + 8) = v9 + v11;
  }
  else
  {
    v13 = (a2 - v8) >> 3;
    if (v12 > v10)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)v7;
      v9 = *(unsigned int *)(v7 + 8);
    }
    v14 = (char *)(v8 + 8 * v13);
    v15 = (char *)(v8 + 8 * v9);
    v16 = (v15 - v14) >> 3;
    if (v16 >= v11)
    {
      v18 = &v15[-8 * v11];
      result = sub_22F246808(v7, v18, (char *)(v8 + 8 * v9));
      if (v18 != v14)
        result = (uint64_t)memmove(&v15[-(v18 - v14)], v14, v18 - v14);
      while (v6 != a5)
      {
        *(_QWORD *)v14 = v6;
        v14 += 8;
        v6 += 24;
      }
    }
    else
    {
      *(_DWORD *)(v7 + 8) = v9 + v11;
      if (v13 != v9)
      {
        result = (uint64_t)memcpy((void *)(v8 + 8 * (v9 + v11) - 8 * v16), (const void *)(v8 + 8 * v13), v15 - v14);
        do
        {
          *(_QWORD *)v14 = v6;
          v14 += 8;
          v6 += 24;
          --v16;
        }
        while (v16);
      }
      while (v6 != a5)
      {
        *(_QWORD *)v15 = v6;
        v15 += 8;
        v6 += 24;
      }
    }
  }
  return result;
}

void sub_22F0BACE0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if (v4 == v6)
        v14 = 1;
      else
        v14 = (v4 - v6) >> 2;
      if (v14 >> 61)
        sub_22E3B3F8C();
      v15 = (char *)operator new(8 * v14);
      v16 = &v15[8 * (v14 >> 2)];
      v18 = v4 - v5;
      v17 = v4 == v5;
      v4 = v16;
      if (!v17)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v15[8 * (v14 >> 2)];
        do
        {
          v21 = *(_QWORD *)v5;
          v5 += 8;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 3;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -(v8 >> 1);
      v10 = v8 >> 1;
      v11 = &v5[-8 * v10];
      v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v13 = &v4[8 * v9];
      v4 = &v11[v12];
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = &v11[v12];
    }
  }
  *(_QWORD *)v4 = *a2;
  *(_QWORD *)(a1 + 16) += 8;
}

uint64_t sub_22F0BAE00(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  BOOL v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  int64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;

  v6 = (uint64_t *)result;
LABEL_2:
  v91 = a2 - 2;
  v93 = a2 - 1;
  v96 = a2;
  v90 = a2 - 3;
  v7 = v6;
  while (2)
  {
    v6 = v7;
    v8 = v96;
    v9 = (char *)v96 - (char *)v6;
    v10 = v96 - v6;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v36 = *(v96 - 1);
        v37 = *v6;
        result = sub_22EFA54B8(v36, *v6);
        if ((_DWORD)result)
        {
          *v6 = v36;
          *(v96 - 1) = v37;
        }
        return result;
      case 3:
        return sub_22F0BB56C(v6, v6 + 1, v93);
      case 4:
        return sub_22F0BB830(v6, v6 + 1, v6 + 2, v93);
      case 5:
        v38 = v6 + 2;
        v39 = v6 + 3;
        sub_22F0BB830(v6, v6 + 1, v6 + 2, v6 + 3);
        v40 = *(v96 - 1);
        v41 = v6[3];
        result = sub_22EFA54B8(v40, v41);
        if ((_DWORD)result)
        {
          *v39 = v40;
          *(v96 - 1) = v41;
          v42 = *v39;
          v43 = *v38;
          result = sub_22EFA54B8(*v39, *v38);
          if ((_DWORD)result)
          {
            *v38 = v42;
            *v39 = v43;
            v44 = v6[1];
            result = sub_22EFA54B8(v42, v44);
            if ((_DWORD)result)
            {
              v6[1] = v42;
              v6[2] = v44;
              v45 = *v6;
              result = sub_22EFA54B8(v42, *v6);
              if ((_DWORD)result)
              {
                *v6 = v42;
                v6[1] = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v46 = v6 + 1;
          v48 = v6 == v96 || v46 == v96;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v6;
              do
              {
                v52 = *v50;
                v51 = v50[1];
                v50 = v46;
                result = sub_22EFA54B8(v51, v52);
                if ((_DWORD)result)
                {
                  v53 = v49;
                  while (1)
                  {
                    *(uint64_t *)((char *)v6 + v53 + 8) = v52;
                    if (!v53)
                      break;
                    v52 = *(uint64_t *)((char *)v6 + v53 - 8);
                    result = sub_22EFA54B8(v51, v52);
                    v53 -= 8;
                    if ((result & 1) == 0)
                    {
                      v54 = (uint64_t *)((char *)v6 + v53 + 8);
                      goto LABEL_79;
                    }
                  }
                  v54 = v6;
LABEL_79:
                  *v54 = v51;
                }
                v46 = v50 + 1;
                v49 += 8;
              }
              while (v50 + 1 != v96);
            }
          }
          else if (!v48)
          {
            do
            {
              v88 = *v6;
              v87 = v6[1];
              v6 = v46;
              result = sub_22EFA54B8(v87, v88);
              if ((_DWORD)result)
              {
                v89 = v6;
                do
                {
                  *v89 = v88;
                  v88 = *(v89 - 2);
                  result = sub_22EFA54B8(v87, v88);
                  --v89;
                }
                while ((result & 1) != 0);
                *v89 = v87;
              }
              v46 = v6 + 1;
            }
            while (v6 + 1 != v96);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != v96)
          {
            v55 = (unint64_t)(v10 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = &v6[v58];
                v60 = *v59;
                if (2 * v56 + 2 < v10)
                {
                  v61 = v59[1];
                  if (sub_22EFA54B8(*v59, v61))
                  {
                    v60 = v61;
                    ++v59;
                    v58 = 2 * v57 + 2;
                  }
                }
                v62 = &v6[v57];
                v63 = *v62;
                result = sub_22EFA54B8(v60, *v62);
                if ((result & 1) == 0)
                {
                  v92 = v57;
                  v94 = v63;
                  do
                  {
                    v64 = v59;
                    *v62 = v60;
                    if (v55 < v58)
                      break;
                    v65 = (2 * v58) | 1;
                    v59 = &v6[v65];
                    v66 = 2 * v58 + 2;
                    v60 = *v59;
                    if (v66 < v10)
                    {
                      v67 = v59[1];
                      v68 = sub_22EFA54B8(*v59, v67);
                      if (v68)
                      {
                        v60 = v67;
                        ++v59;
                      }
                      v63 = v94;
                      if (v68)
                        v65 = v66;
                    }
                    result = sub_22EFA54B8(v60, v63);
                    v62 = v64;
                    v58 = v65;
                  }
                  while (!(_DWORD)result);
                  *v64 = v63;
                  v57 = v92;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v69 = v96;
            v95 = v6;
            do
            {
              v70 = v69;
              v71 = 0;
              v97 = *v6;
              v72 = v6;
              do
              {
                v73 = &v72[v71];
                v76 = v73[1];
                v74 = v73 + 1;
                v75 = v76;
                v77 = (2 * v71) | 1;
                v78 = 2 * v71 + 2;
                if (v78 < v10)
                {
                  v79 = v74[1];
                  result = sub_22EFA54B8(v75, v79);
                  if ((_DWORD)result)
                  {
                    v75 = v79;
                    ++v74;
                    v77 = v78;
                  }
                }
                *v72 = v75;
                v72 = v74;
                v71 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              --v69;
              if (v74 == v70 - 1)
              {
                *v74 = v97;
              }
              else
              {
                *v74 = *v69;
                *v69 = v97;
                v80 = (char *)v74 - (char *)v95 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v95[v81];
                  v83 = *v82;
                  v84 = *v74;
                  result = sub_22EFA54B8(*v82, *v74);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v85 = v82;
                      *v74 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v95[v81];
                      v83 = *v82;
                      result = sub_22EFA54B8(*v82, v84);
                      v74 = v85;
                    }
                    while ((result & 1) != 0);
                    *v85 = v84;
                  }
                }
              }
              v86 = v10-- <= 2;
              v6 = v95;
            }
            while (!v86);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v6[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          sub_22F0BB56C(v12, v6, v93);
        }
        else
        {
          sub_22F0BB56C(v6, v12, v93);
          sub_22F0BB56C(v6 + 1, v12 - 1, v91);
          sub_22F0BB56C(v6 + 2, &v6[v11 + 1], v90);
          v8 = v96;
          sub_22F0BB56C(v12 - 1, v12, &v6[v11 + 1]);
          v13 = *v6;
          *v6 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v6;
        if ((a4 & 1) == 0 && (sub_22EFA54B8(*(v6 - 1), *v6) & 1) == 0)
        {
          result = sub_22EFA54B8(v14, *v93);
          if ((result & 1) != 0)
          {
            v7 = v6;
            do
            {
              v27 = v7[1];
              ++v7;
              result = sub_22EFA54B8(v14, v27);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v28 = v6 + 1;
            do
            {
              v7 = v28;
              if (v28 >= v96)
                break;
              ++v28;
              result = sub_22EFA54B8(v14, *v7);
            }
            while (!(_DWORD)result);
          }
          v29 = v96;
          if (v7 < v96)
          {
            v29 = v96;
            do
            {
              v30 = *--v29;
              result = sub_22EFA54B8(v14, v30);
            }
            while ((result & 1) != 0);
          }
          if (v7 < v29)
          {
            v31 = *v7;
            v32 = *v29;
            do
            {
              *v7 = v32;
              *v29 = v31;
              do
              {
                v33 = v7[1];
                ++v7;
                v31 = v33;
              }
              while (!sub_22EFA54B8(v14, v33));
              do
              {
                v34 = *--v29;
                v32 = v34;
                result = sub_22EFA54B8(v14, v34);
              }
              while ((result & 1) != 0);
            }
            while (v7 < v29);
          }
          v35 = v7 - 1;
          if (v7 - 1 != v6)
            *v6 = *v35;
          a4 = 0;
          *v35 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v6[++v15];
        while ((sub_22EFA54B8(v16, v14) & 1) != 0);
        v17 = &v6[v15];
        v18 = v8;
        if (v15 == 1)
        {
          v18 = v8;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while ((sub_22EFA54B8(v20, v14) & 1) == 0);
        }
        else
        {
          do
            v19 = *--v18;
          while (!sub_22EFA54B8(v19, v14));
        }
        if (v17 >= v18)
        {
          v7 = &v6[v15];
        }
        else
        {
          v21 = *v18;
          v7 = &v6[v15];
          v22 = v18;
          do
          {
            *v7 = v21;
            *v22 = v16;
            do
            {
              v23 = v7[1];
              ++v7;
              v16 = v23;
            }
            while ((sub_22EFA54B8(v23, v14) & 1) != 0);
            do
            {
              v24 = *--v22;
              v21 = v24;
            }
            while (!sub_22EFA54B8(v24, v14));
          }
          while (v7 < v22);
        }
        v25 = v7 - 1;
        if (v7 - 1 != v6)
          *v6 = *v25;
        *v25 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = sub_22F0BAE00(v6, v7 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = sub_22F0BB634(v6, v7 - 1);
        result = sub_22F0BB634(v7, v96);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v7 - 1;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_22F0BB56C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *a1;
  v8 = sub_22EFA54B8(*a2, *a1);
  v9 = *a3;
  result = sub_22EFA54B8(*a3, v6);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v13 = *a3;
      result = sub_22EFA54B8(*a3, v7);
      if (!(_DWORD)result)
        return result;
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if ((_DWORD)result)
  {
    *a2 = v9;
    *a3 = v6;
    v11 = *a2;
    v12 = *a1;
    result = sub_22EFA54B8(*a2, *a1);
    if ((_DWORD)result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_22F0BB634(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (sub_22EFA54B8(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_22F0BB56C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_22F0BB830(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_22F0BB830(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (sub_22EFA54B8(v20, v21))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (sub_22EFA54B8(*v19, *v18))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = a1[1];
          if (sub_22EFA54B8(v22, v24))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (sub_22EFA54B8(v22, *a1))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_22F0BB56C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (sub_22EFA54B8(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v16 = sub_22EFA54B8(v12, v13);
        v14 = v15;
        if ((v16 & 1) == 0)
        {
          v17 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t sub_22F0BB830(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22F0BB56C(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  result = sub_22EFA54B8(*a4, *a3);
  if ((_DWORD)result)
  {
    *a3 = v8;
    *a4 = v9;
    v11 = *a3;
    v12 = *a2;
    result = sub_22EFA54B8(*a3, *a2);
    if ((_DWORD)result)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      result = sub_22EFA54B8(*a2, *a1);
      if ((_DWORD)result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_22F0BB8CC(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  size_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;

  v6 = a2[5];
  v7 = *(_QWORD *)(v6 + 40);
  v9 = v6 + 24;
  v8 = *(_DWORD *)(v6 + 24);
  v10 = *(_DWORD *)(v9 + 4) & 0x7F;
  if (v10 == 55)
    v11 = 1;
  else
    v11 = 2 * (v10 == 57);
  v12 = *a2;
  *(_DWORD *)(v12 + 312) = v8;
  *(_DWORD *)(v12 + 316) = 2136;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  v36 = (unsigned __int8 *)(v12 + 320);
  v37 = 0;
  v38 = v12;
  v39 = 1;
  *(_BYTE *)(v12 + 320) = 0;
  *(_DWORD *)(v12 + 664) = 0;
  v13 = *(unsigned int *)(v12 + 776);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v12 + 768);
    v15 = 56 * v13;
    do
    {
      if (*(char *)(v14 + v15 - 9) < 0)
        operator delete(*(void **)(v14 + v15 - 32));
      v15 -= 56;
    }
    while (v15);
  }
  *(_DWORD *)(v12 + 776) = 0;
  sub_22F0BA854((uint64_t)__p, a2[2]);
  if (v35 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v35 >= 0)
    v17 = v35 & 0x7F;
  else
    v17 = (size_t)__p[1];
  sub_22E3B89A8(&v36, v16, v17);
  v18 = a2[4];
  v19 = v36;
  if (!v36)
  {
    v19 = (unsigned __int8 *)sub_22E3B8AAC(v37);
    v36 = v19;
  }
  v19[*v19 + 1] = 2;
  v20 = v36;
  v21 = *v36;
  *v36 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = v18 == 0;
  v22 = sub_22E3B89A8(&v36, (void *)a2[3], a2[4]);
  v23 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a2[5] + 16))(a2[5], v22);
  v24 = v36;
  if (!v36)
  {
    v24 = (unsigned __int8 *)sub_22E3B8AAC(v37);
    v36 = v24;
  }
  sub_22E4D6448((uint64_t)(v24 + 336), v23, 1);
  v25 = v36;
  if (!v36)
  {
    v25 = (unsigned __int8 *)sub_22E3B8AAC(v37);
    v36 = v25;
  }
  v25[*v25 + 1] = 2;
  v26 = v36;
  v27 = *v36;
  *v36 = v27 + 1;
  *(_QWORD *)&v26[8 * v27 + 16] = a3;
  v26[(v27 + 1) + 1] = 2;
  v28 = v36;
  v29 = *v36;
  *v36 = v29 + 1;
  *(_QWORD *)&v28[8 * v29 + 16] = v11;
  v28[(v29 + 1) + 1] = 10;
  v30 = v36;
  v31 = *v36;
  *v36 = v31 + 1;
  *(_QWORD *)&v30[8 * v31 + 16] = v7;
  v32 = v38;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v32;
  *(_QWORD *)a1 = v30;
  *(_WORD *)(a1 + 24) = v39;
  v38 = 0;
  v39 = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  return sub_22E3BB0B8((uint64_t)&v36);
}

uint64_t sub_22F0BBB34(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v6 = a2[4];
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *a2;
  v9 = *(_DWORD *)(v6 + 28);
  *(_DWORD *)(v8 + 312) = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v8 + 316) = 2299;
  if (*(char *)(v8 + 311) < 0)
  {
    **(_BYTE **)(v8 + 288) = 0;
    *(_QWORD *)(v8 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 311) = 0;
  }
  v26 = (unsigned __int8 *)(v8 + 320);
  v27 = 0;
  v28 = v8;
  v29 = 1;
  *(_BYTE *)(v8 + 320) = 0;
  *(_DWORD *)(v8 + 664) = 0;
  v10 = *(unsigned int *)(v8 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v8 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v8 + 776) = 0;
  v13 = sub_22E3B89A8(&v26, (void *)a2[2], a2[3]);
  v14 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a2[4] + 16))(a2[4], v13);
  v15 = v26;
  if (!v26)
  {
    v15 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v15;
  }
  sub_22E4D6448((uint64_t)(v15 + 336), v14, 1);
  v16 = v26;
  if (!v26)
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v27);
    v26 = v16;
  }
  if ((v9 & 0x7F) == 0x37)
    v17 = 1;
  else
    v17 = 2 * ((v9 & 0x7F) == 57);
  v16[*v16 + 1] = 2;
  v18 = v26;
  v19 = *v26;
  *v26 = v19 + 1;
  *(_QWORD *)&v18[8 * v19 + 16] = a3;
  v18[(v19 + 1) + 1] = 2;
  v20 = v26;
  v21 = *v26;
  *v26 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = v17;
  v20[(v21 + 1) + 1] = 10;
  v22 = v26;
  v23 = *v26;
  *v26 = v23 + 1;
  *(_QWORD *)&v22[8 * v23 + 16] = v7;
  v24 = v28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v24;
  *(_QWORD *)a1 = v22;
  *(_WORD *)(a1 + 24) = v29;
  v28 = 0;
  v29 = 0;
  return sub_22E3BB0B8((uint64_t)&v26);
}

void sub_22F0BBD10(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v4 = a1[4];
    if ((unint64_t)(v4 + 1) > a1[5])
    {
      v6 = a2;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      a2 = v6;
      v4 = a1[4];
    }
    *(_BYTE *)(a1[3] + v4) = 1;
    ++a1[4];
    sub_22F0BBDE0((uint64_t)a1, a2);
    v5 = a1[4];
    if ((unint64_t)(v5 + 1) > a1[5])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v5 = a1[4];
    }
    *(_BYTE *)(a1[3] + v5) = 0;
    ++a1[4];
  }
  else
  {
    sub_22F0BBDE0((uint64_t)a1, a2);
  }
}

void sub_22F0BBDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *__p;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v4 = *(unsigned int *)(a1 + 8);
  __p = (void *)a2;
  v34 = v4;
  sub_22F0C12F0(a1, &__p, &v34, (uint64_t)&v37);
  v5 = *(_DWORD *)(v37 + 8);
  v6 = *(_DWORD *)(a1 + 184);
  if (v6 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v6) = v5;
  ++*(_DWORD *)(a1 + 184);
  if (v38)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v7 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v7 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v7) = a2 == 0;
    ++*(_QWORD *)(a1 + 32);
    if (a2)
    {
      v8 = a2 & 7;
      v9 = v8;
      if (v8 == 7)
      {
        v10 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
        if (v10 >= 3)
          v10 = 3;
        v9 = v10 | 8;
      }
      v11 = *(_DWORD *)(a1 + 184);
      if (v11 >= *(_DWORD *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v11) = v9;
      v12 = *(_DWORD *)(a1 + 184) + 1;
      *(_DWORD *)(a1 + 184) = v12;
      switch(v9)
      {
        case 0:
        case 9:
          llvm::FoldingSetNodeID::AddString();
          break;
        case 1:
        case 2:
        case 11:
          v36 = a2;
          v13 = *(_QWORD *)(a1 + 32);
          if ((unint64_t)(v13 + 1) > *(_QWORD *)(a1 + 40))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v13 = *(_QWORD *)(a1 + 32);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 24) + v13) = 0;
          v14 = *(_QWORD *)(a1 + 32);
          v15 = *(_QWORD *)(a1 + 40);
          v16 = v14 + 1;
          *(_QWORD *)(a1 + 32) = v14 + 1;
          v17 = a2 & 7;
          if (v14 + 2 > v15)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v16 = *(_QWORD *)(a1 + 32);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 24) + v16) = v17 != 1;
          v18 = *(_QWORD *)(a1 + 32);
          v19 = *(_QWORD *)(a1 + 40);
          v20 = v18 + 1;
          *(_QWORD *)(a1 + 32) = v18 + 1;
          if (v18 + 2 > v19)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v20 = *(_QWORD *)(a1 + 32);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 24) + v20) = v17 == 1;
          ++*(_QWORD *)(a1 + 32);
          if (v8 >= 2)
          {
            if (v8 == 2)
              v21 = 1;
            else
              v21 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) - 3;
          }
          else
          {
            v21 = 0;
          }
          v27 = *(_DWORD *)(a1 + 184);
          if (v27 >= *(_DWORD *)(a1 + 188))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = *(_DWORD *)(a1 + 184);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v27) = v21;
          ++*(_DWORD *)(a1 + 184);
          if (v21)
          {
            v28 = 0;
            v29 = a2 & 0xFFFFFFFFFFFFFFF8;
            v30 = 8 * v21;
            do
            {
              v31 = v29;
              if (v17 == 7)
                v31 = *(_QWORD *)(v29 + v28 + 16);
              v32 = *(_QWORD *)(a1 + 32);
              if ((unint64_t)(v32 + 1) > *(_QWORD *)(a1 + 40))
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v32 = *(_QWORD *)(a1 + 32);
              }
              *(_BYTE *)(*(_QWORD *)(a1 + 24) + v32) = v31 != 0;
              ++*(_QWORD *)(a1 + 32);
              if (v31)
                llvm::FoldingSetNodeID::AddString();
              v28 += 8;
            }
            while (v30 != v28);
          }
          sub_22F1D3A38(&v36, (char *)&__p);
          llvm::FoldingSetNodeID::AddString();
          if (v35 < 0)
            operator delete(__p);
          break;
        case 3:
        case 4:
        case 5:
          if (v8 - 3 > 2)
            v22 = 0;
          else
            v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_22F0BC29C(a1, v22);
          break;
        case 6:
          if ((a2 & 7) == 6)
            v23 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
          else
            v23 = 0;
          if (v12 >= *(_DWORD *)(a1 + 188))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v12 = *(_DWORD *)(a1 + 184);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v12) = v23;
          ++*(_DWORD *)(a1 + 184);
          break;
        case 8:
          if ((~(_BYTE)a2 & 7) != 0)
            goto LABEL_35;
          v24 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
          if (v24 >= 3)
            v24 = 3;
          if (v24)
LABEL_35:
            v25 = 0;
          else
            v25 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
          v26 = *(_QWORD *)(a1 + 32);
          if ((unint64_t)(v26 + 1) > *(_QWORD *)(a1 + 40))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v26 = *(_QWORD *)(a1 + 32);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 24) + v26) = v25 != 0;
          ++*(_QWORD *)(a1 + 32);
          if (v25)
            sub_22F0BC3CC(a1, v25);
          break;
        default:
          return;
      }
    }
  }
}

void sub_22F0BC29C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  uint64_t v14[2];

  v4 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v4) = a2 < 0x10;
  ++*(_QWORD *)(a1 + 32);
  if (a2 >= 0x10)
  {
    v5 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if ((a2 & 8) != 0)
    {
      v5 = (_QWORD *)*v5;
      v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
    }
    else
    {
      v6 = a2 & 7;
    }
    v7 = *(_DWORD *)(a1 + 184);
    if (v7 >= *(_DWORD *)(a1 + 188))
    {
      v10 = v5;
      v12 = v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v10;
      v6 = v12;
      v7 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v7) = v6;
    v8 = *(_DWORD *)(a1 + 188);
    v9 = *(_DWORD *)(a1 + 184) + 1;
    *(_DWORD *)(a1 + 184) = v9;
    if (v9 >= v8)
    {
      v11 = v5;
      v13 = HIDWORD(v6);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v11;
      HIDWORD(v6) = v13;
      v9 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v9) = HIDWORD(v6);
    ++*(_DWORD *)(a1 + 184);
    v14[0] = a1 + 176;
    v14[1] = a1;
    sub_22F0BF62C(v14, (uint64_t)v5);
  }
}

void sub_22F0BC3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = v3;
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 13 >= 0x3E)
    v5 = 0;
  else
    v5 = v3;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v6 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v6 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v6) = v5 != 0;
  ++*(_QWORD *)(a1 + 32);
  if (v5)
  {
    sub_22F0BBDE0(a1, *(_QWORD *)(v5 + 40));
    if ((*(_DWORD *)(v4 + 28) & 0x7E) != 0x24)
      v4 = 0;
    v7 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v7 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v7 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v7) = v4 != 0;
    ++*(_QWORD *)(a1 + 32);
    if (v4)
    {
      v8 = *(uint64_t **)(v4 + 168);
      v9 = *((_DWORD *)v8 + 2);
      v10 = *(_DWORD *)(a1 + 184);
      if (v10 >= *(_DWORD *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v10) = v9;
      ++*(_DWORD *)(a1 + 184);
      v11 = *((unsigned int *)v8 + 2);
      if ((_DWORD)v11)
      {
        v12 = (__int128 *)*v8;
        v13 = 24 * v11;
        do
        {
          v16 = *v12;
          v17 = *((_QWORD *)v12 + 2);
          sub_22F0BC7F8(a1, (int *)&v16);
          v12 = (__int128 *)((char *)v12 + 24);
          v13 -= 24;
        }
        while (v13);
      }
    }
  }
  else
  {
    v14 = *(_DWORD *)(v4 + 28) & 0x7F;
    v15 = *(_DWORD *)(a1 + 184);
    if (v15 >= *(_DWORD *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v15) = v14;
    ++*(_DWORD *)(a1 + 184);
  }
}

void sub_22F0BC59C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  _QWORD v15[2];

  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v5) = v4 != 0;
  ++*(_QWORD *)(a1 + 32);
  if (v4)
    sub_22F0BC59C(a1, v4);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (*(_DWORD *)(a2 + 8) >> 1) & 3;
    if (v7 == 2)
    {
      v8 = 3;
    }
    else if (v7 == 1)
    {
      v12 = *(_DWORD *)(v6 + 28) & 0x7F;
      v13 = v12 - 35;
      if (v12 == 16)
        v14 = 1;
      else
        v14 = 2;
      if (v13 >= 3)
        v8 = v14;
      else
        v8 = 6;
    }
    else if (v7)
    {
      v8 = 4;
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 5;
  }
  v9 = *(_DWORD *)(a1 + 184);
  if (v9 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v9) = v8;
  ++*(_DWORD *)(a1 + 184);
  if ((v8 - 3) < 2)
  {
    if ((*(_BYTE *)(a2 + 8) & 4) != 0)
      v10 = *(_QWORD *)(a2 + 16);
    else
      v10 = 0;
    v15[0] = a1 + 176;
    v15[1] = a1;
    sub_22F0BF62C(v15, v10);
    return;
  }
  switch(v8)
  {
    case 1:
      v11 = sub_22F0AABC8(a2);
LABEL_17:
      sub_22F0BC3CC(a1, v11);
      return;
    case 2:
      v11 = sub_22F3E8C38(a2);
      goto LABEL_17;
    case 0:
      llvm::FoldingSetNodeID::AddString();
      break;
  }
}

uint64_t sub_22F0BC764(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = a2;
  result = sub_22F0F084C(&v7);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 184);
  if (v5 >= *(_DWORD *)(a1 + 188))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v5) = v4;
  ++*(_DWORD *)(a1 + 184);
  if (!v4)
  {
    v6 = sub_22F0F08CC(&v7);
    return sub_22F0BC3CC(a1, v6);
  }
  return result;
}

void sub_22F0BC7F8(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15[2];
  char v16;
  uint64_t v17;

  v4 = *a2;
  v5 = a1 + 176;
  v6 = *(_DWORD *)(a1 + 184);
  if (v6 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v6) = v4;
  v7 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v7;
  switch(v4)
  {
    case 1:
      sub_22F0BC29C(a1, *((_QWORD *)a2 + 1));
      break;
    case 2:
      sub_22F0BC3CC(a1, *((_QWORD *)a2 + 2));
      break;
    case 5:
    case 6:
      sub_22F0F0834(v15, *((_QWORD *)a2 + 1));
      sub_22F0BC764(a1, v15[0]);
      break;
    case 7:
      v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v16 = 0;
      v15[0] = (uint64_t)&off_24FAC6EC8;
      v15[1] = v5;
      v17 = a1;
      sub_22F0E9FEC(v15, v8);
      break;
    case 8:
      v9 = a2[1];
      if (v7 >= *(_DWORD *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v7) = v9;
      ++*(_DWORD *)(a1 + 184);
      v10 = a2[1];
      if ((_DWORD)v10)
      {
        v11 = (__int128 *)*((_QWORD *)a2 + 1);
        v12 = 24 * v10;
        do
        {
          v13 = *v11;
          v14 = *((_QWORD *)v11 + 2);
          sub_22F0BC7F8(a1, &v13);
          v11 = (__int128 *)((char *)v11 + 24);
          v12 -= 24;
        }
        while (v12);
      }
      break;
    default:
      return;
  }
}

uint64_t sub_22F0BC984(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = result;
  v4 = result + 176;
  v5 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  v6 = *(_DWORD *)(result + 184);
  if (v6 >= *(_DWORD *)(result + 188))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v3 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 176) + 4 * v6) = v5;
  ++*(_DWORD *)(v3 + 184);
  v7 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(a2 + 16);
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      v11[0] = v4;
      v11[1] = v3;
      result = sub_22F0BCCF4(v11, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

unint64_t sub_22F0BCA28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 24) + v2;
  v4 = 0;
  v5 = v2 & 0x1F;
  if ((*(_DWORD *)(a1 + 32) & 0x1F) != 0)
  {
    do
    {
      v6 = *(unsigned __int8 *)--v3;
      v4 = v6 | (2 * v4);
      --v5;
    }
    while (v5);
  }
  v7 = *(_DWORD *)(a1 + 184);
  if (v7 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v7) = v4;
  v8 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v8;
  if (v2 >= 0x20)
  {
    v10 = 0;
    if (v2 >> 5 <= 1)
      v11 = 1;
    else
      v11 = v2 >> 5;
    do
    {
      v12 = 0;
      v13 = 32;
      v14 = -1;
      do
      {
        v12 = *(unsigned __int8 *)(v3 + v14--) | (2 * v12);
        --v13;
      }
      while (v13);
      if (v8 >= *(_DWORD *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v8) = v12;
      v3 -= 32;
      v8 = *(_DWORD *)(a1 + 184) + 1;
      *(_DWORD *)(a1 + 184) = v8;
      ++v10;
    }
    while (v10 != v11);
  }
  *(_QWORD *)(a1 + 32) = 0;
  return sub_22E3D0BF8(*(_QWORD **)(a1 + 176), *(_QWORD *)(a1 + 176) + 4 * v8);
}

uint64_t sub_22F0BCB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;

  if ((*(_DWORD *)(a1 + 28) & 0x200) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  v4 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v4 = *(_QWORD *)v3;
  if (v4 != a2)
    return 0;
  v5 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v5 == 83)
    return 0;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)v3;
  for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
  {
    v7 = -40;
    if (i > 70)
    {
      if (i == 71)
      {
        v7 = -56;
      }
      else if (i != 81)
      {
        goto LABEL_23;
      }
    }
    else
    {
      if (i > 0x18)
        goto LABEL_22;
      if (i == 16)
        goto LABEL_12;
      if (((1 << i) & 0x1066) != 0)
        goto LABEL_13;
      if (i == 24)
      {
LABEL_12:
        v7 = -48;
      }
      else
      {
LABEL_22:
        if (i != 70)
        {
LABEL_23:
          v9 = i - 52;
          if ((i - 33) >= 5)
            v10 = -48;
          else
            v10 = -64;
          if (v9 >= 6)
            v7 = v10;
          else
            v7 = -72;
          goto LABEL_13;
        }
        v7 = -64;
      }
    }
LABEL_13:
    v8 = *(_QWORD *)(v3 + v7 + 16);
    v3 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v3 = *(_QWORD *)v3;
  }
  result = 0;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 2000) + 28);
  if (v5 <= 24)
  {
    if (!v5 || v5 == 8)
      return 1;
    if (v5 == 24)
      return (v12 >> 2) & 1;
  }
  else
  {
    v13 = (v5 - 25);
    if (v13 > 0x39)
      return result;
    if (((1 << v13) & 0x200040961018010) != 0)
      return 1;
    if (v13)
    {
      if (v13 == 26)
        return (v12 >> 1) & 1;
    }
    else
    {
      return v12 & 1;
    }
  }
  return result;
}

void sub_22F0BCCF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  v5 = *(_DWORD *)(*a1 + 8);
  if (v5 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  __asm { BR              X10 }
}

void sub_22F0BD544(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 40) >= 8uLL && (*(_QWORD *)(a2 + 40) & 7) == 0)
  {
    sub_22F0BC3CC(a1, a2);
    v5 = sub_22F2781C0(a2);
    if (v5 != v6)
    {
      v7 = v5;
      v8 = v6;
      do
      {
        sub_22F3B5854(v7);
        do
          v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v7 && (*(_DWORD *)(v7 + 28) & 0x7F) != 0x18);
      }
      while (v7 != v8);
    }
    v19 = v21;
    v20 = 0x1000000000;
    v9 = a2 + 48;
    if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
      sub_22EFCC320(a2 + 48);
    for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22F0BCB54(i, v9))
      {
        v11 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v20;
        }
        *((_QWORD *)v19 + v11) = i;
        LODWORD(v20) = v20 + 1;
      }
    }
    v12 = *(_DWORD *)(a1 + 184);
    if (v12 >= *(_DWORD *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v12) = v20;
    v13 = *(_DWORD *)(a1 + 188);
    v14 = *(_DWORD *)(a1 + 184) + 1;
    *(_DWORD *)(a1 + 184) = v14;
    if (v14 >= v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v14) = 0;
    ++*(_DWORD *)(a1 + 184);
    v15 = (uint64_t *)v19;
    if ((_DWORD)v20)
    {
      v16 = 8 * v20;
      do
      {
        v17 = *v15++;
        v18[0] = a1 + 176;
        v18[1] = a1;
        sub_22F0BCCF4(v18, v17);
        v16 -= 8;
      }
      while (v16);
      v15 = (uint64_t *)v19;
    }
    if (v15 != v21)
      free(v15);
  }
}

void sub_22F0BD750(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21[2];
  void *v22;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x24BDAC8D0];
  sub_22F0BC3CC(a1, a2);
  v4 = sub_22F2781C0(a2);
  if (v4 != v5)
  {
    v6 = v4;
    v7 = v5;
    do
    {
      sub_22F3B5854(v6);
      do
        v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) != 0x18);
    }
    while (v6 != v7);
  }
  v8 = sub_22F3B46CC(a2);
  v9 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v9 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v9 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v9) = v8 != 0;
  ++*(_QWORD *)(a1 + 32);
  if (v8)
  {
    v19 = sub_22F3B4F18(v8);
    v20 = *(_DWORD *)(a1 + 184);
    if (v20 >= *(_DWORD *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v20) = v19;
    ++*(_DWORD *)(a1 + 184);
  }
  v22 = v24;
  v23 = 0x1000000000;
  v10 = a2 + 48;
  if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
    sub_22EFCC320(a2 + 48);
  for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if (sub_22F0BCB54(i, v10))
    {
      v12 = v23;
      if (v23 >= (unint64_t)HIDWORD(v23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v23;
      }
      *((_QWORD *)v22 + v12) = i;
      LODWORD(v23) = v23 + 1;
    }
  }
  v13 = *(_DWORD *)(a1 + 184);
  if (v13 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v13) = v23;
  v14 = *(_DWORD *)(a1 + 188);
  v15 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v15;
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v15) = 0;
  ++*(_DWORD *)(a1 + 184);
  v16 = (uint64_t *)v22;
  if ((_DWORD)v23)
  {
    v17 = 8 * v23;
    do
    {
      v18 = *v16++;
      v21[0] = a1 + 176;
      v21[1] = a1;
      sub_22F0BCCF4(v21, v18);
      v17 -= 8;
    }
    while (v17);
    v16 = (uint64_t *)v22;
  }
  if (v16 != v24)
    free(v16);
}

void sub_22F0BD9E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  sub_22F0BC3CC(a1, a2);
  v4 = sub_22F2781C0(a2);
  if (v4 != v5)
  {
    v6 = v4;
    v7 = v5;
    do
    {
      sub_22F3B5854(v6);
      do
        v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) != 0x18);
    }
    while (v6 != v7);
  }
  v18 = v20;
  v19 = 0x1000000000;
  v8 = a2 + 48;
  if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
    sub_22EFCC320(a2 + 48);
  for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if (sub_22F0BCB54(i, v8))
    {
      v10 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v19;
      }
      *((_QWORD *)v18 + v10) = i;
      LODWORD(v19) = v19 + 1;
    }
  }
  v11 = *(_DWORD *)(a1 + 184);
  if (v11 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v11) = v19;
  v12 = *(_DWORD *)(a1 + 188);
  v13 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v13;
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v13) = 0;
  ++*(_DWORD *)(a1 + 184);
  v14 = (uint64_t *)v18;
  if ((_DWORD)v19)
  {
    v15 = 8 * v19;
    do
    {
      v16 = *v14++;
      v17[0] = a1 + 176;
      v17[1] = a1;
      sub_22F0BCCF4(v17, v16);
      v15 -= 8;
    }
    while (v15);
    v14 = (uint64_t *)v18;
  }
  if (v14 != v20)
    free(v14);
}

void sub_22F0BDBD8(uint64_t a1, unint64_t a2)
{
  void *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t i;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77[2];
  void *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)(a1 + 176);
  v5 = *(_WORD *)(a2 + 56) & 0x7F;
  v6 = *(_DWORD *)(a1 + 184);
  if (v6 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v6) = v5;
  ++*(_DWORD *)(a1 + 184);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v8 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v8 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v8) = (v7 & 0x20000) != 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v9 + 1;
  *(_QWORD *)(a1 + 32) = v9 + 1;
  v12 = *(_QWORD *)(a2 + 56);
  if (v9 + 2 > v10)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v11 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v11) = (v12 & 0x80000) != 0;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = v13 + 1;
  *(_QWORD *)(a1 + 32) = v13 + 1;
  v16 = *(_QWORD *)(a2 + 56);
  if (v13 + 2 > v14)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v15 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v15) = (v16 & 0x40000) != 0;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = v17 + 1;
  *(_QWORD *)(a1 + 32) = v17 + 1;
  v20 = *(_QWORD *)(a2 + 56);
  if (v17 + 2 > v18)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v19 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v19) = (v20 & 0x100000) != 0;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 40);
  v23 = v21 + 1;
  *(_QWORD *)(a1 + 32) = v21 + 1;
  v24 = *(_QWORD *)(a2 + 56);
  if (v21 + 2 > v22)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v23 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v23) = (v24 & 0x200000) != 0;
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_QWORD *)(a1 + 40);
  v27 = v25 + 1;
  *(_QWORD *)(a1 + 32) = v25 + 1;
  v28 = *(_QWORD *)(a2 + 56);
  if (v25 + 2 > v26)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v27 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v27) = (v28 & 0x1000000000) != 0;
  ++*(_QWORD *)(a1 + 32);
  v29 = sub_22EFDBD9C(a2);
  v30 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v30 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v30 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v30) = v29;
  ++*(_QWORD *)(a1 + 32);
  v31 = sub_22EFDBF50(a2) == 3 && sub_22EA7D688(a2);
  v32 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v32 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v32 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v32) = v31;
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(_QWORD *)(a1 + 40);
  v35 = v33 + 1;
  *(_QWORD *)(a1 + 32) = v33 + 1;
  v36 = *(_QWORD *)(a2 + 56);
  if (v33 + 2 > v34)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v35 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v35) = (v36 & 0x2000000000) != 0;
  v37 = *(_QWORD *)(a1 + 32);
  v38 = *(_QWORD *)(a1 + 40);
  v39 = v37 + 1;
  *(_QWORD *)(a1 + 32) = v37 + 1;
  v40 = *(_QWORD *)(a2 + 56);
  if (v37 + 2 > v38)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v39 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v39) = (v40 & 0x80000) != 0;
  ++*(_QWORD *)(a1 + 32);
  v41 = sub_22F3B120C(a2);
  v42 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v42 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v42 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v42) = v41;
  ++*(_QWORD *)(a1 + 32);
  v43 = *(_BYTE *)(a2 + 59) & 3;
  v44 = *(_DWORD *)(a1 + 184);
  if (v44 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v44 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v44) = v43;
  ++*(_DWORD *)(a1 + 184);
  v45 = sub_22EFDBF50(a2);
  v46 = *(_DWORD *)(a1 + 184);
  if (v46 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v46) = v45;
  ++*(_DWORD *)(a1 + 184);
  v47 = *(_QWORD *)(a2 + 128);
  v48 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v48 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v48 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v48) = v47 != 0;
  v49 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v49;
  if (v47)
  {
    v50 = (*(_DWORD *)(v47 + 96) >> 18) & 7;
    v51 = *(_DWORD *)(a1 + 184);
    if (v51 >= *(_DWORD *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v51 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v51) = v50;
    ++*(_DWORD *)(a1 + 184);
    v49 = *(_QWORD *)(a1 + 32);
  }
  v52 = *(_QWORD *)(a2 + 120);
  if ((unint64_t)(v49 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v49 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v49) = v52 != 0;
  ++*(_QWORD *)(a1 + 32);
  if (v52)
  {
    v53 = (*(_DWORD *)(v52 + 96) >> 18) & 7;
    v54 = *(_DWORD *)(a1 + 184);
    if (v54 >= *(_DWORD *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v54 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v54) = v53;
    ++*(_DWORD *)(a1 + 184);
  }
  sub_22F0BC3CC(a1, a2);
  sub_22F0BC29C(a1, *(_QWORD *)(a2 + 80));
  v55 = *(_DWORD *)(a2 + 104);
  v56 = *(_DWORD *)(a1 + 184);
  if (v56 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v56 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v56) = v55;
  ++*(_DWORD *)(a1 + 184);
  v57 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v57)
  {
    v58 = *(uint64_t **)(a2 + 96);
    v59 = 8 * v57;
    do
    {
      v60 = *v58++;
      v78 = v4;
      v79 = a1;
      sub_22F0BCCF4((uint64_t *)&v78, v60);
      v59 -= 8;
    }
    while (v59);
  }
  if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2) & 1) != 0)
  {
    v61 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v61 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v61 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v61) = 0;
    ++*(_QWORD *)(a1 + 32);
  }
  else
  {
    v62 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2);
    v63 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v63 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v63 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v63) = v62;
    ++*(_QWORD *)(a1 + 32);
    if (v62)
    {
      v64 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      v65 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v65 + 1) > *(_QWORD *)(a1 + 40))
      {
        v76 = v64;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v64 = v76;
        v65 = *(_QWORD *)(a1 + 32);
      }
      v66 = a2 + 48;
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + v65) = v64 != 0;
      ++*(_QWORD *)(a1 + 32);
      if (v64)
      {
        v80 = 0;
        v78 = &off_24FAC6EC8;
        v79 = (uint64_t)v4;
        v81 = a1;
        sub_22F0E9FEC(&v78, v64);
      }
      v78 = &v80;
      v79 = 0x1000000000;
      if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
        sub_22EFCC320(a2 + 48);
      for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if (sub_22F0BCB54(i, v66))
        {
          v68 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v68 = v79;
          }
          *((_QWORD *)v78 + v68) = i;
          LODWORD(v79) = v79 + 1;
        }
      }
      v69 = v79;
      v70 = *(_DWORD *)(a1 + 184);
      if (v70 >= *(_DWORD *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v70 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v70) = v69;
      v71 = *(_DWORD *)(a1 + 188);
      v72 = *(_DWORD *)(a1 + 184) + 1;
      *(_DWORD *)(a1 + 184) = v72;
      if (v72 >= v71)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v72 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v72) = 0;
      ++*(_DWORD *)(a1 + 184);
      v73 = (uint64_t *)v78;
      if ((_DWORD)v79)
      {
        v74 = 8 * v79;
        do
        {
          v75 = *v73++;
          v77[0] = (uint64_t)v4;
          v77[1] = a1;
          sub_22F0BCCF4(v77, v75);
          v74 -= 8;
        }
        while (v74);
        v73 = (uint64_t *)v78;
      }
      if (v73 != (uint64_t *)&v80)
        free(v73);
    }
  }
}

void sub_22F0BE420(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[16];
  uint64_t *v37;
  uint64_t v38;
  _QWORD v39[4];

  v39[2] = *MEMORY[0x24BDAC8D0];
  sub_22F0BC3CC(a1, a2);
  v35 = 0x1000000000;
  if ((*(_BYTE *)(a2 + 72) & 0x80) != 0)
    sub_22EFCC320(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  if (v4)
  {
    while ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 38 < 0xFFFFFFFC)
    {
      if (sub_22F0BCB54(v4, a2 + 64))
      {
        v5 = v35;
        if (v35 >= (unint64_t)HIDWORD(v35))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v5 = v35;
        }
        v36[v5] = v4;
        v6 = &v35;
LABEL_9:
        ++*(_DWORD *)v6;
      }
LABEL_11:
      v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v4)
        goto LABEL_16;
    }
    if ((*(_BYTE *)(v4 + 75) & 1) == 0)
      goto LABEL_11;
    v7 = sub_22F3ACEE0(v4);
    v8 = *(unsigned int *)(a1 + 184);
    if (v8 >= *(unsigned int *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(unsigned int *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v8) = v7;
    v6 = (uint64_t *)(a1 + 184);
    goto LABEL_9;
  }
LABEL_16:
  v9 = v35;
  v10 = *(_DWORD *)(a1 + 184);
  if (v10 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v10) = v9;
  v11 = *(_DWORD *)(a1 + 188);
  v12 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v12;
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v12) = 0;
  ++*(_DWORD *)(a1 + 184);
  if ((_DWORD)v35)
  {
    v13 = v36;
    v14 = 8 * v35;
    do
    {
      v15 = *v13++;
      v37 = (uint64_t *)(a1 + 176);
      v38 = a1;
      sub_22F0BCCF4((uint64_t *)&v37, v15);
      v14 -= 8;
    }
    while (v14);
  }
  if (!a2 || (v16 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v17 = *(_QWORD *)(a2 + 16);
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 4) != 0)
      v18 = *(_QWORD *)v18;
    for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
    {
      v20 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v20 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_38;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_37;
        if (i == 16)
          goto LABEL_31;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_44;
        if (i == 24)
        {
LABEL_31:
          v20 = -48;
        }
        else
        {
LABEL_37:
          if (i != 70)
          {
LABEL_38:
            v21 = i - 52;
            if ((i - 33) >= 5)
              v22 = -48;
            else
              v22 = -64;
            if (v21 >= 6)
              v20 = v22;
            else
              v20 = -72;
            goto LABEL_44;
          }
          v20 = -64;
        }
      }
LABEL_44:
      v23 = *(_QWORD *)(v18 + v20 + 16);
      v18 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v18 = *(_QWORD *)v18;
    }
    v16 = v18 - 40;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x100) != 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 2000) + 20) & 0x800000000000000) != 0)
  {
    v37 = v39;
    v38 = 0x200000000;
    sub_22EFC8E88(a2);
    v25 = *((unsigned int *)v24 + 2);
    if ((_DWORD)v25)
    {
      v26 = *v24;
      v27 = 8 * v25;
      do
      {
        v28 = *v26;
        if (*(unsigned __int16 *)(*v26 + 32) - 253 <= 1)
        {
          v29 = v38;
          if (v38 >= (unint64_t)HIDWORD(v38))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v38;
          }
          v37[v29] = v28;
          LODWORD(v38) = v38 + 1;
        }
        ++v26;
        v27 -= 8;
      }
      while (v27);
    }
    v30 = 126 - 2 * __clz(v38);
    if ((_DWORD)v38)
      v31 = v30;
    else
      v31 = 0;
    sub_22F0C158C((uint64_t)v37, &v37[v38], v31, 1);
    v32 = v37;
    if ((_DWORD)v38)
    {
      v33 = 8 * v38;
      do
      {
        v34 = *v32++;
        sub_22F3E9C1C(a1, v34);
        v33 -= 8;
      }
      while (v33);
      v32 = v37;
    }
    if (v32 != v39)
      free(v32);
  }
}

void sub_22F0BE85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35[2];
  void *v36;
  uint64_t v37;
  _QWORD v38[17];

  v38[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 64;
  if (a2)
    v5 = a2 + 64;
  else
    v5 = 0;
  if (a2)
  {
    v6 = a2 + 64;
    do
    {
      v7 = *(_WORD *)(v6 + 8);
      if ((v7 & 0x7E) == 0x24)
        return;
      v8 = v7 & 0x7F;
      v9 = -40;
      if (v8 > 70)
      {
        if (v8 != 83)
        {
          if (v8 == 71)
          {
            v9 = -56;
          }
          else if (v8 != 81)
          {
            goto LABEL_18;
          }
        }
      }
      else
      {
        if (v8 > 0x18)
          goto LABEL_17;
        if (v8 == 16)
          goto LABEL_10;
        if (((1 << v8) & 0x1066) != 0)
          goto LABEL_24;
        if (v8 == 24)
        {
LABEL_10:
          v9 = -48;
        }
        else
        {
LABEL_17:
          if (v8 != 70)
          {
LABEL_18:
            v10 = v8 - 52;
            if ((v8 - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_24;
          }
          v9 = -64;
        }
      }
LABEL_24:
      v12 = *(_QWORD *)(v6 + v9 + 16);
      v6 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    while (v6);
  }
  sub_22F0BC3CC(a1, a2);
  v36 = v38;
  v37 = 0x1000000000;
  if ((*(_BYTE *)(a2 + 72) & 0x80) != 0)
    sub_22EFCC320(v4);
  for (i = *(_QWORD *)(a2 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if (sub_22F0BCB54(i, v5))
    {
      v14 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v37;
      }
      *((_QWORD *)v36 + v14) = i;
      LODWORD(v37) = v37 + 1;
      if ((*(_DWORD *)(i + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        sub_22EFC2C24(i);
    }
  }
  v15 = *(_DWORD *)(a1 + 184);
  if (v15 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v15) = v37;
  v16 = *(_DWORD *)(a1 + 188);
  v17 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v17;
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v17) = 0;
  ++*(_DWORD *)(a1 + 184);
  if ((_DWORD)v37)
  {
    v18 = (uint64_t *)v36;
    v19 = 8 * v37;
    do
    {
      v20 = *v18++;
      v35[0] = a1 + 176;
      v35[1] = a1;
      sub_22F0BCCF4(v35, v20);
      v19 -= 8;
    }
    while (v19);
  }
  v21 = *(_QWORD *)(a2 + 136);
  if ((v21 & 4) != 0)
    v22 = 0;
  else
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v23 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v23 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v23) = v22 != 0;
  ++*(_QWORD *)(a1 + 32);
  if (v22)
    sub_22F0BC984(a1, *(_QWORD *)(v22 + 56));
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  v24 = *(_DWORD *)(*(_QWORD *)(a2 + 128) + 16);
  v25 = *(_DWORD *)(a1 + 184);
  if (v25 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v25) = v24;
  ++*(_DWORD *)(a1 + 184);
  v26 = sub_22E46A3A0(a2);
  if (v26 != v27)
  {
    v28 = v26;
    v29 = v27;
    do
    {
      v30 = *(unsigned __int8 *)(v28 + 12);
      v31 = *(_QWORD *)(**(_QWORD **)(v28 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v31 + 8) & 0xF) != 0)
        v31 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v28 + 16));
      sub_22F0BC29C(a1, v31 & 0xFFFFFFFFFFFFFFF0);
      v32 = *(unsigned int *)(a1 + 184);
      if (v32 >= *(unsigned int *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = *(unsigned int *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v32) = v30 & 1;
      v33 = *(_DWORD *)(a1 + 188);
      v34 = *(_DWORD *)(a1 + 184) + 1;
      *(_DWORD *)(a1 + 184) = v34;
      if (v34 >= v33)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v34) = (v30 >> 2) & 3;
      ++*(_DWORD *)(a1 + 184);
      v28 += 24;
    }
    while (v28 != v29);
  }
  if (v36 != v38)
    free(v36);
}

void sub_22F0BEC9C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unint64_t i;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86[2];
  void *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 72;
  if (a2)
  {
    v7 = a2 + 72;
    while (1)
    {
      v8 = *(_WORD *)(v7 + 8);
      v9 = v8 & 0x7E;
      if (v9 == 36)
        return;
      if ((v9 - 58) >= 0xFFFFFFFA)
      {
        v10 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFFFF8;
        v11 = (*(_QWORD *)(v7 + 72) & 6) != 4 || v10 == 0;
        if (!v11 && *(_QWORD *)(v10 + 16) >= 8uLL)
          break;
      }
LABEL_32:
      v19 = v8 & 0x7F;
      v20 = -40;
      if (v19 > 70)
      {
        if (v19 != 83)
        {
          if (v19 == 71)
          {
            v20 = -56;
          }
          else if (v19 != 81)
          {
            goto LABEL_43;
          }
        }
      }
      else
      {
        if (v19 > 0x18)
          goto LABEL_42;
        if (v19 == 16)
          goto LABEL_35;
        if (((1 << v19) & 0x1066) != 0)
          goto LABEL_49;
        if (v19 == 24)
        {
LABEL_35:
          v20 = -48;
        }
        else
        {
LABEL_42:
          if (v19 != 70)
          {
LABEL_43:
            v21 = v19 - 52;
            if ((v19 - 33) >= 5)
              v22 = -48;
            else
              v22 = -64;
            if (v21 >= 6)
              v20 = v22;
            else
              v20 = -72;
            goto LABEL_49;
          }
          v20 = -64;
        }
      }
LABEL_49:
      v23 = *(_QWORD *)(v7 + v20 + 16);
      v7 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v7 = *(_QWORD *)v7;
      if (!v7)
        goto LABEL_57;
    }
    if ((v9 - 54) > 3)
      return;
    v12 = v8 & 0x7F;
    v13 = -40;
    if (v12 > 0x46)
    {
      if (v12 == 83)
        goto LABEL_28;
      if (v12 == 71)
      {
        v13 = -56;
        goto LABEL_28;
      }
      if (v12 != 81)
      {
LABEL_22:
        v14 = v12 - 52;
        if (v12 - 33 >= 5)
          v15 = -48;
        else
          v15 = -64;
        if (v14 >= 6)
          v13 = v15;
        else
          v13 = -72;
      }
    }
    else
    {
      if (v12 > 0x18)
        goto LABEL_21;
      if (v12 == 16)
      {
LABEL_14:
        v13 = -48;
        goto LABEL_28;
      }
      if (((1 << v12) & 0x1066) == 0)
      {
        if (v12 == 24)
          goto LABEL_14;
LABEL_21:
        if (v12 == 70)
        {
          v13 = -64;
          goto LABEL_28;
        }
        goto LABEL_22;
      }
    }
LABEL_28:
    v16 = *(_QWORD *)(v7 + v13 + 16);
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 4) != 0)
      v17 = *(_QWORD *)(v17 + 8);
    v18 = *(_WORD *)(v17 + 8) & 0x7F;
    if (v18 == 16 || v18 == 83)
      return;
    goto LABEL_32;
  }
LABEL_57:
  v24 = *(_WORD *)(a2 + 80) & 0x7F;
  v25 = *(_DWORD *)(a1 + 184);
  if (v25 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v25) = v24;
  ++*(_DWORD *)(a1 + 184);
  v26 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 144) & 6) != 4 || v26 == 0)
    v28 = 0;
  else
    v28 = *(uint64_t **)(v26 + 24);
  v29 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v29 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v29 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v29) = v28 != 0;
  ++*(_QWORD *)(a1 + 32);
  if (v28)
  {
    v30 = *((_DWORD *)v28 + 2);
    v31 = *(_DWORD *)(a1 + 184);
    if (v31 >= *(_DWORD *)(a1 + 188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = *(_DWORD *)(a1 + 184);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v31) = v30;
    ++*(_DWORD *)(a1 + 184);
    v32 = *((unsigned int *)v28 + 2);
    if ((_DWORD)v32)
    {
      v33 = (__int128 *)*v28;
      v34 = 24 * v32;
      do
      {
        v84 = *v33;
        v85 = *((_QWORD *)v33 + 2);
        sub_22F0BC7F8(a1, (int *)&v84);
        v33 = (__int128 *)((char *)v33 + 24);
        v34 -= 24;
      }
      while (v34);
    }
  }
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v35 = sub_22E8FB7BC(a2);
    v36 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v36 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v36 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v36) = v35;
    ++*(_QWORD *)(a1 + 32);
    v37 = sub_22EF9550C(a2);
    v38 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v38 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v38 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v38) = v37;
    ++*(_QWORD *)(a1 + 32);
  }
  v39 = (unsigned __int16)*(_DWORD *)(a2 + 80) >> 13;
  v40 = *(_DWORD *)(a1 + 184);
  if (v40 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v40) = v39;
  ++*(_DWORD *)(a1 + 184);
  v41 = *(_QWORD *)(a2 + 80);
  v42 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v42 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v42 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v42) = (v41 & 0x20000) != 0;
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(_QWORD *)(a1 + 40);
  v45 = v43 + 1;
  *(_QWORD *)(a1 + 32) = v43 + 1;
  v46 = *(_QWORD *)(a2 + 80);
  if (v43 + 2 > v44)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v45 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v45) = (v46 & 0x40000) != 0;
  v47 = *(_QWORD *)(a1 + 32);
  v48 = *(_QWORD *)(a1 + 40);
  v49 = v47 + 1;
  *(_QWORD *)(a1 + 32) = v47 + 1;
  v50 = *(_QWORD *)(a2 + 80);
  if (v47 + 2 > v48)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v49 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v49) = (v50 & 0x80000) != 0;
  v51 = *(_QWORD *)(a1 + 32);
  v52 = *(_QWORD *)(a1 + 40);
  v53 = v51 + 1;
  *(_QWORD *)(a1 + 32) = v51 + 1;
  v54 = *(_QWORD *)(a2 + 80) & 0x2400000;
  if (v51 + 2 > v52)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v53 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v53) = v54 == 0x400000;
  v55 = *(_QWORD *)(a1 + 32);
  v56 = *(_QWORD *)(a1 + 40);
  v57 = v55 + 1;
  *(_QWORD *)(a1 + 32) = v55 + 1;
  v58 = *(_QWORD *)(a2 + 80);
  if (v55 + 2 > v56)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v57 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v57) = (v58 & 0x4000000) != 0;
  ++*(_QWORD *)(a1 + 32);
  sub_22F0BC3CC(a1, a2);
  v59 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v59 || *(unsigned __int8 *)(v59 + 16) - 27 <= 0xFFFFFFFD)
    v59 = sub_22F10CF48(v59);
  sub_22F0BC29C(a1, *(_QWORD *)(v59 + 24));
  v60 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v60 && *(_BYTE *)(v60 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v60 = sub_22F10CF48(v60)) != 0)
  {
    v61 = (unsigned __int16)(*(_QWORD *)(v60 + 16) >> 38);
  }
  else
  {
    v61 = 0;
  }
  v62 = *(_DWORD *)(a1 + 184);
  if (v62 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v62 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v62) = v61;
  v63 = *(_DWORD *)(a1 + 188);
  v64 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v64;
  if (v64 >= v63)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v64 = *(_DWORD *)(a1 + 184);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v64) = 0;
  ++*(_DWORD *)(a1 + 184);
  v65 = *(uint64_t **)(a2 + 120);
  v66 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v66 && *(_BYTE *)(v66 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v66 = sub_22F10CF48(v66)) != 0)
  {
    v67 = *(_QWORD *)(v66 + 16);
    if ((v67 & 0x3FFFC000000000) != 0)
    {
      v68 = 8 * (unsigned __int16)(v67 >> 38);
      do
      {
        v69 = *v65++;
        v87 = (void *)(a1 + 176);
        v88 = a1;
        sub_22F0BCCF4((uint64_t *)&v87, v69);
        v68 -= 8;
      }
      while (v68);
    }
  }
  if ((a3 & 1) != 0
    || !sub_22E49F868(a2)
    || (*(_BYTE *)(a2 + 83) & 2) != 0
    || (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 82) & 0x40) != 0)
  {
    v75 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v75 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v75 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v75) = 0;
    ++*(_QWORD *)(a1 + 32);
  }
  else
  {
    v70 = *(_QWORD *)(a2 + 80);
    v71 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v71 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v71 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v71) = (v70 & 0x20000000) == 0;
    ++*(_QWORD *)(a1 + 32);
    if ((v70 & 0x20000000) == 0)
    {
      v72 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
      v73 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v73 + 1) > *(_QWORD *)(a1 + 40))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v73 = *(_QWORD *)(a1 + 32);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + v73) = v72 != 0;
      ++*(_QWORD *)(a1 + 32);
      if (v72)
      {
        v89 = 0;
        v87 = &off_24FAC6EC8;
        v88 = a1 + 176;
        v90 = a1;
        sub_22F0E9FEC(&v87, v72);
      }
      v87 = &v89;
      v88 = 0x1000000000;
      if ((*(_BYTE *)(a2 + 80) & 0x80) != 0)
        sub_22EFCC320(v6);
      for (i = *(_QWORD *)(a2 + 88); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if (sub_22F0BCB54(i, v6))
        {
          v76 = v88;
          if (v88 >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v76 = v88;
          }
          *((_QWORD *)v87 + v76) = i;
          LODWORD(v88) = v88 + 1;
        }
      }
      v77 = v88;
      v78 = *(_DWORD *)(a1 + 184);
      if (v78 >= *(_DWORD *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v78 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v78) = v77;
      v79 = *(_DWORD *)(a1 + 188);
      v80 = *(_DWORD *)(a1 + 184) + 1;
      *(_DWORD *)(a1 + 184) = v80;
      if (v80 >= v79)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v80 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v80) = 0;
      ++*(_DWORD *)(a1 + 184);
      v81 = (uint64_t *)v87;
      if ((_DWORD)v88)
      {
        v82 = 8 * v88;
        do
        {
          v83 = *v81++;
          v86[0] = a1 + 176;
          v86[1] = a1;
          sub_22F0BCCF4(v86, v83);
          v82 -= 8;
        }
        while (v82);
        v81 = (uint64_t *)v87;
      }
      if (v81 != (uint64_t *)&v89)
        free(v81);
    }
  }
}

void sub_22F0BF62C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  const void *v18;
  size_t v19;
  unsigned int v20;
  int *v21;
  const void *v22;
  int v23;

  if (!a2)
    goto LABEL_11;
  if (*(_BYTE *)(a2 + 16) != 50)
    goto LABEL_11;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)((*(_QWORD *)(v4 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v4 + 80)) & 8));
  if ((v5 & 0xF) != 0)
    goto LABEL_11;
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || *(_BYTE *)(v6 + 16) != 24)
    goto LABEL_11;
  if (*(_QWORD *)(v6 + 32))
    goto LABEL_11;
  v8 = *(_QWORD *)(v6 + 40);
  if ((v8 & 0xF) != 0)
    goto LABEL_11;
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 45)
    goto LABEL_11;
  v13 = *(_QWORD *)(v4 + 40);
  v14 = (v13 & 7) != 0 ? 0 : v13 & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 40);
  v16 = (v15 & 7) != 0 ? 0 : v15 & 0xFFFFFFFFFFFFFFF8;
  if (v14
    && v16
    && (v17 = *(unsigned int **)(v14 + 16),
        v20 = *v17,
        v18 = v17 + 4,
        v19 = v20,
        v21 = *(int **)(v16 + 16),
        v23 = *v21,
        v22 = v21 + 4,
        v19 == v23))
  {
    if (v19 && memcmp(v18, v22, v19))
      v9 = a2;
  }
  else
  {
LABEL_11:
    v9 = a2;
  }
  v10 = *a1;
  v11 = *(unsigned __int8 *)(v9 + 16);
  v12 = *(_DWORD *)(*a1 + 8);
  if (v12 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v10 + 4 * v12) = v11;
  ++*(_DWORD *)(v10 + 8);
  __asm { BR              X11 }
}

void sub_22F0C0528(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;

  v4 = *(_DWORD *)(a2 + 68) & 1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = v5[4];
  if ((unint64_t)(v6 + 1) > v5[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v6 = v5[4];
  }
  *(_BYTE *)(v5[3] + v6) = v4;
  ++v5[4];
  if (v4)
  {
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      v8 = *(_QWORD *)(a2 + 72) & 3;
      if ((_DWORD)v8)
        v9 = (_DWORD)v8 == 3;
      else
        v9 = 1;
      if (!v9)
        v7 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v7 = 0;
    }
    sub_22F0C0968(a1, (unsigned __int8 *)v7);
  }
  v10 = *(_QWORD **)(a1 + 8);
  v11 = *(_DWORD *)(a2 + 68);
  v12 = v10[4];
  if ((unint64_t)(v12 + 1) > v10[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v12 = v10[4];
  }
  v13 = 0;
  *(_BYTE *)(v10[3] + v12) = (v11 & 2) != 0;
  ++v10[4];
  if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
  {
    v13 = (unsigned __int8 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      v13 = *(unsigned __int8 **)v13;
  }
  sub_22F0C0968(a1, v13);
  sub_22F0C0A0C(a1, a2);
}

void sub_22F0C0650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a2 + 136);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (v6 >= *(_DWORD *)(*(_QWORD *)a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  sub_22F0C0A0C(a1, a2);
}

void sub_22F0C06C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_BYTE *)(a2 + 96);
  if ((v5 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v5 & 0x18) == 0x10)
  {
    v6 = 1;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x3E)
    {
      v7 = *(_QWORD *)(a2 + 16);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v8 = *(_QWORD *)(v8 + 8);
      v6 = 0;
      v9 = *(_WORD *)(sub_22EFCBB30(v8) + 8) & 0x7F;
      if (v9 != 16 && v9 != 83)
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
        {
          v6 = 1;
        }
        else
        {
          v10 = *(_QWORD *)(a2 + 16);
          v11 = v10 & 0xFFFFFFFFFFFFFFF8;
          if ((v10 & 4) != 0)
            v11 = *(_QWORD *)v11;
          v6 = (*(_WORD *)(v11 + 8) & 0x7Eu) - 38 < 0xFFFFFFFC;
        }
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v12 = v4[4];
  if ((unint64_t)(v12 + 1) > v4[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v12 = v4[4];
  }
  *(_BYTE *)(v4[3] + v12) = v6;
  ++v4[4];
  v13 = *(_QWORD **)(a1 + 8);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
    LOBYTE(v14) = 0;
  else
    v14 = *(unsigned __int8 *)(a2 + 97) >> 7;
  v15 = v13[4];
  if ((unint64_t)(v15 + 1) > v13[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v15 = v13[4];
  }
  *(_BYTE *)(v13[3] + v15) = v14;
  ++v13[4];
  v16 = ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
     && *(_QWORD *)(a2 + 88) > 7uLL;
  v17 = *(_QWORD **)(a1 + 8);
  v18 = v17[4];
  if ((unint64_t)(v18 + 1) > v17[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v18 = v17[4];
  }
  *(_BYTE *)(v17[3] + v18) = v16;
  ++v17[4];
  if (v16)
  {
    v19 = (unsigned __int8 *)sub_22EFBC5B4(a2);
    sub_22F0C0968(a1, v19);
  }
  sub_22F0C0A0C(a1, a2);
}

void sub_22F0C08DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = v4[4];
  if ((unint64_t)(v5 + 1) > v4[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = v4[4];
  }
  *(_BYTE *)(v4[3] + v5) = a2 != 0;
  ++v4[4];
  if (a2)
    sub_22F0BC3CC(*(_QWORD *)(a1 + 8), a2);
}

void sub_22F0C0968(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = v4[4];
  if ((unint64_t)(v5 + 1) > v4[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = v4[4];
  }
  *(_BYTE *)(v4[3] + v5) = a2 != 0;
  ++v4[4];
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v8 = 0;
    v7[0] = &off_24FAC6EC8;
    v7[1] = v6 + 176;
    v9 = v6;
    sub_22F0E9FEC(v7, a2);
  }
}

void sub_22F0C0A0C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 >= 6)
    sub_22F0BC29C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 48));
  sub_22F0BBDE0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40));
}

uint64_t sub_22F0C0A54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;

  v4 = a2;
  v6 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((a3 & 8) != 0)
  {
    v6 = *(_QWORD *)v6;
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a3 & 7;
    if (!v6)
    {
LABEL_14:
      v15 = a1 + 1;
      v16 = (_QWORD *)a1[1];
      v17 = v16[4];
      if ((unint64_t)(v17 + 1) > v16[5])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v17 = v16[4];
      }
      *(_BYTE *)(v16[3] + v17) = 0;
      ++v16[4];
      sub_22F0BC29C(*v15, v4);
      v4 = a3;
      return sub_22F0BC29C(*v15, v4);
    }
  }
  else
  {
    v7 = a3 & 7;
    if (!v6)
      goto LABEL_14;
  }
  if (*(_BYTE *)(v6 + 16) != 39 || *(_QWORD *)(v6 + 32) != a2)
    goto LABEL_14;
  v9 = a1 + 1;
  v8 = (_QWORD *)a1[1];
  v10 = v8[4];
  if ((unint64_t)(v10 + 1) > v8[5])
  {
    v19 = (_QWORD *)a1[1];
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v8 = v19;
    v10 = v19[4];
  }
  *(_BYTE *)(v8[3] + v10) = 1;
  ++v8[4];
  v11 = *a1;
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v11 + 4 * v12) = v7;
  v13 = *(_DWORD *)(v11 + 12);
  v14 = *(_DWORD *)(v11 + 8) + 1;
  *(_DWORD *)(v11 + 8) = v14;
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v11 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v11 + 4 * v14) = HIDWORD(v7);
  ++*(_DWORD *)(v11 + 8);
  v15 = v9;
  return sub_22F0BC29C(*v15, v4);
}

uint64_t sub_22F0C0BF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v4 = sub_22F272660(a2);
  v5 = (_QWORD *)a1[1];
  v6 = v5[4];
  if ((unint64_t)(v6 + 1) > v5[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v6 = v5[4];
  }
  *(_BYTE *)(v5[3] + v6) = v4 != 0;
  ++v5[4];
  if (v4)
    sub_22F0BC3CC(a1[1], v4);
  v7 = (*(_QWORD *)(a2 + 16) >> 19) & 0x7FLL;
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 8);
  if (v9 >= *(_DWORD *)(*a1 + 12))
  {
    v31 = *a1;
    v32 = (*(_QWORD *)(a2 + 16) >> 19) & 0x7FLL;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v32;
    v8 = v31;
    v9 = *(_DWORD *)(v31 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v8 + 4 * v9) = v7;
  v10 = *(_DWORD *)(v8 + 12);
  v11 = *(_DWORD *)(v8 + 8) + 1;
  *(_DWORD *)(v8 + 8) = v11;
  if (v11 >= v10)
  {
    v36 = v8;
    v37 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v37;
    v8 = v36;
    v11 = *(_DWORD *)(v36 + 8);
  }
  v12 = a2 + 48;
  *(_DWORD *)(*(_QWORD *)v8 + 4 * v11) = 0;
  ++*(_DWORD *)(v8 + 8);
  if (v7)
  {
    v13 = 8 * v7;
    v14 = (uint64_t *)(a2 + 48);
    do
    {
      v15 = *v14++;
      sub_22F0BC29C(a1[1], v15);
      v13 -= 8;
    }
    while (v13);
  }
  v16 = *(_QWORD *)(a2 + 16);
  v17 = v16 >> 26;
  v18 = *a1;
  v19 = *(_DWORD *)(*a1 + 8);
  if (v19 >= *(_DWORD *)(*a1 + 12))
  {
    v33 = *a1;
    v34 = v16 >> 26;
    v35 = *(_QWORD *)(a2 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = v35;
    v17 = v34;
    v18 = v33;
    v12 = a2 + 48;
    v19 = *(_DWORD *)(v18 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v18 + 4 * v19) = v17;
  v20 = *(_DWORD *)(v18 + 12);
  v21 = *(_DWORD *)(v18 + 8) + 1;
  *(_DWORD *)(v18 + 8) = v21;
  if (v21 >= v20)
  {
    v38 = v12;
    v39 = v18;
    v40 = v17;
    v41 = v16;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = v41;
    v17 = v40;
    v18 = v39;
    v12 = v38;
    v21 = *(_DWORD *)(v18 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v18 + 4 * v21) = 0;
  ++*(_DWORD *)(v18 + 8);
  if (v17)
  {
    v26 = (uint64_t *)(v12 + 8 * ((v16 >> 19) & 0x7F));
    v27 = 8 * v17;
    do
    {
      v28 = *v26;
      v29 = (_QWORD *)a1[1];
      v30 = v29[4];
      if ((unint64_t)(v30 + 1) > v29[5])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v30 = v29[4];
      }
      *(_BYTE *)(v29[3] + v30) = v28 != 0;
      ++v29[4];
      if (v28)
        sub_22F0BC3CC(a1[1], v28);
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  v22 = (_QWORD *)a1[1];
  result = sub_22F409D44(a2);
  v24 = result;
  v25 = v22[4];
  if ((unint64_t)(v25 + 1) > v22[5])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v25 = v22[4];
  }
  *(_BYTE *)(v22[3] + v25) = v24;
  ++v22[4];
  return result;
}

uint64_t sub_22F0C0ED4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  result = sub_22F0BC29C(a1[1], *(_QWORD *)(a2 + 32));
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 20);
  v7 = *(_DWORD *)(*a1 + 8);
  if (v7 >= *(_DWORD *)(*a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v7) = v6;
  ++*(_DWORD *)(v5 + 8);
  v8 = *a1;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(v8 + 8);
  if (v10 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v8 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v8 + 4 * v10) = (v9 >> 19) & 0xF;
  ++*(_DWORD *)(v8 + 8);
  return result;
}

uint64_t sub_22F0C0F94(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  result = sub_22F0BC29C(a1[1], *(_QWORD *)(a2 + 32));
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(*a1 + 8);
  if (v7 >= *(_DWORD *)(*a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v7) = (v6 >> 22) & 7;
  ++*(_DWORD *)(v5 + 8);
  v8 = (*(_DWORD *)(a2 + 16) >> 19) & 7;
  v9 = *a1;
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v9 + 4 * v10) = v8;
  v11 = *(_DWORD *)(v9 + 12);
  v12 = *(_DWORD *)(v9 + 8) + 1;
  *(_DWORD *)(v9 + 8) = v12;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v9 + 4 * v12) = 0;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

uint64_t sub_22F0C1090(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(result + 8);
  v4 = v3[4];
  if ((unint64_t)(v4 + 1) > v3[5])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = v3[4];
  }
  *(_BYTE *)(v3[3] + v4) = a2 != 0;
  ++v3[4];
  if (a2)
    return llvm::FoldingSetNodeID::AddString();
  return result;
}

uint64_t sub_22F0C1124(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = (a2 >> 19);
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_22F0C1184(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  char v15;
  uint64_t v16;

  sub_22F0BC29C(a1[1], *(_QWORD *)(a2 + 24));
  v4 = *(_DWORD *)(a2 + 16) >> 19;
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 8);
  if (v6 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = (_QWORD *)a1[1];
  v8 = sub_22E47E20C(a2);
  v9 = v7[4];
  if ((unint64_t)(v9 + 1) > v7[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v9 = v7[4];
  }
  *(_BYTE *)(v7[3] + v9) = v8 & 1;
  ++v7[4];
  v10 = (_QWORD *)a1[1];
  v11 = sub_22E47E20C(a2);
  v12 = v10[4];
  if ((unint64_t)(v12 + 1) > v10[5])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v12 = v10[4];
  }
  *(_BYTE *)(v10[3] + v12) = (v11 & 4) != 0;
  ++v10[4];
  v13 = (_QWORD *)a1[1];
  result = sub_22E47E20C(a2);
  v15 = result;
  v16 = v13[4];
  if ((unint64_t)(v16 + 1) > v13[5])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = v13[4];
  }
  *(_BYTE *)(v13[3] + v16) = (v15 & 2) != 0;
  ++v13[4];
  return result;
}

uint64_t sub_22F0C12F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F0C1380((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F0C141C(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F0C1380(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F0C141C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F0C14CC(a1, v7);
  v9 = 0;
  sub_22F0C1380((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22F0C14CC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3E9EFC(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F0C158C(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  BOOL v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  int64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;

  v6 = (uint64_t *)result;
LABEL_2:
  v91 = a2 - 2;
  v93 = a2 - 1;
  v96 = a2;
  v90 = a2 - 3;
  v7 = v6;
  while (2)
  {
    v6 = v7;
    v8 = v96;
    v9 = (char *)v96 - (char *)v6;
    v10 = v96 - v6;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v36 = *(v96 - 1);
        v37 = *v6;
        result = sub_22EFA54B8(v36, *v6);
        if ((_DWORD)result)
        {
          *v6 = v36;
          *(v96 - 1) = v37;
        }
        return result;
      case 3:
        return sub_22F0BB56C(v6, v6 + 1, v93);
      case 4:
        return sub_22F0BB830(v6, v6 + 1, v6 + 2, v93);
      case 5:
        v38 = v6 + 2;
        v39 = v6 + 3;
        sub_22F0BB830(v6, v6 + 1, v6 + 2, v6 + 3);
        v40 = *(v96 - 1);
        v41 = v6[3];
        result = sub_22EFA54B8(v40, v41);
        if ((_DWORD)result)
        {
          *v39 = v40;
          *(v96 - 1) = v41;
          v42 = *v39;
          v43 = *v38;
          result = sub_22EFA54B8(*v39, *v38);
          if ((_DWORD)result)
          {
            *v38 = v42;
            *v39 = v43;
            v44 = v6[1];
            result = sub_22EFA54B8(v42, v44);
            if ((_DWORD)result)
            {
              v6[1] = v42;
              v6[2] = v44;
              v45 = *v6;
              result = sub_22EFA54B8(v42, *v6);
              if ((_DWORD)result)
              {
                *v6 = v42;
                v6[1] = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v46 = v6 + 1;
          v48 = v6 == v96 || v46 == v96;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v6;
              do
              {
                v52 = *v50;
                v51 = v50[1];
                v50 = v46;
                result = sub_22EFA54B8(v51, v52);
                if ((_DWORD)result)
                {
                  v53 = v49;
                  while (1)
                  {
                    *(uint64_t *)((char *)v6 + v53 + 8) = v52;
                    if (!v53)
                      break;
                    v52 = *(uint64_t *)((char *)v6 + v53 - 8);
                    result = sub_22EFA54B8(v51, v52);
                    v53 -= 8;
                    if ((result & 1) == 0)
                    {
                      v54 = (uint64_t *)((char *)v6 + v53 + 8);
                      goto LABEL_79;
                    }
                  }
                  v54 = v6;
LABEL_79:
                  *v54 = v51;
                }
                v46 = v50 + 1;
                v49 += 8;
              }
              while (v50 + 1 != v96);
            }
          }
          else if (!v48)
          {
            do
            {
              v88 = *v6;
              v87 = v6[1];
              v6 = v46;
              result = sub_22EFA54B8(v87, v88);
              if ((_DWORD)result)
              {
                v89 = v6;
                do
                {
                  *v89 = v88;
                  v88 = *(v89 - 2);
                  result = sub_22EFA54B8(v87, v88);
                  --v89;
                }
                while ((result & 1) != 0);
                *v89 = v87;
              }
              v46 = v6 + 1;
            }
            while (v6 + 1 != v96);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != v96)
          {
            v55 = (unint64_t)(v10 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = &v6[v58];
                v60 = *v59;
                if (2 * v56 + 2 < v10)
                {
                  v61 = v59[1];
                  if (sub_22EFA54B8(*v59, v61))
                  {
                    v60 = v61;
                    ++v59;
                    v58 = 2 * v57 + 2;
                  }
                }
                v62 = &v6[v57];
                v63 = *v62;
                result = sub_22EFA54B8(v60, *v62);
                if ((result & 1) == 0)
                {
                  v92 = v57;
                  v94 = v63;
                  do
                  {
                    v64 = v59;
                    *v62 = v60;
                    if (v55 < v58)
                      break;
                    v65 = (2 * v58) | 1;
                    v59 = &v6[v65];
                    v66 = 2 * v58 + 2;
                    v60 = *v59;
                    if (v66 < v10)
                    {
                      v67 = v59[1];
                      v68 = sub_22EFA54B8(*v59, v67);
                      if (v68)
                      {
                        v60 = v67;
                        ++v59;
                      }
                      v63 = v94;
                      if (v68)
                        v65 = v66;
                    }
                    result = sub_22EFA54B8(v60, v63);
                    v62 = v64;
                    v58 = v65;
                  }
                  while (!(_DWORD)result);
                  *v64 = v63;
                  v57 = v92;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v69 = v96;
            v95 = v6;
            do
            {
              v70 = v69;
              v71 = 0;
              v97 = *v6;
              v72 = v6;
              do
              {
                v73 = &v72[v71];
                v76 = v73[1];
                v74 = v73 + 1;
                v75 = v76;
                v77 = (2 * v71) | 1;
                v78 = 2 * v71 + 2;
                if (v78 < v10)
                {
                  v79 = v74[1];
                  result = sub_22EFA54B8(v75, v79);
                  if ((_DWORD)result)
                  {
                    v75 = v79;
                    ++v74;
                    v77 = v78;
                  }
                }
                *v72 = v75;
                v72 = v74;
                v71 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              --v69;
              if (v74 == v70 - 1)
              {
                *v74 = v97;
              }
              else
              {
                *v74 = *v69;
                *v69 = v97;
                v80 = (char *)v74 - (char *)v95 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v95[v81];
                  v83 = *v82;
                  v84 = *v74;
                  result = sub_22EFA54B8(*v82, *v74);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v85 = v82;
                      *v74 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v95[v81];
                      v83 = *v82;
                      result = sub_22EFA54B8(*v82, v84);
                      v74 = v85;
                    }
                    while ((result & 1) != 0);
                    *v85 = v84;
                  }
                }
              }
              v86 = v10-- <= 2;
              v6 = v95;
            }
            while (!v86);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v6[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          sub_22F0BB56C(v12, v6, v93);
        }
        else
        {
          sub_22F0BB56C(v6, v12, v93);
          sub_22F0BB56C(v6 + 1, v12 - 1, v91);
          sub_22F0BB56C(v6 + 2, &v6[v11 + 1], v90);
          v8 = v96;
          sub_22F0BB56C(v12 - 1, v12, &v6[v11 + 1]);
          v13 = *v6;
          *v6 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v6;
        if ((a4 & 1) == 0 && (sub_22EFA54B8(*(v6 - 1), *v6) & 1) == 0)
        {
          result = sub_22EFA54B8(v14, *v93);
          if ((result & 1) != 0)
          {
            v7 = v6;
            do
            {
              v27 = v7[1];
              ++v7;
              result = sub_22EFA54B8(v14, v27);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v28 = v6 + 1;
            do
            {
              v7 = v28;
              if (v28 >= v96)
                break;
              ++v28;
              result = sub_22EFA54B8(v14, *v7);
            }
            while (!(_DWORD)result);
          }
          v29 = v96;
          if (v7 < v96)
          {
            v29 = v96;
            do
            {
              v30 = *--v29;
              result = sub_22EFA54B8(v14, v30);
            }
            while ((result & 1) != 0);
          }
          if (v7 < v29)
          {
            v31 = *v7;
            v32 = *v29;
            do
            {
              *v7 = v32;
              *v29 = v31;
              do
              {
                v33 = v7[1];
                ++v7;
                v31 = v33;
              }
              while (!sub_22EFA54B8(v14, v33));
              do
              {
                v34 = *--v29;
                v32 = v34;
                result = sub_22EFA54B8(v14, v34);
              }
              while ((result & 1) != 0);
            }
            while (v7 < v29);
          }
          v35 = v7 - 1;
          if (v7 - 1 != v6)
            *v6 = *v35;
          a4 = 0;
          *v35 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v6[++v15];
        while ((sub_22EFA54B8(v16, v14) & 1) != 0);
        v17 = &v6[v15];
        v18 = v8;
        if (v15 == 1)
        {
          v18 = v8;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while ((sub_22EFA54B8(v20, v14) & 1) == 0);
        }
        else
        {
          do
            v19 = *--v18;
          while (!sub_22EFA54B8(v19, v14));
        }
        if (v17 >= v18)
        {
          v7 = &v6[v15];
        }
        else
        {
          v21 = *v18;
          v7 = &v6[v15];
          v22 = v18;
          do
          {
            *v7 = v21;
            *v22 = v16;
            do
            {
              v23 = v7[1];
              ++v7;
              v16 = v23;
            }
            while ((sub_22EFA54B8(v23, v14) & 1) != 0);
            do
            {
              v24 = *--v22;
              v21 = v24;
            }
            while (!sub_22EFA54B8(v24, v14));
          }
          while (v7 < v22);
        }
        v25 = v7 - 1;
        if (v7 - 1 != v6)
          *v6 = *v25;
        *v25 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = sub_22F0C158C(v6, v7 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = sub_22F0C1CF8(v6, v7 - 1);
        result = sub_22F0C1CF8(v7, v96);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v7 - 1;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_22F0C1CF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (sub_22EFA54B8(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_22F0BB56C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_22F0BB830(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_22F0BB830(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (sub_22EFA54B8(v20, v21))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (sub_22EFA54B8(*v19, *v18))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = a1[1];
          if (sub_22EFA54B8(v22, v24))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (sub_22EFA54B8(v22, *a1))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_22F0BB56C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (sub_22EFA54B8(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v16 = sub_22EFA54B8(v12, v13);
        v14 = v15;
        if ((v16 & 1) == 0)
        {
          v17 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t *sub_22F0C1EF4(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 && *(_BYTE *)v2 == 12 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (*(_DWORD *)(v3 + 28) & 0x7F) == 0x3F)
  {
    v5 = *(_QWORD *)(v3 + 88);
    v4 = v3 + 88;
    v6 = (v5 & (v5 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 & (v5 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
      v4 = v6;
    v7 = v4 + 8;
  }
  else
  {
    v4 = a2 + 32;
    v7 = a2 + 40;
  }
  *result = v4;
  result[1] = 0;
  result[3] = v7;
  result[4] = 0;
  return result;
}

uint64_t sub_22F0C1F54(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void **v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t *v9;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE v15[64];

  v11 = v15;
  v12 = v15;
  v13 = 8;
  v14 = 0;
  if (!a2)
    return 0;
  v3 = 0;
  v4 = 8 * a2;
  do
  {
    if (*a1)
      v5 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
    else
      v5 = 0;
    v6 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v11, v5);
    v8 = v11;
    v7 = v12;
    v9 = (uint64_t *)((char *)&v13 + 4);
    if (v12 != v11)
      v9 = &v13;
    if (v6 == (void **)&v12[8 * *(unsigned int *)v9])
    {
      v3 = (v3 + 1);
      sub_22E3BA850((uint64_t)&v11, v5);
      v8 = v11;
      v7 = v12;
    }
    ++a1;
    v4 -= 8;
  }
  while (v4);
  if (v7 != v8)
    free(v7);
  return v3;
}

_DWORD *sub_22F0C203C(uint64_t a1, int *a2, const void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, void *a9, uint64_t a10, const void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20)
{
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int *v29;
  int v30;
  _DWORD *v31;
  __int128 v35;
  uint64_t v36;
  __int128 v37;

  LODWORD(v37) = a4;
  v26 = sub_22F0C1F54(a5, a6);
  *(_QWORD *)((char *)&v37 + 4) = __PAIR64__(a8, v26);
  v27 = 0;
  if (a8)
  {
    v28 = 144 * a8;
    v29 = (int *)(a7 + 1);
    do
    {
      v30 = *v29;
      v29 += 36;
      v27 += v30;
      v28 -= 144;
    }
    while (v28);
  }
  HIDWORD(v37) = v27;
  v31 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, ((8 * ((2 * a4) + (unint64_t)v26) + 4 * (v26 + a8) + 7) & 0x1FFFFFFFF8)+ 16 * v27+ 136, 3);
  v35 = *(_OWORD *)a17;
  v36 = *(_QWORD *)(a17 + 16);
  sub_22F0C47C0((uint64_t)v31, a11, a12, a13, a14, a15, a16, &v35, a18, a19, a20, a2, &v37);
  if (a4)
    memmove(v31 + 34, a3, 8 * a4);
  if (a10)
    memmove(&v31[2 * v31[4] + 34], a9, 8 * a10);
  sub_22F0C21E4(v31, a5, a6, a7);
  v31[30] = a18;
  v31[32] = a20;
  return v31;
}

uint64_t sub_22F0C21E4(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  const void *v26;
  const void *v27;
  uint64_t *v28;
  _QWORD v29[2];
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[18];

  v36[16] = *MEMORY[0x24BDAC8D0];
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = sub_22F3EF4A4((uint64_t)v29, a2);
      v9 = *a4;
      v10 = *((unsigned int *)a4 + 2);
      v11 = *(unsigned int *)(v8 + 8);
      if (v11 >= *(unsigned int *)(v8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(v8 + 8);
      }
      v12 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
      *v12 = v9;
      v12[1] = v10;
      ++*(_DWORD *)(v8 + 8);
      ++a2;
      a4 += 18;
      v7 -= 8;
    }
    while (v7);
    v14 = v31;
    v13 = v32;
    if (v31 != v32)
    {
      v16 = 0;
      v17 = a1[5];
      v18 = &a1[4 * a1[4] + 34];
      v19 = &v18[v17];
      v20 = (char *)(((unint64_t)&v19[(a1[6] + v17) + 1] + 3) & 0xFFFFFFFFFFFFFFF8);
      v21 = &v19[v17];
      v28 = v32;
      do
      {
        v22 = *v14;
        v34 = v36;
        v35 = 0x800000000;
        if (*((_DWORD *)v14 + 4))
        {
          sub_22F252404((uint64_t)&v34, (uint64_t)(v14 + 1));
          v23 = v35;
          v24 = (const void **)v34;
          *v18 = v22;
          *v19 = v23;
          v25 = &v24[2 * v23];
          if ((_DWORD)v23)
          {
            do
            {
              v26 = *v24;
              v27 = v24[1];
              v16 += (int)v27;
              *v21++ = v16;
              if (v27)
                memmove(v20, v26, 16 * (_QWORD)v27);
              v20 += 16 * (_QWORD)v27;
              v24 += 2;
            }
            while (v24 != v25);
            v24 = (const void **)v34;
          }
          if (v24 != v36)
            free(v24);
          v13 = v28;
        }
        else
        {
          *v18 = v22;
          *v19 = 0;
        }
        ++v19;
        ++v18;
        v14 += 19;
      }
      while (v14 != v13);
    }
  }
  return sub_22F3EF69C((uint64_t)v29);
}

_DWORD *sub_22F0C23E0(uint64_t a1, int *a2, const void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, void *a9, uint64_t a10, const void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  int v28;
  _DWORD *v29;
  __int128 v32;
  uint64_t v33;
  __int128 v34;

  LODWORD(v34) = a4;
  v24 = sub_22F0C1F54(a5, a6);
  *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(a8, v24);
  v25 = 0;
  if (a8)
  {
    v26 = 144 * a8;
    v27 = (int *)(a7 + 1);
    do
    {
      v28 = *v27;
      v27 += 36;
      v25 += v28;
      v26 -= 144;
    }
    while (v26);
  }
  HIDWORD(v34) = v25;
  v29 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, ((8 * ((2 * a4) + (unint64_t)v24) + 4 * (v24 + a8) + 7) & 0x1FFFFFFFF8)+ 16 * v25+ 104, 3);
  v32 = *(_OWORD *)a17;
  v33 = *(_QWORD *)(a17 + 16);
  sub_22F0C48B4((uint64_t)v29, a11, a12, a13, a14, a15, a16, &v32, a2, &v34);
  if (a4)
    memmove(v29 + 26, a3, 8 * a4);
  if (a10)
    memmove(&v29[2 * v29[4] + 26], a9, 8 * a10);
  sub_22F0C255C(v29, a5, a6, a7);
  return v29;
}

uint64_t sub_22F0C255C(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  const void *v26;
  const void *v27;
  uint64_t *v28;
  _QWORD v29[2];
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[18];

  v36[16] = *MEMORY[0x24BDAC8D0];
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = sub_22F3EF4A4((uint64_t)v29, a2);
      v9 = *a4;
      v10 = *((unsigned int *)a4 + 2);
      v11 = *(unsigned int *)(v8 + 8);
      if (v11 >= *(unsigned int *)(v8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(v8 + 8);
      }
      v12 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
      *v12 = v9;
      v12[1] = v10;
      ++*(_DWORD *)(v8 + 8);
      ++a2;
      a4 += 18;
      v7 -= 8;
    }
    while (v7);
    v14 = v31;
    v13 = v32;
    if (v31 != v32)
    {
      v16 = 0;
      v17 = a1[5];
      v18 = &a1[4 * a1[4] + 26];
      v19 = &v18[v17];
      v20 = (char *)(((unint64_t)&v19[(a1[6] + v17) + 1] + 3) & 0xFFFFFFFFFFFFFFF8);
      v21 = &v19[v17];
      v28 = v32;
      do
      {
        v22 = *v14;
        v34 = v36;
        v35 = 0x800000000;
        if (*((_DWORD *)v14 + 4))
        {
          sub_22F252404((uint64_t)&v34, (uint64_t)(v14 + 1));
          v23 = v35;
          v24 = (const void **)v34;
          *v18 = v22;
          *v19 = v23;
          v25 = &v24[2 * v23];
          if ((_DWORD)v23)
          {
            do
            {
              v26 = *v24;
              v27 = v24[1];
              v16 += (int)v27;
              *v21++ = v16;
              if (v27)
                memmove(v20, v26, 16 * (_QWORD)v27);
              v20 += 16 * (_QWORD)v27;
              v24 += 2;
            }
            while (v24 != v25);
            v24 = (const void **)v34;
          }
          if (v24 != v36)
            free(v24);
          v13 = v28;
        }
        else
        {
          *v18 = v22;
          *v19 = 0;
        }
        ++v19;
        ++v18;
        v14 += 19;
      }
      while (v14 != v13);
    }
  }
  return sub_22F3EF69C((uint64_t)v29);
}

_DWORD *sub_22F0C2758(uint64_t a1, int *a2, const void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, void *a9, uint64_t a10, const void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  int v28;
  _DWORD *v29;
  __int128 v32;
  uint64_t v33;
  __int128 v34;

  LODWORD(v34) = a4;
  v24 = sub_22F0C1F54(a5, a6);
  *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(a8, v24);
  v25 = 0;
  if (a8)
  {
    v26 = 144 * a8;
    v27 = (int *)(a7 + 1);
    do
    {
      v28 = *v27;
      v27 += 36;
      v25 += v28;
      v26 -= 144;
    }
    while (v26);
  }
  HIDWORD(v34) = v25;
  v29 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, ((8 * ((2 * a4) + (unint64_t)v24) + 4 * (v24 + a8) + 7) & 0x1FFFFFFFF8)+ 16 * v25+ 104, 3);
  v32 = *(_OWORD *)a17;
  v33 = *(_QWORD *)(a17 + 16);
  sub_22F0C4980((uint64_t)v29, a11, a12, a13, a14, a15, a16, &v32, a2, &v34);
  if (a4)
    memmove(v29 + 26, a3, 8 * a4);
  if (a10)
    memmove(&v29[2 * v29[4] + 26], a9, 8 * a10);
  sub_22F0C255C(v29, a5, a6, a7);
  return v29;
}

uint64_t sub_22F0C28D4(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  const void *v26;
  const void *v27;
  uint64_t *v28;
  _QWORD v29[2];
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[18];

  v36[16] = *MEMORY[0x24BDAC8D0];
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = sub_22F3EF4A4((uint64_t)v29, a2);
      v9 = *a4;
      v10 = *((unsigned int *)a4 + 2);
      v11 = *(unsigned int *)(v8 + 8);
      if (v11 >= *(unsigned int *)(v8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(v8 + 8);
      }
      v12 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
      *v12 = v9;
      v12[1] = v10;
      ++*(_DWORD *)(v8 + 8);
      ++a2;
      a4 += 18;
      v7 -= 8;
    }
    while (v7);
    v14 = v31;
    v13 = v32;
    if (v31 != v32)
    {
      v16 = 0;
      v17 = a1[5];
      v18 = &a1[6 * a1[4] + 20];
      v19 = &v18[v17];
      v20 = (char *)(((unint64_t)&v19[(a1[6] + v17) + 1] + 3) & 0xFFFFFFFFFFFFFFF8);
      v21 = &v19[v17];
      v28 = v32;
      do
      {
        v22 = *v14;
        v34 = v36;
        v35 = 0x800000000;
        if (*((_DWORD *)v14 + 4))
        {
          sub_22F252404((uint64_t)&v34, (uint64_t)(v14 + 1));
          v23 = v35;
          v24 = (const void **)v34;
          *v18 = v22;
          *v19 = v23;
          v25 = &v24[2 * v23];
          if ((_DWORD)v23)
          {
            do
            {
              v26 = *v24;
              v27 = v24[1];
              v16 += (int)v27;
              *v21++ = v16;
              if (v27)
                memmove(v20, v26, 16 * (_QWORD)v27);
              v20 += 16 * (_QWORD)v27;
              v24 += 2;
            }
            while (v24 != v25);
            v24 = (const void **)v34;
          }
          if (v24 != v36)
            free(v24);
          v13 = v28;
        }
        else
        {
          *v18 = v22;
          *v19 = 0;
        }
        ++v19;
        ++v18;
        v14 += 19;
      }
      while (v14 != v13);
    }
  }
  return sub_22F3EF69C((uint64_t)v29);
}

uint64_t sub_22F0C2AD0(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  char *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  const void *v26;
  const void *v27;
  uint64_t *v28;
  _QWORD v29[2];
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[18];

  v36[16] = *MEMORY[0x24BDAC8D0];
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = sub_22F3EF4A4((uint64_t)v29, a2);
      v9 = *a4;
      v10 = *((unsigned int *)a4 + 2);
      v11 = *(unsigned int *)(v8 + 8);
      if (v11 >= *(unsigned int *)(v8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(v8 + 8);
      }
      v12 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
      *v12 = v9;
      v12[1] = v10;
      ++*(_DWORD *)(v8 + 8);
      ++a2;
      a4 += 18;
      v7 -= 8;
    }
    while (v7);
    v14 = v31;
    v13 = v32;
    if (v31 != v32)
    {
      v16 = 0;
      v17 = a1[5];
      v18 = &a1[2 * a1[4] + 20];
      v19 = &v18[2 * v17];
      v20 = (char *)(((unint64_t)&v19[a1[6] + 1 + v17] + 3) & 0xFFFFFFFFFFFFFFF8);
      v21 = &v19[v17];
      v28 = v32;
      do
      {
        v22 = *v14;
        v34 = v36;
        v35 = 0x800000000;
        if (*((_DWORD *)v14 + 4))
        {
          sub_22F252404((uint64_t)&v34, (uint64_t)(v14 + 1));
          v23 = v35;
          v24 = (const void **)v34;
          *(_QWORD *)v18 = v22;
          *v19 = v23;
          v25 = &v24[2 * v23];
          if ((_DWORD)v23)
          {
            do
            {
              v26 = *v24;
              v27 = v24[1];
              v16 += v27;
              *v21++ = v16;
              if (v27)
                memmove(v20, v26, 16 * (_QWORD)v27);
              v20 += 16 * (_QWORD)v27;
              v24 += 2;
            }
            while (v24 != v25);
            v24 = (const void **)v34;
          }
          if (v24 != v36)
            free(v24);
          v13 = v28;
        }
        else
        {
          *(_QWORD *)v18 = v22;
          *v19 = 0;
        }
        ++v19;
        v18 += 2;
        v14 += 19;
      }
      while (v14 != v13);
    }
  }
  return sub_22F3EF69C((uint64_t)v29);
}

uint64_t sub_22F0C2CC8(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  char v10;
  char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = 0;
    v7 = a2 + 40;
    v8 = 8 * v3;
    do
    {
      v9 = *(llvm::raw_ostream **)v5;
      if (v6)
        v10 = 44;
      else
        v10 = a3;
      v11 = (char *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = v10;
      }
      v12 = *(unsigned __int8 **)(v7 + v6);
      if (*v12 == 161)
      {
        v13 = *((_QWORD *)v12 + 2);
        v14 = *(llvm::raw_ostream **)v5;
        if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x3F)
        {
          v17 = sub_22EFC72E8(*((_QWORD *)v12 + 2));
          result = sub_22EFBA008(v13, v14, v17 + 15104);
          goto LABEL_15;
        }
        v15 = *(_QWORD *)(v5 + 8);
        v16 = *(llvm::raw_ostream **)v5;
      }
      else
      {
        v16 = *(llvm::raw_ostream **)v5;
        v15 = *(_QWORD *)(v5 + 8);
      }
      result = sub_22F0D9044((int)v12, (int)v16, 0, v15, 0, "\n", 1uLL);
LABEL_15:
      v6 += 8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t sub_22F0C2DD4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 24;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 40;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C2EDC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 40;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 40;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C2FE4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  char v10;
  char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = 0;
    v7 = a2 + 64;
    v8 = 8 * v3;
    do
    {
      v9 = *(llvm::raw_ostream **)v5;
      if (v6)
        v10 = 44;
      else
        v10 = a3;
      v11 = (char *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = v10;
      }
      v12 = *(unsigned __int8 **)(v7 + v6);
      if (*v12 == 161)
      {
        v13 = *((_QWORD *)v12 + 2);
        v14 = *(llvm::raw_ostream **)v5;
        if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x3F)
        {
          v17 = sub_22EFC72E8(*((_QWORD *)v12 + 2));
          result = sub_22EFBA008(v13, v14, v17 + 15104);
          goto LABEL_15;
        }
        v15 = *(_QWORD *)(v5 + 8);
        v16 = *(llvm::raw_ostream **)v5;
      }
      else
      {
        v16 = *(llvm::raw_ostream **)v5;
        v15 = *(_QWORD *)(v5 + 8);
      }
      result = sub_22F0D9044((int)v12, (int)v16, 0, v15, 0, "\n", 1uLL);
LABEL_15:
      v6 += 8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t sub_22F0C30F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 104;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 32;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C31F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 96;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 32;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C3300(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 64;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 40;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C3408(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 40;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 32;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C3510(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 136;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 32;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C3618(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 80;
    v6 = 8 * v2;
    do
    {
      v7 = *(llvm::raw_ostream **)v3;
      if (v4)
        v8 = 44;
      else
        v8 = 40;
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = *(unsigned __int8 **)(v5 + v4);
      if (*v10 == 161)
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *(llvm::raw_ostream **)v3;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x3F)
        {
          v15 = sub_22EFC72E8(*((_QWORD *)v10 + 2));
          result = sub_22EFBA008(v11, v12, v15 + 15104);
          goto LABEL_15;
        }
        v13 = *(_QWORD *)(v3 + 8);
        v14 = *(llvm::raw_ostream **)v3;
      }
      else
      {
        v14 = *(llvm::raw_ostream **)v3;
        v13 = *(_QWORD *)(v3 + 8);
      }
      result = sub_22F0D9044((int)v10, (int)v14, 0, v13, 0, "\n", 1uLL);
LABEL_15:
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_22F0C3720(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  char v10;
  char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = 0;
    v7 = a2 + 24;
    v8 = 8 * v3;
    do
    {
      v9 = *(llvm::raw_ostream **)v5;
      if (v6)
        v10 = 44;
      else
        v10 = a3;
      v11 = (char *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = v10;
      }
      v12 = *(unsigned __int8 **)(v7 + v6);
      if (*v12 == 161)
      {
        v13 = *((_QWORD *)v12 + 2);
        v14 = *(llvm::raw_ostream **)v5;
        if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x3F)
        {
          v17 = sub_22EFC72E8(*((_QWORD *)v12 + 2));
          result = sub_22EFBA008(v13, v14, v17 + 15104);
          goto LABEL_15;
        }
        v15 = *(_QWORD *)(v5 + 8);
        v16 = *(llvm::raw_ostream **)v5;
      }
      else
      {
        v16 = *(llvm::raw_ostream **)v5;
        v15 = *(_QWORD *)(v5 + 8);
      }
      result = sub_22F0D9044((int)v12, (int)v16, 0, v15, 0, "\n", 1uLL);
LABEL_15:
      v6 += 8;
    }
    while (v8 != v6);
  }
  return result;
}

_DWORD *sub_22F0C382C(_DWORD *result, uint64_t a2, _DWORD *a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  const llvm::APInt *v13;
  unsigned int v14;
  int OpenMPContextTraitSetForProperty;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  char v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned __int8 v27;

  v3 = result[2];
  if (v3)
  {
    v6 = *(_QWORD *)result;
    v21 = *(_QWORD *)result + 136 * v3;
    while (1)
    {
      v7 = *(_DWORD *)(v6 + 16);
      if (v7)
        break;
LABEL_35:
      v6 += 136;
      if (v6 == v21)
        return result;
    }
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 + 56 * v7;
    while (*(_DWORD *)(v8 + 8) == 10)
    {
      sub_22F00905C(*(_QWORD *)v8, a2, 0, (uint64_t)&v25);
      if (v27)
      {
        v10 = v26;
        if (v26 > 0x40)
          v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v25) == v10;
        else
          v11 = v25 == 0;
        if (v11)
          v14 = 46;
        else
          v14 = 45;
      }
      else
      {
        v14 = 46;
      }
      OpenMPContextTraitSetForProperty = llvm::omp::getOpenMPContextTraitSetForProperty();
      result = sub_22F0C3A58(a3, OpenMPContextTraitSetForProperty, v14, (uint64_t)"<condition>", 11, 0);
LABEL_30:
      if (v27 && v26 >= 0x41)
      {
        result = v25;
        if (v25)
          result = (_DWORD *)MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
      }
      v8 += 56;
      if (v8 == v9)
        goto LABEL_35;
    }
    LOBYTE(v25) = 0;
    v27 = 0;
    result = *(_DWORD **)v8;
    if (*(_QWORD *)v8)
    {
      sub_22F00905C((uint64_t)result, a2, 0, (uint64_t)&v22);
      result = (_DWORD *)sub_22E54C490((uint64_t)&v25, (uint64_t)&v22);
      v12 = v27;
      if (v24)
      {
        if (v23 >= 0x41)
        {
          result = v22;
          if (v22)
            result = (_DWORD *)MEMORY[0x2348A0E84](v22, 0x1000C8000313F17);
        }
      }
      if (v12)
      {
        v13 = (const llvm::APInt *)&v25;
        goto LABEL_27;
      }
      v17 = llvm::omp::getOpenMPContextTraitSetForProperty();
      result = sub_22F0C3A58(a3, v17, 0x2Eu, (uint64_t)"<non-constant-score>", 20, 0);
    }
    v13 = 0;
LABEL_27:
    v18 = *(_DWORD *)(v8 + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v8 + 16);
      v20 = v19 + 24 * v18;
      do
      {
        result = sub_22F0C3A58(a3, *(_DWORD *)v6, *(_DWORD *)v19, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), v13);
        v19 += 24;
      }
      while (v19 != v20);
    }
    goto LABEL_30;
  }
  return result;
}

_DWORD *sub_22F0C3A58(_DWORD *result, int a2, unsigned int a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  _DWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v15;

  v10 = result;
  v15 = a3;
  if (a6)
  {
    result = sub_22F3EF1D4(result + 66, (int *)&v15);
    if (result[4] > 0x40u || *((_DWORD *)a6 + 2) > 0x40u)
    {
      result = (_DWORD *)llvm::APInt::assignSlowCase((llvm::APInt *)(result + 2), a6);
    }
    else
    {
      *((_QWORD *)result + 1) = *(_QWORD *)a6;
      result[4] = *((_DWORD *)a6 + 2);
    }
  }
  if (a3 == 49)
  {
    v11 = v10[20];
    if (v11 >= v10[21])
    {
      result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v10[20];
    }
    v12 = (_QWORD *)(*((_QWORD *)v10 + 9) + 16 * v11);
    *v12 = a4;
    v12[1] = a5;
    ++v10[20];
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * (a3 >> 6)) |= 1 << a3;
  if (a2 == 1)
  {
    v13 = v10[56];
    if (v13 >= v10[57])
    {
      result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v10[56];
    }
    *(_DWORD *)(*((_QWORD *)v10 + 27) + 4 * v13) = a3;
    ++v10[56];
  }
  return result;
}

_DWORD *sub_22F0C3B98(_DWORD *result, llvm::raw_ostream *this)
{
  unsigned int v2;
  uint64_t v4;
  char v5;
  _WORD *v6;
  size_t v7;
  const void *OpenMPContextTraitSetName;
  size_t v9;
  llvm::raw_ostream *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _WORD *v15;
  size_t v16;
  const void *OpenMPContextTraitSelectorName;
  size_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;

  v2 = result[2];
  if (v2)
  {
    v4 = *(_QWORD *)result;
    v21 = *(_QWORD *)result + 136 * v2;
    v5 = 1;
    do
    {
      if ((v5 & 1) == 0)
      {
        v6 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v6 > 1uLL)
        {
          *v6 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ");
        }
      }
      OpenMPContextTraitSetName = (const void *)llvm::omp::getOpenMPContextTraitSetName();
      v9 = v7;
      result = (_DWORD *)*((_QWORD *)this + 4);
      if (v7 <= *((_QWORD *)this + 3) - (_QWORD)result)
      {
        if (v7)
        {
          memcpy(result, OpenMPContextTraitSetName, v7);
          result = (_DWORD *)(*((_QWORD *)this + 4) + v9);
          *((_QWORD *)this + 4) = result;
        }
        v10 = this;
      }
      else
      {
        v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, (const char *)OpenMPContextTraitSetName);
        result = (_DWORD *)*((_QWORD *)v10 + 4);
      }
      if (*((_QWORD *)v10 + 3) - (_QWORD)result > 1uLL)
      {
        *(_WORD *)result = 31549;
        *((_QWORD *)v10 + 4) += 2;
      }
      else
      {
        result = (_DWORD *)llvm::raw_ostream::write(v10, "={");
      }
      v11 = *(_DWORD *)(v4 + 16);
      if (v11)
      {
        v12 = *(_QWORD *)(v4 + 8);
        v13 = v12 + 56 * v11;
        v14 = 1;
        do
        {
          if ((v14 & 1) == 0)
          {
            v15 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v15 > 1uLL)
            {
              *v15 = 8236;
              *((_QWORD *)this + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ", ");
            }
          }
          OpenMPContextTraitSelectorName = (const void *)llvm::omp::getOpenMPContextTraitSelectorName();
          v18 = v16;
          v19 = (void *)*((_QWORD *)this + 4);
          if (v16 <= *((_QWORD *)this + 3) - (_QWORD)v19)
          {
            if (v16)
            {
              memcpy(v19, OpenMPContextTraitSelectorName, v16);
              *((_QWORD *)this + 4) += v18;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, (const char *)OpenMPContextTraitSelectorName);
          }
          result = (_DWORD *)llvm::omp::isValidTraitSelectorForTraitSet();
          v14 = 0;
          v12 += 56;
        }
        while (v12 != v13);
      }
      v20 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v20)
      {
        result = (_DWORD *)llvm::raw_ostream::write(this, "}");
      }
      else
      {
        *v20 = 125;
        ++*((_QWORD *)this + 4);
      }
      v5 = 0;
      v4 += 136;
    }
    while (v4 != v21);
  }
  return result;
}

void sub_22F0C4068(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t *v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = MEMORY[0x24BED83D8] + 16;
  v23 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = *a1;
    v14 = *a1 + 136 * v3;
    do
    {
      v5 = v19;
      if ((unint64_t)v19 >= v18)
      {
        v6 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v15);
      }
      else
      {
        ++v19;
        *v5 = 36;
        v6 = &v15;
      }
      v7 = (_BYTE *)v6[4];
      if ((unint64_t)v7 >= v6[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v6);
      }
      else
      {
        v6[4] = (uint64_t)(v7 + 1);
        *v7 = 83;
      }
      llvm::raw_ostream::operator<<();
      v8 = *(_DWORD *)(v4 + 16);
      if (v8)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 56 * v8;
        do
        {
          llvm::omp::isValidTraitSelectorForTraitSet();
          v11 = v19;
          if ((unint64_t)v19 >= v18)
          {
            v12 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v15);
          }
          else
          {
            ++v19;
            *v11 = 36;
            v12 = &v15;
          }
          v13 = (_BYTE *)v12[4];
          if ((unint64_t)v13 >= v12[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v12);
          }
          else
          {
            v12[4] = (uint64_t)(v13 + 1);
            *v13 = 115;
          }
          llvm::raw_ostream::operator<<();
          v9 += 56;
        }
        while (v9 != v10);
      }
      v4 += 136;
    }
    while (v4 != v14);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
}

_QWORD *sub_22F0C4304(_QWORD *a1, _WORD *a2, unint64_t a3)
{
  int v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  void *v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  if (a3 >= 2)
  {
    do
    {
      if (*a2 != 21284)
        break;
      ++a2;
      v24 = a3 - 2;
      *(_QWORD *)&v27 = 0;
      if ((llvm::consumeUnsignedInteger() & 1) != 0)
        break;
      v5 = v27;
      *(_QWORD *)&v27 = 0;
      *(_OWORD *)v28 = 0u;
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      *((_QWORD *)&v27 + 1) = &v28[1];
      HIDWORD(v28[0]) = 2;
      sub_22F3EEE5C((uint64_t)a1, (unint64_t)&v27);
      sub_22F2BF8FC((char **)&v27 + 1);
      v6 = *a1 + 136 * *((unsigned int *)a1 + 2);
      *(_DWORD *)(v6 - 136) = v5;
      a3 = v24;
      if (v24 < 2)
        break;
      v7 = a2;
      if (*a2 == 29476)
      {
        v8 = v6 - 128;
        while (1)
        {
          a2 = v7 + 1;
          v25 = a3 - 2;
          *(_QWORD *)&v27 = 0;
          if (llvm::consumeUnsignedInteger())
            break;
          v9 = v27;
          *(_QWORD *)&v30 = 0;
          v28[1] = (void *)0x100000000;
          v29 = 0u;
          v27 = 0u;
          v28[0] = &v29;
          v21 = v8;
          sub_22F3EEECC(v8, (unint64_t)&v27);
          if (v28[0] != &v29)
            free(v28[0]);
          v10 = *(_QWORD *)(v6 - 128) + 56 * *(unsigned int *)(v6 - 120);
          *(_DWORD *)(v10 - 48) = v9;
          a3 = v25;
          if (v25 < 2)
            return a1;
          v7 = a2;
          while (*v7 == 20516)
          {
            v23 = v7 + 1;
            v26 = a3 - 2;
            v27 = 0uLL;
            v28[0] = 0;
            v11 = sub_22E4EF088(v10 - 40, (unint64_t)&v27, 1);
            v12 = *(_QWORD *)(v10 - 40) + 24 * *(unsigned int *)(v10 - 32);
            v13 = *(_OWORD *)v11;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
            *(_OWORD *)v12 = v13;
            LODWORD(v12) = *(_DWORD *)(v10 - 32) + 1;
            *(_DWORD *)(v10 - 32) = v12;
            v14 = *(_QWORD *)(v10 - 40);
            v15 = v12;
            LOBYTE(v27) = 36;
            v16 = llvm::StringRef::find();
            if (v16 == -1)
            {
              v17 = v23;
              v18 = v26;
            }
            else
            {
              v17 = v23;
              if (v26 >= v16)
                v18 = v16;
              else
                v18 = v26;
            }
            v19 = v14 + 24 * v15;
            *(_QWORD *)(v19 - 16) = v17;
            *(_QWORD *)(v19 - 8) = v18;
            *(_DWORD *)(v19 - 24) = llvm::omp::getOpenMPContextTraitPropertyKind();
            if (v26 >= v18)
              v20 = v18;
            else
              v20 = v26;
            v7 = (_WORD *)((char *)v23 + v20);
            a3 = v26 - v20;
            a2 = (_WORD *)((char *)v23 + v20);
            if (v26 - v20 < 2)
              return a1;
          }
          v8 = v21;
          if (*v7 != 29476)
            goto LABEL_27;
        }
        a3 = v25;
      }
LABEL_27:
      ;
    }
    while (a3 > 1);
  }
  return a1;
}

uint64_t sub_22F0C45F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int OpenMPContextTraitSetForProperty;
  unint64_t v17;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v12 = *(_QWORD *)(a2 + 15088);
  if (*(char *)(v12 + 55) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v12 + 32), *(_QWORD *)(v12 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v12 + 32);
    v20 = *(_QWORD *)(v12 + 48);
  }
  v21 = *(_OWORD *)(v12 + 56);
  v22 = *(_QWORD *)(v12 + 72);
  llvm::omp::OMPContext::OMPContext();
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &off_24FAC6A48;
  *(_QWORD *)(a1 + 128) = &off_24FAC6A70;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 152) = a1 + 128;
  v13 = *(_QWORD *)(a3 + 24);
  if (v13)
  {
    if (v13 == a3)
    {
      *(_QWORD *)(a1 + 184) = a1 + 160;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 184) = v13;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x1000000000;
  sub_22F36FB08(a2, (uint64_t *)(a1 + 192), a4);
  if (a6)
  {
    v14 = 4 * a6;
    do
    {
      v15 = *a5;
      OpenMPContextTraitSetForProperty = llvm::omp::getOpenMPContextTraitSetForProperty();
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
      if (OpenMPContextTraitSetForProperty == 1)
      {
        v17 = *(unsigned int *)(a1 + 88);
        if (v17 >= *(unsigned int *)(a1 + 92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = *(unsigned int *)(a1 + 88);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v17) = v15;
        ++*(_DWORD *)(a1 + 88);
      }
      ++a5;
      v14 -= 4;
    }
    while (v14);
  }
  return a1;
}

uint64_t sub_22F0C47C0(uint64_t a1, const void *a2, uint64_t a3, void *__src, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, int a9, char a10, uint64_t a11, int *a12, __int128 *a13)
{
  int v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;

  v16 = *a12;
  v17 = a12[1];
  v18 = a12[2];
  *(_DWORD *)(a1 + 8) = 46;
  v19 = *a13;
  *(_DWORD *)a1 = v16;
  *(_DWORD *)(a1 + 4) = v18;
  *(_DWORD *)(a1 + 12) = v17;
  DWORD1(v19) = *((_DWORD *)a13 + 1);
  *((_QWORD *)&v19 + 1) = *((_QWORD *)a13 + 1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  if (a8)
  {
    v20 = *a8;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 56) = v20;
  }
  *(_QWORD *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_22F4A6D94;
  *(_DWORD *)(a1 + 96) = 6;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = a9;
  *(_BYTE *)(a1 + 124) = a10;
  *(_QWORD *)(a1 + 128) = a11;
  if (a3)
    memmove((void *)(a1 + 80), a2, 4 * a3);
  if (a5)
    memmove((void *)(a1 + 100), __src, 4 * a5);
  return a1;
}

uint64_t sub_22F0C48B4(uint64_t a1, const void *a2, uint64_t a3, void *__src, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, int *a9, __int128 *a10)
{
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  void *v18;

  v13 = *a9;
  v14 = a9[1];
  v15 = a9[2];
  *(_DWORD *)(a1 + 8) = 81;
  v16 = *a10;
  *(_DWORD *)a1 = v13;
  *(_DWORD *)(a1 + 4) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  DWORD1(v16) = *((_DWORD *)a10 + 1);
  *((_QWORD *)&v16 + 1) = *((_QWORD *)a10 + 1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  if (a8)
  {
    v17 = *a8;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 56) = v17;
  }
  *(_QWORD *)(a1 + 80) = 0x200000002;
  v18 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  if (a3)
    memmove(v18, a2, 4 * a3);
  if (a5)
    memmove((void *)(a1 + 88), __src, 4 * a5);
  return a1;
}

uint64_t sub_22F0C4980(uint64_t a1, const void *a2, uint64_t a3, void *__src, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, int *a9, __int128 *a10)
{
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  void *v18;

  v13 = *a9;
  v14 = a9[1];
  v15 = a9[2];
  *(_DWORD *)(a1 + 8) = 31;
  v16 = *a10;
  *(_DWORD *)a1 = v13;
  *(_DWORD *)(a1 + 4) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  DWORD1(v16) = *((_DWORD *)a10 + 1);
  *((_QWORD *)&v16 + 1) = *((_QWORD *)a10 + 1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  if (a8)
  {
    v17 = *a8;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 56) = v17;
  }
  *(_QWORD *)(a1 + 80) = 0x200000002;
  v18 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  if (a3)
    memmove(v18, a2, 4 * a3);
  if (a5)
    memmove((void *)(a1 + 88), __src, 4 * a5);
  return a1;
}

uint64_t sub_22F0C4A4C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[96];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v16;
    do
    {
      v10 = a1 + v8;
      v11 = *(_DWORD *)(a1 + v8 + 8);
      if (v11 <= 0xFFFFFFFD)
      {
        *(_DWORD *)v9 = v11;
        *((_DWORD *)v9 + 4) = *(_DWORD *)(v10 + 24);
        *((_QWORD *)v9 + 1) = *(_QWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 24) = 0;
        v9 += 24;
      }
      v8 += 24;
    }
    while (v8 != 96);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v12 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v12;
    }
    return sub_22F3EF3A8(a1, (uint64_t)v16, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v15 = 3 * v7;
    sub_22F3EF3A8(a1, (uint64_t)v6, (uint64_t)v6 + 8 * v15);
    return llvm::deallocate_buffer(v6, (void *)(8 * v15));
  }
}

void sub_22F0C4BE8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286)
      abort();
    v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0xD79435E50D7943)
      v10 = 0x1AF286BCA1AF286;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x1AF286BCA1AF286)
      sub_22E3B3F8C();
    v11 = 152 * v10;
    v12 = (char *)operator new(152 * v10);
    v13 = &v12[152 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_22F2528D0((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 152;
    sub_22F3EF5C8(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 152)
    {
      v16 = (char *)*((_QWORD *)i - 18);
      if (i - 128 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_22F2528D0((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 19;
  }
  a1[1] = (uint64_t)v6;
}

void sub_22F0C4D90(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 18);
        if (v4 - 128 != v6)
          free(v6);
        v4 -= 152;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22F0C4E0C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  char v10;
  char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = a2 + 104;
    v8 = 8 * v3;
    do
    {
      v9 = *(llvm::raw_ostream **)a1;
      if (v6)
        v10 = 44;
      else
        v10 = a3;
      v11 = (char *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = v10;
      }
      v12 = *(unsigned __int8 **)(v7 + v6);
      if (*v12 == 161)
      {
        v13 = *((_QWORD *)v12 + 2);
        v14 = *(llvm::raw_ostream **)a1;
        if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x3F)
        {
          v17 = sub_22EFC72E8(*((_QWORD *)v12 + 2));
          sub_22EFBA008((_QWORD *)v13, v14, v17 + 15104);
          goto LABEL_15;
        }
        v15 = *(__int128 **)(a1 + 8);
        v16 = *(_QWORD *)a1;
      }
      else
      {
        v16 = *(_QWORD *)a1;
        v15 = *(__int128 **)(a1 + 8);
      }
      sub_22F0D9044(v12, v16, 0, v15, 0, "\n", 1uLL, 0);
LABEL_15:
      v6 += 8;
    }
    while (v8 != v6);
  }
}

void sub_22F0C4F1C()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F0C4F30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FAC6A70;
  result[1] = v3;
  return result;
}

uint64_t sub_22F0C4F64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FAC6A70;
  a2[1] = v2;
  return result;
}

uint64_t sub_22F0C4F80(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) + 536))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088), *a2, a2[1]);
}

_QWORD *sub_22F0C4F9C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAC6AB8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_22F0C4FDC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAC6AB8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F0C502C(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  _QWORD *v6;
  unsigned int v7;
  _OWORD *v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  _OWORD v38[6];

  v2 = *(_DWORD *)(a2 + 64);
  if (v2)
    v3 = v2 == 22;
  else
    v3 = 1;
  if (v3)
    return 1;
  v6 = (_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 >= *(_DWORD *)(a1 + 20))
  {
    memset(v38, 0, sizeof(v38));
    v29 = *v6 + 96 * (unint64_t)v7 > (unint64_t)v38;
    if (*v6 <= (unint64_t)v38 && v29)
    {
      v37 = (char *)v38 - *v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v30 = *(_QWORD *)(a1 + 8);
      v31 = &v37[v30];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v30 = *(_QWORD *)(a1 + 8);
      v31 = (char *)v38;
    }
    v32 = (_OWORD *)(v30 + 96 * *(unsigned int *)(a1 + 16));
    v33 = *((_OWORD *)v31 + 1);
    *v32 = *(_OWORD *)v31;
    v32[1] = v33;
    v34 = *((_OWORD *)v31 + 2);
    v35 = *((_OWORD *)v31 + 3);
    v36 = *((_OWORD *)v31 + 5);
    v32[4] = *((_OWORD *)v31 + 4);
    v32[5] = v36;
    v32[2] = v34;
    v32[3] = v35;
  }
  else
  {
    v8 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 96 * v7);
    v8[4] = 0u;
    v8[5] = 0u;
    v8[2] = 0u;
    v8[3] = 0u;
    *v8 = 0u;
    v8[1] = 0u;
  }
  v9 = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v9;
  v10 = *(unsigned int *)(a2 + 100);
  if (*(_QWORD *)(a1 + 416) > v10)
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96 * v9 - 96) = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v10);
  v11 = *(_DWORD *)(a2 + 64);
  switch(v11)
  {
    case 24:
      v12 = 5;
      break;
    case 25:
      v12 = 3;
      break;
    case 26:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_13;
    case 27:
      v12 = 4;
      break;
    case 32:
      v12 = 6;
      break;
    default:
      if (v11 == 19)
        v12 = 2;
      else
LABEL_13:
        v12 = 0;
      break;
  }
  v13 = *v6 + 96 * v9;
  if (!*(_BYTE *)(v13 - 84))
    *(_BYTE *)(v13 - 84) = 1;
  *(_DWORD *)(v13 - 88) = v12;
  v14 = *(_DWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 8) + 96 * v14;
  if (*(_BYTE *)(v15 - 84))
    v16 = *(_DWORD *)(v15 - 88) == 6;
  else
    v16 = 0;
  if (!v16 && !*(_QWORD *)(v15 - 96))
  {
    result = 0;
    *(_DWORD *)(a1 + 16) = v14 - 1;
    return result;
  }
  v17 = *(_DWORD *)(a2 + 64);
  if (v17 == 19)
    goto LABEL_27;
  if (v17 != 25)
  {
    if (v17 != 24)
    {
      if (*(_DWORD *)(a2 + 356) == 2)
      {
        v21 = *(unsigned __int8 *)(v15 - 48);
        *(_QWORD *)(v15 - 56) = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * *(unsigned int *)(a2 + 360));
        if (!v21)
          *(_BYTE *)(v15 - 48) = 1;
      }
      goto LABEL_40;
    }
LABEL_27:
    v18 = *(_DWORD *)(a2 + 356);
    switch(v18)
    {
      case 3:
        return 0;
      case 2:
LABEL_38:
        v22 = *(unsigned __int8 *)(v15 - 64);
        *(_QWORD *)(v15 - 72) = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * *(unsigned int *)(a2 + 360));
        if (!v22)
          *(_BYTE *)(v15 - 64) = 1;
        break;
      case 1:
LABEL_32:
        v20 = *(unsigned __int8 *)(v15 - 76);
        *(_DWORD *)(v15 - 80) = *(_DWORD *)(a2 + 360);
        if (!v20)
          *(_BYTE *)(v15 - 76) = 1;
        break;
    }
LABEL_40:
    if (*(_DWORD *)(a2 + 28) == 2)
    {
      v23 = *(_QWORD *)(a1 + 8) + 96 * *(unsigned int *)(a1 + 16);
      v24 = *(unsigned __int8 *)(v23 - 32);
      *(_QWORD *)(v23 - 40) = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * *(unsigned int *)(a2 + 32));
      if (!v24)
        *(_BYTE *)(v23 - 32) = 1;
    }
    if (*(_BYTE *)(a2 + 336))
    {
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_DWORD *)(a1 + 16);
      v27 = v25 + 96 * v26;
      v28 = 5;
    }
    else if (*(_BYTE *)(a2 + 288))
    {
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_DWORD *)(a1 + 16);
      v27 = v25 + 96 * v26;
      v28 = 1;
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_DWORD *)(a1 + 16);
      if (!*(_BYTE *)(a2 + 312))
      {
LABEL_51:
        *(_OWORD *)(v25 + 96 * v26 - 16) = *(_OWORD *)(a2 + 368);
        return 1;
      }
      v27 = v25 + 96 * v26;
      v28 = 2;
    }
    *(_BYTE *)(v27 - 24) |= v28;
    goto LABEL_51;
  }
  result = 0;
  switch(*(_DWORD *)(a2 + 356))
  {
    case 0:
    case 3:
      return result;
    case 1:
      goto LABEL_32;
    case 2:
      goto LABEL_38;
    default:
      goto LABEL_40;
  }
  return result;
}

uint64_t sub_22F0C53B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v12 = a2;
  v13 = a3;
  v14 = 0;
  v15 = a4;
  v16 = a5;
  v17 = 0;
  v18 = 0;
  v6 = sub_22E47F7A8(a1, (unint64_t)&v12);
  v7 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  v8 = *(_OWORD *)v6;
  v9 = *(_OWORD *)(v6 + 16);
  v10 = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v6 + 48);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 56 * v7 - 56;
}

uint64_t sub_22F0C5430(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v12 = a2;
  v13 = a3;
  v14 = 0;
  v15 = a4;
  v16 = a5;
  v17 = 0;
  v18 = 0;
  v6 = sub_22E47F7A8(a1, (unint64_t)&v12);
  v7 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  v8 = *(_OWORD *)v6;
  v9 = *(_OWORD *)(v6 + 16);
  v10 = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v6 + 48);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 56 * v7 - 56;
}

void sub_22F0C54B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;

  if (!a2)
    return;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if (v6 <= 0xD1)
    {
      if (v6 == 102)
      {
        *(_QWORD *)&v36 = *((_QWORD *)v4 + 3);
        sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
        sub_22F0C54B4(a1, *((_QWORD *)v4 + 3), 0);
        *(_QWORD *)&v36 = *((_QWORD *)v4 + 4);
        sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
        sub_22F0C54B4(a1, *((_QWORD *)v4 + 4), 1);
        *(_QWORD *)&v36 = *((_QWORD *)v4 + 5);
        sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
        sub_22F0C54B4(a1, *((_QWORD *)v4 + 5), 1);
        v8 = (unsigned __int8 **)(v4 + 48);
        v7 = *((_QWORD *)v4 + 6);
        goto LABEL_10;
      }
      if (v6 != 7)
        goto LABEL_33;
      sub_22F0D492C((uint64_t)v4);
      v34 = v36;
      v9 = v38;
      v35 = v37;
      v10 = *((_QWORD *)&v38 + 1);
      v12 = *((_QWORD *)&v36 + 1);
      v11 = (uint64_t *)v36;
      if ((_QWORD)v36 != (_QWORD)v38 || *((_QWORD *)&v36 + 1) != *((_QWORD *)&v38 + 1))
      {
        do
        {
          v33 = 0;
          v14 = v11;
          if ((v12 & 3) != 0)
          {
            if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v14 = (uint64_t *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v14 = (uint64_t *)sub_22F3AC1A8(*v11);
          }
          v15 = *v14;
          v33 = v15;
          if (v15)
          {
            sub_22F24C2B0(a1, &v33)[1] = v4;
            sub_22F0C54B4(a1, v15, a3);
            if ((v12 & 3) != 0)
            {
LABEL_26:
              if (v12 < 4)
                sub_22F3F2FE0((uint64_t)&v34, 1);
              else
                sub_22F0D8720((uint64_t)&v34);
              goto LABEL_23;
            }
          }
          else if ((v12 & 3) != 0)
          {
            goto LABEL_26;
          }
          *(_QWORD *)&v34 = v11 + 1;
LABEL_23:
          v12 = *((_QWORD *)&v34 + 1);
          v11 = (uint64_t *)v34;
        }
        while (v34 != __PAIR128__(v10, v9));
      }
      v16 = *(_QWORD *)&v4[8 * *((unsigned int *)v4 + 2) + 32];
      *(_QWORD *)&v36 = v16;
      if (v16)
      {
        sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
        sub_22F0C54B4(a1, v16, a3);
      }
      return;
    }
    if (v6 != 210)
      break;
    if ((_DWORD)a3)
    {
      *(_QWORD *)&v36 = *((_QWORD *)v4 + 2);
      if (sub_22F24C2B0(a1, (uint64_t *)&v36)[1])
        return;
    }
    v8 = (unsigned __int8 **)(v4 + 16);
    v7 = *((_QWORD *)v4 + 2);
LABEL_10:
    *(_QWORD *)&v36 = v7;
    sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
    a3 = 0;
    v4 = *v8;
    if (!*v8)
      return;
  }
  if (v6 != 217)
  {
LABEL_33:
    sub_22F0D492C((uint64_t)v4);
    v34 = v36;
    v17 = v38;
    v35 = v37;
    v18 = *((_QWORD *)&v38 + 1);
    v20 = *((_QWORD *)&v36 + 1);
    v19 = (uint64_t *)v36;
    if ((_QWORD)v36 == (_QWORD)v38 && *((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
      return;
    while (2)
    {
      v33 = 0;
      v22 = v19;
      if ((v20 & 3) != 0)
      {
        if ((v20 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v22 = (uint64_t *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v22 = (uint64_t *)sub_22F3AC1A8(*v19);
      }
      v23 = *v22;
      v33 = v23;
      if (v23)
      {
        sub_22F24C2B0(a1, &v33)[1] = v4;
        sub_22F0C54B4(a1, v23, a3);
        if ((v20 & 3) != 0)
          goto LABEL_46;
LABEL_42:
        *(_QWORD *)&v34 = v19 + 1;
      }
      else
      {
        if ((v20 & 3) == 0)
          goto LABEL_42;
LABEL_46:
        if (v20 < 4)
          sub_22F3F2FE0((uint64_t)&v34, 1);
        else
          sub_22F0D8720((uint64_t)&v34);
      }
      v20 = *((_QWORD *)&v34 + 1);
      v19 = (uint64_t *)v34;
      if (v34 == __PAIR128__(v18, v17))
        return;
      continue;
    }
  }
  *(_QWORD *)&v36 = *((_QWORD *)v4 + 2);
  if (sub_22F24C2B0(a1, (uint64_t *)&v36)[1])
  {
    sub_22F0D492C((uint64_t)v4);
    v34 = v36;
    v24 = v38;
    v35 = v37;
    v25 = *((_QWORD *)&v38 + 1);
    v26 = *((_QWORD *)&v36 + 1);
    v27 = (uint64_t *)v36;
    if (v36 != v38)
    {
      do
      {
        v33 = 0;
        if ((v26 & 3) != 0)
        {
          if ((v26 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v28 = (uint64_t *)((v26 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v28 = (uint64_t *)sub_22F3AC1A8(*v27);
          v33 = *v28;
          sub_22F24C2B0(a1, &v33)[1] = 0;
          if (v26 >= 4)
            sub_22F0D8720((uint64_t)&v34);
          else
            sub_22F3F2FE0((uint64_t)&v34, 1);
        }
        else
        {
          v33 = *v27;
          sub_22F24C2B0(a1, &v33)[1] = 0;
          *(_QWORD *)&v34 = v27 + 1;
        }
        v26 = *((_QWORD *)&v34 + 1);
        v27 = (uint64_t *)v34;
      }
      while ((_QWORD)v34 != v24 || *((_QWORD *)&v34 + 1) != v25);
    }
  }
  *(_QWORD *)&v36 = *((_QWORD *)v4 + 2);
  sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
  sub_22F0C54B4(a1, *((_QWORD *)v4 + 2), 0);
  v30 = *(unsigned int *)v4;
  if (v4 + 24 != &v4[8 * (v30 >> 18) + 16])
  {
    v31 = 0;
    v32 = 8 * (v30 >> 18) - 8;
    do
    {
      *(_QWORD *)&v36 = *(_QWORD *)&v4[v31 + 24];
      sub_22F24C2B0(a1, (uint64_t *)&v36)[1] = v4;
      sub_22F0C54B4(a1, *(_QWORD *)&v4[v31 + 24], 1);
      v31 += 8;
    }
    while (v32 != v31);
  }
}

uint64_t sub_22F0C5938(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned __int8 *v11;
  _BYTE v13[392];
  uint64_t v14;
  char v15;
  int v16;
  unsigned __int8 *v17;

  v17 = a2;
  v16 = 0;
  if (a2 == a3)
    return 0;
  while (1)
  {
    sub_22F0C5A0C(a1, &v17, a3, &v16, a4, a5, 1, a6, (uint64_t)v13);
    if (v15)
      break;
    if (v14)
    {
      v11 = v17;
      if (!(*((unsigned int (**)(unsigned __int8 **, _BYTE *, uint64_t, _QWORD, uint64_t))*a1 + 13))(a1, v13, v14, ((_DWORD)v17 - v14), a5))return 1;
    }
    else
    {
      v11 = v17;
    }
    if (v11 == a3)
      return 0;
  }
  return 1;
}

void sub_22F0C5A0C(unsigned __int8 **a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char v17;
  unsigned __int8 *v18;
  int64_t v19;
  _OWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  _DWORD *v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  int v57;
  int v58;
  char v59;
  uint64_t v60;
  unsigned int NumBytesForUTF8;
  unsigned __int8 *v62;
  uint64_t v65;
  unsigned __int8 **v66;
  _OWORD v71[5];
  char v72[16];
  _QWORD __src[49];
  unsigned __int8 *v74;
  _BYTE v75[44];
  uint64_t v76;

  v9 = a3;
  v10 = a2;
  v76 = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  if (*a2 == a3)
  {
LABEL_6:
    sub_22F3F0654(a9);
    *(_QWORD *)(a9 + 392) = 0;
    *(_BYTE *)(a9 + 400) = 0;
    goto LABEL_182;
  }
  v14 = 0;
  while (v12[v14] != 37)
  {
    if (!v12[v14])
    {
      v9 = &v12[v14];
      (*((void (**)(unsigned __int8 **, unsigned __int8 *))*a1 + 2))(a1, &v12[v14]);
LABEL_73:
      sub_22F3F0654(a9);
      *(_QWORD *)(a9 + 392) = 0;
      *(_BYTE *)(a9 + 400) = 1;
      goto LABEL_182;
    }
    v74 = &v12[++v14];
    if (&v12[v14] == a3)
      goto LABEL_6;
  }
  v15 = &v12[v14];
  v74 = &v12[v14 + 1];
  if (v74 == a3)
  {
    if (a7)
      (*((void (**)(unsigned __int8 **, unsigned __int8 *, _QWORD))*a1 + 7))(a1, &v12[v14], ((_DWORD)a3 - (_DWORD)v12 - v14));
    goto LABEL_73;
  }
  __src[0] = 0;
  LODWORD(__src[1]) = 0;
  __src[2] = 0;
  __src[3] = 0;
  *(_QWORD *)((char *)&__src[3] + 6) = 0;
  LOBYTE(__src[5]) = 1;
  __src[9] = 0;
  memset(&__src[6], 0, 20);
  __src[10] = 0x300000000;
  LODWORD(__src[11]) = 0;
  WORD2(__src[11]) = 0;
  LOBYTE(__src[12]) = 0;
  HIDWORD(__src[12]) = 0;
  __src[13] = "'";
  LOBYTE(__src[15]) = 0;
  __src[16] = "-";
  LOBYTE(__src[18]) = 0;
  __src[19] = "+";
  LOBYTE(__src[21]) = 0;
  __src[22] = " ";
  LOBYTE(__src[24]) = 0;
  __src[25] = "#";
  LOBYTE(__src[27]) = 0;
  __src[28] = "0";
  LOBYTE(__src[30]) = 0;
  __src[31] = "tt";
  LOBYTE(__src[33]) = 0;
  __src[34] = "private";
  LOBYTE(__src[36]) = 0;
  __src[37] = "public";
  LOBYTE(__src[39]) = 0;
  __src[40] = "sensitive";
  LOBYTE(__src[42]) = 0;
  *(_QWORD *)((char *)&__src[44] + 6) = 0;
  __src[44] = 0;
  __src[43] = 0;
  memset(&__src[46], 0, 17);
  if (sub_22F063314((uint64_t)a1, (uint64_t)__src, (uint64_t)&v12[v14], &v74, a3))
    goto LABEL_86;
  v62 = &v12[v14 + 1];
  v16 = v74;
  if (v74 == v9)
    goto LABEL_84;
  if (*v74 == 123)
  {
    v66 = a1;
    v65 = a9;
    v17 = 0;
    v18 = ++v74;
    qmemcpy(v71, "^[[:space:]]*(private|public|sen[:space:]]*(,|}):space:],}]*)[[:sitive|mask\\.[^[", sizeof(v71));
    while (1)
    {
      v19 = v9 - v18;
      v20 = operator new(0x50uLL);
      v20[2] = v71[4];
      v20[3] = v71[3];
      *(_OWORD *)((char *)v20 + 62) = v71[2];
      *v20 = v71[0];
      v20[1] = v71[1];
      *((_BYTE *)v20 + 78) = 0;
      llvm::Regex::Regex();
      *(_QWORD *)v75 = &v75[16];
      *(_QWORD *)&v75[8] = 0x200000000;
      if ((llvm::Regex::match() & 1) != 0)
        break;
      if (v19)
      {
        v26 = 0;
        while (1)
        {
          v27 = v18[v26];
          if (v27 == 44 || v27 == 125)
            break;
          if (v19 == ++v26)
            goto LABEL_55;
        }
        if (v26 != -1)
        {
          v74 += v26 + 1;
LABEL_64:
          v28 = 1;
          goto LABEL_65;
        }
      }
LABEL_55:
      if (a7)
        (*((void (**)(unsigned __int8 **, unsigned __int8 *, uint64_t))*v66 + 7))(v66, &v12[v14], ((_DWORD)v9 - (_DWORD)v12) - v14);
      sub_22F3F0654(v65);
      v28 = 0;
      *(_QWORD *)(v37 + 392) = 0;
      *(_BYTE *)(v37 + 400) = 1;
LABEL_65:
      if (*(_BYTE **)v75 != &v75[16])
        free(*(void **)v75);
      llvm::Regex::~Regex((llvm::Regex *)v72);
      operator delete(v20);
      if (!v28)
        goto LABEL_181;
      v18 = v74;
      if (*(v74 - 1) != 44)
        __asm { BR              X10 }
    }
    v22 = *(_QWORD *)(*(_QWORD *)v75 + 16);
    v21 = *(_QWORD *)(*(_QWORD *)v75 + 24);
    v74 += *(_QWORD *)(*(_QWORD *)v75 + 8);
    if (v21 < 4)
      goto LABEL_35;
    if (*(_DWORD *)v22 == 1802723693)
    {
      v33 = 5;
      if (v21 < 5)
        v33 = v21;
      v34 = v22 + v33;
      v35 = v21 - v33;
      if (((_DWORD)v21 == (_DWORD)v33 || (v21 - v33 - 9) < 0xFFFFFFF7) && a7 != 0)
        (*((void (**)(unsigned __int8 **, uint64_t, unint64_t))*v66 + 14))(v66, v22 + v33, v35);
      __src[46] = v34;
      __src[47] = v35;
      goto LABEL_64;
    }
    if (v21 == 9)
    {
      if (*(_QWORD *)v22 == 0x76697469736E6573 && *(_BYTE *)(v22 + 8) == 101 || v17 == 5)
      {
LABEL_36:
        v28 = 1;
        v17 = 5;
        goto LABEL_65;
      }
    }
    else
    {
LABEL_35:
      if (v17 == 5)
        goto LABEL_36;
      if (v21 == 7 && *(_DWORD *)v22 == 1986622064 && *(_DWORD *)(v22 + 3) == 1702125942)
      {
        v17 = 1;
        goto LABEL_64;
      }
    }
    if (!v17)
    {
      if (v21 == 6)
      {
        v30 = 1886741100;
        v31 = bswap32(*(_DWORD *)v22);
        if (v31 == 1886741100 && (v31 = bswap32(*(unsigned __int16 *)(v22 + 4)) >> 16, v30 = 26979, v31 == 26979))
        {
          v32 = 0;
        }
        else if (v31 < v30)
        {
          v32 = -1;
        }
        else
        {
          v32 = 1;
        }
        v17 = 2 * (v32 == 0);
      }
      else
      {
        v17 = 0;
      }
    }
    goto LABEL_64;
  }
  if (v74 == v9)
    goto LABEL_84;
  while (2)
  {
    v38 = (char)*v16;
    v39 = &__src[15];
    v40 = &__src[14];
    switch(*v16)
    {
      case '\'':
        goto LABEL_83;
      case '(':
      case ')':
      case '*':
      case ',':
      case '.':
      case '/':
        goto LABEL_87;
      case '+':
        v39 = &__src[21];
        v40 = &__src[20];
        goto LABEL_83;
      case '-':
        v39 = &__src[18];
        v40 = &__src[17];
        goto LABEL_83;
      case '0':
        v39 = &__src[30];
        v40 = &__src[29];
        goto LABEL_83;
      default:
        v39 = &__src[24];
        v40 = &__src[23];
        if (v38 == 32 || (v39 = &__src[27], v40 = &__src[26], v38 == 35))
        {
LABEL_83:
          *(_BYTE *)v39 = 1;
          *v40 = v16++;
          v74 = v16;
          if (v16 == v9)
            goto LABEL_84;
          continue;
        }
LABEL_87:
        if (LOBYTE(__src[12]))
          v41 = 0;
        else
          v41 = a4;
        sub_22F0632A0(a1, (uint64_t)__src, (uint64_t)&v12[v14], &v74, v9, v41);
        if (v42)
          goto LABEL_86;
        v43 = v74;
        if (v74 == v9)
          goto LABEL_84;
        if (*v74 != 46)
        {
LABEL_98:
          if (sub_22F06342C((uint64_t)a1, (uint64_t)__src, (uint64_t *)&v74, v9, a5))
            goto LABEL_86;
          v44 = sub_22F06351C((uint64_t)__src, (char **)&v74, (char *)v9, a5, 0);
          v45 = (unint64_t)v74;
          if (!v44 || v74 != v9)
          {
            if (*v74 != 91)
            {
              v48 = 0;
              v49 = v74;
              v45 = 0;
              if (!*v74)
              {
LABEL_113:
                (*((void (**)(unsigned __int8 **, unsigned __int8 *))*a1 + 2))(a1, v49);
                goto LABEL_86;
              }
LABEL_108:
              v74 = v49 + 1;
              switch(*v49)
              {
                case '@':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  LOBYTE(__src[5]) = 1;
                  __src[6] = v49;
                  __src[7] = 0;
                  v52 = 27;
                  LODWORD(__src[8]) = 27;
                  goto LABEL_171;
                case 'A':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 18;
                  goto LABEL_168;
                case 'B':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'Q':
                case 'R':
                case 'T':
                case 'V':
                case 'W':
                case 'Y':
                case '[':
                case '\\':
                case ']':
                case '^':
                case '_':
                case 'h':
                case 'j':
                case 'k':
                case 'l':
                case 'q':
                case 't':
                case 'v':
                case 'w':
                  goto LABEL_173;
                case 'C':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 23;
                  goto LABEL_168;
                case 'D':
                  if ((a8 & 1) != 0)
                  {
                    LOBYTE(v50) = 0;
                    v52 = 29;
                    v51 = 1;
                  }
                  else
                  {
                    v56 = *(_DWORD *)(a6 + 68);
                    if (v56 > 0x21 || ((1 << v56) & 0x3F0000888) == 0)
                    {
LABEL_173:
                      LOBYTE(v50) = 0;
                      v51 = 0;
                      v52 = 0;
                      v57 = 1;
                      LOBYTE(__src[5]) = 1;
                      __src[6] = v49;
                      __src[7] = 0;
                      LODWORD(__src[8]) = 0;
                      goto LABEL_175;
                    }
                    LOBYTE(v50) = 0;
                    v51 = 0;
                    v52 = 3;
                  }
LABEL_168:
                  if (v45)
                  {
                    (*((void (**)(unsigned __int8 **, unint64_t, unsigned __int8 *, unsigned __int8 *))*a1
                     + 10))(a1, v45, v48 + 1, v49);
                    goto LABEL_86;
                  }
                  v57 = 0;
                  LOBYTE(__src[5]) = 1;
                  __src[6] = v49;
                  __src[7] = 0;
                  LODWORD(__src[8]) = v52;
                  if (v52 != 22 && v52 != 32)
                  {
LABEL_171:
                    v57 = LOBYTE(__src[12]);
                    if (LOBYTE(__src[12]))
                    {
                      v57 = 0;
                    }
                    else
                    {
                      v58 = (*a4)++;
                      HIDWORD(__src[12]) = v58;
                    }
                  }
LABEL_175:
                  if ((v50 & 1) != 0 || v51)
                    ++*a4;
                  if (v57)
                  {
                    v60 = (uint64_t)&v49[-(int)v12 - v14 + 1];
                    if (v62 < v9)
                    {
                      *(_QWORD *)&v71[4] = &v49[-(int)v12 - v14 + 1];
                      NumBytesForUTF8 = llvm::getNumBytesForUTF8((llvm *)*v62);
                      if (NumBytesForUTF8 == 1 || &v12[NumBytesForUTF8 + 1 + v14] > v9)
                      {
                        v60 = *(_QWORD *)&v71[4];
                      }
                      else
                      {
                        v60 = NumBytesForUTF8 + 1;
                        LOBYTE(__src[5]) = 1;
                        HIDWORD(__src[5]) = *(_DWORD *)&v75[3];
                        *(_DWORD *)((char *)&__src[5] + 1) = *(_DWORD *)v75;
                        __src[6] = v49;
                        __src[7] = &v12[v14 + v60];
                        LODWORD(__src[8]) = v52;
                      }
                    }
                    v59 = (*((uint64_t (**)(unsigned __int8 **, _QWORD *, unsigned __int8 *, uint64_t))*a1 + 12))(a1, __src, &v12[v14], v60) ^ 1;
                    sub_22F3F0654(a9);
                    v15 = 0;
                  }
                  else
                  {
                    memcpy((void *)a9, __src, 0x188uLL);
                    v59 = 0;
                  }
                  *(_QWORD *)(a9 + 392) = v15;
                  *(_BYTE *)(a9 + 400) = v59;
                  break;
                case 'E':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 14;
                  goto LABEL_168;
                case 'F':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 12;
                  goto LABEL_168;
                case 'G':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 16;
                  goto LABEL_168;
                case 'O':
                  v53 = *(_DWORD *)(a6 + 68);
                  if (v53 > 0x21 || ((1 << v53) & 0x3F0000888) == 0)
                    goto LABEL_173;
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 6;
                  goto LABEL_168;
                case 'P':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 25;
                  goto LABEL_168;
                case 'S':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 24;
                  goto LABEL_168;
                case 'U':
                  v54 = *(_DWORD *)(a6 + 68);
                  if (v54 > 0x21 || ((1 << v54) & 0x3F0000888) == 0)
                    goto LABEL_173;
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 8;
                  goto LABEL_168;
                case 'X':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 10;
                  goto LABEL_168;
                case 'Z':
                  if (*(_DWORD *)(a6 + 68) != 15)
                    goto LABEL_173;
                  v50 = *(_DWORD *)(a6 + 72) & 0xFFFFFFEE;
                  if (v50)
                    goto LABEL_173;
                  v51 = 0;
                  v52 = 26;
                  goto LABEL_168;
                case 'a':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 17;
                  goto LABEL_168;
                case 'b':
                  if ((a8 & 1) == 0)
                    goto LABEL_173;
                  v51 = 0;
                  v52 = 28;
                  LOBYTE(v50) = 1;
                  goto LABEL_168;
                case 'c':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 1;
                  goto LABEL_168;
                case 'd':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 2;
                  goto LABEL_168;
                case 'e':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 13;
                  goto LABEL_168;
                case 'f':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 11;
                  goto LABEL_168;
                case 'g':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 15;
                  goto LABEL_168;
                case 'i':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 4;
                  goto LABEL_168;
                case 'm':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 32;
                  goto LABEL_168;
                case 'n':
                  if ((*(_DWORD *)(a5 + 52) & 0x40000000) != 0 || (*(_BYTE *)(a5 + 104) & 0x20) != 0)
                    goto LABEL_173;
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 21;
                  goto LABEL_168;
                case 'o':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 5;
                  goto LABEL_168;
                case 'p':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 20;
                  goto LABEL_168;
                case 'r':
                  if ((a8 & 1) == 0)
                    goto LABEL_173;
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 30;
                  goto LABEL_168;
                case 's':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 19;
                  goto LABEL_168;
                case 'u':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 7;
                  goto LABEL_168;
                case 'x':
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 9;
                  goto LABEL_168;
                case 'y':
                  if ((a8 & 1) == 0)
                    goto LABEL_173;
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 31;
                  goto LABEL_168;
                default:
                  if (*v49 != 37)
                    goto LABEL_173;
                  LOBYTE(v50) = 0;
                  v51 = 0;
                  v52 = 22;
                  goto LABEL_168;
              }
              goto LABEL_181;
            }
            ++v74;
            if ((unsigned __int8 *)(v45 + 1) != v9)
            {
              v46 = 0;
              while (1)
              {
                v47 = (unsigned __int8 *)(v45 + v46);
                if (*(_BYTE *)(v45 + v46 + 1) == 93)
                  break;
                v74 = v47 + 2;
                if (&v9[~v45] == (unsigned __int8 *)++v46)
                  goto LABEL_84;
              }
              v48 = v47 + 1;
              if (v46 == 2)
              {
                if (*(_WORD *)(v45 + 1) == 29812)
                {
                  LOBYTE(__src[33]) = 1;
                  __src[32] = v45 + 1;
                  v49 = (unsigned __int8 *)(v45 + 4);
                  v74 = (unsigned __int8 *)(v45 + 4);
                  if (!*(_BYTE *)(v45 + 4))
                    goto LABEL_113;
                  goto LABEL_108;
                }
                if (!a7)
                  goto LABEL_86;
                v55 = *a1;
                v46 = 2;
              }
              else
              {
                if ((a7 & 1) == 0)
                  goto LABEL_86;
                v55 = *a1;
                if (!v46)
                {
                  (*((void (**)(unsigned __int8 **, unsigned __int8 *))v55 + 8))(a1, v48);
                  goto LABEL_86;
                }
              }
              (*((void (**)(unsigned __int8 **, unint64_t, uint64_t))v55 + 9))(a1, v45 + 1, v46);
              goto LABEL_86;
            }
          }
LABEL_84:
          if (a7)
            (*((void (**)(unsigned __int8 **, unsigned __int8 *, _QWORD))*a1 + 7))(a1, &v12[v14], ((_DWORD)v9 - (_DWORD)v12 - v14));
          goto LABEL_86;
        }
        ++v74;
        if (v43 + 1 == v9)
          goto LABEL_84;
        if (!LOBYTE(__src[12]))
        {
          sub_22F3C7BF8(&v74, v9, (uint64_t)v75, a4);
          *(_QWORD *)((char *)&__src[44] + 6) = *(_QWORD *)&v75[14];
          *(_OWORD *)&__src[43] = *(_OWORD *)v75;
          BYTE5(__src[45]) = 1;
LABEL_97:
          if (v74 == v9)
            goto LABEL_84;
          goto LABEL_98;
        }
        sub_22F063160(a1, &v74, v9, 1, (uint64_t)v75);
        if (*(_DWORD *)&v75[12] != 3)
        {
          *(_QWORD *)((char *)&__src[44] + 6) = *(_QWORD *)&v75[14];
          *(_OWORD *)&__src[43] = *(_OWORD *)v75;
          BYTE5(__src[45]) = 1;
          goto LABEL_97;
        }
LABEL_86:
        sub_22F3F0654(a9);
        *(_QWORD *)(a9 + 392) = 0;
        *(_BYTE *)(a9 + 400) = 1;
LABEL_181:
        v9 = v74;
        v10 = a2;
LABEL_182:
        *v10 = v9;
        return;
    }
  }
}

uint64_t sub_22F0C67EC(uint64_t a1, unint64_t a2, _WORD *a3, _QWORD *a4, int a5)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _DWORD *v32;
  int v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  int v41;
  int v42;
  _DWORD v43[8];

  if (*(_DWORD *)(a1 + 64) == 21)
    return 0;
  v7 = a2;
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v11 == 10 || v11 == 32 || sub_22F115064(v10))
  {
    if (a5)
    {
      *(_DWORD *)(a1 + 64) = 27;
      *(_BYTE *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 168) = 0;
      *(_BYTE *)(a1 + 192) = 0;
      *(_BYTE *)(a1 + 216) = 0;
      *(_BYTE *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 356) = 0;
      result = 1;
      *(_DWORD *)(a1 + 8) = 0;
      return result;
    }
    return 0;
  }
  v14 = *(_QWORD *)v9;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 == 39)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(v14) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v17)
      v18 = *(_DWORD *)(v17 + 16) == 11;
    else
      v18 = 0;
    if (v18
      && ((*(_DWORD *)(v17 + 16) >> 19) & 0x1FFu) - 167 <= 0xD
      && ((1 << ((*(_DWORD *)(v17 + 16) >> 19) + 89)) & 0x383F) != 0)
    {
      v29 = *(_QWORD *)v9;
      *(_DWORD *)(a1 + 64) = 19;
      *(_BYTE *)(a1 + 216) = 0;
      *(_BYTE *)(a1 + 240) = 0;
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(v29) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v30)
        v31 = *(_DWORD *)(v30 + 16) == 11;
      else
        v31 = 0;
      if (!v31)
      {
        v32 = (_DWORD *)(a1 + 8);
LABEL_40:
        *v32 = 0;
        return 1;
      }
      v33 = (*(_DWORD *)(v30 + 16) >> 19) & 0x1FF;
      v32 = (_DWORD *)(a1 + 8);
      if (v33 != 180 && v33 != 169)
        goto LABEL_40;
      *v32 = 4;
      return 1;
    }
    v14 = *(_QWORD *)v9;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(unsigned __int8 *)(v15 + 16);
  }
  if (v16 == 44)
  {
    v19 = sub_22F114198(*(_QWORD *)(v15 + 24));
    v7 = sub_22E496830(v19);
    v14 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_DWORD *)(v20 + 16);
  if (v20)
    v22 = *(_DWORD *)(v20 + 16) == 11;
  else
    v22 = 0;
  if (v22)
  {
LABEL_24:
    v26 = (v21 >> 19) & 0x1FF;
    result = 0;
    v27 = 1;
    switch(v26)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 169:
      case 170:
      case 171:
      case 172:
      case 177:
      case 180:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 254:
      case 255:
      case 256:
      case 257:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
        return result;
      case 167:
      case 168:
      case 178:
      case 179:
        goto LABEL_47;
      case 173:
      case 181:
        v27 = 2;
        goto LABEL_47;
      case 174:
      case 182:
      case 211:
        if (*(_DWORD *)(a1 + 84) == 3)
          v27 = 0;
        else
          v27 = 3;
        goto LABEL_47;
      case 175:
      case 183:
        v27 = 4;
        goto LABEL_47;
      case 176:
      case 184:
        v27 = 5;
        goto LABEL_47;
      case 212:
        v27 = 4 * (*(_DWORD *)(a1 + 84) != 3);
        goto LABEL_47;
      case 213:
        v27 = 13;
LABEL_47:
        *(_DWORD *)(a1 + 8) = v27;
        break;
      default:
        break;
    }
    v34 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) == 50 && (*a3 & 0x201) != 0)
      sub_22F3C7E68(v7, a1);
    if (!sub_22F064030(a1))
    {
LABEL_52:
      v35 = *(_QWORD *)(*v34 + 8) & 0xFFFFFFFFFFFFFFF0;
      if (*(_BYTE *)(*v34 + 16) != 50 && *(_QWORD *)v35 && *(_DWORD *)(*(_QWORD *)v35 + 16) == 11)
      {
        result = 1;
        if (((*(_DWORD *)(*(_QWORD *)v35 + 16) >> 19) & 0x1FFu) - 167 <= 0xC
          && ((1 << ((*(_DWORD *)(*(_QWORD *)v35 + 16) >> 19) + 89)) & 0x1803) != 0)
        {
          *(_DWORD *)(a1 + 64) = 1;
          *(_DWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 356) = 0;
          *(_BYTE *)(a1 + 216) = 0;
          *(_BYTE *)(a1 + 240) = 0;
          *(_BYTE *)(a1 + 168) = 0;
          return result;
        }
      }
      v37 = *(_QWORD *)v35;
      v38 = *(_DWORD *)(*(_QWORD *)v35 + 16);
      if (v37)
        v39 = v38 == 11;
      else
        v39 = 0;
      if (v39 && ((v38 >> 19) & 0x1FE) - 210 <= 7)
      {
        *(_DWORD *)(a1 + 64) = 11;
      }
      else if (sub_22F110930(*v34))
      {
        *(_DWORD *)(a1 + 64) = 2;
        *(_BYTE *)(a1 + 216) = 0;
      }
      else
      {
        sub_22F110B50(*v34);
        *(_DWORD *)(a1 + 64) = 7;
        *(_BYTE *)(a1 + 216) = 0;
        *(_BYTE *)(a1 + 168) = 0;
      }
      return 1;
    }
    v41 = *(_DWORD *)(a1 + 64);
    if ((v41 - 2) >= 3)
    {
      if ((v41 - 7) <= 1 && sub_22F110930(*v34))
      {
        v42 = 2;
        goto LABEL_79;
      }
    }
    else if (sub_22F110B50(*v34) && !*(_BYTE *)(a1 + 168))
    {
      v42 = 7;
LABEL_79:
      *(_DWORD *)(a1 + 64) = v42;
    }
    sub_22F3F045C((_DWORD *)a1, a4, a5, (uint64_t)v43);
    if (v43[0] != 1 && sub_22F063740((uint64_t)v43, (uint64_t)a4, v7))
      return 1;
    goto LABEL_52;
  }
  result = sub_22E3E4B64(v14);
  if (result)
  {
    v23 = result;
    result = 0;
    v7 = *(_QWORD *)(v23 + 32);
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v25 = *(unsigned __int8 *)(v24 + 16);
    LODWORD(v23) = *(_DWORD *)(v23 + 20);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0x100000000;
    *(_DWORD *)(a1 + 88) = v23;
    *(_WORD *)(a1 + 92) = 0;
    if (v25 == 11)
    {
      v21 = *(_DWORD *)(v24 + 16);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_22F0C6C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  while (1)
  {
    v5 = a1 & 0xFFFFFFFFFFFFFFF0;
    v6 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 31)
    {
      v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v27 & 8) != 0)
      {
        v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      v36 = v29 | (v27 | a1) & 7;
      v37 = v36 | v28;
      v38 = sub_22F10ACF8(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
      v39 = sub_22F0C6C4C(v38, a2, a3);
      v40 = sub_22F0C6C4C(*(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF0, a2, a3);
      v41 = sub_22F36A6C0(a2, v39, *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0));
      if ((v37 & 0xCFFFFFFF8) == 0)
      {
        v53 = v36 & 7;
        return v41 | v53;
      }
      v54 = v37;
      goto LABEL_56;
    }
    if (v7 == 39)
    {
      v30 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v30 & 8) != 0)
      {
        v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      v42 = v32 | (v30 | a1) & 7;
      v43 = v42 | v31;
      v44 = sub_22F10ACF8(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
      v45 = sub_22F0C6C4C(v44, a2, a3);
      v41 = sub_22EF5B848(a2, v45, 0);
      if ((v43 & 0xCFFFFFFF8) == 0)
      {
LABEL_65:
        v53 = v42 & 7;
        return v41 | v53;
      }
      v54 = v43;
LABEL_56:
      v47 = sub_22E491354((unsigned int *)&v54, v41);
      return sub_22EF5DBC4(a2, v47, v54);
    }
    if ((v7 & 0xFE) == 0x28)
    {
      v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v33 & 8) != 0)
      {
        v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
      v42 = v35 | (v33 | a1) & 7;
      v49 = v42 | v34;
      v50 = sub_22F10ACF8(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
      v51 = sub_22F0C6C4C(v50, a2, a3);
      if (v7 == 40)
        v52 = sub_22EF5F8C4(a2, v51, 1);
      else
        v52 = sub_22EF5FB8C(a2, v51);
      v41 = v52;
      if ((v49 & 0xCFFFFFFF8) != 0)
      {
        v54 = v49;
        goto LABEL_56;
      }
      goto LABEL_65;
    }
    if (v7 != 53)
      break;
    a1 = sub_22F4098F0(a1, a2);
  }
  if (v7 == 43)
  {
    do
    {
      v8 = *(_QWORD *)(v5 + 8);
      if ((v8 & 8) != 0)
      {
        v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v11 = v10 | (v8 | a1) & 7;
      v12 = *(_QWORD *)(v6 + 8);
      if (((v11 | v9) & 0xCFFFFFFF8) != 0)
      {
        v54 = v11 | v9;
        v13 = sub_22E491354((unsigned int *)&v54, v12);
        a1 = sub_22EF5DBC4(a2, v13, v54);
      }
      else
      {
        a1 = v11 & 7 | v12;
      }
      v5 = a1 & 0xFFFFFFFFFFFFFFF0;
      v6 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    }
    while (*(_BYTE *)(v6 + 16) == 43);
  }
  if ((a1 & 8) != 0)
  {
    v16 = *(_QWORD *)(v5 + 24);
    v14 = v16 & 0xFFFFFFFF00000000;
    v15 = v16;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v17 = v6 & 0xFFFFFFFFFFFFFFF0;
  v18 = *(_DWORD *)(*(_QWORD *)v17 + 16);
  if (*(_QWORD *)v17)
    v19 = *(_DWORD *)(*(_QWORD *)v17 + 16) == 24;
  else
    v19 = 0;
  if (v19)
  {
    v17 = *(_QWORD *)(*(_QWORD *)v17 + 40);
    v20 = (v18 >> 19);
  }
  else
  {
    v20 = 6;
  }
  v21 = a1 & 7;
  v22 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  if (!v23)
  {
LABEL_34:
    v26 = 0;
    goto LABEL_49;
  }
  v24 = *(unsigned __int8 *)(v23 + 16);
  if (v24 != 50)
  {
    if ((v24 & 0xFE) == 0x2C)
    {
      v25 = sub_22F114198(*(_QWORD *)(v23 + 24));
      if (v25)
        goto LABEL_48;
    }
    else if (v24 == 46)
    {
      v54 = *(_QWORD *)(v23 + 32);
      v25 = sub_22F0F08CC(&v54);
      if (v25)
        goto LABEL_48;
    }
    else
    {
      v25 = sub_22F10C2A4(v23);
      if (v25 && (*(_DWORD *)(v25 + 28) & 0x7Fu) - 35 < 3)
        goto LABEL_48;
    }
    goto LABEL_34;
  }
  v25 = *(_QWORD *)(v23 + 24);
  if (!v25)
    goto LABEL_34;
LABEL_48:
  v26 = sub_22F0C72F8(a2, *(_QWORD *)(v25 + 16), a3);
LABEL_49:
  v46 = v15 | v21;
  if (*(unsigned __int8 *)(*v22 + 16) - 45 <= 1)
    v17 = sub_22F0C7050(a2, *v22, a3) & 0xFFFFFFFFFFFFFFF0;
  if (v20 != 6 || v26)
    v17 = sub_22EF65684(a2, v20, (unint64_t)v26, v17, 0);
  if (((v46 | v14) & 0xCFFFFFFF8) != 0)
  {
    v54 = v46 | v14;
    v41 = v17;
    goto LABEL_56;
  }
  return v17 | v46 & 7;
}

uint64_t sub_22F0C7050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[13];

  v37[12] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 46)
  {
    v35 = v37;
    v36 = 0x400000000;
    v7 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = (__int128 *)(a2 + 40);
      v10 = 24 * v7;
      do
      {
        v33 = *v9;
        v34 = *((_QWORD *)v9 + 2);
        v8 |= sub_22F0C76F4(a1, (uint64_t)&v33, a3);
        v11 = sub_22E4EF088((uint64_t)&v35, (unint64_t)&v33, 1);
        v12 = (char *)v35 + 24 * v36;
        v13 = *(_OWORD *)v11;
        *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)v12 = v13;
        v14 = (v36 + 1);
        LODWORD(v36) = v36 + 1;
        v9 = (__int128 *)((char *)v9 + 24);
        v10 -= 24;
      }
      while (v10);
      if ((v8 & 1) != 0)
      {
        a1 = *(_QWORD *)(sub_22EF6512C(a1, *(_QWORD *)(a2 + 32), (uint64_t)v35, v14, *(_QWORD *)(a2 + 8)) & 0xFFFFFFFFFFFFFFF0);
        if (v35 != v37)
          free(v35);
        return a1;
      }
      if (v35 != v37)
        free(v35);
    }
    return a2;
  }
  if (!a2)
    return a2;
  if (v6 != 45)
    return a2;
  v15 = sub_22F114198(*(_QWORD *)(a2 + 24));
  if (!v15)
    return a2;
  v16 = v15;
  if ((*(_DWORD *)(v15 + 28) & 0x7E) != 0x24)
    return a2;
  v17 = *(_QWORD *)(v15 + 168);
  v35 = v37;
  v36 = 0x400000000;
  v18 = *(unsigned int *)(v17 + 8);
  if (!(_DWORD)v18)
    goto LABEL_24;
  v19 = 0;
  v20 = 0;
  v21 = 24 * v18;
  do
  {
    v22 = (__int128 *)(*(_QWORD *)v17 + v19);
    v23 = *v22;
    v34 = *((_QWORD *)v22 + 2);
    v33 = v23;
    v20 |= sub_22F0C76F4(a1, (uint64_t)&v33, a3);
    v24 = sub_22E4EF088((uint64_t)&v35, (unint64_t)&v33, 1);
    v25 = (char *)v35 + 24 * v36;
    v26 = *(_OWORD *)v24;
    *((_QWORD *)v25 + 2) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)v25 = v26;
    v27 = (v36 + 1);
    LODWORD(v36) = v36 + 1;
    v19 += 24;
  }
  while (v21 != v19);
  if ((v20 & 1) != 0)
  {
    v28 = *(_QWORD *)(v16 + 152);
    v29 = v28 & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 4) != 0 && v29)
    {
      do
      {
        v30 = *(_QWORD *)(*(_QWORD *)v29 + 152);
        v29 = v30 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v30 & 4) != 0 && v29);
    }
    a1 = *(_QWORD *)(sub_22EF6512C(a1, v29, (uint64_t)v35, v27, *(_QWORD *)(a2 + 8)) & 0xFFFFFFFFFFFFFFF0);
    v31 = 1;
  }
  else
  {
LABEL_24:
    v31 = 0;
  }
  if (v35 != v37)
    free(v35);
  if ((v31 & 1) == 0)
    return a2;
  return a1;
}

_QWORD *sub_22F0C72F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v5 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 4) != 0)
    v5 = (_QWORD *)*v5;
  v6 = sub_22EFCBB30((unint64_t)v5);
  if (!v6 || (v7 = *(_WORD *)(v6 + 8) & 0x7F, (v7 - 13) > 0x3D))
  {
LABEL_22:
    if (!(_DWORD)a3 || (*(_WORD *)(v6 + 8) & 0x7F) != 0x53)
      return 0;
    result = *(_QWORD **)(a1 + 920);
    if (!result)
    {
      result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 24, 3);
      result[1] = 0;
      result[2] = 0;
      *result = 0;
      *(_QWORD *)(a1 + 920) = result;
    }
    return result;
  }
  switch(v7)
  {
    case 16:
    case 24:
      goto LABEL_10;
    case 71:
      v9 = -56;
      break;
    case 70:
LABEL_15:
      v9 = -64;
      break;
    default:
      if ((v7 - 52) >= 6)
      {
        if ((v7 - 33) < 5)
          goto LABEL_15;
LABEL_10:
        v9 = -48;
        break;
      }
      v9 = -72;
      break;
  }
  if (v7 == 16)
  {
    v10 = *(_QWORD *)(v6 - 8);
    if (v10 >= 8 && (v10 & 7) == 0)
    {
      v11 = v6 - 48;
      return (_QWORD *)sub_22F0C74F0(a1, v11, a3);
    }
    goto LABEL_22;
  }
  v13 = v6 + v9;
  if ((v7 - 38) >= 0xFFFFFFFD)
  {
    v14 = *(_QWORD *)(v6 + 72);
    if ((v14 & 4) == 0)
    {
      v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        sub_22EFE95D4(v14 & 0xFFFFFFFFFFFFFFF8);
        v16 = *(_QWORD *)(sub_22EFE9368(v15) + 32);
        sub_22EFE95D4(v15);
        v17 = sub_22EFE9368(v15);
        if (v16 != *(_QWORD *)(v17 + 32) + 8 * *(unsigned int *)(v17 + 40))
        {
          sub_22EFE95D4(v15);
          v18 = sub_22EFE9368(v15);
          v19 = sub_22E6939D8(**(_QWORD **)(v18 + 32));
          v11 = v19;
          v13 = (*(_DWORD *)(v19 + 28) & 0x7Fu) - 13 >= 0x3E ? 0 : v19;
          if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x10)
            return (_QWORD *)sub_22F0C74F0(a1, v11, a3);
        }
      }
    }
  }
  result = 0;
  if (v13 && (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFB)
    return (_QWORD *)sub_22F0C7584(a1, v13, a3);
  return result;
}

uint64_t sub_22F0C74F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v9;
  _QWORD v10[3];

  if (!a2)
    return 0;
  v3 = a2;
  while ((*(_BYTE *)(v3 + 104) & 4) != 0)
  {
    v5 = *(_QWORD *)(v3 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    v3 = v6 - 48;
    if (v6)
      v7 = (*(_WORD *)(v6 + 8) & 0x7F) == 16;
    else
      v7 = 0;
    if (!v7)
      return 0;
  }
  v9 = (unint64_t)sub_22F0C760C(a1, *(_QWORD *)(v3 + 16), a3);
  v10[0] = 0;
  v10[1] = v9 & 0xFFFFFFFFFFFFFFF9 | 2;
  v10[2] = v3;
  return sub_22F0AA9D0(a1, (uint64_t)v10);
}

uint64_t sub_22F0C7584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v6 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v6 + 16) - 45 <= 1)
    v6 = sub_22F0C7050(a1, *(_QWORD *)(a2 + 48), a3);
  v7 = sub_22F0C760C(a1, *(_QWORD *)(a2 + 16), a3);
  v9[0] = 0;
  v9[1] = v7 & 0xFFFFFFFFFFFFFFF9 | 4;
  v9[2] = v6;
  return sub_22F0AA9D0(a1, (uint64_t)v9);
}

_QWORD *sub_22F0C760C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *result;

  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 4) != 0)
    v4 = *(_QWORD *)v4;
  v5 = *(_WORD *)(v4 + 8) & 0x7F;
  if (v4 && v5 == 16)
  {
    while ((*(_BYTE *)(v4 + 56) & 4) != 0)
    {
      v6 = *(_QWORD *)(v4 - 32);
      v4 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v4 = *(_QWORD *)v4;
      if (v4)
        v7 = (*(_WORD *)(v4 + 8) & 0x7F) == 16;
      else
        v7 = 0;
      if (!v7)
        return 0;
    }
    if (*(_QWORD *)(v4 - 8))
      return (_QWORD *)sub_22F0C74F0(a1, v4 - 48);
    return 0;
  }
  if (v4 && (v5 - 38) >= 0xFFFFFFFB)
    return (_QWORD *)sub_22F0C7584(a1, v4 - 64, a3);
  if (v5 != 83 || (_DWORD)a3 == 0)
    return 0;
  result = *(_QWORD **)(a1 + 920);
  if (!result)
  {
    result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 24, 3);
    result[1] = 0;
    result[2] = 0;
    *result = 0;
    *(_QWORD *)(a1 + 920) = result;
  }
  return result;
}

uint64_t sub_22F0C76F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;

  if (*(_DWORD *)a2 == 1)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = sub_22F0C6C4C(v16, a1, a3);
    if (v17 != v16)
    {
      v19 = v17;
      result = 1;
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v19;
      return result;
    }
    return 0;
  }
  if (*(_DWORD *)a2 != 5)
    return 0;
  v32 = *(_QWORD *)(a2 + 8);
  v6 = v32;
  v7 = sub_22F0F08CC((uint64_t *)&v32);
  v8 = v7;
  v9 = v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 & 6) != 4 || v9 == 0;
  if (v10 || (v11 = *(_QWORD *)(v9 + 8), (v11 & 4) != 0))
  {
    result = (uint64_t)sub_22F0C72F8(a1, *(_QWORD *)(v7 + 16), a3);
    if (!result)
      return result;
    v12 = result;
    goto LABEL_18;
  }
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!v13)
    return 0;
  v31 = v11 & 0xFFFFFFFFFFFFFFF8;
  while (1)
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = (v14 >> 1) & 3;
    if (v15 - 2 < 2)
      goto LABEL_29;
    if (v15 == 1)
      break;
    v12 = v14 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (!v13)
      goto LABEL_42;
  }
  v20 = *(_DWORD *)(v13 + 28) & 0x7F;
  if ((v20 - 35) < 3)
  {
LABEL_29:
    if ((v14 & 4) != 0)
    {
      v23 = v13 + 16;
      v24 = v13;
      if ((*(_DWORD *)(v13 + 16) & 0xFE) == 0x2C)
        goto LABEL_34;
    }
    else
    {
      v13 = 0;
      v23 = 16;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
      || (v24 = sub_22F10CF48(v13)) == 0)
    {
      v26 = sub_22F10C2A4(v13);
      if (!v26)
        goto LABEL_37;
      v25 = v26;
      if ((*(_DWORD *)(v26 + 28) & 0x7Fu) - 35 >= 3)
        goto LABEL_37;
      goto LABEL_40;
    }
LABEL_34:
    v25 = sub_22F114198(*(_QWORD *)(v24 + 24));
    if (!v25)
    {
LABEL_37:
      if (*(_BYTE *)v23 != 50)
        goto LABEL_42;
      v25 = *(_QWORD *)(v13 + 24);
    }
LABEL_40:
    v27 = sub_22F0C7584(a1, v25, a3);
    goto LABEL_41;
  }
  v21 = *(_QWORD *)(v12 + 8) & 6;
  if (v20 == 16)
  {
    if (v21 == 2)
      v22 = v13;
    else
      v22 = 0;
  }
  else
  {
    if (v20 == 17 && v21 == 2)
      v29 = v13;
    else
      v29 = 0;
    do
    {
      v29 = *(_QWORD *)(v29 + 88);
      if (v29)
        v30 = (*(_DWORD *)(v29 + 28) & 0x7F) == 17;
      else
        v30 = 0;
    }
    while (v30);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  }
  v27 = sub_22F0C74F0(a1, v22, a3);
LABEL_41:
  v12 = v27;
LABEL_42:
  if (v12 == v31)
    return 0;
  if (v12)
  {
LABEL_18:
    if ((v6 & 6) == 0 && v9 && (*(_DWORD *)(v9 + 28) & 0x7E) == 0x2E)
      v8 = v6 & 0xFFFFFFFFFFFFFFF8;
    v6 = sub_22F36E410(a1, v12, 0, v8 & 0xFFFFFFFFFFFFFFF9);
  }
  *(_QWORD *)a2 = 5;
  *(_QWORD *)(a2 + 8) = v6;
  return 1;
}

uint64_t sub_22F0C7984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;
  void **v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  int v49;
  char *v50;
  void *v51;
  int v52;
  char *v53;
  int v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  void *v59;
  int v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD v83[4];
  __int16 v84;
  void *__p[2];
  char v86;
  _DWORD *v87;
  _QWORD v88[2];
  void *v89;
  uint64_t v90;
  _BYTE v91[512];
  void *v92;
  uint64_t v93;
  _BYTE v94[128];
  _QWORD *v95;
  uint64_t v96;
  _QWORD v97[18];

  v97[16] = *MEMORY[0x24BDAC8D0];
  v89 = v91;
  v90 = 0x4000000000;
  if (!a5)
    return 0;
  v7 = a4;
  v10 = 8 * a5;
  v11 = 8 * a5;
  v12 = a4;
  do
  {
    v13 = *v12;
    if (*v12)
      v14 = (*(_DWORD *)(*v12 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD;
    else
      v14 = 0;
    if (v14)
    {
      v15 = v90;
      v16 = &v89;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v90;
      }
    }
    else
    {
      v15 = *(unsigned int *)(a6 + 8);
      if (v15 >= *(unsigned int *)(a6 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(unsigned int *)(a6 + 8);
      }
      v16 = (void **)a6;
    }
    *((_QWORD *)*v16 + v15) = v13;
    ++*((_DWORD *)v16 + 2);
    ++v12;
    v11 -= 8;
  }
  while (v11);
  v17 = (_DWORD)v90 != 0;
  v18 = v89;
  if ((_DWORD)v90)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v89 + v90 - 1) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(_BYTE *)(v20 + 16) == 2;
    else
      v21 = 0;
    if (!v21
      || sub_22ED52254((llvm::APInt *)(v20 + 40), 2)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4)
    {
      while (1)
      {
        if (*v7 && (*(_DWORD *)(*v7 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v7 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v23)
          {
            if (*(_BYTE *)(v23 + 16) == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v23 + 24)) + 74) & 0x80) != 0)
              break;
          }
        }
        ++v7;
        v10 -= 8;
        if (!v10)
        {
          v80 = 0;
          goto LABEL_35;
        }
      }
    }
    v80 = *((_QWORD *)v89 + v90 - 1);
    LODWORD(v90) = v90 - 1;
LABEL_35:
    v81 = v17;
    v83[0] = *(_QWORD *)(a1 + 2000) + 840;
    v83[2] = a2;
    v83[3] = a3;
    v84 = 1284;
    v24 = __p;
    llvm::Twine::str((llvm::Twine *)v83);
    if (v86 < 0)
      v24 = (void **)__p[0];
    v25 = (char *)(v86 & 0x7F);
    v26 = 0;
    if (v86 < 0)
      v25 = (char *)__p[1];
    if (v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = (void **)&v25[(_QWORD)v24];
      do
      {
        v31 = *(char *)v24;
        if (v29 >= v28)
        {
          v32 = (v29 - v26) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            abort();
          if ((v28 - v26) >> 1 > v33)
            v33 = (v28 - v26) >> 1;
          if ((unint64_t)(v28 - v26) >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
          {
            if (v34 >> 62)
              sub_22E3B3F8C();
            v35 = (char *)operator new(4 * v34);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v32];
          *(_DWORD *)v36 = v31;
          v27 = v36 + 4;
          while (v29 != v26)
          {
            v37 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          v28 = &v35[4 * v34];
          if (v26)
            operator delete(v26);
          v26 = v36;
        }
        else
        {
          *(_DWORD *)v29 = v31;
          v27 = v29 + 4;
        }
        v24 = (void **)((char *)v24 + 1);
        v29 = v27;
      }
      while (v24 != v30);
    }
    else
    {
      v27 = 0;
    }
    sub_22F3F0804(v83, v26, v27);
    v95 = v97;
    v96 = 0x1000000000;
    v87 = 0;
    v38 = v90;
    if (!(_DWORD)v90)
    {
LABEL_103:
      v60 = v96;
      v61 = v95;
      if (v96 >= 2)
      {
        v62 = (unint64_t)&v95[v96 - 1];
        v63 = v96 - 1;
        do
        {
          v92 = 0;
          v93 = v63;
          v64 = sub_22F3F0774((uint64_t)v83, &v92);
          if (v64)
          {
            v65 = *v61;
            *v61 = v61[v64];
            v61[v64] = v65;
          }
          ++v61;
          --v63;
        }
        while ((unint64_t)v61 < v62);
        v61 = v95;
        v60 = v96;
      }
      v92 = v94;
      v93 = 0x1000000000;
      if (v60)
      {
        v66 = &v61[v60];
        do
        {
          v67 = *v61;
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v61 + 24))(*v61) & 1) == 0)
          {
            v68 = *(unsigned int *)(v67 + 16);
            if (v68 >= 2)
            {
              v69 = *(uint64_t **)(v67 + 8);
              v70 = (unint64_t)&v69[v68 - 1];
              v71 = v68 - 1;
              do
              {
                v88[0] = 0;
                v88[1] = v71;
                v72 = sub_22F3F0774((uint64_t)v83, v88);
                if (v72)
                {
                  v73 = *v69;
                  *v69 = v69[v72];
                  v69[v72] = v73;
                }
                ++v69;
                --v71;
              }
              while ((unint64_t)v69 < v70);
            }
          }
          sub_22F263224((unsigned int *)&v92, (uint64_t)v92 + 8 * v93, *(uint64_t **)(v67 + 8), (uint64_t *)(*(_QWORD *)(v67 + 8) + 8 * *(unsigned int *)(v67 + 16)));
          ++v61;
        }
        while (v61 != v66);
      }
      sub_22F24C890((uint64_t)&v89, (uint64_t)&v92);
      if (v92 != v94)
        free(v92);
      v74 = v87;
      v87 = 0;
      v17 = v81;
      if (v74)
        (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
      v75 = v95;
      if ((_DWORD)v96)
      {
        v76 = v96;
        v77 = v95 - 1;
        do
        {
          v78 = v77[v76];
          v77[v76] = 0;
          if (v78)
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
          --v76;
        }
        while (v76 * 8);
        v75 = v95;
      }
      if (v75 != v97)
        free(v75);
      v79 = v90;
      if (v80)
      {
        if (v90 >= HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v79 = v90;
        }
        *((_QWORD *)v89 + v79) = v80;
        v79 = v90 + 1;
        LODWORD(v90) = v90 + 1;
      }
      sub_22F246808(a6, (char *)v89, (char *)v89 + 8 * v79);
      if (v26)
        operator delete(v26);
      if (v86 < 0)
        operator delete(__p[0]);
      v18 = v89;
      goto LABEL_14;
    }
    v39 = 0;
    v40 = 0;
    v41 = a1;
    while (1)
    {
      while (1)
      {
        if (v39 >= v38)
        {
          sub_22F0C8298((uint64_t)&v95, (uint64_t *)&v87);
          v39 = 0;
        }
        v42 = (char *)v89;
        v43 = *(_QWORD *)v89;
        if ((*(_BYTE *)(*(_QWORD *)v89 + 68) & 1) == 0 || sub_22EFC2F84(*(_QWORD *)v89, v41))
          break;
        if (!v40)
        {
          v40 = operator new();
          bzero((void *)(v40 + 16), 0x210uLL);
          *(_DWORD *)(v40 + 20) = 64;
          *(_QWORD *)v40 = &off_24FAC6B58;
          *(_QWORD *)(v40 + 8) = v40 + 24;
        }
        sub_22F0C83C4((_DWORD *)v40, v43, 1);
        v54 = v90;
        v55 = (char *)v89 + 8 * v90;
        if (v55 != v42 + 8)
        {
          memmove(v42, v42 + 8, v55 - (v42 + 8));
          v54 = v90;
        }
        v38 = v54 - 1;
        LODWORD(v90) = v38;
        if (!v38)
        {
LABEL_98:
          if (v87)
            sub_22F0C8298((uint64_t)&v95, (uint64_t *)&v87);
          if (v40)
          {
            v92 = (void *)v40;
            sub_22F0C8298((uint64_t)&v95, (uint64_t *)&v92);
            v59 = v92;
            v92 = 0;
            if (v59)
              (*(void (**)(void *))(*(_QWORD *)v59 + 8))(v59);
          }
          goto LABEL_103;
        }
      }
      if (v40)
      {
        v92 = (void *)v40;
        sub_22F0C8298((uint64_t)&v95, (uint64_t *)&v92);
        v44 = v92;
        v92 = 0;
        if (v44)
          (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
      }
      if (!v87)
      {
        v45 = operator new();
        bzero((void *)(v45 + 16), 0x210uLL);
        *(_QWORD *)v45 = &off_24FAC6B88;
        *(_QWORD *)(v45 + 8) = v45 + 24;
        *(_DWORD *)(v45 + 20) = 64;
        v46 = v87;
        v87 = (_DWORD *)v45;
        if (v46)
          (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
      }
      v47 = sub_22EF5CDF0(v41, *(_QWORD *)(*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFFFF0));
      if (v47 >= 0x40)
        break;
      if ((*(unsigned int (**)(_DWORD *, unint64_t))(*(_QWORD *)v87 + 16))(v87, v47))
      {
        sub_22F0C83C4(v87, v43, v47);
        v52 = v90;
        v53 = (char *)v89 + 8 * v90;
        if (v53 != v42 + 8)
        {
          memmove(v42, v42 + 8, v53 - (v42 + 8));
          v52 = v90;
        }
        v38 = v52 - 1;
        LODWORD(v90) = v38;
        if ((int)v87[134] < 64)
        {
          v40 = 0;
          if (!v38)
            goto LABEL_98;
        }
        else
        {
          sub_22F0C8298((uint64_t)&v95, (uint64_t *)&v87);
          v39 = 0;
LABEL_83:
          v40 = 0;
          v38 = v90;
          if (!(_DWORD)v90)
            goto LABEL_98;
        }
      }
      else
      {
        v56 = v90;
        if (v90 >= (unint64_t)HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v56 = v90;
        }
        *((_QWORD *)v89 + v56) = v43;
        v57 = v90 + 1;
        LODWORD(v90) = v57;
        v58 = (char *)v89 + 8 * v57;
        if (v58 != v42 + 8)
        {
          memmove(v42, v42 + 8, v58 - (v42 + 8));
          v57 = v90;
        }
        v40 = 0;
        ++v39;
        v38 = v57 - 1;
        LODWORD(v90) = v38;
        if (!v38)
          goto LABEL_98;
      }
    }
    v48 = (_QWORD *)operator new();
    bzero(v48 + 2, 0x210uLL);
    *v48 = &off_24FAC6B88;
    v48[1] = v48 + 3;
    *((_DWORD *)v48 + 5) = 64;
    v92 = v48;
    sub_22F0C83C4(v48, v43, v47);
    v49 = v90;
    v50 = (char *)v89 + 8 * v90;
    if (v50 != v42 + 8)
    {
      memmove(v42, v42 + 8, v50 - (v42 + 8));
      v49 = v90;
    }
    LODWORD(v90) = v49 - 1;
    sub_22F0C8298((uint64_t)&v95, (uint64_t *)&v92);
    v51 = v92;
    v92 = 0;
    v41 = a1;
    if (v51)
      (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
    goto LABEL_83;
  }
LABEL_14:
  if (v18 != v91)
    free(v18);
  return v17;
}

void sub_22F0C8298(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v5 + 8 * v4;
    v9 = v5 <= (unint64_t)a2 && v7 > (unint64_t)a2;
    if (v9)
      v10 = (uint64_t)((uint64_t)a2 - v5) >> 3;
    else
      v10 = -1;
    v5 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    v11 = *(uint64_t **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = 8 * v12;
      v15 = (_QWORD *)v5;
      do
      {
        v16 = *v11;
        *v11++ = 0;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
      v17 = *(_QWORD *)a1 - 8;
      do
      {
        v18 = *(_QWORD *)(v17 + v13);
        *(_QWORD *)(v17 + v13) = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v13 -= 8;
      }
      while (v13);
      v11 = *(uint64_t **)a1;
    }
    if (v11 != (uint64_t *)(a1 + 16))
      free(v11);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = 0;
    if (v9)
      v2 = (uint64_t *)(v5 + 8 * v10);
    v4 = *(unsigned int *)(a1 + 8);
  }
  v6 = *v2;
  *v2 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 8) = v4 + 1;
}

_DWORD *sub_22F0C83C4(_DWORD *result, uint64_t a2, int a3)
{
  _DWORD *v4;
  unsigned int v5;

  v4 = result;
  result[134] += a3;
  v5 = result[4];
  if (v5 >= result[5])
  {
    result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v4[4];
  }
  *(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v5) = a2;
  ++v4[4];
  return result;
}

_QWORD *sub_22F0C842C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAC6B88;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_22F0C846C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAC6B88;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F0C84BC()
{
  return 1;
}

uint64_t sub_22F0C84C4()
{
  return 1;
}

_QWORD *sub_22F0C84CC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAC6B88;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_22F0C850C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAC6B88;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F0C855C(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 536) + a2 < 65;
}

uint64_t sub_22F0C8570()
{
  return 0;
}

uint64_t sub_22F0C8578(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      LODWORD(v4) = 64;
      goto LABEL_16;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_16:
    *(_QWORD *)(result + 48) = 0;
    v8 = -(int)v4;
    v7 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> v8;
    goto LABEL_17;
  }
  *(_QWORD *)(result + 48) = 0x80000000uLL >> v4 << (v4 + 1);
  v6 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v6 = 0;
  *(_DWORD *)(result + 56) = v6;
  if (v4 >= 0x1F)
    v7 = -1;
  else
    v7 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_17:
  *(_DWORD *)(result + 60) = v7;
  return result;
}

uint64_t sub_22F0C8668(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;

  v1 = a1[4];
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *a1;
    v5 = a1[5];
    v6 = a1[2];
    v7 = *(_QWORD *)(*a1 + 2496);
    do
    {
      do
      {
        v8 = v7;
        v7 = (v7 + 1) % 0x270;
        v9 = *(_DWORD *)(v4 + 4 * ((v8 + 397) % 0x270)) ^ ((*(_DWORD *)(v4 + 4 * v7) & 0x7FFFFFFE | *(_DWORD *)(v4 + 4 * v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v4 + 4 * v7) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v4 + 4 * v8) = v9;
        LODWORD(v8) = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
        v10 = ((_DWORD)v8 << 15) & 0xEFC60000 ^ v8 ^ ((((_DWORD)v8 << 15) & 0xEFC60000 ^ v8) >> 18);
      }
      while (v5 <= v10);
      v11 = v2 << v6;
      if (v6 >= 0x40)
        v11 = 0;
      v2 = v11 + ((_DWORD)a1[7] & v10);
      ++v3;
    }
    while (v3 != v1);
    *(_QWORD *)(v4 + 2496) = v7;
  }
  else
  {
    v2 = 0;
  }
  v12 = a1[3];
  if (v1 < v12)
  {
    v13 = *a1;
    v14 = a1[6];
    v15 = a1[2];
    v16 = *(_QWORD *)(*a1 + 2496);
    do
    {
      do
      {
        v17 = v16;
        v16 = (v16 + 1) % 0x270;
        v18 = *(_DWORD *)(v13 + 4 * ((v17 + 397) % 0x270)) ^ ((*(_DWORD *)(v13 + 4 * v16) & 0x7FFFFFFE | *(_DWORD *)(v13 + 4 * v17) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v13 + 4 * v16) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v13 + 4 * v17) = v18;
        LODWORD(v17) = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
        v19 = ((_DWORD)v17 << 15) & 0xEFC60000 ^ v17 ^ ((((_DWORD)v17 << 15) & 0xEFC60000 ^ v17) >> 18);
      }
      while (v14 <= v19);
      v20 = v2 << (v15 + 1);
      if (v15 >= 0x3F)
        v20 = 0;
      v2 = v20 + (*((_DWORD *)a1 + 15) & v19);
      ++v1;
    }
    while (v1 != v12);
    *(_QWORD *)(v13 + 2496) = v16;
  }
  return v2;
}

char *sub_22F0C883C(char *result, char *a2, unsigned int *__b, unsigned int *a4)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;

  if (__b != a4)
  {
    v6 = result;
    v7 = (char *)a4 - (char *)__b;
    v8 = a4 - __b;
    if ((char *)a4 - (char *)__b >= 1)
    {
      if ((uint64_t)v8 <= 1)
        v9 = 1;
      else
        v9 = a4 - __b;
      memset(__b, 139, 4 * v9);
    }
    v10 = (a2 - v6) >> 2;
    v11 = 11;
    v12 = 7;
    v13 = 5;
    v14 = 3;
    v15 = v8 - 1;
    if (v7 <= 0x18)
      v14 = (v8 - 1) >> 1;
    if (v7 <= 0x98)
      v13 = v14;
    if (v7 <= 0x10C)
      v12 = v13;
    if (v7 <= 0x9B8)
      v11 = v12;
    v16 = (v8 - v11) >> 1;
    v17 = v11 + v16;
    v18 = v10 + 1;
    if (v10 + 1 > v8)
      v19 = v10 + 1;
    else
      v19 = v8;
    v20 = __b[v16];
    result = (char *)__b[v15];
    v21 = 1664525 * (*__b ^ result ^ v20 ^ ((*__b ^ result ^ v20) >> 27));
    __b[v16] = v21 + v20;
    v22 = v21 + ((unint64_t)(a2 - v6) >> 2);
    __b[v17] += v22;
    *__b = v22;
    v23 = v16 % v8;
    v24 = v17 % v8;
    if (a2 == v6)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v26 = 2;
      if (v18 > 2)
        v26 = v10 + 1;
      v27 = v26 - 1;
      do
      {
        if (v25 + 1 == v8)
          v25 = 0;
        else
          ++v25;
        if (v15 + 1 == v8)
          v15 = 0;
        else
          ++v15;
        if (v23 + 1 == v8)
          v23 = 0;
        else
          ++v23;
        if (v24 + 1 == v8)
          v24 = 0;
        else
          ++v24;
        v28 = __b[v23];
        v29 = 1664525 * (__b[v25] ^ __b[v15] ^ v28 ^ ((__b[v25] ^ __b[v15] ^ v28) >> 27));
        __b[v23] = v29 + v28;
        v30 = *(_DWORD *)v6;
        v6 += 4;
        v31 = v30 + v25 + v29;
        result = (char *)(v31 + __b[v24]);
        __b[v24] = result;
        __b[v25] = v31;
        --v27;
      }
      while (v27);
    }
    if (v18 < v8)
    {
      v32 = ~v10 + v19;
      do
      {
        if (v25 + 1 == v8)
          v25 = 0;
        else
          ++v25;
        if (v15 + 1 == v8)
          v15 = 0;
        else
          ++v15;
        if (v23 + 1 == v8)
          v23 = 0;
        else
          ++v23;
        if (v24 + 1 == v8)
          v24 = 0;
        else
          ++v24;
        v33 = __b[v23];
        v34 = __b[v25] ^ __b[v15] ^ v33;
        v35 = 1664525 * (v34 ^ (v34 >> 27));
        __b[v23] = v35 + v33;
        v36 = v35 + v25;
        __b[v24] += v36;
        __b[v25] = v36;
        --v32;
      }
      while (v32);
    }
    if (v19 < v19 + v8)
    {
      v37 = v8;
      do
      {
        if (v25 + 1 == v8)
          v25 = 0;
        else
          ++v25;
        if (v15 + 1 == v8)
          v15 = 0;
        else
          ++v15;
        if (v23 + 1 == v8)
          v23 = 0;
        else
          ++v23;
        if (v24 + 1 == v8)
          v24 = 0;
        else
          ++v24;
        v38 = __b[v23];
        v39 = v38 + __b[v25] + __b[v15];
        v40 = 1566083941 * (v39 ^ (v39 >> 27));
        __b[v23] = v40 ^ v38;
        v41 = v40 - v25;
        __b[v24] ^= v41;
        __b[v25] = v41;
        --v37;
      }
      while (v37);
    }
  }
  return result;
}

uint64_t sub_22F0C8AF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int16 **v6;
  char v7;
  const char *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  char v34;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = (unsigned __int16 **)(a1 + 8);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(_BYTE *)(a1 + 32) & 0x1C;
  *(_BYTE *)(a1 + 32) = v7;
  if ((_DWORD)a3 == HIDWORD(a3)
    || (v11 = sub_22F0C8DD4((int *)a1, a2),
        *(_QWORD *)(a1 + 8) = v11,
        *(_QWORD *)(a1 + 16) = v12,
        v7 = *(_BYTE *)(a1 + 32) | 1,
        *(_BYTE *)(a1 + 32) = v7,
        !v12))
  {
    v18 = v7 & 0xE3;
    goto LABEL_39;
  }
  v13 = *(unsigned __int8 *)(a4 + 24);
  v14 = 2;
  if (!*(_BYTE *)(a4 + 24))
    v14 = 3;
  if (v12 < v14 || *v11 != 47)
    goto LABEL_19;
  v15 = *((unsigned __int8 *)v11 + 1);
  if (v15 == 42)
  {
    if (v11[v12 - 2] == 42 && v11[v12 - 1] == 47)
    {
      v19 = *((unsigned __int8 *)v11 + 2);
      if (v19 == 42)
      {
        v17 = 5;
      }
      else
      {
        if (v19 != 33)
        {
          v20 = 2;
          if (v13)
            goto LABEL_48;
          goto LABEL_20;
        }
        v17 = 6;
      }
      goto LABEL_44;
    }
LABEL_19:
    v20 = 0;
    goto LABEL_20;
  }
  if (v15 != 47)
    goto LABEL_19;
  if (v12 < 3)
    goto LABEL_40;
  v16 = *((unsigned __int8 *)v11 + 2);
  if (v16 != 47)
  {
    if (v16 == 33)
    {
      v17 = 4;
      goto LABEL_44;
    }
LABEL_40:
    v20 = 1;
    if (v13)
      goto LABEL_48;
    goto LABEL_20;
  }
  v17 = 3;
LABEL_44:
  if (v12 < 4)
    v28 = 0;
  else
    v28 = (unint64_t)(v11[3] == 60) << 32;
  v20 = v28 | v17;
  if (v13)
  {
LABEL_48:
    if ((v20 - 1) <= 1)
    {
      v29 = sub_22E677168((uint64_t)a2, *(_DWORD *)a1);
      v30 = HIDWORD(v29);
      if (HIDWORD(v29))
      {
        sub_22F1E1E78(a2, v29, (uint64_t)&v33);
        if (v34)
        {
          while (v30)
          {
            v31 = word_22F4ADB24[*(unsigned __int8 *)(v33 - 1 + v30)];
            if ((v31 & 2) != 0)
              break;
            --v30;
            if ((v31 & 5) == 0)
            {
              v32 = 64;
              goto LABEL_56;
            }
          }
        }
        v32 = 0;
LABEL_56:
        *(_BYTE *)(a1 + 32) |= v32;
      }
    }
  }
LABEL_20:
  if ((a5 & 1) != 0)
  {
    v21 = *(_BYTE *)(a1 + 32);
    v22 = v21 | 0x1C;
    *(_BYTE *)(a1 + 32) = v21 | 0x1C;
    if ((v21 & 0x40) != 0)
    {
      v23 = 64;
    }
    else if (*(_QWORD *)(a1 + 16) < 4uLL)
    {
      v23 = 0;
    }
    else
    {
      v23 = (*((_BYTE *)*v6 + 3) == 60) << 6;
    }
    v26 = v22 & 0xBF;
  }
  else
  {
    v24 = *(_BYTE *)(a1 + 32) & 0xA3 | (4 * (v20 & 7)) | (*(_BYTE *)(a1 + 32) | (v20 >> 26)) & 0x40;
    *(_BYTE *)(a1 + 32) = v24;
    if (*(_QWORD *)(a1 + 16) >= 3uLL)
    {
      if (**v6 == 12079 && *((_BYTE *)*v6 + 2) == 60)
      {
        v23 = 0x80;
      }
      else if (**v6 ^ 0x2A2F | *((unsigned __int8 *)*v6 + 2) ^ 0x3C)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0x80;
      }
    }
    else
    {
      v23 = 0;
    }
    v26 = v24 & 0x7F;
  }
  v18 = v23 | v26;
LABEL_39:
  *(_BYTE *)(a1 + 32) = v18;
  return a1;
}

const char *sub_22F0C8DD4(int *a1, _QWORD *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  const char *v10;
  char v11;

  v4 = sub_22E677168((uint64_t)a2, *a1);
  v5 = v4;
  v6 = HIDWORD(v4);
  if (((sub_22E677168((uint64_t)a2, a1[1]) >> 32) - HIDWORD(v4)) < 2)
    return 0;
  sub_22F1E1E78(a2, v5, (uint64_t)&v10);
  if (v11)
    v7 = v10;
  else
    v7 = "<<<<<INVALID SOURCE LOCATION>>>>>";
  v8 = &v7[v6];
  if (v11)
    return v8;
  else
    return 0;
}

void *sub_22F0C8E74(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  void *v10;
  void *v11;
  const void *p_p;
  void *__p;
  int v15;
  char v16;
  _QWORD v17[2];
  int v18[6];
  _QWORD v19[7];
  int v20;
  __int16 v21;
  char v22;
  void *v23;
  __int128 v24;
  _BYTE v25[16];
  _QWORD v26[4];
  _QWORD v27[6];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v4 = *(const char **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v4 = sub_22F0C8DD4((int *)a1, *(_QWORD **)(a2 + 1992));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 32) |= 1u;
  }
  v26[0] = 0;
  v26[1] = 0;
  v26[2] = v27;
  v26[3] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0;
  v28[0] = 0;
  v28[1] = 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 1992) + 8);
  v7 = *(_DWORD *)a1;
  v19[0] = v26;
  v19[1] = v6;
  v19[2] = a2 + 16328;
  v19[3] = v4;
  v19[4] = &v4[v5];
  v19[5] = v4;
  v20 = v7;
  v21 = 1;
  v22 = 0;
  v23 = v25;
  v24 = xmmword_22F44E350;
  v17[0] = v19;
  v17[1] = a2 + 16328;
  v18[0] = 0;
  sub_22EFA92B0((uint64_t)v19, v18);
  sub_22EFA61F8((uint64_t)v17, (uint64_t)&__p);
  if (v16 >= 0)
    v8 = v16 & 0x7F;
  else
    v8 = v15;
  v9 = (v8 + 1);
  v10 = (void *)sub_22E3CD3D4(a2 + 2032, v9, 3);
  v11 = v10;
  if (v16 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  memcpy(v10, p_p, v9);
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) |= 2u;
  if (v16 < 0)
    operator delete(__p);
  if (v23 != v25)
    free(v23);
  sub_22E3B4EF4((uint64_t)v26);
  return v11;
}

uint64_t *sub_22F0C9020(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  BOOL v6;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v32;
  _DWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t **v43;
  __int128 v44;
  __int128 v45;
  char v46;
  int v47;
  int v48;

  v4 = *(unsigned __int8 *)(a2 + 32);
  if ((v4 & 0x1C) != 0)
  {
    v6 = ((v4 >> 2) & 7) - 1 <= 1 && *(_BYTE *)(a3 + 24) == 0;
    if (!v6)
    {
      v9 = result;
      v10 = (uint64_t)(result + 1);
      v11 = sub_22E677168(*result, *(_DWORD *)a2);
      v12 = HIDWORD(v11);
      v47 = HIDWORD(v11);
      v48 = v11;
      if (!*((_QWORD *)sub_22E793B04(v10, &v48) + 3))
        goto LABEL_41;
      v13 = sub_22E793B04(v10, &v48);
      v16 = (_QWORD *)*((_QWORD *)v13 + 2);
      v14 = v13 + 4;
      v15 = v16;
      if (v16)
      {
        do
        {
          v17 = v15;
          v15 = (_QWORD *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)*((_QWORD *)v14 + 2);
          v6 = *v17 == (_QWORD)v14;
          v14 = v17;
        }
        while (v6);
      }
      v18 = (int *)v17[5];
      v19 = *((unsigned __int8 *)v18 + 32);
      v20 = *(unsigned __int8 *)(a2 + 32);
      if (((v19 >> 6) & 1) != (v20 & 0x40) >> 6)
      {
        if ((v20 & 0x40) != 0)
          goto LABEL_41;
        if ((v19 & 0x40) == 0)
          goto LABEL_41;
        if (((v20 >> 2) & 7) - 1 > 1)
          goto LABEL_41;
        v21 = *v9;
        v22 = *(_DWORD *)a2;
        sub_22F1E2F68(*v9, *v18, 1, (uint64_t)&v44);
        if (!(_QWORD)v44)
          goto LABEL_41;
        v23 = v45;
        sub_22F1E2F68(v21, v22, 1, (uint64_t)&v44);
        if (!(_QWORD)v44 || v23 != (_DWORD)v45)
          goto LABEL_41;
      }
      v24 = (_QWORD *)*v9;
      v25 = *(_DWORD *)a2;
      v26 = sub_22E677168(*v9, v18[1]);
      v27 = sub_22E677168((uint64_t)v24, v25);
      if ((_DWORD)v26 != (_DWORD)v27 || (sub_22F1E1E78(v24, v26, (uint64_t)&v44), !(_BYTE)v45))
      {
LABEL_41:
        v40 = sub_22E3CD3D4(a4, 40, 3);
        v41 = *(_QWORD *)(a2 + 32);
        v42 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v40 = *(_OWORD *)a2;
        *(_OWORD *)(v40 + 16) = v42;
        *(_QWORD *)(v40 + 32) = v41;
        v43 = (uint64_t **)sub_22E793B04(v10, &v48);
        result = (uint64_t *)sub_22F0C9320(v43 + 1, v12, &v47);
        result[5] = v40;
        return result;
      }
      v28 = HIDWORD(v26);
      if (HIDWORD(v26) != HIDWORD(v27))
      {
        v29 = 0;
        do
        {
          v30 = *(char *)(v44 + v28);
          if (v30 > 0x20)
            goto LABEL_41;
          if (((1 << v30) & 0x100001A00) == 0)
          {
            if (((1 << v30) & 0x2400) == 0 || v29 != 0)
              goto LABEL_41;
            if ((_DWORD)v28 + 1 != HIDWORD(v27))
            {
              v32 = *(unsigned __int8 *)(v44 + (v28 + 1));
              if ((v32 == 13 || v32 == 10) && *(unsigned __int8 *)(v44 + v28) != v32)
                LODWORD(v28) = v28 + 1;
            }
            v29 = 1;
          }
          LODWORD(v28) = v28 + 1;
        }
        while ((_DWORD)v28 != HIDWORD(v27));
      }
      sub_22F0C8AF0((uint64_t)&v44, (_QWORD *)*v9, *v18 | ((unint64_t)*(unsigned int *)(a2 + 4) << 32), a3, 1);
      v33 = sub_22E793B04(v10, &v48);
      v35 = (uint64_t *)*((_QWORD *)v33 + 2);
      result = (uint64_t *)(v33 + 4);
      v34 = v35;
      if (v35)
      {
        do
        {
          v36 = v34;
          v34 = (uint64_t *)v34[1];
        }
        while (v34);
      }
      else
      {
        do
        {
          v36 = (uint64_t *)result[2];
          v6 = *v36 == (_QWORD)result;
          result = v36;
        }
        while (v6);
      }
      v37 = v36[5];
      v38 = v44;
      v39 = v45;
      *(_BYTE *)(v37 + 32) = v46;
      *(_OWORD *)v37 = v38;
      *(_OWORD *)(v37 + 16) = v39;
    }
  }
  return result;
}

uint64_t **sub_22F0C9320(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_22F0C93EC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 72);
  if (v1)
  {
    llvm::deallocate_buffer(*(llvm **)(v1 + 88), (void *)(24 * *(unsigned int *)(v1 + 104)));
    return llvm::deallocate_buffer(*(llvm **)(v1 + 64), (void *)(16 * *(unsigned int *)(v1 + 80)));
  }
  return result;
}

const void **sub_22F0C9440(const void **result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  const void **v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void **v14;
  char *v15;
  uint64_t v16;

  if (a4 != a3)
  {
    v5 = a3;
    v6 = result;
    v7 = a4 - a3;
    v8 = (char *)result[1];
    v9 = (unint64_t)result[2] & 0xFFFFFFFFFFFFFFF8;
    if (v7 > (uint64_t)(v9 - (_QWORD)v8) >> 3)
    {
      v10 = v8 - (_BYTE *)*result;
      v11 = (uint64_t)(v9 - (_QWORD)*result) >> 2;
      if (v11 <= v7 + (v10 >> 3))
        v12 = v7 + (v10 >> 3);
      else
        v12 = v11;
      v13 = 8 * v12;
      if (v12 >> 61)
        v13 = -1;
      result = (const void **)sub_22E3CD3D4(a2 + 2032, v13, 3);
      v14 = result;
      if (*v6 != v6[1])
        result = (const void **)memcpy(result, *v6, v10);
      *v6 = v14;
      v8 = (char *)&v14[v10 >> 3];
      v6[2] = (const void *)((unint64_t)v6[2] & 7 | (unint64_t)&v14[v12]);
    }
    v15 = v8;
    do
    {
      v16 = *v5++;
      *(_QWORD *)v15 = v16;
      v15 += 8;
    }
    while (v5 != a4);
    v6[1] = &v8[8 * v7];
  }
  return result;
}

uint64_t sub_22F0C9530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a11;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v25 = sub_22E3CD3D4(a2 + 2032, 112, 3);
  *(_QWORD *)(v25 + 48) = 0;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 72) = 0;
  *(_DWORD *)(v25 + 80) = 0;
  *(_QWORD *)(v25 + 88) = 0;
  *(_QWORD *)(v25 + 96) = 0;
  *(_DWORD *)(v25 + 104) = 0;
  *(_QWORD *)(a1 + 72) = v25;
  sub_22F0C9440((const void **)(a1 + 48), a2, a12, &a12[a13]);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = 4;
  if (!a18)
    v27 = 0;
  *(_QWORD *)(v26 + 48) = v27 | a17 & 0xFFFFFFFFFFFFFFFBLL | *(_QWORD *)(v26 + 48) & 3;
  *(_OWORD *)v26 = a14;
  *(_QWORD *)(v26 + 16) = a15;
  *(_QWORD *)(v26 + 24) = a16;
  if (v26 + 64 != a22)
  {
    sub_22E5D08E0(v26 + 64, a22);
    v26 = *(_QWORD *)(a1 + 72);
  }
  if (v26 + 88 == a23)
  {
    v30 = a8;
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)(v26 + 88), (void *)(24 * *(unsigned int *)(v26 + 104)));
    v28 = *(unsigned int *)(a23 + 16);
    *(_DWORD *)(v26 + 104) = v28;
    if ((_DWORD)v28)
    {
      v29 = (void *)MEMORY[0x23489D23C](24 * v28, 8);
      *(_QWORD *)(v26 + 88) = v29;
      *(_QWORD *)(v26 + 96) = *(_QWORD *)(a23 + 8);
      memcpy(v29, *(const void **)a23, 24 * *(unsigned int *)(v26 + 104));
    }
    else
    {
      *(_QWORD *)(v26 + 88) = 0;
      *(_QWORD *)(v26 + 96) = 0;
    }
    v30 = a8;
    v26 = *(_QWORD *)(a1 + 72);
  }
  *(_BYTE *)(v26 + 40) = *(_BYTE *)(v26 + 40) & 0xFE | v30;
  v31 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v31 + 32) = a10;
  if (a9)
    v32 = 2;
  else
    v32 = 0;
  *(_BYTE *)(v31 + 40) = *(_BYTE *)(v31 + 40) & 0xFD | v32;
  v33 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v33 + 56) = a19;
  if (a20)
    v34 = 4;
  else
    v34 = 0;
  *(_BYTE *)(v33 + 40) = *(_BYTE *)(v33 + 40) & 0xFB | v34;
  if (a21)
    v35 = 8;
  else
    v35 = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 72) + 40) = *(_BYTE *)(*(_QWORD *)(a1 + 72) + 40) & 0xF7 | v35;
  return a1;
}

uint64_t sub_22F0C975C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  unsigned int v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  _QWORD *v128;
  _QWORD *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  const void *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  void *v197;
  void **v198;
  uint64_t *v199;
  void **v200;
  uint64_t v201;
  void **v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  void *v213;
  int v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  void **v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  _WORD *v233;
  uint64_t v234;
  const void **v235;
  const void **v236;
  const void **v237;
  const void *v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  void **v247;
  unsigned int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  int v264;
  int v265;
  unint64_t v266;
  int v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  char v280;
  llvm *v281;
  void *v282;
  uint64_t *v283;
  llvm::raw_ostream *v285;
  void *v286;
  unint64_t v287;
  llvm::raw_ostream *v288;
  uint64_t v289;
  uint64_t *v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  int v299;
  _BYTE v300[16];
  _BYTE *v301;
  _BYTE *v302;
  uint64_t v303;
  int v304;
  _BYTE v305[16];
  uint64_t *v306;
  __int128 v307;
  llvm *v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD v313[7];
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  _BYTE v321[72];
  char v322;
  __int16 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  unsigned int v334;
  llvm *v335[2];
  unsigned int v336;
  llvm *v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  _BYTE *v341;
  _BYTE *v342;
  uint64_t v343;
  int v344;
  _BYTE v345[32];
  __int128 v346;
  __int128 v347;
  int v348;
  __int128 v349;
  int v350;
  __int128 v351;
  int v352;
  __int128 v353;
  _BYTE *v354;
  uint64_t v355;
  _BYTE v356[32];
  char *v357;
  __int128 v358;
  _QWORD v359[4];
  __int128 v360;
  int v361;
  uint64_t v362;

  v362 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a2 + 72) & 0x80) != 0 && !sub_22EFC3500(a2))
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 16048) + 136))(*(_QWORD *)(a1 + 16048), a2);
  v4 = sub_22EFC3500(a2);
  v295 = v4;
  v5 = a1 + 928;
  v6 = sub_22F0D28FC(a1 + 928, (uint64_t *)&v295)[1];
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 15088);
    if (*(_DWORD *)(v7 + 148) == 11)
    {
      memset(&v313[1], 0, 48);
      v314 = 0u;
      v315 = 0u;
      v313[0] = a1;
      v316 = 0;
      v319 = v321;
      v320 = 0x1000000000;
      v328 = 0;
      *((_QWORD *)&v327 + 1) = 0;
      LODWORD(v329) = 0;
      v330 = 0;
      *((_QWORD *)&v329 + 1) = 0;
      LODWORD(v331) = 0;
      v332 = 0u;
      v333 = 0u;
      v334 = 0;
      v335[1] = 0;
      v335[0] = 0;
      v336 = 0;
      v339 = 0;
      v338 = 0;
      v337 = 0;
      if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
      {
        *(_QWORD *)&v315 = 4;
        sub_22F0CD204(v313, v4);
        sub_22F0CD390(v313, v4);
        v33 = v313[0];
        v313[1] = (unint64_t)(v313[1] + v313[4] - 1) / v313[4] * v313[4];
        v313[3] = v313[1];
        v34 = sub_22EFC8A80(v4);
        v35 = v34 / sub_22EF5CDF0(v33, *(_QWORD *)(*(_QWORD *)(v33 + 16408) & 0xFFFFFFFFFFFFFFF0));
        if (v313[6] > v35)
          v35 = v313[6];
        v313[6] = v35;
        sub_22F0CD7C0((unint64_t)v313, v4);
        v6 = sub_22E3CD3D4(a1 + 2032, 80, 3);
        v36 = v313[1];
        v37 = v313[4];
        v38 = v313[6];
        v39 = (uint64_t *)v319;
        v40 = v320;
        *(_QWORD *)v6 = v313[1];
        *(_QWORD *)(v6 + 8) = v36;
        *(_QWORD *)(v6 + 16) = v37;
        *(_QWORD *)(v6 + 24) = v37;
        *(_QWORD *)(v6 + 32) = v37;
        *(_QWORD *)(v6 + 40) = v38;
        *(_OWORD *)(v6 + 64) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        sub_22F0C9440((const void **)(v6 + 48), a1, v39, &v39[v40]);
        goto LABEL_159;
      }
      *(_QWORD *)&v315 = 1;
      sub_22F0CD204(v313, v4);
      BYTE12(v331) &= 0xC3u;
      v317 = 0;
      v318 = 0;
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v313[0] + 15088) + *(_QWORD *)(**(_QWORD **)(v313[0] + 15088) - 24));
      *((_QWORD *)&v315 + 1) = v8
                             / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
      v9 = *(unsigned __int8 *)(*(_QWORD *)(v313[0] + 15088)
                              + *(_QWORD *)(**(_QWORD **)(v313[0] + 15088) - 24)
                              + 1);
      v10 = v9 / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
      v316 = v10;
      if (v313[5])
      {
        if (v313[5] < v10)
          v10 = v313[5];
        v316 = v10;
      }
      v306 = 0;
      v11 = sub_22E46A3A0(v4);
      if (v11 == v12)
      {
        LOBYTE(v15) = 0;
      }
      else
      {
        v13 = v11;
        v14 = v12;
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(**(_QWORD **)(v13 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
            v16 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v13 + 16));
          v17 = sub_22F10C2A4(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0));
          if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 >= 3)
            v18 = 0;
          else
            v18 = v17;
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
          v19 = **(_QWORD **)(v18 + 128);
          v20 = (_QWORD *)sub_22F0C975C(v313[0], v18);
          if ((*(_BYTE *)(v13 + 12) & 1) != 0)
          {
            BYTE12(v331) |= 8u;
          }
          else
          {
            if (!v318 && (*(_QWORD *)(v20[9] + 32) & 0x8000000000000000) == 0)
            {
              v318 = v18;
              BYTE12(v331) |= 8u;
            }
            v21 = v20[9];
            if ((*(_BYTE *)(v21 + 40) & 2) != 0)
            {
              if (!v317)
              {
                v317 = v18;
                BYTE12(v331) = BYTE12(v331) & 0xDF | (4 * *(_BYTE *)(v21 + 40)) & 0x20;
              }
              sub_22F0CD8C4((uint64_t)v313, v4, v18, v20, (uint64_t)&v306);
            }
          }
          v15 |= (v19 >> 10) & 1;
          v13 += 24;
        }
        while (v13 != v14);
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
      if ((**(_QWORD **)(v4 + 128) & 0x400) != 0)
      {
        if ((v15 & 1) == 0)
        {
LABEL_99:
          BYTE12(v331) |= 4u;
          goto LABEL_100;
        }
        if (!v317)
        {
          v52 = sub_22E488FF8(v4);
          if (v52 != v53)
          {
            v54 = v52;
            v55 = v53;
            while (!sub_22F40BECC((_QWORD *)v54) || sub_22EFD7260(v54))
            {
              do
                v54 = *(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v54 && (*(_DWORD *)(v54 + 28) & 0x7Eu) - 54 > 3);
              if (v54 == v55)
                goto LABEL_100;
            }
            goto LABEL_99;
          }
        }
      }
LABEL_100:
      v73 = v317;
      v74 = sub_22E46A3A0(v4);
      if (v74 != v75)
      {
        v76 = v74;
        v77 = v75;
        v78 = v73 == 0;
        do
        {
          if ((*(_BYTE *)(v76 + 12) & 1) == 0)
          {
            v301 = 0;
            v79 = *(_QWORD *)(**(_QWORD **)(v76 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v79 + 8) & 0xF) != 0)
              v79 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v76 + 16));
            v80 = sub_22F10C2A4(*(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF0));
            if (v80)
            {
              if ((*(_DWORD *)(v80 + 28) & 0x7Fu) - 35 >= 3)
                v81 = 0;
              else
                v81 = v80;
            }
            else
            {
              v81 = 0;
            }
            v301 = (_BYTE *)v81;
            v82 = (_QWORD *)sub_22F0C975C(v313[0], v81);
            if ((*(_BYTE *)(v82[9] + 40) & 2) == 0)
            {
              if (v78)
                BYTE12(v331) = BYTE12(v331) & 0xDF | (4 * *(_BYTE *)(v82[9] + 40)) & 0x20;
              sub_22F0CD8C4((uint64_t)v313, v4, (uint64_t)v301, v82, (uint64_t)&v306);
              v78 = 0;
            }
            *((_QWORD *)&v314 + 1) = sub_22E46A9CC((uint64_t *)&v327 + 1, &v301)[1] + *(_QWORD *)v82[9];
          }
          v76 += 24;
        }
        while (v76 != v77);
      }
      if ((BYTE12(v331) & 8) != 0)
      {
        if (!v318)
          goto LABEL_121;
        v84 = sub_22F0C975C(v313[0], v318);
        v83 = sub_22E46A9CC((uint64_t *)&v327 + 1, &v318)[1] + *(_QWORD *)(*(_QWORD *)(v84 + 72) + 32);
      }
      else
      {
        v83 = -1;
      }
      *((_QWORD *)&v314 + 1) = v83;
LABEL_121:
      sub_22F0CD390(v313, v4);
      if ((BYTE12(v331) & 8) != 0 && !v318)
      {
        v85 = *((_QWORD *)&v314 + 1);
        v86 = (*((_QWORD *)&v314 + 1) + v316 - 1) / (unint64_t)v316;
        *((_QWORD *)&v314 + 1) = v86 * v316;
        v87 = *((_QWORD *)&v315 + 1) + v86 * v316;
        if ((BYTE12(v331) & 0x40) != 0)
        {
          if (v313[1] < v87)
            v313[1] = *((_QWORD *)&v315 + 1) + v86 * v316;
        }
        else
        {
          v88 = v313[6];
          if (v313[6] <= v313[4])
            v88 = v313[4];
          v89 = (v87 + ~v85 + v88) / v88 * v88;
          v313[1] += v89;
          if ((_DWORD)v320)
          {
            v90 = v319;
            v91 = 8 * v320;
            do
            {
              *v90++ += sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0)) * v89;
              v91 -= 8;
            }
            while (v91);
          }
          v92 = *((_QWORD *)&v327 + 1) + 16 * v329;
          if ((_DWORD)v328)
          {
            if ((_DWORD)v329)
            {
              v93 = 16 * v329;
              v94 = (_QWORD *)*((_QWORD *)&v327 + 1);
              while ((*v94 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v94 += 2;
                v93 -= 16;
                if (!v93)
                  goto LABEL_134;
              }
            }
            else
            {
              v94 = (_QWORD *)*((_QWORD *)&v327 + 1);
            }
          }
          else
          {
LABEL_134:
            v94 = (_QWORD *)(*((_QWORD *)&v327 + 1) + 16 * v329);
          }
          v159 = *((_QWORD *)&v327 + 1) + 16 * v329;
LABEL_258:
          while (v94 != (_QWORD *)v159)
          {
            v160 = v94[1];
            if (v160 >= v85)
              v94[1] = v160 + v89;
            v161 = v94 + 2;
            v94 = (_QWORD *)v92;
            if (v161 != (_QWORD *)v92)
            {
              v94 = v161;
              while ((*v94 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v94 += 2;
                if (v94 == (_QWORD *)v92)
                {
                  v94 = (_QWORD *)v92;
                  goto LABEL_258;
                }
              }
            }
          }
        }
      }
      if ((BYTE12(v331) & 4) != 0)
      {
        v104 = v313[6];
        if (v313[6] <= v313[4])
          v104 = v313[4];
        v105 = (v104 + *((_QWORD *)&v315 + 1) - 1) / v104 * v104;
        if ((BYTE12(v331) & 8) != 0)
          *((_QWORD *)&v314 + 1) += v105;
        if ((BYTE12(v331) & 0x40) != 0)
        {
          if (!(v320 | v328))
            v313[1] += v105;
        }
        else
        {
          v313[1] += v105;
          if ((_DWORD)v320)
          {
            v106 = v319;
            v107 = 8 * v320;
            do
            {
              *v106++ += sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0))
                       * v105;
              v107 -= 8;
            }
            while (v107);
          }
          v108 = *((_QWORD *)&v327 + 1) + 16 * v329;
          if ((_DWORD)v328)
          {
            if ((_DWORD)v329)
            {
              v109 = 16 * v329;
              v110 = (_QWORD *)*((_QWORD *)&v327 + 1);
              while ((*v110 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v110 += 2;
                v109 -= 16;
                if (!v109)
                  goto LABEL_174;
              }
            }
            else
            {
              v110 = (_QWORD *)*((_QWORD *)&v327 + 1);
            }
          }
          else
          {
LABEL_174:
            v110 = (_QWORD *)(*((_QWORD *)&v327 + 1) + 16 * v329);
          }
          v157 = *((_QWORD *)&v327 + 1) + 16 * v329;
LABEL_250:
          while (v110 != (_QWORD *)v157)
          {
            v110[1] += v105;
            v158 = v110 + 2;
            v110 = (_QWORD *)v108;
            if (v158 != (_QWORD *)v108)
            {
              v110 = v158;
              while ((*v110 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v110 += 2;
                if (v110 == (_QWORD *)v108)
                {
                  v110 = (_QWORD *)v108;
                  goto LABEL_250;
                }
              }
            }
          }
        }
      }
      if ((BYTE12(v331) & 4) != 0 || (BYTE12(v331) & 8) != 0 && !v318)
      {
        v95 = v313[4];
        if (v313[4] <= v316)
          v95 = v316;
        v313[4] = v95;
      }
      v96 = v313[1];
      if ((BYTE12(v331) & 0x40) == 0)
      {
        if (v313[5] >= v313[4])
          v97 = v313[4];
        else
          v97 = v313[5];
        if (v313[5])
          v98 = v97;
        else
          v98 = v313[4];
        v96 = (v313[1] + v98 - 1) / v98 * v98;
        v313[1] = v96;
      }
      v313[2] = v96;
      v99 = v313[0];
      v100 = sub_22EFC8A80(v4);
      v101 = v100 / sub_22EF5CDF0(v99, *(_QWORD *)(*(_QWORD *)(v99 + 16408) & 0xFFFFFFFFFFFFFFF0));
      if (v313[6] > v101)
        v101 = v313[6];
      v313[6] = v101;
      if ((BYTE12(v331) & 8) == 0)
        goto LABEL_155;
      if (v313[5] >= 4)
        v152 = 4;
      else
        v152 = v313[5];
      if (v313[5])
        v153 = v152;
      else
        v153 = 4;
      v154 = sub_22E483108(v4);
      if (v154 == v155)
      {
        v156 = v313[6];
      }
      else
      {
        v162 = v154;
        v163 = v155;
        do
        {
          v164 = *(_QWORD *)(**(_QWORD **)(v162 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v164 + 8) & 0xF) != 0)
            v164 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v162 + 16));
          v165 = sub_22F10C2A4(*(_QWORD *)(v164 & 0xFFFFFFFFFFFFFFF0));
          if (v165)
          {
            if ((*(_DWORD *)(v165 + 28) & 0x7Fu) - 35 >= 3)
              v166 = 0;
            else
              v166 = v165;
          }
          else
          {
            v166 = 0;
          }
          v156 = *(_QWORD *)(sub_22F0C975C(v313[0], v166) + 40);
          if (v313[6] > v156)
            v156 = v313[6];
          v313[6] = v156;
          v162 += 24;
        }
        while (v162 != v163);
      }
      if (v153 > v156)
        v156 = v153;
      v293 = v156;
      v296 = v300;
      v297 = v300;
      v298 = 2;
      v299 = 0;
      if (sub_22F3E883C(v4) == 2)
      {
        v167 = sub_22E483108(v4);
        if (v167 != v168)
        {
          v169 = v167;
          v170 = v168;
          do
          {
            v171 = *(_QWORD *)(**(_QWORD **)(v169 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v171 + 8) & 0xF) != 0)
              v171 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v169 + 16));
            v172 = sub_22F10C2A4(*(_QWORD *)(v171 & 0xFFFFFFFFFFFFFFF0));
            if (v172)
            {
              if ((*(_DWORD *)(v172 + 28) & 0x7Fu) - 35 >= 3)
                v173 = 0;
              else
                v173 = (const void *)v172;
            }
            else
            {
              v173 = 0;
            }
            if ((*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(v313[0], v173) + 72) + 40) & 2) != 0)
              sub_22E3BA850((uint64_t)&v296, v173);
            v169 += 24;
          }
          while (v169 != v170);
        }
LABEL_321:
        v190 = sub_22E483108(v4);
        v294 = v191;
        if (v190 == v191)
        {
LABEL_368:
          if (v297 != v296)
            free(v297);
LABEL_155:
          sub_22F0CD7C0((unint64_t)v313, v4);
          v102 = sub_22E3CD3D4(a1 + 2032, 80, 3);
          v6 = v102;
          if (v317)
            v103 = 1;
          else
            v103 = (BYTE12(v331) & 4) != 0;
          *((_QWORD *)&v291 + 1) = v313[4];
          *(_QWORD *)&v291 = v313[2];
          sub_22F0C9530(v102, a1, v313[1], v313[4], v313[4], v313[4], v313[6], (BYTE12(v331) & 4) != 0, v103, *((uint64_t *)&v314 + 1), v313[3], (uint64_t *)v319, v320, v291, v313[4], 0, v317, 0, v318,
            (BYTE12(v331) & 0x10) != 0,
            (BYTE12(v331) & 0x20) != 0,
            (uint64_t)&v327 + 8,
            (uint64_t)&v329 + 8);
          v5 = a1 + 928;
LABEL_159:
          llvm::deallocate_buffer(v337, (void *)(16 * v339));
          llvm::deallocate_buffer(v335[0], (void *)(16 * v336));
          llvm::deallocate_buffer((llvm *)v333, (void *)(16 * v334));
          llvm::deallocate_buffer(*((llvm **)&v329 + 1), (void *)(24 * v331));
          llvm::deallocate_buffer(*((llvm **)&v327 + 1), (void *)(16 * v329));
          if (v319 != v321)
            free(v319);
          goto LABEL_491;
        }
        v192 = v190;
        v193 = 0;
        while (1)
        {
          v194 = v193;
          v195 = *(_QWORD *)(**(_QWORD **)(v192 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v195 + 8) & 0xF) != 0)
            v195 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v192 + 16));
          v196 = sub_22F10C2A4(*(_QWORD *)(v195 & 0xFFFFFFFFFFFFFFF0));
          if (v196)
          {
            if ((*(_DWORD *)(v196 + 28) & 0x7Fu) - 35 >= 3)
              v197 = 0;
            else
              v197 = (void *)v196;
          }
          else
          {
            v197 = 0;
          }
          v193 = (_QWORD *)sub_22F0C975C(v313[0], v197);
          v198 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v296, v197);
          if (v297 == v296)
            v199 = (uint64_t *)((char *)&v298 + 4);
          else
            v199 = &v298;
          v200 = (void **)&v297[8 * *(unsigned int *)v199];
          if (v194
            && (v201 = v194[9]) != 0
            && (*(_BYTE *)(v201 + 40) & 4) != 0
            && (*(_BYTE *)(v193[9] + 40) & 8) != 0
            && (v202 = v198, v203 = sub_22F0CDA64(v4), v198 = v202, !v203)
            || v198 != v200)
          {
            v204 = v313[4];
            if (v293 > v313[4])
              v204 = v293;
            v313[1] = (v293 - 1 + v313[1]) / (unint64_t)v293 * v293 + 4;
            v313[4] = v204;
          }
          v205 = v193[2];
          v206 = v193[9];
          if (v206)
            LOBYTE(v206) = (4 * *(_BYTE *)(v206 + 40)) & 0x10;
          if (v313[5] >= v205)
            v207 = v193[2];
          else
            v207 = v313[5];
          if (v313[5])
            v205 = v207;
          v208 = BYTE12(v331);
          BYTE12(v331) = BYTE12(v331) & 0xEF | v206;
          v209 = v313[4];
          v210 = v313[6];
          if (v313[4] <= v205)
            v209 = v205;
          if (v313[6] <= (uint64_t)v193[5])
            v210 = v193[5];
          v313[4] = v209;
          v313[6] = v210;
          if ((v208 & 0x40) == 0)
          {
            if (v205 <= v193[5])
              v205 = v193[5];
            v211 = (v205 + v313[1] - 1) / (unint64_t)v205 * v205;
            goto LABEL_362;
          }
          if (v339)
          {
            v212 = (v339 - 1) & ((v197 >> 4) ^ (v197 >> 9));
            v213 = (void *)*((_QWORD *)v337 + 2 * v212);
            if (v197 == v213)
            {
LABEL_359:
              if ((_DWORD)v212 != v339)
              {
                v211 = *((_QWORD *)v337 + 2 * v212 + 1);
                goto LABEL_362;
              }
            }
            else
            {
              v214 = 1;
              while (v213 != (void *)-4096)
              {
                v215 = v212 + v214++;
                v212 = v215 & (v339 - 1);
                v213 = (void *)*((_QWORD *)v337 + 2 * v212);
                if (v197 == v213)
                  goto LABEL_359;
              }
            }
          }
          v211 = v313[1];
LABEL_362:
          v306 = (uint64_t *)v197;
          *(_QWORD *)&v307 = v211;
          BYTE8(v307) = v198 != v200;
          sub_22F3F0F78((uint64_t)&v301, (uint64_t)&v329 + 8, &v306, &v307);
          v313[1] = *(_QWORD *)v193[9] + v211;
          v192 += 24;
          if (v192 == v294)
            goto LABEL_368;
        }
      }
      v174 = sub_22E46A3A0(v4);
      if (v174 != v175)
      {
        v176 = v174;
        v177 = v175;
        do
        {
          v178 = *(_QWORD *)(**(_QWORD **)(v176 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v178 + 8) & 0xF) != 0)
            v178 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v176 + 16));
          v179 = sub_22F10C2A4(*(_QWORD *)(v178 & 0xFFFFFFFFFFFFFFF0));
          if (v179)
          {
            if ((*(_DWORD *)(v179 + 28) & 0x7Fu) - 35 >= 3)
              v180 = 0;
            else
              v180 = v179;
          }
          else
          {
            v180 = 0;
          }
          v181 = *(_QWORD *)(sub_22F0C975C(v313[0], v180) + 72);
          v182 = *(_DWORD *)(v181 + 96);
          v183 = *(_QWORD *)(v181 + 88);
          v184 = *(unsigned int *)(v181 + 104);
          v185 = v183 + 24 * v184;
          if (v182)
          {
            if (v184)
            {
              v186 = 24 * v184;
              v187 = v183;
              while ((*(_QWORD *)v187 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v187 += 24;
                v186 -= 24;
                if (!v186)
                  goto LABEL_307;
              }
            }
            else
            {
              v187 = v183;
            }
          }
          else
          {
LABEL_307:
            v187 = v183 + 24 * v184;
          }
          v188 = v183 + 24 * v184;
LABEL_310:
          while (v187 != v188)
          {
            if (*(_BYTE *)(v187 + 16))
              sub_22E3BA850((uint64_t)&v296, *(const void **)v187);
            v189 = v187 + 24;
            v187 = v185;
            if (v189 != v185)
            {
              v187 = v189;
              while ((*(_QWORD *)v187 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v187 += 24;
                if (v187 == v185)
                {
                  v187 = v185;
                  goto LABEL_310;
                }
              }
            }
          }
          v176 += 24;
        }
        while (v176 != v177);
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
      if ((**(_QWORD **)(v4 + 128) & 1) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
        if ((**(_QWORD **)(v4 + 128) & 0x40) == 0)
          goto LABEL_321;
      }
      if (!sub_22F3E883C(v4))
        goto LABEL_321;
      v306 = &v309;
      *(_QWORD *)&v307 = &v309;
      *((_QWORD *)&v307 + 1) = 8;
      LODWORD(v308) = 0;
      v301 = v305;
      v302 = v305;
      v303 = 2;
      v304 = 0;
      v216 = sub_22E488FF8(v4);
      if (v216 != v217)
      {
        v218 = v216;
        v219 = v217;
        do
        {
          if (sub_22F40BECC((_QWORD *)v218)
            && (*(_DWORD *)(v218 + 28) & 0x7F) != 0x39
            && (*(_BYTE *)(v218 + 82) & 8) == 0)
          {
            sub_22E3BA850((uint64_t)&v306, (const void *)v218);
          }
          do
            v218 = *(_QWORD *)(v218 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v218 && (*(_DWORD *)(v218 + 28) & 0x7Eu) - 54 > 3);
        }
        while (v218 != v219);
      }
      LODWORD(v220) = HIDWORD(v307);
      if (HIDWORD(v307) == (_DWORD)v308)
      {
LABEL_382:
        v221 = sub_22E483108(v4);
        if (v221 != v222)
        {
          v223 = v221;
          v224 = v222;
          do
          {
            v225 = *(_QWORD *)(**(_QWORD **)(v223 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v225 + 8) & 0xF) != 0)
              v225 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v223 + 16));
            v226 = sub_22F10C2A4(*(_QWORD *)(v225 & 0xFFFFFFFFFFFFFFF0));
            if (v226)
            {
              if ((*(_DWORD *)(v226 + 28) & 0x7Fu) - 35 >= 3)
                v227 = 0;
              else
                v227 = (void *)v226;
            }
            else
            {
              v227 = 0;
            }
            v228 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v296, v227);
            if (v297 == v296)
              v229 = (uint64_t *)((char *)&v298 + 4);
            else
              v229 = &v298;
            if (v228 == (void **)&v297[8 * *(unsigned int *)v229]
              && sub_22F0CDDE8((unsigned int *)&v301, v227))
            {
              sub_22E3BA850((uint64_t)&v296, v227);
            }
            v223 += 24;
          }
          while (v223 != v224);
        }
        if (v302 != v301)
          free(v302);
        if ((uint64_t *)v307 != v306)
          free((void *)v307);
        goto LABEL_321;
      }
      while (1)
      {
        v230 = (uint64_t *)v307;
        if ((uint64_t *)v307 == v306)
          v220 = v220;
        else
          v220 = DWORD2(v307);
        if ((_DWORD)v220)
        {
          v231 = 8 * v220;
          v232 = (uint64_t *)(v307 + 8 * v220);
          while ((unint64_t)*v230 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v230;
            v231 -= 8;
            if (!v231)
            {
              v230 = v232;
              break;
            }
          }
        }
        v233 = (_WORD *)*v230;
        v234 = sub_22EFD7394(*v230);
        if ((const void **)v234 == v235)
          break;
        v236 = (const void **)v234;
        v237 = v235;
        do
        {
          v238 = *v236++;
          sub_22E3BA850((uint64_t)&v306, v238);
        }
        while (v236 != v237);
LABEL_437:
        v247 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v306, v233);
        LODWORD(v220) = HIDWORD(v307);
        if ((uint64_t *)v307 == v306)
          v248 = HIDWORD(v307);
        else
          v248 = DWORD2(v307);
        v249 = (int)v308;
        if (v247 != (void **)(v307 + 8 * v248))
        {
          *v247 = (void *)-2;
          LODWORD(v308) = ++v249;
          LODWORD(v220) = HIDWORD(v307);
        }
        if ((_DWORD)v220 == v249)
          goto LABEL_382;
      }
      v239 = v233[40] & 0x7F;
      v240 = -40;
      if (v239 > 0x46)
      {
        if (v239 != 83)
        {
          if (v239 == 71)
          {
            v240 = -56;
            goto LABEL_431;
          }
          if (v239 == 81)
            goto LABEL_431;
LABEL_425:
          v241 = v239 - 52;
          v242 = v239 - 33 >= 5;
          v243 = -64;
          if (v242)
            v243 = -48;
          v242 = v241 >= 6;
          v240 = -72;
          if (v242)
            v240 = v243;
        }
      }
      else
      {
        if (v239 > 0x18)
          goto LABEL_424;
        if (v239 != 16)
        {
          if (((1 << v239) & 0x1066) != 0)
            goto LABEL_431;
          if (v239 != 24)
          {
LABEL_424:
            if (v239 == 70)
            {
              v240 = -64;
              goto LABEL_431;
            }
            goto LABEL_425;
          }
        }
        v240 = -48;
      }
LABEL_431:
      v244 = *(_QWORD *)((char *)v233 + v240 + 88);
      v245 = (_QWORD *)(v244 & 0xFFFFFFFFFFFFFFF8);
      if ((v244 & 4) != 0)
        v245 = (_QWORD *)*v245;
      if (v245)
        v246 = v245 - 8;
      else
        v246 = 0;
      sub_22E3BA850((uint64_t)&v301, v246);
      goto LABEL_437;
    }
    if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
    {
      *(_OWORD *)&v313[1] = 0u;
      *(int64x2_t *)&v313[3] = vdupq_n_s64(1uLL);
      *(_OWORD *)&v313[5] = *(_OWORD *)&v313[3];
      v313[0] = a1;
      *(_QWORD *)&v314 = &v315;
      *((_QWORD *)&v314 + 1) = 0x1000000000;
      v41 = v322;
      v322 &= 0xE0u;
      v322 = v41 & 0x80 | (32 * (*(_DWORD *)(v7 + 68) != 21));
      v323 = 0;
      v325 = 0u;
      v324 = 0;
      v326 = *(_OWORD *)&v313[3];
      LODWORD(v328) = 0;
      v327 = 0u;
      LODWORD(v330) = 0;
      v329 = 0u;
      v331 = 0u;
      LODWORD(v332) = 0;
      *((_QWORD *)&v332 + 1) = v335;
      *(_QWORD *)&v333 = v335;
      *((_QWORD *)&v333 + 1) = 32;
      v334 = 0;
      v340 = 0;
      v341 = v345;
      v342 = v345;
      v343 = 4;
      v344 = 0;
      v346 = 0u;
      v347 = 0u;
      v348 = 0;
      v350 = 0;
      v349 = 0u;
      v351 = 0u;
      v352 = 0;
      v353 = 0u;
      v354 = v356;
      v355 = 0x400000000;
      v357 = (char *)&v358 + 8;
      memset(v359, 0, 28);
      v358 = 0u;
      v360 = 0u;
      v361 = 0;
      sub_22F0CDECC(v313, v4);
      sub_22F0CE24C(v313, v4);
      sub_22F0CE4B8(v313, v4);
      v6 = sub_22E3CD3D4(a1 + 2032, 80, 3);
      v42 = v313[2];
      v43 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
      v44 = v313[3];
      v45 = v313[4];
      v46 = v313[6];
      v47 = v313[2];
      v48 = v42 / v43;
      v49 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
      v50 = (uint64_t *)v314;
      v51 = DWORD2(v314);
      *(_QWORD *)v6 = v48;
      *(_QWORD *)(v6 + 8) = v47 / v49;
      *(_QWORD *)(v6 + 16) = v44;
      *(_QWORD *)(v6 + 24) = v45;
      *(_QWORD *)(v6 + 32) = v46;
      *(_QWORD *)(v6 + 40) = v44;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      sub_22F0C9440((const void **)(v6 + 48), a1, v50, &v50[v51]);
      sub_22F0CB788((uint64_t)v313);
      v5 = a1 + 928;
LABEL_491:
      v283 = sub_22F0D28FC(v5, (uint64_t *)&v295);
      v283[1] = v6;
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 140) & 0x1000000000) != 0)
      {
        v285 = (llvm::raw_ostream *)llvm::outs((llvm *)v283);
        v286 = (void *)*((_QWORD *)v285 + 4);
        if (*((_QWORD *)v285 + 3) - (_QWORD)v286 > 0x1EuLL)
        {
          qmemcpy(v286, "\n*** Dumping AST Record Layout\n", 31);
          *((_QWORD *)v285 + 4) += 31;
        }
        else
        {
          v285 = (llvm::raw_ostream *)llvm::raw_ostream::write(v285, "\n*** Dumping AST Record Layout\n");
        }
        v287 = v295;
        v288 = (llvm::raw_ostream *)llvm::outs(v285);
        sub_22F3F0BD4((_QWORD *)a1, v287, v288, (*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 140) & 0x2000000000) != 0);
      }
      return v6;
    }
    v306 = (uint64_t *)a1;
    *(_QWORD *)&v307 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    *((_QWORD *)&v307 + 1) = v4;
    v308 = 0;
    v309 = 0;
    v310 = 0;
    v311 = 0;
    v312 = 0;
    v22 = sub_22E46A3A0(v4);
    if (v22 == v23)
    {
      v26 = 0;
    }
    else
    {
      v24 = v22;
      v25 = v23;
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(**(_QWORD **)(v24 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
          v27 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v24 + 16));
        v28 = sub_22F10C2A4(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0));
        if (v28)
        {
          if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3)
            v29 = 0;
          else
            v29 = v28;
        }
        else
        {
          v29 = 0;
        }
        v30 = sub_22F0C975C(a1, v29);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v29 + 104) + 96), *(_QWORD *)(v29 + 104));
        if ((**(_QWORD **)(v29 + 128) & 0x200) != 0)
          v31 = (uint64_t *)v30;
        else
          v31 = (uint64_t *)(*(_QWORD *)(v30 + 72) + 24);
        v32 = *v31;
        if (v32 > v26)
        {
          v312 = v32;
          v26 = v32;
        }
        v24 += 24;
      }
      while (v24 != v25);
    }
    v56 = sub_22EFC3B90(v4);
    if (v56)
    {
      v57 = v56;
LABEL_67:
      v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(a1, *(_QWORD *)(v57 + 48)) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v58 && *(_BYTE *)(v58 + 16) == 45)
      {
        v59 = sub_22F10C2A4(v58);
        if (v59)
          v60 = (*(_DWORD *)(v59 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v59;
        else
          v60 = 0;
        v61 = sub_22F0C975C(a1, v60);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v60 + 104) + 96), *(_QWORD *)(v60 + 104));
        v62 = (uint64_t *)((**(_QWORD **)(v60 + 128) & 0x200) != 0 ? v61 : *(_QWORD *)(v61 + 72) + 24);
        v63 = *v62;
        if (v63 > v26)
        {
          v312 = v63;
          v26 = v63;
        }
      }
      while (1)
      {
        v57 = *(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v57)
          break;
        if ((*(_DWORD *)(v57 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_67;
      }
    }
    v313[0] = a1;
    v313[1] = &v306;
    *(_OWORD *)&v313[2] = xmmword_22F4555C0;
    *(int64x2_t *)&v313[4] = vdupq_n_s64(1uLL);
    v313[6] = 1;
    *(_QWORD *)&v314 = &v315;
    *((_QWORD *)&v314 + 1) = 0x1000000000;
    v64 = v322;
    v322 &= 0xE0u;
    v322 = v64 & 0x80 | (32 * (*(_DWORD *)(*(_QWORD *)(a1 + 15088) + 68) != 21));
    v323 = 0;
    v325 = 0u;
    v324 = 0;
    v326 = *(_OWORD *)&v313[4];
    LODWORD(v328) = 0;
    v327 = 0u;
    v329 = 0u;
    LODWORD(v330) = 0;
    v331 = 0u;
    LODWORD(v332) = 0;
    *((_QWORD *)&v332 + 1) = v335;
    *(_QWORD *)&v333 = v335;
    *((_QWORD *)&v333 + 1) = 32;
    v334 = 0;
    v340 = 0;
    v341 = v345;
    v342 = v345;
    v343 = 4;
    v344 = 0;
    v346 = 0u;
    v347 = 0u;
    v348 = 0;
    v350 = 0;
    v349 = 0u;
    v351 = 0u;
    v352 = 0;
    v353 = 0u;
    v354 = v356;
    v355 = 0x400000000;
    v357 = (char *)&v358 + 8;
    memset(v359, 0, 28);
    v358 = 0u;
    v360 = 0u;
    v361 = 0;
    sub_22F0CDECC(v313, v4);
    if (sub_22E463414(v4))
    {
      sub_22EFB4C94(v4, (uint64_t)&v332 + 8);
      v65 = sub_22E46A3A0(v4);
      if (v65 != v66)
      {
        v67 = v65;
        v68 = v66;
        while (1)
        {
          if ((*(_BYTE *)(v67 + 12) & 1) == 0)
          {
            v69 = *(_QWORD *)(**(_QWORD **)(v67 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v69 + 8) & 0xF) != 0)
              v69 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v67 + 16));
            v70 = sub_22F10C2A4(*(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF0));
            if (v70)
              v71 = (*(_DWORD *)(v70 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v70;
            else
              v71 = 0;
            if (sub_22E463414(v71))
              break;
          }
          v67 += 24;
          if (v67 == v68)
            goto LABEL_95;
        }
        v72 = 0;
        goto LABEL_178;
      }
LABEL_95:
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
      if (!*(_DWORD *)(*(_QWORD *)(v4 + 128) + 20) || (sub_22F0CE920(v313, v4), !*((_QWORD *)&v327 + 1)))
      {
        v71 = v340;
        if (v340)
        {
          v72 = 1;
LABEL_178:
          *((_QWORD *)&v327 + 1) = v71;
          LOBYTE(v328) = v72;
        }
      }
    }
    v111 = sub_22E46A3A0(v4);
    if (v111 != v112)
    {
      v113 = v111;
      v114 = v112;
      while (1)
      {
        v115 = *(_BYTE *)(v113 + 12);
        v116 = *(_QWORD *)(**(_QWORD **)(v113 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v116 + 8) & 0xF) != 0)
          v116 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v113 + 16));
        v117 = sub_22F10C2A4(*(_QWORD *)(v116 & 0xFFFFFFFFFFFFFFF0));
        if (v117)
        {
          if ((*(_DWORD *)(v117 + 28) & 0x7Fu) - 35 >= 3)
            v118 = 0;
          else
            v118 = v117;
        }
        else
        {
          v118 = 0;
        }
        v119 = (_BYTE *)sub_22F0CEA54((uint64_t)v313, v118, v115 & 1);
        if ((v115 & 1) != 0)
          goto LABEL_202;
        v120 = v119;
        v301 = (_BYTE *)v118;
        v302 = v119;
        if (!v361)
          break;
        v121 = (v361 - 1) & ((v118 >> 4) ^ (v118 >> 9));
        v122 = (_QWORD *)(v360 + 16 * v121);
        v123 = *v122;
        if (v118 != *v122)
        {
          v124 = 0;
          v125 = 1;
          while (v123 != -4096)
          {
            if (v124)
              v126 = 0;
            else
              v126 = v123 == -8192;
            if (v126)
              v124 = v122;
            v127 = v121 + v125++;
            v121 = v127 & (v361 - 1);
            v122 = (_QWORD *)(v360 + 16 * v121);
            v123 = *v122;
            if (v118 == *v122)
              goto LABEL_202;
          }
          if (v124)
            v128 = v124;
          else
            v128 = v122;
          goto LABEL_201;
        }
LABEL_202:
        v113 += 24;
        if (v113 == v114)
          goto LABEL_207;
      }
      v128 = 0;
LABEL_201:
      v129 = sub_22F0CECD4((uint64_t)&v360, (uint64_t *)&v301, v128);
      *v129 = v118;
      v129[1] = v120;
      goto LABEL_202;
    }
LABEL_207:
    v130 = (const void *)*((_QWORD *)&v327 + 1);
    if (!*((_QWORD *)&v327 + 1))
    {
      if (sub_22E463414(v4))
      {
        v134 = *(unsigned __int8 *)(*(_QWORD *)(v313[0] + 15088) + *(_QWORD *)(**(_QWORD **)(v313[0] + 15088) - 24));
        v135 = v134 / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
        v136 = *(unsigned __int8 *)(*(_QWORD *)(v313[0] + 15088)
                                  + *(_QWORD *)(**(_QWORD **)(v313[0] + 15088) - 24)
                                  + 1);
        v137 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
        v138 = v136 / v137;
        if ((v322 & 4) != 0)
          v139 = 1;
        else
          v139 = v136 / v137;
        if (v324 >= v139)
          v140 = v139;
        else
          v140 = v324;
        if (v324 >= v138)
          v141 = v136 / v137;
        else
          v141 = v324;
        if (v324)
          v142 = v140;
        else
          v142 = v139;
        if (v324)
          v143 = v141;
        else
          v143 = v138;
        v144 = v313[2];
        v145 = (v142
              + v144 / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0))
              - 1)
             / v142
             * v142;
        v146 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0)) * v145;
        v313[2] = v146;
        if ((v322 & 0x10) == 0 && (v322 & 3) != 1)
        {
          if (v313[3] < v142)
            v313[3] = v142;
          if (v313[5] < v143)
            v313[5] = v143;
          if (v313[4] < v142)
            v313[4] = v142;
        }
        BYTE1(v328) = 1;
        BYTE3(v328) = 1;
        v147 = v146 / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0)) + v135;
        v313[2] = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0)) * v147;
        v148 = v313[2]
             / (unint64_t)sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
        *(_QWORD *)&v325 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0))
                         * v148;
      }
LABEL_458:
      v254 = sub_22E46A3A0(v4);
      if (v254 != v255)
      {
        v256 = v254;
        v257 = v255;
        while (1)
        {
          if ((*(_BYTE *)(v256 + 12) & 1) != 0)
            goto LABEL_479;
          v258 = *(_QWORD *)(**(_QWORD **)(v256 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v258 + 8) & 0xF) != 0)
            v258 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v256 + 16));
          v259 = sub_22F10C2A4(*(_QWORD *)(v258 & 0xFFFFFFFFFFFFFFF0));
          if (v259)
            v260 = (*(_DWORD *)(v259 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v259;
          else
            v260 = 0;
          if (v260 == *((_QWORD *)&v327 + 1) && !(_BYTE)v328)
            goto LABEL_479;
          if (!v361)
            goto LABEL_477;
          v261 = (v361 - 1) & ((v260 >> 4) ^ (v260 >> 9));
          v262 = *(_QWORD *)(v360 + 16 * v261);
          if (v260 != v262)
            break;
LABEL_472:
          v263 = *(uint64_t **)(v360 + 16 * v261 + 8);
LABEL_478:
          sub_22F0CE8B8(v313, v263);
LABEL_479:
          v256 += 24;
          if (v256 == v257)
            goto LABEL_480;
        }
        v264 = 1;
        while (v262 != -4096)
        {
          v265 = v261 + v264++;
          v261 = v265 & (v361 - 1);
          v262 = *(_QWORD *)(v360 + 16 * v261);
          if (v260 == v262)
            goto LABEL_472;
        }
LABEL_477:
        v263 = 0;
        goto LABEL_478;
      }
LABEL_480:
      sub_22F0CE24C(v313, v4);
      v266 = (v313[2] + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)&v325 + 1) = v266
                             / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
      v326 = *(_OWORD *)&v313[3];
      sub_22F0CE304(v313, v4, v4);
      sub_22F0CE4B8(v313, v4);
      v267 = 1 << *(_DWORD *)(*(_QWORD *)(a1 + 15088) + 148);
      if ((v267 & 0x667) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
        if ((**(_QWORD **)(v4 + 128) & 0x100) != 0)
        {
LABEL_482:
          v268 = v313[2];
          v269 = v268 / sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
          v270 = v269;
LABEL_488:
          v6 = sub_22E3CD3D4(a1 + 2032, 80, 3);
          v273 = v313[2];
          v274 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
          v275 = v313[3];
          v276 = v313[4];
          v277 = v313[6];
          v278 = BYTE1(v328);
          v279 = v273 / v274;
          v280 = sub_22E463414(v4);
          *((_QWORD *)&v292 + 1) = v326;
          *(_QWORD *)&v292 = v270;
          sub_22F0C9530(v6, a1, v279, v275, v276, v277, v275, v278, v280, -1, v269, (uint64_t *)v314, DWORD2(v314), v292, *((uint64_t *)&v326 + 1), v312, *((uint64_t *)&v327 + 1), v328, 0,
            0,
            0,
            (uint64_t)&v329,
            (uint64_t)&v331);
          sub_22F0CB788((uint64_t)v313);
          v281 = v308;
          if (v310)
          {
            v289 = 16 * v310;
            v290 = (uint64_t *)((char *)v308 + 8);
            v5 = a1 + 928;
            do
            {
              if ((unint64_t)(*(v290 - 1) - 0x7FFFFFFFFFFFFFFFLL) >= 2)
                v290 = sub_22F29CFE8(v290);
              v290 += 2;
              v289 -= 16;
            }
            while (v289);
            v281 = v308;
            v282 = (void *)(16 * v310);
          }
          else
          {
            v282 = 0;
            v5 = a1 + 928;
          }
          llvm::deallocate_buffer(v281, v282);
          goto LABEL_491;
        }
      }
      else if ((v267 & 0x198) != 0)
      {
        if (sub_22EFD12A8(v4))
        {
          if (sub_22E49F698(v4))
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
            if ((**(_QWORD **)(v4 + 128) & 0x2000) != 0)
              goto LABEL_482;
          }
        }
      }
      v271 = v325;
      v272 = sub_22EF5CDF0(v313[0], *(_QWORD *)(*(_QWORD *)(v313[0] + 16408) & 0xFFFFFFFFFFFFFFF0));
      v270 = *((_QWORD *)&v325 + 1);
      v269 = v271 / v272;
      goto LABEL_488;
    }
    if ((_BYTE)v328)
    {
      if (LODWORD(v359[3]))
      {
        v131 = (LODWORD(v359[3]) - 1) & ((DWORD2(v327) >> 4) ^ (DWORD2(v327) >> 9));
        v132 = *(_QWORD *)(v359[1] + 16 * v131);
        if (*((_QWORD *)&v327 + 1) == v132)
        {
LABEL_211:
          v133 = *(uint64_t **)(v359[1] + 16 * v131 + 8);
LABEL_451:
          v133[9] = 0;
          sub_22E3BA850((uint64_t)&v332 + 8, v130);
          sub_22E3BA850((uint64_t)&v341, *((const void **)&v327 + 1));
          sub_22F0CE84C(v313, v133);
          goto LABEL_458;
        }
        v250 = 1;
        while (v132 != -4096)
        {
          v251 = v131 + v250++;
          v131 = v251 & (LODWORD(v359[3]) - 1);
          v132 = *(_QWORD *)(v359[1] + 16 * v131);
          if (*((_QWORD *)&v327 + 1) == v132)
            goto LABEL_211;
        }
      }
      v133 = 0;
      goto LABEL_451;
    }
    if (v361)
    {
      v149 = (v361 - 1) & ((DWORD2(v327) >> 4) ^ (DWORD2(v327) >> 9));
      v150 = *(_QWORD *)(v360 + 16 * v149);
      if (*((_QWORD *)&v327 + 1) == v150)
      {
LABEL_239:
        v151 = *(uint64_t **)(v360 + 16 * v149 + 8);
LABEL_457:
        sub_22F0CE8B8(v313, v151);
        goto LABEL_458;
      }
      v252 = 1;
      while (v150 != -4096)
      {
        v253 = v149 + v252++;
        v149 = v253 & (v361 - 1);
        v150 = *(_QWORD *)(v360 + 16 * v149);
        if (*((_QWORD *)&v327 + 1) == v150)
          goto LABEL_239;
      }
    }
    v151 = 0;
    goto LABEL_457;
  }
  return v6;
}

uint64_t sub_22F0CB788(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  llvm::deallocate_buffer(*(llvm **)(a1 + 888), (void *)(16 * *(unsigned int *)(a1 + 904)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 864), (void *)(16 * *(unsigned int *)(a1 + 880)));
  v2 = *(unsigned int *)(a1 + 792);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 784);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 784);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 792) - 8))
      {
        v8 = *(_QWORD *)(a1 + 768);
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 80; i <= v8; i += 80)
      {
        v10 = *(void **)(i - 64);
        if ((void *)(i - 48) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 840);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 832);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 80; j <= v14; j += 80)
      {
        v16 = *(void **)(j - 64);
        if ((void *)(j - 48) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  sub_22E6188F4(a1 + 768);
  sub_22E3B4EF4(a1 + 768);
  llvm::deallocate_buffer(*(llvm **)(a1 + 744), (void *)(16 * *(unsigned int *)(a1 + 760)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 720), (void *)(16 * *(unsigned int *)(a1 + 736)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 696), (void *)(16 * *(unsigned int *)(a1 + 712)));
  v17 = *(void **)(a1 + 624);
  if (v17 != *(void **)(a1 + 616))
    free(v17);
  v18 = *(void **)(a1 + 328);
  if (v18 != *(void **)(a1 + 320))
    free(v18);
  llvm::deallocate_buffer(*(llvm **)(a1 + 296), (void *)(24 * *(unsigned int *)(a1 + 312)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 272), (void *)(16 * *(unsigned int *)(a1 + 288)));
  v19 = *(void **)(a1 + 56);
  if (v19 != (void *)(a1 + 72))
    free(v19);
  return a1;
}

unint64_t sub_22F0CB980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 15088) + 148) > 0xAu)
    return 0;
  v4 = *(_QWORD *)(a2 + 128);
  if (v4
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104)),
        (v4 = *(_QWORD *)(a2 + 128)) != 0))
  {
    v4 = *(_QWORD *)(v4 + 88);
  }
  v18 = v4;
  result = sub_22E7B6904((_DWORD *)(a1 + 1024), &v18)[1];
  if (result)
  {
    if ((result & 1) != 0)
    {
      result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 16048) + 16))(*(_QWORD *)(a1 + 16048), result >> 1);
      v6 = result;
      if ((result & 1) != 0)
        goto LABEL_8;
    }
    return result;
  }
  v7 = v18;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
  if ((**(_QWORD **)(v7 + 128) & 0x400) == 0)
    return 0;
  if (sub_22EFB948C(v7) < 3)
    return 0;
  v8 = sub_22EFD5760(v7);
  if (v8 <= 4 && ((1 << v8) & 0x1A) != 0)
    return 0;
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 15088) + 148);
  v10 = sub_22E488FF8(v7);
  if (v10 == v11)
    return 0;
  v6 = v10;
  v12 = v11;
  v13 = 0xE65u >> v9;
  while (1)
  {
    v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6);
    if ((*(_BYTE *)(v14 + 82) & 0xC) == 0 && !sub_22EFD7260(v14))
      goto LABEL_24;
    v15 = *(_QWORD *)(v6 + 80);
    if ((v15 & 0x80000) != 0)
      goto LABEL_24;
    if ((v15 & 0xC0020000) != 0 || (*(_DWORD *)(v6 + 28) & 0x200) != 0)
      goto LABEL_24;
    if ((sub_22F3B20CC(v6) & 1) != 0)
      goto LABEL_24;
    if (!sub_22E692064(v6))
      goto LABEL_24;
    if ((v13 & 1) == 0)
    {
      v19 = 0;
      if (sub_22EFBF6E8(v6, &v19))
      {
        if ((*(_BYTE *)(v19 + 82) & 2) != 0)
          goto LABEL_24;
      }
    }
    v17 = *(_QWORD *)(a1 + 2000);
    if ((*(_BYTE *)(v17 + 68) & 0x20) == 0)
      goto LABEL_39;
    if ((*(_WORD *)(v17 + 96) & 0x80) == 0)
      break;
    if (sub_22E466E5C(v6))
      goto LABEL_39;
    do
LABEL_24:
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v6 && (*(_DWORD *)(v6 + 28) & 0x7Eu) - 54 > 3);
    result = 0;
    if (v6 == v12)
      return result;
  }
  if (!sub_22F295B40(v6) && sub_22E466E5C(v6))
    goto LABEL_24;
LABEL_39:
  if (sub_22E49F808(v6)
    && !sub_22E49F808(v7)
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 416))(*(_QWORD *)(a1 + 15088)) & 1) == 0)
  {
    return 0;
  }
LABEL_8:
  sub_22E7B6904((_DWORD *)(a1 + 1024), &v18)[1] = v6;
  return v6;
}

uint64_t sub_22F0CBBE4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
    return sub_22F0CBC6C(a1, a2);
  v4 = *(unsigned int *)(a2 + 64);
  if (!(_DWORD)v4)
    return 0;
  v5 = 0;
  v6 = *(unint64_t **)(a2 + 56);
  v7 = 8 * v4;
  do
  {
    v8 = *v6++;
    v5 += sub_22F0CBC6C(a1, v8);
    v7 -= 8;
  }
  while (v7);
  return v5;
}

uint64_t sub_22F0CBC6C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v4 = *(_QWORD *)v4;
  v5 = (*(_WORD *)(v4 + 8) & 0x7E) - 34;
  if (v4)
    v6 = v4 - 64;
  else
    v6 = 0;
  if (v5 >= 4)
    v7 = 0;
  else
    v7 = v6;
  v8 = sub_22F0C975C(a1, v7);
  return *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * sub_22EFC306C(a2));
}

uint64_t sub_22F0CBCD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  v7 = sub_22EFDE1AC(v6);
  if (!a3)
    goto LABEL_8;
  v8 = *(_QWORD **)(a3 + 88);
  if (!v7 || v8 == 0)
    goto LABEL_8;
  v10 = (uint64_t)v7;
  if (v8 != v7)
  {
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v8 + 32))(v8, v7);
    if (v11 != (*(uint64_t (**)(_QWORD *))(*v7 + 32))(v7))
    {
LABEL_8:
      v12 = a1;
      v10 = (uint64_t)v7;
      v13 = 0;
      goto LABEL_9;
    }
    v10 = *(_QWORD *)(a3 + 88);
  }
  v12 = a1;
  v13 = a3;
LABEL_9:
  v14 = sub_22F0CBDC4(v12, v10, v13);
  v15 = sub_22EFDD1E0((unint64_t)v7);
  if (v15)
    v16 = v6 == v15;
  else
    v16 = 1;
  if (v16)
  {
    v17 = 0;
  }
  else
  {
    LODWORD(v17) = 0;
    do
    {
      v17 = (v17 + 1);
      v15 = *(_QWORD *)(v15 + 80);
      if (v15)
        v18 = v6 == v15;
      else
        v18 = 1;
    }
    while (!v18);
  }
  return *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v17);
}

uint64_t sub_22F0CBDC4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  __int128 v40;
  int64x2_t v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  _QWORD v52[36];
  int v53;
  _BYTE v54[64];
  int v55;
  __int128 v56;
  int v57;
  __int128 v58;
  int v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[11];
  __int128 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a2 + 56) & 0x80) != 0)
  {
    v6 = *(_QWORD *)(a2 + 120);
    if (!v6)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
      v6 = *(_QWORD *)(a2 + 120);
    }
    if (v6 < 8 || !*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16048) + 144))(*(_QWORD *)(a1 + 16048), a2);
  }
  v7 = *(_QWORD *)(a2 + 120);
  if (!v7)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
    v7 = *(_QWORD *)(a2 + 120);
  }
  if (v7 < 8)
    v8 = 0;
  else
    v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if (a3)
    v9 = a3;
  else
    v9 = v8;
  v29 = v9;
  v10 = sub_22F25E108((uint64_t *)(a1 + 952), &v29)[1];
  if (!v10)
  {
    if (!a3 || sub_22EF5DA28(a1, v8))
    {
      v30 = a1;
      v31 = 0u;
      v32 = vdupq_n_s64(1uLL);
      v33 = v32;
      v34 = &v36;
      v35 = 0x1000000000;
      v12 = v37;
      v37 &= 0xE0u;
      v37 = v12 & 0x80 | (32 * (*(_DWORD *)(*(_QWORD *)(a1 + 15088) + 68) != 21));
      v38 = 0;
      v40 = 0u;
      v39 = 0;
      v41 = v32;
      v42 = 0u;
      v43 = 0;
      v44 = 0u;
      v45 = 0;
      v46 = 0u;
      v47 = 0;
      v48 = v52;
      v49 = v52;
      v50 = 32;
      v51 = 0;
      v52[32] = 0;
      v52[33] = v54;
      v52[34] = v54;
      v52[35] = 4;
      v53 = 0;
      memset(&v54[32], 0, 32);
      v55 = 0;
      v57 = 0;
      v56 = 0u;
      v58 = 0u;
      v59 = 0;
      v60 = 0u;
      v61 = v63;
      v62 = 0x400000000;
      v63[4] = &v63[6];
      memset(&v63[5], 0, 44);
      v64 = 0u;
      v65 = 0;
      v13 = sub_22F3B46CC(v8);
      if (v13)
      {
        v14 = sub_22F0CBDC4(v30, v13, 0);
        if ((v37 & 0x10) == 0 && (v37 & 3) != 1)
        {
          v15 = *(_QWORD *)(v14 + 16);
          if (v32.i64[0] < v15)
            v32.i64[0] = *(_QWORD *)(v14 + 16);
          if (v33.i64[0] < v15)
            v33.i64[0] = v15;
          if (v32.i64[1] < v15)
            v32.i64[1] = v15;
        }
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)&v40 = sub_22EF5CDF0(v30, *(_QWORD *)(*(_QWORD *)(v30 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v16;
        v17 = (unint64_t)v40 / sub_22EF5CDF0(v30, *(_QWORD *)(*(_QWORD *)(v30 + 16408) & 0xFFFFFFFFFFFFFFF0));
        *((_QWORD *)&v31 + 1) = sub_22EF5CDF0(v30, *(_QWORD *)(*(_QWORD *)(v30 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v17;
      }
      sub_22F0CDECC(&v30, v8);
      v18 = sub_22EFDD1E0(v8);
      if (v18)
      {
        v19 = v18;
        do
        {
          sub_22F0D0578(&v30, v19, 0);
          v19 = *(_QWORD *)(v19 + 80);
        }
        while (v19);
      }
      sub_22F0CE4B8(&v30, v8);
      v10 = sub_22E3CD3D4(a1 + 2032, 80, 3);
      v20 = *((_QWORD *)&v31 + 1);
      v21 = sub_22EF5CDF0(v30, *(_QWORD *)(*(_QWORD *)(v30 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v22 = v32;
      v23 = v33.i64[1];
      v24 = v40;
      v25 = v20 / v21;
      v26 = sub_22EF5CDF0(v30, *(_QWORD *)(*(_QWORD *)(v30 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v27 = v34;
      v28 = v35;
      *(_QWORD *)v10 = v25;
      *(_QWORD *)(v10 + 8) = v24 / v26;
      *(int64x2_t *)(v10 + 16) = v22;
      *(_QWORD *)(v10 + 32) = v23;
      *(_QWORD *)(v10 + 40) = v22.i64[0];
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      sub_22F0C9440((const void **)(v10 + 48), a1, v27, &v27[v28]);
      sub_22F25E108((uint64_t *)(a1 + 952), &v29)[1] = v10;
      sub_22F0CB788((uint64_t)&v30);
    }
    else
    {
      return sub_22F0CBDC4(a1, v8, 0);
    }
  }
  return v10;
}

uint64_t sub_22F0CC1BC(llvm::raw_ostream *a1, unint64_t a2, _QWORD *a3, uint64_t a4, int a5, const char *a6, int a7, char a8)
{
  _QWORD *v11;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  size_t v20;
  void *v21;
  _QWORD *v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  const char *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  const std::nothrow_t *v45;
  unint64_t v46;
  uint64_t *v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t result;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::raw_ostream *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  _BYTE *v74;
  llvm::raw_ostream *v75;
  _BYTE *v76;
  llvm::raw_ostream *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  llvm::raw_ostream *v96;
  _WORD *v97;
  const char *v98;
  void *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _WORD *v104;
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _WORD *v109;
  uint64_t v110;
  int v111;
  BOOL v112;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  llvm::raw_ostream *v119;
  unsigned int v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _QWORD v124[2];
  _BYTE *v125;
  _QWORD *v126;
  __int128 v127;
  _QWORD v128[4];

  v11 = a3;
  v128[2] = *MEMORY[0x24BDAC8D0];
  v14 = (_QWORD *)sub_22F0C975C(a3, a2);
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
    v15 = 0;
  else
    v15 = a2;
  v116 = a4;
  v117 = v15;
  v122 = &unk_24FAC6BB8;
  v123 = (uint64_t)"%10lld | ";
  v124[0] = a4;
  llvm::raw_ostream::operator<<();
  llvm::raw_ostream::indent(a1);
  v16 = *(_QWORD *)(a2 + 48);
  if (v16)
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
  else
    v17 = sub_22EF6462C((uint64_t)v11, a2);
  sub_22F40B69C((uint64_t **)a1, v17);
  if (a6)
  {
    v18 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a1 + 3))
    {
      v19 = (llvm::raw_ostream *)llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v18 + 1;
      *v18 = 32;
      v19 = a1;
    }
    v20 = strlen(a6);
    v21 = (void *)*((_QWORD *)v19 + 4);
    if (v20 <= *((_QWORD *)v19 + 3) - (_QWORD)v21)
    {
      if (v20)
      {
        memcpy(v21, a6, v20);
        *((_QWORD *)v19 + 4) += v20;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, a6);
    }
  }
  if (v117)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v117 + 104) + 96), *(_QWORD *)(v117 + 104));
    if ((**(_QWORD **)(v117 + 128) & 0x200) != 0)
    {
      v22 = (_QWORD *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v22 > 7uLL)
      {
        *v22 = 0x297974706D652820;
        *((_QWORD *)a1 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a1, " (empty)");
      }
    }
  }
  v23 = (_BYTE *)*((_QWORD *)a1 + 4);
  v119 = a1;
  if ((unint64_t)v23 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v23 + 1;
    *v23 = 10;
  }
  v24 = a5 + 1;
  v121 = (uint64_t)v14;
  v118 = v11;
  v25 = v116;
  v120 = v24;
  if (!v117)
    goto LABEL_73;
  v26 = v14[9];
  v112 = (*(_QWORD *)(v26 + 32) & 0x8000000000000000) == 0 && *(_QWORD *)(v26 + 56) == 0;
  v27 = *(_QWORD *)(v26 + 48) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_BYTE *)(v26 + 40);
  if (sub_22E463414(v117) && !v27 && *(_DWORD *)(v11[1886] + 148) != 11)
  {
    v122 = &unk_24FAC6BB8;
    v123 = (uint64_t)"%10lld | ";
    v124[0] = v116;
    v29 = (uint64_t)v119;
    llvm::raw_ostream::operator<<();
    llvm::raw_ostream::indent(v119);
    v31 = (_BYTE *)*((_QWORD *)v119 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)v119 + 3))
    {
      v29 = llvm::raw_ostream::write(v119);
    }
    else
    {
      *((_QWORD *)v119 + 4) = v31 + 1;
      *v31 = 40;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, v29);
    v35 = *(_QWORD *)(v29 + 32);
    if ((unint64_t)(*(_QWORD *)(v29 + 24) - v35) <= 0x10)
    {
      v33 = " vtable pointer)\n";
      v34 = (llvm::raw_ostream *)v29;
      goto LABEL_38;
    }
    *(_BYTE *)(v35 + 16) = 10;
    *(_OWORD *)v35 = *(_OWORD *)" vtable pointer)\n";
    v110 = *(_QWORD *)(v29 + 32) + 17;
LABEL_183:
    *(_QWORD *)(v29 + 32) = v110;
    goto LABEL_39;
  }
  v29 = (uint64_t)v119;
  if ((v28 & 1) != 0)
  {
    v122 = &unk_24FAC6BB8;
    v123 = (uint64_t)"%10lld | ";
    v124[0] = v116;
    llvm::raw_ostream::operator<<();
    llvm::raw_ostream::indent(v119);
    v30 = (_BYTE *)*((_QWORD *)v119 + 4);
    if ((unint64_t)v30 >= *((_QWORD *)v119 + 3))
    {
      v29 = llvm::raw_ostream::write(v119);
    }
    else
    {
      *((_QWORD *)v119 + 4) = v30 + 1;
      *v30 = 40;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, v29);
    v32 = *(_QWORD *)(v29 + 32);
    if ((unint64_t)(*(_QWORD *)(v29 + 24) - v32) <= 0x11)
    {
      v33 = " vftable pointer)\n";
      v34 = (llvm::raw_ostream *)v29;
LABEL_38:
      llvm::raw_ostream::write(v34, v33);
      goto LABEL_39;
    }
    *(_WORD *)(v32 + 16) = 2601;
    *(_OWORD *)v32 = *(_OWORD *)" vftable pointer)\n";
    v110 = *(_QWORD *)(v29 + 32) + 18;
    goto LABEL_183;
  }
LABEL_39:
  v122 = v124;
  v123 = 0x400000000;
  v36 = sub_22E46A3A0(v117);
  if (v36 != v37)
  {
    v38 = v36;
    v39 = v37;
    do
    {
      if ((*(_BYTE *)(v38 + 12) & 1) == 0)
      {
        v40 = *(_QWORD *)(**(_QWORD **)(v38 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v40 + 8) & 0xF) != 0)
          v40 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v38 + 16));
        v41 = sub_22F10C2A4(*(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0));
        if (v41)
        {
          if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 35 >= 3)
            v42 = 0;
          else
            v42 = v41;
        }
        else
        {
          v42 = 0;
        }
        v43 = v123;
        if (v123 >= (unint64_t)HIDWORD(v123))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v43 = v123;
        }
        *((_QWORD *)v122 + v43) = v42;
        LODWORD(v123) = v123 + 1;
      }
      v38 += 24;
    }
    while (v38 != v39);
  }
  v44 = (uint64_t *)((char *)v122 + 8 * v123);
  v126 = v14;
  if (v123 < 0x81)
  {
LABEL_57:
    sub_22F0D1E14((uint64_t *)v122, v44, (uint64_t *)&v126, v123, 0, 0);
  }
  else
  {
    v45 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v46 = v123;
    while (1)
    {
      v47 = (uint64_t *)operator new(8 * v46, v45);
      if (v47)
        break;
      v48 = v46 > 1;
      v46 >>= 1;
      if (!v48)
        goto LABEL_57;
    }
    v49 = v47;
    sub_22F0D1E14((uint64_t *)v122, v44, (uint64_t *)&v126, v123, v47, v46);
    operator delete(v49);
  }
  v11 = v118;
  v25 = v116;
  if ((_DWORD)v123)
  {
    v50 = (uint64_t *)v122;
    v51 = 8 * v123;
    do
    {
      v53 = *v50++;
      v52 = v53;
      v54 = sub_22E46A3EC(v121, v53) + v116;
      if (v53 == v27)
        v55 = "(primary base)";
      else
        v55 = "(base)";
      sub_22F0CC1BC(v119, v52, v118, v54, v24, v55, 0, 0);
      v51 -= 8;
    }
    while (v51);
  }
  if (v112)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v121 + 72) + 32) + v116;
    v126 = &unk_24FAC6BB8;
    *(_QWORD *)&v127 = "%10lld | ";
    *((_QWORD *)&v127 + 1) = v56;
    v57 = v119;
    llvm::raw_ostream::operator<<();
    llvm::raw_ostream::indent(v119);
    v58 = (_BYTE *)*((_QWORD *)v119 + 4);
    if ((unint64_t)v58 >= *((_QWORD *)v119 + 3))
    {
      v57 = (llvm::raw_ostream *)llvm::raw_ostream::write(v119);
    }
    else
    {
      *((_QWORD *)v119 + 4) = v58 + 1;
      *v58 = 40;
    }
    (*(void (**)(unint64_t, llvm::raw_ostream *))(*(_QWORD *)a2 + 88))(a2, v57);
    v59 = *((_QWORD *)v57 + 4);
    if ((unint64_t)(*((_QWORD *)v57 + 3) - v59) > 0x11)
    {
      *(_WORD *)(v59 + 16) = 2601;
      *(_OWORD *)v59 = *(_OWORD *)" vbtable pointer)\n";
      *((_QWORD *)v57 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v57, " vbtable pointer)\n");
    }
  }
  if (v122 != v124)
    free(v122);
LABEL_73:
  result = sub_22EFC3B90(a2);
  if (result)
  {
    v61 = result;
    v62 = 0;
LABEL_75:
    v63 = *(_QWORD *)(*(_QWORD *)(v121 + 48) + 8 * v62);
    v64 = sub_22EF5CDF0(v11, *(_QWORD *)(v11[2051] & 0xFFFFFFFFFFFFFFF0));
    v65 = v63 / v64 + v25;
    v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v67 = v119;
    if (v66 && *(_BYTE *)(v66 + 16) == 45)
    {
      v68 = sub_22F114198(*(_QWORD *)(v66 + 24));
      v69 = *(_QWORD *)(v61 + 40);
      v70 = "";
      if ((v69 & 7) != 0)
      {
        v11 = v118;
      }
      else
      {
        v71 = v69 & 0xFFFFFFFFFFFFFFF8;
        v11 = v118;
        if (v71)
          v70 = (const char *)(*(_QWORD *)(v71 + 16) + 16);
      }
      result = sub_22F0CC1BC(v119, v68, v11, v65, v120, v70, 0, 1);
    }
    else
    {
      if ((*(_BYTE *)(v61 + 68) & 1) != 0)
      {
        sub_22EF5CDF0(v118, *(_QWORD *)(v118[2051] & 0xFFFFFFFFFFFFFFF0));
        v111 = sub_22EFC2EF4(v61, v118);
        v126 = v128;
        v127 = xmmword_22F45E0D0;
        sub_22F242C48((uint64_t)&v122, (uint64_t)&v126);
        v72 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v73 = (_BYTE *)*((_QWORD *)v72 + 4);
        if ((unint64_t)v73 >= *((_QWORD *)v72 + 3))
        {
          llvm::raw_ostream::write(v72);
        }
        else
        {
          *((_QWORD *)v72 + 4) = v73 + 1;
          *v73 = 58;
        }
        v25 = v116;
        if (v111)
        {
          v75 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v76 = (_BYTE *)*((_QWORD *)v75 + 4);
          if ((unint64_t)v76 >= *((_QWORD *)v75 + 3))
          {
            llvm::raw_ostream::write(v75);
          }
          else
          {
            *((_QWORD *)v75 + 4) = v76 + 1;
            *v76 = 45;
          }
          v11 = v118;
          llvm::raw_ostream::operator<<();
        }
        else
        {
          v74 = v125;
          if ((unint64_t)v125 >= v124[1])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v122);
          }
          else
          {
            ++v125;
            *v74 = 45;
          }
          v11 = v118;
        }
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v122);
        v122 = v126;
        v123 = v127;
        v124[0] = 0x20000000ALL;
        v77 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v78 = *((_QWORD *)v77 + 4);
        if ((unint64_t)(*((_QWORD *)v77 + 3) - v78) > 2)
        {
          *(_BYTE *)(v78 + 2) = 32;
          *(_WORD *)v78 = 31776;
          *((_QWORD *)v77 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v77, " | ");
        }
        llvm::raw_ostream::indent(v119);
        if (v126 != v128)
          free(v126);
      }
      else
      {
        v122 = &unk_24FAC6BB8;
        v123 = (uint64_t)"%10lld | ";
        v124[0] = v63 / v64 + v25;
        llvm::raw_ostream::operator<<();
        llvm::raw_ostream::indent(v119);
        v11 = v118;
      }
      v79 = *(_QWORD *)(v61 + 48);
      if ((*(_QWORD *)(v11[250] + 140) & 0x4000000000) != 0)
        v79 = *(_QWORD *)((*(_QWORD *)(v61 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v61 + 48) & 7;
      sub_22F40B69C((uint64_t **)v119, v79);
      v80 = (_BYTE *)*((_QWORD *)v119 + 4);
      if ((unint64_t)v80 >= *((_QWORD *)v119 + 3))
      {
        v67 = (llvm::raw_ostream *)llvm::raw_ostream::write(v119);
      }
      else
      {
        *((_QWORD *)v119 + 4) = v80 + 1;
        *v80 = 32;
      }
      result = (*(uint64_t (**)(unint64_t, llvm::raw_ostream *))(*(_QWORD *)v61 + 88))(v61, v67);
      v81 = (_BYTE *)*((_QWORD *)v67 + 4);
      if ((unint64_t)v81 >= *((_QWORD *)v67 + 3))
      {
        result = llvm::raw_ostream::write(v67);
      }
      else
      {
        *((_QWORD *)v67 + 4) = v81 + 1;
        *v81 = 10;
      }
    }
    while (1)
    {
      v61 = *(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v61)
        break;
      if ((*(_DWORD *)(v61 + 28) & 0x7Fu) - 49 <= 2)
      {
        ++v62;
        goto LABEL_75;
      }
    }
  }
  v82 = v117;
  if (v117)
  {
    if ((a8 & 1) != 0)
    {
      v83 = *(_QWORD *)(v121 + 72);
      result = sub_22E483108(v117);
      if (result != v84)
      {
        v85 = result;
        v86 = v84;
        v114 = v83 + 88;
        v87 = "(virtual base)";
        v88 = "(primary virtual base)";
        do
        {
          v89 = *(_QWORD *)(**(_QWORD **)(v85 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v89 + 8) & 0xF) != 0)
            v89 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v85 + 16));
          v90 = sub_22F10C2A4(*(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF0));
          if (v90)
          {
            if ((*(_DWORD *)(v90 + 28) & 0x7Fu) - 35 >= 3)
              v91 = 0;
            else
              v91 = v90;
          }
          else
          {
            v91 = 0;
          }
          v92 = sub_22F2500F4(v121, v91) + v116;
          if (*(_BYTE *)(sub_22E5E4648(v114, v91) + 16))
          {
            v93 = v88;
            v94 = v87;
            v122 = &unk_24FAC6BB8;
            v123 = (uint64_t)"%10lld | ";
            v124[0] = v92 - 4;
            llvm::raw_ostream::operator<<();
            llvm::raw_ostream::indent(v119);
            v95 = *((_QWORD *)v119 + 4);
            if ((unint64_t)(*((_QWORD *)v119 + 3) - v95) > 0x13)
            {
              *(_DWORD *)(v95 + 16) = 543519585;
              *(_OWORD *)v95 = *(_OWORD *)"(vtordisp for vbase ";
              *((_QWORD *)v119 + 4) += 20;
              v96 = v119;
            }
            else
            {
              v96 = (llvm::raw_ostream *)llvm::raw_ostream::write(v119, "(vtordisp for vbase ");
            }
            (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)v91 + 88))(v91, v96);
            v97 = (_WORD *)*((_QWORD *)v96 + 4);
            if (*((_QWORD *)v96 + 3) - (_QWORD)v97 > 1uLL)
            {
              *v97 = 2601;
              *((_QWORD *)v96 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v96, ")\n");
            }
            v87 = v94;
            v88 = v93;
          }
          if (v91 == (*(_QWORD *)(*(_QWORD *)(v121 + 72) + 48) & 0xFFFFFFFFFFFFFFF8))
            v98 = v88;
          else
            v98 = v87;
          result = sub_22F0CC1BC(v119, v91, v118, v92, v120, v98, 0, 0);
          v85 += 24;
          v82 = v117;
        }
        while (v85 != v86);
      }
    }
  }
  if (a7)
  {
    v99 = (void *)*((_QWORD *)v119 + 4);
    if (*((_QWORD *)v119 + 3) - (_QWORD)v99 > 0xCuLL)
    {
      qmemcpy(v99, "           | ", 13);
      *((_QWORD *)v119 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v119, "           | ");
    }
    llvm::raw_ostream::indent(v119);
    v100 = (_QWORD *)*((_QWORD *)v119 + 4);
    if (*((_QWORD *)v119 + 3) - (_QWORD)v100 > 7uLL)
    {
      *v100 = 0x3D666F657A69735BLL;
      *((_QWORD *)v119 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v119, "[sizeof=");
    }
    llvm::raw_ostream::operator<<();
    if (v82 && *(_DWORD *)(v118[1886] + 148) != 11)
    {
      v101 = (_QWORD *)*((_QWORD *)v119 + 4);
      if (*((_QWORD *)v119 + 3) - (_QWORD)v101 > 7uLL)
      {
        *v101 = 0x3D657A697364202CLL;
        *((_QWORD *)v119 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v119, ", dsize=");
      }
      llvm::raw_ostream::operator<<();
    }
    v102 = (_QWORD *)*((_QWORD *)v119 + 4);
    if (*((_QWORD *)v119 + 3) - (_QWORD)v102 > 7uLL)
    {
      *v102 = 0x3D6E67696C61202CLL;
      *((_QWORD *)v119 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v119, ", align=");
    }
    llvm::raw_ostream::operator<<();
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v118[1886] + 776))(v118[1886]);
    if ((_DWORD)result)
    {
      v103 = *((_QWORD *)v119 + 4);
      if ((unint64_t)(*((_QWORD *)v119 + 3) - v103) > 0x10)
      {
        *(_BYTE *)(v103 + 16) = 61;
        *(_OWORD *)v103 = *(_OWORD *)", preferredalign=";
        *((_QWORD *)v119 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v119, ", preferredalign=");
      }
      result = llvm::raw_ostream::operator<<();
    }
    if (v82)
    {
      v104 = (_WORD *)*((_QWORD *)v119 + 4);
      if (*((_QWORD *)v119 + 3) - (_QWORD)v104 > 1uLL)
      {
        *v104 = 2604;
        v105 = (void *)(*((_QWORD *)v119 + 4) + 2);
        *((_QWORD *)v119 + 4) = v105;
      }
      else
      {
        llvm::raw_ostream::write(v119, ",\n");
        v105 = (void *)*((_QWORD *)v119 + 4);
      }
      if (*((_QWORD *)v119 + 3) - (_QWORD)v105 > 0xCuLL)
      {
        qmemcpy(v105, "           | ", 13);
        *((_QWORD *)v119 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v119, "           | ");
      }
      llvm::raw_ostream::indent(v119);
      v106 = (_QWORD *)*((_QWORD *)v119 + 4);
      if (*((_QWORD *)v119 + 3) - (_QWORD)v106 > 7uLL)
      {
        *v106 = 0x3D657A6973766E20;
        *((_QWORD *)v119 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v119, " nvsize=");
      }
      llvm::raw_ostream::operator<<();
      v107 = *((_QWORD *)v119 + 4);
      if ((unint64_t)(*((_QWORD *)v119 + 3) - v107) > 9)
      {
        *(_WORD *)(v107 + 8) = 15726;
        *(_QWORD *)v107 = *(_QWORD *)", nvalign=";
        *((_QWORD *)v119 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v119, ", nvalign=");
      }
      llvm::raw_ostream::operator<<();
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v118[1886] + 776))(v118[1886]);
      if ((_DWORD)result)
      {
        v108 = *((_QWORD *)v119 + 4);
        if ((unint64_t)(*((_QWORD *)v119 + 3) - v108) > 0x12)
        {
          *(_DWORD *)(v108 + 15) = 1030645609;
          *(_OWORD *)v108 = *(_OWORD *)", preferrednvalign=";
          *((_QWORD *)v119 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(v119, ", preferrednvalign=");
        }
        result = llvm::raw_ostream::operator<<();
      }
    }
    v109 = (_WORD *)*((_QWORD *)v119 + 4);
    if (*((_QWORD *)v119 + 3) - (_QWORD)v109 > 1uLL)
    {
      *v109 = 2653;
      *((_QWORD *)v119 + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(v119, "]\n");
    }
  }
  return result;
}

uint64_t sub_22F0CD204(_QWORD *a1, uint64_t a2)
{
  unsigned int isArch64Bit;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  char v14;

  *((_BYTE *)a1 + 308) = *((_BYTE *)a1 + 308) & 0xFE | ((*(_DWORD *)(a2 + 72) & 0xE000) == 0x4000);
  a1[1] = 0;
  a1[4] = 1;
  isArch64Bit = llvm::Triple::isArch64Bit((llvm::Triple *)(*(_QWORD *)(*a1 + 15088) + 32));
  a1[5] = 0;
  a1[6] = isArch64Bit;
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 2000) + 32))
    a1[5] = *(_QWORD *)(*(_QWORD *)(*a1 + 2000) + 32);
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v6 = *(uint64_t **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    v8 = *(uint64_t **)v5;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      v8 = *(uint64_t **)v5;
      while (*(_WORD *)(*v8 + 32) != 207)
      {
        ++v8;
        v9 -= 8;
        if (!v9)
          goto LABEL_13;
      }
    }
    if (v8 != &v6[v7])
    {
      do
      {
        v11 = *v6++;
        v10 = v11;
      }
      while (*(_WORD *)(v11 + 32) != 207);
      v12 = *(unsigned int *)(v10 + 36);
      if (v12 <= *(unsigned __int8 *)(*(_QWORD *)(*a1 + 15088)
                                                   + *(_QWORD *)(**(_QWORD **)(*a1 + 15088) - 24)))
        a1[5] = v12 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    }
  }
LABEL_13:
  if (sub_22E6A4B04(a2))
    a1[5] = 1;
  *((_BYTE *)a1 + 308) &= ~0x40u;
  result = *(_QWORD *)(*a1 + 16048);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)result + 192))(result, a2, a1 + 39, a1 + 40, a1 + 41, a1 + 44, a1 + 47);
    if ((_DWORD)result)
      v14 = 64;
    else
      v14 = 0;
    *((_BYTE *)a1 + 308) = *((_BYTE *)a1 + 308) & 0xBF | v14;
  }
  return result;
}

unint64_t sub_22F0CD390(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  *((_BYTE *)a1 + 308) &= ~2u;
  result = sub_22EFC3B90(a2);
  if (result)
  {
    v4 = result;
LABEL_3:
    if ((*(_BYTE *)(v4 + 68) & 1) == 0)
    {
      *((_BYTE *)a1 + 308) &= ~2u;
      v6 = sub_22F0CDB8C(a1, v4);
      v7 = a1[4];
      if (v7 <= (uint64_t)v5)
        v7 = v5;
      a1[4] = v7;
      if ((*((_BYTE *)a1 + 308) & 0x40) != 0)
      {
        v29 = *a1;
        v38 = v4;
        v30 = sub_22F2AD0CC(a1 + 41, &v38)[1];
        v8 = v30 / sub_22EF5CDF0(v29, *(_QWORD *)(*(_QWORD *)(v29 + 16408) & 0xFFFFFFFFFFFFFFF0));
      }
      else if ((*((_BYTE *)a1 + 308) & 1) != 0)
      {
        v8 = 0;
      }
      else
      {
        v8 = (v5 + a1[1] - 1) / v5 * v5;
      }
      result = sub_22F0CDD68((unsigned int *)a1, v8);
      v17 = v8 + v6;
      if (a1[1] > (int64_t)(v8 + v6))
        v17 = a1[1];
      goto LABEL_38;
    }
    v9 = sub_22EFC2EF4(v4, *a1);
    if (v9)
    {
      v10 = v9;
      v11 = sub_22F0CDB8C(a1, v4);
      v13 = v12;
      if (sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v11 < v10)
        v10 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v11;
      v14 = *((_BYTE *)a1 + 308);
      if ((v14 & 0x43) == 2 && a1[7] == v11 && v10 <= *((_DWORD *)a1 + 76))
      {
        v25 = a1[1];
        result = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v26 = result;
        v27 = *((unsigned int *)a1 + 76);
        v28 = *((unsigned int *)a1 + 30);
        if (v28 >= *((unsigned int *)a1 + 31))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = *((unsigned int *)a1 + 30);
        }
        *(_QWORD *)(a1[14] + 8 * v28) = v26 * v25 - v27;
        ++*((_DWORD *)a1 + 30);
        *((_DWORD *)a1 + 76) -= v10;
        goto LABEL_39;
      }
      *((_BYTE *)a1 + 308) = v14 | 2;
      a1[7] = v11;
      if ((v14 & 0x40) != 0)
      {
        v38 = v4;
        v31 = sub_22F2AD0CC(a1 + 41, &v38)[1];
        v32 = *((unsigned int *)a1 + 30);
        if (v32 >= *((unsigned int *)a1 + 31))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = *((unsigned int *)a1 + 30);
        }
        *(_QWORD *)(a1[14] + 8 * v32) = v31;
        ++*((_DWORD *)a1 + 30);
        v33 = *a1;
        v34 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v13;
        v35 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v11 + v31 / v34 * v34;
        result = sub_22EF5CDF0(v33, *(_QWORD *)(*(_QWORD *)(v33 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v36 = v35 / result;
        if (a1[1] > (int64_t)(v35 / result))
          v36 = a1[1];
        a1[1] = v36;
        v37 = a1[4];
        if (v37 <= v13)
          v37 = v13;
        a1[4] = v37;
        goto LABEL_39;
      }
      if ((v14 & 1) == 0)
      {
        v15 = (v13 + a1[1] - 1) / (unint64_t)v13 * v13;
        sub_22F0CDD68((unsigned int *)a1, v15);
        a1[1] = v15 + v11;
        v16 = a1[4];
        if (v16 <= v13)
          v16 = v13;
        a1[4] = v16;
        result = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        *((_DWORD *)a1 + 76) = result * v11 - v10;
        goto LABEL_39;
      }
      result = sub_22F0CDD68((unsigned int *)a1, 0);
      v17 = a1[1];
      if (v17 <= v11)
        v17 = v11;
LABEL_38:
      a1[1] = v17;
      goto LABEL_39;
    }
    if ((*((_BYTE *)a1 + 308) & 2) == 0)
    {
      if ((*((_BYTE *)a1 + 308) & 1) != 0)
        v18 = 0;
      else
        v18 = a1[1];
      result = sub_22F0CDD68((unsigned int *)a1, v18);
      goto LABEL_39;
    }
    *((_BYTE *)a1 + 308) &= ~2u;
    v19 = sub_22F0CDB8C(a1, v4);
    if ((*((_BYTE *)a1 + 308) & 1) != 0)
    {
      v24 = v19;
      result = sub_22F0CDD68((unsigned int *)a1, 0);
      v17 = a1[1];
      if (v17 <= v24)
        v17 = v24;
      goto LABEL_38;
    }
    v21 = v20;
    v22 = (v20 + a1[1] - 1) / v20 * v20;
    result = sub_22F0CDD68((unsigned int *)a1, v22);
    a1[1] = v22;
    v23 = a1[4];
    if (v23 <= v21)
      v23 = v21;
    a1[4] = v23;
LABEL_39:
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v4)
        break;
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
  return result;
}

unint64_t sub_22F0CD7C0(unint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 24) = v4;
  v5 = *(_QWORD *)(result + 48);
  if (v5)
  {
    v6 = *(_QWORD *)(result + 32);
    v7 = *(_QWORD *)(result + 40);
    if (v6 <= v5)
      v6 = *(_QWORD *)(result + 48);
    *(_QWORD *)(result + 32) = v6;
    if (v7 >= v6)
      v8 = v6;
    else
      v8 = v7;
    if (v7)
      v6 = v8;
    if (v6 > v5)
      v5 = v6;
    v4 = (v4 + v5 - 1) / v5 * v5;
    *(_QWORD *)(result + 8) = v4;
  }
  if (!v4)
  {
    result = sub_22F0CDA64(a2);
    if (!(_DWORD)result
      || (result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104)),
          (**(_QWORD **)(a2 + 128) & 0x200) == 0))
    {
      *((_BYTE *)v3 + 308) |= 0x30u;
    }
    v9 = v3[9];
    if (v3[6] >= v9)
      v9 = v3[4];
    v3[1] = v9;
  }
  if ((*((_BYTE *)v3 + 308) & 0x40) != 0)
  {
    v10 = v3[39];
    result = sub_22EF5CDF0(*v3, *(_QWORD *)(*(_QWORD *)(*v3 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v3[1] = v10 / result;
    v11 = v3[40];
    if (v11)
    {
      result = sub_22EF5CDF0(*v3, *(_QWORD *)(*(_QWORD *)(*v3 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v3[4] = v11 / result;
    }
  }
  return result;
}

uint64_t sub_22F0CD8C4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  _QWORD v23[3];
  uint64_t v24;
  unint64_t v25;

  v9 = sub_22F0CDA64(a2);
  v10 = v9;
  if (*(_QWORD *)a5)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a5 + 72);
    if (v11)
    {
      if ((*(_BYTE *)(v11 + 40) & 4) != 0)
      {
        v12 = (*(_BYTE *)(a4[9] + 40) & 8) != 0 ? v9 : 1;
        if ((v12 & 1) == 0)
          ++*(_QWORD *)(a1 + 8);
      }
    }
  }
  v13 = a4[2];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = a4[9];
  if (v15)
    LOBYTE(v15) = (4 * *(_BYTE *)(v15 + 40)) & 0x10;
  if (v14 >= v13)
    v16 = a4[2];
  else
    v16 = *(_QWORD *)(a1 + 40);
  if (v14)
    v13 = v16;
  v17 = *(_BYTE *)(a1 + 308);
  *(_BYTE *)(a1 + 308) = v17 & 0xEF | v15;
  v18 = *(_QWORD *)(a1 + 32);
  if (v18 <= v13)
    v18 = v13;
  *(_QWORD *)(a1 + 32) = v18;
  v19 = a4[5];
  if (*(_QWORD *)(a1 + 48) > v19)
    v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v19;
  if (v13 <= a4[5])
    v20 = a4[5];
  else
    v20 = v13;
  if ((v17 & 0x40) != 0
    && (v24 = a3, v23[0] = 0, sub_22E46AA2C((uint64_t *)(a1 + 352), &v24, v23))
    && v23[0] != *(_QWORD *)(a1 + 352) + 16 * *(unsigned int *)(a1 + 368))
  {
    v21 = *(_QWORD *)(v23[0] + 8);
  }
  else
  {
    if (v10)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 104) + 96), *(_QWORD *)(a3 + 104));
      if ((**(_QWORD **)(a3 + 128) & 0x200) != 0)
      {
        v21 = 0;
        goto LABEL_31;
      }
    }
    v21 = (v20 + *(_QWORD *)(a1 + 8) - 1) / v20 * v20;
  }
  *(_QWORD *)(a1 + 8) = v21;
LABEL_31:
  v24 = a3;
  v25 = v21;
  result = sub_22F0CDB00(a1 + 256, &v24, (uint64_t *)&v25, (uint64_t)v23);
  *(_QWORD *)(a1 + 8) += *(_QWORD *)a4[9];
  *(_QWORD *)a5 = a4;
  return result;
}

uint64_t sub_22F0CDA64(uint64_t a1)
{
  int v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(a1 + 28);
  if ((v1 & 0x7Fu) - 35 <= 2)
  {
    if ((v1 & 0x100) != 0)
    {
      sub_22EFC8E88(a1);
      v4 = *((unsigned int *)v3 + 2);
      if ((_DWORD)v4)
      {
        v5 = 8 * v4;
        v6 = *v3;
        while (*(_WORD *)(*(_QWORD *)v6 + 32) != 166)
        {
          v6 += 8;
          v5 -= 8;
          if (!v5)
            goto LABEL_11;
        }
      }
      else
      {
        v6 = *v3;
      }
      if (v6 != *v3 + 8 * v4)
        return 1;
    }
LABEL_11:
    if ((*(_BYTE *)(a1 + 29) & 1) != 0)
      sub_22EFC8E88(a1);
  }
  return 0;
}

uint64_t sub_22F0CDB00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_22E46AA2C((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E46AAC8(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    v10 = *a3;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = v10;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_22F0CDB8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v24;

  v4 = *a1;
  v5 = (uint64_t *)(a2 + 48);
  v6 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  sub_22EF5CCD0(&v24, v4, v6);
  v7 = v24;
  v8 = *a1;
  v9 = sub_22EFC8A80(a2);
  v10 = v9 / sub_22EF5CDF0(v8, *(_QWORD *)(*(_QWORD *)(v8 + 16408) & 0xFFFFFFFFFFFFFFF0));
  sub_22EF5CDF0(*a1, *(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0));
  if (HIDWORD(v11))
  {
    v12 = sub_22EF5D130(*a1, *v5);
    if (v12 > v10)
      v10 = v12;
  }
  if ((*(_BYTE *)(a2 + 68) & 1) == 0)
  {
    while (1)
    {
      v13 = *(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0);
      if (!v13 || (*(_DWORD *)(v13 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(v15 + 16) & 0xFEu) - 2 > 3)
        {
          v17 = *(_DWORD *)(v15 + 16);
          goto LABEL_14;
        }
        v16 = *(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0);
        v13 = sub_22F10CF48(v13);
        if (!v13)
          break;
      }
      v5 = (uint64_t *)(v13 + 32);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0);
    v17 = *(unsigned __int8 *)(v15 + 16);
LABEL_14:
    if (v17 == 45)
    {
      v18 = *a1;
      v19 = sub_22F114198(*(_QWORD *)(v15 + 24));
      v20 = sub_22F0C975C(v18, v19);
      v21 = *(_QWORD *)(v20 + 72);
      if (v21)
        LOBYTE(v21) = (4 * *(_BYTE *)(v21 + 40)) & 0x10;
      *((_BYTE *)a1 + 308) = *((_BYTE *)a1 + 308) & 0xEF | v21;
      if (v10 <= *(_QWORD *)(v20 + 40))
        v10 = *(_QWORD *)(v20 + 40);
    }
    v22 = a1[6];
    if (v22 <= v10)
      v22 = v10;
    a1[6] = v22;
  }
  sub_22E6A4B04(a2);
  return v7;
}

uint64_t sub_22F0CDD68(unsigned int *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22EF5CDF0(*(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v5 = result;
  v6 = a1[30];
  if (v6 >= a1[31])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = a1[30];
  }
  *(_QWORD *)(*((_QWORD *)a1 + 14) + 8 * v6) = v5 * a2;
  ++a1[30];
  return result;
}

uint64_t sub_22F0CDDE8(unsigned int *a1, void *a2)
{
  void **v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a1, a2);
  v5 = *((_QWORD *)a1 + 1);
  if (v5 == *(_QWORD *)a1)
    v6 = a1 + 5;
  else
    v6 = a1 + 4;
  if (v4 != (void **)(v5 + 8 * *v6))
    return 1;
  v8 = sub_22E46A3A0((uint64_t)a2);
  if (v8 != v9)
  {
    v10 = v8;
    v11 = v9;
    while (1)
    {
      if ((*(_BYTE *)(v10 + 12) & 1) == 0)
      {
        v12 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
          v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
        v13 = sub_22F10C2A4(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
        if (v13)
          v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v13;
        else
          v14 = 0;
        if ((sub_22F0CDDE8(a1, v14) & 1) != 0)
          break;
      }
      v10 += 24;
      if (v10 == v11)
        return 0;
    }
    return 1;
  }
  return 0;
}

unint64_t sub_22F0CDECC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  int64_t v27;
  unint64_t result;
  int v29;
  unint64_t *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC)
  {
    *((_BYTE *)a1 + 200) = a1[25] & 0xF7 | (8 * ((*(_DWORD *)(a2 + 72) & 0xE000) == 0x4000));
    v4 = *a1;
    if (sub_22EFC3D58(a2))
    {
      v5 = *((_BYTE *)a1 + 200);
    }
    else
    {
      v5 = *((_BYTE *)a1 + 200);
      if ((*(_QWORD *)(*(_QWORD *)(v4 + 2000) + 8) & 0x20000000000000) == 0)
      {
        v6 = 0;
LABEL_8:
        *((_BYTE *)a1 + 200) = v5 & 0xBF | v6;
        goto LABEL_9;
      }
    }
    v6 = 64;
    goto LABEL_8;
  }
LABEL_9:
  if (sub_22E6A4B04(a2))
    v7 = 4;
  else
    v7 = 0;
  *((_BYTE *)a1 + 200) = a1[25] & 0xFB | v7;
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 2000) + 32))
    a1[26] = *(_QWORD *)(*(_QWORD *)(*a1 + 2000) + 32);
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_23;
  sub_22EFC8E88(a2);
  v9 = *((unsigned int *)v8 + 2);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = *v8;
    while (*(_WORD *)(*(_QWORD *)v11 + 32) != 96)
    {
      v11 += 8;
      v10 -= 8;
      if (!v10)
        goto LABEL_23;
    }
  }
  else
  {
    v11 = *v8;
  }
  if (v11 == *v8 + 8 * v9)
  {
LABEL_23:
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v13 = *((unsigned int *)v12 + 2);
      if ((_DWORD)v13)
      {
        v14 = 8 * v13;
        v15 = *v12;
        while (*(_WORD *)(*(_QWORD *)v15 + 32) != 97)
        {
          v15 += 8;
          v14 -= 8;
          if (!v14)
            goto LABEL_32;
        }
      }
      else
      {
        v15 = *v12;
      }
      if (v15 != *v12 + 8 * v13)
        *((_BYTE *)a1 + 200) |= 0x20u;
    }
LABEL_32:
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v17 = *(uint64_t **)v16;
      v18 = *(unsigned int *)(v16 + 8);
      v19 = *(uint64_t **)v16;
      if ((_DWORD)v18)
      {
        v20 = 8 * v18;
        v19 = *(uint64_t **)v16;
        while (*(_WORD *)(*v19 + 32) != 207)
        {
          ++v19;
          v20 -= 8;
          if (!v20)
            goto LABEL_41;
        }
      }
      if (v19 != &v17[v18])
      {
        do
        {
          v22 = *v17++;
          v21 = v22;
        }
        while (*(_WORD *)(v22 + 32) != 207);
        v23 = *(unsigned int *)(v21 + 36);
        a1[26] = v23 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      }
    }
LABEL_41:
    v24 = sub_22EFC8A80(a2);
    if (v24)
    {
      v25 = v24;
      v26 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      if ((a1[25] & 0x10) == 0 && (a1[25] & 3) != 1)
      {
        v27 = v25 / v26;
        if (a1[3] < v27)
          a1[3] = v27;
        if (a1[5] < v27)
          a1[5] = v27;
        if (a1[4] < v27)
          a1[4] = v27;
      }
    }
  }
  else
  {
    *((_BYTE *)a1 + 200) |= 0x10u;
    a1[26] = 2;
    *(int64x2_t *)(a1 + 3) = vdupq_n_s64(2uLL);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 15088) + 776))(*(_QWORD *)(*a1 + 15088));
  if ((_DWORD)result)
    v29 = (*((unsigned __int8 *)a1 + 200) >> 5) & 1;
  else
    LOBYTE(v29) = 1;
  *((_BYTE *)a1 + 267) = v29;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC)
    {
      result = *(_QWORD *)(*a1 + 16048);
      if (result)
      {
        v30 = a1 + 86;
        result = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)result + 192))(result, a2, a1 + 85, a1 + 86, a1 + 87, a1 + 90, a1 + 93);
        v31 = a1[25] & 0xFE | result;
        *((_BYTE *)a1 + 200) = v31;
        if ((_DWORD)result)
        {
          if (*v30)
          {
            v32 = *v30;
            a1[3] = v32 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
            v33 = a1[86];
            result = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
            a1[4] = v33 / result;
          }
          else
          {
            *((_BYTE *)a1 + 200) = v31 | 2;
          }
        }
      }
    }
  }
  return result;
}

void sub_22F0CE24C(_QWORD *a1, unint64_t a2)
{
  int v4;
  _BOOL4 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v4 = sub_22EFC3DB8(a2, 1);
  v5 = (*(_QWORD *)(a2 + 72) & 0x800000) == 0;
  v6 = sub_22EFC3B90(a2);
  if (v6)
  {
    v7 = v6;
LABEL_3:
    v8 = v7;
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v8)
        break;
      if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 <= 2)
      {
        v9 = 1;
        goto LABEL_8;
      }
    }
    v9 = v5;
LABEL_8:
    sub_22F0D0578(a1, v7, v4 & v9);
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v7)
        break;
      if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
}

uint64_t sub_22F0CE304(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;

  if (a3 == a2)
  {
    v7 = a1[32];
    LOBYTE(v8) = *((_BYTE *)a1 + 264) != 0;
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*a1, a2) + 72) + 48);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    v8 = (v6 >> 2) & 1;
  }
  result = sub_22E46A3A0(a2);
  if (result != v10)
  {
    v11 = result;
    v12 = v10;
    while (1)
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
      v14 = sub_22F10C2A4(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
      if (v14)
      {
        if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
          v15 = 0;
        else
          v15 = (uint64_t *)v14;
      }
      else
      {
        v15 = 0;
      }
      if ((uint64_t *)v7 == v15)
        v16 = v8;
      else
        v16 = 0;
      if ((*(_BYTE *)(v11 + 12) & 1) == 0 || (v16 & 1) != 0)
        goto LABEL_26;
      v17 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 40), v15);
      v18 = a1[41];
      v19 = v18 == a1[40] ? 340 : 336;
      if (v17 != (void **)(v18 + 8 * *(unsigned int *)((char *)a1 + v19)))
        goto LABEL_26;
      result = sub_22E3BA850((uint64_t)(a1 + 77), v15);
      if (v20)
        break;
LABEL_28:
      v11 += 24;
      if (v11 == v12)
        return result;
    }
    v23 = 0;
    v21 = sub_22ECB1B60(a1[108], *((_DWORD *)a1 + 220), (uint64_t)v15, &v23);
    v22 = 0;
    if (v21)
      v22 = *(uint64_t **)(v23 + 8);
    sub_22F0CE84C(a1, v22);
LABEL_26:
    result = sub_22E3CD31C((uint64_t *)(v15[13] + 96), v15[13]);
    if (*(_DWORD *)(v15[16] + 20))
      result = sub_22F0CE304(a1, v15, a3);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_22F0CE4B8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;

  v4 = *a1;
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 2000) + 1) & 1) != 0 && !a1[2])
  {
    if (!a2
      || (*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104)),
          v4 = *a1,
          (**(_QWORD **)(a2 + 128) & 0x200) != 0))
    {
      a1[2] = sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v4 = *a1;
    }
  }
  v5 = a1[2];
  v6 = a1[31];
  v7 = sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
  if (v5 <= v7 * v6)
    v8 = v7 * v6;
  else
    v8 = v5;
  a1[2] = v8;
  v9 = *((unsigned __int8 *)a1 + 201);
  v10 = a1[5];
  v11 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[2];
  v13 = *a1;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 15088) + 776))(*(_QWORD *)(*a1 + 15088));
  v15 = 3;
  if (v14)
    v15 = 4;
  v16 = a1[v15];
  result = sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v13 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v18 = (v12 + result * v16 - 1) / (unint64_t)(result * v16) * result * v16;
  v19 = *((_BYTE *)a1 + 200);
  if ((v19 & 1) != 0)
  {
    v26 = a1[85];
    if ((a1[25] & 2) != 0 && v26 < v18)
    {
      *(int64x2_t *)(a1 + 3) = vdupq_n_s64(1uLL);
      *((_BYTE *)a1 + 200) = v19 & 0xFD;
    }
    a1[2] = v26;
  }
  else
  {
    a1[2] = v18;
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC)
    {
      v20 = v8 - v9;
      if (v18 > v8 - v9)
      {
        v21 = v18 - v20;
        v22 = (v18 - v20) & 7;
        v23 = (v18 - v20) >> 3;
        if ((v21 & 7) != 0)
          v24 = v21;
        else
          v24 = v23;
        v25 = *(_QWORD *)(*(_QWORD *)(*a1 + 1992) + 8);
        *(_DWORD *)(v25 + 312) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(v25 + 316) = 2360;
        if (*(char *)(v25 + 311) < 0)
        {
          **(_BYTE **)(v25 + 288) = 0;
          *(_QWORD *)(v25 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v25 + 288) = 0;
          *(_BYTE *)(v25 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v42, v25);
        v27 = *(_QWORD *)(a2 + 48);
        if (v27)
          v28 = v27 & 0xFFFFFFFFFFFFFFF0;
        else
          v28 = sub_22EF6462C(*a1, a2);
        v29 = v42;
        if (!v42)
        {
          v29 = (unsigned __int8 *)sub_22E3B8AAC(v43);
          v42 = v29;
        }
        v29[*v29 + 1] = 9;
        v30 = v42;
        v31 = *v42;
        *v42 = v31 + 1;
        *(_QWORD *)&v30[8 * v31 + 16] = v28;
        v30[(v31 + 1) + 1] = 3;
        v32 = v42;
        v33 = *v42;
        *v42 = v33 + 1;
        *(_QWORD *)&v32[8 * v33 + 16] = v24;
        v32[(v33 + 1) + 1] = 2;
        v34 = v42;
        v35 = *v42;
        *v42 = v35 + 1;
        *(_QWORD *)&v34[8 * v35 + 16] = v22 != 0;
        result = sub_22E3BB0B8((uint64_t)&v42);
        v19 = *((_BYTE *)a1 + 200);
      }
      if ((v19 & 4) != 0
        && a1[5] <= a1[3]
        && (v8 + v11 * v10 - 1) / (unint64_t)(v11 * v10) * v11 * v10 == a1[2]
        && !*((_BYTE *)a1 + 266))
      {
        v36 = *(_QWORD *)(*(_QWORD *)(*a1 + 1992) + 8);
        *(_DWORD *)(v36 + 312) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(v36 + 316) = 2362;
        if (*(char *)(v36 + 311) < 0)
        {
          **(_BYTE **)(v36 + 288) = 0;
          *(_QWORD *)(v36 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v36 + 288) = 0;
          *(_BYTE *)(v36 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v42, v36);
        v37 = *(_QWORD *)(a2 + 48);
        if (v37)
          v38 = v37 & 0xFFFFFFFFFFFFFFF0;
        else
          v38 = sub_22EF6462C(*a1, a2);
        v39 = v42;
        if (!v42)
        {
          v39 = (unsigned __int8 *)sub_22E3B8AAC(v43);
          v42 = v39;
        }
        v39[*v39 + 1] = 9;
        v40 = v42;
        v41 = *v42;
        *v42 = v41 + 1;
        *(_QWORD *)&v40[8 * v41 + 16] = v38;
        return sub_22E3BB0B8((uint64_t)&v42);
      }
    }
  }
  return result;
}

unint64_t sub_22F0CE84C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = sub_22F0CEED4(a1, a2);
  v7 = *a2;
  *(_QWORD *)&v8 = v4;
  BYTE8(v8) = 0;
  sub_22F3F0F78((uint64_t)&v6, (uint64_t)(a1 + 37), &v7, &v8);
  return sub_22F0CF39C(a1, a2, v4);
}

unint64_t sub_22F0CE8B8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE v6[24];
  uint64_t v7;
  uint64_t v8;

  v4 = sub_22F0CEED4(a1, a2);
  v7 = *a2;
  v8 = v4;
  sub_22F0CDB00((uint64_t)(a1 + 34), &v7, &v8, (uint64_t)v6);
  return sub_22F0CF39C(a1, a2, v4);
}

uint64_t sub_22F0CE920(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  result = sub_22E46A3A0(a2);
  if (result != v4)
  {
    v5 = v4;
    v6 = result + 24;
    while (1)
    {
      v7 = *(_QWORD *)(**(_QWORD **)(v6 - 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
        v7 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v6 - 8));
      v8 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 >= 3)
          v9 = 0;
        else
          v9 = (void *)v8;
      }
      else
      {
        v9 = 0;
      }
      if ((*(_BYTE *)(v6 - 12) & 1) != 0
        && (*(unsigned int (**)(_QWORD, void *))(**(_QWORD **)(*a1 + 15064) + 32))(*(_QWORD *)(*a1 + 15064), v9))
      {
        result = (uint64_t)sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 40), v9);
        v10 = a1[41];
        if (v10 == a1[40])
          v11 = 340;
        else
          v11 = 336;
        if (result == v10 + 8 * *(unsigned int *)((char *)a1 + v11))
        {
          a1[32] = v9;
          *((_BYTE *)a1 + 264) = 1;
          return result;
        }
        if (!a1[76])
          a1[76] = v9;
      }
      result = sub_22F0CE920(a1, v9);
      if (!a1[32])
      {
        v12 = v6 == v5;
        v6 += 24;
        if (!v12)
          continue;
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_22F0CEA54(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;

  v3 = a3;
  v24 = a2;
  if (a3)
  {
    v25 = 0;
    v6 = sub_22ECB1B60(*(_QWORD *)(a1 + 864), *(_DWORD *)(a1 + 880), a2, &v25);
    v7 = v25;
    if ((v6 & 1) != 0)
    {
      v8 = v25[1];
      if (v8)
        return v8;
    }
    else
    {
      v7 = sub_22F0CECD4(a1 + 864, &v24, v25);
      *v7 = a2;
      v7[1] = 0;
    }
    v8 = sub_22E3CD3D4(a1 + 768, 80, 3);
    *(_QWORD *)(v8 + 16) = v8 + 32;
    *(_QWORD *)(v8 + 24) = 0x400000000;
    v7[1] = v8;
  }
  else
  {
    v8 = sub_22E3CD3D4(a1 + 768, 80, 3);
    *(_QWORD *)(v8 + 16) = v8 + 32;
    *(_QWORD *)(v8 + 24) = 0x400000000;
  }
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = v3;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (!*(_DWORD *)(*(_QWORD *)(a2 + 128) + 20)
    || (v9 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)a1, a2) + 72) + 48), (v9 & 4) == 0))
  {
    v10 = 0;
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  v25 = 0;
  if ((sub_22ECB1B60(*(_QWORD *)(a1 + 864), *(_DWORD *)(a1 + 880), v9 & 0xFFFFFFFFFFFFFFF8, &v25) & 1) == 0)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v10 = v25[1];
  if (v10)
  {
    if (!*(_QWORD *)(v10 + 72))
    {
      *(_QWORD *)(v8 + 64) = v10;
      *(_QWORD *)(v10 + 72) = v8;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_12:
  v12 = sub_22E46A3A0(a2);
  if (v12 != v13)
  {
    v14 = v12;
    v15 = v13;
    do
    {
      v16 = *(_BYTE *)(v14 + 12);
      v17 = *(_QWORD *)(**(_QWORD **)(v14 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
        v17 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v14 + 16));
      v18 = sub_22F10C2A4(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
      if (v18)
      {
        if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 >= 3)
          v19 = 0;
        else
          v19 = v18;
      }
      else
      {
        v19 = 0;
      }
      v20 = sub_22F0CEA54(a1, v19, v16 & 1);
      v21 = *(unsigned int *)(v8 + 24);
      if (v21 >= *(unsigned int *)(v8 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(unsigned int *)(v8 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * v21) = v20;
      ++*(_DWORD *)(v8 + 24);
      v14 += 24;
    }
    while (v14 != v15);
  }
  if (!v10 && v11)
  {
    v25 = 0;
    sub_22ECB1B60(*(_QWORD *)(a1 + 864), *(_DWORD *)(a1 + 880), v11, &v25);
    v22 = v25[1];
    *(_QWORD *)(v8 + 64) = v22;
    *(_QWORD *)(v22 + 72) = v8;
  }
  return v8;
}

_QWORD *sub_22F0CECD4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F0CED84(a1, v6);
  v8 = 0;
  sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F0CED84(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = (uint64_t *)((char *)v4 + 8);
      v15 = 16 * v3;
      do
      {
        v16 = *(v14 - 1);
        if ((v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v16, &v20);
          v17 = v20;
          *v20 = v16;
          v17[1] = *v14;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v14 += 2;
        v15 -= 16;
      }
      while (v15);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 16 * v18;
      do
      {
        *result = -4096;
        result += 2;
        v19 -= 16;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_22F0CEED4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = sub_22F0C975C(*a1, *a2);
  if ((a1[25] & 1) == 0)
    goto LABEL_9;
  if (*((_BYTE *)a2 + 8))
  {
    v53 = *a2;
    v54 = 0;
    v5 = sub_22E46AA2C(a1 + 93, &v53, &v54);
    v6 = v54;
    v7 = a1[93];
    v8 = *((unsigned int *)a1 + 190);
  }
  else
  {
    v53 = *a2;
    v54 = 0;
    v5 = sub_22E46AA2C(a1 + 90, &v53, &v54);
    v6 = v54;
    v7 = a1[90];
    v8 = *((unsigned int *)a1 + 184);
  }
  v9 = v7 + 16 * v8;
  if (!v5)
    v6 = v9;
  if (v6 == v9)
  {
LABEL_9:
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v6 + 8);
    v11 = 1;
  }
  v12 = *(_QWORD *)(v4 + 72);
  v14 = *(_QWORD *)(v12 + 8);
  v13 = *(_QWORD *)(v12 + 16);
  v15 = *a1;
  v16 = v14;
  v17 = v13;
  if ((a1[25] & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v15 + 2000) + 250) & 0xF) << 16 < 0x30000u)
    {
      v16 = 1;
      goto LABEL_28;
    }
    v18 = *(_DWORD **)(v15 + 15088);
    v19 = v18[14];
    if (v19 == 42 && v18[16] == 3 && (v20 = v18[17], v20 == 25) || (v20 = v18[17], v16 = v14, v20 == 21))
      v16 = 1;
    if (v19 != 42)
    {
      v17 = v13;
      if (v20 != 21)
        goto LABEL_29;
      goto LABEL_28;
    }
    v21 = v18[16];
    v23 = v20 == 25 && v21 == 3 || v20 == 21;
    v17 = v13;
    if (v23)
LABEL_28:
      v17 = 1;
  }
LABEL_29:
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 776))(*(_QWORD *)(v15 + 15088));
  v52 = v4;
  if (v24)
  {
    v25 = *a2;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*a2 + 104) + 96), *(_QWORD *)(*a2 + 104));
    if ((**(_QWORD **)(v25 + 128) & 0x200) != 0 || *((_BYTE *)a1 + 267))
    {
      if ((a1[25] & 0x20) == 0)
      {
        v17 = v16;
        v13 = v14;
      }
    }
    else
    {
      *((_BYTE *)a1 + 267) = 1;
    }
  }
  else
  {
    v13 = v14;
  }
  v26 = *a2;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*a2 + 104) + 96), *(_QWORD *)(*a2 + 104));
  if (v10)
    v27 = v11;
  else
    v27 = 0;
  if ((**(_QWORD **)(v26 + 128) & 0x200) != 0
    && (v27 & 1) == 0
    && sub_22F0CF494((uint64_t *)a1[1], a2, 0))
  {
    v28 = a1[2];
    v29 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    if ((int64_t)(v28 / v29) <= *(_QWORD *)v52)
      v30 = *(_QWORD *)v52;
    else
      v30 = v28 / v29;
    v10 = 0;
    a1[2] = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v30;
    if ((a1[25] & 0x10) == 0 && (a1[25] & 3) != 1)
    {
      if (a1[3] < v16)
        a1[3] = v16;
      if (a1[5] < v13)
        a1[5] = v13;
      v10 = 0;
      if (a1[4] < v17)
        a1[4] = v17;
    }
  }
  else
  {
    v31 = a1[26];
    if (v31 >= v16)
      v32 = v16;
    else
      v32 = a1[26];
    if (v31 >= v17)
      v33 = v17;
    else
      v33 = a1[26];
    if (v31 >= v13)
      v34 = v13;
    else
      v34 = a1[26];
    if (v31)
      v35 = v34;
    else
      v35 = v13;
    if (v31)
      v36 = v33;
    else
      v36 = v17;
    if (v31)
      v16 = v32;
    if (v24)
      v37 = v36;
    else
      v37 = v16;
    if ((v11 & 1) != 0)
    {
      sub_22F0CF494((uint64_t *)a1[1], a2, v10);
      if ((a1[25] & 2) != 0)
      {
        v38 = a1[27];
        if (v10 < (uint64_t)((v37
                            + v38 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0))
                            - 1)
                           / v37
                           * v37))
        {
          a1[3] = 1;
          *((_BYTE *)a1 + 200) &= ~2u;
        }
      }
    }
    else
    {
      v39 = a1[27];
      v40 = (v37 + v39 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) - 1)
          / v37
          * v37;
      do
      {
        v10 = v40;
        v41 = sub_22F0CF494((uint64_t *)a1[1], a2, v40);
        v40 = v10 + v37;
      }
      while ((v41 & 1) == 0);
    }
    v42 = *a2;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*a2 + 104) + 96), *(_QWORD *)(*a2 + 104));
    if ((**(_QWORD **)(v42 + 128) & 0x200) != 0)
    {
      v49 = a1[2];
      v50 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      if ((uint64_t)(v49 / v50) <= *(_QWORD *)v52 + v10)
        v47 = *(_QWORD *)v52 + v10;
      else
        v47 = v49 / v50;
    }
    else
    {
      v43 = **(_QWORD **)(v52 + 72) + v10;
      a1[27] = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v43;
      v44 = a1[2];
      v45 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v46 = a1[27];
      v47 = v44 / v45;
      v48 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      if (v47 <= (uint64_t)(v46 / v48))
        v47 = v46 / v48;
    }
    a1[2] = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v47;
    if ((a1[25] & 0x10) == 0 && (a1[25] & 3) != 1)
    {
      if (a1[3] < v16)
        a1[3] = v16;
      if (a1[5] < v35)
        a1[5] = v35;
      if (a1[4] < v36)
        a1[4] = v36;
    }
  }
  return v10;
}

unint64_t sub_22F0CF39C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = *a2;
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*a2 + 104) + 96), *(_QWORD *)(*a2 + 104));
  if (*(_DWORD *)(*(_QWORD *)(v6 + 128) + 20))
  {
    v8 = (uint64_t *)a2[8];
    if (v8 && (_QWORD *)v8[9] == a2)
    {
      v16 = *v8;
      *(_QWORD *)&v17 = a3;
      BYTE8(v17) = 0;
      sub_22F3F0F78((uint64_t)&v15, (uint64_t)(a1 + 37), &v16, &v17);
      sub_22F0CF39C(a1, a2[8], a3);
    }
    result = sub_22F0C975C(*a1, *a2);
    v9 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v9)
    {
      v10 = result;
      v11 = (uint64_t **)a2[2];
      v12 = 8 * v9;
      do
      {
        v13 = *v11;
        if (!*((_BYTE *)*v11 + 8))
        {
          v14 = sub_22E46A3EC(v10, *v13);
          result = sub_22F0CF39C(a1, v13, v14 + a3);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_22F0CF494(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  if (a1[7])
  {
    result = sub_22F0CF500(a1, a2, a3);
    if (!(_DWORD)result)
      return result;
    v7 = *a2;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*a2 + 104) + 96), *(_QWORD *)(*a2 + 104));
    sub_22F0CF650((uint64_t)a1, a2, a3, (**(_QWORD **)(v7 + 128) >> 9) & 1);
  }
  return 1;
}

uint64_t sub_22F0CF500(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;

  if (a1[6] < a3)
    return 1;
  result = sub_22F0CF7A4((uint64_t)a1, *a2, a3);
  if ((_DWORD)result)
  {
    v7 = sub_22F0C975C(*a1, *a2);
    v8 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t **)a2[2];
      v10 = 8 * v8;
      while (1)
      {
        v11 = *v9;
        if (!*((_BYTE *)*v9 + 8))
        {
          v12 = sub_22E46A3EC(v7, *v11);
          result = sub_22F0CF500(a1, v11, v12 + a3);
          if (!(_DWORD)result)
            break;
        }
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v13 = a2[8];
      if (!v13 || *(uint64_t **)(v13 + 72) != a2 || (result = sub_22F0CF500(a1, v13, a3), (_DWORD)result))
      {
        v14 = sub_22EFC3B90(*a2);
        if (!v14)
          return 1;
        v15 = v14;
        v16 = 0;
LABEL_14:
        if ((*(_BYTE *)(v15 + 68) & 1) != 0
          || (v17 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16),
              v18 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)),
              result = sub_22F0CF8DC(a1, v15, v17 / v18 + a3),
              (_DWORD)result))
        {
          while (1)
          {
            v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v15)
              return 1;
            if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 <= 2)
            {
              ++v16;
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F0CF650(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;

  v7 = (uint64_t *)result;
  if ((a4 & 1) != 0 || *(_QWORD *)(result + 56) > a3)
  {
    sub_22F0CFC90(result, *a2, a3);
    v8 = sub_22F0C975C(*v7, *a2);
    v9 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v9)
    {
      v10 = (uint64_t **)a2[2];
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        if (!*((_BYTE *)*v10 + 8))
        {
          v13 = sub_22E46A3EC(v8, *v12);
          sub_22F0CF650(v7, v12, v13 + a3, a4);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    v14 = a2[8];
    if (v14 && *(uint64_t **)(v14 + 72) == a2)
      sub_22F0CF650(v7, v14, a3, a4);
    result = sub_22EFC3B90(*a2);
    if (result)
    {
      v15 = result;
      v16 = 0;
LABEL_13:
      if ((*(_BYTE *)(v15 + 68) & 1) == 0)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16);
        v18 = sub_22EF5CDF0(*v7, *(_QWORD *)(*(_QWORD *)(*v7 + 16408) & 0xFFFFFFFFFFFFFFF0));
        result = sub_22F0D0030(v7, *(_QWORD *)(v15 + 48), v17 / v18 + a3, a4);
      }
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v15)
          break;
        if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 <= 2)
        {
          ++v16;
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

BOOL sub_22F0CF7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x200) == 0)
    return 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & (37 * a3);
    v9 = (uint64_t *)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == a3)
      goto LABEL_9;
    v11 = 1;
    while (v10 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (v10 == a3)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_9;
      }
    }
  }
  v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_9:
  if ((uint64_t *)(v6 + 16 * v7) == v9)
    return 1;
  v15 = v9[1];
  v13 = v9 + 1;
  v14 = v15;
  if ((v15 & 4) != 0)
  {
    v17 = *(_QWORD **)(v14 & 0xFFFFFFFFFFFFFFF8);
    v16 = &v17[*(unsigned int *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v16 = &v13[v14 > 7];
    v17 = v13;
  }
  if (v17 != v16)
  {
    while (*v17 != a2)
    {
      if (++v17 == v16)
      {
        v17 = v16;
        break;
      }
    }
  }
  if ((v14 & 4) != 0)
    v19 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    v19 = (uint64_t)&v13[v14 > 7];
  return v17 == (_QWORD *)v19;
}

uint64_t sub_22F0CF8DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1[6] >= a3)
  {
    v4 = a3;
    v6 = *(_QWORD *)(a2 + 48);
    v7 = sub_22F10C2A4(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
    if (v7 && (*(_DWORD *)(v7 + 28) & 0x7Fu) - 35 <= 2)
      return sub_22F0CFA64(a1, v7, v7, v4);
    v8 = sub_22EF5C728(*a1, v6);
    if (v8)
    {
      v10 = v8;
      if (*(_BYTE *)(v8 + 16) == 2)
      {
        v11 = sub_22EF5BA38(*a1, *(_QWORD *)(v8 + 32));
        v12 = 0;
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v9 = 1;
        if (!v13 || *(_BYTE *)(v13 + 16) != 45)
          goto LABEL_21;
        v14 = sub_22F10C2A4(v13);
        if (v14)
        {
          if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
            v15 = 0;
          else
            v15 = v14;
        }
        else
        {
          v15 = 0;
        }
        v17 = (_QWORD *)sub_22F0C975C(*a1, v15);
        v18 = sub_22EF6A060(*a1, v10);
        if (v18)
        {
          v19 = v18;
          while (1)
          {
            if (a1[6] < v4)
            {
              v12 = 0;
              v9 = 1;
              goto LABEL_21;
            }
            if (!sub_22F0CFA64(a1, v15, v15, v4))
              break;
            v4 += *v17;
            if (!--v19)
              goto LABEL_20;
          }
          v12 = 0;
          v9 = 0;
          goto LABEL_21;
        }
      }
    }
LABEL_20:
    v12 = 1;
LABEL_21:
    v3 = v12 | v9;
    return v3 & 1;
  }
  v3 = 1;
  return v3 & 1;
}

uint64_t sub_22F0CFA64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;

  if (a1[6] < a4)
    return 1;
  result = sub_22F0CF7A4((uint64_t)a1, a2, a4);
  if ((_DWORD)result)
  {
    v9 = sub_22F0C975C(*a1, a2);
    v10 = sub_22E46A3A0(a2);
    if (v10 == v11)
    {
LABEL_16:
      if (a2 != a3 || (v18 = sub_22E483108(a2), v18 == v19))
      {
LABEL_28:
        v26 = sub_22EFC3B90(a2);
        if (!v26)
          return 1;
        v27 = v26;
        v28 = 0;
LABEL_30:
        if ((*(_BYTE *)(v27 + 68) & 1) != 0
          || (v29 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v28),
              v30 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)),
              result = sub_22F0CF8DC(a1, v27, v29 / v30 + a4),
              (_DWORD)result))
        {
          while (1)
          {
            v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v27)
              return 1;
            if ((*(_DWORD *)(v27 + 28) & 0x7Fu) - 49 <= 2)
            {
              ++v28;
              goto LABEL_30;
            }
          }
        }
      }
      else
      {
        v20 = v18;
        v21 = v19;
        while (1)
        {
          v22 = *(_QWORD *)(**(_QWORD **)(v20 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v22 + 8) & 0xF) != 0)
            v22 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v20 + 16));
          v23 = sub_22F10C2A4(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
          if (v23)
            v24 = (*(_DWORD *)(v23 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v23;
          else
            v24 = 0;
          v25 = sub_22F2500F4(v9, v24);
          if ((sub_22F0CFA64(a1, v24, a2, v25 + a4) & 1) == 0)
            return 0;
          v20 += 24;
          if (v20 == v21)
            goto LABEL_28;
        }
      }
    }
    else
    {
      v12 = v10;
      v13 = v11;
      while (1)
      {
        if ((*(_BYTE *)(v12 + 12) & 1) == 0)
        {
          v14 = *(_QWORD *)(**(_QWORD **)(v12 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
            v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v12 + 16));
          v15 = sub_22F10C2A4(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
          if (v15)
            v16 = (*(_DWORD *)(v15 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v15;
          else
            v16 = 0;
          v17 = sub_22E46A3EC(v9, v16);
          result = sub_22F0CFA64(a1, v16, a3, v17 + a4);
          if (!(_DWORD)result)
            break;
        }
        v12 += 24;
        if (v12 == v13)
          goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t sub_22F0CFC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unint64_t v44;
  _QWORD *v45;

  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x200) == 0)
    return result;
  result = a1 + 24;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 40);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_14;
  }
  v9 = (v8 - 1) & (37 * a3);
  v10 = (_QWORD *)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == 0x8000000000000000;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & (v8 - 1);
      v10 = (_QWORD *)(v7 + 16 * v9);
      v11 = *v10;
      if (*v10 == a3)
        goto LABEL_20;
    }
    if (v12)
      v10 = v12;
LABEL_14:
    v16 = *(_DWORD *)(a1 + 32);
    if (4 * v16 + 4 >= 3 * v8)
    {
      result = (uint64_t)sub_22F0D0184(result, 2 * v8);
      v29 = *(_QWORD *)(a1 + 24);
      v30 = *(_DWORD *)(a1 + 40) - 1;
      v31 = v30 & (37 * a3);
      v10 = (_QWORD *)(v29 + 16 * v31);
      v32 = *v10;
      if (*v10 == a3)
        goto LABEL_57;
      v33 = 0;
      v34 = 1;
      while (v32 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v33)
          v35 = 0;
        else
          v35 = v32 == 0x8000000000000000;
        if (v35)
          v33 = v10;
        v36 = v31 + v34++;
        v31 = v36 & v30;
        v10 = (_QWORD *)(v29 + 16 * v31);
        v32 = *v10;
        if (*v10 == a3)
          goto LABEL_57;
      }
    }
    else
    {
      if (v8 + ~v16 - *(_DWORD *)(a1 + 36) > v8 >> 3)
      {
LABEL_16:
        v17 = *v10;
LABEL_17:
        ++*(_DWORD *)(a1 + 32);
        if (v17 != 0x7FFFFFFFFFFFFFFFLL)
          --*(_DWORD *)(a1 + 36);
        *v10 = a3;
        v10[1] = 0;
        goto LABEL_20;
      }
      result = (uint64_t)sub_22F0D0184(result, v8);
      v37 = *(_QWORD *)(a1 + 24);
      v38 = *(_DWORD *)(a1 + 40) - 1;
      v39 = v38 & (37 * a3);
      v10 = (_QWORD *)(v37 + 16 * v39);
      v40 = *v10;
      if (*v10 == a3)
      {
LABEL_57:
        v17 = a3;
        goto LABEL_17;
      }
      v33 = 0;
      v41 = 1;
      while (v40 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v33)
          v42 = 0;
        else
          v42 = v40 == 0x8000000000000000;
        if (v42)
          v33 = v10;
        v43 = v39 + v41++;
        v39 = v43 & v38;
        v10 = (_QWORD *)(v37 + 16 * v39);
        v40 = *v10;
        if (*v10 == a3)
          goto LABEL_57;
      }
    }
    if (v33)
      v10 = v33;
    goto LABEL_16;
  }
LABEL_20:
  v20 = v10[1];
  v19 = v10 + 1;
  v18 = v20;
  if ((v20 & 4) != 0)
  {
    v22 = *(_QWORD **)(v18 & 0xFFFFFFFFFFFFFFF8);
    v21 = &v22[*(unsigned int *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v21 = &v19[v18 > 7];
    v22 = v19;
  }
  if (v22 != v21)
  {
    while (*v22 != a2)
    {
      if (++v22 == v21)
      {
        v22 = v21;
        break;
      }
    }
  }
  if ((v18 & 4) != 0)
    v23 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    v23 = (uint64_t)&v19[v18 > 7];
  if (v22 == (_QWORD *)v23)
  {
    if (v18 <= 7)
    {
      *v19 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      if ((v18 & 4) == 0)
      {
        v24 = v18 & 0xFFFFFFFFFFFFFFF8;
        result = operator new();
        *(_QWORD *)result = result + 16;
        *(_QWORD *)(result + 8) = 0x400000000;
        *v19 = result | 4;
        v25 = result & 0xFFFFFFFFFFFFFFF8;
        v26 = *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v26 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
        {
          v45 = v19;
          v44 = result & 0xFFFFFFFFFFFFFFF8;
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = v44;
          v19 = v45;
          v26 = *(_DWORD *)(v25 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v25 + 8 * v26) = v24;
        ++*(_DWORD *)(v25 + 8);
        v18 = *v19;
      }
      v27 = v18 & 0xFFFFFFFFFFFFFFF8;
      v28 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v28 >= *(_DWORD *)(v27 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = *(_DWORD *)(v27 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = a2;
      ++*(_DWORD *)(v27 + 8);
    }
    if (*(_QWORD *)(a1 + 48) < a3)
      *(_QWORD *)(a1 + 48) = a3;
  }
  return result;
}

uint64_t sub_22F0D0030(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v8 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v8 && (*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 <= 2)
    return sub_22F0D0344((unint64_t)a1, v8, v8, a3, a4);
  result = sub_22EF5C728(*a1, a2);
  if (result)
  {
    v10 = result;
    if (*(_BYTE *)(result + 16) == 2)
    {
      result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*a1, *(_QWORD *)(result + 32)) & 0xFFFFFFFFFFFFFFF0)
                                     + 8) & 0xFFFFFFFFFFFFFFF0);
      if (result)
      {
        if (*(_BYTE *)(result + 16) == 45)
        {
          v11 = sub_22F10C2A4(result);
          if (v11)
            v12 = (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v11;
          else
            v12 = 0;
          v13 = (_QWORD *)sub_22F0C975C(*a1, v12);
          result = sub_22EF6A060(*a1, v10);
          if (result)
          {
            v14 = result;
            do
            {
              if ((a4 & 1) == 0 && a3 >= a1[7])
                break;
              result = sub_22F0D0344((unint64_t)a1, v12, v12, a3, a4);
              a3 += *v13;
              --v14;
            }
            while (v14);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22F0D0184(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0x7FFFFFFFFFFFFFFFLL;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_QWORD *)v12;
        if ((unint64_t)(*(_QWORD *)v12 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & (37 * v13);
          v16 = (_QWORD *)(*(_QWORD *)a1 + 16 * v15);
          v17 = *v16;
          if (v13 != *v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != 0x7FFFFFFFFFFFFFFFLL)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == 0x8000000000000000;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v21 & v14));
              v17 = *v16;
              if (v13 == *v16)
                goto LABEL_14;
            }
            if (v18)
              v16 = v18;
          }
LABEL_14:
          *v16 = v13;
          v16[1] = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          ++*(_DWORD *)(a1 + 8);
          sub_22F29CFE8((uint64_t *)v12 + 1);
        }
        v12 = (llvm *)((char *)v12 + 16);
      }
      while (v12 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      do
      {
        *result = 0x7FFFFFFFFFFFFFFFLL;
        result += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  return result;
}

unint64_t sub_22F0D0344(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;

  v9 = (_QWORD *)result;
  if ((a5 & 1) != 0 || *(_QWORD *)(result + 56) > a4)
  {
    sub_22F0CFC90(result, a2, a4);
    v10 = sub_22F0C975C(*v9, a2);
    v11 = sub_22E46A3A0(a2);
    if (v11 != v12)
    {
      v13 = v11;
      v14 = v12;
      do
      {
        if ((*(_BYTE *)(v13 + 12) & 1) == 0)
        {
          v15 = *(_QWORD *)(**(_QWORD **)(v13 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
            v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v13 + 16));
          v16 = sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
          if (v16)
          {
            if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3)
              v17 = 0;
            else
              v17 = v16;
          }
          else
          {
            v17 = 0;
          }
          v18 = sub_22E46A3EC(v10, v17);
          sub_22F0D0344(v9, v17, a3, v18 + a4, a5);
        }
        v13 += 24;
      }
      while (v13 != v14);
    }
    if (a2 == a3)
    {
      v19 = sub_22E483108(a2);
      if (v19 != v20)
      {
        v21 = v19;
        v22 = v20;
        do
        {
          v23 = *(_QWORD *)(**(_QWORD **)(v21 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v23 + 8) & 0xF) != 0)
            v23 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v21 + 16));
          v24 = sub_22F10C2A4(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
          if (v24)
          {
            if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3)
              v25 = 0;
            else
              v25 = v24;
          }
          else
          {
            v25 = 0;
          }
          v26 = sub_22F2500F4(v10, v25);
          sub_22F0D0344(v9, v25, a2, v26 + a4, a5);
          v21 += 24;
        }
        while (v21 != v22);
      }
    }
    result = sub_22EFC3B90(a2);
    if (result)
    {
      v27 = result;
      v28 = 0;
LABEL_28:
      if ((*(_BYTE *)(v27 + 68) & 1) == 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v28);
        v30 = sub_22EF5CDF0(*v9, *(_QWORD *)(*(_QWORD *)(*v9 + 16408) & 0xFFFFFFFFFFFFFFF0));
        result = sub_22F0D0030(v9, *(_QWORD *)(v27 + 48), v29 / v30 + a4, a5);
      }
      while (1)
      {
        v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v27)
          break;
        if ((*(_DWORD *)(v27 + 28) & 0x7Fu) - 49 <= 2)
        {
          ++v28;
          goto LABEL_28;
        }
      }
    }
  }
  return result;
}

void sub_22F0D0578(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  unsigned int v55;
  __int128 v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t i;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  int64_t v101;
  unint64_t v102;
  unint64_t v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t *v115;
  uint64_t v116;
  int64_t v117;
  unint64_t *j;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int64_t v131;
  uint64_t v132;
  int64_t v133;
  int64_t v134;
  int64_t v135;
  int64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unsigned __int8 *v174;
  size_t v175;
  unsigned __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  _DWORD *v181;
  unsigned int v182;
  unint64_t v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  int v195;
  unint64_t *v196;
  unsigned __int8 *v197;
  unint64_t v198;
  unsigned __int8 *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  uint64_t v204;
  unsigned __int8 *v205;
  uint64_t v206;
  int v207;
  int64_t v208;
  _BYTE v209[32];
  uint64_t v210;
  __int128 __dst;
  _BYTE v212[24];
  uint64_t v213;
  uint64_t v214;

  v4 = a2;
  v214 = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t *)(a2 + 48);
  v7 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  v8 = v7;
  if (v7)
  {
    v12 = (*(_DWORD *)(v7 + 28) & 0x7F) - 35;
    v10 = v12 < 3;
    if (v12 >= 3)
      v13 = 0;
    else
      v13 = v7;
    v9 = 0;
    if (sub_22E4EF458(v4) && v12 <= 2)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 104) + 96), *(_QWORD *)(v13 + 104));
      v11 = (**(_QWORD **)(v13 + 128) >> 9) & 1;
      v9 = 1;
      v10 = 1;
    }
    else
    {
      v8 = v13;
      LOBYTE(v11) = 0;
    }
  }
  else
  {
    sub_22E4EF458(v4);
    v9 = 0;
    v10 = 0;
    LOBYTE(v11) = 0;
  }
  v14 = 0;
  if ((a1[25] & 8) == 0 && (v11 & 1) == 0)
  {
    v15 = a1[27];
    v14 = v15 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
  }
  v202 = v14;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 15088) + 776))(*(_QWORD *)(*a1 + 15088));
  if (v16 && (*((_BYTE *)a1 + 267) ? (v17 = 1) : (v17 = v11), (v17 & 1) == 0))
  {
    v18 = 1;
    *((_BYTE *)a1 + 267) = ((*((unsigned __int8 *)a1 + 200) >> 3) & 1) == 0;
  }
  else
  {
    v18 = 0;
  }
  if ((*(_BYTE *)(v4 + 68) & 1) != 0)
  {
    v20 = (a1[25] & 4) != 0 || sub_22E6A4B04(v4);
    v21 = sub_22EFC2EF4(v4, *a1);
    v22 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0));
    v23 = v22;
    v25 = v24;
    v26 = v24;
    if ((a1[25] & 0x40) != 0)
    {
      v27 = *((unsigned __int8 *)a1 + 202);
      if (v22 == v27 && v21 <= *((unsigned __int8 *)a1 + 201))
      {
        v26 = v22;
      }
      else
      {
        if (v27 | v21)
          v26 = v22;
        else
          v26 = 1;
        *(_WORD *)((char *)a1 + 201) = 0;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(*a1 + 15088) + 68) == 21)
    {
      v46 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16528) & 0xFFFFFFFFFFFFFFF0));
      v47 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16528) & 0xFFFFFFFFFFFFFFF0));
      if (v23 >= v46)
      {
        if (v23 <= v47)
        {
          v47 = v23;
        }
        else
        {
          v48 = HIDWORD(v25);
          v49 = llvm::Triple::isArch32Bit((llvm::Triple *)(*(_QWORD *)(*a1 + 15088) + 32)) ^ 1;
          if (v21 > 0x20)
            v49 = 1;
          if (v48)
            v50 = 1;
          else
            v50 = v49;
          if (!v50)
            v26 = 32;
          if (v49)
            v47 = v23;
          else
            v47 = 32;
        }
      }
      if (v47 > v26)
        v26 = v47;
      v23 = v47;
    }
    if (v23 < v21)
    {
      v51 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*a1 + 15088) + 68) != 21)
      {
        v56 = *(_OWORD *)(v51 + 16528);
        __dst = *(_OWORD *)(v51 + 16512);
        *(_OWORD *)v212 = v56;
        *(_QWORD *)&v212[16] = *(_QWORD *)(v51 + 16544);
        v57 = __dst;
        if (sub_22EF5CDF0(v51, *(_QWORD *)(__dst & 0xFFFFFFFFFFFFFFF0)) <= v21)
        {
          for (i = 0; i != 32; i += 8)
          {
            v92 = *(_QWORD *)&v212[i - 8];
            if (sub_22EF5CDF0(*a1, *(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF0)) > v21)
              break;
            v57 = v92;
          }
        }
        else
        {
          v57 = 0;
        }
        v93 = sub_22EF5D130(*a1, v57);
        *(_WORD *)((char *)a1 + 201) = 0;
        v94 = a1[27];
        if ((a1[25] & 8) != 0)
        {
          v96 = 0;
          v97 = (v21 + 7) & 0x1FFFFFFF8;
          if (v94 > v97)
            v97 = a1[27];
        }
        else
        {
          v95 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
          v96 = (v94 + v95 * v93 - 1) / (v95 * v93) * v95 * v93;
          v97 = (v96 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_BYTE *)a1 + 201) = v97 - (v96 + v21);
        }
        a1[27] = v97;
        v98 = *((_DWORD *)a1 + 16);
        if (v98 >= *((_DWORD *)a1 + 17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v98 = *((_DWORD *)a1 + 16);
        }
        *(_QWORD *)(a1[7] + 8 * v98) = v96;
        ++*((_DWORD *)a1 + 16);
        sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22F0D19FC(a1, v96, v94, v96, v20, v4);
        v99 = a1[2];
        if (v99 <= a1[27])
          v99 = a1[27];
        a1[2] = v99;
        if ((a1[25] & 0x10) == 0 && (a1[25] & 3) != 1)
        {
          if (a1[3] < v93)
            a1[3] = v93;
          if (a1[5] < v93)
            a1[5] = v93;
          if (a1[4] < v93)
            a1[4] = v93;
        }
        return;
      }
    }
    if ((a1[25] & 8) != 0)
    {
      v52 = 0;
      if ((a1[25] & 0x40) != 0)
        goto LABEL_82;
    }
    else
    {
      v52 = a1[27] - *((unsigned __int8 *)a1 + 201);
      if ((a1[25] & 0x40) != 0)
      {
LABEL_82:
        v53 = 0;
        goto LABEL_97;
      }
    }
    v54 = *(_QWORD *)(*a1 + 15088) + *(_QWORD *)(**(_QWORD **)(*a1 + 15088) - 24);
    if ((*(_BYTE *)(v54 + 160) & 2) == 0)
    {
      v55 = 1;
      if (!(_DWORD)v21)
      {
        v53 = v20;
        if ((*(_BYTE *)(v54 + 160) & 4) == 0)
          goto LABEL_98;
        if ((a1[25] & 8) != 0 || v52 || (*(_BYTE *)(v54 + 160) & 8) != 0)
        {
          if (v26 <= *(_DWORD *)(v54 + 164))
            v55 = *(_DWORD *)(v54 + 164);
          else
            v55 = v26;
        }
      }
      v53 = v20;
LABEL_98:
      if ((v53 & ((_DWORD)v21 != 0)) != 0)
        v58 = 1;
      else
        v58 = v55;
      v59 = sub_22EFC8A80(v4);
      v60 = v59;
      if (v58 <= v59)
        v61 = v59;
      else
        v61 = v58;
      if (v55 <= v59)
        v62 = v59;
      else
        v62 = v55;
      if (v59)
      {
        v55 = v62;
        v63 = v61;
      }
      else
      {
        v63 = v58;
      }
      v64 = *((_DWORD *)a1 + 52);
      v65 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v64;
      v66 = a1[26];
      if (v55 >= v65)
        v67 = v65;
      else
        v67 = v55;
      v203 = v20;
      if (v20)
        v68 = v55;
      else
        v68 = v63;
      if (v68 >= v65)
        v68 = v65;
      if (!(_DWORD)v21)
      {
        v67 = v55;
        v68 = v63;
      }
      if (v66)
        v69 = v67;
      else
        v69 = v55;
      if (!v66)
        v68 = v63;
      v70 = *((_BYTE *)a1 + 200);
      if ((v70 & 0x48) == 0x48)
        v71 = 1;
      else
        v71 = v69;
      if ((v70 & 0x48) == 0x48)
        v72 = 1;
      else
        v72 = v68;
      if ((a1[25] & 0x40) != 0)
      {
        if ((_DWORD)v21)
        {
          v73 = v52;
          v74 = v52;
          if (v21 <= *((unsigned __int8 *)a1 + 201))
          {
LABEL_159:
            if ((a1[25] & 1) == 0)
              goto LABEL_160;
LABEL_139:
            v200 = v74;
            *(_QWORD *)&__dst = v4;
            v75 = sub_22F2AD0CC(a1 + 87, &__dst)[1];
            v76 = *((_BYTE *)a1 + 200);
            if ((v76 & 2) != 0 && v75 < v73)
            {
              *(int64x2_t *)(a1 + 3) = vdupq_n_s64(1uLL);
              *((_BYTE *)a1 + 200) = v76 & 0xFD;
            }
            v74 = v200;
            goto LABEL_161;
          }
        }
        v73 = (v52 - 1 + v72) / v72 * v72;
        v74 = (v52 - 1 + v71) / v71 * v71;
        *((_BYTE *)a1 + 201) = 0;
        if ((v70 & 1) != 0)
          goto LABEL_139;
LABEL_160:
        v75 = v73;
LABEL_161:
        v78 = *((_DWORD *)a1 + 16);
        if (v78 >= *((_DWORD *)a1 + 17))
        {
          v188 = v74;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v74 = v188;
          v78 = *((_DWORD *)a1 + 16);
        }
        *(_QWORD *)(a1[7] + 8 * v78) = v75;
        ++*((_DWORD *)a1 + 16);
        v79 = *((_BYTE *)a1 + 200);
        v80 = *(_QWORD *)(*a1 + 15088);
        if ((v79 & 0x40) == 0 && (*(_BYTE *)(v80 + *(_QWORD *)(*(_QWORD *)v80 - 24) + 160) & 4) == 0)
        {
          v81 = *(_QWORD *)(v4 + 40);
          if ((v81 & 7) != 0 || v81 < 8)
          {
            LODWORD(v71) = 1;
            LODWORD(v72) = 1;
          }
        }
        v84 = v79 & 0x40;
        if (*(_DWORD *)(v80 + 68) == 21 && !(_DWORD)v21)
        {
          if (v203)
            v85 = 1;
          else
            v85 = v72;
          if (v71 >= v65)
            v86 = v65;
          else
            v86 = v71;
          if (v85 >= v65)
            v87 = v65;
          else
            v87 = v85;
          if (a1[26])
          {
            LODWORD(v71) = v86;
            LODWORD(v72) = v87;
          }
          else
          {
            LODWORD(v72) = v85;
          }
        }
        if ((a1[25] & 1) == 0)
        {
          sub_22F0D19FC(a1, v75, v52, v74, v203, v4);
          v79 = *((_BYTE *)a1 + 200);
          v84 = v79 & 0x40;
        }
        if ((v79 & 8) != 0)
        {
          v89 = (v21 + 7) & 0x1FFFFFFF8;
          v90 = 8;
          if ((_DWORD)v21)
            v90 = v23;
          if (v84)
            v89 = v90;
          if (a1[27] > v89)
            v89 = a1[27];
          a1[27] = v89;
        }
        else if (v84 && (_DWORD)v21)
        {
          v88 = *((_BYTE *)a1 + 201);
          if (v88)
          {
            v89 = a1[27];
          }
          else
          {
            v89 = v75 + v23;
            a1[27] = v75 + v23;
            v88 = v23;
          }
          *((_BYTE *)a1 + 201) = v88 - v21;
          *((_BYTE *)a1 + 202) = v23;
        }
        else
        {
          v89 = (v75 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          a1[27] = v89;
          *((_BYTE *)a1 + 201) = v89 - (v75 + v21);
          *((_BYTE *)a1 + 202) = 0;
        }
        if (a1[2] > v89)
          v89 = a1[2];
        a1[2] = v89;
        v101 = v72
             / (unint64_t)sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        if (a1[6] > v101)
          v101 = a1[6];
        a1[6] = v101;
        v102 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v103 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        if ((a1[25] & 0x10) == 0 && (a1[25] & 3) != 1)
        {
          v104 = v72 / v102;
          v105 = v71 / v103;
          if (a1[3] < v104)
            a1[3] = v104;
          if (a1[5] < v105)
            a1[5] = v105;
          if (a1[4] < v104)
            a1[4] = v104;
        }
        return;
      }
      if (!(_DWORD)v21)
      {
        v77 = v52 - 1;
        v73 = (v52 - 1 + v72) / v72 * v72;
        goto LABEL_158;
      }
      if (v66 || (v52 & ((_DWORD)v72 - 1)) + v21 <= v23)
      {
        v73 = v52;
        if (v60)
        {
          if (!v65 || (v73 = v52, v60 <= v65))
          {
            v73 = v52;
            if ((*(_BYTE *)(*(_QWORD *)(*a1 + 15088) + *(_QWORD *)(**(_QWORD **)(*a1 + 15088) - 24) + 160) & 0x10) != 0)
              v73 = (v52 + v60 - 1) / v60 * v60;
          }
        }
        if (v66)
        {
LABEL_151:
          if (v60
            && (!v65 || v60 <= v65)
            && (*(_BYTE *)(*(_QWORD *)(*a1 + 15088) + *(_QWORD *)(**(_QWORD **)(*a1 + 15088) - 24) + 160) & 0x10) != 0)
          {
            v74 = (v52 + v60 - 1) / v60 * v60;
            if ((a1[25] & 1) == 0)
              goto LABEL_160;
            goto LABEL_139;
          }
          v74 = v52;
          if ((a1[25] & 1) != 0)
            goto LABEL_139;
          goto LABEL_160;
        }
      }
      else
      {
        v73 = (v52 + v72 - 1) / v72 * v72;
      }
      if ((v52 & ((_DWORD)v71 - 1)) + v21 > v23)
      {
        v77 = v52 - 1;
LABEL_158:
        v74 = (v77 + v71) / v71 * v71;
        goto LABEL_159;
      }
      goto LABEL_151;
    }
    v53 = v20;
LABEL_97:
    v55 = v26;
    goto LABEL_98;
  }
  v194 = v11;
  v191 = *((unsigned __int8 *)a1 + 201);
  v192 = a1[27];
  *(_WORD *)((char *)a1 + 201) = 0;
  v19 = *(_QWORD *)(*a1 + 15088);
  if (*(char *)(v19 + 55) < 0)
  {
    sub_22E3BB2B4(&__dst, *(void **)(v19 + 32), *(_QWORD *)(v19 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v19 + 32);
    *(_QWORD *)v212 = *(_QWORD *)(v19 + 48);
  }
  *(_OWORD *)&v212[8] = *(_OWORD *)(v19 + 56);
  v213 = *(_QWORD *)(v19 + 72);
  v28 = (a1[25] & 4) != 0
     && (!v10
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104)),
          (**(_QWORD **)(v8 + 128) & 0x100) != 0)
      || ((*(unsigned __int16 *)(*(_QWORD *)(*a1 + 2000) + 248) | (*(unsigned __int8 *)(*(_QWORD *)(*a1 + 2000)
                                                                                          + 250) << 16)) & 0x80000) == 0
      || *(_DWORD *)&v212[8] == 42 && *(_QWORD *)&v212[16] == 0x1900000003
      || (*(_DWORD *)&v212[20] - 3) < 0x1F && ((0x7E000111u >> (v212[20] - 3)) & 1) != 0)
     || sub_22E6A4B04(v4);
  v29 = (uint64_t *)(*v6 & 0xFFFFFFFFFFFFFFF0);
  v30 = *v29;
  v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v195 = a3;
  if (v31 == 4)
  {
    sub_22EF5CCD0(&v205, *a1, v30);
    v32 = 0;
    v199 = 0;
    v33 = v206;
    v210 = v206;
    v34 = v207;
    goto LABEL_261;
  }
  v35 = *(_DWORD *)(v30 + 16);
  if ((v35 & 0xFE) == 0x28)
    goto LABEL_50;
  if ((v31 & 0xFE) != 0x28)
  {
LABEL_238:
    sub_22EF5CCD0(&v205, *a1, *v29);
    v33 = v206;
    v210 = v206;
    v34 = v207;
    v197 = v205;
    v199 = v205;
    if (v9)
    {
      v106 = sub_22F0C975C(*a1, v8);
      v107 = **(unsigned __int8 ***)(v106 + 72);
      if ((uint64_t)v107 <= *(_QWORD *)(v106 + 8))
        v107 = *(unsigned __int8 **)(v106 + 8);
      v197 = v107;
    }
    if ((a1[25] & 0x40) != 0)
    {
      v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*a1, *v6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v32 = (unint64_t)v197;
      if (!v108 || *(_BYTE *)(v108 + 16) != 11)
        goto LABEL_261;
      sub_22EF5CCD0(&v205, *a1, v108);
      v109 = v205;
      v110 = (uint8x8_t)vcnt_s8((int8x8_t)v205);
      v110.i16[0] = vaddlv_u8(v110);
      v111 = v110.u32[0];
      if (v110.u32[0] != 1)
      {
        v112 = *(_QWORD *)(*a1 + 15088);
        if (*(_DWORD *)(v112 + 68) != 15 || *(_DWORD *)(v112 + 72) != 1)
        {
          v113 = *(_QWORD *)(*(_QWORD *)(*a1 + 1992) + 8);
          *(_DWORD *)(v113 + 312) = *(_DWORD *)(v4 + 24);
          *(_DWORD *)(v113 + 316) = 2339;
          if (*(char *)(v113 + 311) < 0)
          {
            **(_BYTE **)(v113 + 288) = 0;
            *(_QWORD *)(v113 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v113 + 288) = 0;
            *(_BYTE *)(v113 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v209, v113);
          sub_22E3BB0B8((uint64_t)v209);
        }
      }
      v114 = v111 != 1 || (uint64_t)v109 <= v33;
      if (!v114)
        v33 = (int64_t)v109;
      v210 = v33;
    }
    v32 = (unint64_t)v197;
    goto LABEL_261;
  }
  v36 = sub_22F10CF48(v30);
  if (!v36)
  {
    v29 = (uint64_t *)(*v6 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_238;
  }
  v30 = v36;
  v35 = *(_DWORD *)(v36 + 16);
LABEL_50:
  v37 = *a1;
  if ((v35 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v30)
          break;
        v39 = *(_DWORD *)(v30 + 16);
        if ((v39 & 0xFE) != 0x28)
          break;
        if ((v39 & 0x100000) == 0)
          goto LABEL_57;
      }
      v30 = sub_22F10CF48(v30);
    }
    while ((*(_DWORD *)(v30 + 16) & 0x100000) != 0);
LABEL_57:
    v38 = *a1;
  }
  else
  {
    v38 = *a1;
  }
  v40 = sub_22EF5CF80(v37, *(_QWORD *)(v30 + 32));
  v41 = *(uint64_t **)(v38 + 15088);
  v42 = *v41;
  if ((_DWORD)v40)
  {
    v43 = (*(uint64_t (**)(void))(v42 + 864))();
    v32 = v43 / sub_22EF5CDF0(v38, *(_QWORD *)(*(_QWORD *)(v38 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v44 = *a1;
    v45 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*a1 + 15088) + 872))(*(_QWORD *)(*a1 + 15088), v40);
  }
  else
  {
    v100 = *((unsigned __int8 *)v41 + *(_QWORD *)(v42 - 24));
    v32 = v100 / sub_22EF5CDF0(v38, *(_QWORD *)(*(_QWORD *)(v38 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v44 = *a1;
    v45 = *(unsigned __int8 *)(*(_QWORD *)(*a1 + 15088) + *(_QWORD *)(**(_QWORD **)(*a1 + 15088) - 24) + 1);
  }
  v34 = 0;
  v33 = v45 / sub_22EF5CDF0(v44, *(_QWORD *)(*(_QWORD *)(v44 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v210 = v33;
  v199 = (unsigned __int8 *)v32;
LABEL_261:
  v208 = v33;
  v196 = v6;
  v198 = v32;
  v190 = v28;
  if (!v16)
  {
    v115 = &v210;
LABEL_295:
    v126 = v33;
    goto LABEL_296;
  }
  if (v34 == 1)
    goto LABEL_294;
  if (v34 == 2 && v28)
  {
    v115 = &v208;
    v116 = 1;
    v117 = v33;
    v33 = 1;
    goto LABEL_301;
  }
  if ((v18 & 1) == 0 && (a1[25] & 0x20) == 0)
  {
LABEL_294:
    v115 = &v208;
    goto LABEL_295;
  }
  for (j = v6; ; j = (unint64_t *)(v121 + 32))
  {
    v119 = *(_QWORD *)(*j & 0xFFFFFFFFFFFFFFF0);
    if (v119)
      v120 = (*(_DWORD *)(v119 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v120 = 0;
    if (v120)
    {
      v121 = *(_QWORD *)(*j & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v119 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v121 = sub_22F10CF48(v119);
    if (!v121)
    {
      v189 = *(unsigned __int8 *)(v119 + 16);
      goto LABEL_280;
    }
  }
  v189 = *(_DWORD *)(v119 + 16);
LABEL_280:
  if (v119)
    v122 = v189 == 12;
  else
    v122 = 0;
  if (v122)
  {
    v125 = v119;
LABEL_291:
    v124 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16);
    goto LABEL_292;
  }
  v123 = *(_QWORD *)(*(_QWORD *)(v119 + 8) & 0xFFFFFFFFFFFFFFF0);
  v124 = *(_DWORD *)(v123 + 16);
  if (v124 != 12)
    goto LABEL_287;
  v125 = sub_22F10CF48(v119);
  if (v125)
    goto LABEL_291;
  v123 = *(_QWORD *)(*(_QWORD *)(v119 + 8) & 0xFFFFFFFFFFFFFFF0);
  v124 = *(_DWORD *)(v123 + 16);
LABEL_287:
  if (v124 == 45)
  {
    v187 = sub_22F114198(*(_QWORD *)(v123 + 24));
    v126 = *(_QWORD *)(sub_22F0C975C(*a1, v187) + 24);
  }
  else
  {
    if (v124 != 11)
      goto LABEL_294;
LABEL_292:
    if ((v124 & 0xFF00000) != 0x6A00000)
      goto LABEL_294;
    v126 = 8;
  }
  v208 = v126;
  v115 = &v208;
LABEL_296:
  v127 = !v28;
  if (v28)
    v33 = 1;
  v117 = *v115;
  if (v127)
    v116 = v126;
  else
    v116 = 1;
LABEL_301:
  v128 = *a1;
  v129 = sub_22EFC8A80(v4);
  v130 = sub_22EF5CDF0(v128, *(_QWORD *)(*(_QWORD *)(v128 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v131 = v129 / v130;
  if (v33 <= (uint64_t)(v129 / v130))
    v132 = v129 / v130;
  else
    v132 = v33;
  v210 = v132;
  if (v116 <= v131)
    v133 = v129 / v130;
  else
    v133 = v116;
  v208 = v133;
  if (v117 <= v131)
    v134 = v129 / v130;
  else
    v134 = v117;
  v135 = a1[26];
  v136 = v117;
  if (v135)
  {
    v137 = &v210;
    if (v135 < v132)
      v137 = a1 + 26;
    v132 = *v137;
    v210 = *v137;
    if (v135 < v133)
      v133 = v135;
    v208 = v133;
    if (v135 < v134)
      v134 = v135;
  }
  v138 = (uint64_t)v199;
  v139 = *v115;
  v140 = v202 - 1;
  v141 = (v139 + v202 - 1) / v139 * v139;
  v142 = v4;
  v193 = v136;
  v201 = v134;
  if ((a1[25] & 1) != 0)
  {
    v168 = *a1;
    v204 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v205 = (unsigned __int8 *)v4;
    v169 = sub_22F2AD0CC(a1 + 87, &v205)[1];
    v170 = *((_BYTE *)a1 + 200);
    if ((v170 & 2) != 0 && v169 < v204 * v141)
    {
      *(int64x2_t *)(a1 + 3) = vdupq_n_s64(1uLL);
      *((_BYTE *)a1 + 200) = v170 & 0xFD;
    }
    v141 = v169 / sub_22EF5CDF0(v168, *(_QWORD *)(*(_QWORD *)(v168 + 16408) & 0xFFFFFFFFFFFFFFF0));
    if ((a1[25] & 8) == 0)
    {
      v171 = (uint64_t *)a1[1];
      if (v171)
        sub_22F0D19A4(v171, v4, v141);
    }
  }
  else if ((a1[25] & 8) == 0)
  {
    v143 = (uint64_t *)a1[1];
    if (v143)
    {
      if ((sub_22F0D19A4(v143, v4, (v139 + v202 - 1) / v139 * v139) & 1) == 0)
      {
        do
        {
          if (v141
            || (v165 = a1[27],
                v114 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) > v165,
                v4 = v142,
                v114))
          {
            v141 += v139;
          }
          else
          {
            v166 = a1[27];
            v167 = v166 / sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
            v4 = v142;
            v141 = (v139 - 1 + v167) / v139 * v139;
          }
        }
        while (!sub_22F0D19A4((uint64_t *)a1[1], v4, v141));
      }
    }
  }
  v144 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v141;
  v145 = *((_DWORD *)a1 + 16);
  if (v145 >= *((_DWORD *)a1 + 17))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v145 = *((_DWORD *)a1 + 16);
  }
  *(_QWORD *)(a1[7] + 8 * v145) = v144;
  ++*((_DWORD *)a1 + 16);
  if ((a1[25] & 1) == 0)
  {
    v146 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v141;
    v147 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0))
         * (v201 + v140)
         / v201
         * v201;
    v4 = v142;
    sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22F0D19FC(a1, v146, v192 - v191, v147, v190, v142);
  }
  if (v138 <= 0)
    v148 = -(-v138 & 7);
  else
    v148 = v138 & 7;
  v149 = 16 - v148;
  v122 = v148 == 0;
  v150 = 8;
  if (!v122)
    v150 = v149;
  v151 = v150 + v138;
  if (v195)
    v152 = v151;
  else
    v152 = v198;
  if (v195)
    v153 = v151;
  else
    v153 = v138;
  if ((v194 & 1) != 0)
  {
    v154 = a1[2];
    v155 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * (v153 + v141);
    if (v154 > v155)
      v155 = v154;
    v4 = v142;
    a1[2] = v155;
    v156 = v193;
    v157 = v201;
  }
  else
  {
    v158 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    if ((a1[25] & 8) != 0)
    {
      v159 = v158 * v152;
      if (a1[27] > v158 * v152)
        v159 = a1[27];
    }
    else
    {
      v159 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * (v152 + v141);
      v4 = v142;
    }
    v157 = v201;
    a1[27] = v159;
    v160 = v153 + v141;
    if (a1[31] > v153 + v141)
      v160 = a1[31];
    a1[31] = v160;
    if (a1[2] > v159)
      v159 = a1[2];
    a1[2] = v159;
    v156 = v193;
  }
  v161 = a1[6];
  if (v161 <= v132)
    v161 = v132;
  a1[6] = v161;
  if ((a1[25] & 0x10) == 0 && (a1[25] & 3) != 1)
  {
    if (a1[3] < v132)
      a1[3] = v132;
    if (a1[5] < v157)
      a1[5] = v157;
    if (a1[4] < v133)
      a1[4] = v133;
  }
  v162 = *(_QWORD *)(v4 + 16);
  v163 = v162 & 0xFFFFFFFFFFFFFFF8;
  if ((v162 & 4) != 0)
    v163 = *(_QWORD *)v163;
  if (v163
    && (*(_WORD *)(v163 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC
    && (sub_22E6A4B04(v163 - 64) || a1[26])
    && v210 < v156
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v196 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
    && v141 % v156)
  {
    v164 = *(_QWORD *)(*(_QWORD *)(*a1 + 1992) + 8);
    *(_DWORD *)(v164 + 312) = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v164 + 316) = 2361;
    if (*(char *)(v164 + 311) < 0)
    {
      **(_BYTE **)(v164 + 288) = 0;
      *(_QWORD *)(v164 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v164 + 288) = 0;
      *(_BYTE *)(v164 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v205, v164);
    v172 = *(_QWORD *)(v163 - 16);
    if (v172)
      v173 = v172 & 0xFFFFFFFFFFFFFFF0;
    else
      v173 = sub_22EF6462C(*a1, v163 - 64);
    v174 = v205;
    if (!v205)
    {
      v174 = (unsigned __int8 *)sub_22E3B8AAC(v206);
      v205 = v174;
    }
    v175 = 0;
    v174[*v174 + 1] = 9;
    v176 = v205;
    v177 = *v205;
    *v205 = v177 + 1;
    *(_QWORD *)&v176[8 * v177 + 16] = v173;
    v178 = *(_QWORD *)(v4 + 40);
    v179 = "";
    if ((v178 & 7) == 0)
    {
      v180 = v178 & 0xFFFFFFFFFFFFFFF8;
      if (v180)
      {
        v181 = *(_DWORD **)(v180 + 16);
        v182 = *v181;
        v179 = (char *)(v181 + 4);
        v175 = v182;
      }
    }
    sub_22E3B89A8(&v205, v179, v175);
    v183 = *v196;
    v184 = v205;
    if (!v205)
    {
      v184 = (unsigned __int8 *)sub_22E3B8AAC(v206);
      v205 = v184;
    }
    v184[*v184 + 1] = 9;
    v185 = v205;
    v186 = *v205;
    *v205 = v186 + 1;
    *(_QWORD *)&v185[8 * v186 + 16] = v183;
    sub_22E3BB0B8((uint64_t)&v205);
  }
  if ((v212[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
}

uint64_t sub_22F0D19A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;

  v6 = sub_22F0CF8DC(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = sub_22E4EF458(a2);
    sub_22F0D0030(a1, *(_QWORD *)(a2 + 48), a3, v7);
  }
  return v6;
}

_BYTE *sub_22F0D19FC(_BYTE *result, unint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v7;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  char v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;

  if ((*(_DWORD *)(a6 + 28) & 0x7F) != 0x33)
  {
    v7 = *(_DWORD *)(a6 + 24);
    if (v7)
    {
      v11 = result;
      if (a2 > a3 && (result[200] & 8) == 0)
      {
        v12 = (a2 - a3) & 7;
        if (v12)
          v13 = (a2 - a3);
        else
          v13 = (a2 - a3) >> 3;
        v14 = *(_QWORD *)(a6 + 40);
        if (v14 < 8 || (v14 & 7) != 0)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 1992) + 8);
          *(_DWORD *)(v16 + 312) = v7;
          *(_DWORD *)(v16 + 316) = 2358;
          if (*(char *)(v16 + 311) < 0)
          {
            **(_BYTE **)(v16 + 288) = 0;
            *(_QWORD *)(v16 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v16 + 288) = 0;
            *(_BYTE *)(v16 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v65, v16);
          v23 = *(_QWORD *)(a6 + 16);
          v24 = v23 & 0xFFFFFFFFFFFFFFF8;
          if ((v23 & 4) != 0)
            v24 = *(_QWORD *)v24;
          v25 = (*(_WORD *)(v24 + 8) & 0x7E) - 34;
          if (v24)
            v26 = v24 - 64;
          else
            v26 = 0;
          if (v25 >= 4)
            v26 = 0;
          v27 = *(_DWORD *)(v26 + 72);
          v28 = (unsigned __int16)v27 >> 13;
          if ((unsigned __int16)v27 >> 13)
          {
            if ((_DWORD)v28 == 3)
              v28 = 2;
            else
              v28 = 1;
          }
          v49 = v65;
          if (!v65)
          {
            v49 = (unsigned __int8 *)sub_22E3B8AAC(v66);
            v65 = v49;
          }
          v49[*v49 + 1] = 3;
          v50 = v65;
          v51 = *v65;
          *v65 = v51 + 1;
          *(_QWORD *)&v50[8 * v51 + 16] = v28;
          v52 = *(_QWORD *)(a6 + 16);
          v53 = v52 & 0xFFFFFFFFFFFFFFF8;
          if ((v52 & 4) != 0)
            v53 = *(_QWORD *)v53;
          v54 = (*(_WORD *)(v53 + 8) & 0x7E) - 34;
          if (v53)
            v55 = v53 - 64;
          else
            v55 = 0;
          if (v54 >= 4)
            v56 = 0;
          else
            v56 = v55;
          v57 = *(_QWORD *)(v56 + 48);
          if (v57)
          {
            v58 = v57 & 0xFFFFFFFFFFFFFFF0;
          }
          else
          {
            v58 = sub_22EF6462C(*(_QWORD *)v11, v56);
            v50 = v65;
            if (!v65)
            {
              v50 = (unsigned __int8 *)sub_22E3B8AAC(v66);
              v65 = v50;
            }
          }
          v46 = v12 != 0;
          v50[*v50 + 1] = 9;
          v59 = v65;
          v60 = *v65;
          *v65 = v60 + 1;
          *(_QWORD *)&v59[8 * v60 + 16] = v58;
          v59[(v60 + 1) + 1] = 3;
          v61 = v65;
          v62 = *v65;
          *v65 = v62 + 1;
          *(_QWORD *)&v61[8 * v62 + 16] = v13;
          v47 = &v61[(v62 + 1)];
          v48 = 2;
        }
        else
        {
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 1992) + 8);
          *(_DWORD *)(v15 + 312) = v7;
          *(_DWORD *)(v15 + 316) = 2359;
          if (*(char *)(v15 + 311) < 0)
          {
            **(_BYTE **)(v15 + 288) = 0;
            *(_QWORD *)(v15 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v15 + 288) = 0;
            *(_BYTE *)(v15 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v65, v15);
          v17 = *(_QWORD *)(a6 + 16);
          v18 = v17 & 0xFFFFFFFFFFFFFFF8;
          if ((v17 & 4) != 0)
            v18 = *(_QWORD *)v18;
          v19 = (*(_WORD *)(v18 + 8) & 0x7E) - 34;
          if (v18)
            v20 = v18 - 64;
          else
            v20 = 0;
          if (v19 >= 4)
            v20 = 0;
          v21 = *(_DWORD *)(v20 + 72);
          v22 = (unsigned __int16)v21 >> 13;
          if ((unsigned __int16)v21 >> 13)
          {
            if ((_DWORD)v22 == 3)
              v22 = 2;
            else
              v22 = 1;
          }
          v29 = v65;
          if (!v65)
          {
            v29 = (unsigned __int8 *)sub_22E3B8AAC(v66);
            v65 = v29;
          }
          v29[*v29 + 1] = 3;
          v30 = v65;
          v31 = *v65;
          *v65 = v31 + 1;
          *(_QWORD *)&v30[8 * v31 + 16] = v22;
          v32 = *(_QWORD *)(a6 + 16);
          v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          if ((v32 & 4) != 0)
            v33 = *(_QWORD *)v33;
          v34 = (*(_WORD *)(v33 + 8) & 0x7E) - 34;
          if (v33)
            v35 = v33 - 64;
          else
            v35 = 0;
          if (v34 >= 4)
            v36 = 0;
          else
            v36 = v35;
          v37 = *(_QWORD *)(v36 + 48);
          if (v37)
          {
            v38 = v37 & 0xFFFFFFFFFFFFFFF0;
          }
          else
          {
            v38 = sub_22EF6462C(*(_QWORD *)v11, v36);
            v30 = v65;
            if (!v65)
            {
              v30 = (unsigned __int8 *)sub_22E3B8AAC(v66);
              v65 = v30;
            }
          }
          v30[*v30 + 1] = 9;
          v39 = v65;
          v40 = *v65;
          *v65 = v40 + 1;
          *(_QWORD *)&v39[8 * v40 + 16] = v38;
          v39[(v40 + 1) + 1] = 3;
          v41 = v65;
          v42 = *v65;
          *v65 = v42 + 1;
          *(_QWORD *)&v41[8 * v42 + 16] = v13;
          v41[(v42 + 1) + 1] = 2;
          v43 = v65;
          v44 = *v65;
          *v65 = v44 + 1;
          *(_QWORD *)&v43[8 * v44 + 16] = v12 != 0;
          v45 = *(_QWORD *)(a6 + 40);
          if ((v45 & 7) != 0)
            v46 = 0;
          else
            v46 = v45 & 0xFFFFFFFFFFFFFFF8;
          v47 = &v43[(v44 + 1)];
          v48 = 5;
        }
        v47[1] = v48;
        v63 = v65;
        v64 = *v65;
        *v65 = v64 + 1;
        *(_QWORD *)&v63[8 * v64 + 16] = v46;
        result = (_BYTE *)sub_22E3BB0B8((uint64_t)&v65);
      }
      if (a2 != a4)
      {
        if (a5)
          v11[266] = 1;
      }
    }
  }
  return result;
}

uint64_t *sub_22F0D1E14(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *result;
      v10 = sub_22E46A3EC(*a3, *(a2 - 1));
      result = (uint64_t *)sub_22E46A3EC(*a3, v9);
      if (v10 < (uint64_t)result)
      {
        v11 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v25 = a5;
      v26 = a4 >> 1;
      v27 = &result[a4 >> 1];
      v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_22F0D20C4(result, v27, a3, v28, a5);
        v29 = &v25[v26];
        result = sub_22F0D20C4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        v30 = &v25[a4];
        v31 = v29;
        while (v31 != v30)
        {
          v32 = v31;
          v33 = *v25;
          v34 = sub_22E46A3EC(*a3, *v31);
          result = (uint64_t *)sub_22E46A3EC(*a3, v33);
          if (v34 < (uint64_t)result)
            v35 = v32;
          else
            v35 = v25;
          v25 += v34 >= (uint64_t)result;
          v31 = &v32[v34 < (uint64_t)result];
          *v8++ = *v35;
          if (v25 == v29)
          {
            if (v31 != v30)
            {
              v36 = 0;
              if (v34 < (uint64_t)result)
                v37 = 1;
              else
                v37 = 2;
              v38 = &v32[v37 & 1];
              do
              {
                v8[v36] = v38[v36];
                ++v36;
              }
              while (&v38[v36] != v30);
            }
            return result;
          }
        }
        if (v25 != v29)
        {
          v39 = 0;
          do
          {
            v8[v39] = v25[v39];
            ++v39;
          }
          while (&v25[v39] != v29);
        }
      }
      else
      {
        sub_22F0D1E14(result, v27, a3, v28, a5, a6);
        sub_22F0D1E14(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v25, a6);
        return sub_22F0D231C(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      v13 = result + 1;
      if (result + 1 != a2)
      {
        v14 = 0;
        v15 = result;
        do
        {
          v17 = *v15;
          v16 = v15[1];
          v15 = v13;
          v18 = sub_22E46A3EC(*a3, v16);
          result = (uint64_t *)sub_22E46A3EC(*a3, v17);
          if (v18 < (uint64_t)result)
          {
            v19 = *v15;
            v20 = v14;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v20 + 8) = *(uint64_t *)((char *)v8 + v20);
              if (!v20)
                break;
              v21 = *(uint64_t *)((char *)v8 + v20 - 8);
              v22 = sub_22E46A3EC(*a3, v19);
              result = (uint64_t *)sub_22E46A3EC(*a3, v21);
              v20 -= 8;
              if (v22 >= (uint64_t)result)
              {
                v23 = (uint64_t *)((char *)v8 + v20 + 8);
                goto LABEL_15;
              }
            }
            v23 = v8;
LABEL_15:
            *v23 = v19;
          }
          v13 = v15 + 1;
          v14 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_22F0D20C4(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = *result;
      v12 = sub_22E46A3EC(*a3, *(a2 - 1));
      result = (uint64_t *)sub_22E46A3EC(*a3, v11);
      if (v12 >= (uint64_t)result)
        v13 = v7;
      else
        v13 = v10;
      *v5++ = *v13;
      if (v12 >= (uint64_t)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = &result[a4 >> 1];
      sub_22F0D1E14(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_22F0D1E14(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        v27 = v26;
        v28 = *v7;
        v29 = sub_22E46A3EC(*a3, *v26);
        result = (uint64_t *)sub_22E46A3EC(*a3, v28);
        if (v29 >= (uint64_t)result)
          v30 = v7;
        else
          v30 = v27;
        v26 = &v27[v29 < (uint64_t)result];
        v7 += v29 >= (uint64_t)result;
        *v5++ = *v30;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            v31 = 0;
            v32 = &v27[v29 < (uint64_t)result];
            do
            {
              v5[v31] = v32[v31];
              ++v31;
            }
            while (&v32[v31] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v33 = 0;
        do
        {
          v5[v33] = v7[v33];
          ++v33;
        }
        while (&v7[v33] != v25);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = a5;
        do
        {
          v17 = v16;
          v18 = *v16++;
          v19 = sub_22E46A3EC(*a3, *v14);
          result = (uint64_t *)sub_22E46A3EC(*a3, v18);
          v20 = v16;
          if (v19 < (uint64_t)result)
          {
            v17[1] = *v17;
            v20 = v5;
            if (v17 != v5)
            {
              v21 = v15;
              while (1)
              {
                v20 = (uint64_t *)((char *)v5 + v21);
                v22 = *(uint64_t *)((char *)v5 + v21 - 8);
                v23 = sub_22E46A3EC(*a3, *v14);
                result = (uint64_t *)sub_22E46A3EC(*a3, v22);
                if (v23 >= (uint64_t)result)
                  break;
                *v20 = *(v20 - 1);
                v21 -= 8;
                if (!v21)
                {
                  v20 = v5;
                  break;
                }
              }
            }
          }
          v24 = *v14++;
          *v20 = v24;
          v15 += 8;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_22F0D231C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;

  if (!a6)
    return result;
  v10 = a6;
  v15 = result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      v16 = *v15;
      v17 = sub_22E46A3EC(*a4, *a2);
      result = (uint64_t *)sub_22E46A3EC(*a4, v16);
      if (v17 < (uint64_t)result)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v106 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v92 = *v15;
        *v15 = *a2;
        *a2 = v92;
        return result;
      }
      if (a5 >= 0)
        v28 = a5;
      else
        v28 = a5 + 1;
      v21 = v28 >> 1;
      v20 = &v15[v28 >> 1];
      v19 = a3 - a2;
      v102 = a4;
      if (a3 == a2)
      {
        v27 = a2;
        a2 = a3;
      }
      else
      {
        v95 = v28 >> 1;
        v97 = a2;
        v99 = a7;
        v100 = v10;
        v103 = a3;
        v29 = *a4;
        do
        {
          v30 = v19 >> 1;
          v31 = &a2[v19 >> 1];
          v33 = *v31;
          v32 = v31 + 1;
          v34 = *v20;
          v35 = v19;
          v36 = sub_22E46A3EC(v29, v33);
          v37 = sub_22E46A3EC(v29, v34);
          if (v36 >= v37)
            v19 = v30;
          else
            v19 = v35 + ~(v35 >> 1);
          if (v36 < v37)
            a2 = v32;
        }
        while (v19);
        v27 = v97;
        a7 = v99;
        v19 = a2 - v97;
        a3 = v103;
        v10 = v100;
        v21 = v95;
      }
    }
    else
    {
      if (v10 >= 0)
        v18 = v10;
      else
        v18 = v10 + 1;
      v19 = v18 >> 1;
      v20 = a2;
      a2 += v18 >> 1;
      v21 = v20 - v15;
      if (v20 == v15)
      {
        v15 = v20;
        v38 = a2;
        goto LABEL_65;
      }
      v94 = v18 >> 1;
      v96 = v20;
      v98 = a7;
      v20 = v15;
      v22 = a4;
      do
      {
        v23 = &v20[v21 >> 1];
        v25 = *v23;
        v24 = v23 + 1;
        v26 = sub_22E46A3EC(*v22, *a2);
        if (v26 < sub_22E46A3EC(*v22, v25))
        {
          v21 >>= 1;
        }
        else
        {
          v20 = v24;
          v21 += ~(v21 >> 1);
        }
      }
      while (v21);
      v102 = v22;
      v21 = v20 - v15;
      v27 = v96;
      a7 = v98;
      v19 = v94;
    }
    if (v20 == v27)
    {
      v20 = v27;
      v38 = a2;
LABEL_49:
      a4 = v102;
      goto LABEL_65;
    }
    if (v27 == a2)
    {
      a2 = v27;
      v38 = v20;
      goto LABEL_49;
    }
    if (v20 + 1 == v27)
    {
      v105 = *v20;
      v47 = v10;
      v48 = (char *)a2 - (char *)v27;
      v49 = a3;
      v50 = v21;
      v51 = a7;
      v52 = v19;
      memmove(v20, v27, (char *)a2 - (char *)v27);
      v19 = v52;
      a7 = v51;
      v21 = v50;
      a3 = v49;
      v53 = (uint64_t *)((char *)v20 + v48);
      v10 = v47;
      v38 = v53;
      a4 = v102;
      *v53 = v105;
    }
    else
    {
      v104 = a3;
      v39 = v21;
      v40 = a7;
      if (v27 + 1 == a2)
      {
        v101 = v10;
        v54 = *(a2 - 1);
        v38 = v20 + 1;
        a4 = v102;
        if (a2 - 1 != v20)
        {
          v55 = v19;
          memmove(v20 + 1, v20, (char *)(a2 - 1) - (char *)v20);
          v19 = v55;
        }
        *v20 = v54;
        v10 = v101;
      }
      else
      {
        v41 = v27 - v20;
        a4 = v102;
        if (v41 != a2 - v27)
        {
          v56 = a2 - v27;
          v57 = v27 - v20;
          do
          {
            v58 = v57;
            v57 = v56;
            v56 = v58 % v56;
          }
          while (v56);
          v21 = v39;
          a3 = v104;
          if (v57)
          {
            v59 = &v20[v57];
            do
            {
              v61 = *--v59;
              v60 = v61;
              v62 = &v59[v41];
              v63 = v59;
              do
              {
                v64 = v63;
                v63 = v62;
                *v64 = *v62;
                v65 = __OFSUB__(v41, a2 - v62);
                v66 = v41 - (a2 - v62);
                v88 = (v66 < 0) ^ v65;
                v62 = &v20[v66];
                if (v88)
                  v62 = &v63[v41];
              }
              while (v62 != v59);
              *v63 = v60;
            }
            while (v59 != v20);
          }
          v38 = &v20[a2 - v27];
          goto LABEL_65;
        }
        v42 = 0;
        do
        {
          v43 = v20[v42];
          v20[v42] = v27[v42];
          v44 = (uint64_t)&v20[v42 + 1];
          v27[v42] = v43;
          v45 = (uint64_t)&v27[++v42];
        }
        while ((uint64_t *)v44 != v27 && v45 != (_QWORD)a2);
        v38 = v27;
      }
      a7 = v40;
      v21 = v39;
      a3 = v104;
    }
LABEL_65:
    a5 -= v21;
    v10 -= v19;
    if ((uint64_t)(v19 + v21) >= v10 + a5)
    {
      v69 = a3;
      v70 = v21;
      v71 = a7;
      v72 = v19;
      v73 = v10;
      v74 = v38;
      v75 = v38;
      a8 = v106;
      result = (uint64_t *)sub_22F0D231C(v75, a2, v69, a4, a5, v73, v71, v106);
      a2 = v20;
      v76 = v72;
      a7 = v71;
      a5 = v70;
      a3 = v74;
      v10 = v76;
      if (!v76)
        return result;
    }
    else
    {
      v67 = v15;
      v15 = v38;
      v68 = v38;
      a8 = v106;
      result = (uint64_t *)sub_22F0D231C(v67, v20, v68, a4, v21, v19, a7, v106);
      if (!v10)
        return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v83 = 0;
      do
      {
        a7[v83] = v15[v83];
        ++v83;
      }
      while (&v15[v83] != a2);
      if (v83 * 8)
      {
        v84 = a7;
        while (a2 != a3)
        {
          v85 = *v84;
          v86 = a3;
          v87 = sub_22E46A3EC(*a4, *a2);
          result = (uint64_t *)sub_22E46A3EC(*a4, v85);
          v88 = v87 < (uint64_t)result;
          a3 = v86;
          if (v88)
            v89 = 1;
          else
            v89 = 0;
          if (v88)
            v90 = 0;
          else
            v90 = 1;
          if (v88)
            v91 = a2;
          else
            v91 = v84;
          v84 += v90;
          a2 += v89;
          *v15++ = *v91;
          if (&a7[v83] == v84)
            return result;
        }
        return (uint64_t *)memmove(v15, v84, (char *)a7 - (char *)v84 + v83 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v77 = 0;
    do
    {
      a7[v77] = a2[v77];
      ++v77;
    }
    while (&a2[v77] != a3);
    if (v77 * 8)
    {
      v78 = &a7[v77];
      v79 = a3 - 1;
      while (a2 != v15)
      {
        v80 = *(a2 - 1);
        v81 = sub_22E46A3EC(*a4, *(v78 - 1));
        result = (uint64_t *)sub_22E46A3EC(*a4, v80);
        if (v81 >= (uint64_t)result)
          v82 = v78;
        else
          v82 = a2;
        if (v81 >= (uint64_t)result)
          --v78;
        else
          --a2;
        *v79-- = *(v82 - 1);
        if (v78 == a7)
          return result;
      }
      if (v78 != a7)
      {
        v93 = 0;
        do
        {
          v79[v93] = v78[v93 - 1];
          --v93;
        }
        while (&v78[v93] != a7);
      }
    }
  }
  return result;
}

uint64_t *sub_22F0D28FC(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_22E7EE148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_22F0D29DC(a1, v7);
    v8 = 0;
    sub_22E7EE148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_22F0D29DC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F0D2A9C(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F0D2A9C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E7EE148(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F0D2B48(uint64_t a1, unint64_t a2, unint64_t a3, _WORD *a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v23;
  int v24;
  int v25;
  int v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  _DWORD v35[8];

  if (*(_DWORD *)(a1 + 64) == 21)
    return 0;
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return 0;
  v11 = sub_22F10ACF8(v7);
  v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0;
  v15 = *(_QWORD *)v14;
  if (!*(_QWORD *)v14 || *(_BYTE *)(v15 + 16) != 44)
    goto LABEL_8;
  v16 = sub_22F114198(*(_QWORD *)(v15 + 24));
  if ((*(_BYTE *)(v16 + 74) & 1) == 0 && *(_QWORD *)(v16 + 128) < 8uLL)
    return 0;
  v17 = sub_22F114198(*(_QWORD *)(v15 + 24));
  v11 = sub_22E496830(v17);
  v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_8:
  v18 = *(_QWORD *)v14;
  v19 = *(_DWORD *)(*(_QWORD *)v14 + 16);
  if (*(_QWORD *)v14)
    v20 = v19 == 11;
  else
    v20 = 0;
  if (!v20)
    return 0;
  v21 = 0;
  v23 = ((v19 >> 19) & 0x1FF) - 167;
  v24 = 0;
  switch(v23)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 12:
    case 13:
      *(_DWORD *)(a1 + 64) = 19;
      if (*(_DWORD *)(v18 + 16) == 11)
      {
        v25 = (*(_DWORD *)(v18 + 16) >> 19) & 0x1FF;
        if (v25 == 180 || v25 == 169)
          v28 = 4;
        else
          v28 = 0;
      }
      else
      {
        v28 = 0;
      }
      *(_DWORD *)(a1 + 8) = v28;
      v29 = sub_22EF5C728((uint64_t)a5, a3);
      if (v29 && (*(_DWORD *)(v29 + 16) & 0x1C000FF) == 2)
      {
        v30 = (_QWORD *)(v29 + 40);
        if (*(_DWORD *)(v29 + 48) >= 0x41u)
          v30 = (_QWORD *)*v30;
        v31 = *(_DWORD *)v30 - 1;
        *(_QWORD *)(a1 + 16) = "";
        *(_QWORD *)(a1 + 24) = 0x100000000;
        *(_DWORD *)(a1 + 32) = v31;
        *(_WORD *)(a1 + 36) = 0;
      }
      goto LABEL_50;
    case 6:
    case 14:
      v24 = 2;
      goto LABEL_35;
    case 7:
    case 15:
    case 44:
      goto LABEL_35;
    case 8:
    case 16:
    case 45:
      v24 = 4;
      goto LABEL_35;
    case 9:
    case 17:
      v24 = 5;
      goto LABEL_35;
    case 46:
      v24 = 13;
LABEL_35:
      *(_DWORD *)(a1 + 8) = v24;
      if (*(_BYTE *)(v13 + 16) == 50 && (*a4 & 0x201) != 0)
        sub_22F3C7E68(v11, a1);
      if (!sub_22F064030(a1)
        || (sub_22F3F1044(a1, a5, (uint64_t)v35), v35[0] == 1)
        || !sub_22F063740((uint64_t)v35, (uint64_t)a5, a2))
      {
        v32 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v32)
          v33 = *(_DWORD *)(v32 + 16) == 11;
        else
          v33 = 0;
        if (v33 && ((*(_DWORD *)(v32 + 16) >> 19) & 0x1FEu) - 210 <= 7)
        {
          v34 = 11;
        }
        else if (sub_22F110930(*v12))
        {
          v34 = 2;
        }
        else
        {
          sub_22F110B50(*v12);
          v34 = 7;
        }
        *(_DWORD *)(a1 + 64) = v34;
      }
LABEL_50:
      v21 = 1;
      break;
    default:
      return v21;
  }
  return v21;
}

uint64_t sub_22F0D2E10(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v11;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const char *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int NumBytesForUTF8;
  char v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v37;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  __int128 *v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned __int8 *v52;
  char v53;
  _BYTE v54[22];
  _OWORD v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unsigned __int8 *v61[17];

  if (a2 == a3)
    return 0;
  v61[3] = v8;
  v61[4] = v7;
  v61[15] = v5;
  v61[16] = v6;
  v11 = a2;
  v43 = 0;
  v13 = &v56;
  v14 = &v45;
  v15 = &v47;
  v37 = a3 - 1;
  v16 = "*";
  while (2)
  {
    v17 = 0;
    v61[0] = v11;
    while (v11[v17] != 37)
    {
      if (!v11[v17])
      {
        (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 16))(a1, &v11[v17]);
        return 1;
      }
      v61[0] = &v11[++v17];
      if (&v11[v17] == a3)
      {
        *(_QWORD *)&v44 = 0;
        DWORD2(v44) = 0;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_DWORD *)v14 + 4) = 0;
        WORD2(v46) = BYTE4(v46) & 0xFE;
        BYTE8(v46) = 0;
        *((_QWORD *)&v48 + 1) = 0;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_DWORD *)v15 + 4) = 0;
        v18 = a3;
        *(_QWORD *)&v49 = 0x300000000;
        goto LABEL_70;
      }
    }
    v61[0] = &v11[v17 + 1];
    if (v61[0] == a3)
      goto LABEL_75;
    v41 = v15;
    v42 = v14;
    *(_QWORD *)&v55[0] = 0;
    DWORD2(v55[0]) = 0;
    memset(&v55[1], 0, 20);
    WORD2(v55[2]) = BYTE4(v55[2]) & 0xFE;
    BYTE8(v55[2]) = 0;
    *((_QWORD *)&v57 + 1) = 0;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    v40 = v13;
    *((_DWORD *)v13 + 4) = 0;
    *(_QWORD *)&v58 = 0x300000000;
    DWORD2(v58) = 0;
    WORD6(v58) = BYTE12(v58) & 0xFE;
    LOBYTE(v59) = 0;
    DWORD1(v59) = 0;
    v19 = v16;
    *((_QWORD *)&v59 + 1) = v16;
    BYTE8(v60) = 0;
    if ((sub_22F063314(a1, (uint64_t)v55, (uint64_t)&v11[v17], v61, a3) & 1) != 0)
      return 1;
    v20 = v61[0];
    if (v61[0] == a3)
      goto LABEL_75;
    if (*v61[0] == 42)
    {
      BYTE8(v60) = 1;
      *(unsigned __int8 **)&v60 = v61[0]++;
      if (v20 + 1 == a3)
        goto LABEL_75;
    }
    if ((sub_22F0630C8(v61, a3, (uint64_t)v54), *(_DWORD *)&v54[12])
      && (v55[1] = *(_OWORD *)v54, *(_QWORD *)((char *)&v55[1] + 14) = *(_QWORD *)&v54[14], v61[0] == a3)
      || (v39 = a4, v21 = sub_22F06351C((uint64_t)v55, (char **)v61, (char *)a3, a4, 1), v22 = v61[0], v21)
      && v61[0] == a3)
    {
LABEL_75:
      (*(void (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 56))(a1, &v11[v17], ((_DWORD)a3 - (_DWORD)v11 - v17));
      return 1;
    }
    v23 = (char)*v61[0];
    if (!*v61[0])
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 16))(a1, v61[0]);
      return 1;
    }
    v18 = ++v61[0];
    v24 = v23 - 65;
    v25 = 0;
    v26 = 18;
    switch(v24)
    {
      case 0:
        goto LABEL_67;
      case 2:
        v25 = 0;
        v26 = 23;
        goto LABEL_67;
      case 3:
        v27 = *(_DWORD *)(a5 + 68);
        if (v27 > 0x21 || ((1 << v27) & 0x3F0000888) == 0)
          goto LABEL_33;
        v25 = 0;
        v26 = 3;
        goto LABEL_67;
      case 4:
        v25 = 0;
        v26 = 14;
        goto LABEL_67;
      case 5:
        v25 = 0;
        v26 = 12;
        goto LABEL_67;
      case 6:
        v25 = 0;
        v26 = 16;
        goto LABEL_67;
      case 14:
        v28 = *(_DWORD *)(a5 + 68);
        if (v28 > 0x21 || ((1 << v28) & 0x3F0000888) == 0)
          goto LABEL_33;
        v25 = 0;
        v26 = 6;
        goto LABEL_67;
      case 18:
        v25 = 0;
        v26 = 24;
        goto LABEL_67;
      case 20:
        v29 = *(_DWORD *)(a5 + 68);
        if (v29 > 0x21 || ((1 << v29) & 0x3F0000888) == 0)
          goto LABEL_33;
        v25 = 0;
        v26 = 8;
        goto LABEL_67;
      case 23:
        v25 = 0;
        v26 = 10;
        goto LABEL_67;
      case 26:
        if (v18 != a3)
        {
          if (*v18 == 93)
          {
            v34 = v22 + 2;
            if (v22 + 2 == a3)
              goto LABEL_77;
          }
          else
          {
            v34 = v22 + 1;
          }
          v18 = v34 + 1;
          if (v34 + 1 != a3 && *v34 == 94 && *v18 == 93)
          {
            v34 += 2;
            if (v34 == a3)
              goto LABEL_77;
          }
          v18 = v34;
          while (*v18 != 93)
          {
            if (++v18 == a3)
            {
              v18 = v37;
              goto LABEL_77;
            }
          }
          v26 = 33;
          v25 = v18;
LABEL_67:
          BYTE8(v55[2]) = 0;
          *(_QWORD *)&v56 = v22;
          *((_QWORD *)&v56 + 1) = v25;
          LODWORD(v57) = v26;
          if (!(BYTE8(v60) | v59))
            DWORD1(v59) = v43++;
          a4 = v39;
          v48 = v57;
          v49 = v58;
          v50 = v59;
          v51 = v60;
          v44 = v55[0];
          v45 = v55[1];
          v46 = v55[2];
          v47 = v56;
          v52 = &v11[v17];
          v53 = 0;
          v35 = (*(uint64_t (**)(uint64_t, __int128 *, unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 128))(a1, &v44, &v11[v17], ((_DWORD)v18 - (_DWORD)v11 - v17));
          v13 = v40;
          v15 = v41;
          v14 = v42;
          v16 = v19;
          if (!v35)
            return 1;
LABEL_70:
          v11 = v18;
          if (v18 == a3)
            return 0;
          continue;
        }
        v18 = a3;
LABEL_77:
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 136))(a1, v22, v18);
        return 1;
      case 32:
        v25 = 0;
        v26 = 17;
        goto LABEL_67;
      case 34:
        v25 = 0;
        v26 = 1;
        goto LABEL_67;
      case 35:
        v25 = 0;
        v26 = 2;
        goto LABEL_67;
      case 36:
        v25 = 0;
        v26 = 13;
        goto LABEL_67;
      case 37:
        v25 = 0;
        v26 = 11;
        goto LABEL_67;
      case 38:
        v25 = 0;
        v26 = 15;
        goto LABEL_67;
      case 40:
        v25 = 0;
        v26 = 4;
        goto LABEL_67;
      case 45:
        v25 = 0;
        v26 = 21;
        goto LABEL_67;
      case 46:
        v25 = 0;
        v26 = 5;
        goto LABEL_67;
      case 47:
        v25 = 0;
        v26 = 20;
        goto LABEL_67;
      case 50:
        v25 = 0;
        v26 = 19;
        goto LABEL_67;
      case 52:
        v25 = 0;
        v26 = 7;
        goto LABEL_67;
      case 55:
        v25 = 0;
        v26 = 9;
        goto LABEL_67;
      default:
LABEL_33:
        BYTE8(v55[2]) = 0;
        v56 = (unint64_t)v22;
        LODWORD(v57) = 0;
        v30 = ((_DWORD)v18 - (_DWORD)v11);
        v31 = v11 + 1;
        if (v11 + 1 < a3)
        {
          NumBytesForUTF8 = llvm::getNumBytesForUTF8((llvm *)*v31);
          if (NumBytesForUTF8 != 1 && &v31[NumBytesForUTF8] <= a3)
          {
            v30 = (NumBytesForUTF8 + 1);
            BYTE8(v55[2]) = 0;
            *(_QWORD *)&v56 = v22;
            *((_QWORD *)&v56 + 1) = &v11[v30];
            LODWORD(v57) = 0;
          }
        }
        v33 = (*(uint64_t (**)(uint64_t, _OWORD *, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, v55, v11, v30);
        *(_QWORD *)&v44 = 0;
        DWORD2(v44) = 0;
        v14 = v42;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
        *((_DWORD *)v42 + 4) = 0;
        WORD2(v46) = BYTE4(v46) & 0xFE;
        BYTE8(v46) = 0;
        *((_QWORD *)&v48 + 1) = 0;
        LODWORD(v49) = 0;
        if ((v33 & 1) == 0)
          return 1;
        v18 = v61[0];
        a4 = v39;
        v13 = v40;
        v15 = v41;
        v16 = v19;
        goto LABEL_70;
    }
  }
}

uint64_t sub_22F0D34D8(unsigned int a1, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5;
  unint64_t v7;
  int v8;

  if ((a2 & 7u) >= 2 && ((a2 & 7) == 2 || *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) != 3))
  {
    if (a4)
    {
      v7 = a2 & 0xFFFFFFFFFFFFFFF8;
      if ((~(_BYTE)a2 & 7) == 0)
        v7 = *(_QWORD *)(v7 + 8 * a1 + 16);
      if (v7)
        v8 = ~**(_DWORD **)(v7 + 16);
      else
        v8 = -1;
      return (a4 - a3 + v8);
    }
    return 0;
  }
  if (!a5)
    return 0;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((~(_BYTE)a2 & 7) == 0)
    v5 = *(_QWORD *)(v5 + 16);
  if (v5)
    LODWORD(v5) = **(_DWORD **)(v5 + 16);
  return (a5 - v5);
}

uint64_t sub_22F0D356C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;

  if (!a3)
    return 1;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    if (a5 <= v11)
    {
      v20 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(a4 + 8 * v11);
      v15 = *(_QWORD *)(v14 + 56);
      if ((v15 & 4) != 0 && (v21 = v15 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v21 + 16)))
        v16 = **(int ***)(v21 + 24);
      else
        v16 = (int *)(v14 + 64);
      v17 = *v16;
      v18 = v17 != 0;
      v19 = v17 - 1;
      v20 = v18 ? v19 : 0;
    }
    if (*(_DWORD *)(a2 + 4 * v11) != sub_22F0D34D8(v12, a1, 0, v20, a6))
      break;
    v11 = ++v12;
    if (a3 == v12)
      return 1;
  }
  v22 = 0;
  v23 = 0;
  while (1)
  {
    if (a5 <= v22)
    {
      v29 = 0;
    }
    else
    {
      v24 = *(_QWORD *)(a4 + 8 * v22);
      v25 = *(_QWORD *)(v24 + 56);
      if ((v25 & 4) != 0 && (v30 = v25 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v30 + 16)))
        v26 = **(int ***)(v30 + 24);
      else
        v26 = (int *)(v24 + 64);
      v27 = *v26;
      v18 = v27 != 0;
      v28 = v27 - 1;
      v29 = v18 ? v28 : 0;
    }
    if (*(_DWORD *)(a2 + 4 * v22) != sub_22F0D34D8(v23, a1, 1, v29, a6))
      break;
    v22 = ++v23;
    if (a3 == v23)
      return 2;
  }
  return 0;
}

uint64_t sub_22F0D36D4(unsigned int a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  unint64_t v14;

  if (a5 <= a1)
  {
    v12 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(a4 + 8 * a1);
    v7 = *(_QWORD *)(v6 + 56);
    if ((v7 & 4) != 0 && (v14 = v7 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v14 + 16)))
      v8 = **(int ***)(v14 + 24);
    else
      v8 = (int *)(v6 + 64);
    v9 = *v8;
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (v10)
      v12 = v11;
    else
      v12 = 0;
  }
  return sub_22F0D34D8(a1, a2, a3, v12, a6);
}

uint64_t sub_22F0D3724(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_22E3CD3D4(a2 + 2032, a1, 63 - __clz(a3));
}

char *sub_22F0D3748(int a1)
{
  if ((byte_253E4C248[0] & 1) == 0)
  {
    byte_253E4C248[0] = 1;
    qword_253E4C260 = (uint64_t)"GCCAsmStmt";
    dword_253E4C26C = 88;
    qword_253E4C270 = (uint64_t)"MSAsmStmt";
    dword_253E4C27C = 96;
    qword_253E4C280 = (uint64_t)"BreakStmt";
    dword_253E4C28C = 8;
    qword_253E4C290 = (uint64_t)"CXXCatchStmt";
    dword_253E4C29C = 32;
    qword_253E4C2A0 = (uint64_t)"CXXForRangeStmt";
    dword_253E4C2AC = 96;
    qword_253E4C2B0 = (uint64_t)"CXXTryStmt";
    dword_253E4C2BC = 16;
    qword_253E4C2C0 = (uint64_t)"CapturedStmt";
    dword_253E4C2CC = 32;
    qword_253E4C2D0 = (uint64_t)"CompoundStmt";
    dword_253E4C2DC = 16;
    qword_253E4C2E0 = (uint64_t)"ContinueStmt";
    dword_253E4C2EC = 8;
    qword_253E4C2F0 = (uint64_t)"CoreturnStmt";
    dword_253E4C2FC = 40;
    qword_253E4C300 = (uint64_t)"CoroutineBodyStmt";
    dword_253E4C30C = 16;
    qword_253E4C310 = (uint64_t)"DeclStmt";
    dword_253E4C31C = 24;
    qword_253E4C320 = (uint64_t)"DoStmt";
    dword_253E4C32C = 32;
    qword_253E4C330 = (uint64_t)"ForStmt";
    dword_253E4C33C = 56;
    qword_253E4C340 = (uint64_t)"GotoStmt";
    dword_253E4C34C = 24;
    qword_253E4C350 = (uint64_t)"IfStmt";
    dword_253E4C35C = 16;
    qword_253E4C360 = (uint64_t)"IndirectGotoStmt";
    dword_253E4C36C = 24;
    qword_253E4C370 = (uint64_t)"MSDependentExistsStmt";
    dword_253E4C37C = 64;
    qword_253E4C380 = (uint64_t)"NullStmt";
    dword_253E4C38C = 8;
    qword_253E4C390 = (uint64_t)"OMPCanonicalLoop";
    dword_253E4C39C = 40;
    qword_253E4C3A0 = (uint64_t)"OMPAtomicDirective";
    dword_253E4C3AC = 40;
    qword_253E4C3B0 = (uint64_t)"OMPBarrierDirective";
    dword_253E4C3BC = 32;
    qword_253E4C3C0 = (uint64_t)"OMPCancelDirective";
    dword_253E4C3CC = 40;
    qword_253E4C3D0 = (uint64_t)"OMPCancellationPointDirective";
    dword_253E4C3DC = 40;
    qword_253E4C3E0 = (uint64_t)"OMPCriticalDirective";
    dword_253E4C3EC = 56;
    qword_253E4C3F0 = (uint64_t)"OMPDepobjDirective";
    dword_253E4C3FC = 32;
    qword_253E4C400 = (uint64_t)"OMPDispatchDirective";
    dword_253E4C40C = 40;
    qword_253E4C410 = (uint64_t)"OMPFlushDirective";
    dword_253E4C41C = 32;
    qword_253E4C420 = (uint64_t)"OMPInteropDirective";
    dword_253E4C42C = 32;
    qword_253E4C430 = (uint64_t)"OMPDistributeDirective";
    dword_253E4C43C = 40;
    qword_253E4C440 = (uint64_t)"OMPDistributeParallelForDirective";
    dword_253E4C44C = 40;
    qword_253E4C450 = (uint64_t)"OMPDistributeParallelForSimdDirective";
    dword_253E4C45C = 40;
    qword_253E4C460 = (uint64_t)"OMPDistributeSimdDirective";
    dword_253E4C46C = 40;
    qword_253E4C470 = (uint64_t)"OMPForDirective";
    dword_253E4C47C = 40;
    qword_253E4C480 = (uint64_t)"OMPForSimdDirective";
    dword_253E4C48C = 40;
    qword_253E4C490 = (uint64_t)"OMPGenericLoopDirective";
    dword_253E4C49C = 40;
    qword_253E4C4A0 = (uint64_t)"OMPMasterTaskLoopDirective";
    dword_253E4C4AC = 40;
    qword_253E4C4B0 = (uint64_t)"OMPMasterTaskLoopSimdDirective";
    dword_253E4C4BC = 40;
    qword_253E4C4C0 = (uint64_t)"OMPParallelForDirective";
    dword_253E4C4CC = 40;
    qword_253E4C4D0 = (uint64_t)"OMPParallelForSimdDirective";
    dword_253E4C4DC = 40;
    qword_253E4C4E0 = (uint64_t)"OMPParallelGenericLoopDirective";
    dword_253E4C4EC = 40;
    qword_253E4C4F0 = (uint64_t)"OMPParallelMasterTaskLoopDirective";
    dword_253E4C4FC = 40;
    qword_253E4C500 = (uint64_t)"OMPParallelMasterTaskLoopSimdDirective";
    dword_253E4C50C = 40;
    qword_253E4C510 = (uint64_t)"OMPSimdDirective";
    dword_253E4C51C = 40;
    qword_253E4C520 = (uint64_t)"OMPTargetParallelForSimdDirective";
    dword_253E4C52C = 40;
    qword_253E4C530 = (uint64_t)"OMPTargetParallelGenericLoopDirective";
    dword_253E4C53C = 40;
    qword_253E4C540 = (uint64_t)"OMPTargetSimdDirective";
    dword_253E4C54C = 40;
    qword_253E4C550 = (uint64_t)"OMPTargetTeamsDistributeDirective";
    dword_253E4C55C = 40;
    qword_253E4C560 = (uint64_t)"OMPTargetTeamsDistributeParallelForDirective";
    dword_253E4C56C = 40;
    qword_253E4C570 = (uint64_t)"OMPTargetTeamsDistributeParallelForSimdDirective";
    dword_253E4C57C = 40;
    qword_253E4C580 = (uint64_t)"OMPTargetTeamsDistributeSimdDirective";
    dword_253E4C58C = 40;
    qword_253E4C590 = (uint64_t)"OMPTargetTeamsGenericLoopDirective";
    dword_253E4C59C = 40;
    qword_253E4C5A0 = (uint64_t)"OMPTaskLoopDirective";
    dword_253E4C5AC = 40;
    qword_253E4C5B0 = (uint64_t)"OMPTaskLoopSimdDirective";
    dword_253E4C5BC = 40;
    qword_253E4C5C0 = (uint64_t)"OMPTeamsDistributeDirective";
    dword_253E4C5CC = 40;
    qword_253E4C5D0 = (uint64_t)"OMPTeamsDistributeParallelForDirective";
    dword_253E4C5DC = 40;
    qword_253E4C5E0 = (uint64_t)"OMPTeamsDistributeParallelForSimdDirective";
    dword_253E4C5EC = 40;
    qword_253E4C5F0 = (uint64_t)"OMPTeamsDistributeSimdDirective";
    dword_253E4C5FC = 40;
    qword_253E4C600 = (uint64_t)"OMPTeamsGenericLoopDirective";
    dword_253E4C60C = 40;
    qword_253E4C610 = (uint64_t)"OMPTileDirective";
    dword_253E4C61C = 40;
    qword_253E4C620 = (uint64_t)"OMPUnrollDirective";
    dword_253E4C62C = 40;
    qword_253E4C630 = (uint64_t)"OMPMaskedDirective";
    dword_253E4C63C = 32;
    qword_253E4C640 = (uint64_t)"OMPMasterDirective";
    dword_253E4C64C = 32;
    qword_253E4C650 = (uint64_t)"OMPMetaDirective";
    dword_253E4C65C = 40;
    qword_253E4C660 = (uint64_t)"OMPOrderedDirective";
    dword_253E4C66C = 32;
    qword_253E4C670 = (uint64_t)"OMPParallelDirective";
    dword_253E4C67C = 40;
    qword_253E4C680 = (uint64_t)"OMPParallelMasterDirective";
    dword_253E4C68C = 32;
    qword_253E4C690 = (uint64_t)"OMPParallelSectionsDirective";
    dword_253E4C69C = 40;
    qword_253E4C6A0 = (uint64_t)"OMPScanDirective";
    dword_253E4C6AC = 32;
    qword_253E4C6B0 = (uint64_t)"OMPSectionDirective";
    dword_253E4C6BC = 40;
    qword_253E4C6C0 = (uint64_t)"OMPSectionsDirective";
    dword_253E4C6CC = 40;
    qword_253E4C6D0 = (uint64_t)"OMPSingleDirective";
    dword_253E4C6DC = 32;
    qword_253E4C6E0 = (uint64_t)"OMPTargetDataDirective";
    dword_253E4C6EC = 32;
    qword_253E4C6F0 = (uint64_t)"OMPTargetDirective";
    dword_253E4C6FC = 32;
    qword_253E4C700 = (uint64_t)"OMPTargetEnterDataDirective";
    dword_253E4C70C = 32;
    qword_253E4C710 = (uint64_t)"OMPTargetExitDataDirective";
    dword_253E4C71C = 32;
    qword_253E4C720 = (uint64_t)"OMPTargetParallelDirective";
    dword_253E4C72C = 40;
    qword_253E4C730 = (uint64_t)"OMPTargetParallelForDirective";
    dword_253E4C73C = 40;
    qword_253E4C740 = (uint64_t)"OMPTargetTeamsDirective";
    dword_253E4C74C = 32;
    qword_253E4C750 = (uint64_t)"OMPTargetUpdateDirective";
    dword_253E4C75C = 32;
    qword_253E4C760 = (uint64_t)"OMPTaskDirective";
    dword_253E4C76C = 40;
    qword_253E4C770 = (uint64_t)"OMPTaskgroupDirective";
    dword_253E4C77C = 32;
    qword_253E4C780 = (uint64_t)"OMPTaskwaitDirective";
    dword_253E4C78C = 32;
    qword_253E4C790 = (uint64_t)"OMPTaskyieldDirective";
    dword_253E4C79C = 32;
    qword_253E4C7A0 = (uint64_t)"OMPTeamsDirective";
    dword_253E4C7AC = 32;
    qword_253E4C7B0 = (uint64_t)"ObjCAtCatchStmt";
    dword_253E4C7BC = 32;
    qword_253E4C7C0 = (uint64_t)"ObjCAtFinallyStmt";
    dword_253E4C7CC = 24;
    qword_253E4C7D0 = (uint64_t)"ObjCAtSynchronizedStmt";
    dword_253E4C7DC = 32;
    qword_253E4C7E0 = (uint64_t)"ObjCAtThrowStmt";
    dword_253E4C7EC = 24;
    qword_253E4C7F0 = (uint64_t)"ObjCAtTryStmt";
    dword_253E4C7FC = 16;
    qword_253E4C800 = (uint64_t)"ObjCAutoreleasePoolStmt";
    dword_253E4C80C = 24;
    qword_253E4C810 = (uint64_t)"ObjCForCollectionStmt";
    dword_253E4C81C = 40;
    qword_253E4C820 = (uint64_t)"ReturnStmt";
    dword_253E4C82C = 16;
    qword_253E4C830 = (uint64_t)"SEHExceptStmt";
    dword_253E4C83C = 32;
    qword_253E4C840 = (uint64_t)"SEHFinallyStmt";
    dword_253E4C84C = 24;
    qword_253E4C850 = (uint64_t)"SEHLeaveStmt";
    dword_253E4C85C = 16;
    qword_253E4C860 = (uint64_t)"SEHTryStmt";
    dword_253E4C86C = 32;
    qword_253E4C870 = (uint64_t)"CaseStmt";
    dword_253E4C87C = 24;
    qword_253E4C880 = (uint64_t)"DefaultStmt";
    dword_253E4C88C = 32;
    qword_253E4C890 = (uint64_t)"SwitchStmt";
    dword_253E4C89C = 24;
    qword_253E4C8A0 = (uint64_t)"AttributedStmt";
    dword_253E4C8AC = 16;
    qword_253E4C8B0 = (uint64_t)"BinaryConditionalOperator";
    dword_253E4C8BC = 64;
    qword_253E4C8C0 = (uint64_t)"ConditionalOperator";
    dword_253E4C8CC = 48;
    qword_253E4C8D0 = (uint64_t)"AddrLabelExpr";
    dword_253E4C8DC = 32;
    qword_253E4C8E0 = (uint64_t)"ArrayInitIndexExpr";
    dword_253E4C8EC = 16;
    qword_253E4C8F0 = (uint64_t)"ArrayInitLoopExpr";
    dword_253E4C8FC = 32;
    qword_253E4C900 = (uint64_t)"ArraySubscriptExpr";
    dword_253E4C90C = 32;
    qword_253E4C910 = (uint64_t)"ArrayTypeTraitExpr";
    dword_253E4C91C = 56;
    qword_253E4C920 = (uint64_t)"AsTypeExpr";
    dword_253E4C92C = 32;
    qword_253E4C930 = (uint64_t)"AssumptionExpr";
    dword_253E4C93C = 16;
    qword_253E4C940 = (uint64_t)"AtomicExpr";
    dword_253E4C94C = 88;
    qword_253E4C950 = (uint64_t)"BinaryOperator";
    dword_253E4C95C = 32;
    qword_253E4C960 = (uint64_t)"CompoundAssignOperator";
    dword_253E4C96C = 48;
    qword_253E4C970 = (uint64_t)"BlockExpr";
    dword_253E4C97C = 24;
    qword_253E4C980 = (uint64_t)"BoundsCheckExpr";
    dword_253E4C98C = 16;
    qword_253E4C990 = (uint64_t)"CXXBindTemporaryExpr";
    dword_253E4C99C = 32;
    qword_253E4C9A0 = (uint64_t)"CXXBoolLiteralExpr";
    dword_253E4C9AC = 16;
    qword_253E4C9B0 = (uint64_t)"CXXConstructExpr";
    dword_253E4C9BC = 40;
    qword_253E4C9C0 = (uint64_t)"CXXTemporaryObjectExpr";
    dword_253E4C9CC = 48;
    qword_253E4C9D0 = (uint64_t)"CXXDefaultArgExpr";
    dword_253E4C9DC = 32;
    qword_253E4C9E0 = (uint64_t)"CXXDefaultInitExpr";
    dword_253E4C9EC = 32;
    qword_253E4C9F0 = (uint64_t)"CXXDeleteExpr";
    dword_253E4C9FC = 32;
    qword_253E4CA00 = (uint64_t)"CXXDependentScopeMemberExpr";
    dword_253E4CA0C = 72;
    qword_253E4CA10 = (uint64_t)"CXXFoldExpr";
    dword_253E4CA1C = 64;
    qword_253E4CA20 = (uint64_t)"CXXInheritedCtorInitExpr";
    dword_253E4CA2C = 32;
    qword_253E4CA30 = (uint64_t)"CXXNewExpr";
    dword_253E4CA3C = 56;
    qword_253E4CA40 = (uint64_t)"CXXNoexceptExpr";
    dword_253E4CA4C = 32;
    qword_253E4CA50 = (uint64_t)"CXXNullPtrLiteralExpr";
    dword_253E4CA5C = 16;
    qword_253E4CA60 = (uint64_t)"CXXPseudoDestructorExpr";
    dword_253E4CA6C = 80;
    qword_253E4CA70 = (uint64_t)"CXXRewrittenBinaryOperator";
    dword_253E4CA7C = 24;
    qword_253E4CA80 = (uint64_t)"CXXScalarValueInitExpr";
    dword_253E4CA8C = 24;
    qword_253E4CA90 = (uint64_t)"CXXStdInitializerListExpr";
    dword_253E4CA9C = 24;
    qword_253E4CAA0 = (uint64_t)"CXXThisExpr";
    dword_253E4CAAC = 16;
    qword_253E4CAB0 = (uint64_t)"CXXThrowExpr";
    dword_253E4CABC = 24;
    qword_253E4CAC0 = (uint64_t)"CXXTypeidExpr";
    dword_253E4CACC = 32;
    qword_253E4CAD0 = (uint64_t)"CXXUnresolvedConstructExpr";
    dword_253E4CADC = 32;
    qword_253E4CAE0 = (uint64_t)"CXXUuidofExpr";
    dword_253E4CAEC = 40;
    qword_253E4CAF0 = (uint64_t)"CallExpr";
    dword_253E4CAFC = 24;
    qword_253E4CB00 = (uint64_t)"CUDAKernelCallExpr";
    dword_253E4CB0C = 24;
    qword_253E4CB10 = (uint64_t)"CXXMemberCallExpr";
    dword_253E4CB1C = 24;
    qword_253E4CB20 = (uint64_t)"CXXOperatorCallExpr";
    dword_253E4CB2C = 32;
    qword_253E4CB30 = (uint64_t)"UserDefinedLiteral";
    dword_253E4CB3C = 32;
    qword_253E4CB40 = (uint64_t)"BuiltinBitCastExpr";
    dword_253E4CB4C = 40;
    qword_253E4CB50 = (uint64_t)"CStyleCastExpr";
    dword_253E4CB5C = 40;
    qword_253E4CB60 = (uint64_t)"CXXFunctionalCastExpr";
    dword_253E4CB6C = 40;
    qword_253E4CB70 = (uint64_t)"CXXAddrspaceCastExpr";
    dword_253E4CB7C = 48;
    qword_253E4CB80 = (uint64_t)"CXXConstCastExpr";
    dword_253E4CB8C = 48;
    qword_253E4CB90 = (uint64_t)"CXXDynamicCastExpr";
    dword_253E4CB9C = 48;
    qword_253E4CBA0 = (uint64_t)"CXXReinterpretCastExpr";
    dword_253E4CBAC = 48;
    qword_253E4CBB0 = (uint64_t)"CXXStaticCastExpr";
    dword_253E4CBBC = 48;
    qword_253E4CBC0 = (uint64_t)"MetalAsTypeCastExpr";
    dword_253E4CBCC = 48;
    qword_253E4CBD0 = (uint64_t)"ObjCBridgedCastExpr";
    dword_253E4CBDC = 48;
    qword_253E4CBE0 = (uint64_t)"ImplicitCastExpr";
    dword_253E4CBEC = 24;
    qword_253E4CBF0 = (uint64_t)"CharacterLiteral";
    dword_253E4CBFC = 24;
    qword_253E4CC00 = (uint64_t)"ChooseExpr";
    dword_253E4CC0C = 56;
    qword_253E4CC10 = (uint64_t)"CompoundLiteralExpr";
    dword_253E4CC1C = 40;
    qword_253E4CC20 = (uint64_t)"ConceptSpecializationExpr";
    dword_253E4CC2C = 104;
    qword_253E4CC30 = (uint64_t)"ConvertVectorExpr";
    dword_253E4CC3C = 40;
    qword_253E4CC40 = (uint64_t)"CoawaitExpr";
    dword_253E4CC4C = 64;
    qword_253E4CC50 = (uint64_t)"CoyieldExpr";
    dword_253E4CC5C = 64;
    qword_253E4CC60 = (uint64_t)"DeclRefExpr";
    dword_253E4CC6C = 32;
    qword_253E4CC70 = (uint64_t)"DependentCoawaitExpr";
    dword_253E4CC7C = 40;
    qword_253E4CC80 = (uint64_t)"DependentScopeDeclRefExpr";
    dword_253E4CC8C = 56;
    qword_253E4CC90 = (uint64_t)"DesignatedInitExpr";
    dword_253E4CC9C = 32;
    qword_253E4CCA0 = (uint64_t)"DesignatedInitUpdateExpr";
    dword_253E4CCAC = 32;
    qword_253E4CCB0 = (uint64_t)"ExpressionTraitExpr";
    dword_253E4CCBC = 40;
    qword_253E4CCC0 = (uint64_t)"ExtVectorElementExpr";
    dword_253E4CCCC = 40;
    qword_253E4CCD0 = (uint64_t)"FirebloomPointerPromotionExpr";
    dword_253E4CCDC = 16;
    qword_253E4CCE0 = (uint64_t)"FixedPointLiteral";
    dword_253E4CCEC = 40;
    qword_253E4CCF0 = (uint64_t)"FloatingLiteral";
    dword_253E4CCFC = 32;
    qword_253E4CD00 = (uint64_t)"ForgePtrExpr";
    dword_253E4CD0C = 40;
    qword_253E4CD10 = (uint64_t)"ConstantExpr";
    dword_253E4CD1C = 24;
    qword_253E4CD20 = (uint64_t)"ExprWithCleanups";
    dword_253E4CD2C = 24;
    qword_253E4CD30 = (uint64_t)"FunctionParmPackExpr";
    dword_253E4CD3C = 32;
    qword_253E4CD40 = (uint64_t)"GNUNullExpr";
    dword_253E4CD4C = 24;
    qword_253E4CD50 = (uint64_t)"GenericSelectionExpr";
    dword_253E4CD5C = 32;
    qword_253E4CD60 = (uint64_t)"GetBoundExpr";
    dword_253E4CD6C = 40;
    qword_253E4CD70 = (uint64_t)"ImaginaryLiteral";
    dword_253E4CD7C = 24;
    qword_253E4CD80 = (uint64_t)"ImplicitValueInitExpr";
    dword_253E4CD8C = 16;
    qword_253E4CD90 = (uint64_t)"InitListExpr";
    dword_253E4CD9C = 64;
    qword_253E4CDA0 = (uint64_t)"IntegerLiteral";
    dword_253E4CDAC = 32;
    qword_253E4CDB0 = (uint64_t)"LambdaExpr";
    dword_253E4CDBC = 32;
    qword_253E4CDC0 = (uint64_t)"MSPropertyRefExpr";
    dword_253E4CDCC = 56;
    qword_253E4CDD0 = (uint64_t)"MSPropertySubscriptExpr";
    dword_253E4CDDC = 40;
    qword_253E4CDE0 = (uint64_t)"MaterializeSequenceExpr";
    dword_253E4CDEC = 16;
    qword_253E4CDF0 = (uint64_t)"MaterializeTemporaryExpr";
    dword_253E4CDFC = 24;
    qword_253E4CE00 = (uint64_t)"MatrixSubscriptExpr";
    dword_253E4CE0C = 40;
    qword_253E4CE10 = (uint64_t)"MemberExpr";
    dword_253E4CE1C = 48;
    qword_253E4CE20 = (uint64_t)"MetalVectorInitExpr";
    dword_253E4CE2C = 48;
    qword_253E4CE30 = (uint64_t)"NoInitExpr";
    dword_253E4CE3C = 16;
    qword_253E4CE40 = (uint64_t)"OMPArraySectionExpr";
    dword_253E4CE4C = 64;
    qword_253E4CE50 = (uint64_t)"OMPArrayShapingExpr";
    dword_253E4CE5C = 32;
    qword_253E4CE60 = (uint64_t)"OMPIteratorExpr";
    dword_253E4CE6C = 32;
    qword_253E4CE70 = (uint64_t)"ObjCAvailabilityCheckExpr";
    dword_253E4CE7C = 88;
    qword_253E4CE80 = (uint64_t)"ObjCBoolLiteralExpr";
    dword_253E4CE8C = 24;
    qword_253E4CE90 = (uint64_t)"ObjCEncodeExpr";
    dword_253E4CE9C = 32;
    qword_253E4CEA0 = (uint64_t)"ObjCIndirectCopyRestoreExpr";
    dword_253E4CEAC = 24;
    qword_253E4CEB0 = (uint64_t)"ObjCIsaExpr";
    dword_253E4CEBC = 40;
    qword_253E4CEC0 = (uint64_t)"ObjCIvarRefExpr";
    dword_253E4CECC = 48;
    qword_253E4CED0 = (uint64_t)"ObjCMessageExpr";
    dword_253E4CEDC = 40;
    qword_253E4CEE0 = (uint64_t)"ObjCArrayLiteral";
    dword_253E4CEEC = 40;
    qword_253E4CEF0 = (uint64_t)"ObjCBoxedExpr";
    dword_253E4CEFC = 40;
    qword_253E4CF00 = (uint64_t)"ObjCDictionaryLiteral";
    dword_253E4CF0C = 40;
    qword_253E4CF10 = (uint64_t)"ObjCStringLiteral";
    dword_253E4CF1C = 32;
    qword_253E4CF20 = (uint64_t)"ObjCPropertyRefExpr";
    dword_253E4CF2C = 48;
    qword_253E4CF30 = (uint64_t)"ObjCProtocolExpr";
    dword_253E4CF3C = 40;
    qword_253E4CF40 = (uint64_t)"ObjCSelectorExpr";
    dword_253E4CF4C = 32;
    qword_253E4CF50 = (uint64_t)"ObjCSubscriptRefExpr";
    dword_253E4CF5C = 56;
    qword_253E4CF60 = (uint64_t)"OffsetOfExpr";
    dword_253E4CF6C = 40;
    qword_253E4CF70 = (uint64_t)"OpaqueValueExpr";
    dword_253E4CF7C = 24;
    qword_253E4CF80 = (uint64_t)"UnresolvedLookupExpr";
    dword_253E4CF8C = 64;
    qword_253E4CF90 = (uint64_t)"UnresolvedMemberExpr";
    dword_253E4CF9C = 80;
    qword_253E4CFA0 = (uint64_t)"PackExpansionExpr";
    dword_253E4CFAC = 32;
    qword_253E4CFB0 = (uint64_t)"ParenExpr";
    dword_253E4CFBC = 32;
    qword_253E4CFC0 = (uint64_t)"ParenListExpr";
    dword_253E4CFCC = 24;
    qword_253E4CFD0 = (uint64_t)"PredefinedExpr";
    dword_253E4CFDC = 16;
    qword_253E4CFE0 = (uint64_t)"PseudoObjectExpr";
    dword_253E4CFEC = 16;
    qword_253E4CFF0 = (uint64_t)"RecoveryExpr";
    dword_253E4CFFC = 32;
    qword_253E4D000 = (uint64_t)"RequiresExpr";
    dword_253E4D00C = 40;
    qword_253E4D010 = (uint64_t)"SYCLUniqueStableNameExpr";
    dword_253E4D01C = 40;
    qword_253E4D020 = (uint64_t)"ShuffleVectorExpr";
    dword_253E4D02C = 40;
    qword_253E4D030 = (uint64_t)"SizeOfPackExpr";
    dword_253E4D03C = 40;
    qword_253E4D040 = (uint64_t)"SourceLocExpr";
    dword_253E4D04C = 32;
    qword_253E4D050 = (uint64_t)"StmtExpr";
    dword_253E4D05C = 32;
    qword_253E4D060 = (uint64_t)"StringLiteral";
    dword_253E4D06C = 16;
    qword_253E4D070 = (uint64_t)"SubstNonTypeTemplateParmExpr";
    dword_253E4D07C = 32;
    qword_253E4D080 = (uint64_t)"SubstNonTypeTemplateParmPackExpr";
    dword_253E4D08C = 40;
    qword_253E4D090 = (uint64_t)"TerminatedByFromIndexableExpr";
    dword_253E4D09C = 40;
    qword_253E4D0A0 = (uint64_t)"TerminatedByToIndexableExpr";
    dword_253E4D0AC = 48;
    qword_253E4D0B0 = (uint64_t)"TypeTraitExpr";
    dword_253E4D0BC = 24;
    qword_253E4D0C0 = (uint64_t)"TypoExpr";
    dword_253E4D0CC = 24;
    qword_253E4D0D0 = (uint64_t)"UnaryExprOrTypeTraitExpr";
    dword_253E4D0DC = 32;
    qword_253E4D0E0 = (uint64_t)"UnaryOperator";
    dword_253E4D0EC = 24;
    qword_253E4D0F0 = (uint64_t)"VAArgExpr";
    dword_253E4D0FC = 40;
    qword_253E4D100 = (uint64_t)"LabelStmt";
    dword_253E4D10C = 32;
    qword_253E4D110 = (uint64_t)"WhileStmt";
    dword_253E4D11C = 16;
  }
  return &byte_253E4C248[16 * a1 + 8];
}

uint64_t sub_22F0D4664(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (!a1)
    return 0;
  if (*a1 != 101)
    return 0;
  v5 = *(_DWORD *)a1;
  v3 = a1 + 16;
  v4 = v5;
  if (v5 < 0x100)
    return 0;
  v6 = 8 * (v4 >> 8);
  while (1)
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)v3 + 32);
    if (v7 == 40)
      return 1;
    if (v7 == 44)
      break;
    v1 = 0;
    v3 += 8;
    v6 -= 8;
    if (!v6)
      return v1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_22F0D46D0(uint64_t result, unsigned int *a2)
{
  int v2;
  _DWORD *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  if (!result)
    goto LABEL_4;
  if (*(_BYTE *)result != 101 || (v8 = result + 16, *(_DWORD *)result < 0x100u))
  {
    result = 0;
LABEL_4:
    v2 = 1;
    goto LABEL_5;
  }
  v9 = 8 * ((unint64_t)*(unsigned int *)result >> 8);
  while (1)
  {
    v10 = *(unsigned __int16 *)(*(_QWORD *)v8 + 32);
    if (v10 == 40)
      break;
    if (v10 == 44)
    {
      v2 = 0;
      result = 0xFFFFFFFFLL;
      goto LABEL_5;
    }
    result = 0;
    v8 += 8;
    v2 = 1;
    v9 -= 8;
    if (!v9)
      goto LABEL_5;
  }
  v2 = 0;
  result = 1;
LABEL_5:
  if (a2)
  {
    if (*(_BYTE *)a2 == 101)
    {
      v5 = *a2;
      v3 = a2 + 4;
      v4 = v5;
      if (v5 >= 0x100)
      {
        v6 = 8 * (v4 >> 8);
        while (1)
        {
          v7 = *(unsigned __int16 *)(*(_QWORD *)v3 + 32);
          if (v7 == 40)
          {
            v11 = 1;
            v12 = -1;
            goto LABEL_24;
          }
          if (v7 == 44)
            break;
          v3 += 2;
          v6 -= 8;
          if (!v6)
            return result;
        }
        v11 = -1;
        v12 = 1;
LABEL_24:
        if (v2)
          v13 = v12;
        else
          v13 = result;
        if ((_DWORD)result == v11)
          return 0;
        else
          return v13;
      }
    }
  }
  return result;
}

unsigned int *sub_22F0D47C0@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  if (result && *(_BYTE *)result == 101 && (v11 = *result, result += 4, v10 = v11, v11 >= 0x100))
  {
    v12 = 8 * (v10 >> 8);
    while (1)
    {
      v3 = *(_QWORD *)result;
      v13 = *(unsigned __int16 *)(*(_QWORD *)result + 32);
      if (v13 == 40)
      {
        v4 = 1;
        v5 = 1;
        goto LABEL_4;
      }
      if (v13 == 44)
        break;
      v3 = 0;
      v4 = 0;
      v5 = 0;
      result += 2;
      v12 -= 8;
      if (!v12)
        goto LABEL_4;
    }
    v5 = -1;
    v4 = 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
LABEL_4:
  if (a2 && *a2 == 101 && (v16 = *(_DWORD *)a2, v14 = a2 + 16, v15 = v16, v16 >= 0x100))
  {
    v17 = 8 * (v15 >> 8);
    while (1)
    {
      v6 = *(_QWORD *)v14;
      v18 = *(unsigned __int16 *)(*(_QWORD *)v14 + 32);
      if (v18 == 40)
      {
        v7 = 1;
        goto LABEL_7;
      }
      if (v18 == 44)
        break;
      v6 = 0;
      v7 = 0;
      v14 += 8;
      v17 -= 8;
      if (!v17)
        goto LABEL_7;
    }
    v7 = -1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
LABEL_7:
  v8 = v4 & (v5 == v7);
  if (!v8)
    v3 = 0;
  *(_BYTE *)a3 = v8;
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  *(_QWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v9;
  return result;
}

unsigned __int8 **sub_22F0D48C8(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;

  while (1)
  {
    v1 = *(unsigned __int8 *)result;
    if (v1 == 235)
    {
      v2 = (unsigned __int8 *)(result + 2);
      goto LABEL_10;
    }
    if ((v1 & 0xFE) != 0x62)
      break;
    if (v1 == 99)
    {
      v2 = (unsigned __int8 *)(result + 3);
LABEL_10:
      result = *(unsigned __int8 ***)v2;
    }
    else if (v1 == 98)
    {
      v2 = (unsigned __int8 *)&result[(((unint64_t)*(unsigned __int16 *)result >> 8) & 1) + 4];
      goto LABEL_10;
    }
  }
  if (v1 == 101)
  {
    v2 = (unsigned __int8 *)(result + 1);
    goto LABEL_10;
  }
  return result;
}

void sub_22F0D492C(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_22F0D4960(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 16;
  a2[1] = 0;
  a2[3] = a1 + 24;
  a2[4] = 0;
}

void sub_22F0D4984()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4990()
{
  JUMPOUT(0x22F0D4988);
}

void sub_22F0D4998()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D49A8(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;

  v2 = *a1;
  v3 = (char *)a1 + (v2 >> 24);
  v4 = a1[4];
  *a2 = v3;
  a2[1] = 0;
  a2[3] = &v3[8 * ((v2 >> 18) & 1) + 8 + 8 * v4];
  JUMPOUT(0x22F0D4970);
}

void sub_22F0D49D0()
{
  JUMPOUT(0x22F0D499CLL);
}

void sub_22F0D49D8(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 16;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D49F4(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 4) != 0)
  {
    *a2 = (v2 & 0xFFFFFFFFFFFFFFF8) + 40;
    JUMPOUT(0x22F0D49ECLL);
  }
  JUMPOUT(0x22F0D4964);
}

void sub_22F0D4A14(unsigned __int16 *a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *a1;
  v3 = ((v2 >> 12) & 1) + ((v2 >> 13) & 1) + 1;
  if ((v2 & 0x600) != 0x200)
    v3 = 0;
  *a2 = &a1[4 * v3 + 8];
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D4A64()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4A70()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4A7C()
{
  JUMPOUT(0x22F0D49A0);
}

void sub_22F0D4A88(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (!*(_QWORD *)(a1 + 8))
  {
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    JUMPOUT(0x22F0D4974);
  }
  JUMPOUT(0x22F0D4A68);
}

void sub_22F0D4AA4()
{
  JUMPOUT(0x22F0D499CLL);
}

void sub_22F0D4AAC()
{
  JUMPOUT(0x22F0D4A74);
}

void sub_22F0D4AB4()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4ACC(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 == v2)
  {
    v3 = 0;
    v2 = 0;
  }
  *a2 = v2;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = v3;
  a2[5] = 0;
  JUMPOUT(0x22F0D4970);
}

uint64_t sub_22F0D4AEC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_22F003328(a1, a2);
}

void sub_22F0D4B00(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 24;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D4B24(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 24;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D4B44()
{
  JUMPOUT(0x22F0D4964);
}

void sub_22F0D4B4C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v3 = a1 + 16;
  v2 = *(unsigned __int8 **)(a1 + 16);
  if (v2 && !sub_22EFFFB48(v2))
  {
    *a2 = v3;
    a2[1] = 0;
    a2[3] = a1 + 24;
    a2[4] = 0;
    JUMPOUT(0x22F0D4974);
  }
  JUMPOUT(0x22F0D4A98);
}

void sub_22F0D4BFC(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 24);
  if (v2 && *((_BYTE *)v2 + 8))
  {
    *a2 = &v2[2 * *v2 + 4 + 2 * v2[1]];
    a2[1] = 0;
    JUMPOUT(0x22F0D49C8);
  }
  JUMPOUT(0x22F0D4A94);
}

void sub_22F0D4C2C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 4) == 0)
    JUMPOUT(0x22F0D4964);
  JUMPOUT(0x22F0D4A94);
}

void sub_22F0D4C40()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4C5C()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4C70()
{
  JUMPOUT(0x22F0D49A0);
}

void sub_22F0D4C7C()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4C88()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4CD4(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 8 * *(unsigned int *)(a1 + 28) + 32;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

uint64_t sub_22F0D4CF0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_22F3C7AE0(a1, a2);
}

void sub_22F0D4D04()
{
  JUMPOUT(0x22F0D49A0);
}

void sub_22F0D4D10(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 40;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D4D28(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 40) & 6) != 0)
    JUMPOUT(0x22F0D4A94);
  JUMPOUT(0x22F0D4A74);
}

void sub_22F0D4D40(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 16 * *(unsigned int *)(a1 + 32) + 40;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D4D58()
{
  JUMPOUT(0x22F0D4B18);
}

void sub_22F0D4D64(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1 + 16;
  a2[1] = 0;
  JUMPOUT(0x22F0D49C8);
}

void sub_22F0D4D78()
{
  JUMPOUT(0x22F0D49A0);
}

void sub_22F0D4D84()
{
  JUMPOUT(0x22F0D499CLL);
}

void sub_22F0D4D8C()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4D98()
{
  JUMPOUT(0x22F0D4B94);
}

uint64_t sub_22F0D4DA0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_22F3C672C(a1, a2);
}

void sub_22F0D4DB4(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 16;
  v4 = sub_22F3C1EC8(a1);
  v5 = 24;
  if (!v4)
    v5 = 16;
  *a2 = v2;
  a2[1] = 0;
  a2[3] = v2 + v5;
  a2[4] = 0;
  JUMPOUT(0x22F0D4974);
}

void sub_22F0D4DE4()
{
  JUMPOUT(0x22F0D4BBCLL);
}

void sub_22F0D4DF4()
{
  JUMPOUT(0x22F0D4B94);
}

void sub_22F0D4DFC()
{
  JUMPOUT(0x22F0D4B94);
}

void sub_22F0D4E04()
{
  JUMPOUT(0x22F0D49E8);
}

void sub_22F0D4E18()
{
  JUMPOUT(0x22F0D4968);
}

void sub_22F0D4E54()
{
  JUMPOUT(0x22F0D4DECLL);
}

void sub_22F0D4E6C()
{
  JUMPOUT(0x22F0D4988);
}

void sub_22F0D4E74(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_22F0D4EB4()
{
  JUMPOUT(0x22F0D4E9CLL);
}

uint64_t sub_22F0D4ED0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 12);
}

void sub_22F0D582C()
{
  uint64_t v0;

  sub_22F343D00(v0);
  JUMPOUT(0x22F0D573CLL);
}

void sub_22F0D5838()
{
  _QWORD *v0;

  sub_22F003994(v0);
  sub_22F3F1A68((uint64_t)v0);
  JUMPOUT(0x22F0D4EF8);
}

void sub_22F0D5850()
{
  uint64_t v0;

  sub_22F0D5A50(*(_QWORD *)(v0 + 16));
  sub_22F3C5798(v0);
  JUMPOUT(0x22F0D4EF8);
}

void sub_22F0D5868()
{
  uint64_t v0;

  sub_22F3F3214(v0);
  JUMPOUT(0x22F0D541CLL);
}

void sub_22F0D5878()
{
  unsigned __int16 *v0;

  sub_22F3F1A3C(v0);
  JUMPOUT(0x22F0D541CLL);
}

void sub_22F0D5888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(v0 + 40);
  v2 = v1;
  while (1)
  {
    if ((v2 & 0xF) != 0)
      goto LABEL_12;
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v3 > 0x39)
    {
LABEL_7:
      if (sub_22F115668(v2))
        v1 = v2;
      v2 = sub_22F115B7C(v2);
      if (!v2)
        goto LABEL_14;
    }
    else
    {
      if (v3 == 24)
        goto LABEL_13;
      if (v3 == 26)
      {
        if ((*(_BYTE *)(v2 + 23) & 0x10) != 0)
        {
LABEL_13:
          v1 = v2;
LABEL_14:
          sub_22F115668(v1);
          sub_22F3C57CC((unsigned __int8 *)v0);
          JUMPOUT(0x22F0D5994);
        }
      }
      else if (((1 << v3) & 0x20000000200003CLL) == 0)
      {
        goto LABEL_7;
      }
LABEL_12:
      v2 = sub_22F115B7C(v2);
    }
  }
}

void sub_22F0D5924()
{
  unsigned int *v0;

  sub_22F3C3BE4(v0);
  JUMPOUT(0x22F0D5740);
}

void sub_22F0D5A50(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_22F0D5A94()
{
  JUMPOUT(0x22F0D5A74);
}

void sub_22F0D5A9C()
{
  JUMPOUT(0x22F0D5A74);
}

uint64_t sub_22F0D5AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v5;

  if (*(_QWORD *)(v0 + 16))
    JUMPOUT(0x22F0D5A74);
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 8);
  v2 = *(_QWORD *)(v1 + 56);
  if ((v2 & 4) != 0 && (v5 = v2 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v5 + 16)))
    v3 = **(unsigned int ***)(v5 + 24);
  else
    v3 = (unsigned int *)(v1 + 64);
  return *v3;
}

void sub_22F0D60E4(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_22F0D6120()
{
  JUMPOUT(0x22F0D6100);
}

void sub_22F0D6128()
{
  JUMPOUT(0x22F0D6100);
}

void sub_22F0D6130()
{
  JUMPOUT(0x22F0D6100);
}

void sub_22F0D6138()
{
  JUMPOUT(0x22F0D6100);
}

uint64_t sub_22F0D6140()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    JUMPOUT(0x22F0D6100);
  return *(unsigned int *)(v0 + 4);
}

void sub_22F0D62E8()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D62F0()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6300()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6308()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6310()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6320()
{
  unsigned int *v0;

  sub_22EFFAEF8(v0);
}

void sub_22F0D633C()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6348()
{
  unsigned __int16 *v0;

  sub_22F0D64DC(v0);
}

void sub_22F0D635C()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6364()
{
  unsigned __int8 *v0;

  sub_22F060B18(v0);
}

void sub_22F0D6378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v11;

  sub_22F05FD5C(v11, &a9);
  sub_22F0D60E4(a11);
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6390()
{
  uint64_t v0;

  if (!*(_DWORD *)(*(_QWORD *)(v0 + 80) + 4))
    sub_22EFC70E8((_QWORD *)(v0 + 40));
  JUMPOUT(0x22F0D62D0);
}

uint64_t sub_22F0D63B0()
{
  unsigned int *v0;

  return sub_22EFF70D0(v0);
}

void sub_22F0D63C4()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D63E4()
{
  unint64_t v0;

  sub_22EFFD9B4(v0);
}

void sub_22F0D63F8()
{
  unsigned int *v0;

  sub_22EFFB2EC(v0);
}

void sub_22F0D640C()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6414()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D641C()
{
  uint64_t v0;

  sub_22F0D6528(v0);
}

void sub_22F0D6430()
{
  uint64_t v0;

  sub_22F0D6528(v0);
}

void sub_22F0D6444()
{
  JUMPOUT(0x22F0D62D0);
}

void sub_22F0D6478()
{
  uint64_t v0;

  sub_22F3F3214(v0);
}

void sub_22F0D648C()
{
  unsigned __int16 *v0;

  sub_22F3F1A3C(v0);
}

void sub_22F0D64A0()
{
  unsigned __int8 *v0;

  sub_22F3C57CC(v0);
}

void sub_22F0D64B4()
{
  uint64_t v0;

  sub_22F3F1A68(v0);
}

unint64_t sub_22F0D64C8()
{
  uint64_t v0;

  return sub_22F3C5798(v0);
}

void sub_22F0D64DC(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  int v3;

  v1 = *a1;
  if ((v1 & 0x800) == 0)
  {
    v2 = (v1 >> 13) & 1;
    v3 = (v1 >> 12) & 1;
LABEL_6:
    sub_22F0D60E4(*(_QWORD *)&a1[4 * (v3 + v2 + 1) + 8]);
    return;
  }
  v2 = (v1 >> 13) & 1;
  v3 = (v1 >> 12) & 1;
  if (!*(_QWORD *)&a1[4 * (v2 + v3 + 2) + 8])
    goto LABEL_6;
  sub_22F0D60E4(*(_QWORD *)&a1[4 * (v2 + v3 + 2) + 8]);
}

void sub_22F0D6528(uint64_t a1)
{
  uint64_t v1;

  if ((*(_DWORD *)a1 & 0x40000) == 0
    || (*(_DWORD *)a1 != 211 ? (v1 = a1 + 80) : (v1 = a1 + 64),
        !*(_DWORD *)(v1 + 8 * *(unsigned int *)(a1 + 4))))
  {
    sub_22EFC70E8((_QWORD *)(a1 + 16));
  }
}

unsigned __int8 *sub_22F0D6590(unsigned __int8 *a1, void *__src, uint64_t a3, int a4, int a5)
{
  char *v10;

  *a1 = 8;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(8);
    ++*((_DWORD *)v10 + 2);
  }
  *((_DWORD *)a1 + 2) = a5;
  *(_DWORD *)a1 = *a1 | ((_DWORD)a3 << 8);
  if (a3)
    memmove(a1 + 16, __src, 8 * a3);
  *((_DWORD *)a1 + 1) = a4;
  return a1;
}

unsigned __int8 *sub_22F0D6620(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  unsigned __int8 *v9;

  v9 = (unsigned __int8 *)sub_22E3CD3D4(a1 + 2032, 8 * a3 + 16, 3);
  return sub_22F0D6590(v9, a2, a3, a4, a5);
}

unsigned __int8 *sub_22F0D6674(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *result;
  char *v4;
  unsigned __int8 *v5;

  result = (unsigned __int8 *)sub_22E3CD3D4(a1 + 2032, 8 * a2 + 16, 3);
  *result = 8;
  if (byte_255E04EB3)
  {
    v5 = result;
    v4 = sub_22F0D3748(8);
    result = v5;
    ++*((_DWORD *)v4 + 2);
  }
  *((_DWORD *)result + 2) = 0;
  *(_DWORD *)result = *result | (a2 << 8);
  return result;
}

unsigned __int8 *sub_22F0D66F4(unsigned __int8 *result)
{
  unsigned __int8 v1;
  BOOL v2;
  unsigned __int8 **v3;

  v1 = *result;
  while ((v1 + 21) <= 0x7Au)
  {
    v2 = v1 == 235;
    v3 = (unsigned __int8 **)(result + 8);
    if (v2)
      v3 = (unsigned __int8 **)(result + 16);
    result = *v3;
    v1 = **v3;
    if ((v1 - 101) >= 0x87u)
      return 0;
  }
  return result;
}

void sub_22F0D673C(unsigned __int8 *a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  int v3;

  v3 = *a1;
  if (v3 == 2)
  {
    sub_22F0D6B38(a3);
  }
  else if (v3 == 1)
  {
    sub_22F0D675C(a1, a2, a3);
  }
}

void sub_22F0D675C(unsigned __int8 *a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  char *v4;
  char *v5;
  unsigned __int8 **v6;
  char v7;
  int v8;
  BOOL v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unint64_t v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  std::string::const_iterator v18;
  void **v19;
  void *v20;
  void *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  void **v25;
  void *v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  int v32;
  void *__p[2];
  _QWORD v34[2];
  void *v35;
  uint64_t v36;
  _QWORD v37[26];

  v37[24] = *MEMORY[0x24BDAC8D0];
  v35 = v37;
  v36 = 0x400000000;
  v32 = 0;
  sub_22F0D715C(a1, (uint64_t)&v35, a2, &v32);
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  v4 = (char *)v35;
  if (!(_DWORD)v36)
    goto LABEL_66;
  v5 = (char *)v35 + 48 * v36;
  do
  {
    v6 = (unsigned __int8 **)(v4 + 8);
    v7 = v4[31];
    if (*(_DWORD *)v4)
    {
      if (v4[31] < 0)
        v8 = **v6;
      else
        v8 = *(unsigned __int8 *)v6;
      if ((word_22F4ADB24[v8] & 0x60) != 0 && v8)
      {
        v13 = *((unsigned int *)v4 + 8);
        v14 = (char *)v34 + 5;
        if ((_DWORD)v13)
        {
          do
          {
            *--v14 = (v13 % 0xA) | 0x30;
            v15 = v13 > 9;
            v13 /= 0xAuLL;
          }
          while (v15);
        }
        else
        {
          BYTE4(v34[0]) = 48;
          v14 = (char *)v34 + 4;
        }
        sub_22E3B4274(&v28, v14, (char *)v34 + 5, (char *)v34 + 5 - v14);
        v22 = std::string::insert(&v28, 0, "${");
        v23 = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v29, 58);
        v30 = v29;
        memset(&v29, 0, sizeof(v29));
        if (v4[31] < 0)
          v24 = **v6;
        else
          v24 = *(unsigned __int8 *)v6;
        if ((word_22F4ADB24[v24] & 0x60) == 0)
          LOBYTE(v24) = 0;
        std::string::push_back(&v30, v24);
        v31 = v30;
        memset(&v30, 0, sizeof(v30));
        std::string::push_back(&v31, 125);
        v34[0] = *((_QWORD *)&v31.__r_.__value_.__l + 2);
        *(_OWORD *)__p = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        memset(&v31, 0, sizeof(v31));
        if (v34[0] >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        if (v34[0] >= 0)
          v26 = (void *)(HIBYTE(v34[0]) & 0x7FLL);
        else
          v26 = __p[1];
        std::string::append(a3, (const std::string::value_type *)v25, (std::string::size_type)v26);
        if (SHIBYTE(v34[0]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v28.__r_.__value_.__r.__words[0];
          goto LABEL_58;
        }
      }
      else
      {
        v16 = *((unsigned int *)v4 + 8);
        v17 = (char *)v34 + 5;
        if ((_DWORD)v16)
        {
          do
          {
            *--v17 = (v16 % 0xA) | 0x30;
            v15 = v16 > 9;
            v16 /= 0xAuLL;
          }
          while (v15);
        }
        else
        {
          BYTE4(v34[0]) = 48;
          v17 = (char *)v34 + 4;
        }
        sub_22E3B4274(&v31, v17, (char *)v34 + 5, (char *)v34 + 5 - v17);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v31;
        else
          v18.__i_ = (std::__wrap_iter<const char *>::iterator_type)v31.__r_.__value_.__r.__words[0];
        std::string::insert(&v31, v18, 36);
        v34[0] = *((_QWORD *)&v31.__r_.__value_.__l + 2);
        *(_OWORD *)__p = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        memset(&v31, 0, sizeof(v31));
        if (v34[0] >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if (v34[0] >= 0)
          v20 = (void *)(HIBYTE(v34[0]) & 0x7FLL);
        else
          v20 = __p[1];
        std::string::append(a3, (const std::string::value_type *)v19, (std::string::size_type)v20);
        if (SHIBYTE(v34[0]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_58:
          operator delete(v21);
        }
      }
    }
    else
    {
      v9 = v7 < 0;
      if (v7 >= 0)
        v10 = v4 + 8;
      else
        v10 = (const std::string::value_type *)*((_QWORD *)v4 + 1);
      v11 = v7 & 0x7F;
      if (v9)
        v12 = *((_QWORD *)v4 + 2);
      else
        v12 = v11;
      std::string::append(a3, v10, v12);
    }
    v4 += 48;
  }
  while (v4 != v5);
  v4 = (char *)v35;
  if ((_DWORD)v36)
  {
    v27 = 48 * v36;
    do
    {
      if (v4[v27 - 17] < 0)
        operator delete(*(void **)&v4[v27 - 40]);
      v27 -= 48;
    }
    while (v27);
    v4 = (char *)v35;
  }
LABEL_66:
  if (v4 != (char *)v37)
    free(v4);
}

void sub_22F0D6B38(std::string *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  std::string::size_type v10;
  const std::string::value_type *v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  void *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  std::string::const_iterator v24;
  size_t v25;
  void *p_p;
  uint64_t v27;
  uint64_t v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string::const_iterator v31;
  void *v32;
  std::string::size_type v33;
  const std::string::value_type *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  std::string::size_type v39;
  std::string *v40;
  int64_t v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  _QWORD *v44;
  void *__p;
  std::string::size_type v46;
  int64_t v47;
  std::string v48;
  std::string v49;
  std::string v50;
  __int128 __dst;
  int64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[18];

  v55[16] = *MEMORY[0x24BDAC8D0];
  v44 = v55;
  v53 = v55;
  v54 = 0x800000000;
  llvm::StringRef::split();
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v2 = v54;
  if ((_DWORD)v54)
  {
    v3 = 0;
    v4 = 0;
    v5 = v54 - 1;
    while (1)
    {
      v6 = *(__int16 **)((char *)v53 + v3);
      v7 = *(_QWORD *)((char *)v53 + v3 + 8);
      v8 = v7 - 4;
      if (v7 < 4)
        goto LABEL_4;
      if (*(_DWORD *)v6 == 544761206)
      {
        if (v6)
        {
          *((_BYTE *)&v48.__r_.__value_.__s + 23) = 3;
          v13 = *v6;
          *(_WORD *)&v48.__r_.__value_.__s.__data_[2] = *((unsigned __int8 *)v6 + 2);
          LOWORD(v48.__r_.__value_.__l.__data_) = v13;
        }
        else
        {
          memset(&v48, 0, sizeof(v48));
        }
        v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v48;
        std::string::insert(&v48, v24, 123);
        v49 = v48;
        memset(&v48, 0, sizeof(v48));
        std::string::push_back(&v49, 125);
        v50 = v49;
        memset(&v49, 0, sizeof(v49));
        v25 = v7 - 3;
        if (v25 > 0x7FFFFFFFFFFFFFF7)
LABEL_96:
          abort();
        if (v25 >= 0x17)
        {
          v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v27 = v25 | 7;
          v28 = v27 + 1;
          p_p = operator new(v27 + 1);
          v46 = v25;
          v47 = v28 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v47) = v25;
          p_p = &__p;
        }
        memmove(p_p, (char *)v6 + 3, v25);
        *((_BYTE *)p_p + v25) = 0;
        if (v47 >= 0)
          v29 = (const std::string::value_type *)&__p;
        else
          v29 = (const std::string::value_type *)__p;
        if (v47 >= 0)
          v30 = HIBYTE(v47) & 0x7F;
        else
          v30 = v46;
        goto LABEL_73;
      }
      if (v7 >= 5)
        break;
      if (v6)
      {
        HIBYTE(v52) = 4;
        p_dst = &__dst;
        goto LABEL_19;
      }
LABEL_13:
      v10 = 0;
      v11 = 0;
      v12 = 0;
      __dst = 0uLL;
      v52 = 0;
LABEL_21:
      v16 = v12;
      if (v12 >= 0)
        v17 = (const std::string::value_type *)&__dst;
      else
        v17 = v11;
      v18 = v12 & 0x7F;
      if (v16 >= 0)
        v19 = v18;
      else
        v19 = v10;
      std::string::append(a1, v17, v19);
      if ((SHIBYTE(v52) & 0x80000000) == 0)
        goto LABEL_90;
      v20 = (void *)__dst;
LABEL_89:
      operator delete(v20);
LABEL_90:
      if (v4 < v5)
        std::string::append(a1, "\n\t");
      ++v4;
      v3 += 16;
      if (v2 == v4)
        goto LABEL_93;
    }
    v21 = *(_DWORD *)v6 == 846751094 && *((_BYTE *)v6 + 4) == 32;
    if (v21
      || (*(_DWORD *)v6 == 863528310 ? (v22 = *((_BYTE *)v6 + 4) == 32) : (v22 = 0),
          v22 || (*(_DWORD *)v6 == 2019915365 ? (v23 = *((_BYTE *)v6 + 4) == 32) : (v23 = 0), v23)))
    {
      if (v6)
      {
        *((_BYTE *)&v48.__r_.__value_.__s + 23) = 4;
        LODWORD(v48.__r_.__value_.__l.__data_) = *(_DWORD *)v6;
        v48.__r_.__value_.__s.__data_[4] = 0;
      }
      else
      {
        memset(&v48, 0, sizeof(v48));
      }
      v31.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v48;
      std::string::insert(&v48, v31, 123);
      v49 = v48;
      memset(&v48, 0, sizeof(v48));
      std::string::push_back(&v49, 125);
      v50 = v49;
      memset(&v49, 0, sizeof(v49));
      if (v6)
      {
        if (v8 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_96;
        if (v8 >= 0x17)
        {
          v36 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17)
            v36 = v8 | 7;
          v37 = v36 + 1;
          v32 = operator new(v36 + 1);
          v46 = v8;
          v47 = v37 | 0x8000000000000000;
          __p = v32;
        }
        else
        {
          HIBYTE(v47) = v7 - 4;
          v32 = &__p;
        }
        memmove(v32, v6 + 2, v8);
        *((_BYTE *)v32 + v8) = 0;
        v35 = HIBYTE(v47);
        v34 = (const std::string::value_type *)__p;
        v33 = v46;
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        __p = 0;
        v46 = 0;
        v47 = 0;
      }
      v38 = v35 < 0;
      if (v35 >= 0)
        v29 = (const std::string::value_type *)&__p;
      else
        v29 = v34;
      v39 = v35 & 0x7F;
      if (v38)
        v30 = v33;
      else
        v30 = v39;
LABEL_73:
      v40 = std::string::append(&v50, v29, v30);
      v41 = v40->__r_.__value_.__r.__words[2];
      __dst = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v52 = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if (v52 >= 0)
        v42 = (const std::string::value_type *)&__dst;
      else
        v42 = (const std::string::value_type *)__dst;
      if (v52 >= 0)
        v43 = HIBYTE(v52) & 0x7F;
      else
        v43 = *((_QWORD *)&__dst + 1);
      std::string::append(a1, v42, v43);
      if (SHIBYTE(v52) < 0)
        operator delete((void *)__dst);
      if (SHIBYTE(v47) < 0)
        operator delete(__p);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_90;
      v20 = (void *)v48.__r_.__value_.__r.__words[0];
      goto LABEL_89;
    }
LABEL_4:
    if (v6)
    {
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_96;
      if (v7 >= 0x17)
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v14 = v7 | 7;
        v15 = v14 + 1;
        p_dst = (__int128 *)operator new(v14 + 1);
        *((_QWORD *)&__dst + 1) = v7;
        v52 = v15 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
LABEL_19:
        memmove(p_dst, v6, v7);
      }
      else
      {
        HIBYTE(v52) = *(_QWORD *)((char *)v53 + v3 + 8);
        p_dst = &__dst;
        if (v7)
          goto LABEL_19;
      }
      *((_BYTE *)p_dst + v7) = 0;
      v12 = HIBYTE(v52);
      v10 = *((_QWORD *)&__dst + 1);
      v11 = (const std::string::value_type *)__dst;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
LABEL_93:
  if (v53 != v44)
    free(v53);
}

unsigned __int8 *sub_22F0D705C(unsigned __int8 *result, unsigned int a2)
{
  int v2;
  uint64_t v3;

  v2 = *result;
  if (v2 == 2)
    return *(unsigned __int8 **)(*((_QWORD *)result + 10) + 16 * a2);
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)result + 7) + 8 * a2);
    return (unsigned __int8 *)(v3 + 4 * *(unsigned int *)(v3 + 4) + 20);
  }
  return result;
}

unsigned __int8 *sub_22F0D70AC(unsigned __int8 *result, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *result;
  if (v2 == 2)
    return *(unsigned __int8 **)(*((_QWORD *)result + 10) + 16 * (*((_DWORD *)result + 4) + a2));
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)result + 7) + 8 * (*((_DWORD *)result + 4) + a2));
    return (unsigned __int8 *)(v3 + 4 * *(unsigned int *)(v3 + 4) + 20);
  }
  return result;
}

unsigned __int8 *sub_22F0D710C(unsigned __int8 *result, unsigned int a2)
{
  int v2;
  uint64_t v3;

  v2 = *result;
  if (v2 == 2)
    return *(unsigned __int8 **)(*((_QWORD *)result + 11) + 16 * a2);
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)result + 8) + 8 * a2);
    return (unsigned __int8 *)(v3 + 4 * *(unsigned int *)(v3 + 4) + 20);
  }
  return result;
}

uint64_t sub_22F0D715C(unsigned __int8 *a1, uint64_t a2, _QWORD *a3, int *a4)
{
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  const char *v13;
  char *v14;
  char *v15;
  int v16;
  const std::string::value_type *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string::size_type size;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  const void *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  const void *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v54;
  const void *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  size_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  _DWORD *v75;
  _DWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  size_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  _DWORD *v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  _DWORD *v99;
  unsigned int v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  std::string::size_type v113;
  std::string::size_type v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  int v120;
  char *v121;
  int v122;
  _DWORD *v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  const char *v132;
  const char *v133;
  const char *v134;
  uint64_t v135;
  _BYTE __p[32];
  uint64_t v137;
  char v138;
  std::string v139;
  uint64_t v140;

  v5 = (_DWORD *)*((_QWORD *)a1 + 6);
  v6 = (char *)&v5[v5[1] + 5];
  v7 = ((*v5 >> 21) & 7u) * v5[4];
  if (a1[12])
  {
    memset(&v139, 0, sizeof(v139));
    if ((_DWORD)v7)
    {
      do
      {
        v8 = *v6;
        if (v8 == 36)
          std::string::append(&v139, "$$");
        else
          std::string::push_back(&v139, v8);
        ++v6;
        --v7;
      }
      while (v7);
      *(_DWORD *)__p = 0;
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(&__p[8], v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
LABEL_171:
        v138 = 0;
        v137 = 0;
        v107 = sub_22F0D861C(a2, (unint64_t)__p);
        v108 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8);
        *(_DWORD *)v108 = *(_DWORD *)v107;
        v109 = *(_OWORD *)(v107 + 8);
        *(_QWORD *)(v108 + 24) = *(_QWORD *)(v107 + 24);
        *(_OWORD *)(v108 + 8) = v109;
        *(_QWORD *)(v107 + 16) = 0;
        *(_QWORD *)(v107 + 24) = 0;
        *(_QWORD *)(v107 + 8) = 0;
        v110 = *(_QWORD *)(v107 + 37);
        *(_QWORD *)(v108 + 32) = *(_QWORD *)(v107 + 32);
        *(_QWORD *)(v108 + 37) = v110;
        ++*(_DWORD *)(a2 + 8);
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v139.__r_.__value_.__l.__data_);
        return 0;
      }
    }
    else
    {
      *(_DWORD *)__p = 0;
    }
    *(std::string *)&__p[8] = v139;
    goto LABEL_171;
  }
  v9 = a3;
  memset(&v139, 0, sizeof(v139));
  v10 = "}";
  v11 = *(_BYTE *)(a3[1886] + 83) == 0;
  if (!*(_BYTE *)(a3[1886] + 83))
    v10 = "$)";
  v134 = v10;
  v135 = 0;
  if (v11)
    v12 = "$|";
  else
    v12 = "|";
  v13 = "{";
  if (v11)
    v13 = "$(";
  v132 = v13;
  v133 = v12;
  if ((_DWORD)v7)
  {
    v14 = &v6[v7];
    v128 = ~(_DWORD)v6;
    v127 = a2 + 16;
    v15 = v6;
    while (1)
    {
      v16 = *v15;
      if (v16 > 122)
      {
        switch(v16)
        {
          case '{':
            v17 = v132;
            goto LABEL_33;
          case '|':
            v17 = v133;
            goto LABEL_33;
          case '}':
            v17 = v134;
            goto LABEL_33;
        }
LABEL_37:
        std::string::push_back(&v139, v16);
LABEL_34:
        v19 = (unsigned __int8 *)(v15 + 1);
        goto LABEL_35;
      }
      if (v16 == 36)
      {
        v17 = "$$";
LABEL_33:
        std::string::append(&v139, v17);
        goto LABEL_34;
      }
      if (v16 != 37)
        goto LABEL_37;
      if (v15 + 1 == v14)
        goto LABEL_190;
      v18 = v9[1886];
      v19 = (unsigned __int8 *)(v15 + 2);
      v20 = v15[1];
      LODWORD(v21) = v15[1];
      if (v20 > 122)
      {
        if (v20 == 123 || v20 == 125)
        {
LABEL_40:
          std::string::push_back(&v139, v21);
          goto LABEL_35;
        }
      }
      else
      {
        if (v20 == 37)
          goto LABEL_40;
        if (v20 == 61)
        {
          std::string::append(&v139, "${:uid}");
          goto LABEL_35;
        }
      }
      (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v18 + 368))(__p, v9[1886], (char)v21);
      if (__p[24])
      {
        if (__p[23] >= 0)
          v23 = __p;
        else
          v23 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v24 = __p[23] & 0x7F;
        else
          v24 = *(_QWORD *)&__p[8];
        std::string::append(&v139, v23, v24);
        if (!__p[24] || (__p[23] & 0x80000000) == 0)
          goto LABEL_35;
LABEL_157:
        operator delete(*(void **)__p);
        goto LABEL_35;
      }
      v126 = v18;
      size = *((_BYTE *)&v139.__r_.__value_.__s + 23) & 0x7F;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v139.__r_.__value_.__l.__size_;
      if (size)
      {
        *(_DWORD *)__p = 0;
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          sub_22E3BB2B4(&__p[8], v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
        else
          *(std::string *)&__p[8] = v139;
        v138 = 0;
        v137 = 0;
        v26 = sub_22F0D861C(a2, (unint64_t)__p);
        v27 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8);
        *(_DWORD *)v27 = *(_DWORD *)v26;
        v28 = *(_OWORD *)(v26 + 8);
        *(_QWORD *)(v27 + 24) = *(_QWORD *)(v26 + 24);
        *(_OWORD *)(v27 + 8) = v28;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 8) = 0;
        v29 = *(_QWORD *)(v26 + 37);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v26 + 32);
        *(_QWORD *)(v27 + 37) = v29;
        ++*(_DWORD *)(a2 + 8);
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        {
          *v139.__r_.__value_.__l.__data_ = 0;
          v139.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v139.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v139.__r_.__value_.__s + 23) = 0;
        }
      }
      v30 = word_22F4ADB24[v20];
      if ((v30 & 0x60) != 0)
      {
        if (v19 == (unsigned __int8 *)v14)
        {
LABEL_190:
          v120 = (_DWORD)v14 + v128;
LABEL_191:
          *a4 = v120;
          v111 = 2125;
          goto LABEL_187;
        }
        v21 = *v19;
        v30 = word_22F4ADB24[v21];
        v31 = 3;
      }
      else
      {
        v31 = 2;
      }
      v124 = (uint64_t *)v9[249];
      v125 = v9;
      v123 = (_DWORD *)v9[250];
      if ((v30 & 8) == 0)
      {
        v32 = &v15[v31];
        if ((_DWORD)v21 != 91)
        {
          v120 = (_DWORD)v32 + v128;
          goto LABEL_191;
        }
        *a4 = (_DWORD)v32 - (_DWORD)v6 - 1;
        v33 = (char *)memchr(v32, 93, v14 - v32);
        if (!v33)
        {
          v111 = 2128;
          goto LABEL_187;
        }
        v34 = v33 - v32;
        if (v33 == v32)
        {
          v111 = 2124;
          goto LABEL_187;
        }
        v121 = v33;
        v35 = *((unsigned int *)a1 + 4);
        v129 = v35;
        if ((_DWORD)v35)
        {
          v36 = 0;
          v37 = *((_QWORD *)a1 + 9);
          while (1)
          {
            v38 = *(_QWORD *)(v37 + 8 * v36);
            if (v38)
            {
              v39 = *(unsigned int **)(v38 + 16);
              v41 = *v39;
              v40 = v39 + 4;
              v38 = v41;
            }
            else
            {
              v40 = 0;
            }
            if (v38 == v34)
            {
              v42 = memcmp(v40, v32, v34);
              v35 = v129;
              if (!v42)
                break;
            }
            if (v35 == ++v36)
              goto LABEL_78;
          }
        }
        else
        {
LABEL_78:
          v122 = *((_DWORD *)a1 + 5);
          if (v122)
          {
            v43 = *((_QWORD *)a1 + 9);
            LODWORD(v36) = v35;
            v44 = *((unsigned int *)a1 + 5);
            while (1)
            {
              v45 = *(_QWORD *)(v43 + 8 * v36);
              if (v45)
              {
                v46 = *(unsigned int **)(v45 + 16);
                v48 = *v46;
                v47 = v46 + 4;
                v45 = v48;
              }
              else
              {
                v47 = 0;
              }
              if (v45 == v34 && !memcmp(v47, v32, v34))
                break;
              LODWORD(v36) = v36 + 1;
              if (!--v44)
                goto LABEL_86;
            }
          }
          else
          {
LABEL_86:
            v49 = *((unsigned int *)a1 + 20);
            if (!(_DWORD)v49)
              goto LABEL_192;
            v50 = *((_QWORD *)a1 + 4);
            v51 = v122 + v129;
            while (1)
            {
              v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v51) + 24) + 40) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v51) + 24) + 40) & 7) != 0 || v52 == 0)
              {
                v56 = 0;
                v55 = &unk_22F5C9B0E;
              }
              else
              {
                v54 = *(unsigned int **)(v52 + 16);
                v57 = *v54;
                v55 = v54 + 4;
                v56 = v57;
              }
              if (v56 == v34 && !memcmp(v55, v32, v34))
                break;
              ++v51;
              if (!--v49)
                goto LABEL_192;
            }
            v81 = v129;
            if ((_DWORD)v129)
            {
              v82 = 0;
              v83 = 0;
              v81 = 0;
              v84 = *a1;
              do
              {
                if (v84 == 2)
                {
                  v58 = *(unsigned __int8 **)(*((_QWORD *)a1 + 10) + v82);
                }
                else if (v84 == 1)
                {
                  v58 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + v83)
                                          + 4 * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + v83) + 4)
                                          + 20);
                }
                LODWORD(v58) = *v58;
                if ((_DWORD)v58 == 43)
                  ++v81;
                v83 += 8;
                v82 += 16;
              }
              while (8 * v129 != v83);
            }
            LODWORD(v36) = v81 + v51;
          }
        }
        if ((_DWORD)v36 == -1)
        {
LABEL_192:
          *a4 = (_DWORD)v32 - (_DWORD)v6;
          v111 = 2127;
          goto LABEL_187;
        }
        v19 = (unsigned __int8 *)(v121 + 1);
        v85 = v121 - v15;
        if ((unint64_t)(v121 - v15) > 0x7FFFFFFFFFFFFFF7)
LABEL_197:
          abort();
        if (v85 >= 0x17)
        {
          v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v85 | 7) != 0x17)
            v87 = v85 | 7;
          v88 = v87 + 1;
          v86 = operator new(v87 + 1);
          *(_QWORD *)&__p[8] = v121 - v15;
          *(_QWORD *)&__p[16] = v88 | 0x8000000000000000;
          *(_QWORD *)__p = v86;
        }
        else
        {
          __p[23] = (_BYTE)v121 - (_BYTE)v15;
          v86 = __p;
          if (v121 == v15)
            goto LABEL_150;
        }
        memmove(v86, v15 + 1, v85);
LABEL_150:
        v86[v85] = 0;
        v89 = sub_22EFF9E30(*((_QWORD *)a1 + 6), ((_DWORD)v15 - (_DWORD)v6), v124, v123, v126, (unsigned int *)&v135 + 1, (int *)&v135);
        v90 = sub_22EFF9E30(*((_QWORD *)a1 + 6), ((_DWORD)v19 - (_DWORD)v6), v124, v123, v126, (unsigned int *)&v135 + 1, (int *)&v135);
        v91 = *(_DWORD *)(a2 + 8);
        if (v91 < *(_DWORD *)(a2 + 12))
        {
          v92 = *(char **)a2;
          v93 = (_DWORD *)(*(_QWORD *)a2 + 48 * v91);
          *v93 = 1;
          v94 = v93 + 2;
          v77 = __p[23];
          if ((__p[23] & 0x80000000) != 0)
          {
            sub_22E3BB2B4(v94, *(void **)__p, *(unint64_t *)&__p[8]);
          }
          else
          {
            *(_OWORD *)v94 = *(_OWORD *)__p;
            *((_QWORD *)v94 + 2) = *(_QWORD *)&__p[16];
          }
          v78 = v89;
          v79 = v90;
          v80 = &v92[48 * v91];
          *((_DWORD *)v80 + 8) = v36;
LABEL_155:
          *(_QWORD *)(v80 + 36) = v78 | (v79 << 32);
          *((_DWORD *)v80 + 11) = 0;
          v95 = *(_DWORD *)(a2 + 8) + 1;
          goto LABEL_156;
        }
        v140 = 0;
        v96 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v100 = *(_DWORD *)(a2 + 8);
        v101 = (_DWORD *)(v96 + 48 * v100);
        *v101 = 1;
        v102 = v101 + 2;
        v77 = __p[23];
        if ((__p[23] & 0x80000000) != 0)
        {
          sub_22E3BB2B4(v102, *(void **)__p, *(unint64_t *)&__p[8]);
        }
        else
        {
          *(_OWORD *)v102 = *(_OWORD *)__p;
          *((_QWORD *)v102 + 2) = *(_QWORD *)&__p[16];
        }
        v103 = v89;
        v104 = v90;
        v105 = v96 + 48 * v100;
        *(_DWORD *)(v105 + 32) = v36;
        goto LABEL_166;
      }
      v59 = v31 - 1;
      if (&v15[v31 - 1] == v14)
      {
        v60 = 0;
LABEL_104:
        v19 = (unsigned __int8 *)v14;
      }
      else
      {
        v60 = 0;
        while (1)
        {
          v61 = v15[v59];
          if ((word_22F4ADB24[v61] & 8) == 0)
            break;
          ++v59;
          v60 = (char)v61 + 10 * v60 - 48;
          if (&v15[v59] == v14)
            goto LABEL_104;
        }
        v19 = (unsigned __int8 *)&v15[v59];
      }
      v62 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v62)
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = *a1;
        do
        {
          if (v66 == 2)
          {
            v22 = *(unsigned __int8 **)(*((_QWORD *)a1 + 10) + v63);
          }
          else if (v66 == 1)
          {
            v22 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + v64)
                                    + 4 * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + v64) + 4)
                                    + 20);
          }
          LODWORD(v22) = *v22;
          if ((_DWORD)v22 == 43)
            ++v65;
          v64 += 8;
          v63 += 16;
        }
        while (8 * v62 != v64);
      }
      else
      {
        v65 = 0;
      }
      if (v60 >= v65 + (int)v62 + *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 20))
      {
        *a4 = (_DWORD)v19 + v128;
        v111 = 2126;
        goto LABEL_187;
      }
      v67 = v59 - 1;
      if ((unint64_t)(v59 - 1) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_197;
      if (v67 >= 0x17)
      {
        v69 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v69 = v67 | 7;
        v70 = v69 + 1;
        v68 = operator new(v69 + 1);
        *(_QWORD *)&__p[8] = v67;
        *(_QWORD *)&__p[16] = v70 | 0x8000000000000000;
        *(_QWORD *)__p = v68;
      }
      else
      {
        __p[23] = v59 - 1;
        v68 = __p;
        if (v59 == 1)
          goto LABEL_126;
      }
      memmove(v68, v15 + 1, v67);
LABEL_126:
      v68[v67] = 0;
      v71 = sub_22EFF9E30(*((_QWORD *)a1 + 6), ((_DWORD)v15 - (_DWORD)v6), v124, v123, v126, (unsigned int *)&v135 + 1, (int *)&v135);
      v72 = sub_22EFF9E30(*((_QWORD *)a1 + 6), ((_DWORD)v19 - (_DWORD)v6), v124, v123, v126, (unsigned int *)&v135 + 1, (int *)&v135);
      v73 = *(_DWORD *)(a2 + 8);
      if (v73 < *(_DWORD *)(a2 + 12))
      {
        v74 = *(char **)a2;
        v75 = (_DWORD *)(*(_QWORD *)a2 + 48 * v73);
        *v75 = 1;
        v76 = v75 + 2;
        v77 = __p[23];
        if ((__p[23] & 0x80000000) != 0)
        {
          sub_22E3BB2B4(v76, *(void **)__p, *(unint64_t *)&__p[8]);
        }
        else
        {
          *(_OWORD *)v76 = *(_OWORD *)__p;
          *((_QWORD *)v76 + 2) = *(_QWORD *)&__p[16];
        }
        v78 = v71;
        v79 = v72;
        v80 = &v74[48 * v73];
        *((_DWORD *)v80 + 8) = v60;
        goto LABEL_155;
      }
      v140 = 0;
      v96 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
      v97 = *(_DWORD *)(a2 + 8);
      v98 = (_DWORD *)(v96 + 48 * v97);
      *v98 = 1;
      v99 = v98 + 2;
      v77 = __p[23];
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_22E3BB2B4(v99, *(void **)__p, *(unint64_t *)&__p[8]);
      }
      else
      {
        *(_OWORD *)v99 = *(_OWORD *)__p;
        *((_QWORD *)v99 + 2) = *(_QWORD *)&__p[16];
      }
      v103 = v71;
      v104 = v72;
      v105 = v96 + 48 * v97;
      *(_DWORD *)(v105 + 32) = v60;
LABEL_166:
      *(_QWORD *)(v105 + 36) = v103 | (v104 << 32);
      *(_DWORD *)(v105 + 44) = 0;
      sub_22F0D8684((uint64_t *)a2, v96);
      v106 = v140;
      if (*(_QWORD *)a2 != v127)
        free(*(void **)a2);
      *(_QWORD *)a2 = v96;
      v95 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 12) = v106;
LABEL_156:
      *(_DWORD *)(a2 + 8) = v95;
      v9 = v125;
      if (v77 < 0)
        goto LABEL_157;
LABEL_35:
      v15 = (char *)v19;
      if (v19 == (unsigned __int8 *)v14)
      {
        v112 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        v113 = v139.__r_.__value_.__l.__size_;
        goto LABEL_177;
      }
    }
  }
  v113 = 0;
  v112 = 0;
LABEL_177:
  if (v112 >= 0)
    v114 = v112 & 0x7F;
  else
    v114 = v113;
  if (v114)
  {
    *(_DWORD *)__p = 0;
    if (v112 < 0)
      sub_22E3BB2B4(&__p[8], v139.__r_.__value_.__l.__data_, v113);
    else
      *(std::string *)&__p[8] = v139;
    v138 = 0;
    v137 = 0;
    v115 = sub_22F0D861C(a2, (unint64_t)__p);
    v116 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8);
    *(_DWORD *)v116 = *(_DWORD *)v115;
    v117 = *(_OWORD *)(v115 + 8);
    *(_QWORD *)(v116 + 24) = *(_QWORD *)(v115 + 24);
    *(_OWORD *)(v116 + 8) = v117;
    *(_QWORD *)(v115 + 16) = 0;
    *(_QWORD *)(v115 + 24) = 0;
    *(_QWORD *)(v115 + 8) = 0;
    v118 = *(_QWORD *)(v115 + 37);
    *(_QWORD *)(v116 + 32) = *(_QWORD *)(v115 + 32);
    *(_QWORD *)(v116 + 37) = v118;
    ++*(_DWORD *)(a2 + 8);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
  }
  v111 = 0;
LABEL_187:
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  return v111;
}

unsigned __int16 *sub_22F0D7DA4(unsigned __int16 *result, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;

  v12 = a12;
  v13 = a10;
  v14 = a9;
  *(_BYTE *)result = 16;
  if (byte_255E04EB3)
  {
    v31 = result;
    v26 = a5;
    v28 = a3;
    v23 = a7;
    v24 = a6;
    v21 = a2;
    v20 = a4;
    v22 = a8;
    v19 = sub_22F0D3748(16);
    v14 = a9;
    a4 = v20;
    v13 = a10;
    a8 = v22;
    a7 = v23;
    a6 = v24;
    a2 = v21;
    a5 = v26;
    a3 = v28;
    ++*((_DWORD *)v19 + 2);
    v12 = a12;
    result = v31;
  }
  *((_DWORD *)result + 2) = a8;
  *((_DWORD *)result + 3) = v14;
  *result = ((v12 != 0) << 11) | ((a4 & 7) << 8) | *result & 0xC0FF | ((a5 != 0) << 13) | ((a6 != 0) << 12);
  v15 = result + 8;
  v16 = (a6 != 0) + (a5 != 0);
  *(_QWORD *)&result[4 * v16 + 8] = a7;
  *(_QWORD *)&result[4 * v16 + 12] = v13;
  if (v12)
    *(_QWORD *)&v15[4 * v16 + 8] = v12;
  if (a6)
  {
    v30 = v12;
    v32 = result;
    v27 = a5;
    v29 = a3;
    v25 = result + 8;
    sub_22F3F2190((uint64_t)result, a2, a6);
    v15 = v25;
    a3 = v29;
    v12 = v30;
    a5 = v27;
    result = v32;
  }
  if (a5)
    *(_QWORD *)v15 = a5;
  *((_DWORD *)result + 1) = a3;
  if (v12)
  {
    v17 = *result;
    v18 = 2;
    if ((v17 & 0x800) != 0)
      v18 = 3;
    *(_DWORD *)&v15[4 * v18 + 4 * ((v17 >> 12) & 1) + 4 * ((v17 >> 13) & 1)] = a11;
  }
  return result;
}

unsigned __int16 *sub_22F0D7F08(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;

  v18 = a5 != 0;
  if (a4)
    ++v18;
  v19 = 2;
  if (a11)
    v19 = 3;
  v20 = v18 + v19;
  v21 = 20;
  if (!a11)
    v21 = 16;
  v22 = (unsigned __int16 *)sub_22E3CD3D4(a1 + 2032, v21 + 8 * v20, 3);
  return sub_22F0D7DA4(v22, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_22F0D7FDC(unsigned __int16 *a1)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *a1;
  if ((v1 & 0x1000) != 0 && (v3 = *(_QWORD *)&a1[4 * ((v1 >> 13) & 1) + 8]) != 0)
    return *(_QWORD *)(v3 + 8);
  else
    return 0;
}

uint64_t sub_22F0D8004(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char *v8;
  uint64_t v10;

  if (a3)
  {
    v10 = result;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v6 = v5;
    v7 = HIDWORD(v5);
    v3 = sub_22E3CD3D4(a2 + 2032, 24, 3);
    *(_BYTE *)v3 = 12;
    if (byte_255E04EB3)
    {
      v8 = sub_22F0D3748(12);
      ++*((_DWORD *)v8 + 2);
    }
    result = v10;
    *(_QWORD *)(v3 + 8) = a3;
    *(_DWORD *)(v3 + 16) = v6;
    *(_DWORD *)(v3 + 20) = v7;
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_22F0D80A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int v16;
  int v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = a9;
  v16 = a11;
  *(_BYTE *)a1 = 14;
  if (byte_255E04EB3)
  {
    v21 = a3;
    v22 = a5;
    v20 = a2;
    v19 = sub_22F0D3748(14);
    v17 = a9;
    a3 = v21;
    v16 = a11;
    a2 = v20;
    a5 = v22;
    ++*((_DWORD *)v19 + 2);
  }
  *(_DWORD *)(a1 + 48) = v17;
  *(_DWORD *)(a1 + 52) = v16;
  *(_QWORD *)(a1 + 8) = a3;
  sub_22F0D8004(a1, a2, a5);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 4) = a8;
  return a1;
}

uint64_t sub_22F0D8154(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t sub_22F0D816C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  unsigned int v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)result = 100;
  if (byte_255E04EB3)
  {
    v15 = a4;
    v16 = result;
    v12 = a2;
    v14 = a3;
    v10 = a6;
    v11 = a5;
    v13 = a7;
    v8 = sub_22F0D3748(100);
    a6 = v10;
    a5 = v11;
    a2 = v12;
    a7 = v13;
    a3 = v14;
    a4 = v15;
    v9 = v8;
    result = v16;
    ++*((_DWORD *)v9 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 20) = a7;
  *(_WORD *)result = *(_WORD *)result & 0xF8FF | ((a3 != 0) << 8) | ((a4 != 0) << 9);
  v7 = (a4 != 0) + (a3 != 0);
  *(_QWORD *)(result + 24 + 8 * v7) = a5;
  *(_QWORD *)(result + 24 + 8 * (v7 + 1)) = 0;
  if (a3)
    *(_QWORD *)(result + 24) = a3;
  if (a4)
  {
    v17 = result;
    sub_22F3F2440(result, a2, a4);
    result = v17;
  }
  *(_DWORD *)(result + 4) = 0;
  return result;
}

uint64_t sub_22F0D8248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = 2;
  if (a2)
    v12 = 3;
  if (a3)
    ++v12;
  v13 = sub_22E3CD3D4(a1 + 2032, 8 * v12 + 24, 3);
  return sub_22F0D816C(v13, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_22F0D82C8(unsigned __int16 *a1)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *a1;
  if ((v1 & 0x200) != 0 && (v3 = *(_QWORD *)&a1[4 * ((v1 >> 8) & 1) + 12]) != 0)
    return *(_QWORD *)(v3 + 8);
  else
    return 0;
}

uint64_t sub_22F0D82F0(uint64_t a1)
{
  uint64_t v2;

  if ((*(_WORD *)a1 & 0x100) != 0 && (v2 = *(_QWORD *)(a1 + 16)) != 0)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t sub_22F0D8310(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  char *v9;
  uint64_t v10;

  if (a4)
    v7 = 24;
  else
    v7 = 16;
  result = sub_22E3CD3D4(a1 + 2032, v7, 3);
  *(_BYTE *)result = 93;
  if (byte_255E04EB3)
  {
    v10 = result;
    v9 = sub_22F0D3748(93);
    result = v10;
    ++*((_DWORD *)v9 + 2);
  }
  *(_QWORD *)(result + 8) = a3;
  *(_WORD *)result = *(_WORD *)result & 0xFEFF | ((a4 != 0) << 8);
  if (a4)
    *(_QWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

_BYTE *sub_22F0D83C4(uint64_t a1, int a2)
{
  uint64_t v3;
  _BYTE *result;
  __int16 v5;
  char *v6;
  _BYTE *v7;

  if (a2)
    v3 = 24;
  else
    v3 = 16;
  result = (_BYTE *)sub_22E3CD3D4(a1 + 2032, v3, 3);
  *result = 93;
  if (byte_255E04EB3)
  {
    v7 = result;
    v6 = sub_22F0D3748(93);
    result = v7;
    ++*((_DWORD *)v6 + 2);
  }
  if (a2)
    v5 = 256;
  else
    v5 = 0;
  *(_WORD *)result = *(_WORD *)result & 0xFEFF | v5;
  return result;
}

uint64_t sub_22F0D8458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v2)
    return 0;
  v4 = (_QWORD *)(a1 + (8 * v2 + 40));
  v5 = 16 * v2;
  while (1)
  {
    v6 = *v4 & 6;
    if (v6 == 4 || v6 == 2)
    {
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 & 0xFFFFFFFFFFFFFFF8);
      if (v8 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
        break;
    }
    v4 += 2;
    v5 -= 16;
    if (!v5)
      return 0;
  }
  return 1;
}

unsigned __int8 *sub_22F0D84EC(unsigned __int8 *a1, int a2, void *__src, uint64_t a4, uint64_t a5)
{
  char *v10;

  *a1 = 101;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(101);
    ++*((_DWORD *)v10 + 2);
  }
  *((_QWORD *)a1 + 1) = a5;
  *(_DWORD *)a1 = *a1 | ((_DWORD)a4 << 8);
  *((_DWORD *)a1 + 1) = a2;
  if (a4)
    memmove(a1 + 16, __src, 8 * a4);
  return a1;
}

uint64_t sub_22F0D8578(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  *(_BYTE *)result = 98;
  if (byte_255E04EB3)
  {
    v12 = a5;
    v13 = result;
    v8 = a6;
    v9 = a3;
    v10 = a4;
    v11 = a2;
    v6 = sub_22F0D3748(98);
    a4 = v10;
    a2 = v11;
    a6 = v8;
    a3 = v9;
    v7 = v6;
    a5 = v12;
    result = v13;
    ++*((_DWORD *)v7 + 2);
  }
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 4) = a4;
  *(_DWORD *)(result + 8) = a6;
  *(_WORD *)result = *(_WORD *)result & 0xFEFF | ((a3 != 0) << 8);
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 24 + 8 * ((a3 != 0) + 1)) = 0;
  if (a3)
  {
    *(_QWORD *)(result + 24 + 8 * (a3 != 0)) = a3;
    *(_DWORD *)(result + 48) = a5;
  }
  return result;
}

unint64_t sub_22F0D861C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F3F2CD0(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F3F2CD0(a1);
    }
  }
  return v2;
}

void sub_22F0D8684(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 48 * v2;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v3;
      v5 = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_OWORD *)(a2 + 8) = v5;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v6 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(a2 + 37) = *(_QWORD *)(v3 + 37);
      *(_QWORD *)(a2 + 32) = v6;
      v3 += 48;
      a2 += 48;
    }
    while (v3 != v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 48 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 17) < 0)
          operator delete(*(void **)(v8 + v9 - 40));
        v9 -= 48;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F0D8720(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFFCLL) + 32) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v2 + 16);
  if (v2)
    v4 = (*(_DWORD *)(v2 + 16) & 0xFEu) - 6 >= 0xFFFFFFFC;
  else
    v4 = 0;
  if (v4)
  {
    while (v3 != 5 || !*(_QWORD *)(v2 + 40))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v3) = *(_DWORD *)(v2 + 16);
      if (v2)
        v5 = (*(_DWORD *)(v2 + 16) & 0xFEu) - 6 >= 0xFFFFFFFC;
      else
        v5 = 0;
      if (!v5)
        goto LABEL_12;
    }
    v10 = *(_QWORD *)(result + 8) & 3 | v2;
    goto LABEL_26;
  }
LABEL_12:
  v6 = *(_QWORD *)(result + 8) & 3;
  *(_QWORD *)(result + 8) = v6;
  if (v6 != 2)
  {
LABEL_24:
    v10 = 0;
LABEL_26:
    v1[1] = v10;
    return result;
  }
  v7 = **(_QWORD **)result;
  if (v7)
    v8 = (*(_DWORD *)(v7 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
  else
    v8 = 0;
  if (!v8
    || (*(_DWORD *)(v7 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v7 + 96) & 0x600u) - 1536 > 0xFFFFFBFF
    || *(_QWORD *)(v7 + 88) <= 7uLL)
  {
    while (1)
    {
      v9 = (uint64_t *)(*v1 + 8);
      *v1 = v9;
      if (v9 == (uint64_t *)v1[2])
        break;
      result = sub_22F0D8840((uint64_t)v1, *v9);
      if ((result & 1) != 0)
        return result;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_22F0D8840(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;

  v2 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (!a2 || (v2 - 67) < 0xFFFFFFF9)
  {
    if (!a2 || (v2 - 42) < 0xFFFFFFFD)
      return a2 && v2 == 67 && *(_QWORD *)(a2 + 56);
    v3 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                               + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_DWORD *)(v3 + 16);
    if (v3)
      v8 = (*(_DWORD *)(v3 + 16) & 0xFEu) - 6 >= 0xFFFFFFFC;
    else
      v8 = 0;
    if (!v8)
      return 0;
    while (v7 != 5 || !*(_QWORD *)(v3 + 40))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v7) = *(_DWORD *)(v3 + 16);
      if (v3)
        v9 = (*(_DWORD *)(v3 + 16) & 0xFEu) - 6 >= 0xFFFFFFFC;
      else
        v9 = 0;
      if (!v9)
        return 0;
    }
LABEL_34:
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 3 | v3;
    return 1;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_DWORD *)(v3 + 16);
  if (v3)
    v5 = (*(_DWORD *)(v3 + 16) & 0xFEu) - 6 >= 0xFFFFFFFC;
  else
    v5 = 0;
  if (v5)
  {
    while (v4 != 5 || !*(_QWORD *)(v3 + 40))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v4) = *(_DWORD *)(v3 + 16);
      if (v3)
        v6 = (*(_DWORD *)(v3 + 16) & 0xFEu) - 6 >= 0xFFFFFFFC;
      else
        v6 = 0;
      if (!v6)
        return sub_22EFBC5B4(a2) != 0;
    }
    goto LABEL_34;
  }
  return sub_22EFBC5B4(a2) != 0;
}

uint64_t **sub_22F0D8994(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = a2;
  a1[1] = (uint64_t *)2;
  a1[2] = a3;
  if (a2 == a3)
  {
LABEL_2:
    a1[1] = 0;
  }
  else
  {
    while ((sub_22F0D8840((uint64_t)a1, *a2) & 1) == 0)
    {
      a2 = *a1 + 1;
      *a1 = a2;
      if (a2 == a1[2])
        goto LABEL_2;
    }
  }
  return a1;
}

uint64_t sub_22F0D89F8(unsigned __int8 *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1;
  if ((v1 - 30) < 0x1E || v1 == 78)
    return sub_22F0D8A48((uint64_t)a1);
  for (result = *(_QWORD *)(*((_QWORD *)a1 + 3)
                           + 8 * **((unsigned int **)a1 + 3)
                           + 8 * *(unsigned int *)(*((_QWORD *)a1 + 3) + 4)
                           + 16);
        *(_BYTE *)result == 7;
  return result;
}

uint64_t sub_22F0D8A48(uint64_t a1)
{
  _DWORD *i;
  unsigned int v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  v6 = 0;
  for (i = *(_DWORD **)(*(_QWORD *)(a1 + 24)
                       + 8 * **(unsigned int **)(a1 + 24)
                       + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4)
                       + 16); *(_BYTE *)i == 7; i = *(_DWORD **)&i[2 * i[2] + 8])
    ;
  v3 = *(_DWORD *)(a1 + 32);
  v5 = &v6;
  v7[0] = sub_22F0D9038;
  v7[1] = &v5;
  sub_22F0D8EB0(i, 1, v3, sub_22F0D8FF4, (uint64_t)v7, (void (*)(uint64_t, _DWORD *))nullsub_817, (uint64_t)&v8);
  return v6;
}

unint64_t sub_22F0D8AD8(_DWORD *a1, int a2)
{
  unint64_t v3;
  int v4;
  unint64_t *v5;
  unsigned int v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD **v12;
  unsigned int v13;
  _DWORD **v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  int v18;
  _DWORD **v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _BYTE *v28;
  uint64_t v29;
  _BYTE v30[32];
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v3 = (unint64_t)a1;
    do
    {
      v4 = *(unsigned __int8 *)v3;
      if (v4 == 8)
      {
        if ((*(_DWORD *)v3 & 0xFFFFFF00) != 0x100)
          break;
        v5 = (unint64_t *)(v3 + 16);
      }
      else
      {
        if (v4 != 101)
          break;
        v5 = (unint64_t *)(v3 + 8);
      }
      v3 = *v5;
    }
    while (*v5);
    if (!a2)
      return v3;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return v3;
  }
  if (*(_BYTE *)v3 != 8)
    return v3;
  v6 = 0;
  v7 = 0;
  v31 = v33;
  v33[0] = v3;
  v32 = 0x400000001;
  v28 = v30;
  v29 = 0x400000000;
  LODWORD(v3) = 1;
  v8 = v33;
  while (2)
  {
    v9 = v8 - 1;
    do
    {
      if (!(_DWORD)v3)
        goto LABEL_70;
      v10 = (_DWORD *)v9[v3];
      LODWORD(v3) = v3 - 1;
      LODWORD(v32) = v3;
    }
    while (!v10);
    v13 = *v10;
    v12 = (_DWORD **)(v10 + 4);
    v11 = v13;
    if (v13 < 0x100)
      goto LABEL_48;
    v14 = (_DWORD **)((char *)v12 + ((v11 >> 5) & 0x7FFFFF8));
    do
    {
      v15 = *v12;
      if (!*v12)
        goto LABEL_40;
      v16 = *(unsigned __int8 *)v15;
      if (v16 == 20)
      {
        v15 = (_DWORD *)*((_QWORD *)v15 + 1);
        v16 = *(unsigned __int8 *)v15;
      }
      v17 = v16 == 5 || v16 == 14;
      if (v17
        || (v16 - 21) <= 0x40
        && sub_22F4219DC(v15[2])
        && (v16 - 30) >= 0x1E
        && v16 != 78)
      {
        if (!v7)
          goto LABEL_41;
        v15 = a1;
        break;
      }
      while (1)
      {
        v18 = *(unsigned __int8 *)v15;
        if (v18 != 8)
        {
          if (v18 != 101)
            goto LABEL_40;
          v19 = (_DWORD **)(v15 + 2);
          goto LABEL_35;
        }
        if ((*v15 & 0xFFFFFF00) != 0x100)
          break;
        v19 = (_DWORD **)(v15 + 4);
LABEL_35:
        v15 = *v19;
        if (!*v19)
          goto LABEL_40;
      }
      if (v6 >= HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v29;
      }
      *(_QWORD *)&v28[8 * v6] = v15;
      v6 = v29 + 1;
      LODWORD(v29) = v29 + 1;
LABEL_40:
      v15 = v7;
LABEL_41:
      ++v12;
      v7 = v15;
    }
    while (v12 != v14);
    LODWORD(v3) = v32;
    v7 = v15;
LABEL_48:
    if ((_DWORD)v3)
      goto LABEL_49;
    if (!v7)
    {
      v20 = v31;
      if (v31 == v33)
      {
        LODWORD(v3) = v29;
        v21 = HIDWORD(v32);
      }
      else
      {
        LODWORD(v3) = v29;
        v21 = HIDWORD(v32);
        if (v28 != v30)
        {
          v6 = 0;
          v7 = 0;
          v31 = v28;
          v28 = v20;
          v32 = v29;
          LODWORD(v29) = 0;
          HIDWORD(v29) = v21;
          goto LABEL_49;
        }
      }
      if (v21 >= v3)
      {
        v22 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = v32;
        if (HIDWORD(v29) < v32)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = v32;
        }
      }
      v6 = v29;
      if (v22 >= v29)
        v3 = v29;
      else
        v3 = v22;
      if ((_DWORD)v3)
      {
        v23 = 0;
        do
        {
          v24 = *(_QWORD *)((char *)v31 + v23);
          *(_QWORD *)((char *)v31 + v23) = *(_QWORD *)&v28[v23];
          *(_QWORD *)&v28[v23] = v24;
          v23 += 8;
        }
        while (8 * v3 != v23);
      }
      v25 = v22 - v29;
      if (v22 <= v29)
      {
        v26 = v29 - v22;
        if (v29 <= v22)
        {
          v7 = 0;
          LODWORD(v3) = v22;
        }
        else
        {
          memcpy((char *)v31 + 8 * v22, &v28[8 * v3], 8 * v29 - 8 * v3);
          v7 = 0;
          LODWORD(v29) = v3;
          v6 = v3;
          LODWORD(v32) = v26 + v32;
          LODWORD(v3) = v32;
        }
      }
      else
      {
        memcpy(&v28[8 * v29], (char *)v31 + 8 * v3, 8 * v22 - 8 * v3);
        v7 = 0;
        v6 = v25 + v29;
        LODWORD(v29) = v25 + v29;
        LODWORD(v32) = v3;
      }
LABEL_49:
      v8 = v31;
      continue;
    }
    break;
  }
LABEL_70:
  if (v7)
    v3 = (unint64_t)v7;
  else
    v3 = (unint64_t)a1;
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v3;
}

uint64_t sub_22F0D8EB0(_DWORD *a1, int a2, unsigned int a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned __int8 *), uint64_t a5, void (*a6)(uint64_t, _DWORD *), uint64_t a7)
{
  int v13;
  _DWORD **v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;

  if (a1)
  {
    do
    {
      v13 = *(unsigned __int8 *)a1;
      if (v13 == 8)
      {
        if ((*a1 & 0xFFFFFF00) != 0x100)
          break;
        v14 = (_DWORD **)(a1 + 4);
      }
      else
      {
        if (v13 != 101)
          break;
        v14 = (_DWORD **)(a1 + 2);
      }
      a1 = *v14;
    }
    while (*v14);
  }
  if (!a3)
  {
    v21 = 1;
    return v21 & 1;
  }
  v15 = 0;
  v16 = 0;
  while (1)
  {
    do
    {
      v17 = (unsigned __int8 *)a1;
      v18 = *(unsigned __int8 *)a1;
      if ((v18 & 0xFE) != 0x3C)
        goto LABEL_14;
      a6(a7, a1);
      a1 = *(_DWORD **)(*((_QWORD *)v17 + 3) + 8 * **((unsigned int **)v17 + 3) + 24);
    }
    while (a1);
    if (*((_DWORD *)v17 + 9))
      goto LABEL_20;
    v18 = *v17;
LABEL_14:
    if (v18 == 20)
      v17 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    if ((a4(a5, v16, v17) & 1) != 0)
      break;
    v19 = 72;
    if (*v17 == 14)
      v19 = 40;
    a1 = (_DWORD *)sub_22F0D8AD8(*(_DWORD **)&v17[v19], a2);
    v16 = (v16 + 1);
    v15 = v16 >= a3;
    if ((_DWORD)v16 == a3)
    {
LABEL_20:
      v20 = 1;
      goto LABEL_23;
    }
  }
  v20 = 0;
LABEL_23:
  v21 = v15 | v20;
  return v21 & 1;
}

uint64_t sub_22F0D8FF4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 72;
  if (*a3 == 14)
    v3 = 40;
  v4 = *(_QWORD *)&a3[v3];
  if (*(_BYTE *)v4 == 20)
    v4 = *(_QWORD *)(v4 + 8);
  (*(void (**)(_QWORD, uint64_t, _BYTE *, uint64_t))a1)(*(_QWORD *)(a1 + 8), a2, a3, v4);
  return 0;
}

_QWORD **sub_22F0D9038(_QWORD **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  **result = a4;
  return result;
}

void sub_22F0D9044(_DWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, void *__src, size_t __len, uint64_t a8)
{
  void *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  void *__p[2];
  unint64_t v20;
  uint64_t v21;

  v15 = a2;
  v16 = a5;
  v17 = a3;
  v18 = *a4;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __p[1] = (void *)__len;
    v20 = v14 | 0x8000000000000000;
    __p[0] = v12;
  }
  else
  {
    v12 = __p;
    HIBYTE(v20) = __len;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v12, __src, __len);
LABEL_9:
  *((_BYTE *)v12 + __len) = 0;
  v21 = a8;
  if (!v17 || ((*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v17 + 16))(v17, a1, v15) & 1) == 0)
    sub_22F0D9304(&v15, a1);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_22F0D9148(unsigned __int8 *a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, void *__src, size_t __len, uint64_t a8)
{
  void *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  void *__p[2];
  unint64_t v20;
  uint64_t v21;

  v15 = a2;
  v16 = a5;
  v17 = a3;
  v18 = *a4;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __p[1] = (void *)__len;
    v20 = v14 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_8;
  }
  v12 = __p;
  HIBYTE(v20) = __len;
  if (__len)
LABEL_8:
    memmove(v12, __src, __len);
  *((_BYTE *)v12 + __len) = 0;
  v21 = a8;
  sub_22F0D922C((uint64_t)&v15, a1);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

uint64_t sub_22F0D922C(uint64_t a1, unsigned __int8 *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  const char *v6;
  const char *v8;

  v4 = *(llvm::raw_ostream **)a1;
  if (*a2 == 8)
  {
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (*((_BYTE **)v4 + 3) == v5)
    {
      llvm::raw_ostream::write(v4, " ");
    }
    else
    {
      *v5 = 32;
      ++*((_QWORD *)v4 + 4);
    }
    sub_22F0E8984(a1, a2);
    if (*(char *)(a1 + 63) >= 0)
      v6 = (const char *)(a1 + 40);
    else
      v6 = *(const char **)(a1 + 40);
    return llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v6);
  }
  else
  {
    if (*(char *)(a1 + 63) >= 0)
      v8 = (const char *)(a1 + 40);
    else
      v8 = *(const char **)(a1 + 40);
    llvm::raw_ostream::write(v4, v8);
    return sub_22F0E8AD0((const char *)a1, a2, *(unsigned __int8 *)(a1 + 24));
  }
}

uint64_t sub_22F0D9304(uint64_t *a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22F0E8324(a1, (uint64_t)a2);
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
  return sub_22F0E8694(a1, (uint64_t)a2);
}

uint64_t sub_22F0DA2CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  if (*MEMORY[0x24BDAC8D0] != *(_QWORD *)(v2 - 96))
    JUMPOUT(0x22F0E8060);
  return sub_22F0E8DAC(v0, *(_DWORD **)(v1 + 16));
}

llvm::raw_ostream *sub_22F0DA30C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  if (*MEMORY[0x24BDAC8D0] != *(_QWORD *)(v2 - 96))
    JUMPOUT(0x22F0E8060);
  return sub_22F0E9D28(v0, v1);
}

void sub_22F0DA3D4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v4 = *(_DWORD **)(v1 + 16);
  if (v4)
  {
    if (!*v2
      || ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*v2 + 16))(*v2, *(_QWORD *)(v1 + 16), *v0) & 1) == 0)
    {
      sub_22F0D9304(v0, v4);
    }
  }
  else
  {
    v5 = (llvm::raw_ostream *)*v0;
    v6 = *(_QWORD *)(*v0 + 32);
    if ((unint64_t)(*(_QWORD *)(*v0 + 24) - v6) > 0xA)
    {
      *(_DWORD *)(v6 + 7) = 1047687288;
      *(_QWORD *)v6 = *(_QWORD *)"<null expr>";
      *((_QWORD *)v5 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<null expr>");
    }
  }
  v7 = (llvm::raw_ostream *)*v0;
  v8 = *(_BYTE **)(*v0 + 32);
  if (*(_BYTE **)(*v0 + 24) == v8)
  {
    llvm::raw_ostream::write(v7, "[");
  }
  else
  {
    *v8 = 91;
    ++*((_QWORD *)v7 + 4);
  }
  v9 = *(_DWORD **)(v1 + 24);
  if (v9)
  {
    if (!*v2 || ((*(uint64_t (**)(_QWORD, _DWORD *, uint64_t))(*(_QWORD *)*v2 + 16))(*v2, v9, *v0) & 1) == 0)
      sub_22F0D9304(v0, v9);
  }
  else
  {
    v10 = (llvm::raw_ostream *)*v0;
    v11 = *(_QWORD *)(*v0 + 32);
    if ((unint64_t)(*(_QWORD *)(*v0 + 24) - v11) > 0xA)
    {
      *(_DWORD *)(v11 + 7) = 1047687288;
      *(_QWORD *)v11 = *(_QWORD *)"<null expr>";
      *((_QWORD *)v10 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v10, "<null expr>");
    }
  }
  v12 = *v0;
  v13 = *(_BYTE **)(*v0 + 32);
  if (*(_BYTE **)(*v0 + 24) == v13)
  {
    if (*MEMORY[0x24BDAC8D0] == *(_QWORD *)(v3 - 96))
      JUMPOUT(0x22F0E6B00);
    JUMPOUT(0x22F0E8060);
  }
  *v13 = 93;
  ++*(_QWORD *)(v12 + 32);
  JUMPOUT(0x22F0DF6ECLL);
}

uint64_t sub_22F0DA574()
{
  llvm::raw_ostream **v0;
  uint64_t v1;
  void *v2;

  v2 = (void *)*((_QWORD *)*v0 + 4);
  if (*((_QWORD *)*v0 + 3) - (_QWORD)v2 > 0xEuLL)
  {
    qmemcpy(v2, "@available(...)", 15);
    JUMPOUT(0x22F0E373CLL);
  }
  if (*MEMORY[0x24BDAC8D0] != *(_QWORD *)(v1 - 96))
    JUMPOUT(0x22F0E8060);
  return llvm::raw_ostream::write(*v0, "@available(...)", 0xFuLL);
}

void sub_22F0DA5B0()
{
  JUMPOUT(0x22F0DA2D0);
}

uint64_t sub_22F0DA5B8()
{
  llvm::raw_ostream **v0;
  _DWORD *v1;
  uint64_t v2;
  llvm::raw_ostream *v3;
  const char *v4;
  size_t v5;
  void *v6;

  v3 = *v0;
  if ((*v1 & 0x40000) != 0)
    v4 = "true";
  else
    v4 = "false";
  if ((*v1 & 0x40000) != 0)
    v5 = 4;
  else
    v5 = 5;
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (v5 <= *((_QWORD *)v3 + 3) - (_QWORD)v6)
  {
    memcpy(v6, v4, v5);
    JUMPOUT(0x22F0E7570);
  }
  if (*MEMORY[0x24BDAC8D0] != *(_QWORD *)(v2 - 96))
    JUMPOUT(0x22F0E8060);
  return llvm::raw_ostream::write(v3, v4);
}

void sub_22F0DA5E4()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)v0 + 24) - *(_QWORD *)(*(_QWORD *)v0 + 32) <= 0xAuLL)
  {
    if (*MEMORY[0x24BDAC8D0] == *(_QWORD *)(v1 - 96))
      JUMPOUT(0x22F0DA2C4);
    JUMPOUT(0x22F0E8060);
  }
  JUMPOUT(0x22F0E31C4);
}

uint64_t sub_22F0E8324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = a1[2];
    if (!v5
      || ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 16))(v5, *(_QWORD *)(a2 + 16), *a1) & 1) == 0)
    {
      sub_22F0D9304(a1, v4);
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)*a1;
    v7 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v7) > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 1047687288;
      *(_QWORD *)v7 = *(_QWORD *)"<null expr>";
      *((_QWORD *)v6 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v6, "<null expr>");
    }
  }
  v8 = (llvm::raw_ostream *)*a1;
  v9 = *(_BYTE **)(*a1 + 32);
  if (*(_BYTE **)(*a1 + 24) == v9)
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*a1, " ");
    v10 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
  else
  {
    *v9 = 32;
    v10 = (_BYTE *)(*((_QWORD *)v8 + 4) + 1);
    *((_QWORD *)v8 + 4) = v10;
  }
  v12 = sub_22EFFBA38((*(_DWORD *)a2 >> 18) & 0x3F);
  v13 = v11;
  if (v11 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
  {
    if (v11)
    {
      memcpy(v10, v12, v11);
      v10 = (_BYTE *)(*((_QWORD *)v8 + 4) + v13);
      *((_QWORD *)v8 + 4) = v10;
    }
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, v12);
    v10 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
  if (*((_BYTE **)v8 + 3) == v10)
  {
    llvm::raw_ostream::write(v8, " ");
  }
  else
  {
    *v10 = 32;
    ++*((_QWORD *)v8 + 4);
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    v15 = a1[2];
    if (!v15)
      return sub_22F0D9304(a1, v14);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14, *a1);
    if ((result & 1) == 0)
      return sub_22F0D9304(a1, v14);
  }
  else
  {
    result = *a1;
    v17 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v17) > 0xA)
    {
      *(_DWORD *)(v17 + 7) = 1047687288;
      *(_QWORD *)v17 = *(_QWORD *)"<null expr>";
      *(_QWORD *)(result + 32) += 11;
    }
    else
    {
      return llvm::raw_ostream::write((llvm::raw_ostream *)result, "<null expr>");
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F0E855C(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *result;
  _BYTE *v11;

  v4 = *(_QWORD *)(a2 + *(unsigned __int8 *)(a2 + 3));
  if (v4)
  {
    v5 = a1[2];
    if (!v5
      || ((*(uint64_t (**)(llvm::raw_ostream *, uint64_t, llvm::raw_ostream *))(*(_QWORD *)v5 + 16))(v5, v4, *a1) & 1) == 0)
    {
      sub_22F0D9304(a1, v4);
    }
  }
  else
  {
    v6 = *a1;
    v7 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v7) > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 1047687288;
      *(_QWORD *)v7 = *(_QWORD *)"<null expr>";
      *((_QWORD *)v6 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v6, "<null expr>");
    }
  }
  v8 = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "(");
  }
  else
  {
    *v9 = 40;
    ++*((_QWORD *)v8 + 4);
  }
  sub_22F0E9928((uint64_t)a1, (unsigned int *)a2);
  result = *a1;
  v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v11)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, ")");
  *v11 = 41;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t sub_22F0E8694(uint64_t *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  size_t v5;
  char *v6;
  size_t v7;
  void *v8;
  int v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  llvm::raw_ostream *v16;
  size_t v17;
  char *v18;
  size_t v19;

  if ((*(_DWORD *)a2 & 0x780000) != 0)
  {
    v4 = (llvm::raw_ostream *)*a1;
    v6 = sub_22EFFA120((*(_DWORD *)a2 >> 18) & 0x1F);
    v7 = v5;
    v8 = (void *)*((_QWORD *)v4 + 4);
    if (v5 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
    {
      if (v5)
      {
        memcpy(v8, v6, v5);
        *((_QWORD *)v4 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v4, v6);
    }
    v9 = (*(_DWORD *)a2 >> 18) & 0x1F;
    if ((v9 - 10) < 3 || (v9 - 6) < 2 && **(unsigned __int8 **)(a2 + 16) == 233)
    {
      v10 = (llvm::raw_ostream *)*a1;
      v11 = *(_BYTE **)(*a1 + 32);
      if ((unint64_t)v11 >= *(_QWORD *)(*a1 + 24))
      {
        llvm::raw_ostream::write(v10);
      }
      else
      {
        *((_QWORD *)v10 + 4) = v11 + 1;
        *v11 = 32;
      }
    }
  }
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    v13 = a1[2];
    if (!v13
      || (result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 16))(v13, *(_QWORD *)(a2 + 16), *a1), (result & 1) == 0))
    {
      result = sub_22F0D9304(a1, v12);
    }
  }
  else
  {
    result = *a1;
    v15 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v15) > 0xA)
    {
      *(_DWORD *)(v15 + 7) = 1047687288;
      *(_QWORD *)v15 = *(_QWORD *)"<null expr>";
      *(_QWORD *)(result + 32) += 11;
    }
    else
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)result, "<null expr>");
    }
  }
  if ((*(_DWORD *)a2 & 0x780000) == 0)
  {
    v16 = (llvm::raw_ostream *)*a1;
    v18 = sub_22EFFA120((*(_DWORD *)a2 >> 18) & 0x1F);
    v19 = v17;
    result = *((_QWORD *)v16 + 4);
    if (v17 <= *((_QWORD *)v16 + 3) - result)
    {
      if (v17)
      {
        result = (uint64_t)memcpy((void *)result, v18, v17);
        *((_QWORD *)v16 + 4) += v19;
      }
    }
    else
    {
      return llvm::raw_ostream::write(v16, v18);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F0E886C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  v4 = *(llvm::raw_ostream **)a1;
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 673212515;
    *v5 = 1668571491;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "catch (");
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(llvm::raw_ostream **)a1;
  if (v6)
  {
    sub_22F3B8394(v6, *(_QWORD *)a1, (__int128 *)(a1 + 24), *(_DWORD *)(a1 + 8), 0);
  }
  else
  {
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 2)
    {
      *(_BYTE *)(v8 + 2) = 46;
      *(_WORD *)v8 = 11822;
      *((_QWORD *)v7 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "...");
    }
  }
  v9 = *(llvm::raw_ostream **)a1;
  v10 = *(_WORD **)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8233;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v9, ") ");
  }
  return sub_22F0E8984(a1, *(_DWORD **)(a2 + 24));
}

llvm::raw_ostream *sub_22F0E8984(uint64_t a1, _DWORD *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  const char *v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  llvm::raw_ostream *result;
  _BYTE *v16;

  v4 = *(llvm::raw_ostream **)a1;
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, "{");
  }
  else
  {
    *v5 = 123;
    ++*((_QWORD *)v4 + 4);
  }
  if (*(char *)(a1 + 63) >= 0)
    v6 = (const char *)(a1 + 40);
  else
    v6 = *(const char **)(a1 + 40);
  llvm::raw_ostream::write(v4, v6);
  v9 = *a2;
  v8 = (unsigned __int8 **)(a2 + 4);
  v7 = v9;
  if (v9 >= 0x100)
  {
    v10 = 8 * (v7 >> 8);
    do
    {
      v11 = *v8++;
      sub_22F0E8AD0((const char *)a1, v11, *(unsigned __int8 *)(a1 + 24));
      v10 -= 8;
    }
    while (v10);
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (v12 >= 1)
  {
    do
    {
      v13 = *(llvm::raw_ostream **)a1;
      v14 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v14 > 1uLL)
      {
        *v14 = 8224;
        *((_QWORD *)v13 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v13, "  ");
      }
      --v12;
    }
    while (v12);
  }
  result = *(llvm::raw_ostream **)a1;
  v16 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v16)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "}");
  *v16 = 125;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t sub_22F0E8AD0(const char *a1, unsigned __int8 *a2, int a3)
{
  int v5;
  llvm::raw_ostream *v7;
  _WORD *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE *v17;
  const char *v18;
  uint64_t v19;

  v5 = *((_DWORD *)a1 + 2) + a3;
  *((_DWORD *)a1 + 2) = v5;
  if (!a2)
  {
    if (v5 >= 1)
    {
      do
      {
        v9 = *(llvm::raw_ostream **)a1;
        v10 = *(_WORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v10 > 1uLL)
        {
          *v10 = 8224;
          *((_QWORD *)v9 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v9, "  ");
        }
        --v5;
      }
      while (v5);
    }
    v11 = *(llvm::raw_ostream **)a1;
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v12) <= 0x13)
    {
      v13 = "<<<NULL STATEMENT>>>";
LABEL_25:
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, v13);
LABEL_26:
      if (a1[63] >= 0)
        v18 = a1 + 40;
      else
        v18 = (const char *)*((_QWORD *)a1 + 5);
      result = llvm::raw_ostream::write(v11, v18);
      goto LABEL_30;
    }
    *(_DWORD *)(v12 + 16) = 1044266580;
    *(_OWORD *)v12 = *(_OWORD *)"<<<NULL STATEMENT>>>";
    v19 = *((_QWORD *)v11 + 4) + 20;
LABEL_33:
    *((_QWORD *)v11 + 4) = v19;
    goto LABEL_26;
  }
  if (*a2 - 102 <= 0x84)
  {
    if (v5 >= 1)
    {
      do
      {
        v7 = *(llvm::raw_ostream **)a1;
        v8 = *(_WORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v8 > 1uLL)
        {
          *v8 = 8224;
          *((_QWORD *)v7 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v7, "  ");
        }
        --v5;
      }
      while (v5);
    }
    v16 = *((_QWORD *)a1 + 2);
    if (!v16
      || ((*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v16 + 16))(v16, a2, *(_QWORD *)a1) & 1) == 0)
    {
      sub_22F0D9304(a1, a2);
    }
    v11 = *(llvm::raw_ostream **)a1;
    v17 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v17)
    {
      v13 = ";";
      goto LABEL_25;
    }
    *v17 = 59;
    v19 = *((_QWORD *)v11 + 4) + 1;
    goto LABEL_33;
  }
  v14 = *((_QWORD *)a1 + 2);
  if (!v14
    || (result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v14 + 16))(v14, a2, *(_QWORD *)a1), (result & 1) == 0))
  {
    result = sub_22F0D9304(a1, a2);
  }
LABEL_30:
  *((_DWORD *)a1 + 2) -= a3;
  return result;
}

llvm::raw_ostream *sub_22F0E8CE0(_QWORD *a1, _DWORD *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  llvm::raw_ostream *result;
  _WORD *v8;

  v5 = a3 + 1;
  *((_DWORD *)a1 + 2) += (a3 + 1) >> 1;
  if (*(_BYTE *)a2 == 12)
  {
    sub_22F0E8E5C((uint64_t)a1, (uint64_t)a2);
  }
  else
  {
    v6 = a1[2];
    if (!v6 || ((*(uint64_t (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v6 + 16))(v6, a2, *a1) & 1) == 0)
      sub_22F0D9304(a1, a2);
  }
  result = (llvm::raw_ostream *)*a1;
  v8 = *(_WORD **)(*a1 + 32);
  if (*(_QWORD *)(*a1 + 24) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8251;
    *((_QWORD *)result + 4) += 2;
  }
  else
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "; ");
  }
  *((_DWORD *)a1 + 2) -= v5 >> 1;
  return result;
}

uint64_t sub_22F0E8DAC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a2)
  {
    v4 = a1[2];
    if (!v4)
      return sub_22F0D9304(a1, a2);
    result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2, *a1);
    if ((result & 1) == 0)
      return sub_22F0D9304(a1, a2);
  }
  else
  {
    result = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v6) > 0xA)
    {
      *(_DWORD *)(v6 + 7) = 1047687288;
      *(_QWORD *)v6 = *(_QWORD *)"<null expr>";
      *(_QWORD *)(result + 32) += 11;
    }
    else
    {
      return llvm::raw_ostream::write((llvm::raw_ostream *)result, "<null expr>");
    }
  }
  return result;
}

void sub_22F0E8E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  void *v8;
  int v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 1) != 0)
  {
    v5 = (_BYTE *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = &v5[8 * *(unsigned int *)(v3 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v3)
      v5 = (_BYTE *)(a2 + 8);
    else
      v5 = 0;
    v6 = (_BYTE *)(a2 + 16);
    if (v3)
      v7 = v6;
    else
      v7 = 0;
  }
  v8 = v10;
  *(_QWORD *)v9 = 0x200000000;
  sub_22F2633B0((uint64_t)&v8, v5, v7);
  sub_22EFE4014((unint64_t *)v8, v9[0], *(llvm::raw_ostream **)a1, (unint64_t *)(a1 + 24), *(_DWORD *)(a1 + 8));
  if (v8 != v10)
    free(v8);
}

void sub_22F0E8F24(char *a1, unsigned __int16 *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  llvm::raw_ostream *v15;
  _WORD *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _DWORD *v24;
  const char *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  unsigned __int16 *v30;
  _DWORD *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  const char *v34;
  unsigned int v35;
  int v36;
  llvm::raw_ostream *v37;
  _WORD *v38;
  llvm::raw_ostream *v39;
  unsigned int v40;
  void **v41;
  unsigned int v42;
  _DWORD *v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  int v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  const char *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  const char *v54;
  void *__p[2];
  uint64_t v56;

  v4 = *(llvm::raw_ostream **)a1;
  v5 = *((_QWORD *)v4 + 4);
  v6 = *((_QWORD *)v4 + 3) - v5;
  if ((*a2 & 0x600) == 0x200)
  {
    if (v6 > 2)
    {
      *(_BYTE *)(v5 + 2) = 32;
      *(_WORD *)v5 = 26217;
      *((_QWORD *)v4 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v4, "if ");
    }
    if ((*a2 & 0x700) == 0x300)
    {
      v7 = *(llvm::raw_ostream **)a1;
      v8 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v8)
      {
        llvm::raw_ostream::write(v7, "!");
      }
      else
      {
        *v8 = 33;
        ++*((_QWORD *)v7 + 4);
      }
    }
    v9 = *(llvm::raw_ostream **)a1;
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v10) > 8)
    {
      *(_BYTE *)(v10 + 8) = 108;
      *(_QWORD *)v10 = *(_QWORD *)"consteval";
      *((_QWORD *)v9 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v9, "consteval");
    }
    if (a1[63] >= 0)
      v11 = a1 + 40;
    else
      v11 = (const char *)*((_QWORD *)a1 + 5);
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v11);
    sub_22F0E8AD0(a1, *(unsigned __int8 **)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)], a1[24]);
    v12 = *a2;
    if ((v12 & 0x800) != 0)
    {
      v13 = *(unsigned __int8 **)&a2[4 * ((v12 >> 13) & 1) + 16 + 4 * ((v12 >> 12) & 1)];
      if (v13)
      {
        v14 = *((_DWORD *)a1 + 2);
        if (v14 >= 1)
        {
          do
          {
            v15 = *(llvm::raw_ostream **)a1;
            v16 = *(_WORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v16 > 1uLL)
            {
              *v16 = 8224;
              *((_QWORD *)v15 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v15, "  ");
            }
            --v14;
          }
          while (v14);
        }
        v23 = *(llvm::raw_ostream **)a1;
        v24 = *(_DWORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v24 > 3uLL)
        {
          *v24 = 1702063205;
          *((_QWORD *)v23 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v23, "else");
        }
        sub_22F0E8AD0(a1, v13, a1[24]);
        if (a1[63] >= 0)
          v25 = a1 + 40;
        else
          v25 = (const char *)*((_QWORD *)a1 + 5);
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v25);
      }
    }
  }
  else
  {
    if (v6 > 3)
    {
      *(_DWORD *)v5 = 673212009;
      *((_QWORD *)v4 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v4, "if (");
    }
    v17 = *a2;
    if ((v17 & 0x2000) != 0)
    {
      v18 = (_DWORD *)*((_QWORD *)a2 + 2);
      if (v18)
      {
        sub_22F0E8CE0(a1, v18, 4);
        v17 = *a2;
      }
    }
    v19 = (v17 >> 13) & 1;
    if ((v17 & 0x1000) != 0 && (v20 = *(_QWORD *)&a2[4 * v19 + 8]) != 0)
    {
      sub_22F0E8E5C((uint64_t)a1, v20);
    }
    else
    {
      v21 = *(_DWORD **)&a2[4 * v19 + 8 + 4 * ((v17 >> 12) & 1)];
      if (v21)
      {
        v22 = *((_QWORD *)a1 + 2);
        if (!v22
          || ((*(uint64_t (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v22 + 16))(v22, v21, *(_QWORD *)a1) & 1) == 0)
        {
          sub_22F0D9304((uint64_t *)a1, v21);
        }
      }
      else
      {
        v26 = *(llvm::raw_ostream **)a1;
        v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v27) > 0xA)
        {
          *(_DWORD *)(v27 + 7) = 1047687288;
          *(_QWORD *)v27 = *(_QWORD *)"<null expr>";
          *((_QWORD *)v26 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(v26, "<null expr>");
        }
      }
    }
    v28 = *(llvm::raw_ostream **)a1;
    v29 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v29 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v28);
    }
    else
    {
      *((_QWORD *)v28 + 4) = v29 + 1;
      *v29 = 41;
    }
    v30 = a2 + 8;
    v31 = *(_DWORD **)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)];
    v32 = *(llvm::raw_ostream **)a1;
    if (*(_BYTE *)v31 == 8)
    {
      v33 = (_BYTE *)*((_QWORD *)v32 + 4);
      if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
      {
        llvm::raw_ostream::write(v32);
      }
      else
      {
        *((_QWORD *)v32 + 4) = v33 + 1;
        *v33 = 32;
      }
      sub_22F0E8984((uint64_t)a1, v31);
      v39 = *(llvm::raw_ostream **)a1;
      v40 = *a2;
      if ((v40 & 0x800) != 0 && *(_QWORD *)&v30[4 * ((v40 >> 13) & 1) + 8 + 4 * ((v40 >> 12) & 1)])
      {
        HIBYTE(v56) = 1;
        LOWORD(__p[0]) = 32;
      }
      else if (a1[63] < 0)
      {
        sub_22E3BB2B4(__p, *((void **)a1 + 5), *((_QWORD *)a1 + 6));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        v56 = *((_QWORD *)a1 + 7);
      }
      if (v56 >= 0)
        v41 = __p;
      else
        v41 = (void **)__p[0];
      llvm::raw_ostream::write(v39, (const char *)v41);
      if (SHIBYTE(v56) < 0)
        operator delete(__p[0]);
    }
    else
    {
      if (a1[63] >= 0)
        v34 = a1 + 40;
      else
        v34 = (const char *)*((_QWORD *)a1 + 5);
      llvm::raw_ostream::write(v32, v34);
      sub_22F0E8AD0(a1, *(unsigned __int8 **)&v30[4 * ((*a2 >> 12) & 1) + 4 + 4 * ((*a2 >> 13) & 1)], a1[24]);
      v35 = *a2;
      if ((v35 & 0x800) != 0)
      {
        if (*(_QWORD *)&v30[4 * ((v35 >> 13) & 1) + 8 + 4 * ((v35 >> 12) & 1)])
        {
          v36 = *((_DWORD *)a1 + 2);
          if (v36 >= 1)
          {
            do
            {
              v37 = *(llvm::raw_ostream **)a1;
              v38 = *(_WORD **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v38 > 1uLL)
              {
                *v38 = 8224;
                *((_QWORD *)v37 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v37, "  ");
              }
              --v36;
            }
            while (v36);
          }
        }
      }
    }
    v42 = *a2;
    if ((v42 & 0x800) != 0)
    {
      v43 = *(_DWORD **)&v30[4 * ((v42 >> 13) & 1) + 8 + 4 * ((v42 >> 12) & 1)];
      if (v43)
      {
        v44 = *(llvm::raw_ostream **)a1;
        v45 = *(_DWORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v45 > 3uLL)
        {
          *v45 = 1702063205;
          *((_QWORD *)v44 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v44, "else");
        }
        v46 = *(unsigned __int8 *)v43;
        if (v46 == 16)
        {
          v49 = *(llvm::raw_ostream **)a1;
          v50 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if ((unint64_t)v50 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
          {
            llvm::raw_ostream::write(v49);
          }
          else
          {
            *((_QWORD *)v49 + 4) = v50 + 1;
            *v50 = 32;
          }
          sub_22F0E8F24(a1, v43);
        }
        else if (v46 == 8)
        {
          v47 = *(llvm::raw_ostream **)a1;
          v48 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if ((unint64_t)v48 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
          {
            llvm::raw_ostream::write(v47);
          }
          else
          {
            *((_QWORD *)v47 + 4) = v48 + 1;
            *v48 = 32;
          }
          sub_22F0E8984((uint64_t)a1, v43);
          if (a1[63] >= 0)
            v54 = a1 + 40;
          else
            v54 = (const char *)*((_QWORD *)a1 + 5);
          llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v54);
        }
        else
        {
          if (a1[63] >= 0)
            v51 = a1 + 40;
          else
            v51 = (const char *)*((_QWORD *)a1 + 5);
          llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v51);
          v52 = *a2;
          if ((v52 & 0x800) != 0)
            v53 = *(unsigned __int8 **)&v30[4 * ((v52 >> 13) & 1) + 8 + 4 * ((v52 >> 12) & 1)];
          else
            v53 = 0;
          sub_22F0E8AD0(a1, v53, a1[24]);
        }
      }
    }
  }
}

uint64_t sub_22F0E9600(uint64_t a1, uint64_t a2, char a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD **v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  const char *v16;
  uint64_t result;
  unsigned int *v18;
  uint64_t i;
  llvm::raw_ostream *v20[2];

  v7 = (llvm::raw_ostream *)(a1 + 24);
  v6 = *(llvm::raw_ostream **)a1;
  v20[0] = v6;
  v20[1] = v7;
  v8 = *(_DWORD **)(a2 + 24);
  if (v8)
  {
    v11 = *v8;
    v10 = (_DWORD **)(v8 + 4);
    v9 = v11;
    if (v11)
    {
      v12 = 8 * v9;
      do
      {
        v13 = *v10;
        if (*v10 && *v13)
        {
          v14 = *(llvm::raw_ostream **)a1;
          v15 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if ((unint64_t)v15 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
          {
            llvm::raw_ostream::write(v14);
          }
          else
          {
            *((_QWORD *)v14 + 4) = v15 + 1;
            *v15 = 32;
          }
          sub_22F3B848C(v20, v13);
        }
        ++v10;
        v12 -= 8;
      }
      while (v12);
      v6 = *(llvm::raw_ostream **)a1;
    }
  }
  if (*(char *)(a1 + 63) >= 0)
    v16 = (const char *)(a1 + 40);
  else
    v16 = *(const char **)(a1 + 40);
  result = llvm::raw_ostream::write(v6, v16);
  if ((a3 & 1) == 0)
  {
    v18 = *(unsigned int **)(a2 + 24);
    if (v18)
    {
      if (*((_BYTE *)v18 + 8))
      {
        for (i = *(_QWORD *)&v18[2 * *v18 + 4 + 2 * v18[1]];
              *(_BYTE *)i == 7;
        return sub_22F0E8AD0((const char *)a1, (unsigned __int8 *)i, *(unsigned __int8 *)(a1 + 24));
      }
    }
  }
  return result;
}

uint64_t sub_22F0E9738(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  const char *v10;
  const char *v11;

  v4 = *a1;
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 9)
  {
    *(_WORD *)(v5 + 8) = 10272;
    *(_QWORD *)v5 = *(_QWORD *)"__except (";
    *((_QWORD *)v4 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v4, "__except (");
  }
  v6 = *a1;
  v7 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v7 > 0x14uLL)
  {
    qmemcpy(v7, "<<unknown expr type>>", 21);
    *((_QWORD *)v6 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v6, "<<unknown expr type>>");
  }
  v8 = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v9)
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, ")");
  }
  else
  {
    *v9 = 41;
    ++*((_QWORD *)v8 + 4);
  }
  if (*((char *)a1 + 63) >= 0)
    v10 = (const char *)(a1 + 5);
  else
    v10 = (const char *)a1[5];
  llvm::raw_ostream::write(v8, v10);
  sub_22F0E8984((uint64_t)a1, *(_DWORD **)(a2 + 24));
  if (*((char *)a1 + 63) >= 0)
    v11 = (const char *)(a1 + 5);
  else
    v11 = (const char *)a1[5];
  return llvm::raw_ostream::write(*a1, v11);
}

uint64_t sub_22F0E9888(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  const char *v6;

  v4 = *(llvm::raw_ostream **)a1;
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 9)
  {
    *(_WORD *)(v5 + 8) = 8313;
    *(_QWORD *)v5 = *(_QWORD *)"__finally ";
    *((_QWORD *)v4 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v4, "__finally ");
  }
  sub_22F0E8984(a1, *(_DWORD **)(a2 + 16));
  if (*(char *)(a1 + 63) >= 0)
    v6 = (const char *)(a1 + 40);
  else
    v6 = *(const char **)(a1 + 40);
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v6);
}

uint64_t sub_22F0E9928(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2[4];
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)result;
    v5 = 0;
    v6 = a2 + 2;
    v7 = 8 * v2;
    do
    {
      if (**(_BYTE **)((char *)&v6[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24) + v5) == 120)
        break;
      if (v5)
      {
        v8 = (llvm::raw_ostream *)*v4;
        v9 = *(_WORD **)(*v4 + 32);
        if (*(_QWORD *)(*v4 + 24) - (_QWORD)v9 > 1uLL)
        {
          *v9 = 8236;
          *((_QWORD *)v8 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v8, ", ");
        }
      }
      v10 = *(_QWORD *)((char *)&v6[2 * (((unint64_t)*(v6 - 2) >> 18) & 1)]
                      + ((unint64_t)*(v6 - 2) >> 24)
                      + v5);
      if (v10)
      {
        v11 = v4[2];
        if (!v11
          || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10, *v4),
              (result & 1) == 0))
        {
          result = sub_22F0D9304(v4, v10);
        }
      }
      else
      {
        result = *v4;
        v12 = *(_QWORD *)(*v4 + 32);
        if ((unint64_t)(*(_QWORD *)(*v4 + 24) - v12) > 0xA)
        {
          *(_DWORD *)(v12 + 7) = 1047687288;
          *(_QWORD *)v12 = *(_QWORD *)"<null expr>";
          *(_QWORD *)(result + 32) += 11;
        }
        else
        {
          result = llvm::raw_ostream::write((llvm::raw_ostream *)result, "<null expr>");
        }
      }
      v5 += 8;
    }
    while (v7 != v5);
  }
  return result;
}

void sub_22F0E9A8C(llvm::raw_ostream *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::APFloatBase *v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = xmmword_22F44E350;
  v6 = a2 + 16;
  v7 = llvm::APFloatBase::EnumToSemantics();
  sub_22E4F00CC(v6, v7, (uint64_t)&v11);
  v8 = (llvm::APFloatBase *)sub_22E99A6BC((llvm::APFloatBase *)&v11);
  v9 = v12;
  if (llvm::APFloatBase::PPCDoubleDouble(v8) == v9)
    sub_22E463170((llvm::APFloatBase *)&v13);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v12);
  llvm::raw_ostream::write(a1, (const char *)v14);
  v11 = v14;
  v12 = v15;
  if (llvm::StringRef::find_first_not_of() == -1)
  {
    v10 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
      if (!a3)
        goto LABEL_10;
    }
    else
    {
      *((_QWORD *)a1 + 4) = v10 + 1;
      *v10 = 46;
      if (!a3)
        goto LABEL_10;
    }
LABEL_5:
    __asm { BR              X10 }
  }
  if (a3)
    goto LABEL_5;
LABEL_10:
  if (v14 != v16)
    free(v14);
}

llvm::raw_ostream *sub_22F0E9D28(uint64_t *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const char *v5;
  size_t v6;
  _BYTE *v7;
  uint64_t **v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  _DWORD *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *result;
  _BYTE *v16;
  const void **v17;
  __int16 v18;
  uint64_t v19;

  v4 = (llvm::raw_ostream *)*a1;
  if ((*(_BYTE *)a2 + 110) > 5u)
    v5 = "<invalid cast>";
  else
    v5 = off_24FAC6E30[(char)(*(_BYTE *)a2 + 110)];
  v6 = strlen(v5);
  v7 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (v6 <= *((_QWORD *)v4 + 3) - (_QWORD)v7)
  {
    if (v6)
    {
      memcpy(v7, v5, v6);
      v7 = (_BYTE *)(*((_QWORD *)v4 + 4) + v6);
      *((_QWORD *)v4 + 4) = v7;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, v5);
    v7 = (_BYTE *)*((_QWORD *)v4 + 4);
  }
  if ((unint64_t)v7 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v7 + 1;
    *v7 = 60;
  }
  v19 = **(_QWORD **)(a2 + 24);
  v8 = (uint64_t **)*a1;
  v18 = 257;
  sub_22F119558(&v19, v8, (uint64_t)(a1 + 3), &v17, 0);
  v9 = (llvm::raw_ostream *)*a1;
  v10 = *(_WORD **)(*a1 + 32);
  if (*(_QWORD *)(*a1 + 24) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 10302;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v9, ">(");
  }
  v11 = *(_DWORD **)(a2 + 16);
  if (v11)
  {
    v12 = a1[2];
    if (!v12
      || ((*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v11, *a1) & 1) == 0)
    {
      sub_22F0D9304(a1, v11);
    }
  }
  else
  {
    v13 = (llvm::raw_ostream *)*a1;
    v14 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v14) > 0xA)
    {
      *(_DWORD *)(v14 + 7) = 1047687288;
      *(_QWORD *)v14 = *(_QWORD *)"<null expr>";
      *((_QWORD *)v13 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v13, "<null expr>");
    }
  }
  result = (llvm::raw_ostream *)*a1;
  v16 = *(_BYTE **)(*a1 + 32);
  if (*(_BYTE **)(*a1 + 24) == v16)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, ")");
  *v16 = 41;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t sub_22F0E9F3C(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  char v12;

  v3 = a3;
  if (a3)
  {
    v12 = 0;
    sub_22F0D4E74(a2);
    v6 = sub_22F142368(v5, 1u, *(_QWORD **)(v3 + 1992), *(_DWORD **)(v3 + 2000), &v12);
    v3 = v12 == 0;
    if (!v12)
    {
      v8 = (const void *)v6;
      v9 = v7;
      v10 = (void *)*((_QWORD *)a1 + 4);
      if (v7 <= *((_QWORD *)a1 + 3) - (_QWORD)v10)
      {
        if (v7)
        {
          memcpy(v10, v8, v7);
          *((_QWORD *)a1 + 4) += v9;
        }
      }
      else
      {
        llvm::raw_ostream::write(a1, (const char *)v8);
      }
    }
  }
  return v3;
}

void sub_22F0E9FEC(_QWORD *a1, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        sub_22F0ED5E4(a1, a2);
        return;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X10 }
  sub_22F0ED75C(a1, a2);
}

void sub_22F0EC99C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];
  char v4;
  uint64_t v5;

  v4 = 0;
  v3[0] = &off_24FAC6EC8;
  v3[1] = a2;
  v5 = a3;
  sub_22F0E9FEC(v3, a1);
}

void sub_22F0EC9DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F0EC9F0(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_22F0ECA4C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2)
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  else
    v5 = 0;
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  if (!v2 || !*(_BYTE *)(v3 + 16))
  {
    v14 = *(_QWORD *)(v3 + 8);
    if (!v2)
      goto LABEL_48;
    goto LABEL_47;
  }
  v7 = *(_DWORD *)(v2 + 28) & 0x7F;
  if (v7 <= 0x3A)
  {
    if (v7 == 32)
    {
      v26 = *(_QWORD *)(v3 + 8);
      v27 = *(_DWORD *)(v2 + 64) & 0xFFFFF;
      v28 = *(_DWORD *)(v26 + 8);
      if (v28 >= *(_DWORD *)(v26 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = *(_DWORD *)(v26 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v26 + 4 * v28) = v27;
      ++*(_DWORD *)(v26 + 8);
      v29 = *(_QWORD *)(v3 + 8);
      v30 = *(_DWORD *)(v2 + 64) >> 20;
      v31 = *(_DWORD *)(v29 + 8);
      if (v31 >= *(_DWORD *)(v29 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = *(_DWORD *)(v29 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v29 + 4 * v31) = v30;
      ++*(_DWORD *)(v29 + 8);
      v14 = *(_QWORD *)(v3 + 8);
      v32 = *(unsigned __int8 *)(v2 + 80);
      v33 = *(_DWORD *)(v14 + 8);
      if (v33 >= *(_DWORD *)(v14 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v33 = *(_DWORD *)(v14 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v14 + 4 * v33) = v32;
      goto LABEL_53;
    }
    if (v7 == 38)
    {
      v8 = *(_QWORD *)(v3 + 8);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 32) & 0x7FFF;
      v10 = *(_DWORD *)(v8 + 8);
      if (v10 >= *(_DWORD *)(v8 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v10) = v9;
      ++*(_DWORD *)(v8 + 8);
      v11 = *(_QWORD *)(v3 + 8);
      v12 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 34);
      v13 = *(_DWORD *)(v11 + 8);
      if (v13 >= *(_DWORD *)(v11 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(_DWORD *)(v11 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v11 + 4 * v13) = v12;
      ++*(_DWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v3 + 8);
      v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v16 = *(_DWORD *)(v14 + 8);
      if (v16 >= *(_DWORD *)(v14 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(_DWORD *)(v14 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v14 + 4 * v16) = (v15 >> 15) & 1;
LABEL_53:
      ++*(_DWORD *)(v14 + 8);
      return result;
    }
    goto LABEL_46;
  }
  if (v7 == 64)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, *(_QWORD *)(v2 + 48));
    v34 = *(_QWORD *)(v3 + 8);
    v35 = *(_DWORD *)(v2 + 96);
    if ((v35 & 0x1000) != 0)
      v36 = 0;
    else
      v36 = (v35 >> 13) & 0x7F;
    v37 = *(_DWORD *)(v34 + 8);
    if (v37 >= *(_DWORD *)(v34 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = *(_DWORD *)(v34 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v34 + 4 * v37) = v36;
    ++*(_DWORD *)(v34 + 8);
    v14 = *(_QWORD *)(v3 + 8);
    v38 = (*(_DWORD *)(v2 + 96) >> 20);
    if (v38 == 255)
    {
      v39 = sub_22EFC72E8(v2);
      result = sub_22F36F2CC(v39, v2);
      v38 = result;
    }
    v40 = *(_DWORD *)(v14 + 8);
    if (v40 >= *(_DWORD *)(v14 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(_DWORD *)(v14 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v14 + 4 * v40) = v38;
    goto LABEL_53;
  }
  if (v7 != 59)
  {
LABEL_46:
    v14 = *(_QWORD *)(v3 + 8);
LABEL_47:
    result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 32))(v2);
    v2 = result;
LABEL_48:
    v41 = *(_DWORD *)(v14 + 8);
    if (v41 >= *(_DWORD *)(v14 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v41 = *(_DWORD *)(v14 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v14 + 4 * v41) = v2;
    v42 = *(_DWORD *)(v14 + 12);
    v43 = *(_DWORD *)(v14 + 8) + 1;
    *(_DWORD *)(v14 + 8) = v43;
    if (v43 >= v42)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v43 = *(_DWORD *)(v14 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v14 + 4 * v43) = HIDWORD(v2);
    goto LABEL_53;
  }
  v17 = *(_QWORD *)(v3 + 8);
  v18 = *(_DWORD *)(v2 + 68) & 0xFFFFF;
  v19 = *(_DWORD *)(v17 + 8);
  if (v19 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v17 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v17 + 4 * v19) = v18;
  ++*(_DWORD *)(v17 + 8);
  v20 = *(_QWORD *)(v3 + 8);
  v21 = *(_DWORD *)(v2 + 68) >> 20;
  v22 = *(_DWORD *)(v20 + 8);
  if (v22 >= *(_DWORD *)(v20 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(v20 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v20 + 4 * v22) = v21;
  ++*(_DWORD *)(v20 + 8);
  v23 = *(_QWORD *)(v3 + 8);
  v24 = *(unsigned __int8 *)(v2 + 80);
  v25 = *(_DWORD *)(v23 + 8);
  if (v25 >= *(_DWORD *)(v23 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v23 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v23 + 4 * v25) = v24;
  ++*(_DWORD *)(v23 + 8);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, *(_QWORD *)(v2 + 48));
}

uint64_t sub_22F0ECF64(uint64_t result, unint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(result + 16))
    v2 = a2 >= 0x10;
  else
    v2 = 0;
  if (v2)
    a2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v7 = a2;
    v9 = *(_QWORD *)(result + 8);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v7;
    v3 = v9;
    v4 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  v5 = *(_DWORD *)(v3 + 12);
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (v6 >= v5)
  {
    v8 = HIDWORD(a2);
    v10 = v3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v8;
    v3 = v10;
    v6 = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v6) = HIDWORD(a2);
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_22F0ED030(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12))
  {
    v6 = a2;
    v8 = *(_QWORD *)(result + 8);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v6;
    v2 = v8;
    v3 = *(_DWORD *)(v8 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v2 + 4 * v3) = a2;
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 8) + 1;
  *(_DWORD *)(v2 + 8) = v5;
  if (v5 >= v4)
  {
    v7 = HIDWORD(a2);
    v9 = v2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v7;
    v2 = v9;
    v5 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v2 + 4 * v5) = HIDWORD(a2);
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_22F0ED0DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12))
  {
    v6 = a2;
    v8 = *(_QWORD *)(result + 8);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v6;
    v2 = v8;
    v3 = *(_DWORD *)(v8 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v2 + 4 * v3) = a2;
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 8) + 1;
  *(_DWORD *)(v2 + 8) = v5;
  if (v5 >= v4)
  {
    v7 = HIDWORD(a2);
    v9 = v2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v7;
    v2 = v9;
    v5 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v2 + 4 * v5) = HIDWORD(a2);
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_22F0ED188(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v2 = result;
  if (*(_BYTE *)(result + 16))
  {
    result = sub_22EF65C10(*(_QWORD *)(result + 24), a2);
    a2 = result;
  }
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v7 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v7;
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  v5 = *(_DWORD *)(v3 + 12);
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (v6 >= v5)
  {
    v8 = HIDWORD(a2);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v8;
    v6 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v6) = HIDWORD(a2);
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void sub_22F0ED254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = a2;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_22EF65464(*(_QWORD *)(a1 + 24), &v10);
    a2 = v3;
    v10 = v3;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a2;
  v6 = *(_DWORD *)(v4 + 12);
  v7 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v7;
  if (v7 >= v6)
  {
    v9 = HIDWORD(a2);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v9;
    v7 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v7) = HIDWORD(a2);
  ++*(_DWORD *)(v4 + 8);
}

void sub_22F0ED32C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F0ED340(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  if (a2 == 211)
    v5 = 161;
  else
    v5 = a2;
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = v5;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void sub_22F0ED3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a2 != 0;
  ++*(_DWORD *)(v4 + 8);
  if (a2)
    sub_22F0BC3CC(*(_QWORD *)(a1 + 24), a2);
}

void sub_22F0ED434(uint64_t a1, unint64_t a2)
{
  sub_22F0BC29C(*(_QWORD *)(a1 + 24), a2);
}

void sub_22F0ED43C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int v7;

  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(v6 + 8);
    if (v7 >= *(_DWORD *)(v6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(v6 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v6 + 4 * v7) = 1;
    ++*(_DWORD *)(v6 + 8);
  }
  sub_22F0BBD10(*(_QWORD **)(a1 + 24), a2, a3);
}

uint64_t sub_22F0ED4BC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2 != 0;
  ++*(_DWORD *)(v3 + 8);
  if (a2)
    return llvm::FoldingSetNodeID::AddString();
  return result;
}

void sub_22F0ED550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a2 != 0;
  ++*(_DWORD *)(v4 + 8);
  if (a2)
    sub_22F0BC59C(*(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_22F0ED5DC(uint64_t a1, uint64_t a2)
{
  return sub_22F0BC764(*(_QWORD *)(a1 + 24), a2);
}

void sub_22F0ED5E4(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  sub_22F0ED7C8(a1, a2);
  v4 = a1[1];
  v5 = *(_DWORD *)a2;
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = (v5 >> 18) & 0x3F;
  ++*(_DWORD *)(v4 + 8);
}

uint64_t sub_22F0ED650(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  sub_22F0ED7C8(a1, a2);
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 24))(a1, *((_QWORD *)a2 + 2));
  v5 = a1[1];
  v6 = *(_DWORD *)a2;
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v7) = (v6 >> 18) & 1;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t sub_22F0ED6D0(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  sub_22F0ED7C8(a1, a2);
  result = llvm::FoldingSetNodeID::AddString();
  v5 = a1[1];
  v6 = *(_DWORD *)a2;
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v7) = (v6 >> 18) & 7;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

void sub_22F0ED75C(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  sub_22F0ED7C8(a1, a2);
  v4 = a1[1];
  v5 = *(_DWORD *)a2;
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = (v5 >> 18) & 0x1F;
  ++*(_DWORD *)(v4 + 8);
}

void sub_22F0ED7C8(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  (*(void (**)(_QWORD *, _QWORD))(*a1 + 16))(a1, *a2);
  sub_22F0D492C((uint64_t)a2);
  v11 = v13;
  v4 = v15;
  v12 = v14;
  v5 = v16;
  while (1)
  {
    v6 = v11;
    if (v11 == __PAIR128__(v5, v4))
      break;
    v7 = (_QWORD *)v11;
    v8 = BYTE8(v11) & 3;
    if ((BYTE8(v11) & 3) != 0)
    {
      if ((*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v7 = (_QWORD *)((*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v7 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v11);
    }
    if (*v7)
    {
      sub_22F0E9FEC(a1);
      if (!v8)
        goto LABEL_8;
LABEL_12:
      if (*((_QWORD *)&v6 + 1) >= 4uLL)
        sub_22F0D8720((uint64_t)&v11);
      else
        sub_22F3F2FE0((uint64_t)&v11, 1);
    }
    else
    {
      v9 = a1[1];
      v10 = *(unsigned int *)(v9 + 8);
      if (v10 >= *(unsigned int *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(unsigned int *)(v9 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v9 + 4 * v10) = 0;
      ++*(_DWORD *)(v9 + 8);
      if (v8)
        goto LABEL_12;
LABEL_8:
      *(_QWORD *)&v11 = v6 + 8;
    }
  }
}

void sub_22F0ED8F4(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned __int8 **v20;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned __int8 **v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 **v52;
  uint64_t v53;
  unsigned __int8 **v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 **v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 **v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 **v73;
  uint64_t v74;
  unsigned __int8 **v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 **v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 **v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 **v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 **v92;
  unsigned __int8 **v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned __int8 **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 **v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 **v107;
  uint64_t v108;
  unsigned __int8 **v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 **v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unsigned __int8 **v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 **v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 **v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 **v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 **v138;
  uint64_t v139;
  unsigned __int8 **v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 **v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 **v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  unsigned __int8 **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 **v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 **v165;
  uint64_t v166;
  unsigned __int8 **v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 **v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 **v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 **v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 **v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 **v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  unsigned __int8 **v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 **v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 **v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 **v197;
  uint64_t v198;
  unsigned __int8 **v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 **v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 **v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 **v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 **v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 **v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 **v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 **v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int8 **v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 **v226;
  uint64_t v227;
  unsigned __int8 *v228;
  uint64_t *v229;
  uint64_t v230;

  sub_22F0ED7C8(a1, (unsigned __int8 *)a2);
  v4 = *(_DWORD **)(a2 + 24);
  if (v4)
  {
    v7 = *v4;
    v6 = (uint64_t *)(v4 + 4);
    v5 = v7;
    if (v7)
    {
      v8 = &v6[v5];
      do
      {
        v9 = *v6;
        if (*v6)
        {
          switch(*(_DWORD *)(v9 + 8))
          {
            case 3:
              v93 = (unsigned __int8 **)(v9 + 24);
              v94 = *(unsigned int *)(v9 + 16);
              v95 = *(unsigned __int8 **)(v9 + 24 + 8 * v94);
              if (v95)
              {
                sub_22F0ED7C8(a1, v95);
                v94 = *(unsigned int *)(v9 + 16);
              }
              if ((_DWORD)v94)
              {
                v96 = 8 * v94;
                do
                {
                  v97 = *v93++;
                  sub_22F0ED7C8(a1, v97);
                  v96 -= 8;
                }
                while (v96);
              }
              break;
            case 4:
            case 7:
            case 0xC:
            case 0x13:
            case 0x15:
            case 0x23:
            case 0x3C:
            case 0x3D:
            case 0x46:
            case 0x4B:
              v11 = *(unsigned __int8 **)(v9 + 16);
              if (v11)
                goto LABEL_11;
              break;
            case 5:
              v149 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v149)
              {
                v150 = 8 * v149;
                v151 = (unsigned __int8 **)(v9 + 24);
                do
                {
                  if (*v151)
                    sub_22F0ED7C8(a1, *v151);
                  ++v151;
                  v150 -= 8;
                }
                while (v150);
                v152 = *(unsigned int *)(v9 + 16);
              }
              else
              {
                v152 = 0;
              }
              v11 = *(unsigned __int8 **)(v9 + 24 + 8 * v152);
              if (v11)
                goto LABEL_11;
              break;
            case 6:
              v153 = *(unsigned __int8 **)(v9 + 24);
              if (v153)
                sub_22F0ED7C8(a1, v153);
              v154 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v154)
              {
                v155 = (unsigned __int8 **)(v9 + 40);
                v156 = 8 * v154;
                do
                {
                  if (*v155)
                    sub_22F0ED7C8(a1, *v155);
                  ++v155;
                  v156 -= 8;
                }
                while (v156);
              }
              break;
            case 0xE:
              v101 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v101)
              {
                v102 = v9 + 24;
                v103 = 8 * v101;
                v104 = (unsigned __int8 **)(v9 + 24);
                do
                {
                  if (*v104)
                    sub_22F0ED7C8(a1, *v104);
                  ++v104;
                  v103 -= 8;
                }
                while (v103);
                v105 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v105)
                {
                  v106 = 8 * v105;
                  v107 = (unsigned __int8 **)(v102 + 8 * v105);
                  do
                  {
                    if (*v107)
                      sub_22F0ED7C8(a1, *v107);
                    ++v107;
                    v106 -= 8;
                  }
                  while (v106);
                  v108 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v108)
                  {
                    v109 = (unsigned __int8 **)(v102 + 8 * v108 + 8 * v108);
                    v110 = 8 * v108;
                    do
                    {
                      if (*v109)
                        sub_22F0ED7C8(a1, *v109);
                      ++v109;
                      v110 -= 8;
                    }
                    while (v110);
                    v111 = *(unsigned int *)(v9 + 16);
                    if ((_DWORD)v111)
                    {
                      v112 = (unsigned __int8 **)(v102 + 8 * v111 + 8 * v111 + 8 * v111);
                      v113 = 8 * v111;
                      do
                      {
                        if (*v112)
                          sub_22F0ED7C8(a1, *v112);
                        ++v112;
                        v113 -= 8;
                      }
                      while (v113);
                    }
                  }
                }
              }
              break;
            case 0xF:
              v191 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v191)
              {
                v192 = v9 + 24;
                v193 = 8 * v191;
                v194 = (unsigned __int8 **)(v9 + 24);
                do
                {
                  if (*v194)
                    sub_22F0ED7C8(a1, *v194);
                  ++v194;
                  v193 -= 8;
                }
                while (v193);
                v195 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v195)
                {
                  v196 = 8 * v195;
                  v197 = (unsigned __int8 **)(v192 + 8 * v195);
                  do
                  {
                    if (*v197)
                      sub_22F0ED7C8(a1, *v197);
                    ++v197;
                    v196 -= 8;
                  }
                  while (v196);
                  v198 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v198)
                  {
                    v199 = (unsigned __int8 **)(v192 + 8 * v198 + 8 * v198);
                    v200 = 8 * v198;
                    do
                    {
                      if (*v199)
                        sub_22F0ED7C8(a1, *v199);
                      ++v199;
                      v200 -= 8;
                    }
                    while (v200);
                    v201 = *(unsigned int *)(v9 + 16);
                    if ((_DWORD)v201)
                    {
                      v202 = (unsigned __int8 **)(v192 + 8 * v201 + 8 * v201 + 8 * v201);
                      v203 = 8 * v201;
                      do
                      {
                        if (*v202)
                          sub_22F0ED7C8(a1, *v202);
                        ++v202;
                        v203 -= 8;
                      }
                      while (v203);
                    }
                  }
                }
              }
              break;
            case 0x12:
              v204 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v204)
              {
                v205 = (unsigned __int8 **)(v9 + 40);
                v206 = 8 * v204;
                do
                {
                  if (*v205)
                    sub_22F0ED7C8(a1, *v205);
                  ++v205;
                  v206 -= 8;
                }
                while (v206);
              }
              break;
            case 0x14:
            case 0x58:
              v11 = *(unsigned __int8 **)(v9 + 24);
              if (v11)
                goto LABEL_11;
              break;
            case 0x16:
              v11 = *(unsigned __int8 **)(v9 + 40);
              if (v11)
                goto LABEL_11;
              break;
            case 0x18:
              v129 = *(unsigned __int8 **)(v9 + 16);
              if (v129)
                sub_22F0ED7C8(a1, v129);
              v11 = *(unsigned __int8 **)(v9 + 48);
              if (v11)
                goto LABEL_11;
              break;
            case 0x1A:
              v213 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v213)
              {
                v214 = (unsigned __int8 **)(v9 + 24);
                v215 = 8 * v213;
                do
                {
                  if (*v214)
                    sub_22F0ED7C8(a1, *v214);
                  ++v214;
                  v215 -= 8;
                }
                while (v215);
              }
              break;
            case 0x1B:
            case 0x1C:
            case 0x21:
            case 0x24:
            case 0x34:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3A:
            case 0x3E:
            case 0x4E:
              v10 = *(unsigned __int8 **)(v9 + 16);
              if (v10)
                sub_22F0ED7C8(a1, v10);
              v11 = *(unsigned __int8 **)(v9 + 32);
              if (v11)
                goto LABEL_11;
              break;
            case 0x1D:
              v30 = v9 + 40;
              v31 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v31)
              {
                v32 = 8 * v31;
                v33 = (unsigned __int8 **)(v9 + 40);
                do
                {
                  if (*v33)
                    sub_22F0ED7C8(a1, *v33);
                  ++v33;
                  v32 -= 8;
                }
                while (v32);
              }
              v34 = *(unsigned __int8 **)(v9 + 24);
              if (v34)
                sub_22F0ED7C8(a1, v34);
              v35 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v35)
              {
                v36 = 8 * v35;
                v37 = (unsigned __int8 **)(v30 + 8 * v35);
                do
                {
                  if (*v37)
                    sub_22F0ED7C8(a1, *v37);
                  ++v37;
                  v36 -= 8;
                }
                while (v36);
                v38 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v38)
                {
                  v39 = (unsigned __int8 **)(v30 + 8 * v38 + 8 * v38);
                  v40 = 8 * v38;
                  do
                  {
                    if (*v39)
                      sub_22F0ED7C8(a1, *v39);
                    ++v39;
                    v40 -= 8;
                  }
                  while (v40);
                }
              }
              break;
            case 0x1E:
              v98 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v98)
              {
                v99 = (unsigned __int8 **)(v9 + 24);
                v100 = 8 * v98;
                do
                {
                  if (*v99)
                    sub_22F0ED7C8(a1, *v99);
                  ++v99;
                  v100 -= 8;
                }
                while (v100);
              }
              break;
            case 0x1F:
              v207 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v207)
              {
                v208 = (unsigned __int8 **)(v9 + 104);
                v209 = 8 * v207;
                do
                {
                  if (*v208)
                    sub_22F0ED7C8(a1, *v208);
                  ++v208;
                  v209 -= 8;
                }
                while (v209);
              }
              break;
            case 0x22:
              v219 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v219)
              {
                v220 = (unsigned __int8 **)(v9 + 80);
                v221 = 8 * v219;
                do
                {
                  if (*v220)
                    sub_22F0ED7C8(a1, *v220);
                  ++v220;
                  v221 -= 8;
                }
                while (v221);
              }
              break;
            case 0x25:
              (*(void (**)(_QWORD *, _QWORD))(*a1 + 56))(a1, *(_QWORD *)(v9 + 56));
              (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 40))(a1, *(_QWORD *)(v9 + 72), 0);
              v65 = v9 + 96;
              v66 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v66)
              {
                v67 = 8 * v66;
                v68 = (unsigned __int8 **)(v9 + 96);
                do
                {
                  if (*v68)
                    sub_22F0ED7C8(a1, *v68);
                  ++v68;
                  v67 -= 8;
                }
                while (v67);
              }
              v69 = *(unsigned __int8 **)(v9 + 24);
              if (v69)
                sub_22F0ED7C8(a1, v69);
              v70 = *(unsigned __int8 **)(v9 + 40);
              if (v70)
                sub_22F0ED7C8(a1, v70);
              v71 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v71)
              {
                v72 = 8 * v71;
                v73 = (unsigned __int8 **)(v65 + 8 * v71);
                do
                {
                  if (*v73)
                    sub_22F0ED7C8(a1, *v73);
                  ++v73;
                  v72 -= 8;
                }
                while (v72);
                v74 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v74)
                {
                  v75 = (unsigned __int8 **)(v65 + 8 * v74 + 8 * v74);
                  v76 = 8 * v74;
                  do
                  {
                    if (*v75)
                      sub_22F0ED7C8(a1, *v75);
                    ++v75;
                    v76 -= 8;
                  }
                  while (v76);
                  v77 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v77)
                  {
                    v78 = (unsigned __int8 **)(v65 + 8 * v77 + 8 * v77 + 8 * v77);
                    v79 = 8 * v77;
                    do
                    {
                      if (*v78)
                        sub_22F0ED7C8(a1, *v78);
                      ++v78;
                      v79 -= 8;
                    }
                    while (v79);
                    v80 = *(unsigned int *)(v9 + 16);
                    if ((_DWORD)v80)
                    {
                      v81 = (unsigned __int8 **)(v65 + 8 * v80 + 8 * v80 + 8 * v80 + 8 * v80);
                      v82 = 8 * v80;
                      do
                      {
                        if (*v81)
                          sub_22F0ED7C8(a1, *v81);
                        ++v81;
                        v82 -= 8;
                      }
                      while (v82);
                      v83 = *(unsigned int *)(v9 + 16);
                      if ((_DWORD)v83)
                      {
                        v84 = (unsigned __int8 **)(v65 + 8 * v83 + 8 * v83 + 8 * v83 + 8 * v83 + 8 * v83);
                        v85 = 8 * v83;
                        do
                        {
                          if (*v84)
                            sub_22F0ED7C8(a1, *v84);
                          ++v84;
                          v85 -= 8;
                        }
                        while (v85);
                      }
                    }
                  }
                }
              }
              break;
            case 0x27:
              v188 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v188)
              {
                v189 = (unsigned __int8 **)(v9 + 24);
                v190 = 8 * v188;
                do
                {
                  if (*v189)
                    sub_22F0ED7C8(a1, *v189);
                  ++v189;
                  v190 -= 8;
                }
                while (v190);
              }
              break;
            case 0x29:
              v62 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v62)
              {
                v63 = (unsigned __int8 **)(v9 + 32);
                v64 = 8 * v62;
                do
                {
                  if (*v63)
                    sub_22F0ED7C8(a1, *v63);
                  ++v63;
                  v64 -= 8;
                }
                while (v64);
              }
              break;
            case 0x2A:
              v41 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v41)
              {
                v42 = (unsigned __int8 **)(v9 + 80);
                v43 = 8 * v41;
                do
                {
                  if (*v42)
                    sub_22F0ED7C8(a1, *v42);
                  ++v42;
                  v43 -= 8;
                }
                while (v43);
              }
              break;
            case 0x2B:
              v114 = v9 + 64;
              v115 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v115)
              {
                v116 = 8 * v115;
                v117 = (unsigned __int8 **)(v9 + 64);
                do
                {
                  if (*v117)
                    sub_22F0ED7C8(a1, *v117);
                  ++v117;
                  v116 -= 8;
                }
                while (v116);
              }
              v118 = *(unsigned __int8 **)(v9 + 24);
              if (v118)
                sub_22F0ED7C8(a1, v118);
              v119 = *(unsigned __int8 **)(v9 + 40);
              if (v119)
                sub_22F0ED7C8(a1, v119);
              v120 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v120)
              {
                v121 = (unsigned __int8 **)(v114 + 8 * v120 + 8 * v120);
                v122 = 8 * v120;
                do
                {
                  if (*v121)
                    sub_22F0ED7C8(a1, *v121);
                  ++v121;
                  v122 -= 8;
                }
                while (v122);
                v123 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v123)
                {
                  v124 = (unsigned __int8 **)(v114 + 8 * v123 + 8 * v123 + 8 * v123);
                  v125 = 8 * v123;
                  do
                  {
                    if (*v124)
                      sub_22F0ED7C8(a1, *v124);
                    ++v124;
                    v125 -= 8;
                  }
                  while (v125);
                  v126 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v126)
                  {
                    v127 = (unsigned __int8 **)(v114 + 8 * v126 + 8 * v126 + 8 * v126 + 8 * v126);
                    v128 = 8 * v126;
                    do
                    {
                      if (*v127)
                        sub_22F0ED7C8(a1, *v127);
                      ++v127;
                      v128 -= 8;
                    }
                    while (v128);
                  }
                }
              }
              break;
            case 0x2C:
              v130 = v9 + 64;
              v131 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v131)
              {
                v132 = 8 * v131;
                v133 = (unsigned __int8 **)(v9 + 64);
                do
                {
                  if (*v133)
                    sub_22F0ED7C8(a1, *v133);
                  ++v133;
                  v132 -= 8;
                }
                while (v132);
              }
              v134 = *(unsigned __int8 **)(v9 + 24);
              if (v134)
                sub_22F0ED7C8(a1, v134);
              v135 = *(unsigned __int8 **)(v9 + 40);
              if (v135)
                sub_22F0ED7C8(a1, v135);
              v136 = *(unsigned int *)(v9 + 16);
              if (!(_DWORD)v136)
                goto LABEL_391;
              v137 = 8 * v136;
              v138 = (unsigned __int8 **)(v130 + 8 * v136);
              do
              {
                if (*v138)
                  sub_22F0ED7C8(a1, *v138);
                ++v138;
                v137 -= 8;
              }
              while (v137);
              v139 = *(unsigned int *)(v9 + 16);
              if (!(_DWORD)v139)
                goto LABEL_391;
              v140 = (unsigned __int8 **)(v130 + 8 * v139 + 8 * v139);
              v141 = 8 * v139;
              do
              {
                if (*v140)
                  sub_22F0ED7C8(a1, *v140);
                ++v140;
                v141 -= 8;
              }
              while (v141);
              v142 = *(unsigned int *)(v9 + 16);
              if (!(_DWORD)v142)
                goto LABEL_391;
              v143 = (unsigned __int8 **)(v130 + 8 * v142 + 8 * v142 + 8 * v142);
              v144 = 8 * v142;
              do
              {
                if (*v143)
                  sub_22F0ED7C8(a1, *v143);
                ++v143;
                v144 -= 8;
              }
              while (v144);
              v145 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v145)
              {
                v146 = (unsigned __int8 **)(v130 + 8 * v145 + 8 * v145 + 8 * v145 + 8 * v145);
                v147 = 8 * v145;
                do
                {
                  if (*v146)
                    sub_22F0ED7C8(a1, *v146);
                  ++v146;
                  v147 -= 8;
                }
                while (v147);
                v148 = *(unsigned int *)(v9 + 16);
              }
              else
              {
LABEL_391:
                v148 = 0;
              }
              v228 = *(unsigned __int8 **)(v130 + 8 * v148 + 8 * v148 + 8 * v148 + 8 * v148 + 8 * v148);
              if (v228)
              {
                sub_22F0ED7C8(a1, v228);
                v148 = *(unsigned int *)(v9 + 16);
              }
              v11 = *(unsigned __int8 **)(v130 + 8 * v148 + 8 * v148 + 8 * v148 + 8 * v148 + 8 * v148 + 8);
              if (v11)
                goto LABEL_11;
              break;
            case 0x2E:
              v210 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v210)
              {
                v211 = (unsigned __int8 **)(v9 + 136);
                v212 = 8 * v210;
                do
                {
                  if (*v211)
                    sub_22F0ED7C8(a1, *v211);
                  ++v211;
                  v212 -= 8;
                }
                while (v212);
              }
              break;
            case 0x35:
              v12 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v12)
              {
                v13 = 8 * v12;
                v14 = (unsigned __int8 **)(v9 + 24);
                do
                {
                  if (*v14)
                    sub_22F0ED7C8(a1, *v14);
                  ++v14;
                  v13 -= 8;
                }
                while (v13);
                v15 = *(unsigned int *)(v9 + 16);
                v16 = (uint64_t *)(v9 + 24 + 8 * v15);
                v229 = v16;
                v230 = 0;
                if ((_DWORD)v15)
                {
                  v17 = 0;
                  v18 = &v16[v15];
                  do
                  {
                    if ((v17 & 3) != 0)
                    {
                      v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
                      if (v19)
                      {
                        sub_22F0ED7C8(a1, *(unsigned __int8 **)(v19 + 40));
                        sub_22F0D8720((uint64_t)&v229);
                      }
                      else
                      {
                        v20 = (unsigned __int8 **)sub_22F3AC1A8(*v16);
                        sub_22F0ED7C8(a1, *v20);
                        sub_22F3F2FE0((uint64_t)&v229, 1);
                      }
                    }
                    else
                    {
                      sub_22F0ED7C8(a1, (unsigned __int8 *)*v16);
                      v229 = v16 + 1;
                    }
                    v16 = v229;
                    v17 = v230;
                  }
                  while (v229 != v18 || v230 != 0);
                }
              }
              break;
            case 0x3F:
              v86 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v86)
              {
                v87 = v9 + 24;
                v88 = 8 * v86;
                v89 = (unsigned __int8 **)(v9 + 24);
                do
                {
                  if (*v89)
                    sub_22F0ED7C8(a1, *v89);
                  ++v89;
                  v88 -= 8;
                }
                while (v88);
                v90 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v90)
                {
                  v91 = 8 * v90;
                  v92 = (unsigned __int8 **)(v87 + 8 * v90);
                  do
                  {
                    if (*v92)
                      sub_22F0ED7C8(a1, *v92);
                    ++v92;
                    v91 -= 8;
                  }
                  while (v91);
                }
              }
              break;
            case 0x42:
              (*(void (**)(_QWORD *, _QWORD))(*a1 + 56))(a1, *(_QWORD *)(v9 + 64));
              (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 40))(a1, *(_QWORD *)(v9 + 80), 0);
              v157 = v9 + 104;
              v158 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v158)
              {
                v159 = 8 * v158;
                v160 = (unsigned __int8 **)(v9 + 104);
                do
                {
                  if (*v160)
                    sub_22F0ED7C8(a1, *v160);
                  ++v160;
                  v159 -= 8;
                }
                while (v159);
              }
              v161 = *(unsigned __int8 **)(v9 + 24);
              if (v161)
                sub_22F0ED7C8(a1, v161);
              v162 = *(unsigned __int8 **)(v9 + 40);
              if (v162)
                sub_22F0ED7C8(a1, v162);
              v163 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v163)
              {
                v164 = 8 * v163;
                v165 = (unsigned __int8 **)(v157 + 8 * v163);
                do
                {
                  if (*v165)
                    sub_22F0ED7C8(a1, *v165);
                  ++v165;
                  v164 -= 8;
                }
                while (v164);
                v166 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v166)
                {
                  v167 = (unsigned __int8 **)(v157 + 8 * v166 + 8 * v166);
                  v168 = 8 * v166;
                  do
                  {
                    if (*v167)
                      sub_22F0ED7C8(a1, *v167);
                    ++v167;
                    v168 -= 8;
                  }
                  while (v168);
                  v169 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v169)
                  {
                    v170 = (unsigned __int8 **)(v157 + 8 * v169 + 8 * v169 + 8 * v169);
                    v171 = 8 * v169;
                    do
                    {
                      if (*v170)
                        sub_22F0ED7C8(a1, *v170);
                      ++v170;
                      v171 -= 8;
                    }
                    while (v171);
                    v172 = *(unsigned int *)(v9 + 16);
                    if ((_DWORD)v172)
                    {
                      v173 = (unsigned __int8 **)(v157 + 8 * v172 + 8 * v172 + 8 * v172 + 8 * v172);
                      v174 = 8 * v172;
                      do
                      {
                        if (*v173)
                          sub_22F0ED7C8(a1, *v173);
                        ++v173;
                        v174 -= 8;
                      }
                      while (v174);
                    }
                  }
                }
              }
              if (*(_DWORD *)(v9 + 48) == 1)
              {
                v175 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v175)
                {
                  v176 = (unsigned __int8 **)(v157 + 8 * v175 + 8 * v175 + 8 * v175 + 8 * v175 + 8 * v175);
                  v177 = 8 * v175;
                  do
                  {
                    if (*v176)
                      sub_22F0ED7C8(a1, *v176);
                    ++v176;
                    v177 -= 8;
                  }
                  while (v177);
                  v178 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v178)
                  {
                    v179 = (unsigned __int8 **)(v157 + 8 * v178 + 8 * v178 + 8 * v178 + 8 * v178 + 8 * v178 + 8 * v178);
                    v180 = 8 * v178;
                    do
                    {
                      if (*v179)
                        sub_22F0ED7C8(a1, *v179);
                      ++v179;
                      v180 -= 8;
                    }
                    while (v180);
                    v181 = *(unsigned int *)(v9 + 16);
                    if ((_DWORD)v181)
                    {
                      v182 = (unsigned __int8 **)(v157
                                                + 8 * v181
                                                + 8 * v181
                                                + 8 * v181
                                                + 8 * v181
                                                + 8 * v181
                                                + 8 * v181
                                                + 8 * v181);
                      v183 = 8 * v181;
                      do
                      {
                        if (*v182)
                          sub_22F0ED7C8(a1, *v182);
                        ++v182;
                        v183 -= 8;
                      }
                      while (v183);
                    }
                  }
                }
              }
              break;
            case 0x47:
              v184 = *(unsigned __int8 **)(v9 + 16);
              if (v184)
                sub_22F0ED7C8(a1, v184);
              v11 = *(unsigned __int8 **)(v9 + 64);
              if (v11)
LABEL_11:
                sub_22F0ED7C8(a1, v11);
              break;
            case 0x49:
              v222 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v222)
              {
                v223 = (unsigned __int8 **)(v9 + 24);
                v224 = 8 * v222;
                do
                {
                  if (*v223)
                    sub_22F0ED7C8(a1, *v223);
                  ++v223;
                  v224 -= 8;
                }
                while (v224);
              }
              break;
            case 0x4C:
              v185 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v185)
              {
                v186 = (unsigned __int8 **)(v9 + 24);
                v187 = 8 * v185;
                do
                {
                  if (*v186)
                    sub_22F0ED7C8(a1, *v186);
                  ++v186;
                  v187 -= 8;
                }
                while (v187);
              }
              break;
            case 0x4D:
              (*(void (**)(_QWORD *, _QWORD))(*a1 + 56))(a1, *(_QWORD *)(v9 + 56));
              (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 40))(a1, *(_QWORD *)(v9 + 72), 0);
              v44 = v9 + 96;
              v45 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v45)
              {
                v46 = 8 * v45;
                v47 = (unsigned __int8 **)(v9 + 96);
                do
                {
                  if (*v47)
                    sub_22F0ED7C8(a1, *v47);
                  ++v47;
                  v46 -= 8;
                }
                while (v46);
              }
              v48 = *(unsigned __int8 **)(v9 + 24);
              if (v48)
                sub_22F0ED7C8(a1, v48);
              v49 = *(unsigned __int8 **)(v9 + 40);
              if (v49)
                sub_22F0ED7C8(a1, v49);
              v50 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v50)
              {
                v51 = 8 * v50;
                v52 = (unsigned __int8 **)(v44 + 8 * v50);
                do
                {
                  if (*v52)
                    sub_22F0ED7C8(a1, *v52);
                  ++v52;
                  v51 -= 8;
                }
                while (v51);
                v53 = *(unsigned int *)(v9 + 16);
                if ((_DWORD)v53)
                {
                  v54 = (unsigned __int8 **)(v44 + 8 * v53 + 8 * v53);
                  v55 = 8 * v53;
                  do
                  {
                    if (*v54)
                      sub_22F0ED7C8(a1, *v54);
                    ++v54;
                    v55 -= 8;
                  }
                  while (v55);
                  v56 = *(unsigned int *)(v9 + 16);
                  if ((_DWORD)v56)
                  {
                    v57 = (unsigned __int8 **)(v44 + 8 * v56 + 8 * v56 + 8 * v56);
                    v58 = 8 * v56;
                    do
                    {
                      if (*v57)
                        sub_22F0ED7C8(a1, *v57);
                      ++v57;
                      v58 -= 8;
                    }
                    while (v58);
                    v59 = *(unsigned int *)(v9 + 16);
                    if ((_DWORD)v59)
                    {
                      v60 = (unsigned __int8 **)(v44 + 8 * v59 + 8 * v59 + 8 * v59 + 8 * v59);
                      v61 = 8 * v59;
                      do
                      {
                        if (*v60)
                          sub_22F0ED7C8(a1, *v60);
                        ++v60;
                        v61 -= 8;
                      }
                      while (v61);
                    }
                  }
                }
              }
              break;
            case 0x51:
              v22 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v22)
              {
                v23 = (unsigned __int8 **)(v9 + 104);
                v24 = 8 * v22;
                do
                {
                  if (*v23)
                    sub_22F0ED7C8(a1, *v23);
                  ++v23;
                  v24 -= 8;
                }
                while (v24);
              }
              break;
            case 0x59:
              v225 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v225)
              {
                v226 = (unsigned __int8 **)(v9 + 80);
                v227 = 8 * v225;
                do
                {
                  if (*v226)
                    sub_22F0ED7C8(a1, *v226);
                  ++v226;
                  v227 -= 8;
                }
                while (v227);
              }
              break;
            case 0x5A:
              v216 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v216)
              {
                v217 = (unsigned __int8 **)(v9 + 80);
                v218 = 8 * v216;
                do
                {
                  if (*v217)
                    sub_22F0ED7C8(a1, *v217);
                  ++v217;
                  v218 -= 8;
                }
                while (v218);
              }
              break;
            case 0x5B:
              v25 = *(unsigned int *)(v9 + 16);
              if ((_DWORD)v25)
              {
                v26 = 0;
                v27 = v9 + 24;
                v28 = 2 * v25;
                do
                {
                  v29 = *(unsigned __int8 **)(v27 + 8 * (v26 + 1));
                  sub_22F0ED7C8(a1, *(unsigned __int8 **)(v27 + 8 * v26));
                  if (v29)
                    sub_22F0ED7C8(a1, v29);
                  v26 += 2;
                }
                while (v28 != v26);
              }
              break;
            default:
              break;
          }
        }
        ++v6;
      }
      while (v6 != v8);
    }
  }
}

uint64_t sub_22F0EE82C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  LODWORD(v3) = a3;
  v5 = result;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 4 * v7) = v3;
  ++*(_DWORD *)(v6 + 8);
  if ((_DWORD)v3)
  {
    v3 = v3;
    do
    {
      result = sub_22F0EE8B8(v5, a2);
      a2 += 32;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_22F0EE8B8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_DWORD *)a2;
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  switch(*(_DWORD *)a2)
  {
    case 1:
    case 3:
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, *(_QWORD *)(a2 + 8));
      break;
    case 2:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, *(_QWORD *)(a2 + 8));
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, *(_QWORD *)(a2 + 16));
      break;
    case 4:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, *(_QWORD *)(a2 + 16));
      sub_22E466FDC(a2, (uint64_t)&v10);
      result = llvm::APSInt::Profile();
      if (v11 >= 0x41)
      {
        result = v10;
        if (v10)
          result = MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
      }
      break;
    case 5:
    case 6:
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22F0E9FEC(v3);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = 24 * v7;
        do
        {
          result = sub_22F0EE8B8(v3, v8);
          v8 += 24;
          v9 -= 24;
        }
        while (v9);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F0EEA4C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  const void *v12;

  *(_DWORD *)a1 = 4;
  v7 = a3[2];
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0x80000000 | v7 & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 4) = v7 & 0x7FFFFFFF | ((*((_BYTE *)a3 + 12) != 0) << 31);
  v8 = a3[2];
  if (v8 >= 0x41)
  {
    v10 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v11 = (void *)sub_22E3CD3D4(a2 + 2032, v10, 3);
    v9 = v11;
    if (a3[2] >= 0x41u)
      v12 = *(const void **)a3;
    else
      v12 = a3;
    memcpy(v11, v12, v10);
  }
  else
  {
    v9 = *(void **)a3;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a4;
  return a1;
}

uint64_t sub_22F0EEB00(uint64_t a1)
{
  unsigned int v1;

  if (*(_DWORD *)a1 != 1)
    __asm { BR              X10 }
  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v1 == 36)
    return (v1 >> 9) & 8 | BYTE1(v1) & 7 | 4;
  else
    return (v1 >> 9) & 8 | BYTE1(v1) & 7;
}

void sub_22F0EEB84()
{
  JUMPOUT(0x22F0EEB4CLL);
}

void sub_22F0EEBC0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = 24 * v1;
    do
    {
      v2 |= sub_22F0EEB00(v3);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  JUMPOUT(0x22F0EEB4CLL);
}

void sub_22F0EEC14(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (!sub_22EFCB718(v2) || (v3 = (_QWORD *)sub_22EFCAE04(v2)) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    v3 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((v4 & 4) != 0)
      v3 = (_QWORD *)*v3;
  }
  sub_22EFC7ADC((unint64_t)v3);
  JUMPOUT(0x22F0EEB4CLL);
}

void sub_22F0EEC5C()
{
  JUMPOUT(0x22F0EEB4CLL);
}

BOOL sub_22F0EEC64(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 == 1)
  {
    return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
  }
  else
  {
    if (v1 != 7)
      return ((1 << v1) & 0x13D) == 0;
    return **((unsigned __int8 **)a1 + 1) == 213;
  }
}

uint64_t sub_22F0EECC0(uint64_t a1)
{
  return sub_22F0EEB00(a1) & 1;
}

uint64_t sub_22F0EECD8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 4);
  v2 = v1 != 0;
  v3 = v1 != 0;
  LODWORD(v4) = v1 - 1;
  if (v3)
    v4 = v4;
  else
    v4 = 0;
  return v4 | (v2 << 32);
}

uint64_t sub_22F0EECF4()
{
  return 0;
}

uint64_t sub_22F0EED30@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_22F0EED38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t (**v34)();
  uint64_t v35;
  char v36;
  uint64_t v37;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = v6;
  v8 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v8;
  if (*(_DWORD *)a1 == 1)
  {
    v9 = *(_QWORD *)(a1 + 8);
LABEL_5:
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v9;
    v10 = *(_DWORD *)(a2 + 12);
    v11 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v11;
    if (v11 >= v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v11) = HIDWORD(v9);
LABEL_10:
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    switch(*(_DWORD *)a1)
    {
      case 2:
        sub_22E3CF554(a2, *(_QWORD *)(a1 + 8));
        v31 = *(_QWORD *)(a1 + 16);
        if (v31)
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
        else
          v32 = 0;
        goto LABEL_43;
      case 3:
        v32 = *(_QWORD *)(a1 + 8);
LABEL_43:
        sub_22E3CF554(a2, v32);
        break;
      case 4:
        sub_22E466FDC(a1, (uint64_t)&v34);
        llvm::APSInt::Profile();
        if (v35 >= 0x41 && v34)
          MEMORY[0x2348A0E84](v34, 0x1000C8000313F17);
        v9 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(a2 + 8);
        goto LABEL_5;
      case 5:
      case 6:
        v33 = v8;
        v34 = *(uint64_t (***)())(a1 + 8);
        v15 = sub_22F0F08CC((uint64_t *)&v34);
        if (v15 && (v16 = v15, (*(_DWORD *)(v15 + 28) & 0x7F) == 0x20))
        {
          if (v33 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v33 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v33) = 1;
          v24 = *(_DWORD *)(a2 + 12);
          v25 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v25;
          v26 = *(_DWORD *)(v16 + 64) & 0xFFFFF;
          if (v25 >= v24)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v25) = v26;
          v27 = *(_DWORD *)(a2 + 12);
          v28 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v28;
          v29 = *(_DWORD *)(v16 + 64) >> 20;
          if (v28 >= v27)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v28) = v29;
          v30 = *(_DWORD *)(a2 + 12);
          v22 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v22;
          LODWORD(v23) = *(unsigned __int8 *)(v16 + 80);
          if (v22 >= v30)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v22 = *(_DWORD *)(a2 + 8);
          }
        }
        else
        {
          v17 = v33;
          if (v33 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = 0;
          ++*(_DWORD *)(a2 + 8);
          sub_22EF65464(a3, &v34);
          v19 = v18;
          v20 = *(_DWORD *)(a2 + 8);
          if (v20 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = v19;
          v21 = *(_DWORD *)(a2 + 12);
          v22 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v22;
          if (v22 >= v21)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v22 = *(_DWORD *)(a2 + 8);
          }
          v23 = HIDWORD(v19);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v22) = v23;
        goto LABEL_10;
      case 7:
        v12 = *(unsigned __int8 **)(a1 + 8);
        v36 = 1;
        v34 = &off_24FAC6E70;
        v35 = a2;
        v37 = a3;
        sub_22F0E9FEC(&v34, v12);
        break;
      case 8:
        v13 = *(_DWORD *)(a1 + 4);
        if (v8 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v13;
        ++*(_DWORD *)(a2 + 8);
        if (*(_DWORD *)(a1 + 4))
        {
          v14 = 0;
          do
            sub_22F0EED38(*(_QWORD *)(a1 + 8) + 24 * v14++, a2, a3);
          while (v14 != *(_DWORD *)(a1 + 4));
        }
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22F0EF184(unsigned int *a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((_DWORD)v2 == *a2)
    __asm { BR              X10 }
  return 0;
}

void sub_22F0EF330(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3, uint64_t a4)
{
  llvm::raw_ostream *v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  int i;
  uint64_t v15;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _WORD *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  void *v40;
  const char *v41;
  llvm::raw_ostream *v42;
  int v43;
  BOOL v44;
  int v45;
  int v47;
  int v48;
  int v49;
  const char *v50;
  size_t v51;
  void *v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  const char *p_p;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v62;
  uint64_t v63;
  uint64_t *v64;
  void *v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int16 v75;
  __int128 __p;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int128 v80;

  v5 = a3;
  switch(*(_DWORD *)a1)
  {
    case 0:
      v8 = *((_QWORD *)a3 + 4);
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v8) > 9)
      {
        *(_WORD *)(v8 + 8) = 10597;
        *(_QWORD *)v8 = *(_QWORD *)"(no value)";
        v68 = *((_QWORD *)a3 + 4) + 10;
        goto LABEL_138;
      }
      llvm::raw_ostream::write(a3, "(no value)");
      return;
    case 1:
      v80 = *(_OWORD *)a2;
      v79 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v80 = v80 | 0x40000;
      v78 = 257;
      sub_22F119558(&v79, (uint64_t **)a3, (uint64_t)&v80, (const void ***)&__p, 0);
      return;
    case 2:
      v9 = *(_QWORD *)(a1 + 16);
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v12 = *(_DWORD *)(v9 + 28) & 0x7F;
      if (v11 == 45 && v12 == 72)
      {
        sub_22F3B9EC8(v9, a3, a2);
      }
      else
      {
        if ((v12 - 75) >= 0xFFFFFFE5)
        {
          if (v11 == 31)
            goto LABEL_117;
          if (v11 == 39)
          {
            v13 = *(_QWORD *)(v9 + 48);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 > 3)
              goto LABEL_117;
            for (i = 0; ; ++i)
            {
              v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
              if (!v15 || (*(_DWORD *)(v15 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
                  break;
                v15 = sub_22F10CF48(v15);
                if (!v15)
                  break;
              }
              v13 = *(_QWORD *)(v15 + 32);
            }
            v59 = sub_22F10ACF8(*v10);
            while (1)
            {
              v60 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
              if (!v60 || (*(_DWORD *)(v60 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
                  break;
                v60 = sub_22F10CF48(v60);
                if (!v60)
                  break;
              }
              v59 = *(_QWORD *)(v60 + 32);
              --i;
            }
            if (!i)
            {
LABEL_117:
              v62 = (_BYTE *)*((_QWORD *)v5 + 4);
              if (*((_BYTE **)v5 + 3) == v62)
              {
                llvm::raw_ostream::write(v5, "&");
              }
              else
              {
                *v62 = 38;
                ++*((_QWORD *)v5 + 4);
              }
            }
          }
        }
        v63 = sub_22EFC72E8(v9);
        sub_22EFBA008(v9, v5, v63 + 15104);
      }
      return;
    case 3:
      v17 = (_DWORD *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v17 > 6uLL)
      {
        *(_DWORD *)((char *)v17 + 3) = 1920233580;
        *v17 = 1819047278;
        v68 = *((_QWORD *)a3 + 4) + 7;
        goto LABEL_138;
      }
      llvm::raw_ostream::write(a3, "nullptr");
      return;
    case 4:
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF0);
      sub_22E466FDC(a1, (uint64_t)&v80);
      if ((*(_BYTE *)(a2 + 5) & 0x80) == 0)
        goto LABEL_45;
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v19)
        goto LABEL_45;
      if (*(_BYTE *)(v19 + 16) != 44)
        goto LABEL_45;
      v20 = sub_22F114198(*(_QWORD *)(v19 + 24));
      v21 = sub_22E49F9AC(v20);
      sub_22EFC3500(v20);
      if (!v21)
        goto LABEL_45;
LABEL_25:
      if (!sub_22E4634B4(v21 + 64, (uint64_t)&v80))
      {
        sub_22EFBA008(v21, v5, a2);
        goto LABEL_147;
      }
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v21)
          break;
        if ((*(_DWORD *)(v21 + 28) & 0x7F) == 0x43)
          goto LABEL_25;
      }
LABEL_45:
      v30 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x1000000000) != 0)
        v31 = 0;
      else
        v31 = a4;
      v32 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
      v33 = *(_DWORD *)(v32 + 16);
      v34 = v33 & 0xFF800FF;
      if (v32)
        v35 = v34 == 87031819;
      else
        v35 = 0;
      if (v35)
      {
        if ((v30 & 0x1000000000) == 0)
        {
          v43 = DWORD2(v80);
          if (DWORD2(v80) > 0x40)
            v44 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) == v43;
          else
            v44 = (_QWORD)v80 == 0;
          v49 = v44;
          if (v49)
            v50 = "false";
          else
            v50 = "true";
          if (v49)
            v51 = 5;
          else
            v51 = 4;
          v52 = (void *)*((_QWORD *)v5 + 4);
          if (v51 > *((_QWORD *)v5 + 3) - (_QWORD)v52)
          {
            v53 = v5;
LABEL_96:
            llvm::raw_ostream::write(v53, v50);
            goto LABEL_147;
          }
          memcpy(v52, v50, v51);
          v70 = *((_QWORD *)v5 + 4) + v51;
          goto LABEL_153;
        }
        goto LABEL_143;
      }
      v36 = *(_DWORD *)(v32 + 16);
      if (v32)
        v37 = v36 == 11;
      else
        v37 = 0;
      v38 = v37;
      if (!v37)
      {
        if (v36 == 11)
          goto LABEL_73;
        if ((v31 & 1) != 0)
        {
LABEL_98:
          v54 = (_BYTE *)*((_QWORD *)v5 + 4);
          if (*((_BYTE **)v5 + 3) == v54)
          {
            v5 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, "(");
          }
          else
          {
            *v54 = 40;
            ++*((_QWORD *)v5 + 4);
          }
          v79 = *(_QWORD *)(v18 + 8);
          v77 = 0;
          __p = 0uLL;
          sub_22F119374(&v79, &__p, a2);
          if (v77 >= 0)
            p_p = (const char *)&__p;
          else
            p_p = (const char *)__p;
          v56 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, p_p);
          v57 = v56;
          v58 = (_BYTE *)*((_QWORD *)v56 + 4);
          if (*((_BYTE **)v56 + 3) == v58)
          {
            v57 = (llvm::raw_ostream *)llvm::raw_ostream::write(v56, ")");
          }
          else
          {
            *v58 = 41;
            ++*((_QWORD *)v56 + 4);
          }
          llvm::APInt::print((llvm::APInt *)&v80, v57);
          if (SHIBYTE(v77) < 0)
            operator delete((void *)__p);
          goto LABEL_147;
        }
LABEL_143:
        llvm::APInt::print((llvm::APInt *)&v80, v5);
        goto LABEL_147;
      }
      if (((v33 >> 19) & 0x1FF) - 167 <= 0xC && ((1 << ((v33 >> 19) + 89)) & 0x1803) != 0)
      {
        if (v31)
        {
          if (v34 == 88080395)
          {
            v65 = (void *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v65 <= 0xEuLL)
            {
              v41 = "(unsigned char)";
              v42 = v5;
              goto LABEL_127;
            }
            qmemcpy(v65, "(unsigned char)", 15);
            v73 = *((_QWORD *)v5 + 4) + 15;
LABEL_170:
            *((_QWORD *)v5 + 4) = v73;
            goto LABEL_128;
          }
          if (v34 == 93847563)
          {
            v40 = (void *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v40 <= 0xCuLL)
            {
              v41 = "(signed char)";
              v42 = v5;
LABEL_127:
              llvm::raw_ostream::write(v42, v41);
              goto LABEL_128;
            }
            qmemcpy(v40, "(signed char)", 13);
            v73 = *((_QWORD *)v5 + 4) + 13;
            goto LABEL_170;
          }
        }
LABEL_128:
        v66 = &v80;
        if (DWORD2(v80) >= 0x41)
          v66 = (__int128 *)v80;
        LODWORD(v67) = *(_DWORD *)v66;
        v47 = 0;
        goto LABEL_146;
      }
LABEL_73:
      v45 = (v33 >> 19) & 0x1FF;
      if ((v45 - 167) > 0xD || ((1 << ((v33 >> 19) + 89)) & 0x383F) == 0)
      {
        if (!v31)
          goto LABEL_143;
        switch(v45)
        {
          case 174:
            llvm::APInt::print((llvm::APInt *)&v80, v5);
            v69 = (char *)*((_QWORD *)v5 + 4);
            if (*((char **)v5 + 3) == v69)
            {
              v50 = "U";
              goto LABEL_162;
            }
            v74 = 85;
            goto LABEL_175;
          case 175:
            llvm::APInt::print((llvm::APInt *)&v80, v5);
            v71 = (__int16 *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v71 <= 1uLL)
            {
              v50 = "UL";
              goto LABEL_165;
            }
            v75 = 19541;
            goto LABEL_177;
          case 176:
            llvm::APInt::print((llvm::APInt *)&v80, v5);
            v72 = *((_QWORD *)v5 + 4);
            if ((unint64_t)(*((_QWORD *)v5 + 3) - v72) <= 2)
            {
              v50 = "ULL";
              v53 = v5;
              goto LABEL_96;
            }
            *(_BYTE *)(v72 + 2) = 76;
            *(_WORD *)v72 = 19541;
            v70 = *((_QWORD *)v5 + 4) + 3;
            break;
          case 182:
            goto LABEL_143;
          case 183:
            llvm::APInt::print((llvm::APInt *)&v80, v5);
            v69 = (char *)*((_QWORD *)v5 + 4);
            if (*((char **)v5 + 3) == v69)
            {
              v50 = "L";
LABEL_162:
              v53 = v5;
              goto LABEL_96;
            }
            v74 = 76;
LABEL_175:
            *v69 = v74;
            v70 = *((_QWORD *)v5 + 4) + 1;
            break;
          case 184:
            llvm::APInt::print((llvm::APInt *)&v80, v5);
            v71 = (__int16 *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v71 <= 1uLL)
            {
              v50 = "LL";
LABEL_165:
              v53 = v5;
              goto LABEL_96;
            }
            v75 = 19532;
LABEL_177:
            *v71 = v75;
            v70 = *((_QWORD *)v5 + 4) + 2;
            break;
          default:
            goto LABEL_98;
        }
LABEL_153:
        *((_QWORD *)v5 + 4) = v70;
        goto LABEL_147;
      }
      if ((v30 & 0x1000000000) != 0)
        goto LABEL_143;
      if (v38)
      {
        v47 = 1;
        if (v45 != 169 && v45 != 180)
        {
          v48 = v33 & 0xFF80000;
          if (v48 == 89128960)
          {
            v47 = 2;
          }
          else if (v48 == 89653248)
          {
            v47 = 3;
          }
          else
          {
            v47 = 4 * (v48 == 90177536);
          }
        }
      }
      else
      {
        v47 = 0;
      }
      if (BYTE12(v80))
      {
        v64 = (uint64_t *)&v80;
        if (DWORD2(v80) >= 0x41)
          v64 = (uint64_t *)v80;
        goto LABEL_145;
      }
      if (DWORD2(v80) > 0x40)
      {
        v64 = (uint64_t *)v80;
LABEL_145:
        v67 = *v64;
        goto LABEL_146;
      }
      v67 = (uint64_t)((_QWORD)v80 << -(uint64_t)DWORD2(v80)) >> -(uint64_t)DWORD2(v80);
LABEL_146:
      sub_22EFF906C(v67, v47, (char **)v5);
LABEL_147:
      if (DWORD2(v80) >= 0x41 && (_QWORD)v80)
        MEMORY[0x2348A0E84](v80, 0x1000C8000313F17);
      return;
    case 5:
      *(_QWORD *)&__p = *(_QWORD *)(a1 + 8);
      sub_22F402048((uint64_t *)&__p, a3, a2, 2);
      return;
    case 6:
      *(_QWORD *)&__p = *(_QWORD *)(a1 + 8);
      sub_22F402048((uint64_t *)&__p, a3, a2, 1);
      v22 = *((_QWORD *)v5 + 4);
      if ((unint64_t)(*((_QWORD *)v5 + 3) - v22) > 2)
      {
        *(_BYTE *)(v22 + 2) = 46;
        *(_WORD *)v22 = 11822;
        v68 = *((_QWORD *)v5 + 4) + 3;
        goto LABEL_138;
      }
      llvm::raw_ostream::write(v5, "...");
      return;
    case 7:
      sub_22F0D9044(*(_DWORD **)(a1 + 8), (uint64_t)a3, 0, (__int128 *)a2, 0, "\n", 1uLL, 0);
      return;
    case 8:
      v23 = (_BYTE *)*((_QWORD *)a3 + 4);
      if (*((_BYTE **)a3 + 3) == v23)
      {
        llvm::raw_ostream::write(a3, "<");
      }
      else
      {
        *v23 = 60;
        ++*((_QWORD *)a3 + 4);
      }
      v24 = *(unsigned int *)(a1 + 4);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        v26 = 24 * v24;
        v27 = 1;
        do
        {
          if ((v27 & 1) == 0)
          {
            v28 = (_WORD *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v28 > 1uLL)
            {
              *v28 = 8236;
              *((_QWORD *)v5 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v5, ", ");
            }
          }
          sub_22F0EF330(v25, a2, v5, a4);
          v27 = 0;
          v25 += 24;
          v26 -= 24;
        }
        while (v26);
      }
      v29 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) == v29)
      {
        llvm::raw_ostream::write(v5, ">");
      }
      else
      {
        *v29 = 62;
        v68 = *((_QWORD *)v5 + 4) + 1;
LABEL_138:
        *((_QWORD *)v5 + 4) = v68;
      }
      return;
    default:
      return;
  }
}

void sub_22F0EFE08(uint64_t a1)
{
  __asm { BR              X11 }
}

unint64_t sub_22F0EFE48@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  sub_22F0D4E74(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL);
  return v1 | (HIDWORD(v1) << 32);
}

void sub_22F0EFFCC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

unsigned __int8 **sub_22F0F0020()
{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;

  v1 = *v0;
  if (!*v0)
  {
    v1 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v0[1]);
    *v0 = v1;
  }
  v1[*v1 + 1] = 1;
  v2 = *v0;
  v3 = **v0;
  *v2 = v3 + 1;
  *(_QWORD *)&v2[8 * v3 + 16] = "(null template argument)";
  return v0;
}

unint64_t *sub_22F0F03D8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v11;

  *a1 = 0;
  v11 = sub_22E3CD3D4(a2 + 2032, 24, 3);
  *(_QWORD *)v11 = a3;
  *(_QWORD *)(v11 + 8) = a4;
  *(_DWORD *)(v11 + 16) = a5;
  *(_DWORD *)(v11 + 20) = a6;
  *a1 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  return a1;
}

__n128 sub_22F0F043C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  v3 = sub_22E3CD3D4(a1 + 2032, (32 * *(unsigned int *)(a2 + 8)) | 0x10, 3);
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 276);
  v5 = *(unsigned int *)(a2 + 8);
  *(_DWORD *)(v3 + 8) = v5;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 32 * v5;
    do
    {
      v8 = (_OWORD *)(v3 + 16 + v6);
      v9 = *(_QWORD *)a2 + v6;
      result = *(__n128 *)v9;
      v10 = *(_OWORD *)(v9 + 16);
      *v8 = *(_OWORD *)v9;
      v8[1] = v10;
      v6 += 32;
    }
    while (v7 != v6);
  }
  return result;
}

__n128 sub_22F0F04BC(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  int v5;
  unsigned int v10;
  _OWORD *v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;

  a1[2] = a2;
  *a1 = *(_DWORD *)(a3 + 272);
  a1[1] = *(_DWORD *)(a3 + 276);
  v5 = *(_DWORD *)(a3 + 8);
  a1[3] = v5;
  if (v5)
  {
    v10 = 0;
    do
    {
      *a5 |= sub_22F0EEB00(*(_QWORD *)a3 + 32 * v10);
      v11 = (_OWORD *)(a4 + 32 * v10);
      v12 = *(_QWORD *)a3 + 32 * v10;
      result = *(__n128 *)v12;
      v14 = *(_OWORD *)(v12 + 16);
      *v11 = *(_OWORD *)v12;
      v11[1] = v14;
      ++v10;
    }
    while (v10 != a1[3]);
  }
  return result;
}

__n128 sub_22F0F0558(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  *(_DWORD *)(a3 + 272) = *a1;
  *(_DWORD *)(a3 + 276) = a1[1];
  if (a1[3])
  {
    v6 = 0;
    do
    {
      v7 = sub_22E78DF7C(a3, a2 + 32 * v6, 1);
      v8 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
      result = *(__n128 *)v7;
      v10 = *(_OWORD *)(v7 + 16);
      *v8 = *(_OWORD *)v7;
      v8[1] = v10;
      ++*(_DWORD *)(a3 + 8);
      ++v6;
    }
    while (v6 != a1[3]);
  }
  return result;
}

uint64_t sub_22F0F05E4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    v12 = *(_QWORD *)(result + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = v12;
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v3;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    v13 = HIDWORD(v3);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v3) = v13;
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = HIDWORD(v3);
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v4;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v11) = HIDWORD(v4);
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22F0F0708(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;

  v4 = result;
  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v12 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v12;
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a2;
  v6 = *(_DWORD *)(v4 + 12);
  v7 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v7;
  if (v7 >= v6)
  {
    v13 = HIDWORD(a2);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v13;
    v7 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v7) = HIDWORD(a2);
  v8 = *(_DWORD *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v9) = a3;
  v10 = *(_DWORD *)(v4 + 12);
  v11 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v11;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v11) = HIDWORD(a3);
  ++*(_DWORD *)(v4 + 8);
  return result;
}

_QWORD *sub_22F0F0834(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL sub_22F0F083C(_QWORD *a1)
{
  return *a1 < 8uLL;
}

uint64_t sub_22F0F084C(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  BOOL v3;
  int v5;
  unsigned int v6;

  v1 = *a1 & 6;
  v2 = (_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if (v1)
    v3 = 1;
  else
    v3 = v2 == 0;
  if (v3)
  {
    if (v1 == 4)
    {
      return 3;
    }
    else if (v1 == 6)
    {
      return 4;
    }
    else
    {
      v5 = *v2 & 3;
      if (v5)
      {
        if (v5 == 2)
          v6 = 5;
        else
          v6 = 6;
        if (v5 == 1)
          return 2;
        else
          return v6;
      }
      else
      {
        return 1;
      }
    }
  }
  else if ((v2[7] & 0x7E) == 0x2E)
  {
    return 7;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_22F0F08CC(uint64_t *a1)
{
  uint64_t i;
  uint64_t v2;
  unint64_t result;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  for (i = *a1; ; i = *(_QWORD *)(result + 16))
  {
    v2 = i & 6;
    result = i & 0xFFFFFFFFFFFFFFF8;
    v4 = (i & 0xFFFFFFFFFFFFFFF8) == 0;
    if (v2)
      v5 = 1;
    else
      v5 = result == 0;
    if (!v5)
    {
      if ((*(_DWORD *)(result + 28) & 0x7E) == 0x2E)
        return *(_QWORD *)(result + 64);
      return result;
    }
    if (v4 || v2 != 4)
      break;
  }
  if (v4 || v2 != 2 || (*(_DWORD *)result & 3) != 2)
    return 0;
  v6 = *(_QWORD *)(result + 24);
  return sub_22F0F08CC(&v6);
}

unint64_t sub_22F0F0964(_QWORD *a1)
{
  if ((*a1 & 6) == 4)
    return *a1 & 0xFFFFFFFFFFFFFFF8;
  else
    return 0;
}

unint64_t sub_22F0F097C(_QWORD *a1)
{
  _BYTE *v1;

  v1 = (_BYTE *)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if ((*a1 & 6) != 2 || v1 == 0)
    return 0;
  if ((*v1 & 3) != 0)
    return 0;
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

unint64_t sub_22F0F09AC(_QWORD *a1)
{
  _DWORD *v1;

  v1 = (_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if ((*a1 & 6) != 2 || v1 == 0)
    return 0;
  if ((*v1 & 3) == 1)
    return *a1 & 0xFFFFFFFFFFFFFFF8;
  return 0;
}

unint64_t sub_22F0F09E0(_QWORD *a1)
{
  if ((~*(_DWORD *)a1 & 6) != 0)
    return 0;
  else
    return *a1 & 0xFFFFFFFFFFFFFFF8;
}

unint64_t sub_22F0F09F8(uint64_t *a1)
{
  unint64_t v2;
  uint64_t (*i)(void);
  uint64_t v4;

  v2 = sub_22F0F08CC(a1);
  if (!v2)
    return *a1;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)v2 + 56); ; i = *(uint64_t (**)(void))(*(_QWORD *)v4 + 48))
  {
    v4 = i();
    if ((*(_WORD *)(v4 + 30) & 0x180) == 0)
      break;
  }
  return v4 & 0xFFFFFFFFFFFFFFF9;
}

uint64_t sub_22F0F0A4C(uint64_t *a1)
{
  int v2;
  unsigned __int8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  BOOL v10;

  v2 = sub_22F0F084C(a1);
  if (v2 == 3)
  {
    v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
    v10 = (*a1 & 6) == 4;
  }
  else
  {
    if (v2 != 4)
    {
      v3 = v2 == 6;
      goto LABEL_4;
    }
    v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
    v10 = (~*(_DWORD *)a1 & 6) == 0;
  }
  if (!v10)
    v9 = 0;
  v3 = sub_22F0AAC5C(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8) & 0xF;
LABEL_4:
  v4 = sub_22F0F08CC(a1);
  if (!v4)
  {
    v3 |= 6u;
    return v3;
  }
  if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x20)
  {
    if (*(_BYTE *)(v4 + 80))
      v8 = 7;
    else
      v8 = 6;
    v3 |= v8;
  }
  v5 = *(_QWORD *)(v4 + 16);
  if ((v5 & 4) != 0)
  {
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (!v6)
      return v3;
  }
  else
  {
    if (v5 < 8)
      return v3;
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  if (sub_22EFC7ADC(v6))
    v3 |= 6u;
  return v3;
}

uint64_t sub_22F0F0B38(uint64_t *a1)
{
  return (sub_22F0F0A4C(a1) >> 2) & 1;
}

unsigned __int8 **sub_22F0F0B50(unsigned __int8 **a1, uint64_t a2)
{
  _BYTE *v3;
  void *v4;
  size_t v5;
  unint64_t v7[2];
  uint64_t v8;
  int v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;
  void **p_p;
  void *__p;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[109];

  v21[108] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = a2;
  __p = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = MEMORY[0x24BED83D8] + 16;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22F1D4230((uint64_t)v21);
  v21[0] |= 0x800100uLL;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v8);
  sub_22E462F04(v7, (unsigned int *)v21);
  sub_22F402048(&v20, (llvm::raw_ostream *)&v8, (uint64_t)v7, 1);
  v3 = v12;
  if ((unint64_t)v12 >= v11)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v8);
  }
  else
  {
    ++v12;
    *v3 = 39;
  }
  if (v12 != v10)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v8);
  if (v19 >= 0)
    v4 = &__p;
  else
    v4 = __p;
  if (v19 >= 0)
    v5 = HIBYTE(v19) & 0x7F;
  else
    v5 = v18;
  sub_22E3B89A8(a1, v4, v5);
  sub_22E54B4D4((uint64_t)v21);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  return a1;
}

uint64_t sub_22F0F0CE8(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t *v4;
  unsigned int v6[216];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x2000000000;
  *(_WORD *)(a1 + 1056) = 257;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_QWORD *)(a1 + 1088) = a2;
  *(_BYTE *)(a1 + 1096) = a3;
  *(_QWORD *)(a1 + 1104) = &unk_22F5CABC9;
  *(_DWORD *)(a1 + 1112) = -1;
  v4 = (unint64_t *)(a1 + 1136);
  *(_OWORD *)(a1 + 1120) = 0u;
  sub_22F1D4230((uint64_t)v6);
  sub_22E462F04(v4, v6);
  sub_22E54B4D4((uint64_t)v6);
  *(_QWORD *)(a1 + 1152) = 0;
  return a1;
}

void sub_22F0F0DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  void *v16;
  int *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  void *v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _OWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  void *v41;
  void *v42;
  llvm::raw_ostream *v43;
  _DWORD *v44;
  llvm::raw_ostream *v45;
  uint64_t v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  int v49;
  const char *v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  int v59;
  int v60;
  const char *v61;
  const char *v62;
  const char *v63;
  const char *v64;
  int v65;
  const char *v66;
  int v67;
  int v68;
  int v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  char v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  int v77;
  const char *v78;
  const char *v79;
  unsigned int v80;
  __int16 v81;
  const char *v82;
  char v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  int v88;
  const char *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  __int128 v94;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = *(unsigned __int8 *)(a1 + 1096);
  if (*(_BYTE *)(a1 + 1096))
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a1 + 1088), 4, 1, 0);
  v6 = a1 + 1088;
  switch(*(_WORD *)(a2 + 32))
  {
    case 0:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "AddressSpace";
        goto LABEL_1000;
      }
      v49 = 1701011824;
      v50 = "AddressSpace";
      goto LABEL_1534;
    case 1:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "ArmMveStrictPolymorphism";
        goto LABEL_1000;
      }
      v51 = "ArmMveStrictPolymorphism";
      goto LABEL_1503;
    case 2:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "BTFTypeTag";
        goto LABEL_1000;
      }
      v52 = 26465;
      v53 = "BTFTypeTag";
      goto LABEL_1522;
    case 3:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "CmseNSCall";
        goto LABEL_1000;
      }
      v52 = 27756;
      v53 = "CmseNSCall";
      goto LABEL_1522;
    case 4:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "MetalConstantAddressSpace";
        goto LABEL_1000;
      }
      v54 = "MetalConstantAddressSpace";
      goto LABEL_1545;
    case 5:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalDeviceAddressSpace";
        goto LABEL_1000;
      }
      v55 = "MetalDeviceAddressSpace";
      goto LABEL_1501;
    case 6:
      v7 = *(llvm::raw_ostream **)v6;
      v14 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v14 <= 0x1AuLL)
      {
        v9 = "MetalObjectDataAddressSpace";
        goto LABEL_1000;
      }
      v56 = "MetalObjectDataAddressSpace";
      goto LABEL_1506;
    case 7:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalRayDataAddressSpace";
        goto LABEL_1000;
      }
      v51 = "MetalRayDataAddressSpace";
      goto LABEL_1503;
    case 8:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalThreadAddressSpace";
        goto LABEL_1000;
      }
      v55 = "MetalThreadAddressSpace";
      goto LABEL_1501;
    case 9:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "MetalThreadGroupAddressSpace";
        goto LABEL_1000;
      }
      v57 = "MetalThreadGroupAddressSpace";
      goto LABEL_1428;
    case 0xA:
      v7 = *(llvm::raw_ostream **)v6;
      v16 = *(void **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v16 <= 0x25uLL)
      {
        v9 = "MetalThreadGroupImageblockAddressSpace";
        goto LABEL_1000;
      }
      qmemcpy(v16, "MetalThreadGroupImageblockAddressSpace", 38);
      v58 = *((_QWORD *)v7 + 4) + 38;
      goto LABEL_1548;
    case 0xB:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "MetalVisible";
        goto LABEL_1000;
      }
      v49 = 1701601897;
      v50 = "MetalVisible";
      goto LABEL_1534;
    case 0xC:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "NoDeref";
        goto LABEL_1000;
      }
      v59 = 1717924453;
      goto LABEL_1243;
    case 0xD:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "ObjCGC";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 17223;
      v60 = 1131045455;
      goto LABEL_1543;
    case 0xE:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "ObjCInertUnsafeUnretained";
        goto LABEL_1000;
      }
      v54 = "ObjCInertUnsafeUnretained";
      goto LABEL_1545;
    case 0xF:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "ObjCKindOf";
        goto LABEL_1000;
      }
      v52 = 26191;
      v53 = "ObjCKindOf";
      goto LABEL_1522;
    case 0x10:
      v7 = *(llvm::raw_ostream **)v6;
      v19 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v19 <= 0x19uLL)
      {
        v9 = "OpenCLConstantAddressSpace";
        goto LABEL_1000;
      }
      v61 = "OpenCLConstantAddressSpace";
      goto LABEL_1466;
    case 0x11:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "OpenCLGenericAddressSpace";
        goto LABEL_1000;
      }
      v54 = "OpenCLGenericAddressSpace";
      goto LABEL_1545;
    case 0x12:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "OpenCLGlobalAddressSpace";
        goto LABEL_1000;
      }
      v51 = "OpenCLGlobalAddressSpace";
      goto LABEL_1503;
    case 0x13:
      v7 = *(llvm::raw_ostream **)v6;
      v20 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v20 <= 0x1DuLL)
      {
        v9 = "OpenCLGlobalDeviceAddressSpace";
        goto LABEL_1000;
      }
      v62 = "OpenCLGlobalDeviceAddressSpace";
      goto LABEL_1341;
    case 0x14:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "OpenCLGlobalHostAddressSpace";
        goto LABEL_1000;
      }
      v57 = "OpenCLGlobalHostAddressSpace";
      goto LABEL_1428;
    case 0x15:
      v7 = *(llvm::raw_ostream **)v6;
      v21 = *(void **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v21 <= 0x20uLL)
      {
        v9 = "OpenCLInteropConstantAddressSpace";
        goto LABEL_1000;
      }
      qmemcpy(v21, "OpenCLInteropConstantAddressSpace", 33);
      v58 = *((_QWORD *)v7 + 4) + 33;
      goto LABEL_1548;
    case 0x16:
      v7 = *(llvm::raw_ostream **)v6;
      v22 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v22 <= 0x1EuLL)
      {
        v9 = "OpenCLInteropGlobalAddressSpace";
        goto LABEL_1000;
      }
      v63 = "OpenCLInteropGlobalAddressSpace";
      goto LABEL_1414;
    case 0x17:
      v7 = *(llvm::raw_ostream **)v6;
      v20 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v20 <= 0x1DuLL)
      {
        v9 = "OpenCLInteropLocalAddressSpace";
        goto LABEL_1000;
      }
      v62 = "OpenCLInteropLocalAddressSpace";
      goto LABEL_1341;
    case 0x18:
      v7 = *(llvm::raw_ostream **)v6;
      v23 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v23 <= 0x1FuLL)
      {
        v9 = "OpenCLInteropPrivateAddressSpace";
        goto LABEL_1000;
      }
      v64 = "OpenCLInteropPrivateAddressSpace";
      goto LABEL_1187;
    case 0x19:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "OpenCLLocalAddressSpace";
        goto LABEL_1000;
      }
      v55 = "OpenCLLocalAddressSpace";
      goto LABEL_1501;
    case 0x1A:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "OpenCLPrivateAddressSpace";
        goto LABEL_1000;
      }
      v54 = "OpenCLPrivateAddressSpace";
      goto LABEL_1545;
    case 0x1B:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "PointerAuth";
        goto LABEL_1000;
      }
      v65 = 1752462657;
      v66 = "PointerAuth";
      goto LABEL_1517;
    case 0x1C:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Ptr32";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 50;
      v67 = 863138896;
      goto LABEL_1388;
    case 0x1D:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Ptr64";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 52;
      v67 = 913470544;
      goto LABEL_1388;
    case 0x1E:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "PtrAutoAttr";
        goto LABEL_1000;
      }
      v65 = 1920234561;
      v66 = "PtrAutoAttr";
      goto LABEL_1517;
    case 0x1F:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "PtrAutoNullTerminatedAttr";
        goto LABEL_1000;
      }
      v54 = "PtrAutoNullTerminatedAttr";
      goto LABEL_1545;
    case 0x20:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "SPtr";
        goto LABEL_1000;
      }
      v68 = 1920225363;
      goto LABEL_1508;
    case 0x21:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "TypeNonNull";
        goto LABEL_1000;
      }
      v65 = 1819047246;
      v66 = "TypeNonNull";
      goto LABEL_1517;
    case 0x22:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "TypeNullUnspecified";
        goto LABEL_1000;
      }
      v69 = 1684367718;
      v70 = "TypeNullUnspecified";
      goto LABEL_1497;
    case 0x23:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "TypeNullable";
        goto LABEL_1000;
      }
      v49 = 1701601889;
      v50 = "TypeNullable";
      goto LABEL_1534;
    case 0x24:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "TypeNullableResult";
        goto LABEL_1000;
      }
      v71 = 29804;
      v72 = "TypeNullableResult";
      goto LABEL_1536;
    case 0x25:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "UPtr";
        goto LABEL_1000;
      }
      v68 = 1920225365;
      goto LABEL_1508;
    case 0x26:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "XnuUsageSemantics";
        goto LABEL_1000;
      }
      v73 = 115;
      v74 = "XnuUsageSemantics";
      goto LABEL_1524;
    case 0x27:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "FallThrough";
        goto LABEL_1000;
      }
      v65 = 1751610735;
      v66 = "FallThrough";
      goto LABEL_1517;
    case 0x28:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Likely";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 31084;
      v60 = 1701538124;
      goto LABEL_1543;
    case 0x29:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "MustTail";
        goto LABEL_1000;
      }
      v75 = 0x6C6961547473754DLL;
      goto LABEL_1512;
    case 0x2A:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "OpenCLUnrollHint";
        goto LABEL_1000;
      }
      v76 = "OpenCLUnrollHint";
      goto LABEL_1547;
    case 0x2B:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Suppress";
        goto LABEL_1000;
      }
      v75 = 0x7373657270707553;
      goto LABEL_1512;
    case 0x2C:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Unlikely";
        goto LABEL_1000;
      }
      v75 = 0x796C656B696C6E55;
      goto LABEL_1512;
    case 0x2D:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "AlwaysInline";
        goto LABEL_1000;
      }
      v49 = 1701734764;
      v50 = "AlwaysInline";
      goto LABEL_1534;
    case 0x2E:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "AnalyzerSuppress";
        goto LABEL_1000;
      }
      v76 = "AnalyzerSuppress";
      goto LABEL_1547;
    case 0x2F:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "NoInline";
        goto LABEL_1000;
      }
      v75 = 0x656E696C6E496F4ELL;
      goto LABEL_1512;
    case 0x30:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "NoMerge";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1701278309;
      v77 = 1699573582;
      goto LABEL_1426;
    case 0x31:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AArch64SVEPcs";
        goto LABEL_1000;
      }
      v78 = "AArch64SVEPcs";
      goto LABEL_1519;
    case 0x32:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "AArch64VectorPcs";
        goto LABEL_1000;
      }
      v76 = "AArch64VectorPcs";
      goto LABEL_1547;
    case 0x33:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AcquireHandle";
        goto LABEL_1000;
      }
      v78 = "AcquireHandle";
      goto LABEL_1519;
    case 0x34:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "AnyX86NoCfCheck";
        goto LABEL_1000;
      }
      v79 = "AnyX86NoCfCheck";
      goto LABEL_1529;
    case 0x35:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "CDecl";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 108;
      v67 = 1667580995;
      goto LABEL_1388;
    case 0x36:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "FastCall";
        goto LABEL_1000;
      }
      v80 = 1953718598;
      goto LABEL_1085;
    case 0x37:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "IntelOclBicc";
        goto LABEL_1000;
      }
      v49 = 1667459394;
      v50 = "IntelOclBicc";
      goto LABEL_1534;
    case 0x38:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "IntersectionCall";
        goto LABEL_1000;
      }
      v76 = "IntersectionCall";
      goto LABEL_1547;
    case 0x39:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "LifetimeBound";
        goto LABEL_1000;
      }
      v78 = "LifetimeBound";
      goto LABEL_1519;
    case 0x3A:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "MSABI";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 73;
      v67 = 1111577421;
      goto LABEL_1388;
    case 0x3B:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "NSReturnsRetained";
        goto LABEL_1000;
      }
      v73 = 100;
      v74 = "NSReturnsRetained";
      goto LABEL_1524;
    case 0x3C:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "ObjCOwnership";
        goto LABEL_1000;
      }
      v78 = "ObjCOwnership";
      goto LABEL_1519;
    case 0x3D:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Pascal";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 27745;
      v60 = 1668505936;
      goto LABEL_1543;
    case 0x3E:
      v7 = *(llvm::raw_ostream **)v6;
      v34 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v34) <= 2)
      {
        v9 = "Pcs";
        goto LABEL_1000;
      }
      *(_BYTE *)(v34 + 2) = 115;
      v81 = 25424;
      goto LABEL_1204;
    case 0x3F:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "PreserveAll";
        goto LABEL_1000;
      }
      v65 = 1819033957;
      v66 = "PreserveAll";
      goto LABEL_1517;
    case 0x40:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "PreserveMost";
        goto LABEL_1000;
      }
      v49 = 1953722189;
      v50 = "PreserveMost";
      goto LABEL_1534;
    case 0x41:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "RegCall";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1819042115;
      v77 = 1130849618;
      goto LABEL_1426;
    case 0x42:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "StdCall";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1819042115;
      v77 = 1130656851;
      goto LABEL_1426;
    case 0x43:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "SwiftAsyncCall";
        goto LABEL_1000;
      }
      v82 = "SwiftAsyncCall";
      goto LABEL_1539;
    case 0x44:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "SwiftCall";
        goto LABEL_1000;
      }
      v83 = 108;
      v84 = "SwiftCall";
      goto LABEL_1510;
    case 0x45:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "SysVABI";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1229078870;
      v77 = 1450408275;
      goto LABEL_1426;
    case 0x46:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "ThisCall";
        goto LABEL_1000;
      }
      v80 = 1936287828;
LABEL_1085:
      v75 = v80 | 0x6C6C614300000000;
      goto LABEL_1512;
    case 0x47:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "VAListSize";
        goto LABEL_1000;
      }
      v52 = 25978;
      v53 = "VAListSize";
      goto LABEL_1522;
    case 0x48:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "VectorCall";
        goto LABEL_1000;
      }
      v52 = 27756;
      v53 = "VectorCall";
      goto LABEL_1522;
    case 0x49:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "SwiftAsyncContext";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "SwiftAsyncContext";
      goto LABEL_1524;
    case 0x4A:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "SwiftContext";
        goto LABEL_1000;
      }
      v49 = 1954047348;
      v50 = "SwiftContext";
      goto LABEL_1534;
    case 0x4B:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "SwiftErrorResult";
        goto LABEL_1000;
      }
      v76 = "SwiftErrorResult";
      goto LABEL_1547;
    case 0x4C:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "SwiftIndirectResult";
        goto LABEL_1000;
      }
      v69 = 1953265011;
      v70 = "SwiftIndirectResult";
      goto LABEL_1497;
    case 0x4D:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Annotate";
        goto LABEL_1000;
      }
      v75 = 0x657461746F6E6E41;
      goto LABEL_1512;
    case 0x4E:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "CFConsumed";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "CFConsumed";
      goto LABEL_1522;
    case 0x4F:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "CarriesDependency";
        goto LABEL_1000;
      }
      v73 = 121;
      v74 = "CarriesDependency";
      goto LABEL_1524;
    case 0x50:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "NSConsumed";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "NSConsumed";
      goto LABEL_1522;
    case 0x51:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "NonNull";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1819047246;
      v77 = 1315860302;
      goto LABEL_1426;
    case 0x52:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "OSConsumed";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "OSConsumed";
      goto LABEL_1522;
    case 0x53:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "PassObjectSize";
        goto LABEL_1000;
      }
      v82 = "PassObjectSize";
      goto LABEL_1539;
    case 0x54:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "ReleaseHandle";
        goto LABEL_1000;
      }
      v78 = "ReleaseHandle";
      goto LABEL_1519;
    case 0x55:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "UseHandle";
        goto LABEL_1000;
      }
      v83 = 101;
      v84 = "UseHandle";
      goto LABEL_1510;
    case 0x56:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "AMDGPUFlatWorkGroupSize";
        goto LABEL_1000;
      }
      v55 = "AMDGPUFlatWorkGroupSize";
      goto LABEL_1501;
    case 0x57:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AMDGPUNumSGPR";
        goto LABEL_1000;
      }
      v78 = "AMDGPUNumSGPR";
      goto LABEL_1519;
    case 0x58:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AMDGPUNumVGPR";
        goto LABEL_1000;
      }
      v78 = "AMDGPUNumVGPR";
      goto LABEL_1519;
    case 0x59:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "AMDGPUWavesPerEU";
        goto LABEL_1000;
      }
      v76 = "AMDGPUWavesPerEU";
      goto LABEL_1547;
    case 0x5A:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "ARMInterrupt";
        goto LABEL_1000;
      }
      v49 = 1953527154;
      v50 = "ARMInterrupt";
      goto LABEL_1534;
    case 0x5B:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "AVRInterrupt";
        goto LABEL_1000;
      }
      v49 = 1953527154;
      v50 = "AVRInterrupt";
      goto LABEL_1534;
    case 0x5C:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "AVRSignal";
        goto LABEL_1000;
      }
      v83 = 108;
      v84 = "AVRSignal";
      goto LABEL_1510;
    case 0x5D:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "AcquireCapability";
        goto LABEL_1000;
      }
      v73 = 121;
      v74 = "AcquireCapability";
      goto LABEL_1524;
    case 0x5E:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AcquiredAfter";
        goto LABEL_1000;
      }
      v78 = "AcquiredAfter";
      goto LABEL_1519;
    case 0x5F:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "AcquiredBefore";
        goto LABEL_1000;
      }
      v82 = "AcquiredBefore";
      goto LABEL_1539;
    case 0x60:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "AlignMac68k";
        goto LABEL_1000;
      }
      v65 = 1798846051;
      v66 = "AlignMac68k";
      goto LABEL_1517;
    case 0x61:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "AlignNatural";
        goto LABEL_1000;
      }
      v49 = 1818325621;
      v50 = "AlignNatural";
      goto LABEL_1534;
    case 0x62:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "Aligned";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1684368999;
      v77 = 1734962241;
      goto LABEL_1426;
    case 0x63:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "AllocAlign";
        goto LABEL_1000;
      }
      v52 = 28263;
      v53 = "AllocAlign";
      goto LABEL_1522;
    case 0x64:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "AllocSize";
        goto LABEL_1000;
      }
      v83 = 101;
      v84 = "AllocSize";
      goto LABEL_1510;
    case 0x65:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AlwaysDestroy";
        goto LABEL_1000;
      }
      v78 = "AlwaysDestroy";
      goto LABEL_1519;
    case 0x66:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "AnalyzerNoReturn";
        goto LABEL_1000;
      }
      v76 = "AnalyzerNoReturn";
      goto LABEL_1547;
    case 0x67:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "AnyX86Interrupt";
        goto LABEL_1000;
      }
      v79 = "AnyX86Interrupt";
      goto LABEL_1529;
    case 0x68:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "AnyX86NoCallerSavedRegisters";
        goto LABEL_1000;
      }
      v57 = "AnyX86NoCallerSavedRegisters";
      goto LABEL_1428;
    case 0x69:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "ArcWeakrefUnavailable";
        goto LABEL_1000;
      }
      v85 = "ArcWeakrefUnavailable";
      goto LABEL_1541;
    case 0x6A:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "ArgumentWithTypeTag";
        goto LABEL_1000;
      }
      v69 = 1734431845;
      v70 = "ArgumentWithTypeTag";
      goto LABEL_1497;
    case 0x6B:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "ArmBuiltinAlias";
        goto LABEL_1000;
      }
      v79 = "ArmBuiltinAlias";
      goto LABEL_1529;
    case 0x6C:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Artificial";
        goto LABEL_1000;
      }
      v52 = 27745;
      v53 = "Artificial";
      goto LABEL_1522;
    case 0x6D:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "AsmLabel";
        goto LABEL_1000;
      }
      v86 = 0x62614C6D7341;
      goto LABEL_1347;
    case 0x6E:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "AssertCapability";
        goto LABEL_1000;
      }
      v76 = "AssertCapability";
      goto LABEL_1547;
    case 0x6F:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "AssertExclusiveLock";
        goto LABEL_1000;
      }
      v69 = 1801678668;
      v70 = "AssertExclusiveLock";
      goto LABEL_1497;
    case 0x70:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "AssertSharedLock";
        goto LABEL_1000;
      }
      v76 = "AssertSharedLock";
      goto LABEL_1547;
    case 0x71:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "AssumeAligned";
        goto LABEL_1000;
      }
      v78 = "AssumeAligned";
      goto LABEL_1519;
    case 0x72:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Assumption";
        goto LABEL_1000;
      }
      v52 = 28271;
      v53 = "Assumption";
      goto LABEL_1522;
    case 0x73:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "Availability";
        goto LABEL_1000;
      }
      v49 = 2037672300;
      v50 = "Availability";
      goto LABEL_1534;
    case 0x74:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "BPFPreserveAccessIndex";
        goto LABEL_1000;
      }
      v87 = "BPFPreserveAccessIndex";
      goto LABEL_1527;
    case 0x75:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "BTFDeclTag";
        goto LABEL_1000;
      }
      v52 = 26465;
      v53 = "BTFDeclTag";
      goto LABEL_1522;
    case 0x76:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Blocks";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 29547;
      v60 = 1668246594;
      goto LABEL_1543;
    case 0x77:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "Builtin";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1852404844;
      v77 = 1818850626;
      goto LABEL_1426;
    case 0x78:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "C11NoReturn";
        goto LABEL_1000;
      }
      v65 = 1852994932;
      v66 = "C11NoReturn";
      goto LABEL_1517;
    case 0x79:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "CFAuditedTransfer";
        goto LABEL_1000;
      }
      v73 = 114;
      v74 = "CFAuditedTransfer";
      goto LABEL_1524;
    case 0x7A:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "CFGuard";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1685217653;
      v77 = 1967605315;
      goto LABEL_1426;
    case 0x7B:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "CFICanonicalJumpTable";
        goto LABEL_1000;
      }
      v85 = "CFICanonicalJumpTable";
      goto LABEL_1541;
    case 0x7C:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "CFReturnsNotRetained";
        goto LABEL_1000;
      }
      v88 = 1684369001;
      v89 = "CFReturnsNotRetained";
      goto LABEL_1491;
    case 0x7D:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "CFReturnsRetained";
        goto LABEL_1000;
      }
      v73 = 100;
      v74 = "CFReturnsRetained";
      goto LABEL_1524;
    case 0x7E:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "CFUnknownTransfer";
        goto LABEL_1000;
      }
      v73 = 114;
      v74 = "CFUnknownTransfer";
      goto LABEL_1524;
    case 0x7F:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "CPUDispatch";
        goto LABEL_1000;
      }
      v65 = 1751348321;
      v66 = "CPUDispatch";
      goto LABEL_1517;
    case 0x80:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "CPUSpecific";
        goto LABEL_1000;
      }
      v65 = 1667851881;
      v66 = "CPUSpecific";
      goto LABEL_1517;
    case 0x81:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "CUDAConstant";
        goto LABEL_1000;
      }
      v49 = 1953390964;
      v50 = "CUDAConstant";
      goto LABEL_1534;
    case 0x82:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "CUDADevice";
        goto LABEL_1000;
      }
      v52 = 25955;
      v53 = "CUDADevice";
      goto LABEL_1522;
    case 0x83:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "CUDADeviceBuiltinSurfaceType";
        goto LABEL_1000;
      }
      v57 = "CUDADeviceBuiltinSurfaceType";
      goto LABEL_1428;
    case 0x84:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "CUDADeviceBuiltinTextureType";
        goto LABEL_1000;
      }
      v57 = "CUDADeviceBuiltinTextureType";
      goto LABEL_1428;
    case 0x85:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "CUDAGlobal";
        goto LABEL_1000;
      }
      v52 = 27745;
      v53 = "CUDAGlobal";
      goto LABEL_1522;
    case 0x86:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "CUDAHost";
        goto LABEL_1000;
      }
      v75 = 0x74736F4841445543;
      goto LABEL_1512;
    case 0x87:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "CUDAInvalidTarget";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "CUDAInvalidTarget";
      goto LABEL_1524;
    case 0x88:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "CUDALaunchBounds";
        goto LABEL_1000;
      }
      v76 = "CUDALaunchBounds";
      goto LABEL_1547;
    case 0x89:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "CUDAShared";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "CUDAShared";
      goto LABEL_1522;
    case 0x8A:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "CXX11NoReturn";
        goto LABEL_1000;
      }
      v78 = "CXX11NoReturn";
      goto LABEL_1519;
    case 0x8B:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "CallableWhen";
        goto LABEL_1000;
      }
      v49 = 1852139607;
      v50 = "CallableWhen";
      goto LABEL_1534;
    case 0x8C:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Callback";
        goto LABEL_1000;
      }
      v75 = 0x6B6361626C6C6143;
      goto LABEL_1512;
    case 0x8D:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Capability";
        goto LABEL_1000;
      }
      v52 = 31092;
      v53 = "Capability";
      goto LABEL_1522;
    case 0x8E:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "CapturedRecord";
        goto LABEL_1000;
      }
      v82 = "CapturedRecord";
      goto LABEL_1539;
    case 0x8F:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "Cleanup";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1886744161;
      v77 = 1634036803;
      goto LABEL_1426;
    case 0x90:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "CmseNSEntry";
        goto LABEL_1000;
      }
      v65 = 2037544046;
      v66 = "CmseNSEntry";
      goto LABEL_1517;
    case 0x91:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "CodeSeg";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1734693733;
      v77 = 1701080899;
      goto LABEL_1426;
    case 0x92:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Cold";
        goto LABEL_1000;
      }
      v68 = 1684827971;
      goto LABEL_1508;
    case 0x93:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Common";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 28271;
      v60 = 1835888451;
      goto LABEL_1543;
    case 0x94:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Const";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 116;
      v67 = 1936617283;
      goto LABEL_1388;
    case 0x95:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "ConstInit";
        goto LABEL_1000;
      }
      v83 = 116;
      v84 = "ConstInit";
      goto LABEL_1510;
    case 0x96:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "Constructor";
        goto LABEL_1000;
      }
      v65 = 1919906915;
      v66 = "Constructor";
      goto LABEL_1517;
    case 0x97:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Consumable";
        goto LABEL_1000;
      }
      v52 = 25964;
      v53 = "Consumable";
      goto LABEL_1522;
    case 0x98:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "ConsumableAutoCast";
        goto LABEL_1000;
      }
      v71 = 29811;
      v72 = "ConsumableAutoCast";
      goto LABEL_1536;
    case 0x99:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "ConsumableSetOnRead";
        goto LABEL_1000;
      }
      v69 = 1684104530;
      v70 = "ConsumableSetOnRead";
      goto LABEL_1497;
    case 0x9A:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Convergent";
        goto LABEL_1000;
      }
      v52 = 29806;
      v53 = "Convergent";
      goto LABEL_1522;
    case 0x9B:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "DLLExport";
        goto LABEL_1000;
      }
      v83 = 116;
      v84 = "DLLExport";
      goto LABEL_1510;
    case 0x9C:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "DLLExportStaticLocal";
        goto LABEL_1000;
      }
      v88 = 1818321775;
      v89 = "DLLExportStaticLocal";
      goto LABEL_1491;
    case 0x9D:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "DLLImport";
        goto LABEL_1000;
      }
      v83 = 116;
      v84 = "DLLImport";
      goto LABEL_1510;
    case 0x9E:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "DLLImportStaticLocal";
        goto LABEL_1000;
      }
      v88 = 1818321775;
      v89 = "DLLImportStaticLocal";
      goto LABEL_1491;
    case 0x9F:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "DependerDecls";
        goto LABEL_1000;
      }
      v78 = "DependerDecls";
      goto LABEL_1519;
    case 0xA0:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Deprecated";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "Deprecated";
      goto LABEL_1522;
    case 0xA1:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Destructor";
        goto LABEL_1000;
      }
      v52 = 29295;
      v53 = "Destructor";
      goto LABEL_1522;
    case 0xA2:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "DiagnoseAsBuiltin";
        goto LABEL_1000;
      }
      v73 = 110;
      v74 = "DiagnoseAsBuiltin";
      goto LABEL_1524;
    case 0xA3:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "DiagnoseIf";
        goto LABEL_1000;
      }
      v52 = 26185;
      v53 = "DiagnoseIf";
      goto LABEL_1522;
    case 0xA4:
      v7 = *(llvm::raw_ostream **)v6;
      v22 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v22 <= 0x1EuLL)
      {
        v9 = "DisableSanitizerInstrumentation";
        goto LABEL_1000;
      }
      v63 = "DisableSanitizerInstrumentation";
      goto LABEL_1414;
    case 0xA5:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "DisableTailCalls";
        goto LABEL_1000;
      }
      v76 = "DisableTailCalls";
      goto LABEL_1547;
    case 0xA6:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "EmptyBases";
        goto LABEL_1000;
      }
      v52 = 29541;
      v53 = "EmptyBases";
      goto LABEL_1522;
    case 0xA7:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "EnableIf";
        goto LABEL_1000;
      }
      v75 = 0x6649656C62616E45;
      goto LABEL_1512;
    case 0xA8:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "EnforceTCB";
        goto LABEL_1000;
      }
      v52 = 16963;
      v53 = "EnforceTCB";
      goto LABEL_1522;
    case 0xA9:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "EnforceTCBLeaf";
        goto LABEL_1000;
      }
      v82 = "EnforceTCBLeaf";
      goto LABEL_1539;
    case 0xAA:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "EnumExtensibility";
        goto LABEL_1000;
      }
      v73 = 121;
      v74 = "EnumExtensibility";
      goto LABEL_1524;
    case 0xAB:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Error";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 114;
      v67 = 1869771333;
      goto LABEL_1388;
    case 0xAC:
      v7 = *(llvm::raw_ostream **)v6;
      v23 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v23 <= 0x1FuLL)
      {
        v9 = "ExcludeFromExplicitInstantiation";
        goto LABEL_1000;
      }
      v64 = "ExcludeFromExplicitInstantiation";
LABEL_1187:
      v90 = *((_OWORD *)v64 + 1);
      *v23 = *(_OWORD *)v64;
      v23[1] = v90;
      v58 = *((_QWORD *)v7 + 4) + 32;
      goto LABEL_1548;
    case 0xAD:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "ExclusiveTrylockFunction";
        goto LABEL_1000;
      }
      v51 = "ExclusiveTrylockFunction";
      goto LABEL_1503;
    case 0xAE:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "ExternalSourceSymbol";
        goto LABEL_1000;
      }
      v88 = 1819239021;
      v89 = "ExternalSourceSymbol";
      goto LABEL_1491;
    case 0xAF:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "ExternallyInitialized";
        goto LABEL_1000;
      }
      v85 = "ExternallyInitialized";
      goto LABEL_1541;
    case 0xB0:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Final";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 108;
      v67 = 1634625862;
      goto LABEL_1388;
    case 0xB1:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "FlagEnum";
        goto LABEL_1000;
      }
      v75 = 0x6D756E4567616C46;
      goto LABEL_1512;
    case 0xB2:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "Flatten";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1852142708;
      v77 = 1952541766;
      goto LABEL_1426;
    case 0xB3:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Format";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 29793;
      v60 = 1836216134;
      goto LABEL_1543;
    case 0xB4:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "FormatArg";
        goto LABEL_1000;
      }
      v83 = 103;
      v84 = "FormatArg";
      goto LABEL_1510;
    case 0xB5:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "GNUInline";
        goto LABEL_1000;
      }
      v83 = 101;
      v84 = "GNUInline";
      goto LABEL_1510;
    case 0xB6:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "GuardedBy";
        goto LABEL_1000;
      }
      v83 = 121;
      v84 = "GuardedBy";
      goto LABEL_1510;
    case 0xB7:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "GuardedVar";
        goto LABEL_1000;
      }
      v52 = 29281;
      v53 = "GuardedVar";
      goto LABEL_1522;
    case 0xB8:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "HIPManaged";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "HIPManaged";
      goto LABEL_1522;
    case 0xB9:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "HLSLNumThreads";
        goto LABEL_1000;
      }
      v82 = "HLSLNumThreads";
      goto LABEL_1539;
    case 0xBA:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "HLSLSV_GroupIndex";
        goto LABEL_1000;
      }
      v73 = 120;
      v74 = "HLSLSV_GroupIndex";
      goto LABEL_1524;
    case 0xBB:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "HLSLShader";
        goto LABEL_1000;
      }
      v52 = 29285;
      v53 = "HLSLShader";
      goto LABEL_1522;
    case 0xBC:
      v7 = *(llvm::raw_ostream **)v6;
      v34 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v34) <= 2)
      {
        v9 = "Hot";
        goto LABEL_1000;
      }
      *(_BYTE *)(v34 + 2) = 116;
      v81 = 28488;
LABEL_1204:
      *(_WORD *)v34 = v81;
      v58 = *((_QWORD *)v7 + 4) + 3;
      goto LABEL_1548;
    case 0xBD:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "IBAction";
        goto LABEL_1000;
      }
      v91 = 0x697463414249;
      goto LABEL_1241;
    case 0xBE:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "IBOutlet";
        goto LABEL_1000;
      }
      v75 = 0x74656C74754F4249;
      goto LABEL_1512;
    case 0xBF:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "IBOutletCollection";
        goto LABEL_1000;
      }
      v71 = 28271;
      v72 = "IBOutletCollection";
      goto LABEL_1536;
    case 0xC0:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "InitPriority";
        goto LABEL_1000;
      }
      v49 = 2037672306;
      v50 = "InitPriority";
      goto LABEL_1534;
    case 0xC1:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "InternalLinkage";
        goto LABEL_1000;
      }
      v79 = "InternalLinkage";
      goto LABEL_1529;
    case 0xC2:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "LTOVisibilityPublic";
        goto LABEL_1000;
      }
      v69 = 1667853410;
      v70 = "LTOVisibilityPublic";
      goto LABEL_1497;
    case 0xC3:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "LayoutVersion";
        goto LABEL_1000;
      }
      v78 = "LayoutVersion";
      goto LABEL_1519;
    case 0xC4:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Leaf";
        goto LABEL_1000;
      }
      v68 = 1717658956;
      goto LABEL_1508;
    case 0xC5:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "LockReturned";
        goto LABEL_1000;
      }
      v49 = 1684369010;
      v50 = "LockReturned";
      goto LABEL_1534;
    case 0xC6:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "LocksExcluded";
        goto LABEL_1000;
      }
      v78 = "LocksExcluded";
      goto LABEL_1519;
    case 0xC7:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "M68kInterrupt";
        goto LABEL_1000;
      }
      v78 = "M68kInterrupt";
      goto LABEL_1519;
    case 0xC8:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MIGServerRoutine";
        goto LABEL_1000;
      }
      v76 = "MIGServerRoutine";
      goto LABEL_1547;
    case 0xC9:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MSAllocator";
        goto LABEL_1000;
      }
      v65 = 1919906913;
      v66 = "MSAllocator";
      goto LABEL_1517;
    case 0xCA:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MSInheritance";
        goto LABEL_1000;
      }
      v78 = "MSInheritance";
      goto LABEL_1519;
    case 0xCB:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "MSNoVTable";
        goto LABEL_1000;
      }
      v52 = 25964;
      v53 = "MSNoVTable";
      goto LABEL_1522;
    case 0xCC:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MSP430Interrupt";
        goto LABEL_1000;
      }
      v79 = "MSP430Interrupt";
      goto LABEL_1529;
    case 0xCD:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "MSStruct";
        goto LABEL_1000;
      }
      v92 = 0x75727453534DLL;
      goto LABEL_1316;
    case 0xCE:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "MSVtorDisp";
        goto LABEL_1000;
      }
      v52 = 28787;
      v53 = "MSVtorDisp";
      goto LABEL_1522;
    case 0xCF:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MaxFieldAlignment";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "MaxFieldAlignment";
      goto LABEL_1524;
    case 0xD0:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "MayAlias";
        goto LABEL_1000;
      }
      v75 = 0x7361696C4179614DLL;
      goto LABEL_1512;
    case 0xD1:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "MaybeUndef";
        goto LABEL_1000;
      }
      v52 = 26213;
      v53 = "MaybeUndef";
      goto LABEL_1522;
    case 0xD2:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "MetalFunctionConstant";
        goto LABEL_1000;
      }
      v85 = "MetalFunctionConstant";
      goto LABEL_1541;
    case 0xD3:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "MicroMips";
        goto LABEL_1000;
      }
      v83 = 115;
      v84 = "MicroMips";
      goto LABEL_1510;
    case 0xD4:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "MinSize";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1702521171;
      v77 = 1399744845;
      goto LABEL_1426;
    case 0xD5:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "MinVectorWidth";
        goto LABEL_1000;
      }
      v82 = "MinVectorWidth";
      goto LABEL_1539;
    case 0xD6:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Mips16";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 13873;
      v60 = 1936746829;
      goto LABEL_1543;
    case 0xD7:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MipsInterrupt";
        goto LABEL_1000;
      }
      v78 = "MipsInterrupt";
      goto LABEL_1519;
    case 0xD8:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "MipsLongCall";
        goto LABEL_1000;
      }
      v49 = 1819042115;
      v50 = "MipsLongCall";
      goto LABEL_1534;
    case 0xD9:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MipsShortCall";
        goto LABEL_1000;
      }
      v78 = "MipsShortCall";
      goto LABEL_1519;
    case 0xDA:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "NSConsumesSelf";
        goto LABEL_1000;
      }
      v82 = "NSConsumesSelf";
      goto LABEL_1539;
    case 0xDB:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "NSErrorDomain";
        goto LABEL_1000;
      }
      v78 = "NSErrorDomain";
      goto LABEL_1519;
    case 0xDC:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "NSReturnsAutoreleased";
        goto LABEL_1000;
      }
      v85 = "NSReturnsAutoreleased";
      goto LABEL_1541;
    case 0xDD:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "NSReturnsNotRetained";
        goto LABEL_1000;
      }
      v88 = 1684369001;
      v89 = "NSReturnsNotRetained";
      goto LABEL_1491;
    case 0xDE:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Naked";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 100;
      v67 = 1701536078;
      goto LABEL_1388;
    case 0xDF:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "NoAlias";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1935763820;
      v77 = 1816227662;
      goto LABEL_1426;
    case 0xE0:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "NoCommon";
        goto LABEL_1000;
      }
      v91 = 0x6D6D6F436F4ELL;
LABEL_1241:
      v75 = v91 & 0xFFFFFFFFFFFFLL | 0x6E6F000000000000;
      goto LABEL_1512;
    case 0xE1:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "NoDebug";
        goto LABEL_1000;
      }
      v59 = 1735746149;
LABEL_1243:
      *(int *)((char *)v17 + 3) = v59;
      v77 = 1698983758;
      goto LABEL_1426;
    case 0xE2:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "NoDestroy";
        goto LABEL_1000;
      }
      v83 = 121;
      v84 = "NoDestroy";
      goto LABEL_1510;
    case 0xE3:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "NoDuplicate";
        goto LABEL_1000;
      }
      v65 = 1702125923;
      v66 = "NoDuplicate";
      goto LABEL_1517;
    case 0xE4:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "NoInstrumentFunction";
        goto LABEL_1000;
      }
      v88 = 1852795252;
      v89 = "NoInstrumentFunction";
      goto LABEL_1491;
    case 0xE5:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "NoMicroMips";
        goto LABEL_1000;
      }
      v65 = 1936746829;
      v66 = "NoMicroMips";
      goto LABEL_1517;
    case 0xE6:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "NoMips16";
        goto LABEL_1000;
      }
      v75 = 0x36317370694D6F4ELL;
      goto LABEL_1512;
    case 0xE7:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "NoProfileFunction";
        goto LABEL_1000;
      }
      v73 = 110;
      v74 = "NoProfileFunction";
      goto LABEL_1524;
    case 0xE8:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "NoRandomizeLayout";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "NoRandomizeLayout";
      goto LABEL_1524;
    case 0xE9:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "NoReturn";
        goto LABEL_1000;
      }
      v75 = 0x6E72757465526F4ELL;
      goto LABEL_1512;
    case 0xEA:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "NoSanitize";
        goto LABEL_1000;
      }
      v52 = 25978;
      v53 = "NoSanitize";
      goto LABEL_1522;
    case 0xEB:
      v7 = *(llvm::raw_ostream **)v6;
      v19 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v19 <= 0x19uLL)
      {
        v9 = "NoSpeculativeLoadHardening";
        goto LABEL_1000;
      }
      v61 = "NoSpeculativeLoadHardening";
      goto LABEL_1466;
    case 0xEC:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "NoSplitStack";
        goto LABEL_1000;
      }
      v49 = 1801675124;
      v50 = "NoSplitStack";
      goto LABEL_1534;
    case 0xED:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "NoStackProtector";
        goto LABEL_1000;
      }
      v76 = "NoStackProtector";
      goto LABEL_1547;
    case 0xEE:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "NoThreadSafetyAnalysis";
        goto LABEL_1000;
      }
      v87 = "NoThreadSafetyAnalysis";
      goto LABEL_1527;
    case 0xEF:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "NoThrow";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 2003792488;
      v77 = 1750363982;
      goto LABEL_1426;
    case 0xF0:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "NoTracepoint";
        goto LABEL_1000;
      }
      v49 = 1953393007;
      v50 = "NoTracepoint";
      goto LABEL_1534;
    case 0xF1:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "NoUniqueAddress";
        goto LABEL_1000;
      }
      v79 = "NoUniqueAddress";
      goto LABEL_1529;
    case 0xF2:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "NotTailCalled";
        goto LABEL_1000;
      }
      v78 = "NotTailCalled";
      goto LABEL_1519;
    case 0xF3:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "OMPAllocateDecl";
        goto LABEL_1000;
      }
      v79 = "OMPAllocateDecl";
      goto LABEL_1529;
    case 0xF4:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "OMPCaptureNoInit";
        goto LABEL_1000;
      }
      v76 = "OMPCaptureNoInit";
      goto LABEL_1547;
    case 0xF5:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "OMPDeclareTargetDecl";
        goto LABEL_1000;
      }
      v88 = 1818453316;
      v89 = "OMPDeclareTargetDecl";
      goto LABEL_1491;
    case 0xF6:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "OMPDeclareVariant";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "OMPDeclareVariant";
      goto LABEL_1524;
    case 0xF7:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "OMPThreadPrivateDecl";
        goto LABEL_1000;
      }
      v88 = 1818453316;
      v89 = "OMPThreadPrivateDecl";
      goto LABEL_1491;
    case 0xF8:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "OSConsumesThis";
        goto LABEL_1000;
      }
      v82 = "OSConsumesThis";
      goto LABEL_1539;
    case 0xF9:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "OSReturnsNotRetained";
        goto LABEL_1000;
      }
      v88 = 1684369001;
      v89 = "OSReturnsNotRetained";
      goto LABEL_1491;
    case 0xFA:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "OSReturnsRetained";
        goto LABEL_1000;
      }
      v73 = 100;
      v74 = "OSReturnsRetained";
      goto LABEL_1524;
    case 0xFB:
      v7 = *(llvm::raw_ostream **)v6;
      v19 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v19 <= 0x19uLL)
      {
        v9 = "OSReturnsRetainedOnNonZero";
        goto LABEL_1000;
      }
      v61 = "OSReturnsRetainedOnNonZero";
      goto LABEL_1466;
    case 0xFC:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "OSReturnsRetainedOnZero";
        goto LABEL_1000;
      }
      v55 = "OSReturnsRetainedOnZero";
      goto LABEL_1501;
    case 0xFD:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "ObjCBridge";
        goto LABEL_1000;
      }
      v52 = 25959;
      v53 = "ObjCBridge";
      goto LABEL_1522;
    case 0xFE:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ObjCBridgeMutable";
        goto LABEL_1000;
      }
      v73 = 101;
      v74 = "ObjCBridgeMutable";
      goto LABEL_1524;
    case 0xFF:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ObjCBridgeRelated";
        goto LABEL_1000;
      }
      v73 = 100;
      v74 = "ObjCBridgeRelated";
      goto LABEL_1524;
    case 0x100:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "ObjCCompleteDefinition";
        goto LABEL_1000;
      }
      v87 = "ObjCCompleteDefinition";
      goto LABEL_1527;
    case 0x101:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "ObjCException";
        goto LABEL_1000;
      }
      v78 = "ObjCException";
      goto LABEL_1519;
    case 0x102:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "ObjCExplicitProtocolImpl";
        goto LABEL_1000;
      }
      v51 = "ObjCExplicitProtocolImpl";
      goto LABEL_1503;
    case 0x103:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "ObjCExternallyRetained";
        goto LABEL_1000;
      }
      v87 = "ObjCExternallyRetained";
      goto LABEL_1527;
    case 0x104:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "ObjCIndependentClass";
        goto LABEL_1000;
      }
      v88 = 1936941420;
      v89 = "ObjCIndependentClass";
      goto LABEL_1491;
    case 0x105:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "ObjCMethodFamily";
        goto LABEL_1000;
      }
      v76 = "ObjCMethodFamily";
      goto LABEL_1547;
    case 0x106:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "ObjCNSObject";
        goto LABEL_1000;
      }
      v49 = 1952671082;
      v50 = "ObjCNSObject";
      goto LABEL_1534;
    case 0x107:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "ObjCPreciseLifetime";
        goto LABEL_1000;
      }
      v69 = 1701669236;
      v70 = "ObjCPreciseLifetime";
      goto LABEL_1497;
    case 0x108:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "ObjCRequiresPropertyDefs";
        goto LABEL_1000;
      }
      v51 = "ObjCRequiresPropertyDefs";
      goto LABEL_1503;
    case 0x109:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ObjCRequiresSuper";
        goto LABEL_1000;
      }
      v73 = 114;
      v74 = "ObjCRequiresSuper";
      goto LABEL_1524;
    case 0x10A:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "ObjCReturnsInnerPointer";
        goto LABEL_1000;
      }
      v55 = "ObjCReturnsInnerPointer";
      goto LABEL_1501;
    case 0x10B:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "ObjCRootClass";
        goto LABEL_1000;
      }
      v78 = "ObjCRootClass";
      goto LABEL_1519;
    case 0x10C:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "ObjCSubclassingRestricted";
        goto LABEL_1000;
      }
      v54 = "ObjCSubclassingRestricted";
      goto LABEL_1545;
    case 0x10D:
      v7 = *(llvm::raw_ostream **)v6;
      v19 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v19 <= 0x19uLL)
      {
        v9 = "ObjCSuppressDirectProperty";
        goto LABEL_1000;
      }
      v61 = "ObjCSuppressDirectProperty";
      goto LABEL_1466;
    case 0x10E:
      v7 = *(llvm::raw_ostream **)v6;
      v14 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v14 <= 0x1AuLL)
      {
        v9 = "OpenCLIntelReqdSubGroupSize";
        goto LABEL_1000;
      }
      v56 = "OpenCLIntelReqdSubGroupSize";
      goto LABEL_1506;
    case 0x10F:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "OpenCLKernel";
        goto LABEL_1000;
      }
      v49 = 1818586738;
      v50 = "OpenCLKernel";
      goto LABEL_1534;
    case 0x110:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "OptimizeNone";
        goto LABEL_1000;
      }
      v49 = 1701736270;
      v50 = "OptimizeNone";
      goto LABEL_1534;
    case 0x111:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Override";
        goto LABEL_1000;
      }
      v75 = 0x656469727265764FLL;
      goto LABEL_1512;
    case 0x112:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Owner";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 114;
      v67 = 1701738319;
      goto LABEL_1388;
    case 0x113:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "Ownership";
        goto LABEL_1000;
      }
      v83 = 112;
      v84 = "Ownership";
      goto LABEL_1510;
    case 0x114:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Packed";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 25701;
      v60 = 1801675088;
      goto LABEL_1543;
    case 0x115:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "ParamTypestate";
        goto LABEL_1000;
      }
      v82 = "ParamTypestate";
      goto LABEL_1539;
    case 0x116:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "PatchableFunctionEntry";
        goto LABEL_1000;
      }
      v87 = "PatchableFunctionEntry";
      goto LABEL_1527;
    case 0x117:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "Pointer";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1919251566;
      v77 = 1852403536;
      goto LABEL_1426;
    case 0x118:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "PointerAuthStruct";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "PointerAuthStruct";
      goto LABEL_1524;
    case 0x119:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "PragmaClangBSSSection";
        goto LABEL_1000;
      }
      v85 = "PragmaClangBSSSection";
      goto LABEL_1541;
    case 0x11A:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "PragmaClangDataSection";
        goto LABEL_1000;
      }
      v87 = "PragmaClangDataSection";
      goto LABEL_1527;
    case 0x11B:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "PragmaClangRelroSection";
        goto LABEL_1000;
      }
      v55 = "PragmaClangRelroSection";
      goto LABEL_1501;
    case 0x11C:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "PragmaClangRodataSection";
        goto LABEL_1000;
      }
      v51 = "PragmaClangRodataSection";
      goto LABEL_1503;
    case 0x11D:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "PragmaClangTextSection";
        goto LABEL_1000;
      }
      v87 = "PragmaClangTextSection";
      goto LABEL_1527;
    case 0x11E:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "PreferredName";
        goto LABEL_1000;
      }
      v78 = "PreferredName";
      goto LABEL_1519;
    case 0x11F:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "PtGuardedBy";
        goto LABEL_1000;
      }
      v65 = 2034394213;
      v66 = "PtGuardedBy";
      goto LABEL_1517;
    case 0x120:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "PtGuardedVar";
        goto LABEL_1000;
      }
      v49 = 1918981732;
      v50 = "PtGuardedVar";
      goto LABEL_1534;
    case 0x121:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Pure";
        goto LABEL_1000;
      }
      v68 = 1701999952;
      goto LABEL_1508;
    case 0x122:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "RISCVInterrupt";
        goto LABEL_1000;
      }
      v82 = "RISCVInterrupt";
      goto LABEL_1539;
    case 0x123:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "RandomizeLayout";
        goto LABEL_1000;
      }
      v79 = "RandomizeLayout";
      goto LABEL_1529;
    case 0x124:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ReadOnlyPlacement";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "ReadOnlyPlacement";
      goto LABEL_1524;
    case 0x125:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "Reinitializes";
        goto LABEL_1000;
      }
      v78 = "Reinitializes";
      goto LABEL_1519;
    case 0x126:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ReleaseCapability";
        goto LABEL_1000;
      }
      v73 = 121;
      v74 = "ReleaseCapability";
      goto LABEL_1524;
    case 0x127:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ReqdWorkGroupSize";
        goto LABEL_1000;
      }
      v73 = 101;
      v74 = "ReqdWorkGroupSize";
      goto LABEL_1524;
    case 0x128:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "RequiresCapability";
        goto LABEL_1000;
      }
      v71 = 31092;
      v72 = "RequiresCapability";
      goto LABEL_1536;
    case 0x129:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Restrict";
        goto LABEL_1000;
      }
      v92 = 0x697274736552;
LABEL_1316:
      v75 = v92 & 0xFFFFFFFFFFFFLL | 0x7463000000000000;
      goto LABEL_1512;
    case 0x12A:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Retain";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 28265;
      v60 = 1635018066;
      goto LABEL_1543;
    case 0x12B:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "ReturnTypestate";
        goto LABEL_1000;
      }
      v79 = "ReturnTypestate";
      goto LABEL_1529;
    case 0x12C:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "ReturnsNonNull";
        goto LABEL_1000;
      }
      v82 = "ReturnsNonNull";
      goto LABEL_1539;
    case 0x12D:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "ReturnsTwice";
        goto LABEL_1000;
      }
      v49 = 1701013879;
      v50 = "ReturnsTwice";
      goto LABEL_1534;
    case 0x12E:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "SYCLKernel";
        goto LABEL_1000;
      }
      v52 = 27749;
      v53 = "SYCLKernel";
      goto LABEL_1522;
    case 0x12F:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "SYCLSpecialClass";
        goto LABEL_1000;
      }
      v76 = "SYCLSpecialClass";
      goto LABEL_1547;
    case 0x130:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "ScopedLockable";
        goto LABEL_1000;
      }
      v82 = "ScopedLockable";
      goto LABEL_1539;
    case 0x131:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "Section";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1852795252;
      v77 = 1952671059;
      goto LABEL_1426;
    case 0x132:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "SelectAny";
        goto LABEL_1000;
      }
      v83 = 121;
      v84 = "SelectAny";
      goto LABEL_1510;
    case 0x133:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "Sentinel";
        goto LABEL_1000;
      }
      v86 = 0x6E69746E6553;
      goto LABEL_1347;
    case 0x134:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "SetTypestate";
        goto LABEL_1000;
      }
      v49 = 1702125940;
      v50 = "SetTypestate";
      goto LABEL_1534;
    case 0x135:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "SharedTrylockFunction";
        goto LABEL_1000;
      }
      v85 = "SharedTrylockFunction";
      goto LABEL_1541;
    case 0x136:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "SpeculativeLoadHardening";
        goto LABEL_1000;
      }
      v51 = "SpeculativeLoadHardening";
      goto LABEL_1503;
    case 0x137:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "StandaloneDebug";
        goto LABEL_1000;
      }
      v79 = "StandaloneDebug";
      goto LABEL_1529;
    case 0x138:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "StrictFP";
        goto LABEL_1000;
      }
      v75 = 0x5046746369727453;
      goto LABEL_1512;
    case 0x139:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "SwiftAsync";
        goto LABEL_1000;
      }
      v52 = 25454;
      v53 = "SwiftAsync";
      goto LABEL_1522;
    case 0x13A:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "SwiftAsyncError";
        goto LABEL_1000;
      }
      v79 = "SwiftAsyncError";
      goto LABEL_1529;
    case 0x13B:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "SwiftAsyncName";
        goto LABEL_1000;
      }
      v82 = "SwiftAsyncName";
      goto LABEL_1539;
    case 0x13C:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "SwiftAttr";
        goto LABEL_1000;
      }
      v83 = 114;
      v84 = "SwiftAttr";
      goto LABEL_1510;
    case 0x13D:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "SwiftBridge";
        goto LABEL_1000;
      }
      v65 = 1701274729;
      v66 = "SwiftBridge";
      goto LABEL_1517;
    case 0x13E:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "SwiftBridgedTypedef";
        goto LABEL_1000;
      }
      v69 = 1717920869;
      v70 = "SwiftBridgedTypedef";
      goto LABEL_1497;
    case 0x13F:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "SwiftError";
        goto LABEL_1000;
      }
      v52 = 29295;
      v53 = "SwiftError";
      goto LABEL_1522;
    case 0x140:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "SwiftImportAsNonGeneric";
        goto LABEL_1000;
      }
      v55 = "SwiftImportAsNonGeneric";
      goto LABEL_1501;
    case 0x141:
      v7 = *(llvm::raw_ostream **)v6;
      v20 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v20 <= 0x1DuLL)
      {
        v9 = "SwiftImportPropertyAsAccessors";
        goto LABEL_1000;
      }
      v62 = "SwiftImportPropertyAsAccessors";
LABEL_1341:
      *v20 = *(_OWORD *)v62;
      *(_OWORD *)((char *)v20 + 14) = *(_OWORD *)(v62 + 14);
      v58 = *((_QWORD *)v7 + 4) + 30;
      goto LABEL_1548;
    case 0x142:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "SwiftName";
        goto LABEL_1000;
      }
      v83 = 101;
      v84 = "SwiftName";
      goto LABEL_1510;
    case 0x143:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "SwiftNewType";
        goto LABEL_1000;
      }
      v49 = 1701869908;
      v50 = "SwiftNewType";
      goto LABEL_1534;
    case 0x144:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "SwiftPrivate";
        goto LABEL_1000;
      }
      v49 = 1702125942;
      v50 = "SwiftPrivate";
      goto LABEL_1534;
    case 0x145:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "SymbolMetadataFootnote";
        goto LABEL_1000;
      }
      v87 = "SymbolMetadataFootnote";
      goto LABEL_1527;
    case 0x146:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "TLSModel";
        goto LABEL_1000;
      }
      v86 = 0x646F4D534C54;
LABEL_1347:
      v75 = v86 & 0xFFFFFFFFFFFFLL | 0x6C65000000000000;
      goto LABEL_1512;
    case 0x147:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Target";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 29797;
      v60 = 1735549268;
      goto LABEL_1543;
    case 0x148:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "TargetClones";
        goto LABEL_1000;
      }
      v49 = 1936027247;
      v50 = "TargetClones";
      goto LABEL_1534;
    case 0x149:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "TestTypestate";
        goto LABEL_1000;
      }
      v78 = "TestTypestate";
      goto LABEL_1519;
    case 0x14A:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Tracepoint";
        goto LABEL_1000;
      }
      v52 = 29806;
      v53 = "Tracepoint";
      goto LABEL_1522;
    case 0x14B:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "TransparentUnion";
        goto LABEL_1000;
      }
      v76 = "TransparentUnion";
      goto LABEL_1547;
    case 0x14C:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "TrivialABI";
        goto LABEL_1000;
      }
      v52 = 18754;
      v53 = "TrivialABI";
      goto LABEL_1522;
    case 0x14D:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "TryAcquireCapability";
        goto LABEL_1000;
      }
      v88 = 2037672300;
      v89 = "TryAcquireCapability";
      goto LABEL_1491;
    case 0x14E:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "TypeTagForDatatype";
        goto LABEL_1000;
      }
      v71 = 25968;
      v72 = "TypeTagForDatatype";
      goto LABEL_1536;
    case 0x14F:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "TypeVisibility";
        goto LABEL_1000;
      }
      v82 = "TypeVisibility";
      goto LABEL_1539;
    case 0x150:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "TypedMemory";
        goto LABEL_1000;
      }
      v65 = 2037542765;
      v66 = "TypedMemory";
      goto LABEL_1517;
    case 0x151:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "Unavailable";
        goto LABEL_1000;
      }
      v65 = 1701601889;
      v66 = "Unavailable";
      goto LABEL_1517;
    case 0x152:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "Uninitialized";
        goto LABEL_1000;
      }
      v78 = "Uninitialized";
      goto LABEL_1519;
    case 0x153:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "Unused";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 25701;
      v60 = 1937075797;
      goto LABEL_1543;
    case 0x154:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Used";
        goto LABEL_1000;
      }
      v68 = 1684370261;
      goto LABEL_1508;
    case 0x155:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "UsingIfExists";
        goto LABEL_1000;
      }
      v78 = "UsingIfExists";
      goto LABEL_1519;
    case 0x156:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Uuid";
        goto LABEL_1000;
      }
      v68 = 1684632917;
      goto LABEL_1508;
    case 0x157:
      v7 = *(llvm::raw_ostream **)v6;
      v14 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v14 <= 0x1AuLL)
      {
        v9 = "VTablePointerAuthentication";
        goto LABEL_1000;
      }
      v56 = "VTablePointerAuthentication";
      goto LABEL_1506;
    case 0x158:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "VecReturn";
        goto LABEL_1000;
      }
      v83 = 110;
      v84 = "VecReturn";
      goto LABEL_1510;
    case 0x159:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "VecTypeHint";
        goto LABEL_1000;
      }
      v65 = 1953392968;
      v66 = "VecTypeHint";
      goto LABEL_1517;
    case 0x15A:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "Visibility";
        goto LABEL_1000;
      }
      v52 = 31092;
      v53 = "Visibility";
      goto LABEL_1522;
    case 0x15B:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "WarnUnused";
        goto LABEL_1000;
      }
      v52 = 25701;
      v53 = "WarnUnused";
      goto LABEL_1522;
    case 0x15C:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "WarnUnusedResult";
        goto LABEL_1000;
      }
      v76 = "WarnUnusedResult";
      goto LABEL_1547;
    case 0x15D:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Weak";
        goto LABEL_1000;
      }
      v68 = 1801545047;
      goto LABEL_1508;
    case 0x15E:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "WeakImport";
        goto LABEL_1000;
      }
      v52 = 29810;
      v53 = "WeakImport";
      goto LABEL_1522;
    case 0x15F:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "WeakRef";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1717916267;
      v77 = 1801545047;
      goto LABEL_1426;
    case 0x160:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "WebAssemblyExportName";
        goto LABEL_1000;
      }
      v85 = "WebAssemblyExportName";
      goto LABEL_1541;
    case 0x161:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "WebAssemblyImportModule";
        goto LABEL_1000;
      }
      v55 = "WebAssemblyImportModule";
      goto LABEL_1501;
    case 0x162:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "WebAssemblyImportName";
        goto LABEL_1000;
      }
      v85 = "WebAssemblyImportName";
      goto LABEL_1541;
    case 0x163:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "WorkGroupSizeHint";
        goto LABEL_1000;
      }
      v73 = 116;
      v74 = "WorkGroupSizeHint";
      goto LABEL_1524;
    case 0x164:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "X86ForceAlignArgPointer";
        goto LABEL_1000;
      }
      v55 = "X86ForceAlignArgPointer";
      goto LABEL_1501;
    case 0x165:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "XRayInstrument";
        goto LABEL_1000;
      }
      v82 = "XRayInstrument";
      goto LABEL_1539;
    case 0x166:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "XRayLogArgs";
        goto LABEL_1000;
      }
      v65 = 1936159297;
      v66 = "XRayLogArgs";
      goto LABEL_1517;
    case 0x167:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "ZeroCallUsedRegs";
        goto LABEL_1000;
      }
      v76 = "ZeroCallUsedRegs";
      goto LABEL_1547;
    case 0x168:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "AArch64FarAddressSpace";
        goto LABEL_1000;
      }
      v87 = "AArch64FarAddressSpace";
      goto LABEL_1527;
    case 0x169:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) <= 5)
      {
        v9 = "AbiTag";
        goto LABEL_1000;
      }
      *(_WORD *)(v18 + 4) = 26465;
      v60 = 1416192577;
      goto LABEL_1543;
    case 0x16A:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "Alias";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 115;
      v67 = 1634298945;
      goto LABEL_1388;
    case 0x16B:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "AlignValue";
        goto LABEL_1000;
      }
      v52 = 25973;
      v53 = "AlignValue";
      goto LABEL_1522;
    case 0x16C:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "BuiltinAlias";
        goto LABEL_1000;
      }
      v49 = 1935763820;
      v50 = "BuiltinAlias";
      goto LABEL_1534;
    case 0x16D:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "CalledOnce";
        goto LABEL_1000;
      }
      v52 = 25955;
      v53 = "CalledOnce";
      goto LABEL_1522;
    case 0x16E:
      v7 = *(llvm::raw_ostream **)v6;
      v25 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v25) <= 4)
      {
        v9 = "IFunc";
        goto LABEL_1000;
      }
      *(_BYTE *)(v25 + 4) = 99;
      v67 = 1853179465;
LABEL_1388:
      *(_DWORD *)v25 = v67;
      v58 = *((_QWORD *)v7 + 4) + 5;
      goto LABEL_1548;
    case 0x16F:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "InitSeg";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1734693748;
      v77 = 1953066569;
      goto LABEL_1426;
    case 0x170:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "LoaderUninitialized";
        goto LABEL_1000;
      }
      v69 = 1684372073;
      v70 = "LoaderUninitialized";
      goto LABEL_1497;
    case 0x171:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "LoopHint";
        goto LABEL_1000;
      }
      v75 = 0x746E6948706F6F4CLL;
      goto LABEL_1512;
    case 0x172:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalAcceptIntersection";
        goto LABEL_1000;
      }
      v55 = "MetalAcceptIntersection";
      goto LABEL_1501;
    case 0x173:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalAmplificationCount";
        goto LABEL_1000;
      }
      v55 = "MetalAmplificationCount";
      goto LABEL_1501;
    case 0x174:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalAmplificationId";
        goto LABEL_1000;
      }
      v88 = 1682533999;
      v89 = "MetalAmplificationId";
      goto LABEL_1491;
    case 0x175:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalArrayRefSize";
        goto LABEL_1000;
      }
      v73 = 101;
      v74 = "MetalArrayRefSize";
      goto LABEL_1524;
    case 0x176:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalAttributeIndex";
        goto LABEL_1000;
      }
      v69 = 2019910766;
      v70 = "MetalAttributeIndex";
      goto LABEL_1497;
    case 0x177:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "MetalBarycentricCoord";
        goto LABEL_1000;
      }
      v85 = "MetalBarycentricCoord";
      goto LABEL_1541;
    case 0x178:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalBaseInstance";
        goto LABEL_1000;
      }
      v73 = 101;
      v74 = "MetalBaseInstance";
      goto LABEL_1524;
    case 0x179:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MetalBaseVertex";
        goto LABEL_1000;
      }
      v79 = "MetalBaseVertex";
      goto LABEL_1529;
    case 0x17A:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "MetalBlendSourceIndex";
        goto LABEL_1000;
      }
      v85 = "MetalBlendSourceIndex";
      goto LABEL_1541;
    case 0x17B:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MetalBufferIndex";
        goto LABEL_1000;
      }
      v76 = "MetalBufferIndex";
      goto LABEL_1547;
    case 0x17C:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalCenterNoPerspective";
        goto LABEL_1000;
      }
      v51 = "MetalCenterNoPerspective";
      goto LABEL_1503;
    case 0x17D:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "MetalCenterPerspective";
        goto LABEL_1000;
      }
      v87 = "MetalCenterPerspective";
      goto LABEL_1527;
    case 0x17E:
      v7 = *(llvm::raw_ostream **)v6;
      v19 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v19 <= 0x19uLL)
      {
        v9 = "MetalCentroidNoPerspective";
        goto LABEL_1000;
      }
      v61 = "MetalCentroidNoPerspective";
      goto LABEL_1466;
    case 0x17F:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalCentroidPerspective";
        goto LABEL_1000;
      }
      v51 = "MetalCentroidPerspective";
      goto LABEL_1503;
    case 0x180:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalClipDistance";
        goto LABEL_1000;
      }
      v73 = 101;
      v74 = "MetalClipDistance";
      goto LABEL_1524;
    case 0x181:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "MetalColor";
        goto LABEL_1000;
      }
      v52 = 29295;
      v53 = "MetalColor";
      goto LABEL_1522;
    case 0x182:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalContinueSearch";
        goto LABEL_1000;
      }
      v69 = 1751347809;
      v70 = "MetalContinueSearch";
      goto LABEL_1497;
    case 0x183:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalCurveParameter";
        goto LABEL_1000;
      }
      v69 = 1919251557;
      v70 = "MetalCurveParameter";
      goto LABEL_1497;
    case 0x184:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "MetalDepth";
        goto LABEL_1000;
      }
      v52 = 26740;
      v53 = "MetalDepth";
      goto LABEL_1522;
    case 0x185:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "MetalDirection";
        goto LABEL_1000;
      }
      v82 = "MetalDirection";
      goto LABEL_1539;
    case 0x186:
      v7 = *(llvm::raw_ostream **)v6;
      v22 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v22 <= 0x1EuLL)
      {
        v9 = "MetalDispatchQuadGroupsPerGroup";
        goto LABEL_1000;
      }
      v63 = "MetalDispatchQuadGroupsPerGroup";
      goto LABEL_1414;
    case 0x187:
      v7 = *(llvm::raw_ostream **)v6;
      v22 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v22 <= 0x1EuLL)
      {
        v9 = "MetalDispatchSIMDGroupsPerGroup";
        goto LABEL_1000;
      }
      v63 = "MetalDispatchSIMDGroupsPerGroup";
LABEL_1414:
      *v22 = *(_OWORD *)v63;
      *(_OWORD *)((char *)v22 + 15) = *(_OWORD *)(v63 + 15);
      v58 = *((_QWORD *)v7 + 4) + 31;
      goto LABEL_1548;
    case 0x188:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "MetalDispatchThreadsPerGroup";
        goto LABEL_1000;
      }
      v57 = "MetalDispatchThreadsPerGroup";
      goto LABEL_1428;
    case 0x189:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MetalDistance";
        goto LABEL_1000;
      }
      v78 = "MetalDistance";
      goto LABEL_1519;
    case 0x18A:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalEarlyFragmentTests";
        goto LABEL_1000;
      }
      v55 = "MetalEarlyFragmentTests";
      goto LABEL_1501;
    case 0x18B:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "MetalFlat";
        goto LABEL_1000;
      }
      v83 = 116;
      v84 = "MetalFlat";
      goto LABEL_1510;
    case 0x18C:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MetalFragment";
        goto LABEL_1000;
      }
      v78 = "MetalFragment";
      goto LABEL_1519;
    case 0x18D:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MetalFrontFacing";
        goto LABEL_1000;
      }
      v76 = "MetalFrontFacing";
      goto LABEL_1547;
    case 0x18E:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalFunctionGroups";
        goto LABEL_1000;
      }
      v69 = 1936749935;
      v70 = "MetalFunctionGroups";
      goto LABEL_1497;
    case 0x18F:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MetalGeometryId";
        goto LABEL_1000;
      }
      v79 = "MetalGeometryId";
      goto LABEL_1529;
    case 0x190:
      v7 = *(llvm::raw_ostream **)v6;
      v40 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v40 <= 0x2BuLL)
      {
        v9 = "MetalGeometryIntersectionFunctionTableOffset";
        goto LABEL_1000;
      }
      v93 = "MetalGeometryIntersectionFunctionTableOffset";
      goto LABEL_1432;
    case 0x191:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MetalHostName";
        goto LABEL_1000;
      }
      v78 = "MetalHostName";
      goto LABEL_1519;
    case 0x192:
      v7 = *(llvm::raw_ostream **)v6;
      v17 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v17 <= 6uLL)
      {
        v9 = "MetalId";
        goto LABEL_1000;
      }
      *(int *)((char *)v17 + 3) = 1682533473;
      v77 = 1635018061;
LABEL_1426:
      *v17 = v77;
      v58 = *((_QWORD *)v7 + 4) + 7;
      goto LABEL_1548;
    case 0x193:
      v7 = *(llvm::raw_ostream **)v6;
      v15 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v15 <= 0x1BuLL)
      {
        v9 = "MetalImageblockAliasImplicit";
        goto LABEL_1000;
      }
      v57 = "MetalImageblockAliasImplicit";
LABEL_1428:
      *v15 = *(_OWORD *)v57;
      *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)(v57 + 12);
      v58 = *((_QWORD *)v7 + 4) + 28;
      goto LABEL_1548;
    case 0x194:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalImageblockData";
        goto LABEL_1000;
      }
      v69 = 1635017028;
      v70 = "MetalImageblockData";
      goto LABEL_1497;
    case 0x195:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MetalInstanceId";
        goto LABEL_1000;
      }
      v79 = "MetalInstanceId";
      goto LABEL_1529;
    case 0x196:
      v7 = *(llvm::raw_ostream **)v6;
      v40 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v40 <= 0x2BuLL)
      {
        v9 = "MetalInstanceIntersectionFunctionTableOffset";
        goto LABEL_1000;
      }
      v93 = "MetalInstanceIntersectionFunctionTableOffset";
LABEL_1432:
      v94 = *((_OWORD *)v93 + 1);
      *v40 = *(_OWORD *)v93;
      v40[1] = v94;
      *(_OWORD *)((char *)v40 + 28) = *(_OWORD *)(v93 + 28);
      v58 = *((_QWORD *)v7 + 4) + 44;
      goto LABEL_1548;
    case 0x197:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalIntersection";
        goto LABEL_1000;
      }
      v73 = 110;
      v74 = "MetalIntersection";
      goto LABEL_1524;
    case 0x198:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "MetalInvariant";
        goto LABEL_1000;
      }
      v82 = "MetalInvariant";
      goto LABEL_1539;
    case 0x199:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MetalKernel";
        goto LABEL_1000;
      }
      v65 = 1818586738;
      v66 = "MetalKernel";
      goto LABEL_1517;
    case 0x19A:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "MetalKeyFrameCount";
        goto LABEL_1000;
      }
      v71 = 29806;
      v72 = "MetalKeyFrameCount";
      goto LABEL_1536;
    case 0x19B:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MetalLocalIndex";
        goto LABEL_1000;
      }
      v79 = "MetalLocalIndex";
      goto LABEL_1529;
    case 0x19C:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MetalMaxDistance";
        goto LABEL_1000;
      }
      v76 = "MetalMaxDistance";
      goto LABEL_1547;
    case 0x19D:
      v7 = *(llvm::raw_ostream **)v6;
      v41 = *(void **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v41 <= 0x23uLL)
      {
        v9 = "MetalMaxTotalThreadGroupsPerMeshGrid";
        goto LABEL_1000;
      }
      qmemcpy(v41, "MetalMaxTotalThreadGroupsPerMeshGrid", 36);
      v58 = *((_QWORD *)v7 + 4) + 36;
      goto LABEL_1548;
    case 0x19E:
      v7 = *(llvm::raw_ostream **)v6;
      v42 = *(void **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v42 <= 0x21uLL)
      {
        v9 = "MetalMaxTotalThreadsPerThreadGroup";
        goto LABEL_1000;
      }
      qmemcpy(v42, "MetalMaxTotalThreadsPerThreadGroup", 34);
      v58 = *((_QWORD *)v7 + 4) + 34;
      goto LABEL_1548;
    case 0x19F:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "MetalMesh";
        goto LABEL_1000;
      }
      v83 = 104;
      v84 = "MetalMesh";
      goto LABEL_1510;
    case 0x1A0:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MetalMinDistance";
        goto LABEL_1000;
      }
      v76 = "MetalMinDistance";
      goto LABEL_1547;
    case 0x1A1:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "MetalMotionEndTime";
        goto LABEL_1000;
      }
      v71 = 25965;
      v72 = "MetalMotionEndTime";
      goto LABEL_1536;
    case 0x1A2:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalMotionStartTime";
        goto LABEL_1000;
      }
      v88 = 1701669204;
      v89 = "MetalMotionStartTime";
      goto LABEL_1491;
    case 0x1A3:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "MetalNoUserResourceStores";
        goto LABEL_1000;
      }
      v54 = "MetalNoUserResourceStores";
      goto LABEL_1545;
    case 0x1A4:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MetalObject";
        goto LABEL_1000;
      }
      v65 = 1952671082;
      v66 = "MetalObject";
      goto LABEL_1517;
    case 0x1A5:
      v7 = *(llvm::raw_ostream **)v6;
      v14 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v14 <= 0x1AuLL)
      {
        v9 = "MetalObjectToWorldTransform";
        goto LABEL_1000;
      }
      v56 = "MetalObjectToWorldTransform";
      goto LABEL_1506;
    case 0x1A6:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MetalOpaque";
        goto LABEL_1000;
      }
      v65 = 1702195553;
      v66 = "MetalOpaque";
      goto LABEL_1517;
    case 0x1A7:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MetalOrigin";
        goto LABEL_1000;
      }
      v65 = 1852401513;
      v66 = "MetalOrigin";
      goto LABEL_1517;
    case 0x1A8:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "MetalPatch";
        goto LABEL_1000;
      }
      v52 = 26723;
      v53 = "MetalPatch";
      goto LABEL_1522;
    case 0x1A9:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "MetalPatchId";
        goto LABEL_1000;
      }
      v49 = 1682532451;
      v50 = "MetalPatchId";
      goto LABEL_1534;
    case 0x1AA:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "MetalPayload";
        goto LABEL_1000;
      }
      v49 = 1684107116;
      v50 = "MetalPayload";
      goto LABEL_1534;
    case 0x1AB:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalPixelPosTile";
        goto LABEL_1000;
      }
      v73 = 101;
      v74 = "MetalPixelPosTile";
      goto LABEL_1524;
    case 0x1AC:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "MetalPixelsPerTile";
        goto LABEL_1000;
      }
      v71 = 25964;
      v72 = "MetalPixelsPerTile";
      goto LABEL_1536;
    case 0x1AD:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MetalPointCoord";
        goto LABEL_1000;
      }
      v79 = "MetalPointCoord";
      goto LABEL_1529;
    case 0x1AE:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "MetalPointSize";
        goto LABEL_1000;
      }
      v82 = "MetalPointSize";
      goto LABEL_1539;
    case 0x1AF:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MetalPosition";
        goto LABEL_1000;
      }
      v78 = "MetalPosition";
      goto LABEL_1519;
    case 0x1B0:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalPositionInPatch";
        goto LABEL_1000;
      }
      v88 = 1751348321;
      v89 = "MetalPositionInPatch";
      goto LABEL_1491;
    case 0x1B1:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "MetalPostDepthCoverage";
        goto LABEL_1000;
      }
      v87 = "MetalPostDepthCoverage";
      goto LABEL_1527;
    case 0x1B2:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalPrimitiveCulled";
        goto LABEL_1000;
      }
      v88 = 1684368492;
      v89 = "MetalPrimitiveCulled";
      goto LABEL_1491;
    case 0x1B3:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "MetalPrimitiveData";
        goto LABEL_1000;
      }
      v71 = 24948;
      v72 = "MetalPrimitiveData";
      goto LABEL_1536;
    case 0x1B4:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MetalPrimitiveId";
        goto LABEL_1000;
      }
      v76 = "MetalPrimitiveId";
      goto LABEL_1547;
    case 0x1B5:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalQuadGroupIndexGroup";
        goto LABEL_1000;
      }
      v51 = "MetalQuadGroupIndexGroup";
      goto LABEL_1503;
    case 0x1B6:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalQuadGroupsPerGroup";
        goto LABEL_1000;
      }
      v55 = "MetalQuadGroupsPerGroup";
      goto LABEL_1501;
    case 0x1B7:
      v7 = *(llvm::raw_ostream **)v6;
      v19 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v19 <= 0x19uLL)
      {
        v9 = "MetalRasterOrderGroupIndex";
        goto LABEL_1000;
      }
      v61 = "MetalRasterOrderGroupIndex";
LABEL_1466:
      *v19 = *(_OWORD *)v61;
      *(_OWORD *)((char *)v19 + 10) = *(_OWORD *)(v61 + 10);
      v58 = *((_QWORD *)v7 + 4) + 26;
      goto LABEL_1548;
    case 0x1B8:
      v7 = *(llvm::raw_ostream **)v6;
      v14 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v14 <= 0x1AuLL)
      {
        v9 = "MetalRenderTargetArrayIndex";
        goto LABEL_1000;
      }
      v56 = "MetalRenderTargetArrayIndex";
      goto LABEL_1506;
    case 0x1B9:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalSIMDGroupIndexGroup";
        goto LABEL_1000;
      }
      v51 = "MetalSIMDGroupIndexGroup";
      goto LABEL_1503;
    case 0x1BA:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalSIMDGroupsPerGroup";
        goto LABEL_1000;
      }
      v55 = "MetalSIMDGroupsPerGroup";
      goto LABEL_1501;
    case 0x1BB:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MetalSampleId";
        goto LABEL_1000;
      }
      v78 = "MetalSampleId";
      goto LABEL_1519;
    case 0x1BC:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "MetalSampleMask";
        goto LABEL_1000;
      }
      v79 = "MetalSampleMask";
      goto LABEL_1529;
    case 0x1BD:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalSampleNoPerspective";
        goto LABEL_1000;
      }
      v51 = "MetalSampleNoPerspective";
      goto LABEL_1503;
    case 0x1BE:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "MetalSamplePerspective";
        goto LABEL_1000;
      }
      v87 = "MetalSamplePerspective";
      goto LABEL_1527;
    case 0x1BF:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalSamplerIndex";
        goto LABEL_1000;
      }
      v73 = 120;
      v74 = "MetalSamplerIndex";
      goto LABEL_1524;
    case 0x1C0:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MetalShared";
        goto LABEL_1000;
      }
      v65 = 1684370017;
      v66 = "MetalShared";
      goto LABEL_1517;
    case 0x1C1:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "MetalStageIn";
        goto LABEL_1000;
      }
      v49 = 1850303847;
      v50 = "MetalStageIn";
      goto LABEL_1534;
    case 0x1C2:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "MetalStageInGridOrigin";
        goto LABEL_1000;
      }
      v87 = "MetalStageInGridOrigin";
      goto LABEL_1527;
    case 0x1C3:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalStageInGridSize";
        goto LABEL_1000;
      }
      v88 = 1702521171;
      v89 = "MetalStageInGridSize";
      goto LABEL_1491;
    case 0x1C4:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "MetalStencil";
        goto LABEL_1000;
      }
      v49 = 1818846062;
      v50 = "MetalStencil";
      goto LABEL_1534;
    case 0x1C5:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "MetalTextureIndex";
        goto LABEL_1000;
      }
      v73 = 120;
      v74 = "MetalTextureIndex";
      goto LABEL_1524;
    case 0x1C6:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalThreadExecWidth";
        goto LABEL_1000;
      }
      v88 = 1752458345;
      v89 = "MetalThreadExecWidth";
      goto LABEL_1491;
    case 0x1C7:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalThreadGroupPosGrid";
        goto LABEL_1000;
      }
      v55 = "MetalThreadGroupPosGrid";
      goto LABEL_1501;
    case 0x1C8:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalThreadGroupsPerGrid";
        goto LABEL_1000;
      }
      v51 = "MetalThreadGroupsPerGrid";
      goto LABEL_1503;
    case 0x1C9:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "MetalThreadIndexGroup";
        goto LABEL_1000;
      }
      v85 = "MetalThreadIndexGroup";
      goto LABEL_1541;
    case 0x1CA:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "MetalThreadIndexQuadGroup";
        goto LABEL_1000;
      }
      v54 = "MetalThreadIndexQuadGroup";
      goto LABEL_1545;
    case 0x1CB:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "MetalThreadIndexSIMDGroup";
        goto LABEL_1000;
      }
      v54 = "MetalThreadIndexSIMDGroup";
      goto LABEL_1545;
    case 0x1CC:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "MetalThreadPosGrid";
        goto LABEL_1000;
      }
      v71 = 25705;
      v72 = "MetalThreadPosGrid";
      goto LABEL_1536;
    case 0x1CD:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalThreadPosGroup";
        goto LABEL_1000;
      }
      v69 = 1886744434;
      v70 = "MetalThreadPosGroup";
      goto LABEL_1497;
    case 0x1CE:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalThreadsPerGrid";
        goto LABEL_1000;
      }
      v69 = 1684632135;
      v70 = "MetalThreadsPerGrid";
      goto LABEL_1497;
    case 0x1CF:
      v7 = *(llvm::raw_ostream **)v6;
      v39 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v39) <= 0x13)
      {
        v9 = "MetalThreadsPerGroup";
        goto LABEL_1000;
      }
      v88 = 1886744434;
      v89 = "MetalThreadsPerGroup";
LABEL_1491:
      *(_DWORD *)(v39 + 16) = v88;
      *(_OWORD *)v39 = *(_OWORD *)v89;
      v58 = *((_QWORD *)v7 + 4) + 20;
      goto LABEL_1548;
    case 0x1D0:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalThreadsPerSIMDGroup";
        goto LABEL_1000;
      }
      v51 = "MetalThreadsPerSIMDGroup";
      goto LABEL_1503;
    case 0x1D1:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "MetalTileIndex";
        goto LABEL_1000;
      }
      v82 = "MetalTileIndex";
      goto LABEL_1539;
    case 0x1D2:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "MetalTime";
        goto LABEL_1000;
      }
      v83 = 101;
      v84 = "MetalTime";
      goto LABEL_1510;
    case 0x1D3:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "MetalUserDefined";
        goto LABEL_1000;
      }
      v76 = "MetalUserDefined";
      goto LABEL_1547;
    case 0x1D4:
      v7 = *(llvm::raw_ostream **)v6;
      v27 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v27) <= 0x12)
      {
        v9 = "MetalUserInstanceId";
        goto LABEL_1000;
      }
      v69 = 1682531683;
      v70 = "MetalUserInstanceId";
LABEL_1497:
      *(_DWORD *)(v27 + 15) = v69;
      *(_OWORD *)v27 = *(_OWORD *)v70;
      v58 = *((_QWORD *)v7 + 4) + 19;
      goto LABEL_1548;
    case 0x1D5:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "MetalVertex";
        goto LABEL_1000;
      }
      v65 = 2019914866;
      v66 = "MetalVertex";
      goto LABEL_1517;
    case 0x1D6:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "MetalVertexId";
        goto LABEL_1000;
      }
      v78 = "MetalVertexId";
      goto LABEL_1519;
    case 0x1D7:
      v7 = *(llvm::raw_ostream **)v6;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v13) <= 0x16)
      {
        v9 = "MetalViewportArrayIndex";
        goto LABEL_1000;
      }
      v55 = "MetalViewportArrayIndex";
LABEL_1501:
      *(_OWORD *)v13 = *(_OWORD *)v55;
      *(_QWORD *)(v13 + 15) = *(_QWORD *)(v55 + 15);
      v58 = *((_QWORD *)v7 + 4) + 23;
      goto LABEL_1548;
    case 0x1D8:
      v7 = *(llvm::raw_ostream **)v6;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v10) <= 0x17)
      {
        v9 = "MetalWorldSpaceDirection";
        goto LABEL_1000;
      }
      v51 = "MetalWorldSpaceDirection";
LABEL_1503:
      *(_OWORD *)v10 = *(_OWORD *)v51;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v51 + 2);
      v58 = *((_QWORD *)v7 + 4) + 24;
      goto LABEL_1548;
    case 0x1D9:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "MetalWorldSpaceOrigin";
        goto LABEL_1000;
      }
      v85 = "MetalWorldSpaceOrigin";
      goto LABEL_1541;
    case 0x1DA:
      v7 = *(llvm::raw_ostream **)v6;
      v14 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v14 <= 0x1AuLL)
      {
        v9 = "MetalWorldToObjectTransform";
        goto LABEL_1000;
      }
      v56 = "MetalWorldToObjectTransform";
LABEL_1506:
      *v14 = *(_OWORD *)v56;
      *(_OWORD *)((char *)v14 + 11) = *(_OWORD *)(v56 + 11);
      v58 = *((_QWORD *)v7 + 4) + 27;
      goto LABEL_1548;
    case 0x1DB:
      v7 = *(llvm::raw_ostream **)v6;
      v26 = *(int **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v26 <= 3uLL)
      {
        v9 = "Mode";
        goto LABEL_1000;
      }
      v68 = 1701080909;
LABEL_1508:
      *v26 = v68;
      v58 = *((_QWORD *)v7 + 4) + 4;
      goto LABEL_1548;
    case 0x1DC:
      v7 = *(llvm::raw_ostream **)v6;
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v36) <= 8)
      {
        v9 = "NoBuiltin";
        goto LABEL_1000;
      }
      v83 = 110;
      v84 = "NoBuiltin";
LABEL_1510:
      *(_BYTE *)(v36 + 8) = v83;
      *(_QWORD *)v36 = *(_QWORD *)v84;
      v58 = *((_QWORD *)v7 + 4) + 9;
      goto LABEL_1548;
    case 0x1DD:
      v7 = *(llvm::raw_ostream **)v6;
      v30 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v30 <= 7uLL)
      {
        v9 = "NoEscape";
        goto LABEL_1000;
      }
      v75 = 0x6570616373456F4ELL;
LABEL_1512:
      *v30 = v75;
      v58 = *((_QWORD *)v7 + 4) + 8;
      goto LABEL_1548;
    case 0x1DE:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "OMPCaptureKind";
        goto LABEL_1000;
      }
      v82 = "OMPCaptureKind";
      goto LABEL_1539;
    case 0x1DF:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "OMPDeclareSimdDecl";
        goto LABEL_1000;
      }
      v71 = 27747;
      v72 = "OMPDeclareSimdDecl";
      goto LABEL_1536;
    case 0x1E0:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "OMPReferencedVar";
        goto LABEL_1000;
      }
      v76 = "OMPReferencedVar";
      goto LABEL_1547;
    case 0x1E1:
      v7 = *(llvm::raw_ostream **)v6;
      v24 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v24) <= 0xA)
      {
        v9 = "ObjCBoxable";
        goto LABEL_1000;
      }
      v65 = 1701601889;
      v66 = "ObjCBoxable";
LABEL_1517:
      *(_DWORD *)(v24 + 7) = v65;
      *(_QWORD *)v24 = *(_QWORD *)v66;
      v58 = *((_QWORD *)v7 + 4) + 11;
      goto LABEL_1548;
    case 0x1E2:
      v7 = *(llvm::raw_ostream **)v6;
      v32 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v32 <= 0xCuLL)
      {
        v9 = "ObjCClassStub";
        goto LABEL_1000;
      }
      v78 = "ObjCClassStub";
LABEL_1519:
      *v32 = *(_QWORD *)v78;
      *(_QWORD *)((char *)v32 + 5) = *(_QWORD *)(v78 + 5);
      v58 = *((_QWORD *)v7 + 4) + 13;
      goto LABEL_1548;
    case 0x1E3:
      v7 = *(llvm::raw_ostream **)v6;
      v12 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v12 <= 0x18uLL)
      {
        v9 = "ObjCDesignatedInitializer";
        goto LABEL_1000;
      }
      v54 = "ObjCDesignatedInitializer";
LABEL_1545:
      *v12 = *(_OWORD *)v54;
      *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(v54 + 9);
      v58 = *((_QWORD *)v7 + 4) + 25;
      goto LABEL_1548;
    case 0x1E4:
      v7 = *(llvm::raw_ostream **)v6;
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v11) <= 9)
      {
        v9 = "ObjCDirect";
        goto LABEL_1000;
      }
      v52 = 29795;
      v53 = "ObjCDirect";
LABEL_1522:
      *(_WORD *)(v11 + 8) = v52;
      *(_QWORD *)v11 = *(_QWORD *)v53;
      v58 = *((_QWORD *)v7 + 4) + 10;
      goto LABEL_1548;
    case 0x1E5:
      v7 = *(llvm::raw_ostream **)v6;
      v29 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v29) <= 0x10)
      {
        v9 = "ObjCDirectMembers";
        goto LABEL_1000;
      }
      v73 = 115;
      v74 = "ObjCDirectMembers";
LABEL_1524:
      *(_BYTE *)(v29 + 16) = v73;
      *(_OWORD *)v29 = *(_OWORD *)v74;
      v58 = *((_QWORD *)v7 + 4) + 17;
      goto LABEL_1548;
    case 0x1E6:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "ObjCNonLazyClass";
        goto LABEL_1000;
      }
      v76 = "ObjCNonLazyClass";
      goto LABEL_1547;
    case 0x1E7:
      v7 = *(llvm::raw_ostream **)v6;
      v38 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v38) <= 0x15)
      {
        v9 = "ObjCNonRuntimeProtocol";
        goto LABEL_1000;
      }
      v87 = "ObjCNonRuntimeProtocol";
LABEL_1527:
      *(_OWORD *)v38 = *(_OWORD *)v87;
      *(_QWORD *)(v38 + 14) = *(_QWORD *)(v87 + 14);
      v58 = *((_QWORD *)v7 + 4) + 22;
      goto LABEL_1548;
    case 0x1E8:
      v7 = *(llvm::raw_ostream **)v6;
      v33 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v33 <= 0xEuLL)
      {
        v9 = "ObjCRuntimeName";
        goto LABEL_1000;
      }
      v79 = "ObjCRuntimeName";
LABEL_1529:
      *v33 = *(_QWORD *)v79;
      *(_QWORD *)((char *)v33 + 7) = *(_QWORD *)(v79 + 7);
      v58 = *((_QWORD *)v7 + 4) + 15;
      goto LABEL_1548;
    case 0x1E9:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "ObjCRuntimeVisible";
        goto LABEL_1000;
      }
      v71 = 25964;
      v72 = "ObjCRuntimeVisible";
      goto LABEL_1536;
    case 0x1EA:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "ObjCSuppressDirect";
        goto LABEL_1000;
      }
      v71 = 29795;
      v72 = "ObjCSuppressDirect";
      goto LABEL_1536;
    case 0x1EB:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "OpenCLAccess";
        goto LABEL_1000;
      }
      v49 = 1936942435;
      v50 = "OpenCLAccess";
      goto LABEL_1534;
    case 0x1EC:
      v7 = *(llvm::raw_ostream **)v6;
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v8) <= 0xB)
      {
        v9 = "Overloadable";
        goto LABEL_1000;
      }
      v49 = 1701601889;
      v50 = "Overloadable";
LABEL_1534:
      *(_DWORD *)(v8 + 8) = v49;
      *(_QWORD *)v8 = *(_QWORD *)v50;
      v58 = *((_QWORD *)v7 + 4) + 12;
      goto LABEL_1548;
    case 0x1ED:
      v7 = *(llvm::raw_ostream **)v6;
      v28 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v28) <= 0x11)
      {
        v9 = "RenderScriptKernel";
        goto LABEL_1000;
      }
      v71 = 27749;
      v72 = "RenderScriptKernel";
LABEL_1536:
      *(_WORD *)(v28 + 16) = v71;
      *(_OWORD *)v28 = *(_OWORD *)v72;
      v58 = *((_QWORD *)v7 + 4) + 18;
      goto LABEL_1548;
    case 0x1EE:
      v7 = *(llvm::raw_ostream **)v6;
      v31 = *(_OWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v31 <= 0xFuLL)
      {
        v9 = "SwiftObjCMembers";
        goto LABEL_1000;
      }
      v76 = "SwiftObjCMembers";
LABEL_1547:
      *v31 = *(_OWORD *)v76;
      v58 = *((_QWORD *)v7 + 4) + 16;
      goto LABEL_1548;
    case 0x1EF:
      v7 = *(llvm::raw_ostream **)v6;
      v35 = *(_QWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v35 <= 0xDuLL)
      {
        v9 = "SwiftVersioned";
        goto LABEL_1000;
      }
      v82 = "SwiftVersioned";
LABEL_1539:
      *v35 = *(_QWORD *)v82;
      *(_QWORD *)((char *)v35 + 6) = *(_QWORD *)(v82 + 6);
      v58 = *((_QWORD *)v7 + 4) + 14;
      goto LABEL_1548;
    case 0x1F0:
      v7 = *(llvm::raw_ostream **)v6;
      v37 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v37) <= 0x14)
      {
        v9 = "SwiftVersionedRemoval";
        goto LABEL_1000;
      }
      v85 = "SwiftVersionedRemoval";
LABEL_1541:
      *(_OWORD *)v37 = *(_OWORD *)v85;
      *(_QWORD *)(v37 + 13) = *(_QWORD *)(v85 + 13);
      v58 = *((_QWORD *)v7 + 4) + 21;
      goto LABEL_1548;
    case 0x1F1:
      v7 = *(llvm::raw_ostream **)v6;
      v18 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v18) > 5)
      {
        *(_WORD *)(v18 + 4) = 25697;
        v60 = 1701996628;
LABEL_1543:
        *(_DWORD *)v18 = v60;
        v58 = *((_QWORD *)v7 + 4) + 6;
LABEL_1548:
        *((_QWORD *)v7 + 4) = v58;
      }
      else
      {
        v9 = "Thread";
LABEL_1000:
        llvm::raw_ostream::write(v7, v9);
      }
LABEL_1001:
      v43 = *(llvm::raw_ostream **)v6;
      v44 = *(_DWORD **)(*(_QWORD *)v6 + 32);
      if (*(_QWORD *)(*(_QWORD *)v6 + 24) - (_QWORD)v44 <= 3uLL)
      {
        llvm::raw_ostream::write(v43, "Attr");
        if (!v5)
          goto LABEL_1004;
        goto LABEL_1003;
      }
      *v44 = 1920234561;
      *((_QWORD *)v43 + 4) += 4;
      if (v5)
LABEL_1003:
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
LABEL_1004:
      sub_22F402544(a1);
      sub_22F4025EC((llvm::raw_ostream *)a1, *(_QWORD *)(a2 + 16));
      if (((*(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16)) & 0x10000) != 0)
      {
        v45 = *(llvm::raw_ostream **)v6;
        v46 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v46) > 9)
        {
          *(_WORD *)(v46 + 8) = 25701;
          *(_QWORD *)v46 = *(_QWORD *)" Inherited";
          *((_QWORD *)v45 + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(v45, " Inherited");
        }
      }
      if (((*(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16)) & 0x40000) != 0)
      {
        v47 = *(llvm::raw_ostream **)v6;
        v48 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 24) - v48) > 8)
        {
          *(_BYTE *)(v48 + 8) = 116;
          *(_QWORD *)v48 = *(_QWORD *)" Implicit";
          *((_QWORD *)v47 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v47, " Implicit");
        }
      }
      sub_22F0F6F80(a1, a2);
      return;
    default:
      goto LABEL_1001;
  }
}

void sub_22F0F6F80(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F0F6FD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;

  v55 = *(llvm::raw_ostream **)(v54 + 1088);
  v56 = (_BYTE *)*((_QWORD *)v55 + 4);
  if (*((_BYTE **)v55 + 3) == v56)
  {
    llvm::raw_ostream::write(v55, " ");
  }
  else
  {
    *v56 = 32;
    ++*((_QWORD *)v55 + 4);
  }
  return llvm::raw_ostream::operator<<();
}

void sub_22F0F7628()
{
  uint64_t v0;
  uint64_t v1;
  llvm::raw_ostream *v2;
  _BYTE *v3;

  v2 = *(llvm::raw_ostream **)(v1 + 1088);
  v3 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v3)
  {
    llvm::raw_ostream::write(v2, " ");
  }
  else
  {
    *v3 = 32;
    ++*((_QWORD *)v2 + 4);
  }
  sub_22F399B44(v0);
  JUMPOUT(0x22F0F8650);
}

llvm::raw_ostream *sub_22F0F86A8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F4068CC(*(llvm::raw_ostream **)(v1 + 1088), v0);
}

llvm::raw_ostream *sub_22F0F86C8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F4068CC(*(llvm::raw_ostream **)(v1 + 1088), v0);
}

llvm::raw_ostream **sub_22F0F86E8()
{
  uint64_t v0;
  llvm::raw_ostream **v1;

  return sub_22F406B40(v1, *(_DWORD *)(v0 + 36), *(_QWORD *)(v0 + 40));
}

llvm::raw_ostream **sub_22F0F870C()
{
  uint64_t v0;
  llvm::raw_ostream **v1;

  return sub_22F406948(v1, v0);
}

_QWORD *sub_22F0F8AA0(_QWORD *result, uint64_t a2, char *a3, size_t a4)
{
  _BYTE *v7;
  llvm::raw_ostream *v8;
  void *v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t (**v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return result;
  v7 = result;
  if (!*((_BYTE *)result + 1056))
  {
    if (*((_BYTE *)result + 1057))
    {
      v11 = operator new(0x48uLL);
      *v11 = off_24FAC7088;
      v11[1] = v7;
      v11[2] = a3;
      v11[3] = a4;
      v11[4] = v7;
      v11[5] = a2;
      v11[6] = 0;
      *((_BYTE *)v11 + 71) = 0;
      v25 = v11;
      sub_22E536AAC((uint64_t)(v7 + 16), (unint64_t)v24);
      result = v25;
      if (v25 != v24)
      {
LABEL_8:
        if (!result)
        {
LABEL_32:
          v7[1057] = 0;
          return result;
        }
        v12 = (uint64_t (**)(_QWORD *))(*result + 40);
LABEL_31:
        result = (_QWORD *)(*v12)(result);
        goto LABEL_32;
      }
    }
    else
    {
      v20 = result[2] + 32 * *((unsigned int *)result + 6);
      LOBYTE(v24[0]) = 0;
      v21 = *(_QWORD *)(v20 - 8);
      if (!v21)
LABEL_35:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 48))(v21, v24);
      v22 = (_QWORD *)(*((_QWORD *)v7 + 2) + 32 * *((unsigned int *)v7 + 6) - 32);
      v23 = operator new(0x48uLL);
      *v23 = off_24FAC7088;
      v23[1] = v7;
      v23[2] = a3;
      v23[3] = a4;
      v23[4] = v7;
      v23[5] = a2;
      v23[6] = 0;
      *((_BYTE *)v23 + 71) = 0;
      v25 = v23;
      sub_22E63BEA4(v24, v22);
      result = v25;
      if (v25 != v24)
        goto LABEL_8;
    }
    v12 = (uint64_t (**)(_QWORD *))(v24[0] + 32);
    result = v24;
    goto LABEL_31;
  }
  *((_BYTE *)result + 1056) = 0;
  if (a4)
  {
    v8 = (llvm::raw_ostream *)result[136];
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (a4 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
    {
      memcpy(v9, a3, a4);
      v10 = (_BYTE *)(*((_QWORD *)v8 + 4) + a4);
      *((_QWORD *)v8 + 4) = v10;
    }
    else
    {
      v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(*((llvm::raw_ostream **)v7 + 136), a3);
      v10 = (_BYTE *)*((_QWORD *)v8 + 4);
    }
    if ((unint64_t)v10 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v10 + 1;
      *v10 = 32;
    }
  }
  sub_22F0FD464((uint64_t)v7, a2);
  LODWORD(v13) = *((_DWORD *)v7 + 6);
  if ((_DWORD)v13)
  {
    while (1)
    {
      v14 = *((_QWORD *)v7 + 2) + 32 * v13;
      LOBYTE(v24[0]) = 1;
      v15 = *(_QWORD *)(v14 - 8);
      if (!v15)
        goto LABEL_35;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v24);
      v13 = (*((_DWORD *)v7 + 6) - 1);
      *((_DWORD *)v7 + 6) = v13;
      v16 = *((_QWORD *)v7 + 2) + 32 * v13;
      v17 = *(_QWORD **)(v16 + 24);
      if (v17 == (_QWORD *)v16)
        break;
      if (v17)
      {
        v18 = 5;
LABEL_20:
        (*(void (**)(void))(*v17 + 8 * v18))();
        LODWORD(v13) = *((_DWORD *)v7 + 6);
      }
      if (!(_DWORD)v13)
        goto LABEL_22;
    }
    v17 = (_QWORD *)(*((_QWORD *)v7 + 2) + 32 * v13);
    v18 = 4;
    goto LABEL_20;
  }
LABEL_22:
  if ((char)v7[1087] < 0)
  {
    **((_BYTE **)v7 + 133) = 0;
    *((_QWORD *)v7 + 134) = 0;
  }
  else
  {
    v7[1064] = 0;
    v7[1087] = 0;
  }
  result = *(_QWORD **)v7;
  v19 = *(_BYTE **)(*(_QWORD *)v7 + 32);
  if (*(_BYTE **)(*(_QWORD *)v7 + 24) == v19)
  {
    result = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n");
  }
  else
  {
    *v19 = 10;
    ++result[4];
  }
  v7[1056] = 1;
  return result;
}

void sub_22F0F8D78(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::raw_ostream *v8;
  const char **v9;
  const char *v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  llvm::raw_ostream *v14;
  int v15;
  llvm::raw_ostream *v16;
  _OWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  llvm::raw_ostream *v21;
  int *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  const char *v28;
  _OWORD *v29;
  const char *v30;
  void *v31;
  void *v32;
  unsigned __int16 v33;
  uint64_t v34;
  const char *v35;

  v3 = *(_QWORD *)(a1 + 1088);
  v4 = *(unsigned __int8 *)(a1 + 1096);
  if (a2)
  {
    v8 = *(llvm::raw_ostream **)(a1 + 1088);
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 5, 1, 0);
      v8 = *(llvm::raw_ostream **)(a1 + 1088);
    }
    v9 = (const char **)sub_22F0D3748(*a2);
    v10 = *v9;
    if (*v9)
    {
      v11 = strlen(*v9);
      v12 = (void *)*((_QWORD *)v8 + 4);
      if (v11 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
      {
        if (v11)
        {
          memcpy(v12, v10, v11);
          *((_QWORD *)v8 + 4) += v11;
        }
      }
      else
      {
        llvm::raw_ostream::write(v8, v10);
      }
    }
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    sub_22F402544(a1);
    sub_22F0D4E74((uint64_t)a2);
    sub_22F4025EC((llvm::raw_ostream *)a1, v13);
    if ((*a2 + 21) < 0x7Bu)
      goto LABEL_15;
    sub_22F40287C(a1, *((_QWORD *)a2 + 1));
    if ((a2[2] & 2) != 0)
    {
      v14 = *(llvm::raw_ostream **)(a1 + 1088);
      v15 = *(unsigned __int8 *)(a1 + 1096);
      v16 = v14;
      if (*(_BYTE *)(a1 + 1096))
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 24))(*(_QWORD *)(a1 + 1088), 1, 1, 0);
        v16 = *(llvm::raw_ostream **)(a1 + 1088);
      }
      v17 = (_OWORD *)*((_QWORD *)v16 + 4);
      if (*((_QWORD *)v16 + 3) - (_QWORD)v17 <= 0xFuLL)
      {
        llvm::raw_ostream::write(v16, " contains-errors");
        if (!v15)
          goto LABEL_24;
        goto LABEL_23;
      }
      *v17 = *(_OWORD *)" contains-errors";
      *((_QWORD *)v16 + 4) += 16;
      if (v15)
LABEL_23:
        (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v14 + 32))(v14);
    }
LABEL_24:
    v18 = *(_QWORD *)(a1 + 1088);
    v19 = *(unsigned __int8 *)(a1 + 1096);
    if (*(_BYTE *)(a1 + 1096))
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 24))(*(_QWORD *)(a1 + 1088), 6, 0, 0);
    v20 = (*(_DWORD *)a2 >> 8) & 3;
    if (v20 == 2)
    {
      v21 = *(llvm::raw_ostream **)(a1 + 1088);
      v22 = (int *)*((_QWORD *)v21 + 4);
      if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 6uLL)
      {
        v23 = " xvalue";
        goto LABEL_32;
      }
      *(int *)((char *)v22 + 3) = 1702194273;
      v33 = 30752;
    }
    else
    {
      if (v20 != 1)
        goto LABEL_33;
      v21 = *(llvm::raw_ostream **)(a1 + 1088);
      v22 = (int *)*((_QWORD *)v21 + 4);
      if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 6uLL)
      {
        v23 = " lvalue";
LABEL_32:
        llvm::raw_ostream::write(v21, v23);
LABEL_33:
        if (!v19)
          goto LABEL_35;
        goto LABEL_34;
      }
      *(int *)((char *)v22 + 3) = 1702194273;
      v33 = 27680;
    }
    *v22 = v33 | 0x61760000;
    *((_QWORD *)v21 + 4) += 7;
    if (!v19)
    {
LABEL_35:
      v24 = *(_QWORD *)(a1 + 1088);
      v25 = *(unsigned __int8 *)(a1 + 1096);
      if (*(_BYTE *)(a1 + 1096))
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 24))(*(_QWORD *)(a1 + 1088), 6, 0, 0);
      switch((*(_DWORD *)a2 >> 10) & 7)
      {
        case 1:
          v26 = *(llvm::raw_ostream **)(a1 + 1088);
          v27 = *((_QWORD *)v26 + 4);
          if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) <= 8)
          {
            v28 = " bitfield";
            goto LABEL_48;
          }
          *(_BYTE *)(v27 + 8) = 100;
          *(_QWORD *)v27 = *(_QWORD *)" bitfield";
          v34 = *((_QWORD *)v26 + 4) + 9;
          goto LABEL_67;
        case 2:
          v26 = *(llvm::raw_ostream **)(a1 + 1088);
          v29 = (_OWORD *)*((_QWORD *)v26 + 4);
          if (*((_QWORD *)v26 + 3) - (_QWORD)v29 <= 0xFuLL)
          {
            v30 = " vectorcomponent";
            goto LABEL_52;
          }
          v35 = " vectorcomponent";
          goto LABEL_66;
        case 3:
          v26 = *(llvm::raw_ostream **)(a1 + 1088);
          v31 = (void *)*((_QWORD *)v26 + 4);
          if (*((_QWORD *)v26 + 3) - (_QWORD)v31 <= 0xCuLL)
          {
            v28 = " objcproperty";
            goto LABEL_48;
          }
          qmemcpy(v31, " objcproperty", 13);
          v34 = *((_QWORD *)v26 + 4) + 13;
          goto LABEL_67;
        case 4:
          v26 = *(llvm::raw_ostream **)(a1 + 1088);
          v32 = (void *)*((_QWORD *)v26 + 4);
          if (*((_QWORD *)v26 + 3) - (_QWORD)v32 > 0xDuLL)
          {
            qmemcpy(v32, " objcsubscript", 14);
            v34 = *((_QWORD *)v26 + 4) + 14;
            goto LABEL_67;
          }
          v28 = " objcsubscript";
LABEL_48:
          llvm::raw_ostream::write(v26, v28);
          if (!v25)
            goto LABEL_15;
          goto LABEL_54;
        case 5:
          v26 = *(llvm::raw_ostream **)(a1 + 1088);
          v29 = (_OWORD *)*((_QWORD *)v26 + 4);
          if (*((_QWORD *)v26 + 3) - (_QWORD)v29 > 0xFuLL)
          {
            v35 = " matrixcomponent";
LABEL_66:
            *v29 = *(_OWORD *)v35;
            v34 = *((_QWORD *)v26 + 4) + 16;
LABEL_67:
            *((_QWORD *)v26 + 4) = v34;
            if (v25)
              goto LABEL_54;
          }
          else
          {
            v30 = " matrixcomponent";
LABEL_52:
            llvm::raw_ostream::write(v26, v30);
LABEL_53:
            if (v25)
LABEL_54:
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          }
LABEL_15:
          sub_22F0F9274(a1, (int *)a2);
          return;
        default:
          goto LABEL_53;
      }
    }
LABEL_34:
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    goto LABEL_35;
  }
  v5 = *(llvm::raw_ostream **)(a1 + 1088);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(v3, 4, 0, 0);
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
  }
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 9)
  {
    *(_WORD *)(v6 + 8) = 15934;
    *(_QWORD *)v6 = *(_QWORD *)"<<<NULL>>>";
    *((_QWORD *)v5 + 4) += 10;
    if (v4)
      goto LABEL_6;
  }
  else
  {
    llvm::raw_ostream::write(v5, "<<<NULL>>>");
    if (v4)
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
}

void sub_22F0F9274(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(unsigned __int8 *)a2;
  if ((v2 & 0xFE) == 0x70)
  {
    v3 = *a2;
    switch((*a2 >> 18) & 0x3F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x20u:
        sub_22F404A08(a1, a2);
        return;
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        sub_22F404AE0(a1, (uint64_t)a2);
        return;
      default:
        goto LABEL_6;
    }
  }
  v4 = *(unsigned __int8 *)a2;
  if (v2 == 233)
  {
    v3 = *a2;
    switch((*a2 >> 18) & 0x1F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        sub_22F4047E8(a1, a2);
        return;
      default:
LABEL_6:
        v4 = v3;
        break;
    }
  }
  __asm { BR              X11 }
}

void sub_22F0FB2A4(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _OWORD *v12;
  const char *p_p;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  const char *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  __int128 __p;
  uint64_t v26;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = *(unsigned __int8 *)(a1 + 1096);
  if (*(_BYTE *)(a1 + 1096))
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 24))(*(_QWORD *)(a1 + 1088), 2, 0, 0);
  v8 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 8) != 0)
  {
    v8 = (_QWORD *)*v8;
    v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
  }
  else
  {
    v9 = a2 & 7;
  }
  v10 = *(llvm::raw_ostream **)(a1 + 1088);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 1088), "'");
  }
  else
  {
    *v11 = 39;
    ++*((_QWORD *)v10 + 4);
  }
  v12 = (_OWORD *)(a1 + 1136);
  __p = 0uLL;
  v26 = 0;
  sub_22F1193C0((int)v8, v9, &__p, (_OWORD *)(a1 + 1136));
  if (v26 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, p_p);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "'");
  }
  else
  {
    *v15 = 39;
    ++*((_QWORD *)v14 + 4);
  }
  if (SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (a3)
  {
    if (a2 >= 0x10)
    {
      v16 = sub_22F10D058(a2);
      v18 = v16;
      v19 = v17;
      if (v8 != (_QWORD *)v16 || v9 != v17)
      {
        v20 = *(llvm::raw_ostream **)(a1 + 1088);
        v21 = (_WORD *)*((_QWORD *)v20 + 4);
        if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
        {
          *v21 = 10042;
          *((_QWORD *)v20 + 4) += 2;
        }
        else
        {
          v20 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, ":'");
        }
        __p = 0uLL;
        v26 = 0;
        sub_22F1193C0(v18, v19, &__p, v12);
        v22 = v26 >= 0 ? (const char *)&__p : (const char *)__p;
        v23 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, v22);
        v24 = (_BYTE *)*((_QWORD *)v23 + 4);
        if (*((_BYTE **)v23 + 3) == v24)
        {
          llvm::raw_ostream::write(v23, "'");
        }
        else
        {
          *v24 = 39;
          ++*((_QWORD *)v23 + 4);
        }
        if (SHIBYTE(v26) < 0)
          operator delete((void *)__p);
      }
    }
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
}

void sub_22F0FB510(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _QWORD *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unint64_t v10;
  std::string *p_p;
  unint64_t v12;
  std::string __p;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 7uLL)
  {
    *v5 = 0x657079546C617551;
    *((_QWORD *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, "QualType");
  }
  sub_22F402544(a1);
  v6 = *(llvm::raw_ostream **)(a1 + 1088);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, " ");
  }
  else
  {
    *v7 = 32;
    ++*((_QWORD *)v6 + 4);
  }
  sub_22F0FB2A4(a1, a2, 0);
  v8 = *(llvm::raw_ostream **)(a1 + 1088);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, " ");
  }
  else
  {
    *v9 = 32;
    ++*((_QWORD *)v8 + 4);
  }
  if ((a2 & 8) != 0)
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
  else
    v10 = a2 & 7;
  v12 = v10;
  sub_22F40B554(&v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  llvm::raw_ostream::write(v8, (const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

llvm::raw_ostream *sub_22F0FB680(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  uint64_t v19;
  int v20;
  llvm::raw_ostream *result;
  uint64_t v22;
  llvm::raw_ostream *v24;
  char *v25;
  size_t v26;
  _DWORD *v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _QWORD *v30;

  v19 = *(_QWORD *)(a1 + 1088);
  v20 = *(unsigned __int8 *)(a1 + 1096);
  if (a2)
  {
    v24 = *(llvm::raw_ostream **)(a1 + 1088);
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 24))(*(_QWORD *)(a1 + 1088), 2, 1, 0);
      v24 = *(llvm::raw_ostream **)(a1 + 1088);
    }
    v25 = sub_22F3AEA44(a2);
    v26 = strlen(v25);
    v27 = (_DWORD *)*((_QWORD *)v24 + 4);
    if (v26 <= *((_QWORD *)v24 + 3) - (_QWORD)v27)
    {
      if (v26)
      {
        memcpy(v27, v25, v26);
        v27 = (_DWORD *)(*((_QWORD *)v24 + 4) + v26);
        *((_QWORD *)v24 + 4) = v27;
      }
    }
    else
    {
      v24 = (llvm::raw_ostream *)llvm::raw_ostream::write(v24, v25);
      v27 = (_DWORD *)*((_QWORD *)v24 + 4);
    }
    if (*((_QWORD *)v24 + 3) - (_QWORD)v27 > 3uLL)
    {
      *v27 = 1818453316;
      *((_QWORD *)v24 + 4) += 4;
      if (!v20)
        goto LABEL_14;
    }
    else
    {
      llvm::raw_ostream::write(v24, "Decl");
      if (!v20)
      {
LABEL_14:
        sub_22F402544(a1);
        v28 = *(_QWORD *)(a2 + 16);
        if ((v28 & 4) != 0 && *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 8) != *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8))
        {
          v29 = *(llvm::raw_ostream **)(a1 + 1088);
          v30 = (_QWORD *)*((_QWORD *)v29 + 4);
          if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 7uLL)
          {
            *v30 = 0x20746E6572617020;
            *((_QWORD *)v29 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v29, " parent ");
          }
          llvm::raw_ostream::operator<<();
        }
        __asm { BR              X11 }
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    goto LABEL_14;
  }
  result = *(llvm::raw_ostream **)(a1 + 1088);
  if (v20)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 24))(v19, 4, 0, 0);
    result = *(llvm::raw_ostream **)(a1 + 1088);
  }
  v22 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v22) <= 9)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "<<<NULL>>>");
    if (!v20)
      return result;
    return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  }
  *(_WORD *)(v22 + 8) = 15934;
  *(_QWORD *)v22 = *(_QWORD *)"<<<NULL>>>";
  *((_QWORD *)result + 4) += 10;
  if (v20)
    return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  return result;
}

void sub_22F0FD344(uint64_t a1, uint64_t *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x11)
  {
    *(_WORD *)(v5 + 16) = 29285;
    *(_OWORD *)v5 = *(_OWORD *)"CXXCtorInitializer";
    *((_QWORD *)v4 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v4, "CXXCtorInitializer");
  }
  v6 = *a2;
  v7 = *a2 & 6;
  if (v7 == 2 || v7 == 4)
  {
    v9 = *(llvm::raw_ostream **)(a1 + 1088);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      llvm::raw_ostream::write(v9);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 32;
    }
    v11 = *a2;
    v12 = *a2 & 6;
    if (v12 == 4)
    {
      v14 = *(_QWORD *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 56)
                      + 8 * *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 64)
                      - 8);
    }
    else
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12 == 2)
        v14 = v13;
      else
        v14 = 0;
    }
    sub_22F0FD464(a1, v14);
  }
  else
  {
    if (v7 || (*((_WORD *)a2 + 14) & 1) != 0)
      v15 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    else
      v15 = *(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
    sub_22F40287C(a1, v15);
  }
}

void sub_22F0FD464(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::raw_ostream *v8;
  char *v9;
  size_t v10;
  void *v11;
  llvm::raw_ostream *v12;
  int v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;

  v3 = *(_QWORD *)(a1 + 1088);
  v4 = *(unsigned __int8 *)(a1 + 1096);
  if (a2)
  {
    v8 = *(llvm::raw_ostream **)(a1 + 1088);
    if (*(_BYTE *)(a1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 2, 1, 0);
      v8 = *(llvm::raw_ostream **)(a1 + 1088);
    }
    v9 = sub_22F3AEA44(a2);
    v10 = strlen(v9);
    v11 = (void *)*((_QWORD *)v8 + 4);
    if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v11)
    {
      if (v10)
      {
        memcpy(v11, v9, v10);
        *((_QWORD *)v8 + 4) += v10;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, v9);
    }
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    sub_22F402544(a1);
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
    {
      v12 = *(llvm::raw_ostream **)(a1 + 1088);
      v13 = *(unsigned __int8 *)(a1 + 1096);
      v14 = v12;
      if (*(_BYTE *)(a1 + 1096))
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(*(_QWORD *)(a1 + 1088), 6, 1, 0);
        v14 = *(llvm::raw_ostream **)(a1 + 1088);
      }
      v15 = (_WORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 10016;
        *((_QWORD *)v14 + 4) += 2;
      }
      else
      {
        v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, " '");
      }
      v16 = (llvm::raw_ostream *)sub_22EFC6724((uint64_t)v14, *(_QWORD *)(a2 + 40));
      v17 = (_BYTE *)*((_QWORD *)v16 + 4);
      if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
      {
        llvm::raw_ostream::write(v16);
      }
      else
      {
        *((_QWORD *)v16 + 4) = v17 + 1;
        *v17 = 39;
      }
      if (v13)
        (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v12 + 32))(v12);
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 >= 0xFFFFFFE5)
      sub_22F40287C(a1, *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(v3, 4, 0, 0);
      v5 = *(llvm::raw_ostream **)(a1 + 1088);
    }
    v6 = *((_QWORD *)v5 + 4);
    if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 9)
    {
      *(_WORD *)(v6 + 8) = 15934;
      *(_QWORD *)v6 = *(_QWORD *)"<<<NULL>>>";
      *((_QWORD *)v5 + 4) += 10;
      if (v4)
        goto LABEL_6;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<<NULL>>>");
      if (v4)
LABEL_6:
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
  }
}

llvm::raw_ostream *sub_22F0FD6D4(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  int v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  char *OpenMPClauseName;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  uint64_t v13;
  const char *p_p;
  llvm::raw_ostream *v15;
  _WORD *v16;
  uint64_t v17;
  _QWORD v18[2];
  void *__p;
  char v20;

  v3 = *(_QWORD *)(a1 + 1088);
  v4 = *(unsigned __int8 *)(a1 + 1096);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 1096))
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 4, 1, 0);
    OpenMPClauseName = (char *)llvm::omp::getOpenMPClauseName();
    v10 = v9;
    v11 = *(llvm::raw_ostream **)(a1 + 1088);
    v12 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 2)
    {
      *(_BYTE *)(v12 + 2) = 80;
      *(_WORD *)v12 = 19791;
      *((_QWORD *)v11 + 4) += 3;
    }
    else
    {
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 1088), "OMP");
    }
    v13 = v10 != 0;
    v18[0] = OpenMPClauseName;
    v18[1] = v13;
    if (v10)
      ++OpenMPClauseName;
    llvm::StringRef::upper((llvm::StringRef *)v18);
    if (v20 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, p_p);
    v16 = (_WORD *)*((_QWORD *)v15 + 4);
    if ((unint64_t)(v10 - v13) <= *((_QWORD *)v15 + 3) - (_QWORD)v16)
    {
      if (v10 != v13)
      {
        memcpy(v16, OpenMPClauseName, v10 - v13);
        v16 = (_WORD *)(*((_QWORD *)v15 + 4) + v10 - v13);
        *((_QWORD *)v15 + 4) = v16;
      }
    }
    else
    {
      v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, OpenMPClauseName);
      v16 = (_WORD *)*((_QWORD *)v15 + 4);
    }
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 5uLL)
    {
      v16[2] = 25971;
      *(_DWORD *)v16 = 1969318979;
      *((_QWORD *)v15 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v15, "Clause");
    }
    if (v20 < 0)
      operator delete(__p);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    sub_22F402544(a1);
    result = sub_22F4025EC((llvm::raw_ostream *)a1, *a2);
    if (!*(_DWORD *)a2)
    {
      result = *(llvm::raw_ostream **)(a1 + 1088);
      v17 = *((_QWORD *)result + 4);
      if ((unint64_t)(*((_QWORD *)result + 3) - v17) > 0xA)
      {
        *(_DWORD *)(v17 + 7) = 1047816547;
        *(_QWORD *)v17 = *(_QWORD *)" <implicit>";
        *((_QWORD *)result + 4) += 11;
      }
      else
      {
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " <implicit>");
      }
    }
  }
  else
  {
    result = *(llvm::raw_ostream **)(a1 + 1088);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(v3, 4, 0, 0);
      result = *(llvm::raw_ostream **)(a1 + 1088);
    }
    v6 = *((_QWORD *)result + 4);
    if ((unint64_t)(*((_QWORD *)result + 3) - v6) > 0x13)
    {
      *(_DWORD *)(v6 + 16) = 1702065505;
      *(_OWORD *)v6 = *(_OWORD *)"<<<NULL>>> OMPClause";
      *((_QWORD *)result + 4) += 20;
      if (v4)
        return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "<<<NULL>>> OMPClause");
      if (v4)
        return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F0FD9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  llvm::raw_ostream *result;
  void *v6;
  llvm::raw_ostream *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  void *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;

  v3 = *(_QWORD *)(a1 + 1088);
  v4 = *(unsigned __int8 *)(a1 + 1096);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 1096))
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(*(_QWORD *)(a1 + 1088), 5, 1, 0);
    switch(*(_DWORD *)a2)
    {
      case 0:
        v8 = *(llvm::raw_ostream **)(a1 + 1088);
        v9 = (void *)*((_QWORD *)v8 + 4);
        if (*((_QWORD *)v8 + 3) - (_QWORD)v9 <= 0xEuLL)
        {
          v10 = "TypeRequirement";
          goto LABEL_18;
        }
        qmemcpy(v9, "TypeRequirement", 15);
        v23 = *((_QWORD *)v8 + 4) + 15;
        goto LABEL_55;
      case 1:
        v8 = *(llvm::raw_ostream **)(a1 + 1088);
        v11 = *((_QWORD *)v8 + 4);
        if ((unint64_t)(*((_QWORD *)v8 + 3) - v11) <= 0x10)
        {
          v12 = "SimpleRequirement";
          goto LABEL_22;
        }
        v24 = "SimpleRequirement";
        goto LABEL_54;
      case 2:
        v8 = *(llvm::raw_ostream **)(a1 + 1088);
        v13 = *((_QWORD *)v8 + 4);
        if ((unint64_t)(*((_QWORD *)v8 + 3) - v13) > 0x12)
        {
          *(_DWORD *)(v13 + 15) = 1953391981;
          *(_OWORD *)v13 = *(_OWORD *)"CompoundRequirement";
          v23 = *((_QWORD *)v8 + 4) + 19;
          goto LABEL_55;
        }
        v10 = "CompoundRequirement";
LABEL_18:
        llvm::raw_ostream::write(v8, v10);
        if (!v4)
          goto LABEL_25;
        goto LABEL_24;
      case 3:
        v8 = *(llvm::raw_ostream **)(a1 + 1088);
        v11 = *((_QWORD *)v8 + 4);
        if ((unint64_t)(*((_QWORD *)v8 + 3) - v11) > 0x10)
        {
          v24 = "NestedRequirement";
LABEL_54:
          *(_BYTE *)(v11 + 16) = 116;
          *(_OWORD *)v11 = *(_OWORD *)v24;
          v23 = *((_QWORD *)v8 + 4) + 17;
LABEL_55:
          *((_QWORD *)v8 + 4) = v23;
          if (v4)
            goto LABEL_24;
        }
        else
        {
          v12 = "NestedRequirement";
LABEL_22:
          llvm::raw_ostream::write(v8, v12);
LABEL_23:
          if (v4)
LABEL_24:
            (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        }
LABEL_25:
        result = (llvm::raw_ostream *)sub_22F402544(a1);
        if ((*(_DWORD *)a2 - 3) >= 0xFFFFFFFE && *(_DWORD *)(a2 + 16))
        {
          result = *(llvm::raw_ostream **)(a1 + 1088);
          v14 = *((_QWORD *)result + 4);
          if ((unint64_t)(*((_QWORD *)result + 3) - v14) > 8)
          {
            *(_BYTE *)(v14 + 8) = 116;
            *(_QWORD *)v14 = *(_QWORD *)" noexcept";
            *((_QWORD *)result + 4) += 9;
          }
          else
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, " noexcept");
          }
        }
        v15 = *(_QWORD *)(a1 + 1088);
        if ((*(_BYTE *)(a2 + 4) & 1) != 0)
        {
          v20 = *(_QWORD *)(v15 + 32);
          if ((unint64_t)(*(_QWORD *)(v15 + 24) - v20) <= 9)
          {
            v16 = " dependent";
            v19 = *(llvm::raw_ostream **)(a1 + 1088);
            goto LABEL_40;
          }
          *(_WORD *)(v20 + 8) = 29806;
          *(_QWORD *)v20 = *(_QWORD *)" dependent";
          v22 = *(_QWORD *)(v15 + 32) + 10;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 4) & 4) != 0)
            v16 = " satisfied";
          else
            v16 = " unsatisfied";
          if ((*(_BYTE *)(a2 + 4) & 4) != 0)
            v17 = 10;
          else
            v17 = 12;
          v18 = *(void **)(v15 + 32);
          if (v17 > *(_QWORD *)(v15 + 24) - (_QWORD)v18)
          {
            v19 = *(llvm::raw_ostream **)(a1 + 1088);
LABEL_40:
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(v19, v16);
            goto LABEL_41;
          }
          result = (llvm::raw_ostream *)memcpy(v18, v16, v17);
          v22 = *(_QWORD *)(v15 + 32) + v17;
        }
        *(_QWORD *)(v15 + 32) = v22;
LABEL_41:
        if ((*(_BYTE *)(a2 + 4) & 2) != 0)
        {
          result = *(llvm::raw_ostream **)(a1 + 1088);
          v21 = (void *)*((_QWORD *)result + 4);
          if (*((_QWORD *)result + 3) - (_QWORD)v21 > 0x18uLL)
          {
            qmemcpy(v21, " contains_unexpanded_pack", 25);
            *((_QWORD *)result + 4) += 25;
          }
          else
          {
            return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " contains_unexpanded_pack");
          }
        }
        return result;
      default:
        goto LABEL_23;
    }
  }
  result = *(llvm::raw_ostream **)(a1 + 1088);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 24))(v3, 4, 0, 0);
    result = *(llvm::raw_ostream **)(a1 + 1088);
  }
  v6 = (void *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v6 > 0x15uLL)
  {
    qmemcpy(v6, "<<<NULL>>> Requirement", 22);
    *((_QWORD *)result + 4) += 22;
    if (v4)
      return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  else
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "<<<NULL>>> Requirement");
    if (v4)
      return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  return result;
}

void sub_22F0FDD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), unsigned int a5, const void *a6, size_t a7, uint64_t a8, const void *a9, size_t a10)
{
  const void *v10;
  unsigned int v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (**v39)(void);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (**v44)(void);
  uint64_t *v45;
  BOOL v46;
  _QWORD *v47;
  __int128 v53;
  uint64_t v54[9];
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t *v58;
  _DWORD v59[18];
  uint64_t v60;
  __int128 __p;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66[9];
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t *v72;
  _DWORD v73[18];
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v10 = a6;
    v11 = a5;
    v14 = 0;
    v15 = (_QWORD *)(a1 + 16);
    do
    {
      v16 = v14;
      do
      {
        for (i = a4(a2, v16); *(_DWORD *)i == 11; i = *(_QWORD *)(i + 16))
          ;
        if (((1 << *(_DWORD *)i) & 0x30FF) == 0)
          break;
        if ((v16 - v14) > 3)
          break;
        v16 = (v16 + 1);
      }
      while (v16 < v11);
      if ((int)v14 + 1 > v16)
        v18 = (v14 + 1);
      else
        v18 = v16;
      *(_QWORD *)&v53 = __PAIR64__(v18, v14);
      v19 = (v18 - v14) > 1;
      if ((v18 - v14) <= 1)
        v20 = v10;
      else
        v20 = a9;
      if (v19)
        v21 = a10;
      else
        v21 = a7;
      *((_QWORD *)&v53 + 1) = a1;
      sub_22EF530AC((uint64_t)v54, a2);
      v55 = a3;
      if (*(_BYTE *)(a1 + 1056))
      {
        *(_BYTE *)(a1 + 1056) = 0;
        v22 = v53;
        if (v53 < v18)
        {
          do
          {
            v23 = a4((uint64_t)v54, v22);
            sub_22F0FE404(a1, v23, v55);
            v22 = (v22 + 1);
            if ((_DWORD)v22 != (_DWORD)v18)
            {
              v24 = *(llvm::raw_ostream **)(a1 + 1088);
              v25 = (_WORD *)*((_QWORD *)v24 + 4);
              if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 1uLL)
              {
                *v25 = 8236;
                *((_QWORD *)v24 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v24, ", ");
              }
            }
          }
          while (v22 < v18);
        }
LABEL_27:
        LODWORD(v26) = *(_DWORD *)(a1 + 24);
        while ((_DWORD)v26)
        {
          v27 = *v15 + 32 * v26;
          LOBYTE(v70) = 1;
          v28 = *(_QWORD *)(v27 - 8);
          if (!v28)
            goto LABEL_84;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v70);
          v26 = (*(_DWORD *)(a1 + 24) - 1);
          *(_DWORD *)(a1 + 24) = v26;
          v29 = *(_QWORD *)(a1 + 16) + 32 * v26;
          v30 = *(_QWORD **)(v29 + 24);
          if (v30 == (_QWORD *)v29)
          {
            v30 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v26);
            v31 = 4;
            goto LABEL_34;
          }
          if (v30)
          {
            v31 = 5;
LABEL_34:
            (*(void (**)(void))(*v30 + 8 * v31))();
            goto LABEL_27;
          }
        }
        if (*(char *)(a1 + 1087) < 0)
        {
          **(_BYTE **)(a1 + 1064) = 0;
          *(_QWORD *)(a1 + 1072) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 1064) = 0;
          *(_BYTE *)(a1 + 1087) = 0;
        }
        v33 = *(llvm::raw_ostream **)a1;
        v34 = *(_BYTE **)(*(_QWORD *)a1 + 32);
        if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v34)
        {
          llvm::raw_ostream::write(v33, "\n");
        }
        else
        {
          *v34 = 10;
          ++*((_QWORD *)v33 + 4);
        }
        *(_BYTE *)(a1 + 1056) = 1;
        goto LABEL_77;
      }
      v63 = a1;
      v64 = v53;
      v65 = (uint64_t *)a4;
      sub_22EF530AC((uint64_t)v66, (uint64_t)v54);
      v67 = v55;
      if (!v20)
      {
        v68 = 0uLL;
        v69 = 0;
        goto LABEL_52;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_85;
      if (v21 >= 0x17)
      {
        v35 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v35 = v21 | 7;
        v36 = v35 + 1;
        v32 = (__int128 *)operator new(v35 + 1);
        *((_QWORD *)&v68 + 1) = v21;
        v69 = v36 | 0x8000000000000000;
        *(_QWORD *)&v68 = v32;
      }
      else
      {
        HIBYTE(v69) = v21;
        v32 = &v68;
        if (!v21)
          goto LABEL_51;
      }
      memmove(v32, v20, v21);
LABEL_51:
      *((_BYTE *)v32 + v21) = 0;
LABEL_52:
      if (!*(_BYTE *)(a1 + 1057))
      {
        v40 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
        LOBYTE(v70) = 0;
        v41 = *(_QWORD *)(v40 - 8);
        if (!v41)
        {
LABEL_84:
          sub_22E4A06C4();
LABEL_85:
          abort();
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 48))(v41, &v70);
        v47 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
        v70 = v63;
        v71 = v64;
        v72 = v65;
        sub_22EF530AC((uint64_t)v73, (uint64_t)v66);
        v74 = v67;
        v75 = v68;
        v76 = v69;
        v68 = 0uLL;
        v69 = 0;
        v78 = 0;
        v42 = (char *)operator new(0x90uLL);
        v43 = v70;
        *(_QWORD *)v42 = off_24FAC6F68;
        *((_QWORD *)v42 + 1) = v43;
        *((_OWORD *)v42 + 1) = v71;
        *((_QWORD *)v42 + 4) = v72;
        sub_22EF530AC((uint64_t)(v42 + 40), (uint64_t)v73);
        *((_QWORD *)v42 + 14) = v74;
        *(_OWORD *)(v42 + 120) = v75;
        *((_QWORD *)v42 + 17) = v76;
        v75 = 0uLL;
        v76 = 0;
        v78 = v42;
        sub_22E63BEA4(v77, v47);
        if (v78 == v77)
        {
          v44 = (void (**)(void))(v77[0] + 32);
          v10 = a6;
LABEL_67:
          (*v44)();
        }
        else
        {
          v10 = a6;
          if (v78)
          {
            v44 = (void (**)(void))(*v78 + 40);
            goto LABEL_67;
          }
        }
        if (SHIBYTE(v76) < 0)
          operator delete((void *)v75);
        if (v73[0] < 2u)
          goto LABEL_73;
        v45 = (uint64_t *)v73;
        goto LABEL_72;
      }
      v56 = v63;
      v57 = v64;
      v58 = v65;
      sub_22EF530AC((uint64_t)v59, (uint64_t)v66);
      v60 = v67;
      __p = v68;
      v62 = v69;
      v68 = 0uLL;
      v69 = 0;
      v72 = 0;
      v37 = (char *)operator new(0x90uLL);
      v38 = v56;
      *(_QWORD *)v37 = off_24FAC6F68;
      *((_QWORD *)v37 + 1) = v38;
      *((_OWORD *)v37 + 1) = v57;
      *((_QWORD *)v37 + 4) = v58;
      sub_22EF530AC((uint64_t)(v37 + 40), (uint64_t)v59);
      *((_QWORD *)v37 + 14) = v60;
      *(_OWORD *)(v37 + 120) = __p;
      *((_QWORD *)v37 + 17) = v62;
      __p = 0uLL;
      v62 = 0;
      v72 = (uint64_t *)v37;
      sub_22E536AAC((uint64_t)v15, (unint64_t)&v70);
      if (v72 == &v70)
      {
        v39 = (void (**)(void))(v70 + 32);
        v10 = a6;
        goto LABEL_61;
      }
      v10 = a6;
      if (v72)
      {
        v39 = (void (**)(void))(*v72 + 40);
LABEL_61:
        (*v39)();
      }
      if (SHIBYTE(v62) < 0)
        operator delete((void *)__p);
      if (v59[0] < 2u)
        goto LABEL_73;
      v45 = (uint64_t *)v59;
LABEL_72:
      sub_22EF53BC0(v45);
LABEL_73:
      *(_BYTE *)(a1 + 1057) = 0;
      if (SHIBYTE(v69) < 0)
        operator delete((void *)v68);
      if (LODWORD(v66[0]) >= 2)
        sub_22EF53BC0(v66);
LABEL_77:
      if (LODWORD(v54[0]) >= 2)
        sub_22EF53BC0(v54);
      v14 = v18;
      v46 = v18 >= a5;
      v11 = a5;
    }
    while (!v46);
  }
}

void sub_22F0FE404(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 1096))
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1088) + 24))(*(_QWORD *)(a1 + 1088), 6, 0, 0);
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22F0FE48C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  llvm::raw_ostream *result;
  _DWORD *v4;

  result = *(llvm::raw_ostream **)(v1 + 1088);
  v4 = (_DWORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v4 > 3uLL)
  {
    *v4 = 1701736270;
    *((_QWORD *)result + 4) += 4;
    if (!v2)
      return result;
  }
  else
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "None");
    if (!v2)
      return result;
  }
  return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
}

uint64_t sub_22F0FF614(uint64_t result, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  llvm::raw_ostream *v5;
  _OWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  void *v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  void *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  void *v24;
  llvm::raw_ostream *v25;
  void *v26;
  llvm::raw_ostream *v27;
  void *v28;
  llvm::raw_ostream *v29;
  void *v30;

  v2 = a2;
  v3 = result;
  v4 = HIDWORD(a2);
  if ((a2 & 0x300000000) != 0)
  {
    v5 = *(llvm::raw_ostream **)(result + 1088);
    v6 = (_OWORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xFuLL)
    {
      *v6 = *(_OWORD *)" FPContractMode=";
      *((_QWORD *)v5 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v5, " FPContractMode=");
    }
    result = llvm::raw_ostream::operator<<();
  }
  if ((v4 & 0x1C) != 0)
  {
    v29 = *(llvm::raw_ostream **)(v3 + 1088);
    v30 = (void *)*((_QWORD *)v29 + 4);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 0xDuLL)
    {
      qmemcpy(v30, " RoundingMode=", 14);
      *((_QWORD *)v29 + 4) += 14;
    }
    else
    {
      v29 = (llvm::raw_ostream *)llvm::raw_ostream::write(v29, " RoundingMode=");
    }
    result = (uint64_t)sub_22F40326C(v29, (v2 >> 2) & 7);
  }
  if ((v4 & 0x60) != 0)
  {
    v7 = *(llvm::raw_ostream **)(v3 + 1088);
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 0x10)
    {
      *(_BYTE *)(v8 + 16) = 61;
      *(_OWORD *)v8 = *(_OWORD *)" FPExceptionMode=";
      *((_QWORD *)v7 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v7, " FPExceptionMode=");
    }
    result = llvm::raw_ostream::operator<<();
  }
  if ((v4 & 0x80) != 0)
  {
    v9 = *(llvm::raw_ostream **)(v3 + 1088);
    v10 = *((_QWORD *)v9 + 4);
    if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) > 0x10)
    {
      *(_BYTE *)(v10 + 16) = 61;
      *(_OWORD *)v10 = *(_OWORD *)" AllowFEnvAccess=";
      *((_QWORD *)v9 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v9, " AllowFEnvAccess=");
    }
    result = llvm::raw_ostream::operator<<();
    if ((v4 & 0x100) == 0)
    {
LABEL_12:
      if ((v4 & 0x200) == 0)
        goto LABEL_13;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v11 = *(llvm::raw_ostream **)(v3 + 1088);
  v12 = *((_QWORD *)v11 + 4);
  if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 0x13)
  {
    *(_DWORD *)(v12 + 16) = 1030059105;
    *(_OWORD *)v12 = *(_OWORD *)" AllowFPReassociate=";
    *((_QWORD *)v11 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v11, " AllowFPReassociate=");
  }
  result = llvm::raw_ostream::operator<<();
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_24:
  v13 = *(llvm::raw_ostream **)(v3 + 1088);
  v14 = (void *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 0xCuLL)
  {
    qmemcpy(v14, " NoHonorNaNs=", 13);
    *((_QWORD *)v13 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v13, " NoHonorNaNs=");
  }
  result = llvm::raw_ostream::operator<<();
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_27:
  v15 = *(llvm::raw_ostream **)(v3 + 1088);
  v16 = (void *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xCuLL)
  {
    qmemcpy(v16, " NoHonorInfs=", 13);
    *((_QWORD *)v15 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v15, " NoHonorInfs=");
  }
  result = llvm::raw_ostream::operator<<();
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_30:
  v17 = *(llvm::raw_ostream **)(v3 + 1088);
  v18 = (void *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0xDuLL)
  {
    qmemcpy(v18, " NoSignedZero=", 14);
    *((_QWORD *)v17 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v17, " NoSignedZero=");
  }
  result = llvm::raw_ostream::operator<<();
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_36;
  }
LABEL_33:
  v19 = *(llvm::raw_ostream **)(v3 + 1088);
  v20 = *((_QWORD *)v19 + 4);
  if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0x10)
  {
    *(_BYTE *)(v20 + 16) = 61;
    *(_OWORD *)v20 = *(_OWORD *)" AllowReciprocal=";
    *((_QWORD *)v19 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v19, " AllowReciprocal=");
  }
  result = llvm::raw_ostream::operator<<();
  if ((v4 & 0x2000) != 0)
  {
LABEL_36:
    v21 = *(llvm::raw_ostream **)(v3 + 1088);
    v22 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 0x10)
    {
      *(_BYTE *)(v22 + 16) = 61;
      *(_OWORD *)v22 = *(_OWORD *)" AllowApproxFunc=";
      *((_QWORD *)v21 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v21, " AllowApproxFunc=");
    }
    result = llvm::raw_ostream::operator<<();
  }
LABEL_39:
  if ((v4 & 0xC000) != 0)
  {
    v23 = *(llvm::raw_ostream **)(v3 + 1088);
    v24 = (void *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 0xDuLL)
    {
      qmemcpy(v24, " FPEvalMethod=", 14);
      *((_QWORD *)v23 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v23, " FPEvalMethod=");
    }
    result = llvm::raw_ostream::operator<<();
  }
  if ((v4 & 0x30000) != 0)
  {
    v25 = *(llvm::raw_ostream **)(v3 + 1088);
    v26 = (void *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0x17uLL)
    {
      qmemcpy(v26, " Float16ExcessPrecision=", 24);
      *((_QWORD *)v25 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v25, " Float16ExcessPrecision=");
    }
    llvm::raw_ostream::operator<<();
    v27 = *(llvm::raw_ostream **)(v3 + 1088);
    v28 = (void *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 0x18uLL)
    {
      qmemcpy(v28, " BFloat16ExcessPrecision=", 25);
      *((_QWORD *)v27 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(v27, " BFloat16ExcessPrecision=");
    }
    return llvm::raw_ostream::operator<<();
  }
  return result;
}

llvm::raw_ostream *sub_22F0FFAF4(llvm::raw_ostream *this, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _WORD *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  llvm::raw_ostream *v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int *v16;
  const void *v17;
  size_t v18;
  unsigned int v19;
  _BYTE *v20;

  if (*(_DWORD *)(a2 + 4))
  {
    v3 = this;
    v4 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v4 > 1uLL)
    {
      *v4 = 10272;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, " (");
    }
    this = (llvm::raw_ostream *)sub_22EFFB554((unsigned __int8 *)a2);
    v5 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v5)
    {
      v6 = this;
      v7 = 8 * v5;
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)v6;
        if ((v8 & 1) == 0)
        {
          v10 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v10 > 3uLL)
          {
            *v10 = 540945696;
            *((_QWORD *)v3 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v3, " -> ");
          }
        }
        v11 = *(_QWORD *)(**(_QWORD **)(v9 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
          v11 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v9 + 16));
        this = (llvm::raw_ostream *)sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0)
                                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                                            + 24));
        v12 = this;
        if ((*(_BYTE *)(v9 + 12) & 1) != 0)
        {
          v13 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v13 > 7uLL)
          {
            *v13 = 0x206C617574726976;
            *((_QWORD *)v3 + 4) += 8;
          }
          else
          {
            this = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, "virtual ");
          }
        }
        v14 = *((_QWORD *)v12 + 5) & 0xFFFFFFFFFFFFFFF8;
        if ((*((_QWORD *)v12 + 5) & 7) == 0 && v14 != 0)
        {
          v16 = *(unsigned int **)(v14 + 16);
          v19 = *v16;
          v17 = v16 + 4;
          v18 = v19;
          this = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
          if ((unint64_t)v19 <= *((_QWORD *)v3 + 3) - (_QWORD)this)
          {
            if (v18)
            {
              this = (llvm::raw_ostream *)memcpy(this, v17, v18);
              *((_QWORD *)v3 + 4) += v18;
            }
          }
          else
          {
            this = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, (const char *)v17);
          }
        }
        v8 = 0;
        v6 = (llvm::raw_ostream *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
    }
    v20 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v20 >= *((_QWORD *)v3 + 3))
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(v3);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v20 + 1;
      *v20 = 41;
    }
  }
  return this;
}

llvm::raw_ostream *sub_22F0FFD24(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  const char *v6;
  size_t v7;
  _BYTE *v8;
  const char *p_p;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _WORD *v13;
  void *v14;
  char *v15;
  size_t v16;
  size_t v17;
  llvm::raw_ostream *result;
  _BYTE *v19;
  uint64_t v20;
  void *__p;
  char v22;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 1088), " ");
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  if ((*(_BYTE *)a2 + 110) > 5u)
    v6 = "<invalid cast>";
  else
    v6 = off_24FAC75C0[(char)(*(_BYTE *)a2 + 110)];
  v7 = strlen(v6);
  v8 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (v7 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
  {
    if (v7)
    {
      memcpy(v8, v6, v7);
      v8 = (_BYTE *)(*((_QWORD *)v4 + 4) + v7);
      *((_QWORD *)v4 + 4) = v8;
    }
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, v6);
    v8 = (_BYTE *)*((_QWORD *)v4 + 4);
  }
  if (*((_BYTE **)v4 + 3) == v8)
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, "<");
  }
  else
  {
    *v8 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  v20 = **(_QWORD **)(a2 + 24);
  sub_22F1192C0(&v20, (uint64_t)&__p);
  if (v22 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, p_p);
  v11 = v10;
  v12 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v12)
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, ">");
    v13 = (_WORD *)*((_QWORD *)v11 + 4);
  }
  else
  {
    *v12 = 62;
    v13 = (_WORD *)(*((_QWORD *)v10 + 4) + 1);
    *((_QWORD *)v10 + 4) = v13;
  }
  if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 15392;
    v14 = (void *)(*((_QWORD *)v11 + 4) + 2);
    *((_QWORD *)v11 + 4) = v14;
  }
  else
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, " <");
    v14 = (void *)*((_QWORD *)v11 + 4);
  }
  v15 = sub_22F3C1C54((*(_DWORD *)a2 >> 18) & 0x7F);
  v16 = strlen(v15);
  v17 = v16;
  if (v16 <= *((_QWORD *)v11 + 3) - (_QWORD)v14)
  {
    if (v16)
    {
      memcpy(v14, v15, v16);
      *((_QWORD *)v11 + 4) += v17;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, v15);
  }
  if (v22 < 0)
    operator delete(__p);
  sub_22F0FFAF4(*(llvm::raw_ostream **)(a1 + 1088), a2);
  result = *(llvm::raw_ostream **)(a1 + 1088);
  v19 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v19)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, ">");
  *v19 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

void sub_22F0FFFD4(uint64_t a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  _DWORD *v6;
  const char *v7;
  _WORD *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  std::string *p_p;
  uint64_t v12;
  unint64_t v13;
  std::string __p;

  v4 = (*(_DWORD *)(a2 + 16) >> 22) & 7;
  if (v4 == 2)
  {
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
    v8 = (_WORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v8 <= 1uLL)
    {
      v7 = " *";
      goto LABEL_7;
    }
    *v8 = 10784;
    v12 = *((_QWORD *)v5 + 4) + 2;
  }
  else
  {
    if (v4 != 1)
      goto LABEL_8;
    v5 = *(llvm::raw_ostream **)(a1 + 1088);
    v6 = (_DWORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v6 <= 6uLL)
    {
      v7 = " static";
LABEL_7:
      llvm::raw_ostream::write(v5, v7);
      goto LABEL_8;
    }
    *(_DWORD *)((char *)v6 + 3) = 1667855457;
    *v6 = 1635021600;
    v12 = *((_QWORD *)v5 + 4) + 7;
  }
  *((_QWORD *)v5 + 4) = v12;
LABEL_8:
  v9 = *(llvm::raw_ostream **)(a1 + 1088);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v10)
  {
    v9 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, " ");
  }
  else
  {
    *v10 = 32;
    ++*((_QWORD *)v9 + 4);
  }
  v13 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 19) & 7;
  sub_22F40B554(&v13, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  llvm::raw_ostream::write(v9, (const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22F100128(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 1088);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 1088), " ");
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  llvm::APInt::print((llvm::APInt *)(a2 + 40), v4);
  sub_22F0FFFD4(a1, a2);
}

void sub_22F1001A0(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;

  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ");
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  sub_22F4025EC(a1, *(_QWORD *)(a2 + 48));
  sub_22F0FFFD4((uint64_t)a1, a2);
}

llvm::raw_ostream *sub_22F10020C(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;

  sub_22F0FFFD4((uint64_t)a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ");
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  return sub_22F4025EC(a1, *(_QWORD *)(a2 + 56));
}

_QWORD *sub_22F100270(_QWORD *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (llvm::raw_ostream *)a1[136];
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 543716464;
    *v5 = 1885692960;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, " depth ");
  }
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 544761188;
    *v7 = 1684957472;
    *((_QWORD *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, " index ");
  }
  llvm::raw_ostream::operator<<();
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 33) & 0x80) != 0)
  {
    v8 = (llvm::raw_ostream *)a1[136];
    v9 = *((_QWORD *)v8 + 4);
    if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 4)
    {
      *(_BYTE *)(v9 + 4) = 107;
      *(_DWORD *)v9 = 1667330080;
      *((_QWORD *)v8 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v8, " pack");
    }
  }
  if (*(_QWORD *)(a2 + 8) == (a2 & 0xFFFFFFFFFFFFFFF0))
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 32);
  return sub_22F0F8AA0(a1, v10, 0, 0);
}

uint64_t sub_22F1003F8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  const char *v8;
  size_t v9;
  void *v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  llvm::raw_ostream *v13;
  _QWORD *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _QWORD *v20;
  llvm::raw_ostream *v21;
  _DWORD *v22;
  llvm::raw_ostream *v23;
  _DWORD *v24;
  llvm::raw_ostream *v25;
  _QWORD *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  void *v29;
  llvm::raw_ostream *v30;
  void *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  llvm::raw_ostream *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  _WORD *v41;
  llvm::raw_ostream *v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void (**v57)(void);
  uint64_t result;
  uint64_t v59;
  llvm::raw_ostream *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  _QWORD *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  sub_22F403120(a1, a2);
  sub_22F40287C(a1, *(_QWORD *)(a2 + 48));
  v4 = *(_DWORD *)(a2 + 80);
  v5 = (unsigned __int16)v4 >> 13;
  if ((unsigned __int16)v4 >> 13)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 1088);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 1088));
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 32;
    }
    v8 = off_24FAC7628[v5 - 1];
    v9 = strlen(v8);
    v10 = (void *)*((_QWORD *)v6 + 4);
    if (v9 <= *((_QWORD *)v6 + 3) - (_QWORD)v10)
    {
      if (v9)
      {
        memcpy(v10, v8, v9);
        *((_QWORD *)v6 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, v8);
    }
  }
  if ((*(_BYTE *)(a2 + 82) & 2) != 0)
  {
    v11 = *(llvm::raw_ostream **)(a1 + 1088);
    v12 = (_DWORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 6uLL)
    {
      *(_DWORD *)((char *)v12 + 3) = 1701734764;
      *v12 = 1819175200;
      *((_QWORD *)v11 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v11, " inline");
    }
  }
  if ((*(_BYTE *)(a2 + 82) & 4) != 0)
  {
    v13 = *(llvm::raw_ostream **)(a1 + 1088);
    v14 = (_QWORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 7uLL)
    {
      *v14 = 0x6C61757472697620;
      *((_QWORD *)v13 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v13, " virtual");
    }
  }
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
  {
    v15 = *(llvm::raw_ostream **)(a1 + 1088);
    v16 = *((_QWORD *)v15 + 4);
    if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) > 0x12)
    {
      *(_DWORD *)(v16 + 15) = 1600087412;
      *(_OWORD *)v16 = *(_OWORD *)" __module_private__";
      *((_QWORD *)v15 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v15, " __module_private__");
    }
  }
  if ((*(_BYTE *)(a2 + 82) & 8) != 0)
  {
    v17 = *(llvm::raw_ostream **)(a1 + 1088);
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 4)
    {
      *(_BYTE *)(v18 + 4) = 101;
      *(_DWORD *)v18 = 1920299040;
      *((_QWORD *)v17 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v17, " pure");
    }
  }
  if ((*(_BYTE *)(a2 + 83) & 2) != 0)
  {
    v19 = *(llvm::raw_ostream **)(a1 + 1088);
    v20 = (_QWORD *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 7uLL)
    {
      *v20 = 0x746C756166656420;
      *((_QWORD *)v19 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v19, " default");
    }
    if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 82) & 0x40) != 0)
    {
      v21 = *(llvm::raw_ostream **)(a1 + 1088);
      v22 = (_DWORD *)*((_QWORD *)v21 + 4);
      if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 6uLL)
      {
        *(_DWORD *)((char *)v22 + 3) = 1702126956;
        *v22 = 1818584159;
        *((_QWORD *)v21 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v21, "_delete");
      }
    }
  }
  if ((*(_QWORD *)(a2 + 80) & 0x2400000) == 0x400000)
  {
    v23 = *(llvm::raw_ostream **)(a1 + 1088);
    v24 = (_DWORD *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 6uLL)
    {
      *(_DWORD *)((char *)v24 + 3) = 1702126956;
      *v24 = 1818584096;
      *((_QWORD *)v23 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v23, " delete");
    }
  }
  if ((*(_BYTE *)(a2 + 82) & 0x80) != 0)
  {
    v25 = *(llvm::raw_ostream **)(a1 + 1088);
    v26 = (_QWORD *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 7uLL)
    {
      *v26 = 0x6C61697669727420;
      *((_QWORD *)v25 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v25, " trivial");
    }
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v27 && *(_BYTE *)(v27 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v27 = sub_22F10CF48(v27)) != 0)
  {
    sub_22E4913B4(v27, (uint64_t)v64);
    if (v65 == 10)
    {
      v30 = *(llvm::raw_ostream **)(a1 + 1088);
      v31 = (void *)*((_QWORD *)v30 + 4);
      if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 0x18uLL)
      {
        qmemcpy(v31, " noexcept-uninstantiated ", 25);
        *((_QWORD *)v30 + 4) += 25;
      }
      else
      {
        llvm::raw_ostream::write(v30, " noexcept-uninstantiated ");
      }
      goto LABEL_41;
    }
    if (v65 == 9)
    {
      v28 = *(llvm::raw_ostream **)(a1 + 1088);
      v29 = (void *)*((_QWORD *)v28 + 4);
      if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 0x15uLL)
      {
        qmemcpy(v29, " noexcept-unevaluated ", 22);
        *((_QWORD *)v28 + 4) += 22;
      }
      else
      {
        llvm::raw_ostream::write(v28, " noexcept-unevaluated ");
      }
LABEL_41:
      llvm::raw_ostream::operator<<();
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC || !sub_22EFD7260(a2))
    goto LABEL_79;
  if (!*(_BYTE *)(a1 + 1056))
  {
    if (*(_BYTE *)(a1 + 1057))
    {
      v50 = operator new(0x40uLL);
      *v50 = off_24FAC7118;
      v50[1] = a1;
      v50[2] = a2;
      v50[3] = a1;
      v50[4] = a1;
      v50[5] = 0;
      *((_BYTE *)v50 + 63) = 0;
      v66 = v50;
      sub_22E536AAC(a1 + 16, (unint64_t)v64);
    }
    else
    {
      v53 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
      LOBYTE(v64[0]) = 0;
      v54 = *(_QWORD *)(v53 - 8);
      if (!v54)
LABEL_109:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v54 + 48))(v54, v64);
      v55 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
      v56 = operator new(0x40uLL);
      *v56 = off_24FAC7118;
      v56[1] = a1;
      v56[2] = a2;
      v56[3] = a1;
      v56[4] = a1;
      v56[5] = 0;
      *((_BYTE *)v56 + 63) = 0;
      v66 = v56;
      sub_22E63BEA4(v64, v55);
    }
    if (v66 == v64)
    {
      v57 = (void (**)(void))(v64[0] + 32);
    }
    else
    {
      if (!v66)
      {
LABEL_78:
        *(_BYTE *)(a1 + 1057) = 0;
        goto LABEL_79;
      }
      v57 = (void (**)(void))(*v66 + 40);
    }
    (*v57)();
    goto LABEL_78;
  }
  *(_BYTE *)(a1 + 1056) = 0;
  v32 = (uint64_t *)sub_22EFD7394(a2);
  v34 = v33;
  v35 = *(llvm::raw_ostream **)(a1 + 1088);
  v36 = (void *)*((_QWORD *)v35 + 4);
  if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0xCuLL)
  {
    qmemcpy(v36, "Overrides: [ ", 13);
    *((_QWORD *)v35 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v35, "Overrides: [ ");
  }
  v38 = *v32;
  v37 = v32 + 1;
  sub_22F1040C4(a1, v38);
  for (; v37 != v34; ++v37)
  {
    v39 = *v37;
    v40 = *(llvm::raw_ostream **)(a1 + 1088);
    v41 = (_WORD *)*((_QWORD *)v40 + 4);
    if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 1uLL)
    {
      *v41 = 8236;
      *((_QWORD *)v40 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v40, ", ");
    }
    sub_22F1040C4(a1, v39);
  }
  v42 = *(llvm::raw_ostream **)(a1 + 1088);
  v43 = (_WORD *)*((_QWORD *)v42 + 4);
  if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 1uLL)
  {
    *v43 = 23840;
    *((_QWORD *)v42 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v42, " ]");
  }
  LODWORD(v44) = *(_DWORD *)(a1 + 24);
  if ((_DWORD)v44)
  {
    while (1)
    {
      v45 = *(_QWORD *)(a1 + 16) + 32 * v44;
      LOBYTE(v64[0]) = 1;
      v46 = *(_QWORD *)(v45 - 8);
      if (!v46)
        goto LABEL_109;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v46 + 48))(v46, v64);
      v44 = (*(_DWORD *)(a1 + 24) - 1);
      *(_DWORD *)(a1 + 24) = v44;
      v47 = *(_QWORD *)(a1 + 16) + 32 * v44;
      v48 = *(_QWORD **)(v47 + 24);
      if (v48 == (_QWORD *)v47)
        break;
      if (v48)
      {
        v49 = 5;
LABEL_61:
        (*(void (**)(void))(*v48 + 8 * v49))();
        LODWORD(v44) = *(_DWORD *)(a1 + 24);
      }
      if (!(_DWORD)v44)
        goto LABEL_63;
    }
    v48 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v44);
    v49 = 4;
    goto LABEL_61;
  }
LABEL_63:
  if (*(char *)(a1 + 1087) < 0)
  {
    **(_BYTE **)(a1 + 1064) = 0;
    *(_QWORD *)(a1 + 1072) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 1064) = 0;
    *(_BYTE *)(a1 + 1087) = 0;
  }
  v51 = *(llvm::raw_ostream **)a1;
  v52 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v52)
  {
    llvm::raw_ostream::write(v51, "\n");
  }
  else
  {
    *v52 = 10;
    ++*((_QWORD *)v51 + 4);
  }
  *(_BYTE *)(a1 + 1056) = 1;
LABEL_79:
  result = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((result && *(_BYTE *)(result + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (result = sub_22F10CF48(result)) != 0)
    && (*(_DWORD *)(result + 20) & 0x3FFFC0) != 0)
  {
    v59 = *(_QWORD *)(a2 + 120);
    result = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if ((!result || *(_BYTE *)(result + 16) != 26)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      result = sub_22F10CF48(result);
    }
    if (!v59)
    {
      v60 = *(llvm::raw_ostream **)(a1 + 1088);
      v61 = *((_QWORD *)v60 + 4);
      if ((unint64_t)(*((_QWORD *)v60 + 3) - v61) > 0x11)
      {
        *(_WORD *)(v61 + 16) = 8312;
        *(_OWORD *)v61 = *(_OWORD *)" <<<NULL params x ";
        *((_QWORD *)v60 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v60, " <<<NULL params x ");
      }
      v62 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((!v62 || *(_BYTE *)(v62 + 16) != 26)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      {
        sub_22F10CF48(v62);
      }
      result = llvm::raw_ostream::operator<<();
      v63 = *(_QWORD *)(result + 32);
      if ((unint64_t)(*(_QWORD *)(result + 24) - v63) > 2)
      {
        *(_BYTE *)(v63 + 2) = 62;
        *(_WORD *)v63 = 15934;
        *(_QWORD *)(result + 32) += 3;
      }
      else
      {
        return llvm::raw_ostream::write((llvm::raw_ostream *)result, ">>>");
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F100D4C(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  const char *v7;
  size_t v8;
  void *v9;
  int v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  const char *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  int v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  llvm::raw_ostream *result;
  uint64_t v37;
  uint64_t v38;
  int v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t (**v49)(llvm::raw_ostream *);
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  _QWORD v58[3];
  llvm::raw_ostream *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  sub_22F403120((uint64_t)a1, a2);
  sub_22F40287C((uint64_t)a1, *(_QWORD *)(a2 + 48));
  v4 = *(_BYTE *)(a2 + 96) & 7;
  if ((*(_BYTE *)(a2 + 96) & 7) != 0)
  {
    v5 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      v5 = (llvm::raw_ostream *)llvm::raw_ostream::write(*((llvm::raw_ostream **)a1 + 136));
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 32;
    }
    v7 = off_24FAC7628[v4 - 1];
    v8 = strlen(v7);
    v9 = (void *)*((_QWORD *)v5 + 4);
    if (v8 <= *((_QWORD *)v5 + 3) - (_QWORD)v9)
    {
      if (v8)
      {
        memcpy(v9, v7, v8);
        *((_QWORD *)v5 + 4) += v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, v7);
    }
  }
  sub_22EFBB794(a2);
  if (v10 == 2)
  {
    v11 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v14 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v14) <= 0xB)
    {
      v13 = " tls_dynamic";
      goto LABEL_13;
    }
    *(_DWORD *)(v14 + 8) = 1667853665;
    *(_QWORD *)v14 = *(_QWORD *)" tls_dynamic";
    v51 = *((_QWORD *)v11 + 4) + 12;
  }
  else
  {
    if (v10 != 1)
      goto LABEL_14;
    v11 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v12 = (_DWORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 <= 3uLL)
    {
      v13 = " tls";
LABEL_13:
      llvm::raw_ostream::write(v11, v13);
      goto LABEL_14;
    }
    *v12 = 1936487456;
    v51 = *((_QWORD *)v11 + 4) + 4;
  }
  *((_QWORD *)v11 + 4) = v51;
LABEL_14:
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
  {
    v15 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v16 = *((_QWORD *)v15 + 4);
    if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) > 0x12)
    {
      *(_DWORD *)(v16 + 15) = 1600087412;
      *(_OWORD *)v16 = *(_OWORD *)" __module_private__";
      *((_QWORD *)v15 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v15, " __module_private__");
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 4) != 0)
  {
    v17 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 4)
    {
      *(_BYTE *)(v18 + 4) = 111;
      *(_DWORD *)v18 = 1987210784;
      *((_QWORD *)v17 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v17, " nrvo");
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 0x20) != 0)
  {
    v19 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v20 = (_DWORD *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 6uLL)
    {
      *(_DWORD *)((char *)v20 + 3) = 1701734764;
      *v20 = 1819175200;
      *((_QWORD *)v19 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v19, " inline");
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 0x80) != 0)
  {
    v21 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v22 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 9)
    {
      *(_WORD *)(v22 + 8) = 29296;
      *(_QWORD *)v22 = *(_QWORD *)" constexpr";
      *((_QWORD *)v21 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v21, " constexpr");
    }
  }
  if (((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
    && *(_QWORD *)(a2 + 88) >= 8uLL)
  {
    v23 = (*(unsigned __int8 *)(a2 + 96) >> 5) & 3;
    if (v23 == 2)
    {
      v24 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
      v27 = *((_QWORD *)v24 + 4);
      if ((unint64_t)(*((_QWORD *)v24 + 3) - v27) <= 8)
      {
        v26 = " listinit";
        goto LABEL_41;
      }
      v57 = " listinit";
    }
    else
    {
      if (v23 != 1)
      {
        if (v23)
          goto LABEL_42;
        v24 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
        v25 = *((_QWORD *)v24 + 4);
        if ((unint64_t)(*((_QWORD *)v24 + 3) - v25) <= 5)
        {
          v26 = " cinit";
LABEL_41:
          llvm::raw_ostream::write(v24, v26);
          goto LABEL_42;
        }
        *(_WORD *)(v25 + 4) = 29801;
        *(_DWORD *)v25 = 1852400416;
        v56 = *((_QWORD *)v24 + 4) + 6;
        goto LABEL_123;
      }
      v24 = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
      v27 = *((_QWORD *)v24 + 4);
      if ((unint64_t)(*((_QWORD *)v24 + 3) - v27) <= 8)
      {
        v26 = " callinit";
        goto LABEL_41;
      }
      v57 = " callinit";
    }
    *(_BYTE *)(v27 + 8) = 116;
    *(_QWORD *)v27 = *(_QWORD *)v57;
    v56 = *((_QWORD *)v24 + 4) + 9;
LABEL_123:
    *((_QWORD *)v24 + 4) = v56;
  }
LABEL_42:
  v28 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
  {
    v29 = *(_QWORD *)(a2 + 16);
    v30 = v29 & 0xFFFFFFFFFFFFFFF8;
    if ((v29 & 4) != 0)
      v30 = *(_QWORD *)v30;
    for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
    {
      v32 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v32 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_56;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_55;
        if (i == 16)
          goto LABEL_49;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_62;
        if (i == 24)
        {
LABEL_49:
          v32 = -48;
        }
        else
        {
LABEL_55:
          if (i != 70)
          {
LABEL_56:
            v33 = i - 52;
            if ((i - 33) >= 5)
              v34 = -48;
            else
              v34 = -64;
            if (v33 >= 6)
              v32 = v34;
            else
              v32 = -72;
            goto LABEL_62;
          }
          v32 = -64;
        }
      }
LABEL_62:
      v35 = *(_QWORD *)(v30 + v32 + 16);
      v30 = v35 & 0xFFFFFFFFFFFFFFF8;
      if ((v35 & 4) != 0)
        v30 = *(_QWORD *)v30;
    }
    v28 = v30 - 40;
  }
  result = (llvm::raw_ostream *)sub_22EFBEA2C(a2, *(_QWORD *)(v28 + 88));
  if ((_DWORD)result)
  {
    result = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v37 = *((_QWORD *)result + 4);
    if ((unint64_t)(*((_QWORD *)result + 3) - v37) > 9)
    {
      *(_WORD *)(v37 + 8) = 25701;
      *(_QWORD *)v37 = *(_QWORD *)" destroyed";
      *((_QWORD *)result + 4) += 10;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, " destroyed");
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
  {
    result = (llvm::raw_ostream *)*((_QWORD *)a1 + 136);
    v38 = *((_QWORD *)result + 4);
    if ((unint64_t)(*((_QWORD *)result + 3) - v38) > 4)
    {
      *(_BYTE *)(v38 + 4) = 107;
      *(_DWORD *)v38 = 1667330080;
      *((_QWORD *)result + 4) += 5;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, " pack");
    }
  }
  v39 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v39 == 64 && (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
    return result;
  if (*(_QWORD *)(a2 + 88) < 8uLL)
    return result;
  result = (llvm::raw_ostream *)sub_22EFBC5B4(a2);
  if (!result)
    return result;
  v40 = result;
  if ((*((_BYTE *)result + 2) & 1) != 0)
    return result;
  if (v39 == 64)
    return result;
  if ((*(_BYTE *)(a2 + 97) & 0x80) == 0)
    return result;
  result = (llvm::raw_ostream *)sub_22EFBCF80(a2);
  if (!result)
    return result;
  v41 = result;
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v48 = operator new(0x40uLL);
      *v48 = off_24FAC7160;
      v48[1] = a1;
      v48[2] = a1;
      v48[3] = v41;
      v48[4] = v40;
      v48[5] = 0x65756C6176;
      *((_BYTE *)v48 + 63) = 5;
      v59 = (llvm::raw_ostream *)v48;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v58);
      result = v59;
      if (v59 != (llvm::raw_ostream *)v58)
      {
LABEL_96:
        if (!result)
        {
LABEL_114:
          a1[1057] = 0;
          return result;
        }
        v49 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_113:
        result = (llvm::raw_ostream *)(*v49)(result);
        goto LABEL_114;
      }
    }
    else
    {
      v52 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v58[0]) = 0;
      v53 = *(_QWORD *)(v52 - 8);
      if (!v53)
      {
LABEL_125:
        sub_22E4A06C4();
        return (llvm::raw_ostream *)sub_22F1015C4();
      }
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v53 + 48))(v53, v58);
      v54 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v55 = operator new(0x40uLL);
      *v55 = off_24FAC7160;
      v55[1] = a1;
      v55[2] = a1;
      v55[3] = v41;
      v55[4] = v40;
      v55[5] = 0x65756C6176;
      *((_BYTE *)v55 + 63) = 5;
      v59 = (llvm::raw_ostream *)v55;
      sub_22E63BEA4(v58, v54);
      result = v59;
      if (v59 != (llvm::raw_ostream *)v58)
        goto LABEL_96;
    }
    v49 = (uint64_t (**)(llvm::raw_ostream *))(v58[0] + 32);
    result = (llvm::raw_ostream *)v58;
    goto LABEL_113;
  }
  a1[1056] = 0;
  sub_22F0FE404((uint64_t)a1, (uint64_t)result);
  LODWORD(v42) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v42)
  {
    while (1)
    {
      v43 = *((_QWORD *)a1 + 2) + 32 * v42;
      LOBYTE(v58[0]) = 1;
      v44 = *(_QWORD *)(v43 - 8);
      if (!v44)
        goto LABEL_125;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v44 + 48))(v44, v58);
      v42 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v42;
      v45 = *((_QWORD *)a1 + 2) + 32 * v42;
      v46 = *(_QWORD **)(v45 + 24);
      if (v46 == (_QWORD *)v45)
        break;
      if (v46)
      {
        v47 = 5;
LABEL_90:
        (*(void (**)(void))(*v46 + 8 * v47))();
        LODWORD(v42) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v42)
        goto LABEL_92;
    }
    v46 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v42);
    v47 = 4;
    goto LABEL_90;
  }
LABEL_92:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v50 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v50)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v50 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

llvm::raw_ostream *sub_22F1015C4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void (**v18)(void);
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t (**v31)(llvm::raw_ostream *);
  llvm::raw_ostream *v32;
  _QWORD *v33;
  int v34;
  unint64_t v35;
  llvm::raw_ostream *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _BYTE *v44;
  __int128 v45;
  _QWORD v46[3];
  llvm::raw_ostream *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  result = sub_22F405800(a1, a2);
  if ((*(_BYTE *)(a2 + 74) & 1) == 0)
    return result;
  *(_QWORD *)&v45 = a1;
  *((_QWORD *)&v45 + 1) = a2;
  if (!*(_BYTE *)(a1 + 1056))
  {
    if (*(_BYTE *)(a1 + 1057))
    {
      v11 = operator new(0x38uLL);
      *v11 = off_24FAC73A0;
      v11[1] = a1;
      *((_OWORD *)v11 + 1) = v45;
      v11[4] = 0;
      *((_BYTE *)v11 + 55) = 0;
      v47 = (llvm::raw_ostream *)v11;
      sub_22E536AAC(a1 + 16, (unint64_t)v46);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
      LOBYTE(v46[0]) = 0;
      v15 = *(_QWORD *)(v14 - 8);
      if (!v15)
LABEL_72:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v46);
      v16 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
      v17 = operator new(0x38uLL);
      *v17 = off_24FAC73A0;
      v17[1] = a1;
      *((_OWORD *)v17 + 1) = v45;
      v17[4] = 0;
      *((_BYTE *)v17 + 55) = 0;
      v47 = (llvm::raw_ostream *)v17;
      sub_22E63BEA4(v46, v16);
    }
    if (v47 == (llvm::raw_ostream *)v46)
    {
      v18 = (void (**)(void))(v46[0] + 32);
    }
    else
    {
      if (!v47)
      {
LABEL_26:
        *(_BYTE *)(a1 + 1057) = 0;
        goto LABEL_27;
      }
      v18 = (void (**)(void))(*(_QWORD *)v47 + 40);
    }
    (*v18)();
    goto LABEL_26;
  }
  *(_BYTE *)(a1 + 1056) = 0;
  sub_22F105358((unint64_t *)&v45);
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  if ((_DWORD)v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 16) + 32 * v5;
      LOBYTE(v46[0]) = 1;
      v7 = *(_QWORD *)(v6 - 8);
      if (!v7)
        goto LABEL_72;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v46);
      v5 = (*(_DWORD *)(a1 + 24) - 1);
      *(_DWORD *)(a1 + 24) = v5;
      v8 = *(_QWORD *)(a1 + 16) + 32 * v5;
      v9 = *(_QWORD **)(v8 + 24);
      if (v9 == (_QWORD *)v8)
        break;
      if (v9)
      {
        v10 = 5;
LABEL_9:
        (*(void (**)(void))(*v9 + 8 * v10))();
        LODWORD(v5) = *(_DWORD *)(a1 + 24);
      }
      if (!(_DWORD)v5)
        goto LABEL_11;
    }
    v9 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v5);
    v10 = 4;
    goto LABEL_9;
  }
LABEL_11:
  if (*(char *)(a1 + 1087) < 0)
  {
    **(_BYTE **)(a1 + 1064) = 0;
    *(_QWORD *)(a1 + 1072) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 1064) = 0;
    *(_BYTE *)(a1 + 1087) = 0;
  }
  v12 = *(llvm::raw_ostream **)a1;
  v13 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v13)
  {
    llvm::raw_ostream::write(v12, "\n");
  }
  else
  {
    *v13 = 10;
    ++*((_QWORD *)v12 + 4);
  }
  *(_BYTE *)(a1 + 1056) = 1;
LABEL_27:
  result = (llvm::raw_ostream *)sub_22E46A3A0(a2);
  if (result != v19)
  {
    v20 = result;
    v21 = v19;
    while (1)
    {
      v22 = *((_DWORD *)v20 + 2);
      v23 = *((unsigned __int8 *)v20 + 12);
      v24 = (uint64_t *)*((_QWORD *)v20 + 2);
      if (*(_BYTE *)(a1 + 1056))
      {
        *(_BYTE *)(a1 + 1056) = 0;
        if ((v23 & 1) != 0)
        {
          v32 = *(llvm::raw_ostream **)(a1 + 1088);
          v33 = (_QWORD *)*((_QWORD *)v32 + 4);
          if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 7uLL)
          {
            *v33 = 0x206C617574726976;
            *((_QWORD *)v32 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v32, "virtual ");
          }
        }
        if (((v23 >> 2) & 3) == 3)
          v34 = v23 & 2;
        else
          v34 = (v23 >> 2) & 3;
        sub_22F4031D0(a1, v34);
        v35 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v35 + 8) & 0xF) != 0)
          v35 = (unint64_t)sub_22F10D2BC(*v24);
        sub_22F40287C(a1, v35 & 0xFFFFFFFFFFFFFFF0);
        if (v22)
        {
          v36 = *(llvm::raw_ostream **)(a1 + 1088);
          v37 = *((_QWORD *)v36 + 4);
          if ((unint64_t)(*((_QWORD *)v36 + 3) - v37) > 2)
          {
            *(_BYTE *)(v37 + 2) = 46;
            *(_WORD *)v37 = 11822;
            *((_QWORD *)v36 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v36, "...");
          }
        }
        LODWORD(v38) = *(_DWORD *)(a1 + 24);
        if (!(_DWORD)v38)
        {
LABEL_61:
          if (*(char *)(a1 + 1087) < 0)
          {
            **(_BYTE **)(a1 + 1064) = 0;
            *(_QWORD *)(a1 + 1072) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 1064) = 0;
            *(_BYTE *)(a1 + 1087) = 0;
          }
          result = *(llvm::raw_ostream **)a1;
          v44 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v44)
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
          }
          else
          {
            *v44 = 10;
            ++*((_QWORD *)result + 4);
          }
          *(_BYTE *)(a1 + 1056) = 1;
          goto LABEL_40;
        }
        while (2)
        {
          v39 = *(_QWORD *)(a1 + 16) + 32 * v38;
          LOBYTE(v46[0]) = 1;
          v40 = *(_QWORD *)(v39 - 8);
          if (!v40)
            goto LABEL_72;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v40 + 48))(v40, v46);
          v38 = (*(_DWORD *)(a1 + 24) - 1);
          *(_DWORD *)(a1 + 24) = v38;
          v41 = *(_QWORD *)(a1 + 16) + 32 * v38;
          v42 = *(_QWORD **)(v41 + 24);
          if (v42 == (_QWORD *)v41)
          {
            v42 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v38);
            v43 = 4;
LABEL_59:
            (*(void (**)(void))(*v42 + 8 * v43))();
            LODWORD(v38) = *(_DWORD *)(a1 + 24);
          }
          else if (v42)
          {
            v43 = 5;
            goto LABEL_59;
          }
          if (!(_DWORD)v38)
            goto LABEL_61;
          continue;
        }
      }
      v25 = *(_QWORD *)v20;
      LOWORD(v45) = *(_WORD *)((char *)v20 + 13);
      BYTE2(v45) = *((_BYTE *)v20 + 15);
      if (*(_BYTE *)(a1 + 1057))
      {
        v26 = (char *)operator new(0x48uLL);
        *(_QWORD *)v26 = off_24FAC73E8;
        *((_QWORD *)v26 + 1) = a1;
        *((_QWORD *)v26 + 2) = v25;
        *((_DWORD *)v26 + 6) = v22;
        v26[28] = v23;
        *(_WORD *)(v26 + 29) = v45;
        v26[31] = BYTE2(v45);
        *((_QWORD *)v26 + 4) = v24;
        *((_QWORD *)v26 + 5) = a1;
        *((_QWORD *)v26 + 6) = 0;
        v26[71] = 0;
        v47 = (llvm::raw_ostream *)v26;
        sub_22E536AAC(a1 + 16, (unint64_t)v46);
        result = v47;
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
        LOBYTE(v46[0]) = 0;
        v28 = *(_QWORD *)(v27 - 8);
        if (!v28)
          goto LABEL_72;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v46);
        v29 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
        v30 = (char *)operator new(0x48uLL);
        *(_QWORD *)v30 = off_24FAC73E8;
        *((_QWORD *)v30 + 1) = a1;
        *((_QWORD *)v30 + 2) = v25;
        *((_DWORD *)v30 + 6) = v22;
        v30[28] = v23;
        *(_WORD *)(v30 + 29) = v45;
        v30[31] = BYTE2(v45);
        *((_QWORD *)v30 + 4) = v24;
        *((_QWORD *)v30 + 5) = a1;
        *((_QWORD *)v30 + 6) = 0;
        v30[71] = 0;
        v47 = (llvm::raw_ostream *)v30;
        sub_22E63BEA4(v46, v29);
        result = v47;
      }
      if (result == (llvm::raw_ostream *)v46)
        break;
      if (result)
      {
        v31 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_38:
        result = (llvm::raw_ostream *)(*v31)(result);
      }
      *(_BYTE *)(a1 + 1057) = 0;
LABEL_40:
      v20 = (llvm::raw_ostream *)((char *)v20 + 24);
      if (v20 == v21)
        return result;
    }
    v31 = (uint64_t (**)(llvm::raw_ostream *))(v46[0] + 32);
    result = (llvm::raw_ostream *)v46;
    goto LABEL_38;
  }
  return result;
}

unint64_t sub_22F101B54(unint64_t result, uint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v2 = (llvm::raw_ostream *)result;
    result = sub_22E3CD31C(a2, (uint64_t)(a2 - 8));
    if (result)
    {
      v3 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 8310;
        *(_DWORD *)v3 = 1701998624;
        *((_QWORD *)v2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v2, " prev ");
      }
      return llvm::raw_ostream::operator<<();
    }
  }
  return result;
}

unint64_t sub_22F101BF4(unint64_t result, uint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v2 = (llvm::raw_ostream *)result;
    result = sub_22E3CD31C(a2, (uint64_t)(a2 - 12));
    if (result)
    {
      v3 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 8310;
        *(_DWORD *)v3 = 1701998624;
        *((_QWORD *)v2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v2, " prev ");
      }
      return llvm::raw_ostream::operator<<();
    }
  }
  return result;
}

unint64_t sub_22F101C94(unint64_t result, uint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v2 = (llvm::raw_ostream *)result;
    result = sub_22E3CD31C(a2, (uint64_t)(a2 - 6));
    if (result)
    {
      v3 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 8310;
        *(_DWORD *)v3 = 1701998624;
        *((_QWORD *)v2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v2, " prev ");
      }
      return llvm::raw_ostream::operator<<();
    }
  }
  return result;
}

unint64_t sub_22F101D34(unint64_t result, unint64_t a2)
{
  llvm::raw_ostream *v3;
  _DWORD *v4;

  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v3 = (llvm::raw_ostream *)result;
    result = sub_22EFB5D7C(a2);
    if (result != a2)
    {
      v4 = (_DWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 6uLL)
      {
        *(_DWORD *)((char *)v4 + 3) = 544502642;
        *v4 = 1919510048;
        *((_QWORD *)v3 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v3, " first ");
      }
      return llvm::raw_ostream::operator<<();
    }
  }
  return result;
}

unint64_t sub_22F101DE0(unint64_t result, uint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v2 = (llvm::raw_ostream *)result;
    result = sub_22E3CD31C(a2, (uint64_t)(a2 - 13));
    if (result)
    {
      v3 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 8310;
        *(_DWORD *)v3 = 1701998624;
        *((_QWORD *)v2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v2, " prev ");
      }
      return llvm::raw_ostream::operator<<();
    }
  }
  return result;
}

unint64_t sub_22F101E80(unint64_t result, uint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v2 = (llvm::raw_ostream *)result;
    result = sub_22E3CD31C(a2, (uint64_t)(a2 - 9));
    if (result)
    {
      v3 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 8310;
        *(_DWORD *)v3 = 1701998624;
        *((_QWORD *)v2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v2, " prev ");
      }
      return llvm::raw_ostream::operator<<();
    }
  }
  return result;
}

uint64_t sub_22F101F20(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 8) + 72 * a2;
}

uint64_t sub_22F101F30(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 8) + 72 * a2;
}

uint64_t sub_22F101F40(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 8) + 72 * a2;
}

uint64_t sub_22F101F50(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 8) + 72 * (*(_DWORD *)(a1 + 16) + a2);
}

uint64_t sub_22F101F68(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6F20;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F101FA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6F20;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F101FF0(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC6F20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F102064(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC6F20;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F1020B0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F1020C4(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F1020F4(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  llvm::raw_ostream *v24;
  _QWORD *v25;
  const char *p_p;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(llvm::raw_ostream **)(*(_QWORD *)(a1 + 16) + 1088);
  v25 = (_QWORD *)*((_QWORD *)v24 + 4);
  if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 7uLL)
  {
    *v25 = 0x206E69206F736C61;
    *((_QWORD *)v24 + 4) += 8;
  }
  else
  {
    v24 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(*(_QWORD *)(a1 + 16) + 1088), "also in ");
  }
  sub_22F1D8A24(*(uint64_t **)(a1 + 24), 0, &__p);
  if (v35 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  llvm::raw_ostream::write(v24, p_p);
  if (v35 < 0)
    operator delete(__p);
  LODWORD(v27) = *((_DWORD *)v4 + 6);
  if (v23 < v27)
  {
    while (1)
    {
      v28 = v4[2] + 32 * v27;
      LOBYTE(__p) = 1;
      v29 = *(_QWORD *)(v28 - 8);
      if (!v29)
      {
        sub_22E4A06C4();
        sub_22F102404();
        return;
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, &__p);
      v27 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v27;
      v30 = v4[2] + 32 * v27;
      v31 = *(_QWORD **)(v30 + 24);
      if (v31 == (_QWORD *)v30)
        break;
      if (v31)
      {
        v32 = 5;
LABEL_45:
        (*(void (**)(void))(*v31 + 8 * v32))();
        LODWORD(v27) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v27)
        goto LABEL_47;
    }
    v31 = (_QWORD *)(v4[2] + 32 * v27);
    v32 = 4;
    goto LABEL_45;
  }
LABEL_47:
  if (*((char *)v4 + 1087) < 0)
    v33 = v4[134];
  else
    v33 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v33 - 2, 0);
}

uint64_t sub_22F102404(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6F68;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(_DWORD *)(a1 + 40) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 40));
  return a1;
}

void sub_22F102454(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6F68;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(_DWORD *)(a1 + 40) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 40));
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F1024B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x90uLL);
  *v2 = off_24FAC6F68;
  sub_22F1028B4((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_22F1024F4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24FAC6F68;
  return sub_22F1028B4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_22F102510(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;

  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  v3 = *(_DWORD *)(a1 + 40);
  v2 = (uint64_t *)(a1 + 40);
  if (v3 >= 2)
    sub_22EF53BC0(v2);
}

void sub_22F102558(char *__p)
{
  if (__p[143] < 0)
    operator delete(*((void **)__p + 15));
  if (*((_DWORD *)__p + 10) >= 2u)
    sub_22EF53BC0((uint64_t *)__p + 5);
  operator delete(__p);
}

void sub_22F10259C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 143);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 128);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 120);
    else
      v19 = *(const char **)(a1 + 120);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *(unsigned int *)(a1 + 16);
  if (v23 < *(_DWORD *)(a1 + 20))
  {
    v24 = *((_DWORD *)v4 + 6);
    v25 = *(_QWORD *)(a1 + 24);
    do
    {
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a1 + 40, v23);
      sub_22F0FE404(v25, v26);
      v23 = (v23 + 1);
      if ((_DWORD)v23 != *(_DWORD *)(a1 + 20))
      {
        v27 = *(llvm::raw_ostream **)(v25 + 1088);
        v28 = (_WORD *)*((_QWORD *)v27 + 4);
        if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        {
          *v28 = 8236;
          *((_QWORD *)v27 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v27, ", ");
        }
      }
    }
    while (v23 < *(_DWORD *)(a1 + 20));
    LODWORD(v29) = *((_DWORD *)v4 + 6);
    if (v24 < v29)
    {
      while (1)
      {
        v30 = v4[2] + 32 * v29;
        v38 = 1;
        v31 = *(_QWORD *)(v30 - 8);
        if (!v31)
        {
          sub_22E4A06C4();
          sub_22F1028B4(v36, v37);
          return;
        }
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v31 + 48))(v31, &v38);
        v29 = (*((_DWORD *)v4 + 6) - 1);
        *((_DWORD *)v4 + 6) = v29;
        v32 = v4[2] + 32 * v29;
        v33 = *(_QWORD **)(v32 + 24);
        if (v33 == (_QWORD *)v32)
          break;
        if (v33)
        {
          v34 = 5;
LABEL_46:
          (*(void (**)(void))(*v33 + 8 * v34))();
          LODWORD(v29) = *((_DWORD *)v4 + 6);
        }
        if (v24 >= v29)
          goto LABEL_48;
      }
      v33 = (_QWORD *)(v4[2] + 32 * v29);
      v34 = 4;
      goto LABEL_46;
    }
  }
LABEL_48:
  if (*((char *)v4 + 1087) < 0)
    v35 = v4[134];
  else
    v35 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v35 - 2, 0);
}

uint64_t sub_22F1028B4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  sub_22EF530AC(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v5 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_22E3BB2B4(v5, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

uint64_t sub_22F102930(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6FB0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(_DWORD *)(a1 + 32) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 32));
  return a1;
}

void sub_22F102980(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6FB0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(_DWORD *)(a1 + 32) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F1029E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = off_24FAC6FB0;
  sub_22F102E38((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_22F102A20(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24FAC6FB0;
  return sub_22F102E38((uint64_t)(a2 + 1), a1 + 8);
}

void sub_22F102A3C(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;

  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  v3 = *(_DWORD *)(a1 + 32);
  v2 = (uint64_t *)(a1 + 32);
  if (v3 >= 2)
    sub_22EF53BC0(v2);
}

void sub_22F102A84(char *__p)
{
  if (__p[135] < 0)
    operator delete(*((void **)__p + 14));
  if (*((_DWORD *)__p + 8) >= 2u)
    sub_22EF53BC0((uint64_t *)__p + 4);
  operator delete(__p);
}

void sub_22F102AC8(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 135);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 120);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 112);
    else
      v19 = *(const char **)(a1 + 112);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(v24 + 1088);
  if (*(_BYTE *)(v24 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 24))(*(_QWORD *)(v24 + 1088), 6, 1, 0);
    v26 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v27 = *((_QWORD *)v26 + 4);
    if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 2)
    {
      *(_BYTE *)(v27 + 2) = 32;
      *(_WORD *)v27 = 30752;
      *((_QWORD *)v26 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v26, " x ");
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  }
  else
  {
    v28 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v29 = *((_QWORD *)v28 + 4);
    if ((unint64_t)(*((_QWORD *)v28 + 3) - v29) > 2)
    {
      *(_BYTE *)(v29 + 2) = 32;
      *(_WORD *)v29 = 30752;
      *((_QWORD *)v28 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v28, " x ");
    }
  }
  sub_22F0FE404(v24, *(_QWORD *)(a1 + 40) + 72 * *(unsigned int *)(a1 + 48));
  LODWORD(v30) = *((_DWORD *)v4 + 6);
  if (v23 < v30)
  {
    while (1)
    {
      v31 = v4[2] + 32 * v30;
      v39 = 1;
      v32 = *(_QWORD *)(v31 - 8);
      if (!v32)
      {
        sub_22E4A06C4();
        sub_22F102E38(v37, v38);
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v32 + 48))(v32, &v39);
      v30 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v30;
      v33 = v4[2] + 32 * v30;
      v34 = *(_QWORD **)(v33 + 24);
      if (v34 == (_QWORD *)v33)
        break;
      if (v34)
      {
        v35 = 5;
LABEL_44:
        (*(void (**)(void))(*v34 + 8 * v35))();
        LODWORD(v30) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v30)
        goto LABEL_46;
    }
    v34 = (_QWORD *)(v4[2] + 32 * v30);
    v35 = 4;
    goto LABEL_44;
  }
LABEL_46:
  if (*((char *)v4 + 1087) < 0)
    v36 = v4[134];
  else
    v36 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v36 - 2, 0);
}

uint64_t sub_22F102E38(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_22EF530AC(a1 + 24, a2 + 24);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v4 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

uint64_t sub_22F102EAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6FF8;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(_DWORD *)(a1 + 24) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 24));
  return a1;
}

void sub_22F102EFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC6FF8;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(_DWORD *)(a1 + 24) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F102F5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x80uLL);
  *v2 = off_24FAC6FF8;
  sub_22EF8F6B4((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_22F102F9C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24FAC6FF8;
  return sub_22EF8F6B4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_22F102FB8(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v3 = *(_DWORD *)(a1 + 24);
  v2 = (uint64_t *)(a1 + 24);
  if (v3 >= 2)
    sub_22EF53BC0(v2);
}

void sub_22F103000(char *__p)
{
  if (__p[127] < 0)
    operator delete(*((void **)__p + 13));
  if (*((_DWORD *)__p + 6) >= 2u)
    sub_22EF53BC0((uint64_t *)__p + 3);
  operator delete(__p);
}

void sub_22F103044(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 127);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 112);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 104);
    else
      v19 = *(const char **)(a1 + 104);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F0FE404(*(_QWORD *)(a1 + 16), a1 + 24);
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v31 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22F1032BC();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v31);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

uint64_t sub_22F1032BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7040;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F1032F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7040;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F103344(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7040;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F1033B8(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7040;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F103404(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F103418(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F103448(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  _QWORD *v26;
  llvm::raw_ostream *v27;
  int v28;
  llvm::raw_ostream *v29;
  const char **v30;
  const char *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(llvm::raw_ostream **)(v24 + 1088);
  v26 = (_QWORD *)*((_QWORD *)v25 + 4);
  if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 7uLL)
  {
    *v26 = 0x2070756E61656C63;
    *((_QWORD *)v25 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v25, "cleanup ");
  }
  v27 = *(llvm::raw_ostream **)(v24 + 1088);
  v28 = *(unsigned __int8 *)(v24 + 1096);
  v29 = v27;
  if (*(_BYTE *)(v24 + 1096))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v27 + 24))(*(_QWORD *)(v24 + 1088), 5, 1, 0);
    v29 = *(llvm::raw_ostream **)(v24 + 1088);
  }
  v30 = (const char **)sub_22F0D3748(**(unsigned __int8 **)(a1 + 24));
  v31 = *v30;
  if (*v30)
  {
    v32 = strlen(*v30);
    v33 = (void *)*((_QWORD *)v29 + 4);
    if (v32 <= *((_QWORD *)v29 + 3) - (_QWORD)v33)
    {
      if (v32)
      {
        memcpy(v33, v31, v32);
        *((_QWORD *)v29 + 4) += v32;
      }
    }
    else
    {
      llvm::raw_ostream::write(v29, v31);
    }
  }
  if (v28)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v27 + 32))(v27);
  sub_22F402544(v24);
  LODWORD(v34) = *((_DWORD *)v4 + 6);
  if (v23 < v34)
  {
    while (1)
    {
      v35 = v4[2] + 32 * v34;
      v41 = 1;
      v36 = *(_QWORD *)(v35 - 8);
      if (!v36)
      {
        sub_22E4A06C4();
        sub_22F1037C8();
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v36 + 48))(v36, &v41);
      v34 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v34;
      v37 = v4[2] + 32 * v34;
      v38 = *(_QWORD **)(v37 + 24);
      if (v38 == (_QWORD *)v37)
        break;
      if (v38)
      {
        v39 = 5;
LABEL_47:
        (*(void (**)(void))(*v38 + 8 * v39))();
        LODWORD(v34) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v34)
        goto LABEL_49;
    }
    v38 = (_QWORD *)(v4[2] + 32 * v34);
    v39 = 4;
    goto LABEL_47;
  }
LABEL_49:
  if (*((char *)v4 + 1087) < 0)
    v40 = v4[134];
  else
    v40 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v40 - 2, 0);
}

uint64_t sub_22F1037C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7088;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_22F103804(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7088;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F103850(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24FAC7088;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v3 = v2 + 48;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  }
  return v2;
}

char *sub_22F1038CC(char *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_24FAC7088;
  v2 = *(_OWORD *)(result + 8);
  v3 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)result + 5);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = (_BYTE *)(a2 + 48);
  if (result[71] < 0)
    return (char *)sub_22E3BB2B4(v4, *((void **)result + 6), *((_QWORD *)result + 7));
  v5 = *((_OWORD *)result + 3);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)result + 8);
  *(_OWORD *)v4 = v5;
  return result;
}

void sub_22F103920(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_22F103934(void **__p)
{
  if (*((char *)__p + 71) < 0)
    operator delete(__p[6]);
  operator delete(__p);
}

void sub_22F103964(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  llvm::raw_ostream *v26;
  const void *v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 71);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 56);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 48);
    else
      v19 = *(const char **)(a1 + 48);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v25 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 32);
  if (v25)
  {
    v26 = *(llvm::raw_ostream **)(v24 + 1088);
    v27 = *(const void **)(a1 + 16);
    v28 = (void *)*((_QWORD *)v26 + 4);
    if (v25 <= *((_QWORD *)v26 + 3) - (_QWORD)v28)
    {
      memcpy(v28, v27, *(_QWORD *)(a1 + 24));
      v29 = (_BYTE *)(*((_QWORD *)v26 + 4) + v25);
      *((_QWORD *)v26 + 4) = v29;
    }
    else
    {
      v26 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(v24 + 1088), (const char *)v27);
      v29 = (_BYTE *)*((_QWORD *)v26 + 4);
    }
    if ((unint64_t)v29 >= *((_QWORD *)v26 + 3))
    {
      llvm::raw_ostream::write(v26);
    }
    else
    {
      *((_QWORD *)v26 + 4) = v29 + 1;
      *v29 = 32;
    }
  }
  sub_22F0FD464(v24, *(_QWORD *)(a1 + 40));
  LODWORD(v30) = *((_DWORD *)v4 + 6);
  if (v23 < v30)
  {
    while (1)
    {
      v31 = v4[2] + 32 * v30;
      v37 = 1;
      v32 = *(_QWORD *)(v31 - 8);
      if (!v32)
      {
        sub_22E4A06C4();
        sub_22F103C64();
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v32 + 48))(v32, &v37);
      v30 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v30;
      v33 = v4[2] + 32 * v30;
      v34 = *(_QWORD **)(v33 + 24);
      if (v34 == (_QWORD *)v33)
        break;
      if (v34)
      {
        v35 = 5;
LABEL_45:
        (*(void (**)(void))(*v34 + 8 * v35))();
        LODWORD(v30) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v30)
        goto LABEL_47;
    }
    v34 = (_QWORD *)(v4[2] + 32 * v30);
    v35 = 4;
    goto LABEL_45;
  }
LABEL_47:
  if (*((char *)v4 + 1087) < 0)
    v36 = v4[134];
  else
    v36 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v36 - 2, 0);
}

uint64_t sub_22F103C64(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC70D0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F103CA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC70D0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F103CEC(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC70D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F103D60(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC70D0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F103DAC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F103DC0(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F103DF0(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[10];

  v32[9] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  sub_22EFF68AC(*(uint64_t **)(a1 + 24), v32);
  sub_22F0FE404(v24, (uint64_t)v32);
  if (LODWORD(v32[0]) >= 2)
    sub_22EF53BC0(v32);
  LODWORD(v25) = *((_DWORD *)v4 + 6);
  if (v23 < v25)
  {
    while (1)
    {
      v26 = v4[2] + 32 * v25;
      LOBYTE(v32[0]) = 1;
      v27 = *(_QWORD *)(v26 - 8);
      if (!v27)
        sub_22E4A06C4();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 48))(v27, v32);
      v25 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v25;
      v28 = v4[2] + 32 * v25;
      v29 = *(_QWORD **)(v28 + 24);
      if (v29 == (_QWORD *)v28)
        break;
      if (v29)
      {
        v30 = 5;
LABEL_40:
        (*(void (**)(_QWORD *))(*v29 + 8 * v30))(v29);
        LODWORD(v25) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v25)
        goto LABEL_42;
    }
    v29 = (_QWORD *)(v4[2] + 32 * v25);
    v30 = 4;
    goto LABEL_40;
  }
LABEL_42:
  if (*((char *)v4 + 1087) < 0)
    v31 = v4[134];
  else
    v31 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v31 - 2, 0);
}

void sub_22F1040C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unsigned int *v22;
  const void *v23;
  size_t v24;
  unsigned int v25;
  void *v26;
  _WORD *v27;
  _WORD *v28;
  const char *p_p;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  __int128 __p;
  uint64_t v33;

  v4 = *(_QWORD *)(a2 + 48);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if ((v4 & 8) != 0)
  {
    v5 = (_QWORD *)*v5;
    v6 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 0x18) | *(_QWORD *)(a2 + 48) & 7;
  }
  else
  {
    LODWORD(v6) = v4 & 7;
  }
  v7 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v8 = v7;
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (*((_BYTE **)v7 + 3) == v9)
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v7, " ");
  }
  else
  {
    *v9 = 32;
    ++*((_QWORD *)v7 + 4);
  }
  v10 = *(_WORD *)(a2 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    if (v10 == 83)
      goto LABEL_22;
    if (v10 == 71)
    {
      v11 = -56;
      goto LABEL_22;
    }
    if (v10 != 81)
    {
LABEL_17:
      v12 = v10 - 52;
      v13 = v10 - 33 >= 5;
      v14 = -48;
      if (!v13)
        v14 = -64;
      if (v12 >= 6)
        v11 = v14;
      else
        v11 = -72;
    }
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_16;
    if (v10 == 16)
    {
LABEL_9:
      v11 = -48;
      goto LABEL_22;
    }
    if (((1 << v10) & 0x1066) == 0)
    {
      if (v10 == 24)
        goto LABEL_9;
LABEL_16:
      if (v10 == 70)
      {
        v11 = -64;
        goto LABEL_22;
      }
      goto LABEL_17;
    }
  }
LABEL_22:
  v15 = *(_QWORD *)(a2 + 72 + v11 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = v17[5];
  v19 = v18 & 7;
  v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  if (v19)
    v21 = 1;
  else
    v21 = v20 == 0;
  if (!v21)
  {
    v22 = *(unsigned int **)(v20 + 16);
    v25 = *v22;
    v23 = v22 + 4;
    v24 = v25;
    v26 = (void *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v25 <= *((_QWORD *)v8 + 3) - (_QWORD)v26)
    {
      if (v24)
      {
        memcpy(v26, v23, v24);
        *((_QWORD *)v8 + 4) += v24;
      }
    }
    else
    {
      v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, (const char *)v23);
    }
  }
  v27 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v27 > 1uLL)
  {
    *v27 = 14906;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, "::");
  }
  sub_22EFC6724((uint64_t)v8, *(_QWORD *)(a2 + 40));
  v28 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v28 > 1uLL)
  {
    *v28 = 10016;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, " '");
  }
  __p = 0uLL;
  v33 = 0;
  sub_22F1193C0((int)v5, v6, &__p, (_OWORD *)(a1 + 1136));
  if (v33 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v30 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, p_p);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if (*((_BYTE **)v30 + 3) == v31)
  {
    llvm::raw_ostream::write(v30, "'");
  }
  else
  {
    *v31 = 39;
    ++*((_QWORD *)v30 + 4);
  }
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
}

uint64_t sub_22F1043A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7118;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_22F1043DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7118;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F104428(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FAC7118;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v3 = v2 + 40;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 40);
    *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  }
  return v2;
}

char *sub_22F10449C(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7118;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 40);
  if (result[63] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 5), *((_QWORD *)result + 6));
  v4 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)result + 7);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F1044E8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_22F1044FC(void **__p)
{
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  operator delete(__p);
}

void sub_22F10452C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  llvm::raw_ostream *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  _WORD *v34;
  llvm::raw_ostream *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 63);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 48);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 40);
    else
      v19 = *(const char **)(a1 + 40);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = (uint64_t *)sub_22EFD7394(*(_QWORD *)(a1 + 16));
  v27 = v26;
  v28 = *(llvm::raw_ostream **)(v24 + 1088);
  v29 = (void *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 0xCuLL)
  {
    qmemcpy(v29, "Overrides: [ ", 13);
    *((_QWORD *)v28 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v28, "Overrides: [ ");
  }
  v31 = *v25;
  v30 = v25 + 1;
  sub_22F1040C4(*(_QWORD *)(a1 + 32), v31);
  for (; v30 != v27; ++v30)
  {
    v32 = *v30;
    v33 = *(llvm::raw_ostream **)(v24 + 1088);
    v34 = (_WORD *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
    {
      *v34 = 8236;
      *((_QWORD *)v33 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v33, ", ");
    }
    sub_22F1040C4(*(_QWORD *)(a1 + 32), v32);
  }
  v35 = *(llvm::raw_ostream **)(v24 + 1088);
  v36 = (_WORD *)*((_QWORD *)v35 + 4);
  if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 1uLL)
  {
    *v36 = 23840;
    *((_QWORD *)v35 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v35, " ]");
  }
  LODWORD(v37) = *((_DWORD *)v4 + 6);
  if (v23 < v37)
  {
    while (1)
    {
      v38 = v4[2] + 32 * v37;
      v44 = 1;
      v39 = *(_QWORD *)(v38 - 8);
      if (!v39)
      {
        sub_22E4A06C4();
        sub_22F1048BC();
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v39 + 48))(v39, &v44);
      v37 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v37;
      v40 = v4[2] + 32 * v37;
      v41 = *(_QWORD **)(v40 + 24);
      if (v41 == (_QWORD *)v40)
        break;
      if (v41)
      {
        v42 = 5;
LABEL_48:
        (*(void (**)(void))(*v41 + 8 * v42))();
        LODWORD(v37) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v37)
        goto LABEL_50;
    }
    v41 = (_QWORD *)(v4[2] + 32 * v37);
    v42 = 4;
    goto LABEL_48;
  }
LABEL_50:
  if (*((char *)v4 + 1087) < 0)
    v43 = v4[134];
  else
    v43 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v43 - 2, 0);
}

uint64_t sub_22F1048BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7160;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_22F1048F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7160;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F104944(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FAC7160;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v3 = v2 + 40;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 40);
    *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  }
  return v2;
}

char *sub_22F1049B8(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7160;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 40);
  if (result[63] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 5), *((_QWORD *)result + 6));
  v4 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)result + 7);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F104A04(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_22F104A18(void **__p)
{
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  operator delete(__p);
}

double sub_22F104A48(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  char v33;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 63);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 48);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 40);
    else
      v19 = *(const char **)(a1 + 40);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F0FE404(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v33 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      *(_QWORD *)&result = sub_22F104CC0(v32).n128_u64[0];
      return result;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v33);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
  return result;
}

__n128 sub_22F104CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  __n128 result;
  char *OpenMPClauseName;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  uint64_t v13;
  const char *p_p;
  llvm::raw_ostream *v15;
  _WORD *v16;
  _QWORD v17[2];
  void *__p;
  char v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 1088);
  v3 = *(unsigned __int8 *)(v1 + 1096);
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(v1 + 1096))
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(v1 + 1088), 4, 1, 0);
    OpenMPClauseName = (char *)llvm::omp::getOpenMPClauseName();
    v10 = v9;
    v11 = *(llvm::raw_ostream **)(v1 + 1088);
    v12 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 2)
    {
      *(_BYTE *)(v12 + 2) = 80;
      *(_WORD *)v12 = 19791;
      *((_QWORD *)v11 + 4) += 3;
    }
    else
    {
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(v1 + 1088), "OMP");
    }
    v13 = v10 != 0;
    v17[0] = OpenMPClauseName;
    v17[1] = v13;
    if (v10)
      ++OpenMPClauseName;
    llvm::StringRef::upper((llvm::StringRef *)v17);
    if (v19 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, p_p);
    v16 = (_WORD *)*((_QWORD *)v15 + 4);
    if ((unint64_t)(v10 - v13) <= *((_QWORD *)v15 + 3) - (_QWORD)v16)
    {
      if (v10 != v13)
      {
        memcpy(v16, OpenMPClauseName, v10 - v13);
        v16 = (_WORD *)(*((_QWORD *)v15 + 4) + v10 - v13);
        *((_QWORD *)v15 + 4) = v16;
      }
    }
    else
    {
      v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, OpenMPClauseName);
      v16 = (_WORD *)*((_QWORD *)v15 + 4);
    }
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 5uLL)
    {
      v16[2] = 25971;
      *(_DWORD *)v16 = 1969318979;
      *((_QWORD *)v15 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v15, "Clause");
    }
    if (v19 < 0)
      operator delete(__p);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    sub_22F402544(v1);
    sub_22F4025EC((llvm::raw_ostream *)v1, **(_QWORD **)a1);
  }
  else
  {
    v4 = *(llvm::raw_ostream **)(v1 + 1088);
    if (*(_BYTE *)(v1 + 1096))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(v1 + 1088), 4, 0, 0);
      v4 = *(llvm::raw_ostream **)(v1 + 1088);
    }
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x13)
    {
      *(_DWORD *)(v5 + 16) = 1702065505;
      result = *(__n128 *)"<<<NULL>>> OMPClause";
      *(_OWORD *)v5 = *(_OWORD *)"<<<NULL>>> OMPClause";
      *((_QWORD *)v4 + 4) += 20;
      if (v3)
        goto LABEL_6;
    }
    else
    {
      llvm::raw_ostream::write(v4, "<<<NULL>>> OMPClause");
      if (v3)
LABEL_6:
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    }
  }
  return result;
}

uint64_t sub_22F104F5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC71A8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F104F98(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC71A8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F104FE4(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC71A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F105058(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC71A8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F1050A4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F1050B8(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F1050E8(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char v33;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = sub_22F104CC0(a1 + 16);
LABEL_33:
  LODWORD(v25) = *((_DWORD *)v4 + 6);
  while (v23 < v25)
  {
    v26 = v4[2] + 32 * v25;
    v33 = 1;
    v27 = *(_QWORD *)(v26 - 8);
    if (!v27)
    {
      sub_22E4A06C4();
      sub_22F105358(v32);
      return;
    }
    (*(void (**)(uint64_t, char *, __n128))(*(_QWORD *)v27 + 48))(v27, &v33, v24);
    v25 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v25;
    v28 = v4[2] + 32 * v25;
    v29 = *(_QWORD **)(v28 + 24);
    if (v29 == (_QWORD *)v28)
    {
      v29 = (_QWORD *)(v4[2] + 32 * v25);
      v30 = 4;
      goto LABEL_40;
    }
    if (v29)
    {
      v30 = 5;
LABEL_40:
      (*(void (**)(void))(*v29 + 8 * v30))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v31 = v4[134];
  else
    v31 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v31 - 2, 0);
}

llvm::raw_ostream *sub_22F105358(unint64_t *a1)
{
  unint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  void *v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _DWORD *v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  unint64_t v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  unint64_t v24;
  llvm::raw_ostream *v25;
  _OWORD *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  _DWORD *v31;
  unint64_t v32;
  llvm::raw_ostream *v33;
  _QWORD *v34;
  unint64_t v35;
  llvm::raw_ostream *v36;
  uint64_t v37;
  unint64_t v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  _QWORD *v42;
  unint64_t v43;
  llvm::raw_ostream *v44;
  void *v45;
  llvm::raw_ostream *v46;
  void *v47;
  unint64_t v48;
  llvm::raw_ostream *v49;
  uint64_t v50;
  unint64_t v51;
  llvm::raw_ostream *v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void (**v71)(void);
  int v72;
  unint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  _BYTE *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  llvm::raw_ostream *v90;
  _BYTE *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  llvm::raw_ostream *v108;
  _BYTE *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  llvm::raw_ostream *result;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  void (**v123)(void);
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  void (**v130)(void);
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  void (**v137)(void);
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  void (**v144)(void);
  int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t (**v151)(void);
  llvm::raw_ostream *v152;
  _QWORD *v153;
  __int128 v154;
  _QWORD v155[3];
  llvm::raw_ostream *v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 <= 0xDuLL)
  {
    llvm::raw_ostream::write(v5, "DefinitionData");
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  qmemcpy(v6, "DefinitionData", 14);
  *((_QWORD *)v5 + 4) += 14;
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  v7 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
  if (((*(unsigned __int16 *)(*(_QWORD *)(v7 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(v7 + 128) + 10) << 16)) & 0x200000) != 0)
  {
    v8 = *(llvm::raw_ostream **)(v2 + 1088);
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0x17uLL)
    {
      qmemcpy(v9, " parsing_base_specifiers", 24);
      *((_QWORD *)v8 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v8, " parsing_base_specifiers");
    }
  }
  v10 = *(_QWORD *)(a1[1] + 128);
  if (v10
    && ((*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0x100000) != 0
    && (*(_BYTE *)(v10 + 104) & 4) != 0)
  {
    v152 = *(llvm::raw_ostream **)(v2 + 1088);
    v153 = (_QWORD *)*((_QWORD *)v152 + 4);
    if (*((_QWORD *)v152 + 3) - (_QWORD)v153 > 7uLL)
    {
      *v153 = 0x636972656E656720;
      *((_QWORD *)v152 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v152, " generic");
    }
  }
  v11 = *(_QWORD *)(a1[1] + 128);
  if (v11 && ((*(unsigned __int16 *)(v11 + 8) | (*(unsigned __int8 *)(v11 + 10) << 16)) & 0x100000) != 0)
  {
    v12 = *(llvm::raw_ostream **)(v2 + 1088);
    v13 = (_DWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 6uLL)
    {
      *(_DWORD *)((char *)v13 + 3) = 1633968749;
      *v13 = 1835101216;
      *((_QWORD *)v12 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v12, " lambda");
    }
  }
  if ((*(_BYTE *)(a1[1] + 75) & 1) != 0)
  {
    v14 = *(llvm::raw_ostream **)(v2 + 1088);
    v15 = (void *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0xCuLL)
    {
      qmemcpy(v15, " is_anonymous", 13);
      *((_QWORD *)v14 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v14, " is_anonymous");
    }
  }
  if ((*(_BYTE *)(a1[1] + 76) & 0x18) == 0)
  {
    v16 = *(llvm::raw_ostream **)(v2 + 1088);
    v17 = *((_QWORD *)v16 + 4);
    if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0x11)
    {
      *(_WORD *)(v17 + 16) = 29554;
      *(_OWORD *)v17 = *(_OWORD *)" pass_in_registers";
      *((_QWORD *)v16 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v16, " pass_in_registers");
    }
  }
  v18 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
  if ((**(_QWORD **)(v18 + 128) & 0x200) != 0)
  {
    v19 = *(llvm::raw_ostream **)(v2 + 1088);
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 5)
    {
      *(_WORD *)(v20 + 4) = 31092;
      *(_DWORD *)v20 = 1886217504;
      *((_QWORD *)v19 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v19, " empty");
    }
  }
  v21 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
  if ((**(_QWORD **)(v21 + 128) & 0x80) != 0)
  {
    v22 = *(llvm::raw_ostream **)(v2 + 1088);
    v23 = *((_QWORD *)v22 + 4);
    if ((unint64_t)(*((_QWORD *)v22 + 3) - v23) > 9)
    {
      *(_WORD *)(v23 + 8) = 25972;
      *(_QWORD *)v23 = *(_QWORD *)" aggregate";
      *((_QWORD *)v22 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v22, " aggregate");
    }
  }
  v24 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v24 + 104) + 96), *(_QWORD *)(v24 + 104));
  if ((**(_QWORD **)(v24 + 128) & 0x1000) != 0)
  {
    v25 = *(llvm::raw_ostream **)(v2 + 1088);
    v26 = (_OWORD *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0xFuLL)
    {
      *v26 = *(_OWORD *)" standard_layout";
      *((_QWORD *)v25 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v25, " standard_layout");
    }
  }
  if (sub_22EFD12A8(a1[1]))
  {
    v27 = *(llvm::raw_ostream **)(v2 + 1088);
    v28 = *((_QWORD *)v27 + 4);
    if ((unint64_t)(*((_QWORD *)v27 + 3) - v28) > 0x12)
    {
      *(_DWORD *)(v28 + 15) = 1701601889;
      *(_OWORD *)v28 = *(_OWORD *)" trivially_copyable";
      *((_QWORD *)v27 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v27, " trivially_copyable");
    }
  }
  v29 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v29 + 104) + 96), *(_QWORD *)(v29 + 104));
  if ((**(_QWORD **)(v29 + 128) & 0x100) != 0)
  {
    v30 = *(llvm::raw_ostream **)(v2 + 1088);
    v31 = (_DWORD *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 3uLL)
    {
      *v31 = 1685024800;
      *((_QWORD *)v30 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v30, " pod");
    }
  }
  v32 = a1[1];
  if (sub_22EFD12A8(v32) && sub_22E49F698(v32))
  {
    v33 = *(llvm::raw_ostream **)(v2 + 1088);
    v34 = (_QWORD *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 7uLL)
    {
      *v34 = 0x6C61697669727420;
      *((_QWORD *)v33 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v33, " trivial");
    }
  }
  v35 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v35 + 104) + 96), *(_QWORD *)(v35 + 104));
  if ((**(_QWORD **)(v35 + 128) & 0x400) != 0)
  {
    v36 = *(llvm::raw_ostream **)(v2 + 1088);
    v37 = *((_QWORD *)v36 + 4);
    if ((unint64_t)(*((_QWORD *)v36 + 3) - v37) > 0xB)
    {
      *(_DWORD *)(v37 + 8) = 1667852400;
      *(_QWORD *)v37 = *(_QWORD *)" polymorphic";
      *((_QWORD *)v36 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v36, " polymorphic");
    }
  }
  v38 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v38 + 104) + 96), *(_QWORD *)(v38 + 104));
  if ((**(_QWORD **)(v38 + 128) & 0x800) != 0)
  {
    v39 = *(llvm::raw_ostream **)(v2 + 1088);
    v40 = *((_QWORD *)v39 + 4);
    if ((unint64_t)(*((_QWORD *)v39 + 3) - v40) > 8)
    {
      *(_BYTE *)(v40 + 8) = 116;
      *(_QWORD *)v40 = *(_QWORD *)" abstract";
      *((_QWORD *)v39 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v39, " abstract");
    }
  }
  if (sub_22EAE4B48(a1[1]))
  {
    v41 = *(llvm::raw_ostream **)(v2 + 1088);
    v42 = (_QWORD *)*((_QWORD *)v41 + 4);
    if (*((_QWORD *)v41 + 3) - (_QWORD)v42 > 7uLL)
    {
      *v42 = 0x6C61726574696C20;
      *((_QWORD *)v41 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v41, " literal");
    }
  }
  v43 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v43 + 104) + 96), *(_QWORD *)(v43 + 104));
  if ((**(_QWORD **)(v43 + 128) & 1) != 0)
  {
    v44 = *(llvm::raw_ostream **)(v2 + 1088);
    v45 = (void *)*((_QWORD *)v44 + 4);
    if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 0x16uLL)
    {
      qmemcpy(v45, " has_user_declared_ctor", 23);
      *((_QWORD *)v44 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v44, " has_user_declared_ctor");
    }
  }
  if (sub_22E49F8B4(a1[1]))
  {
    v46 = *(llvm::raw_ostream **)(v2 + 1088);
    v47 = (void *)*((_QWORD *)v46 + 4);
    if (*((_QWORD *)v46 + 3) - (_QWORD)v47 > 0x20uLL)
    {
      qmemcpy(v47, " has_constexpr_non_copy_move_ctor", 33);
      *((_QWORD *)v46 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(v46, " has_constexpr_non_copy_move_ctor");
    }
  }
  v48 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v48 + 104) + 96), *(_QWORD *)(v48 + 104));
  if ((**(_QWORD **)(v48 + 128) & 0x80000) != 0)
  {
    v49 = *(llvm::raw_ostream **)(v2 + 1088);
    v50 = *((_QWORD *)v49 + 4);
    if ((unint64_t)(*((_QWORD *)v49 + 3) - v50) > 0x12)
    {
      *(_DWORD *)(v50 + 15) = 1935961189;
      *(_OWORD *)v50 = *(_OWORD *)" has_mutable_fields";
      *((_QWORD *)v49 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v49, " has_mutable_fields");
    }
  }
  v51 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v51 + 104) + 96), *(_QWORD *)(v51 + 104));
  if ((**(_QWORD **)(v51 + 128) & 0x100000) != 0)
  {
    v52 = *(llvm::raw_ostream **)(v2 + 1088);
    v53 = *((_QWORD *)v52 + 4);
    if ((unint64_t)(*((_QWORD *)v52 + 3) - v53) > 0x13)
    {
      *(_DWORD *)(v53 + 16) = 1936876898;
      *(_OWORD *)v53 = *(_OWORD *)" has_variant_members";
      *((_QWORD *)v52 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v52, " has_variant_members");
    }
  }
  if (sub_22EC4FB1C(a1[1]))
  {
    v54 = *(llvm::raw_ostream **)(v2 + 1088);
    v55 = (void *)*((_QWORD *)v54 + 4);
    if (*((_QWORD *)v54 + 3) - (_QWORD)v55 > 0x16uLL)
    {
      qmemcpy(v55, " can_const_default_init", 23);
      *((_QWORD *)v54 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v54, " can_const_default_init");
    }
  }
  v56 = a1[1];
  *(_QWORD *)&v154 = v2;
  *((_QWORD *)&v154 + 1) = v56;
  if (*(_BYTE *)(v2 + 1056))
  {
    *(_BYTE *)(v2 + 1056) = 0;
    sub_22F10659C((unint64_t *)&v154);
    LODWORD(v57) = *(_DWORD *)(v2 + 24);
    if ((_DWORD)v57)
    {
      while (1)
      {
        v58 = *(_QWORD *)(v2 + 16) + 32 * v57;
        LOBYTE(v155[0]) = 1;
        v59 = *(_QWORD *)(v58 - 8);
        if (!v59)
          goto LABEL_220;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v59 + 48))(v59, v155);
        v57 = (*(_DWORD *)(v2 + 24) - 1);
        *(_DWORD *)(v2 + 24) = v57;
        v60 = *(_QWORD *)(v2 + 16) + 32 * v57;
        v61 = *(_QWORD **)(v60 + 24);
        if (v61 == (_QWORD *)v60)
          break;
        if (v61)
        {
          v62 = 5;
LABEL_71:
          (*(void (**)(void))(*v61 + 8 * v62))();
          LODWORD(v57) = *(_DWORD *)(v2 + 24);
        }
        if (!(_DWORD)v57)
          goto LABEL_73;
      }
      v61 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * v57);
      v62 = 4;
      goto LABEL_71;
    }
LABEL_73:
    if (*(char *)(v2 + 1087) < 0)
    {
      **(_BYTE **)(v2 + 1064) = 0;
      *(_QWORD *)(v2 + 1072) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 1064) = 0;
      *(_BYTE *)(v2 + 1087) = 0;
    }
    v64 = *(llvm::raw_ostream **)v2;
    v65 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if (*(_BYTE **)(*(_QWORD *)v2 + 24) == v65)
    {
      llvm::raw_ostream::write(v64, "\n");
    }
    else
    {
      *v65 = 10;
      ++*((_QWORD *)v64 + 4);
    }
    v66 = a1[1];
    *(_QWORD *)&v154 = v2;
    *((_QWORD *)&v154 + 1) = v66;
    goto LABEL_89;
  }
  if (*(_BYTE *)(v2 + 1057))
  {
    v63 = operator new(0x38uLL);
    *v63 = off_24FAC71F0;
    v63[1] = v2;
    *((_OWORD *)v63 + 1) = v154;
    v63[4] = 0;
    *((_BYTE *)v63 + 55) = 0;
    v156 = (llvm::raw_ostream *)v63;
    sub_22E536AAC(v2 + 16, (unint64_t)v155);
  }
  else
  {
    v67 = *(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24);
    LOBYTE(v155[0]) = 0;
    v68 = *(_QWORD *)(v67 - 8);
    if (!v68)
      goto LABEL_220;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v68 + 48))(v68, v155);
    v69 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24) - 32);
    v70 = operator new(0x38uLL);
    *v70 = off_24FAC71F0;
    v70[1] = v2;
    *((_OWORD *)v70 + 1) = v154;
    v70[4] = 0;
    *((_BYTE *)v70 + 55) = 0;
    v156 = (llvm::raw_ostream *)v70;
    sub_22E63BEA4(v155, v69);
  }
  if (v156 == (llvm::raw_ostream *)v155)
  {
    v71 = (void (**)(void))(v155[0] + 32);
  }
  else
  {
    if (!v156)
      goto LABEL_88;
    v71 = (void (**)(void))(*(_QWORD *)v156 + 40);
  }
  (*v71)();
LABEL_88:
  *(_BYTE *)(v2 + 1057) = 0;
  v72 = *(unsigned __int8 *)(v2 + 1056);
  v73 = a1[1];
  *(_QWORD *)&v154 = v2;
  *((_QWORD *)&v154 + 1) = v73;
  if (v72)
  {
LABEL_89:
    *(_BYTE *)(v2 + 1056) = 0;
    v74.n128_f64[0] = sub_22F106CFC((uint64_t *)&v154);
    LODWORD(v75) = *(_DWORD *)(v2 + 24);
    if ((_DWORD)v75)
    {
      while (1)
      {
        v76 = *(_QWORD *)(v2 + 16) + 32 * v75;
        LOBYTE(v155[0]) = 1;
        v77 = *(_QWORD *)(v76 - 8);
        if (!v77)
          goto LABEL_220;
        (*(void (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v77 + 48))(v77, v155, v74);
        v75 = (*(_DWORD *)(v2 + 24) - 1);
        *(_DWORD *)(v2 + 24) = v75;
        v78 = *(_QWORD *)(v2 + 16) + 32 * v75;
        v79 = *(_QWORD **)(v78 + 24);
        if (v79 == (_QWORD *)v78)
          break;
        if (v79)
        {
          v80 = 5;
LABEL_95:
          (*(void (**)(void))(*v79 + 8 * v80))();
          LODWORD(v75) = *(_DWORD *)(v2 + 24);
        }
        if (!(_DWORD)v75)
          goto LABEL_97;
      }
      v79 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * v75);
      v80 = 4;
      goto LABEL_95;
    }
LABEL_97:
    if (*(char *)(v2 + 1087) < 0)
    {
      **(_BYTE **)(v2 + 1064) = 0;
      *(_QWORD *)(v2 + 1072) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 1064) = 0;
      *(_BYTE *)(v2 + 1087) = 0;
    }
    v81 = *(llvm::raw_ostream **)v2;
    v82 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if (*(_BYTE **)(*(_QWORD *)v2 + 24) == v82)
    {
      llvm::raw_ostream::write(v81, "\n");
    }
    else
    {
      *v82 = 10;
      ++*((_QWORD *)v81 + 4);
    }
    v83 = a1[1];
    *(_QWORD *)&v154 = v2;
    *((_QWORD *)&v154 + 1) = v83;
    goto LABEL_103;
  }
  v119 = *(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24);
  LOBYTE(v155[0]) = 0;
  v120 = *(_QWORD *)(v119 - 8);
  if (!v120)
    goto LABEL_220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v120 + 48))(v120, v155);
  v121 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24) - 32);
  v122 = operator new(0x38uLL);
  *v122 = off_24FAC7238;
  v122[1] = v2;
  *((_OWORD *)v122 + 1) = v154;
  v122[4] = 0;
  *((_BYTE *)v122 + 55) = 0;
  v156 = (llvm::raw_ostream *)v122;
  sub_22E63BEA4(v155, v121);
  if (v156 == (llvm::raw_ostream *)v155)
  {
    v123 = (void (**)(void))(v155[0] + 32);
  }
  else
  {
    if (!v156)
      goto LABEL_165;
    v123 = (void (**)(void))(*(_QWORD *)v156 + 40);
  }
  (*v123)();
LABEL_165:
  *(_BYTE *)(v2 + 1057) = 0;
  v124 = *(unsigned __int8 *)(v2 + 1056);
  v125 = a1[1];
  *(_QWORD *)&v154 = v2;
  *((_QWORD *)&v154 + 1) = v125;
  if (v124)
  {
LABEL_103:
    *(_BYTE *)(v2 + 1056) = 0;
    sub_22F10751C((uint64_t *)&v154);
    LODWORD(v84) = *(_DWORD *)(v2 + 24);
    if ((_DWORD)v84)
    {
      while (1)
      {
        v85 = *(_QWORD *)(v2 + 16) + 32 * v84;
        LOBYTE(v155[0]) = 1;
        v86 = *(_QWORD *)(v85 - 8);
        if (!v86)
          goto LABEL_220;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 48))(v86, v155);
        v84 = (*(_DWORD *)(v2 + 24) - 1);
        *(_DWORD *)(v2 + 24) = v84;
        v87 = *(_QWORD *)(v2 + 16) + 32 * v84;
        v88 = *(_QWORD **)(v87 + 24);
        if (v88 == (_QWORD *)v87)
          break;
        if (v88)
        {
          v89 = 5;
LABEL_109:
          (*(void (**)(void))(*v88 + 8 * v89))();
          LODWORD(v84) = *(_DWORD *)(v2 + 24);
        }
        if (!(_DWORD)v84)
          goto LABEL_111;
      }
      v88 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * v84);
      v89 = 4;
      goto LABEL_109;
    }
LABEL_111:
    if (*(char *)(v2 + 1087) < 0)
    {
      **(_BYTE **)(v2 + 1064) = 0;
      *(_QWORD *)(v2 + 1072) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 1064) = 0;
      *(_BYTE *)(v2 + 1087) = 0;
    }
    v90 = *(llvm::raw_ostream **)v2;
    v91 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if (*(_BYTE **)(*(_QWORD *)v2 + 24) == v91)
    {
      llvm::raw_ostream::write(v90, "\n");
    }
    else
    {
      *v91 = 10;
      ++*((_QWORD *)v90 + 4);
    }
    v92 = a1[1];
    *(_QWORD *)&v154 = v2;
    *((_QWORD *)&v154 + 1) = v92;
    goto LABEL_117;
  }
  v126 = *(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24);
  LOBYTE(v155[0]) = 0;
  v127 = *(_QWORD *)(v126 - 8);
  if (!v127)
    goto LABEL_220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v127 + 48))(v127, v155);
  v128 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24) - 32);
  v129 = operator new(0x38uLL);
  *v129 = off_24FAC7280;
  v129[1] = v2;
  *((_OWORD *)v129 + 1) = v154;
  v129[4] = 0;
  *((_BYTE *)v129 + 55) = 0;
  v156 = (llvm::raw_ostream *)v129;
  sub_22E63BEA4(v155, v128);
  if (v156 == (llvm::raw_ostream *)v155)
  {
    v130 = (void (**)(void))(v155[0] + 32);
  }
  else
  {
    if (!v156)
      goto LABEL_172;
    v130 = (void (**)(void))(*(_QWORD *)v156 + 40);
  }
  (*v130)();
LABEL_172:
  *(_BYTE *)(v2 + 1057) = 0;
  v131 = *(unsigned __int8 *)(v2 + 1056);
  v132 = a1[1];
  *(_QWORD *)&v154 = v2;
  *((_QWORD *)&v154 + 1) = v132;
  if (v131)
  {
LABEL_117:
    *(_BYTE *)(v2 + 1056) = 0;
    sub_22F107D0C((uint64_t *)&v154);
    LODWORD(v93) = *(_DWORD *)(v2 + 24);
    if ((_DWORD)v93)
    {
      while (1)
      {
        v94 = *(_QWORD *)(v2 + 16) + 32 * v93;
        LOBYTE(v155[0]) = 1;
        v95 = *(_QWORD *)(v94 - 8);
        if (!v95)
          goto LABEL_220;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 48))(v95, v155);
        v93 = (*(_DWORD *)(v2 + 24) - 1);
        *(_DWORD *)(v2 + 24) = v93;
        v96 = *(_QWORD *)(v2 + 16) + 32 * v93;
        v97 = *(_QWORD **)(v96 + 24);
        if (v97 == (_QWORD *)v96)
          break;
        if (v97)
        {
          v98 = 5;
LABEL_123:
          (*(void (**)(void))(*v97 + 8 * v98))();
          LODWORD(v93) = *(_DWORD *)(v2 + 24);
        }
        if (!(_DWORD)v93)
          goto LABEL_125;
      }
      v97 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * v93);
      v98 = 4;
      goto LABEL_123;
    }
LABEL_125:
    if (*(char *)(v2 + 1087) < 0)
    {
      **(_BYTE **)(v2 + 1064) = 0;
      *(_QWORD *)(v2 + 1072) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 1064) = 0;
      *(_BYTE *)(v2 + 1087) = 0;
    }
    v99 = *(llvm::raw_ostream **)v2;
    v100 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if (*(_BYTE **)(*(_QWORD *)v2 + 24) == v100)
    {
      llvm::raw_ostream::write(v99, "\n");
    }
    else
    {
      *v100 = 10;
      ++*((_QWORD *)v99 + 4);
    }
    v101 = a1[1];
    *(_QWORD *)&v154 = v2;
    *((_QWORD *)&v154 + 1) = v101;
    goto LABEL_131;
  }
  v133 = *(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24);
  LOBYTE(v155[0]) = 0;
  v134 = *(_QWORD *)(v133 - 8);
  if (!v134)
    goto LABEL_220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v134 + 48))(v134, v155);
  v135 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24) - 32);
  v136 = operator new(0x38uLL);
  *v136 = off_24FAC72C8;
  v136[1] = v2;
  *((_OWORD *)v136 + 1) = v154;
  v136[4] = 0;
  *((_BYTE *)v136 + 55) = 0;
  v156 = (llvm::raw_ostream *)v136;
  sub_22E63BEA4(v155, v135);
  if (v156 == (llvm::raw_ostream *)v155)
  {
    v137 = (void (**)(void))(v155[0] + 32);
  }
  else
  {
    if (!v156)
      goto LABEL_202;
    v137 = (void (**)(void))(*(_QWORD *)v156 + 40);
  }
  (*v137)();
LABEL_202:
  *(_BYTE *)(v2 + 1057) = 0;
  v138 = *(unsigned __int8 *)(v2 + 1056);
  v139 = a1[1];
  *(_QWORD *)&v154 = v2;
  *((_QWORD *)&v154 + 1) = v139;
  if (v138)
  {
LABEL_131:
    *(_BYTE *)(v2 + 1056) = 0;
    sub_22F1084D4((unint64_t *)&v154);
    LODWORD(v102) = *(_DWORD *)(v2 + 24);
    if ((_DWORD)v102)
    {
      while (1)
      {
        v103 = *(_QWORD *)(v2 + 16) + 32 * v102;
        LOBYTE(v155[0]) = 1;
        v104 = *(_QWORD *)(v103 - 8);
        if (!v104)
          goto LABEL_220;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v104 + 48))(v104, v155);
        v102 = (*(_DWORD *)(v2 + 24) - 1);
        *(_DWORD *)(v2 + 24) = v102;
        v105 = *(_QWORD *)(v2 + 16) + 32 * v102;
        v106 = *(_QWORD **)(v105 + 24);
        if (v106 == (_QWORD *)v105)
          break;
        if (v106)
        {
          v107 = 5;
LABEL_137:
          (*(void (**)(void))(*v106 + 8 * v107))();
          LODWORD(v102) = *(_DWORD *)(v2 + 24);
        }
        if (!(_DWORD)v102)
          goto LABEL_139;
      }
      v106 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * v102);
      v107 = 4;
      goto LABEL_137;
    }
LABEL_139:
    if (*(char *)(v2 + 1087) < 0)
    {
      **(_BYTE **)(v2 + 1064) = 0;
      *(_QWORD *)(v2 + 1072) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 1064) = 0;
      *(_BYTE *)(v2 + 1087) = 0;
    }
    v108 = *(llvm::raw_ostream **)v2;
    v109 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if (*(_BYTE **)(*(_QWORD *)v2 + 24) == v109)
    {
      llvm::raw_ostream::write(v108, "\n");
    }
    else
    {
      *v109 = 10;
      ++*((_QWORD *)v108 + 4);
    }
    v110 = a1[1];
    *(_QWORD *)&v154 = v2;
    *((_QWORD *)&v154 + 1) = v110;
    goto LABEL_145;
  }
  v140 = *(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24);
  LOBYTE(v155[0]) = 0;
  v141 = *(_QWORD *)(v140 - 8);
  if (!v141)
    goto LABEL_220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v141 + 48))(v141, v155);
  v142 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24) - 32);
  v143 = operator new(0x38uLL);
  *v143 = off_24FAC7310;
  v143[1] = v2;
  *((_OWORD *)v143 + 1) = v154;
  v143[4] = 0;
  *((_BYTE *)v143 + 55) = 0;
  v156 = (llvm::raw_ostream *)v143;
  sub_22E63BEA4(v155, v142);
  if (v156 == (llvm::raw_ostream *)v155)
  {
    v144 = (void (**)(void))(v155[0] + 32);
  }
  else
  {
    if (!v156)
      goto LABEL_212;
    v144 = (void (**)(void))(*(_QWORD *)v156 + 40);
  }
  (*v144)();
LABEL_212:
  *(_BYTE *)(v2 + 1057) = 0;
  v145 = *(unsigned __int8 *)(v2 + 1056);
  v146 = a1[1];
  *(_QWORD *)&v154 = v2;
  *((_QWORD *)&v154 + 1) = v146;
  if (!v145)
  {
    v147 = *(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24);
    LOBYTE(v155[0]) = 0;
    v148 = *(_QWORD *)(v147 - 8);
    if (v148)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v148 + 48))(v148, v155);
      v149 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * *(unsigned int *)(v2 + 24) - 32);
      v150 = operator new(0x38uLL);
      *v150 = off_24FAC7358;
      v150[1] = v2;
      *((_OWORD *)v150 + 1) = v154;
      v150[4] = 0;
      *((_BYTE *)v150 + 55) = 0;
      v156 = (llvm::raw_ostream *)v150;
      sub_22E63BEA4(v155, v149);
      result = v156;
      if (v156 == (llvm::raw_ostream *)v155)
      {
        v151 = (uint64_t (**)(void))(v155[0] + 32);
      }
      else
      {
        if (!v156)
        {
LABEL_219:
          *(_BYTE *)(v2 + 1057) = 0;
          return result;
        }
        v151 = (uint64_t (**)(void))(*(_QWORD *)v156 + 40);
      }
      result = (llvm::raw_ostream *)(*v151)();
      goto LABEL_219;
    }
LABEL_220:
    sub_22E4A06C4();
  }
LABEL_145:
  *(_BYTE *)(v2 + 1056) = 0;
  sub_22F108C40((uint64_t *)&v154);
  LODWORD(v111) = *(_DWORD *)(v2 + 24);
  if ((_DWORD)v111)
  {
    while (1)
    {
      v112 = *(_QWORD *)(v2 + 16) + 32 * v111;
      LOBYTE(v155[0]) = 1;
      v113 = *(_QWORD *)(v112 - 8);
      if (!v113)
        goto LABEL_220;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v113 + 48))(v113, v155);
      v111 = (*(_DWORD *)(v2 + 24) - 1);
      *(_DWORD *)(v2 + 24) = v111;
      v114 = *(_QWORD *)(v2 + 16) + 32 * v111;
      v115 = *(_QWORD **)(v114 + 24);
      if (v115 == (_QWORD *)v114)
        break;
      if (v115)
      {
        v116 = 5;
LABEL_151:
        (*(void (**)(void))(*v115 + 8 * v116))();
        LODWORD(v111) = *(_DWORD *)(v2 + 24);
      }
      if (!(_DWORD)v111)
        goto LABEL_153;
    }
    v115 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 32 * v111);
    v116 = 4;
    goto LABEL_151;
  }
LABEL_153:
  if (*(char *)(v2 + 1087) < 0)
  {
    **(_BYTE **)(v2 + 1064) = 0;
    *(_QWORD *)(v2 + 1072) = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 1064) = 0;
    *(_BYTE *)(v2 + 1087) = 0;
  }
  result = *(llvm::raw_ostream **)v2;
  v118 = *(_BYTE **)(*(_QWORD *)v2 + 32);
  if (*(_BYTE **)(*(_QWORD *)v2 + 24) == v118)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v118 = 10;
    ++*((_QWORD *)result + 4);
  }
  *(_BYTE *)(v2 + 1056) = 1;
  return result;
}

llvm::raw_ostream *sub_22F10659C(unint64_t *a1)
{
  unint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  void *v20;
  llvm::raw_ostream *result;
  void *v22;

  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 0x11)
  {
    *(_WORD *)(v6 + 16) = 29295;
    *(_OWORD *)v6 = *(_OWORD *)"DefaultConstructor";
    *((_QWORD *)v5 + 4) += 18;
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::raw_ostream::write(v5, "DefaultConstructor");
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  v7 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v7 + 128) + 8) & 0x100) != 0 || sub_22E49F6F8(v7))
  {
    v8 = *(llvm::raw_ostream **)(v2 + 1088);
    v9 = (_DWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 6uLL)
    {
      *(_DWORD *)((char *)v9 + 3) = 1937011561;
      *v9 = 1769497888;
      *((_QWORD *)v8 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v8, " exists");
    }
  }
  if (sub_22E49F698(a1[1]))
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1088);
    v11 = (_QWORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x6C61697669727420;
      *((_QWORD *)v10 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v10, " trivial");
    }
  }
  if (sub_22F333374(a1[1]))
  {
    v12 = *(llvm::raw_ostream **)(v2 + 1088);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 0xB)
    {
      *(_DWORD *)(v13 + 8) = 1818323318;
      *(_QWORD *)v13 = *(_QWORD *)" non_trivial";
      *((_QWORD *)v12 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v12, " non_trivial");
    }
  }
  v14 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v14 + 104) + 96), *(_QWORD *)(v14 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v14 + 128) + 8) & 0x80) != 0)
  {
    v15 = *(llvm::raw_ostream **)(v2 + 1088);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xDuLL)
    {
      qmemcpy(v16, " user_provided", 14);
      *((_QWORD *)v15 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v15, " user_provided");
    }
  }
  if (sub_22EAE4D48(a1[1]))
  {
    v17 = *(llvm::raw_ostream **)(v2 + 1088);
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 9)
    {
      *(_WORD *)(v18 + 8) = 29296;
      *(_QWORD *)v18 = *(_QWORD *)" constexpr";
      *((_QWORD *)v17 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v17, " constexpr");
    }
  }
  if (sub_22E49F6F8(a1[1]))
  {
    v19 = *(llvm::raw_ostream **)(v2 + 1088);
    v20 = (void *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0xEuLL)
    {
      qmemcpy(v20, " needs_implicit", 15);
      *((_QWORD *)v19 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v19, " needs_implicit");
    }
  }
  result = (llvm::raw_ostream *)sub_22E49F910(a1[1]);
  if ((_DWORD)result)
  {
    result = *(llvm::raw_ostream **)(v2 + 1088);
    v22 = (void *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v22 > 0x16uLL)
    {
      qmemcpy(v22, " defaulted_is_constexpr", 23);
      *((_QWORD *)result + 4) += 23;
    }
    else
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " defaulted_is_constexpr");
    }
  }
  return result;
}

uint64_t sub_22F106900(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC71F0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F10693C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC71F0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F106988(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC71F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F1069FC(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC71F0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F106A48(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F106A5C(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

double sub_22F106A8C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  uint64_t *v32;
  char v33;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F10659C((unint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v33 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      return sub_22F106CFC(v32);
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v33);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
  return result;
}

double sub_22F106CFC(uint64_t *a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  void *v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  _OWORD *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void *v21;
  llvm::raw_ostream *v22;
  void *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  void *v26;
  double result;
  llvm::raw_ostream *v28;
  void *v29;

  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 <= 0xEuLL)
  {
    llvm::raw_ostream::write(v5, "CopyConstructor");
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  qmemcpy(v6, "CopyConstructor", 15);
  *((_QWORD *)v5 + 4) += 15;
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  if (sub_22EB87B38(a1[1]))
  {
    v7 = *(llvm::raw_ostream **)(v2 + 1088);
    v8 = (_DWORD *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 1701605485;
      *v8 = 1835627296;
      *((_QWORD *)v7 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v7, " simple");
    }
  }
  v9 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
  if ((**(_QWORD **)(v9 + 128) & 0x10000000000) != 0)
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1088);
    v11 = (_QWORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x6C61697669727420;
      *((_QWORD *)v10 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v10, " trivial");
    }
  }
  if (sub_22E3CD2C4(a1[1]))
  {
    v12 = *(llvm::raw_ostream **)(v2 + 1088);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 0xB)
    {
      *(_DWORD *)(v13 + 8) = 1818323318;
      *(_QWORD *)v13 = *(_QWORD *)" non_trivial";
      *((_QWORD *)v12 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v12, " non_trivial");
    }
  }
  v14 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v14 + 104) + 96), *(_QWORD *)(v14 + 104));
  if ((**(_QWORD **)(v14 + 128) & 4) != 0)
  {
    v15 = *(llvm::raw_ostream **)(v2 + 1088);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xDuLL)
    {
      qmemcpy(v16, " user_declared", 14);
      *((_QWORD *)v15 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v15, " user_declared");
    }
  }
  if (sub_22EFD0B3C(a1[1]))
  {
    v17 = *(llvm::raw_ostream **)(v2 + 1088);
    v18 = (_OWORD *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0xFuLL)
    {
      *v18 = *(_OWORD *)" has_const_param";
      *((_QWORD *)v17 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v17, " has_const_param");
    }
  }
  v19 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v19 + 128) + 8) & 0x200) == 0)
  {
    v20 = *(llvm::raw_ostream **)(v2 + 1088);
    v21 = (void *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 0xEuLL)
    {
      qmemcpy(v21, " needs_implicit", 15);
      *((_QWORD *)v20 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v20, " needs_implicit");
    }
  }
  if (sub_22EABD2CC(a1[1]))
  {
    v22 = *(llvm::raw_ostream **)(v2 + 1088);
    v23 = (void *)*((_QWORD *)v22 + 4);
    if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x19uLL)
    {
      qmemcpy(v23, " needs_overload_resolution", 26);
      *((_QWORD *)v22 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v22, " needs_overload_resolution");
    }
  }
  if ((sub_22EABD2CC(a1[1]) & 1) == 0)
  {
    v24 = a1[1];
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v24 + 104) + 96), *(_QWORD *)(v24 + 104));
    if ((**(_QWORD **)(v24 + 128) & 0x400000000) != 0)
    {
      v25 = *(llvm::raw_ostream **)(v2 + 1088);
      v26 = (void *)*((_QWORD *)v25 + 4);
      if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0x14uLL)
      {
        qmemcpy(v26, " defaulted_is_deleted", 21);
        *((_QWORD *)v25 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(v25, " defaulted_is_deleted");
      }
    }
  }
  if (sub_22EAB82EC(a1[1]))
  {
    v28 = *(llvm::raw_ostream **)(v2 + 1088);
    v29 = (void *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 0x18uLL)
    {
      qmemcpy(v29, " implicit_has_const_param", 25);
      result = *(double *)"_has_const_param";
      *((_QWORD *)v28 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(v28, " implicit_has_const_param");
    }
  }
  return result;
}

uint64_t sub_22F107120(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7238;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F10715C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7238;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F1071A8(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7238;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F10721C(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7238;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F107268(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F10727C(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F1072AC(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24.n128_f64[0] = sub_22F106CFC((uint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v25) = *((_DWORD *)v4 + 6);
  while (v23 < v25)
  {
    v26 = v4[2] + 32 * v25;
    v33 = 1;
    v27 = *(_QWORD *)(v26 - 8);
    if (!v27)
    {
      sub_22E4A06C4();
      sub_22F10751C(v32);
      return;
    }
    (*(void (**)(uint64_t, char *, __n128))(*(_QWORD *)v27 + 48))(v27, &v33, v24);
    v25 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v25;
    v28 = v4[2] + 32 * v25;
    v29 = *(_QWORD **)(v28 + 24);
    if (v29 == (_QWORD *)v28)
    {
      v29 = (_QWORD *)(v4[2] + 32 * v25);
      v30 = 4;
      goto LABEL_40;
    }
    if (v29)
    {
      v30 = 5;
LABEL_40:
      (*(void (**)(void))(*v29 + 8 * v30))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v31 = v4[134];
  else
    v31 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v31 - 2, 0);
}

llvm::raw_ostream *sub_22F10751C(uint64_t *a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  void *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  _QWORD *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  void *v18;
  llvm::raw_ostream *v19;
  void *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  void *v23;
  uint64_t v24;
  llvm::raw_ostream *result;
  uint64_t v26;
  void *v27;

  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xEuLL)
  {
    qmemcpy(v6, "MoveConstructor", 15);
    *((_QWORD *)v5 + 4) += 15;
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::raw_ostream::write(v5, "MoveConstructor");
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  v7 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v7 + 128) + 8) & 0x400) != 0 || sub_22EABDAF8(v7))
  {
    v8 = *(llvm::raw_ostream **)(v2 + 1088);
    v9 = (_DWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 6uLL)
    {
      *(_DWORD *)((char *)v9 + 3) = 1937011561;
      *v9 = 1769497888;
      *((_QWORD *)v8 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v8, " exists");
    }
  }
  if (sub_22EFD0F40(a1[1]))
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1088);
    v11 = (_DWORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 6uLL)
    {
      *(_DWORD *)((char *)v11 + 3) = 1701605485;
      *v11 = 1835627296;
      *((_QWORD *)v10 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v10, " simple");
    }
  }
  if (sub_22EACBAD4(a1[1]))
  {
    v12 = *(llvm::raw_ostream **)(v2 + 1088);
    v13 = (_QWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 7uLL)
    {
      *v13 = 0x6C61697669727420;
      *((_QWORD *)v12 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v12, " trivial");
    }
  }
  if (sub_22EB1C044(a1[1]))
  {
    v14 = *(llvm::raw_ostream **)(v2 + 1088);
    v15 = *((_QWORD *)v14 + 4);
    if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 0xB)
    {
      *(_DWORD *)(v15 + 8) = 1818323318;
      *(_QWORD *)v15 = *(_QWORD *)" non_trivial";
      *((_QWORD *)v14 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v14, " non_trivial");
    }
  }
  v16 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 104) + 96), *(_QWORD *)(v16 + 104));
  if ((**(_QWORD **)(v16 + 128) & 8) != 0)
  {
    v17 = *(llvm::raw_ostream **)(v2 + 1088);
    v18 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0xDuLL)
    {
      qmemcpy(v18, " user_declared", 14);
      *((_QWORD *)v17 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v17, " user_declared");
    }
  }
  if (sub_22EABDAF8(a1[1]))
  {
    v19 = *(llvm::raw_ostream **)(v2 + 1088);
    v20 = (void *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0xEuLL)
    {
      qmemcpy(v20, " needs_implicit", 15);
      *((_QWORD *)v19 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v19, " needs_implicit");
    }
  }
  v21 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
  if ((**(_QWORD **)(v21 + 128) & 0x40000000) != 0)
  {
    v22 = *(llvm::raw_ostream **)(v2 + 1088);
    v23 = (void *)*((_QWORD *)v22 + 4);
    if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x19uLL)
    {
      qmemcpy(v23, " needs_overload_resolution", 26);
      *((_QWORD *)v22 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v22, " needs_overload_resolution");
    }
  }
  v24 = a1[1];
  result = (llvm::raw_ostream *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v24 + 104) + 96), *(_QWORD *)(v24 + 104));
  if ((**(_QWORD **)(v24 + 128) & 0x40000000) == 0)
  {
    v26 = a1[1];
    result = (llvm::raw_ostream *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v26 + 104) + 96), *(_QWORD *)(v26 + 104));
    if ((**(_QWORD **)(v26 + 128) & 0x800000000) != 0)
    {
      result = *(llvm::raw_ostream **)(v2 + 1088);
      v27 = (void *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v27 > 0x14uLL)
      {
        qmemcpy(v27, " defaulted_is_deleted", 21);
        *((_QWORD *)result + 4) += 21;
      }
      else
      {
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " defaulted_is_deleted");
      }
    }
  }
  return result;
}

uint64_t sub_22F107910(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7280;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F10794C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7280;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F107998(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7280;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F107A0C(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7280;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F107A58(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F107A6C(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F107A9C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F10751C((uint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v32 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22F107D0C(v31);
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v32);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

llvm::raw_ostream *sub_22F107D0C(uint64_t *a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  void *v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _OWORD *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  void *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void *v21;
  llvm::raw_ostream *v22;
  void *v23;
  uint64_t v24;
  llvm::raw_ostream *result;
  void *v26;

  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 <= 0xDuLL)
  {
    llvm::raw_ostream::write(v5, "CopyAssignment");
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  qmemcpy(v6, "CopyAssignment", 14);
  *((_QWORD *)v5 + 4) += 14;
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  if (sub_22EFD0FC4(a1[1]))
  {
    v7 = *(llvm::raw_ostream **)(v2 + 1088);
    v8 = (_DWORD *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 1701605485;
      *v8 = 1835627296;
      *((_QWORD *)v7 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v7, " simple");
    }
  }
  v9 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
  if ((**(_QWORD **)(v9 + 128) & 0x40000000000) != 0)
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1088);
    v11 = (_QWORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x6C61697669727420;
      *((_QWORD *)v10 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v10, " trivial");
    }
  }
  if (sub_22E69200C(a1[1]))
  {
    v12 = *(llvm::raw_ostream **)(v2 + 1088);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 0xB)
    {
      *(_DWORD *)(v13 + 8) = 1818323318;
      *(_QWORD *)v13 = *(_QWORD *)" non_trivial";
      *((_QWORD *)v12 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v12, " non_trivial");
    }
  }
  if (sub_22EFD0BB4(a1[1]))
  {
    v14 = *(llvm::raw_ostream **)(v2 + 1088);
    v15 = (_OWORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0xFuLL)
    {
      *v15 = *(_OWORD *)" has_const_param";
      *((_QWORD *)v14 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v14, " has_const_param");
    }
  }
  v16 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 104) + 96), *(_QWORD *)(v16 + 104));
  if ((**(_QWORD **)(v16 + 128) & 0x10) != 0)
  {
    v17 = *(llvm::raw_ostream **)(v2 + 1088);
    v18 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0xDuLL)
    {
      qmemcpy(v18, " user_declared", 14);
      *((_QWORD *)v17 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v17, " user_declared");
    }
  }
  v19 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v19 + 128) + 8) & 0x800) == 0)
  {
    v20 = *(llvm::raw_ostream **)(v2 + 1088);
    v21 = (void *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 0xEuLL)
    {
      qmemcpy(v21, " needs_implicit", 15);
      *((_QWORD *)v20 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v20, " needs_implicit");
    }
  }
  if (sub_22EABE304(a1[1]))
  {
    v22 = *(llvm::raw_ostream **)(v2 + 1088);
    v23 = (void *)*((_QWORD *)v22 + 4);
    if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x19uLL)
    {
      qmemcpy(v23, " needs_overload_resolution", 26);
      *((_QWORD *)v22 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v22, " needs_overload_resolution");
    }
  }
  v24 = a1[1];
  result = (llvm::raw_ostream *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v24 + 104) + 96), *(_QWORD *)(v24 + 104));
  if (((*(unsigned __int16 *)(*(_QWORD *)(v24 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(v24 + 128) + 10) << 16)) & 0x10000) != 0)
  {
    result = *(llvm::raw_ostream **)(v2 + 1088);
    v26 = (void *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v26 > 0x18uLL)
    {
      qmemcpy(v26, " implicit_has_const_param", 25);
      *((_QWORD *)result + 4) += 25;
    }
    else
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " implicit_has_const_param");
    }
  }
  return result;
}

uint64_t sub_22F1080D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC72C8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F108114(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC72C8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F108160(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC72C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F1081D4(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC72C8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F108220(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F108234(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F108264(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  char v32;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F107D0C((uint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v32 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22F1084D4(v31);
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v32);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

llvm::raw_ostream *sub_22F1084D4(unint64_t *a1)
{
  unint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  void *v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  _QWORD *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  void *v18;
  llvm::raw_ostream *v19;
  void *v20;
  unint64_t v21;
  llvm::raw_ostream *result;
  void *v23;

  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xDuLL)
  {
    qmemcpy(v6, "MoveAssignment", 14);
    *((_QWORD *)v5 + 4) += 14;
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::raw_ostream::write(v5, "MoveAssignment");
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  v7 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v7 + 128) + 8) & 0x1000) != 0 || sub_22EABE940(v7))
  {
    v8 = *(llvm::raw_ostream **)(v2 + 1088);
    v9 = (_DWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 6uLL)
    {
      *(_DWORD *)((char *)v9 + 3) = 1937011561;
      *v9 = 1769497888;
      *((_QWORD *)v8 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v8, " exists");
    }
  }
  if (sub_22EFD101C(a1[1]))
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1088);
    v11 = (_DWORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 6uLL)
    {
      *(_DWORD *)((char *)v11 + 3) = 1701605485;
      *v11 = 1835627296;
      *((_QWORD *)v10 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v10, " simple");
    }
  }
  if (sub_22EACA488(a1[1]))
  {
    v12 = *(llvm::raw_ostream **)(v2 + 1088);
    v13 = (_QWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 7uLL)
    {
      *v13 = 0x6C61697669727420;
      *((_QWORD *)v12 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v12, " trivial");
    }
  }
  if (sub_22EAE8D9C(a1[1]))
  {
    v14 = *(llvm::raw_ostream **)(v2 + 1088);
    v15 = *((_QWORD *)v14 + 4);
    if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 0xB)
    {
      *(_DWORD *)(v15 + 8) = 1818323318;
      *(_QWORD *)v15 = *(_QWORD *)" non_trivial";
      *((_QWORD *)v14 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v14, " non_trivial");
    }
  }
  v16 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 104) + 96), *(_QWORD *)(v16 + 104));
  if ((**(_QWORD **)(v16 + 128) & 0x20) != 0)
  {
    v17 = *(llvm::raw_ostream **)(v2 + 1088);
    v18 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0xDuLL)
    {
      qmemcpy(v18, " user_declared", 14);
      *((_QWORD *)v17 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v17, " user_declared");
    }
  }
  if (sub_22EABE940(a1[1]))
  {
    v19 = *(llvm::raw_ostream **)(v2 + 1088);
    v20 = (void *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0xEuLL)
    {
      qmemcpy(v20, " needs_implicit", 15);
      *((_QWORD *)v19 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v19, " needs_implicit");
    }
  }
  v21 = a1[1];
  result = (llvm::raw_ostream *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
  if ((**(_QWORD **)(v21 + 128) & 0x100000000) != 0)
  {
    result = *(llvm::raw_ostream **)(v2 + 1088);
    v23 = (void *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v23 > 0x19uLL)
    {
      qmemcpy(v23, " needs_overload_resolution", 26);
      *((_QWORD *)result + 4) += 26;
    }
    else
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " needs_overload_resolution");
    }
  }
  return result;
}

uint64_t sub_22F108844(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7310;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F108880(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7310;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F1088CC(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7310;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F108940(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7310;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F10898C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F1089A0(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F1089D0(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F1084D4((unint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v32 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22F108C40(v31);
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v32);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

llvm::raw_ostream *sub_22F108C40(uint64_t *a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  void *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  void *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  void *v28;
  uint64_t v29;
  llvm::raw_ostream *result;
  uint64_t v31;
  void *v32;

  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1088);
  v4 = *(unsigned __int8 *)(*a1 + 1096);
  v5 = v3;
  if (v4)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, 2, 1, 0);
    v5 = *(llvm::raw_ostream **)(v2 + 1088);
  }
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) <= 9)
  {
    llvm::raw_ostream::write(v5, "Destructor");
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_WORD *)(v6 + 8) = 29295;
  *(_QWORD *)v6 = *(_QWORD *)"Destructor";
  *((_QWORD *)v5 + 4) += 10;
  if (v4)
LABEL_5:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 32))(v3);
LABEL_6:
  if (sub_22EFD10A0(a1[1]))
  {
    v7 = *(llvm::raw_ostream **)(v2 + 1088);
    v8 = (_DWORD *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 1701605485;
      *v8 = 1835627296;
      *((_QWORD *)v7 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v7, " simple");
    }
  }
  v9 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
  if ((**(_QWORD **)(v9 + 128) & 0x8000000000000000) != 0)
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1088);
    v11 = *((_QWORD *)v10 + 4);
    if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 0xA)
    {
      *(_DWORD *)(v11 + 7) = 1953390966;
      *(_QWORD *)v11 = *(_QWORD *)" irrelevant";
      *((_QWORD *)v10 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v10, " irrelevant");
    }
  }
  v12 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 104) + 96), *(_QWORD *)(v12 + 104));
  if ((**(_QWORD **)(v12 + 128) & 0x100000000000) != 0)
  {
    v13 = *(llvm::raw_ostream **)(v2 + 1088);
    v14 = (_QWORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 7uLL)
    {
      *v14 = 0x6C61697669727420;
      *((_QWORD *)v13 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v13, " trivial");
    }
  }
  v15 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
  if ((**(_QWORD **)(v15 + 128) & 0x100000000000) == 0)
  {
    v16 = *(llvm::raw_ostream **)(v2 + 1088);
    v17 = *((_QWORD *)v16 + 4);
    if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xB)
    {
      *(_DWORD *)(v17 + 8) = 1818323318;
      *(_QWORD *)v17 = *(_QWORD *)" non_trivial";
      *((_QWORD *)v16 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v16, " non_trivial");
    }
  }
  v18 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
  if ((**(_QWORD **)(v18 + 128) & 0x40) != 0)
  {
    v19 = *(llvm::raw_ostream **)(v2 + 1088);
    v20 = (void *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0xDuLL)
    {
      qmemcpy(v20, " user_declared", 14);
      *((_QWORD *)v19 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v19, " user_declared");
    }
  }
  if (sub_22F3B1A64(a1[1]))
  {
    v21 = *(llvm::raw_ostream **)(v2 + 1088);
    v22 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 9)
    {
      *(_WORD *)(v22 + 8) = 29296;
      *(_QWORD *)v22 = *(_QWORD *)" constexpr";
      *((_QWORD *)v21 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v21, " constexpr");
    }
  }
  v23 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 104) + 96), *(_QWORD *)(v23 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v23 + 128) + 8) & 0x2000) == 0)
  {
    v24 = *(llvm::raw_ostream **)(v2 + 1088);
    v25 = (void *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 0xEuLL)
    {
      qmemcpy(v25, " needs_implicit", 15);
      *((_QWORD *)v24 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v24, " needs_implicit");
    }
  }
  v26 = a1[1];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v26 + 104) + 96), *(_QWORD *)(v26 + 104));
  if ((**(_QWORD **)(v26 + 128) & 0x200000000) != 0)
  {
    v27 = *(llvm::raw_ostream **)(v2 + 1088);
    v28 = (void *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 0x19uLL)
    {
      qmemcpy(v28, " needs_overload_resolution", 26);
      *((_QWORD *)v27 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v27, " needs_overload_resolution");
    }
  }
  v29 = a1[1];
  result = (llvm::raw_ostream *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v29 + 104) + 96), *(_QWORD *)(v29 + 104));
  if ((**(_QWORD **)(v29 + 128) & 0x200000000) == 0)
  {
    v31 = a1[1];
    result = (llvm::raw_ostream *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v31 + 104) + 96), *(_QWORD *)(v31 + 104));
    if ((**(_QWORD **)(v31 + 128) & 0x4000000000) != 0)
    {
      result = *(llvm::raw_ostream **)(v2 + 1088);
      v32 = (void *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v32 > 0x14uLL)
      {
        qmemcpy(v32, " defaulted_is_deleted", 21);
        *((_QWORD *)result + 4) += 21;
      }
      else
      {
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " defaulted_is_deleted");
      }
    }
  }
  return result;
}

uint64_t sub_22F1090B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7358;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F1090F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7358;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F10913C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7358;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F1091B0(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7358;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F1091FC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F109210(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F109240(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F108C40((uint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v31 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22F1094B0();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v31);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

uint64_t sub_22F1094B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC73A0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F1094EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC73A0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F109538(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC73A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F1095AC(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC73A0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F1095F8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F10960C(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F10963C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22F105358((unint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v31 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22F1098AC();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v31);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

uint64_t sub_22F1098AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC73E8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_22F1098E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC73E8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F109934(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24FAC73E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v3 = v2 + 48;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  }
  return v2;
}

char *sub_22F1099B0(char *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_24FAC73E8;
  v2 = *(_OWORD *)(result + 8);
  v3 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)result + 5);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = (_BYTE *)(a2 + 48);
  if (result[71] < 0)
    return (char *)sub_22E3BB2B4(v4, *((void **)result + 6), *((_QWORD *)result + 7));
  v5 = *((_OWORD *)result + 3);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)result + 8);
  *(_OWORD *)v4 = v5;
  return result;
}

void sub_22F109A04(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_22F109A18(void **__p)
{
  if (*((char *)__p + 71) < 0)
    operator delete(__p[6]);
  operator delete(__p);
}

void sub_22F109A48(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  llvm::raw_ostream *v26;
  _QWORD *v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 71);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 56);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 48);
    else
      v19 = *(const char **)(a1 + 48);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(unsigned __int8 *)(a1 + 28);
  if ((v25 & 1) != 0)
  {
    v26 = *(llvm::raw_ostream **)(v24 + 1088);
    v27 = (_QWORD *)*((_QWORD *)v26 + 4);
    if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 7uLL)
    {
      *v27 = 0x206C617574726976;
      *((_QWORD *)v26 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v26, "virtual ");
    }
    v25 = *(unsigned __int8 *)(a1 + 28);
  }
  v28 = (v25 >> 2) & 3;
  v29 = v25 & 2;
  if (v28 == 3)
    v30 = v29;
  else
    v30 = v28;
  sub_22F4031D0(v24, v30);
  v31 = *(_QWORD *)(**(_QWORD **)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v31 + 8) & 0xF) != 0)
    v31 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a1 + 32));
  sub_22F40287C(v24, v31 & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(a1 + 24))
  {
    v32 = *(llvm::raw_ostream **)(v24 + 1088);
    v33 = *((_QWORD *)v32 + 4);
    if ((unint64_t)(*((_QWORD *)v32 + 3) - v33) > 2)
    {
      *(_BYTE *)(v33 + 2) = 46;
      *(_WORD *)v33 = 11822;
      *((_QWORD *)v32 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v32, "...");
    }
  }
  LODWORD(v34) = *((_DWORD *)v4 + 6);
  if (v23 < v34)
  {
    while (1)
    {
      v35 = v4[2] + 32 * v34;
      v41 = 1;
      v36 = *(_QWORD *)(v35 - 8);
      if (!v36)
      {
        sub_22E4A06C4();
        sub_22F109DA8();
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v36 + 48))(v36, &v41);
      v34 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v34;
      v37 = v4[2] + 32 * v34;
      v38 = *(_QWORD **)(v37 + 24);
      if (v38 == (_QWORD *)v37)
        break;
      if (v38)
      {
        v39 = 5;
LABEL_50:
        (*(void (**)(void))(*v38 + 8 * v39))();
        LODWORD(v34) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v34)
        goto LABEL_52;
    }
    v38 = (_QWORD *)(v4[2] + 32 * v34);
    v39 = 4;
    goto LABEL_50;
  }
LABEL_52:
  if (*((char *)v4 + 1087) < 0)
    v40 = v4[134];
  else
    v40 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v40 - 2, 0);
}

uint64_t sub_22F109DA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7430;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F109DE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7430;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F109E30(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7430;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F109EA4(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7430;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F109EF0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F109F04(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F109F34(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(llvm::raw_ostream **)(v24 + 1088);
  v26 = (_DWORD *)*((_QWORD *)v25 + 4);
  if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 6uLL)
  {
    *(_DWORD *)((char *)v26 + 3) = 544499047;
    *v26 = 1735549300;
    *((_QWORD *)v25 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v25, "target ");
  }
  sub_22F0FD464(v24, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 64));
  LODWORD(v27) = *((_DWORD *)v4 + 6);
  if (v23 < v27)
  {
    while (1)
    {
      v28 = v4[2] + 32 * v27;
      v34 = 1;
      v29 = *(_QWORD *)(v28 - 8);
      if (!v29)
      {
        sub_22E4A06C4();
        sub_22F10A208();
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v29 + 48))(v29, &v34);
      v27 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v27;
      v30 = v4[2] + 32 * v27;
      v31 = *(_QWORD **)(v30 + 24);
      if (v31 == (_QWORD *)v30)
        break;
      if (v31)
      {
        v32 = 5;
LABEL_40:
        (*(void (**)(void))(*v31 + 8 * v32))();
        LODWORD(v27) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v27)
        goto LABEL_42;
    }
    v31 = (_QWORD *)(v4[2] + 32 * v27);
    v32 = 4;
    goto LABEL_40;
  }
LABEL_42:
  if (*((char *)v4 + 1087) < 0)
    v33 = v4[134];
  else
    v33 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v33 - 2, 0);
}

uint64_t sub_22F10A208(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7478;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F10A244(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC7478;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F10A290(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC7478;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F10A304(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC7478;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F10A350(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F10A364(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F10A394(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(llvm::raw_ostream **)(v24 + 1088);
  v26 = *((_QWORD *)v25 + 4);
  if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 9)
  {
    *(_WORD *)(v26 + 8) = 8292;
    *(_QWORD *)v26 = *(_QWORD *)"nominated ";
    *((_QWORD *)v25 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v25, "nominated ");
  }
  v27 = *(_QWORD *)(a1 + 24);
  do
    v27 = *(_QWORD *)(v27 + 72);
  while (v27 && (*(_DWORD *)(v27 + 28) & 0x7E) == 0x2E);
  v28 = sub_22F0AABF8(*(_QWORD *)(v27 + 64));
  sub_22F0FD464(v24, v28);
  v29 = *(llvm::raw_ostream **)(v24 + 1088);
  v30 = (_BYTE *)*((_QWORD *)v29 + 4);
  if ((unint64_t)v30 >= *((_QWORD *)v29 + 3))
  {
    llvm::raw_ostream::write(v29);
  }
  else
  {
    *((_QWORD *)v29 + 4) = v30 + 1;
    *v30 = 32;
  }
  sub_22F0FD464(v24, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80));
  LODWORD(v31) = *((_DWORD *)v4 + 6);
  if (v23 < v31)
  {
    while (1)
    {
      v32 = v4[2] + 32 * v31;
      v38 = 1;
      v33 = *(_QWORD *)(v32 - 8);
      if (!v33)
      {
        sub_22E4A06C4();
        sub_22F10A6C4();
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v33 + 48))(v33, &v38);
      v31 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v31;
      v34 = v4[2] + 32 * v31;
      v35 = *(_QWORD **)(v34 + 24);
      if (v35 == (_QWORD *)v34)
        break;
      if (v35)
      {
        v36 = 5;
LABEL_46:
        (*(void (**)(void))(*v35 + 8 * v36))();
        LODWORD(v31) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v31)
        goto LABEL_48;
    }
    v35 = (_QWORD *)(v4[2] + 32 * v31);
    v36 = 4;
    goto LABEL_46;
  }
LABEL_48:
  if (*((char *)v4 + 1087) < 0)
    v37 = v4[134];
  else
    v37 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v37 - 2, 0);
}

uint64_t sub_22F10A6C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC74C0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22F10A700(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC74C0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F10A74C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FAC74C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22F10A7C0(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FAC74C0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22F10A80C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22F10A820(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22F10A850(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  char v43;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 55);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 32);
    else
      v19 = *(const char **)(a1 + 32);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(llvm::raw_ostream **)(v24 + 1088);
  v26 = *((_QWORD *)v25 + 4);
  if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 0xB)
  {
    *(_DWORD *)(v26 + 8) = 543450484;
    *(_QWORD *)v26 = *(_QWORD *)"constructed ";
    *((_QWORD *)v25 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v25, "constructed ");
  }
  v27 = *(_QWORD *)(a1 + 24);
  v28 = *(_QWORD *)(v27 + 88);
  if (!v28)
    v28 = *(_QWORD *)(v27 + 64);
  v29 = *(_QWORD *)(v28 + 16);
  v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
  if ((v29 & 4) != 0)
    v30 = (_QWORD *)*v30;
  if (v30)
    v31 = (uint64_t)(v30 - 8);
  else
    v31 = 0;
  sub_22F0FD464(v24, v31);
  v32 = *(llvm::raw_ostream **)(v24 + 1088);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
  {
    llvm::raw_ostream::write(v32);
  }
  else
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 32;
  }
  sub_22F0FD464(v24, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 88));
  LODWORD(v34) = *((_DWORD *)v4 + 6);
  if (v23 < v34)
  {
    while (1)
    {
      v35 = v4[2] + 32 * v34;
      v43 = 1;
      v36 = *(_QWORD *)(v35 - 8);
      if (!v36)
      {
        sub_22E4A06C4();
        sub_22F10AB88(v41, v42);
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v36 + 48))(v36, &v43);
      v34 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v34;
      v37 = v4[2] + 32 * v34;
      v38 = *(_QWORD **)(v37 + 24);
      if (v38 == (_QWORD *)v37)
        break;
      if (v38)
      {
        v39 = 5;
LABEL_50:
        (*(void (**)(void))(*v38 + 8 * v39))();
        LODWORD(v34) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v34)
        goto LABEL_52;
    }
    v38 = (_QWORD *)(v4[2] + 32 * v34);
    v39 = 4;
    goto LABEL_50;
  }
LABEL_52:
  if (*((char *)v4 + 1087) < 0)
    v40 = v4[134];
  else
    v40 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v40 - 2, 0);
}

uint64_t sub_22F10AB88(unsigned int *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v4;
  _BOOL4 v5;

  v2 = *a1;
  if (*(_QWORD *)a1 == a2
    || (a2 & ~(_BYTE)v2 & 7) != 0
    || ((v2 >> 9) & 3) < ((a2 >> 9) & 3))
  {
    return 0;
  }
  v4 = v2 ^ a2;
  if (((v2 ^ a2) & 0x30) == 0 || (result = 0, (a2 & 0x30) == 0) && (v2 & 0x30) != 0)
  {
    if (v4 < 0x800 || (result = 0, a2 <= 0x7FF) && v2 >= 0x800)
    {
      v5 = (v2 & 0x1C0) != 0 && (a2 & 0x1C0) == 0;
      return (v4 & 0x1C0) == 0 || v5;
    }
  }
  return result;
}

unint64_t sub_22F10AC24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v1 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 == 39 || (v3 & 0xFE) == 0x28)
  {
    v7 = sub_22F10ACF8(v1);
    return sub_22F10AC24(&v7);
  }
  if (v3 == 44 || v3 == 45)
  {
    result = sub_22F114198(*(_QWORD *)(v2 + 24));
    if (!result)
      return result;
    goto LABEL_9;
  }
  v6 = *(unsigned __int8 *)(v1 + 16);
  if (v6 != 50)
  {
    if ((v3 & 0xFEu) - 2 > 3)
      return 0;
    if ((v6 & 0xFEu) - 6 <= 0xFFFFFFFB)
      v1 = sub_22F10CF48(v1);
    v7 = *(_QWORD *)(v1 + 32);
    return sub_22F10AC24(&v7);
  }
  result = *(_QWORD *)(v1 + 24);
  if (result)
  {
LABEL_9:
    v5 = *(_QWORD *)(result + 40);
    if ((v5 & 7) != 0)
      return 0;
    else
      return v5 & 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_22F10ACF8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 16);
  if (a1 && v2 == 39)
    goto LABEL_14;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v3 == 39)
  {
    result = sub_22F10CF48(a1);
    if (result)
      return *(_QWORD *)(result + 32);
    if (v1 && v2 == 32)
      goto LABEL_14;
  }
  else
  {
    if (a1 && v2 == 32)
      goto LABEL_14;
    if (v3 == 32)
    {
      result = sub_22F10CF48(a1);
      if (result)
        return *(_QWORD *)(result + 32);
    }
  }
  if (v1 && v2 == 10)
    goto LABEL_14;
  if (v3 == 10)
  {
    result = sub_22F10CF48(v1);
    if (result)
      return *(_QWORD *)(result + 32);
  }
  if (v1 && (v2 & 0xFE) == 0x28)
    goto LABEL_24;
  if ((v3 & 0xFE) == 0x28)
  {
    v5 = sub_22F10CF48(v1);
    if (v5)
    {
      v2 = *(_DWORD *)(v5 + 16);
      v1 = v5;
LABEL_24:
      if ((v2 & 0x100000) != 0)
      {
        do
        {
          while (1)
          {
            v1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v1)
              break;
            v6 = *(_DWORD *)(v1 + 16);
            if ((v6 & 0xFE) != 0x28)
              break;
            if ((v6 & 0x100000) == 0)
              return *(_QWORD *)(v1 + 32);
          }
          v1 = sub_22F10CF48(v1);
        }
        while ((*(_DWORD *)(v1 + 16) & 0x100000) != 0);
      }
      return *(_QWORD *)(v1 + 32);
    }
  }
  if (v1 && v2 == 31)
  {
LABEL_14:
    result = v1;
    return *(_QWORD *)(result + 32);
  }
  if (v3 != 31)
  {
    if (!v1 || v2 != 1)
    {
      if (v3 != 1)
        return 0;
      result = sub_22F10CF48(v1);
      v1 = result;
      if (!result)
        return result;
    }
LABEL_42:
    v7 = *(_QWORD *)(v1 + 40);
    sub_22F114F34(&v7);
    return *(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 32);
  }
  result = sub_22F10CF48(v1);
  if (result)
    return *(_QWORD *)(result + 32);
  if (v1 && v2 == 1)
    goto LABEL_42;
  return result;
}

uint64_t sub_22F10AEAC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  _QWORD *v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 16);
  if (a1 && *(_DWORD *)(a1 + 16) == 39
    || (v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16), v3 == 39)
    && (a1 = sub_22F10CF48(a1)) != 0)
  {
    v4 = (_QWORD *)(a1 + 32);
LABEL_19:
    result = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v7 && *(_BYTE *)(v7 + 16) == 45)
    {
      result = sub_22F114198(*(_QWORD *)(v7 + 24));
      if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
        return 0;
    }
    return result;
  }
  if (v1 && (v2 & 0xFE) == 0x28)
  {
    if ((v2 & 0x100000) != 0)
    {
      do
      {
LABEL_9:
        while (1)
        {
          v1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v1)
            break;
          v5 = *(_DWORD *)(v1 + 16);
          if ((v5 & 0xFE) != 0x28)
            break;
          if ((v5 & 0x100000) == 0)
            goto LABEL_18;
        }
        v1 = sub_22F10CF48(v1);
      }
      while ((*(_DWORD *)(v1 + 16) & 0x100000) != 0);
    }
    goto LABEL_18;
  }
  if ((v3 & 0xFE) != 0x28)
    return 0;
  result = sub_22F10CF48(v1);
  if (result)
  {
    v1 = result;
    if ((*(_DWORD *)(result + 16) & 0x100000) != 0)
      goto LABEL_9;
LABEL_18:
    v4 = (_QWORD *)(v1 + 32);
    goto LABEL_19;
  }
  return result;
}

BOOL sub_22F10AFE4(unint64_t a1, uint64_t a2)
{
  unint64_t i;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;

  for (i = a1; (i & 1) == 0; i = *(_QWORD *)(v5 + 32))
  {
    v4 = i & 0xFFFFFFFFFFFFFFF0;
    if ((*(_BYTE *)((i & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
      break;
    v5 = sub_22EF5C728(a2, i);
    if (!v5)
    {
      v7 = *(_QWORD *)(v4 + 8);
      if ((v7 & 8) == 0)
        return 0;
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
      return v8 == 6144 || v8 == 26624;
    }
  }
  return 1;
}

uint64_t sub_22F10B060(uint64_t result, int a2, uint64_t a3, unint64_t a4, char a5, char a6, _DWORD *a7)
{
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;

  if (a7)
    v7 = (*a7 >> 13) & 0x13 | (4 * (((*a7 >> 14) & 4 | (*a7 >> 13) & 0xC) != 0));
  else
    v7 = 0;
  v8 = v7 | (*(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) >> 8);
  if (a2 == 3)
    v9 = 6;
  else
    v9 = 0;
  v10 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v10 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v10;
  v11 = *(_DWORD *)(result + 16) & 0xFE000000 | a2 | ((v9 | (8 * (a2 == 5)) | v8 & 0x1F) << 8);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 16) = v11 | ((a6 & 7) << 19) & 0xFE3FFFFF | ((a5 & 7) << 22);
  return result;
}

uint64_t sub_22F10B100(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  unint64_t v5;
  uint8x8_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v20;
  unsigned int v21;
  int8x8_t v22;
  unsigned int v23;
  char v24;
  int8x8_t v25;
  unsigned int v26;
  int8x8_t v27;
  unsigned int v28;
  char v29;

  sub_22EF5CCD0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v27);
  v5 = (unint64_t)v27;
  v6 = (uint8x8_t)vcnt_s8(v27);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] == 1)
  {
    v7 = *((_DWORD *)a3 + 2);
    if (v7 > 0x40)
      v8 = llvm::APInt::countLeadingZerosSlowCase(a3);
    else
      v8 = v7 + __clz(*(_QWORD *)a3) - 64;
    return v7 - v8 - __clz(v5) + 63;
  }
  else
  {
    v9 = *((_DWORD *)a3 + 2);
    if (!HIDWORD(*(_QWORD *)&v27) && (v9 <= 0x40 ? (v10 = HIDWORD(*(_QWORD *)a3) == 0) : (v10 = 0), v10))
    {
      return 64 - __clz(*(_QWORD *)a3 * *(_QWORD *)&v27);
    }
    else
    {
      v26 = *((_DWORD *)a3 + 2);
      if (v9 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v25, a3);
        v9 = v26;
        v11 = v25;
      }
      else
      {
        v11 = *(int8x8_t *)a3;
        v25 = *(int8x8_t *)a3;
      }
      v28 = v9;
      v27 = v11;
      v26 = 0;
      v29 = 1;
      v13 = sub_22EF67C8C(a1);
      sub_22EF5CDF0(a1, *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
      sub_22E46361C((llvm::APInt *)&v27, (uint64_t)&v22);
      if (v28 >= 0x41 && *(_QWORD *)&v27)
        MEMORY[0x2348A0E84](*(_QWORD *)&v27, 0x1000C8000313F17);
      v27 = v22;
      v14 = v23;
      v28 = v23;
      v29 = v24;
      v21 = v23;
      if (v23 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v20);
        v14 = v21;
        v16 = v20;
      }
      else
      {
        if (v23)
          v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
        else
          v15 = 0;
        v16 = v15 & v5;
        v20 = v16;
      }
      v23 = v14;
      v22 = (int8x8_t)v16;
      v21 = 0;
      v24 = 1;
      llvm::APInt::operator*=();
      v17 = v23;
      if (v23 > 0x40)
      {
        v18 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v22);
        if (v22)
          MEMORY[0x2348A0E84](*(_QWORD *)&v22, 0x1000C8000313F17);
      }
      else
      {
        v18 = v23 + __clz(*(_QWORD *)&v22) - 64;
      }
      v12 = v17 - v18;
      if (v28 >= 0x41 && *(_QWORD *)&v27)
        MEMORY[0x2348A0E84](*(_QWORD *)&v27, 0x1000C8000313F17);
    }
  }
  return v12;
}

void sub_22F10B35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, int a7)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD v33[2];
  char v34;
  uint64_t v35;

  v12 = *(_DWORD *)(a1 + 8);
  if (v12 >= *(_DWORD *)(a1 + 12))
  {
    v27 = a4;
    v29 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a4 = v27;
    a3 = v29;
    v12 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = a3;
  v13 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  if (v14 >= v13)
  {
    v28 = a4;
    v31 = HIDWORD(a3);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a4 = v28;
    HIDWORD(a3) = v31;
    v14 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v14) = HIDWORD(a3);
  v15 = *(_DWORD *)(a1 + 12);
  v16 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v16;
  if (*(_DWORD *)(a4 + 8) >= 0x41u)
    v17 = *(uint64_t **)a4;
  else
    v17 = (uint64_t *)a4;
  v18 = *v17;
  if (v16 >= v15)
  {
    v30 = v18;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = v30;
    v16 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v16) = v18;
  v19 = *(_DWORD *)(a1 + 12);
  v20 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v20;
  if (v20 >= v19)
  {
    v32 = HIDWORD(v18);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v18) = v32;
    v20 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v20) = HIDWORD(v18);
  v21 = *(_DWORD *)(a1 + 12);
  v22 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v22;
  if (v22 >= v21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v22) = a6;
  v23 = *(_DWORD *)(a1 + 12);
  v24 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v24;
  if (v24 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v24) = a7;
  v25 = *(_DWORD *)(a1 + 12);
  v26 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v26;
  if (v26 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v26) = a5 != 0;
  ++*(_DWORD *)(a1 + 8);
  if (a5)
  {
    v34 = 1;
    v33[0] = &off_24FAC6E70;
    v33[1] = a1;
    v35 = a2;
    sub_22F0E9FEC(v33, a5);
  }
}

void sub_22F10B5A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 *a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    v26 = a2;
    v30 = a1;
    v13 = a3;
    v15 = a4;
    v18 = a5;
    v22 = a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v13;
    a4 = v15;
    a5 = v18;
    a2 = v26;
    a1 = v30;
    a6 = v22;
    v6 = *(_DWORD *)(v30 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = a3;
  v7 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  if (v8 >= v7)
  {
    v27 = a2;
    v31 = a1;
    v14 = HIDWORD(a3);
    v16 = a4;
    v19 = a5;
    v23 = a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a3) = v14;
    a4 = v16;
    a5 = v19;
    a2 = v27;
    a1 = v31;
    a6 = v23;
    v8 = *(_DWORD *)(v31 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = HIDWORD(a3);
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  if (v10 >= v9)
  {
    v28 = a2;
    v32 = a1;
    v17 = a4;
    v20 = a5;
    v24 = a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a4 = v17;
    a5 = v20;
    a2 = v28;
    a1 = v32;
    a6 = v24;
    v10 = *(_DWORD *)(v32 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v10) = a4;
  v11 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  if (v12 >= v11)
  {
    v29 = a2;
    v33 = a1;
    v25 = a6;
    v21 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a5 = v21;
    a2 = v29;
    a1 = v33;
    a6 = v25;
    v12 = *(_DWORD *)(v33 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = a5;
  ++*(_DWORD *)(a1 + 8);
  v35 = 1;
  v34[0] = &off_24FAC6E70;
  v34[1] = a1;
  v36 = a2;
  sub_22F0E9FEC(v34, a6);
}

uint64_t sub_22F10B740(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, int a6, int a7)
{
  int v7;
  int v8;
  unint64_t v9;

  v7 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (a5)
    v8 = (*a5 >> 5) & 0x1300 | (((*a5 & 0x18000) != 0) << 10);
  else
    LOWORD(v8) = 0;
  v9 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v9 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v9;
  *(_DWORD *)(result + 16) = ((unsigned __int16)v8 | (unsigned __int16)v7) & 0x1F00 | *(_DWORD *)(result + 16) & 0xFFF80000 | 0x613;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 56) = a6;
  *(_DWORD *)(result + 60) = a7;
  return result;
}

void sub_22F10B7B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  uint64_t v19;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v13 = a3;
    v15 = a2;
    v11 = a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v13;
    a2 = v15;
    a4 = v11;
    v7 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = a3;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  if (v9 >= v8)
  {
    v14 = HIDWORD(a3);
    v16 = a2;
    v12 = a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a3) = v14;
    a2 = v16;
    a4 = v12;
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = HIDWORD(a3);
  ++*(_DWORD *)(a1 + 8);
  v18 = 1;
  v17[0] = &off_24FAC6E70;
  v17[1] = a1;
  v19 = a2;
  sub_22F0E9FEC(v17, a4);
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v10) = a5;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t sub_22F10B8E0(uint64_t a1, const void *a2, uint64_t a3, char a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  const void *v16;
  size_t v17;
  unsigned int v18;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  v10 = result;
  v11 = *(_DWORD *)(result + 28);
  if ((v11 & 0x7Fu) - 35 > 2
    || (unsigned __int16)*(_DWORD *)(result + 72) >> 13 != a5
    || (v11 & 0x7E) != 0x24 && (a4 & 1) != 0)
  {
    return 0;
  }
  v12 = *(_QWORD *)(result + 16);
  result = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 4) != 0)
    result = *(_QWORD *)result;
  if (result)
  {
    result = sub_22EFC85AC(result);
    if ((_DWORD)result)
    {
      v13 = *(_QWORD *)(v10 + 40);
      if ((v13 & 7) != 0 || (v14 = v13 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        return a3 == 0;
      }
      else
      {
        v15 = *(unsigned int **)(v14 + 16);
        v18 = *v15;
        v16 = v15 + 4;
        v17 = v18;
        if (v18 != a3)
          return 0;
        if (!v17)
          return 1;
        return memcmp(v16, a2, v17) == 0;
      }
    }
  }
  return result;
}

uint64_t sub_22F10B9CC(uint64_t a1)
{
  uint64_t result;

  result = sub_22F10C2A4(a1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
      return 0;
  }
  return result;
}

uint64_t sub_22F10B9F8(uint64_t a1)
{
  int v2;

  v2 = sub_22F10C1B4(a1);
  if (a1 && v2)
    return sub_22F10BA34(a1);
  else
    return 0;
}

uint64_t sub_22F10BA34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F408D68(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10BAB0(uint64_t a1)
{
  int v2;
  uint64_t result;

  v2 = sub_22F10C1B4(a1);
  result = 0;
  if (a1)
  {
    if (v2)
      return sub_22F10BA34(a1) ^ 1;
  }
  return result;
}

void sub_22F10BAEC(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_22F10BB28()
{
  JUMPOUT(0x22F10BB00);
}

void sub_22F10BB30(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_22F114198(*(_QWORD *)(a1 + 24));
  sub_22E496830(v1);
  JUMPOUT(0x22F10BB00);
}

unint64_t sub_22F10BB40@<X0>(unsigned int a1@<W8>)
{
  unsigned int v1;

  v1 = ((a1 >> 19) & 0x1FF) - 165;
  if (v1 >= 0x30)
    return 0;
  else
    return (0xE0000007670BuLL >> v1) & 1;
}

uint64_t sub_22F10BBF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  while (1)
  {
    v2 = sub_22E5453EC(a1);
    if (v2)
    {
      v3 = sub_22F10C2A4(v2);
      v4 = (*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v3;
      v5 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
      {
        v6 = *(_QWORD *)((sub_22F10ACF8(v5) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v6 & 8) != 0)
        {
          v7 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
          v8 = v7 == 22528 || v7 == 26624;
          if (v8 || v7 == 24576)
          {
            v9 = sub_22E5453EC(a1);
            goto LABEL_25;
          }
        }
      }
    }
    v10 = sub_22E5457C4(a1);
    if (!v10)
      break;
    v11 = sub_22F10C2A4(v10);
    v12 = (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v11;
    v13 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v12 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1)
      break;
    v14 = *(_QWORD *)((sub_22F10ACF8(v13) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v14 & 8) == 0)
      break;
    v15 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
    v16 = v15 == 22528 || v15 == 26624;
    if (!v16 && v15 != 24576)
      break;
    v9 = sub_22E5457C4(a1);
LABEL_25:
    v17 = sub_22F10C2A4(v9);
    if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 >= 3)
      v18 = 0;
    else
      v18 = v17;
    a1 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v18 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1)
    return 0;
  v19 = *(_QWORD *)((sub_22F10ACF8(a1) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v19 & 8) == 0)
    return 0;
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  v21 = (v20 & 0xFFFFF800) == 0x5800 || (v20 & 0xFFFFF800) == 26624;
  if (!v21 && (v20 & 0xFFFFF800) != 0x6000)
    return 0;
  return a1;
}

unint64_t sub_22F10BDD0(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (!a1 || (v1 = *(_DWORD *)(a1 + 16), v1 != 56))
  {
    v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v2 != 56)
      goto LABEL_8;
    a1 = sub_22F10CF48(a1);
    if (!a1)
      goto LABEL_8;
    v1 = *(_DWORD *)(a1 + 16);
  }
  if ((v1 & 0x780000) == 0x80000)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 16);
LABEL_8:
  if (v2 == 11 && ((v2 >> 19) & 0x1FF) - 166 <= 0x2E)
    return (0x70000003B385uLL >> ((v2 >> 19) + 90)) & 1;
  return 0;
}

uint64_t sub_22F10BE84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  int v6;

  v3 = a1;
  if ((sub_22F10C8DC(a1) & 1) != 0)
    return 1;
  if (v3 && *(_BYTE *)(v3 + 16) == 56
    || (v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16), v5 == 56)
    && (v3 = sub_22F10CF48(v3)) != 0)
  {
    v6 = *(_DWORD *)(v3 + 20);
    if (v6 != 4 && v6 != 2)
      return 0;
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16);
  }
  if (v5 == 11 && ((v5 >> 19) & 0x1FF) - 168 <= 0x2B)
  {
    if (((1 << ((v5 >> 19) + 88)) & 0xC0000006060) != 0)
      return 1;
    if (((1 << ((v5 >> 19) + 88)) & 0xC01) != 0)
      return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 2000) + 125) >> 6) & 1;
  }
  return 0;
}

uint64_t sub_22F10BF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int v20;

  v1 = sub_22F10C2A4(a1);
  if (!v1)
    goto LABEL_21;
  v2 = v1;
  if ((*(_DWORD *)(v1 + 28) & 0x7E) != 0x24 || (*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 > 2)
    goto LABEL_21;
  v4 = *(_QWORD *)(v1 + 152);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v6 = *(_QWORD *)(*v5 + 152);
      v5 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v6 & 4) != 0 && v5);
  }
  v7 = v5[2];
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  if (!sub_22EFC8688((unint64_t)v8))
    goto LABEL_21;
  v9 = 0;
  v10 = 0;
  v11 = v5[5];
  if ((v11 & 7) != 0)
    v12 = 0;
  else
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 16);
  if (*(_DWORD *)v13 == 10)
  {
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(unsigned __int16 *)(v13 + 24);
    if (v14 != 0x6576656C5F78616DLL || v15 != 29548)
    {
LABEL_21:
      v9 = 0;
      v10 = 0;
      return v10 | v9;
    }
    sub_22E466FDC(**(_QWORD **)(v2 + 168), (uint64_t)&v19);
    if (v20 >= 0x41)
      v18 = v19;
    else
      v18 = (unsigned int **)&v19;
    v9 = *(unsigned int *)v18;
    if (v20 >= 0x41 && v19)
      MEMORY[0x2348A0E84]();
    v10 = 0x100000000;
  }
  return v10 | v9;
}

uint64_t sub_22F10C0BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F40900C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10C138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F4090B8(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10C1B4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 152);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(*v4 + 152);
      v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v5 & 4) != 0 && v4);
  }
  v6 = v4[2];
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  result = sub_22EFC8688((unint64_t)v7);
  if ((_DWORD)result)
  {
    v8 = v4[5];
    if ((v8 & 7) != 0)
      v9 = 0;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v9 + 16);
    if (*(_DWORD *)v10 == 23)
    {
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(_QWORD *)(v10 + 31);
      return v11 == 0x72656C656363615FLL && v12 == 0x74735F6E6F697461 && v13 == 0x6572757463757274;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F10C2A4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;

  if (a1 && (*(_DWORD *)(a1 + 16) & 0xFE) == 0x2C
    || (v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), v2 = *(_DWORD *)(v1 + 16), (v2 & 0xFE) == 0x2C)
    && (a1 = sub_22F10CF48(a1)) != 0)
  {
    v3 = (uint64_t *)(a1 + 24);
    return sub_22F114198(*v3);
  }
  if (v2 == 27)
  {
    v3 = (uint64_t *)(v1 + 24);
    return sub_22F114198(*v3);
  }
  return 0;
}

uint64_t sub_22F10C320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F408E0C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10C39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F408EBC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10C418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F408F60(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10C494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = **(_QWORD **)(v2 + 168);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return 0;
  v5 = 24 * v4 - 24;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8);
  do
  {
    v7 = *v6;
    v6 += 3;
    result = sub_22F409168(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v9 = v5;
    v5 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22F10C510(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 152);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(*v4 + 152);
      v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v5 & 4) != 0 && v4);
  }
  v6 = v4[2];
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  result = sub_22EFC8688((unint64_t)v7);
  if ((_DWORD)result)
  {
    v8 = v4[5];
    if ((v8 & 7) != 0)
      v9 = 0;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v9 + 16);
    if (*(_DWORD *)v10 == 27)
    {
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(_QWORD *)(v10 + 32);
      v14 = *(_QWORD *)(v10 + 35);
      return v11 == 0x6365737265746E69
          && v12 == 0x6E75665F6E6F6974
          && v13 == 0x61745F6E6F697463
          && v14 == 0x656C6261745F6E6FLL;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F10C618(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 152);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(*v4 + 152);
      v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v5 & 4) != 0 && v4);
  }
  v6 = v4[2];
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  result = sub_22EFC8688((unint64_t)v7);
  if ((_DWORD)result)
  {
    v8 = v4[5];
    if ((v8 & 7) != 0)
      v9 = 0;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v9 + 16);
    if (*(_DWORD *)v10 == 18)
    {
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(unsigned __int16 *)(v10 + 32);
      return v11 == 0x6365737265746E69 && v12 == 0x6575715F6E6F6974 && v13 == 31090;
    }
    return 0;
  }
  return result;
}

uint64_t *sub_22F10C6FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unsigned int v6;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 96, (uint64_t)&v5);
  if (v6 < 0x41)
    return v5;
  v3 = *v5;
  if (v5)
    MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
  return (uint64_t *)v3;
}

unint64_t sub_22F10C780(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;

  result = sub_22F10C2A4(a1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
      return 0;
    v3 = *(_QWORD *)(result + 152);
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0 && v4)
    {
      do
      {
        v5 = *(_QWORD *)(*v4 + 152);
        v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v5 & 4) != 0 && v4);
    }
    v6 = v4[2];
    result = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      result = *(_QWORD *)result;
    if (result)
    {
      result = sub_22EFC85AC(result);
      if ((_DWORD)result)
      {
        v7 = v4[5];
        if ((v7 & 7) != 0)
          v8 = 0;
        else
          v8 = v7 & 0xFFFFFFFFFFFFFFF8;
        v9 = *(_DWORD **)(v8 + 16);
        if (*v9 == 4)
          return v9[4] == 1752393069;
        return 0;
      }
    }
  }
  return result;
}

char *sub_22F10C83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  v3 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v2 + 168) + 32) & 0xFFFFFFFFFFFFFFF0));
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 >= 3)
    v4 = 0;
  else
    v4 = v3;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = v5 & 7;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (v8)
  {
    v11 = 0;
    v10 = (char *)&unk_22F5CEBEB;
  }
  else
  {
    v9 = *(_DWORD **)(v7 + 16);
    v12 = *v9;
    v10 = (char *)(v9 + 4);
    v11 = v12;
  }
  if (v11)
    return v10 + 1;
  else
    return v10;
}

unint64_t sub_22F10C8DC(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 152);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(*v4 + 152);
      v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v5 & 4) != 0 && v4);
  }
  v6 = v4[2];
  result = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    result = *(_QWORD *)result;
  if (result)
  {
    result = sub_22EFC85AC(result);
    if ((_DWORD)result)
    {
      v7 = v4[5];
      if ((v7 & 7) != 0)
        v8 = 0;
      else
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(_QWORD *)(v8 + 16);
      if (*(_DWORD *)v9 == 11)
      {
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 19);
        return v10 == 0x745F6C657869705FLL && v11 == 0x657079745F6C6578;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *sub_22F10C9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unsigned int v6;

  v1 = sub_22F10C2A4(a1);
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v2 = 0;
  else
    v2 = v1;
  sub_22E466FDC(**(_QWORD **)(v2 + 168) + 24, (uint64_t)&v5);
  if (v6 < 0x41)
    return v5;
  v3 = *v5;
  if (v5)
    MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
  return (uint64_t *)v3;
}

unint64_t sub_22F10CA40(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  result = sub_22F10C2A4(a1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    {
      return 0;
    }
    else
    {
      v3 = *(_QWORD *)(result + 152);
      v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
      if ((v3 & 4) != 0 && v4)
      {
        do
        {
          v5 = *(_QWORD *)(*v4 + 152);
          v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v5 & 4) != 0 && v4);
      }
      v6 = v4[2];
      result = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        result = *(_QWORD *)result;
      if (result)
      {
        result = sub_22EFC85AC(result);
        if ((_DWORD)result)
        {
          result = 0;
          v7 = v4[5];
          if ((v7 & 7) != 0)
            v8 = 0;
          else
            v8 = v7 & 0xFFFFFFFFFFFFFFF8;
          v9 = *(_QWORD *)(v8 + 16);
          switch(*(_QWORD *)v9)
          {
            case 7u:
              v15 = *(_DWORD *)(v9 + 16);
              v16 = *(_DWORD *)(v9 + 19);
              v17 = v15 == 1953523044;
              v18 = 1681025140;
              goto LABEL_36;
            case 9u:
              if (*(_QWORD *)(v9 + 16) == 0x3165727574786574 && *(_BYTE *)(v9 + 24) == 100)
                goto LABEL_34;
              if (*(_QWORD *)(v9 + 16) == 0x3265727574786574 && *(_BYTE *)(v9 + 24) == 100)
                goto LABEL_34;
              if (*(_QWORD *)(v9 + 16) == 0x3365727574786574 && *(_BYTE *)(v9 + 24) == 100)
                goto LABEL_34;
              v21 = *(_QWORD *)(v9 + 16);
              v16 = *(unsigned __int8 *)(v9 + 24);
              v17 = v21 == 0x6275636874706564;
              v18 = 101;
              goto LABEL_36;
            case 0xAu:
              v31 = *(_QWORD *)(v9 + 16);
              v16 = *(unsigned __int16 *)(v9 + 24);
              v17 = v31 == 0x5F64326874706564;
              v18 = 29549;
              goto LABEL_36;
            case 0xBu:
              v28 = *(_QWORD *)(v9 + 16);
              v25 = *(_QWORD *)(v9 + 19);
              v27 = v28 == 0x6365727574786574;
              v26 = 0x6562756365727574;
              goto LABEL_56;
            case 0xCu:
              if (*(_QWORD *)(v9 + 16) != 0x3265727574786574 || *(_DWORD *)(v9 + 24) != 1936547684)
                goto LABEL_81;
              goto LABEL_34;
            case 0xDu:
              v30 = *(_QWORD *)(v9 + 16);
              v25 = *(_QWORD *)(v9 + 21);
              v27 = v30 == 0x5F64326874706564;
              v26 = 0x79617272615F6432;
              goto LABEL_56;
            case 0xEu:
              v36 = *(_QWORD *)(v9 + 16);
              v25 = *(_QWORD *)(v9 + 22);
              v27 = v36 == 0x5F65727574786574;
              v26 = 0x7265666675625F65;
              goto LABEL_56;
            case 0xFu:
              if (*(_QWORD *)(v9 + 16) == 0x3165727574786574 && *(_QWORD *)(v9 + 23) == 0x79617272615F6431)
                goto LABEL_34;
              if (*(_QWORD *)(v9 + 16) == 0x3265727574786574 && *(_QWORD *)(v9 + 23) == 0x79617272615F6432)
                goto LABEL_34;
              v24 = *(_QWORD *)(v9 + 16);
              v25 = *(_QWORD *)(v9 + 23);
              v26 = 0x79617272615F6562;
              v27 = v24 == 0x6275636874706564;
LABEL_56:
              if (!v27 || v25 != v26)
                return 0;
              goto LABEL_34;
            case 0x10u:
              goto LABEL_19;
            case 0x11u:
              if (*(_QWORD *)(v9 + 16) == 0x6365727574786574
                && *(_QWORD *)(v9 + 24) == 0x617272615F656275
                && *(_BYTE *)(v9 + 32) == 121)
              {
                goto LABEL_34;
              }
LABEL_81:
              if (*(_QWORD *)v9 != 16)
                return 0;
LABEL_19:
              v11 = *(_QWORD *)(v9 + 16);
              v10 = *(_QWORD *)(v9 + 24);
              result = v11 == 0x5F64326874706564 && v10 == 0x79617272615F736DLL;
              break;
            case 0x12u:
              v34 = *(_QWORD *)(v9 + 16);
              v35 = *(_QWORD *)(v9 + 24);
              v16 = *(unsigned __int16 *)(v9 + 32);
              v17 = v34 == 0x3265727574786574 && v35 == 0x7272615F736D5F64;
              v18 = 31073;
LABEL_36:
              if (!v17 || v16 != v18)
                return 0;
LABEL_34:
              result = 1;
              break;
            default:
              return result;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_22F10CDF4(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_22F10C2A4(a1);
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7E) != 0x24 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v3 = *(_QWORD *)(result + 152);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(*v4 + 152);
      v4 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v5 & 4) != 0 && v4);
  }
  v6 = v4[2];
  result = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    result = *(_QWORD *)result;
  if (result)
  {
    result = sub_22EFC85AC(result);
    if ((_DWORD)result)
    {
      v7 = v4[5];
      if ((v7 & 7) != 0)
        v8 = 0;
      else
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(_QWORD *)(v8 + 16);
      if (*(_DWORD *)v9 == 22)
      {
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 24);
        v12 = *(_QWORD *)(v9 + 30);
        return v10 == 0x5F656C6269736976 && v11 == 0x6E6F6974636E7566 && v12 == 0x656C6261745F6E6FLL;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F10CEE8(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    a1 = sub_22F10CF48(a1);
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  return 0;
}

uint64_t sub_22F10CF48(uint64_t result)
{
  int v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t *v5;

  while (2)
  {
    v1 = *(_DWORD *)(result + 16);
LABEL_2:
    switch(*(_DWORD *)(result + 16))
    {
      case 0u:
      case 1u:
      case 7u:
      case 0x18u:
        v2 = *(_QWORD *)(result + 40);
        goto LABEL_25;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x24u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x34u:
      case 0x37u:
      case 0x38u:
        return result;
      case 8u:
      case 0x16u:
      case 0x17u:
      case 0x25u:
      case 0x36u:
        goto LABEL_3;
      case 0xDu:
        if ((*(_BYTE *)(*(_QWORD *)(result + 24) + 1) & 0x40) != 0)
          return result;
        goto LABEL_3;
      case 0xEu:
      case 0xFu:
        v2 = *(_QWORD *)(result + 24);
        if (v2 <= 0xF)
          return result;
        goto LABEL_25;
      case 0x1Cu:
      case 0x31u:
        v2 = *(_QWORD *)(result + 24);
        goto LABEL_25;
      case 0x23u:
      case 0x2Bu:
        v2 = *(_QWORD *)(result + 8);
        goto LABEL_25;
      case 0x2Eu:
        if ((v1 & 0x400) == 0)
        {
          v3 = v1 & 0x80000;
          goto LABEL_21;
        }
        v3 = v1 & 0x80000;
        if ((v1 & 0x80000) != 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 27)
        {
LABEL_21:
          if (v3)
            v5 = (unint64_t *)(result + 24 * *(unsigned int *)(result + 20) + 40);
          else
            v5 = (unint64_t *)(result + 8);
          v2 = *v5;
LABEL_25:
          result = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
          continue;
        }
        return result;
      case 0x30u:
        v4 = *(_QWORD *)(result + 24);
        if ((*(_BYTE *)(v4 + 1) & 0x80) != 0)
          return result;
        v2 = *(_QWORD *)(v4 + 8);
        goto LABEL_25;
      case 0x32u:
        v2 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(result + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                       + ((2 * *(_QWORD *)(*(_QWORD *)(result + 24) + 80)) & 8));
        goto LABEL_25;
      case 0x33u:
        if ((v1 & 0x400) != 0)
          return result;
LABEL_3:
        v2 = *(_QWORD *)(result + 32);
        goto LABEL_25;
      case 0x35u:
        v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 48);
        goto LABEL_25;
      default:
        goto LABEL_2;
    }
  }
}

unint64_t sub_22F10D058(unint64_t a1)
{
  unint64_t result;
  int v3;
  int v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  while (2)
  {
    result = sub_22E491354((unsigned int *)&v7, a1);
    v3 = *(_DWORD *)(result + 16);
    switch((char)v3)
    {
      case 0:
      case 1:
      case 7:
      case 24:
        a1 = *(_QWORD *)(result + 40);
        continue;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 36:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 45:
      case 47:
      case 52:
      case 55:
      case 56:
        return result;
      case 8:
      case 22:
      case 23:
      case 37:
      case 54:
        goto LABEL_17;
      case 13:
        if ((*(_BYTE *)(*(_QWORD *)(result + 24) + 1) & 0x40) == 0)
          goto LABEL_17;
        return result;
      case 14:
      case 15:
        a1 = *(_QWORD *)(result + 24);
        if (a1 > 0xF)
          continue;
        return result;
      case 28:
      case 49:
        a1 = *(_QWORD *)(result + 24);
        continue;
      case 35:
      case 43:
        a1 = *(_QWORD *)(result + 8);
        continue;
      case 46:
        if ((v3 & 0x400) == 0)
        {
          v4 = v3 & 0x80000;
LABEL_6:
          if (v4)
            v5 = (unint64_t *)(result + 24 * *(unsigned int *)(result + 20) + 40);
          else
            v5 = (unint64_t *)(result + 8);
          a1 = *v5;
          continue;
        }
        v4 = v3 & 0x80000;
        if ((v3 & 0x80000) != 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 27)
          goto LABEL_6;
        return result;
      case 48:
        v6 = *(_QWORD *)(result + 24);
        if ((*(_BYTE *)(v6 + 1) & 0x80) != 0)
          return result;
        a1 = *(_QWORD *)(v6 + 8);
        continue;
      case 50:
        a1 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(result + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                       + ((2 * *(_QWORD *)(*(_QWORD *)(result + 24) + 80)) & 8));
        continue;
      case 51:
        if ((v3 & 0x400) != 0)
          return result;
LABEL_17:
        a1 = *(_QWORD *)(result + 32);
        continue;
      case 53:
        a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
        continue;
      default:
        continue;
    }
  }
}

uint64_t sub_22F10D19C(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_22F10D1BC + 4 * byte_22F4A8DA7[*(_DWORD *)(a1 + 16)]))();
}

unint64_t sub_22F10D1BC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F10D1C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

unint64_t sub_22F10D1CC(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) <= 0xFuLL)
    return a1 & 0xFFFFFFFFFFFFFFF0;
  else
    return *(_QWORD *)(a1 + 24);
}

uint64_t sub_22F10D1E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_22F10D1E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

unint64_t sub_22F10D1F0(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
    return sub_22F10D1BC(a1);
  else
    return *(_QWORD *)(a1 + 32);
}

unint64_t sub_22F10D248(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F10D2A0(uint64_t a1)
{
  return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                   + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
}

_QWORD *sub_22F10D2BC(uint64_t a1)
{
  char v1;
  _QWORD *result;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  int v12;

  v1 = a1;
  result = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if ((v1 & 8) != 0)
  {
    v4 = result[3];
    result = (_QWORD *)*result;
    v3 = v4 | v1 & 7;
  }
  else
  {
    v3 = v1 & 7;
  }
  v5 = (unint64_t)result;
  while (2)
  {
    v6 = *(_DWORD *)(v5 + 16);
    switch((char)v6)
    {
      case 0:
      case 1:
      case 7:
      case 24:
        v7 = *(_QWORD *)(v5 + 40);
        if ((v7 & 8) == 0)
          goto LABEL_28;
        goto LABEL_35;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 36:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 45:
      case 47:
      case 52:
      case 55:
      case 56:
        return result;
      case 8:
      case 22:
      case 23:
      case 37:
      case 54:
        goto LABEL_6;
      case 13:
        if ((*(_BYTE *)(*(_QWORD *)(v5 + 24) + 1) & 0x40) != 0)
          return result;
        goto LABEL_6;
      case 14:
      case 15:
        v7 = *(_QWORD *)(v5 + 24);
        if (v7 <= 0xF)
          return result;
        goto LABEL_27;
      case 28:
      case 49:
        v7 = *(_QWORD *)(v5 + 24);
        if ((v7 & 8) != 0)
          goto LABEL_35;
        goto LABEL_28;
      case 35:
      case 43:
        goto LABEL_20;
      case 46:
        if ((v6 & 0x400) == 0)
        {
          v8 = v6 & 0x80000;
LABEL_31:
          if (v8)
            v10 = (unint64_t *)(v5 + 24 * *(unsigned int *)(v5 + 20) + 40);
          else
            v10 = (unint64_t *)(v5 + 8);
          v7 = *v10;
          if ((*v10 & 8) != 0)
          {
LABEL_35:
            v5 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
            v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v7 & 7;
          }
          else
          {
LABEL_28:
            v5 = v7 & 0xFFFFFFFFFFFFFFF0;
            v9 = v7 & 7;
          }
          if ((v9 & 0xCFFFFFFFFLL) != 0)
          {
            v11 = v9 & 0xFFFFF9FF | v3;
            v12 = (v3 >> 9) & 3;
            if (v12 <= (int)((v9 >> 9) & 3))
              LOBYTE(v12) = (v9 >> 9) & 3;
            if ((v9 & 0x600) != 0)
              v3 = v11 & 0xFFFFF9FF | ((v12 & 3) << 9);
            else
              v3 = v11;
            result = (_QWORD *)v5;
          }
          continue;
        }
        v8 = v6 & 0x80000;
        if ((v6 & 0x80000) != 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 27)
          goto LABEL_31;
        return result;
      case 48:
        v5 = *(_QWORD *)(v5 + 24);
        if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
          return result;
LABEL_20:
        v7 = *(_QWORD *)(v5 + 8);
        if ((v7 & 8) != 0)
          goto LABEL_35;
        goto LABEL_28;
      case 50:
        v7 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v5 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                       + ((2 * *(_QWORD *)(*(_QWORD *)(v5 + 24) + 80)) & 8));
        if ((v7 & 8) != 0)
          goto LABEL_35;
        goto LABEL_28;
      case 51:
        if ((v6 & 0x400) != 0)
          return result;
LABEL_6:
        v7 = *(_QWORD *)(v5 + 32);
        if ((v7 & 8) != 0)
          goto LABEL_35;
        goto LABEL_28;
      case 53:
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
LABEL_27:
        if ((v7 & 8) == 0)
          goto LABEL_28;
        goto LABEL_35;
      default:
        v7 = 0;
        goto LABEL_28;
    }
  }
}

uint64_t sub_22F10D47C(uint64_t a1)
{
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (!v2 || *(_BYTE *)(v2 + 16) != 37)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 37)
        break;
      v2 = sub_22F10CF48(v2);
      if (!v2)
        break;
    }
    a1 = *(_QWORD *)(v2 + 32);
  }
  return a1;
}

uint64_t sub_22F10D4DC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || *(_DWORD *)(a1 + 16) != 50)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if (*(_DWORD *)(a1 + 16) == 50)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_22F10D628(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || *(_DWORD *)(a1 + 16) != 46)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if (*(_DWORD *)(a1 + 16) == 46)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_22F10D774(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || *(_DWORD *)(a1 + 16) != 7)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if (*(_DWORD *)(a1 + 16) == 7)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_22F10D8C0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || (*(_DWORD *)(a1 + 16) & 0xFE) != 0x16)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if ((*(_DWORD *)(a1 + 16) & 0xFE) == 0x16)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_22F10DA0C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || *(_DWORD *)(a1 + 16) != 22)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if (*(_DWORD *)(a1 + 16) == 22)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_22F10DB58(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || *(_DWORD *)(a1 + 16) != 23)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if (*(_DWORD *)(a1 + 16) == 23)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_22F10DCA4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || *(_DWORD *)(a1 + 16) != 54)
  {
    while (1)
    {
      v2 = 0;
      switch((char)v1)
      {
        case 0:
        case 1:
        case 7:
        case 24:
          v3 = *(_QWORD *)(a1 + 40);
          goto LABEL_27;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 47:
        case 52:
        case 55:
        case 56:
          return v2;
        case 8:
        case 22:
        case 23:
        case 37:
        case 54:
          goto LABEL_5;
        case 13:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 0x40) != 0)
            return 0;
          goto LABEL_5;
        case 14:
        case 15:
          v3 = *(_QWORD *)(a1 + 24);
          if (v3 < 0x10)
            return 0;
          goto LABEL_27;
        case 28:
        case 49:
          v3 = *(_QWORD *)(a1 + 24);
          goto LABEL_27;
        case 35:
        case 43:
          v3 = *(_QWORD *)(a1 + 8);
          goto LABEL_27;
        case 46:
          if ((v1 & 0x400) != 0)
          {
            v4 = v1 & 0x80000;
            if ((v1 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
              return 0;
          }
          else
          {
            v4 = v1 & 0x80000;
          }
          if (v4)
            v6 = (unint64_t *)(a1 + 24 * *(unsigned int *)(a1 + 20) + 40);
          else
            v6 = (unint64_t *)(a1 + 8);
          v3 = *v6;
LABEL_27:
          a1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_28:
          v1 = *(_DWORD *)(a1 + 16);
          if (a1)
          {
            v2 = a1;
            if (*(_DWORD *)(a1 + 16) == 54)
              return v2;
          }
          break;
        case 48:
          v5 = *(_QWORD *)(a1 + 24);
          if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
            return 0;
          v3 = *(_QWORD *)(v5 + 8);
          goto LABEL_27;
        case 50:
          v3 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                         + ((2 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80)) & 8));
          goto LABEL_27;
        case 51:
          if ((v1 & 0x400) != 0)
            return 0;
LABEL_5:
          v3 = *(_QWORD *)(a1 + 32);
          goto LABEL_27;
        case 53:
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 48);
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
    }
  }
  return a1;
}

BOOL sub_22F10DDF0(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 45)
      return (*(_DWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 72) & 0xE000) == 24576;
  }
  return result;
}

BOOL sub_22F10DE3C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 45)
      return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 73) & 0xE0) == 0;
  }
  return result;
}

BOOL sub_22F10DE84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v1 || *(_BYTE *)(v1 + 16) != 45)
    return 0;
  v2 = sub_22F114198(*(_QWORD *)(v1 + 24));
  return sub_22F10DEC4(v2);
}

BOOL sub_22F10DEC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 481)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F10DF24(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 45)
      return (*(_DWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 72) & 0xE000) == 0x2000;
  }
  return result;
}

uint64_t sub_22F10DF70(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(unsigned __int8 *)(v1 + 16);
  if (v1)
    v3 = v2 == 45;
  else
    v3 = 0;
  v4 = v3;
  if (v3)
  {
    v5 = sub_22F114198(*(_QWORD *)(v1 + 24));
    v2 = 1;
    v6 = *(_DWORD *)(v5 + 72) & 0xE000;
    if (v6)
      v2 = v6 == 0x2000 || v6 == 24576;
  }
  return v4 & v2;
}

uint64_t sub_22F10DFD8(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1 && *(_BYTE *)(a1 + 16) == 39
    || (v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16), v1 == 39)
    && (a1 = sub_22F10CF48(a1)) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v2)
      v3 = *(_DWORD *)(v2 + 16) == 11;
    else
      v3 = 0;
    v1 = v3 && (*(_DWORD *)(v2 + 16) & 0xFF80000) == 86507520;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & v1;
}

BOOL sub_22F10E06C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 45)
      return (*(_DWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 72) & 0xE000) == 0x4000;
  }
  return result;
}

BOOL sub_22F10E0B8(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 12;
  else
    v2 = 0;
  return v2 && sub_22F10E0EC(*(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0));
}

BOOL sub_22F10E0EC(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  int v3;
  BOOL v4;

  for (i = *(_QWORD *)(a1 + 8); ; i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8))
  {
    v2 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
    v3 = *(_DWORD *)(v2 + 16);
    if (v2)
      v4 = v3 == 11;
    else
      v4 = 0;
    if (v4)
      return ((*(_DWORD *)(v2 + 16) >> 19) & 0x1FEu) - 210 < 8;
    if (v3 != 12)
      break;
  }
  return 0;
}

uint64_t sub_22F10E148(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  BOOL v3;

  if (!a1 || *(_BYTE *)(a1 + 16) != 12)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12)
      return 0;
    a1 = sub_22F10CF48(a1);
    if (!a1)
      return 0;
  }
  v2 = a1;
  v3 = sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0));
  result = v2;
  if (!v3)
    return 0;
  return result;
}

uint64_t sub_22F10E1B8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 44)
      return *(unsigned __int8 *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 76) >> 7;
  }
  return result;
}

uint64_t sub_22F10E1FC(uint64_t a1, int a2)
{
  uint64_t v3;
  _BOOL8 v4;
  _BOOL4 v6;

  v3 = sub_22F10D774(a1);
  if (!v3)
    return 0;
  while (1)
  {
    v6 = *(_DWORD *)(v3 + 16) >> 19 == a2;
    if (*(_DWORD *)(v3 + 16) >> 19 == a2)
      break;
    v3 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF0));
    v4 = v6;
    if (!v3)
      return v4;
  }
  return 1;
}

uint64_t sub_22F10E26C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (a1 && *(_BYTE *)(a1 + 16) == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(a1 + 24)) + 73) & 0xE0) == 0)
    return a1;
  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 45)
  {
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 73) & 0xE0) != 0)
      return 0;
    else
      return sub_22F10CF48(a1);
  }
  return result;
}

uint64_t sub_22F10E2FC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (a1 && *(_BYTE *)(a1 + 16) == 45 && (*(_DWORD *)(sub_22F114198(*(_QWORD *)(a1 + 24)) + 72) & 0xE000) == 0x4000)
    return a1;
  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 45)
  {
    if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 72) & 0xE000) == 0x4000)
      return sub_22F10CF48(a1);
    else
      return 0;
  }
  return result;
}

uint64_t sub_22F10E394(uint64_t a1, uint64_t a2, unint64_t a3, void *__src, uint64_t a5)
{
  int v6;
  unint64_t v7;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1E00;
  v7 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a3 >= 0x10)
    v7 = a3;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v6 | *(_DWORD *)(a1 + 16) & 0xFFF80000 | 0x23;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xC0 | a5 & 0x3F;
  if (a5)
    memcpy((void *)(a1 + 48), __src, 8 * a5);
  return a1;
}

uint64_t sub_22F10E414(uint64_t a1)
{
  uint64_t result;

  if ((*(_QWORD *)(a1 + 16) & 0x3F80000) != 0)
    return a1 + 48;
  result = sub_22E4EBB74(*(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if (*(_BYTE *)(result + 16) == 34)
      return 0;
    else
      return sub_22F10E414();
  }
  return result;
}

uint64_t sub_22F10E474(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_DWORD *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (v5)
  {
    v7 = (*(_DWORD *)(v4 + 16) >> 19) & 0x1FF;
    if (v7 == 215)
    {
      v9 = *(_QWORD *)(a2 + 15088);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9)
        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9) & 1) == 0
        && (*(_DWORD *)(*(_QWORD *)(a2 + 2000) + 244) & 0x6000) != 0x4000)
      {
        return 1;
      }
    }
    else if (v7 == 214)
    {
      v8 = *(_QWORD *)(a2 + 15088);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8))
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) & 1) == 0
          && (*(_DWORD *)(*(_QWORD *)(a2 + 2000) + 244) & 0x1800) != 0x1000)
        {
          return 1;
        }
      }
    }
    return 0;
  }
  result = sub_22E3E4B64(v3);
  if (result)
  {
    v10 = *(_QWORD *)(result + 32);
    return sub_22F10E474(&v10, a2);
  }
  return result;
}

void sub_22F10E588(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 8) != 0)
    v2 = (_QWORD *)*v2;
  __asm { BR              X11 }
}

unint64_t sub_22F10E604(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,__int128 a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;

  v60 = v58 & 0xFFFFFFFFFFFFFFF0;
  if ((v58 & 0xFFFFFFFFFFFFFFF0) >= 0x10)
  {
    if ((v59 & 0xCFFFFFFF8) != 0)
    {
      v61 = *v57;
      v64 = v59;
      v62 = sub_22E491354((unsigned int *)&v64, v58 & 0xFFFFFFFFFFFFFFF0);
      return sub_22EF5DBC4(v61, v62, v64);
    }
    else
    {
      v60 |= v59 & 7;
    }
  }
  return v60;
}

void sub_22F10F4E4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int i;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;

  v3 = a2;
  if (a2)
  {
    if ((*(_WORD *)(a2 + 8) & 0x7F) == 0x18)
    {
      v6 = *(_QWORD *)(a2 - 32);
      v3 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
  }
  v7 = *(_WORD *)(v3 + 8) & 0x7F;
  if (v3)
    v8 = (uint64_t *)(v3 - 48);
  else
    v8 = 0;
  if (v3 && v7 == 22)
  {
    if (sub_22F3B4828(v8))
      goto LABEL_17;
LABEL_24:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  if (v7 == 19)
    v9 = v8;
  else
    v9 = 0;
  if (!v3)
    goto LABEL_24;
  if (v7 != 19)
    goto LABEL_24;
  if (!v9[14])
    goto LABEL_24;
  v8 = (uint64_t *)v9[13];
  if (!v8)
    goto LABEL_24;
LABEL_17:
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v10 == 32)
  {
    v11 = a1;
LABEL_22:
    v13 = *(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_77;
  }
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v12 != 32)
  {
    if (a1 && v10 == 10 || v12 == 10 && sub_22F10CF48(a1))
      goto LABEL_32;
LABEL_36:
    v16 = sub_22E4EBB74(a1);
    goto LABEL_82;
  }
  v11 = sub_22F10CF48(a1);
  if (v11)
    goto LABEL_22;
  if (!a1 || v10 != 10)
    goto LABEL_36;
LABEL_32:
  v14 = *(_WORD *)(v3 + 8) & 0x7F;
  v15 = -40;
  if (v14 > 0x46)
  {
    if (v14 == 83)
      goto LABEL_49;
    if (v14 == 71)
    {
      v15 = -56;
      goto LABEL_49;
    }
    if (v14 != 81)
    {
LABEL_44:
      v17 = v14 - 52;
      v18 = v14 - 33 >= 5;
      v19 = -48;
      if (!v18)
        v19 = -64;
      if (v17 >= 6)
        v15 = v19;
      else
        v15 = -72;
    }
  }
  else
  {
    if (v14 > 0x18)
      goto LABEL_43;
    if (v14 == 16)
    {
LABEL_35:
      v15 = -48;
      goto LABEL_49;
    }
    if (((1 << v14) & 0x1066) == 0)
    {
      if (v14 == 24)
        goto LABEL_35;
LABEL_43:
      if (v14 == 70)
      {
        v15 = -64;
        goto LABEL_49;
      }
      goto LABEL_44;
    }
  }
LABEL_49:
  v20 = v3 + v15;
  if ((*(_DWORD *)(v20 + 28) & 0x7F) != 0x53)
  {
    v21 = *(_QWORD *)(v20 + 16);
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    if ((v21 & 4) != 0)
      v22 = *(_QWORD *)v22;
    for (i = *(_WORD *)(v22 + 8) & 0x7F; i != 83; i = *(_WORD *)(v22 + 8) & 0x7F)
    {
      v24 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v24 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_63;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_62;
        if (i == 16)
          goto LABEL_56;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_69;
        if (i == 24)
        {
LABEL_56:
          v24 = -48;
        }
        else
        {
LABEL_62:
          if (i != 70)
          {
LABEL_63:
            v25 = i - 52;
            if ((i - 33) >= 5)
              v26 = -48;
            else
              v26 = -64;
            if (v25 >= 6)
              v24 = v26;
            else
              v24 = -72;
            goto LABEL_69;
          }
          v24 = -64;
        }
      }
LABEL_69:
      v27 = *(_QWORD *)(v22 + v24 + 16);
      v22 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v22 = *(_QWORD *)v22;
    }
    v20 = v22 - 40;
  }
  v13 = sub_22EF667E8(*(_QWORD *)(v20 + 88), *(_QWORD *)(*(_QWORD *)(v20 + 88) + 16888), 0, 0, 0, 0, 0) & 0xFFFFFFFFFFFFFFF0;
LABEL_77:
  v28 = *(_QWORD *)v13;
  v29 = *(unsigned __int8 *)(*(_QWORD *)v13 + 16) - 35;
  if (v28)
    v30 = v29 > 0xFFFFFFFD;
  else
    v30 = 0;
  if (!v30)
  {
    v16 = sub_22F10CF48(v28);
LABEL_82:
    v28 = v16;
    if (!v16)
      goto LABEL_83;
  }
  v31 = sub_22F272660(v28);
  if (v31)
  {
    if ((uint64_t *)v31 == v8)
    {
LABEL_97:
      if (sub_22F409CF8(v28))
      {
        *(_QWORD *)a3 = sub_22F10E414(v28);
        *(_QWORD *)(a3 + 8) = v36;
        goto LABEL_84;
      }
    }
    else
    {
      while (1)
      {
        v32 = *(_QWORD *)(v28 + 32);
        if ((v32 & 4) == 0)
        {
          sub_22F409FE8(v28);
          v32 = *(_QWORD *)(v28 + 32);
        }
        v33 = v32 & 0xFFFFFFFFFFFFFFF0;
        if (!v33)
          break;
        v28 = *(_QWORD *)v33;
        v34 = *(unsigned __int8 *)(*(_QWORD *)v33 + 16) - 35;
        if (v28)
          v35 = v34 > 0xFFFFFFFD;
        else
          v35 = 0;
        if (!v35)
          v28 = sub_22F10CF48(v28);
        if ((uint64_t *)sub_22F272660(v28) == v8)
        {
          if (!v28)
            break;
          goto LABEL_97;
        }
      }
    }
  }
LABEL_83:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
LABEL_84:
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22F10F8A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 8) != 0)
    v2 = (_QWORD *)*v2;
  __asm { BR              X11 }
}

unint64_t sub_22F10F91C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;

  v51 = v49 & 0xFFFFFFFFFFFFFFF0;
  if ((v49 & 0xFFFFFFFFFFFFFFF0) >= 0x10)
  {
    if ((v50 & 0xCFFFFFFF8) != 0)
    {
      v52 = *v48;
      v55 = v50;
      v53 = sub_22E491354((unsigned int *)&v55, v49 & 0xFFFFFFFFFFFFFFF0);
      return sub_22EF5DBC4(v52, v53, v55);
    }
    else
    {
      v51 |= v50 & 7;
    }
  }
  return v51;
}

unint64_t sub_22F110438(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 6;
  else
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v2 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
  {
    v5 = sub_22F10CF48(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0));
    if (v5)
    {
LABEL_10:
      v6 = *(_QWORD *)(v5 + 32);
      v2 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v2 + 8) & 0xF) != 0)
        goto LABEL_11;
      return v2 & 0xFFFFFFFFFFFFFFF0;
    }
  }
  if ((v4 & 0xF) != 0)
  {
    v6 = v1;
LABEL_11:
    v2 = (unint64_t)sub_22F10D2BC(v6);
  }
  return v2 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F1104D0(uint64_t a1)
{
  return sub_22F114198(*(_QWORD *)(a1 + 24));
}

uint64_t sub_22F1104D8(uint64_t a1)
{
  char v2;

  v2 = 0;
  return sub_22F110500((uint64_t)&v2, a1);
}

uint64_t sub_22F110500(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_22F110520 + 4 * byte_22F4A908C[*(unsigned __int8 *)(a2 + 16)]))();
}

uint64_t sub_22F110520(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 32) >= 0x10uLL)
    JUMPOUT(0x22F110508);
  return 0;
}

BOOL sub_22F11057C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v5;
  BOOL v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 - 57 >= 0xFFFFFFFE;
  else
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v2 = *(_DWORD *)(v5 + 16);
    if (v5)
      v6 = *(_DWORD *)(v5 + 16) == 11;
    else
      v6 = 0;
    if (v6)
      return (v2 & 0xFF80000) == 87031808;
  }
  else if (v2 == 11)
  {
    return (v2 & 0xFF80000) == 87031808;
  }
  return 0;
}

uint64_t sub_22F1105F0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = *(_DWORD *)(v1 + 16) - 57 >= 0xFFFFFFFE;
  else
    v3 = 0;
  if (v3)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_DWORD *)(v1 + 16);
    if (v1)
      v9 = v8 == 11;
    else
      v9 = 0;
    if (v9)
    {
      v7 = *(_DWORD *)(v1 + 16) >> 19;
      return (v7 & 0x1FEu) - 166 < 0x14;
    }
    if (!v1 || v8 != 44)
      return v8 == 9;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
      v5 = *(_DWORD *)(v4 + 16) == 11;
    else
      v5 = 0;
    if (v5)
    {
      v12 = (*(_DWORD *)(v4 + 16) >> 19) & 0x1FF;
      if ((v12 - 48) < 0xC || v12 == 96)
      {
        if ((v2 & 0xFF80000) == 0x3000000)
          return 1;
        return (v2 & 0xFC00000) == 25165824;
      }
    }
    v6 = *(_DWORD *)(v1 + 16);
    if (v6 == 9)
      return 1;
    if (v6 != 44)
    {
      if (v6 == 11)
      {
        v7 = v2 >> 19;
        return (v7 & 0x1FEu) - 166 < 0x14;
      }
      return 0;
    }
  }
  v10 = sub_22F114198(*(_QWORD *)(v1 + 24));
  if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) < 8uLL)
    return 0;
  return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 76) & 0x80) == 0;
}

BOOL sub_22F110744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v2 + 16);
  if (v2)
    v4 = v3 == 11;
  else
    v4 = 0;
  if (v4)
    return ((*(_DWORD *)(v2 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  if (!v2)
    return v3 == 9;
  if (v3 != 44 || (**(_QWORD **)(a2 + 2000) & 0x100) != 0)
    return v3 == 9;
  v6 = sub_22F114198(*(_QWORD *)(v2 + 24));
  return (*(_BYTE *)(v6 + 74) & 1) != 0 || *(_QWORD *)(v6 + 128) > 7uLL;
}

uint64_t sub_22F1107D8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((*(_DWORD *)(v1 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  if (v2 == 9)
    return 1;
  if (v2 == 44)
    return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 76) & 0x80) == 0;
  return 0;
}

BOOL sub_22F110854(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 44)
      return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 76) & 0x80) == 0;
  }
  return result;
}

uint64_t sub_22F11089C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = *(_DWORD *)(v1 + 16) == 11;
  else
    v3 = 0;
  v4 = v3;
  v5 = ((v2 >> 19) & 0x1FF) - 167;
  v6 = v5 > 0xC;
  v7 = (0x1803u >> v5) & 1;
  if (v6)
    v7 = 0;
  if (v4 != 1)
    v7 = v4;
  return v4 & v7;
}

uint64_t sub_22F1108E8(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_DWORD *)(v1 + 16) == 11;
  else
    v2 = 0;
  if (v2 && ((*(_DWORD *)(v1 + 16) >> 19) & 0x1FFu) - 167 <= 0xD)
    return (0x383Fu >> ((*(_DWORD *)(v1 + 16) >> 19) + 89)) & 1;
  else
    return 0;
}

BOOL sub_22F110930(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;

  v1 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(*(_QWORD *)v1 + 16);
  if (*(_QWORD *)v1)
    v4 = v3 == 11;
  else
    v4 = 0;
  if (v4)
    return ((v3 >> 19) & 0x1FE) - 178 < 8;
  if (v2 && v3 == 44)
  {
    v5 = a1;
    do
    {
      v6 = sub_22F114198(*(_QWORD *)(v2 + 24));
      if ((*(_BYTE *)(v6 + 74) & 1) == 0 && *(_QWORD *)(v6 + 128) < 8uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v2 + 24)) + 76) & 0x80) != 0)
      {
        break;
      }
      v7 = sub_22F114198(*(_QWORD *)(v2 + 24));
      v5 = *(_QWORD *)(sub_22E496830(v7) & 0xFFFFFFFFFFFFFFF0);
      v2 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
      v3 = *(_DWORD *)(v2 + 16);
      if (v2)
        v8 = v3 == 11;
      else
        v8 = 0;
      if (v8)
        return ((v3 >> 19) & 0x1FE) - 178 < 8;
    }
    while (v2 && v3 == 44);
    v1 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  v9 = *(unsigned __int8 **)v1;
  v10 = v9[16];
  if (v9)
    v11 = v10 == 9;
  else
    v11 = 0;
  if (v11)
  {
    return (v9[32] & 1) == 0;
  }
  else
  {
    if (v10 != 17)
      return 0;
    return (v9[40] & 2) == 0;
  }
}

BOOL sub_22F110A40(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((v2 >> 19) & 0x1FE) - 178 < 8;
  if (v1 && v2 == 44)
  {
    v5 = sub_22F114198(*(_QWORD *)(v1 + 24));
    if ((*(_BYTE *)(v5 + 74) & 1) != 0 || *(_QWORD *)(v5 + 128) > 7uLL)
    {
      v6 = sub_22F114198(*(_QWORD *)(v1 + 24));
      v7 = sub_22E496830(v6);
      return sub_22F110930(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    }
    v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
    v2 = *(_DWORD *)(v1 + 16);
  }
  if (v2 == 17)
  {
    return (*(_BYTE *)(v1 + 40) & 2) == 0;
  }
  else
  {
    if (v2 != 9)
      return 0;
    return (*(_BYTE *)(v1 + 32) & 1) == 0;
  }
}

BOOL sub_22F110B20(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 57 >= 0xFFFFFFFE;
  else
    v2 = 0;
  if (v2)
    a1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
  return sub_22F110A40(a1);
}

BOOL sub_22F110B50(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;

  v1 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(*(_QWORD *)v1 + 16);
  if (*(_QWORD *)v1)
    v4 = v3 == 11;
  else
    v4 = 0;
  if (v4)
    return ((v3 >> 19) & 0x1FE) - 166 < 0xC;
  if (v2 && v3 == 44)
  {
    v5 = a1;
    do
    {
      v6 = sub_22F114198(*(_QWORD *)(v2 + 24));
      if ((*(_BYTE *)(v6 + 74) & 1) == 0 && *(_QWORD *)(v6 + 128) < 8uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v2 + 24)) + 76) & 0x80) != 0)
      {
        break;
      }
      v7 = sub_22F114198(*(_QWORD *)(v2 + 24));
      v5 = *(_QWORD *)(sub_22E496830(v7) & 0xFFFFFFFFFFFFFFF0);
      v2 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
      v3 = *(_DWORD *)(v2 + 16);
      if (v2)
        v8 = v3 == 11;
      else
        v8 = 0;
      if (v8)
        return ((v3 >> 19) & 0x1FE) - 166 < 0xC;
    }
    while (v2 && v3 == 44);
    v1 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  v9 = *(unsigned __int8 **)v1;
  v10 = v9[16];
  if (v9)
    v11 = v10 == 9;
  else
    v11 = 0;
  if (v11)
    return v9[32] & 1;
  if (v10 == 17)
    return (v9[40] >> 1) & 1;
  return 0;
}

BOOL sub_22F110C5C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((v2 >> 19) & 0x1FE) - 166 < 0xC;
  if (v1 && v2 == 44)
  {
    v5 = sub_22F114198(*(_QWORD *)(v1 + 24));
    if ((*(_BYTE *)(v5 + 74) & 1) != 0 || *(_QWORD *)(v5 + 128) > 7uLL)
    {
      v6 = sub_22F114198(*(_QWORD *)(v1 + 24));
      v7 = sub_22E496830(v6);
      return sub_22F110B50(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    }
    v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
    v2 = *(_DWORD *)(v1 + 16);
  }
  if (v2 == 17)
    return (*(unsigned __int8 *)(v1 + 40) >> 1) & 1;
  if (v2 == 9)
    return *(_BYTE *)(v1 + 32) & 1;
  return 0;
}

BOOL sub_22F110D38(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v5;
  BOOL v6;
  int v8;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 - 57 >= 0xFFFFFFFE;
  else
    v3 = 0;
  if (v3)
    return sub_22F110C5C(*(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0));
  if (v1 && v2 - 31 >= 0xFFFFFFFE)
    return sub_22F110C5C(*(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_DWORD *)(v5 + 16) == 11;
  else
    v6 = 0;
  if (v6 && ((v8 = (*(_DWORD *)(v5 + 16) >> 19) & 0x1FF, (v8 - 48) < 0xC) || v8 == 96))
    return (v2 & 0xFE00000) == 27262976;
  else
    return sub_22F110C5C(a1);
}

BOOL sub_22F110DD0(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 57 >= 0xFFFFFFFE;
  else
    v2 = 0;
  if (v2)
    a1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
  return sub_22F10E0EC(a1);
}

BOOL sub_22F110E00(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((*(_DWORD *)(v1 + 16) >> 19) & 0x1FEu) - 166 < 0x34;
  if (v1 && v2 == 44)
  {
    v4 = sub_22F114198(*(_QWORD *)(v1 + 24));
    if ((*(_BYTE *)(v4 + 74) & 1) == 0 && *(_QWORD *)(v4 + 128) < 8uLL)
      return 0;
    return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 76) & 0x80) == 0;
  }
  else
  {
    return v2 == 9;
  }
}

BOOL sub_22F110E9C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((*(_DWORD *)(v1 + 16) >> 19) & 0x1FEu) - 166 < 0x34;
  if (!v1 || v2 != 44)
    return v2 == 12 || v2 == 9;
  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 76) & 0x80) != 0)
  {
    return 0;
  }
  else
  {
    v4 = sub_22F114198(*(_QWORD *)(v1 + 24));
    return (*(_BYTE *)(v4 + 74) & 1) != 0 || *(_QWORD *)(v4 + 128) > 7uLL;
  }
}

uint64_t sub_22F110F44(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
  {
    v4 = (v2 >> 19) & 0x1FF;
    if (v4 == 166)
      return 4;
    if (v4 != 218)
    {
      v6 = (v2 >> 19) & 0x1FE;
      if ((v6 - 166) >= 0x14)
      {
        if ((v6 - 210) >= 8)
          return 9;
        else
          return 6;
      }
      return 5;
    }
    return 0;
  }
  if (*(_DWORD *)(v1 + 16) <= 0x1Fu)
  {
    if (v2 == 10)
      return 1;
    if (v2 == 31)
      return 3;
    goto LABEL_22;
  }
  switch(v2)
  {
    case ' ':
      return 2;
    case '\'':
      return 0;
    case ',':
      return 5;
  }
LABEL_22:
  if (v1)
    v7 = v2 == 12;
  else
    v7 = 0;
  if (!v7)
    return 5;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  result = 7;
  if (v8)
    v9 = *(_DWORD *)(v8 + 16) == 11;
  else
    v9 = 0;
  if (v9)
  {
    if (((*(_DWORD *)(v8 + 16) >> 19) & 0x1FEu) - 210 >= 8)
      return 7;
    else
      return 8;
  }
  return result;
}

BOOL sub_22F111060(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(unsigned __int8 *)(v1 + 16);
  if (!v1 || v2 != 45)
    return (v2 & 0xFEu) - 2 < 4;
  v3 = sub_22F114198(*(_QWORD *)(v1 + 24));
  if (v3)
    v4 = (*(_DWORD *)(v3 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    return 1;
  v6 = v3;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
  return (**(_QWORD **)(v6 + 128) >> 7) & 1;
}

uint64_t sub_22F1110EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2)
LABEL_2:
    *a2 = 0;
  while (1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
    v4 = *(_DWORD *)(v3 + 16);
    if (v4 < 0x21u)
      break;
    if (*(_DWORD *)(v3 + 16) > 0x21u)
    {
      switch(v4)
      {
        case ',':
          v19 = sub_22F114198(*(_QWORD *)(v3 + 24));
          if (a2)
            *a2 = v19;
          if ((*(_BYTE *)(v19 + 74) & 1) != 0)
            return 0;
          v20 = *(_QWORD *)(v19 + 128);
          break;
        case '-':
          v6 = sub_22F114198(*(_QWORD *)(v3 + 24));
          if (a2)
            *a2 = v6;
          return (*(_BYTE *)(v6 + 74) & 1) == 0;
        case '"':
          v23 = sub_22F409D88(v3);
          v24 = v23;
          if (a2)
            *a2 = v23;
          v20 = *(_QWORD *)(v23 + 120);
          if (!v20)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 96) + 88), *(_QWORD *)(v23 + 96));
            v20 = *(_QWORD *)(v24 + 120);
          }
          break;
        default:
          return 0;
      }
      return v20 < 8;
    }
    v5 = (_QWORD *)(v3 + 24);
LABEL_8:
    a1 = *(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0);
    if (a2)
      goto LABEL_2;
  }
  switch(*(_DWORD *)(v3 + 16))
  {
    case 2u:
    case 5u:
      v5 = (_QWORD *)(v3 + 32);
      goto LABEL_8;
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
      return 0;
    case 4u:
      return 1;
    case 0xBu:
      if (v4 != 11)
        return 0;
      return (v4 & 0xFF80000) == 86507520;
    default:
      if (v4 != 31)
        return 0;
      v8 = *(_QWORD *)(v3 + 40);
      if ((*(_BYTE *)(v8 + 17) & 4) != 0)
        return 0;
      v9 = sub_22F10C2A4(v8);
      v10 = v9;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
        v9 = 0;
      if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x53 && v9 != 0)
      {
        v9 = v10;
        goto LABEL_61;
      }
      v12 = *(_QWORD *)(v9 + 16);
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v13 = *(_QWORD *)v13;
      v14 = *(_WORD *)(v13 + 8) & 0x7F;
      if (v14 == 83)
        goto LABEL_60;
      break;
  }
  do
  {
    v15 = -40;
    if (v14 > 70)
    {
      if (v14 == 71)
      {
        v15 = -56;
      }
      else if (v14 != 81)
      {
        goto LABEL_37;
      }
      goto LABEL_43;
    }
    if (v14 > 0x18)
      goto LABEL_36;
    if (v14 == 16)
      goto LABEL_30;
    if (((1 << v14) & 0x1066) == 0)
    {
      if (v14 == 24)
      {
LABEL_30:
        v15 = -48;
        goto LABEL_43;
      }
LABEL_36:
      if (v14 != 70)
      {
LABEL_37:
        v16 = v14 - 52;
        if ((v14 - 33) >= 5)
          v17 = -48;
        else
          v17 = -64;
        if (v16 >= 6)
          v15 = v17;
        else
          v15 = -72;
        goto LABEL_43;
      }
      v15 = -64;
    }
LABEL_43:
    v18 = *(_QWORD *)(v13 + v15 + 16);
    v13 = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 4) != 0)
      v13 = *(_QWORD *)v13;
    v14 = *(_WORD *)(v13 + 8) & 0x7F;
  }
  while (v14 != 83);
LABEL_60:
  v10 = v13 - 40;
LABEL_61:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 15088) + 148) == 11)
  {
    v22 = sub_22E6939D8(v9);
    return !sub_22E693748(v22);
  }
  return 0;
}

uint64_t sub_22F111384(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  int v5;
  unsigned int v6;
  _BOOL4 v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = *(_DWORD *)(v1 + 16) == 11;
  else
    v3 = 0;
  v4 = v3;
  v5 = (v2 >> 19) & 0x1FF;
  v6 = v5 - 99;
  v7 = (v5 - 48) < 0x31;
  if (v6 < 0x42)
    v7 = 1;
  if (v4 != 1)
    v7 = v4;
  return v4 & v7;
}

uint64_t sub_22F1113D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 11)
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v2 = 0;
  if ((*(_DWORD *)(v2 + 16) & 0xFF80000) == 0x3000000)
    return *(_QWORD *)(a2 + 16512);
  sub_22F36AD2C(a2, v2);
  return v4;
}

uint64_t sub_22F111438(_QWORD *a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 2) != 0)
    return sub_22F11144C(a1);
  else
    return sub_22F111624(a1, a2);
}

uint64_t sub_22F11144C(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;

  v1 = *a1 & 0xFFFFFFFFFFFFFFF0;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(*(_QWORD *)v1 + 16);
  if ((v3 & 0x400) != 0)
    return 0;
  v4 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v4 & 8) != 0 && (*(_WORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
    return 0;
  while (1)
  {
    if ((v3 & 0xFEu) - 6 > 0xFFFFFFFB)
    {
      v5 = v2;
      goto LABEL_8;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v5 = sub_22F10CF48(v2);
    if (!v5)
      break;
LABEL_8:
    v2 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
    v3 = *(_DWORD *)(v2 + 16);
  }
  if ((sub_22F111384(v2) & 1) != 0)
    return 1;
  if ((sub_22F1110EC(v2, 0) & 1) != 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  if (v9)
  {
    if (((v8 >> 19) & 0x1FF) - 166 < 0x35)
      return 1;
  }
  else
  {
    if (v7 && v8 == 44)
    {
      v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
      if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) <= 7uLL)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
        LOBYTE(v8) = *(_BYTE *)(v7 + 16);
        goto LABEL_28;
      }
      return 1;
    }
    if ((v8 - 9) < 0x1Fu && ((0x40C0000Bu >> (v8 - 9)) & 1) != 0)
      return 1;
  }
LABEL_28:
  v11 = v8;
  v12 = v8 - 55;
  if (v12 < 2)
    return 1;
  if (v11 == 45)
  {
    v13 = sub_22F114198(*(_QWORD *)(v7 + 24));
    if (v13)
      v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v14 = 0;
    LOBYTE(v12) = !v14
               || (v15 = v13, sub_22EFD12A8(v13))
               && sub_22E49F698(v15)
               && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104)),
                   (**(_QWORD **)(v15 + 128) & 0x1000) != 0);
  }
  return (v11 == 45) & v12;
}

uint64_t sub_22F111624(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *a1;
  if (*a1 < 0x10)
    return 0;
  v6 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
    goto LABEL_4;
  if ((sub_22F1110EC(v6, 0) & 1) != 0)
    return 0;
  v3 = *a1;
  v7 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0 && (*(_WORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 <= 0x38)
  {
    if (((1 << v9) & 0x180008180001E00) != 0 || v9 == 44)
      return 1;
    if (v9 == 45)
    {
      v10 = sub_22F114198(*(_QWORD *)(v8 + 24));
      if (v10)
        v11 = (*(_DWORD *)(v10 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v11 = 0;
      if (v11)
      {
        v12 = v10;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
        return (**(_QWORD **)(v12 + 128) >> 8) & 1;
      }
      return 1;
    }
  }
  if ((_DWORD)v9 != 5 && (_DWORD)v9 != 2)
    return 0;
LABEL_4:
  v14 = sub_22EF5BA38(a2, v3);
  return sub_22F111624(&v14, a2);
}

uint64_t sub_22F111768(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *a1;
  if (*a1 < 0x10)
    return 0;
  v5 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v16 = sub_22EF5BA38(a2, v3);
    return sub_22F111768(&v16, a2);
  }
  if ((sub_22F111384(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
    return 1;
  if ((sub_22F1110EC(v5, 0) & 1) != 0)
    return 0;
  v7 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0 && (*(_WORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)v8 + 17) & 4) != 0)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((v10 >> 19) & 0x1FF) - 166 < 0x35)
      return 1;
  }
  else if (v9 && v10 == 44)
  {
    v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
    if ((*(_BYTE *)(v12 + 74) & 1) != 0 || *(_QWORD *)(v12 + 128) > 7uLL)
      return 1;
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v10) = *(_BYTE *)(v9 + 16);
  }
  else if ((v10 - 9) < 0x1Fu && ((0x40C0000Bu >> (v10 - 9)) & 1) != 0)
  {
    return 1;
  }
  if (v10 - 55 < 2)
    return 1;
  if (v10 != 45)
    return 0;
  v13 = sub_22F114198(*(_QWORD *)(v9 + 24));
  if (v13)
    v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    return 1;
  v15 = v13;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 104) + 96), *(_QWORD *)(v13 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v15 + 128) + 8) & 0x100) != 0 || (result = sub_22E49F6F8(v15), (_DWORD)result))
  {
    if ((sub_22F333374(v15) & 1) == 0)
      return sub_22EFD12A8(v15);
    return 0;
  }
  return result;
}

uint64_t sub_22F111968(unint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 <= 3)
  {
    v16 = sub_22EF5BA38(a2, *a1);
    return sub_22F111968(&v16, a2);
  }
  v5 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v5 & 8) != 0 && (*(_WORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
    return 0;
  if (sub_22F111B38(a1) > 1)
    return 0;
  v6 = (uint64_t *)(*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  if ((*(_BYTE *)(*v6 + 17) & 4) != 0)
    return 0;
  if ((sub_22F111384(*v6) & 1) != 0)
    return 1;
  if ((sub_22F1110EC(v7, 0) & 1) != 0)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(v8 + 16);
  if (v8)
    v10 = v9 == 11;
  else
    v10 = 0;
  if (v10)
  {
    if (((v9 >> 19) & 0x1FF) - 166 < 0x35)
      return 1;
  }
  else if (v8 && v9 == 44)
  {
    v11 = sub_22F114198(*(_QWORD *)(v8 + 24));
    if ((*(_BYTE *)(v11 + 74) & 1) != 0 || *(_QWORD *)(v11 + 128) > 7uLL)
      return 1;
    v8 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v9) = *(_BYTE *)(v8 + 16);
  }
  else if ((v9 - 9) < 0x1Fu && ((0x40C0000Bu >> (v9 - 9)) & 1) != 0)
  {
    return 1;
  }
  v12 = v9;
  v13 = v9 - 55;
  if (v13 < 2)
    return 1;
  if (v12 == 45)
  {
    v14 = sub_22F114198(*(_QWORD *)(v8 + 24));
    if (v14)
      v15 = (*(_DWORD *)(v14 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v15 = 0;
    LOBYTE(v13) = !v15 || sub_22EFD12A8(v14);
  }
  return (v12 == 45) & v13;
}

uint64_t sub_22F111B38(_QWORD *a1)
{
  _QWORD *i;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  int v11;
  uint64_t v12;

  for (i = a1; ; i = (_QWORD *)(v3 + 32))
  {
    v3 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (!v3 || (*(_DWORD *)(v3 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
      v6 = *(_DWORD *)(v5 + 16);
      if ((v6 & 0xFEu) - 2 > 3)
        break;
      v12 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
      v11 = *(_DWORD *)(v5 + 16);
      v3 = sub_22F10CF48(v3);
      LOBYTE(v6) = v11;
      v5 = v12;
      if (!v3)
        break;
    }
  }
  if (v6 == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v5 + 24)) + 75) & 0x20) != 0)
    return 5;
  v7 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0)
    v8 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v8 = 0;
  result = (v8 >> 6) & 7;
  if ((_DWORD)result != 2 && (_DWORD)result != 3)
  {
    if ((v7 & 8) == 0)
      return ((v8 | (v7 | *a1) & 7) >> 2) & 1;
    if ((*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) == 0
      || (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 2) == 0)
    {
      return ((v8 | (v7 | *a1) & 7) >> 2) & 1;
    }
    else
    {
      return 4;
    }
  }
  return result;
}

uint64_t sub_22F111C54(_QWORD *a1)
{
  _QWORD *i;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;

  for (i = a1; ; i = (_QWORD *)(v3 + 32))
  {
    v3 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (!v3 || (*(_DWORD *)(v3 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
      v6 = *(_DWORD *)(v5 + 16);
      if ((v6 & 0xFEu) - 2 > 3)
        break;
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
      v10 = *(_DWORD *)(v5 + 16);
      v3 = sub_22F10CF48(v3);
      LOBYTE(v6) = v10;
      v5 = v11;
      if (!v3)
        break;
    }
  }
  if (v6 == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v5 + 24)) + 75) & 0x10) != 0)
    return 3;
  v7 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) == 0)
    return 0;
  v9 = (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
  if (v9 == 2)
    return 1;
  else
    return 2 * (v9 == 3);
}

BOOL sub_22F111D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v13;
  BOOL v14;

  if ((*(_BYTE *)(a1 + 17) & 4) != 0)
    return 0;
  v3 = a1;
  while (1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 4) != 0 && v4 && (*(_DWORD *)(v4 + 16) & 0xFF800FF) == 86507531)
      return 1;
    if (*(_DWORD *)(v4 + 16) == 5)
      return 0;
    if (!v3)
      goto LABEL_11;
LABEL_10:
    if ((*(_DWORD *)(v3 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
    {
      v6 = v3;
      goto LABEL_15;
    }
LABEL_11:
    while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
    {
      v6 = sub_22F10CF48(v3);
      if (!v6)
        break;
LABEL_15:
      v3 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v3)
        goto LABEL_10;
    }
    if ((sub_22F1110EC(v3, 0) & 1) != 0)
      return 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_DWORD *)(v7 + 16);
    if (v7)
      v9 = v8 == 11;
    else
      v9 = 0;
    if (v9)
    {
      if (((v8 >> 19) & 0x1FF) - 166 < 0x35)
        return 1;
    }
    else if (v7 && v8 == 44)
    {
      v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
      if ((*(_BYTE *)(v10 + 74) & 1) != 0 || *(_QWORD *)(v10 + 128) > 7uLL)
        return 1;
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
      v8 = *(_DWORD *)(v7 + 16);
    }
    else if ((v8 - 9) < 0x1Fu && ((0x40C0000Bu >> (v8 - 9)) & 1) != 0)
    {
      return 1;
    }
    if ((v8 & 0xFE) == 0x28)
      return 1;
    if (v8 <= 0x38u && ((1 << v8) & 0x180000000001000) != 0)
      return 1;
    if (v8 == 45)
      break;
    if (!v3 || *(_BYTE *)(v3 + 16) != 6)
    {
      if (v8 != 6)
        return (v8 & 0xFF800FF) == 0x798000B || v8 == 14;
      v3 = sub_22F10CF48(v3);
      if (!v3)
        return (v8 & 0xFF800FF) == 0x798000B || v8 == 14;
    }
    v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v3 + 17) & 4) != 0)
      return 0;
  }
  v13 = sub_22F114198(*(_QWORD *)(v7 + 24));
  if (v13)
    v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    return 1;
  return sub_22EAE4B48(v13);
}

unint64_t sub_22F111FA8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v2 + 16);
  if (v2)
    v4 = v3 == 11;
  else
    v4 = 0;
  if (!v4)
  {
    if (v2 && v3 == 44)
    {
      v5 = sub_22F114198(*(_QWORD *)(v2 + 24));
      if ((*(_BYTE *)(v5 + 74) & 1) == 0 && *(_QWORD *)(v5 + 128) <= 7uLL)
      {
        v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        goto LABEL_14;
      }
    }
    else if ((v3 - 9) >= 0x1Fu || ((0x40C0000Bu >> (v3 - 9)) & 1) == 0)
    {
      goto LABEL_14;
    }
    return 1;
  }
  if (((v3 >> 19) & 0x1FF) - 166 < 0x35)
    return 1;
LABEL_14:
  v6 = v3 > 0x38u;
  v7 = (1 << v3) & 0x180010000000000;
  if (!v6 && v7 != 0)
    return 1;
  result = sub_22F10C2A4(a1);
  if (result)
  {
    v10 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    {
      return 0;
    }
    else
    {
      result = sub_22EAE4B48(result);
      if ((_DWORD)result)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
        return ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v10 + 128) + 8) >> 6) & 1;
      }
    }
  }
  return result;
}

uint64_t sub_22F1120D0(uint64_t a1)
{
  int v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x400) != 0)
    return 0;
  for (i = a1; ; v1 = *(_DWORD *)(i + 16))
  {
    if ((v1 & 0xFEu) - 6 > 0xFFFFFFFB)
    {
      v3 = i;
      goto LABEL_8;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v3 = sub_22F10CF48(i);
    if (!v3)
      break;
LABEL_8:
    i = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  if ((sub_22F1110EC(i, 0) & 1) != 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5)
    v7 = v6 == 11;
  else
    v7 = 0;
  if (v7)
  {
    if (((v6 >> 19) & 0x1FF) - 166 < 0x35)
      return 1;
LABEL_24:
    v9 = v6;
    v10 = v6 - 55;
    if (v10 < 2)
      return 1;
    if (v9 == 45)
    {
      v11 = sub_22F114198(*(_QWORD *)(v5 + 24));
      if (v11)
        v12 = (*(_DWORD *)(v11 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v12 = 0;
      LOBYTE(v10) = !v12
                 || (v13 = v11,
                     sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v11 + 104) + 96), *(_QWORD *)(v11 + 104)),
                     (**(_QWORD **)(v13 + 128) & 0x1000) != 0);
    }
    return (v9 == 45) & v10;
  }
  if (!v5 || v6 != 44)
  {
    if ((v6 - 9) < 0x1Fu && ((0x40C0000Bu >> (v6 - 9)) & 1) != 0)
      return 1;
    goto LABEL_24;
  }
  v8 = sub_22F114198(*(_QWORD *)(v5 + 24));
  if ((*(_BYTE *)(v8 + 74) & 1) == 0 && *(_QWORD *)(v8 + 128) <= 7uLL)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v6) = *(_BYTE *)(v5 + 16);
    goto LABEL_24;
  }
  return 1;
}

uint64_t sub_22F112268(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 44)
  {
    v4 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 40);
    v5 = v4 & 7;
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
      return 0;
    v8 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v8 != 11)
      return 0;
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 19);
    if (v9 != 0x61765F6E67696C61 || v10 != 0x745F6C61765F6E67)
      return 0;
    v12 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 16);
    v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0)
    {
      v13 = (_QWORD *)*v13;
      if (v13)
      {
LABEL_15:
        if (sub_22EFC84D4((unint64_t)v13))
          return 1;
      }
    }
    else if (v13)
    {
      goto LABEL_15;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F11233C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  _QWORD *v15;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 44)
  {
    v4 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 40);
    v5 = v4 & 7;
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
      return 0;
    v8 = *(_QWORD *)(v6 + 16);
    if (*(_DWORD *)v8 != 19)
      return 0;
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    v11 = *(_QWORD *)(v8 + 27);
    v12 = v9 == 0x645F657079745F5FLL && v10 == 0x6F74706972637365;
    if (!v12 || v11 != 0x745F726F74706972)
      return 0;
    v14 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 16);
    v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if ((v14 & 4) != 0)
    {
      v15 = (_QWORD *)*v15;
      if (v15)
      {
LABEL_18:
        if (sub_22EFC84D4((unint64_t)v15))
          return 1;
      }
    }
    else if (v15)
    {
      goto LABEL_18;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F112424(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 44)
  {
    v4 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 40);
    v5 = v4 & 7;
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (!v7)
    {
      v8 = *(_DWORD **)(v6 + 16);
      if (*v8 == 4 && v8[4] == 1702132066)
      {
        v9 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 16);
        v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 4) != 0)
        {
          v10 = (_QWORD *)*v10;
          if (v10)
          {
LABEL_11:
            if (sub_22EFC84D4((unint64_t)v10))
              return 1;
          }
        }
        else if (v10)
        {
          goto LABEL_11;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_22F1124D8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
  {
    if (((*(_DWORD *)(v1 + 16) >> 19) & 0x1FFu) - 166 < 0x10)
      return (0xF0FFu >> ((*(_DWORD *)(v1 + 16) >> 19) + 90)) & 1;
  }
  else if (v2 == 44
         && (*(_BYTE *)(a1 + 17) & 4) == 0
         && *(_QWORD *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 136) >= 0x10uLL)
  {
    return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 76) & 0x80) == 0;
  }
  return 0;
}

char *sub_22F112570(int a1)
{
  return off_24FAC7A58[a1];
}

BOOL sub_22F112590(uint64_t a1)
{
  unsigned int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = v1;
  if (a1 && v1 == 24 || a1 && v1 == 18)
  {
    v3 = (v1 >> 19);
    v4 = 1;
  }
  else
  {
    v3 = (v1 >> 19);
    if (v2 != 20)
      v3 = 0;
    v4 = v2 == 20;
    if (!a1)
    {
      v3 = 0;
      v4 = 0;
    }
  }
  return (v3 - 7) < 0xFFFFFFFE && v4;
}

uint64_t sub_22F1125EC(uint64_t a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_22F11261C
                                                        + 4 * word_22F4A90D0[(*(_DWORD *)(a1 + 16) >> 19) & 0x1FF]))("void", 4);
}

const char *sub_22F11261C()
{
  return "char";
}

const char *sub_22F11262C@<X0>(_QWORD *a1@<X8>)
{
  if ((*a1 & 0x400000000) != 0)
    return "__wchar_t";
  else
    return "wchar_t";
}

const char *sub_22F112658()
{
  return "__read_only image1d_t";
}

const char *sub_22F1132CC()
{
  return "__metal_intersection_function_table_t";
}

const char *sub_22F1132DC()
{
  return "__metal_instance_acceleration_structure_t";
}

const char *sub_22F1132EC()
{
  return "__metal_primitive_acceleration_structure_t";
}

const char *sub_22F1132FC()
{
  return "__metal_mesh_t";
}

const char *sub_22F113308()
{
  return "__metal_mesh_grid_properties_t";
}

const char *sub_22F113314()
{
  return "__metal_intersection_query_t";
}

const char *sub_22F1133B0()
{
  return "<OpenMP array section type>";
}

unint64_t sub_22F1133DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *a1 & 0xFFFFFFFFFFFFFFF0;
  v5 = *(_QWORD *)v4;
  v6 = *(_DWORD *)(*(_QWORD *)v4 + 16);
  if (*(_QWORD *)v4 && (*(_DWORD *)(*(_QWORD *)v4 + 16) & 0xFE) == 0x28)
  {
    if ((v6 & 0x100000) != 0)
    {
      do
      {
LABEL_4:
        while (1)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v5)
            break;
          v7 = *(_DWORD *)(v5 + 16);
          if ((v7 & 0xFE) != 0x28)
            break;
          if ((v7 & 0x100000) == 0)
            return *(_QWORD *)(v5 + 32);
        }
        v5 = sub_22F10CF48(v5);
      }
      while ((*(_DWORD *)(v5 + 16) & 0x100000) != 0);
    }
    return *(_QWORD *)(v5 + 32);
  }
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v9 & 0xFE) == 0x28)
  {
    v10 = sub_22F10CF48(v5);
    if (v10)
    {
      v5 = v10;
      if ((*(_DWORD *)(v10 + 16) & 0x100000) != 0)
        goto LABEL_4;
      return *(_QWORD *)(v5 + 32);
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 1) == 0 || (v6 & 0x400) == 0 && v9 != 45)
  {
    if ((v8 & 0xF) != 0)
      v5 = (uint64_t)sub_22F10D2BC(v3);
    return v5 & 0xFFFFFFFFFFFFFFF0;
  }
  return v3;
}

uint64_t sub_22F1134E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, unint64_t a5, unsigned __int16 *a6)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;

  v8 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v9 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v10 = a5;
  else
    v10 = a1 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v10;
  v11 = *a6;
  *(_DWORD *)(a1 + 16) = v8 | *(_DWORD *)(a1 + 16) & 0xFFF80000 | 0x1A;
  v12 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFF0007FFFFLL | (v11 << 19);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = v12 & 0xFFFFFFE3FFFFFFFFLL | ((unint64_t)(*((_DWORD *)a6 + 1) & 7) << 34);
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13 & 0xFFC0003CFFFFFFFFLL | ((unint64_t)(*((_DWORD *)a6 + 3) & 3) << 32) & 0xFFC0003FFFFFFFFFLL | ((unint64_t)a4 << 38);
  *(_QWORD *)(a1 + 16) = v14;
  v15 = v14 & 0xFC3FFFFFFFFFFFFFLL | ((unint64_t)(*((_DWORD *)a6 + 4) & 0xF) << 54);
  *(_QWORD *)(a1 + 16) = v15;
  v16 = v15 & 0xFBFFFFFFFFFFFFFFLL | ((unint64_t)(*((_QWORD *)a6 + 8) != 0) << 58);
  *(_QWORD *)(a1 + 16) = v16;
  v17 = *((_BYTE *)a6 + 2);
  v18 = v16 & 0xF7FFFFFFFFFFFFFFLL | ((unint64_t)(v17 & 1) << 59);
  *(_QWORD *)(a1 + 16) = v18;
  v19 = v18 & 0xEFFFFFFFFFFFFFFFLL | ((unint64_t)((a6[1] & 2) != 0) << 60);
  *(_QWORD *)(a1 + 16) = v19;
  if (*((_DWORD *)a6 + 4) == 2)
  {
    *(_DWORD *)((a1 + 8 * a4 + 4 * (v17 & 1) + 47) & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)a6 + 4);
    v12 = *(_QWORD *)(a1 + 16);
    v19 = v12;
  }
  v20 = a1 + 40;
  if ((v19 & 0x3FFFC000000000) != 0)
  {
    v21 = 0;
    LODWORD(v19) = v12;
    do
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8 * v21) & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1700 | v19;
      *(_QWORD *)(v20 + 8 * v21) = *(_QWORD *)(a3 + 8 * v21);
      ++v21;
      v19 = *(_QWORD *)(a1 + 16);
      v22 = v19 >> 38;
    }
    while (v21 != (unsigned __int16)(v19 >> 38));
  }
  else
  {
    v22 = v19 >> 38;
  }
  v23 = (v19 >> 54) & 0xF;
  if ((_DWORD)v23 == 2)
  {
    v33 = *((_QWORD *)a6 + 4);
    if (v33)
    {
      v34 = 0;
      v35 = ((v20 + 8 * (unsigned __int16)v22 + 4 * ((v19 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8 * ((v19 & 0x3C0000000000000) == 0x80000000000000);
      v36 = *((_QWORD *)a6 + 3);
      v37 = 8 * v33;
      do
      {
        v38 = *(_QWORD *)(v36 + 8 * v34);
        *(_DWORD *)(a1 + 16) |= *(_DWORD *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x300;
        *(_QWORD *)(v35 + 8 * v34++) = v38;
        v37 -= 8;
      }
      while (v37);
    }
  }
  else if ((v23 - 6) <= 2)
  {
    v39 = *((_QWORD *)a6 + 5);
    v40 = ((v20 + 8 * (unsigned __int16)v22 + 4 * ((v19 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8 * ((v19 & 0x3C0000000000000) == 0x80000000000000);
    v41 = a1 & 0xFFFFFFFFFFFFFFF0;
    v42 = sub_22E49F5F8(a1);
    v9 = v41;
    *(_QWORD *)(v40 + 8 * v42) = v39;
    *(_DWORD *)(a1 + 16) |= (**((_DWORD **)a6 + 5) >> 5) & 0x300;
  }
  else if ((_DWORD)v23 == 9)
  {
    *(_QWORD *)(((v20 + 8 * (unsigned __int16)v22 + 4 * ((v19 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 8 * ((v19 & 0x3C0000000000000) == 0x80000000000000)) = *((_QWORD *)a6 + 6);
  }
  else if ((_DWORD)v23 == 10)
  {
    v24 = a1 & 0xFFFFFFFFFFFFFFF0;
    v25 = ((v20 + 8 * (unsigned __int16)v22 + 4 * ((v19 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8 * ((v19 & 0x3C0000000000000) == 0x80000000000000)
        + 8 * sub_22E49F5F8(a1);
    v26 = sub_22E49F5F8(a1);
    v9 = v24;
    v27 = (_QWORD *)(v25 + 8 * HIDWORD(v26));
    *v27 = *((_QWORD *)a6 + 6);
    v27[1] = *((_QWORD *)a6 + 7);
  }
  v28 = *(_QWORD *)(a1 + 8);
  if (v28 == v9)
  {
    v29 = *(_QWORD *)(a1 + 16);
    if (((v29 >> 54) & 0xB | 4) != 6)
      goto LABEL_22;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    LODWORD(v29) = *(_DWORD *)(a1 + 16);
LABEL_20:
    *(_DWORD *)(a1 + 16) = v29 | 0x600;
  }
LABEL_22:
  v30 = *(_QWORD *)(a1 + 16);
  if (*((_QWORD *)a6 + 8))
  {
    v43 = sub_22F115584(a1);
    if ((v30 & 0x3FFFC000000000) != 0)
    {
      v44 = 0;
      do
      {
        *(_BYTE *)(v43 + v44) = *(_BYTE *)(*((_QWORD *)a6 + 8) + v44);
        ++v44;
        v30 = *(_QWORD *)(a1 + 16);
      }
      while (v44 != (unsigned __int16)(v30 >> 38));
    }
  }
  if (*((_DWORD *)a6 + 1) <= 7u && (*((_DWORD *)a6 + 2) & 0xC) == 0)
  {
    *(_QWORD *)(a1 + 16) = v30 & 0xFFFFFFDFFFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v30 | 0x2000000000;
    *(_QWORD *)((sub_22F115584(a1) + ((v30 >> 38) & (unsigned __int16)((uint64_t)(32 * v30) >> 63)) + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_QWORD *)(a6 + 2);
  }
  if ((a6[1] & 1) != 0)
    *(_DWORD *)(v20 + 8 * (unsigned __int16)(*(_QWORD *)(a1 + 16) >> 38)) = *((_DWORD *)a6 + 18);
  return a1;
}

uint64_t sub_22F1138E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_22F257D3C(a1);
  if (v2)
    return *(_BYTE *)(v2 + 2) & 1;
  v4 = *(_QWORD *)(a1 + 16);
  if ((v4 & 0x3C0000000000000) != 0x80000000000000)
    return 0;
  v5 = (_DWORD *)((a1 + 8 * (unsigned __int16)(v4 >> 38) + 4 * ((v4 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v5;
  v7 = v5 + 2;
  v6 = v8;
  if (!v8)
    return 0;
  v9 = 8 * v6;
  while (1)
  {
    v10 = *(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0);
    result = 1;
    if ((*(_DWORD *)(v10 + 16) & 0x400) != 0 || *(_DWORD *)(v10 + 16) == 36)
      break;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
      && sub_22F10CF48(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0)))
    {
      return 1;
    }
    ++v7;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  return result;
}

uint64_t sub_22F1139AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v2 = sub_22F257D3C(a1);
  if (v2)
    return (*(unsigned __int8 *)(v2 + 1) >> 6) & 1;
  v4 = *(_QWORD *)(a1 + 16);
  if ((v4 & 0x3C0000000000000) != 0x80000000000000)
    return 0;
  v5 = (_DWORD *)((a1 + 8 * (unsigned __int16)(v4 >> 38) + 4 * ((v4 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v5;
  v6 = (uint64_t *)(v5 + 2);
  v7 = v8;
  if (!v8)
    return 0;
  v9 = 8 * v7 - 8;
  do
  {
    v10 = *v6++;
    v11 = *(_DWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16);
    result = (v11 >> 9) & 1;
    if ((v11 & 0x200) != 0)
      break;
    v12 = v9;
    v9 -= 8;
  }
  while (v12);
  return result;
}

uint64_t sub_22F113A44(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_QWORD *)(a1 + 16) >> 54) & 0xFLL;
  if ((_DWORD)v1)
    __asm { BR              X12 }
  return 2;
}

void sub_22F113AA0(uint64_t a1@<X8>)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  v2 = 0;
  v3 = v1 & 0x3C0000000000000;
  v4 = (_DWORD *)((a1 + 8 * (unsigned __int16)(v1 >> 38) + 4 * ((v1 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
  v5 = &v4[2 * ((v1 & 0x3C0000000000000) == 0x80000000000000)];
  while (1)
  {
    v6 = v3 == 0x80000000000000 ? *v4 : 0;
    if (v2 == v6)
      break;
    v7 = *(_QWORD *)(*(_QWORD *)&v5[2 * v2] & 0xFFFFFFFFFFFFFFF0);
    if ((!v7 || *(_BYTE *)(v7 + 16) != 36)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36 || !sub_22F10CF48(v7)))
    {
      JUMPOUT(0x22F113A64);
    }
    ++v2;
  }
  JUMPOUT(0x22F113A68);
}

void sub_22F113B3C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, char a7)
{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  _QWORD v48[2];
  char v49;
  uint64_t v50;

  v13 = *(_DWORD *)(a1 + 8);
  if (v13 >= *(_DWORD *)(a1 + 12))
  {
    v39 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v39;
    v13 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v13) = a2;
  v14 = *(_DWORD *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  if (v15 >= v14)
  {
    v40 = HIDWORD(a2);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v40;
    v15 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v15) = HIDWORD(a2);
  v16 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v16;
  if (a4)
  {
    v17 = a4;
    do
    {
      v19 = *a3++;
      v18 = v19;
      if (v16 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v16) = v18;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v21;
      if (v21 >= v20)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v21) = HIDWORD(v18);
      v16 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v16;
      --v17;
    }
    while (v17);
  }
  v22 = (a5[1] & 1 | (2 * *((_DWORD *)a5 + 3))) + 8 * *((_DWORD *)a5 + 4);
  if (v16 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v16) = v22;
  v23 = *(_DWORD *)(a1 + 12);
  v24 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v24;
  v25 = *((_DWORD *)a5 + 1);
  if (v24 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v24) = v25;
  v26 = *(_DWORD *)(a1 + 12);
  v27 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v27;
  v28 = *((_DWORD *)a5 + 2);
  if (v27 >= v26)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v27) = v28;
  ++*(_DWORD *)(a1 + 8);
  v29 = *((_DWORD *)a5 + 4);
  if (v29 == 2)
  {
    v41 = *((_QWORD *)a5 + 4);
    if (v41)
    {
      v42 = (uint64_t *)*((_QWORD *)a5 + 3);
      v43 = 8 * v41;
      do
      {
        v44 = *v42++;
        sub_22E3CF554(a1, v44);
        v43 -= 8;
      }
      while (v43);
    }
  }
  else if ((v29 - 6) <= 2)
  {
    v45 = (unsigned __int8 *)*((_QWORD *)a5 + 5);
    v49 = a7;
    v48[0] = &off_24FAC6E70;
    v48[1] = a1;
    v50 = a6;
    sub_22F0E9FEC(v48, v45);
  }
  else if ((v29 - 9) <= 1)
  {
    v35 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a5 + 6) + 32))(*((_QWORD *)a5 + 6));
    v36 = *(_DWORD *)(a1 + 8);
    if (v36 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v36) = v35;
    v37 = *(_DWORD *)(a1 + 12);
    v38 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v38;
    if (v38 >= v37)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v38) = HIDWORD(v35);
    ++*(_DWORD *)(a1 + 8);
  }
  v30 = *(_DWORD *)(a1 + 8);
  if (a4 && *((_QWORD *)a5 + 8))
  {
    v46 = 0;
    do
    {
      v47 = *(unsigned __int8 *)(*((_QWORD *)a5 + 8) + v46);
      if (v30 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v30) = v47;
      v30 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v30;
      ++v46;
    }
    while (a4 != v46);
  }
  v31 = *a5;
  if (v30 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v30) = v31;
  v32 = *(_DWORD *)(a1 + 12);
  v33 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v33;
  v34 = *((unsigned __int8 *)a5 + 2);
  if (v33 >= v32)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v33) = (v34 >> 1) & 1;
  ++*(_DWORD *)(a1 + 8);
}

void sub_22F113F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 v9[40];

  v6 = (uint64_t *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (unsigned __int16)(*(_QWORD *)(a1 + 16) >> 38);
  sub_22E4913B4(a1, (uint64_t)v9);
  sub_22F113B3C(a2, v7, v6, v8, v9, a3, *(_QWORD *)(a1 + 8) == (a1 & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F113FE4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0) + 32);
  v3 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 28;
  else
    v4 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    do
    {
      if (*(_QWORD *)(v3 + 32) != v5)
        break;
      result = sub_22F113FE4(v3);
      v3 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
    }
    while (v3 && *(_BYTE *)(v3 + 16) == 28);
  }
  return result;
}

uint64_t sub_22F11405C(uint64_t result, unsigned int *a2, unint64_t a3)
{
  unsigned int v3;
  int v4;
  int v5;
  unint64_t v6;

  v3 = *a2;
  v4 = (*a2 & 0x18000) != 0;
  v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 16);
  v6 = result & 0xFFFFFFFFFFFFFFF0;
  if (a3 >= 0x10)
    v6 = a3;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFF80000 | (v3 >> 5) & 0x1300 | (v4 << 10) | v5 & 0x800 | 0x30;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_22F1140B8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;

  v4 = (*(_DWORD *)a2 & 0x18000) != 0;
  v5 = (*(_DWORD *)a2 >> 12) & 4 | (*(_DWORD *)a2 >> 13) & 0x13;
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v7 = result & 0xFFFFFFFFFFFFFFF0;
  if (a4 >= 0x10)
    v7 = a4;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFF80000 | (v4 << 10) | (v5 << 8) | 0xD | v6 & 0x800;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  return result;
}

uint64_t sub_22F114128(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  __int16 v6;

  v3 = *(_QWORD *)(a2 + 16832);
  v4 = *a3;
  v5 = (*a3 & 0x18000) != 0;
  v6 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0) + 16);
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = result & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFF80000 | (v5 << 10) | (((v4 >> 12) & 4 | (v4 >> 13) & 0x13) << 8) | 0xD | v6 & 0x800;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_22F114198(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;

  if (!a1)
    return 0;
  v2 = 0;
  v3 = a1;
  while ((*(_BYTE *)(v3 + 74) & 3) == 0)
  {
    if ((*(_BYTE *)(v3 + 96) & 3) != 0)
    {
      if (v2)
        return a1;
      v2 = 1;
    }
    v4 = sub_22E3CD31C((uint64_t *)(v3 + 96), v3);
    if (v4 != a1)
    {
      v3 = v4;
      if (v4)
        continue;
    }
    return a1;
  }
  return v3;
}

uint64_t sub_22F114208(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unsigned int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *i;
  uint64_t v20;
  uint64_t v21;

  v2 = (char *)operator new(8uLL);
  v3 = 0;
  v4 = 0;
  *(_QWORD *)v2 = a1;
  v5 = v2 + 8;
  v6 = v2 + 8;
  while (1)
  {
    v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)&v2[8 * v3] + 24));
    v8 = sub_22EFC3B90(v7);
    if (v8)
      break;
LABEL_34:
    v3 = ++v4;
    if (v4 >= (unint64_t)((v6 - v2) >> 3))
    {
      v21 = 0;
      if (!v2)
        return v21;
      goto LABEL_40;
    }
  }
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 48);
  if ((v10 & 1) != 0)
  {
    v21 = 1;
    goto LABEL_40;
  }
LABEL_4:
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v12 || *(_BYTE *)(v12 + 16) != 45)
      goto LABEL_30;
    v13 = v6;
    if (v2 != v6)
    {
      v13 = v2;
      while (*(_QWORD *)v13 != v12)
      {
        v13 += 8;
        if (v13 == v6)
        {
          v13 = v6;
          break;
        }
      }
    }
    if (v13 == v6)
    {
      if (v6 >= v5)
      {
        v14 = (v6 - v2) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        if ((v5 - v2) >> 2 > v15)
          v15 = (v5 - v2) >> 2;
        if ((unint64_t)(v5 - v2) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 61)
            sub_22E3B3F8C();
          v17 = (char *)operator new(8 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v12;
        for (i = v18 + 8; v6 != v2; v18 -= 8)
        {
          v20 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v18 - 1) = v20;
        }
        v5 = &v17[8 * v16];
        if (v2)
          operator delete(v2);
        v6 = i;
        v2 = v18;
      }
      else
      {
        *(_QWORD *)v6 = v12;
        v6 += 8;
      }
    }
LABEL_30:
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        goto LABEL_34;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 <= 2)
      {
        v10 = *(_QWORD *)(v9 + 48);
        if ((v10 & 1) == 0)
          goto LABEL_4;
        break;
      }
    }
  }
  v21 = 1;
  if (!v2)
    return v21;
LABEL_40:
  operator delete(v2);
  return v21;
}

uint64_t sub_22F1143F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v18 = a2;
    v19 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v18;
    a3 = v19;
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  v5 = *(_DWORD *)(v3 + 12);
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (v6 >= v5)
  {
    v20 = HIDWORD(a2);
    v21 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v20;
    a3 = v21;
    v6 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v6) = HIDWORD(a2);
  v7 = *(_DWORD *)(v3 + 12);
  v8 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v8;
  v9 = *(_DWORD *)(a3 + 4);
  if (v8 >= v7)
  {
    v22 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v22;
    v8 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v8) = v9;
  v10 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v10;
  v11 = *(unsigned int *)(a3 + 4);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = (uint64_t *)(*(_QWORD *)(a3 + 8) + 8);
    do
    {
      v15 = *v13;
      v13 += 3;
      v14 = v15;
      if (v10 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v10) = v14;
      v16 = *(_DWORD *)(v3 + 12);
      v17 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v17;
      if (v17 >= v16)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v17) = HIDWORD(v14);
      v10 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v10;
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_22F1145A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  if (!a2)
    return 0;
  v3 = 32 * a2 - 32;
  do
  {
    v4 = sub_22F0EEB00(a1);
    v5 = v4;
    result = (v4 >> 1) & 1;
    if ((v5 & 2) != 0)
      break;
    a1 += 32;
    v7 = v3;
    v3 -= 32;
  }
  while (v7);
  return result;
}

uint64_t sub_22F1145FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  __int128 v22;
  unsigned int v24;
  int v25;
  uint64_t v26;

  v26 = a2;
  v11 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v12 = a5;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v25 = *(_BYTE *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 17) & 0x1E;
  else
    v25 = 6;
  v13 = sub_22F0F0A4C(&v26) & 1 | v25;
  if (v12 >= 0x10)
    v14 = v12;
  else
    v14 = v11;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v14;
  v15 = *(_DWORD *)(a1 + 16) & 0xFFF00000 | (v13 << 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 16) = v15 | ((a6 > 0xF) << 19) | 0x2E;
  *(_DWORD *)(a1 + 20) = a4;
  if (!a4)
  {
    if (a6 < 0x10)
      return a1;
    v24 = 0;
LABEL_20:
    *(_QWORD *)(a1 + 40 + 24 * v24) = a6;
    return a1;
  }
  v16 = 24 * a4;
  v17 = a1 + 40;
  do
  {
    v18 = sub_22F0EEB00(a3);
    v19 = *(_DWORD *)(a1 + 16);
    v20 = v18 & 3 | (16 * ((v18 >> 3) & 1)) | (v19 >> 8) & 0x1F;
    v21 = v19 & 0xFFFFE0FF | ((v18 & 3 | (16 * ((v18 >> 3) & 1)) & 0x1F | (v19 >> 8) & 0x1F) << 8);
    *(_DWORD *)(a1 + 16) = v21;
    if (*(_DWORD *)a3 == 1)
      *(_DWORD *)(a1 + 16) = v21 & 0xFFFFE0FF | ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 17) & 8 | v20 & 0x1F) << 8);
    v22 = *(_OWORD *)a3;
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)v17 = v22;
    v17 += 24;
    a3 += 24;
    v16 -= 24;
  }
  while (v16);
  if ((*(_BYTE *)(a1 + 18) & 8) != 0)
  {
    v24 = *(_DWORD *)(a1 + 20);
    goto LABEL_20;
  }
  return a1;
}

void sub_22F114774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    v14 = a2;
    v12 = a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v14;
    a4 = v12;
    v8 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = a2;
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  if (v10 >= v9)
  {
    v15 = HIDWORD(a2);
    v13 = a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v15;
    a4 = v13;
    v10 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v10) = HIDWORD(a2);
  ++*(_DWORD *)(a1 + 8);
  if (a4)
  {
    v11 = 24 * a4;
    do
    {
      sub_22F0EED38(a3, a1, a5);
      a3 += 24;
      v11 -= 24;
    }
    while (v11);
  }
}

uint64_t sub_22F114870(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;

  if ((*(_DWORD *)(result + 16) & 0x2000) == 0)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 8);
    if (v2 == (result & 0xFFFFFFFFFFFFFFF0))
      __asm { BR              X12 }
    v3 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
    result = sub_22F114870(v3);
    v4 = *(_DWORD *)(v1 + 16) | 0x2000;
    *(_DWORD *)(v1 + 16) = v4;
    v5 = v4 & 0xFFFE3FFF | (((*(_DWORD *)(v3 + 16) >> 14) & 7) << 14);
    *(_DWORD *)(v1 + 16) = v5;
    *(_DWORD *)(v1 + 16) = v5 & 0xFFFDFFFF | (((*(_DWORD *)(v3 + 16) >> 17) & 1) << 17);
  }
  return result;
}

void sub_22F11497C()
{
  JUMPOUT(0x22F114924);
}

void sub_22F114984()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_22F114198(*(_QWORD *)(v0 + 24));
  sub_22EFB948C(v1);
  JUMPOUT(0x22F114940);
}

void sub_22F114B4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_22F409D88(v0);
  sub_22EFB948C(v1);
  JUMPOUT(0x22F1148D4);
}

uint64_t sub_22F114B68(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2 != 11)
    __asm { BR              X11 }
  return 22;
}

void sub_22F114BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F114B68(v2, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
  JUMPOUT(0x22F114B94);
}

void sub_22F114BE8(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;

  v3 = sub_22F114198(*(_QWORD *)(a2 + 24));
  sub_22EFB6A00(v2, v3);
  JUMPOUT(0x22F114BE0);
}

void sub_22F114C04()
{
  JUMPOUT(0x22F114BD0);
}

void sub_22F114C0C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  a13 = sub_22F114B68(v13, *(_QWORD *)(a2[3] & 0xFFFFFFFFFFFFFFF0));
  v15 = (unsigned __int16)(a2[2] >> 38);
  if ((unsigned __int16)(a2[2] >> 38))
  {
    v16 = a2 + 5;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      v19 = sub_22F114B68(v13, *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0));
      sub_22EF55F74(&a13, v19);
      v17 -= 8;
    }
    while (v17);
  }
  JUMPOUT(0x22F114B94);
}

void sub_22F114C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  unsigned __int8 v15;

  a13 = sub_22F114B68(v13, *(_QWORD *)(a2 + 40));
  v15 = sub_22F114B68(v13, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
  sub_22EF55F74(&a13, v15);
  JUMPOUT(0x22F114B94);
}

void sub_22F114CAC(uint64_t a1, uint64_t a2)
{
  sub_22F409D88(a2);
  JUMPOUT(0x22F114BF0);
}

void sub_22F114CB8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;

  while ((a3 & 0x100000) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
    a1 = v3;
    if (!v3 || (a3 = *(_DWORD *)(v3 + 16), (a3 & 0xFE) != 0x28))
    {
      a1 = sub_22F10CF48(a1);
      a3 = *(_DWORD *)(a1 + 16);
    }
    a2 = a1;
  }
  sub_22F114BCC(a1, a2);
}

uint64_t sub_22F114CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != (a2 & 0xFFFFFFFFFFFFFFF0))
    a2 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
  return sub_22F114B68(a1, a2);
}

uint64_t sub_22F114D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  llvm *v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  *(_OWORD *)v7 = 0u;
  v6 = 1;
  for (i = 1; i != 17; i += 2)
    v7[i - 1] = (llvm *)-1;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 != (a1 & 0xFFFFFFFFFFFFFFF0))
    v1 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22F114B68((uint64_t)&v6, v1);
  if ((v6 & 1) == 0)
    llvm::deallocate_buffer(v7[0], (void *)(16 * LODWORD(v7[1])));
  return v4;
}

uint64_t sub_22F114DF4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v5;

  v1 = sub_22F10D774(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (v1)
  {
    while (1)
    {
      v5 = (*(_DWORD *)(v1 + 16) >> 19) - 33;
      if (v5 < 4)
        break;
      v1 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFFF0));
      v2 = 0;
      LOBYTE(v3) = 0;
      if (!v1)
        return v3 | (v2 << 8);
    }
    v3 = 0x3010200u >> (8 * v5);
    v2 = 1;
  }
  else
  {
    v2 = 0;
    LOBYTE(v3) = 0;
  }
  return v3 | (v2 << 8);
}

void sub_22F114E70(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_22F114EB8()
{
  return 0;
}

void sub_22F114EF8(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  a3 = *(_QWORD *)(a1 + 32);
  sub_22F0F08CC(&a3);
  JUMPOUT(0x22F114EE8);
}

uint64_t sub_22F114F34(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  int v6;

  v1 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = *(_DWORD *)(v1 + 16) == 28;
  else
    v3 = 0;
  if (v3)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFF0);
    v2 = *(_DWORD *)(v1 + 16);
  }
  if (v2 == 7 && (v4 = (v2 >> 19) - 33, v4 <= 3))
  {
    v5 = 0x3010200u >> (8 * v4);
    *a1 = *(_QWORD *)(v1 + 32);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    LOBYTE(v5) = 0;
  }
  return v5 | (v6 << 8);
}

BOOL sub_22F114FB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = (_QWORD *)(a1 + 8);
  do
  {
    v2 = *(_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFF0);
    v1 = (_QWORD *)(v2 + 32);
    if (v2)
      v3 = (*(_DWORD *)(v2 + 16) & 0xFEu) - 2 >= 4;
    else
      v3 = 1;
  }
  while (!v3);
  if (*(_DWORD *)(v2 + 16) != 32)
    return 0;
  v4 = *(_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 35 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  return v6 && (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 115343371;
}

BOOL sub_22F115064(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  while (!a1 || *(_BYTE *)(a1 + 16) != 50)
  {
    v2 = sub_22F10D19C(a1);
    v3 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) == a1;
    a1 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
    if (v3)
      return 0;
  }
  return sub_22EC7DBF0(*(_QWORD *)(a1 + 24));
}

BOOL sub_22F1150C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 260)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F115120(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  return v1 == 10 || v1 == 32 || sub_22F115064(a1);
}

uint64_t sub_22F11514C(uint64_t result)
{
  uint64_t v1;
  BOOL v2;

  if (!result || *(_BYTE *)(result + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return 0;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = (*(_DWORD *)(v1 + 16) & 0xFF800FF) == 86507531;
  else
    v2 = 0;
  return v2 || *(_DWORD *)(v1 + 16) == 45;
}

BOOL sub_22F1151E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v1 || *(_BYTE *)(v1 + 16) != 45)
    return 0;
  v2 = sub_22F114198(*(_QWORD *)(v1 + 24));
  return sub_22E466F7C(v2);
}

BOOL sub_22F115220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v1 || *(_BYTE *)(v1 + 16) != 45)
    return 0;
  v2 = sub_22F114198(*(_QWORD *)(v1 + 24));
  return sub_22EAB65F8(v2);
}

uint64_t sub_22F115260(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;

  v1 = a1 & 0xFFFFFFFFFFFFFFF0;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v2 & 8) == 0
    || (result = (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7, (_DWORD)result != 2) && (_DWORD)result != 3)
  {
    while (1)
    {
      v4 = *(_QWORD *)v1;
      v6 = (*(_DWORD *)(*(_QWORD *)v1 + 16) & 0xFE) - 6;
      if (!v4 || v6 <= 0xFFFFFFFB)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
        v5 = *(_DWORD *)(v8 + 16);
        if ((v5 & 0xFEu) - 2 > 3)
          break;
        v12 = *(_DWORD *)(v8 + 16);
        v4 = sub_22F10CF48(v4);
        LOBYTE(v5) = v12;
        if (!v4)
          break;
      }
      v1 = *(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0;
    }
    if (v5 == 45)
    {
      v9 = sub_22F114198(*(_QWORD *)(v8 + 24));
      v10 = v9;
      if (v9)
        v11 = (*(_DWORD *)(v9 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v11 = 0;
      if (v11)
      {
        if (*(_QWORD *)(v9 + 128)
          || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104)), *(_QWORD *)(v10 + 128)))
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
          if ((**(_QWORD **)(v10 + 128) & 0x100000000000) == 0)
            return 1;
        }
      }
      else if ((*(_BYTE *)(v9 + 75) & 0x40) != 0)
      {
        return 4;
      }
    }
    return 0;
  }
  return result;
}

void sub_22F115380(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v13 = *(_DWORD *)(a1 + 8);
  if (v13 >= *(_DWORD *)(a1 + 12))
  {
    v25 = a3;
    v27 = a4;
    v30 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v25;
    a4 = v27;
    a5 = v30;
    v13 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v13) = a3;
  v14 = *(_DWORD *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  if (v15 >= v14)
  {
    v26 = HIDWORD(a3);
    v28 = a4;
    v31 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a3) = v26;
    a4 = v28;
    a5 = v31;
    v15 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v15) = HIDWORD(a3);
  v16 = *(_DWORD *)(a1 + 12);
  v17 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v17;
  if (v17 >= v16)
  {
    v29 = a4;
    v32 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a4 = v29;
    a5 = v32;
    v17 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v17) = a4;
  v18 = *(_DWORD *)(a1 + 12);
  v19 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v19;
  if (v19 >= v18)
  {
    v33 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a5 = v33;
    v19 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v19) = a5;
  v20 = *(_DWORD *)(a1 + 12);
  v21 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v21;
  if (v21 >= v20)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v21) = a6;
  v22 = *(_DWORD *)(a1 + 12);
  v23 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v23;
  if (v23 >= v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v23) = HIDWORD(a6);
  ++*(_DWORD *)(a1 + 8);
  if (a8)
  {
    v24 = 24 * a8;
    do
    {
      sub_22F0EED38(a7, a1, a2);
      a7 += 24;
      v24 -= 24;
    }
    while (v24);
  }
}

uint64_t sub_22F115584(uint64_t a1)
{
  unint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (int *)((a1 + 8 * (unsigned __int16)(v1 >> 38) + 4 * ((v1 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
  v3 = v1 & 0x3C0000000000000;
  v4 = (v1 >> 54) & 0xF;
  if ((v1 & 0x3C0000000000000) == 0x80000000000000)
    v5 = *v2;
  else
    v5 = 0;
  if ((v4 - 9) < 3 || ((1 << v4) & 0x3B) != 0 || ((1 << v4) & 0x1C0) != 0)
    return ((uint64_t (*)(void))((char *)&loc_22F1155FC + 4 * byte_22F4A939B[v4]))();
  else
    return (uint64_t)&v2[2 * (v3 == 0x80000000000000) + 2 * v5];
}

void sub_22F115660()
{
  JUMPOUT(0x22F1155FCLL);
}

uint64_t sub_22F115668(uint64_t result)
{
  if (result)
  {
    if ((result & 0xF) == 0)
      __asm { BR              X11 }
    return 0;
  }
  return result;
}

uint64_t sub_22F115954(unint64_t a1)
{
  uint64_t result;

  result = 1;
  if (a1 >= 0x10 && (a1 & 0xF) == 0)
    return *(unsigned int *)((char *)&unk_22F4A972C
                           + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 54));
  return result;
}

uint64_t sub_22F11598C(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a1)
  {
    v1 = a1;
    LODWORD(v2) = 0;
    LODWORD(v3) = 1;
    do
    {
      v4 = 1;
      if (v1 >= 0x10 && (v1 & 0xF) == 0)
        v4 = *(_DWORD *)((char *)&unk_22F4A972C
                       + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 54));
      if (v4 <= v3)
        v3 = v3;
      else
        v3 = v4;
      LODWORD(v2) = (v2 + v4 - 1) & -v4;
      if ((v1 & 0xF) == 0)
        __asm { BR              X9 }
      v2 = v2;
      v1 = sub_22F115B7C(v1);
    }
    while (v1);
  }
  else
  {
    v2 = 0;
    v3 = 1;
  }
  return ((v3 + v2 - 1) / v3) * v3;
}

uint64_t sub_22F115B7C(uint64_t a1)
{
  if ((a1 & 0xF) == 0)
    __asm { BR              X11 }
  return *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
}

void sub_22F115DD4()
{
  JUMPOUT(0x22F115BFCLL);
}

void sub_22F115DDC()
{
  JUMPOUT(0x22F115BFCLL);
}

void sub_22F115DE4()
{
  JUMPOUT(0x22F115C74);
}

void sub_22F115DEC()
{
  JUMPOUT(0x22F115BFCLL);
}

void sub_22F115DF4()
{
  JUMPOUT(0x22F115DBCLL);
}

void sub_22F115E94(uint64_t a1, unint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  _DWORD *v31;
  void *__src;
  size_t __n;

  v8 = a4;
  v9 = a4 | ((unint64_t)a4 << 32);
  while (2)
  {
    while (1)
    {
      v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if ((a2 & 0xF) == 0)
        break;
LABEL_3:
      if ((v10 & 0xFFFFFFFFFFFFFFF0) != 0)
        v11 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v11 = 1;
      a3 = (_QWORD *)(((unint64_t)a3 + v11 - 1) & -v11);
LABEL_6:
      a2 = v10;
      if (!v10)
        return;
    }
    switch(*(_BYTE *)(v10 + 16))
    {
      case 0:
      case 1:
      case 0x16:
      case 0x17:
      case 0x36:
        a2 = *(_QWORD *)(a2 + 32);
        if (a2 < 0x10 || (a2 & 0xF) != 0)
          goto LABEL_24;
        v13 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v14 = (uint64_t)a3 + v13 - 1;
        goto LABEL_66;
      case 2:
      case 4:
      case 5:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
        goto LABEL_51;
      case 3:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
        a3[1] = *(_QWORD *)(a2 + 48);
        goto LABEL_52;
      case 6:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
        *((_DWORD *)a3 + 2) = a4;
        a2 = *(_QWORD *)(a2 + 32);
        if (a2 < 0x10 || (a2 & 0xF) != 0)
        {
          a3 = (_QWORD *)((char *)a3 + 12);
          goto LABEL_24;
        }
        v13 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v14 = (uint64_t)a3 + v13 + 11;
        goto LABEL_66;
      case 7:
        *a3 = 0;
        goto LABEL_60;
      case 8:
        a2 = *(_QWORD *)(a2 + 32);
        if (a2 < 0x10 || (a2 & 0xF) != 0)
        {
          a3 = (_QWORD *)((char *)a3 + 1);
          goto LABEL_24;
        }
        v13 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v14 = (uint64_t)a3 + v13;
        goto LABEL_66;
      case 9:
      case 0xC:
      case 0xF:
      case 0x11:
      case 0x1B:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x35:
        goto LABEL_87;
      case 0xA:
      case 0x20:
      case 0x24:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x37:
      case 0x38:
        *(_DWORD *)a3 = a4;
        a2 = *(_QWORD *)(a2 + 32);
        goto LABEL_10;
      case 0xB:
        *a3 = v8 | (v8 << 32);
        v23 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1FF;
        v24 = v23 - 181;
        if ((v23 - 173) < 5 || v24 < 0x25 || v23 == 168 || v23 == 179)
        {
          if ((v23 - 173) < 5)
          {
            v27 = 4;
          }
          else
          {
            v26 = v24 < 0x25 || v23 == 179 || v23 == 168;
            v27 = 4;
            if (!v26)
              v27 = 1;
          }
          *(_WORD *)((char *)a3 + ((v27 + 7) & -v27)) &= 0xF800u;
        }
        return;
      case 0xD:
      case 0x22:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
        return;
      case 0xE:
        a3[1] = 0;
        a3[2] = 0;
        *((_DWORD *)a3 + 6) = a4;
        *((_DWORD *)a3 + 7) = a4;
        a3[4] = 0;
        *((_DWORD *)a3 + 10) = a4;
        *((_DWORD *)a3 + 11) = a4;
        *((_DWORD *)a3 + 12) = a4;
        sub_22F116B38(a1, *(_DWORD *)(a2 + 20), a2 + 48, a3 + 7, v8);
LABEL_87:
        *(_DWORD *)a3 = a4;
        return;
      case 0x10:
        *((_DWORD *)a3 + 4) = a4;
        a3[1] = v9;
        *a3 = *(_QWORD *)(a2 + 40);
        a2 = *(_QWORD *)(a2 + 48);
        if (a2 < 0x10 || (a2 & 0xF) != 0)
        {
          a3 += 3;
          goto LABEL_24;
        }
        v13 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v14 = (uint64_t)a3 + v13 + 23;
        goto LABEL_66;
      case 0x12:
        *(_DWORD *)a3 = a4;
        v31 = 0;
        __src = 0;
        __n = 0;
        sub_22F0AB9D8((uint64_t)&v31, a1, *(_QWORD *)(a2 + 32), v8 | (v8 << 32));
        if (v31)
        {
          if (HIDWORD(__n))
          {
            v28 = (void *)sub_22E3CD3D4(a1 + 2032, __n, 3);
            memcpy(v28, __src, __n);
          }
          else
          {
            v28 = __src;
          }
        }
        else
        {
          v28 = 0;
        }
        a3[1] = v28;
        *((_DWORD *)a3 + 4) = a4;
        if (HIDWORD(__n))
          free(__src);
        return;
      case 0x13:
        *(_DWORD *)a3 = a4;
        a2 = *(_QWORD *)(a2 + 48);
        goto LABEL_10;
      case 0x14:
        v31 = (_DWORD *)a2;
        __src = a3;
        sub_22F40AFFC(&v31, a1, v8);
        return;
      case 0x15:
        *(_DWORD *)a3 = a4;
        a2 = *(_QWORD *)(a2 + 40);
        goto LABEL_10;
      case 0x18:
        v31 = (_DWORD *)a2;
        __src = a3;
        sub_22F40B104(&v31, a1, v8);
        a2 = *(_QWORD *)(a2 + 40);
        goto LABEL_53;
      case 0x19:
      case 0x1A:
        v31 = (_DWORD *)a2;
        __src = a3;
        sub_22F116420(&v31, v8);
        a2 = *((_QWORD *)v31 + 3);
        a3 = (_QWORD *)sub_22E47EE80(&v31);
        goto LABEL_24;
      case 0x1C:
        *(_DWORD *)a3 = a4;
        a2 = *(_QWORD *)(a2 + 24);
LABEL_10:
        if (a2 < 0x10 || (a2 & 0xF) != 0)
        {
          a3 = (_QWORD *)((char *)a3 + 4);
          goto LABEL_24;
        }
        v13 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v14 = (uint64_t)a3 + v13 + 3;
        goto LABEL_66;
      case 0x1D:
      case 0x1E:
        *(_DWORD *)a3 = a4;
        *(_QWORD *)((char *)a3 + 4) = v9;
        a3[2] = 0;
        a3[3] = 0;
        return;
      case 0x1F:
        *(_DWORD *)a3 = a4;
LABEL_51:
        a3[1] = 0;
LABEL_52:
        a2 = *(_QWORD *)(a2 + 32);
LABEL_53:
        if (a2 < 0x10 || (a2 & 0xF) != 0)
        {
          a3 += 2;
          goto LABEL_24;
        }
        v13 = *(_QWORD *)((char *)&unk_22F4A9818
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v14 = (uint64_t)a3 + v13 + 15;
        goto LABEL_66;
      case 0x21:
        v31 = (_DWORD *)a2;
        __src = a3;
        sub_22F40B1B4((uint64_t *)&v31, a1, v8);
        v10 = *(_QWORD *)(a2 + 24);
        v21 = ((HIWORD(*(_DWORD *)(a2 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(a2 + 16) >> 26) + 31) & 0x7F8;
        if (v10 >= 0x10 && (v10 & 0xF) == 0)
        {
          v22 = *(_QWORD *)((char *)&unk_22F4A9818
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
          a3 = (_QWORD *)(((unint64_t)a3 + v21 + v22 - 1) & -v22);
          a2 = *(_QWORD *)(a2 + 24);
          continue;
        }
        a3 = (_QWORD *)((char *)a3 + v21);
        goto LABEL_6;
      case 0x23:
        *(_DWORD *)a3 = a4;
        if ((*(_BYTE *)(a2 + 32) & 0x3F) != 0)
        {
          *((_DWORD *)a3 + 1) = a4;
          *((_DWORD *)a3 + 2) = a4;
          v29 = *(_BYTE *)(a2 + 32) & 0x3F;
          if ((*(_BYTE *)(a2 + 32) & 0x3F) != 0)
          {
            v30 = (unsigned int *)a3 + 3;
            do
            {
              *v30++ = a4;
              --v29;
            }
            while (v29);
          }
        }
        return;
      case 0x25:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
LABEL_60:
        a2 = *(_QWORD *)(a2 + 32);
        if (a2 >= 0x10 && (a2 & 0xF) == 0)
        {
          v13 = *(_QWORD *)((char *)&unk_22F4A9818
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
          v14 = (uint64_t)a3 + v13 + 7;
LABEL_66:
          a3 = (_QWORD *)(v14 & -v13);
          continue;
        }
        ++a3;
LABEL_24:
        if (a2)
          continue;
        return;
      case 0x2E:
        *(int32x4_t *)a3 = vdupq_n_s32(a4);
        sub_22F116B38(a1, *(_DWORD *)(a2 + 20), a2 + 40, a3 + 2, v8);
        return;
      case 0x30:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
        *((_DWORD *)a3 + 2) = a4;
        return;
      case 0x31:
        *(_DWORD *)a3 = a4;
        *((_DWORD *)a3 + 1) = a4;
        *((_DWORD *)a3 + 2) = a4;
        goto LABEL_103;
      case 0x33:
        *((_DWORD *)a3 + 1) = a4;
        *((_DWORD *)a3 + 2) = a4;
        *(_DWORD *)a3 = a4;
LABEL_103:
        a3[2] = sub_22EF579A8(a1, *(_QWORD *)(a2 + 24), v8);
        return;
      case 0x39:
        goto LABEL_3;
      default:
        continue;
    }
  }
}

_QWORD *sub_22F116420(_QWORD *result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *result;
  *(int32x4_t *)result[1] = vdupq_n_s32(a2);
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 16);
  if ((_DWORD)v3 != 25)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if ((v3 & 0x3FFFC000000000) != 0)
    {
      v4 = 0;
      v5 = (unsigned __int16)(v3 >> 38);
      do
        *(_QWORD *)(result[1] + 8 * v4++ + 16) = 0;
      while (v5 != v4);
      v2 = *result;
      LOBYTE(v3) = *(_BYTE *)(*result + 16);
    }
  }
  if (v3 == 26)
  {
    v6 = *(_QWORD *)(v2 + 16);
    if ((v6 & 0x3C0000000000000) != 0 && v6 == 26)
      *(_QWORD *)(result[1] + 8 * (unsigned __int16)(v6 >> 38) + 16) = a2 | ((unint64_t)a2 << 32);
  }
  return result;
}

void *sub_22F1164A8(unint64_t *a1, uint64_t a2, const void *a3)
{
  void *v4;
  uint64_t v7;
  void *result;
  size_t v9;

  v4 = (void *)a1[1];
  if ((void *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFF8) == v4
    && (((unint64_t)a3 + 7) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)a3)
  {
    v9 = sub_22F11598C(*a1);
    return memcpy(v4, a3, v9);
  }
  else
  {
    v7 = *a1;
    do
    {
      if ((v7 & 0xF) == 0)
        __asm { BR              X9 }
      a2 = sub_22F115B7C(a2);
      result = (void *)sub_22F115B7C(v7);
      v7 = (uint64_t)result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_22F116708(uint64_t *a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = *a1;
  for (i = *a1; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v3 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v3 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v1 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v1);
    }
    if (v3 == 24)
      goto LABEL_13;
    if (v3 == 26)
      break;
    if (((1 << v3) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v1 = i;
  return sub_22F115668(v1);
}

unint64_t sub_22F1167E8(uint64_t *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v10;

  v2 = 0;
  v3 = 0;
  v4 = *a1;
  v5 = (_DWORD *)a1[1];
  while (1)
  {
    if ((v4 & 0xF) != 0)
    {
LABEL_22:
      v7 = v2;
      v8 = v3;
      goto LABEL_21;
    }
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v6 > 0x17)
      break;
    v7 = v4;
    v8 = v5;
    if (v6 - 2 >= 4)
    {
      if (v6 != 10)
        goto LABEL_9;
LABEL_19:
      v7 = v2;
      v8 = v3;
      if (!v2)
      {
LABEL_20:
        v7 = v4;
        v8 = v5;
      }
    }
LABEL_21:
    v4 = sub_22F115B7C(v4);
    v2 = v7;
    v3 = v8;
  }
  v7 = v2;
  v8 = v3;
  switch(*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16))
  {
    case 0x18:
      goto LABEL_21;
    case 0x19:
    case 0x25:
      goto LABEL_20;
    case 0x1A:
      v10 = *(_QWORD *)(v4 + 16);
      if ((v10 & 0x1000000000000000) != 0)
        v7 = 0;
      else
        v7 = v4;
      if ((v10 & 0x1000000000000000) != 0)
        v8 = 0;
      else
        v8 = v5;
      goto LABEL_21;
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x26:
      break;
    case 0x1F:
    case 0x24:
    case 0x27:
    case 0x28:
    case 0x29:
      goto LABEL_19;
    case 0x20:
      if (*v5)
        goto LABEL_19;
      goto LABEL_22;
    default:
      if (v6 == 57)
        goto LABEL_22;
      break;
  }
LABEL_9:
  if (v2)
    v4 = v2;
  return (unint64_t)sub_22F115668(v4) >> 32;
}

uint64_t sub_22F1168EC(_QWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  BOOL v5;
  BOOL v7;
  uint64_t v8;

  v1 = (*(_DWORD *)(*a1 + 16) >> 19) & 0x1FF;
  v2 = v1 - 181;
  if (v1 - 173 < 5 || v2 < 0x25 || v1 == 179 || v1 == 168)
  {
    if (v1 - 173 >= 5)
    {
      v5 = v2 < 0x25 || v1 == 179 || v1 == 168;
      v3 = 4;
      if (!v5)
        v3 = 1;
    }
    else
    {
      v3 = 4;
    }
    return *(_WORD *)(a1[1] + ((v3 + 7) & -v3)) & 0x3F;
  }
  else
  {
    v7 = v1 >= 0xA5;
    v8 = v1 - 165;
    if (v7)
      return ((uint64_t (*)(uint64_t))((char *)&loc_22F11698C + 4 * byte_22F4A9646[v8]))(1);
    else
      return 0;
  }
}

uint64_t sub_22F116994()
{
  return 2;
}

uint64_t sub_22F11699C()
{
  return 3;
}

uint64_t sub_22F1169A4()
{
  return 19;
}

uint64_t sub_22F1169AC()
{
  return 4;
}

uint64_t sub_22F1169B4()
{
  return 6;
}

uint64_t sub_22F1169BC()
{
  return 5;
}

unint64_t sub_22F1169C8(unint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  for (; (result & 0xF) == 0; a2 = (a2 + v3 + 7) & -v3)
  {
    if (!result || *(_BYTE *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 16) != 37)
      break;
    result = *(_QWORD *)(result + 32);
    v2 = result >= 0x10 && (result & 0xF) == 0;
    v3 = v2
       ? *(_QWORD *)((char *)&unk_22F4A9818
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53))
       : 1;
  }
  return result;
}

unint64_t sub_22F116A3C(unint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if ((result & 0xF) == 0 || !result)
  {
    result = sub_22F40B2DC((uint64_t)a1);
    if ((result & 0xF) != 0)
    {
      return 0;
    }
    else
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 16);
      if (result && v4 == 7)
      {
        v5 = *(_DWORD *)(result + 16) >> 19;
        v6 = v5 > 0x3C;
        v7 = (1 << v5) & 0x1200001E00006001;
        if (v6 || v7 == 0)
        {
          v9 = *(_QWORD *)(result + 32);
          v10 = 1;
          if (v9 >= 0x10 && (v9 & 0xF) == 0)
            v10 = *(_QWORD *)((char *)&unk_22F4A9818
                            + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0)
                                                                           + 16) << 56) >> 53));
          v11[0] = *(_QWORD *)(result + 32);
          v11[1] = (v3 + v10 + 7) & -v10;
          return sub_22F116A3C(v11);
        }
      }
      else if (v4 != 6)
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_22F116B38(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  void *__src;
  size_t __n;
  uint64_t v21;

  if (a2)
  {
    v8 = a5;
    v9 = a2;
    v10 = (unint64_t *)(a3 + 8);
    do
    {
      v11 = *((_DWORD *)v10 - 2);
      if (v11 == 1)
      {
        v12 = (unint64_t)sub_22EF579A8(a1, *v10, v8) & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_5:
        *a4 = v12;
      }
      else
      {
        switch(v11)
        {
          case 2:
          case 3:
          case 4:
          case 8:
            *a4 = 0;
            break;
          case 5:
          case 6:
            v18 = 0;
            __src = 0;
            __n = 0;
            sub_22F0F0834(&v21, *v10);
            v13 = sub_22F0F09E0(&v21);
            if (v13 || (v13 = sub_22F0F0964(&v21)) != 0)
              sub_22F0AB9D8((uint64_t)&v18, a1, *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8, v8 | (a5 << 32));
            v14 = v18;
            if (v18)
            {
              if (HIDWORD(__n))
              {
                v15 = (void *)sub_22E3CD3D4(a1 + 2032, __n, 3);
                memcpy(v15, __src, __n);
                v14 = v18;
              }
              else
              {
                v15 = __src;
              }
            }
            else
            {
              v15 = 0;
            }
            if (*((_DWORD *)v10 - 2) == 5)
              v16 = 0;
            else
              v16 = v8;
            sub_22F0F03D8(&v17, a1, v14, (uint64_t)v15, v8, v16);
            *a4 = v17;
            if (HIDWORD(__n))
              free(__src);
            break;
          case 7:
            v12 = *v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
            goto LABEL_5;
          default:
            break;
        }
      }
      ++a4;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
}

void sub_22F116CD8(uint64_t *a1)
{
  sub_22F116D2C(*a1);
}

void sub_22F116D2C(uint64_t a1)
{
  if ((a1 & 0xF) != 0)
    __asm { BR              X12 }
  __asm { BR              X12 }
}

void sub_22F116F20()
{
  JUMPOUT(0x22F116D54);
}

uint64_t sub_22F117060()
{
  return 0;
}

void sub_22F117078(uint64_t a1)
{
  sub_22F11719C(a1);
}

void sub_22F117088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = a1;
  a10 = a2;
  v10 = *(_QWORD *)(a1 + 24);
  sub_22E47EE80(&a9);
  sub_22F116D2C(v10);
  JUMPOUT(0x22F117068);
}

void sub_22F1170A8(uint64_t a1)
{
  sub_22F1171E8(a1);
}

unint64_t sub_22F1170B8(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = (unsigned int *)a1[1];
  v2 = *v1;
  if (*v1)
  {
    if (!*(_QWORD *)(*a1 + 32))
    {
      v5 = *v1;
      return v2 | (v5 << 32);
    }
    v3 = *((_QWORD *)v1 + 1);
    v8 = *(_QWORD *)(*a1 + 32);
    v9 = v3;
    v4 = sub_22F0AB0EC(&v8);
  }
  else
  {
    v7 = *((_QWORD *)v1 + 1);
    v8 = *(_QWORD *)(*a1 + 32);
    v9 = v7;
    v4 = sub_22F0AB0EC(&v8);
    v2 = v4;
  }
  v5 = HIDWORD(v4);
  return v2 | (v5 << 32);
}

void *sub_22F117134(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1[1] = *a3;
  v3 = *a1;
  v4 = *(unsigned __int8 *)(*a1 + 16);
  if (*a1)
    v5 = v4 == 26;
  else
    v5 = 0;
  if (v5)
  {
    v7 = *(_QWORD *)(v3 + 16);
    v8 = 8 * ((v7 & 0x3C0000000000000) != 0);
LABEL_9:
    v6 = ((v7 >> 35) & 0x7FFF8) + v8;
    return memcpy((void *)(a1[1] + 16), a3 + 1, v6);
  }
  if (v4 != 25)
  {
    v8 = 0;
    v7 = *(_QWORD *)(v3 + 16);
    goto LABEL_9;
  }
  v6 = 0;
  return memcpy((void *)(a1[1] + 16), a3 + 1, v6);
}

void sub_22F11719C(uint64_t a1)
{
  sub_22F116D2C(*(_QWORD *)(a1 + 32));
}

void sub_22F1171E8(uint64_t a1)
{
  sub_22F116D2C(*(_QWORD *)(a1 + 32));
}

double sub_22F117234(uint64_t a1, llvm::raw_ostream *this, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  double result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  void *v17;
  _BYTE *v18;
  int v19;
  _WORD v20[20];
  uint64_t v21;

  v6 = (*(_QWORD *)(a1 + 16) >> 54) & 0xFLL;
  if ((v6 - 1) > 2)
  {
    if ((v6 - 5) >= 4)
    {
      if ((_DWORD)v6 == 4)
      {
        v17 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v17 > 0x18uLL)
        {
          qmemcpy(v17, " __attribute__((nothrow))", 25);
          result = *(double *)"ute__((nothrow))";
          *((_QWORD *)this + 4) += 25;
        }
        else
        {
          llvm::raw_ostream::write(this, " __attribute__((nothrow))");
        }
      }
    }
    else
    {
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 8)
      {
        *(_BYTE *)(v11 + 8) = 116;
        *(_QWORD *)v11 = *(_QWORD *)" noexcept";
        *((_QWORD *)this + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, " noexcept");
      }
      if (((*(_QWORD *)(a1 + 16) >> 54) & 0xF) - 6 <= 2)
      {
        v12 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v12 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v12 + 1;
          *v12 = 40;
        }
        if (sub_22F257D3C(a1))
        {
          v19 = sub_22F257D3C(a1);
          sub_22F0D9044(v19, (int)this, 0, a3, 0, "\n", 1uLL);
        }
        v18 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v18 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
          return result;
        }
        goto LABEL_34;
      }
    }
  }
  else
  {
    v7 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678915954;
      *v7 = 1919448096;
      *((_QWORD *)this + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(this, " throw(");
    }
    v9 = *(_QWORD *)(a1 + 16);
    if ((v9 & 0x3C0000000000000) == 0x80000000000000)
    {
      v13 = *(unsigned int *)((a1 + 40 + 8 * (unsigned __int16)(v9 >> 38) + 4 * ((v9 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = 8 * v13;
        do
        {
          if (v14)
          {
            v16 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v16 > 1uLL)
            {
              *v16 = 8236;
              *((_QWORD *)this + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ", ");
            }
          }
          v21 = *(_QWORD *)(((a1
                            + 40
                            + 8 * (unsigned __int16)(*(_QWORD *)(a1 + 16) >> 38)
                            + 4 * ((*(_QWORD *)(a1 + 16) >> 59) & 1)
                            + 7) & 0xFFFFFFFFFFFFFFF8)
                          + 8 * ((*(_QWORD *)(a1 + 16) & 0x3C0000000000000) == 0x80000000000000)
                          + v14);
          v20[16] = 257;
          sub_22F119558(&v21, this, a3, v20, 0);
          v14 += 8;
        }
        while (v15 != v14);
      }
    }
    else if ((v9 & 0x3C0000000000000) == 0xC0000000000000)
    {
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 2)
      {
        *(_BYTE *)(v10 + 2) = 46;
        *(_WORD *)v10 = 11822;
        *((_QWORD *)this + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(this, "...");
      }
    }
    v18 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v18 < *((_QWORD *)this + 3))
    {
LABEL_34:
      *((_QWORD *)this + 4) = v18 + 1;
      *v18 = 41;
      return result;
    }
    llvm::raw_ostream::write(this);
  }
  return result;
}

void sub_22F1175C0(llvm::raw_ostream *this, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t __n;
  const char *__src;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53[8];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  const void **v57;
  __int16 v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  _QWORD v62[25];

  v5 = a5;
  v6 = a3;
  v7 = a2;
  v62[23] = *MEMORY[0x24BDAC8D0];
  v9 = *a4;
  if (a5)
  {
    v10 = (v9 & 0x20000200000) != 0x200000 || a3 == 0;
    if (!v10 && a3 <= (*(_DWORD *)(a5 + 12) & 0x1FFFFFFFu))
    {
      v27 = *(_QWORD *)(a5 + 16);
      v52 = a5 + 16;
      if (v27 && (*(_DWORD *)(v27 + 28) & 0x7F) == 0x53)
      {
        i = a5;
      }
      else
      {
        v28 = *(_QWORD *)(v27 + 16);
        v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((v28 & 4) != 0)
          v29 = *(_QWORD *)v29;
        v30 = *(_WORD *)(v29 + 8) & 0x7F;
        for (i = a5; v30 != 83; v30 = *(_WORD *)(v29 + 8) & 0x7F)
        {
          v32 = -40;
          if (v30 > 70)
          {
            if (v30 == 71)
            {
              v32 = -56;
            }
            else if (v30 != 81)
            {
              goto LABEL_65;
            }
          }
          else
          {
            if (v30 > 0x18)
              goto LABEL_64;
            if (v30 == 16)
              goto LABEL_58;
            if (((1 << v30) & 0x1066) != 0)
              goto LABEL_71;
            if (v30 == 24)
            {
LABEL_58:
              v32 = -48;
            }
            else
            {
LABEL_64:
              if (v30 != 70)
              {
LABEL_65:
                v33 = v30 - 52;
                if ((v30 - 33) >= 5)
                  v34 = -48;
                else
                  v34 = -64;
                if (v33 >= 6)
                  v32 = v34;
                else
                  v32 = -72;
                goto LABEL_71;
              }
              v32 = -64;
            }
          }
LABEL_71:
          v35 = *(_QWORD *)(v29 + v32 + 16);
          v29 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v29 = *(_QWORD *)v29;
        }
        v27 = v29 - 40;
      }
      v37 = *(_QWORD *)(v27 + 88);
      v60 = (char *)&v61 + 8;
      *(_QWORD *)&v61 = 0x800000000;
      v38 = 32 * a3;
      v39 = a2;
      do
      {
        v40 = sub_22E4EF088((uint64_t)&v60, v39, 1);
        v41 = (char *)v60 + 24 * v61;
        v42 = *(_OWORD *)v40;
        *((_QWORD *)v41 + 2) = *(_QWORD *)(v40 + 16);
        *(_OWORD *)v41 = v42;
        LODWORD(v61) = v61 + 1;
        v39 += 32;
        v38 -= 32;
      }
      while (v38);
      v43 = v7 + 32 * v6 - 32;
      while (1)
      {
        v11 = v6;
        v44 = (char *)v60;
        if (!v6)
          break;
        --v6;
        v55 = *(_OWORD *)v43;
        v56 = *(_QWORD *)(v43 + 16);
        v45 = *(_QWORD *)(v52 + 8 * (v11 - 1));
        v46 = v61;
        v47 = sub_22EFE90A8(i);
        v43 -= 32;
        if ((sub_22F120354(v37, &v55, v45, (uint64_t)v44, v46, v47) & 1) == 0)
        {
          v44 = (char *)v60;
          break;
        }
      }
      v12 = (uint64_t)a4;
      v5 = i;
      if (v44 != (char *)&v61 + 8)
        free(v44);
      v9 = *a4;
      goto LABEL_8;
    }
  }
  v11 = a3;
  v12 = (uint64_t)a4;
LABEL_8:
  v13 = ",";
  if ((v9 & 0x1000000000) == 0)
    v13 = ", ";
  __src = v13;
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v14 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
    if (!v11)
      goto LABEL_78;
  }
  else
  {
    *((_QWORD *)this + 4) = v14 + 1;
    *v14 = 60;
    if (!v11)
      goto LABEL_78;
  }
  v15 = 0;
  v51 = 0;
  v10 = (v9 & 0x1000000000) == 0;
  v16 = 1;
  if (v10)
    v17 = 2;
  else
    v17 = 1;
  __n = v17;
  v18 = 32 * v11;
  do
  {
    v60 = v62;
    v61 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)v53, (uint64_t)&v60);
    if (*(_DWORD *)v7 == 8)
    {
      if (!((*(_DWORD *)(v7 + 4) == 0) | v16 & 1))
      {
        v19 = (void *)*((_QWORD *)this + 4);
        if (__n <= *((_QWORD *)this + 3) - (_QWORD)v19)
        {
          memcpy(v19, __src, __n);
          *((_QWORD *)this + 4) += __n;
        }
        else
        {
          llvm::raw_ostream::write(this, __src);
        }
      }
      sub_22F117B8C((llvm::raw_ostream *)v53, *(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 4), v12, v5, 1, v15);
    }
    else
    {
      if ((v16 & 1) == 0)
      {
        v20 = (void *)*((_QWORD *)this + 4);
        if (__n <= *((_QWORD *)this + 3) - (_QWORD)v20)
        {
          memcpy(v20, __src, __n);
          *((_QWORD *)this + 4) += __n;
        }
        else
        {
          llvm::raw_ostream::write(this, __src);
        }
      }
      v21 = sub_22EFE9290(v12, v5, v15);
      if (*(_DWORD *)v7 == 1)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFCLL);
        v58 = 257;
        sub_22F119558(&v59, v53, v12, &v57, 0);
      }
      else
      {
        sub_22F0EF330(v7, v12, (llvm::raw_ostream *)v53, v21);
      }
    }
    v22 = *(_BYTE **)v54;
    v23 = *(_QWORD *)(v54 + 8);
    if ((v16 & (v23 != 0)) == 1 && *v22 == 58)
    {
      v24 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v24 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v24 + 1;
        *v24 = 32;
      }
    }
    v25 = (void *)*((_QWORD *)this + 4);
    if (v23 <= *((_QWORD *)this + 3) - (_QWORD)v25)
    {
      if (!v23)
        goto LABEL_41;
      memcpy(v25, v22, v23);
      *((_QWORD *)this + 4) += v23;
    }
    else
    {
      llvm::raw_ostream::write(this, v22);
    }
    v16 = 0;
    v51 = (*(_BYTE *)(v12 + 3) & 0x20) != 0 && v22[v23 - 1] == 62;
LABEL_41:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v53);
    if (v60 != v62)
      free(v60);
    v7 += 32;
    v15 = (v15 + 1);
    v18 -= 32;
  }
  while (v18);
  if (v51)
  {
    v26 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v26 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v26 + 1;
      *v26 = 32;
    }
  }
LABEL_78:
  v36 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v36 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v36 + 1;
    *v36 = 62;
  }
}

void sub_22F117B8C(llvm::raw_ostream *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  const char *v16;
  _BYTE *v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _BYTE *v25;
  size_t v26;
  _BYTE *v27;
  void *v28;
  _BYTE *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int i;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  size_t __n;
  const char *__src;
  uint64_t v53;
  _BYTE v56[64];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  _QWORD v62[25];

  v8 = a6;
  v9 = a5;
  v10 = a3;
  v11 = a2;
  v62[23] = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)a4;
  if (a5)
  {
    v14 = (v13 & 0x20000200000) != 0x200000 || a3 == 0;
    if (!v14 && (a6 & 1) == 0 && a3 <= (*(_DWORD *)(a5 + 12) & 0x1FFFFFFFu))
    {
      v30 = *(_QWORD *)(a5 + 16);
      v53 = a5 + 16;
      if (!v30 || (*(_DWORD *)(v30 + 28) & 0x7F) != 0x53)
      {
        v31 = *(_QWORD *)(v30 + 16);
        v32 = v31 & 0xFFFFFFFFFFFFFFF8;
        if ((v31 & 4) != 0)
          v32 = *(_QWORD *)v32;
        for (i = *(_WORD *)(v32 + 8) & 0x7F; i != 83; i = *(_WORD *)(v32 + 8) & 0x7F)
        {
          v34 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v34 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_68;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_67;
            if (i == 16)
              goto LABEL_61;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_74;
            if (i == 24)
            {
LABEL_61:
              v34 = -48;
            }
            else
            {
LABEL_67:
              if (i != 70)
              {
LABEL_68:
                v35 = i - 52;
                if ((i - 33) >= 5)
                  v36 = -48;
                else
                  v36 = -64;
                if (v35 >= 6)
                  v34 = v36;
                else
                  v34 = -72;
                goto LABEL_74;
              }
              v34 = -64;
            }
          }
LABEL_74:
          v37 = *(_QWORD *)(v32 + v34 + 16);
          v32 = v37 & 0xFFFFFFFFFFFFFFF8;
          if ((v37 & 4) != 0)
            v32 = *(_QWORD *)v32;
        }
        v30 = v32 - 40;
      }
      v38 = *(_QWORD *)(v30 + 88);
      v60 = (char *)&v61 + 8;
      *(_QWORD *)&v61 = 0x800000000;
      v39 = 24 * a3;
      v40 = a2;
      do
      {
        v41 = sub_22E4EF088((uint64_t)&v60, v40, 1);
        v42 = (char *)v60 + 24 * v61;
        v43 = *(_OWORD *)v41;
        *((_QWORD *)v42 + 2) = *(_QWORD *)(v41 + 16);
        *(_OWORD *)v42 = v43;
        LODWORD(v61) = v61 + 1;
        v40 += 24;
        v39 -= 24;
      }
      while (v39);
      v44 = v11 + 24 * v10 - 24;
      while (1)
      {
        v15 = v10;
        v45 = (char *)v60;
        if (!v10)
          break;
        --v10;
        v58 = *(_OWORD *)v44;
        v59 = *(_QWORD *)(v44 + 16);
        v46 = *(_QWORD *)(v53 + 8 * (v15 - 1));
        v47 = v61;
        v48 = sub_22EFE90A8(a5);
        v44 -= 24;
        if ((sub_22F120354(v38, &v58, v46, (uint64_t)v45, v47, v48) & 1) == 0)
        {
          v45 = (char *)v60;
          break;
        }
      }
      v8 = a6;
      if (v45 != (char *)&v61 + 8)
        free(v45);
      v9 = a5;
      v13 = *(_QWORD *)a4;
      goto LABEL_9;
    }
  }
  v15 = a3;
LABEL_9:
  v16 = ",";
  if ((v13 & 0x1000000000) == 0)
    v16 = ", ";
  __src = v16;
  if ((v8 & 1) != 0)
  {
    if (!v15)
      return;
  }
  else
  {
    v17 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v17 + 1;
      *v17 = 60;
    }
    if (!v15)
    {
LABEL_91:
      v49 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v49 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v49 + 1;
        *v49 = 62;
      }
      return;
    }
  }
  v18 = 0;
  v14 = (v13 & 0x1000000000) == 0;
  v19 = 1;
  if (v14)
    v20 = 2;
  else
    v20 = 1;
  __n = v20;
  v21 = 24 * v15;
  do
  {
    v60 = v62;
    v61 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)v56, (uint64_t)&v60);
    if (*(_DWORD *)v11 == 8)
    {
      if (!((*(_DWORD *)(v11 + 4) == 0) | v19 & 1))
      {
        v22 = (void *)*((_QWORD *)a1 + 4);
        if (__n <= *((_QWORD *)a1 + 3) - (_QWORD)v22)
        {
          memcpy(v22, __src, __n);
          *((_QWORD *)a1 + 4) += __n;
        }
        else
        {
          llvm::raw_ostream::write(a1, __src);
        }
      }
      sub_22F117B8C(v56, *(_QWORD *)(v11 + 8), *(unsigned int *)(v11 + 4), a4, v9, 1, a7);
    }
    else
    {
      if ((v19 & 1) == 0)
      {
        v23 = (void *)*((_QWORD *)a1 + 4);
        if (__n <= *((_QWORD *)a1 + 3) - (_QWORD)v23)
        {
          memcpy(v23, __src, __n);
          *((_QWORD *)a1 + 4) += __n;
        }
        else
        {
          llvm::raw_ostream::write(a1, __src);
        }
      }
      v24 = sub_22EFE9290(a4, v9, a7);
      sub_22F0EF330(v11, a4, (llvm::raw_ostream *)v56, v24);
    }
    v25 = *(_BYTE **)v57;
    v26 = *(_QWORD *)(v57 + 8);
    if ((v19 & (v26 != 0)) == 1 && *v25 == 58)
    {
      v27 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v27 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v27 + 1;
        *v27 = 32;
      }
    }
    v28 = (void *)*((_QWORD *)a1 + 4);
    if (v26 <= *((_QWORD *)a1 + 3) - (_QWORD)v28)
    {
      if (!v26)
        goto LABEL_43;
      memcpy(v28, v25, v26);
      *((_QWORD *)a1 + 4) += v26;
    }
    else
    {
      llvm::raw_ostream::write(a1, v25);
    }
    v19 = 0;
    v18 = (*(_BYTE *)(a4 + 3) & 0x20) != 0 && v25[v26 - 1] == 62;
LABEL_43:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v56);
    if (v60 != v62)
      free(v60);
    a7 = a7 + (v8 ^ 1);
    v11 += 24;
    v21 -= 24;
    v9 = a5;
  }
  while (v21);
  if ((v8 & 1) == 0)
  {
    if (v18)
    {
      v29 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v29 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v29 + 1;
        *v29 = 32;
      }
    }
    goto LABEL_91;
  }
}

void sub_22F11813C(int *a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v9[64];
  uint64_t v10;
  void *v11;
  __int128 v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v9, (uint64_t)&v11);
  sub_22F11826C(a1, (llvm::raw_ostream *)v9);
  v4 = *(const void **)v10;
  if (!*(_QWORD *)v10)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v10 + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v5 >= 0x17)
  {
    v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v6 = v5 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v5;
    if (!v5)
      goto LABEL_11;
  }
  memmove(a2, v4, v5);
LABEL_11:
  *((_BYTE *)a2 + v5) = 0;
LABEL_12:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v9);
  if (v11 != v13)
    free(v11);
}

void sub_22F11826C(int *a1, llvm::raw_ostream *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  const char *v7;
  _BYTE *v8;
  size_t v9;
  const void *v10;
  _BYTE *v11;
  _BYTE *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a1 & 0xC) != 0)
  {
    v26 = v28;
    v27 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)v22, (uint64_t)&v26);
    if ((unint64_t)(v23 - v24) > 1)
    {
      *(_WORD *)v24 = 8748;
      v24 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v22, ",\"");
    }
    v4 = *a1;
    v5 = (*a1 >> 2) & 3;
    switch(v5)
    {
      case 0:
        goto LABEL_46;
      case 2:
        v8 = v24;
        if ((unint64_t)(v23 - v24) <= 0xD)
        {
          v7 = "sign-and-strip";
          goto LABEL_12;
        }
        *(_QWORD *)v24 = *(_QWORD *)"sign-and-strip";
        *(_QWORD *)(v8 + 6) = *(_QWORD *)"nd-strip";
        v11 = v24 + 14;
        break;
      case 1:
        v6 = v24;
        if ((unint64_t)(v23 - v24) <= 4)
        {
          v7 = "strip";
LABEL_12:
          llvm::raw_ostream::write((llvm::raw_ostream *)v22, v7);
LABEL_19:
          v12 = v24;
          if ((*(_BYTE *)a1 & 0x10) == 0)
          {
LABEL_25:
            if ((*(_BYTE *)a1 & 0x20) == 0)
              goto LABEL_31;
            if (v23 == v12)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v22, ",");
            }
            else
            {
              *v12 = 44;
              ++v24;
            }
LABEL_28:
            v14 = v24;
            if ((unint64_t)(v23 - v24) > 0x18)
            {
              *(_OWORD *)v24 = *(_OWORD *)"authenticates-null-values";
              *(_OWORD *)(v14 + 9) = *(_OWORD *)"ates-null-values";
              v12 = v24 + 25;
              v24 += 25;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v22, "authenticates-null-values");
              v12 = v24;
            }
LABEL_31:
            if (v23 == v12)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v22, "\"");
            }
            else
            {
              *v12 = 34;
              ++v24;
            }
            v10 = *(const void **)v25;
            v9 = *(_QWORD *)(v25 + 8);
            goto LABEL_34;
          }
          if (v23 == v24)
            llvm::raw_ostream::write((llvm::raw_ostream *)v22, ",");
          else
            *v24++ = 44;
LABEL_22:
          v13 = v24;
          if ((unint64_t)(v23 - v24) > 0xA)
          {
            *(_DWORD *)(v24 + 7) = 1919251566;
            *v13 = *(_QWORD *)"isa-pointer";
            v12 = v24 + 11;
            v24 += 11;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v22, "isa-pointer");
            v12 = v24;
          }
          goto LABEL_25;
        }
        v24[4] = 112;
        *v6 = 1769108595;
        v11 = v24 + 5;
        break;
      default:
        if ((v4 & 0x10) == 0)
        {
          if ((v4 & 0x20) == 0)
          {
            v9 = 0;
            v10 = 0;
LABEL_34:
            v15 = *((_QWORD *)a2 + 4);
            if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) > 9)
            {
              *(_WORD *)(v15 + 8) = 10344;
              *(_QWORD *)v15 = *(_QWORD *)"__ptrauth(";
              *((_QWORD *)a2 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(a2, "__ptrauth(");
            }
            v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v17 = (_BYTE *)*((_QWORD *)v16 + 4);
            if (*((_BYTE **)v16 + 3) == v17)
            {
              llvm::raw_ostream::write(v16, ",");
            }
            else
            {
              *v17 = 44;
              ++*((_QWORD *)v16 + 4);
            }
            v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v19 = (_BYTE *)*((_QWORD *)v18 + 4);
            if (*((_BYTE **)v18 + 3) == v19)
            {
              llvm::raw_ostream::write(v18, ",");
            }
            else
            {
              *v19 = 44;
              ++*((_QWORD *)v18 + 4);
            }
            v20 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v21 = (_BYTE *)*((_QWORD *)v20 + 4);
            if (v9 <= *((_QWORD *)v20 + 3) - (_QWORD)v21)
            {
              if (v9)
              {
                memcpy(v21, v10, v9);
                v21 = (_BYTE *)(*((_QWORD *)v20 + 4) + v9);
                *((_QWORD *)v20 + 4) = v21;
              }
            }
            else
            {
              v20 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, (const char *)v10);
              v21 = (_BYTE *)*((_QWORD *)v20 + 4);
            }
            if (*((_BYTE **)v20 + 3) == v21)
            {
              llvm::raw_ostream::write(v20, ")");
            }
            else
            {
              *v21 = 41;
              ++*((_QWORD *)v20 + 4);
            }
LABEL_46:
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v22);
            if (v26 != v28)
              free(v26);
            return;
          }
          goto LABEL_28;
        }
        goto LABEL_22;
    }
    v24 = v11;
    goto LABEL_19;
  }
}

void sub_22F1186E0(_DWORD *a1, llvm::raw_ostream *this, _QWORD *a3, int a4)
{
  _BYTE *v8;
  int v9;
  uint64_t v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  llvm::raw_ostream *v14;
  void **v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  _BYTE *v20;
  int v21;
  const char *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  llvm::raw_ostream *v27;
  int v28;
  char v29;
  _BYTE *v30;
  uint64_t v31;
  const char *v32;
  llvm::raw_ostream *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  char v42;
  char v43;
  void *v44[2];
  char v45;

  if ((*a1 & 7) == 0)
  {
    if ((*a1 & 8) == 0)
    {
      v9 = 0;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  sub_22F118FDC(this, *a1 & 7, (*a3 >> 25) & 1);
  if ((*(_BYTE *)a1 & 8) != 0)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v8 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v8 + 1;
      *v8 = 32;
    }
LABEL_8:
    v10 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 0xA)
    {
      *(_DWORD *)(v10 + 7) = 1684368999;
      *(_QWORD *)v10 = *(_QWORD *)"__unaligned";
      *((_QWORD *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, "__unaligned");
    }
  }
  v9 = 1;
LABEL_11:
  sub_22F118CD0((std::string *)(*a1 >> 11), (uint64_t)v44);
  v11 = (void *)(v45 & 0x7F);
  if (v45 < 0)
    v11 = v44[1];
  if (v11)
  {
    if (v9)
    {
      v12 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v12 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v12 + 1;
        *v12 = 32;
      }
    }
    if (*a1 >> 11 < 0x1Bu)
    {
      if (v45 >= 0)
        v18 = (const char *)v44;
      else
        v18 = (const char *)v44[0];
      v16 = this;
    }
    else
    {
      v13 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0x1CuLL)
      {
        qmemcpy(v13, "__attribute__((address_space(", 29);
        *((_QWORD *)this + 4) += 29;
        v14 = this;
      }
      else
      {
        v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "__attribute__((address_space(");
      }
      if (v45 >= 0)
        v15 = v44;
      else
        v15 = (void **)v44[0];
      v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, (const char *)v15);
      v17 = *((_QWORD *)v16 + 4);
      if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 2)
      {
        *(_BYTE *)(v17 + 2) = 41;
        *(_WORD *)v17 = 10537;
        *((_QWORD *)v16 + 4) += 3;
        goto LABEL_31;
      }
      v18 = ")))";
    }
    llvm::raw_ostream::write(v16, v18);
LABEL_31:
    v9 = 1;
  }
  v19 = (*a1 >> 9) & 3;
  if (v19)
  {
    if (v9)
    {
      v20 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v20 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v20 + 1;
        *v20 = 32;
      }
    }
    if (v19 == 2)
      v22 = "coherent(system)";
    else
      v22 = "coherent(device)";
    *(_OWORD *)__p = *(_OWORD *)v22;
    v43 = 16;
    v42 = 0;
    llvm::raw_ostream::write(this, (const char *)__p);
    if (v43 < 0)
      operator delete(__p[0]);
    v21 = (*a1 >> 4) & 3;
    if (!v21)
      goto LABEL_55;
    goto LABEL_46;
  }
  v21 = (*a1 >> 4) & 3;
  if (!v21)
    goto LABEL_56;
  if (v9)
  {
LABEL_46:
    v23 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v23 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v23 + 1;
      *v23 = 32;
    }
  }
  v24 = *((_QWORD *)this + 4);
  v25 = *((_QWORD *)this + 3) - v24;
  if (v21 != 1)
  {
    if (v25 <= 7)
    {
      v26 = "__strong";
      v27 = this;
      goto LABEL_54;
    }
    *(_QWORD *)v24 = 0x676E6F7274735F5FLL;
    v39 = *((_QWORD *)this + 4) + 8;
LABEL_101:
    *((_QWORD *)this + 4) = v39;
    goto LABEL_55;
  }
  if (v25 > 5)
  {
    *(_WORD *)(v24 + 4) = 27489;
    *(_DWORD *)v24 = 1702322015;
    v39 = *((_QWORD *)this + 4) + 6;
    goto LABEL_101;
  }
  v26 = "__weak";
  v27 = this;
LABEL_54:
  llvm::raw_ostream::write(v27, v26);
LABEL_55:
  v9 = 1;
LABEL_56:
  v28 = (*a1 >> 6) & 7;
  if (!v28)
    goto LABEL_82;
  if (v28 == 2)
  {
    if ((*a3 & 0x40000) != 0)
      v29 = 0;
    else
      v29 = v9;
    if ((*a3 & 0x40000) == 0)
      v9 = 1;
    if ((v29 & 1) == 0)
    {
      if ((*a3 & 0x40000) == 0)
      {
LABEL_74:
        v34 = (_QWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v34 > 7uLL)
        {
          *v34 = 0x676E6F7274735F5FLL;
          *((_QWORD *)this + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(this, "__strong");
        }
      }
      goto LABEL_82;
    }
  }
  else if (!v9)
  {
    goto LABEL_70;
  }
  v30 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v30 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v30 + 1;
    *v30 = 32;
  }
LABEL_70:
  switch(v28)
  {
    case 1:
      v31 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v31) <= 0x12)
      {
        v32 = "__unsafe_unretained";
        v33 = this;
        goto LABEL_80;
      }
      *(_DWORD *)(v31 + 15) = 1684369001;
      *(_OWORD *)v31 = *(_OWORD *)"__unsafe_unretained";
      v40 = *((_QWORD *)this + 4) + 19;
      goto LABEL_106;
    case 2:
      v9 = 1;
      if ((*a3 & 0x40000) == 0)
        goto LABEL_74;
      break;
    case 3:
      v35 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v35) <= 5)
      {
        v32 = "__weak";
        v33 = this;
        goto LABEL_80;
      }
      *(_WORD *)(v35 + 4) = 27489;
      *(_DWORD *)v35 = 1702322015;
      v40 = *((_QWORD *)this + 4) + 6;
      goto LABEL_106;
    case 4:
      v36 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v36 > 0xEuLL)
      {
        qmemcpy(v36, "__autoreleasing", 15);
        v40 = *((_QWORD *)this + 4) + 15;
LABEL_106:
        *((_QWORD *)this + 4) = v40;
      }
      else
      {
        v32 = "__autoreleasing";
        v33 = this;
LABEL_80:
        llvm::raw_ostream::write(v33, v32);
      }
LABEL_81:
      v9 = 1;
      break;
    default:
      goto LABEL_81;
  }
LABEL_82:
  LODWORD(__p[0]) = a1[1];
  if (((uint64_t)__p[0] & 0xC) != 0)
  {
    if (v9)
    {
      v37 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v37 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v37 + 1;
        *v37 = 32;
      }
    }
    sub_22F11826C((int *)__p, this);
    v9 = 1;
  }
  if (v9 && a4)
  {
    v38 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v38 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v38 + 1;
      *v38 = 32;
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
}

std::string *sub_22F118CD0@<X0>(std::string *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  switch((int)result)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      return result;
    case 1:
    case 19:
      *(_BYTE *)(a2 + 23) = 8;
      v2 = 0x6C61626F6C675F5FLL;
      goto LABEL_20;
    case 2:
    case 22:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1869373279;
      v3 = 1818321775;
      goto LABEL_30;
    case 3:
      *(_BYTE *)(a2 + 23) = 10;
      *(_WORD *)(a2 + 8) = 29806;
      v5 = "__constant";
      goto LABEL_14;
    case 4:
    case 23:
      *(_BYTE *)(a2 + 23) = 9;
      *(_WORD *)(a2 + 8) = 101;
      v4 = "__private";
      goto LABEL_24;
    case 5:
      *(_BYTE *)(a2 + 23) = 9;
      *(_WORD *)(a2 + 8) = 99;
      v4 = "__generic";
      goto LABEL_24;
    case 6:
    case 20:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "__global_device");
      return result;
    case 7:
    case 21:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "__global_host");
      return result;
    case 8:
      *(_BYTE *)(a2 + 23) = 10;
      *(_WORD *)(a2 + 8) = 24415;
      v5 = "__device__";
      goto LABEL_14;
    case 9:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "__constant__");
      return result;
    case 10:
      *(_BYTE *)(a2 + 23) = 10;
      *(_WORD *)(a2 + 8) = 24415;
      v5 = "__shared__";
LABEL_14:
      *(_QWORD *)a2 = *(_QWORD *)v5;
      *(_BYTE *)(a2 + 10) = 0;
      return result;
    case 11:
      *(_BYTE *)(a2 + 23) = 6;
      strcpy((char *)a2, "device");
      return result;
    case 12:
      *(_BYTE *)(a2 + 23) = 11;
      *(_DWORD *)(a2 + 7) = 1886744434;
      v6 = "threadgroup";
      goto LABEL_22;
    case 13:
      *(_BYTE *)(a2 + 23) = 8;
      v2 = 0x746E6174736E6F63;
      goto LABEL_20;
    case 14:
      strcpy((char *)a2, "threadgroup_imageblock");
      *(_BYTE *)(a2 + 23) = 22;
      return result;
    case 15:
      *(_BYTE *)(a2 + 23) = 8;
      v2 = 0x617461645F796172;
LABEL_20:
      *(_QWORD *)a2 = v2;
      *(_BYTE *)(a2 + 8) = 0;
      return result;
    case 16:
      *(_BYTE *)(a2 + 23) = 11;
      *(_DWORD *)(a2 + 7) = 1635017060;
      v6 = "object_data";
LABEL_22:
      *(_QWORD *)a2 = *(_QWORD *)v6;
      *(_BYTE *)(a2 + 11) = 0;
      return result;
    case 17:
      *(_BYTE *)(a2 + 23) = 9;
      *(_WORD *)(a2 + 8) = 97;
      v4 = "mesh_data";
LABEL_24:
      *(_QWORD *)a2 = *(_QWORD *)v4;
      return result;
    case 18:
      *(_BYTE *)(a2 + 23) = 19;
      strcpy((char *)a2, "intersection_result");
      return result;
    case 24:
      v7 = "__sptr __ptr32";
      goto LABEL_28;
    case 25:
      v7 = "__uptr __ptr32";
LABEL_28:
      *(_BYTE *)(a2 + 23) = 14;
      *(_QWORD *)a2 = *(_QWORD *)v7;
      *(_QWORD *)(a2 + 6) = *(_QWORD *)(v7 + 6);
      *(_BYTE *)(a2 + 14) = 0;
      break;
    case 26:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1953521503;
      v3 = 875983476;
LABEL_30:
      *(_DWORD *)(a2 + 3) = v3;
      *(_BYTE *)(a2 + 7) = 0;
      break;
    default:
      result = std::to_string((std::string *)a2, (int)result - 27);
      break;
  }
  return result;
}

llvm::raw_ostream *sub_22F118FDC(llvm::raw_ostream *this, char a2, int a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;

  v5 = this;
  if ((a2 & 1) == 0)
  {
    if ((a2 & 4) == 0)
    {
      if ((a2 & 2) == 0)
        return this;
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 4)
  {
    *(_BYTE *)(v6 + 4) = 116;
    *(_DWORD *)v6 = 1936617315;
    *((_QWORD *)this + 4) += 5;
    if ((a2 & 4) != 0)
    {
LABEL_7:
      v7 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)v5 + 3))
      {
        this = (llvm::raw_ostream *)llvm::raw_ostream::write(v5);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v7 + 1;
        *v7 = 32;
      }
LABEL_10:
      v8 = (_QWORD *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v8 > 7uLL)
      {
        *v8 = 0x656C6974616C6F76;
        *((_QWORD *)v5 + 4) += 8;
      }
      else
      {
        this = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, "volatile");
      }
    }
  }
  else
  {
    this = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "const");
    if ((a2 & 4) != 0)
      goto LABEL_7;
  }
  if ((a2 & 2) == 0)
    return this;
  v9 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v5 + 3))
  {
    this = (llvm::raw_ostream *)llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v9 + 1;
    *v9 = 32;
  }
LABEL_17:
  v10 = *((_QWORD *)v5 + 4);
  v11 = *((_QWORD *)v5 + 3) - v10;
  if (a3)
  {
    if (v11 <= 7)
    {
      v12 = "restrict";
      v13 = v5;
      return (llvm::raw_ostream *)llvm::raw_ostream::write(v13, v12);
    }
    *(_QWORD *)v10 = 0x7463697274736572;
    v14 = *((_QWORD *)v5 + 4) + 8;
  }
  else
  {
    if (v11 <= 9)
    {
      v12 = "__restrict";
      v13 = v5;
      return (llvm::raw_ostream *)llvm::raw_ostream::write(v13, v12);
    }
    *(_WORD *)(v10 + 8) = 29795;
    *(_QWORD *)v10 = *(_QWORD *)"__restrict";
    v14 = *((_QWORD *)v5 + 4) + 10;
  }
  *((_QWORD *)v5 + 4) = v14;
  return this;
}

void sub_22F1191A4(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  _DWORD v7[2];
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = MEMORY[0x24BED83D8] + 16;
  v16 = v17;
  llvm::raw_ostream::SetBufferAndMode();
  if ((*a1 - 55296) >= 0xFFFF3000)
  {
    v7[0] = *a1 & 0xFFFFF800;
    v7[1] = 0;
    sub_22F1186E0(v7, (llvm::raw_ostream *)&v8, (_QWORD *)(a2 + 15104), 0);
  }
  else
  {
    llvm::raw_ostream::operator<<();
  }
  if (*((char *)v16 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a3, *v16, (unint64_t)v16[1]);
  }
  else
  {
    v6 = *(_OWORD *)v16;
    *(_QWORD *)(a3 + 16) = v16[2];
    *(_OWORD *)a3 = v6;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
}

uint64_t sub_22F1192C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  unsigned int v7[216];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 8) != 0)
  {
    v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 0x18) | *a1 & 7;
  }
  else
  {
    LODWORD(v4) = *a1 & 7;
  }
  sub_22F1D4230((uint64_t)v7);
  sub_22E462F04((unint64_t *)&v6, v7);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_22F1193C0((int)v3, v4, (__int128 *)a2, &v6);
  return sub_22E54B4D4((uint64_t)v7);
}

void sub_22F119374(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *a1;
  if ((*(_BYTE *)(a3 + 5) & 2) != 0)
    v5 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8) | *a1 & 7;
  v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if ((v5 & 8) != 0)
  {
    v6 = (_QWORD *)*v6;
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v5 & 7;
  }
  else
  {
    LODWORD(v7) = v5 & 7;
  }
  sub_22F1193C0((int)v6, v7, a2, (_OWORD *)a3);
}

void sub_22F1193C0(int a1, int a2, __int128 *a3, _OWORD *a4)
{
  size_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  void *__p[2];
  unint64_t v16;
  _BYTE v17[64];
  uint64_t v18;
  void *v19;
  __int128 v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v17, (uint64_t)&v19);
  *(_OWORD *)__p = *a4;
  LODWORD(v16) = 0;
  *(_DWORD *)((char *)&v16 + 3) = 0;
  sub_22F119710((int)__p, a1, a2, (llvm::raw_ostream *)v17);
  v8 = *(_QWORD *)(v18 + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = *(const void **)v18;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __p[1] = (void *)v8;
    v16 = v12 | 0x8000000000000000;
    __p[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v16) = *(_QWORD *)(v18 + 8);
  v10 = __p;
  if (v8)
LABEL_8:
    memmove(v10, v9, v8);
  *((_BYTE *)v10 + v8) = 0;
  v13 = *((_QWORD *)a3 + 2);
  v14 = *a3;
  *a3 = *(_OWORD *)__p;
  *((_QWORD *)a3 + 2) = v16;
  *(_OWORD *)__p = v14;
  v16 = v13;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v17);
  if (v19 != v21)
    free(v19);
}

void sub_22F119558(uint64_t *a1, uint64_t **a2, uint64_t a3, const void ***a4, int a5)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v9 = *a1;
  if ((*(_BYTE *)(a3 + 5) & 2) != 0)
    v9 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8) | *a1 & 7;
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if ((v9 & 8) != 0)
  {
    v10 = (_QWORD *)*v10;
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v9 & 7;
  }
  else
  {
    v11 = v9 & 7;
  }
  sub_22F1195A8((unint64_t)v10, v11, a2, (__int128 *)a3, a4, a5);
}

void sub_22F1195A8(unint64_t a1, unint64_t a2, uint64_t **a3, __int128 *a4, const void ***a5, int a6)
{
  size_t v11;
  const void **v12;
  char v13;
  __int128 v14;
  int v15;
  __int16 v16;
  char v17;
  void *v18;
  __int128 v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = xmmword_22F44E310;
  if (*((_BYTE *)a5 + 33) == 1)
  {
    v11 = 0;
    v12 = 0;
    switch(*((_BYTE *)a5 + 32))
    {
      case 1:
        break;
      case 3:
        v12 = *a5;
        if (*a5)
          v11 = strlen((const char *)*a5);
        else
          v11 = 0;
        break;
      case 4:
        v13 = *((_BYTE *)*a5 + 23);
        if (v13 >= 0)
          v12 = *a5;
        else
          v12 = (const void **)**a5;
        if (v13 >= 0)
          v11 = v13 & 0x7F;
        else
          v11 = (size_t)(*a5)[1];
        break;
      case 5:
        v12 = *a5;
        v11 = (size_t)a5[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector();
    v12 = (const void **)v18;
    v11 = v19;
  }
  v14 = *a4;
  v15 = a6;
  v16 = 0;
  v17 = 0;
  sub_22F119710((uint64_t)&v14, a1, a2, a3, v12, v11);
  if (v18 != v20)
    free(v18);
}

void sub_22F119710(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t **this, const void *a5, size_t a6)
{
  char v11;
  uint64_t *v12;
  uint64_t *v13;

  if (a2)
  {
    v11 = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = a6 == 0;
    sub_22F119818(a1, a2, a3, this);
    v12 = this[4];
    if (a6 <= (char *)this[3] - (char *)v12)
    {
      if (a6)
      {
        memcpy(v12, a5, a6);
        this[4] = (uint64_t *)((char *)this[4] + a6);
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)a5);
    }
    sub_22F11C8E8(a1, a2, (uint64_t *)this);
    *(_BYTE *)(a1 + 20) = v11;
  }
  else
  {
    v13 = this[4];
    if ((unint64_t)((char *)this[3] - (char *)v13) > 8)
    {
      *((_BYTE *)v13 + 8) = 69;
      *v13 = *(_QWORD *)"NULL TYPE";
      this[4] = (uint64_t *)((char *)this[4] + 9);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "NULL TYPE");
    }
  }
}

void sub_22F119818(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **this)
{
  unsigned int v5;
  unint64_t v8;
  int v9;
  uint64_t i;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v46;
  void **v47;
  uint64_t *v48;
  unint64_t v49;
  const char *v50;
  llvm::raw_ostream *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  const char *v62;
  llvm::raw_ostream *v63;
  size_t v64;
  const char *v65;
  size_t v66;
  uint64_t *v67;
  llvm::raw_ostream *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  const char *v76;
  llvm::raw_ostream *v77;
  uint64_t *v78;
  char *v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  llvm::raw_ostream *v88;
  _WORD *v89;
  uint64_t *v90;
  char *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  llvm::raw_ostream *v102;
  uint64_t *v103;
  uint64_t v104;
  const void *v105;
  size_t v106;
  int v107;
  char *v108;
  char v109;
  unsigned int *v110;
  const void *v111;
  size_t v112;
  unsigned int v113;
  uint64_t *v114;
  llvm::raw_ostream *v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  const char *v121;
  llvm::raw_ostream *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  unsigned int *v139;
  const void *v140;
  size_t v141;
  unsigned int v142;
  uint64_t *v143;
  uint64_t v144;
  llvm::raw_ostream *v145;
  uint64_t *v146;
  uint64_t *v147;
  char v148;
  llvm::raw_ostream *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t j;
  int v164;
  unint64_t v165;
  char *v166;
  char v167;
  llvm::raw_ostream *v168;
  uint64_t *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  llvm::raw_ostream *v174;
  uint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  char *v184;
  const char *v185;
  llvm::raw_ostream *v186;
  _BYTE *v187;
  uint64_t *v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  _BYTE *v192;
  unint64_t v193;
  unsigned int *v195;
  const void *v196;
  size_t v197;
  unsigned int v198;
  _BYTE *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t *v205;
  unint64_t v206;
  uint64_t *v207;
  BOOL v208;
  uint64_t v209;
  uint64_t *v210;
  const char *v211;
  uint64_t *v212;
  char *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t *v223;
  unint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t *v229;
  unint64_t v230;
  unsigned int *v232;
  const void *v233;
  size_t v234;
  unsigned int v235;
  uint64_t *v236;
  unint64_t v237;
  int v238;
  char *v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  const char *v243;
  llvm::raw_ostream *v244;
  uint64_t *v245;
  llvm::raw_ostream *v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  char *v251;
  uint64_t *v252;
  _DWORD *v253;
  uint64_t *v254;
  const char *v255;
  llvm::raw_ostream *v256;
  uint64_t *v257;
  const char *v258;
  llvm::raw_ostream *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  char *v266;
  uint64_t *v267;
  uint64_t v268;
  int *v269;
  llvm::raw_ostream *v270;
  uint64_t *v271;
  int v272;
  uint64_t *v273;
  uint64_t *v274;
  char *v275;
  uint64_t *v276;
  uint64_t *v277;
  uint64_t *v278;
  uint64_t v279;
  unint64_t v280;
  unsigned int *v281;
  const void *v282;
  size_t v283;
  unsigned int v284;
  _QWORD *v285;
  uint64_t *v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  const char *v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  unint64_t v304;
  __int128 v305;
  _DWORD v306[4];

  v5 = a3;
  v304 = a3;
  if ((*(_BYTE *)(a1 + 1) & 1) == 0
    || ((v19 = *(unsigned __int8 *)(a2 + 16), v20 = v19 > 0x32, v21 = (1 << v19) & 0x7F80601141800, !v20)
      ? (v22 = v21 == 0)
      : (v22 = 1),
        v22))
  {
    v8 = HIDWORD(a3);
    v9 = *(unsigned __int8 *)(a1 + 20);
    for (i = a2; ; i = *(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0))
    {
      v11 = *(_DWORD *)(i + 16);
      v12 = v11;
      if (i)
      {
        if (v11 == 14)
          break;
      }
      v14 = i;
      if (i && v11 == 43)
      {
        v13 = *(_QWORD *)(i + 8);
LABEL_11:
        v14 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
        v11 = *(_DWORD *)(v14 + 16);
      }
      if (v11 - 2 >= 4)
      {
        if (v11 <= 0x35u)
        {
          if (((1 << v11) & 0x3FF44E0916FB40) != 0)
          {
LABEL_16:
            if (v5 | v8 & 0xC)
              sub_22F1186E0(&v304, (llvm::raw_ostream *)this, (_QWORD *)a1, 1);
LABEL_18:
            v15 = 0;
            goto LABEL_19;
          }
          if (v11 == 7)
          {
            if (v11 < 0x80000)
              goto LABEL_16;
          }
          else if (v11 == 32)
          {
            if (i && (v23 = i, v12 == 32)
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
              && (v23 = sub_22F10CF48(i)) != 0)
            {
              if (sub_22E5761BC(v23))
                goto LABEL_16;
            }
            if (i && (v24 = i, *(_BYTE *)(i + 16) == 32)
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
              && (v24 = sub_22F10CF48(i)) != 0)
            {
              if (sub_22E509ED0(v24))
                goto LABEL_16;
            }
            if (i && (v25 = i, *(_BYTE *)(i + 16) == 32)
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
              && (v25 = sub_22F10CF48(i)) != 0)
            {
              if (sub_22E491464(v25))
                goto LABEL_16;
            }
            if ((i && *(_BYTE *)(i + 16) == 32
               || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
               && (i = sub_22F10CF48(i)) != 0)
              && sub_22E509F54(i))
            {
              goto LABEL_16;
            }
          }
        }
        if (!(v5 | v8 & 0xC))
          goto LABEL_18;
        if ((v5 & 0xFFFFF837) == 0)
        {
          v138 = (v5 >> 6) & 7;
          if ((!v138 || v138 == 2 && (*(_BYTE *)(a1 + 2) & 4) != 0) && (v8 & 0xC) == 0)
            goto LABEL_18;
        }
        *(_BYTE *)(a1 + 20) = 0;
        v15 = 1;
LABEL_19:
        v16 = *(unsigned int *)(a2 + 16);
        switch(*(_DWORD *)(a2 + 16))
        {
          case 0u:
          case 1u:
            goto LABEL_554;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            v18 = *(_QWORD *)(a2 + 32);
            goto LABEL_23;
          case 6u:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            v99 = (char *)this[4];
            if ((unint64_t)((char *)this[3] - v99) > 7)
            {
              *(_QWORD *)v99 = 0x2863696D6F74415FLL;
              ++this[4];
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "_Atomic(");
            }
            v100 = *(_QWORD *)(a2 + 32);
            goto LABEL_346;
          case 7u:
            v86 = v16 >> 19;
            if (v16 >> 19 == 60)
              goto LABEL_554;
            if (v86 == 15)
            {
              v207 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v207) > 8)
              {
                *((_BYTE *)v207 + 8) = 32;
                *v207 = *(_QWORD *)"__kindof ";
                this[4] = (uint64_t *)((char *)this[4] + 9);
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, "__kindof ");
              }
              LODWORD(v16) = *(_DWORD *)(a2 + 16);
            }
            else if (v86 == 13)
            {
LABEL_554:
              v26 = *(_QWORD *)(a2 + 40);
              goto LABEL_555;
            }
            v208 = v16 >= 0x80000;
            v209 = 32;
            if (!v208)
              v209 = 40;
            sub_22F11E768(a1, *(_QWORD *)(a2 + v209), (llvm::raw_ostream *)this);
            switch(*(_DWORD *)(a2 + 16) >> 19)
            {
              case 0x1C:
                v210 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v210) <= 7)
                {
                  v211 = " __ptr32";
                  goto LABEL_533;
                }
                v301 = 0x32337274705F5F20;
                goto LABEL_670;
              case 0x1D:
                v210 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v210) <= 7)
                {
                  v211 = " __ptr64";
LABEL_533:
                  v270 = (llvm::raw_ostream *)this;
                  goto LABEL_537;
                }
                v301 = 0x34367274705F5F20;
LABEL_670:
                *v210 = v301;
                v303 = (uint64_t)(this[4] + 1);
                goto LABEL_673;
              case 0x20:
                v269 = (int *)this[4];
                if ((unint64_t)((char *)this[3] - (char *)v269) <= 6)
                {
                  v211 = " __sptr";
                  goto LABEL_536;
                }
                *(int *)((char *)v269 + 3) = 1920233587;
                v302 = 1935630112;
                goto LABEL_672;
              case 0x25:
                v269 = (int *)this[4];
                if ((unint64_t)((char *)this[3] - (char *)v269) > 6)
                {
                  *(int *)((char *)v269 + 3) = 1920233589;
                  v302 = 1969184544;
LABEL_672:
                  *v269 = v302;
                  v303 = (uint64_t)this[4] + 7;
LABEL_673:
                  this[4] = (uint64_t *)v303;
                }
                else
                {
                  v211 = " __uptr";
LABEL_536:
                  v270 = (llvm::raw_ostream *)this;
LABEL_537:
                  llvm::raw_ostream::write(v270, v211);
                }
                if (!*(_BYTE *)(a1 + 20))
                {
                  v271 = this[4];
                  if (v271 >= this[3])
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)this);
                  }
                  else
                  {
                    this[4] = (uint64_t *)((char *)v271 + 1);
                    *(_BYTE *)v271 = 32;
                  }
                }
LABEL_542:
                v272 = *(_DWORD *)(a2 + 16) >> 19;
                if ((v272 - 37) < 0xFFFFFFFC)
                  goto LABEL_556;
                switch(v272)
                {
                  case '#':
                    v277 = this[4];
                    if ((unint64_t)((char *)this[3] - (char *)v277) <= 9)
                    {
                      v69 = " _Nullable";
                      v68 = (llvm::raw_ostream *)this;
                      goto LABEL_166;
                    }
                    *((_WORD *)v277 + 4) = 25964;
                    *v277 = *(_QWORD *)" _Nullable";
                    v144 = (uint64_t)this[4] + 10;
                    break;
                  case '"':
                    v276 = this[4];
                    if ((unint64_t)((char *)this[3] - (char *)v276) <= 0x11)
                    {
                      v69 = " _Null_unspecified";
                      v68 = (llvm::raw_ostream *)this;
                      goto LABEL_166;
                    }
                    *((_WORD *)v276 + 8) = 25701;
                    *(_OWORD *)v276 = *(_OWORD *)" _Null_unspecified";
                    v144 = (uint64_t)this[4] + 18;
                    break;
                  case '!':
                    v273 = this[4];
                    if ((unint64_t)((char *)this[3] - (char *)v273) <= 8)
                    {
                      v69 = " _Nonnull";
                      v68 = (llvm::raw_ostream *)this;
                      goto LABEL_166;
                    }
                    *((_BYTE *)v273 + 8) = 108;
                    *v273 = *(_QWORD *)" _Nonnull";
                    v144 = (uint64_t)this[4] + 9;
                    break;
                  default:
                    v278 = this[4];
                    if ((unint64_t)((char *)this[3] - (char *)v278) <= 0x10)
                    {
                      v69 = " _Nullable_result";
                      v68 = (llvm::raw_ostream *)this;
                      goto LABEL_166;
                    }
                    *((_BYTE *)v278 + 16) = 116;
                    *(_OWORD *)v278 = *(_OWORD *)" _Nullable_result";
                    v144 = (uint64_t)this[4] + 17;
                    break;
                }
                break;
              default:
                goto LABEL_542;
            }
            goto LABEL_261;
          case 8u:
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            v101 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v101) > 0xD)
            {
              qmemcpy(v101, " btf_type_tag(", 14);
              v103 = (uint64_t *)((char *)this[4] + 14);
              this[4] = v103;
              v102 = (llvm::raw_ostream *)this;
            }
            else
            {
              v102 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)this, " btf_type_tag(");
              v103 = (uint64_t *)*((_QWORD *)v102 + 4);
            }
            v104 = *(_QWORD *)(a2 + 40);
            v105 = *(const void **)(v104 + 40);
            v106 = *(unsigned int *)(v104 + 36);
            if (*((_QWORD *)v102 + 3) - (_QWORD)v103 >= v106)
            {
              if ((_DWORD)v106)
              {
                memcpy(v103, v105, v106);
                v103 = (uint64_t *)(*((_QWORD *)v102 + 4) + v106);
                *((_QWORD *)v102 + 4) = v103;
              }
            }
            else
            {
              v102 = (llvm::raw_ostream *)llvm::raw_ostream::write(v102, (const char *)v105);
              v103 = (uint64_t *)*((_QWORD *)v102 + 4);
            }
            if (*((uint64_t **)v102 + 3) == v103)
            {
              v121 = ")";
              v122 = v102;
              goto LABEL_432;
            }
            *(_BYTE *)v103 = 41;
            ++*((_QWORD *)v102 + 4);
            goto LABEL_556;
          case 9u:
            if ((*(_BYTE *)(a2 + 32) & 1) != 0)
            {
              v78 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v78) > 8)
              {
                *((_BYTE *)v78 + 8) = 32;
                *v78 = *(_QWORD *)"unsigned ";
                this[4] = (uint64_t *)((char *)this[4] + 9);
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, "unsigned ");
              }
            }
            v79 = (char *)this[4];
            if ((unint64_t)((char *)this[3] - v79) > 7)
            {
              *(_QWORD *)v79 = 0x28746E497469425FLL;
              ++this[4];
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "_BitInt(");
            }
            v68 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v80 = (_BYTE *)*((_QWORD *)v68 + 4);
            if (*((_BYTE **)v68 + 3) == v80)
            {
              v69 = ")";
              goto LABEL_166;
            }
            *v80 = 41;
            ++*((_QWORD *)v68 + 4);
            goto LABEL_320;
          case 0xAu:
            LOBYTE(v107) = *(_BYTE *)(a1 + 20);
            *(_BYTE *)(a1 + 20) = 0;
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            v108 = (char *)this[4];
            if (v108 < (char *)this[3])
            {
              this[4] = (uint64_t *)(v108 + 1);
              v109 = 94;
              goto LABEL_220;
            }
            v145 = (llvm::raw_ostream *)this;
            goto LABEL_369;
          case 0xBu:
            v65 = (const char *)sub_22F1125EC(a2);
            v66 = v64;
            v67 = this[4];
            if (v64 > (char *)this[3] - (char *)v67)
            {
              v68 = (llvm::raw_ostream *)this;
              v69 = v65;
              goto LABEL_166;
            }
            if (!v64)
              goto LABEL_320;
            memcpy(v67, v65, v64);
            v144 = (uint64_t)this[4] + v66;
            goto LABEL_261;
          case 0xCu:
            v61 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v61) > 8)
            {
              v293 = "_Complex ";
LABEL_589:
              *((_BYTE *)v61 + 8) = 32;
              *v61 = *(_QWORD *)v293;
              v294 = (uint64_t)this[4] + 9;
LABEL_590:
              this[4] = (uint64_t *)v294;
            }
            else
            {
              v62 = "_Complex ";
LABEL_117:
              v63 = (llvm::raw_ostream *)this;
LABEL_118:
              llvm::raw_ostream::write(v63, v62);
            }
LABEL_119:
            v26 = *(_QWORD *)(a2 + 32);
            goto LABEL_555;
          case 0xDu:
            v84 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v84) > 8)
            {
              *((_BYTE *)v84 + 8) = 40;
              *v84 = *(_QWORD *)"decltype(";
              this[4] = (uint64_t *)((char *)this[4] + 9);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "decltype(");
            }
            v85 = *(_QWORD *)(a2 + 24);
            if (v85)
              sub_22F0D9044(v85, (int)this, 0, a1, 0, "\n", 1uLL);
            goto LABEL_315;
          case 0xEu:
            v26 = *(_QWORD *)(a2 + 24);
            if (v26 >= 0x10)
              goto LABEL_555;
            v53 = *(_QWORD *)(a2 + 40);
            if (v53)
            {
              *(_QWORD *)&v305 = *(_QWORD *)(v53 + 40);
              sub_22EFC5F80(&v305);
              v54 = *(unsigned int *)(a2 + 20);
              if ((_DWORD)v54)
                sub_22F117B8C(this, a2 + 48, v54, a1, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56), 0, 0);
              v55 = this[4];
              if (v55 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v55 + 1);
                *(_BYTE *)v55 = 32;
              }
            }
            v238 = (*(_DWORD *)(a2 + 16) >> 19) & 3;
            if (v238 == 2)
            {
              v241 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v241) <= 0xA)
              {
                v69 = "__auto_type";
                v68 = (llvm::raw_ostream *)this;
                goto LABEL_166;
              }
              *(_DWORD *)((char *)v241 + 7) = 1701869940;
              *v241 = *(_QWORD *)"__auto_type";
              v144 = (uint64_t)this[4] + 11;
            }
            else if (v238 == 1)
            {
              v240 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v240) <= 0xD)
              {
                v69 = "decltype(auto)";
                v68 = (llvm::raw_ostream *)this;
                goto LABEL_166;
              }
              qmemcpy(v240, "decltype(auto)", 14);
              v144 = (uint64_t)this[4] + 14;
            }
            else
            {
              if (v238)
                goto LABEL_320;
              v239 = (char *)this[4];
              if ((unint64_t)((char *)this[3] - v239) <= 3)
              {
                v69 = "auto";
                v68 = (llvm::raw_ostream *)this;
                goto LABEL_166;
              }
              *(_DWORD *)v239 = 1869903201;
              v144 = (uint64_t)this[4] + 4;
            }
            goto LABEL_261;
          case 0xFu:
            v26 = *(_QWORD *)(a2 + 24);
            if (v26 >= 0x10)
              goto LABEL_555;
            v93 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v93 & 0xFFFFFFFFFFFBFFFFLL;
            v94 = v93 & 0x40000;
            v95 = *(_QWORD *)(a2 + 40);
            goto LABEL_225;
          case 0x10u:
          case 0x13u:
            v26 = *(_QWORD *)(a2 + 48);
            goto LABEL_555;
          case 0x11u:
            if ((*(_BYTE *)(a2 + 40) & 2) != 0)
            {
              v90 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v90) > 8)
              {
                *((_BYTE *)v90 + 8) = 32;
                *v90 = *(_QWORD *)"unsigned ";
                this[4] = (uint64_t *)((char *)this[4] + 9);
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, "unsigned ");
              }
            }
            v91 = (char *)this[4];
            if ((unint64_t)((char *)this[3] - v91) > 7)
            {
              *(_QWORD *)v91 = 0x28746E497469425FLL;
              ++this[4];
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "_BitInt(");
            }
            sub_22F0D9044(*(_QWORD *)(a2 + 40) & 0xFFFFFFFC, (int)this, 0, a1, 0, "\n", 1uLL);
            v92 = this[4];
            if (this[3] == v92)
            {
              v69 = ")";
              v68 = (llvm::raw_ostream *)this;
LABEL_166:
              llvm::raw_ostream::write(v68, v69);
            }
            else
            {
              *(_BYTE *)v92 = 41;
              v144 = (uint64_t)this[4] + 1;
LABEL_261:
              this[4] = (uint64_t *)v144;
            }
            goto LABEL_320;
          case 0x12u:
            __asm { BR              X10 }
            return;
          case 0x14u:
            if ((*(_QWORD *)a1 & 0x80000) == 0)
            {
              *(_QWORD *)a1 &= ~0x40000uLL;
              v16 = *(unsigned int *)(a2 + 16);
            }
            __asm { BR              X10 }
            return;
          case 0x15u:
            switch((v16 >> 19) & 0xF)
            {
              case 0u:
                v260 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v260) > 0x1E)
                {
                  qmemcpy(v260, "__attribute__((__vector_size__(", 31);
                  this[4] = (uint64_t *)((char *)this[4] + 31);
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this, "__attribute__((__vector_size__(");
                }
                v261 = *(_QWORD *)(a2 + 48);
                if (v261)
                  sub_22F0D9044(v261, (int)this, 0, a1, 0, "\n", 1uLL);
                v262 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v262) > 9)
                {
                  *((_WORD *)v262 + 4) = 10342;
                  *v262 = *(_QWORD *)" * sizeof(";
                  this[4] = (uint64_t *)((char *)this[4] + 10);
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this, " * sizeof(");
                }
                v263 = *(_QWORD *)(a2 + 40);
                if ((*(_BYTE *)(a1 + 5) & 2) != 0)
                  v263 = *(_QWORD *)((*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 40) & 7;
                v264 = (_QWORD *)(v263 & 0xFFFFFFFFFFFFFFF0);
                if ((v263 & 8) != 0)
                {
                  v264 = (_QWORD *)*v264;
                  v265 = *(_QWORD *)((v263 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v263 & 7;
                }
                else
                {
                  LODWORD(v265) = v263 & 7;
                }
                sub_22F119710(a1, (int)v264, v265, (llvm::raw_ostream *)this);
                v290 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v290) <= 4)
                {
                  v258 = ")))) ";
                  v259 = (llvm::raw_ostream *)this;
                  goto LABEL_553;
                }
                *((_BYTE *)v290 + 4) = 32;
                *(_DWORD *)v290 = 690563369;
                v298 = (uint64_t)this[4] + 5;
                goto LABEL_630;
              case 2u:
                v257 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v257) <= 8)
                {
                  v258 = "__vector ";
                  v259 = (llvm::raw_ostream *)this;
                  goto LABEL_553;
                }
                *((_BYTE *)v257 + 8) = 32;
                *v257 = *(_QWORD *)"__vector ";
                v298 = (uint64_t)this[4] + 9;
                goto LABEL_630;
              case 3u:
                goto LABEL_430;
              case 4u:
                v266 = (char *)this[4];
                if ((unint64_t)((char *)this[3] - v266) <= 0xF)
                {
                  v258 = "__vector __BOOL ";
                  v259 = (llvm::raw_ostream *)this;
                  goto LABEL_553;
                }
                *(_OWORD *)v266 = *(_OWORD *)"__vector __BOOL ";
                v298 = (uint64_t)(this[4] + 2);
                goto LABEL_630;
              case 5u:
                v267 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v267) <= 0x1F)
                {
                  v255 = "__attribute__((neon_vector_type(";
                  v256 = (llvm::raw_ostream *)this;
                  goto LABEL_526;
                }
                qmemcpy(v267, "__attribute__((neon_vector_type(", 32);
                v300 = (uint64_t)(this[4] + 4);
                goto LABEL_665;
              case 6u:
                v254 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v254) > 0x23)
                {
                  qmemcpy(v254, "__attribute__((neon_polyvector_type(", 36);
                  v300 = (uint64_t)this[4] + 36;
LABEL_665:
                  this[4] = (uint64_t *)v300;
                }
                else
                {
                  v255 = "__attribute__((neon_polyvector_type(";
                  v256 = (llvm::raw_ostream *)this;
LABEL_526:
                  llvm::raw_ostream::write(v256, v255);
                }
                v268 = *(_QWORD *)(a2 + 48);
                if (v268)
                  sub_22F0D9044(v268, (int)this, 0, a1, 0, "\n", 1uLL);
LABEL_551:
                v275 = (char *)this[4];
                if ((unint64_t)((char *)this[3] - v275) > 3)
                {
                  *(_DWORD *)v275 = 539568425;
                  v298 = (uint64_t)this[4] + 4;
LABEL_630:
                  this[4] = (uint64_t *)v298;
                }
                else
                {
                  v258 = "))) ";
                  v259 = (llvm::raw_ostream *)this;
LABEL_553:
                  llvm::raw_ostream::write(v259, v258);
                }
                break;
              case 7u:
              case 8u:
                v123 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v123) > 0x26)
                {
                  qmemcpy(v123, "__attribute__((__arm_sve_vector_bits__(", 39);
                  this[4] = (uint64_t *)((char *)this[4] + 39);
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this, "__attribute__((__arm_sve_vector_bits__(");
                }
                v124 = *(_QWORD *)(a2 + 48);
                if (v124)
                {
                  sub_22F0D9044(v124, (int)this, 0, a1, 0, "\n", 1uLL);
                  v125 = (uint64_t)this[4];
                  if ((*(_DWORD *)(a2 + 16) & 0x780000) == 0x400000)
                  {
                    if ((unint64_t)this[3] - v125 > 3)
                    {
                      *(_DWORD *)v125 = 941632032;
                      v125 = (uint64_t)this[4] + 4;
                      this[4] = (uint64_t *)v125;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)this, " * 8");
                      v125 = (uint64_t)this[4];
                    }
                  }
                  if ((unint64_t)this[3] - v125 > 9)
                  {
                    *(_WORD *)(v125 + 8) = 10342;
                    *(_QWORD *)v125 = *(_QWORD *)" * sizeof(";
                    this[4] = (uint64_t *)((char *)this[4] + 10);
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)this, " * sizeof(");
                  }
                  v126 = *(_QWORD *)(a2 + 40);
                  if ((*(_BYTE *)(a1 + 5) & 2) != 0)
                    v126 = *(_QWORD *)((*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 40) & 7;
                  v127 = (_QWORD *)(v126 & 0xFFFFFFFFFFFFFFF0);
                  if ((v126 & 8) != 0)
                  {
                    v127 = (_QWORD *)*v127;
                    v128 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v126 & 7;
                  }
                  else
                  {
                    LODWORD(v128) = v126 & 7;
                  }
                  sub_22F119710(a1, (int)v127, v128, (llvm::raw_ostream *)this);
                  v274 = this[4];
                  if ((unint64_t)((char *)this[3] - (char *)v274) > 4)
                  {
                    *((_BYTE *)v274 + 4) = 56;
                    *(_DWORD *)v274 = 539631657;
                    this[4] = (uint64_t *)((char *)this[4] + 5);
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)this, ") * 8");
                  }
                }
                goto LABEL_551;
              default:
                goto LABEL_556;
            }
            goto LABEL_554;
          case 0x16u:
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            v74 = (char *)this[4];
            v75 = (char *)this[3] - v74;
            if ((*(_DWORD *)(a2 + 16) & 0x80000000) != 0)
            {
              if (v75 <= 0xB)
              {
                v76 = " __sized_by(";
                v77 = (llvm::raw_ostream *)this;
                goto LABEL_337;
              }
              *((_DWORD *)v74 + 2) = 679043679;
              *(_QWORD *)v74 = *(_QWORD *)" __sized_by(";
              v297 = (uint64_t)this[4] + 12;
            }
            else
            {
              if (v75 <= 0xD)
              {
                v76 = " __counted_by(";
                v77 = (llvm::raw_ostream *)this;
LABEL_337:
                llvm::raw_ostream::write(v77, v76);
                goto LABEL_338;
              }
              qmemcpy(v74, " __counted_by(", 14);
              v297 = (uint64_t)this[4] + 14;
            }
            this[4] = (uint64_t *)v297;
LABEL_338:
            v173 = *(_QWORD *)(a2 + 56);
            if (v173)
              sub_22F0D9044(v173, (int)this, 0, a1, 0, "\n", 1uLL);
            v147 = this[4];
            if (v147 >= this[3])
            {
              v174 = (llvm::raw_ostream *)this;
LABEL_614:
              llvm::raw_ostream::write(v174);
            }
            else
            {
              this[4] = (uint64_t *)((char *)v147 + 1);
              v148 = 41;
LABEL_404:
              *(_BYTE *)v147 = v148;
            }
            goto LABEL_556;
          case 0x17u:
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            v71 = *(_QWORD *)(a2 + 56);
            v70 = *(_QWORD *)(a2 + 64);
            if (v70)
            {
              v72 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v72) > 0xB)
              {
                *((_DWORD *)v72 + 2) = 679043679;
                *v72 = *(_QWORD *)" __ended_by(";
                this[4] = (uint64_t *)((char *)this[4] + 12);
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, " __ended_by(");
              }
              sub_22F0D9044(v70, (int)this, 0, a1, 0, "\n", 1uLL);
              v73 = this[4];
              if (v73 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v73 + 1);
                *(_BYTE *)v73 = 41;
              }
            }
            if (!v71)
              goto LABEL_556;
            v181 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v181) > 0x10)
            {
              *((_BYTE *)v181 + 16) = 40;
              *(_OWORD *)v181 = *(_OWORD *)" /* __started_by(";
              this[4] = (uint64_t *)((char *)this[4] + 17);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, " /* __started_by(");
            }
            sub_22F0D9044(v71, (int)this, 0, a1, 0, "\n", 1uLL);
            v182 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v182) <= 4)
            {
              v121 = ") */ ";
              v122 = (llvm::raw_ostream *)this;
              goto LABEL_432;
            }
            *((_BYTE *)v182 + 4) = 32;
            *(_DWORD *)v182 = 791289897;
            v291 = (uint64_t)this[4] + 5;
            goto LABEL_644;
          case 0x18u:
            if ((*(_BYTE *)(a1 + 1) & 8) == 0)
              __asm { BR              X10 }
            if ((v16 & 0x8000000) != 0)
            {
              v165 = *(_QWORD *)(a2 + 48);
              if (v165)
              {
                v305 = *(_OWORD *)a1;
                *(_QWORD *)&v305 = v305 & 0xFFFFFFFFFFFFF7FFLL;
                sub_22F3B8394(v165, (uint64_t)this, &v305, *(_DWORD *)(a1 + 16), 0);
                goto LABEL_320;
              }
            }
            v237 = *(_QWORD *)a1;
            *(_QWORD *)a1 |= 0x1400uLL;
            sub_22F11E768(a1, *(_QWORD *)(a2 + 40), (llvm::raw_ostream *)this);
            v206 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFEBFFLL | v237 & 0x1400;
            goto LABEL_429;
          case 0x19u:
            goto LABEL_217;
          case 0x1Au:
            if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
            {
LABEL_217:
              v107 = *(unsigned __int8 *)(a1 + 20);
              *(_BYTE *)(a1 + 20) = 0;
              sub_22F11E768(a1, *(_QWORD *)(a2 + 24), (llvm::raw_ostream *)this);
              if (!v107)
              {
                v108 = (char *)this[4];
                if (v108 >= (char *)this[3])
                {
                  v145 = (llvm::raw_ostream *)this;
LABEL_369:
                  llvm::raw_ostream::write(v145);
                }
                else
                {
                  this[4] = (uint64_t *)(v108 + 1);
                  v109 = 40;
LABEL_220:
                  *v108 = v109;
                }
              }
              *(_BYTE *)(a1 + 20) = v107;
              goto LABEL_556;
            }
            v146 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v146) > 4)
            {
              *((_BYTE *)v146 + 4) = 32;
              *(_DWORD *)v146 = 1869903201;
              this[4] = (uint64_t *)((char *)this[4] + 5);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "auto ");
            }
            if (*(_BYTE *)(a1 + 20))
              goto LABEL_556;
LABEL_276:
            v147 = this[4];
            if (v147 < this[3])
            {
              this[4] = (uint64_t *)((char *)v147 + 1);
              v148 = 40;
              goto LABEL_404;
            }
            v174 = (llvm::raw_ostream *)this;
            goto LABEL_614;
          case 0x1Bu:
            v129 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x40000000000) == 0)
            {
              if ((v129 & 0x80000) == 0)
                *(_QWORD *)a1 = v129 & 0xFFFFFFFFFFFBFFFFLL;
              v94 = v129 & 0x40000;
              v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 32);
LABEL_225:
              *(_QWORD *)&v305 = v95;
              sub_22F402048((uint64_t *)&v305, (llvm::raw_ostream *)this, a1, 1);
              if (!*(_BYTE *)(a1 + 20))
              {
                v130 = this[4];
                if (v130 >= this[3])
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this);
                }
                else
                {
                  this[4] = (uint64_t *)((char *)v130 + 1);
                  *(_BYTE *)v130 = 32;
                }
              }
              v206 = *(_QWORD *)a1 & 0xFFFFFFFFFFFBFFFFLL | v94;
              goto LABEL_429;
            }
            v60 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
            v58 = (v129 >> 40) & 1;
            v59 = a1;
LABEL_279:
            v149 = (llvm::raw_ostream *)this;
            goto LABEL_280;
          case 0x1Cu:
            v110 = *(unsigned int **)(*(_QWORD *)(a2 + 32) + 16);
            v113 = *v110;
            v111 = v110 + 4;
            v112 = v113;
            v114 = this[4];
            if (v113 <= (unint64_t)((char *)this[3] - (char *)v114))
            {
              if (v112)
              {
                memcpy(v114, v111, v112);
                v114 = (uint64_t *)((char *)this[4] + v112);
                this[4] = v114;
              }
              v115 = (llvm::raw_ostream *)this;
            }
            else
            {
              v115 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)v111);
              v114 = (uint64_t *)*((_QWORD *)v115 + 4);
            }
            if (*((uint64_t **)v115 + 3) == v114)
            {
              llvm::raw_ostream::write(v115, " ");
            }
            else
            {
              *(_BYTE *)v114 = 32;
              ++*((_QWORD *)v115 + 4);
            }
            v26 = sub_22F113FE4(a2);
            goto LABEL_555;
          case 0x1Du:
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            v87 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v87) > 0x1B)
            {
              qmemcpy(v87, " __attribute__((matrix_type(", 28);
              this[4] = (uint64_t *)((char *)this[4] + 28);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, " __attribute__((matrix_type(");
            }
            v88 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v89 = (_WORD *)*((_QWORD *)v88 + 4);
            if (*((_QWORD *)v88 + 3) - (_QWORD)v89 > 1uLL)
            {
              *v89 = 8236;
              *((_QWORD *)v88 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v88, ", ");
            }
            llvm::raw_ostream::operator<<();
            goto LABEL_198;
          case 0x1Eu:
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            v116 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v116) > 0x1B)
            {
              qmemcpy(v116, " __attribute__((matrix_type(", 28);
              this[4] = (uint64_t *)((char *)this[4] + 28);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, " __attribute__((matrix_type(");
            }
            v117 = *(_QWORD *)(a2 + 48);
            if (v117)
              sub_22F0D9044(v117, (int)this, 0, a1, 0, "\n", 1uLL);
            v118 = (char *)this[4];
            if ((unint64_t)((char *)this[3] - v118) > 1)
            {
              *(_WORD *)v118 = 8236;
              this[4] = (uint64_t *)((char *)this[4] + 2);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, ", ");
            }
            v119 = *(_QWORD *)(a2 + 56);
            if (v119)
              sub_22F0D9044(v119, (int)this, 0, a1, 0, "\n", 1uLL);
LABEL_198:
            v120 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v120) > 2)
            {
              *((_BYTE *)v120 + 2) = 41;
              *(_WORD *)v120 = 10537;
              v291 = (uint64_t)this[4] + 3;
LABEL_644:
              this[4] = (uint64_t *)v291;
            }
            else
            {
              v121 = ")))";
              v122 = (llvm::raw_ostream *)this;
LABEL_432:
              llvm::raw_ostream::write(v122, v121);
            }
            goto LABEL_556;
          case 0x1Fu:
            v56 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v56 & 0xFFFFFFFFFFFBFFFFLL;
            v31 = *(_BYTE *)(a1 + 20);
            *(_BYTE *)(a1 + 20) = 0;
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              v57 = this[4];
              if (v57 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v57 + 1);
                *(_BYTE *)v57 = 40;
              }
            }
            v201 = *(_QWORD *)a1;
            v200 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)&v305 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFF7FFLL;
            *((_QWORD *)&v305 + 1) = v200;
            v306[0] = 0;
            *(_DWORD *)((char *)v306 + 3) = 0;
            v202 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0;
            if ((v201 & 0x20000000000) != 0)
              v202 = *(_QWORD *)((*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0) + 8);
            v203 = (_QWORD *)(v202 & 0xFFFFFFFFFFFFFFF0);
            if ((v202 & 8) != 0)
            {
              v203 = (_QWORD *)*v203;
              v204 = *(_QWORD *)((v202 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v202 & 7;
            }
            else
            {
              LODWORD(v204) = v202 & 7;
            }
            v183 = v56 & 0x40000;
            sub_22F119710((int)&v305, (int)v203, v204, (llvm::raw_ostream *)this);
            v205 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v205) <= 2)
            {
              v185 = "::*";
              v186 = (llvm::raw_ostream *)this;
              goto LABEL_413;
            }
            *((_BYTE *)v205 + 2) = 42;
            *(_WORD *)v205 = 14906;
            v292 = (uint64_t)this[4] + 3;
            goto LABEL_592;
          case 0x20u:
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            if (sub_22E5761BC(a2) || sub_22E491464(a2) || sub_22E509ED0(a2) || sub_22E509F54(a2))
              goto LABEL_556;
            if (*(_BYTE *)(a1 + 20))
            {
              v52 = this[4];
              if (v52 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v52 + 1);
                *(_BYTE *)v52 = 32;
              }
            }
            v147 = this[4];
            if (v147 < this[3])
            {
              this[4] = (uint64_t *)((char *)v147 + 1);
              v148 = 42;
              goto LABEL_404;
            }
            v174 = (llvm::raw_ostream *)this;
            goto LABEL_614;
          case 0x21u:
            v34 = *(_QWORD *)(a2 + 16);
            if ((v34 & 0x1FFF80000) == 0)
            {
              v26 = *(_QWORD *)(a2 + 24);
LABEL_555:
              sub_22F11E768(a1, v26, (llvm::raw_ostream *)this);
              goto LABEL_556;
            }
            if ((v34 & 0x100000000) != 0)
            {
              v35 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v35) > 8)
              {
                *((_BYTE *)v35 + 8) = 32;
                *v35 = *(_QWORD *)"__kindof ";
                this[4] = (uint64_t *)((char *)this[4] + 9);
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, "__kindof ");
              }
            }
            v36 = *(_QWORD *)(a2 + 24);
            if ((*(_BYTE *)(a1 + 5) & 2) != 0)
              v36 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 24) & 7;
            v37 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
            if ((v36 & 8) != 0)
            {
              v37 = (_QWORD *)*v37;
              v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v36 & 7;
            }
            else
            {
              LODWORD(v38) = v36 & 7;
            }
            sub_22F119710(a1, (int)v37, v38, (llvm::raw_ostream *)this);
            if ((*(_WORD *)(a2 + 18) & 0x3F8) != 0)
            {
              v180 = this[4];
              if (v180 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v180 + 1);
                *(_BYTE *)v180 = 60;
              }
              v214 = (*(_QWORD *)(a2 + 16) >> 19) & 0x7FLL;
              if (v214)
              {
                v215 = (uint64_t *)(a2 + 48);
                v216 = 8 * v214;
                v217 = 1;
                do
                {
                  v218 = *v215;
                  if ((v217 & 1) == 0)
                  {
                    v219 = this[4];
                    if (this[3] == v219)
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)this, ",");
                    }
                    else
                    {
                      *(_BYTE *)v219 = 44;
                      this[4] = (uint64_t *)((char *)this[4] + 1);
                    }
                  }
                  if ((*(_BYTE *)(a1 + 5) & 2) != 0)
                    v218 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFFFF0) + 8) | v218 & 7;
                  v220 = (_QWORD *)(v218 & 0xFFFFFFFFFFFFFFF0);
                  if ((v218 & 8) != 0)
                  {
                    v220 = (_QWORD *)*v220;
                    v221 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v218 & 7;
                  }
                  else
                  {
                    LODWORD(v221) = v218 & 7;
                  }
                  sub_22F119710(a1, (int)v220, v221, (llvm::raw_ostream *)this);
                  v217 = 0;
                  ++v215;
                  v216 -= 8;
                }
                while (v216);
              }
              v222 = this[4];
              if (v222 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v222 + 1);
                *(_BYTE *)v222 = 62;
              }
            }
            if ((*(_BYTE *)(a2 + 19) & 0xFC) == 0)
              goto LABEL_320;
            v223 = this[4];
            if (v223 >= this[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this);
            }
            else
            {
              this[4] = (uint64_t *)((char *)v223 + 1);
              *(_BYTE *)v223 = 60;
            }
            v224 = *(_QWORD *)(a2 + 16);
            if (v224 >> 26)
            {
              v225 = (uint64_t *)(a2 + 8 * ((v224 >> 19) & 0x7F) + 48);
              v226 = 8 * (v224 >> 26);
              v227 = 1;
              do
              {
                v228 = *v225;
                if ((v227 & 1) == 0)
                {
                  v229 = this[4];
                  if (v229 >= this[3])
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)this);
                  }
                  else
                  {
                    this[4] = (uint64_t *)((char *)v229 + 1);
                    *(_BYTE *)v229 = 44;
                  }
                }
                v230 = *(_QWORD *)(v228 + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(v228 + 40) & 7) == 0 && v230 != 0)
                {
                  v232 = *(unsigned int **)(v230 + 16);
                  v235 = *v232;
                  v233 = v232 + 4;
                  v234 = v235;
                  v236 = this[4];
                  if (v235 <= (unint64_t)((char *)this[3] - (char *)v236))
                  {
                    if (v234)
                    {
                      memcpy(v236, v233, v234);
                      this[4] = (uint64_t *)((char *)this[4] + v234);
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)v233);
                  }
                }
                v227 = 0;
                ++v225;
                v226 -= 8;
              }
              while (v226);
            }
            v166 = (char *)this[4];
            if (v166 < (char *)this[3])
            {
              this[4] = (uint64_t *)(v166 + 1);
              v167 = 62;
              goto LABEL_317;
            }
            v168 = (llvm::raw_ostream *)this;
            goto LABEL_319;
          case 0x22u:
            v279 = *(_QWORD *)(sub_22F409D88(a2) + 40);
            if ((v279 & 7) != 0 || (v280 = v279 & 0xFFFFFFFFFFFFFFF8) == 0)
            {
              v285 = this + 3;
              v287 = this + 4;
            }
            else
            {
              v281 = *(unsigned int **)(v280 + 16);
              v284 = *v281;
              v282 = v281 + 4;
              v283 = v284;
              v285 = this + 3;
              v287 = this + 4;
              v286 = this[4];
              if (v284 <= (unint64_t)((char *)this[3] - (char *)v286))
              {
                if (v283)
                {
                  memcpy(v286, v282, v283);
                  *v287 = (uint64_t *)((char *)*v287 + v283);
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)v282);
              }
            }
            if (*(_BYTE *)(a1 + 20))
              goto LABEL_556;
            v147 = *v287;
            if ((unint64_t)*v287 >= *v285)
              goto LABEL_613;
            *v287 = (uint64_t *)((char *)v147 + 1);
            goto LABEL_403;
          case 0x23u:
            v44 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(*(_QWORD *)(a2 + 40) + 40) & 7) != 0 || v44 == 0)
            {
              v46 = this + 3;
              v47 = (void **)(this + 4);
            }
            else
            {
              v139 = *(unsigned int **)(v44 + 16);
              v142 = *v139;
              v140 = v139 + 4;
              v141 = v142;
              v46 = this + 3;
              v47 = (void **)(this + 4);
              v143 = this[4];
              if (v142 <= (unint64_t)((char *)this[3] - (char *)v143))
              {
                if (v141)
                {
                  memcpy(v143, v140, v141);
                  *v47 = (char *)*v47 + v141;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)v140);
              }
            }
            if ((*(_BYTE *)(a2 + 32) & 0x3F) != 0)
            {
              v187 = *v47;
              if ((unint64_t)*v47 >= *v46)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                *v47 = v187 + 1;
                *v187 = 60;
              }
              if ((*(_BYTE *)(a2 + 32) & 0x3F) != 0)
              {
                v188 = (uint64_t *)(a2 + 48);
                v189 = 8 * (*(_BYTE *)(a2 + 32) & 0x3F);
                v190 = 1;
                do
                {
                  v191 = *v188;
                  if ((v190 & 1) == 0)
                  {
                    v192 = *v47;
                    if ((unint64_t)*v47 >= *v46)
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)this);
                    }
                    else
                    {
                      *v47 = v192 + 1;
                      *v192 = 44;
                    }
                  }
                  v193 = *(_QWORD *)(v191 + 40) & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_QWORD *)(v191 + 40) & 7) == 0 && v193 != 0)
                  {
                    v195 = *(unsigned int **)(v193 + 16);
                    v198 = *v195;
                    v196 = v195 + 4;
                    v197 = v198;
                    if ((unint64_t)v198 <= *v46 - (_QWORD)*v47)
                    {
                      if (v197)
                      {
                        memcpy(*v47, v196, v197);
                        *v47 = (char *)*v47 + v197;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)v196);
                    }
                  }
                  v190 = 0;
                  ++v188;
                  v189 -= 8;
                }
                while (v189);
              }
              v199 = *v47;
              if ((unint64_t)*v47 >= *v46)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                *v47 = v199 + 1;
                *v199 = 62;
              }
            }
            if (*(_BYTE *)(a1 + 20))
              goto LABEL_556;
            v147 = (uint64_t *)*v47;
            if ((unint64_t)*v47 >= *v46)
              goto LABEL_613;
            *v47 = (char *)v147 + 1;
            goto LABEL_403;
          case 0x24u:
          case 0x38u:
            goto LABEL_119;
          case 0x25u:
            v26 = *(_QWORD *)(a2 + 32);
            if (*(_BYTE *)(a1 + 20)
              || *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2)
            {
              goto LABEL_555;
            }
            sub_22F11E768(a1, v26, (llvm::raw_ostream *)this);
            goto LABEL_276;
          case 0x26u:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            v48 = this[4];
            v49 = (char *)this[3] - (char *)v48;
            if (*(_BYTE *)(a2 + 40))
            {
              if (v49 <= 9)
              {
                v50 = "read_only ";
                v51 = (llvm::raw_ostream *)this;
LABEL_326:
                llvm::raw_ostream::write(v51, v50);
                goto LABEL_327;
              }
              *((_WORD *)v48 + 4) = 8313;
              *v48 = *(_QWORD *)"read_only ";
              v296 = (uint64_t)this[4] + 10;
            }
            else
            {
              if (v49 <= 0xA)
              {
                v50 = "write_only ";
                v51 = (llvm::raw_ostream *)this;
                goto LABEL_326;
              }
              *(_DWORD *)((char *)v48 + 7) = 544828526;
              *v48 = *(_QWORD *)"write_only ";
              v296 = (uint64_t)this[4] + 11;
            }
            this[4] = (uint64_t *)v296;
LABEL_327:
            v169 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v169) > 4)
            {
              *((_BYTE *)v169 + 4) = 32;
              *(_DWORD *)v169 = 1701865840;
              this[4] = (uint64_t *)((char *)this[4] + 5);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "pipe ");
            }
            v170 = *(_QWORD *)(a2 + 32);
            if ((*(_BYTE *)(a1 + 5) & 2) != 0)
              v170 = *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 32) & 7;
            v171 = (_QWORD *)(v170 & 0xFFFFFFFFFFFFFFF0);
            if ((v170 & 8) != 0)
            {
              v171 = (_QWORD *)*v171;
              v172 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v170 & 7;
            }
            else
            {
              LODWORD(v172) = v170 & 7;
            }
            sub_22F119710(a1, (int)v171, v172, (llvm::raw_ostream *)this);
LABEL_354:
            if (!*(_BYTE *)(a1 + 20))
            {
              v179 = this[4];
              if (v179 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v179 + 1);
                *(_BYTE *)v179 = 32;
              }
            }
LABEL_428:
            v206 = *(_QWORD *)a1 & 0xFFFFFFFFFFFBFFFFLL | (((v17 >> 18) & 1) << 18);
LABEL_429:
            *(_QWORD *)a1 = v206;
LABEL_556:
            if (v15)
              sub_22F1186E0(&v304, (llvm::raw_ostream *)this, (_QWORD *)a1, v9 == 0);
            *(_BYTE *)(a1 + 20) = v9;
            return;
          case 0x27u:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            v96 = *(_BYTE *)(a1 + 20);
            *(_BYTE *)(a1 + 20) = 0;
            sub_22F11E768(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              v288 = this[4];
              if (v288 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v288 + 1);
                *(_BYTE *)v288 = 40;
              }
            }
            v295 = this[4];
            if (v295 >= this[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this);
            }
            else
            {
              this[4] = (uint64_t *)((char *)v295 + 1);
              *(_BYTE *)v295 = 42;
            }
            sub_22F40B764((_QWORD *)*(unsigned int *)(a2 + 40));
            goto LABEL_427;
          case 0x28u:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            v96 = *(_BYTE *)(a1 + 20);
            *(_BYTE *)(a1 + 20) = 0;
            v97 = sub_22F11E834(*(_QWORD *)(a2 + 32));
            sub_22F11E768(a1, v97, (llvm::raw_ostream *)this);
            if ((*(_DWORD *)(*(_QWORD *)(v97 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              v98 = this[4];
              if (v98 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v98 + 1);
                *(_BYTE *)v98 = 40;
              }
            }
            v212 = this[4];
            if (v212 >= this[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this);
            }
            else
            {
              this[4] = (uint64_t *)((char *)v212 + 1);
              *(_BYTE *)v212 = 38;
            }
LABEL_427:
            *(_BYTE *)(a1 + 20) = v96;
            goto LABEL_428;
          case 0x29u:
            v30 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v30 & 0xFFFFFFFFFFFBFFFFLL;
            v31 = *(_BYTE *)(a1 + 20);
            *(_BYTE *)(a1 + 20) = 0;
            v32 = sub_22F11E834(*(_QWORD *)(a2 + 32));
            sub_22F11E768(a1, v32, (llvm::raw_ostream *)this);
            if ((*(_DWORD *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              v33 = this[4];
              if (v33 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v33 + 1);
                *(_BYTE *)v33 = 40;
              }
            }
            v183 = v30 & 0x40000;
            v184 = (char *)this[4];
            if ((unint64_t)((char *)this[3] - v184) > 1)
            {
              *(_WORD *)v184 = 9766;
              v292 = (uint64_t)this[4] + 2;
LABEL_592:
              this[4] = (uint64_t *)v292;
            }
            else
            {
              v185 = "&&";
              v186 = (llvm::raw_ostream *)this;
LABEL_413:
              llvm::raw_ostream::write(v186, v185);
            }
            *(_BYTE *)(a1 + 20) = v31;
            v206 = *(_QWORD *)a1 & 0xFFFFFFFFFFFBFFFFLL | v183;
            goto LABEL_429;
          case 0x2Au:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            sub_22F11E524(a1, *(_QWORD *)(a2 + 32), (llvm::raw_ostream *)this);
            goto LABEL_428;
          case 0x2Bu:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            v18 = *(_QWORD *)(a2 + 8);
            goto LABEL_23;
          case 0x2Cu:
            goto LABEL_229;
          case 0x2Du:
            if ((*(_BYTE *)(a1 + 5) & 8) == 0)
              goto LABEL_229;
            v150 = sub_22F114198(*(_QWORD *)(a2 + 24));
            v151 = (uint64_t *)sub_22EE47620(v150);
            v153 = v152;
            while (1)
            {
              v154 = v151;
              if (v151 >= v153)
              {
                if (v151 == v153)
                  goto LABEL_229;
                v155 = v153;
                while (*(_WORD *)(*v155 + 32) != 286)
                {
                  if (++v155 == v151)
                    goto LABEL_229;
                }
                v154 = v151;
              }
              else
              {
                while (*(_WORD *)(*v154 + 32) != 286)
                {
                  if (++v154 == v153)
                    goto LABEL_229;
                }
                v155 = v153;
              }
              if (v154 == v155)
              {
LABEL_229:
                v131 = sub_22F114198(*(_QWORD *)(a2 + 24));
                sub_22F11E89C(a1, v131, (char **)this);
                goto LABEL_556;
              }
              do
              {
                v157 = *v151++;
                v156 = v157;
              }
              while (*(_WORD *)(v157 + 32) != 286);
              v158 = sub_22F10C2A4(*(_QWORD *)(**(_QWORD **)(v156 + 40) & 0xFFFFFFFFFFFFFFF0));
              if (v158)
              {
                if ((*(_DWORD *)(v158 + 28) & 0x7Fu) - 35 >= 3)
                  v159 = 0;
                else
                  v159 = v158;
              }
              else
              {
                v159 = 0;
              }
              v160 = sub_22F114198(*(_QWORD *)(a2 + 24));
              if (v159)
              {
                v161 = v160;
                if (v160)
                {
                  if (v159 == v160)
                    break;
                  v162 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 32))(v159);
                  if (v162 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 32))(v161))
                    break;
                }
              }
            }
            for (j = **(_QWORD **)(v156 + 40) & 0xFFFFFFFFFFFFFFF0; ; j = sub_22F10D19C(v60) & 0xFFFFFFFFFFFFFFF0)
            {
              v60 = *(_QWORD *)j;
              v164 = *(unsigned __int8 *)(*(_QWORD *)j + 16);
              if (v60 && v164 == 50)
              {
                v27 = *(_QWORD *)(v60 + 24);
LABEL_145:
                sub_22F11F8B8(a1, v27, (llvm::raw_ostream *)this);
                goto LABEL_556;
              }
              if (v60 && v164 == 46)
                break;
            }
            v59 = a1;
            v149 = (llvm::raw_ostream *)this;
            LODWORD(v58) = 1;
LABEL_280:
            sub_22F11F998(v59, v60, v149, v58);
            goto LABEL_556;
          case 0x2Eu:
            v58 = (*(_QWORD *)a1 >> 40) & 1;
            v59 = a1;
            v60 = a2;
            goto LABEL_279;
          case 0x2Fu:
            sub_22F11E524(a1, a2, (llvm::raw_ostream *)this);
            goto LABEL_556;
          case 0x30u:
            v136 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v136) > 6)
            {
              *(_DWORD *)((char *)v136 + 3) = 543584101;
              *(_DWORD *)v136 = 1701869940;
              this[4] = (uint64_t *)((char *)this[4] + 7);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "typeof ");
            }
            v137 = *(_QWORD *)(a2 + 24);
            if (v137)
              sub_22F0D9044(v137, (int)this, 0, a1, 0, "\n", 1uLL);
            goto LABEL_320;
          case 0x31u:
            v132 = this[4];
            if ((unint64_t)((char *)this[3] - (char *)v132) > 6)
            {
              *(_DWORD *)((char *)v132 + 3) = 677801829;
              *(_DWORD *)v132 = 1701869940;
              this[4] = (uint64_t *)((char *)this[4] + 7);
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "typeof(");
            }
            v133 = *(_QWORD *)(a2 + 24);
            if ((*(_BYTE *)(a1 + 5) & 2) != 0)
              v133 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 24) & 7;
            v134 = (_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0);
            if ((v133 & 8) != 0)
            {
              v134 = (_QWORD *)*v134;
              v135 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v133 & 7;
            }
            else
            {
              LODWORD(v135) = v133 & 7;
            }
            sub_22F119710(a1, (int)v134, v135, (llvm::raw_ostream *)this);
LABEL_315:
            v166 = (char *)this[4];
            if (v166 >= (char *)this[3])
            {
              v168 = (llvm::raw_ostream *)this;
LABEL_319:
              llvm::raw_ostream::write(v168);
            }
            else
            {
              this[4] = (uint64_t *)(v166 + 1);
              v167 = 41;
LABEL_317:
              *v166 = v167;
            }
LABEL_320:
            if (*(_BYTE *)(a1 + 20))
              goto LABEL_556;
            v147 = this[4];
            if (v147 >= this[3])
            {
LABEL_613:
              v174 = (llvm::raw_ostream *)this;
              goto LABEL_614;
            }
            this[4] = (uint64_t *)((char *)v147 + 1);
LABEL_403:
            v148 = 32;
            goto LABEL_404;
          case 0x32u:
          case 0x34u:
            v27 = *(_QWORD *)(a2 + 24);
            goto LABEL_145;
          case 0x33u:
            v17 = *(_QWORD *)a1;
            if ((*(_QWORD *)a1 & 0x80000) == 0)
              *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFBFFFFLL;
            if (!*(_DWORD *)(a2 + 40))
            {
              v175 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v175) > 0x11)
              {
                *((_WORD *)v175 + 8) = 10341;
                *(_OWORD *)v175 = *(_OWORD *)"__underlying_type(";
                this[4] = (uint64_t *)((char *)this[4] + 18);
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, "__underlying_type(");
              }
              v100 = *(_QWORD *)(a2 + 24);
LABEL_346:
              if ((*(_BYTE *)(a1 + 5) & 2) != 0)
                v100 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFFF0) + 8) | v100 & 7;
              v176 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFFFF0);
              if ((v100 & 8) != 0)
              {
                v176 = (_QWORD *)*v176;
                v177 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v100 & 7;
              }
              else
              {
                LODWORD(v177) = v100 & 7;
              }
              sub_22F119710(a1, (int)v176, v177, (llvm::raw_ostream *)this);
              v178 = this[4];
              if (v178 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v178 + 1);
                *(_BYTE *)v178 = 41;
              }
              goto LABEL_354;
            }
            v18 = *(_QWORD *)(a2 + 24);
LABEL_23:
            sub_22F11E768(a1, v18, (llvm::raw_ostream *)this);
            goto LABEL_428;
          case 0x35u:
            v27 = *(_QWORD *)(a2 + 32);
            v81 = *(_DWORD *)(v27 + 28) & 0x7F;
            v20 = v81 > 0x2F;
            v82 = (1 << v81) & 0xC00000060000;
            if (!v20 && v82 != 0)
              v27 = sub_22EFBAEA4(*(_QWORD *)(a2 + 32));
            goto LABEL_145;
          case 0x36u:
            v28 = *(_QWORD *)(a2 + 32);
            sub_22F11E768(a1, v28, (llvm::raw_ostream *)this);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39)
            {
              v29 = this[4];
              if (v29 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this);
              }
              else
              {
                this[4] = (uint64_t *)((char *)v29 + 1);
                *(_BYTE *)v29 = 32;
              }
              sub_22F11FB04(a2, (llvm::raw_ostream *)this, a1);
            }
            goto LABEL_556;
          case 0x37u:
            switch((v16 >> 19) & 0xF)
            {
              case 0u:
                v245 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v245) > 0x1E)
                {
                  qmemcpy(v245, "__attribute__((__vector_size__(", 31);
                  this[4] = (uint64_t *)((char *)this[4] + 31);
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this, "__attribute__((__vector_size__(");
                }
                v246 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
                v247 = *((_QWORD *)v246 + 4);
                if ((unint64_t)(*((_QWORD *)v246 + 3) - v247) > 9)
                {
                  *(_WORD *)(v247 + 8) = 10342;
                  *(_QWORD *)v247 = *(_QWORD *)" * sizeof(";
                  *((_QWORD *)v246 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(v246, " * sizeof(");
                }
                v248 = *(_QWORD *)(a2 + 32);
                if ((*(_BYTE *)(a1 + 5) & 2) != 0)
                  v248 = *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 32) & 7;
                v249 = (_QWORD *)(v248 & 0xFFFFFFFFFFFFFFF0);
                if ((v248 & 8) != 0)
                {
                  v249 = (_QWORD *)*v249;
                  v250 = *(_QWORD *)((v248 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v248 & 7;
                }
                else
                {
                  LODWORD(v250) = v248 & 7;
                }
                sub_22F119710(a1, (int)v249, v250, (llvm::raw_ostream *)this);
                v289 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v289) <= 4)
                {
                  v62 = ")))) ";
                  v63 = (llvm::raw_ostream *)this;
                  goto LABEL_118;
                }
                *((_BYTE *)v289 + 4) = 32;
                *(_DWORD *)v289 = 690563369;
                v294 = (uint64_t)this[4] + 5;
                goto LABEL_590;
              case 2u:
                v61 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v61) <= 8)
                {
                  v62 = "__vector ";
                  goto LABEL_117;
                }
                v293 = "__vector ";
                goto LABEL_589;
              case 3u:
LABEL_430:
                v213 = (char *)this[4];
                if ((unint64_t)((char *)this[3] - v213) <= 0xF)
                {
                  v121 = "__vector __pixel";
                  v122 = (llvm::raw_ostream *)this;
                  goto LABEL_432;
                }
                *(_OWORD *)v213 = *(_OWORD *)"__vector __pixel";
                v291 = (uint64_t)(this[4] + 2);
                goto LABEL_644;
              case 4u:
                v251 = (char *)this[4];
                if ((unint64_t)((char *)this[3] - v251) <= 0xF)
                {
                  v62 = "__vector __BOOL ";
                  v63 = (llvm::raw_ostream *)this;
                  goto LABEL_118;
                }
                *(_OWORD *)v251 = *(_OWORD *)"__vector __BOOL ";
                v294 = (uint64_t)(this[4] + 2);
                goto LABEL_590;
              case 5u:
                v252 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v252) <= 0x1F)
                {
                  v243 = "__attribute__((neon_vector_type(";
                  v244 = (llvm::raw_ostream *)this;
                  goto LABEL_505;
                }
                qmemcpy(v252, "__attribute__((neon_vector_type(", 32);
                v299 = (uint64_t)(this[4] + 4);
                goto LABEL_657;
              case 6u:
                v242 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v242) > 0x23)
                {
                  qmemcpy(v242, "__attribute__((neon_polyvector_type(", 36);
                  v299 = (uint64_t)this[4] + 36;
LABEL_657:
                  this[4] = (uint64_t *)v299;
                }
                else
                {
                  v243 = "__attribute__((neon_polyvector_type(";
                  v244 = (llvm::raw_ostream *)this;
LABEL_505:
                  llvm::raw_ostream::write(v244, v243);
                }
                v63 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
                v253 = (_DWORD *)*((_QWORD *)v63 + 4);
                if (*((_QWORD *)v63 + 3) - (_QWORD)v253 <= 3uLL)
                {
                  v62 = "))) ";
                  goto LABEL_118;
                }
                *v253 = 539568425;
                *((_QWORD *)v63 + 4) += 4;
                goto LABEL_119;
              case 7u:
              case 8u:
                v39 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v39) > 0x26)
                {
                  qmemcpy(v39, "__attribute__((__arm_sve_vector_bits__(", 39);
                  this[4] = (uint64_t *)((char *)this[4] + 39);
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this, "__attribute__((__arm_sve_vector_bits__(");
                }
                llvm::raw_ostream::operator<<();
                v40 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v40) > 9)
                {
                  *((_WORD *)v40 + 4) = 10342;
                  *v40 = *(_QWORD *)" * sizeof(";
                  this[4] = (uint64_t *)((char *)this[4] + 10);
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)this, " * sizeof(");
                }
                v41 = *(_QWORD *)(a2 + 32);
                if ((*(_BYTE *)(a1 + 5) & 2) != 0)
                  v41 = *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 32) & 7;
                v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
                if ((v41 & 8) != 0)
                {
                  v42 = (_QWORD *)*v42;
                  v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v41 & 7;
                }
                else
                {
                  LODWORD(v43) = v41 & 7;
                }
                sub_22F119710(a1, (int)v42, v43, (llvm::raw_ostream *)this);
                v61 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v61) <= 8)
                {
                  v62 = ") * 8))) ";
                  goto LABEL_117;
                }
                v293 = ") * 8))) ";
                break;
              default:
                goto LABEL_556;
            }
            goto LABEL_589;
          default:
            goto LABEL_556;
        }
      }
    }
    v13 = *(_QWORD *)(i + 24);
    if (v13 <= 0xF)
      v13 = i;
    goto LABEL_11;
  }
}

void sub_22F11C894()
{
  JUMPOUT(0x22F11AD78);
}

void sub_22F11C8A4()
{
  JUMPOUT(0x22F11AE54);
}

void sub_22F11C8B4()
{
  JUMPOUT(0x22F11ADB8);
}

void sub_22F11C8C0()
{
  JUMPOUT(0x22F11AE94);
}

void sub_22F11C8CC()
{
  JUMPOUT(0x22F11B648);
}

void sub_22F11C8DC()
{
  JUMPOUT(0x22F11B688);
}

void sub_22F11C8E8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  void *v15;
  const char *v16;
  llvm::raw_ostream *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  llvm::raw_ostream *v34;
  int v35;
  _DWORD *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _BYTE *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  void *v68;
  const char *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  unsigned int v78;
  uint64_t v79;
  void **v80;
  _BYTE *v81;
  _QWORD *v82;
  void *v83;
  const char *v84;
  size_t v85;
  void *v86;
  _WORD *v87;
  _QWORD *v88;
  char v89;
  _BYTE *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _WORD *v96;
  char v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  llvm::raw_ostream *v102;
  uint64_t v103;
  size_t v104;
  const void *v105;
  void *v106;
  size_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  const char *v114;
  llvm::raw_ostream *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  int v119;
  _WORD *v120;
  const char *v121;
  llvm::raw_ostream *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _DWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _BYTE *v130;
  llvm::raw_ostream *v131;
  std::string *v132;
  uint64_t v133;
  unsigned int v134;
  void *v135;
  const char *v136;
  llvm::raw_ostream *v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  int v143;
  void *v144;
  const char *v145;
  llvm::raw_ostream *v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  _OWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  size_t v162;
  void *v163;
  _BYTE *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  _WORD *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  __int16 v173;
  const char *v174;
  unsigned int v175;
  int v176;
  const char *v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  __int16 v183;
  std::string v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  int v189;
  void **v190;
  void *__p[2];
  uint64_t v192;

  v6 = a3 + 4;
  while (2)
  {
    v7 = *(_DWORD *)(a2 + 16);
    switch((char)v7)
    {
      case 0:
      case 8:
      case 12:
      case 21:
      case 22:
      case 23:
      case 29:
      case 30:
      case 55:
        goto LABEL_124;
      case 1:
        goto LABEL_18;
      case 2:
        v9 = (_BYTE *)a3[4];
        if ((unint64_t)v9 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3);
        }
        else
        {
          *v6 = (uint64_t)(v9 + 1);
          *v9 = 91;
        }
        v24 = *(_DWORD *)(a2 + 16);
        if ((v24 & 0x380000) != 0)
        {
          sub_22F118FDC((llvm::raw_ostream *)a3, (v24 >> 19) & 7, (*(_QWORD *)a1 >> 25) & 1);
          v25 = (_BYTE *)a3[4];
          if ((unint64_t)v25 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v25 + 1);
            *v25 = 32;
          }
        }
        if ((*(_DWORD *)(a2 + 16) & 0x1C00000) == 0x400000)
        {
          v33 = (_DWORD *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v33) > 6)
          {
            *(_DWORD *)((char *)v33 + 3) = 543385972;
            *v33 = 1952543859;
            *v6 += 7;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3, "static ");
          }
        }
        v34 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v20 = (char *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v20 >= *((_QWORD *)v34 + 3))
          goto LABEL_82;
        *((_QWORD *)v34 + 4) = v20 + 1;
        goto LABEL_79;
      case 3:
        v10 = (_BYTE *)a3[4];
        if ((unint64_t)v10 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3);
        }
        else
        {
          *v6 = (uint64_t)(v10 + 1);
          *v10 = 91;
        }
        v26 = *(_QWORD *)(a2 + 48);
        if (!v26)
          goto LABEL_76;
        goto LABEL_75;
      case 4:
        v11 = (_BYTE *)a3[4];
        if ((unint64_t)v11 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3);
        }
        else
        {
          *v6 = (uint64_t)(v11 + 1);
          *v11 = 91;
        }
        v27 = *(_QWORD *)(a2 + 40);
        v20 = (char *)*v6;
        if (!v27)
          goto LABEL_77;
        if ((unint64_t)(a3[3] - (_QWORD)v20) > 0xC)
        {
          qmemcpy(v20, "__counted_by(", 13);
          *v6 += 13;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, "__counted_by(");
        }
        sub_22F0D9044(v27, (int)a3, 0, a1, 0, "\n", 1uLL);
        v28 = (_BYTE *)a3[4];
        if ((_BYTE *)a3[3] == v28)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, ")");
LABEL_76:
          v20 = (char *)a3[4];
        }
        else
        {
          *v28 = 41;
          v20 = (char *)(*v6 + 1);
          *v6 = (uint64_t)v20;
        }
LABEL_77:
        if ((unint64_t)v20 >= a3[3])
        {
          v34 = (llvm::raw_ostream *)a3;
          goto LABEL_82;
        }
        *v6 = (uint64_t)(v20 + 1);
LABEL_79:
        v21 = 93;
        goto LABEL_80;
      case 5:
        v12 = (_BYTE *)a3[4];
        if ((unint64_t)v12 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3);
        }
        else
        {
          *v6 = (uint64_t)(v12 + 1);
          *v12 = 91;
        }
        v29 = *(_DWORD *)(a2 + 16);
        if ((v29 & 0x380000) != 0)
        {
          sub_22F118FDC((llvm::raw_ostream *)a3, (v29 >> 19) & 7, (*(_QWORD *)a1 >> 25) & 1);
          v30 = (_BYTE *)a3[4];
          if ((unint64_t)v30 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v30 + 1);
            *v30 = 32;
          }
        }
        v35 = (*(_DWORD *)(a2 + 16) >> 22) & 7;
        if (v35 == 2)
        {
          v37 = (_BYTE *)a3[4];
          if ((unint64_t)v37 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v37 + 1);
            *v37 = 42;
          }
        }
        else if (v35 == 1)
        {
          v36 = (_DWORD *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v36) > 6)
          {
            *(_DWORD *)((char *)v36 + 3) = 543385972;
            *v36 = 1952543859;
            *v6 += 7;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3, "static ");
          }
        }
        v26 = *(_QWORD *)(a2 + 40);
        if (v26)
LABEL_75:
          sub_22F0D9044(v26, (int)a3, 0, a1, 0, "\n", 1uLL);
        goto LABEL_76;
      case 7:
        v13 = v7 >> 19;
        if (v7 >> 19 != 60 && v13 != 13)
        {
          v75 = *(_BYTE *)(a1 + 21);
          *(_BYTE *)(a1 + 21) = (v13 - 11 < 0x3E) & (0x3FFCBCC000000001uLL >> (v13 - 11));
          v76 = *(_QWORD *)(a2 + 32);
          if ((*(_BYTE *)(a1 + 5) & 2) != 0)
            v76 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFF0) + 8);
          v77 = (_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0);
          if ((v76 & 8) != 0)
            v77 = (_QWORD *)*v77;
          sub_22F11C8E8(a1, v77, a3);
          v78 = *(_DWORD *)(a2 + 16);
          if ((v78 & 0xFFF80000) == 0x780000)
            goto LABEL_183;
          v79 = v78 >> 19;
          if (v79 <= 0x3B)
          {
            if (((1 << v79) & 0x3F30004000) != 0)
            {
LABEL_183:
              *(_BYTE *)(a1 + 21) = v75;
              return;
            }
            if (v79 == 59)
            {
              v133 = *(_QWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!v133 || *(unsigned __int8 *)(v133 + 16) - 27 <= 0xFFFFFFFD)
                v133 = sub_22F10CF48(v133);
              if ((*(_BYTE *)(v133 + 19) & 2) == 0)
                goto LABEL_183;
              v78 = *(_DWORD *)(a2 + 16);
            }
          }
          v134 = v78 >> 19;
          switch(v134)
          {
            case 0u:
              goto LABEL_183;
            case 0xBu:
              v141 = a3[4];
              if ((unint64_t)(a3[3] - v141) <= 0xB)
              {
                v136 = " [[visible]]";
                v137 = (llvm::raw_ostream *)a3;
                goto LABEL_410;
              }
              *(_DWORD *)(v141 + 8) = 1566401900;
              *(_QWORD *)v141 = *(_QWORD *)" [[visible]]";
              v170 = *v6 + 12;
LABEL_416:
              *v6 = v170;
              goto LABEL_183;
            case 0x39u:
              v135 = (void *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v135) <= 0x18)
              {
                v136 = " [[clang::lifetimebound]]";
                v137 = (llvm::raw_ostream *)a3;
LABEL_410:
                llvm::raw_ostream::write(v137, v136);
                goto LABEL_183;
              }
              qmemcpy(v135, " [[clang::lifetimebound]]", 25);
              v170 = *v6 + 25;
              goto LABEL_416;
          }
          v142 = (_OWORD *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v142) > 0xF)
          {
            *v142 = *(_OWORD *)" __attribute__((";
            *v6 += 16;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3, " __attribute__((");
          }
          v143 = *(_DWORD *)(a2 + 16) >> 19;
          switch(v143)
          {
            case '1':
              v144 = (void *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v144) <= 0xE)
              {
                v145 = "aarch64_sve_pcs";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              qmemcpy(v144, "aarch64_sve_pcs", 15);
              v171 = *v6 + 15;
              goto LABEL_449;
            case '2':
              v149 = a3[4];
              if ((unint64_t)(a3[3] - v149) <= 0x11)
              {
                v145 = "aarch64_vector_pcs";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *(_WORD *)(v149 + 16) = 29539;
              *(_OWORD *)v149 = *(_OWORD *)"aarch64_vector_pcs";
              v171 = *v6 + 18;
              goto LABEL_449;
            case '3':
              v150 = (_QWORD *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v150) <= 0xD)
              {
                v145 = "acquire_handle";
                goto LABEL_392;
              }
              v172 = "acquire_handle";
              goto LABEL_437;
            case '4':
              v151 = a3[4];
              if ((unint64_t)(a3[3] - v151) <= 9)
              {
                v145 = "nocf_check";
                goto LABEL_404;
              }
              v173 = 27491;
              v174 = "nocf_check";
              goto LABEL_445;
            case '5':
              v152 = a3[4];
              if ((unint64_t)(a3[3] - v152) <= 4)
              {
                v145 = "cdecl";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *(_BYTE *)(v152 + 4) = 108;
              *(_DWORD *)v152 = 1667589219;
              v171 = *v6 + 5;
              goto LABEL_449;
            case '6':
              v153 = (uint64_t *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v153) <= 7)
              {
                v145 = "fastcall";
                goto LABEL_399;
              }
              v175 = 1953718630;
              goto LABEL_441;
            case '7':
              v154 = a3[4];
              if ((unint64_t)(a3[3] - v154) <= 0xB)
              {
                v145 = "inteloclbicc";
                goto LABEL_382;
              }
              v176 = 1667459426;
              v177 = "inteloclbicc";
              goto LABEL_432;
            case '8':
              v155 = (_OWORD *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v155) <= 0xF)
              {
                v145 = "intersectioncall";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *v155 = *(_OWORD *)"intersectioncall";
              v171 = *v6 + 16;
              goto LABEL_449;
            case '9':
            case '<':
              goto LABEL_408;
            case ':':
              v156 = a3[4];
              if ((unint64_t)(a3[3] - v156) <= 5)
              {
                v145 = "ms_abi";
                goto LABEL_363;
              }
              *(_WORD *)(v156 + 4) = 26978;
              v178 = 1633645421;
              goto LABEL_428;
            case ';':
              v157 = a3[4];
              if ((unint64_t)(a3[3] - v157) <= 0x12)
              {
                v145 = "ns_returns_retained";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *(_DWORD *)(v157 + 15) = 1684369001;
              *(_OWORD *)v157 = *(_OWORD *)"ns_returns_retained";
              v171 = *v6 + 19;
              goto LABEL_449;
            case '=':
              v156 = a3[4];
              if ((unint64_t)(a3[3] - v156) <= 5)
              {
                v145 = "pascal";
LABEL_363:
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *(_WORD *)(v156 + 4) = 27745;
              v178 = 1668505968;
LABEL_428:
              *(_DWORD *)v156 = v178;
              v171 = *v6 + 6;
              goto LABEL_449;
            case '>':
              v158 = (_DWORD *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v158) > 3)
              {
                *v158 = 678650736;
                *v6 += 4;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a3, "pcs(");
              }
              v159 = *(_QWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v159 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                 - 25 >= 2)
              {
                do
                  v159 = *(_QWORD *)(sub_22F10ACF8(v159) & 0xFFFFFFFFFFFFFFF0);
                while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v159 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 16)
                      - 25 > 1);
              }
              if (*(unsigned __int8 *)(v159 + 16) - 27 <= 0xFFFFFFFD)
                v159 = sub_22F10CF48(v159);
              v160 = *(_QWORD *)(v159 + 16) & 0xF80000;
              if (v160 == 4718592)
                v161 = "\"aapcs\"";
              else
                v161 = "\"aapcs-vfp\"";
              if (v160 == 4718592)
                v162 = 7;
              else
                v162 = 11;
              v163 = (void *)a3[4];
              if (v162 <= a3[3] - (uint64_t)v163)
              {
                memcpy(v163, v161, v162);
                v164 = (_BYTE *)(*v6 + v162);
                *v6 = (uint64_t)v164;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a3, v161);
                v164 = (_BYTE *)a3[4];
              }
              if ((unint64_t)v164 >= a3[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a3);
              }
              else
              {
                *v6 = (uint64_t)(v164 + 1);
                *v164 = 41;
              }
              goto LABEL_408;
            case '?':
              v154 = a3[4];
              if ((unint64_t)(a3[3] - v154) <= 0xB)
              {
                v145 = "preserve_all";
LABEL_382:
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              v176 = 1819042143;
              v177 = "preserve_all";
LABEL_432:
              *(_DWORD *)(v154 + 8) = v176;
              *(_QWORD *)v154 = *(_QWORD *)v177;
              v171 = *v6 + 12;
              goto LABEL_449;
            case '@':
              v165 = (void *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v165) <= 0xC)
              {
                v145 = "preserve_most";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              qmemcpy(v165, "preserve_most", 13);
              v171 = *v6 + 13;
              goto LABEL_449;
            case 'A':
              v148 = (int *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v148) <= 6)
              {
                v145 = "regcall";
                goto LABEL_389;
              }
              *(int *)((char *)v148 + 3) = 1819042147;
              v179 = 1667720562;
              goto LABEL_447;
            case 'B':
              v148 = (int *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v148) <= 6)
              {
                v145 = "stdcall";
                goto LABEL_389;
              }
              *(int *)((char *)v148 + 3) = 1819042147;
              v179 = 1667527795;
              goto LABEL_447;
            case 'C':
              v150 = (_QWORD *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v150) <= 0xD)
              {
                v145 = "swiftasynccall";
LABEL_392:
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              v172 = "swiftasynccall";
LABEL_437:
              *v150 = *(_QWORD *)v172;
              *(_QWORD *)((char *)v150 + 6) = *(_QWORD *)(v172 + 6);
              v171 = *v6 + 14;
              goto LABEL_449;
            case 'D':
              v166 = a3[4];
              if ((unint64_t)(a3[3] - v166) <= 8)
              {
                v145 = "swiftcall";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *(_BYTE *)(v166 + 8) = 108;
              *(_QWORD *)v166 = *(_QWORD *)"swiftcall";
              v171 = *v6 + 9;
              goto LABEL_449;
            case 'E':
              v153 = (uint64_t *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v153) <= 7)
              {
                v145 = "sysv_abi";
                goto LABEL_399;
              }
              v180 = 0x6962615F76737973;
              goto LABEL_442;
            case 'F':
              v153 = (uint64_t *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v153) <= 7)
              {
                v145 = "thiscall";
LABEL_399:
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              v175 = 1936287860;
LABEL_441:
              v180 = v175 | 0x6C6C616300000000;
LABEL_442:
              *v153 = v180;
              v171 = *v6 + 8;
              goto LABEL_449;
            case 'G':
              v167 = a3[4];
              if ((unint64_t)(a3[3] - v167) <= 0xA)
              {
                v145 = "valist_size";
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              *(_DWORD *)(v167 + 7) = 1702521203;
              *(_QWORD *)v167 = *(_QWORD *)"valist_size";
              v171 = *v6 + 11;
              goto LABEL_449;
            case 'H':
              v151 = a3[4];
              if ((unint64_t)(a3[3] - v151) <= 9)
              {
                v145 = "vectorcall";
LABEL_404:
                v146 = (llvm::raw_ostream *)a3;
                goto LABEL_407;
              }
              v173 = 27756;
              v174 = "vectorcall";
LABEL_445:
              *(_WORD *)(v151 + 8) = v173;
              *(_QWORD *)v151 = *(_QWORD *)v174;
              v171 = *v6 + 10;
              goto LABEL_449;
            default:
              if (v143 == 1)
              {
                v168 = (void *)a3[4];
                if ((unint64_t)(a3[3] - (_QWORD)v168) <= 0x22)
                {
                  v145 = "__clang_arm_mve_strict_polymorphism";
                  v146 = (llvm::raw_ostream *)a3;
LABEL_407:
                  llvm::raw_ostream::write(v146, v145);
                  goto LABEL_408;
                }
                qmemcpy(v168, "__clang_arm_mve_strict_polymorphism", 35);
                v171 = *v6 + 35;
              }
              else
              {
                if (v143 != 12)
                  goto LABEL_408;
                v148 = (int *)a3[4];
                if ((unint64_t)(a3[3] - (_QWORD)v148) <= 6)
                {
                  v145 = "noderef";
LABEL_389:
                  v146 = (llvm::raw_ostream *)a3;
                  goto LABEL_407;
                }
                *(int *)((char *)v148 + 3) = 1717924453;
                v179 = 1701080942;
LABEL_447:
                *v148 = v179;
                v171 = *v6 + 7;
              }
LABEL_449:
              *v6 = v171;
LABEL_408:
              v169 = (_WORD *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v169) <= 1)
              {
                v136 = "))";
                v137 = (llvm::raw_ostream *)a3;
                goto LABEL_410;
              }
              *v169 = 10537;
              v170 = *v6 + 2;
              goto LABEL_416;
          }
        }
LABEL_18:
        v8 = *(_QWORD *)(a2 + 40);
        goto LABEL_84;
      case 10:
        v48 = *(_BYTE *)(a1 + 20);
        *(_BYTE *)(a1 + 20) = 0;
        v49 = *(_QWORD *)(a2 + 32);
        goto LABEL_212;
      case 14:
      case 15:
        v8 = *(_QWORD *)(a2 + 24);
        if (v8 < 0x10)
          return;
        goto LABEL_84;
      case 16:
        v15 = (void *)a3[4];
        if ((unint64_t)(a3[3] - (_QWORD)v15) <= 0x1D)
        {
          v16 = " __attribute__((address_space(";
          v17 = (llvm::raw_ostream *)a3;
          goto LABEL_54;
        }
        qmemcpy(v15, " __attribute__((address_space(", 30);
        v38 = *v6 + 30;
        goto LABEL_96;
      case 19:
        v18 = (char *)a3[4];
        v19 = a3[3] - (_QWORD)v18;
        if (*(_DWORD *)(a2 + 56))
        {
          if (v19 <= 0x22)
          {
            v16 = " __attribute__((packed_vector_type(";
            v17 = (llvm::raw_ostream *)a3;
LABEL_54:
            llvm::raw_ostream::write(v17, v16);
            goto LABEL_55;
          }
          qmemcpy(v18, " __attribute__((packed_vector_type(", 35);
          v38 = *v6 + 35;
        }
        else
        {
          if (v19 <= 0x1F)
          {
            v16 = " __attribute__((ext_vector_type(";
            v17 = (llvm::raw_ostream *)a3;
            goto LABEL_54;
          }
          qmemcpy(v18, " __attribute__((ext_vector_type(", 32);
          v38 = *v6 + 32;
        }
LABEL_96:
        *v6 = v38;
LABEL_55:
        v31 = *(_QWORD *)(a2 + 40);
        if (v31)
          sub_22F0D9044(v31, (int)a3, 0, a1, 0, "\n", 1uLL);
        v32 = a3[4];
        if ((unint64_t)(a3[3] - v32) > 2)
        {
          *(_BYTE *)(v32 + 2) = 41;
          *(_WORD *)v32 = 10537;
          *v6 += 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, ")))");
        }
        v8 = *(_QWORD *)(a2 + 48);
LABEL_84:
        if ((*(_BYTE *)(a1 + 5) & 2) != 0)
          v8 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
        a2 = v8 & 0xFFFFFFFFFFFFFFF0;
        if ((v8 & 8) != 0)
LABEL_87:
          a2 = *(_QWORD *)a2;
        continue;
      case 24:
        v50 = *(_QWORD *)a1;
        if ((v7 & 0x8000000) != 0 && (v50 & 0x800) != 0 && *(_QWORD *)(a2 + 48))
          return;
        *(_QWORD *)a1 = v50 | 0x1400;
        v51 = *(_QWORD *)(a2 + 40);
        if ((v50 & 0x20000000000) != 0)
          v51 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8);
        v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0);
        if ((v51 & 8) != 0)
          v52 = (_QWORD *)*v52;
        sub_22F11C8E8(a1, v52, a3);
        v53 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFEBFFLL | v50 & 0x1400;
        goto LABEL_175;
      case 25:
        if (!*(_BYTE *)(a1 + 20))
        {
          v54 = (_BYTE *)a3[4];
          if ((unint64_t)v54 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v54 + 1);
            *v54 = 41;
          }
        }
        v48 = *(_BYTE *)(a1 + 20);
        *(_BYTE *)(a1 + 20) = 0;
        v87 = (_WORD *)a3[4];
        if ((unint64_t)(a3[3] - (_QWORD)v87) > 1)
        {
          *v87 = 10536;
          *v6 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, "()");
        }
        LOWORD(v184.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 16) >> 19;
        sub_22F11FBF4((llvm::raw_ostream *)*(unsigned __int8 *)(a1 + 21), &v184, (llvm::raw_ostream *)a3);
        v49 = *(_QWORD *)(a2 + 24);
LABEL_212:
        if ((*(_BYTE *)(a1 + 5) & 2) != 0)
          v49 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 8);
        v88 = (_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0);
        if ((v49 & 8) != 0)
          v88 = (_QWORD *)*v88;
        sub_22F11C8E8(a1, v88, a3);
        *(_BYTE *)(a1 + 20) = v48;
        return;
      case 26:
        if (!*(_BYTE *)(a1 + 20))
        {
          v55 = (_BYTE *)a3[4];
          if ((unint64_t)v55 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v55 + 1);
            *v55 = 41;
          }
        }
        v89 = *(_BYTE *)(a1 + 20);
        *(_BYTE *)(a1 + 20) = 0;
        v90 = (_BYTE *)a3[4];
        if ((unint64_t)v90 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3);
        }
        else
        {
          *v6 = (uint64_t)(v90 + 1);
          *v90 = 40;
        }
        v91 = *(_QWORD *)a1 & 0x100;
        v92 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFEFFLL;
        *(_QWORD *)a1 = v92;
        v93 = *(_QWORD *)(a2 + 16);
        if ((v93 & 0x3FFFC000000000) == 0)
          goto LABEL_254;
        v181 = v91;
        v182 = v89;
        v94 = 0;
        v95 = (unsigned __int16)(v93 >> 38);
        do
        {
          if (v94)
          {
            v96 = (_WORD *)a3[4];
            if ((unint64_t)(a3[3] - (_QWORD)v96) > 1)
            {
              *v96 = 8236;
              *v6 += 2;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a3, ", ");
            }
          }
          if ((*(_BYTE *)(a2 + 23) & 4) != 0)
          {
            v97 = *(_BYTE *)(sub_22E47E270(a2) + v94);
            if ((v97 & 0x10) != 0)
            {
              v98 = (void *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v98) > 0x1C)
              {
                qmemcpy(v98, "__attribute__((ns_consumed)) ", 29);
                *v6 += 29;
                if ((v97 & 0x40) == 0)
                  goto LABEL_233;
                goto LABEL_231;
              }
              llvm::raw_ostream::write((llvm::raw_ostream *)a3, "__attribute__((ns_consumed)) ");
            }
            if ((v97 & 0x40) == 0)
              goto LABEL_233;
LABEL_231:
            v99 = (void *)a3[4];
            if ((unint64_t)(a3[3] - (_QWORD)v99) > 0x19)
            {
              qmemcpy(v99, "__attribute__((noescape)) ", 26);
              *v6 += 26;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a3, "__attribute__((noescape)) ");
            }
LABEL_233:
            v100 = v97 & 0xF;
            if ((v97 & 0xF) != 0)
            {
              v101 = (void *)a3[4];
              if ((unint64_t)(a3[3] - (_QWORD)v101) > 0xE)
              {
                qmemcpy(v101, "__attribute__((", 15);
                *v6 += 15;
                v102 = (llvm::raw_ostream *)a3;
              }
              else
              {
                v102 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)a3, "__attribute__((");
              }
              v103 = 8 * v100 - 8;
              v104 = *(_QWORD *)((char *)&unk_22F4A9BC0 + v103);
              v105 = *(char **)((char *)off_24FAC7D50 + v103);
              v106 = (void *)*((_QWORD *)v102 + 4);
              if (v104 <= *((_QWORD *)v102 + 3) - (_QWORD)v106)
              {
                memcpy(v106, v105, v104);
                v107 = *((_QWORD *)v102 + 4) + v104;
                *((_QWORD *)v102 + 4) = v107;
              }
              else
              {
                v102 = (llvm::raw_ostream *)llvm::raw_ostream::write(v102, (const char *)v105);
                v107 = *((_QWORD *)v102 + 4);
              }
              if (*((_QWORD *)v102 + 3) - v107 > 2)
              {
                *(_BYTE *)(v107 + 2) = 32;
                *(_WORD *)v107 = 10537;
                *((_QWORD *)v102 + 4) += 3;
              }
              else
              {
                llvm::raw_ostream::write(v102, ")) ");
              }
            }
          }
          v108 = *(_QWORD *)(a2 + 8 * v94 + 40);
          if ((*(_BYTE *)(a1 + 5) & 2) != 0)
            v108 = *(_QWORD *)((*(_QWORD *)(a2 + 8 * v94 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 8 * v94 + 40) & 7;
          v109 = (_QWORD *)(v108 & 0xFFFFFFFFFFFFFFF0);
          if ((v108 & 8) != 0)
          {
            v109 = (_QWORD *)*v109;
            v110 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v108 & 7;
          }
          else
          {
            LODWORD(v110) = v108 & 7;
          }
          sub_22F119710(a1, (int)v109, v110, (llvm::raw_ostream *)a3);
          ++v94;
        }
        while (v95 != v94);
        v92 = *(_QWORD *)a1;
        v89 = v182;
        v91 = v181;
LABEL_254:
        *(_QWORD *)a1 = v92 & 0xFFFFFFFFFFFFFEFFLL | v91;
        v111 = *(_QWORD *)(a2 + 16);
        v112 = v111 & 0x3FFFC000000000;
        if ((v111 & 0x800000000000000) != 0)
        {
          v116 = *v6;
          if (v112)
          {
            if ((unint64_t)(a3[3] - v116) > 1)
            {
              *(_WORD *)v116 = 8236;
              v116 = *v6 + 2;
              *v6 = v116;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a3, ", ");
              v116 = a3[4];
            }
          }
          if ((unint64_t)(a3[3] - v116) > 2)
          {
            *(_BYTE *)(v116 + 2) = 46;
            *(_WORD *)v116 = 11822;
            v140 = *v6 + 3;
            goto LABEL_337;
          }
          v114 = "...";
          v115 = (llvm::raw_ostream *)a3;
LABEL_264:
          llvm::raw_ostream::write(v115, v114);
        }
        else if (!v112 && (v92 & 0x10000000) != 0)
        {
          v113 = (_DWORD *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v113) <= 3)
          {
            v114 = "void";
            v115 = (llvm::raw_ostream *)a3;
            goto LABEL_264;
          }
          *v113 = 1684631414;
          v140 = *v6 + 4;
LABEL_337:
          *v6 = v140;
        }
        v117 = (_BYTE *)a3[4];
        if ((unint64_t)v117 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3);
        }
        else
        {
          *v6 = (uint64_t)(v117 + 1);
          *v117 = 41;
        }
        v183 = *(_DWORD *)(a2 + 16) >> 19;
        sub_22F11FBF4((llvm::raw_ostream *)*(unsigned __int8 *)(a1 + 21), &v183, (llvm::raw_ostream *)a3);
        v118 = sub_22E47E1B0(a2);
        __p[0] = (void *)v118;
        if (*(_BYTE *)(a1 + 22))
        {
          v119 = v118 & 0xFFFFFFFE;
          LODWORD(__p[0]) = v118 & 0xFFFFFFFE;
        }
        else
        {
          v119 = v118;
        }
        if (v119 || (v118 & 0xC00000000) != 0)
        {
          v130 = (_BYTE *)a3[4];
          if ((_BYTE *)a3[3] == v130)
          {
            v131 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)a3, " ");
          }
          else
          {
            *v130 = 32;
            ++*v6;
            v131 = (llvm::raw_ostream *)a3;
          }
          sub_22F40B554(__p, &v184);
          v132 = (v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v184
               : (std::string *)v184.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write(v131, (const char *)v132);
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)(a2 + 20) & 3) == 2)
        {
          v123 = a3[4];
          if ((unint64_t)(a3[3] - v123) > 2)
          {
            *(_BYTE *)(v123 + 2) = 38;
            *(_WORD *)v123 = 9760;
            v147 = *v6 + 3;
            goto LABEL_334;
          }
          v121 = " &&";
          v122 = (llvm::raw_ostream *)a3;
LABEL_279:
          llvm::raw_ostream::write(v122, v121);
        }
        else if ((*(_DWORD *)(a2 + 20) & 3) == 1)
        {
          v120 = (_WORD *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v120) <= 1)
          {
            v121 = " &";
            v122 = (llvm::raw_ostream *)a3;
            goto LABEL_279;
          }
          *v120 = 9760;
          v147 = *v6 + 2;
LABEL_334:
          *v6 = v147;
        }
        sub_22F117234(a2, (llvm::raw_ostream *)a3, a1);
        if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
        {
          v126 = (_DWORD *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v126) > 3)
          {
            *v126 = 540945696;
            *v6 += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3, " -> ");
          }
          v127 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)(a1 + 5) & 2) != 0)
            v127 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a2 + 24) & 7;
          v128 = (_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0);
          if ((v127 & 8) != 0)
          {
            v128 = (_QWORD *)*v128;
            v129 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v127 & 7;
          }
          else
          {
            LODWORD(v129) = v127 & 7;
          }
          sub_22F119710(a1, (int)v128, v129, (llvm::raw_ostream *)a3);
        }
        else
        {
          v124 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)(a1 + 5) & 2) != 0)
            v124 = *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFFF0) + 8);
          v125 = (_QWORD *)(v124 & 0xFFFFFFFFFFFFFFF0);
          if ((v124 & 8) != 0)
            v125 = (_QWORD *)*v125;
          sub_22F11C8E8(a1, v125, a3);
        }
        *(_BYTE *)(a1 + 20) = v89;
        return;
      case 28:
        sub_22F113FE4(a2);
LABEL_124:
        sub_22F11FBD0();
        return;
      case 31:
      case 39:
        v39 = *(_QWORD *)a1;
        if ((*(_QWORD *)a1 & 0x80000) == 0)
          *(_QWORD *)a1 = v39 & 0xFFFFFFFFFFFBFFFFLL;
        v40 = *(_BYTE *)(a1 + 20);
        *(_BYTE *)(a1 + 20) = 0;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
        {
          v41 = (_BYTE *)a3[4];
          if ((unint64_t)v41 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v41 + 1);
            *v41 = 41;
          }
        }
        v72 = *(_QWORD *)(a2 + 32);
        if ((*(_BYTE *)(a1 + 5) & 2) != 0)
          v72 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFFF0) + 8);
        v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0);
        if ((v72 & 8) != 0)
          v73 = (_QWORD *)*v73;
        sub_22F11C8E8(a1, v73, a3);
        *(_BYTE *)(a1 + 20) = v40;
        goto LABEL_166;
      case 33:
        if ((*(_QWORD *)(a2 + 16) & 0x1FFF80000) != 0)
          return;
        v8 = *(_QWORD *)(a2 + 24);
        goto LABEL_84;
      case 36:
        v56 = *(_QWORD *)(a2 + 32);
        if ((*(_BYTE *)(a1 + 5) & 2) != 0)
          v56 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF0) + 8);
        v57 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0);
        if ((v56 & 8) != 0)
          v57 = (_QWORD *)*v57;
        sub_22F11C8E8(a1, v57, a3);
        v58 = a3[4];
        if ((unint64_t)(a3[3] - v58) <= 2)
        {
          v59 = "...";
          goto LABEL_199;
        }
        *(_BYTE *)(v58 + 2) = 46;
        v138 = 11822;
        goto LABEL_317;
      case 37:
        v8 = *(_QWORD *)(a2 + 32);
        if (*(_BYTE *)(a1 + 20)
          || *(unsigned __int8 *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2)
        {
          goto LABEL_84;
        }
        v20 = (char *)a3[4];
        if ((unint64_t)v20 >= a3[3])
        {
          v34 = (llvm::raw_ostream *)a3;
LABEL_82:
          llvm::raw_ostream::write(v34);
        }
        else
        {
          *v6 = (uint64_t)(v20 + 1);
          v21 = 41;
LABEL_80:
          *v20 = v21;
        }
        v8 = *(_QWORD *)(a2 + 32);
        goto LABEL_84;
      case 40:
      case 41:
        v42 = *(_QWORD *)a1;
        if ((*(_QWORD *)a1 & 0x80000) == 0)
          *(_QWORD *)a1 = v42 & 0xFFFFFFFFFFFBFFFFLL;
        v43 = *(_BYTE *)(a1 + 20);
        *(_BYTE *)(a1 + 20) = 0;
        v44 = sub_22F11E834(*(_QWORD *)(a2 + 32));
        LOBYTE(v45) = v44;
        v46 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
        {
          v47 = (_BYTE *)a3[4];
          if ((unint64_t)v47 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v47 + 1);
            *v47 = 41;
          }
        }
        if ((*(_BYTE *)(a1 + 5) & 2) != 0)
        {
          v45 = v46[1];
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0);
        }
        if ((v45 & 8) != 0)
          v46 = (_QWORD *)*v46;
        sub_22F11C8E8(a1, v46, a3);
        *(_BYTE *)(a1 + 20) = v43;
        v63 = *(_QWORD *)a1;
        v74 = v42 >> 18;
        goto LABEL_174;
      case 43:
        v39 = *(_QWORD *)a1;
        v60 = *(_QWORD *)a1;
        if ((*(_QWORD *)a1 & 0x80000) == 0)
        {
          v60 = v39 & 0xFFFFFFFFFFFBFFFFLL;
          *(_QWORD *)a1 = v39 & 0xFFFFFFFFFFFBFFFFLL;
        }
        v61 = *(_QWORD *)(a2 + 8);
        if ((v60 & 0x20000000000) != 0)
          v61 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF0) + 8);
        v62 = (_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0);
        if ((v61 & 8) != 0)
          goto LABEL_136;
        goto LABEL_137;
      case 51:
        v39 = *(_QWORD *)a1;
        v63 = *(_QWORD *)a1;
        if ((*(_QWORD *)a1 & 0x80000) == 0)
        {
          v63 = v39 & 0xFFFFFFFFFFFBFFFFLL;
          *(_QWORD *)a1 = v39 & 0xFFFFFFFFFFFBFFFFLL;
        }
        if (!*(_DWORD *)(a2 + 40))
          goto LABEL_167;
        v64 = *(_QWORD *)(a2 + 24);
        if ((v63 & 0x20000000000) != 0)
          v64 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFF0) + 8);
        v62 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0);
        if ((v64 & 8) != 0)
LABEL_136:
          v62 = (_QWORD *)*v62;
LABEL_137:
        sub_22F11C8E8(a1, v62, a3);
LABEL_166:
        v63 = *(_QWORD *)a1;
LABEL_167:
        v74 = v39 >> 18;
LABEL_174:
        v53 = v63 & 0xFFFFFFFFFFFBFFFFLL | ((v74 & 1) << 18);
LABEL_175:
        *(_QWORD *)a1 = v53;
        return;
      case 54:
        v22 = *(_QWORD *)(a2 + 32);
        v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 39)
        {
          __p[0] = 0;
          __p[1] = 0;
          v192 = 0;
          LODWORD(v184.__r_.__value_.__r.__words[1]) = 0;
          v187 = 0;
          v188 = 0;
          v189 = 1;
          v185 = 0;
          v186 = 0;
          v184.__r_.__value_.__r.__words[2] = 0;
          v184.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
          v190 = __p;
          llvm::raw_ostream::SetBufferAndMode();
          if ((*(_BYTE *)(a1 + 5) & 2) != 0)
          {
            v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
            v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
          }
          if ((v22 & 8) != 0)
            v23 = (_QWORD *)*v23;
          sub_22F11C8E8(a1, v23, &v184);
          if (v186 != v184.__r_.__value_.__r.__words[2])
            llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v184);
          v71 = (_BYTE *)a3[4];
          if ((unint64_t)v71 >= a3[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3);
          }
          else
          {
            *v6 = (uint64_t)(v71 + 1);
            *v71 = 91;
          }
          sub_22F11FB04(a2, (llvm::raw_ostream *)a3, a1);
          v80 = __p;
          if (v192 < 0)
            v80 = (void **)__p[0];
          if (*((_BYTE *)v80 + 1) != 93)
          {
            v81 = (_BYTE *)a3[4];
            if ((unint64_t)v81 >= a3[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a3);
            }
            else
            {
              *v6 = (uint64_t)(v81 + 1);
              *v81 = 32;
            }
          }
          if (v192 < 0)
            v84 = (char *)__p[0] + 1;
          else
            v84 = (char *)__p + 1;
          v85 = strlen(v84);
          v86 = (void *)a3[4];
          if (v85 <= a3[3] - (uint64_t)v86)
          {
            if (v85)
            {
              memcpy(v86, v84, v85);
              *v6 += v85;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a3, v84);
          }
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v184);
          if (SHIBYTE(v192) < 0)
            operator delete(__p[0]);
          return;
        }
        a2 = v22 & 0xFFFFFFFFFFFFFFF0;
        if ((*(_BYTE *)(a1 + 5) & 2) != 0)
        {
          v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
          a2 = v22 & 0xFFFFFFFFFFFFFFF0;
        }
        if ((v22 & 8) != 0)
          goto LABEL_87;
        continue;
      case 56:
        v65 = *(_QWORD *)(a2 + 32);
        v66 = *(_QWORD *)a1;
        if ((v7 & 0x780000) != 0)
        {
          if ((v66 & 0x20000000000) != 0)
            v65 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFFF0) + 8);
          v67 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
          if ((v65 & 8) != 0)
            v67 = (_QWORD *)*v67;
          sub_22F11C8E8(a1, v67, a3);
          v68 = (void *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v68) <= 0x22)
          {
            v69 = " __attribute__((packed_vector_type(";
            v70 = (llvm::raw_ostream *)a3;
LABEL_196:
            llvm::raw_ostream::write(v70, v69);
            goto LABEL_197;
          }
          qmemcpy(v68, " __attribute__((packed_vector_type(", 35);
          v139 = *v6 + 35;
        }
        else
        {
          if ((v66 & 0x20000000000) != 0)
            v65 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFFF0) + 8);
          v82 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
          if ((v65 & 8) != 0)
            v82 = (_QWORD *)*v82;
          sub_22F11C8E8(a1, v82, a3);
          v83 = (void *)a3[4];
          if ((unint64_t)(a3[3] - (_QWORD)v83) <= 0x1F)
          {
            v69 = " __attribute__((ext_vector_type(";
            v70 = (llvm::raw_ostream *)a3;
            goto LABEL_196;
          }
          qmemcpy(v83, " __attribute__((ext_vector_type(", 32);
          v139 = *v6 + 32;
        }
        *v6 = v139;
LABEL_197:
        llvm::raw_ostream::operator<<();
        v58 = a3[4];
        if ((unint64_t)(a3[3] - v58) > 2)
        {
          *(_BYTE *)(v58 + 2) = 41;
          v138 = 10537;
LABEL_317:
          *(_WORD *)v58 = v138;
          *v6 += 3;
        }
        else
        {
          v59 = ")))";
LABEL_199:
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, v59);
        }
        return;
      default:
        return;
    }
  }
}

void sub_22F11E524(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _DWORD *v12;
  const char *v13;
  size_t v14;
  unsigned int v15;
  _DWORD *v16;
  const char *v17;
  llvm::raw_ostream *v18;
  size_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;

  if (*(_QWORD *)(a2 + 8) == (a2 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_9;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 && (*(_BYTE *)(v5 + 29) & 2) != 0)
  {
    if ((*(_BYTE *)(v5 + 60) & 4) != 0)
    {
      sub_22F3B9C24((uint64_t *)(v5 + 80), this, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      v23 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v23 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v23 + 1;
        *v23 = 32;
      }
    }
    v16 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 3uLL)
    {
      v17 = "auto";
      v18 = this;
LABEL_23:
      llvm::raw_ostream::write(v18, v17);
      goto LABEL_24;
    }
    *v16 = 1869903201;
    v22 = *((_QWORD *)this + 4) + 4;
    goto LABEL_31;
  }
  v6 = *(_QWORD *)(v5 + 40);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 7) != 0 || v7 == 0)
  {
LABEL_9:
    v9 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v9 > 0xEuLL)
    {
      qmemcpy(v9, "type-parameter-", 15);
      *((_QWORD *)this + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(this, "type-parameter-");
    }
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 45;
    }
    llvm::raw_ostream::operator<<();
    goto LABEL_24;
  }
  if ((*(_BYTE *)(a1 + 5) & 0x20) != 0)
  {
    v13 = sub_22F1D3238(v7);
    v14 = v19;
  }
  else
  {
    v12 = *(_DWORD **)(v7 + 16);
    v15 = *v12;
    v13 = (const char *)(v12 + 4);
    v14 = v15;
  }
  v20 = (void *)*((_QWORD *)this + 4);
  if (v14 > *((_QWORD *)this + 3) - (_QWORD)v20)
  {
    v18 = this;
    v17 = v13;
    goto LABEL_23;
  }
  if (v14)
  {
    memcpy(v20, v13, v14);
    v22 = *((_QWORD *)this + 4) + v14;
LABEL_31:
    *((_QWORD *)this + 4) = v22;
  }
LABEL_24:
  if (!*(_BYTE *)(a1 + 20))
  {
    v21 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v21 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v21 + 1;
      *v21 = 32;
    }
  }
}

uint64_t sub_22F11E768(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v11[2];

  v4 = a1;
  if ((*(_BYTE *)(a1 + 5) & 2) != 0)
    a2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((a2 & 8) != 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
  }
  else
  {
    v6 = a2 & 7;
  }
  *(_QWORD *)v11 = v6;
  if (v5 && *(_BYTE *)(v5 + 16) == 43)
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v7 & 8) != 0)
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    sub_22E96251C((unsigned int *)v11, v8 | v9 | *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 7);
    LODWORD(v6) = v11[0];
  }
  return sub_22F119818(v4, v5, v6, this);
}

uint64_t sub_22F11E834(uint64_t a1)
{
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (!v2 || (*(_DWORD *)(v2 + 16) & 0xFE) != 0x28)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        break;
      v2 = sub_22F10CF48(v2);
      if (!v2)
        break;
    }
    a1 = *(_QWORD *)(v2 + 32);
  }
  return a1;
}

void sub_22F11E89C(uint64_t a1, unint64_t a2, char **this)
{
  char v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  const void *v16;
  size_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  const char *v26;
  llvm::raw_ostream *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int i;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  void (***v42)(void **__return_ptr, _QWORD, char *, size_t);
  const char *p_p;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  char v54;
  char *v55;
  _QWORD **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void *__p;
  char v73;
  char *__s[2];

  if ((*(_QWORD *)a1 & 0x800) != 0)
  {
    *(_OWORD *)__s = *(_OWORD *)a1;
    __s[0] = (char *)((unint64_t)__s[0] & ~0x800uLL);
    sub_22F3B8394(a2, (uint64_t)this, (__int128 *)__s, *(_DWORD *)(a1 + 16), 0);
    goto LABEL_134;
  }
  if ((*(_QWORD *)a1 & 0x400) == 0 && (*(_QWORD *)(a2 + 120) < 8uLL || (*(_QWORD *)(a2 + 120) & 4) != 0))
    __asm { BR              X10 }
  v7 = 0;
  if ((*(_BYTE *)(a1 + 1) & 0x10) == 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0)
      v9 = (_QWORD *)*v9;
    sub_22F11F1E4(a1, (unint64_t)v9, (llvm::raw_ostream *)this, *(_QWORD *)(a2 + 40));
  }
  v10 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 40) & 7) == 0 && v10 != 0)
    goto LABEL_22;
  v12 = *(_QWORD *)(a2 + 120);
  if ((v12 & 4) == 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 40);
      if ((v14 & 7) != 0)
        v10 = 0;
      else
        v10 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_22:
      v15 = *(unsigned int **)(v10 + 16);
      v18 = *v15;
      v16 = v15 + 4;
      v17 = v18;
      v19 = this[4];
      if (v18 <= (unint64_t)(this[3] - v19))
      {
        if (v17)
        {
          memcpy(v19, v16, v17);
          this[4] += v17;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)v16);
      }
      goto LABEL_120;
    }
  }
  if ((*(_QWORD *)a1 & 0x8000000000) == 0
    || (*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 > 2
    || (v20 = *(_QWORD *)(a2 + 128)) == 0
    || ((*(unsigned __int16 *)(v20 + 8) | (*(unsigned __int8 *)(v20 + 10) << 16)) & 0x100000) == 0)
  {
    if ((*(_QWORD *)a1 & 0x1000000000) != 0)
      v21 = 96;
    else
      v21 = 40;
    v22 = this[4];
    if (v22 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this);
    }
    else
    {
      this[4] = v22 + 1;
      *v22 = v21;
    }
    v23 = *(_DWORD *)(a2 + 28);
    if ((v23 & 0x7Fu) - 35 <= 2
      && (v24 = *(_QWORD *)(a2 + 128)) != 0
      && ((*(unsigned __int16 *)(v24 + 8) | (*(unsigned __int8 *)(v24 + 10) << 16)) & 0x100000) != 0)
    {
      v31 = this[4];
      if ((unint64_t)(this[3] - v31) > 5)
      {
        *((_WORD *)v31 + 2) = 24932;
        *(_DWORD *)v31 = 1651335532;
        this[4] += 6;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, "lambda");
      }
      v7 = 1;
    }
    else
    {
      if ((v23 & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(a2 + 75) & 1) != 0)
      {
        v28 = this[4];
        if ((unint64_t)(this[3] - v28) <= 8)
        {
          v26 = "anonymous";
          v27 = (llvm::raw_ostream *)this;
          goto LABEL_46;
        }
        v28[8] = 115;
        *(_QWORD *)v28 = *(_QWORD *)"anonymous";
        v71 = (uint64_t)(this[4] + 9);
      }
      else
      {
        v25 = this[4];
        if ((unint64_t)(this[3] - v25) <= 6)
        {
          v26 = "unnamed";
          v27 = (llvm::raw_ostream *)this;
LABEL_46:
          llvm::raw_ostream::write(v27, v26);
          goto LABEL_47;
        }
        *(_DWORD *)(v25 + 3) = 1684368737;
        *(_DWORD *)v25 = 1634627189;
        v71 = (uint64_t)(this[4] + 7);
      }
      this[4] = (char *)v71;
    }
LABEL_47:
    v29 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x20000) != 0)
    {
      if ((v7 & 1) == 0)
      {
        v30 = this[4];
        if (this[3] == v30)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)this, " ");
        }
        else
        {
          *v30 = 32;
          ++this[4];
        }
        __asm { BR              X10 }
      }
      v32 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v33 = *(_QWORD *)(a2 + 16);
        v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 4) != 0)
          v34 = *(_QWORD *)v34;
        for (i = *(_WORD *)(v34 + 8) & 0x7F; i != 83; i = *(_WORD *)(v34 + 8) & 0x7F)
        {
          v36 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v36 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_69;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_68;
            if (i == 16)
              goto LABEL_62;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_75;
            if (i == 24)
            {
LABEL_62:
              v36 = -48;
            }
            else
            {
LABEL_68:
              if (i != 70)
              {
LABEL_69:
                v37 = i - 52;
                if ((i - 33) >= 5)
                  v38 = -48;
                else
                  v38 = -64;
                if (v37 >= 6)
                  v36 = v38;
                else
                  v36 = -72;
                goto LABEL_75;
              }
              v36 = -64;
            }
          }
LABEL_75:
          v39 = *(_QWORD *)(v34 + v36 + 16);
          v34 = v39 & 0xFFFFFFFFFFFFFFF8;
          if ((v39 & 4) != 0)
            v34 = *(_QWORD *)v34;
        }
        v32 = v34 - 40;
      }
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(v32 + 88) + 1992), *(_DWORD *)(a2 + 24), 1, (uint64_t)__s);
      if (__s[0])
      {
        v40 = this[4];
        if ((unint64_t)(this[3] - v40) > 3)
        {
          *(_DWORD *)v40 = 544497952;
          this[4] += 4;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)this, " at ");
        }
        if (__s[0])
          v41 = strlen(__s[0]);
        else
          v41 = 0;
        v42 = *(void (****)(void **__return_ptr, _QWORD, char *, size_t))(a1 + 8);
        if (v42)
        {
          (**v42)(&__p, v42, __s[0], v41);
          if (v73 >= 0)
            p_p = (const char *)&__p;
          else
            p_p = (const char *)__p;
          llvm::raw_ostream::write((llvm::raw_ostream *)this, p_p);
          if (v73 < 0)
            operator delete(__p);
        }
        else
        {
          v44 = this[4];
          if (v41 <= this[3] - v44)
          {
            if (v41)
            {
              memcpy(v44, __s[0], v41);
              this[4] += v41;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)this, __s[0]);
          }
        }
        v51 = this[4];
        if (v51 >= this[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)this);
        }
        else
        {
          this[4] = v51 + 1;
          *v51 = 58;
        }
        v52 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v53 = (_BYTE *)*((_QWORD *)v52 + 4);
        if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
        {
          llvm::raw_ostream::write(v52);
        }
        else
        {
          *((_QWORD *)v52 + 4) = v53 + 1;
          *v53 = 58;
        }
        llvm::raw_ostream::operator<<();
      }
      v29 = *(_QWORD *)a1;
    }
    if ((v29 & 0x1000000000) != 0)
      v54 = 39;
    else
      v54 = 41;
    v55 = this[4];
    if (v55 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this);
    }
    else
    {
      this[4] = v55 + 1;
      *v55 = v54;
    }
    goto LABEL_120;
  }
  v45 = this[4];
  if ((unint64_t)(this[3] - v45) > 0xD)
  {
    qmemcpy(v45, "std::function<", 14);
    this[4] += 14;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)this, "std::function<");
  }
  v46 = sub_22EFD462C(a2);
  if ((*(_DWORD *)(v46 + 28) & 0x7F) == 0x1D)
    v46 = *(_QWORD *)(v46 + 48);
  v47 = *(_QWORD *)(v46 + 48);
  v48 = *(_BYTE *)(a1 + 22);
  *(_BYTE *)(a1 + 22) = 1;
  if ((*(_BYTE *)(a1 + 5) & 2) != 0)
    v47 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 8) | v47 & 7;
  v49 = (_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0);
  if ((v47 & 8) != 0)
  {
    v49 = (_QWORD *)*v49;
    v50 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v47 & 7;
  }
  else
  {
    LODWORD(v50) = v47 & 7;
  }
  sub_22F119710(a1, (int)v49, v50, (llvm::raw_ostream *)this);
  v70 = this[4];
  if (v70 >= this[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)this);
  }
  else
  {
    this[4] = v70 + 1;
    *v70 = 62;
  }
  *(_BYTE *)(a1 + 22) = v48;
LABEL_120:
  if ((*(_DWORD *)(a2 + 28) & 0x7E) != 0x24)
    goto LABEL_134;
  v56 = *(_QWORD ***)(a2 + 160);
  if (!v56)
  {
    v57 = *(_QWORD *)a1;
LABEL_126:
    v62 = *(_QWORD **)(a2 + 168);
    v63 = *v62;
    v61 = (unsigned int *)(v62 + 1);
    v60 = v63;
    goto LABEL_127;
  }
  v57 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x20000000000) != 0)
    goto LABEL_126;
  v58 = *v56;
  if (!v58)
    goto LABEL_126;
  v59 = *(_QWORD *)(*v58 & 0xFFFFFFFFFFFFFFF0);
  v60 = v59 + 40;
  v61 = (unsigned int *)(v59 + 20);
LABEL_127:
  v64 = *v61;
  if ((v57 & 0x80000) == 0)
    *(_QWORD *)a1 = v57 & 0xFFFFFFFFFFFBFFFFLL;
  v65 = v57 & 0x40000;
  v66 = *(_QWORD *)(a2 + 152);
  v67 = (_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF8);
  if ((v66 & 4) != 0 && v67)
  {
    do
    {
      v68 = *(_QWORD *)(*v67 + 152);
      v67 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v68 & 4) != 0 && v67);
  }
  sub_22F117B8C(this, v60, v64, a1, v67[7], 0, 0);
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFBFFFFLL | v65;
LABEL_134:
  if (!*(_BYTE *)(a1 + 20))
  {
    v69 = this[4];
    if (v69 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this);
    }
    else
    {
      this[4] = v69 + 1;
      *v69 = 32;
    }
  }
}

void sub_22F11F1B4()
{
  JUMPOUT(0x22F11E930);
}

void sub_22F11F1C4()
{
  JUMPOUT(0x22F11E974);
}

void sub_22F11F1D4()
{
  JUMPOUT(0x22F11EC10);
}

uint64_t sub_22F11F1E4(uint64_t result, unint64_t a2, llvm::raw_ostream *a3, uint64_t a4)
{
  __int16 v4;
  __int16 *v5;
  unsigned int v6;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  const void *v36;
  size_t v37;
  unsigned int v38;
  void *v39;
  const char *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  const void *v57;
  size_t v58;
  unsigned int v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _WORD *v67;

  v5 = (__int16 *)(a2 + 8);
  v4 = *(_WORD *)(a2 + 8);
  v6 = v4 & 0x7F;
  if (v6 == 83)
    return result;
  v9 = a2;
  v10 = (uint64_t *)result;
  while (1)
  {
    if (v6 <= 0x18 && ((1 << v6) & 0x1000006) != 0 || v6 - 52 < 6)
      return result;
    result = v10[1];
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 8))(result, v9);
      if ((result & 1) != 0)
        return result;
      v4 = *v5;
    }
    v11 = v4 & 0x7F;
    if (v11 == 16)
    {
      if ((*v10 & 0x2000) == 0 || (v12 = *(_QWORD *)(v9 - 8), v12 >= 8) && (v12 & 7) == 0)
      {
        if ((*v10 & 0x4000) == 0
          || (*(_BYTE *)(v9 + 56) & 4) == 0
          || !a4
          || (result = sub_22F3ABF5C(v9 - 48, a4), !(_DWORD)result))
        {
          v23 = *(_WORD *)(v9 + 8) & 0x7F;
          v24 = -40;
          if (v23 > 0x46)
          {
            if (v23 != 83)
            {
              if (v23 == 71)
              {
                v24 = -56;
              }
              else if (v23 != 81)
              {
                goto LABEL_83;
              }
            }
          }
          else
          {
            if (v23 > 0x18)
              goto LABEL_82;
            if (v23 == 16)
              goto LABEL_67;
            if (((1 << v23) & 0x1066) == 0)
            {
              if (v23 == 24)
              {
LABEL_67:
                v24 = -48;
              }
              else
              {
LABEL_82:
                if (v23 == 70)
                {
                  v24 = -64;
                }
                else
                {
LABEL_83:
                  v28 = v23 - 52;
                  v29 = v23 - 33 >= 5;
                  v30 = -48;
                  if (!v29)
                    v30 = -64;
                  if (v28 >= 6)
                    v24 = v30;
                  else
                    v24 = -72;
                }
              }
            }
          }
          v31 = *(_QWORD *)(v9 + v24 + 16);
          v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
          if ((v31 & 4) != 0)
            v32 = (_QWORD *)*v32;
          result = sub_22F11F1E4(v10, v32, a3, *(_QWORD *)(v9 - 8));
          v33 = *(_QWORD *)(v9 - 8);
          if ((v33 & 7) == 0)
          {
            v34 = v33 & 0xFFFFFFFFFFFFFFF8;
            if (v34)
              goto LABEL_92;
          }
          v39 = (void *)*((_QWORD *)a3 + 4);
          if (*((_QWORD *)a3 + 3) - (_QWORD)v39 <= 0x16uLL)
          {
            v40 = "(anonymous namespace)::";
            v41 = a3;
            return llvm::raw_ostream::write(v41, v40);
          }
          qmemcpy(v39, "(anonymous namespace)::", 23);
          v42 = *((_QWORD *)a3 + 4) + 23;
LABEL_111:
          *((_QWORD *)a3 + 4) = v42;
          return result;
        }
      }
      v13 = *(_WORD *)(v9 + 8) & 0x7F;
      v14 = -40;
      if (v13 > 0x46)
      {
        if (v13 != 83)
        {
          if (v13 == 71)
          {
            v14 = -56;
            goto LABEL_55;
          }
          if (v13 == 81)
            goto LABEL_55;
LABEL_49:
          v20 = v13 - 52;
          if (v13 - 33 >= 5)
            v21 = -48;
          else
            v21 = -64;
          if (v20 >= 6)
            v14 = v21;
          else
            v14 = -72;
        }
      }
      else
      {
        if (v13 > 0x18)
          goto LABEL_48;
        if (v13 != 16)
        {
          if (((1 << v13) & 0x1066) != 0)
            goto LABEL_55;
          if (v13 != 24)
          {
LABEL_48:
            if (v13 == 70)
            {
              v14 = -64;
              goto LABEL_55;
            }
            goto LABEL_49;
          }
        }
        v14 = -48;
      }
LABEL_55:
      v19 = v9 + v14;
      goto LABEL_56;
    }
    if ((v4 & 0x7E) == 0x24)
    {
      v25 = *(_WORD *)(v9 + 8) & 0x7F;
      v26 = -40;
      if (v25 > 0x46)
      {
        switch(v25)
        {
          case 'S':
            goto LABEL_137;
          case 'G':
            v26 = -56;
            goto LABEL_137;
          case 'Q':
            goto LABEL_137;
        }
      }
      else
      {
        if (v25 <= 0x18)
        {
          if (v25 == 16)
            goto LABEL_75;
          if (((1 << v25) & 0x1066) != 0)
            goto LABEL_137;
          if (v25 == 24)
          {
LABEL_75:
            v26 = -48;
LABEL_137:
            v51 = *(_QWORD *)(v9 + v26 + 16);
            v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
            if ((v51 & 4) != 0)
              v52 = (_QWORD *)*v52;
            sub_22F11F1E4(v10, v52, a3, *(_QWORD *)(v9 - 24));
            v53 = *v10;
            if ((*v10 & 0x80000) == 0)
              *v10 = v53 & 0xFFFFFFFFFFFBFFFFLL;
            v54 = *(_QWORD *)(v9 - 24);
            if ((v54 & 7) != 0)
              v55 = 0;
            else
              v55 = v54 & 0xFFFFFFFFFFFFFFF8;
            v56 = *(unsigned int **)(v55 + 16);
            v59 = *v56;
            v57 = v56 + 4;
            v58 = v59;
            v60 = (void *)*((_QWORD *)a3 + 4);
            if ((unint64_t)v59 <= *((_QWORD *)a3 + 3) - (_QWORD)v60)
            {
              if (v58)
              {
                memcpy(v60, v57, v58);
                *((_QWORD *)a3 + 4) += v58;
              }
            }
            else
            {
              llvm::raw_ostream::write(a3, (const char *)v57);
            }
            v61 = *(uint64_t **)(v9 + 104);
            v62 = *v61;
            v63 = *((unsigned int *)v61 + 2);
            v64 = *(_QWORD *)(v9 + 88);
            v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
            if ((v64 & 4) != 0 && v65)
            {
              do
              {
                v66 = *(_QWORD *)(*v65 + 152);
                v65 = (_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF8);
              }
              while ((v66 & 4) != 0 && v65);
            }
            result = sub_22F117B8C(a3, v62, v63, v10, v65[7], 0, 0);
            v67 = (_WORD *)*((_QWORD *)a3 + 4);
            if (*((_QWORD *)a3 + 3) - (_QWORD)v67 > 1uLL)
            {
              *v67 = 14906;
              *((_QWORD *)a3 + 4) += 2;
            }
            else
            {
              result = llvm::raw_ostream::write(a3, "::");
            }
            *v10 = *v10 & 0xFFFFFFFFFFFBFFFFLL | v53 & 0x40000;
            return result;
          }
        }
        if (v25 == 70)
        {
LABEL_117:
          v26 = -64;
          goto LABEL_137;
        }
      }
      if (v25 - 52 < 6)
      {
        v26 = -72;
        goto LABEL_137;
      }
      if (v25 - 33 < 5)
        goto LABEL_117;
      goto LABEL_75;
    }
    v15 = *(_WORD *)(v9 + 8) & 0x7F;
    if ((v11 - 38) >= 0xFFFFFFFB)
      break;
    v16 = -40;
    if ((*(_WORD *)(v9 + 8) & 0x7Fu) > 0x46)
    {
      if (v15 != 83)
      {
        if (v15 == 71)
        {
          v16 = -56;
        }
        else if (v15 != 81)
        {
          goto LABEL_39;
        }
      }
    }
    else
    {
      if (v15 > 0x18)
        goto LABEL_38;
      if (v15 == 16)
        goto LABEL_27;
      if (((1 << v15) & 0x1066) != 0)
        goto LABEL_45;
      if (v15 == 24)
      {
LABEL_27:
        v16 = -48;
      }
      else
      {
LABEL_38:
        if (v15 != 70)
        {
LABEL_39:
          v17 = v15 - 52;
          if (v15 - 33 >= 5)
            v18 = -48;
          else
            v18 = -64;
          if (v17 >= 6)
            v16 = v18;
          else
            v16 = -72;
          goto LABEL_45;
        }
        v16 = -64;
      }
    }
LABEL_45:
    v19 = v9 + v16;
LABEL_56:
    v22 = *(_QWORD *)(v19 + 16);
    v9 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 4) != 0)
      v9 = *(_QWORD *)v9;
    v5 = (__int16 *)(v9 + 8);
    v4 = *(_WORD *)(v9 + 8);
    v6 = v4 & 0x7F;
    if (v6 == 83)
      return result;
  }
  v27 = -40;
  if ((*(_WORD *)(v9 + 8) & 0x7Fu) > 0x46)
  {
    if (v15 != 83)
    {
      if (v15 == 71)
      {
        v27 = -56;
      }
      else if (v15 != 81)
      {
        goto LABEL_121;
      }
    }
  }
  else
  {
    if (v15 > 0x18)
      goto LABEL_120;
    if (v15 == 16)
      goto LABEL_79;
    if (((1 << v15) & 0x1066) == 0)
    {
      if (v15 == 24)
      {
LABEL_79:
        v27 = -48;
      }
      else
      {
LABEL_120:
        if (v15 == 70)
        {
          v27 = -64;
        }
        else
        {
LABEL_121:
          v43 = v15 - 52;
          v29 = v15 - 33 >= 5;
          v44 = -48;
          if (!v29)
            v44 = -64;
          if (v43 >= 6)
            v27 = v44;
          else
            v27 = -72;
        }
      }
    }
  }
  v45 = *(_QWORD *)(v9 + v27 + 16);
  v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
  if ((v45 & 4) != 0)
    v46 = (_QWORD *)*v46;
  result = sub_22F11F1E4(v10, v46, a3, *(_QWORD *)(v9 - 24));
  v47 = *(_QWORD *)(v9 + 56);
  if ((v47 & 4) == 0)
  {
    v48 = v47 & 0xFFFFFFFFFFFFFFF8;
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 40);
      if ((v49 & 7) != 0)
        v34 = 0;
      else
        v34 = v49 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_92;
    }
  }
  v50 = *(_QWORD *)(v9 - 24);
  if ((v50 & 7) == 0)
  {
    v34 = v50 & 0xFFFFFFFFFFFFFFF8;
    if (v34)
    {
LABEL_92:
      v35 = *(unsigned int **)(v34 + 16);
      v38 = *v35;
      v36 = v35 + 4;
      v37 = v38;
      result = *((_QWORD *)a3 + 4);
      if (v38 <= (unint64_t)(*((_QWORD *)a3 + 3) - result))
      {
        if (v37)
        {
          memcpy((void *)result, v36, v37);
          result = *((_QWORD *)a3 + 4) + v37;
          *((_QWORD *)a3 + 4) = result;
        }
      }
      else
      {
        a3 = (llvm::raw_ostream *)llvm::raw_ostream::write(a3, (const char *)v36);
        result = *((_QWORD *)a3 + 4);
      }
      if ((unint64_t)(*((_QWORD *)a3 + 3) - result) <= 1)
      {
        v40 = "::";
        v41 = a3;
        return llvm::raw_ostream::write(v41, v40);
      }
      *(_WORD *)result = 14906;
      v42 = *((_QWORD *)a3 + 4) + 2;
      goto LABEL_111;
    }
  }
  return result;
}

void *sub_22F11F8B8(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  const void *v11;
  size_t v12;
  unsigned int v13;
  void *result;
  _BYTE *v15;

  if ((*(_BYTE *)(a1 + 1) & 0x10) == 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 4) != 0)
      v7 = (_QWORD *)*v7;
    sub_22F11F1E4(a1, (unint64_t)v7, this, *(_QWORD *)(a2 + 40));
  }
  v8 = *(_QWORD *)(a2 + 40);
  if ((v8 & 7) != 0)
    v9 = 0;
  else
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned int **)(v9 + 16);
  v13 = *v10;
  v11 = v10 + 4;
  v12 = v13;
  result = (void *)*((_QWORD *)this + 4);
  if ((unint64_t)v13 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v12)
    {
      result = memcpy(result, v11, v12);
      *((_QWORD *)this + 4) += v12;
    }
  }
  else
  {
    result = (void *)llvm::raw_ostream::write(this, (const char *)v11);
  }
  if (!*(_BYTE *)(a1 + 20))
  {
    v15 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v15 >= *((_QWORD *)this + 3))
    {
      return (void *)llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v15 + 1;
      *v15 = 32;
    }
  }
  return result;
}

uint64_t sub_22F11F998(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  const void *v18;
  size_t v19;
  unsigned int v20;
  void *v21;
  uint64_t result;
  _BYTE *v23;
  uint64_t v24;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x80000) == 0)
  {
    LOWORD(v9) = *(_QWORD *)a1;
    *(_QWORD *)a1 = v8 & 0xFFFFFFFFFFFBFFFFLL;
  }
  v10 = *(_QWORD *)(a2 + 32);
  v24 = v10;
  v11 = sub_22F0F08CC(&v24);
  if (a4 && (v12 = v11) != 0)
  {
    if ((v9 & 0x1000) == 0)
    {
      v13 = *(_QWORD *)(v11 + 16);
      v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 4) != 0)
        v14 = (_QWORD *)*v14;
      sub_22F11F1E4(a1, (unint64_t)v14, a3, *(_QWORD *)(v11 + 40));
    }
    v15 = *(_QWORD *)(v12 + 40);
    if ((v15 & 7) != 0)
      v16 = 0;
    else
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    v17 = *(unsigned int **)(v16 + 16);
    v20 = *v17;
    v18 = v17 + 4;
    v19 = v20;
    v21 = (void *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v20 <= *((_QWORD *)a3 + 3) - (_QWORD)v21)
    {
      if (v19)
      {
        memcpy(v21, v18, v19);
        *((_QWORD *)a3 + 4) += v19;
      }
    }
    else
    {
      llvm::raw_ostream::write(a3, (const char *)v18);
    }
  }
  else
  {
    v24 = v10;
    sub_22F402048(&v24, a3, a1, 1);
  }
  result = sub_22F117B8C(a3, a2 + 40, *(unsigned int *)(a2 + 20), a1, 0, 0, 0);
  if (!*(_BYTE *)(a1 + 20))
  {
    v23 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v23 >= *((_QWORD *)a3 + 3))
    {
      result = llvm::raw_ostream::write(a3);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v23 + 1;
      *v23 = 32;
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFBFFFFLL | (((v8 >> 18) & 1) << 18);
  return result;
}

uint64_t sub_22F11FB04(uint64_t a1, llvm::raw_ostream *this, int a3)
{
  _OWORD *v6;
  uint64_t result;
  _BYTE *v8;

  v6 = (_OWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0xFuLL)
  {
    *v6 = *(_OWORD *)"__terminated_by(";
    *((_QWORD *)this + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(this, "__terminated_by(");
  }
  result = sub_22F0D9044(*(_QWORD *)(a1 + 40), (int)this, 0, a3, 0, "\n", 1uLL);
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v8 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this);
  *((_QWORD *)this + 4) = v8 + 1;
  *v8 = 41;
  return result;
}

uint64_t sub_22F11FBD0()
{
  return sub_22F11C8E8();
}

llvm::raw_ostream *sub_22F11FBF4(llvm::raw_ostream *result, _WORD *a2, llvm::raw_ostream *this)
{
  _OWORD *v5;
  const char *v6;
  _OWORD *v7;
  void *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  void *v14;
  _OWORD *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  __int128 v34;
  __int128 v35;

  if (!(_BYTE)result)
  {
    switch(*a2 & 0x1F)
    {
      case 1:
        v5 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v5 <= 0x18uLL)
        {
          v6 = " __attribute__((stdcall))";
          goto LABEL_21;
        }
        v26 = " __attribute__((stdcall))";
        goto LABEL_88;
      case 2:
        v7 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v7 <= 0x19uLL)
        {
          v6 = " __attribute__((fastcall))";
          goto LABEL_18;
        }
        v27 = " __attribute__((fastcall))";
        goto LABEL_86;
      case 3:
        v7 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v7 <= 0x19uLL)
        {
          v6 = " __attribute__((thiscall))";
          goto LABEL_18;
        }
        v27 = " __attribute__((thiscall))";
        goto LABEL_86;
      case 4:
        v8 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v8 <= 0x1BuLL)
        {
          v6 = " __attribute__((vectorcall))";
          v9 = this;
          goto LABEL_50;
        }
        qmemcpy(v8, " __attribute__((vectorcall))", 28);
        v28 = *((_QWORD *)this + 4) + 28;
        goto LABEL_105;
      case 5:
        v10 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0x17)
        {
          v6 = " __attribute__((pascal))";
          goto LABEL_15;
        }
        v29 = " __attribute__((pascal))";
        goto LABEL_84;
      case 6:
        v10 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0x17)
        {
          v6 = " __attribute__((ms_abi))";
LABEL_15:
          v9 = this;
          goto LABEL_50;
        }
        v29 = " __attribute__((ms_abi))";
LABEL_84:
        *(_OWORD *)v10 = *(_OWORD *)v29;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v29 + 2);
        v28 = *((_QWORD *)this + 4) + 24;
        goto LABEL_105;
      case 7:
        v7 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v7 <= 0x19uLL)
        {
          v6 = " __attribute__((sysv_abi))";
LABEL_18:
          v9 = this;
          goto LABEL_50;
        }
        v27 = " __attribute__((sysv_abi))";
LABEL_86:
        *v7 = *(_OWORD *)v27;
        *(_OWORD *)((char *)v7 + 10) = *(_OWORD *)(v27 + 10);
        v28 = *((_QWORD *)this + 4) + 26;
        goto LABEL_105;
      case 8:
        v5 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v5 <= 0x18uLL)
        {
          v6 = " __attribute__((regcall))";
LABEL_21:
          v9 = this;
          goto LABEL_50;
        }
        v26 = " __attribute__((regcall))";
LABEL_88:
        *v5 = *(_OWORD *)v26;
        *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)(v26 + 9);
        v28 = *((_QWORD *)this + 4) + 25;
        goto LABEL_105;
      case 9:
        v11 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v11 <= 0x1DuLL)
        {
          v6 = " __attribute__((pcs(\"aapcs\")))";
          goto LABEL_37;
        }
        v30 = " __attribute__((pcs(\"aapcs\")))";
        goto LABEL_97;
      case 0xA:
        v12 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v12) <= 0x21)
        {
          v6 = " __attribute__((pcs(\"aapcs-vfp\")))";
          goto LABEL_47;
        }
        *(_WORD *)(v12 + 32) = 10537;
        v31 = " __attribute__((pcs(\"aapcs-vfp\")))";
        goto LABEL_101;
      case 0xB:
        v13 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0x1FuLL)
        {
          v6 = " __attribute__((intel_ocl_bicc))";
          goto LABEL_42;
        }
        v32 = " __attribute__((intel_ocl_bicc))";
        goto LABEL_104;
      case 0xE:
        v14 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0x1AuLL)
        {
          v6 = " __attribute__((swiftcall))";
          v9 = this;
          goto LABEL_50;
        }
        qmemcpy(v14, " __attribute__((swiftcall))", 27);
        v28 = *((_QWORD *)this + 4) + 27;
        goto LABEL_105;
      case 0xF:
        v15 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0x1EuLL)
        {
          v6 = "__attribute__((swiftasynccall))";
          goto LABEL_34;
        }
        v33 = "__attribute__((swiftasynccall))";
        goto LABEL_95;
      case 0x10:
        v15 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0x1EuLL)
        {
          v6 = " __attribute__((preserve_most))";
LABEL_34:
          v9 = this;
          goto LABEL_50;
        }
        v33 = " __attribute__((preserve_most))";
LABEL_95:
        *v15 = *(_OWORD *)v33;
        *(_OWORD *)((char *)v15 + 15) = *(_OWORD *)(v33 + 15);
        v28 = *((_QWORD *)this + 4) + 31;
        goto LABEL_105;
      case 0x11:
        v11 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v11 <= 0x1DuLL)
        {
          v6 = " __attribute__((preserve_all))";
LABEL_37:
          v9 = this;
          goto LABEL_50;
        }
        v30 = " __attribute__((preserve_all))";
LABEL_97:
        *v11 = *(_OWORD *)v30;
        *(_OWORD *)((char *)v11 + 14) = *(_OWORD *)(v30 + 14);
        v28 = *((_QWORD *)this + 4) + 30;
        goto LABEL_105;
      case 0x12:
        v16 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0x22uLL)
        {
          v6 = "__attribute__((aarch64_vector_pcs))";
          v9 = this;
          goto LABEL_50;
        }
        qmemcpy(v16, "__attribute__((aarch64_vector_pcs))", 35);
        v28 = *((_QWORD *)this + 4) + 35;
        goto LABEL_105;
      case 0x13:
        v13 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0x1FuLL)
        {
          v6 = "__attribute__((aarch64_sve_pcs))";
LABEL_42:
          v9 = this;
          goto LABEL_50;
        }
        v32 = "__attribute__((aarch64_sve_pcs))";
LABEL_104:
        v35 = *((_OWORD *)v32 + 1);
        *v13 = *(_OWORD *)v32;
        v13[1] = v35;
        v28 = *((_QWORD *)this + 4) + 32;
        goto LABEL_105;
      case 0x1C:
        v17 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 0xB)
        {
          v6 = " [[visible]]";
          v9 = this;
          goto LABEL_50;
        }
        *(_DWORD *)(v17 + 8) = 1566401900;
        *(_QWORD *)v17 = *(_QWORD *)" [[visible]]";
        v28 = *((_QWORD *)this + 4) + 12;
        goto LABEL_105;
      case 0x1D:
        v12 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v12) <= 0x21)
        {
          v6 = " __attribute__((intersectioncall))";
LABEL_47:
          v9 = this;
          goto LABEL_50;
        }
        *(_WORD *)(v12 + 32) = 10537;
        v31 = " __attribute__((intersectioncall))";
LABEL_101:
        v34 = *((_OWORD *)v31 + 1);
        *(_OWORD *)v12 = *(_OWORD *)v31;
        *(_OWORD *)(v12 + 16) = v34;
        v28 = *((_QWORD *)this + 4) + 34;
        goto LABEL_105;
      case 0x1E:
        v18 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v18 > 0x1CuLL)
        {
          qmemcpy(v18, " __attribute__((valist_size))", 29);
          v28 = *((_QWORD *)this + 4) + 29;
LABEL_105:
          *((_QWORD *)this + 4) = v28;
        }
        else
        {
          v6 = " __attribute__((valist_size))";
          v9 = this;
LABEL_50:
          result = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v6);
        }
        break;
      default:
        break;
    }
  }
  if ((*a2 & 0x20) != 0)
  {
    v19 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v19 > 0x19uLL)
    {
      qmemcpy(v19, " __attribute__((noreturn))", 26);
      *((_QWORD *)this + 4) += 26;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, " __attribute__((noreturn))");
    }
  }
  if ((*a2 & 0x1000) != 0)
  {
    v20 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v20 > 0x24uLL)
    {
      qmemcpy(v20, " __attribute__((cmse_nonsecure_call))", 37);
      *((_QWORD *)this + 4) += 37;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, " __attribute__((cmse_nonsecure_call))");
    }
  }
  if ((*a2 & 0x40) != 0)
  {
    v21 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v21 > 0x24uLL)
    {
      qmemcpy(v21, " __attribute__((ns_returns_retained))", 37);
      *((_QWORD *)this + 4) += 37;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, " __attribute__((ns_returns_retained))");
    }
  }
  if ((*a2 & 0x600) != 0)
  {
    v22 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v22 > 0x18uLL)
    {
      qmemcpy(v22, " __attribute__((regparm (", 25);
      *((_QWORD *)this + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(this, " __attribute__((regparm (");
    }
    result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v23 = *((_QWORD *)result + 4);
    if ((unint64_t)(*((_QWORD *)result + 3) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 41;
      *(_WORD *)v23 = 10537;
      *((_QWORD *)result + 4) += 3;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, ")))");
    }
  }
  if ((*a2 & 0x80) != 0)
  {
    v24 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v24 > 0x2AuLL)
    {
      qmemcpy(v24, " __attribute__((no_caller_saved_registers))", 43);
      *((_QWORD *)this + 4) += 43;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, " __attribute__((no_caller_saved_registers))");
    }
  }
  if ((*a2 & 0x800) != 0)
  {
    v25 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v25 > 0x1BuLL)
    {
      qmemcpy(v25, " __attribute__((nocf_check))", 28);
      *((_QWORD *)this + 4) += 28;
    }
    else
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(this, " __attribute__((nocf_check))");
    }
  }
  return result;
}

uint64_t sub_22F120354(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  __int128 *v22;
  int *v23;
  int *v24;
  uint64_t result;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  if (*(_DWORD *)a2 == 8 && !*((_DWORD *)a2 + 1))
    return 1;
  v10 = *(_DWORD *)(a3 + 28) & 0x7F;
  if (a3 && v10 == 38)
  {
    v13 = *(_QWORD *)(a3 + 72);
    v11 = (uint64_t *)(a3 + 72);
    v12 = v13;
    if (v13 >= 8)
    {
      v46 = *a2;
      v47 = *((_QWORD *)a2 + 2);
      v14 = v12 & 6;
      v15 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v14 != 2)
        v15 = 0;
      if (v15)
        v16 = (uint64_t *)(v15 + 72);
      else
        v16 = v11;
      v17 = *v16;
      v18 = v17 & 6;
      v19 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if (v18 == 4 && v19 != 0)
        v19 = (uint64_t *)v19[1];
      v21 = *v19;
      v44 = 1;
      v45 = v21;
      v22 = &v46;
      v23 = &v44;
      return sub_22F12050C(a1, (uint64_t)v22, (uint64_t)v23, a4, a5, a6);
    }
    return 0;
  }
  if (a3 && v10 == 32)
  {
    if (*(_QWORD *)(a3 + 72) >= 8uLL)
    {
      v42 = *a2;
      v43 = *((_QWORD *)a2 + 2);
      v24 = sub_22F259350(a3);
      v40 = *(_OWORD *)v24;
      v41 = *((_QWORD *)v24 + 2);
      v22 = &v42;
      v23 = (int *)&v40;
      return sub_22F12050C(a1, (uint64_t)v22, (uint64_t)v23, a4, a5, a6);
    }
    return 0;
  }
  result = 0;
  if (a3 && v10 == 59)
  {
    v28 = *(_QWORD *)(a3 + 72);
    v26 = (uint64_t *)(a3 + 72);
    v27 = v28;
    if (v28 >= 4)
    {
      v38 = *a2;
      v39 = *((_QWORD *)a2 + 2);
      v29 = v27 & 3;
      v30 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      if (v29 != 1)
        v30 = 0;
      if (v30)
        v31 = (uint64_t *)(v30 + 72);
      else
        v31 = v26;
      v32 = *v31;
      v33 = v32 & 3;
      v34 = v32 & 0xFFFFFFFFFFFFFFFCLL;
      if (v33 == 2 && v34 != 0)
        v34 = *(_QWORD *)(v34 + 8);
      v36 = 7;
      v37 = v34;
      v22 = &v38;
      v23 = &v36;
      return sub_22F12050C(a1, (uint64_t)v22, (uint64_t)v23, a4, a5, a6);
    }
    return 0;
  }
  return result;
}

unint64_t sub_22F12050C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;

  sub_22EF6871C((unsigned int *)a2, (uint64_t)&v19);
  *(_OWORD *)a2 = v19;
  *(_QWORD *)(a2 + 16) = v20;
  sub_22EF6871C((unsigned int *)a3, (uint64_t)&v19);
  *(_OWORD *)a3 = v19;
  *(_QWORD *)(a3 + 16) = v20;
  if ((sub_22F0EF184((unsigned int *)a2, (_DWORD *)a3) & 1) != 0)
    return 1;
  v13 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 7
    && (v14 = sub_22EFFA6B0(*(unsigned __int8 **)(a3 + 8)), *v14 == 161)
    && (v15 = *((_QWORD *)v14 + 2)) != 0
    && (*(_DWORD *)(v15 + 28) & 0x7F) == 0x3B)
  {
    v16 = *(unsigned int *)(v15 + 68);
    if ((v16 & 0xFFFFF) == (_DWORD)a6 && a5 > v16 >> 20)
    {
      v17 = (unsigned int *)(a4 + 24 * (v16 >> 20));
      return sub_22F0EF184(v17, (_DWORD *)a2);
    }
  }
  else if (*(_DWORD *)a2 == v13)
  {
    if (v13 == 5)
    {
      *(_QWORD *)&v19 = *(_QWORD *)(a3 + 8);
      result = sub_22F0F08CC((uint64_t *)&v19);
      if (!result)
        return result;
      if ((*(_DWORD *)(result + 28) & 0x7F) == 0x20)
      {
        v18 = *(unsigned int *)(result + 64);
        if ((v18 & 0xFFFFF) == (_DWORD)a6 && a5 > v18 >> 20)
        {
          sub_22EF6871C((unsigned int *)(a4 + 24 * (*(_DWORD *)(result + 64) >> 20)), (uint64_t)&v19);
          v17 = (unsigned int *)&v19;
          return sub_22F0EF184(v17, (_DWORD *)a2);
        }
      }
    }
    else if (v13 == 1)
    {
      return sub_22F1206B0(a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), a4, a5, a6);
    }
  }
  return 0;
}

uint64_t sub_22F1206B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD v54[3];
  uint64_t v55;
  unint64_t v56;

  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = a2 & 7;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | v7;
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if (v8 == (v9 | a3 & 7))
    return 1;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v15 && *(_BYTE *)(v15 + 16) == 47)
  {
    v16 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 32);
    if ((v16 & 0x7FFF) == (_DWORD)a6 && a5 > v16 >> 16)
    {
      v17 = a4 + 24 * (v16 >> 16);
      if (*(_DWORD *)v17 == 1)
      {
        if ((v9 & 8) != 0)
        {
          v19 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v18 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
        v39 = *(_QWORD *)(v17 + 8);
        v40 = v19 | (v9 | a3) & 7;
        if (((v40 | v18) & 0xCFFFFFFF8) != 0)
        {
          v56 = v40 | v18;
          v41 = sub_22E491354((unsigned int *)&v56, v39);
          v42 = sub_22EF5DBC4(a1, v41, v56);
          v8 = *(_QWORD *)(v6 + 8) | v7;
        }
        else
        {
          v42 = v40 & 7 | v39;
        }
        return v8 == (v42 & 7 | *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8));
      }
    }
    return 0;
  }
  v55 = 0;
  v56 = 0;
  v20 = sub_22EF67F34(a1, a2, &v56);
  v21 = sub_22EF67F34(a1, a3, &v55);
  result = 0;
  if (v56 != v55)
    return result;
  v23 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_22F10ACF8(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0));
  v25 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_22F10ACF8(*v25);
  v27 = v24 >= 0x10 && v26 >= 0x10;
  if (v27)
  {
    if (*(unsigned __int8 *)(*v25 + 16) == *(unsigned __int8 *)(*v23 + 16))
      return sub_22F1206B0(a1, v24, v26, a4, a5, a6);
    return 0;
  }
  result = sub_22F10D628(*(_QWORD *)(v25[1] & 0xFFFFFFFFFFFFFFF0));
  if (!result)
    return result;
  v28 = result;
  v29 = sub_22F10D628(*v23);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 32);
    v31 = v29 + 40;
    v32 = (unsigned int *)(v29 + 20);
  }
  else
  {
    result = sub_22F10C2A4(*v23);
    if (!result)
      return result;
    v43 = result;
    result = 0;
    v44 = *(_DWORD *)(v43 + 28);
    if ((v44 & 0x7Fu) - 35 > 2 || (v44 & 0x7E) != 0x24)
      return result;
    v45 = *(_QWORD *)(v43 + 152);
    v30 = v45 & 0xFFFFFFFFFFFFFFF8;
    if ((v45 & 4) != 0 && v30)
    {
      do
      {
        v46 = *(_QWORD *)(*(_QWORD *)v30 + 152);
        v30 = v46 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v46 & 4) != 0 && v30);
    }
    v47 = *(_QWORD **)(v43 + 168);
    v48 = *v47;
    v32 = (unsigned int *)(v47 + 1);
    v31 = v48;
  }
  v33 = *v32;
  v54[1] = v30;
  v54[0] = 5;
  v53[1] = *(_QWORD *)(v28 + 32);
  v53[0] = 5;
  result = sub_22F12050C(a1, v54, v53, a4, a5, a6);
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)v33 != *(_DWORD *)(v28 + 20))
    return 0;
  if (!(_DWORD)v33)
    return 1;
  v34 = v28 + 40;
  v35 = v33 - 1;
  do
  {
    v36 = *(_OWORD *)v31;
    v52 = *(_QWORD *)(v31 + 16);
    v51 = v36;
    v37 = *(_OWORD *)v34;
    v50 = *(_QWORD *)(v34 + 16);
    v49 = v37;
    result = sub_22F12050C(a1, &v51, &v49, a4, a5, a6);
    v27 = v35-- != 0;
    v38 = v27;
    if (!(_DWORD)result)
      break;
    v34 += 24;
    v31 += 24;
  }
  while ((v38 & 1) != 0);
  return result;
}

void sub_22F120A1C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = MEMORY[0x24BED83D8] + 16;
  v13 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  while (v4 != v3)
  {
    ++v4;
    llvm::raw_ostream::write_hex((llvm::raw_ostream *)&v5);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
}

_QWORD *sub_22F120AB0(_QWORD *result, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        result = sub_22F120B68(result, (uint64_t)a2);
        break;
      default:
        return (_QWORD *)((uint64_t (*)(void))((char *)&loc_22F120B00 + 4 * byte_22F4A9C01[v2 - 1]))();
    }
  }
  else if (!a2 || v2 != 233)
  {
    return (_QWORD *)((uint64_t (*)(void))((char *)&loc_22F120B00 + 4 * byte_22F4A9C01[v2 - 1]))();
  }
  return result;
}

_QWORD *sub_22F120B68(_QWORD *result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  uint64_t v5;

  if ((*(_DWORD *)a2 & 0xFC0000) == 0x80000)
  {
    v3 = *(unsigned __int8 **)(a2 + 16);
    v2 = *(unsigned __int8 **)(a2 + 24);
    if (*v3 == 232)
    {
      v4 = v3[2];
      v5 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      if (*v2 != 232)
        return result;
      v4 = v2[2];
      v5 = *(_QWORD *)(a2 + 24);
      v2 = *(unsigned __int8 **)(a2 + 16);
    }
    if ((v4 & 0x3C) == 0)
      result[*result != 0] = v5;
    result[2] = v2;
  }
  return result;
}

void sub_22F120BCC(char **a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *__p;
  __int128 v46;
  char *v47;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 2)
  {
    v15 = sub_22EF5C728((uint64_t)a2, a3);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 16) == 2)
        v16 = v15;
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    v19 = *(_QWORD *)(v16 + 32);
    v20 = sub_22EF5CDF0((uint64_t)a2, *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0));
    v21 = (_QWORD *)(v16 + 40);
    if (*(_DWORD *)(v16 + 48) >= 0x41u)
      v21 = (_QWORD *)*v21;
    v22 = (_QWORD *)*v21;
    sub_22F120BCC(&__p, a2, v19, 0);
    v23 = __p;
    v43 = v22;
    if (v22)
    {
      v24 = 0;
      v25 = 0;
      v26 = (_QWORD *)v46;
      v41 = v20;
      v42 = __p;
      do
      {
        v44 = v25;
        if (v23 != v26)
        {
          v27 = *a1;
          v28 = a1[2];
          v29 = v25 * v41;
          do
          {
            v30 = v23[1] + v29;
            if (v24 >= v28)
            {
              v32 = (v24 - v27) >> 5;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 59)
                abort();
              if ((v28 - v27) >> 4 > v33)
                v33 = (v28 - v27) >> 4;
              if ((unint64_t)(v28 - v27) >= 0x7FFFFFFFFFFFFFE0)
                v34 = 0x7FFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34 >> 59)
                sub_22E3B3F8C();
              v35 = (char *)operator new(32 * v34);
              v36 = v23[2];
              v37 = &v35[32 * v32];
              *(_QWORD *)v37 = *v23;
              *((_QWORD *)v37 + 1) = v30;
              *((_QWORD *)v37 + 2) = v36;
              *((_QWORD *)v37 + 3) = a4;
              if (v24 == v27)
              {
                v40 = &v35[32 * v32];
              }
              else
              {
                v38 = &v35[32 * v32];
                do
                {
                  v39 = *((_OWORD *)v24 - 1);
                  v40 = v38 - 32;
                  *((_OWORD *)v38 - 2) = *((_OWORD *)v24 - 2);
                  *((_OWORD *)v38 - 1) = v39;
                  v24 -= 32;
                  v38 -= 32;
                }
                while (v24 != v27);
              }
              v28 = &v35[32 * v34];
              v24 = v37 + 32;
              *a1 = v40;
              a1[1] = v37 + 32;
              a1[2] = v28;
              if (v27)
                operator delete(v27);
              v27 = v40;
            }
            else
            {
              v31 = v23[2];
              *(_QWORD *)v24 = *v23;
              *((_QWORD *)v24 + 1) = v30;
              *((_QWORD *)v24 + 2) = v31;
              *((_QWORD *)v24 + 3) = a4;
              v24 += 32;
            }
            a1[1] = v24;
            v23 += 4;
          }
          while (v23 != v26);
        }
        v25 = v44 + 1;
        v23 = v42;
      }
      while ((_QWORD *)(v44 + 1) != v43);
    }
    if (v23)
      operator delete(v23);
  }
  else if (v10 == 45)
  {
    v11 = sub_22F10C2A4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    if ((*(_DWORD *)(v11 + 28) & 0x7Eu) - 34 >= 4)
      v12 = 0;
    else
      v12 = v11;
    if ((*(_BYTE *)(v12 + 28) & 0x80) == 0)
    {
      __p = a2;
      v46 = 0uLL;
      v47 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v13 + 16) != 45)
        v13 = 0;
      v14 = sub_22F114198(*(_QWORD *)(v13 + 24));
      sub_22F40B9F0((uint64_t)&__p, v14);
      *(_OWORD *)a1 = v46;
      a1[2] = v47;
    }
  }
  else
  {
    v17 = sub_22EF5CDF0((uint64_t)a2, v9);
    v18 = (char *)operator new(0x20uLL);
    *(_QWORD *)v18 = a3;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v17;
    *((_QWORD *)v18 + 3) = a4;
    a1[1] = v18 + 32;
    a1[2] = v18 + 32;
    *a1 = v18;
  }
}

uint64_t sub_22F120E98(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = result;
  if ((*(_DWORD *)(a2 + 28) & 0x80) != 0)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  }
  else if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    return sub_22F40B9F0(result, a2);
  }
  else
  {
    result = sub_22EFC3B90(a2);
    if (result)
    {
      v3 = result;
LABEL_5:
      result = sub_22F40B9F0(v2, v3);
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v3)
          break;
        if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_5;
      }
    }
  }
  return result;
}

void sub_22F120F24(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
  {
    a1[2] = a1[1];
  }
  else
  {
    v8 = sub_22F0C975C(*a1, a2);
    v9 = sub_22E463414(a2);
    v10 = *(_QWORD *)(v8 + 72);
    if (v9 && *(_QWORD *)(v10 + 48) < 8uLL || (*(_BYTE *)(v10 + 40) & 1) != 0)
    {
      v11 = *a1;
      v12 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16816) & 0xFFFFFFFFFFFFFFF0));
      v13 = v12;
      v15 = (char *)a1[2];
      v14 = a1[3];
      if ((unint64_t)v15 >= v14)
      {
        v45 = a4;
        v17 = (char *)a1[1];
        v18 = (v15 - v17) >> 5;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59)
          abort();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 4 > v19)
          v19 = v20 >> 4;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
          v21 = 0x7FFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21 >> 59)
          sub_22E3B3F8C();
        v22 = (char *)operator new(32 * v21);
        v23 = &v22[32 * v18];
        *(_QWORD *)v23 = *(_QWORD *)(v11 + 16816);
        *((_QWORD *)v23 + 1) = a3;
        v24 = &v22[32 * v21];
        *((_QWORD *)v23 + 2) = v13;
        *((_QWORD *)v23 + 3) = 0;
        v16 = v23 + 32;
        if (v15 == v17)
        {
          v26 = &v22[32 * v18];
          a4 = v45;
        }
        else
        {
          a4 = v45;
          do
          {
            v25 = *((_OWORD *)v15 - 1);
            v26 = v23 - 32;
            *((_OWORD *)v23 - 2) = *((_OWORD *)v15 - 2);
            *((_OWORD *)v23 - 1) = v25;
            v15 -= 32;
            v23 -= 32;
          }
          while (v15 != v17);
        }
        a1[1] = (uint64_t)v26;
        a1[2] = (uint64_t)v16;
        a1[3] = (uint64_t)v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v15 = *(_QWORD *)(v11 + 16816);
        *((_QWORD *)v15 + 1) = a3;
        *((_QWORD *)v15 + 2) = v12;
        *((_QWORD *)v15 + 3) = 0;
        v16 = v15 + 32;
      }
      a1[2] = (uint64_t)v16;
    }
    v27 = sub_22E46A3A0(a2);
    if (v27 != v28)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        if ((*(_BYTE *)(v29 + 12) & 1) == 0)
        {
          v31 = *(_QWORD *)(**(_QWORD **)(v29 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v31 + 8) & 0xF) != 0)
            v31 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v29 + 16));
          v32 = sub_22F10C2A4(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0));
          if (v32)
          {
            if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 >= 3)
              v33 = 0;
            else
              v33 = v32;
          }
          else
          {
            v33 = 0;
          }
          v34 = sub_22E46A3EC(v8, v33);
          sub_22F120F24(a1, v33, a3 + 8 * v34, 0);
        }
        v29 += 24;
      }
      while (v29 != v30);
    }
    v35 = sub_22EFC3B90(a2);
    if (v35)
    {
      v36 = v35;
LABEL_37:
      sub_22F121228(a1, v36, a3);
      while (1)
      {
        v36 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v36)
          break;
        if ((*(_DWORD *)(v36 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_37;
      }
    }
    if ((a4 & 1) != 0)
    {
      v37 = sub_22E483108(a2);
      if (v37 != v38)
      {
        v39 = v37;
        v40 = v38;
        do
        {
          v41 = *(_QWORD *)(**(_QWORD **)(v39 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v41 + 8) & 0xF) != 0)
            v41 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v39 + 16));
          v42 = sub_22F10C2A4(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0));
          if (v42)
          {
            if ((*(_DWORD *)(v42 + 28) & 0x7Fu) - 35 >= 3)
              v43 = 0;
            else
              v43 = v42;
          }
          else
          {
            v43 = 0;
          }
          v44 = sub_22F2500F4(v8, v43);
          sub_22F120F24(a1, v43, a3 + 8 * v44, 0);
          v39 += 24;
        }
        while (v39 != v40);
      }
    }
  }
}

void sub_22F121228(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *i;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  __int128 v49;
  unint64_t *v50;
  char *__p;
  char *v52;
  char *v53;

  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    goto LABEL_40;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v8 = *(_QWORD *)v7;
  v9 = (*(_WORD *)(v8 + 8) & 0x7E) - 34;
  if (v8)
    v10 = v8 - 64;
  else
    v10 = 0;
  if (v9 >= 4)
    v10 = 0;
  if ((*(_BYTE *)(v10 + 28) & 0x80) != 0)
  {
LABEL_40:
    a1[2] = a1[1];
  }
  else
  {
    v11 = *a1;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    v12 = (*(_WORD *)(v7 + 8) & 0x7E) - 34;
    if (v7)
      v13 = v7 - 64;
    else
      v13 = 0;
    if (v12 >= 4)
      v14 = 0;
    else
      v14 = v13;
    v15 = sub_22F0C975C(v11, v14);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * sub_22EFC306C(a2)) + a3;
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
    {
      v37 = sub_22EFC2EF4(a2, *a1);
      v38 = v37;
      v40 = (unint64_t *)a1[2];
      v39 = a1[3];
      if ((unint64_t)v40 >= v39)
      {
        v42 = (unint64_t *)a1[1];
        v43 = ((char *)v40 - (char *)v42) >> 5;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 59)
LABEL_58:
          abort();
        v45 = v39 - (_QWORD)v42;
        if (v45 >> 4 > v44)
          v44 = v45 >> 4;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
          v46 = 0x7FFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46 >> 59)
LABEL_59:
          sub_22E3B3F8C();
        v47 = (char *)operator new(32 * v46);
        v48 = (unint64_t *)&v47[32 * v43];
        *v48 = v16;
        v48[1] = v17;
        v48[2] = v38;
        v48[3] = a2;
        v41 = v48 + 4;
        if (v40 == v42)
        {
          v50 = (unint64_t *)&v47[32 * v43];
        }
        else
        {
          do
          {
            v49 = *((_OWORD *)v40 - 1);
            v50 = v48 - 4;
            *((_OWORD *)v48 - 2) = *((_OWORD *)v40 - 2);
            *((_OWORD *)v48 - 1) = v49;
            v40 -= 4;
            v48 -= 4;
          }
          while (v40 != v42);
        }
        a1[1] = (uint64_t)v50;
        a1[2] = (uint64_t)v41;
        a1[3] = (uint64_t)&v47[32 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v40 = v16;
        v40[1] = v17;
        v40[2] = v37;
        v40[3] = a2;
        v41 = v40 + 4;
      }
      a1[2] = (uint64_t)v41;
    }
    else
    {
      sub_22F120BCC(&v52, (void *)*a1, v16, a2);
      v18 = v53;
      __p = v52;
      if (v52 != v53)
      {
        v19 = (char *)a1[2];
        for (i = v52; i != v18; i += 32)
        {
          v21 = *((_QWORD *)i + 1) + v17;
          v22 = a1[3];
          if ((unint64_t)v19 >= v22)
          {
            v25 = (char *)a1[1];
            v26 = (v19 - v25) >> 5;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 59)
              goto LABEL_58;
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 4 > v27)
              v27 = v28 >> 4;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
              v29 = 0x7FFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29 >> 59)
              goto LABEL_59;
            v30 = (char *)operator new(32 * v29);
            v31 = &v30[32 * v26];
            v32 = *((_QWORD *)i + 2);
            v33 = *((_QWORD *)i + 3);
            *(_QWORD *)v31 = *(_QWORD *)i;
            *((_QWORD *)v31 + 1) = v21;
            *((_QWORD *)v31 + 2) = v32;
            *((_QWORD *)v31 + 3) = v33;
            if (v19 == v25)
            {
              v36 = &v30[32 * v26];
            }
            else
            {
              v34 = &v30[32 * v26];
              do
              {
                v35 = *((_OWORD *)v19 - 1);
                v36 = v34 - 32;
                *((_OWORD *)v34 - 2) = *((_OWORD *)v19 - 2);
                *((_OWORD *)v34 - 1) = v35;
                v19 -= 32;
                v34 -= 32;
              }
              while (v19 != v25);
            }
            v19 = v31 + 32;
            a1[1] = (uint64_t)v36;
            a1[2] = (uint64_t)(v31 + 32);
            a1[3] = (uint64_t)&v30[32 * v29];
            if (v25)
              operator delete(v25);
          }
          else
          {
            v23 = *((_QWORD *)i + 2);
            v24 = *((_QWORD *)i + 3);
            *(_QWORD *)v19 = *(_QWORD *)i;
            *((_QWORD *)v19 + 1) = v21;
            *((_QWORD *)v19 + 2) = v23;
            *((_QWORD *)v19 + 3) = v24;
            v19 += 32;
          }
          a1[2] = (uint64_t)v19;
        }
      }
      if (__p)
        operator delete(__p);
    }
  }
}

void sub_22F12151C(uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t *v3;
  __n128 **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  __int16 v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  unint64_t v26;
  __n128 *v27;
  const std::nothrow_t *v28;
  unint64_t v29;
  void *v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  int v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];
  _QWORD v59[7];

  v3 = a2;
  v59[6] = *MEMORY[0x24BDAC8D0];
  v5 = (__n128 **)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 144) = 0;
  v6 = a2[1];
  v7 = a2[2];
  if (v6 == v7)
  {
    v26 = 0;
    v27 = *v5;
    v25 = v27;
LABEL_59:
    sub_22F121C64(v25, v27, v26, 0, 0, a3);
    goto LABEL_60;
  }
  v8 = 0;
  do
  {
    if (!*(_QWORD *)(v6 + 16))
      goto LABEL_45;
    v9 = *(_QWORD *)v6;
    v10 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF0;
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
      v12 = *(_BYTE *)(*(_QWORD *)v10 + 16) == 6;
    else
      v12 = 0;
    if (v12
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
      && (v11 = sub_22F10CF48(v11)) != 0)
    {
      v9 = *(_QWORD *)(v11 + 32);
      v10 = v9 & 0xFFFFFFFFFFFFFFF0;
    }
    v13 = sub_22F10ACF8(*(_QWORD *)v10);
    if (v13 < 0x10)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if ((v14 & 0xFE) != 0x28
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) <= 0x27u
          ? (v15 = ((1 << v14) & 0x8100000400) == 0)
          : (v15 = 1),
            v15))
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 11)
        {
          if ((v14 & 0xFF80000) == 0x6D00000)
            v16 = 264;
          else
            v16 = 256;
        }
        else
        {
          v16 = 256;
        }
      }
      else
      {
        v16 = 264;
      }
      goto LABEL_44;
    }
    v17 = v13;
    v18 = v13 & 0xFFFFFFFFFFFFFFF0;
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_DWORD *)(v19 + 16);
    if (v19)
      v21 = v20 == 11;
    else
      v21 = 0;
    if (v21)
    {
      if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_29;
    }
    else if (v19 && v20 == 44)
    {
      v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
      if (((*(_BYTE *)(v22 + 74) & 1) != 0 || *(_QWORD *)(v22 + 128) > 7uLL)
        && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 76) & 0x80) == 0)
      {
LABEL_29:
        v16 = 1;
        if ((v9 & 1) == 0)
          goto LABEL_39;
        goto LABEL_43;
      }
    }
    else if (v20 == 9)
    {
      goto LABEL_29;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v16 = 2;
      if ((v9 & 1) == 0)
        goto LABEL_39;
    }
    else
    {
      if (sub_22F10E06C(*(_QWORD *)v18))
        v16 = 2;
      else
        v16 = 8;
      if ((v9 & 1) == 0)
      {
LABEL_39:
        if (((*(_DWORD *)(v10 + 8) | v17) & 1) == 0
          && (*(_BYTE *)(v18 + 8) & 1) == 0
          && ((v9 & 8) == 0 || (*(_BYTE *)(v10 + 28) & 0xC) == 0))
        {
          goto LABEL_44;
        }
      }
    }
LABEL_43:
    v16 |= 4u;
LABEL_44:
    *(_WORD *)(a1 + 144) |= v16;
    *(_OWORD *)v58 = *(_OWORD *)(v6 + 8);
    *(_WORD *)&v58[16] = v16;
    v23 = (__n128 *)sub_22E5BBF6C((uint64_t)v5, (unint64_t)v58);
    v24 = (__n128 *)(*(_QWORD *)(a1 + 16) + 24 * *(unsigned int *)(a1 + 24));
    a3 = *v23;
    v24[1].n128_u64[0] = v23[1].n128_u64[0];
    *v24 = a3;
    v8 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v8;
LABEL_45:
    v6 += 32;
  }
  while (v6 != v7);
  v25 = *v5;
  v26 = v8;
  v27 = (__n128 *)((char *)*v5 + 24 * v8);
  if (v8 < 0x81)
  {
    v3 = a2;
    goto LABEL_59;
  }
  v28 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v29 = v8;
  v3 = a2;
  while (1)
  {
    v30 = operator new(24 * v29, v28);
    if (v30)
      break;
    v31 = v29 > 1;
    v29 >>= 1;
    if (!v31)
      goto LABEL_59;
  }
  v33 = v30;
  sub_22F121C64(v25, v27, v26, (uint64_t)v30, v29, a3);
  operator delete(v33);
LABEL_60:
  *(_DWORD *)(a1 + 88) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    v32 = *v3;
    if (*v3)
    {
      *(_QWORD *)v58 = v59;
      *(_OWORD *)&v58[8] = xmmword_22F45EE20;
      sub_22F40BB50(v58, v32);
      v34 = *(_DWORD *)(a1 + 24);
      v35 = *(_WORD **)v58;
      if (v34)
      {
        v36 = *(_QWORD *)(a1 + 16);
        v37 = v36 + 24 * v34;
        do
        {
          v38 = *(_QWORD *)(v36 + 8);
          if (*(_QWORD *)v36 < (unint64_t)(v38 + *(_QWORD *)v36))
          {
            v39 = &v35[*(_QWORD *)v36];
            do
            {
              v40 = (unsigned __int16)*v39;
              v41 = *(unsigned __int16 *)(v36 + 16);
              if (*v39)
                v42 = v40 == v41;
              else
                v42 = 1;
              if (!v42)
                *(_WORD *)(a1 + 8) |= 2u;
              *v39++ = v41 | v40;
              --v38;
            }
            while (v38);
          }
          v36 += 24;
        }
        while (v36 != v37);
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      LOWORD(v57) = *v35;
      v43 = sub_22E5BBF6C(a1 + 80, (unint64_t)&v55);
      v44 = *(_QWORD *)(a1 + 80) + 24 * *(unsigned int *)(a1 + 88);
      v45 = *(_OWORD *)v43;
      *(_QWORD *)(v44 + 16) = *(_QWORD *)(v43 + 16);
      *(_OWORD *)v44 = v45;
      v46 = *(_DWORD *)(a1 + 88) + 1;
      *(_DWORD *)(a1 + 88) = v46;
      v47 = *(_QWORD *)&v58[8];
      if (*(_QWORD *)&v58[8])
      {
        v48 = 0;
        do
        {
          v49 = *(_QWORD *)(a1 + 80) + 24 * v46;
          v50 = *(unsigned __int16 *)(*(_QWORD *)v58 + 2 * v48);
          if (v50 == *(unsigned __int16 *)(v49 - 8))
          {
            ++*(_QWORD *)(v49 - 16);
          }
          else
          {
            v55 = v48;
            v56 = 1;
            LOWORD(v57) = v50;
            v51 = sub_22E5BBF6C(a1 + 80, (unint64_t)&v55);
            v52 = *(_QWORD *)(a1 + 80) + 24 * *(unsigned int *)(a1 + 88);
            v53 = *(_OWORD *)v51;
            *(_QWORD *)(v52 + 16) = *(_QWORD *)(v51 + 16);
            *(_OWORD *)v52 = v53;
            v46 = *(_DWORD *)(a1 + 88) + 1;
            *(_DWORD *)(a1 + 88) = v46;
            v47 = *(_QWORD *)&v58[8];
          }
          ++v48;
        }
        while (v48 < v47);
      }
      if (*(_QWORD **)v58 != v59)
        free(*(void **)v58);
    }
  }
}

unint64_t sub_22F121A08(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  int v22;
  void **p_p;
  void *__p;
  uint64_t v25;
  uint64_t v26;

  __p = 0;
  v25 = 0;
  v26 = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = MEMORY[0x24BED83D8] + 16;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode();
  v2 = *(_DWORD *)(a1 + 88);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = v3 + 24 * v2;
    do
    {
      if (v18 == v19)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v15, "[");
      else
        *v19++ = 91;
      v5 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v6 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) == v6)
      {
        llvm::raw_ostream::write(v5, ",");
      }
      else
      {
        *v6 = 44;
        ++*((_QWORD *)v5 + 4);
      }
      v7 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v8 = (_BYTE *)*((_QWORD *)v7 + 4);
      if (*((_BYTE **)v7 + 3) == v8)
      {
        llvm::raw_ostream::write(v7, ":");
      }
      else
      {
        *v8 = 58;
        ++*((_QWORD *)v7 + 4);
      }
      v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if (*((_BYTE **)v9 + 3) == v10)
      {
        llvm::raw_ostream::write(v9, "]");
      }
      else
      {
        *v10 = 93;
        ++*((_QWORD *)v9 + 4);
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  if (v26 >= 0)
    v11 = (unsigned __int8 *)&__p;
  else
    v11 = (unsigned __int8 *)__p;
  if (v26 >= 0)
    v12 = HIBYTE(v26) & 0x7F;
  else
    v12 = v25;
  v13 = sub_22F3F1554(v11, v12);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return v13;
}

unint64_t sub_22F121C00(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v6;

  sub_22F1192C0(a1, (uint64_t)__p);
  if (v6 >= 0)
    v1 = (unsigned __int8 *)__p;
  else
    v1 = (unsigned __int8 *)__p[0];
  if (v6 >= 0)
    v2 = v6 & 0x7F;
  else
    v2 = (uint64_t)__p[1];
  v3 = sub_22F3F1554(v1, v2);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

__n128 sub_22F121C64(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int8 *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  uint64_t v31;
  __n128 *v32;
  __n128 v33;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_u64[1] < a1->n128_u64[0])
      {
        v9 = a1[1].n128_u64[0];
        result = *a1;
        v10 = a2[-1].n128_u64[1];
        *a1 = *v8;
        a1[1].n128_u64[0] = v10;
        *v8 = result;
        a2[-1].n128_u64[1] = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v21 = a4;
      v22 = a3 >> 1;
      v23 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      v24 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v25 = sub_22F121EFC(a1, v23, v24, a4, result);
        v26 = v21 + 24 * v22;
        result.n128_u64[0] = sub_22F121EFC((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26, v25).n128_u64[0];
        v27 = (__n128 *)(v21 + 24 * a3);
        v28 = (__n128 *)v26;
        while (v28 != v27)
        {
          if (v28->n128_u64[0] >= *(_QWORD *)v21)
          {
            result = *(__n128 *)v21;
            v7[1].n128_u64[0] = *(_QWORD *)(v21 + 16);
            *v7 = result;
            v21 += 24;
          }
          else
          {
            result = *v28;
            v7[1].n128_u64[0] = v28[1].n128_u64[0];
            *v7 = result;
            v28 = (__n128 *)((char *)v28 + 24);
          }
          v7 = (__n128 *)((char *)v7 + 24);
          if (v21 == v26)
          {
            if (v28 != v27)
            {
              v29 = 0;
              do
              {
                v30 = (__n128 *)((char *)v7 + v29);
                result = *(__n128 *)((char *)v28 + v29);
                v30[1].n128_u64[0] = v28[1].n128_u64[v29 / 8];
                *v30 = result;
                v29 += 24;
              }
              while ((__n128 *)((char *)v28 + v29) != v27);
            }
            return result;
          }
        }
        if (v21 != v26)
        {
          v31 = 0;
          do
          {
            v32 = (__n128 *)((char *)v7 + v31);
            result = *(__n128 *)(v21 + v31);
            v32[1].n128_u64[0] = *(_QWORD *)(v21 + v31 + 16);
            *v32 = result;
            v31 += 24;
          }
          while (v21 + v31 != v26);
        }
      }
      else
      {
        sub_22F121C64(a1, v23, v24, a4, a5);
        sub_22F121C64((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v21, a5);
        sub_22F122170((char *)v7, (char *)v7 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v21, a5);
      }
    }
    else if (a1 != a2)
    {
      v12 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v15 = (__n128 *)v12;
          v16 = v14[1].n128_u64[1];
          if (v16 < v14->n128_u64[0])
          {
            v33 = v14[2];
            v17 = v13;
            while (1)
            {
              v18 = (char *)a1 + v17;
              *(__n128 *)(v18 + 24) = *(__n128 *)((char *)a1 + v17);
              *((_QWORD *)v18 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v17);
              if (!v17)
                break;
              v17 -= 24;
              if (v16 >= *((_QWORD *)v18 - 3))
              {
                v19 = (uint64_t)&a1[1].n128_i64[1] + v17;
                goto LABEL_15;
              }
            }
            v19 = (uint64_t)a1;
LABEL_15:
            *(_QWORD *)v19 = v16;
            result = v33;
            *(__n128 *)(v19 + 8) = v33;
          }
          v12 = &v15[1].n128_i8[8];
          v13 += 24;
          v14 = v15;
        }
        while (&v15[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

__n128 sub_22F121EFC(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_u64[1] >= a1->n128_u64[0])
      {
        v19 = *a1;
        *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        result = *v9;
        v11 = a2[-1].n128_u64[1];
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(a4 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        result = *a1;
        v11 = a1[1].n128_u64[0];
      }
      *(_QWORD *)(a4 + 40) = v11;
      *(__n128 *)(a4 + 24) = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      sub_22F121C64(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_22F121C64((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if (v21->n128_u64[0] >= v8->n128_u64[0])
        {
          result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *v5 = result;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *v5 = result;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = (__n128 *)((char *)v5 + v22);
              result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v24 = 0;
        do
        {
          v25 = (__n128 *)((char *)v5 + v24);
          result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = (_QWORD *)a4;
        do
        {
          v15 = v14;
          v16 = *v14;
          v14 += 3;
          v17 = v14;
          if (v12->n128_u64[0] < v16)
          {
            *(_OWORD *)v14 = *(_OWORD *)v15;
            v14[2] = v15[2];
            v17 = (_QWORD *)a4;
            if (v15 != (_QWORD *)a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = (_QWORD *)(a4 + v18);
                if (v12->n128_u64[0] >= *(_QWORD *)(a4 + v18 - 24))
                  break;
                *(_OWORD *)v17 = *(_OWORD *)(a4 + v18 - 24);
                v17[2] = *(_QWORD *)(a4 + v18 - 8);
                v18 -= 24;
                if (!v18)
                {
                  v17 = (_QWORD *)a4;
                  break;
                }
              }
            }
          }
          result = *v12;
          v17[2] = v12[1].n128_u64[0];
          *(__n128 *)v17 = result;
          v12 = (__n128 *)((char *)v12 + 24);
          v13 += 24;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_22F122170(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  unint64_t v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  __int128 v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (*(_QWORD *)a2 >= *(_QWORD *)&result[v10])
      {
        v10 += 24;
        v75 = __CFADD__(v11++, 1);
        if (v75)
          return result;
      }
      v12 = -v11;
      v13 = &result[v10];
      if (-v11 >= v7)
      {
        if (v11 == -1)
        {
          v85 = &result[v10];
          v105 = *((_QWORD *)v85 + 2);
          v100 = *(_OWORD *)v85;
          v86 = *(_OWORD *)a2;
          *((_QWORD *)v85 + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v85 = v86;
          *((_QWORD *)a2 + 2) = v105;
          *(_OWORD *)a2 = v100;
          return result;
        }
        if (v11 > 0)
          v12 = 1 - v11;
        v23 = v12 >> 1;
        v17 = &result[24 * (v12 >> 1) + v10];
        v16 = a3;
        if (a3 != a2)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          v16 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v16[24 * (v24 >> 1)];
            v28 = *(_QWORD *)v26;
            v27 = v26 + 24;
            v24 += ~(v24 >> 1);
            if (v28 < *(_QWORD *)v17)
              v16 = v27;
            else
              v24 = v25;
          }
          while (v24);
        }
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3);
      }
      else
      {
        if (v7 >= 0)
          v14 = v7;
        else
          v14 = v7 + 1;
        v15 = v14 >> 1;
        v16 = &a2[24 * (v14 >> 1)];
        v17 = a2;
        if (v13 != a2)
        {
          v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 3);
          v17 = &result[v10];
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[24 * (v18 >> 1)];
            v22 = *(_QWORD *)v20;
            v21 = v20 + 24;
            v18 += ~(v18 >> 1);
            if (*(_QWORD *)v16 < v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v17 - result - v10) >> 3);
      }
      v29 = v16;
      if (v17 != a2)
      {
        v29 = v17;
        if (a2 != v16)
        {
          if (v17 + 24 == a2)
          {
            v102 = *((_QWORD *)v17 + 2);
            v97 = *(_OWORD *)v17;
            v35 = v16 - a2;
            v92 = a6;
            v94 = a7;
            v36 = a3;
            v37 = &result[v10];
            v90 = v15;
            v38 = v23;
            memmove(v17, a2, v16 - a2);
            v23 = v38;
            v15 = v90;
            a6 = v92;
            v13 = v37;
            a7 = v94;
            a3 = v36;
            v29 = &v17[v35];
            *(_OWORD *)v29 = v97;
            *((_QWORD *)v29 + 2) = v102;
          }
          else if (a2 + 24 == v16)
          {
            v29 = v17 + 24;
            v103 = *((_QWORD *)v16 - 1);
            v98 = *(_OWORD *)(v16 - 24);
            if (v16 - 24 != v17)
            {
              v93 = a6;
              v95 = a7;
              v39 = a3;
              v40 = &result[v10];
              v91 = v15;
              v41 = v23;
              memmove(v17 + 24, v17, v16 - 24 - v17);
              v23 = v41;
              v15 = v91;
              a6 = v93;
              v13 = v40;
              a7 = v95;
              a3 = v39;
            }
            *((_QWORD *)v17 + 2) = v103;
            *(_OWORD *)v17 = v98;
          }
          else
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v17) >> 3);
            if (v30 == 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3))
            {
              v31 = 0;
              do
              {
                v32 = &a2[v31];
                v33 = &v17[v31];
                v101 = *(_QWORD *)&v17[v31 + 16];
                v96 = *(_OWORD *)&v17[v31];
                v34 = *(_OWORD *)&a2[v31];
                *((_QWORD *)v33 + 2) = *(_QWORD *)&a2[v31 + 16];
                *(_OWORD *)v33 = v34;
                *((_QWORD *)v32 + 2) = v101;
                *(_OWORD *)v32 = v96;
                if (&v17[v31 + 24] == a2)
                  break;
                v31 += 24;
              }
              while (v32 + 24 != v16);
              v29 = a2;
            }
            else
            {
              v42 = 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3);
              v43 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v17) >> 3);
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v17[24 * v43];
                do
                {
                  v46 = *(_OWORD *)(v45 - 24);
                  v47 = *((_QWORD *)v45 - 1);
                  v45 -= 24;
                  v104 = v47;
                  v99 = v46;
                  v48 = &v45[8 * ((a2 - v17) >> 3)];
                  v49 = v45;
                  do
                  {
                    v50 = v49;
                    v49 = v48;
                    v51 = *(_OWORD *)v48;
                    *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
                    *(_OWORD *)v50 = v51;
                    v52 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v48) >> 3);
                    v53 = __OFSUB__(v30, v52);
                    v55 = v30 - v52;
                    v54 = (v55 < 0) ^ v53;
                    v48 = &v17[24 * v55];
                    if (v54)
                      v48 = &v49[8 * ((a2 - v17) >> 3)];
                  }
                  while (v48 != v45);
                  *((_QWORD *)v49 + 2) = v104;
                  *(_OWORD *)v49 = v99;
                }
                while (v45 != v17);
              }
              v29 = &v17[8 * ((v16 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v23 + v11);
      v56 = v7 - v15;
      if (v23 + v15 >= v7 - (v23 + v15) - v11)
      {
        v61 = v23;
        v62 = -(v23 + v11);
        v63 = v15;
        v64 = v7 - v15;
        v65 = a6;
        v66 = a7;
        v67 = v13;
        sub_22F122170(v29, v16, a3, v62, v64);
        result = v67;
        a7 = v66;
        a6 = v65;
        v16 = v17;
        v56 = v63;
        a4 = v61;
        a3 = v29;
      }
      else
      {
        v57 = v17;
        v58 = a6;
        v59 = a7;
        v60 = a3;
        sub_22F122170(v13, v57, v29, v23, v15);
        a7 = v59;
        a3 = v60;
        a6 = v58;
        result = v29;
      }
      v7 = v56;
      a2 = v16;
      if (!v56)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v79 = 0;
        do
        {
          v80 = &a6[v79];
          v81 = *(_OWORD *)&result[v79];
          *((_QWORD *)v80 + 2) = *(_QWORD *)&result[v79 + 16];
          *(_OWORD *)v80 = v81;
          v79 += 24;
        }
        while (&result[v79] != a2);
        if (v79)
        {
          v82 = a6;
          while (a2 != a3)
          {
            if (*(_QWORD *)a2 >= *(_QWORD *)v82)
            {
              v84 = *(_OWORD *)v82;
              *((_QWORD *)result + 2) = *((_QWORD *)v82 + 2);
              *(_OWORD *)result = v84;
              v82 += 24;
            }
            else
            {
              v83 = *(_OWORD *)a2;
              *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
              *(_OWORD *)result = v83;
              a2 += 24;
            }
            result += 24;
            if (&a6[v79] == v82)
              return result;
          }
          return (char *)memmove(result, v82, a6 - v82 + v79);
        }
      }
    }
    else if (a2 != a3)
    {
      v68 = 0;
      do
      {
        v69 = &a6[v68];
        v70 = *(_OWORD *)&a2[v68];
        *((_QWORD *)v69 + 2) = *(_QWORD *)&a2[v68 + 16];
        *(_OWORD *)v69 = v70;
        v68 += 24;
      }
      while (&a2[v68] != a3);
      if (v68)
      {
        v71 = &a6[v68];
        v72 = a3 - 24;
        while (a2 != result)
        {
          v73 = *((_QWORD *)v71 - 3);
          v74 = *((_QWORD *)a2 - 3);
          v75 = v73 >= v74;
          if (v73 >= v74)
            v76 = v71 - 24;
          else
            v76 = a2 - 24;
          if (!v75)
            a2 -= 24;
          v77 = *(_OWORD *)v76;
          v78 = *((_QWORD *)v76 + 2);
          if (v75)
            v71 -= 24;
          *((_QWORD *)v72 + 2) = v78;
          *(_OWORD *)v72 = v77;
          v72 -= 24;
          if (v71 == a6)
            return result;
        }
        if (v71 != a6)
        {
          v87 = 0;
          do
          {
            v88 = &v72[v87];
            v89 = *(_OWORD *)&v71[v87 - 24];
            *((_QWORD *)v88 + 2) = *(_QWORD *)&v71[v87 - 8];
            *(_OWORD *)v88 = v89;
            v87 -= 24;
          }
          while (&v71[v87] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F12276C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  int v17;

  v2 = sub_22F40BC98(a1);
  if (!v2)
  {
    v13 = *a1;
    v14 = (_BYTE *)(*a1 & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
      v16 = *(_BYTE *)(*(_QWORD *)v14 + 16) == 6;
    else
      v16 = 0;
    if (v16
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
      && (v15 = sub_22F10CF48(v15)) != 0)
    {
      v13 = *(_QWORD *)(v15 + 32);
      v14 = (_BYTE *)(v13 & 0xFFFFFFFFFFFFFFF0);
    }
    if ((v13 & 8) != 0 && (v14[28] & 0xC) != 0)
      return 8;
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((v17 & 0xFE) == 0x28)
      return 1;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) <= 0x27u
      && ((1 << v17) & 0x8100000400) != 0)
    {
      return 1;
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 11)
    {
      if ((v17 & 0xFF80000) == 0x6D00000)
        return 1;
      else
        return 2;
    }
    return 2;
  }
  v3 = *(unsigned int *)(v2 + 36);
  if (!(_DWORD)v3)
    return 2;
  v4 = 0;
  v5 = 0;
  v6 = *(int **)(v2 + 40);
  v7 = 4 * v3;
  do
  {
    v9 = *v6++;
    v8 = v9;
    if (v9)
      v10 = v4;
    else
      v10 = 1;
    if (v8 == 1)
      v5 = 1;
    else
      v4 = v10;
    v7 -= 4;
  }
  while (v7);
  if ((v5 & 1) != 0)
    v11 = 4;
  else
    v11 = 1;
  if ((v4 & 1) != 0)
    return v11;
  else
    return 2;
}

void sub_22F1228BC(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_22F1229E0(uint64_t a1, const void *a2, unint64_t a3, const void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  size_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v16 = 8 * a5;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = a5;
  if (a5)
    memmove(v17, a4, v16);
  sub_22F40D6B0((char **)(a1 + 32), a6, a7);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_22E6113B4(a1 + 48, a8);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  sub_22E80A6E8(a1 + 72, a3, 0);
  v18 = sub_22F2962B4(a8);
  v20 = *(_QWORD *)a8;
  if ((_QWORD *)(*(_QWORD *)a8 + 24 * *(unsigned int *)(a8 + 16)) != v18)
  {
    v21 = *(_QWORD *)(a1 + 72);
    do
    {
      v22 = *((unsigned int *)v18 + 4);
      if (!*(_DWORD *)(v21 + 4 * v22))
        *(_DWORD *)(v21 + 4 * v22) = *((_DWORD *)v18 + 5);
      while (1)
      {
        v18 += 3;
        if (v18 == v19)
          break;
        v23 = v18[1];
        if ((*v18 != -4096 || v23 != 0x7FFFFFFFFFFFFFFFLL) && (*v18 != -8192 || v23 != 0x8000000000000000))
          goto LABEL_18;
      }
      v18 = v19;
LABEL_18:
      ;
    }
    while (v18 != (_QWORD *)(v20 + 24 * *(unsigned int *)(a8 + 16)));
  }
  if (a3 >= 2)
  {
    v26 = (void *)operator new[]();
    memmove(v26, a2, 8 * a3);
    if (*(_QWORD *)a1)
      MEMORY[0x2348A0E84](*(_QWORD *)a1, 0x1000C8000313F17);
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = a3;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = 126 - 2 * __clz(v27);
  if (v27)
    v29 = v28;
  else
    v29 = 0;
  sub_22F134F10(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) + (v27 << 6), v29, 1);
  return a1;
}

uint64_t sub_22F122BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  llvm *v11;
  llvm *v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19[2];
  uint64_t v20;
  _QWORD v21[4];
  void *v22;
  _QWORD v23[65];
  void *v24;
  void *v25;
  uint64_t v26;
  llvm *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 88;
  v6 = *(_QWORD *)(a1 + 88);
  v21[0] = 0;
  if (sub_22F2C52BC(v6, *(_DWORD *)(v7 + 16), a2, a3, v21))
    v8 = v21[0] == *(_QWORD *)v7 + 24 * *(unsigned int *)(v7 + 16);
  else
    v8 = 1;
  if (!v8)
    return *(_QWORD *)(v21[0] + 16);
  sub_22F122E08((uint64_t)v21, a1, a2, a2, 0, a2, 0, 0, 0);
  v11 = (llvm *)((char *)v27 + 16 * v29);
  if (v28)
  {
    if (v29)
    {
      v13 = 16 * v29;
      v12 = v27;
      while ((*(_QWORD *)v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 = (llvm *)((char *)v12 + 16);
        v13 -= 16;
        if (!v13)
          goto LABEL_13;
      }
    }
    else
    {
      v12 = v27;
    }
  }
  else
  {
LABEL_13:
    v12 = (llvm *)((char *)v27 + 16 * v29);
  }
  v14 = (llvm *)((char *)v27 + 16 * v29);
  while (v12 != v14)
  {
    v15 = *(_QWORD *)v12;
    v19[0] = a2;
    v19[1] = v15;
    v20 = *((_QWORD *)v12 + 1);
    sub_22F40D7DC((uint64_t)v18, v7, v19, &v20);
    v16 = (llvm *)((char *)v12 + 16);
    v12 = v11;
    if (v16 != v11)
    {
      v12 = v16;
      while ((*(_QWORD *)v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 = (llvm *)((char *)v12 + 16);
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  v19[0] = 0;
  if ((sub_22F2C52BC(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 104), a2, a3, v19) & 1) != 0)
    v17 = v19[0];
  else
    v17 = *(_QWORD *)(a1 + 88) + 24 * *(unsigned int *)(a1 + 104);
  v9 = *(_QWORD *)(v17 + 16);
  llvm::deallocate_buffer(v27, (void *)(16 * v29));
  if (v25 != &v26)
    free(v25);
  if (v24 != (void *)v23[64])
    free(v24);
  if (v22 != v23)
    free(v22);
  return v9;
}

uint64_t sub_22F122E08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int i;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  if (!a3 || (*(_DWORD *)(a3 + 28) & 0x7F) != 0x53)
  {
    v10 = *(_QWORD *)(a3 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    for (i = *(_WORD *)(v11 + 8) & 0x7F; i != 83; i = *(_WORD *)(v11 + 8) & 0x7F)
    {
      v13 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v13 = -56;
          goto LABEL_22;
        }
        if (i == 81)
          goto LABEL_22;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v13 = -48;
            goto LABEL_22;
          }
        }
        if (i == 70)
        {
          v13 = -64;
          goto LABEL_22;
        }
      }
      v14 = i - 52;
      if ((i - 33) >= 5)
        v15 = -48;
      else
        v15 = -64;
      if (v14 >= 6)
        v13 = v15;
      else
        v13 = -72;
LABEL_22:
      v16 = *(_QWORD *)(v11 + v13 + 16);
      v11 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v11 = *(_QWORD *)v11;
    }
    a3 = v11 - 40;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x4000000000;
  *(_QWORD *)(a1 + 560) = a1 + 592;
  *(_QWORD *)(a1 + 568) = a1 + 592;
  *(_QWORD *)(a1 + 576) = 4;
  *(_DWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 624) = a1 + 640;
  *(_QWORD *)(a1 + 632) = 0x1000000000;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_DWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 920) = a5;
  sub_22F129EB8(a1, a6, a7, a8, a9);
  return a1;
}

unint64_t sub_22F122FA4(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  v2 = a2;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 80) & 0x7F;
  v6 = -40;
  if (v5 > 0x46)
  {
    if (v5 == 83)
      goto LABEL_17;
    if (v5 == 71)
    {
      v6 = -56;
      goto LABEL_17;
    }
    if (v5 != 81)
    {
LABEL_12:
      v7 = v5 - 52;
      v8 = v5 - 33 >= 5;
      v9 = -48;
      if (!v8)
        v9 = -64;
      if (v7 >= 6)
        v6 = v9;
      else
        v6 = -72;
    }
  }
  else
  {
    if (v5 > 0x18)
      goto LABEL_11;
    if (v5 == 16)
    {
LABEL_4:
      v6 = -48;
      goto LABEL_17;
    }
    if (((1 << v5) & 0x1066) == 0)
    {
      if (v5 == 24)
        goto LABEL_4;
LABEL_11:
      if (v5 == 70)
      {
        v6 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 72 + v6 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v12);
  v13 = sub_22F40C144(a1, v4);
  v14 = v13;
  if (v13 && (*(_DWORD *)(v13 + 28) & 0x7F) == 0x39)
    return v13 & 0xFFFFFFFFFFFFFFF8 | v2 & 7;
  if (sub_22E462B18(v13))
    return v14 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v14) + 96) & 0x80) == 0);
  return v14;
}

_QWORD *sub_22F123100(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  char v36[24];
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  _BYTE v40[136];
  uint64_t *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  result = sub_22F24CF04((uint64_t *)(a1 + 64), &v37);
  if (!result[1])
  {
    v4 = result;
    sub_22F1234AC((uint64_t)v40, a1, v37, 0, 0, v37);
    sub_22F12653C((uint64_t)v40, v38);
    v5 = v4[1];
    v4[1] = v38[0];
    if (v5)
    {
      v21 = sub_22F40BE28(v5);
      MEMORY[0x2348A0E9C](v21, 0x10F0C40DF88B1A7);
    }
    v6 = v44 + 24 * v46;
    if (v45)
    {
      if (v46)
      {
        v7 = 24 * v46;
        v8 = v44;
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1 && *(_DWORD *)(v8 + 8) == 0)
        {
          v8 += 24;
          v7 -= 24;
          if (!v7)
            goto LABEL_13;
        }
      }
      else
      {
        v8 = v44;
      }
    }
    else
    {
LABEL_13:
      v8 = v44 + 24 * v46;
    }
    v10 = v44 + 24 * v46;
    while (v8 != v10)
    {
      sub_22F40DB0C((uint64_t)v38, a1 + 40, v8, (_QWORD *)(v8 + 16));
      v11 = v8 + 24;
      while (v11 != v6)
      {
        v12 = *(unsigned int *)(v11 + 8);
        v13 = *(_QWORD *)v11 + 1;
        v11 += 24;
        if (v13 > 1 || v12 != 0)
        {
          v8 = v11 - 24;
          goto LABEL_24;
        }
      }
      v8 = v6;
LABEL_24:
      ;
    }
    v15 = &v47[10 * v49];
    if (v48)
    {
      if (v49)
      {
        v16 = 80 * v49;
        v17 = v47;
        while ((*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v17 += 10;
          v16 -= 80;
          if (!v16)
            goto LABEL_30;
        }
      }
      else
      {
        v17 = v47;
      }
    }
    else
    {
LABEL_30:
      v17 = &v47[10 * v49];
    }
    v18 = &v47[10 * v49];
    while (v17 != v18)
    {
      sub_22F40DBAC((uint64_t)v38, a1 + 8, v17, (uint64_t)(v17 + 1));
      v19 = v17 + 10;
      v17 = v15;
      if (v19 != v15)
      {
        v17 = v19;
        while ((*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v17 += 10;
          if (v17 == v15)
          {
            v17 = v15;
            break;
          }
        }
      }
    }
    v20 = v37;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v20 + 128) + 20))
    {
      v22 = v37;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104));
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 128) + 32);
      if ((v23 & 1) != 0)
        v23 = sub_22F3B1908(*(_QWORD *)(v22 + 128));
      v24 = **(_QWORD **)(v23 + 16);
      v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
        v25 = (unint64_t)sub_22F10D2BC(v24);
      v26 = sub_22F10C2A4(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0));
      if (v26)
        v27 = (*(_DWORD *)(v26 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v26;
      else
        v27 = 0;
      v29 = *(_QWORD *)(a1 + 88);
      v28 = a1 + 88;
      if ((sub_22F2C52BC(v29, *(_DWORD *)(v28 + 16), v37, v27, v38) & 1) == 0)
      {
        v30 = &v41[2 * v43];
        if (v42)
        {
          if (v43)
          {
            v31 = 16 * v43;
            v32 = v41;
            while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v32 += 2;
              v31 -= 16;
              if (!v31)
                goto LABEL_57;
            }
          }
          else
          {
            v32 = v41;
          }
        }
        else
        {
LABEL_57:
          v32 = &v41[2 * v43];
        }
        v33 = &v41[2 * v43];
        while (v32 != v33)
        {
          v34 = *v32;
          v38[0] = v37;
          v38[1] = v34;
          v39 = v32[1];
          sub_22F40D7DC((uint64_t)v36, v28, v38, &v39);
          v35 = v32 + 2;
          v32 = v30;
          if (v35 != v30)
          {
            v32 = v35;
            while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v32 += 2;
              if (v32 == v30)
              {
                v32 = v30;
                break;
              }
            }
          }
        }
      }
    }
    return (_QWORD *)sub_22F126660((uint64_t)v40);
  }
  return result;
}

uint64_t sub_22F1234AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  llvm *v17;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  void **v35;
  llvm::raw_ostream *v36;
  _DWORD *v37;
  const char *p_p;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int n;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::raw_ostream *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int j;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::raw_ostream *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  uint64_t v77;
  BOOL v78;
  _BYTE *v80;
  uint64_t v81;
  std::string::size_type *p_size;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int m;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  size_t v100;
  void *v101;
  llvm::raw_ostream *v102;
  size_t v103;
  std::string::size_type v104;
  _BYTE *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  std::string::size_type v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  llvm::raw_ostream *v116;
  const char *v117;
  llvm::raw_ostream *v118;
  uint64_t v119;
  const char *v120;
  size_t v121;
  void *v122;
  llvm::raw_ostream *v123;
  size_t v124;
  char *v125;
  _BYTE *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _WORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  llvm::raw_ostream *v136;
  uint64_t v137;
  _WORD *v138;
  uint64_t v139;
  _BYTE *v140;
  std::string *v141;
  std::string *v142;
  unint64_t v143;
  std::string::size_type v144;
  std::string::size_type *v145;
  void *v146;
  void **v147;
  std::string::size_type v148;
  const void *v149;
  const void *v150;
  size_t v151;
  const void *v152;
  size_t v153;
  size_t v154;
  size_t v155;
  int v156;
  _BOOL4 v157;
  size_t v158;
  int v159;
  _BOOL4 v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t *v163;
  unint64_t *v164;
  uint64_t v165;
  llvm::raw_ostream *v166;
  const char *v167;
  llvm::raw_ostream *v168;
  uint64_t v169;
  llvm::raw_ostream *v170;
  _BYTE *v171;
  std::string *v172;
  std::string *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  int k;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  size_t size;
  void **v194;
  std::string *p_str;
  void **v196;
  void **v197;
  void **v198;
  void *v199;
  void **v200;
  uint64_t *v201;
  void **v202;
  size_t v203;
  void **v204;
  std::string *v205;
  uint64_t **v206;
  uint64_t **v207;
  void *v208;
  uint64_t **v209;
  uint64_t v210;
  llvm::raw_ostream *v211;
  uint64_t v212;
  void **v213;
  std::string::size_type v214;
  llvm::raw_ostream *v215;
  const char *v216;
  llvm::raw_ostream *v217;
  _BYTE *v218;
  void **v219;
  void **v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t *v223;
  char v224;
  _QWORD *v225;
  unint64_t *v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t *v229;
  uint64_t *v230;
  int v231;
  void *v232[2];
  void *v233;
  std::string __str;
  void *__p;
  uint64_t *v236;
  uint64_t v237;
  void *__dst[2];
  uint64_t v239;
  unint64_t v240;
  _QWORD v241[16];

  v6 = a1;
  v241[14] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = a3;
  v223 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  v7 = (_QWORD *)(a1 + 32);
  if (!a3 || (v8 = a3, (*(_DWORD *)(a3 + 28) & 0x7F) != 0x53))
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v12 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_22;
          }
          v12 = -64;
        }
      }
LABEL_22:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 88);
  sub_22F12A690(a1 + 48, a3, a4, a6);
  *(_QWORD *)(v6 + 160) = v6 + 176;
  *(_DWORD *)(v6 + 128) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_DWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 168) = 0x4000000000;
  *(_OWORD *)(v6 + 688) = 0u;
  *(_DWORD *)(v6 + 704) = 0;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_DWORD *)(v6 + 728) = 0;
  *(_OWORD *)(v6 + 736) = 0u;
  *(_DWORD *)(v6 + 752) = 0;
  *(_DWORD *)(v6 + 776) = 0;
  *(_OWORD *)(v6 + 760) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_DWORD *)(v6 + 800) = 0;
  *(_QWORD *)(v6 + 808) = v6 + 840;
  *(_QWORD *)(v6 + 816) = v6 + 840;
  *(_QWORD *)(v6 + 824) = 4;
  *(_DWORD *)(v6 + 832) = 0;
  *(_QWORD *)(v6 + 872) = v6 + 888;
  *(_QWORD *)(v6 + 880) = 0x400000000;
  sub_22F12AEC8(v6, *(_QWORD *)(v6 + 8), 0, 0, *(unsigned __int8 *)(v6 + 24), *(_QWORD *)(v6 + 16));
  __dst[0] = v241;
  __dst[1] = v241;
  v239 = 4;
  LODWORD(v240) = 0;
  sub_22F12B9E0((_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)__dst);
  if (__dst[1] == __dst[0])
    goto LABEL_30;
  if (v239 < 0x21 || 4 * (HIDWORD(v239) - (int)v240) >= v239)
  {
    memset(__dst[1], 255, 8 * v239);
LABEL_30:
    HIDWORD(v239) = 0;
    LODWORD(v240) = 0;
    goto LABEL_31;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)__dst);
LABEL_31:
  sub_22F12BB50((_QWORD *)v6, *(_QWORD *)(v6 + 8), (uint64_t)__dst);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 2000) + 8) & 0x2000000000) != 0)
  {
    v16 = *(_DWORD *)(v6 + 168);
    if (v16 >= *(_DWORD *)(v6 + 172))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(v6 + 168);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 160) + 8 * v16) = 0;
    ++*(_DWORD *)(v6 + 168);
  }
  v17 = (llvm *)__dst[1];
  if (__dst[1] != __dst[0])
    free(__dst[1]);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 2000) + 140) & 0x10000000000) != 0)
  {
    v19 = (_QWORD *)llvm::outs(v17);
    v20 = (llvm::raw_ostream *)v19;
    v21 = (void *)v19[4];
    v228 = v19 + 4;
    if (v19[3] - (_QWORD)v21 > 0xCuLL)
    {
      qmemcpy(v21, "Original map\n", 13);
      *v228 += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v19, "Original map\n");
    }
    v22 = *(_QWORD *)(*(_QWORD *)v6 + 112);
    v23 = *(unsigned int *)(*(_QWORD *)v6 + 128);
    v24 = (unint64_t *)(v22 + 16 * v23);
    v222 = v6;
    v225 = v7;
    if (*(_DWORD *)(*(_QWORD *)v6 + 120))
    {
      if ((_DWORD)v23)
      {
        v26 = 16 * v23;
        v25 = *(unint64_t **)(*(_QWORD *)v6 + 112);
        while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v25 += 2;
          v26 -= 16;
          if (!v26)
            goto LABEL_50;
        }
      }
      else
      {
        v25 = *(unint64_t **)(*(_QWORD *)v6 + 112);
      }
    }
    else
    {
LABEL_50:
      v25 = (unint64_t *)(v22 + 16 * v23);
    }
    v27 = (unint64_t *)(v22 + 16 * v23);
    while (v25 != v27)
    {
      sub_22EFF7250(7, *v25, __dst);
      sub_22EFF7250(7, v25[1], &__p);
      v33 = (_BYTE *)*((_QWORD *)v20 + 4);
      if (*((_BYTE **)v20 + 3) == v33)
      {
        v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, " ");
      }
      else
      {
        *v33 = 32;
        ++*v228;
        v34 = v20;
      }
      if (v239 >= 0)
        v35 = __dst;
      else
        v35 = (void **)__dst[0];
      v36 = (llvm::raw_ostream *)llvm::raw_ostream::write(v34, (const char *)v35);
      v37 = (_DWORD *)*((_QWORD *)v36 + 4);
      if (*((_QWORD *)v36 + 3) - (_QWORD)v37 > 3uLL)
      {
        *v37 = 540945696;
        *((_QWORD *)v36 + 4) += 4;
      }
      else
      {
        v36 = (llvm::raw_ostream *)llvm::raw_ostream::write(v36, " -> ");
      }
      if (v237 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      v39 = (llvm::raw_ostream *)llvm::raw_ostream::write(v36, p_p);
      v40 = (_BYTE *)*((_QWORD *)v39 + 4);
      if (*((_BYTE **)v39 + 3) == v40)
      {
        llvm::raw_ostream::write(v39, "\n");
      }
      else
      {
        *v40 = 10;
        ++*((_QWORD *)v39 + 4);
      }
      if (SHIBYTE(v237) < 0)
        operator delete(__p);
      if (SHIBYTE(v239) < 0)
        operator delete(__dst[0]);
      v41 = v25 + 2;
      v25 = v24;
      if (v41 != v24)
      {
        v25 = v41;
        while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v25 += 2;
          if (v25 == v24)
          {
            v25 = v24;
            break;
          }
        }
      }
    }
    v28 = (_DWORD *)*((_QWORD *)v20 + 4);
    v29 = *((_QWORD *)v20 + 3) - (_QWORD)v28;
    if (*v223 == *v7)
    {
      if (v29 > 0xB)
      {
        v28[2] = 656437871;
        *(_QWORD *)v28 = *(_QWORD *)"Vtable for '";
        *v228 += 12;
      }
      else
      {
        llvm::raw_ostream::write(v20, "Vtable for '");
      }
      v31 = v6;
      v30 = v223;
      v32 = v6 + 160;
LABEL_117:
      v54 = *v30;
      if (!*v30 || (v55 = *v30, (*(_DWORD *)(v54 + 28) & 0x7F) != 0x53))
      {
        v56 = *(_QWORD *)(v54 + 16);
        v57 = v56 & 0xFFFFFFFFFFFFFFF8;
        if ((v56 & 4) != 0)
          v57 = *(_QWORD *)v57;
        for (j = *(_WORD *)(v57 + 8) & 0x7F; j != 83; j = *(_WORD *)(v57 + 8) & 0x7F)
        {
          v59 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v59 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_132;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_131;
            if (j == 16)
              goto LABEL_125;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_138;
            if (j == 24)
            {
LABEL_125:
              v59 = -48;
            }
            else
            {
LABEL_131:
              if (j != 70)
              {
LABEL_132:
                v60 = j - 52;
                if ((j - 33) >= 5)
                  v61 = -48;
                else
                  v61 = -64;
                if (v60 >= 6)
                  v59 = v61;
                else
                  v59 = -72;
                goto LABEL_138;
              }
              v59 = -64;
            }
          }
LABEL_138:
          v62 = *(_QWORD *)(v57 + v59 + 16);
          v57 = v62 & 0xFFFFFFFFFFFFFFF8;
          if ((v62 & 4) != 0)
            v57 = *(_QWORD *)v57;
        }
        v55 = v57 - 40;
      }
      sub_22EFBA008((_QWORD *)v54, v20, *(_QWORD *)(v55 + 88) + 15104);
      v63 = *((_QWORD *)v20 + 4);
      if ((unint64_t)(*((_QWORD *)v20 + 3) - v63) > 2)
      {
        *(_BYTE *)(v63 + 2) = 40;
        *(_WORD *)v63 = 8231;
        *v228 += 3;
      }
      else
      {
        llvm::raw_ostream::write(v20, "' (");
      }
      v64 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v65 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v65) > 0xA)
      {
        *(_DWORD *)(v65 + 7) = 170797427;
        *(_QWORD *)v65 = *(_QWORD *)" entries).\n";
        *((_QWORD *)v64 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v64, " entries).\n");
      }
      v236 = 0;
      v237 = 0;
      __p = &v236;
      v66 = sub_22F2962B4(v31 + 688);
      v68 = *(_QWORD *)(v31 + 688) + 24 * *(unsigned int *)(v31 + 704);
      if ((_QWORD *)v68 != v66)
      {
        v69 = v66;
        v70 = v67;
        do
        {
          v71 = *(_QWORD *)(*(_QWORD *)(v31 + 872) + 8 * *((unsigned int *)v69 + 4)) + *((unsigned int *)v69 + 5);
          *(_OWORD *)__dst = *(_OWORD *)v69;
          v72 = (char *)operator new(0x38uLL);
          v73 = (uint64_t *)v72;
          *((_QWORD *)v72 + 4) = v71;
          *(_OWORD *)(v72 + 40) = *(_OWORD *)__dst;
          v74 = v236;
          v75 = &v236;
          v76 = &v236;
          if (v236)
          {
            do
            {
              while (1)
              {
                v75 = (uint64_t **)v74;
                if (v71 >= v74[4])
                  break;
                v74 = (uint64_t *)*v74;
                v76 = v75;
                if (!*v75)
                  goto LABEL_157;
              }
              v74 = (uint64_t *)v74[1];
            }
            while (v74);
            v76 = v75 + 1;
          }
LABEL_157:
          *(_QWORD *)v72 = 0;
          *((_QWORD *)v72 + 1) = 0;
          *((_QWORD *)v72 + 2) = v75;
          *v76 = (uint64_t *)v72;
          if (*(_QWORD *)__p)
          {
            __p = *(void **)__p;
            v73 = *v76;
          }
          sub_22E49FD00(v236, v73);
          ++v237;
          while (1)
          {
            v69 += 3;
            if (v69 == v70)
              break;
            v77 = v69[1];
            v78 = *v69 == -4096 && v77 == 0x7FFFFFFFFFFFFFFFLL;
            if (!v78 && (*v69 != -8192 || v77 != 0x8000000000000000))
              goto LABEL_171;
          }
          v69 = v70;
LABEL_171:
          ;
        }
        while (v69 != (_QWORD *)v68);
      }
      if (*(_DWORD *)(v31 + 168))
      {
        __dst[0] = &unk_24FA65F98;
        __dst[1] = "%4d | ";
        v239 = 0;
        llvm::raw_ostream::operator<<();
        __asm { BR              X10 }
      }
      v80 = (_BYTE *)*((_QWORD *)v20 + 4);
      if ((unint64_t)v80 >= *((_QWORD *)v20 + 3))
      {
        llvm::raw_ostream::write(v20);
      }
      else
      {
        *v228 = v80 + 1;
        *v80 = 10;
      }
      v81 = *v223;
      if (*v223 != *v225)
        goto LABEL_508;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v81 + 104) + 96), *(_QWORD *)(v81 + 104));
      if (!*(_DWORD *)(*(_QWORD *)(v81 + 128) + 20))
      {
LABEL_234:
        if (*(_DWORD *)(v6 + 792))
        {
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
          v106 = *(unsigned int *)(v222 + 800);
          if ((_DWORD)v106)
          {
            v174 = 80 * v106;
            v107 = *(unint64_t **)(v222 + 784);
            while ((*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v107 += 10;
              v174 -= 80;
              if (!v174)
                goto LABEL_401;
            }
          }
          else
          {
            v107 = *(unint64_t **)(v222 + 784);
          }
          v108 = *(_QWORD *)(v222 + 784) + 80 * v106;
          if (v107 != (unint64_t *)v108)
          {
            v109 = *v107;
LABEL_239:
            sub_22EFF7250(7, v109, v232);
            if (SHIBYTE(v233) < 0)
            {
              sub_22E3BB2B4(__dst, v232[0], (unint64_t)v232[1]);
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)v232;
              v239 = (uint64_t)v233;
            }
            v240 = v109;
            sub_22F12F43C((uint64_t **)&__str, (const void **)__dst, (__int128 *)__dst);
            if (SHIBYTE(v239) < 0)
              operator delete(__dst[0]);
            if (SHIBYTE(v233) < 0)
              operator delete(v232[0]);
            while (1)
            {
              v107 += 10;
              if (v107 == (unint64_t *)v108)
                break;
              v109 = *v107;
              if ((*v107 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v107 != (unint64_t *)v108)
                  goto LABEL_239;
                break;
              }
            }
            v110 = __str.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[1])
            {
              do
              {
                v230 = *(uint64_t **)(v110 + 56);
                v111 = sub_22F40C5E4(v222 + 784, (uint64_t *)&v230);
                __dst[0] = &v239;
                __dst[1] = (void *)0x100000000;
                v112 = &v239;
                v113 = &v239;
                if (*((_DWORD *)v111 + 4)
                  && (sub_22F40CEA4((uint64_t)__dst, (uint64_t)(v111 + 1)),
                      v113 = (uint64_t *)__dst[0],
                      v112 = (uint64_t *)((char *)__dst[0] + 56 * LODWORD(__dst[1])),
                      LODWORD(__dst[1])))
                {
                  v114 = 126 - 2 * __clz(LODWORD(__dst[1]));
                }
                else
                {
                  v114 = 0;
                }
                sub_22F12F5B0((uint64_t)v113, (unint64_t)v112, v114, 1);
                v115 = *((_QWORD *)v20 + 4);
                if ((unint64_t)(*((_QWORD *)v20 + 3) - v115) > 0xB)
                {
                  *(_DWORD *)(v115 + 8) = 656437871;
                  *(_QWORD *)v115 = *(_QWORD *)"Thunks for '";
                  *v228 += 12;
                  v116 = v20;
                }
                else
                {
                  v116 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, "Thunks for '");
                }
                if (*(char *)(v110 + 55) >= 0)
                  v117 = (const char *)(v110 + 32);
                else
                  v117 = *(const char **)(v110 + 32);
                v118 = (llvm::raw_ostream *)llvm::raw_ostream::write(v116, v117);
                v119 = *((_QWORD *)v118 + 4);
                if ((unint64_t)(*((_QWORD *)v118 + 3) - v119) > 2)
                {
                  *(_BYTE *)(v119 + 2) = 40;
                  *(_WORD *)v119 = 8231;
                  *((_QWORD *)v118 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v118, "' (");
                }
                llvm::raw_ostream::operator<<();
                if (LODWORD(__dst[1]) == 1)
                  v120 = " entry";
                else
                  v120 = " entries";
                if (LODWORD(__dst[1]) == 1)
                  v121 = 6;
                else
                  v121 = 8;
                v122 = (void *)*((_QWORD *)v20 + 4);
                if (v121 <= *((_QWORD *)v20 + 3) - (_QWORD)v122)
                {
                  memcpy(v122, v120, v121);
                  v124 = *v228 + v121;
                  *v228 = v124;
                  v123 = v20;
                }
                else
                {
                  v123 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, v120);
                  v124 = *((_QWORD *)v123 + 4);
                }
                if (*((_QWORD *)v123 + 3) - v124 > 2)
                {
                  *(_BYTE *)(v124 + 2) = 10;
                  *(_WORD *)v124 = 11817;
                  *((_QWORD *)v123 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v123, ").\n");
                }
                v125 = (char *)LODWORD(__dst[1]);
                if (LODWORD(__dst[1]))
                {
                  v127 = 0;
                  v128 = 0;
                  do
                  {
                    v129 = (char *)__dst[0];
                    v232[0] = &unk_24FA65F98;
                    v232[1] = "%4d | ";
                    v233 = v128;
                    llvm::raw_ostream::operator<<();
                    if (*(_QWORD *)&v129[v127 + 24] || *(_QWORD *)&v129[v127 + 32])
                    {
                      v130 = *((_QWORD *)v20 + 4);
                      if ((unint64_t)(*((_QWORD *)v20 + 3) - v130) > 0x12)
                      {
                        *(_DWORD *)(v130 + 15) = 540701806;
                        *(_OWORD *)v130 = *(_OWORD *)"return adjustment: ";
                        *v228 += 19;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v20, "return adjustment: ");
                      }
                      llvm::raw_ostream::operator<<();
                      v131 = *((_QWORD *)v20 + 4);
                      if ((unint64_t)(*((_QWORD *)v20 + 3) - v131) > 0xB)
                      {
                        *(_DWORD *)(v131 + 8) = 1818326388;
                        *(_QWORD *)v131 = *(_QWORD *)" non-virtual";
                        *v228 += 12;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v20, " non-virtual");
                      }
                      if (*(_QWORD *)&v129[v127 + 32])
                      {
                        v132 = (_WORD *)*((_QWORD *)v20 + 4);
                        if (*((_QWORD *)v20 + 3) - (_QWORD)v132 > 1uLL)
                        {
                          *v132 = 8236;
                          *v228 += 2;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v20, ", ");
                        }
                        llvm::raw_ostream::operator<<();
                        v133 = *((_QWORD *)v20 + 4);
                        if ((unint64_t)(*((_QWORD *)v20 + 3) - v133) > 0x13)
                        {
                          *(_DWORD *)(v133 + 16) = 1952805734;
                          *(_OWORD *)v133 = *(_OWORD *)" vbase offset offset";
                          *v228 += 20;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v20, " vbase offset offset");
                        }
                      }
                      if (*(_QWORD *)&v129[v127] || *(_OWORD *)&v129[v127 + 8] != 0)
                      {
                        v134 = (_QWORD *)*((_QWORD *)v20 + 4);
                        if (*((_QWORD *)v20 + 3) - (_QWORD)v134 > 7uLL)
                        {
                          *v134 = 0x202020202020200ALL;
                          *v228 += 8;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v20, "\n       ");
                        }
                      }
                    }
                    if (*(_QWORD *)&v129[v127] || *(_OWORD *)&v129[v127 + 8] != 0)
                    {
                      v135 = *((_QWORD *)v20 + 4);
                      if ((unint64_t)(*((_QWORD *)v20 + 3) - v135) > 0x10)
                      {
                        *(_BYTE *)(v135 + 16) = 32;
                        *(_OWORD *)v135 = *(_OWORD *)"this adjustment: ";
                        *v228 += 17;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v20, "this adjustment: ");
                      }
                      v136 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
                      v137 = *((_QWORD *)v136 + 4);
                      if ((unint64_t)(*((_QWORD *)v136 + 3) - v137) > 0xB)
                      {
                        *(_DWORD *)(v137 + 8) = 1818326388;
                        *(_QWORD *)v137 = *(_QWORD *)" non-virtual";
                        *((_QWORD *)v136 + 4) += 12;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v136, " non-virtual");
                      }
                      if (*(_QWORD *)&v129[v127 + 8])
                      {
                        v138 = (_WORD *)*((_QWORD *)v20 + 4);
                        if (*((_QWORD *)v20 + 3) - (_QWORD)v138 > 1uLL)
                        {
                          *v138 = 8236;
                          *v228 += 2;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v20, ", ");
                        }
                        llvm::raw_ostream::operator<<();
                        v139 = *((_QWORD *)v20 + 4);
                        if ((unint64_t)(*((_QWORD *)v20 + 3) - v139) > 0x13)
                        {
                          *(_DWORD *)(v139 + 16) = 1952805734;
                          *(_OWORD *)v139 = *(_OWORD *)" vcall offset offset";
                          *v228 += 20;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v20, " vcall offset offset");
                        }
                      }
                    }
                    v140 = (_BYTE *)*((_QWORD *)v20 + 4);
                    if ((unint64_t)v140 >= *((_QWORD *)v20 + 3))
                    {
                      llvm::raw_ostream::write(v20);
                    }
                    else
                    {
                      *v228 = v140 + 1;
                      *v140 = 10;
                    }
                    ++v128;
                    v127 += 56;
                  }
                  while (v125 != v128);
                }
                v126 = (_BYTE *)*((_QWORD *)v20 + 4);
                if ((unint64_t)v126 >= *((_QWORD *)v20 + 3))
                {
                  llvm::raw_ostream::write(v20);
                }
                else
                {
                  *v228 = v126 + 1;
                  *v126 = 10;
                }
                if (__dst[0] != &v239)
                  free(__dst[0]);
                v141 = *(std::string **)(v110 + 8);
                if (v141)
                {
                  do
                  {
                    v142 = v141;
                    v141 = (std::string *)v141->__r_.__value_.__r.__words[0];
                  }
                  while (v141);
                }
                else
                {
                  do
                  {
                    v142 = *(std::string **)(v110 + 16);
                    v78 = v142->__r_.__value_.__r.__words[0] == v110;
                    v110 = (std::string::size_type)v142;
                  }
                  while (!v78);
                }
                v110 = (std::string::size_type)v142;
              }
              while (v142 != (std::string *)&__str.__r_.__value_.__r.__words[1]);
            }
          }
LABEL_401:
          sub_22F12F3F4((char *)__str.__r_.__value_.__l.__size_);
        }
        __dst[1] = 0;
        v239 = 0;
        __dst[0] = &__dst[1];
        v175 = sub_22E488FF8(*v223);
        if (v175 != v176)
        {
          v187 = v175;
          v188 = v176;
          v189 = (uint64_t *)(v222 + 736);
          do
          {
            v190 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v187 + 32))(v187);
            if (((*(_BYTE *)(v190 + 82) & 0xC) != 0 || sub_22EFD7260(v190))
              && (*(_QWORD *)(v187 + 80) & 0xC0000000) != 0x80000000)
            {
              v191 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v187 + 32))(v187);
              sub_22EFF7250(7, v191, &__str);
              if (v191 && (*(_DWORD *)(v191 + 28) & 0x7F) == 0x39)
              {
                v230 = (uint64_t *)(v191 & 0xFFFFFFFFFFFFFFF8 | 1);
                v231 = 0;
                v192 = *(_QWORD *)(sub_22F40CA2C(v189, (uint64_t)&v230) + 16);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                else
                  size = __str.__r_.__value_.__l.__size_;
                sub_22E3B8BF4((uint64_t)v232, size + 11);
                if (SHIBYTE(v233) >= 0)
                  v194 = v232;
                else
                  v194 = (void **)v232[0];
                if (size)
                {
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_str = &__str;
                  else
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  memmove(v194, p_str, size);
                }
                strcpy((char *)v194 + size, " [complete]");
                v196 = (void **)__dst[1];
                v197 = &__dst[1];
                v198 = &__dst[1];
                if (__dst[1])
                {
                  while (1)
                  {
                    while (1)
                    {
                      v198 = v196;
                      v199 = v196[4];
                      if ((unint64_t)v199 <= v192)
                        break;
                      v196 = (void **)*v198;
                      v197 = v198;
                      if (!*v198)
                        goto LABEL_461;
                    }
                    if ((unint64_t)v199 >= v192)
                      break;
                    v196 = (void **)v198[1];
                    if (!v196)
                    {
                      v197 = v198 + 1;
                      goto LABEL_461;
                    }
                  }
                }
                else
                {
LABEL_461:
                  v200 = v198;
                  v198 = (void **)operator new(0x40uLL);
                  v198[4] = (void *)v192;
                  v198[5] = 0;
                  v198[6] = 0;
                  v198[7] = 0;
                  *v198 = 0;
                  v198[1] = 0;
                  v198[2] = v200;
                  *v197 = v198;
                  v201 = (uint64_t *)v198;
                  if (*(_QWORD *)__dst[0])
                  {
                    __dst[0] = *(void **)__dst[0];
                    v201 = (uint64_t *)*v197;
                  }
                  sub_22E49FD00((uint64_t *)__dst[1], v201);
                  ++v239;
                }
                v202 = v198 + 5;
                if (*((char *)v198 + 63) < 0)
                  operator delete(*v202);
                *(_OWORD *)v202 = *(_OWORD *)v232;
                v198[7] = v233;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v203 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                else
                  v203 = __str.__r_.__value_.__l.__size_;
                sub_22E3B8BF4((uint64_t)v232, v203 + 11);
                if (SHIBYTE(v233) >= 0)
                  v204 = v232;
                else
                  v204 = (void **)v232[0];
                if (v203)
                {
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v205 = &__str;
                  else
                    v205 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  memmove(v204, v205, v203);
                }
                strcpy((char *)v204 + v203, " [deleting]");
                v229 = (uint64_t *)(v192 + 1);
                v206 = sub_22F1309BC((uint64_t **)__dst, v192 + 1, &v229);
                v207 = v206 + 5;
                if (*((char *)v206 + 63) < 0)
                  operator delete(*v207);
                *(_OWORD *)v207 = *(_OWORD *)v232;
                v207[2] = (uint64_t *)v233;
              }
              else
              {
                v232[0] = 0;
                LODWORD(v232[1]) = 0;
                if (sub_22E462B18(v191))
                  v208 = (void *)(v191 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v191) + 96) & 0x80) == 0));
                else
                  v208 = (void *)((uint64_t)v232[0] & 7 | (unint64_t)v191);
                v232[0] = v208;
                v230 = *(uint64_t **)(sub_22F40CA2C(v189, (uint64_t)v232) + 16);
                v209 = sub_22F1309BC((uint64_t **)__dst, (unint64_t)v230, &v230);
                std::string::operator=((std::string *)(v209 + 5), &__str);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            do
              v187 = *(_QWORD *)(v187 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v187 && (*(_DWORD *)(v187 + 28) & 0x7Eu) - 54 > 3);
          }
          while (v187 != v188);
        }
        v6 = v222;
        if (v239)
        {
          v177 = *((_QWORD *)v20 + 4);
          if ((unint64_t)(*((_QWORD *)v20 + 3) - v177) > 0x13)
          {
            *(_DWORD *)(v177 + 16) = 656437871;
            *(_OWORD *)v177 = *(_OWORD *)"VTable indices for '";
            *v228 += 20;
          }
          else
          {
            llvm::raw_ostream::write(v20, "VTable indices for '");
          }
          v178 = *v223;
          if (!*v223 || (v179 = *v223, (*(_DWORD *)(v178 + 28) & 0x7F) != 0x53))
          {
            v180 = *(_QWORD *)(v178 + 16);
            v181 = v180 & 0xFFFFFFFFFFFFFFF8;
            if ((v180 & 4) != 0)
              v181 = *(_QWORD *)v181;
            for (k = *(_WORD *)(v181 + 8) & 0x7F; k != 83; k = *(_WORD *)(v181 + 8) & 0x7F)
            {
              v183 = -40;
              if (k > 70)
              {
                if (k == 71)
                {
                  v183 = -56;
                }
                else if (k != 81)
                {
                  goto LABEL_421;
                }
              }
              else
              {
                if (k > 0x18)
                  goto LABEL_420;
                if (k == 16)
                  goto LABEL_414;
                if (((1 << k) & 0x1066) != 0)
                  goto LABEL_427;
                if (k == 24)
                {
LABEL_414:
                  v183 = -48;
                }
                else
                {
LABEL_420:
                  if (k != 70)
                  {
LABEL_421:
                    v184 = k - 52;
                    if ((k - 33) >= 5)
                      v185 = -48;
                    else
                      v185 = -64;
                    if (v184 >= 6)
                      v183 = v185;
                    else
                      v183 = -72;
                    goto LABEL_427;
                  }
                  v183 = -64;
                }
              }
LABEL_427:
              v186 = *(_QWORD *)(v181 + v183 + 16);
              v181 = v186 & 0xFFFFFFFFFFFFFFF8;
              if ((v186 & 4) != 0)
                v181 = *(_QWORD *)v181;
            }
            v179 = v181 - 40;
          }
          sub_22EFBA008((_QWORD *)v178, v20, *(_QWORD *)(v179 + 88) + 15104);
          v210 = *((_QWORD *)v20 + 4);
          if ((unint64_t)(*((_QWORD *)v20 + 3) - v210) > 2)
          {
            *(_BYTE *)(v210 + 2) = 40;
            *(_WORD *)v210 = 8231;
            *v228 += 3;
          }
          else
          {
            llvm::raw_ostream::write(v20, "' (");
          }
          v211 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v212 = *((_QWORD *)v211 + 4);
          if ((unint64_t)(*((_QWORD *)v211 + 3) - v212) > 0xA)
          {
            *(_DWORD *)(v212 + 7) = 170797427;
            *(_QWORD *)v212 = *(_QWORD *)" entries).\n";
            *((_QWORD *)v211 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v211, " entries).\n");
          }
          v213 = (void **)__dst[0];
          if (__dst[0] != &__dst[1])
          {
            do
            {
              v214 = (std::string::size_type)v213[4];
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24FA62ED8;
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)"%4llu | ";
              __str.__r_.__value_.__r.__words[2] = v214;
              v215 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              if (*((char *)v213 + 63) >= 0)
                v216 = (const char *)(v213 + 5);
              else
                v216 = (const char *)v213[5];
              v217 = (llvm::raw_ostream *)llvm::raw_ostream::write(v215, v216);
              v218 = (_BYTE *)*((_QWORD *)v217 + 4);
              if ((unint64_t)v218 >= *((_QWORD *)v217 + 3))
              {
                llvm::raw_ostream::write(v217);
              }
              else
              {
                *((_QWORD *)v217 + 4) = v218 + 1;
                *v218 = 10;
              }
              v219 = (void **)v213[1];
              if (v219)
              {
                do
                {
                  v220 = v219;
                  v219 = (void **)*v219;
                }
                while (v219);
              }
              else
              {
                do
                {
                  v220 = (void **)v213[2];
                  v78 = *v220 == v213;
                  v213 = v220;
                }
                while (!v78);
              }
              v213 = v220;
            }
            while (v220 != &__dst[1]);
          }
        }
        v221 = (_BYTE *)*((_QWORD *)v20 + 4);
        if ((unint64_t)v221 >= *((_QWORD *)v20 + 3))
        {
          llvm::raw_ostream::write(v20);
        }
        else
        {
          *v228 = v221 + 1;
          *v221 = 10;
        }
        sub_22E7223A4((char *)__dst[1]);
LABEL_508:
        sub_22F258024(v236);
        return v6;
      }
      p_size = &__str.__r_.__value_.__l.__size_;
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
      v83 = *(_QWORD *)(v6 + 136);
      v84 = *(unsigned int *)(v6 + 152);
      v85 = (unint64_t *)(v83 + 16 * v84);
      if (*(_DWORD *)(v6 + 144))
      {
        if ((_DWORD)v84)
        {
          v87 = 16 * v84;
          v86 = *(unint64_t **)(v6 + 136);
          while ((*v86 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v86 += 2;
            v87 -= 16;
            if (!v87)
              goto LABEL_186;
          }
        }
        else
        {
          v86 = *(unint64_t **)(v6 + 136);
        }
      }
      else
      {
LABEL_186:
        v86 = (unint64_t *)(v83 + 16 * v84);
      }
      v226 = (unint64_t *)(v83 + 16 * v84);
      if (v86 == v226)
      {
LABEL_188:
        v88 = (void *)*((_QWORD *)v20 + 4);
        if (*((_QWORD *)v20 + 3) - (_QWORD)v88 > 0x20uLL)
        {
          qmemcpy(v88, "Virtual base offset offsets for '", 33);
          *v228 += 33;
        }
        else
        {
          llvm::raw_ostream::write(v20, "Virtual base offset offsets for '");
        }
        v89 = *v223;
        if (!*v223 || (v90 = *v223, (*(_DWORD *)(v89 + 28) & 0x7F) != 0x53))
        {
          v91 = *(_QWORD *)(v89 + 16);
          v92 = v91 & 0xFFFFFFFFFFFFFFF8;
          if ((v91 & 4) != 0)
            v92 = *(_QWORD *)v92;
          for (m = *(_WORD *)(v92 + 8) & 0x7F; m != 83; m = *(_WORD *)(v92 + 8) & 0x7F)
          {
            v94 = -40;
            if (m > 70)
            {
              if (m == 71)
              {
                v94 = -56;
              }
              else if (m != 81)
              {
                goto LABEL_205;
              }
            }
            else
            {
              if (m > 0x18)
                goto LABEL_204;
              if (m == 16)
                goto LABEL_198;
              if (((1 << m) & 0x1066) != 0)
                goto LABEL_211;
              if (m == 24)
              {
LABEL_198:
                v94 = -48;
              }
              else
              {
LABEL_204:
                if (m != 70)
                {
LABEL_205:
                  v95 = m - 52;
                  if ((m - 33) >= 5)
                    v96 = -48;
                  else
                    v96 = -64;
                  if (v95 >= 6)
                    v94 = v96;
                  else
                    v94 = -72;
                  goto LABEL_211;
                }
                v94 = -64;
              }
            }
LABEL_211:
            v97 = *(_QWORD *)(v92 + v94 + 16);
            v92 = v97 & 0xFFFFFFFFFFFFFFF8;
            if ((v97 & 4) != 0)
              v92 = *(_QWORD *)v92;
          }
          v90 = v92 - 40;
        }
        sub_22EFBA008((_QWORD *)v89, v20, *(_QWORD *)(v90 + 88) + 15104);
        v98 = *((_QWORD *)v20 + 4);
        if ((unint64_t)(*((_QWORD *)v20 + 3) - v98) > 2)
        {
          *(_BYTE *)(v98 + 2) = 40;
          *(_WORD *)v98 = 8231;
          *v228 += 3;
        }
        else
        {
          llvm::raw_ostream::write(v20, "' (");
        }
        llvm::raw_ostream::operator<<();
        if (__str.__r_.__value_.__r.__words[2] == 1)
          v99 = " entry";
        else
          v99 = " entries";
        if (__str.__r_.__value_.__r.__words[2] == 1)
          v100 = 6;
        else
          v100 = 8;
        v101 = (void *)*((_QWORD *)v20 + 4);
        if (v100 <= *((_QWORD *)v20 + 3) - (_QWORD)v101)
        {
          memcpy(v101, v99, v100);
          v103 = *v228 + v100;
          *v228 = v103;
          v102 = v20;
        }
        else
        {
          v102 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, v99);
          v103 = *((_QWORD *)v102 + 4);
        }
        if (*((_QWORD *)v102 + 3) - v103 > 2)
        {
          *(_BYTE *)(v103 + 2) = 10;
          *(_WORD *)v103 = 11817;
          *((_QWORD *)v102 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v102, ").\n");
        }
        v104 = __str.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[1])
        {
          do
          {
            v165 = *((_QWORD *)v20 + 4);
            if ((unint64_t)(*((_QWORD *)v20 + 3) - v165) > 2)
            {
              *(_BYTE *)(v165 + 2) = 32;
              *(_WORD *)v165 = 8224;
              *v228 += 3;
              v166 = v20;
            }
            else
            {
              v166 = (llvm::raw_ostream *)llvm::raw_ostream::write(v20, "   ");
            }
            if (*(char *)(v104 + 55) >= 0)
              v167 = (const char *)(v104 + 32);
            else
              v167 = *(const char **)(v104 + 32);
            v168 = (llvm::raw_ostream *)llvm::raw_ostream::write(v166, v167);
            v169 = *((_QWORD *)v168 + 4);
            if ((unint64_t)(*((_QWORD *)v168 + 3) - v169) > 2)
            {
              *(_BYTE *)(v169 + 2) = 32;
              *(_WORD *)v169 = 31776;
              *((_QWORD *)v168 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v168, " | ");
            }
            v170 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v171 = (_BYTE *)*((_QWORD *)v170 + 4);
            if ((unint64_t)v171 >= *((_QWORD *)v170 + 3))
            {
              llvm::raw_ostream::write(v170);
            }
            else
            {
              *((_QWORD *)v170 + 4) = v171 + 1;
              *v171 = 10;
            }
            v172 = *(std::string **)(v104 + 8);
            if (v172)
            {
              do
              {
                v173 = v172;
                v172 = (std::string *)v172->__r_.__value_.__r.__words[0];
              }
              while (v172);
            }
            else
            {
              do
              {
                v173 = *(std::string **)(v104 + 16);
                v78 = v173->__r_.__value_.__r.__words[0] == v104;
                v104 = (std::string::size_type)v173;
              }
              while (!v78);
            }
            v104 = (std::string::size_type)v173;
          }
          while (v173 != (std::string *)&__str.__r_.__value_.__r.__words[1]);
        }
        v105 = (_BYTE *)*((_QWORD *)v20 + 4);
        if (*((_BYTE **)v20 + 3) == v105)
        {
          llvm::raw_ostream::write(v20, "\n");
        }
        else
        {
          *v105 = 10;
          ++*v228;
        }
        v6 = v222;
        sub_22F12F3F4((char *)__str.__r_.__value_.__l.__size_);
        goto LABEL_234;
      }
      while (1)
      {
        sub_22EFB9E74(*v86, v232);
        v143 = v86[1];
        if (SHIBYTE(v233) < 0)
        {
          sub_22E3BB2B4(__dst, v232[0], (unint64_t)v232[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v232;
          v239 = (uint64_t)v233;
        }
        v227 = v143;
        v240 = v143;
        v144 = __str.__r_.__value_.__l.__size_;
        v145 = &__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v224 = HIBYTE(v239);
          if (v239 >= 0)
            v146 = (void *)HIBYTE(v239);
          else
            v146 = __dst[1];
          if (v239 >= 0)
            v147 = __dst;
          else
            v147 = (void **)__dst[0];
          while (1)
          {
            while (1)
            {
              p_size = (std::string::size_type *)v144;
              v150 = *(const void **)(v144 + 32);
              v148 = v144 + 32;
              v149 = v150;
              v151 = *(unsigned __int8 *)(v148 + 23);
              if ((v151 & 0x80u) == 0)
                v152 = (const void *)v148;
              else
                v152 = v149;
              v153 = *(_QWORD *)(v148 + 8);
              if ((v151 & 0x80u) == 0)
                v154 = v151 & 0x7F;
              else
                v154 = *(_QWORD *)(v148 + 8);
              if (v154 >= (unint64_t)v146)
                v155 = (size_t)v146;
              else
                v155 = v154;
              v156 = memcmp(v147, v152, v155);
              v157 = (unint64_t)v146 < v154;
              if (v156)
                v157 = v156 < 0;
              if (!v157)
                break;
              v144 = *p_size;
              v145 = p_size;
              if (!*p_size)
                goto LABEL_363;
            }
            if ((v151 & 0x80u) != 0)
              v151 = v153;
            if ((unint64_t)v146 >= v151)
              v158 = v151;
            else
              v158 = (size_t)v146;
            v159 = memcmp(v152, v147, v158);
            v160 = v151 < (unint64_t)v146;
            if (v159)
              v160 = v159 < 0;
            if (!v160)
              break;
            v144 = p_size[1];
            if (!v144)
            {
              v145 = p_size + 1;
              goto LABEL_363;
            }
          }
          p_size = &__str.__r_.__value_.__l.__size_;
          if ((v224 & 0x80) == 0)
            goto LABEL_368;
        }
        else
        {
LABEL_363:
          v161 = operator new(0x40uLL);
          v161[2] = *(_OWORD *)__dst;
          v162 = v239;
          __dst[0] = 0;
          __dst[1] = 0;
          v239 = 0;
          *((_QWORD *)v161 + 6) = v162;
          *((_QWORD *)v161 + 7) = v227;
          *(_QWORD *)v161 = 0;
          *((_QWORD *)v161 + 1) = 0;
          *((_QWORD *)v161 + 2) = p_size;
          *v145 = (std::string::size_type)v161;
          if (*(_QWORD *)__str.__r_.__value_.__l.__data_)
          {
            __str.__r_.__value_.__r.__words[0] = *(_QWORD *)__str.__r_.__value_.__l.__data_;
            v163 = (uint64_t *)*v145;
          }
          else
          {
            v163 = (uint64_t *)v161;
          }
          p_size = &__str.__r_.__value_.__l.__size_;
          sub_22E49FD00((uint64_t *)__str.__r_.__value_.__l.__size_, v163);
          ++__str.__r_.__value_.__r.__words[2];
          if ((v239 & 0x8000000000000000) == 0)
            goto LABEL_368;
        }
        operator delete(__dst[0]);
LABEL_368:
        if (SHIBYTE(v233) < 0)
          operator delete(v232[0]);
        v164 = v86 + 2;
        v86 = v85;
        if (v164 != v85)
        {
          v86 = v164;
          while ((*v86 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v86 += 2;
            if (v86 == v85)
            {
              v86 = v85;
              break;
            }
          }
        }
        if (v86 == v226)
          goto LABEL_188;
      }
    }
    if (v29 > 0x19)
    {
      qmemcpy(v28, "Construction vtable for ('", 26);
      *v228 += 26;
    }
    else
    {
      llvm::raw_ostream::write(v20, "Construction vtable for ('");
    }
    v31 = v6;
    v42 = *v223;
    v32 = v6 + 160;
    if (!*v223 || (v43 = *v223, (*(_DWORD *)(v42 + 28) & 0x7F) != 0x53))
    {
      v44 = *(_QWORD *)(v42 + 16);
      v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if ((v44 & 4) != 0)
        v45 = *(_QWORD *)v45;
      for (n = *(_WORD *)(v45 + 8) & 0x7F; n != 83; n = *(_WORD *)(v45 + 8) & 0x7F)
      {
        v47 = -40;
        if (n > 70)
        {
          if (n == 71)
          {
            v47 = -56;
          }
          else if (n != 81)
          {
            goto LABEL_99;
          }
        }
        else
        {
          if (n > 0x18)
            goto LABEL_98;
          if (n == 16)
            goto LABEL_92;
          if (((1 << n) & 0x1066) != 0)
            goto LABEL_105;
          if (n == 24)
          {
LABEL_92:
            v47 = -48;
          }
          else
          {
LABEL_98:
            if (n != 70)
            {
LABEL_99:
              v48 = n - 52;
              if ((n - 33) >= 5)
                v49 = -48;
              else
                v49 = -64;
              if (v48 >= 6)
                v47 = v49;
              else
                v47 = -72;
              goto LABEL_105;
            }
            v47 = -64;
          }
        }
LABEL_105:
        v50 = *(_QWORD *)(v45 + v47 + 16);
        v45 = v50 & 0xFFFFFFFFFFFFFFF8;
        if ((v50 & 4) != 0)
          v45 = *(_QWORD *)v45;
      }
      v43 = v45 - 40;
    }
    sub_22EFBA008((_QWORD *)v42, v20, *(_QWORD *)(v43 + 88) + 15104);
    v51 = *((_QWORD *)v20 + 4);
    if ((unint64_t)(*((_QWORD *)v20 + 3) - v51) > 2)
    {
      *(_BYTE *)(v51 + 2) = 32;
      *(_WORD *)v51 = 11303;
      *v228 += 3;
    }
    else
    {
      llvm::raw_ostream::write(v20, "', ");
    }
    v52 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v53 = *((_QWORD *)v52 + 4);
    if ((unint64_t)(*((_QWORD *)v52 + 3) - v53) > 5)
    {
      *(_WORD *)(v53 + 4) = 10016;
      *(_DWORD *)v53 = 1852383273;
      *((_QWORD *)v52 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v52, ") in '");
    }
    v30 = v7;
    goto LABEL_117;
  }
  return v6;
}

void sub_22F12653C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(unint64_t **)(a1 + 760);
  v5 = *(unsigned int *)(a1 + 776);
  v6 = &v4[8 * v5];
  if (*(_DWORD *)(a1 + 768))
  {
    if ((_DWORD)v5)
    {
      v10 = v5 << 6;
      while (*v4 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v4 += 8;
        v10 -= 64;
        if (!v10)
          goto LABEL_2;
      }
    }
  }
  else
  {
LABEL_2:
    v4 = v6;
  }
  v11 = v13;
  v12 = 0x100000000;
  sub_22F40DA0C((uint64_t)&v11, v4, v6, v6);
  v7 = *(const void **)(a1 + 160);
  v8 = *(unsigned int *)(a1 + 168);
  v9 = operator new();
  *a2 = sub_22F1229E0(v9, *(const void **)(a1 + 872), *(unsigned int *)(a1 + 880), v7, v8, (uint64_t)v11, (char *)v12, a1 + 688);
  if (v11 != v13)
    free(v11);
}

uint64_t sub_22F126660(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  llvm *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 872);
  if (v2 != (void *)(a1 + 888))
    free(v2);
  v3 = *(void **)(a1 + 816);
  if (v3 != *(void **)(a1 + 808))
    free(v3);
  sub_22F40C4F0(a1 + 784);
  llvm::deallocate_buffer(*(llvm **)(a1 + 784), (void *)(80 * *(unsigned int *)(a1 + 800)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 760), (void *)((unint64_t)*(unsigned int *)(a1 + 776) << 6));
  llvm::deallocate_buffer(*(llvm **)(a1 + 736), (void *)(24 * *(unsigned int *)(a1 + 752)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 712), (void *)(32 * *(unsigned int *)(a1 + 728)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 688), (void *)(24 * *(unsigned int *)(a1 + 704)));
  v4 = *(void **)(a1 + 160);
  if (v4 != (void *)(a1 + 176))
    free(v4);
  llvm::deallocate_buffer(*(llvm **)(a1 + 136), (void *)(16 * *(unsigned int *)(a1 + 152)));
  v5 = *(_DWORD *)(a1 + 128);
  v6 = *(llvm **)(a1 + 112);
  if (v5)
  {
    v7 = 280 * v5;
    v8 = (char *)v6 + 24;
    do
    {
      if ((*((_QWORD *)v8 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = (char *)*((_QWORD *)v8 - 2);
        if (v8 != v9)
          free(v9);
      }
      v8 += 280;
      v7 -= 280;
    }
    while (v7);
    v6 = *(llvm **)(a1 + 112);
    v10 = 280 * *(unsigned int *)(a1 + 128);
  }
  else
  {
    v10 = 0;
  }
  llvm::deallocate_buffer(v6, (void *)v10);
  llvm::deallocate_buffer(*(llvm **)(a1 + 88), (void *)(40 * *(unsigned int *)(a1 + 104)));
  return a1;
}

void sub_22F1267CC(uint64_t *a1, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  const void *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  _BYTE v73[32];
  void *v74;
  uint64_t v75;
  _QWORD v76[4];

  v76[2] = *MEMORY[0x24BDAC8D0];
  v68 = sub_22F0C975C(a1[5], a3);
  v6 = *(_QWORD *)(v68 + 72);
  if (a2)
  {
    if ((*(_QWORD *)(v6 + 32) & 0x8000000000000000) != 0 || *(_QWORD *)(v6 + 56))
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v6 + 40) & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = (char *)operator new();
  *(_QWORD *)v7 = a3;
  *((_QWORD *)v7 + 1) = a3;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = v7 + 40;
  *((_QWORD *)v7 + 4) = 0x100000000;
  *((_QWORD *)v7 + 6) = a3;
  *((_QWORD *)v7 + 7) = v7 + 72;
  *((_QWORD *)v7 + 8) = 0x100000000;
  *((_QWORD *)v7 + 10) = v7 + 96;
  *((_QWORD *)v7 + 11) = 0x100000000;
  *((_QWORD *)v7 + 13) = 0;
  v69 = v7;
  sub_22F126E14(a4, (char *)&v69);
  v8 = v69;
  v69 = 0;
  if (v8)
  {
    v65 = sub_22F40DCA8(v8);
    MEMORY[0x2348A0E9C](v65, 0x10E0C40B594695DLL);
  }
LABEL_8:
  v69 = v73;
  v70 = v73;
  v71 = 4;
  v72 = 0;
  v9 = sub_22E46A3A0(a3);
  if (v9 != v10)
  {
    v11 = v9;
    v12 = v10;
    do
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
      v14 = sub_22F10C2A4(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
      if (v14)
      {
        if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
          v15 = 0;
        else
          v15 = (void *)v14;
      }
      else
      {
        v15 = 0;
      }
      if ((*(_BYTE *)(v11 + 12) & 1) == 0
        || ((v16 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v69, v15), v70 != v69)
          ? (v17 = &v71)
          : (v17 = (uint64_t *)((char *)&v71 + 4)),
            v16 == (void **)&v70[8 * *(unsigned int *)v17]))
      {
        if (sub_22E463414((uint64_t)v15))
        {
          if (a2)
          {
            v18 = sub_22F129AE4(a1, v15) + 24;
          }
          else
          {
            v74 = v15;
            (*(void (**)(uint64_t *, void *))(*a1 + 16))(a1, v15);
            v18 = sub_22F40DF2C((uint64_t)(a1 + 9), (uint64_t *)&v74)[1];
          }
          v19 = *(unsigned int *)(v18 + 8);
          if ((_DWORD)v19)
          {
            v20 = *(uint64_t **)v18;
            v21 = *(_QWORD *)v18 + 8 * v19;
            do
            {
              v22 = *v20;
              v23 = *(unsigned int *)(*v20 + 64);
              if ((_DWORD)v23)
              {
                v24 = *(void ***)(v22 + 56);
                v25 = 8 * v23;
                while (1)
                {
                  v26 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v69, *v24);
                  v27 = v70 == v69 ? (uint64_t *)((char *)&v71 + 4) : &v71;
                  if (v26 != (void **)&v70[8 * *(unsigned int *)v27])
                    break;
                  ++v24;
                  v25 -= 8;
                  if (!v25)
                  {
                    v22 = *v20;
                    goto LABEL_35;
                  }
                }
              }
              else
              {
LABEL_35:
                v28 = operator new();
                v74 = (void *)sub_22F40DDEC(v28, (__int128 *)v22);
                v29 = *((unsigned int *)v74 + 8);
                if (!(_DWORD)v29 || *(void **)(*(_QWORD *)(v28 + 24) + 8 * v29 - 8) != v15)
                  *(_QWORD *)(v28 + 48) = v15;
                if (*(void **)v28 == v15)
                {
                  v30 = *(_QWORD *)(v68 + 72);
                  v31 = a2 ? *(void **)(v30 + 56) : (void *)(*(_QWORD *)(v30 + 48) & 0xFFFFFFFFFFFFFFF8);
                  if (v15 == v31)
                    *(_QWORD *)v28 = a3;
                }
                if ((*(_BYTE *)(v11 + 12) & 1) != 0)
                {
                  v33 = *(unsigned int *)(v28 + 64);
                  if (v33 >= *(unsigned int *)(v28 + 68))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v33 = *(unsigned int *)(v28 + 64);
                  }
                  *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v33) = v15;
                  ++*(_DWORD *)(v28 + 64);
                  v28 = (uint64_t)v74;
                }
                else if (!*(_DWORD *)(v28 + 64))
                {
                  v32 = sub_22E46A3EC(v68, (uint64_t)v15);
                  v28 = (uint64_t)v74;
                  *((_QWORD *)v74 + 2) += v32;
                }
                *(_QWORD *)(v28 + 104) = *(_QWORD *)(v28 + 16);
                if (*(_DWORD *)(v28 + 64))
                {
                  v34 = **(_QWORD **)(v28 + 56);
                  if (v34)
                  {
                    v37 = sub_22F2500F4(v68, v34);
                    *((_QWORD *)v74 + 13) += v37;
                  }
                }
                sub_22F126E14(a4, (char *)&v74);
                v35 = v74;
                v74 = 0;
                if (v35)
                {
                  v36 = sub_22F40DCA8(v35);
                  MEMORY[0x2348A0E9C](v36, 0x10E0C40B594695DLL);
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          if ((*(_BYTE *)(v11 + 12) & 1) != 0)
            sub_22E3BA850((uint64_t)&v69, v15);
          v38 = sub_22E483108((uint64_t)v15);
          if (v38 != v39)
          {
            v40 = v38;
            v41 = v39;
            do
            {
              v42 = *(_QWORD *)(**(_QWORD **)(v40 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v42 + 8) & 0xF) != 0)
                v42 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v40 + 16));
              v43 = sub_22F10C2A4(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0));
              if (v43)
              {
                if ((*(_DWORD *)(v43 + 28) & 0x7Fu) - 35 >= 3)
                  v44 = 0;
                else
                  v44 = (const void *)v43;
              }
              else
              {
                v44 = 0;
              }
              sub_22E3BA850((uint64_t)&v69, v44);
              v40 += 24;
            }
            while (v40 != v41);
          }
        }
      }
      v11 += 24;
    }
    while (v11 != v12);
  }
  do
  {
    v45 = *(char **)a4;
    v46 = (char *)(*(_QWORD *)a4 + 8 * *(unsigned int *)(a4 + 8));
    v74 = v76;
    v75 = 0x200000000;
    sub_22F246808((uint64_t)&v74, v45, v46);
    v47 = 126 - 2 * __clz(v75);
    if ((_DWORD)v75)
      v48 = v47;
    else
      v48 = 0;
    sub_22F130A88((unint64_t)v74, (uint64_t *)v74 + v75, v48, 1);
    v49 = v75;
    if ((_DWORD)v75)
    {
      v50 = 0;
      v51 = 0;
      do
      {
        v52 = v50;
        v53 = v74;
        v54 = v50 + 1;
        v55 = v50;
        while (1)
        {
          if (v49 == v54)
          {
            v55 = v49 - 1;
            v50 = v49;
            goto LABEL_83;
          }
          v50 = v54;
          v56 = v53[v52];
          v57 = v55 + 1;
          v58 = v53[v54];
          v59 = *(unsigned int *)(v56 + 32);
          if ((_DWORD)v59 != *(_DWORD *)(v58 + 32))
            break;
          v60 = memcmp(*(const void **)(v56 + 24), *(const void **)(v58 + 24), 8 * v59);
          v54 = v50 + 1;
          v55 = v57;
          if (v60)
          {
            v55 = v50 - 1;
            goto LABEL_83;
          }
        }
        v50 = v55 + 1;
LABEL_83:
        if (v50 != v52 && (unint64_t)(v50 - v52) >= 2)
        {
          v61 = v55 + 1;
          do
          {
            v62 = *((_QWORD *)v74 + v52);
            v63 = *(_QWORD *)(v62 + 48);
            if (v63)
            {
              v64 = *(unsigned int *)(v62 + 32);
              if (v64 >= *(unsigned int *)(v62 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v64 = *(unsigned int *)(v62 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v62 + 24) + 8 * v64) = v63;
              ++*(_DWORD *)(v62 + 32);
              *(_QWORD *)(v62 + 48) = 0;
            }
            v51 |= v63 != 0;
            ++v52;
          }
          while (v61 != v52);
        }
      }
      while (v50 != v49);
    }
    else
    {
      v51 = 0;
    }
    if (v74 != v76)
      free(v74);
  }
  while ((v51 & 1) != 0);
  if (v70 != v69)
    free(v70);
}

void sub_22F126E14(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_22F40DD04(a1);
      v5 = *(_QWORD *)a1;
      v2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_22F40DD04(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_22F126E98(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  int32x2_t *i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t *v18;
  int32x2_t *j;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int32x2_t v29;
  uint64_t *v30;
  int32x2_t v31;
  uint64_t v32;
  int32x2_t *v33;
  uint64_t v34;
  int32x2_t v35;
  uint64_t *v36;
  uint64_t *v37;
  int32x2_t *v38;
  _QWORD *v39;
  int32x2_t *v40;
  int32x2_t *v41;
  int32x2_t *v42;
  int32x2_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t k;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *m;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  char **v103;
  char **v104;
  llvm *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t n;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  llvm *v118;
  llvm *v119;
  uint64_t v120;
  llvm *v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  BOOL v130;
  llvm *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  llvm *v138;
  llvm::raw_ostream *v139;
  llvm::raw_ostream *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  unint64_t v144;
  uint64_t ii;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  llvm::raw_ostream *v153;
  const char *v154;
  size_t v155;
  void *v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  unint64_t v188;
  uint64_t jj;
  unint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  _BYTE *v195;
  const char *v196;
  _DWORD *v197;
  uint64_t v198;
  char *v199;
  int v200;
  unint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  llvm *v224;
  llvm *v225;
  unint64_t v226;
  _BYTE *v227;
  _QWORD *v228;
  __n128 v229;
  char *v230;
  unint64_t v231;
  char *v232;
  unint64_t v233;
  void *v234;
  BOOL v235;
  uint64_t v236;
  llvm::raw_ostream *v237;
  const char *v238;
  llvm::raw_ostream *v239;
  uint64_t v240;
  const char *v241;
  size_t v242;
  void *v243;
  llvm::raw_ostream *v244;
  size_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  _BYTE *v250;
  _BYTE *v251;
  _QWORD *v252;
  _BYTE *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t *v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t *v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t v269;
  llvm *v270;
  uint64_t v271;
  llvm *v272;
  llvm *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  llvm *v281;
  uint64_t v282;
  unint64_t v283;
  llvm *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v300;
  llvm::raw_ostream *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v306;
  char v307;
  unint64_t v308;
  size_t v309;
  _BYTE *v310;
  _BYTE *v311;
  uint64_t **v312;
  uint64_t **v313;
  uint64_t **v314;
  BOOL v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v320;
  _BYTE *v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  int v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  llvm::raw_ostream *v332;
  const char *v333;
  size_t v334;
  void *v335;
  uint64_t v336;
  size_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v344;
  void *v345;
  llvm::raw_ostream *v346;
  _WORD *v347;
  _OWORD *v348;
  llvm::raw_ostream *v349;
  _DWORD *v350;
  uint64_t v351;
  llvm::raw_ostream *v352;
  const char *v353;
  llvm::raw_ostream *v354;
  _BYTE *v355;
  char *v356;
  char **v357;
  _BYTE *v358;
  char *v359;
  int64x2_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t *v367;
  unint64_t v368;
  uint64_t v369;
  int32x2_t *v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t v373;
  llvm *v374[2];
  unsigned int v375;
  unint64_t v376;
  int32x2_t *v377;
  int32x2_t *v378;
  uint64_t v379;
  uint64_t v380[3];
  uint64_t v381[3];
  __int128 v382;
  uint64_t v383;
  __int128 v384;
  uint64_t v385;
  char **v386;
  char ***v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  llvm *v391;
  unsigned int v392;
  llvm *v393;
  unsigned int v394;
  void *v395;
  uint64_t v396;
  _QWORD v397[64];
  llvm *v398;
  uint64_t v399;
  unsigned int v400;
  char v401;
  llvm *v402;
  uint64_t v403;
  unsigned int v404;
  llvm *v405;
  uint64_t v406;
  unsigned int v407;
  llvm *v408;
  uint64_t v409;
  unsigned int v410;
  _BYTE __p[24];
  __int16 v412;
  _BYTE __str[56];
  int64x2_t v414;
  void *v415;
  uint64_t v416;
  _QWORD v417[11];

  v417[8] = *MEMORY[0x24BDAC8D0];
  v376 = a2;
  v4 = a1 + 72;
  result = sub_22F24C318(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 88), a2, &v386);
  if ((result & 1) != 0)
    return result;
  v361 = v4;
  v374[0] = 0;
  v374[1] = 0;
  v375 = 0;
  v6 = (_QWORD *)operator new();
  *v6 = v6 + 2;
  v6[1] = 0x200000000;
  sub_22F1267CC((uint64_t *)a1, 0, a2, (uint64_t)v6);
  v364 = (uint64_t *)a1;
  v7 = *(_QWORD *)(a1 + 40);
  v368 = a2;
  v365 = sub_22F0C975C(v7, a2);
  memset(__str, 0, 20);
  memset(&__str[24], 0, 24);
  v377 = (int32x2_t *)&v377;
  v378 = (int32x2_t *)&v377;
  v379 = 0;
  v362 = v6;
  v8 = *((unsigned int *)v6 + 2);
  if (!(_DWORD)v8)
    goto LABEL_172;
  v9 = (uint64_t *)*v6;
  v10 = *v6 + 8 * v8;
  v363 = v10;
  do
  {
    v367 = v9;
    sub_22F131F68(v7, v365, v368, 0, *(_QWORD *)(*v9 + 8), *(_QWORD *)(*v9 + 104), (int32x2_t *)__str, (int32x2_t *)&v377);
    sub_22F40D288((uint64_t)__str);
    *(_QWORD *)&__str[32] = *(_QWORD *)&__str[24];
    v386 = (char **)&v386;
    v387 = &v386;
    v388 = 0;
    v11 = v378;
    while (2)
    {
      if (v11 == (int32x2_t *)&v377)
        goto LABEL_48;
      for (i = v378; ; i = (int32x2_t *)i[1])
      {
        if (i == (int32x2_t *)&v377)
          goto LABEL_38;
        if (i != v11)
          break;
LABEL_17:
        ;
      }
      v13 = (uint64_t *)v11[5];
      v14 = (uint64_t *)v11[6];
      if (v13 != v14)
      {
        v15 = (uint64_t)i[2];
        LODWORD(v16) = i[4].i32[0];
        do
        {
          *(_QWORD *)__p = 0;
          if (sub_22F40D010(v15, v16, *v13, v13[1], __p))
          {
            v17 = *(_QWORD *)__p;
            v15 = (uint64_t)i[2];
            v16 = i[4].u32[0];
          }
          else
          {
            v15 = (uint64_t)i[2];
            v16 = i[4].u32[0];
            v17 = v15 + 16 * v16;
          }
          if (v17 == v15 + 16 * v16)
            goto LABEL_17;
          v13 += 2;
        }
        while (v13 != v14);
      }
      v18 = (int32x2_t *)v11[1];
LABEL_19:
      if (v18 != (int32x2_t *)&v377)
      {
        for (j = v378; j != (int32x2_t *)&v377; j = (int32x2_t *)j[1])
        {
          if (j != v18)
          {
            v20 = (uint64_t *)v18[5];
            v21 = (uint64_t *)v18[6];
            if (v20 == v21)
            {
LABEL_32:
              v18 = (int32x2_t *)v18[1];
              goto LABEL_19;
            }
            v22 = (uint64_t)j[2];
            LODWORD(v23) = j[4].i32[0];
            while (1)
            {
              *(_QWORD *)__p = 0;
              if (sub_22F40D010(v22, v23, *v20, v20[1], __p))
              {
                v24 = *(_QWORD *)__p;
                v22 = (uint64_t)j[2];
                v23 = j[4].u32[0];
              }
              else
              {
                v22 = (uint64_t)j[2];
                v23 = j[4].u32[0];
                v24 = v22 + 16 * v23;
              }
              if (v24 == v22 + 16 * v23)
                break;
              v20 += 2;
              if (v20 == v21)
                goto LABEL_32;
            }
          }
        }
        if (v11 == v18)
        {
LABEL_38:
          v18 = v11;
        }
        else
        {
          v25 = (uint64_t *)*v18;
          if (v11 == (int32x2_t *)*v18)
          {
            v26 = 0;
          }
          else
          {
            v26 = 0;
            v27 = (uint64_t *)v11;
            do
            {
              ++v26;
              v27 = (uint64_t *)v27[1];
            }
            while (v27 != v25);
          }
          v28 = v26 + 1;
          v379 -= v28;
          v388 += v28;
          v29 = *v11;
          *(_QWORD *)(*(_QWORD *)&v29 + 8) = v25[1];
          *(int32x2_t *)v25[1] = v29;
          v30 = (uint64_t *)v386;
          v386[1] = (char *)v11;
          *v11 = (int32x2_t)v30;
          v386 = (char **)v25;
          v25[1] = (uint64_t)&v386;
        }
        v11 = (int32x2_t *)v18[1];
        continue;
      }
      break;
    }
    if (v11 != (int32x2_t *)&v377)
    {
      v31 = (int32x2_t)v377;
      if (v11 == v377)
      {
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v33 = v11;
        do
        {
          ++v32;
          v33 = (int32x2_t *)v33[1];
        }
        while (v33 != v377);
      }
      v34 = v32 + 1;
      v379 -= v34;
      v388 += v34;
      v35 = *v11;
      *(int32x2_t *)(*(_QWORD *)&v35 + 8) = v377[1];
      **(int32x2_t **)(*(_QWORD *)&v31 + 8) = v35;
      v36 = (uint64_t *)v386;
      v386[1] = (char *)v11;
      *v11 = (int32x2_t)v36;
      v386 = (char **)v31;
      *(_QWORD *)(*(_QWORD *)&v31 + 8) = &v386;
    }
LABEL_48:
    sub_22F40D2DC((uint64_t *)&v386);
    v37 = v367;
    v369 = *v367;
    *(_DWORD *)(*v367 + 88) = 0;
    if (!v379)
      goto LABEL_171;
    if (v379 == 1)
    {
      v38 = v378 + 2;
      goto LABEL_166;
    }
    v39 = 0;
    v40 = 0;
    *((_QWORD *)&v384 + 1) = 0;
    v385 = 0;
    *(_QWORD *)&v384 = (char *)&v384 + 8;
    v41 = v378;
    v42 = (int32x2_t *)&v379;
    if (v378 == (int32x2_t *)&v377)
      goto LABEL_162;
    v43 = 0;
    while (2)
    {
      v370 = v43;
      *((_QWORD *)&v382 + 1) = 0;
      v383 = 0;
      *(_QWORD *)&v382 = (char *)&v382 + 8;
      v44 = **(_QWORD **)&v41[5];
      v372 = sub_22F0C975C(v7, v44);
      v373 = v44;
      v46 = (uint64_t *)v41[5];
      v45 = (uint64_t *)v41[6];
      for (k = -1; v46 != v45; v46 += 2)
      {
        v50 = *v46;
        if (*v46 == v44)
        {
          k = 0;
        }
        else
        {
          v51 = sub_22F0C975C(v7, v44);
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v44 + 104) + 96), *(_QWORD *)(v44 + 104));
          v52 = *(_QWORD *)(v44 + 128);
          v53 = *(_QWORD *)(v52 + 24);
          if ((v53 & 1) != 0)
            v53 = sub_22EFCF510(v52);
          v54 = sub_22F24CD30(v44);
          if (v53 != v54)
          {
            v55 = v54;
            while (1)
            {
              v56 = *(_QWORD *)(**(_QWORD **)(v53 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v56 + 8) & 0xF) != 0)
                v56 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v53 + 16));
              v57 = sub_22F10C2A4(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0));
              if (v57)
                v58 = (*(_DWORD *)(v57 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v57;
              else
                v58 = 0;
              if (v58 == v50)
                break;
              v53 += 24;
              if (v53 == v55)
              {
                v53 = v55;
                break;
              }
            }
          }
          if ((*(_BYTE *)(v53 + 12) & 1) != 0)
            k = sub_22F2500F4(v372, v50);
          else
            k += sub_22E46A3EC(v51, v50);
          v44 = v50;
        }
      }
      sub_22F12A690((uint64_t)&v386, v373, 0, v373);
      v48 = sub_22E488FF8(*(_QWORD *)(v369 + 8));
      if (v48 != v49)
      {
        v59 = v48;
        v60 = v49;
        while (1)
        {
          v61 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v59 + 32))(v59);
          if (((*(_BYTE *)(v61 + 82) & 0xC) != 0 || sub_22EFD7260(v61))
            && (*(_QWORD *)(v59 + 80) & 0xC0000000) != 0x80000000)
          {
            v62 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v59 + 32))(v59);
            *(_QWORD *)__p = 0;
            v63 = 0;
            if (sub_22F12A59C((uint64_t)v391, v392, v62, k, __p))
              v63 = *(_QWORD *)(*(_QWORD *)__p + 16);
            sub_22F12CD80(__p, v7, v63, *(_QWORD *)(v59 + 48));
            if (*(_OWORD *)&__p[8] != 0)
              break;
          }
          do
LABEL_112:
            v59 = *(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v59 && (*(_DWORD *)(v59 + 28) & 0x7Eu) - 54 > 3);
          if (v59 == v60)
            goto LABEL_55;
        }
        v64 = *(_WORD *)(v63 + 80) & 0x7F;
        v65 = -40;
        if (v64 > 0x46)
        {
          if (v64 == 83)
            goto LABEL_102;
          if (v64 == 71)
          {
            v65 = -56;
            goto LABEL_102;
          }
          if (v64 != 81)
          {
LABEL_97:
            v66 = v64 - 52;
            v67 = v64 - 33 >= 5;
            v68 = -48;
            if (!v67)
              v68 = -64;
            if (v66 >= 6)
              v65 = v68;
            else
              v65 = -72;
          }
        }
        else
        {
          if (v64 > 0x18)
            goto LABEL_96;
          if (v64 == 16)
          {
LABEL_89:
            v65 = -48;
            goto LABEL_102;
          }
          if (((1 << v64) & 0x1066) == 0)
          {
            if (v64 == 24)
              goto LABEL_89;
LABEL_96:
            if (v64 == 70)
            {
              v65 = -64;
              goto LABEL_102;
            }
            goto LABEL_97;
          }
        }
LABEL_102:
        v69 = *(_QWORD *)(v63 + 72 + v65 + 16);
        v70 = (_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF8);
        if ((v69 & 4) != 0)
          v70 = (_QWORD *)*v70;
        if (v70)
          v71 = v70 - 8;
        else
          v71 = 0;
        for (m = (_QWORD *)v41[5]; m != *(_QWORD **)&v41[6]; m += 2)
        {
          if ((_QWORD *)*m == v71)
          {
            sub_22F132550((uint64_t *)&v382, v63, v63);
            goto LABEL_112;
          }
        }
        goto LABEL_112;
      }
LABEL_55:
      sub_22F132498(v381, &v382, (uint64_t)&v384);
      if (v381[2])
      {
        sub_22F132498(v380, &v384, (uint64_t)&v382);
        if (v380[2])
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v7 + 1992) + 8);
          v77 = *(_QWORD *)(v381[0] + 32);
          v78 = *(_QWORD *)(v380[0] + 32);
          *(_DWORD *)(v76 + 312) = *(_DWORD *)(v368 + 24);
          *(_DWORD *)(v76 + 316) = 2166;
          if (*(char *)(v76 + 311) < 0)
          {
            **(_BYTE **)(v76 + 288) = 0;
            *(_QWORD *)(v76 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v76 + 288) = 0;
            *(_BYTE *)(v76 + 311) = 0;
          }
          v79 = (unsigned __int8 *)(v76 + 320);
          *(_QWORD *)__p = v76 + 320;
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = v76;
          v412 = 1;
          *(_BYTE *)(v76 + 320) = 0;
          *(_DWORD *)(v76 + 664) = 0;
          v80 = *(unsigned int *)(v76 + 776);
          if ((_DWORD)v80)
          {
            v82 = *(_QWORD *)(v76 + 768);
            v83 = 56 * v80;
            do
            {
              if (*(char *)(v82 + v83 - 9) < 0)
                operator delete(*(void **)(v82 + v83 - 32));
              v83 -= 56;
            }
            while (v83);
            v81 = *(unsigned __int8 **)__p;
            *(_DWORD *)(v76 + 776) = 0;
            if (!v81)
            {
              v81 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__p[8]);
              *(_QWORD *)__p = v81;
            }
          }
          else
          {
            *(_DWORD *)(v76 + 776) = 0;
            v81 = (unsigned __int8 *)(v76 + 320);
          }
          v81[*v81 + 1] = 11;
          v84 = *(_QWORD *)__p;
          v85 = **(_BYTE **)__p;
          **(_BYTE **)__p = v85 + 1;
          *(_QWORD *)(v84 + 8 * v85 + 16) = v368;
          sub_22E3BB0B8((uint64_t)__p);
          *(_DWORD *)(v76 + 312) = *(_DWORD *)(v77 + 24);
          *(_DWORD *)(v76 + 316) = 2291;
          if (*(char *)(v76 + 311) < 0)
          {
            **(_BYTE **)(v76 + 288) = 0;
            *(_QWORD *)(v76 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v76 + 288) = 0;
            *(_BYTE *)(v76 + 311) = 0;
          }
          *(_QWORD *)__p = v76 + 320;
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = v76;
          v412 = 1;
          *(_BYTE *)(v76 + 320) = 0;
          *(_DWORD *)(v76 + 664) = 0;
          v86 = *(unsigned int *)(v76 + 776);
          if ((_DWORD)v86)
          {
            v88 = *(_QWORD *)(v76 + 768);
            v89 = 56 * v86;
            do
            {
              if (*(char *)(v88 + v89 - 9) < 0)
                operator delete(*(void **)(v88 + v89 - 32));
              v89 -= 56;
            }
            while (v89);
            v87 = *(unsigned __int8 **)__p;
            *(_DWORD *)(v76 + 776) = 0;
            if (!v87)
            {
              v87 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__p[8]);
              *(_QWORD *)__p = v87;
            }
          }
          else
          {
            *(_DWORD *)(v76 + 776) = 0;
            v87 = (unsigned __int8 *)(v76 + 320);
          }
          v87[*v87 + 1] = 11;
          v90 = *(_QWORD *)__p;
          v91 = **(_BYTE **)__p;
          **(_BYTE **)__p = v91 + 1;
          *(_QWORD *)(v90 + 8 * v91 + 16) = v77;
          sub_22E3BB0B8((uint64_t)__p);
          *(_DWORD *)(v76 + 312) = *(_DWORD *)(v78 + 24);
          *(_DWORD *)(v76 + 316) = 2291;
          if (*(char *)(v76 + 311) < 0)
          {
            **(_BYTE **)(v76 + 288) = 0;
            *(_QWORD *)(v76 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v76 + 288) = 0;
            *(_BYTE *)(v76 + 311) = 0;
          }
          v43 = v370;
          *(_QWORD *)__p = v76 + 320;
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = v76;
          v412 = 1;
          *(_BYTE *)(v76 + 320) = 0;
          *(_DWORD *)(v76 + 664) = 0;
          v92 = *(unsigned int *)(v76 + 776);
          if ((_DWORD)v92)
          {
            v93 = *(_QWORD *)(v76 + 768);
            v94 = 56 * v92;
            do
            {
              if (*(char *)(v93 + v94 - 9) < 0)
                operator delete(*(void **)(v93 + v94 - 32));
              v94 -= 56;
            }
            while (v94);
            v79 = *(unsigned __int8 **)__p;
            *(_DWORD *)(v76 + 776) = 0;
            if (!v79)
            {
              v79 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__p[8]);
              *(_QWORD *)__p = v79;
            }
          }
          else
          {
            *(_DWORD *)(v76 + 776) = 0;
          }
          v79[*v79 + 1] = 11;
          v95 = *(_QWORD *)__p;
          v96 = **(_BYTE **)__p;
          **(_BYTE **)__p = v96 + 1;
          *(_QWORD *)(v95 + 8 * v96 + 16) = v78;
          sub_22E3BB0B8((uint64_t)__p);
        }
        else
        {
          v73 = v382;
          v74 = *((_QWORD *)&v384 + 1);
          v382 = v384;
          v384 = v73;
          v75 = v383;
          v383 = v385;
          v385 = v75;
          if (v383)
            *(_QWORD *)(v74 + 16) = (char *)&v382 + 8;
          else
            *(_QWORD *)&v382 = (char *)&v382 + 8;
          v43 = v41 + 2;
          if (v75)
            *(_QWORD *)(*((_QWORD *)&v73 + 1) + 16) = (char *)&v384 + 8;
          else
            *(_QWORD *)&v384 = (char *)&v384 + 8;
        }
        sub_22F258024((_QWORD *)v380[1]);
      }
      else
      {
        v43 = v370;
      }
      sub_22F258024((_QWORD *)v381[1]);
      llvm::deallocate_buffer(v391, (void *)(40 * v392));
      sub_22F258024(*((_QWORD **)&v382 + 1));
      v41 = (int32x2_t *)v41[1];
      if (v41 != (int32x2_t *)&v377)
        continue;
      break;
    }
    v42 = v378 + 2;
    v39 = (_QWORD *)*((_QWORD *)&v384 + 1);
    v40 = v43;
    v10 = v363;
LABEL_162:
    sub_22F258024(v39);
    if (v40)
      v38 = v40;
    else
      v38 = v42;
    v37 = v367;
LABEL_166:
    v97 = (uint64_t *)v38[3];
    v98 = (uint64_t *)v38[4];
    while (v97 != v98)
    {
      v99 = *v37;
      v100 = *v97;
      v101 = *(unsigned int *)(*v37 + 88);
      if (v101 >= *(unsigned int *)(*v37 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v367;
        v101 = *(unsigned int *)(v99 + 88);
      }
      *(_QWORD *)(*(_QWORD *)(v99 + 80) + 8 * v101) = v100;
      ++*(_DWORD *)(v99 + 88);
      v97 += 2;
    }
LABEL_171:
    sub_22F40D2DC((uint64_t *)&v377);
    v9 = v367 + 1;
  }
  while (v367 + 1 != (uint64_t *)v10);
LABEL_172:
  sub_22F40D2DC((uint64_t *)&v377);
  sub_22F244D40((uint64_t)__str);
  v102 = sub_22F40DF2C(v361, (uint64_t *)&v376);
  v103 = (char **)v102[1];
  v102[1] = v362;
  if (v103)
  {
    v104 = sub_22F40DEA8(v103);
    MEMORY[0x2348A0E9C](v104, 0x1080C40ABB4582ELL);
  }
  v382 = 0uLL;
  LODWORD(v383) = 0;
  v105 = (llvm *)sub_22F40DF2C(v361, (uint64_t *)&v376);
  v106 = *((_QWORD *)v105 + 1);
  v107 = *(unsigned int *)(v106 + 8);
  if (!(_DWORD)v107)
    goto LABEL_601;
  v108 = *(_QWORD **)v106;
  v366 = &v108[v107];
  v360 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  while (2)
  {
    v109 = v376;
    v371 = v108;
    v110 = *v108;
    v386 = (char **)v364;
    if (!v376 || (v111 = v376, (*(_DWORD *)(v376 + 28) & 0x7F) != 0x53))
    {
      for (n = *(_QWORD *)(v376 + 16); ; n = *(_QWORD *)(v113 + v115 + 16))
      {
        v113 = n & 0xFFFFFFFFFFFFFFF8;
        if ((n & 4) != 0)
          v113 = *(_QWORD *)v113;
        v114 = *(_WORD *)(v113 + 8) & 0x7F;
        if (v114 == 83)
        {
          v111 = v113 - 40;
          break;
        }
        v115 = -40;
        if ((*(_WORD *)(v113 + 8) & 0x7Fu) > 0x46)
        {
          if (v114 == 71)
          {
            v115 = -56;
            continue;
          }
          if (v114 != 81)
            goto LABEL_192;
        }
        else
        {
          if (v114 > 0x18)
            goto LABEL_191;
          if (v114 == 16)
            goto LABEL_185;
          if (((1 << v114) & 0x1066) == 0)
          {
            if (v114 == 24)
            {
LABEL_185:
              v115 = -48;
              continue;
            }
LABEL_191:
            if (v114 == 70)
            {
              v115 = -64;
              continue;
            }
LABEL_192:
            v116 = v114 - 52;
            v67 = v114 - 33 >= 5;
            v117 = -64;
            if (v67)
              v117 = -48;
            if (v116 >= 6)
              v115 = v117;
            else
              v115 = -72;
            continue;
          }
        }
      }
    }
    v387 = *(char ****)(v111 + 88);
    v388 = v376;
    v389 = sub_22F0C975C((uint64_t)v387, v376);
    v390 = v110;
    sub_22F12A690((uint64_t)&v391, v109, 0, v109);
    v395 = v397;
    v396 = 0x4000000000;
    v401 = 0;
    v398 = 0;
    v399 = 0;
    v400 = 0;
    v402 = 0;
    v403 = 0;
    v404 = 0;
    v405 = 0;
    v406 = 0;
    v407 = 0;
    v408 = 0;
    v409 = 0;
    v410 = 0;
    if (((unint64_t)v387[250][1] & 0x10000000000000) != 0)
    {
      v401 = 1;
      v397[0] = v388 | 3;
      LODWORD(v396) = 1;
    }
    *(_QWORD *)__str = 1;
    *(int64x2_t *)&__str[8] = v360;
    *(int64x2_t *)&__str[24] = v360;
    *(int64x2_t *)&__str[40] = v360;
    v414 = v360;
    v415 = v417;
    v416 = 0x800000000;
    sub_22F132604((uint64_t)&v386, v388, 0, 0, 0, (uint64_t)__str);
    v118 = (llvm *)((char *)v402 + 32 * v404);
    if ((_DWORD)v403)
    {
      if (v404)
      {
        v120 = 32 * v404;
        v119 = v402;
        while ((*(_QWORD *)v119 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v119 = (llvm *)((char *)v119 + 32);
          v120 -= 32;
          if (!v120)
            goto LABEL_210;
        }
      }
      else
      {
        v119 = v402;
      }
    }
    else
    {
LABEL_210:
      v119 = (llvm *)((char *)v402 + 32 * v404);
    }
    v121 = (llvm *)((char *)v402 + 32 * v404);
LABEL_212:
    while (2)
    {
      if (v119 != v121)
      {
        v122 = *(_QWORD *)v119;
        v123 = *(_WORD *)(*(_QWORD *)v119 + 80) & 0x7F;
        v124 = -40;
        if (v123 > 0x46)
        {
          if (v123 != 83)
          {
            if (v123 == 71)
            {
              v124 = -56;
            }
            else if (v123 != 81)
            {
              goto LABEL_224;
            }
          }
        }
        else
        {
          if (v123 > 0x18)
            goto LABEL_223;
          if (v123 == 16)
            goto LABEL_216;
          if (((1 << v123) & 0x1066) == 0)
          {
            if (v123 == 24)
            {
LABEL_216:
              v124 = -48;
            }
            else
            {
LABEL_223:
              if (v123 == 70)
              {
                v124 = -64;
              }
              else
              {
LABEL_224:
                v125 = v123 - 52;
                v67 = v123 - 33 >= 5;
                v126 = -64;
                if (v67)
                  v126 = -48;
                if (v125 >= 6)
                  v124 = v126;
                else
                  v124 = -72;
              }
            }
          }
        }
        v127 = *(_QWORD *)(v122 + 72 + v124 + 16);
        v128 = (_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF8);
        if ((v127 & 4) != 0)
          v128 = (_QWORD *)*v128;
        if (v128)
          v129 = v128 - 8;
        else
          v129 = 0;
        v130 = v129 == (_QWORD *)v388 && *((_BYTE *)v119 + 24) == 0;
        if (v130)
        {
          if (*(_DWORD *)(v390 + 64))
            v132 = **(_QWORD **)(v390 + 56);
          else
            v132 = 0;
          v133 = *(_QWORD *)(v390 + 16);
          v134 = *((_QWORD *)v119 + 1);
          v135 = *((_QWORD *)v119 + 2);
          if ((*(_DWORD *)(v122 + 28) & 0x7F) == 0x39)
          {
            *(_QWORD *)__p = v122 & 0xFFFFFFFFFFFFFFF8;
            *(_DWORD *)&__p[8] = 0;
          }
          else
          {
            *(_QWORD *)__p = 0;
            *(_DWORD *)&__p[8] = 0;
            if (sub_22E462B18(v122))
              v136 = v122 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v122) + 96) & 0x80) == 0);
            else
              v136 = __p[0] & 7 | v122;
            *(_QWORD *)__p = v136;
          }
          v137 = (_QWORD *)sub_22F40D34C((uint64_t *)&v398, (uint64_t)__p);
          v137[2] = v134;
          v137[3] = v132;
          v137[4] = v133;
          v137[5] = v135;
        }
        v131 = (llvm *)((char *)v119 + 32);
        v119 = v118;
        if (v131 != v118)
        {
          v119 = v131;
          while ((*(_QWORD *)v119 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v119 = (llvm *)((char *)v119 + 32);
            if (v119 == v118)
            {
              v119 = v118;
              goto LABEL_212;
            }
          }
        }
        continue;
      }
      break;
    }
    v138 = (llvm *)v415;
    if (v415 != v417)
      free(v415);
    if ((__str[0] & 1) == 0)
      v138 = (llvm *)llvm::deallocate_buffer(*(llvm **)&__str[8], (void *)(8 * *(unsigned int *)&__str[16]));
    if ((*(unint64_t *)((char *)v387[250] + 140) & 0x10000000000) == 0)
      goto LABEL_531;
    v139 = (llvm::raw_ostream *)llvm::outs(v138);
    v140 = v139;
    v141 = *((_QWORD *)v139 + 4);
    if ((unint64_t)(*((_QWORD *)v139 + 3) - v141) > 0xB)
    {
      *(_DWORD *)(v141 + 8) = 544370534;
      *(_QWORD *)v141 = *(_QWORD *)"VFTable for ";
      *((_QWORD *)v139 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v139, "VFTable for ");
    }
    v142 = *(unsigned int *)(v390 + 88);
    if (!(_DWORD)v142)
      goto LABEL_264;
    v161 = *(_QWORD *)(v390 + 80);
    v162 = v161 + 8 * v142;
    while (2)
    {
      v164 = *(_QWORD *)(v162 - 8);
      v162 -= 8;
      v163 = v164;
      v165 = (_BYTE *)*((_QWORD *)v140 + 4);
      if (*((_BYTE **)v140 + 3) == v165)
      {
        llvm::raw_ostream::write(v140, "'");
        if (v163)
        {
LABEL_310:
          v166 = v163;
          if ((*(_DWORD *)(v163 + 28) & 0x7F) == 0x53)
            goto LABEL_335;
        }
      }
      else
      {
        *v165 = 39;
        ++*((_QWORD *)v140 + 4);
        if (v163)
          goto LABEL_310;
      }
      v167 = *(_QWORD *)(v163 + 16);
      while (2)
      {
        v168 = v167 & 0xFFFFFFFFFFFFFFF8;
        if ((v167 & 4) != 0)
          v168 = *(_QWORD *)v168;
        v169 = *(_WORD *)(v168 + 8) & 0x7F;
        if (v169 != 83)
        {
          v170 = -40;
          if ((*(_WORD *)(v168 + 8) & 0x7Fu) > 0x46)
          {
            if (v169 == 71)
            {
              v170 = -56;
            }
            else if (v169 != 81)
            {
              goto LABEL_325;
            }
          }
          else
          {
            if (v169 > 0x18)
              goto LABEL_324;
            if (v169 == 16)
              goto LABEL_318;
            if (((1 << v169) & 0x1066) == 0)
            {
              if (v169 == 24)
              {
LABEL_318:
                v170 = -48;
              }
              else
              {
LABEL_324:
                if (v169 == 70)
                {
                  v170 = -64;
                }
                else
                {
LABEL_325:
                  v171 = v169 - 52;
                  v67 = v169 - 33 >= 5;
                  v172 = -64;
                  if (v67)
                    v172 = -48;
                  if (v171 >= 6)
                    v170 = v172;
                  else
                    v170 = -72;
                }
              }
            }
          }
          v167 = *(_QWORD *)(v168 + v170 + 16);
          continue;
        }
        break;
      }
      v166 = v168 - 40;
LABEL_335:
      sub_22EFBA008((_QWORD *)v163, v140, *(_QWORD *)(v166 + 88) + 15104);
      v173 = *((_QWORD *)v140 + 4);
      if ((unint64_t)(*((_QWORD *)v140 + 3) - v173) > 4)
      {
        *(_BYTE *)(v173 + 4) = 32;
        *(_DWORD *)v173 = 1852383271;
        *((_QWORD *)v140 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v140, "' in ");
      }
      if (v162 != v161)
        continue;
      break;
    }
LABEL_264:
    v143 = (_BYTE *)*((_QWORD *)v140 + 4);
    if (*((_BYTE **)v140 + 3) == v143)
    {
      llvm::raw_ostream::write(v140, "'");
    }
    else
    {
      *v143 = 39;
      ++*((_QWORD *)v140 + 4);
    }
    if (!v388 || (v144 = v388, (*(_DWORD *)(v388 + 28) & 0x7F) != 0x53))
    {
      for (ii = *(_QWORD *)(v388 + 16); ; ii = *(_QWORD *)(v146 + v148 + 16))
      {
        v146 = ii & 0xFFFFFFFFFFFFFFF8;
        if ((ii & 4) != 0)
          v146 = *(_QWORD *)v146;
        v147 = *(_WORD *)(v146 + 8) & 0x7F;
        if (v147 == 83)
        {
          v144 = v146 - 40;
          break;
        }
        v148 = -40;
        if ((*(_WORD *)(v146 + 8) & 0x7Fu) > 0x46)
        {
          if (v147 == 71)
          {
            v148 = -56;
            continue;
          }
          if (v147 != 81)
            goto LABEL_282;
        }
        else
        {
          if (v147 > 0x18)
            goto LABEL_281;
          if (v147 == 16)
            goto LABEL_275;
          if (((1 << v147) & 0x1066) == 0)
          {
            if (v147 == 24)
            {
LABEL_275:
              v148 = -48;
              continue;
            }
LABEL_281:
            if (v147 == 70)
            {
              v148 = -64;
              continue;
            }
LABEL_282:
            v149 = v147 - 52;
            v67 = v147 - 33 >= 5;
            v150 = -64;
            if (v67)
              v150 = -48;
            if (v149 >= 6)
              v148 = v150;
            else
              v148 = -72;
            continue;
          }
        }
      }
    }
    sub_22EFBA008((_QWORD *)v388, v140, *(_QWORD *)(v144 + 88) + 15104);
    v151 = *((_QWORD *)v140 + 4);
    if ((unint64_t)(*((_QWORD *)v140 + 3) - v151) > 2)
    {
      *(_BYTE *)(v151 + 2) = 40;
      *(_WORD *)v151 = 8231;
      *((_QWORD *)v140 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v140, "' (");
    }
    v152 = llvm::raw_ostream::operator<<();
    v153 = (llvm::raw_ostream *)v152;
    if ((_DWORD)v396 == 1)
      v154 = " entry";
    else
      v154 = " entries";
    if ((_DWORD)v396 == 1)
      v155 = 6;
    else
      v155 = 8;
    v157 = *(_QWORD *)(v152 + 24);
    v156 = *(void **)(v152 + 32);
    if (v155 <= v157 - (uint64_t)v156)
    {
      memcpy(v156, v154, v155);
      v158 = *((_QWORD *)v153 + 4) + v155;
      *((_QWORD *)v153 + 4) = v158;
    }
    else
    {
      v153 = (llvm::raw_ostream *)llvm::raw_ostream::write(v153, v154);
      v158 = *((_QWORD *)v153 + 4);
    }
    if (*((_QWORD *)v153 + 3) - v158 > 2)
    {
      *(_BYTE *)(v158 + 2) = 10;
      *(_WORD *)v158 = 11817;
      *((_QWORD *)v153 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v153, ").\n");
    }
    v159 = v396;
    if (!(_DWORD)v396)
      goto LABEL_305;
    v174 = 0;
    while (2)
    {
      *(_QWORD *)__str = &unk_24FA65F98;
      *(_QWORD *)&__str[8] = "%4d | ";
      *(_QWORD *)&__str[16] = v174;
      llvm::raw_ostream::operator<<();
      v175 = v395;
      v176 = *((_QWORD *)v395 + v174);
      v177 = v176 & 7;
      if (v177 != 3)
      {
        if (v177 != 4)
        {
          if (v177 != 6)
          {
            v199 = v387[249][1];
            v200 = sub_22F41A810(*((_QWORD *)v199 + 4), 4, "Unexpected vftable component type %0 for component number %1", 0x3CuLL);
            *((_DWORD *)v199 + 78) = *(_DWORD *)(v388 + 24);
            *((_DWORD *)v199 + 79) = v200;
            if (v199[311] < 0)
            {
              **((_BYTE **)v199 + 36) = 0;
              *((_QWORD *)v199 + 37) = 0;
            }
            else
            {
              v199[288] = 0;
              v199[311] = 0;
            }
            v210 = (unsigned __int8 *)(v199 + 320);
            *(_OWORD *)__str = (unint64_t)(v199 + 320);
            *(_QWORD *)&__str[16] = v199;
            *(_WORD *)&__str[24] = 1;
            v199[320] = 0;
            *((_DWORD *)v199 + 166) = 0;
            v211 = *((unsigned int *)v199 + 194);
            if ((_DWORD)v211)
            {
              v212 = *((_QWORD *)v199 + 96);
              v213 = 56 * v211;
              do
              {
                if (*(char *)(v212 + v213 - 9) < 0)
                  operator delete(*(void **)(v212 + v213 - 32));
                v213 -= 56;
              }
              while (v213);
              v210 = *(unsigned __int8 **)__str;
              *((_DWORD *)v199 + 194) = 0;
              if (!v210)
              {
                v210 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__str[8]);
                *(_QWORD *)__str = v210;
              }
            }
            else
            {
              *((_DWORD *)v199 + 194) = 0;
            }
            v210[*v210 + 1] = 3;
            v214 = *(_QWORD *)__str;
            v215 = **(_BYTE **)__str;
            v216 = v215 + 1;
            **(_BYTE **)__str = v215 + 1;
            *(_QWORD *)(v214 + 8 * v215 + 16) = v174;
            v217 = v175[v174] & 7;
            *(_BYTE *)(v214 + v216 + 1) = 2;
            v218 = *(_QWORD *)__str;
            v219 = **(_BYTE **)__str;
            **(_BYTE **)__str = v219 + 1;
            *(_QWORD *)(v218 + 8 * v219 + 16) = v217;
            sub_22E3BB0B8((uint64_t)__str);
            goto LABEL_372;
          }
          v188 = v176 & 0xFFFFFFFFFFFFFFF8;
          if ((v176 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_DWORD *)(v188 + 28) & 0x7F) != 0x53)
          {
            for (jj = *(_QWORD *)(v188 + 16); ; jj = *(_QWORD *)(v190 + v192 + 16))
            {
              v190 = jj & 0xFFFFFFFFFFFFFFF8;
              if ((jj & 4) != 0)
                v190 = *(_QWORD *)v190;
              v191 = *(_WORD *)(v190 + 8) & 0x7F;
              if (v191 == 83)
              {
                v201 = v190 - 40;
                goto LABEL_418;
              }
              v192 = -40;
              if ((*(_WORD *)(v190 + 8) & 0x7Fu) > 0x46)
              {
                if (v191 == 71)
                {
                  v192 = -56;
                  continue;
                }
                if (v191 != 81)
                  goto LABEL_395;
              }
              else
              {
                if (v191 > 0x18)
                  goto LABEL_394;
                if (v191 == 16)
                  goto LABEL_388;
                if (((1 << v191) & 0x1066) == 0)
                {
                  if (v191 == 24)
                  {
LABEL_388:
                    v192 = -48;
                    continue;
                  }
LABEL_394:
                  if (v191 == 70)
                  {
                    v192 = -64;
                    continue;
                  }
LABEL_395:
                  v193 = v191 - 52;
                  v67 = v191 - 33 >= 5;
                  v194 = -64;
                  if (v67)
                    v194 = -48;
                  if (v193 >= 6)
                    v192 = v194;
                  else
                    v192 = -72;
                  continue;
                }
              }
            }
          }
          v201 = v176 & 0xFFFFFFFFFFFFFFF8;
LABEL_418:
          sub_22EFBA008((_QWORD *)v188, v140, *(_QWORD *)(v201 + 88) + 15104);
          v202 = *((_QWORD *)v140 + 4);
          if ((unint64_t)(*((_QWORD *)v140 + 3) - v202) > 0x13)
          {
            *(_DWORD *)(v202 + 16) = 1567059561;
            *(_OWORD *)v202 = *(_OWORD *)"() [scalar deleting]";
            *((_QWORD *)v140 + 4) += 20;
          }
          else
          {
            llvm::raw_ostream::write(v140, "() [scalar deleting]");
          }
          if ((*(_BYTE *)(v188 + 82) & 8) != 0)
          {
            v203 = (_DWORD *)*((_QWORD *)v140 + 4);
            if (*((_QWORD *)v140 + 3) - (_QWORD)v203 > 6uLL)
            {
              *(_DWORD *)((char *)v203 + 3) = 1566929525;
              *v203 = 1970297632;
              *((_QWORD *)v140 + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(v140, " [pure]");
            }
          }
          if (v407)
          {
            v207 = (v407 - 1) & (37 * (_DWORD)v174);
            v208 = *((_QWORD *)v405 + 8 * v207);
            if (v208 == v174)
            {
LABEL_432:
              v209 = (char *)v405 + 64 * v207;
              *(_OWORD *)__str = *(_OWORD *)(v209 + 8);
              *(_OWORD *)&__str[16] = *(_OWORD *)(v209 + 24);
              *(_OWORD *)&__str[32] = *(_OWORD *)(v209 + 40);
              *(_QWORD *)&__str[48] = *((_QWORD *)v209 + 7);
LABEL_433:
              if (!sub_22F40CE28((uint64_t)__str))
                sub_22F133A70(__str, v140, 0);
              goto LABEL_372;
            }
            v222 = 1;
            while (v208 != -1)
            {
              v223 = v207 + v222++;
              v207 = v223 & (v407 - 1);
              v208 = *((_QWORD *)v405 + 8 * (unint64_t)v207);
              if (v208 == v174)
                goto LABEL_432;
            }
          }
          memset(__str, 0, sizeof(__str));
          goto LABEL_433;
        }
        v195 = (_BYTE *)(v176 & 0xFFFFFFFFFFFFFFF8);
        sub_22EFF7250(7, v176 & 0xFFFFFFFFFFFFFFF8, __p);
        if (__p[23] >= 0)
          v196 = __p;
        else
          v196 = *(const char **)__p;
        llvm::raw_ostream::write(v140, v196);
        if ((v195[82] & 8) != 0)
        {
          v197 = (_DWORD *)*((_QWORD *)v140 + 4);
          if (*((_QWORD *)v140 + 3) - (_QWORD)v197 > 6uLL)
          {
            *(_DWORD *)((char *)v197 + 3) = 1566929525;
            *v197 = 1970297632;
            *((_QWORD *)v140 + 4) += 7;
          }
          else
          {
            llvm::raw_ostream::write(v140, " [pure]");
          }
        }
        if ((*(_BYTE *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v195 + 32))(v195) + 82) & 0x40) != 0)
        {
          v198 = *((_QWORD *)v140 + 4);
          if ((unint64_t)(*((_QWORD *)v140 + 3) - v198) > 9)
          {
            *(_WORD *)(v198 + 8) = 23908;
            *(_QWORD *)v198 = *(_QWORD *)" [deleted]";
            *((_QWORD *)v140 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v140, " [deleted]");
          }
        }
        if (v407)
        {
          v204 = (v407 - 1) & (37 * (_DWORD)v174);
          v205 = *((_QWORD *)v405 + 8 * v204);
          if (v205 == v174)
          {
LABEL_426:
            v206 = (char *)v405 + 64 * v204;
            *(_OWORD *)__str = *(_OWORD *)(v206 + 8);
            *(_OWORD *)&__str[16] = *(_OWORD *)(v206 + 24);
            *(_OWORD *)&__str[32] = *(_OWORD *)(v206 + 40);
            *(_QWORD *)&__str[48] = *((_QWORD *)v206 + 7);
            goto LABEL_427;
          }
          v220 = 1;
          while (v205 != -1)
          {
            v221 = v204 + v220++;
            v204 = v221 & (v407 - 1);
            v205 = *((_QWORD *)v405 + 8 * (unint64_t)v204);
            if (v205 == v174)
              goto LABEL_426;
          }
        }
        memset(__str, 0, sizeof(__str));
LABEL_427:
        if (!sub_22F40CE28((uint64_t)__str))
          sub_22F133A70(__str, v140, 0);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_372;
      }
      v178 = v176 & 0xFFFFFFFFFFFFFFF8;
      if ((v176 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v178 + 28) & 0x7F) == 0x53)
      {
        v185 = v176 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_370;
      }
      v179 = *(_QWORD *)(v178 + 16);
      while (2)
      {
        v180 = v179 & 0xFFFFFFFFFFFFFFF8;
        if ((v179 & 4) != 0)
          v180 = *(_QWORD *)v180;
        v181 = *(_WORD *)(v180 + 8) & 0x7F;
        if (v181 != 83)
        {
          v182 = -40;
          if ((*(_WORD *)(v180 + 8) & 0x7Fu) > 0x46)
          {
            if (v181 == 71)
            {
              v182 = -56;
            }
            else if (v181 != 81)
            {
              goto LABEL_360;
            }
          }
          else
          {
            if (v181 > 0x18)
              goto LABEL_359;
            if (v181 == 16)
              goto LABEL_353;
            if (((1 << v181) & 0x1066) == 0)
            {
              if (v181 == 24)
              {
LABEL_353:
                v182 = -48;
              }
              else
              {
LABEL_359:
                if (v181 == 70)
                {
                  v182 = -64;
                }
                else
                {
LABEL_360:
                  v183 = v181 - 52;
                  v67 = v181 - 33 >= 5;
                  v184 = -64;
                  if (v67)
                    v184 = -48;
                  if (v183 >= 6)
                    v182 = v184;
                  else
                    v182 = -72;
                }
              }
            }
          }
          v179 = *(_QWORD *)(v180 + v182 + 16);
          continue;
        }
        break;
      }
      v185 = v180 - 40;
LABEL_370:
      sub_22EFBA008((_QWORD *)v178, v140, *(_QWORD *)(v185 + 88) + 15104);
      v186 = *((_QWORD *)v140 + 4);
      if ((unint64_t)(*((_QWORD *)v140 + 3) - v186) > 4)
      {
        *(_BYTE *)(v186 + 4) = 73;
        *(_DWORD *)v186 = 1414812192;
        *((_QWORD *)v140 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v140, " RTTI");
      }
LABEL_372:
      v187 = (_BYTE *)*((_QWORD *)v140 + 4);
      if ((unint64_t)v187 >= *((_QWORD *)v140 + 3))
      {
        llvm::raw_ostream::write(v140);
      }
      else
      {
        *((_QWORD *)v140 + 4) = v187 + 1;
        *v187 = 10;
      }
      if (++v174 != v159)
        continue;
      break;
    }
LABEL_305:
    v160 = (_BYTE *)*((_QWORD *)v140 + 4);
    if ((unint64_t)v160 >= *((_QWORD *)v140 + 3))
    {
      llvm::raw_ostream::write(v140);
    }
    else
    {
      *((_QWORD *)v140 + 4) = v160 + 1;
      *v160 = 10;
    }
    if ((_DWORD)v409)
    {
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      if (v410)
      {
        v255 = 80 * v410;
        v224 = v408;
        while ((*(_QWORD *)v224 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v224 = (llvm *)((char *)v224 + 80);
          v255 -= 80;
          if (!v255)
            goto LABEL_528;
        }
      }
      else
      {
        v224 = v408;
      }
      v225 = (llvm *)((char *)v408 + 80 * v410);
      if (v224 != v225)
      {
        v226 = *(_QWORD *)v224;
LABEL_466:
        sub_22EFF7250(7, v226, &v384);
        if (SHIBYTE(v385) < 0)
        {
          sub_22E3BB2B4(__str, (void *)v384, *((unint64_t *)&v384 + 1));
        }
        else
        {
          *(_OWORD *)__str = v384;
          *(_QWORD *)&__str[16] = v385;
        }
        *(_QWORD *)&__str[24] = v226;
        sub_22F12F43C((uint64_t **)__p, (const void **)__str, (__int128 *)__str);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (SHIBYTE(v385) < 0)
          operator delete((void *)v384);
        while (1)
        {
          v224 = (llvm *)((char *)v224 + 80);
          if (v224 == v225)
            break;
          v226 = *(_QWORD *)v224;
          if ((*(_QWORD *)v224 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v224 != v225)
              goto LABEL_466;
            break;
          }
        }
        v227 = *(_BYTE **)__p;
        if (*(_BYTE **)__p != &__p[8])
        {
          while (2)
          {
            v381[0] = *((_QWORD *)v227 + 7);
            v228 = sub_22F40C5E4((uint64_t)&v408, v381);
            v230 = &__str[16];
            *(_QWORD *)__str = &__str[16];
            *(_QWORD *)&__str[8] = 0x100000000;
            if (!*((_DWORD *)v228 + 4))
            {
              v231 = 0;
              v232 = &__str[16];
              goto LABEL_484;
            }
            sub_22F40CEA4((uint64_t)__str, (uint64_t)(v228 + 1));
            v230 = *(char **)__str;
            v231 = *(unsigned int *)&__str[8];
            v232 = (char *)(*(_QWORD *)__str + 56 * *(unsigned int *)&__str[8]);
            if (*(_DWORD *)&__str[8] < 0x81u)
            {
LABEL_484:
              sub_22F1340F0(v230, v232, v231, 0, 0, v229);
            }
            else
            {
              v359 = (char *)(*(_QWORD *)__str + 56 * *(unsigned int *)&__str[8]);
              v233 = *(unsigned int *)&__str[8];
              while (1)
              {
                v234 = operator new(56 * v233, MEMORY[0x24BEDB6B8]);
                if (v234)
                  break;
                v235 = v233 > 1;
                v233 >>= 1;
                if (!v235)
                {
                  v232 = v359;
                  goto LABEL_484;
                }
              }
              v254 = v234;
              sub_22F1340F0(v230, v359, v231, (uint64_t)v234, v233, v229);
              operator delete(v254);
            }
            v236 = *((_QWORD *)v140 + 4);
            if ((unint64_t)(*((_QWORD *)v140 + 3) - v236) > 0xB)
            {
              *(_DWORD *)(v236 + 8) = 656437871;
              *(_QWORD *)v236 = *(_QWORD *)"Thunks for '";
              *((_QWORD *)v140 + 4) += 12;
              v237 = v140;
            }
            else
            {
              v237 = (llvm::raw_ostream *)llvm::raw_ostream::write(v140, "Thunks for '");
            }
            if ((char)v227[55] >= 0)
              v238 = v227 + 32;
            else
              v238 = (const char *)*((_QWORD *)v227 + 4);
            v239 = (llvm::raw_ostream *)llvm::raw_ostream::write(v237, v238);
            v240 = *((_QWORD *)v239 + 4);
            if ((unint64_t)(*((_QWORD *)v239 + 3) - v240) > 2)
            {
              *(_BYTE *)(v240 + 2) = 40;
              *(_WORD *)v240 = 8231;
              *((_QWORD *)v239 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v239, "' (");
            }
            llvm::raw_ostream::operator<<();
            if (*(_DWORD *)&__str[8] == 1)
              v241 = " entry";
            else
              v241 = " entries";
            if (*(_DWORD *)&__str[8] == 1)
              v242 = 6;
            else
              v242 = 8;
            v243 = (void *)*((_QWORD *)v140 + 4);
            if (v242 <= *((_QWORD *)v140 + 3) - (_QWORD)v243)
            {
              memcpy(v243, v241, v242);
              v245 = *((_QWORD *)v140 + 4) + v242;
              *((_QWORD *)v140 + 4) = v245;
              v244 = v140;
            }
            else
            {
              v244 = (llvm::raw_ostream *)llvm::raw_ostream::write(v140, v241);
              v245 = *((_QWORD *)v244 + 4);
            }
            if (*((_QWORD *)v244 + 3) - v245 > 2)
            {
              *(_BYTE *)(v245 + 2) = 10;
              *(_WORD *)v245 = 11817;
              *((_QWORD *)v244 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v244, ").\n");
            }
            v246 = *(unsigned int *)&__str[8];
            if (*(_DWORD *)&__str[8])
            {
              v247 = 0;
              v248 = 0;
              do
              {
                v249 = (_QWORD *)(*(_QWORD *)__str + v247);
                *(_QWORD *)&v384 = &unk_24FA65F98;
                *((_QWORD *)&v384 + 1) = "%4d | ";
                v385 = v248;
                llvm::raw_ostream::operator<<();
                sub_22F133A70(v249, v140, 1);
                v250 = (_BYTE *)*((_QWORD *)v140 + 4);
                if ((unint64_t)v250 >= *((_QWORD *)v140 + 3))
                {
                  llvm::raw_ostream::write(v140);
                }
                else
                {
                  *((_QWORD *)v140 + 4) = v250 + 1;
                  *v250 = 10;
                }
                ++v248;
                v247 += 56;
              }
              while (v246 != v248);
            }
            v251 = (_BYTE *)*((_QWORD *)v140 + 4);
            if ((unint64_t)v251 >= *((_QWORD *)v140 + 3))
            {
              llvm::raw_ostream::write(v140);
            }
            else
            {
              *((_QWORD *)v140 + 4) = v251 + 1;
              *v251 = 10;
            }
            if (*(_BYTE **)__str != &__str[16])
              free(*(void **)__str);
            v252 = (_QWORD *)*((_QWORD *)v227 + 1);
            if (v252)
            {
              do
              {
                v253 = v252;
                v252 = (_QWORD *)*v252;
              }
              while (v252);
            }
            else
            {
              do
              {
                v253 = (_BYTE *)*((_QWORD *)v227 + 2);
                v130 = *(_QWORD *)v253 == (_QWORD)v227;
                v227 = v253;
              }
              while (!v130);
            }
            v227 = v253;
            if (v253 == &__p[8])
              break;
            continue;
          }
        }
      }
LABEL_528:
      sub_22F12F3F4(*(char **)&__p[8]);
    }
    if (*((_QWORD *)v140 + 4) != *((_QWORD *)v140 + 2))
      llvm::raw_ostream::flush_nonempty(v140);
LABEL_531:
    v256 = *(_QWORD *)(*v371 + 104);
    *(_QWORD *)&v384 = v376;
    *((_QWORD *)&v384 + 1) = v256;
    v257 = (unint64_t *)v405;
    if ((_DWORD)v406)
    {
      if (v407)
      {
        v266 = (unint64_t)v407 << 6;
        while (*v257 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v257 += 8;
          v266 -= 64;
          if (!v266)
            goto LABEL_532;
        }
      }
    }
    else
    {
LABEL_532:
      v257 = (unint64_t *)((char *)v405 + 64 * (unint64_t)v407);
    }
    *(_QWORD *)__str = &__str[16];
    *(_QWORD *)&__str[8] = 0x100000000;
    sub_22F40DA0C((uint64_t)__str, v257, (unint64_t *)v405 + 8 * (unint64_t)v407, (unint64_t *)v405 + 8 * (unint64_t)v407);
    *(_QWORD *)__p = 0;
    v258 = v395;
    v259 = v396;
    v260 = operator new();
    sub_22F1229E0(v260, __p, 1uLL, v258, v259, *(uint64_t *)__str, (char *)*(unsigned int *)&__str[8], (uint64_t)v374);
    v261 = sub_22F40E11C((uint64_t)(v364 + 12), (uint64_t *)&v384);
    v262 = v261[2];
    v261[2] = v260;
    if (v262)
    {
      v290 = sub_22F40BE28(v262);
      MEMORY[0x2348A0E9C](v290, 0x10F0C40DF88B1A7);
    }
    v263 = (uint64_t *)((char *)v408 + 80 * v410);
    if ((_DWORD)v409)
    {
      if (v410)
      {
        v264 = 80 * v410;
        v265 = (uint64_t *)v408;
        while ((*v265 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v265 += 10;
          v264 -= 80;
          if (!v264)
            goto LABEL_541;
        }
      }
      else
      {
        v265 = (uint64_t *)v408;
      }
    }
    else
    {
LABEL_541:
      v265 = (uint64_t *)((char *)v408 + 80 * v410);
    }
    v267 = (uint64_t *)((char *)v408 + 80 * v410);
LABEL_548:
    while (v265 != v267)
    {
      sub_22F40DBAC((uint64_t)__p, (uint64_t)(v364 + 1), v265, (uint64_t)(v265 + 1));
      v268 = v265 + 10;
      v265 = v263;
      if (v268 != v263)
      {
        v265 = v268;
        while ((*v265 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v265 += 10;
          if (v265 == v263)
          {
            v265 = v263;
            goto LABEL_548;
          }
        }
      }
    }
    v269 = sub_22F0C975C(v364[5], v376);
    v270 = (llvm *)((char *)v398 + 48 * v400);
    if ((_DWORD)v399)
    {
      if (v400)
      {
        v271 = 48 * v400;
        v272 = v398;
        while ((unint64_t)(*(_QWORD *)v272 + 1) <= 1 && *((_DWORD *)v272 + 2) == 0)
        {
          v272 = (llvm *)((char *)v272 + 48);
          v271 -= 48;
          if (!v271)
            goto LABEL_563;
        }
      }
      else
      {
        v272 = v398;
      }
    }
    else
    {
LABEL_563:
      v272 = (llvm *)((char *)v398 + 48 * v400);
    }
    v274 = (llvm *)((char *)v398 + 48 * v400);
    while (v272 != v274)
    {
      sub_22F40E344((uint64_t)__p, (uint64_t)&v382, (uint64_t)v272, (_OWORD *)v272 + 1);
      if (!__p[16])
      {
        v275 = *(_QWORD *)__p;
        v276 = *(_QWORD *)(*(_QWORD *)__p + 32);
        v277 = *((_QWORD *)v272 + 3);
        v278 = *((_QWORD *)v272 + 4);
        if (v277)
          v278 += sub_22F2500F4(v269, v277);
        v279 = *(_QWORD *)(v275 + 24);
        if (v279)
          v276 += sub_22F2500F4(v269, v279);
        if (v278 < v276)
        {
          v280 = *((_OWORD *)v272 + 2);
          *(_OWORD *)(v275 + 16) = *((_OWORD *)v272 + 1);
          *(_OWORD *)(v275 + 32) = v280;
        }
      }
      v281 = (llvm *)((char *)v272 + 48);
      while (v281 != v270)
      {
        v282 = *((unsigned int *)v281 + 2);
        v283 = *(_QWORD *)v281 + 1;
        v281 = (llvm *)((char *)v281 + 48);
        if (v283 > 1 || v282 != 0)
        {
          v272 = (llvm *)((char *)v281 - 48);
          goto LABEL_581;
        }
      }
      v272 = v270;
LABEL_581:
      ;
    }
    if (*(_BYTE **)__str != &__str[16])
      free(*(void **)__str);
    v285 = v408;
    if (v410)
    {
      v286 = 80 * v410;
      v287 = (char *)v408 + 24;
      do
      {
        if ((*((_QWORD *)v287 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v288 = (char *)*((_QWORD *)v287 - 2);
          if (v287 != v288)
            free(v288);
        }
        v287 += 80;
        v286 -= 80;
      }
      while (v286);
      v285 = v408;
      v289 = v410;
    }
    else
    {
      v289 = 0;
    }
    llvm::deallocate_buffer(v285, (void *)(80 * v289));
    llvm::deallocate_buffer(v405, (void *)((unint64_t)v407 << 6));
    llvm::deallocate_buffer(v402, (void *)(32 * v404));
    llvm::deallocate_buffer(v398, (void *)(48 * v400));
    if (v395 != v397)
      free(v395);
    v105 = (llvm *)llvm::deallocate_buffer(v393, (void *)(40 * v394));
    v108 = v371 + 1;
    if (v371 + 1 != v366)
      continue;
    break;
  }
LABEL_601:
  v291 = v382 + 48 * v383;
  if (DWORD2(v382))
  {
    if ((_DWORD)v383)
    {
      v292 = 48 * v383;
      v293 = v382;
      while ((unint64_t)(*(_QWORD *)v293 + 1) <= 1 && *(_DWORD *)(v293 + 8) == 0)
      {
        v293 += 48;
        v292 -= 48;
        if (!v292)
          goto LABEL_610;
      }
    }
    else
    {
      v293 = v382;
    }
  }
  else
  {
LABEL_610:
    v293 = v382 + 48 * v383;
  }
  v295 = v382 + 48 * v383;
  while (v293 != v295)
  {
    v105 = (llvm *)sub_22F40E344((uint64_t)&v386, (uint64_t)(v364 + 6), v293, (_OWORD *)(v293 + 16));
    v296 = v293 + 48;
    while (v296 != v291)
    {
      v297 = *(unsigned int *)(v296 + 8);
      v298 = *(_QWORD *)v296 + 1;
      v296 += 48;
      if (v298 > 1 || v297 != 0)
      {
        v293 = v296 - 48;
        goto LABEL_621;
      }
    }
    v293 = v291;
LABEL_621:
    ;
  }
  if ((*(_QWORD *)(*(_QWORD *)(v364[5] + 2000) + 140) & 0x10000000000) != 0)
  {
    v300 = v376;
    v301 = (llvm::raw_ostream *)llvm::outs(v105);
    v387 = 0;
    v388 = 0;
    v386 = (char **)&v387;
    v302 = v382 + 48 * v383;
    if (DWORD2(v382))
    {
      if ((_DWORD)v383)
      {
        v303 = 48 * v383;
        v304 = v382;
        while ((unint64_t)(*(_QWORD *)v304 + 1) <= 1 && *(_DWORD *)(v304 + 8) == 0)
        {
          v304 += 48;
          v303 -= 48;
          if (!v303)
            goto LABEL_632;
        }
      }
      else
      {
        v304 = v382;
      }
    }
    else
    {
LABEL_632:
      v304 = v382 + 48 * v383;
    }
    v306 = v382 + 48 * v383;
    if (v304 != v306)
    {
      v307 = 0;
      do
      {
        v308 = *(_QWORD *)v304 & 0xFFFFFFFFFFFFFFF8;
        sub_22EFF7250(7, v308, __str);
        if ((*(_DWORD *)(v308 + 28) & 0x7F) == 0x39)
        {
          if (__str[23] >= 0)
            v309 = __str[23] & 0x7F;
          else
            v309 = *(_QWORD *)&__str[8];
          sub_22E3B8BF4((uint64_t)__p, v309 + 18);
          if (__p[23] >= 0)
            v310 = __p;
          else
            v310 = *(_BYTE **)__p;
          if (v309)
          {
            if (__str[23] >= 0)
              v311 = __str;
            else
              v311 = *(_BYTE **)__str;
            memmove(v310, v311, v309);
          }
          strcpy(&v310[v309], " [scalar deleting]");
          v312 = sub_22F136450((uint64_t **)&v386, (unint64_t *)(v304 + 16), (_OWORD *)(v304 + 16));
          v313 = v312 + 8;
          if (*((char *)v312 + 87) < 0)
            operator delete(*v313);
          *(_OWORD *)v313 = *(_OWORD *)__p;
          v313[2] = *(uint64_t **)&__p[16];
        }
        else
        {
          v314 = sub_22F136450((uint64_t **)&v386, (unint64_t *)(v304 + 16), (_OWORD *)(v304 + 16));
          std::string::operator=((std::string *)(v314 + 8), (const std::string *)__str);
        }
        v315 = (*(_QWORD *)(v304 + 32) | *(_QWORD *)(v304 + 16)) != 0;
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v307 |= v315;
        v316 = v304 + 48;
        while (v316 != v302)
        {
          v317 = *(unsigned int *)(v316 + 8);
          v318 = *(_QWORD *)v316 + 1;
          v316 += 48;
          if (v318 > 1 || v317 != 0)
          {
            v304 = v316 - 48;
            goto LABEL_662;
          }
        }
        v304 = v302;
LABEL_662:
        ;
      }
      while (v304 != v306);
      if (v388)
      {
        v320 = *((_QWORD *)v301 + 4);
        if ((unint64_t)(*((_QWORD *)v301 + 3) - v320) > 0x13)
        {
          *(_DWORD *)(v320 + 16) = 544370534;
          *(_OWORD *)v320 = *(_OWORD *)"VFTable indices for ";
          v321 = (_BYTE *)(*((_QWORD *)v301 + 4) + 20);
          *((_QWORD *)v301 + 4) = v321;
        }
        else
        {
          llvm::raw_ostream::write(v301, "VFTable indices for ");
          v321 = (_BYTE *)*((_QWORD *)v301 + 4);
        }
        if (*((_BYTE **)v301 + 3) == v321)
        {
          llvm::raw_ostream::write(v301, "'");
          if (v300)
            goto LABEL_668;
LABEL_669:
          v323 = *(_QWORD *)(v300 + 16);
          v324 = v323 & 0xFFFFFFFFFFFFFFF8;
          if ((v323 & 4) != 0)
            v324 = *(_QWORD *)v324;
          v325 = *(_WORD *)(v324 + 8) & 0x7F;
          if (v325 != 83)
          {
            while (2)
            {
              v326 = -40;
              if (v325 > 70)
              {
                if (v325 == 71)
                {
                  v326 = -56;
                }
                else if (v325 != 81)
                {
                  goto LABEL_682;
                }
              }
              else
              {
                if (v325 > 0x18)
                  goto LABEL_681;
                if (v325 == 16)
                  goto LABEL_675;
                if (((1 << v325) & 0x1066) == 0)
                {
                  if (v325 == 24)
                  {
LABEL_675:
                    v326 = -48;
                  }
                  else
                  {
LABEL_681:
                    if (v325 == 70)
                    {
                      v326 = -64;
                    }
                    else
                    {
LABEL_682:
                      v327 = v325 - 52;
                      if ((v325 - 33) >= 5)
                        v328 = -48;
                      else
                        v328 = -64;
                      if (v327 >= 6)
                        v326 = v328;
                      else
                        v326 = -72;
                    }
                  }
                }
              }
              v329 = *(_QWORD *)(v324 + v326 + 16);
              v324 = v329 & 0xFFFFFFFFFFFFFFF8;
              if ((v329 & 4) != 0)
                v324 = *(_QWORD *)v324;
              v325 = *(_WORD *)(v324 + 8) & 0x7F;
              if (v325 == 83)
                break;
              continue;
            }
          }
          v322 = v324 - 40;
        }
        else
        {
          *v321 = 39;
          ++*((_QWORD *)v301 + 4);
          if (!v300)
            goto LABEL_669;
LABEL_668:
          v322 = v300;
          if ((*(_DWORD *)(v300 + 28) & 0x7F) != 0x53)
            goto LABEL_669;
        }
        sub_22EFBA008((_QWORD *)v300, v301, *(_QWORD *)(v322 + 88) + 15104);
        v330 = *((_QWORD *)v301 + 4);
        if ((unint64_t)(*((_QWORD *)v301 + 3) - v330) > 2)
        {
          *(_BYTE *)(v330 + 2) = 40;
          *(_WORD *)v330 = 8231;
          *((_QWORD *)v301 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v301, "' (");
        }
        v331 = llvm::raw_ostream::operator<<();
        v332 = (llvm::raw_ostream *)v331;
        if (v388 == 1)
          v333 = " entry";
        else
          v333 = " entries";
        if (v388 == 1)
          v334 = 6;
        else
          v334 = 8;
        v336 = *(_QWORD *)(v331 + 24);
        v335 = *(void **)(v331 + 32);
        if (v334 <= v336 - (uint64_t)v335)
        {
          memcpy(v335, v333, v334);
          v337 = *((_QWORD *)v332 + 4) + v334;
          *((_QWORD *)v332 + 4) = v337;
        }
        else
        {
          v332 = (llvm::raw_ostream *)llvm::raw_ostream::write(v332, v333);
          v337 = *((_QWORD *)v332 + 4);
        }
        if (*((_QWORD *)v332 + 3) - v337 > 2)
        {
          *(_BYTE *)(v337 + 2) = 10;
          *(_WORD *)v337 = 11817;
          *((_QWORD *)v332 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v332, ").\n");
        }
        v338 = (uint64_t *)v386;
        if (v386 != (char **)&v387)
        {
          v339 = 0;
          v340 = -1;
          while (2)
          {
            if ((v307 & 1) == 0)
              goto LABEL_725;
            v341 = v338[6];
            v342 = v338[4];
            if (v341 == v340 && v342 == v339)
              goto LABEL_725;
            v344 = *((_QWORD *)v301 + 4);
            if ((unint64_t)(*((_QWORD *)v301 + 3) - v344) > 0x12)
            {
              *(_DWORD *)(v344 + 15) = 543254902;
              *(_OWORD *)v344 = *(_OWORD *)" -- accessible via ";
              *((_QWORD *)v301 + 4) += 19;
              if (v342)
              {
LABEL_716:
                v345 = (void *)*((_QWORD *)v301 + 4);
                if (*((_QWORD *)v301 + 3) - (_QWORD)v345 > 0xDuLL)
                {
                  qmemcpy(v345, "vbtable index ", 14);
                  *((_QWORD *)v301 + 4) += 14;
                }
                else
                {
                  llvm::raw_ostream::write(v301, "vbtable index ");
                }
                v346 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
                v347 = (_WORD *)*((_QWORD *)v346 + 4);
                if (*((_QWORD *)v346 + 3) - (_QWORD)v347 > 1uLL)
                {
                  *v347 = 8236;
                  *((_QWORD *)v346 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v346, ", ");
                }
              }
            }
            else
            {
              llvm::raw_ostream::write(v301, " -- accessible via ");
              if (v342)
                goto LABEL_716;
            }
            v348 = (_OWORD *)*((_QWORD *)v301 + 4);
            if (*((_QWORD *)v301 + 3) - (_QWORD)v348 > 0xFuLL)
            {
              *v348 = *(_OWORD *)"vfptr at offset ";
              *((_QWORD *)v301 + 4) += 16;
            }
            else
            {
              llvm::raw_ostream::write(v301, "vfptr at offset ");
            }
            v349 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v350 = (_DWORD *)*((_QWORD *)v349 + 4);
            if (*((_QWORD *)v349 + 3) - (_QWORD)v350 > 3uLL)
            {
              *v350 = 170732832;
              *((_QWORD *)v349 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(v349, " --\n");
            }
            v340 = v341;
            v339 = v342;
LABEL_725:
            v351 = v338[7];
            *(_QWORD *)__str = &unk_24FA62ED8;
            *(_QWORD *)&__str[8] = "%4llu | ";
            *(_QWORD *)&__str[16] = v351;
            v352 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            if (*((char *)v338 + 87) >= 0)
              v353 = (const char *)(v338 + 8);
            else
              v353 = (const char *)v338[8];
            v354 = (llvm::raw_ostream *)llvm::raw_ostream::write(v352, v353);
            v355 = (_BYTE *)*((_QWORD *)v354 + 4);
            if ((unint64_t)v355 >= *((_QWORD *)v354 + 3))
            {
              llvm::raw_ostream::write(v354);
            }
            else
            {
              *((_QWORD *)v354 + 4) = v355 + 1;
              *v355 = 10;
            }
            v356 = (char *)v338[1];
            if (v356)
            {
              do
              {
                v357 = (char **)v356;
                v356 = *(char **)v356;
              }
              while (v356);
            }
            else
            {
              do
              {
                v357 = (char **)v338[2];
                v130 = *v357 == (char *)v338;
                v338 = (uint64_t *)v357;
              }
              while (!v130);
            }
            v338 = (uint64_t *)v357;
            if (v357 == (char **)&v387)
              break;
            continue;
          }
        }
        v358 = (_BYTE *)*((_QWORD *)v301 + 4);
        if ((unint64_t)v358 >= *((_QWORD *)v301 + 3))
        {
          llvm::raw_ostream::write(v301);
        }
        else
        {
          *((_QWORD *)v301 + 4) = v358 + 1;
          *v358 = 10;
        }
      }
    }
    if (*((_QWORD *)v301 + 4) != *((_QWORD *)v301 + 2))
      llvm::raw_ostream::flush_nonempty(v301);
    sub_22F136408((char *)v387);
  }
  llvm::deallocate_buffer((llvm *)v382, (void *)(48 * v383));
  return llvm::deallocate_buffer(v374[0], (void *)(24 * v375));
}

