uint64_t sub_22F129AE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;

  v2 = a2;
  v28 = a2;
  v4 = sub_22F40E3E4((uint64_t)(a1 + 15), &v28);
  v5 = v4[1];
  if (!v5)
  {
    v7 = v4;
    v5 = operator new();
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 24) = v5 + 40;
    *(_DWORD *)(v5 + 36) = 2;
    v8 = v7[1];
    v7[1] = v5;
    if (v8)
    {
      v26 = sub_22F40E5D4(v8);
      MEMORY[0x2348A0E9C](v26, 0x10A0C40A75E38C8);
      v5 = v7[1];
    }
    sub_22F1267CC(a1, 1, v2, v5 + 24);
    v9 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(a1[5], v2) + 72) + 56);
    if (v9)
    {
      v10 = sub_22F129AE4(a1, v9);
      v11 = *(unsigned int *)(v10 + 16);
      v12 = *(_QWORD *)v10 + 16 * v11;
      if (*(_DWORD *)(v10 + 8))
      {
        if ((_DWORD)v11)
        {
          v13 = 16 * v11;
          v14 = *(_QWORD *)v10;
          while ((*(_QWORD *)v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v14 += 16;
            v13 -= 16;
            if (!v13)
              goto LABEL_11;
          }
        }
        else
        {
          v14 = *(_QWORD *)v10;
        }
      }
      else
      {
LABEL_11:
        v14 = *(_QWORD *)v10 + 16 * v11;
      }
      v15 = *(_QWORD *)v10 + 16 * v11;
      if (v14 != v15)
      {
        do
        {
          sub_22F2611B4(v5, (_QWORD *)v14, (_DWORD *)(v14 + 8), (uint64_t)v29);
          v16 = v14 + 16;
          v14 = v12;
          if (v16 != v12)
          {
            v14 = v16;
            while ((*(_QWORD *)v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v14 += 16;
              if (v14 == v12)
              {
                v14 = v12;
                break;
              }
            }
          }
        }
        while (v14 != v15);
        v2 = v28;
      }
    }
    v17 = *(_DWORD *)(v5 + 8);
    v18 = sub_22E483108(v2);
    if (v18 != v19)
    {
      v20 = v18;
      v21 = v19;
      v22 = v17 + 1;
      do
      {
        v27 = 0;
        v23 = *(_QWORD *)(**(_QWORD **)(v20 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v23 + 8) & 0xF) != 0)
          v23 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v20 + 16));
        v24 = sub_22F10C2A4(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
        if (v24)
        {
          if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3)
            v25 = 0;
          else
            v25 = v24;
        }
        else
        {
          v25 = 0;
        }
        v27 = v25;
        v29[0] = v25;
        v30 = 0;
        if ((sub_22F246C54((uint64_t *)v5, v29, &v30) & 1) == 0)
          *((_DWORD *)sub_22F283EC0((uint64_t *)v5, &v27) + 2) = v22++;
        v20 += 24;
      }
      while (v20 != v21);
    }
  }
  return v5;
}

uint64_t sub_22F129D40(uint64_t a1, uint64_t a2)
{
  if ((a2 & 7) == 1 && (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x39)
    return 0;
  else
    return sub_22F129D6C(a1, a2);
}

uint64_t sub_22F129D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v16;

  v3 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8);
  v4 = v3;
  v5 = *(_WORD *)(v3 + 80) & 0x7F;
  v6 = -40;
  if (v5 > 0x46)
  {
    if (v5 == 83)
      goto LABEL_17;
    if (v5 == 71)
    {
      v6 = -56;
      goto LABEL_17;
    }
    if (v5 != 81)
    {
LABEL_12:
      v7 = v5 - 52;
      v8 = v5 - 33 >= 5;
      v9 = -48;
      if (!v8)
        v9 = -64;
      if (v7 >= 6)
        v6 = v9;
      else
        v6 = -72;
    }
  }
  else
  {
    if (v5 > 0x18)
      goto LABEL_11;
    if (v5 == 16)
    {
LABEL_4:
      v6 = -48;
      goto LABEL_17;
    }
    if (((1 << v5) & 0x1066) == 0)
    {
      if (v5 == 24)
        goto LABEL_4;
LABEL_11:
      if (v5 == 70)
      {
        v6 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v10 = *(_QWORD *)(v3 + 72 + v6 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v12);
  v16 = 0;
  v13 = sub_22F40C65C(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), v4, &v16);
  v14 = v16;
  if (!v13)
    v14 = *(_QWORD *)(a1 + 8) + 80 * *(unsigned int *)(a1 + 24);
  if (*(_QWORD *)(a1 + 8) + 80 * *(unsigned int *)(a1 + 24) == v14)
    return 0;
  else
    return v14 + 8;
}

unint64_t sub_22F129EB8(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;

  v10 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 24), a2) + 72) + 48);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v11 = a3;
    if ((v10 & 4) != 0)
    {
      v13 = sub_22F0C975C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8));
      v11 = sub_22F2500F4(v13, v10 & 0xFFFFFFFFFFFFFFF8);
    }
    sub_22F129EB8(a1, v10 & 0xFFFFFFFFFFFFFFF8, v11, (v10 >> 2) & 1, a5);
  }
  result = sub_22F129F88(a1, a2, a5);
  if (a4)
    return sub_22F12A170(a1, a2, a3, a5);
  return result;
}

unint64_t sub_22F129F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  const void *v25;
  unint64_t v26;

  v6 = sub_22F0C975C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
  result = sub_22E46A3A0(a2);
  if (result != v8)
  {
    v9 = result;
    v10 = v8;
    v11 = a1 + 896;
    do
    {
      v12 = *(_QWORD *)(**(_QWORD **)(v9 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
        v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v9 + 16));
      v13 = sub_22F10C2A4(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
      if (v13)
      {
        if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 >= 3)
          v14 = 0;
        else
          v14 = (const void *)v13;
      }
      else
      {
        v14 = 0;
      }
      if ((*(_BYTE *)(v9 + 12) & 1) != 0)
      {
        sub_22E3BA850(a1 + 560, v14);
        if (v15)
        {
          v16 = v11;
          v22 = sub_22F2500F4(v6, (uint64_t)v14);
          v23 = v6;
          v17 = *(_QWORD *)(a1 + 24);
          if (*(_DWORD *)(*(_QWORD *)a1 + 136) == 1)
            v18 = 32;
          else
            v18 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 15088) + *(_QWORD *)(**(_QWORD **)(v17 + 15088) - 24));
          v19 = -3 - *(unsigned int *)(a1 + 40);
          v20 = sub_22EF5CDF0(v17, *(_QWORD *)(*(_QWORD *)(v17 + 16408) & 0xFFFFFFFFFFFFFFF0));
          v25 = v14;
          v26 = v18 / v20 * v19;
          v11 = v16;
          sub_22F0CDB00(v16, &v25, (uint64_t *)&v26, (uint64_t)v24);
          v21 = *(unsigned int *)(a1 + 40);
          if (v21 >= *(unsigned int *)(a1 + 44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = *(unsigned int *)(a1 + 40);
          }
          v6 = v23;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v21) = (8 * (v22 - a3)) | 1;
          ++*(_DWORD *)(a1 + 40);
        }
      }
      result = sub_22F129F88(a1, v14, a3);
      v9 += 24;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t sub_22F12A170(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;

  v38 = sub_22F0C975C(*(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(*(_QWORD *)(v38 + 72) + 48) & 0xFFFFFFFFFFFFFFF8;
  if (v7)
    v8 = (*(_QWORD *)(*(_QWORD *)(v38 + 72) + 48) & 4) == 0;
  else
    v8 = 0;
  if (v8)
    sub_22F12A170(a1, v7, a3, a4);
  v36 = a2;
  v37 = v7;
  v39 = a4;
  v9 = sub_22E488FF8(a2);
  if (v9 != v10)
  {
    v11 = v9;
    v12 = v10;
    do
    {
      v13 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11);
      if (((*(_BYTE *)(v13 + 82) & 0xC) != 0 || sub_22EFD7260(v13))
        && (*(_QWORD *)(v11 + 80) & 0xC0000000) != 0x80000000)
      {
        v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11);
        v15 = *(_QWORD *)(a1 + 24);
        if (*(_DWORD *)(*(_QWORD *)a1 + 136) == 1)
          v16 = 32;
        else
          v16 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 15088) + *(_QWORD *)(**(_QWORD **)(v15 + 15088) - 24));
        v17 = *(unsigned int *)(a1 + 40);
        v18 = sub_22EF5CDF0(v15, *(_QWORD *)(*(_QWORD *)(v15 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v19 = *(unsigned int *)(a1 + 632);
        if ((_DWORD)v19)
        {
          v20 = *(uint64_t **)(a1 + 624);
          v21 = 16 * v19;
          while (!sub_22F12A4A4(*v20, v14))
          {
            v20 += 2;
            v21 -= 16;
            if (!v21)
            {
              v22 = *(unsigned int *)(a1 + 632);
              goto LABEL_21;
            }
          }
        }
        else
        {
          v22 = 0;
LABEL_21:
          if (v22 >= *(unsigned int *)(a1 + 636))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v22 = *(unsigned int *)(a1 + 632);
          }
          v23 = (uint64_t *)(*(_QWORD *)(a1 + 624) + 16 * v22);
          *v23 = v14;
          v23[1] = v16 / v18 * (-3 - v17);
          ++*(_DWORD *)(a1 + 632);
          v24 = *(_QWORD *)(a1 + 920);
          if (v24)
          {
            v41 = 0;
            v25 = sub_22F12A59C(*(_QWORD *)(v24 + 40), *(_DWORD *)(v24 + 56), v14, a3, &v41);
            v26 = 0;
            if (v25)
              v26 = *(_QWORD *)(v41 + 32);
            v27 = v26 - v39;
          }
          else
          {
            v27 = 0;
          }
          v28 = *(unsigned int *)(a1 + 40);
          if (v28 >= *(unsigned int *)(a1 + 44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = *(unsigned int *)(a1 + 40);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v28) = 8 * v27;
          ++*(_DWORD *)(a1 + 40);
        }
      }
      do
        v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v11 && (*(_DWORD *)(v11 + 28) & 0x7Eu) - 54 > 3);
    }
    while (v11 != v12);
  }
  result = sub_22E46A3A0(v36);
  if (result != v30)
  {
    v31 = result;
    v32 = v30;
    do
    {
      if ((*(_BYTE *)(v31 + 12) & 1) == 0)
      {
        v33 = *(_QWORD *)(**(_QWORD **)(v31 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v33 + 8) & 0xF) != 0)
          v33 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v31 + 16));
        result = sub_22F10C2A4(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0));
        if (result)
        {
          if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
            v34 = 0;
          else
            v34 = result;
        }
        else
        {
          v34 = 0;
        }
        if (v34 != v37)
        {
          v35 = sub_22E46A3EC(v38, v34);
          result = sub_22F12A170(a1, v34, v35 + a3, v39);
        }
      }
      v31 += 24;
    }
    while (v31 != v32);
  }
  return result;
}

BOOL sub_22F12A4A4(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x39)
    return (*(_DWORD *)(a2 + 28) & 0x7F) == 57;
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 == v4)
    return 1;
  v5 = sub_22E47E1B0(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
  if (v5 != sub_22E47E1B0(v4))
    return 0;
  v6 = (unsigned __int16)(*(_QWORD *)(v3 + 16) >> 38);
  if (v6 != (unsigned __int16)(*(_QWORD *)(v4 + 16) >> 38))
    return 0;
  if (!(unsigned __int16)(*(_QWORD *)(v3 + 16) >> 38))
    return 1;
  v7 = (uint64_t *)(v3 + 40);
  v8 = (uint64_t *)(v4 + 40);
  v9 = 8 * v6 - 8;
  do
  {
    v11 = *v7++;
    v10 = v11;
    v12 = *v8++;
    result = v10 == v12;
    v13 = v10 != v12 || v9 == 0;
    v9 -= 8;
  }
  while (!v13);
  return result;
}

uint64_t sub_22F12A59C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 40 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == 0x8000000000000000;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 40 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_9;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

uint64_t sub_22F12A690(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  int v46;
  unsigned int v47;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[2];
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  llvm *v56[2];
  unsigned int v57;
  llvm *v58[2];
  unsigned int v59;
  llvm *v60[2];
  unsigned int v61;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  if (!a2 || (v7 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v11 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_22;
          }
          v11 = -64;
        }
      }
LABEL_22:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  v15 = *(_QWORD *)(v7 + 88);
  *(_QWORD *)(a1 + 24) = v15;
  v16 = sub_22F0C975C(v15, a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v60[0] = 0;
  v60[1] = 0;
  v61 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  v56[0] = 0;
  v56[1] = 0;
  v57 = 0;
  sub_22F12AB84(a1, a2, 0, 0, a3, (uint64_t)v60, (uint64_t)v58, (uint64_t *)v56);
  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  sub_22F3AB750(a2, (uint64_t)v51);
  v17 = v53;
  v18 = v54;
  while (v17 != v18)
  {
    v19 = (unsigned int *)v17[4];
    v20 = (unsigned int *)v17[5];
    if (v19 != v20)
    {
      v21 = *v17;
      v22 = *v17 + 88;
      do
      {
        v23 = *(_WORD *)(v21 + 80) & 0x7F;
        v24 = -40;
        if (v23 > 0x46)
        {
          if (v23 == 83)
            goto LABEL_50;
          if (v23 == 71)
          {
            v24 = -56;
            goto LABEL_50;
          }
          if (v23 != 81)
            goto LABEL_44;
        }
        else
        {
          if (v23 > 0x18)
            goto LABEL_43;
          if (v23 == 16)
            goto LABEL_36;
          if (((1 << v23) & 0x1066) == 0)
          {
            if (v23 == 24)
            {
LABEL_36:
              v24 = -48;
              goto LABEL_50;
            }
LABEL_43:
            if (v23 == 70)
            {
              v24 = -64;
              goto LABEL_50;
            }
LABEL_44:
            v25 = v23 - 52;
            v26 = v23 - 33 >= 5;
            v27 = -64;
            if (v26)
              v27 = -48;
            v26 = v25 >= 6;
            v24 = -72;
            if (v26)
              v24 = v27;
          }
        }
LABEL_50:
        v28 = *(_QWORD *)(v22 + v24);
        v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 4) != 0)
          v29 = (_QWORD *)*v29;
        v30 = *v19;
        if (v29)
          v31 = v29 - 8;
        else
          v31 = 0;
        v49 = v31;
        v50 = v30;
        v32 = *(_QWORD *)(sub_22F2C4D14((uint64_t)v60, (uint64_t)&v49) + 16);
        v33 = *((_QWORD *)v19 + 1);
        v34 = *(_WORD *)(*(_QWORD *)v33 + 80) & 0x7F;
        v35 = -40;
        if (v34 > 0x46)
        {
          if (v34 == 83)
            goto LABEL_72;
          if (v34 == 71)
          {
            v35 = -56;
            goto LABEL_72;
          }
          if (v34 != 81)
            goto LABEL_66;
        }
        else
        {
          if (v34 > 0x18)
            goto LABEL_65;
          if (v34 == 16)
            goto LABEL_58;
          if (((1 << v34) & 0x1066) == 0)
          {
            if (v34 == 24)
            {
LABEL_58:
              v35 = -48;
              goto LABEL_72;
            }
LABEL_65:
            if (v34 == 70)
            {
              v35 = -64;
              goto LABEL_72;
            }
LABEL_66:
            v36 = v34 - 52;
            v26 = v34 - 33 >= 5;
            v37 = -64;
            if (v26)
              v37 = -48;
            v26 = v36 >= 6;
            v35 = -72;
            if (v26)
              v35 = v37;
          }
        }
LABEL_72:
        v38 = *(_QWORD *)(*(_QWORD *)v33 + 72 + v35 + 16);
        v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
        if ((v38 & 4) != 0)
          v39 = (_QWORD *)*v39;
        v40 = v39 - 8;
        v41 = v39 == 0;
        v42 = *(unsigned int *)(v33 + 8);
        if (v41)
          v40 = 0;
        v49 = v40;
        v50 = v42;
        v43 = *(_QWORD *)(sub_22F2C4D14((uint64_t)v58, (uint64_t)&v49) + 16);
        v49 = 0;
        v44 = sub_22F12A59C(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v21, v32, &v49);
        v45 = v49;
        if ((v44 & 1) != 0)
          goto LABEL_83;
        v46 = *(_DWORD *)(a1 + 48);
        v47 = *(_DWORD *)(a1 + 56);
        if (4 * v46 + 4 >= 3 * v47)
        {
          v47 *= 2;
        }
        else if (v47 + ~v46 - *(_DWORD *)(a1 + 52) > v47 >> 3)
        {
          goto LABEL_79;
        }
        sub_22F12AD40(a1 + 40, v47);
        v49 = 0;
        sub_22F12A59C(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v21, v32, &v49);
        v45 = v49;
LABEL_79:
        ++*(_DWORD *)(a1 + 48);
        if (*v45 != -4096 || v45[1] != 0x7FFFFFFFFFFFFFFFLL)
          --*(_DWORD *)(a1 + 52);
        *v45 = v21;
        v45[1] = v32;
        v45[3] = 0;
        v45[4] = 0;
        v45[2] = 0;
LABEL_83:
        v45[4] = v43;
        v45[2] = *(_QWORD *)v33;
        v45[3] = *(_QWORD *)(v33 + 16);
        v19 += 30;
      }
      while (v19 != v20);
    }
    v17 += 7;
  }
  sub_22F31EB90((uint64_t)v51);
  llvm::deallocate_buffer(v56[0], (void *)(16 * v57));
  llvm::deallocate_buffer(v58[0], (void *)(24 * v59));
  llvm::deallocate_buffer(v60[0], (void *)(24 * v61));
  return a1;
}

uint64_t sub_22F12AB84(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v30 = a2;
  if ((a4 & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v15 = sub_22F283EC0(a8, &v30);
    v14 = (*((_DWORD *)v15 + 2) + 1);
    *((_DWORD *)v15 + 2) = v14;
    a2 = v30;
  }
  v28 = a2;
  v29 = v14;
  *(_QWORD *)(sub_22F2C4D14(a6, (uint64_t)&v28) + 16) = a3;
  v28 = v30;
  v29 = v14;
  *(_QWORD *)(sub_22F2C4D14(a7, (uint64_t)&v28) + 16) = a5;
  result = sub_22E46A3A0(v30);
  if (result != v17)
  {
    v18 = result;
    v19 = v17;
    do
    {
      v20 = *(_QWORD *)(**(_QWORD **)(v18 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
        v20 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v18 + 16));
      v21 = sub_22F10C2A4(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0));
      if (v21)
      {
        if ((*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 >= 3)
          v22 = 0;
        else
          v22 = v21;
      }
      else
      {
        v22 = 0;
      }
      if ((*(_BYTE *)(v18 + 12) & 1) != 0)
      {
        result = sub_22F2C4D8C(*(_QWORD *)a6, *(_DWORD *)(a6 + 16), v22, 0, &v28);
        if ((result & 1) != 0)
          goto LABEL_16;
        v27 = sub_22F0C975C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
        v25 = sub_22F2500F4(*(_QWORD *)(a1 + 32), v22);
        v26 = sub_22F2500F4(v27, v22);
      }
      else
      {
        v23 = sub_22F0C975C(*(_QWORD *)(a1 + 24), v30);
        v24 = sub_22E46A3EC(v23, v22);
        v25 = v24 + a3;
        v26 = v24 + a5;
      }
      result = sub_22F12AB84(a1, v22, v25, *(_BYTE *)(v18 + 12) & 1, v26, a6, a7, a8);
LABEL_16:
      v18 += 24;
    }
    while (v18 != v19);
  }
  return result;
}

_OWORD *sub_22F12AD40(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = xmmword_22F45B630;
        result = (_OWORD *)((char *)result + 40);
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = (char *)v4 + 8;
      do
      {
        v15 = *((_QWORD *)v13 - 1);
        v14 = *(_QWORD *)v13;
        if ((v15 != -4096 || v14 != 0x7FFFFFFFFFFFFFFFLL) && (v15 != -8192 || v14 != 0x8000000000000000))
        {
          v23 = 0;
          sub_22F12A59C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, v14, &v23);
          v18 = v23;
          v19 = *(_QWORD *)v13;
          *v23 = v15;
          v18[1] = v19;
          v20 = *(_OWORD *)(v13 + 8);
          v18[4] = *((_QWORD *)v13 + 3);
          *((_OWORD *)v18 + 1) = v20;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v21 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v21)
    {
      v22 = 40 * v21;
      do
      {
        *result = xmmword_22F45B630;
        result = (_OWORD *)((char *)result + 40);
        v22 -= 40;
      }
      while (v22);
    }
  }
  return result;
}

void sub_22F12AEC8(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm *v68;
  llvm *v69;
  int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105[3];
  uint64_t v106;
  llvm *v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[64];
  char v114[32];
  void *v115;
  unsigned int v116;
  _QWORD v117[65];
  void *v118;
  void *v119;
  int v120;
  uint64_t v121;
  llvm *v122[2];
  unsigned int v123;
  _BYTE v124[24];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v11 = (_QWORD *)(a1 + 160);
  v12 = *(unsigned int *)(a1 + 168);
  v13 = *(_DWORD *)(a1 + 880);
  if (v13 >= *(_DWORD *)(a1 + 884))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 880);
  }
  v99 = v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 872) + 8 * v13) = v12;
  ++*(_DWORD *)(a1 + 880);
  v104 = a2;
  sub_22F122E08((uint64_t)v114, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), a1 + 48, a2, a3, a5, a6);
  sub_22F2BE118((uint64_t)v11, (uint64_t)v115 + 8 * v116, (uint64_t)v115 + 8 * v116, (uint64_t)v115, (uint64_t)v115);
  if (!a5 || !v120)
    goto LABEL_10;
  *(_QWORD *)v124 = a2;
  v14 = *(_QWORD *)(a1 + 112);
  v106 = 0;
  v15 = sub_22F12C7A4(v14, *(_DWORD *)(a1 + 128), a2, &v106);
  v16 = (_QWORD *)v106;
  if ((v15 & 1) != 0)
  {
    if (*(_DWORD *)(v106 + 16))
      goto LABEL_10;
  }
  else
  {
    v16 = sub_22F12C83C(a1 + 112, (uint64_t *)v124, (_QWORD *)v106);
    *v16 = a2;
    *(_OWORD *)(v16 + 5) = 0u;
    *(_OWORD *)(v16 + 7) = 0u;
    *(_OWORD *)(v16 + 9) = 0u;
    *(_OWORD *)(v16 + 11) = 0u;
    *(_OWORD *)(v16 + 13) = 0u;
    *(_OWORD *)(v16 + 15) = 0u;
    *(_OWORD *)(v16 + 17) = 0u;
    *(_OWORD *)(v16 + 19) = 0u;
    *(_OWORD *)(v16 + 21) = 0u;
    *(_OWORD *)(v16 + 23) = 0u;
    *(_OWORD *)(v16 + 25) = 0u;
    *(_OWORD *)(v16 + 27) = 0u;
    *(_OWORD *)(v16 + 29) = 0u;
    *(_OWORD *)(v16 + 31) = 0u;
    *(_OWORD *)(v16 + 3) = 0u;
    v16[1] = v16 + 3;
    *(_OWORD *)(v16 + 33) = 0u;
    v16[2] = 0x1000000000;
  }
  sub_22F12CAD4((uint64_t)(v16 + 1), (uint64_t)&v119);
LABEL_10:
  if (*(_QWORD *)(a1 + 8) == a2 && v122 != (llvm **)(a1 + 136))
    sub_22E5D08E0(a1 + 136, (uint64_t)v122);
  v17 = (8 * (*(_QWORD *)(a1 + 16) - a6)) | 2;
  v18 = *(_DWORD *)(a1 + 168);
  if (v18 >= *(_DWORD *)(a1 + 172))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(a1 + 168);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v18) = v17;
  v19 = *(_DWORD *)(a1 + 172);
  v20 = *(_DWORD *)(a1 + 168) + 1;
  *(_DWORD *)(a1 + 168) = v20;
  v21 = *(_QWORD *)(a1 + 8) | 3;
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a1 + 168);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v20) = v21;
  v103 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 168) = v103;
  v106 = 1;
  *(int64x2_t *)v107 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v108 = *(_OWORD *)v107;
  v109 = *(_OWORD *)v107;
  v110 = *(_OWORD *)v107;
  v111 = v113;
  v112 = 0x800000000;
  v100 = a3;
  v102 = a6;
  sub_22F12BCD8(a1, a2, a3, a6, a2, a6, (uint64_t)&v106);
  if (*(_QWORD *)(a1 + 8) == a2)
  {
    v22 = *(_QWORD *)(a1 + 712);
    v23 = *(unsigned int *)(a1 + 728);
    v24 = (unint64_t *)(v22 + 32 * v23);
    if (*(_DWORD *)(a1 + 720))
    {
      if ((_DWORD)v23)
      {
        v25 = 32 * v23;
        v26 = *(unint64_t **)(a1 + 712);
        while ((*v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v26 += 4;
          v25 -= 32;
          if (!v25)
            goto LABEL_23;
        }
      }
      else
      {
        v26 = *(unint64_t **)(a1 + 712);
      }
    }
    else
    {
LABEL_23:
      v26 = (unint64_t *)(v22 + 32 * v23);
    }
    v27 = (unint64_t *)(v22 + 32 * v23);
    while (v26 != v27)
    {
      v28 = *v26;
      v29 = v26[3] - v103;
      if (*v26 && (*(_DWORD *)(v28 + 28) & 0x7F) == 0x39)
      {
        v30 = v28 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v124 = v30 | 1;
        *(_DWORD *)&v124[8] = 0;
        *(_QWORD *)(sub_22F40CA2C((uint64_t *)(a1 + 736), (uint64_t)v124) + 16) = v29;
        v29 = v26[3] - v103 + 1;
        *(_QWORD *)v124 = v30;
        *(_DWORD *)&v124[8] = 0;
      }
      else
      {
        *(_QWORD *)v124 = 0;
        *(_DWORD *)&v124[8] = 0;
        if (sub_22E462B18(v28))
          v31 = v28 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v28) + 96) & 0x80) == 0);
        else
          v31 = v124[0] & 7 | v28;
        *(_QWORD *)v124 = v31;
      }
      *(_QWORD *)(sub_22F40CA2C((uint64_t *)(a1 + 736), (uint64_t)v124) + 16) = v29;
      v32 = v26 + 4;
      v26 = v24;
      if (v32 != v24)
      {
        v26 = v32;
        while ((*v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v26 += 4;
          if (v26 == v24)
          {
            v26 = v24;
            break;
          }
        }
      }
    }
  }
  v33 = *(_DWORD *)(a1 + 720);
  v34 = *(_QWORD *)(a1 + 712);
  v35 = *(unsigned int *)(a1 + 728);
  v36 = (uint64_t *)(v34 + 32 * v35);
  if (v33)
  {
    if ((_DWORD)v35)
    {
      v37 = 32 * v35;
      v38 = *(uint64_t **)(a1 + 712);
      while ((*v38 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v38 += 4;
        v37 -= 32;
        if (!v37)
          goto LABEL_44;
      }
    }
    else
    {
      v38 = *(uint64_t **)(a1 + 712);
    }
  }
  else
  {
LABEL_44:
    v38 = (uint64_t *)(v34 + 32 * v35);
  }
  v39 = (uint64_t *)(v34 + 32 * v35);
  if (v38 == v39)
    goto LABEL_79;
  do
  {
    v40 = v38[3];
    if ((~*(_DWORD *)(*v11 + 8 * v40) & 7) != 0)
    {
      v42 = *v38;
      v41 = v38[1];
      *(_QWORD *)v124 = 0;
      if (sub_22F12A59C(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 104), v42, v41, v124))
      {
        v43 = *(_QWORD *)(*(_QWORD *)v124 + 16);
        v44 = *(_QWORD *)(*(_QWORD *)v124 + 32);
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      if (v38[2] != v44
        || (sub_22F12F104((uint64_t)v124, *(_QWORD *)(a1 + 760), *(_DWORD *)(a1 + 776), v40), v125)
        || v126)
      {
        sub_22F12D0AC((uint64_t *)v124, a1, v42, v38[2], v43, v44);
        if (*(_QWORD *)v124 || *(_OWORD *)&v124[8] != 0)
        {
          v105[0] = v40;
          v45 = *(_DWORD *)(a1 + 776);
          if (v45)
          {
            v46 = *(_QWORD *)(a1 + 760);
            v47 = v45 - 1;
            v48 = v47 & (37 * v40);
            v49 = *(_QWORD *)(v46 + ((unint64_t)v48 << 6));
            if (v49 == v40)
              goto LABEL_58;
            v59 = 1;
            while (v49 != -1)
            {
              v60 = v48 + v59++;
              v48 = v60 & v47;
              v49 = *(_QWORD *)(v46 + ((unint64_t)v48 << 6));
              if (v49 == v40)
                goto LABEL_58;
            }
          }
          v61 = sub_22F40C144(*(_QWORD *)a1, v42);
          sub_22F12EBC4(a1 + 760, v105)[6] = v61;
          v62 = *(_QWORD *)(sub_22EFD7558(v61) & 0xFFFFFFFFFFFFFFF0);
          sub_22F12EBC4(a1 + 760, v105)[7] = v62;
LABEL_58:
          v50 = sub_22F12EBC4(a1 + 760, v105);
          *(_OWORD *)(v50 + 1) = *(_OWORD *)v124;
          v50[3] = *(_QWORD *)&v124[16];
          if ((*(_DWORD *)(v42 + 28) & 0x7F) != 0x39)
            goto LABEL_62;
          v51 = v40 + 1;
          v105[0] = v40 + 1;
          v52 = *(_DWORD *)(a1 + 776);
          if (v52)
          {
            v53 = *(_QWORD *)(a1 + 760);
            v54 = v52 - 1;
            v55 = v54 & (37 * v51);
            v56 = *(_QWORD *)(v53 + ((unint64_t)v55 << 6));
            if (v56 == v51)
            {
LABEL_61:
              v57 = sub_22F12EBC4(a1 + 760, v105);
              *(_OWORD *)(v57 + 1) = *(_OWORD *)v124;
              v57[3] = *(_QWORD *)&v124[16];
              goto LABEL_62;
            }
            v63 = 1;
            while (v56 != -1)
            {
              v64 = v55 + v63++;
              v55 = v64 & v54;
              v56 = *(_QWORD *)(v53 + ((unint64_t)v55 << 6));
              if (v56 == v51)
                goto LABEL_61;
            }
          }
          v65 = sub_22F40C144(*(_QWORD *)a1, v42);
          sub_22F12EBC4(a1 + 760, v105)[6] = v65;
          v66 = *(_QWORD *)(sub_22EFD7558(v65) & 0xFFFFFFFFFFFFFFF0);
          sub_22F12EBC4(a1 + 760, v105)[7] = v66;
          goto LABEL_61;
        }
      }
    }
LABEL_62:
    v58 = v38 + 4;
    v38 = v36;
    if (v58 != v36)
    {
      v38 = v58;
      while ((*v38 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v38 += 4;
        if (v38 == v36)
        {
          v38 = v36;
          break;
        }
      }
    }
  }
  while (v38 != v39);
  v33 = *(_DWORD *)(a1 + 720);
LABEL_79:
  if (v33)
  {
    v67 = *(unsigned int *)(a1 + 728);
    v68 = *(llvm **)(a1 + 712);
    if (v67 > 4 * v33 && v67 > 0x40)
    {
      v69 = (llvm *)((char *)v68 + 32 * v67);
      v70 = 1 << (33 - __clz(v33 - 1));
      if (v70 <= 64)
        v71 = 64;
      else
        v71 = v70;
      goto LABEL_88;
    }
LABEL_92:
    if ((_DWORD)v67)
    {
      v72 = 32 * v67;
      do
      {
        *(_QWORD *)v68 = -4096;
        v68 = (llvm *)((char *)v68 + 32);
        v72 -= 32;
      }
      while (v72);
    }
    *(_QWORD *)(a1 + 720) = 0;
  }
  else if (*(_DWORD *)(a1 + 724))
  {
    v67 = *(unsigned int *)(a1 + 728);
    v68 = *(llvm **)(a1 + 712);
    if (v67 <= 0x40)
      goto LABEL_92;
    v71 = 0;
    v69 = (llvm *)((char *)v68 + 32 * v67);
LABEL_88:
    if (v71 == (_DWORD)v67)
    {
      *(_QWORD *)(a1 + 720) = 0;
      do
      {
        *(_QWORD *)v68 = -4096;
        v68 = (llvm *)((char *)v68 + 32);
      }
      while (v68 != v69);
    }
    else
    {
      llvm::deallocate_buffer(v68, (void *)(32 * v67));
      if (v71)
      {
        v82 = (4 * v71 / 3u + 1) | ((unint64_t)(4 * v71 / 3u + 1) >> 1);
        v83 = v82 | (v82 >> 2) | ((v82 | (v82 >> 2)) >> 4);
        LODWORD(v83) = (((v83 | (v83 >> 8)) >> 16) | v83 | (v83 >> 8)) + 1;
        *(_DWORD *)(a1 + 728) = v83;
        v84 = (_QWORD *)MEMORY[0x23489D23C](32 * v83, 8);
        *(_QWORD *)(a1 + 712) = v84;
        *(_QWORD *)(a1 + 720) = 0;
        v85 = *(unsigned int *)(a1 + 728);
        if ((_DWORD)v85)
        {
          v86 = 32 * v85;
          do
          {
            *v84 = -4096;
            v84 += 4;
            v86 -= 32;
          }
          while (v86);
        }
      }
      else
      {
        *(_QWORD *)(a1 + 712) = 0;
        *(_QWORD *)(a1 + 720) = 0;
        *(_DWORD *)(a1 + 728) = 0;
      }
    }
  }
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 32))
  {
    v77 = *(_QWORD *)(a1 + 760);
    v78 = *(unsigned int *)(a1 + 776);
    v79 = (unint64_t *)(v77 + (v78 << 6));
    if (*(_DWORD *)(a1 + 768))
    {
      if ((_DWORD)v78)
      {
        v80 = v78 << 6;
        v81 = *(unint64_t **)(a1 + 760);
        while (*v81 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v81 += 8;
          v80 -= 64;
          if (!v80)
            goto LABEL_117;
        }
      }
      else
      {
        v81 = *(unint64_t **)(a1 + 760);
      }
    }
    else
    {
LABEL_117:
      v81 = (unint64_t *)(v77 + (v78 << 6));
    }
    v87 = (unint64_t *)(v77 + ((unint64_t)v78 << 6));
    if (v81 != v87)
    {
      while (2)
      {
        v88 = *(_QWORD *)(*v11 + 8 * *v81);
        if ((v88 & 6) == 4)
        {
          v89 = v88 & 0xFFFFFFFFFFFFFFF8;
          v90 = *(_WORD *)((v88 & 0xFFFFFFFFFFFFFFF8) + 80) & 0x7F;
          v91 = -40;
          if (v90 > 70)
          {
            if (v90 != 83)
            {
              if (v90 == 71)
              {
                v91 = -56;
              }
              else if (v90 != 81)
              {
                goto LABEL_137;
              }
            }
          }
          else
          {
            if (v90 > 0x18)
              goto LABEL_136;
            if (v90 == 16)
              goto LABEL_129;
            if (((1 << v90) & 0x1066) == 0)
            {
              if (v90 == 24)
              {
LABEL_129:
                v91 = -48;
              }
              else
              {
LABEL_136:
                if (v90 == 70)
                {
                  v91 = -64;
                }
                else
                {
LABEL_137:
                  v92 = v90 - 52;
                  if ((v90 - 33) >= 5)
                    v93 = -48;
                  else
                    v93 = -64;
                  if (v92 >= 6)
                    v91 = v93;
                  else
                    v91 = -72;
                }
              }
            }
          }
          v94 = *(_QWORD *)(v89 + 72 + v91 + 16);
          v95 = (_QWORD *)(v94 & 0xFFFFFFFFFFFFFFF8);
          if ((v94 & 4) != 0)
            v95 = (_QWORD *)*v95;
          if (v95)
            v96 = v95 - 8;
          else
            v96 = 0;
          if (v96 == *(_QWORD **)(a1 + 8))
            sub_22F12D62C(a1, v89, v81 + 1);
        }
        v97 = v81 + 8;
        while (v97 != v79)
        {
          v98 = *v97;
          v97 += 8;
          if (v98 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v81 = v97 - 8;
            goto LABEL_155;
          }
        }
        v81 = v79;
LABEL_155:
        if (v81 == v87)
          break;
        continue;
      }
    }
  }
  v73 = v104;
  while (1)
  {
    v74 = (*(_DWORD *)(a1 + 880) - 1);
    *(_QWORD *)v124 = v73;
    *(_QWORD *)&v124[8] = v102;
    *(_QWORD *)&v124[16] = ((unint64_t)(v103 - v99) << 32) | v74;
    sub_22F40CC00((uint64_t)v105, a1 + 688, (uint64_t *)v124, &v124[16]);
    v75 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 40), v73) + 72) + 48);
    v73 = v75 & 0xFFFFFFFFFFFFFFF8;
    if ((v75 & 0xFFFFFFFFFFFFFFF8) == 0)
      break;
    if ((v75 & 4) != 0)
    {
      v76 = sub_22F0C975C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      if (sub_22F2500F4(v76, v73) != v102)
        break;
    }
  }
  sub_22F12C648((_QWORD *)a1, v104, v100, a4, v102);
  if (v111 != v113)
    free(v111);
  if ((v106 & 1) == 0)
    llvm::deallocate_buffer(v107[0], (void *)(8 * LODWORD(v107[1])));
  llvm::deallocate_buffer(v122[0], (void *)(16 * v123));
  if (v119 != &v121)
    free(v119);
  if (v118 != (void *)v117[64])
    free(v118);
  if (v115 != v117)
    free(v115);
}

uint64_t sub_22F12B9E0(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v8 = sub_22F0C975C(a1[5], a2);
  v9 = (const void *)(*(_QWORD *)(*(_QWORD *)(v8 + 72) + 48) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
    v10 = (*(_QWORD *)(*(_QWORD *)(v8 + 72) + 48) & 4) == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = a1[4];
    if (a1[1] == v11 || (v22 = sub_22F0C975C(a1[5], v11), sub_22F2500F4(v22, (uint64_t)v9) == a3))
      sub_22E3BA850((uint64_t)(a1 + 101), v9);
  }
  result = sub_22E46A3A0(a2);
  if (result != v13)
  {
    v14 = result;
    v15 = v13;
    do
    {
      v16 = *(_QWORD *)(**(_QWORD **)(v14 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
        v16 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v14 + 16));
      v17 = sub_22F10C2A4(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0));
      if (v17)
      {
        if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 >= 3)
          v18 = 0;
        else
          v18 = (const void *)v17;
      }
      else
      {
        v18 = 0;
      }
      if ((*(_BYTE *)(v14 + 12) & 1) != 0)
      {
        result = sub_22E3BA850(a4, v18);
        if (!v20)
          goto LABEL_20;
        v21 = sub_22F0C975C(a1[5], a1[4]);
        v19 = sub_22F2500F4(v21, (uint64_t)v18);
      }
      else
      {
        v19 = sub_22E46A3EC(v8, (uint64_t)v18) + a3;
      }
      result = sub_22F12B9E0(a1, v18, v19, a4);
LABEL_20:
      v14 += 24;
    }
    while (v14 != v15);
  }
  return result;
}

unint64_t sub_22F12BB50(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = sub_22E46A3A0(a2);
  if (result != v6)
  {
    v7 = result;
    v8 = v6;
    do
    {
      v9 = *(_QWORD *)(**(_QWORD **)(v7 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
        v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v7 + 16));
      v10 = sub_22F10C2A4(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (v10)
      {
        if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 >= 3)
          v11 = 0;
        else
          v11 = (uint64_t *)v10;
      }
      else
      {
        v11 = 0;
      }
      if ((*(_BYTE *)(v7 + 12) & 1) != 0 && sub_22E463414((uint64_t)v11))
      {
        v12 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 101), v11);
        v13 = a1[102];
        v14 = v13 == a1[101] ? 828 : 824;
        if (v12 == (void **)(v13 + 8 * *(unsigned int *)((char *)a1 + v14)))
        {
          sub_22E3BA850(a3, v11);
          if (v15)
          {
            v16 = sub_22F0C975C(a1[5], a1[1]);
            v17 = sub_22F2500F4(v16, (uint64_t)v11);
            v18 = sub_22F0C975C(a1[5], a1[4]);
            v19 = sub_22F2500F4(v18, (uint64_t)v11);
            sub_22F12AEC8((uint64_t)a1, (unint64_t)v11, v17, 1u, 1, v19);
          }
        }
      }
      result = sub_22E3CD31C((uint64_t *)(v11[13] + 96), v11[13]);
      if (*(_DWORD *)(v11[16] + 20))
        result = sub_22F12BB50(a1, v11, a3);
      v7 += 24;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_22F12BCD8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t *v22;
  const std::nothrow_t *v23;
  unint64_t v24;
  unint64_t *v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t *i;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int64x2_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v84;
  __int128 v86;
  uint64_t v87;
  uint64_t v88[3];
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *__src;
  uint64_t v93;
  _BYTE v94[32];
  void *v95;
  uint64_t v96;
  _BYTE v97[64];
  _BYTE v98[24];
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  void *v102;
  uint64_t v103;
  _QWORD v104[11];

  v104[8] = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 40), a2) + 72) + 48);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v98 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = a3;
    v15 = a4;
    if ((v12 & 4) != 0)
    {
      v16 = sub_22F0C975C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
      v14 = sub_22F2500F4(v16, v13);
      v17 = sub_22F0C975C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      v15 = sub_22F2500F4(v17, v13);
    }
    sub_22F12BCD8(a1, v13, v14, v15, a5, a6, a7);
    sub_22F40C554(a7, (uint64_t *)v98);
  }
  v82 = a6;
  v95 = v97;
  v96 = 0x800000000;
  __src = v94;
  v93 = 0x400000000;
  v18 = sub_22E488FF8(a2);
  if (v18 != v19)
  {
    v27 = v18;
    v28 = v19;
    v81 = a3;
    do
    {
      v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27);
      if (((*(_BYTE *)(v29 + 82) & 0xC) != 0 || sub_22EFD7260(v29))
        && (*(_QWORD *)(v27 + 80) & 0xC0000000) != 0x80000000)
      {
        v30 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27);
        *(_QWORD *)v98 = 0;
        if (sub_22F12A59C(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 104), v30, a3, v98))
        {
          v31 = *(_QWORD *)(*(_QWORD *)v98 + 16);
          v32 = *(_QWORD *)(*(_QWORD *)v98 + 32);
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
        v33 = sub_22F12CBC0(v30, a7);
        v89 = v33;
        if (v33)
        {
          v34 = v33;
          sub_22F12CD80(v98, *(_QWORD *)(a1 + 40), v30, *(_QWORD *)(v33 + 48));
          if (!*(_QWORD *)&v98[16] && !*(_QWORD *)&v98[8])
          {
            v37 = *(_QWORD *)a1;
            *(_QWORD *)v98 = v30;
            sub_22F37065C((uint64_t *)(v37 + 112), v98)[1] = v34;
            *(_QWORD *)v98 = 0;
            if (sub_22EEDDD4C(*(_QWORD *)(a1 + 712), *(_DWORD *)(a1 + 728), v34, v98))
            {
              v38 = *(_QWORD *)(*(_QWORD *)v98 + 24);
              v39 = a1 + 712;
            }
            else
            {
              v40 = sub_22F12D928(a1 + 712, (uint64_t *)&v89, *(_QWORD **)v98);
              v39 = a1 + 712;
              a3 = v81;
              v38 = 0;
              *v40 = v34;
              v40[1] = 0;
              v40[2] = 0;
              v40[3] = 0;
            }
            *(_QWORD *)v98 = v30;
            *(_QWORD *)&v98[8] = a3;
            *(_QWORD *)&v98[16] = a4;
            v99.i64[0] = v38;
            sub_22F12D010((uint64_t)&v90, v39, (uint64_t)v98);
            *(_QWORD *)v98 = 0;
            if (sub_22EEDDD4C(*(_QWORD *)(a1 + 712), *(_DWORD *)(a1 + 728), v34, v98))
            {
              **(_QWORD **)v98 = -8192;
              *(int32x2_t *)(a1 + 720) = vadd_s32(*(int32x2_t *)(a1 + 720), (int32x2_t)0x1FFFFFFFFLL);
            }
            if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 32))
              goto LABEL_28;
            if (v34 == v30)
              goto LABEL_28;
            sub_22F12D0AC((uint64_t *)&v90, a1, v34, a4, v31, v32);
            if (!*((_QWORD *)&v90 + 1))
              goto LABEL_28;
            v41 = *(_WORD *)(v31 + 80) & 0x7F;
            v42 = -40;
            if (v41 > 0x46)
            {
              if (v41 != 83)
              {
                if (v41 == 71)
                {
                  v42 = -56;
                }
                else if (v41 != 81)
                {
                  goto LABEL_51;
                }
              }
            }
            else
            {
              if (v41 > 0x18)
                goto LABEL_50;
              if (v41 == 16)
                goto LABEL_43;
              if (((1 << v41) & 0x1066) == 0)
              {
                if (v41 != 24)
                {
LABEL_50:
                  if (v41 == 70)
                    goto LABEL_53;
LABEL_51:
                  if (v41 - 52 < 6)
                  {
                    v42 = -72;
                    goto LABEL_55;
                  }
                  if (v41 - 33 < 5)
                  {
LABEL_53:
                    v42 = -64;
                    goto LABEL_55;
                  }
                }
LABEL_43:
                v42 = -48;
              }
            }
LABEL_55:
            v43 = *(_QWORD *)(v31 + 72 + v42 + 16);
            v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
            if ((v43 & 4) != 0)
              v44 = (_QWORD *)*v44;
            if (v44)
              v45 = v44 - 8;
            else
              v45 = 0;
            if (v45 == *(_QWORD **)(a1 + 8))
            {
              sub_22F12CD80(v88, *(_QWORD *)(a1 + 40), v31, *(_QWORD *)(v30 + 48));
              v46 = sub_22F12D59C((uint64_t *)a1, v88);
              v48 = v47;
              v49 = *(_QWORD *)(sub_22EFD7558(v34) & 0xFFFFFFFFFFFFFFF0);
              *(_OWORD *)v98 = v90;
              *(_QWORD *)&v98[16] = v91;
              v99.i64[0] = v46;
              v99.i64[1] = v48;
              v100.i64[0] = 0;
              v100.i64[1] = v49;
              sub_22F12D62C(a1, v31, v98);
            }
            goto LABEL_28;
          }
        }
        if ((*(_BYTE *)(v30 + 29) & 2) != 0)
        {
          v36 = v93;
          if (v93 >= (unint64_t)HIDWORD(v93))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v93;
          }
          *((_QWORD *)__src + v36) = v30;
          LODWORD(v93) = v93 + 1;
        }
        else
        {
          v35 = v96;
          if (v96 >= (unint64_t)HIDWORD(v96))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v35 = v96;
          }
          *((_QWORD *)v95 + v35) = v30;
          LODWORD(v96) = v96 + 1;
        }
      }
      do
LABEL_28:
        v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v27 && (*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 > 3);
    }
    while (v27 != v28);
  }
  v20 = __src;
  v21 = v93;
  v22 = (unint64_t *)((char *)__src + 8 * v93);
  if (v93 < 0x81)
  {
LABEL_10:
    sub_22F12DBC4((uint64_t)v20, v22, v21, 0, 0);
  }
  else
  {
    v23 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v24 = v93;
    while (1)
    {
      v25 = (unint64_t *)operator new(8 * v24, v23);
      if (v25)
        break;
      v26 = v24 > 1;
      v24 >>= 1;
      if (!v26)
        goto LABEL_10;
    }
    v50 = v25;
    sub_22F12DBC4((uint64_t)v20, v22, v21, v25, v24);
    operator delete(v50);
  }
  sub_22F2633B0((uint64_t)&v95, __src, (_BYTE *)__src + 8 * v93);
  if ((_DWORD)v96)
  {
    v51 = (uint64_t *)v95;
    v84 = (uint64_t *)((char *)v95 + 8 * v96);
    v80 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      v52 = *v51;
      *(_QWORD *)v98 = 0;
      v53 = 0;
      if (sub_22F12A59C(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 104), v52, a3, v98))
        v53 = *(_QWORD *)(*(_QWORD *)v98 + 16);
      v54 = *(unsigned int *)(a1 + 168);
      *(_QWORD *)v98 = v52;
      *(_QWORD *)&v98[8] = a3;
      *(_QWORD *)&v98[16] = a4;
      v99.i64[0] = v54;
      sub_22F12D010((uint64_t)&v90, a1 + 712, (uint64_t)v98);
      if (a4 == a6)
        goto LABEL_92;
      v55 = *(_WORD *)(v53 + 80) & 0x7F;
      v56 = -40;
      if (v55 > 0x46)
      {
        if (v55 == 83)
          goto LABEL_86;
        if (v55 == 71)
        {
          v56 = -56;
          goto LABEL_86;
        }
        if (v55 != 81)
          goto LABEL_80;
      }
      else
      {
        if (v55 > 0x18)
          goto LABEL_79;
        if (v55 == 16)
          goto LABEL_72;
        if (((1 << v55) & 0x1066) == 0)
        {
          if (v55 == 24)
          {
LABEL_72:
            v56 = -48;
            goto LABEL_86;
          }
LABEL_79:
          if (v55 == 70)
          {
            v56 = -64;
            goto LABEL_86;
          }
LABEL_80:
          v57 = v55 - 52;
          v58 = v55 - 33 >= 5;
          v59 = -64;
          if (v58)
            v59 = -48;
          v58 = v57 >= 6;
          v56 = -72;
          if (v58)
            v56 = v59;
        }
      }
LABEL_86:
      v60 = *(_QWORD *)(v53 + 72 + v56 + 16);
      v61 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8);
      if ((v60 & 4) != 0)
        v61 = (_QWORD *)*v61;
      if (v61)
        v62 = v61 - 8;
      else
        v62 = 0;
      if (v62 != (_QWORD *)a5)
      {
        *(_QWORD *)v98 = 1;
        *(int64x2_t *)&v98[8] = v80;
        v99 = v80;
        v100 = v80;
        v101 = v80;
        v102 = v104;
        v103 = 0x800000000;
        v75 = a5;
        *(_QWORD *)&v90 = a5;
        for (i = (uint64_t *)&v90; ; i = (uint64_t *)&v89)
        {
          sub_22F40C554((uint64_t)v98, i);
          v77 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 40), v75) + 72) + 48);
          v75 = v77 & 0xFFFFFFFFFFFFFFF8;
          v89 = v77 & 0xFFFFFFFFFFFFFFF8;
          if ((v77 & 0xFFFFFFFFFFFFFFF8) == 0)
            break;
          if ((v77 & 4) != 0)
          {
            v78 = sub_22F0C975C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
            if (sub_22F2500F4(v78, v75) != a6)
              break;
          }
        }
        v79 = sub_22F12EA74(v53, (uint64_t)v98);
        if (v102 != v104)
          free(v102);
        if ((v98[0] & 1) == 0)
          llvm::deallocate_buffer(*(llvm **)&v98[8], (void *)(8 * *(unsigned int *)&v98[16]));
        if ((v79 & 1) == 0)
        {
          v73 = v53 | 7;
          goto LABEL_104;
        }
      }
LABEL_92:
      if ((*(_BYTE *)(v53 + 82) & 8) != 0)
      {
        v64 = 0;
        v63 = 0uLL;
      }
      else
      {
        sub_22F12CD80(v98, *(_QWORD *)(a1 + 40), v53, *(_QWORD *)(v52 + 48));
        v63 = *(_OWORD *)v98;
        v64 = *(_QWORD *)&v98[16];
      }
      v86 = v63;
      v87 = v64;
      v65 = sub_22F12D59C((uint64_t *)a1, (uint64_t *)&v86);
      if (v65 | v66)
      {
        v67 = v65;
        v68 = v66;
        *(_QWORD *)v98 = *(unsigned int *)(a1 + 168);
        sub_22F12EBC4(a1 + 760, (uint64_t *)v98)[6] = v52;
        v69 = *(_QWORD *)(sub_22EFD7558(v52) & 0xFFFFFFFFFFFFFFF0);
        *(_QWORD *)v98 = *(unsigned int *)(a1 + 168);
        sub_22F12EBC4(a1 + 760, (uint64_t *)v98)[7] = v69;
        a6 = v82;
        if ((*(_DWORD *)(v53 + 28) & 0x7F) == 0x39)
        {
LABEL_99:
          v70 = *(unsigned int *)(a1 + 168);
          if (v70 >= *(unsigned int *)(a1 + 172))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v70 = *(unsigned int *)(a1 + 168);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v70) = v53 | 5;
          v71 = *(_DWORD *)(a1 + 172);
          v72 = *(_DWORD *)(a1 + 168) + 1;
          *(_DWORD *)(a1 + 168) = v72;
          v73 = v53 | 6;
          goto LABEL_105;
        }
        *(_QWORD *)v98 = *(unsigned int *)(a1 + 168);
        v74 = sub_22F12EBC4(a1 + 760, (uint64_t *)v98);
        v74[4] = v67;
        v74[5] = v68;
      }
      else if ((*(_DWORD *)(v53 + 28) & 0x7F) == 0x39)
      {
        goto LABEL_99;
      }
      v73 = v53 | 4;
LABEL_104:
      v72 = *(_DWORD *)(a1 + 168);
      v71 = *(_DWORD *)(a1 + 172);
LABEL_105:
      if (v72 >= v71)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v72 = *(_DWORD *)(a1 + 168);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v72) = v73;
      ++*(_DWORD *)(a1 + 168);
      ++v51;
    }
    while (v51 != v84);
  }
  if (__src != v94)
    free(__src);
  if (v95 != v97)
    free(v95);
}

uint64_t sub_22F12C648(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = sub_22F0C975C(a1[5], a2);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 48);
  result = sub_22E46A3A0(a2);
  if (result != v13)
  {
    v14 = result;
    v15 = v13;
    v16 = v11 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((*(_BYTE *)(v14 + 12) & 1) == 0)
      {
        v17 = *(_QWORD *)(**(_QWORD **)(v14 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
          v17 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v14 + 16));
        v18 = sub_22F10C2A4(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
        if (v18)
        {
          if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 >= 3)
            v19 = 0;
          else
            v19 = v18;
        }
        else
        {
          v19 = 0;
        }
        result = sub_22E463414(v19);
        if ((_DWORD)result)
        {
          if (a1[1] == a1[4]
            || (a4 & 1) != 0
            || (result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104)),
                *(_DWORD *)(*(_QWORD *)(v19 + 128) + 20)))
          {
            v20 = sub_22E46A3EC(v10, v19);
            v21 = v20 + a3;
            v22 = v20 + a5;
            if (v19 == v16)
              result = sub_22F12C648(a1, v16, v21, a4, v22);
            else
              result = sub_22F12AEC8(a1, v19, v21, a4, 0, v22);
          }
        }
      }
      v14 += 24;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t sub_22F12C7A4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 280 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 280 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F12C83C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  llvm *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  llvm *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;

  v27 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(llvm **)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = (v12 + 1);
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = (llvm *)MEMORY[0x23489D23C]((_QWORD *)v13, 280 * v13, 8);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = 280 * v15;
      do
      {
        *(_QWORD *)v14 = -4096;
        v14 = (llvm *)((char *)v14 + 280);
        v16 -= 280;
      }
      while (v16);
    }
    if (v6)
    {
      v17 = (char *)v9 + 24;
      v18 = 280 * v6;
      while (1)
      {
        v19 = *((_QWORD *)v17 - 3);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_30:
        v17 += 280;
        v18 -= 280;
        if (!v18)
          goto LABEL_31;
      }
      v28 = 0;
      sub_22F12C7A4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v28);
      v20 = v28;
      *v28 = v19;
      v21 = v20 + 3;
      v20[1] = (uint64_t)(v20 + 3);
      v20[2] = 0x1000000000;
      v22 = (char *)*((_QWORD *)v17 - 2);
      if (v17 - 24 == (char *)v20 || (v23 = *((_DWORD *)v17 - 2)) == 0)
      {
LABEL_28:
        ++*(_DWORD *)(a1 + 8);
        if (v17 != v22)
          free(v22);
        goto LABEL_30;
      }
      if (v17 != v22)
      {
        v20[1] = (uint64_t)v22;
        *((_DWORD *)v20 + 4) = v23;
        *((_DWORD *)v20 + 5) = *((_DWORD *)v17 - 1);
        *((_QWORD *)v17 - 2) = v17;
        *((_DWORD *)v17 - 1) = 0;
        v22 = v17;
LABEL_27:
        *((_DWORD *)v17 - 2) = 0;
        goto LABEL_28;
      }
      if (v23 < 0x11)
      {
        v24 = *((unsigned int *)v17 - 2);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *((unsigned int *)v17 - 2);
        v22 = (char *)*((_QWORD *)v17 - 2);
        if (!(_DWORD)v24)
        {
LABEL_26:
          *((_DWORD *)v20 + 4) = v23;
          goto LABEL_27;
        }
        v21 = (void *)v20[1];
      }
      memcpy(v21, v22, 16 * v24);
      v22 = (char *)*((_QWORD *)v17 - 2);
      goto LABEL_26;
    }
LABEL_31:
    llvm::deallocate_buffer(v9, (void *)(280 * v6));
    v14 = *(llvm **)a1;
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v25 = *(_DWORD *)(a1 + 16);
    if (v25)
    {
      v26 = 0;
      do
      {
        *(_QWORD *)((char *)v14 + v26) = -4096;
        v26 += 280;
      }
      while (280 * v25 != v26);
    }
  }
  sub_22F12C7A4((uint64_t)v14, v25, *a2, &v27);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v27;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F12CAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *(uint64_t **)a2;
        v8 = *(_QWORD *)a2 + 16 * v4;
        v9 = *(_QWORD **)a1;
        do
        {
          v10 = *v7;
          v11 = v7[1];
          v7 += 2;
          *v9 = v10;
          v9[1] = v11;
          v9 += 2;
        }
        while (v7 != (uint64_t *)v8);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v12 = *(uint64_t **)a2;
          v13 = *(_QWORD *)a2 + 16 * v5;
          v14 = *(_QWORD **)a1;
          do
          {
            v15 = *v12;
            v16 = v12[1];
            v12 += 2;
            *v14 = v15;
            v14[1] = v16;
            v14 += 2;
          }
          while (v12 != (uint64_t *)v13);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = 0;
        v6 = *(unsigned int *)(a2 + 8);
      }
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

unint64_t sub_22F12CBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[64];
  char **v29;

  v24 = v28;
  v25 = v28;
  v26 = 8;
  v27 = 0;
  v29 = &v24;
  sub_22F12D72C(a1, (uint64_t *)&v29);
  v3 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v5 = (uint64_t *)((char *)&v26 + 4);
    v6 = v4 + 8 * v3;
    if (v25 != v24)
      v5 = &v26;
    v7 = *(unsigned int *)v5;
    v8 = &v25[8 * v7];
    do
    {
      v10 = *(_QWORD **)(v6 - 8);
      v6 -= 8;
      v9 = v10;
      v11 = (unint64_t *)v25;
      if ((_DWORD)v7)
      {
        v12 = 8 * v7;
        v11 = (unint64_t *)v25;
        while (*v11 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v11;
          v12 -= 8;
          if (!v12)
            goto LABEL_41;
        }
      }
      if (v11 == (unint64_t *)v8)
        continue;
      v13 = *v11;
LABEL_12:
      v14 = *(_WORD *)(v13 + 80) & 0x7F;
      v15 = -40;
      if (v14 > 0x46)
      {
        if (v14 != 83)
        {
          if (v14 == 71)
          {
            v15 = -56;
          }
          else if (v14 != 81)
          {
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (v14 > 0x18)
          goto LABEL_22;
        if (v14 == 16)
          goto LABEL_15;
        if (((1 << v14) & 0x1066) != 0)
          goto LABEL_29;
        if (v14 == 24)
        {
LABEL_15:
          v15 = -48;
        }
        else
        {
LABEL_22:
          if (v14 != 70)
          {
LABEL_23:
            v16 = v14 - 52;
            if (v14 - 33 >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v15 = v17;
            else
              v15 = -72;
            goto LABEL_29;
          }
          v15 = -64;
        }
      }
LABEL_29:
      v18 = *(_QWORD *)(v13 + 72 + v15 + 16);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
      if ((v18 & 4) != 0)
        v19 = (_QWORD *)*v19;
      if (v19)
        v20 = v19 - 8;
      else
        v20 = 0;
      if (v20 == v9)
        goto LABEL_43;
      v21 = v11 + 1;
      while (v21 != (unint64_t *)v8)
      {
        v22 = *v21++;
        v13 = v22;
        if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v11 = v21 - 1;
          goto LABEL_12;
        }
      }
LABEL_41:
      ;
    }
    while (v6 != v4);
  }
  v13 = 0;
LABEL_43:
  if (v25 != v24)
    free(v25);
  return v13;
}

void sub_22F12CD80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  _QWORD v36[5];
  void *v37;
  uint64_t v38;
  _DWORD v39[26];
  uint64_t v40;
  __int16 v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + 16) - 27 > 0xFFFFFFFD;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) - 27 > 0xFFFFFFFD;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  v11 = *(_QWORD *)((*(_QWORD *)(v9 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
  v12 = *(_QWORD *)(v9 + 24) & 7 | v11;
  v13 = *(_QWORD *)((*(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
  v14 = *(_QWORD *)(v7 + 24) & 7 | v13;
  if (v12 == v14)
    goto LABEL_27;
  v15 = v11 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(*(_QWORD *)v15 + 16) & 0xFE) == 0x28)
  {
    if (v12 < 0x10)
      v12 = 0;
    v25 = v12;
    v17 = sub_22F31295C(&v25);
    v24 = 0;
    if (v14 >= 0x10)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        v24 = v14;
      else
        v24 = 0;
    }
    v25 = v24;
    v18 = sub_22F31295C(&v25);
  }
  else
  {
    v16 = v12 >= 0x10 ? v15 : 0;
    v17 = *(_QWORD *)(*(_QWORD *)v16 + 32);
    v18 = *(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 32);
  }
  v19 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  v20 = v18 & 0xFFFFFFFFFFFFFFF0;
  if ((v19 & 0xFFFFFFFFFFFFFFF0) == (*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    v21 = sub_22F114198(*(_QWORD *)(v19 + 24));
    v22 = sub_22F114198(*(_QWORD *)(*(_QWORD *)v20 + 24));
    v25 = 0;
    v26 = (uint64_t)&v26;
    v27 = &v26;
    v28 = 0;
    v29 = 1;
    for (i = 40; i != 168; i += 16)
      *(unint64_t *)((char *)&v25 + i) = 0;
    v32 = v36;
    v33 = v36;
    v34 = 4;
    v35 = 0;
    v36[4] = 0;
    v37 = v39;
    v38 = 0x400000000;
    v39[24] = 0;
    v40 = 0;
    v41 = 256;
    v42 = 0;
    sub_22EFB36DC(v21, v22, &v25);
    sub_22F12D794((uint64_t)a1, a2, v21, (uint64_t)(v27 + 2));
    if (v37 != v39)
      free(v37);
    if (v33 != v32)
      free(v33);
    if ((v29 & 1) == 0)
      llvm::deallocate_buffer(v30, (void *)(16 * v31));
    sub_22E687D9C(&v26);
  }
}

_QWORD *sub_22F12D010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  _QWORD *result;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  if (sub_22EEDDD4C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, &v10))
  {
    v6 = 0;
    result = v10;
  }
  else
  {
    result = sub_22F12D928(a2, (uint64_t *)a3, v10);
    *result = *(_QWORD *)a3;
    v8 = *(_OWORD *)(a3 + 8);
    result[3] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(result + 1) = v8;
    v6 = 1;
  }
  v9 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

void sub_22F12D0AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t i;
  unint64_t v26;
  uint64_t *j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  llvm *v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[5];
  void *v56;
  uint64_t v57;
  _DWORD v58[26];
  uint64_t v59;
  __int16 v60;
  char v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  llvm *v66;
  unsigned int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a5 + 80);
  if ((v6 & 0x80000) != 0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v11 = *(_WORD *)(a3 + 80) & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 == 83)
      goto LABEL_19;
    if (v11 == 71)
    {
      v12 = -56;
      goto LABEL_19;
    }
    if (v11 != 81)
      goto LABEL_14;
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_13;
    if (v11 == 16)
    {
LABEL_5:
      v12 = -48;
      goto LABEL_19;
    }
    if (((1 << v11) & 0x1066) == 0)
    {
      if (v11 == 24)
        goto LABEL_5;
LABEL_13:
      if (v11 == 70)
      {
        v12 = -64;
        goto LABEL_19;
      }
LABEL_14:
      v13 = v11 - 52;
      v14 = v11 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v12 = v15;
      else
        v12 = -72;
    }
  }
LABEL_19:
  v16 = *(_QWORD *)(a3 + 72 + v12 + 16);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v18 = (uint64_t)(v17 - 8);
  else
    v18 = 0;
  v19 = v6 & 0x7F;
  v20 = -40;
  if (v19 > 70)
  {
    if (v19 != 83)
    {
      if (v19 == 71)
      {
        v20 = -56;
        goto LABEL_40;
      }
      if (v19 == 81)
        goto LABEL_40;
      goto LABEL_35;
    }
  }
  else
  {
    if (v19 > 0x18)
      goto LABEL_34;
    if (v19 != 16)
    {
      if (((1 << v19) & 0x1066) != 0)
        goto LABEL_40;
      if (v19 != 24)
      {
LABEL_34:
        if (v19 == 70)
        {
          v20 = -64;
          goto LABEL_40;
        }
LABEL_35:
        v21 = v19 - 52;
        v14 = (v19 - 33) >= 5;
        v22 = -48;
        if (!v14)
          v22 = -64;
        if (v21 >= 6)
          v20 = v22;
        else
          v20 = -72;
        goto LABEL_40;
      }
    }
    v20 = -48;
  }
LABEL_40:
  v23 = *(_QWORD *)(a5 + 72 + v20 + 16);
  v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23 & 4) != 0)
    v24 = (_QWORD *)*v24;
  v44 = 0;
  v45 = (uint64_t)&v45;
  v46 = &v45;
  v47 = 0;
  v48 = (void *)1;
  for (i = 5; i != 21; i += 2)
    (&v44)[i] = 0;
  if (v24)
    v26 = (unint64_t)(v24 - 8);
  else
    v26 = 0;
  v51 = v55;
  v52 = v55;
  v53 = 4;
  v54 = 0;
  v55[4] = 0;
  v56 = v58;
  v57 = 0x400000000;
  v58[24] = 0;
  v59 = 0;
  v60 = 257;
  v61 = 1;
  sub_22EFB36DC(v26, v18, (unint64_t *)&v44);
  for (j = v46; ; j = (uint64_t *)j[1])
  {
    if (j == &v45)
    {
      v29 = 0;
      v32 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      goto LABEL_55;
    }
    sub_22F12D794((uint64_t)&v41, *(_QWORD *)(a2 + 40), v26, (uint64_t)(j + 2));
    v29 = v42;
    v28 = v43;
    v30 = a6;
    if (v42)
    {
      v31 = sub_22F0C975C(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 32));
      v30 = sub_22F2500F4(v31, v29);
    }
    if (v30 + v28 == a4)
      break;
  }
  v32 = -v28;
  v43 = -v28;
LABEL_55:
  if (v56 != v58)
    free(v56);
  if (v52 != v51)
    free(v52);
  if ((v48 & 1) == 0)
    llvm::deallocate_buffer(v49, (void *)(16 * v50));
  sub_22E687D9C(&v45);
  if (!v29 && !v32)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  a1[1] = 0;
  a1[2] = 0;
  if (v29)
  {
    v33 = *(_QWORD *)(a2 + 112);
    v44 = 0;
    v34 = sub_22F12C7A4(v33, *(_DWORD *)(a2 + 128), v29, &v44);
    v35 = v44;
    if ((v34 & 1) != 0)
    {
      v36 = (uint64_t **)(v44 + 1);
      v37 = *((unsigned int *)v44 + 4);
      if ((_DWORD)v37)
        goto LABEL_76;
    }
    else
    {
      v35 = sub_22F12C83C(a2 + 112, &v42, v44);
      *v35 = v29;
      *(_OWORD *)(v35 + 3) = 0u;
      v35[1] = v35 + 3;
      v36 = (uint64_t **)(v35 + 1);
      *(_OWORD *)(v35 + 5) = 0u;
      *(_OWORD *)(v35 + 7) = 0u;
      *(_OWORD *)(v35 + 9) = 0u;
      *(_OWORD *)(v35 + 11) = 0u;
      *(_OWORD *)(v35 + 13) = 0u;
      *(_OWORD *)(v35 + 15) = 0u;
      *(_OWORD *)(v35 + 17) = 0u;
      *(_OWORD *)(v35 + 19) = 0u;
      *(_OWORD *)(v35 + 21) = 0u;
      *(_OWORD *)(v35 + 23) = 0u;
      *(_OWORD *)(v35 + 25) = 0u;
      *(_OWORD *)(v35 + 27) = 0u;
      *(_OWORD *)(v35 + 29) = 0u;
      *(_OWORD *)(v35 + 31) = 0u;
      *(_OWORD *)(v35 + 33) = 0u;
      v35[2] = 0x1000000000;
    }
    sub_22F122E08((uint64_t)&v44, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8), 0, v29, 0, 1, 0);
    sub_22F12CAD4((uint64_t)v36, (uint64_t)&v64);
    llvm::deallocate_buffer(v66, (void *)(16 * v67));
    if (v64 != &v65)
      free(v64);
    if (v63 != v62)
      free(v63);
    if (v48 != &v50)
      free(v48);
    v37 = *((unsigned int *)v35 + 4);
    if (!(_DWORD)v37)
    {
LABEL_81:
      a1[1] = v37;
      goto LABEL_82;
    }
LABEL_76:
    v38 = *v36;
    v39 = (uint64_t)&(*v36)[2 * v37];
    while (!sub_22F12A4A4(*v38, a3))
    {
      v38 += 2;
      if (v38 == (uint64_t *)v39)
        goto LABEL_81;
    }
    v37 = v38[1];
    goto LABEL_81;
  }
LABEL_82:
  *a1 = v32;
}

uint64_t sub_22F12D59C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  if (a2[2])
  {
    if (!v3)
      return a2[2];
LABEL_5:
    v4 = *a2;
    if (*a2 == a1[1])
    {
      v6 = 0;
      v7 = v3;
      sub_22E46AA2C(a1 + 17, &v7, &v6);
    }
    else
    {
      sub_22F122BCC(*a1, v4, v3);
    }
    return a2[2];
  }
  if (v3)
    goto LABEL_5;
  return 0;
}

__n128 sub_22F12D62C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  __n128 result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = a2;
  v4 = sub_22F40C5E4(a1 + 784, &v16);
  v6 = v4;
  v7 = (uint64_t)(v4 + 1);
  v8 = v4[1];
  v9 = *((unsigned int *)v4 + 4);
  if ((_DWORD)v9)
  {
    v10 = 56 * v9;
    v11 = (_QWORD *)v4[1];
    while (!sub_22F40C9C8(v11, a3))
    {
      v11 += 7;
      v10 -= 56;
      if (!v10)
      {
        v11 = (_QWORD *)(v8 + 56 * v9);
        break;
      }
    }
  }
  else
  {
    v11 = (_QWORD *)v4[1];
  }
  if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v11 - v8) >> 3) == v9)
  {
    v12 = sub_22E47F7A8(v7, (unint64_t)a3);
    v13 = v6[1] + 56 * *((unsigned int *)v6 + 4);
    result = *(__n128 *)v12;
    v14 = *(_OWORD *)(v12 + 16);
    v15 = *(_OWORD *)(v12 + 32);
    *(_QWORD *)(v13 + 48) = *(_QWORD *)(v12 + 48);
    *(_OWORD *)(v13 + 16) = v14;
    *(_OWORD *)(v13 + 32) = v15;
    *(__n128 *)v13 = result;
    ++*((_DWORD *)v6 + 4);
  }
  return result;
}

uint64_t sub_22F12D72C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  const void **v4;
  const void **v5;
  const void **v6;
  const void *v7;
  char v8;

  result = sub_22EFD7394(a1);
  if ((const void **)result != v4)
  {
    v5 = (const void **)result;
    v6 = v4;
    do
    {
      v7 = *v5;
      result = sub_22E3BA850(*a2, *v5);
      if (v8)
        result = sub_22F12D72C(v7, a2);
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_22F12D794(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = (_QWORD *)result;
  v7 = 0;
  v8 = *(int *)(a4 + 8);
  v9 = *(_DWORD *)(a4 + 8);
  v10 = (uint64_t *)(*(_QWORD *)a4 + 24 * (int)v8 - 24);
  do
  {
    if (v8 == v7)
    {
      v15 = 0;
      v13 = 0;
      goto LABEL_13;
    }
    v12 = *v10;
    v10 -= 3;
    v11 = v12;
    ++v7;
  }
  while ((*(_BYTE *)(v12 + 12) & 1) == 0);
  v13 = v9 - v7 + 1;
  v14 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
    v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
  result = sub_22F10C2A4(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
      v15 = 0;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  v9 = *(_DWORD *)(a4 + 8);
LABEL_13:
  if (v13 == v9)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = (unint64_t *)(*(_QWORD *)a4 + 24 * v13);
      v18 = sub_22F0C975C(a2, v17[1]);
      v19 = *(_QWORD *)(**(_QWORD **)(*v17 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
        v19 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*v17 + 16));
      v20 = sub_22F10C2A4(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0));
      if (v20)
      {
        if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 35 >= 3)
          v21 = 0;
        else
          v21 = v20;
      }
      else
      {
        v21 = 0;
      }
      result = sub_22E46A3EC(v18, v21);
      v16 += result;
      ++v13;
    }
    while (v9 != v13);
  }
  *v6 = a3;
  v6[1] = v15;
  v6[2] = v16;
  return result;
}

_QWORD *sub_22F12D928(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  llvm *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  llvm *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;

  v25 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(llvm **)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = (llvm *)MEMORY[0x23489D23C](32 * v13, 8);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 32 * v15;
      do
      {
        *(_QWORD *)v14 = -4096;
        v14 = (llvm *)((char *)v14 + 32);
        v16 -= 32;
      }
      while (v16);
    }
    v17 = (void *)(32 * v6);
    if ((_DWORD)v6)
    {
      v18 = (char *)v9 + 8;
      v19 = 32 * v6;
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v26 = 0;
          sub_22EEDDD4C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
          v21 = v26;
          *v26 = v20;
          v22 = *(_OWORD *)v18;
          v21[3] = *((_QWORD *)v18 + 2);
          *(_OWORD *)(v21 + 1) = v22;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 += 32;
        v19 -= 32;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v9, v17);
    v14 = *(llvm **)a1;
    LODWORD(v23) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v23 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v23)
    {
      v24 = 0;
      do
      {
        *(_QWORD *)((char *)v14 + v24) = -4096;
        v24 += 32;
      }
      while (32 * v23 != v24);
    }
  }
  sub_22EEDDD4C((uint64_t)v14, v23, *a2, &v25);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v25;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F12DAF8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 80 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40C7A8(a1, (uint64_t)v4, (uint64_t)v4 + 80 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(80 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 80 * v10;
      do
      {
        *result = -4096;
        result += 10;
        v11 -= 80;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F12DBC4(uint64_t result, unint64_t *a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a3 < 2)
    return result;
  v6 = (unint64_t *)result;
  if (a3 == 2)
  {
    v7 = *(a2 - 1);
    v8 = *(_QWORD *)result;
    v9 = sub_22EFD3B9C(v7);
    if (v9 == sub_22EFD3B9C(v8))
    {
      v25 = sub_22EFD3F30(v7);
      result = sub_22EFD3F30(v8);
      if (v25 == (_DWORD)result)
      {
        if ((*(_DWORD *)(v7 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v8 + 28) & 0x7F) == 0x39)
          return result;
      }
      else
      {
        result = sub_22EFD3F30(v7);
        if ((result & 1) == 0)
          return result;
      }
    }
    else
    {
      result = sub_22EFD3B9C(v7);
      if ((result & 1) == 0)
        return result;
    }
    v31 = *v6;
    *v6 = *(a2 - 1);
    *(a2 - 1) = v31;
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    v27 = a4;
    v28 = a3 >> 1;
    v29 = (unint64_t *)(result + 8 * (a3 >> 1));
    v30 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_22F12DBC4(result, v29, v30, a4, a5);
      sub_22F12DBC4(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v27, a5);
      return sub_22F12E384((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v27, a5);
    }
    sub_22F12DFB8(result, v29, v30, a4);
    v32 = &v27[v28];
    result = sub_22F12DFB8((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v32);
    v33 = &v27[a3];
    v34 = v32;
    while (1)
    {
      if (v34 == v33)
      {
        if (v27 != v32)
        {
          v43 = 0;
          do
          {
            v6[v43] = v27[v43];
            ++v43;
          }
          while (&v27[v43] != v32);
        }
        return result;
      }
      v35 = *v34;
      v36 = *v27;
      v37 = sub_22EFD3B9C(*v34);
      if (v37 == sub_22EFD3B9C(v36))
      {
        v38 = sub_22EFD3F30(v35);
        result = sub_22EFD3F30(v36);
        if (v38 == (_DWORD)result)
        {
          if ((*(_DWORD *)(v35 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v36 + 28) & 0x7F) == 0x39)
          {
LABEL_54:
            v41 = *v27++;
            v39 = v41;
            goto LABEL_55;
          }
        }
        else
        {
          result = sub_22EFD3F30(v35);
          if ((result & 1) == 0)
            goto LABEL_54;
        }
      }
      else
      {
        result = sub_22EFD3B9C(v35);
        if ((result & 1) == 0)
          goto LABEL_54;
      }
      v40 = *v34++;
      v39 = v40;
LABEL_55:
      *v6++ = v39;
      if (v27 == v32)
      {
        if (v34 != v33)
        {
          v42 = 0;
          do
          {
            v6[v42] = v34[v42];
            ++v42;
          }
          while (&v34[v42] != v33);
        }
        return result;
      }
    }
  }
  if ((unint64_t *)result == a2)
    return result;
  v11 = result + 8;
  if ((unint64_t *)(result + 8) == a2)
    return result;
  v12 = 0;
  v13 = (unint64_t *)result;
  do
  {
    v14 = v13;
    v13 = (unint64_t *)v11;
    v16 = *v14;
    v15 = v14[1];
    v17 = sub_22EFD3B9C(v15);
    if (v17 == sub_22EFD3B9C(v16))
    {
      v18 = sub_22EFD3F30(v15);
      result = sub_22EFD3F30(v16);
      if (v18 == (_DWORD)result)
      {
        if ((*(_DWORD *)(v15 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v16 + 28) & 0x7F) == 0x39)
          goto LABEL_32;
      }
      else
      {
        result = sub_22EFD3F30(v15);
        if ((result & 1) == 0)
          goto LABEL_32;
      }
    }
    else
    {
      result = sub_22EFD3B9C(v15);
      if ((result & 1) == 0)
        goto LABEL_32;
    }
    v19 = v14[1];
    v14[1] = *v14;
    v20 = v6;
    if (v14 == v6)
      goto LABEL_31;
    v21 = v12;
    while (1)
    {
      v22 = *(unint64_t *)((char *)v6 + v21 - 8);
      v23 = sub_22EFD3B9C(v19);
      if (v23 != sub_22EFD3B9C(v22))
      {
        result = sub_22EFD3B9C(v19);
        if ((result & 1) == 0)
          break;
        goto LABEL_28;
      }
      v24 = sub_22EFD3F30(v19);
      result = sub_22EFD3F30(v22);
      if (v24 != (_DWORD)result)
      {
        result = sub_22EFD3F30(v19);
        if ((result & 1) == 0)
        {
          v20 = (unint64_t *)((char *)v6 + v21);
          goto LABEL_31;
        }
        goto LABEL_28;
      }
      if ((*(_DWORD *)(v19 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v22 + 28) & 0x7F) == 0x39)
        break;
LABEL_28:
      --v14;
      *(unint64_t *)((char *)v6 + v21) = *(unint64_t *)((char *)v6 + v21 - 8);
      v21 -= 8;
      if (!v21)
      {
        v20 = v6;
        goto LABEL_31;
      }
    }
    v20 = v14;
LABEL_31:
    *v20 = v19;
LABEL_32:
    v11 = (uint64_t)(v13 + 1);
    v12 += 8;
  }
  while (v13 + 1 != a2);
  return result;
}

uint64_t sub_22F12DFB8(uint64_t result, unint64_t *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  if (!a3)
    return result;
  v4 = a4;
  v6 = (unint64_t *)result;
  if (a3 == 1)
  {
LABEL_60:
    *v4 = *v6;
    return result;
  }
  v7 = a2;
  if (a3 == 2)
  {
    v8 = a2 - 1;
    v9 = *(a2 - 1);
    v10 = *(_QWORD *)result;
    v11 = sub_22EFD3B9C(v9);
    if (v11 == sub_22EFD3B9C(v10))
    {
      v28 = sub_22EFD3F30(v9);
      result = sub_22EFD3F30(v10);
      if (v28 == (_DWORD)result)
      {
        if ((*(_DWORD *)(v9 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v10 + 28) & 0x7F) == 0x39)
          goto LABEL_58;
      }
      else
      {
        result = sub_22EFD3F30(v9);
        if ((result & 1) == 0)
          goto LABEL_58;
      }
    }
    else
    {
      result = sub_22EFD3B9C(v9);
      if ((result & 1) == 0)
      {
LABEL_58:
        v39 = v6;
        goto LABEL_59;
      }
    }
    v39 = v8;
    v8 = v6;
LABEL_59:
    *v4++ = *v39;
    v6 = v8;
    goto LABEL_60;
  }
  if ((uint64_t)a3 > 8)
  {
    v29 = (unint64_t *)(result + 8 * (a3 >> 1));
    sub_22F12DBC4(result, v29, a3 >> 1, a4, a3 >> 1);
    result = sub_22F12DBC4(&v6[a3 >> 1], v7, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
    v30 = &v6[a3 >> 1];
    while (1)
    {
      if (v30 == v7)
      {
        if (v6 != v29)
        {
          v40 = 0;
          do
          {
            v4[v40] = v6[v40];
            ++v40;
          }
          while (&v6[v40] != v29);
        }
        return result;
      }
      v31 = *v30;
      v32 = *v6;
      v33 = sub_22EFD3B9C(*v30);
      if (v33 == sub_22EFD3B9C(v32))
      {
        v34 = sub_22EFD3F30(v31);
        result = sub_22EFD3F30(v32);
        if (v34 == (_DWORD)result)
        {
          if ((*(_DWORD *)(v31 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v32 + 28) & 0x7F) == 0x39)
          {
LABEL_49:
            v37 = *v6++;
            v35 = v37;
            goto LABEL_50;
          }
        }
        else
        {
          result = sub_22EFD3F30(v31);
          if ((result & 1) == 0)
            goto LABEL_49;
        }
      }
      else
      {
        result = sub_22EFD3B9C(v31);
        if ((result & 1) == 0)
          goto LABEL_49;
      }
      v36 = *v30++;
      v35 = v36;
LABEL_50:
      *v4++ = v35;
      if (v6 == v29)
      {
        if (v30 != v7)
        {
          v38 = 0;
          do
          {
            v4[v38] = v30[v38];
            ++v38;
          }
          while (&v30[v38] != v7);
        }
        return result;
      }
    }
  }
  if ((unint64_t *)result == a2)
    return result;
  v12 = (unint64_t *)(result + 8);
  *a4 = *(_QWORD *)result;
  if ((unint64_t *)(result + 8) == a2)
    return result;
  v13 = 0;
  v14 = a4;
  do
  {
    v15 = v14;
    v17 = *v14++;
    v16 = v17;
    v18 = *v12;
    v19 = sub_22EFD3B9C(*v12);
    if (v19 == sub_22EFD3B9C(v17))
    {
      v20 = sub_22EFD3F30(v18);
      result = sub_22EFD3F30(v16);
      if (v20 == (_DWORD)result)
      {
        v21 = v14;
        if ((*(_DWORD *)(v18 + 28) & 0x7F) != 0x39)
          goto LABEL_33;
        v21 = v14;
        if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x39)
          goto LABEL_33;
        goto LABEL_19;
      }
      result = sub_22EFD3F30(v18);
    }
    else
    {
      result = sub_22EFD3B9C(v18);
    }
    v21 = v14;
    if ((result & 1) == 0)
      goto LABEL_33;
LABEL_19:
    v15[1] = *v15;
    v21 = v4;
    if (v15 == v4)
      goto LABEL_33;
    v22 = v13;
    while (1)
    {
      v23 = *v12;
      v24 = *(unint64_t *)((char *)v4 + v22 - 8);
      v25 = sub_22EFD3B9C(*v12);
      if (v25 != sub_22EFD3B9C(v24))
      {
        result = sub_22EFD3B9C(v23);
        if ((result & 1) == 0)
          break;
        goto LABEL_29;
      }
      v26 = sub_22EFD3F30(v23);
      result = sub_22EFD3F30(v24);
      if (v26 != (_DWORD)result)
      {
        result = sub_22EFD3F30(v23);
        if ((result & 1) == 0)
        {
          v21 = (unint64_t *)((char *)v4 + v22);
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v24 + 28) & 0x7F) == 0x39)
        break;
LABEL_29:
      --v15;
      *(unint64_t *)((char *)v4 + v22) = *(unint64_t *)((char *)v4 + v22 - 8);
      v22 -= 8;
      if (!v22)
      {
        v21 = v4;
        goto LABEL_32;
      }
    }
    v21 = v15;
LABEL_32:
    v7 = a2;
LABEL_33:
    v27 = *v12++;
    *v21 = v27;
    v13 += 8;
  }
  while (v12 != v7);
  return result;
}

uint64_t sub_22F12E384(uint64_t result, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *i;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  int v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;

  if (!a5)
    return result;
  v9 = a5;
  v13 = (unint64_t *)result;
  do
  {
    if (a4 <= a7 || v9 <= a7)
    {
      if (a4 > v9)
      {
        if (a2 == a3)
          return result;
        v65 = 0;
        do
        {
          a6[v65] = a2[v65];
          ++v65;
        }
        while (&a2[v65] != a3);
        if (!(v65 * 8))
          return result;
        v66 = &a6[v65];
        for (i = a3 - 1; ; --i)
        {
          if (a2 == v13)
          {
            if (v66 != a6)
            {
              v84 = 0;
              do
              {
                i[v84] = v66[v84 - 1];
                --v84;
              }
              while (&v66[v84] != a6);
            }
            return result;
          }
          v69 = a2 - 1;
          v68 = *(a2 - 1);
          v70 = *(v66 - 1);
          v71 = sub_22EFD3B9C(v70);
          if (v71 == sub_22EFD3B9C(v68))
          {
            v72 = sub_22EFD3F30(v70);
            result = sub_22EFD3F30(v68);
            if (v72 == (_DWORD)result)
            {
              if ((*(_DWORD *)(v70 + 28) & 0x7F) == 0x39)
              {
                v73 = a2 - 1;
                if ((*(_DWORD *)(v68 + 28) & 0x7F) != 0x39)
                  goto LABEL_109;
              }
LABEL_106:
              v69 = v66 - 1;
              v73 = a2;
              --v66;
              goto LABEL_109;
            }
            result = sub_22EFD3F30(v70);
          }
          else
          {
            result = sub_22EFD3B9C(v70);
          }
          v73 = a2 - 1;
          if ((result & 1) == 0)
            goto LABEL_106;
LABEL_109:
          *i = *v69;
          a2 = v73;
          if (v66 == a6)
            return result;
        }
      }
      if (v13 == a2)
        return result;
      v74 = 0;
      do
      {
        a6[v74] = v13[v74];
        ++v74;
      }
      while (&v13[v74] != a2);
      if (!(v74 * 8))
        return result;
      v75 = a6;
      while (1)
      {
        if (a2 == a3)
          return (uint64_t)memmove(v13, v75, (char *)a6 - (char *)v75 + v74 * 8);
        v76 = *a2;
        v77 = *v75;
        v78 = sub_22EFD3B9C(*a2);
        if (v78 == sub_22EFD3B9C(v77))
        {
          v79 = sub_22EFD3F30(v76);
          result = sub_22EFD3F30(v77);
          if (v79 == (_DWORD)result)
          {
            if ((*(_DWORD *)(v76 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v77 + 28) & 0x7F) == 0x39)
            {
LABEL_126:
              v82 = *v75++;
              v80 = v82;
              goto LABEL_127;
            }
          }
          else
          {
            result = sub_22EFD3F30(v76);
            if ((result & 1) == 0)
              goto LABEL_126;
          }
        }
        else
        {
          result = sub_22EFD3B9C(v76);
          if ((result & 1) == 0)
            goto LABEL_126;
        }
        v81 = *a2++;
        v80 = v81;
LABEL_127:
        *v13++ = v80;
        if (&a6[v74] == v75)
          return result;
      }
    }
    if (!a4)
      return result;
    while (1)
    {
      v14 = *a2;
      v15 = *v13;
      v16 = sub_22EFD3B9C(*a2);
      if (v16 != sub_22EFD3B9C(v15))
      {
        result = sub_22EFD3B9C(v14);
        if ((result & 1) != 0)
          goto LABEL_16;
        goto LABEL_14;
      }
      v17 = sub_22EFD3F30(v14);
      result = sub_22EFD3F30(v15);
      if (v17 == (_DWORD)result)
        break;
      result = sub_22EFD3F30(v14);
      if ((result & 1) != 0)
        goto LABEL_16;
LABEL_14:
      ++v13;
      if (!--a4)
        return result;
    }
    if ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x39 || (*(_DWORD *)(v15 + 28) & 0x7F) == 0x39)
      goto LABEL_14;
LABEL_16:
    v90 = a3;
    v91 = v9;
    v92 = a7;
    if (a4 < v9)
    {
      if (v9 >= 0)
        v18 = v9;
      else
        v18 = v9 + 1;
      v19 = v18 >> 1;
      v20 = &a2[v18 >> 1];
      v21 = a2 - v13;
      if (a2 != v13)
      {
        v85 = v18 >> 1;
        v87 = a2;
        v22 = v13;
        do
        {
          v23 = &v22[v21 >> 1];
          v24 = *v20;
          v25 = *v23;
          v26 = sub_22EFD3B9C(*v20);
          if (v26 == sub_22EFD3B9C(v25))
          {
            v28 = sub_22EFD3F30(v24);
            if (v28 == sub_22EFD3F30(v25))
              v27 = (*(_DWORD *)(v24 + 28) & 0x7F) == 0x39 && (*(_DWORD *)(v25 + 28) & 0x7F) != 57;
            else
              v27 = sub_22EFD3F30(v24);
          }
          else
          {
            v27 = sub_22EFD3B9C(v24);
          }
          if (v27)
          {
            v21 >>= 1;
          }
          else
          {
            v22 = v23 + 1;
            v21 += ~(v21 >> 1);
          }
        }
        while (v21);
        v21 = v22 - v13;
        a2 = v87;
        v19 = v85;
        goto LABEL_60;
      }
      v13 = a2;
LABEL_73:
      v22 = a2;
      a2 = v20;
      goto LABEL_89;
    }
    if (a4 == 1)
    {
      v83 = *v13;
      *v13 = *a2;
      *a2 = v83;
      return result;
    }
    if (a4 >= 0)
      v30 = a4;
    else
      v30 = a4 + 1;
    v20 = a3;
    v21 = v30 >> 1;
    v22 = &v13[v30 >> 1];
    v19 = v20 - a2;
    if (v20 != a2)
    {
      v86 = v30 >> 1;
      v88 = a2;
      v89 = a6;
      v20 = a2;
      do
      {
        v31 = v19;
        v32 = v19 >> 1;
        v33 = &v20[v19 >> 1];
        v34 = *v33;
        v35 = *v22;
        v36 = sub_22EFD3B9C(*v33);
        if (v36 == sub_22EFD3B9C(v35))
        {
          v38 = sub_22EFD3F30(v34);
          if (v38 == sub_22EFD3F30(v35))
            v37 = (*(_DWORD *)(v34 + 28) & 0x7F) == 0x39 && (*(_DWORD *)(v35 + 28) & 0x7F) != 57;
          else
            v37 = sub_22EFD3F30(v34);
        }
        else
        {
          v37 = sub_22EFD3B9C(v34);
        }
        if (v37)
          v19 = v31 + ~v32;
        else
          v19 = v32;
        if (v37)
          v20 = v33 + 1;
      }
      while (v19);
      a2 = v88;
      a6 = v89;
      v19 = v20 - v88;
      v21 = v86;
    }
LABEL_60:
    if (v22 == a2)
      goto LABEL_73;
    if (a2 == v20)
    {
      v20 = a2;
      a2 = v22;
    }
    else if (v22 + 1 == a2)
    {
      v46 = a6;
      v47 = *v22;
      v48 = v19;
      memmove(v22, a2, (char *)v20 - (char *)a2);
      v19 = v48;
      a2 = (unint64_t *)((char *)v22 + (char *)v20 - (char *)a2);
      *a2 = v47;
      a6 = v46;
    }
    else if (a2 + 1 == v20)
    {
      v49 = *(v20 - 1);
      a2 = v22 + 1;
      if (v20 - 1 != v22)
      {
        v50 = v19;
        memmove(v22 + 1, v22, (char *)(v20 - 1) - (char *)v22);
        v19 = v50;
      }
      *v22 = v49;
    }
    else
    {
      v40 = a2 - v22;
      if (v40 == v20 - a2)
      {
        v41 = 0;
        do
        {
          v42 = v22[v41];
          v22[v41] = a2[v41];
          v43 = (uint64_t)&v22[v41 + 1];
          a2[v41] = v42;
          v44 = (uint64_t)&a2[++v41];
        }
        while ((unint64_t *)v43 != a2 && v44 != (_QWORD)v20);
      }
      else
      {
        v51 = v20 - a2;
        v52 = a2 - v22;
        do
        {
          v53 = v52;
          v52 = v51;
          v51 = v53 % v51;
        }
        while (v51);
        if (v52)
        {
          v54 = &v22[v52];
          do
          {
            v56 = *--v54;
            v55 = v56;
            v57 = &v54[v40];
            v58 = v54;
            do
            {
              v59 = v58;
              v58 = v57;
              *v59 = *v57;
              v60 = __OFSUB__(v40, v20 - v57);
              v62 = v40 - (v20 - v57);
              v61 = (v62 < 0) ^ v60;
              v57 = &v22[v62];
              if (v61)
                v57 = &v58[v40];
            }
            while (v57 != v54);
            *v58 = v55;
          }
          while (v54 != v22);
        }
        a2 = &v22[v20 - a2];
      }
    }
LABEL_89:
    a4 -= v21;
    v63 = v91 - v19;
    if ((uint64_t)(v19 + v21) >= (uint64_t)(v91 - v19 + a4))
    {
      v64 = v19;
      result = sub_22F12E384(a2, v20, v90, a4, v91 - v19, a6, v92);
      v20 = v22;
      v63 = v64;
      a4 = v21;
      a3 = a2;
    }
    else
    {
      result = sub_22F12E384(v13, v22, a2, v21, v19, a6, v92);
      v13 = a2;
      a3 = v90;
    }
    a2 = v20;
    a7 = v92;
    v9 = v63;
  }
  while (v63);
  return result;
}

uint64_t sub_22F12EA74(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v4 = *(_WORD *)(a1 + 80) & 0x7F;
  v5 = -40;
  if (v4 > 0x46)
  {
    if (v4 == 83)
      goto LABEL_17;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_17;
    }
    if (v4 != 81)
    {
LABEL_12:
      v6 = v4 - 52;
      v7 = v4 - 33 >= 5;
      v8 = -48;
      if (!v7)
        v8 = -64;
      if (v6 >= 6)
        v5 = v8;
      else
        v5 = -72;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_11;
    if (v4 == 16)
    {
LABEL_4:
      v5 = -48;
      goto LABEL_17;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_4;
LABEL_11:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v9 = *(_QWORD *)(a1 + 72 + v5 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  if (v10)
    v11 = (uint64_t)(v10 - 8);
  else
    v11 = 0;
  v18 = 0;
  if ((sub_22F33A4AC(a2, v11, &v18) & 1) != 0)
    return 1;
  v13 = sub_22EFD7394(a1);
  if (v13 == v14)
    return 0;
  v15 = v14;
  v16 = v13 + 8;
  do
  {
    result = sub_22F12EA74(*(_QWORD *)(v16 - 8), a2);
    if ((result & 1) != 0)
      break;
    v17 = v16 == v15;
    v16 += 8;
  }
  while (!v17);
  return result;
}

_QWORD *sub_22F12EBC4(uint64_t a1, uint64_t *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_22F12EC8C(a1, a2, v12);
    *v6 = *a2;
    v6[7] = 0;
    *(_OWORD *)(v6 + 5) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 1) = 0u;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + (v5 << 6));
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + (v5 << 6));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_QWORD *sub_22F12EC8C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_22F12EE00(a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = (37 * *a2) & v9;
    a3 = (_QWORD *)(*(_QWORD *)a1 + (v10 << 6));
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_QWORD *)(*(_QWORD *)a1 + (v10 << 6));
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_22F12EE00(a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = (37 * *a2) & v16;
    a3 = (_QWORD *)(*(_QWORD *)a1 + (v17 << 6));
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_QWORD *)(*(_QWORD *)a1 + (v17 << 6));
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F12EE00(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C]((unint64_t)v8 << 6, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 64;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v14 = *(_DWORD *)(a1 + 16);
          if (v14)
          {
            v15 = v14 - 1;
            v16 = (v14 - 1) & (37 * v13);
            v17 = (uint64_t *)(*(_QWORD *)a1 + (v16 << 6));
            v18 = *v17;
            if (v13 != *v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18 != -1)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -2;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & v15;
                v17 = (uint64_t *)(*(_QWORD *)a1 + (v16 << 6));
                v18 = *v17;
                if (v13 == *v17)
                  goto LABEL_23;
              }
              if (v19)
                v17 = v19;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_23:
          *v17 = v13;
          v23 = *(_OWORD *)((char *)v12 + 8);
          v24 = *(_OWORD *)((char *)v12 + 24);
          v25 = *(_OWORD *)((char *)v12 + 40);
          v17[7] = *((_QWORD *)v12 + 7);
          *(_OWORD *)(v17 + 5) = v25;
          *(_OWORD *)(v17 + 3) = v24;
          *(_OWORD *)(v17 + 1) = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 = (llvm *)((char *)v12 + 64);
      }
      while (v12 != (llvm *)((char *)v4 + 64 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v26 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v26)
    {
      v27 = v26 << 6;
      do
      {
        *result = -1;
        result += 8;
        v27 -= 64;
      }
      while (v27);
    }
  }
  return result;
}

_QWORD *sub_22F12EFA0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (uint64_t)v4;
      do
      {
        if ((unint64_t)(*(_QWORD *)v13 + 1) > 1 || *(_DWORD *)(v13 + 8) != 0)
        {
          v19 = 0;
          sub_22F40CA94((uint64_t *)a1, v13, &v19);
          v15 = (_QWORD *)v19;
          v16 = *(_QWORD *)v13;
          *(_DWORD *)(v19 + 8) = *(_DWORD *)(v13 + 8);
          *v15 = v16;
          v15[2] = *(_QWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v18 -= 24;
      }
      while (v18);
    }
  }
  return result;
}

double sub_22F12F104(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;

  if (!a3)
  {
LABEL_8:
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)&v8 = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return *(double *)&v8;
  }
  v4 = (37 * (_DWORD)a4) & (a3 - 1);
  v5 = *(_QWORD *)(a2 + (v4 << 6));
  if (v5 != a4)
  {
    v9 = 1;
    while (v5 != -1)
    {
      v10 = v4 + v9++;
      v4 = v10 & (a3 - 1);
      v5 = *(_QWORD *)(a2 + ((unint64_t)v4 << 6));
      if (v5 == a4)
        goto LABEL_3;
    }
    goto LABEL_8;
  }
LABEL_3:
  v6 = a2 + (v4 << 6);
  v7 = *(_OWORD *)(v6 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v6 + 8);
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(v6 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v6 + 56);
  return *(double *)&v8;
}

_OWORD *sub_22F12F18C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40CD4C(a1, v4, &v4[3 * v3]);
    return (_OWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45B630;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F12F25C(unint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3;
  const char *p_p;
  void *__p;
  char v6;

  if (a1)
  {
    sub_22EFF7250(7, a1, &__p);
    v3 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v3) > 8)
    {
      *(_BYTE *)(v3 + 8) = 32;
      *(_QWORD *)v3 = *(_QWORD *)" method: ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      a2 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, " method: ");
    }
    if (v6 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    llvm::raw_ostream::write(a2, p_p);
    if (v6 < 0)
      operator delete(__p);
  }
}

_QWORD *sub_22F12F31C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v3;
  while (1)
  {
    v5 = v3[4];
    if (v5 <= a2)
      break;
    v2 = v3;
LABEL_6:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v3;
  }
  if (v5 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = (_QWORD *)*v3;
  v7 = v3;
  if (*v3)
  {
    v7 = v3;
    do
    {
      v8 = v6[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      v12 = v11[4];
      v13 = v12 > a2;
      if (v12 <= a2)
        v14 = v11 + 1;
      else
        v14 = v11;
      if (v13)
        v2 = v11;
      v11 = (_QWORD *)*v14;
    }
    while (*v14);
  }
  if (v7 == v2)
    return 0;
  v3 = 0;
  do
  {
    v15 = (_QWORD *)v7[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v7[2];
        v17 = *v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v17);
    }
    v3 = (_QWORD *)((char *)v3 + 1);
    v7 = v16;
  }
  while (v16 != v2);
  return v3;
}

void sub_22F12F3F4(char *a1)
{
  if (a1)
  {
    sub_22F12F3F4(*(_QWORD *)a1);
    sub_22F12F3F4(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *sub_22F12F43C(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  size_t v21;
  uint64_t *result;
  _BOOL4 v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((unsigned __int8 *)v11 + 23);
        if ((v14 & 0x80u) == 0)
          v15 = v11;
        else
          v15 = v12;
        v16 = v11[1];
        if ((v14 & 0x80u) == 0)
          v17 = v14 & 0x7F;
        else
          v17 = v11[1];
        if (v17 >= v8)
          v18 = v8;
        else
          v18 = v17;
        v19 = memcmp(v9, v15, v18);
        v20 = v8 < v17;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_33;
      }
      if ((v14 & 0x80u) != 0)
        v14 = v16;
      if (v8 >= v14)
        v21 = v14;
      else
        v21 = v8;
      result = (uint64_t *)memcmp(v15, v9, v21);
      v23 = v14 < v8;
      if ((_DWORD)result)
        v23 = (int)result < 0;
      if (!v23)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_33:
    v24 = operator new(0x40uLL);
    v25 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v26 = *((_QWORD *)a3 + 2);
    v27 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 2) = 0;
    v24[2] = v25;
    *((_QWORD *)v24 + 6) = v26;
    *((_QWORD *)v24 + 7) = v27;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v10;
    *v6 = (uint64_t *)v24;
    v28 = (uint64_t *)**a1;
    if (v28)
    {
      *a1 = v28;
      v29 = *v6;
    }
    else
    {
      v29 = (uint64_t *)v24;
    }
    result = sub_22E49FD00(a1[1], v29);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_22F12F5B0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  BOOL v54;
  BOOL v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD *v75;
  _QWORD *v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 *v93;
  __int128 *v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int64_t v134;
  int64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD *v152;
  _OWORD *v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  unint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _QWORD *v188;
  unint64_t v189;
  _QWORD *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  unint64_t v194;
  __int128 v195;
  char v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _QWORD *v200;
  __int128 *v201;
  __int128 *v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;

  v212 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = a2 - 56;
  v201 = (__int128 *)(a2 - 168);
  v202 = (__int128 *)(a2 - 112);
  v200 = (_QWORD *)(a2 - 32);
  v9 = a1;
  v203 = a2;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_22F130768((_QWORD *)v8, v200, (_QWORD *)v9, (_QWORD *)(v9 + 24)))
        {
          v84 = *(_OWORD *)v9;
          v85 = *(_OWORD *)(v9 + 16);
          v86 = *(_OWORD *)(v9 + 32);
          v211 = *(_QWORD *)(v9 + 48);
          v209 = v85;
          v210 = v86;
          v208 = v84;
          v87 = *(_OWORD *)v8;
          v88 = *(_OWORD *)(v8 + 16);
          v89 = *(_OWORD *)(v8 + 32);
          *(_QWORD *)(v9 + 48) = *(_QWORD *)(v8 + 48);
          *(_OWORD *)(v9 + 16) = v88;
          *(_OWORD *)(v9 + 32) = v89;
          *(_OWORD *)v9 = v87;
          v90 = v208;
          v91 = v209;
          v92 = v210;
          *(_QWORD *)(v8 + 48) = v211;
          *(_OWORD *)(v8 + 16) = v91;
          *(_OWORD *)(v8 + 32) = v92;
          *(_OWORD *)v8 = v90;
        }
        return;
      case 3:
        sub_22F130218((__int128 *)v9, (__int128 *)(v9 + 56), (__int128 *)v8);
        return;
      case 4:
        sub_22F130864(v9, v9 + 56, v9 + 112, (__int128 *)v8);
        return;
      case 5:
        v93 = (__int128 *)(v9 + 56);
        v94 = (__int128 *)(v9 + 112);
        v95 = (__int128 *)(v9 + 168);
        sub_22F130864(v9, v9 + 56, v9 + 112, (__int128 *)(v9 + 168));
        if (sub_22F130768((_QWORD *)v8, v200, (_QWORD *)(v9 + 168), (_QWORD *)(v9 + 192)))
        {
          v97 = *(_OWORD *)(v9 + 184);
          v208 = *v95;
          v96 = v208;
          v209 = v97;
          v210 = *(_OWORD *)(v9 + 200);
          v98 = v210;
          v211 = *(_QWORD *)(v9 + 216);
          v99 = v211;
          v100 = *(_QWORD *)(v8 + 48);
          v102 = *(_OWORD *)(v8 + 16);
          v101 = *(_OWORD *)(v8 + 32);
          *v95 = *(_OWORD *)v8;
          *(_OWORD *)(v9 + 184) = v102;
          *(_OWORD *)(v9 + 200) = v101;
          *(_QWORD *)(v9 + 216) = v100;
          *(_OWORD *)(v8 + 16) = v97;
          *(_OWORD *)(v8 + 32) = v98;
          *(_QWORD *)(v8 + 48) = v99;
          *(_OWORD *)v8 = v96;
          if (sub_22F130768((_QWORD *)(v9 + 168), (_QWORD *)(v9 + 192), (_QWORD *)(v9 + 112), (_QWORD *)(v9 + 136)))
          {
            v103 = *(_QWORD *)(v9 + 160);
            v105 = *(_OWORD *)(v9 + 128);
            v104 = *(_OWORD *)(v9 + 144);
            v106 = *v94;
            v107 = *(_OWORD *)(v9 + 184);
            *v94 = *v95;
            *(_OWORD *)(v9 + 128) = v107;
            *(_OWORD *)(v9 + 144) = *(_OWORD *)(v9 + 200);
            *(_QWORD *)(v9 + 160) = *(_QWORD *)(v9 + 216);
            *v95 = v106;
            *(_OWORD *)(v9 + 184) = v105;
            *(_OWORD *)(v9 + 200) = v104;
            *(_QWORD *)(v9 + 216) = v103;
            if (sub_22F130768((_QWORD *)(v9 + 112), (_QWORD *)(v9 + 136), (_QWORD *)(v9 + 56), (_QWORD *)(v9 + 80)))
            {
              v108 = *(_QWORD *)(v9 + 104);
              v110 = *(_OWORD *)(v9 + 72);
              v109 = *(_OWORD *)(v9 + 88);
              v111 = *v93;
              v112 = *(_OWORD *)(v9 + 128);
              *v93 = *v94;
              *(_OWORD *)(v9 + 72) = v112;
              *(_OWORD *)(v9 + 88) = *(_OWORD *)(v9 + 144);
              *(_QWORD *)(v9 + 104) = *(_QWORD *)(v9 + 160);
              *v94 = v111;
              *(_OWORD *)(v9 + 128) = v110;
              *(_OWORD *)(v9 + 144) = v109;
              *(_QWORD *)(v9 + 160) = v108;
              if (sub_22F130768((_QWORD *)(v9 + 56), (_QWORD *)(v9 + 80), (_QWORD *)v9, (_QWORD *)(v9 + 24)))
              {
                v113 = *(_OWORD *)v9;
                v114 = *(_OWORD *)(v9 + 16);
                v115 = *(_OWORD *)(v9 + 32);
                v211 = *(_QWORD *)(v9 + 48);
                v209 = v114;
                v210 = v115;
                v208 = v113;
                v116 = *(_OWORD *)(v9 + 72);
                *(_OWORD *)v9 = *v93;
                *(_OWORD *)(v9 + 16) = v116;
                *(_OWORD *)(v9 + 32) = *(_OWORD *)(v9 + 88);
                *(_QWORD *)(v9 + 48) = *(_QWORD *)(v9 + 104);
                v117 = v208;
                v118 = v209;
                v119 = v210;
                *(_QWORD *)(v9 + 104) = v211;
                *(_OWORD *)(v9 + 72) = v118;
                *(_OWORD *)(v9 + 88) = v119;
                *v93 = v117;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 1343)
        {
          if ((a4 & 1) != 0)
          {
            if (v9 != a2)
            {
              v120 = (_QWORD *)(v9 + 56);
              if (v9 + 56 != a2)
              {
                v121 = 0;
                v122 = (_QWORD *)v9;
                do
                {
                  v123 = v122;
                  v122 = v120;
                  if (sub_22F130768(v120, v123 + 10, v123, v123 + 3))
                  {
                    v124 = *(_OWORD *)v122;
                    v125 = *((_OWORD *)v122 + 1);
                    v126 = *((_OWORD *)v122 + 2);
                    v211 = v122[6];
                    v209 = v125;
                    v210 = v126;
                    v208 = v124;
                    v127 = v121;
                    while (1)
                    {
                      v128 = v9 + v127;
                      v129 = *(_OWORD *)(v9 + v127 + 16);
                      *(_OWORD *)(v128 + 56) = *(_OWORD *)(v9 + v127);
                      *(_OWORD *)(v128 + 72) = v129;
                      *(_OWORD *)(v128 + 88) = *(_OWORD *)(v9 + v127 + 32);
                      *(_QWORD *)(v128 + 104) = *(_QWORD *)(v9 + v127 + 48);
                      if (!v127)
                        break;
                      v127 -= 56;
                      if ((sub_22F130768(&v208, (_QWORD *)&v209 + 1, (_QWORD *)(v128 - 56), (_QWORD *)(v128 - 32)) & 1) == 0)
                      {
                        v130 = v9 + v127 + 56;
                        goto LABEL_74;
                      }
                    }
                    v130 = v9;
LABEL_74:
                    v131 = v208;
                    v132 = v209;
                    v133 = v210;
                    *(_QWORD *)(v130 + 48) = v211;
                    *(_OWORD *)(v130 + 16) = v132;
                    *(_OWORD *)(v130 + 32) = v133;
                    *(_OWORD *)v130 = v131;
                  }
                  v120 = v122 + 7;
                  v121 += 56;
                }
                while (v122 + 7 != (_QWORD *)a2);
              }
            }
          }
          else if (v9 != a2)
          {
            v188 = (_QWORD *)(v9 + 56);
            if (v9 + 56 != a2)
            {
              v189 = v9 - 56;
              do
              {
                v190 = (_QWORD *)a1;
                a1 = (uint64_t)v188;
                if (sub_22F130768(v188, v190 + 10, v190, v190 + 3))
                {
                  v191 = *(_OWORD *)a1;
                  v192 = *(_OWORD *)(a1 + 16);
                  v193 = *(_OWORD *)(a1 + 32);
                  v211 = *(_QWORD *)(a1 + 48);
                  v209 = v192;
                  v210 = v193;
                  v208 = v191;
                  v194 = v189;
                  do
                  {
                    v195 = *(_OWORD *)(v194 + 72);
                    *(_OWORD *)(v194 + 112) = *(_OWORD *)(v194 + 56);
                    *(_OWORD *)(v194 + 128) = v195;
                    *(_OWORD *)(v194 + 144) = *(_OWORD *)(v194 + 88);
                    *(_QWORD *)(v194 + 160) = *(_QWORD *)(v194 + 104);
                    v196 = sub_22F130768(&v208, (_QWORD *)&v209 + 1, (_QWORD *)v194, (_QWORD *)(v194 + 24));
                    v194 -= 56;
                  }
                  while ((v196 & 1) != 0);
                  v197 = v208;
                  v198 = v209;
                  v199 = v210;
                  *(_QWORD *)(v194 + 160) = v211;
                  *(_OWORD *)(v194 + 128) = v198;
                  *(_OWORD *)(v194 + 144) = v199;
                  *(_OWORD *)(v194 + 112) = v197;
                }
                v188 = (_QWORD *)(a1 + 56);
                v189 += 56;
              }
              while (a1 + 56 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v134 = (unint64_t)(v11 - 2) >> 1;
            v135 = v134;
            do
            {
              v136 = v135;
              if (v134 >= v135)
              {
                v137 = (2 * v135) | 1;
                v138 = a1 + 56 * v137;
                if (2 * v135 + 2 < v11
                  && sub_22F130768((_QWORD *)(a1 + 56 * v137), (_QWORD *)(a1 + 56 * v137 + 24), (_QWORD *)(v138 + 56), (_QWORD *)(v138 + 80)))
                {
                  v138 += 56;
                  v137 = 2 * v136 + 2;
                }
                v139 = a1 + 56 * v136;
                if ((sub_22F130768((_QWORD *)v138, (_QWORD *)(v138 + 24), (_QWORD *)v139, (_QWORD *)(v139 + 24)) & 1) == 0)
                {
                  v140 = *(_OWORD *)v139;
                  v141 = *(_OWORD *)(v139 + 16);
                  v142 = *(_OWORD *)(v139 + 32);
                  v211 = *(_QWORD *)(v139 + 48);
                  v209 = v141;
                  v210 = v142;
                  v208 = v140;
                  do
                  {
                    v143 = v138;
                    v144 = *(_OWORD *)v138;
                    v145 = *(_OWORD *)(v138 + 16);
                    v146 = *(_OWORD *)(v138 + 32);
                    *(_QWORD *)(v139 + 48) = *(_QWORD *)(v138 + 48);
                    *(_OWORD *)(v139 + 16) = v145;
                    *(_OWORD *)(v139 + 32) = v146;
                    *(_OWORD *)v139 = v144;
                    if (v134 < v137)
                      break;
                    v147 = (2 * v137) | 1;
                    v138 = a1 + 56 * v147;
                    v148 = 2 * v137 + 2;
                    if (v148 < v11
                      && sub_22F130768((_QWORD *)(a1 + 56 * v147), (_QWORD *)(a1 + 56 * v147 + 24), (_QWORD *)(v138 + 56), (_QWORD *)(v138 + 80)))
                    {
                      v138 += 56;
                      v147 = v148;
                    }
                    v139 = v143;
                    v137 = v147;
                  }
                  while (!sub_22F130768((_QWORD *)v138, (_QWORD *)(v138 + 24), &v208, (_QWORD *)&v209 + 1));
                  v149 = v208;
                  v150 = v209;
                  v151 = v210;
                  *(_QWORD *)(v143 + 48) = v211;
                  *(_OWORD *)(v143 + 16) = v150;
                  *(_OWORD *)(v143 + 32) = v151;
                  *(_OWORD *)v143 = v149;
                }
              }
              v135 = v136 - 1;
            }
            while (v136);
            v152 = (_OWORD *)v203;
            do
            {
              v153 = v152;
              v154 = 0;
              v155 = *(_OWORD *)a1;
              v156 = *(_OWORD *)(a1 + 16);
              v157 = *(_OWORD *)(a1 + 32);
              v207 = *(_QWORD *)(a1 + 48);
              v205 = v156;
              v206 = v157;
              v204 = v155;
              v158 = a1;
              do
              {
                v159 = v158 + 56 * (v154 + 1);
                v160 = (2 * v154) | 1;
                v161 = 2 * v154 + 2;
                if (v161 < v11
                  && sub_22F130768((_QWORD *)v159, (_QWORD *)(v158 + 56 * (v154 + 1) + 24), (_QWORD *)(v159 + 56), (_QWORD *)(v159 + 80)))
                {
                  v159 += 56;
                  v160 = v161;
                }
                v162 = *(_OWORD *)v159;
                v163 = *(_OWORD *)(v159 + 16);
                v164 = *(_OWORD *)(v159 + 32);
                *(_QWORD *)(v158 + 48) = *(_QWORD *)(v159 + 48);
                *(_OWORD *)(v158 + 16) = v163;
                *(_OWORD *)(v158 + 32) = v164;
                *(_OWORD *)v158 = v162;
                v158 = v159;
                v154 = v160;
              }
              while (v160 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              v152 = (_OWORD *)((char *)v153 - 56);
              if ((_OWORD *)v159 == (_OWORD *)((char *)v153 - 56))
              {
                v184 = v204;
                v185 = v205;
                v186 = v206;
                *(_QWORD *)(v159 + 48) = v207;
                *(_OWORD *)(v159 + 16) = v185;
                *(_OWORD *)(v159 + 32) = v186;
                *(_OWORD *)v159 = v184;
              }
              else
              {
                v165 = *v152;
                v166 = *(_OWORD *)((char *)v153 - 40);
                v167 = *(_OWORD *)((char *)v153 - 24);
                *(_QWORD *)(v159 + 48) = *((_QWORD *)v153 - 1);
                *(_OWORD *)(v159 + 16) = v166;
                *(_OWORD *)(v159 + 32) = v167;
                *(_OWORD *)v159 = v165;
                v168 = v204;
                v169 = v205;
                v170 = v206;
                *((_QWORD *)v153 - 1) = v207;
                *(_OWORD *)((char *)v153 - 40) = v169;
                *(_OWORD *)((char *)v153 - 24) = v170;
                *v152 = v168;
                v171 = v159 - a1 + 56;
                if (v171 >= 57)
                {
                  v172 = (v171 / 0x38uLL - 2) >> 1;
                  v173 = a1 + 56 * v172;
                  if (sub_22F130768((_QWORD *)v173, (_QWORD *)(v173 + 24), (_QWORD *)v159, (_QWORD *)(v159 + 24)))
                  {
                    v174 = *(_OWORD *)v159;
                    v175 = *(_OWORD *)(v159 + 16);
                    v176 = *(_OWORD *)(v159 + 32);
                    v211 = *(_QWORD *)(v159 + 48);
                    v209 = v175;
                    v210 = v176;
                    v208 = v174;
                    do
                    {
                      v177 = v173;
                      v178 = *(_OWORD *)v173;
                      v179 = *(_OWORD *)(v173 + 16);
                      v180 = *(_OWORD *)(v173 + 32);
                      *(_QWORD *)(v159 + 48) = *(_QWORD *)(v173 + 48);
                      *(_OWORD *)(v159 + 16) = v179;
                      *(_OWORD *)(v159 + 32) = v180;
                      *(_OWORD *)v159 = v178;
                      if (!v172)
                        break;
                      v172 = (v172 - 1) >> 1;
                      v173 = a1 + 56 * v172;
                      v159 = v177;
                    }
                    while ((sub_22F130768((_QWORD *)v173, (_QWORD *)(v173 + 24), &v208, (_QWORD *)&v209 + 1) & 1) != 0);
                    v181 = v208;
                    v182 = v209;
                    v183 = v210;
                    *(_QWORD *)(v177 + 48) = v211;
                    *(_OWORD *)(v177 + 16) = v182;
                    *(_OWORD *)(v177 + 32) = v183;
                    *(_OWORD *)v177 = v181;
                  }
                }
              }
            }
            while (v11-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 56 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1C01)
        {
          sub_22F130218((__int128 *)v13, (__int128 *)v9, (__int128 *)v8);
        }
        else
        {
          sub_22F130218((__int128 *)v9, (__int128 *)v13, (__int128 *)v8);
          v14 = 56 * v12;
          sub_22F130218((__int128 *)(v9 + 56), (__int128 *)(v14 + v9 - 56), v202);
          sub_22F130218((__int128 *)(v9 + 112), (__int128 *)(v9 + 56 + v14), v201);
          sub_22F130218((__int128 *)(v14 + v9 - 56), (__int128 *)v13, (__int128 *)(v9 + 56 + v14));
          v15 = *(_OWORD *)v9;
          v16 = *(_OWORD *)(v9 + 16);
          v17 = *(_OWORD *)(v9 + 32);
          v211 = *(_QWORD *)(v9 + 48);
          v209 = v16;
          v210 = v17;
          v208 = v15;
          v18 = *(_OWORD *)v13;
          v19 = *(_OWORD *)(v13 + 16);
          v20 = *(_OWORD *)(v13 + 32);
          *(_QWORD *)(v9 + 48) = *(_QWORD *)(v13 + 48);
          *(_OWORD *)(v9 + 16) = v19;
          *(_OWORD *)(v9 + 32) = v20;
          *(_OWORD *)v9 = v18;
          v21 = v208;
          v22 = v209;
          v23 = v210;
          *(_QWORD *)(v13 + 48) = v211;
          *(_OWORD *)(v13 + 16) = v22;
          *(_OWORD *)(v13 + 32) = v23;
          *(_OWORD *)v13 = v21;
        }
        --a3;
        if ((a4 & 1) == 0
          && (sub_22F130768((_QWORD *)(v9 - 56), (_QWORD *)(v9 - 32), (_QWORD *)v9, (_QWORD *)(v9 + 24)) & 1) == 0)
        {
          v56 = *(_OWORD *)v9;
          v57 = *(_OWORD *)(v9 + 16);
          v58 = *(_OWORD *)(v9 + 32);
          v207 = *(_QWORD *)(v9 + 48);
          v205 = v57;
          v206 = v58;
          v204 = v56;
          if ((sub_22F130768(&v204, (_QWORD *)&v205 + 1, (_QWORD *)v8, v200) & 1) != 0)
          {
            v59 = v9;
            do
            {
              v9 = v59 + 56;
              v60 = sub_22F130768(&v204, (_QWORD *)&v205 + 1, (_QWORD *)(v59 + 56), (_QWORD *)(v59 + 80));
              v59 = v9;
            }
            while ((v60 & 1) == 0);
          }
          else
          {
            v61 = (_QWORD *)(v9 + 80);
            do
            {
              v9 = (unint64_t)(v61 - 3);
              if ((unint64_t)(v61 - 3) >= a2)
                break;
              v62 = sub_22F130768(&v204, (_QWORD *)&v205 + 1, v61 - 3, v61);
              v61 += 7;
            }
            while (!v62);
          }
          v63 = a2;
          if (v9 < a2)
          {
            v64 = a2;
            do
            {
              v63 = v64 - 56;
              v65 = sub_22F130768(&v204, (_QWORD *)&v205 + 1, (_QWORD *)(v64 - 56), (_QWORD *)(v64 - 32));
              v64 = v63;
            }
            while ((v65 & 1) != 0);
          }
          while (v9 < v63)
          {
            v66 = *(_OWORD *)v9;
            v67 = *(_OWORD *)(v9 + 16);
            v68 = *(_OWORD *)(v9 + 32);
            v211 = *(_QWORD *)(v9 + 48);
            v209 = v67;
            v210 = v68;
            v208 = v66;
            v69 = *(_OWORD *)v63;
            v70 = *(_OWORD *)(v63 + 16);
            v71 = *(_OWORD *)(v63 + 32);
            *(_QWORD *)(v9 + 48) = *(_QWORD *)(v63 + 48);
            *(_OWORD *)(v9 + 16) = v70;
            *(_OWORD *)(v9 + 32) = v71;
            *(_OWORD *)v9 = v69;
            v72 = v208;
            v73 = v209;
            v74 = v210;
            *(_QWORD *)(v63 + 48) = v211;
            *(_OWORD *)(v63 + 16) = v73;
            *(_OWORD *)(v63 + 32) = v74;
            *(_OWORD *)v63 = v72;
            do
            {
              v75 = (_QWORD *)(v9 + 80);
              v9 += 56;
            }
            while (!sub_22F130768(&v204, (_QWORD *)&v205 + 1, (_QWORD *)v9, v75));
            do
            {
              v76 = (_QWORD *)(v63 - 32);
              v63 -= 56;
            }
            while ((sub_22F130768(&v204, (_QWORD *)&v205 + 1, (_QWORD *)v63, v76) & 1) != 0);
          }
          v77 = (__int128 *)(v9 - 56);
          if (v9 - 56 != a1)
          {
            v78 = *v77;
            v79 = *(_OWORD *)(v9 - 40);
            v80 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            *(_OWORD *)a1 = v78;
          }
          a4 = 0;
          v81 = v204;
          v82 = v205;
          v83 = v206;
          *(_QWORD *)(v9 - 8) = v207;
          *(_OWORD *)(v9 - 40) = v82;
          *(_OWORD *)(v9 - 24) = v83;
          *v77 = v81;
          continue;
        }
        v24 = 0;
        v25 = *(_OWORD *)v9;
        v26 = *(_OWORD *)(v9 + 16);
        v27 = *(_OWORD *)(v9 + 32);
        v207 = *(_QWORD *)(v9 + 48);
        v205 = v26;
        v206 = v27;
        v204 = v25;
        do
        {
          v28 = sub_22F130768((_QWORD *)(v9 + v24 + 56), (_QWORD *)(v9 + v24 + 80), &v204, (_QWORD *)&v205 + 1);
          v24 += 56;
        }
        while ((v28 & 1) != 0);
        v29 = v9 + v24;
        v30 = v203;
        if (v24 == 56)
        {
          v33 = v203;
          while (v29 < v33)
          {
            v31 = v33 - 56;
            v34 = sub_22F130768((_QWORD *)(v33 - 56), (_QWORD *)(v33 - 32), &v204, (_QWORD *)&v205 + 1);
            v33 = v31;
            if ((v34 & 1) != 0)
              goto LABEL_21;
          }
          v31 = v33;
        }
        else
        {
          do
          {
            v31 = v30 - 56;
            v32 = sub_22F130768((_QWORD *)(v30 - 56), (_QWORD *)(v30 - 32), &v204, (_QWORD *)&v205 + 1);
            v30 = v31;
          }
          while (!v32);
        }
LABEL_21:
        v9 += v24;
        if (v29 < v31)
        {
          v35 = v31;
          do
          {
            v36 = *(_OWORD *)v9;
            v37 = *(_OWORD *)(v9 + 16);
            v38 = *(_OWORD *)(v9 + 32);
            v211 = *(_QWORD *)(v9 + 48);
            v209 = v37;
            v210 = v38;
            v208 = v36;
            v39 = *(_OWORD *)v35;
            v40 = *(_OWORD *)(v35 + 16);
            v41 = *(_OWORD *)(v35 + 32);
            *(_QWORD *)(v9 + 48) = *(_QWORD *)(v35 + 48);
            *(_OWORD *)(v9 + 16) = v40;
            *(_OWORD *)(v9 + 32) = v41;
            *(_OWORD *)v9 = v39;
            v42 = v208;
            v43 = v209;
            v44 = v210;
            *(_QWORD *)(v35 + 48) = v211;
            *(_OWORD *)(v35 + 16) = v43;
            *(_OWORD *)(v35 + 32) = v44;
            *(_OWORD *)v35 = v42;
            do
            {
              v45 = (_QWORD *)(v9 + 80);
              v9 += 56;
            }
            while ((sub_22F130768((_QWORD *)v9, v45, &v204, (_QWORD *)&v205 + 1) & 1) != 0);
            do
            {
              v46 = (_QWORD *)(v35 - 32);
              v35 -= 56;
            }
            while (!sub_22F130768((_QWORD *)v35, v46, &v204, (_QWORD *)&v205 + 1));
          }
          while (v9 < v35);
        }
        v47 = (__int128 *)(v9 - 56);
        if (v9 - 56 != a1)
        {
          v48 = *v47;
          v49 = *(_OWORD *)(v9 - 40);
          v50 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)(a1 + 16) = v49;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)a1 = v48;
        }
        v51 = v204;
        v52 = v205;
        v53 = v206;
        *(_QWORD *)(v9 - 8) = v207;
        *(_OWORD *)(v9 - 40) = v52;
        *(_OWORD *)(v9 - 24) = v53;
        *v47 = v51;
        v54 = v29 >= v31;
        a2 = v203;
        if (!v54)
        {
LABEL_33:
          sub_22F12F5B0(a1, v9 - 56, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v55 = sub_22F1303E8(a1, v9 - 56);
        if (!sub_22F1303E8(v9, v203))
        {
          if (v55)
            continue;
          goto LABEL_33;
        }
        a2 = v9 - 56;
        if (!v55)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t sub_22F130218(__int128 *a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v6 = (_QWORD *)a2 + 3;
  v7 = (_QWORD *)a1 + 3;
  v8 = sub_22F130768(a2, (_QWORD *)a2 + 3, a1, (_QWORD *)a1 + 3);
  result = sub_22F130768(a3, (_QWORD *)a3 + 3, a2, v6);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 6);
      v12 = a1[1];
      v11 = a1[2];
      v13 = *a1;
      v15 = a3[1];
      v14 = a3[2];
      v16 = *a3;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a3 + 6);
      a1[1] = v15;
      a1[2] = v14;
      *a1 = v16;
    }
    else
    {
      v31 = *((_QWORD *)a1 + 6);
      v33 = a1[1];
      v32 = a1[2];
      v34 = *a1;
      v36 = a2[1];
      v35 = a2[2];
      v37 = *a2;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[1] = v36;
      a1[2] = v35;
      *a1 = v37;
      *a2 = v34;
      a2[1] = v33;
      a2[2] = v32;
      *((_QWORD *)a2 + 6) = v31;
      result = sub_22F130768(a3, (_QWORD *)a3 + 3, a2, v6);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 6);
      v12 = a2[1];
      v11 = a2[2];
      v13 = *a2;
      v39 = a3[1];
      v38 = a3[2];
      v40 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v39;
      a2[2] = v38;
      *a2 = v40;
    }
    *a3 = v13;
    a3[1] = v12;
    a3[2] = v11;
    *((_QWORD *)a3 + 6) = v10;
  }
  else if ((_DWORD)result)
  {
    v17 = *((_QWORD *)a2 + 6);
    v19 = a2[1];
    v18 = a2[2];
    v20 = *a2;
    v22 = a3[1];
    v21 = a3[2];
    v23 = *a3;
    *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    *((_QWORD *)a3 + 6) = v17;
    result = sub_22F130768(a2, v6, a1, v7);
    if ((_DWORD)result)
    {
      v24 = *((_QWORD *)a1 + 6);
      v26 = a1[1];
      v25 = a1[2];
      v27 = *a1;
      v29 = a2[1];
      v28 = a2[2];
      v30 = *a2;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[1] = v29;
      a1[2] = v28;
      *a1 = v30;
      *a2 = v27;
      a2[1] = v26;
      a2[2] = v25;
      *((_QWORD *)a2 + 6) = v24;
    }
  }
  return result;
}

BOOL sub_22F1303E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 56;
      if (!sub_22F130768((_QWORD *)(a2 - 56), (_QWORD *)(a2 - 32), (_QWORD *)a1, (_QWORD *)(a1 + 24)))
        return 1;
      v7 = *(_QWORD *)(a1 + 48);
      v9 = *(_OWORD *)(a1 + 16);
      v8 = *(_OWORD *)(a1 + 32);
      v10 = *(_OWORD *)a1;
      v12 = *(_OWORD *)(a2 - 40);
      v11 = *(_OWORD *)(a2 - 24);
      v13 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)a1 = v13;
      goto LABEL_4;
    case 3:
      sub_22F130218((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a2 - 56));
      return 1;
    case 4:
      sub_22F130864(a1, a1 + 56, a1 + 112, (__int128 *)(a2 - 56));
      return 1;
    case 5:
      v6 = a1 + 56;
      v24 = (__int128 *)(a1 + 112);
      v25 = (__int128 *)(a1 + 168);
      v26 = (__int128 *)(a2 - 56);
      sub_22F130864(a1, a1 + 56, a1 + 112, (__int128 *)(a1 + 168));
      if (!sub_22F130768((_QWORD *)(a2 - 56), (_QWORD *)(a2 - 32), (_QWORD *)(a1 + 168), (_QWORD *)(a1 + 192)))return 1;
      v27 = *(_QWORD *)(a1 + 216);
      v29 = *(_OWORD *)(a1 + 184);
      v28 = *(_OWORD *)(a1 + 200);
      v30 = *v25;
      v32 = *(_OWORD *)(a2 - 40);
      v31 = *(_OWORD *)(a2 - 24);
      v33 = *v26;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v32;
      *(_OWORD *)(a1 + 200) = v31;
      *v25 = v33;
      *v26 = v30;
      *(_OWORD *)(a2 - 40) = v29;
      *(_OWORD *)(a2 - 24) = v28;
      *(_QWORD *)(a2 - 8) = v27;
      if (!sub_22F130768((_QWORD *)(a1 + 168), (_QWORD *)(a1 + 192), (_QWORD *)(a1 + 112), (_QWORD *)(a1 + 136)))return 1;
      v34 = *(_QWORD *)(a1 + 160);
      v36 = *(_OWORD *)(a1 + 128);
      v35 = *(_OWORD *)(a1 + 144);
      v37 = *v24;
      v38 = *(_OWORD *)(a1 + 184);
      *v24 = *v25;
      *(_OWORD *)(a1 + 128) = v38;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
      *v25 = v37;
      *(_OWORD *)(a1 + 184) = v36;
      *(_OWORD *)(a1 + 200) = v35;
      *(_QWORD *)(a1 + 216) = v34;
      if (!sub_22F130768((_QWORD *)(a1 + 112), (_QWORD *)(a1 + 136), (_QWORD *)(a1 + 56), (_QWORD *)(a1 + 80)))return 1;
      v39 = *(_QWORD *)(a1 + 104);
      v41 = *(_OWORD *)(a1 + 72);
      v40 = *(_OWORD *)(a1 + 88);
      v42 = *(_OWORD *)v6;
      v43 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)v6 = *v24;
      *(_OWORD *)(a1 + 72) = v43;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
      *v24 = v42;
      *(_OWORD *)(a1 + 128) = v41;
      *(_OWORD *)(a1 + 144) = v40;
      *(_QWORD *)(a1 + 160) = v39;
      if (!sub_22F130768((_QWORD *)(a1 + 56), (_QWORD *)(a1 + 80), (_QWORD *)a1, (_QWORD *)(a1 + 24)))
        return 1;
      v7 = *(_QWORD *)(a1 + 48);
      v9 = *(_OWORD *)(a1 + 16);
      v8 = *(_OWORD *)(a1 + 32);
      v10 = *(_OWORD *)a1;
      v44 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v44;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
LABEL_4:
      *(_OWORD *)v6 = v10;
      *(_OWORD *)(v6 + 16) = v9;
      *(_OWORD *)(v6 + 32) = v8;
      result = 1;
      *(_QWORD *)(v6 + 48) = v7;
      return result;
    default:
      v14 = (_QWORD *)(a1 + 112);
      sub_22F130218((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112));
      v15 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (sub_22F130768((_QWORD *)v15, (_QWORD *)(v15 + 24), v14, v14 + 3))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v45 = *(_OWORD *)v15;
      v46 = v18;
      v47 = *(_OWORD *)(v15 + 32);
      v48 = *(_QWORD *)(v15 + 48);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 168) = *(_OWORD *)(a1 + v19 + 112);
        *(_OWORD *)(v20 + 184) = v21;
        *(_OWORD *)(v20 + 200) = *(_OWORD *)(a1 + v19 + 144);
        *(_QWORD *)(v20 + 216) = *(_QWORD *)(a1 + v19 + 160);
        if (v19 == -112)
          break;
        v19 -= 56;
        if ((sub_22F130768(&v45, (_QWORD *)&v46 + 1, (_QWORD *)(v20 + 56), (_QWORD *)(v20 + 80)) & 1) == 0)
        {
          v22 = a1 + v19 + 168;
          goto LABEL_13;
        }
      }
      v22 = a1;
LABEL_13:
      v23 = v46;
      *(_OWORD *)v22 = v45;
      *(_OWORD *)(v22 + 16) = v23;
      *(_OWORD *)(v22 + 32) = v47;
      *(_QWORD *)(v22 + 48) = v48;
      if (++v17 == 8)
        return v15 + 56 == a2;
    }
    v14 = (_QWORD *)v15;
    v16 += 56;
    v15 += 56;
    if (v15 == a2)
      return 1;
  }
}

uint64_t sub_22F130768(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  _BOOL4 v15;

  if (*a1 < *a3)
    return 1;
  if (*a1 == *a3)
  {
    v5 = bswap64(a1[1]);
    v6 = bswap64(a3[1]);
    if (v5 == v6 && (v5 = bswap64(a1[2]), v6 = bswap64(a3[2]), v5 == v6))
    {
      v7 = 0;
    }
    else if (v5 < v6)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    if (v7 < 0)
      return 1;
    v8 = bswap64(a3[1]);
    v9 = bswap64(a1[1]);
    if (v8 != v9 || (v8 = bswap64(a3[2]), v9 = bswap64(a1[2]), v8 != v9))
    {
      v10 = v8 < v9 ? -1 : 1;
      if (v10 < 0)
        return 0;
    }
  }
  else if (*a3 < *a1)
  {
    return 0;
  }
  if (*a2 < *a4)
    return 1;
  if (*a2 == *a4)
  {
    v11 = bswap64(a2[1]);
    v12 = bswap64(a4[1]);
    v13 = v11 >= v12;
    v14 = v11 > v12;
    v15 = !v13;
    if (v14 - v15 < 0)
      return 1;
  }
  return 0;
}

__n128 sub_22F130864(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  sub_22F130218((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (sub_22F130768(a4, (_QWORD *)a4 + 3, (_QWORD *)a3, (_QWORD *)(a3 + 24)))
  {
    v9 = *(_QWORD *)(a3 + 48);
    v11 = *(_OWORD *)(a3 + 16);
    v10 = *(_OWORD *)(a3 + 32);
    v12 = *(_OWORD *)a3;
    v14 = a4[1];
    v13 = a4[2];
    v15 = *a4;
    *(_QWORD *)(a3 + 48) = *((_QWORD *)a4 + 6);
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)(a3 + 32) = v13;
    *(_OWORD *)a3 = v15;
    *a4 = v12;
    a4[1] = v11;
    a4[2] = v10;
    *((_QWORD *)a4 + 6) = v9;
    if (sub_22F130768((_QWORD *)a3, (_QWORD *)(a3 + 24), (_QWORD *)a2, (_QWORD *)(a2 + 24)))
    {
      v16 = *(_QWORD *)(a2 + 48);
      v18 = *(_OWORD *)(a2 + 16);
      v17 = *(_OWORD *)(a2 + 32);
      v19 = *(_OWORD *)a2;
      v21 = *(_OWORD *)(a3 + 16);
      v20 = *(_OWORD *)(a3 + 32);
      v22 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v22;
      *(_OWORD *)a3 = v19;
      *(_OWORD *)(a3 + 16) = v18;
      *(_OWORD *)(a3 + 32) = v17;
      *(_QWORD *)(a3 + 48) = v16;
      if (sub_22F130768((_QWORD *)a2, (_QWORD *)(a2 + 24), (_QWORD *)a1, (_QWORD *)(a1 + 24)))
      {
        v23 = *(_QWORD *)(a1 + 48);
        v24 = *(_OWORD *)(a1 + 16);
        result = *(__n128 *)(a1 + 32);
        v25 = *(_OWORD *)a1;
        v27 = *(_OWORD *)(a2 + 16);
        v26 = *(_OWORD *)(a2 + 32);
        v28 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v27;
        *(_OWORD *)(a1 + 32) = v26;
        *(_OWORD *)a1 = v28;
        *(_OWORD *)a2 = v25;
        *(_OWORD *)(a2 + 16) = v24;
        *(__n128 *)(a2 + 32) = result;
        *(_QWORD *)(a2 + 48) = v23;
      }
    }
  }
  return result;
}

uint64_t **sub_22F1309BC(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    v7[4] = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

unint64_t sub_22F130A88(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  uint64_t *v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  uint64_t *v144;
  BOOL v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  BOOL v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  BOOL v168;
  int64_t v169;
  int64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  BOOL v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  BOOL v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  BOOL v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  BOOL v234;
  unint64_t *v235;
  unint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  BOOL v240;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  BOOL v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t *v259;
  uint64_t *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  BOOL v264;
  uint64_t v265;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v134 = *i;
        v135 = *(unsigned int *)(*i + 32);
        if (!(_DWORD)v135)
          return result;
        v136 = *(a2 - 1);
        v137 = *(unint64_t **)(v136 + 24);
        v138 = *(unint64_t **)(v134 + 24);
        v139 = 8 * *(unsigned int *)(v136 + 32);
        v140 = 8 * v135 - 8;
        while (v139)
        {
          v141 = *v137;
          v142 = *v138;
          if (*v137 < *v138)
            break;
          ++v137;
          ++v138;
          v139 -= 8;
          v143 = v142 < v141 || v140 == 0;
          v140 -= 8;
          if (v143)
            return result;
        }
        *i = v136;
        *(a2 - 1) = v134;
        return result;
      case 3:
        return (unint64_t)sub_22F1319F4(i, i + 1, a2 - 1);
      case 4:
        return (unint64_t)sub_22F131E08(i, i + 1, i + 2, a2 - 1);
      case 5:
        return (unint64_t)sub_22F131824(i, i + 1, i + 2, i + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v144 = i + 1;
          v146 = i == a2 || v144 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v146)
            {
              v147 = i;
              do
              {
                v148 = v147;
                v147 = v144;
                v149 = *v148;
                v150 = *(unsigned int *)(*v148 + 32);
                if ((_DWORD)v150)
                {
                  v151 = v148[1];
                  v152 = *(unint64_t **)(v151 + 24);
                  v153 = *(unint64_t **)(v149 + 24);
                  v154 = 8 * *(unsigned int *)(v151 + 32);
                  v155 = 8 * v150 - 8;
                  while (v154)
                  {
                    v156 = *v152;
                    v157 = *v153;
                    if (*v152 < *v153)
                      break;
                    ++v152;
                    ++v153;
                    v154 -= 8;
                    v158 = v157 < v156 || v155 == 0;
                    v155 -= 8;
                    if (v158)
                      goto LABEL_216;
                  }
                  v148[1] = v149;
                  v159 = i;
                  if (v148 != i)
                  {
                    while (1)
                    {
                      v159 = v148;
                      v161 = *--v148;
                      v160 = v161;
                      v162 = *(unsigned int *)(v161 + 32);
                      if (!(_DWORD)v162)
                        break;
                      v163 = *(unint64_t **)(v151 + 24);
                      v164 = *(unint64_t **)(v160 + 24);
                      v165 = 8 * *(unsigned int *)(v151 + 32);
                      v166 = 8 * v162 - 8;
                      while (v165)
                      {
                        v167 = *v163;
                        result = *v164;
                        if (*v163 < *v164)
                          break;
                        ++v163;
                        ++v164;
                        v165 -= 8;
                        v168 = result < v167 || v166 == 0;
                        v166 -= 8;
                        if (v168)
                          goto LABEL_215;
                      }
                      *v159 = v160;
                      if (v148 == i)
                      {
                        v159 = i;
                        break;
                      }
                    }
                  }
LABEL_215:
                  *v159 = v151;
                }
LABEL_216:
                v144 = v147 + 1;
              }
              while (v147 + 1 != a2);
            }
          }
          else if (!v146)
          {
            do
            {
              v242 = v7;
              v7 = v144;
              v243 = *v242;
              v244 = *(unsigned int *)(*v242 + 32);
              if ((_DWORD)v244)
              {
                v245 = v242[1];
                v246 = *(unint64_t **)(v245 + 24);
                v247 = *(unint64_t **)(v243 + 24);
                v248 = 8 * *(unsigned int *)(v245 + 32);
                v249 = 8 * v244 - 8;
                while (v248)
                {
                  v250 = *v246;
                  v251 = *v247;
                  if (*v246 < *v247)
                    break;
                  ++v246;
                  ++v247;
                  v248 -= 8;
                  v252 = v251 < v250 || v249 == 0;
                  v249 -= 8;
                  if (v252)
                    goto LABEL_337;
                }
                *v7 = v243;
                v254 = v242 - 1;
                v253 = *(v242 - 1);
                v255 = *(unsigned int *)(v253 + 32);
                if ((_DWORD)v255)
                {
                  v256 = *(_QWORD *)(v253 + 24);
                  v257 = v256 + 8 * v255;
                  v258 = *(unint64_t **)(v245 + 24);
                  v259 = &v258[*(unsigned int *)(v245 + 32)];
                  do
                  {
                    v260 = v242;
                    v242 = v254;
                    v261 = v256 + 8;
                    while (v258 != v259)
                    {
                      v262 = *v258;
                      v263 = *(_QWORD *)(v261 - 8);
                      if (*v258 < v263)
                        break;
                      ++v258;
                      v264 = v263 < v262 || v261 == v257;
                      v261 += 8;
                      if (v264)
                      {
                        v242 = v260;
                        goto LABEL_336;
                      }
                    }
                    *v260 = v253;
                    v254 = v242 - 1;
                    v253 = *(v242 - 1);
                    v258 = *(unint64_t **)(v245 + 24);
                    v259 = &v258[*(unsigned int *)(v245 + 32)];
                    v256 = *(_QWORD *)(v253 + 24);
                    v265 = *(unsigned int *)(v253 + 32);
                    v257 = v256 + 8 * v265;
                  }
                  while ((_DWORD)v265);
                }
LABEL_336:
                *v242 = v245;
              }
LABEL_337:
              v144 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (i != a2)
          {
            v169 = (unint64_t)(v11 - 2) >> 1;
            v170 = v169;
            do
            {
              v171 = v170;
              if (v169 >= v170)
              {
                v172 = (2 * v170) | 1;
                v173 = &i[v172];
                if (2 * v171 + 2 < v11)
                {
                  v174 = v173[1];
                  v175 = *(unsigned int *)(v174 + 32);
                  if ((_DWORD)v175)
                  {
                    v176 = *(unint64_t **)(*v173 + 24);
                    v177 = *(unint64_t **)(v174 + 24);
                    v178 = 8 * *(unsigned int *)(*v173 + 32);
                    v179 = 8 * v175 - 8;
                    while (v178)
                    {
                      v180 = *v176;
                      v181 = *v177;
                      if (*v176 < *v177)
                        break;
                      ++v176;
                      ++v177;
                      v178 -= 8;
                      v182 = v181 < v180 || v179 == 0;
                      v179 -= 8;
                      if (v182)
                        goto LABEL_233;
                    }
                    ++v173;
                    v172 = 2 * v171 + 2;
                  }
                }
LABEL_233:
                v183 = *v173;
                v184 = i[v171];
                result = *(unsigned int *)(v184 + 32);
                if ((_DWORD)result)
                {
                  v185 = *(unint64_t **)(v183 + 24);
                  v186 = *(unint64_t **)(v184 + 24);
                  v187 = 8 * *(unsigned int *)(v183 + 32);
                  result = 8 * result - 8;
                  while (v187)
                  {
                    v188 = *v185;
                    v189 = *v186;
                    if (*v185 < *v186)
                      break;
                    ++v185;
                    ++v186;
                    v187 -= 8;
                    v190 = v189 < v188 || result == 0;
                    result -= 8;
                    if (v190)
                      goto LABEL_242;
                  }
                }
                else
                {
LABEL_242:
                  i[v171] = v183;
                  if (v169 >= v172)
                  {
                    while (1)
                    {
                      v192 = 2 * v172;
                      v172 = (2 * v172) | 1;
                      v191 = &i[v172];
                      v193 = v192 + 2;
                      if (v193 < v11)
                      {
                        result = v191[1];
                        v194 = *(unsigned int *)(result + 32);
                        if ((_DWORD)v194)
                        {
                          v195 = *(unint64_t **)(*v191 + 24);
                          result = *(_QWORD *)(result + 24);
                          v196 = 8 * *(unsigned int *)(*v191 + 32);
                          v197 = 8 * v194 - 8;
                          while (v196)
                          {
                            v198 = *v195;
                            v199 = *(_QWORD *)result;
                            if (*v195 < *(_QWORD *)result)
                              break;
                            ++v195;
                            result += 8;
                            v196 -= 8;
                            v200 = v199 < v198 || v197 == 0;
                            v197 -= 8;
                            if (v200)
                              goto LABEL_259;
                          }
                          ++v191;
                          v172 = v193;
                        }
                      }
LABEL_259:
                      v201 = *v191;
                      v202 = *(unsigned int *)(v184 + 32);
                      if ((_DWORD)v202)
                        break;
LABEL_268:
                      *v173 = v201;
                      v173 = v191;
                      if (v169 < v172)
                        goto LABEL_244;
                    }
                    v203 = *(unint64_t **)(v201 + 24);
                    v204 = *(unint64_t **)(v184 + 24);
                    result = 8 * *(unsigned int *)(v201 + 32);
                    v205 = 8 * v202 - 8;
                    while (result)
                    {
                      v206 = *v203;
                      v207 = *v204;
                      if (*v203 < *v204)
                        break;
                      ++v203;
                      ++v204;
                      result -= 8;
                      v208 = v207 < v206 || v205 == 0;
                      v205 -= 8;
                      if (v208)
                        goto LABEL_268;
                    }
                  }
                  v191 = v173;
LABEL_244:
                  *v191 = v184;
                }
              }
              v170 = v171 - 1;
            }
            while (v171);
            do
            {
              v209 = 0;
              v210 = *i;
              v211 = i;
              do
              {
                v212 = v211;
                v211 += v209 + 1;
                v213 = 2 * v209;
                v209 = (2 * v209) | 1;
                v214 = v213 + 2;
                if (v214 < v11)
                {
                  v215 = v211[1];
                  v216 = *(unsigned int *)(v215 + 32);
                  if ((_DWORD)v216)
                  {
                    v217 = *(unint64_t **)(*v211 + 24);
                    v218 = *(unint64_t **)(v215 + 24);
                    result = 8 * *(unsigned int *)(*v211 + 32);
                    v219 = 8 * v216 - 8;
                    while (result)
                    {
                      v220 = *v217;
                      v221 = *v218;
                      if (*v217 < *v218)
                        break;
                      ++v217;
                      ++v218;
                      result -= 8;
                      v222 = v221 < v220 || v219 == 0;
                      v219 -= 8;
                      if (v222)
                        goto LABEL_283;
                    }
                    ++v211;
                    v209 = v214;
                  }
                }
LABEL_283:
                *v212 = *v211;
              }
              while (v209 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              if (v211 == --a2)
              {
                *v211 = v210;
              }
              else
              {
                *v211 = *a2;
                *a2 = v210;
                v223 = (char *)v211 - (char *)i + 8;
                if (v223 >= 9)
                {
                  v224 = *v211;
                  result = *(unsigned int *)(*v211 + 32);
                  if ((_DWORD)result)
                  {
                    v225 = ((unint64_t)v223 >> 3) - 2;
                    v226 = v225 >> 1;
                    v227 = &i[v225 >> 1];
                    v228 = *v227;
                    v229 = *(unint64_t **)(*v227 + 24);
                    v230 = *(unint64_t **)(v224 + 24);
                    v231 = 8 * *(unsigned int *)(*v227 + 32);
                    result = 8 * result - 8;
                    while (v231)
                    {
                      v232 = *v229;
                      v233 = *v230;
                      if (*v229 < *v230)
                        break;
                      ++v229;
                      ++v230;
                      v231 -= 8;
                      v234 = v233 < v232 || result == 0;
                      result -= 8;
                      if (v234)
                        goto LABEL_310;
                    }
                    while (1)
                    {
                      *v211 = v228;
                      if (v225 < 2)
                        break;
                      v211 = v227;
                      result = *(unsigned int *)(v224 + 32);
                      if (!(_DWORD)result)
                      {
LABEL_308:
                        v227 = v211;
                        break;
                      }
                      v225 = v226 - 1;
                      v226 = (v226 - 1) >> 1;
                      v227 = &i[v226];
                      v228 = *v227;
                      v235 = *(unint64_t **)(*v227 + 24);
                      v236 = *(unint64_t **)(v224 + 24);
                      v237 = 8 * *(unsigned int *)(*v227 + 32);
                      result = 8 * result - 8;
                      while (v237)
                      {
                        v238 = *v235;
                        v239 = *v236;
                        if (*v235 < *v236)
                          break;
                        ++v235;
                        ++v236;
                        v237 -= 8;
                        v240 = v239 < v238 || result == 0;
                        result -= 8;
                        if (v240)
                          goto LABEL_308;
                      }
                    }
                    *v227 = v224;
                  }
                }
              }
LABEL_310:
              ;
            }
            while (v11-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &i[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)sub_22F1319F4(&v7[(unint64_t)v11 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_22F1319F4(v7, &v7[(unint64_t)v11 >> 1], a2 - 1);
          sub_22F1319F4(v7 + 1, v13 - 1, a2 - 2);
          sub_22F1319F4(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = (unint64_t)sub_22F1319F4(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *v7;
          v16 = (unint64_t *)(*v7 + 24);
          v17 = *v16;
          v18 = (unsigned int *)(*v7 + 32);
          v24 = *v18;
          v25 = 8 * v24;
          if ((_DWORD)v24)
          {
            v26 = 0;
            v27 = *(v7 - 1);
            v28 = *(_QWORD *)(v27 + 24);
            v20 = v17 + 8 * v24;
            v29 = 8 * *(unsigned int *)(v27 + 32);
            while (v29 != v26)
            {
              result = *(_QWORD *)(v28 + v26);
              v30 = *(_QWORD *)(v17 + v26);
              if (result < v30)
                break;
              v31 = v30 < result || v25 - 8 == v26;
              v26 += 8;
              if (v31)
                goto LABEL_21;
            }
            v21 = v7 + 1;
            v22 = v7[1];
            goto LABEL_43;
          }
LABEL_21:
          v32 = *(_QWORD *)(*v8 + 24);
          v33 = *(unsigned int *)(*v8 + 32);
          if ((_DWORD)v33)
          {
            v34 = 8 * v33 - 8;
            v35 = v25;
            v36 = *(unint64_t **)(*v7 + 24);
            result = *(_QWORD *)(*v8 + 24);
            while (v35)
            {
              v37 = *v36;
              v38 = *(_QWORD *)result;
              if (*v36 < *(_QWORD *)result)
                break;
              ++v36;
              result += 8;
              v35 -= 8;
              v39 = v38 < v37 || v34 == 0;
              v34 -= 8;
              if (v39)
                goto LABEL_30;
            }
            i = v7;
            do
            {
LABEL_112:
              v96 = i[1];
              ++i;
              v95 = v96;
              v97 = *(unsigned int *)(v96 + 32);
            }
            while (!(_DWORD)v97);
            v98 = *(unint64_t **)(v95 + 24);
            v99 = 8 * v97 - 8;
            v100 = v25;
            result = *(_QWORD *)(*v7 + 24);
            while (v100)
            {
              v101 = *(_QWORD *)result;
              v102 = *v98;
              if (*(_QWORD *)result < *v98)
                break;
              result += 8;
              ++v98;
              v100 -= 8;
              v103 = v102 < v101 || v99 == 0;
              v99 -= 8;
              if (v103)
                goto LABEL_112;
            }
          }
          else
          {
LABEL_30:
            for (i = v7 + 1; i < a2; ++i)
            {
              v40 = *(unsigned int *)(*i + 32);
              if ((_DWORD)v40)
              {
                v41 = *(unint64_t **)(*i + 24);
                v42 = 8 * v40 - 8;
                v43 = v25;
                result = *(_QWORD *)(*v7 + 24);
                while (v43)
                {
                  v44 = *(_QWORD *)result;
                  v45 = *v41;
                  if (*(_QWORD *)result < *v41)
                    break;
                  result += 8;
                  ++v41;
                  v43 -= 8;
                  v46 = v45 < v44 || v42 == 0;
                  v42 -= 8;
                  if (v46)
                    goto LABEL_41;
                }
                break;
              }
LABEL_41:
              ;
            }
          }
          if (i < a2)
            v104 = a2 - 1;
          else
            v104 = a2;
          if ((_DWORD)v33 && i < a2)
          {
            v105 = v32 + 8 * v33;
            v104 = a2 - 1;
            do
            {
              v106 = v32 + 8;
              v107 = v25;
              v108 = *(unint64_t **)(*v7 + 24);
              while (v107)
              {
                result = *v108;
                v109 = *(_QWORD *)(v106 - 8);
                if (*v108 < v109)
                  break;
                ++v108;
                v107 -= 8;
                v110 = v109 < result || v106 == v105;
                v106 += 8;
                if (v110)
                  goto LABEL_138;
              }
              v111 = *--v104;
              v32 = *(_QWORD *)(v111 + 24);
              v112 = *(unsigned int *)(v111 + 32);
              v105 = v32 + 8 * v112;
            }
            while ((_DWORD)v112);
          }
LABEL_138:
          if (i < v104)
          {
            v113 = *i;
            v114 = *v104;
            do
            {
              *i = v114;
              *v104 = v113;
              do
              {
LABEL_141:
                v115 = i[1];
                ++i;
                v113 = v115;
                v116 = *(unsigned int *)(v115 + 32);
              }
              while (!(_DWORD)v116);
              v117 = *(unint64_t **)(v113 + 24);
              v118 = 8 * v116 - 8;
              v119 = 8 * *v18;
              result = *v16;
              while (v119)
              {
                v120 = *(_QWORD *)result;
                v121 = *v117;
                if (*(_QWORD *)result < *v117)
                  break;
                result += 8;
                ++v117;
                v119 -= 8;
                v122 = v121 < v120 || v118 == 0;
                v118 -= 8;
                if (v122)
                  goto LABEL_141;
              }
              v123 = *--v104;
              v114 = v123;
              v124 = *(unsigned int *)(v123 + 32);
              if ((_DWORD)v124)
              {
                v125 = *(_QWORD *)(v114 + 24);
                v126 = v125 + 8 * v124;
                do
                {
                  v127 = v125 + 8;
                  result = 8 * *v18;
                  v128 = (unint64_t *)*v16;
                  while (result)
                  {
                    v129 = *v128;
                    v130 = *(_QWORD *)(v127 - 8);
                    if (*v128 < v130)
                      break;
                    ++v128;
                    result -= 8;
                    v131 = v130 < v129 || v127 == v126;
                    v127 += 8;
                    if (v131)
                      goto LABEL_163;
                  }
                  v132 = *--v104;
                  v114 = v132;
                  v125 = *(_QWORD *)(v132 + 24);
                  result = *(unsigned int *)(v132 + 32);
                  v126 = v125 + 8 * result;
                }
                while ((_DWORD)result);
              }
LABEL_163:
              ;
            }
            while (i < v104);
          }
          v133 = i - 1;
          if (i - 1 != v7)
            *v7 = *v133;
          a4 = 0;
          *v133 = v15;
          continue;
        }
        v15 = *v7;
        v16 = (unint64_t *)(*v7 + 24);
        v17 = *v16;
        v18 = (unsigned int *)(*v7 + 32);
        v19 = *v18;
        v20 = *v16 + 8 * v19;
        v21 = v7 + 1;
        v22 = v7[1];
        if (!(_DWORD)v19)
        {
          v23 = 1;
LABEL_66:
          if (v21 >= a2)
          {
            v54 = a2;
          }
          else
          {
            v62 = v17 + 8;
            v54 = a2;
            while (1)
            {
              v64 = *--v54;
              v63 = v64;
              if ((v23 & 1) == 0)
                break;
LABEL_77:
              if (v21 >= v54)
                goto LABEL_80;
            }
            v65 = *(unint64_t **)(v63 + 24);
            v66 = 8 * *(unsigned int *)(v63 + 32);
            v67 = v62;
            while (v66)
            {
              v68 = *v65;
              v69 = *(_QWORD *)(v67 - 8);
              if (*v65 < v69)
                break;
              ++v65;
              v66 -= 8;
              v70 = v69 < v68 || v67 == v20;
              v67 += 8;
              if (v70)
                goto LABEL_77;
            }
          }
          goto LABEL_80;
        }
LABEL_43:
        v47 = v21;
        v21 = v7;
LABEL_44:
        v48 = 0;
        v49 = v21;
        v21 = v47;
        do
        {
          if (8 * *(unsigned int *)(v22 + 32) == v48
            || (v50 = *(_QWORD *)(*(_QWORD *)(v22 + 24) + v48), v51 = *(_QWORD *)(v17 + v48), v50 < v51))
          {
            ++v47;
            v22 = v21[1];
            goto LABEL_44;
          }
          v48 += 8;
        }
        while (v51 >= v50 && v48 + v17 != v20);
        if (v49 == v7)
        {
          v23 = 0;
          goto LABEL_66;
        }
        v53 = v17 + 8;
        v54 = a2;
LABEL_56:
        v55 = *--v54;
        v56 = *(unint64_t **)(v55 + 24);
        v57 = 8 * *(unsigned int *)(v55 + 32);
        v58 = v53;
        while (v57)
        {
          v59 = *v56;
          v60 = *(_QWORD *)(v58 - 8);
          if (*v56 < v60)
            break;
          ++v56;
          v57 -= 8;
          v61 = v60 < v59 || v58 == v20;
          v58 += 8;
          if (v61)
            goto LABEL_56;
        }
LABEL_80:
        i = v21;
        if (v21 < v54)
        {
          v71 = *v54;
          i = v21;
          v72 = v54;
          do
          {
            *i = v71;
            *v72 = v22;
            v73 = *v18;
            v74 = i[1];
            ++i;
            v22 = v74;
            v75 = 8 * v73;
            if ((_DWORD)v73)
            {
              while (1)
              {
                v76 = *(unint64_t **)(v22 + 24);
                v77 = 8 * *(unsigned int *)(v22 + 32);
                v78 = v75 - 8;
                v79 = (unint64_t *)*v16;
                while (v77)
                {
                  v80 = *v76;
                  v81 = *v79;
                  if (*v76 < *v79)
                    break;
                  ++v76;
                  ++v79;
                  v77 -= 8;
                  v82 = v81 < v80 || v78 == 0;
                  v78 -= 8;
                  if (v82)
                    goto LABEL_93;
                }
                v83 = i[1];
                ++i;
                v22 = v83;
              }
            }
LABEL_93:
            v84 = v75 - 8;
            do
            {
LABEL_94:
              v85 = *--v72;
              v71 = v85;
            }
            while (!(_DWORD)v73);
            v86 = *(unint64_t **)(v71 + 24);
            v87 = 8 * *(unsigned int *)(v71 + 32);
            v88 = v84;
            v89 = (unint64_t *)*v16;
            while (v87)
            {
              v90 = *v86;
              v91 = *v89;
              if (*v86 < *v89)
                break;
              ++v86;
              ++v89;
              v87 -= 8;
              v92 = v91 < v90 || v88 == 0;
              v88 -= 8;
              if (v92)
                goto LABEL_94;
            }
          }
          while (i < v72);
        }
        v93 = i - 1;
        if (i - 1 != v7)
          *v7 = *v93;
        *v93 = v15;
        if (v21 < v54)
        {
LABEL_110:
          result = sub_22F130A88(v7, i - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v94 = sub_22F131BD0(v7, i - 1);
        result = sub_22F131BD0(i, a2);
        if (!(_DWORD)result)
        {
          if (v94)
            continue;
          goto LABEL_110;
        }
        a2 = i - 1;
        if (!v94)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_22F131824(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;

  result = sub_22F131E08(a1, a2, a3, a4);
  v11 = *a4;
  v12 = *(unsigned int *)(*a4 + 32);
  if ((_DWORD)v12)
  {
    v13 = *(unint64_t **)(*a5 + 24);
    v14 = *(unint64_t **)(v11 + 24);
    v15 = 8 * *(unsigned int *)(*a5 + 32);
    v16 = 8 * v12 - 8;
    while (v15)
    {
      v17 = *v13;
      v18 = *v14;
      if (*v13 < *v14)
        break;
      ++v13;
      ++v14;
      v15 -= 8;
      v19 = v18 < v17 || v16 == 0;
      v16 -= 8;
      if (v19)
        return result;
    }
    *a4 = *a5;
    *a5 = v11;
    v20 = *a3;
    v21 = *(unsigned int *)(*a3 + 32);
    if ((_DWORD)v21)
    {
      v22 = *(unint64_t **)(*a4 + 24);
      v23 = *(unint64_t **)(v20 + 24);
      v24 = 8 * *(unsigned int *)(*a4 + 32);
      v25 = 8 * v21 - 8;
      while (v24)
      {
        v26 = *v22;
        v27 = *v23;
        if (*v22 < *v23)
          break;
        ++v22;
        ++v23;
        v24 -= 8;
        v28 = v27 < v26 || v25 == 0;
        v25 -= 8;
        if (v28)
          return result;
      }
      *a3 = *a4;
      *a4 = v20;
      v29 = *a2;
      v30 = *(unsigned int *)(*a2 + 32);
      if ((_DWORD)v30)
      {
        v31 = *(unint64_t **)(*a3 + 24);
        v32 = *(unint64_t **)(v29 + 24);
        v33 = 8 * *(unsigned int *)(*a3 + 32);
        v34 = 8 * v30 - 8;
        while (v33)
        {
          v35 = *v31;
          v36 = *v32;
          if (*v31 < *v32)
            break;
          ++v31;
          ++v32;
          v33 -= 8;
          v37 = v36 < v35 || v34 == 0;
          v34 -= 8;
          if (v37)
            return result;
        }
        *a2 = *a3;
        *a3 = v29;
        v38 = *a1;
        v39 = *(unsigned int *)(*a1 + 32);
        if ((_DWORD)v39)
        {
          v40 = *(unint64_t **)(*a2 + 24);
          v41 = *(unint64_t **)(v38 + 24);
          v42 = 8 * *(unsigned int *)(*a2 + 32);
          v43 = 8 * v39 - 8;
          while (v42)
          {
            v44 = *v40;
            v45 = *v41;
            if (*v40 < *v41)
              break;
            ++v40;
            ++v41;
            v42 -= 8;
            v46 = v45 < v44 || v43 == 0;
            v43 -= 8;
            if (v46)
              return result;
          }
          *a1 = *a2;
          *a2 = v38;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_22F1319F4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;

  v3 = *a2;
  v4 = *result;
  v5 = *(unint64_t **)(*a2 + 24);
  v6 = *(unsigned int *)(*a2 + 32);
  v7 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v7)
  {
    v8 = *(unint64_t **)(v4 + 24);
    v9 = 8 * v7 - 8;
    v10 = 8 * v6;
    v11 = *(unint64_t **)(*a2 + 24);
    while (v10)
    {
      v12 = *v11;
      v13 = *v8;
      if (*v11 < *v8)
        break;
      ++v11;
      ++v8;
      v10 -= 8;
      v14 = v13 < v12 || v9 == 0;
      v9 -= 8;
      if (v14)
        goto LABEL_10;
    }
    if ((_DWORD)v6)
    {
      v21 = *(unint64_t **)(*a3 + 24);
      v22 = 8 * *(unsigned int *)(*a3 + 32);
      v23 = 8 * v6 - 8;
      while (v22)
      {
        v24 = *v21;
        v25 = *v5;
        if (*v21 < *v5)
          break;
        ++v21;
        ++v5;
        v22 -= 8;
        v26 = v25 < v24 || v23 == 0;
        v23 -= 8;
        if (v26)
          goto LABEL_29;
      }
      *result = *a3;
      goto LABEL_51;
    }
LABEL_29:
    *result = v3;
    *a2 = v4;
    v27 = *(unsigned int *)(v4 + 32);
    if ((_DWORD)v27)
    {
      v28 = *(unint64_t **)(*a3 + 24);
      v29 = *(unint64_t **)(v4 + 24);
      v30 = 8 * *(unsigned int *)(*a3 + 32);
      v31 = 8 * v27 - 8;
      while (v30)
      {
        v32 = *v28;
        v33 = *v29;
        if (*v28 < *v29)
          break;
        ++v28;
        ++v29;
        v30 -= 8;
        v34 = v33 < v32 || v31 == 0;
        v31 -= 8;
        if (v34)
          return result;
      }
      *a2 = *a3;
LABEL_51:
      *a3 = v4;
    }
  }
  else
  {
LABEL_10:
    if ((_DWORD)v6)
    {
      v15 = *(unint64_t **)(*a3 + 24);
      v16 = 8 * *(unsigned int *)(*a3 + 32);
      v17 = 8 * v6 - 8;
      while (v16)
      {
        v18 = *v15;
        v19 = *v5;
        if (*v15 < *v5)
          break;
        ++v15;
        ++v5;
        v16 -= 8;
        v20 = v19 < v18 || v17 == 0;
        v17 -= 8;
        if (v20)
          return result;
      }
      *a2 = *a3;
      *a3 = v3;
      v35 = *result;
      v36 = *(unsigned int *)(*result + 32);
      if ((_DWORD)v36)
      {
        v37 = *(unint64_t **)(*a2 + 24);
        v38 = *(unint64_t **)(v35 + 24);
        v39 = 8 * *(unsigned int *)(*a2 + 32);
        v40 = 8 * v36 - 8;
        while (v39)
        {
          v41 = *v37;
          v42 = *v38;
          if (*v37 < *v38)
            break;
          ++v37;
          ++v38;
          v39 -= 8;
          v43 = v42 < v41 || v40 == 0;
          v40 -= 8;
          if (v43)
            return result;
        }
        *result = *a2;
        *a2 = v35;
      }
    }
  }
  return result;
}

BOOL sub_22F131BD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(unsigned int *)(*a1 + 32);
      if ((_DWORD)v7)
      {
        v8 = *(a2 - 1);
        v9 = *(unint64_t **)(v8 + 24);
        v10 = *(unint64_t **)(v6 + 24);
        v11 = 8 * *(unsigned int *)(v8 + 32);
        v12 = 8 * v7 - 8;
        do
        {
          if (!v11 || (v13 = *v9, v14 = *v10, *v9 < *v10))
          {
            *a1 = v8;
            *(a2 - 1) = v6;
            return 1;
          }
          ++v9;
          ++v10;
          v11 -= 8;
          v15 = v14 < v13 || v12 == 0;
          v12 -= 8;
        }
        while (!v15);
      }
      return result;
    case 3:
      sub_22F1319F4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_22F131E08(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_22F131824(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v16 = a1 + 2;
      sub_22F1319F4(a1, a1 + 1, a1 + 2);
      v17 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *v16;
    v20 = *(unsigned int *)(*v16 + 32);
    if ((_DWORD)v20)
    {
      v21 = *v17;
      v22 = *(unint64_t **)(*v17 + 24);
      v23 = *(unint64_t **)(v19 + 24);
      v24 = 8 * *(unsigned int *)(*v17 + 32);
      v25 = 8 * v20 - 8;
      while (v24)
      {
        v26 = *v22;
        v27 = *v23;
        if (*v22 < *v23)
          break;
        ++v22;
        ++v23;
        v24 -= 8;
        v28 = v27 < v26 || v25 == 0;
        v25 -= 8;
        if (v28)
          goto LABEL_38;
      }
      *v17 = v19;
      v29 = a1;
      if (v16 != a1)
      {
        while (1)
        {
          v29 = v16;
          v31 = *--v16;
          v30 = v31;
          v32 = *(unsigned int *)(v31 + 32);
          if (!(_DWORD)v32)
            break;
          v33 = *(unint64_t **)(v21 + 24);
          v34 = *(unint64_t **)(v30 + 24);
          v35 = 8 * *(unsigned int *)(v21 + 32);
          v36 = 8 * v32 - 8;
          while (v35)
          {
            v37 = *v33;
            v38 = *v34;
            if (*v33 < *v34)
              break;
            ++v33;
            ++v34;
            v35 -= 8;
            v39 = v38 < v37 || v36 == 0;
            v36 -= 8;
            if (v39)
              goto LABEL_37;
          }
          *v29 = v30;
          if (v16 == a1)
          {
            v29 = a1;
            break;
          }
        }
      }
LABEL_37:
      *v29 = v21;
      if (++v18 == 8)
        return v17 + 1 == a2;
    }
LABEL_38:
    v16 = v17++;
    if (v17 == a2)
      return 1;
  }
}

uint64_t *sub_22F131E08(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;

  result = sub_22F1319F4(a1, a2, a3);
  v9 = *a3;
  v10 = *(unsigned int *)(*a3 + 32);
  if ((_DWORD)v10)
  {
    v11 = *(unint64_t **)(*a4 + 24);
    v12 = *(unint64_t **)(v9 + 24);
    v13 = 8 * *(unsigned int *)(*a4 + 32);
    v14 = 8 * v10 - 8;
    while (v13)
    {
      v15 = *v11;
      v16 = *v12;
      if (*v11 < *v12)
        break;
      ++v11;
      ++v12;
      v13 -= 8;
      v17 = v16 < v15 || v14 == 0;
      v14 -= 8;
      if (v17)
        return result;
    }
    *a3 = *a4;
    *a4 = v9;
    v18 = *a2;
    v19 = *(unsigned int *)(*a2 + 32);
    if ((_DWORD)v19)
    {
      v20 = *(unint64_t **)(*a3 + 24);
      v21 = *(unint64_t **)(v18 + 24);
      v22 = 8 * *(unsigned int *)(*a3 + 32);
      v23 = 8 * v19 - 8;
      while (v22)
      {
        v24 = *v20;
        v25 = *v21;
        if (*v20 < *v21)
          break;
        ++v20;
        ++v21;
        v22 -= 8;
        v26 = v25 < v24 || v23 == 0;
        v23 -= 8;
        if (v26)
          return result;
      }
      *a2 = *a3;
      *a3 = v18;
      v27 = *a1;
      v28 = *(unsigned int *)(*a1 + 32);
      if ((_DWORD)v28)
      {
        v29 = *(unint64_t **)(*a2 + 24);
        v30 = *(unint64_t **)(v27 + 24);
        v31 = 8 * *(unsigned int *)(*a2 + 32);
        v32 = 8 * v28 - 8;
        while (v31)
        {
          v33 = *v29;
          v34 = *v30;
          if (*v29 < *v30)
            break;
          ++v29;
          ++v30;
          v31 -= 8;
          v35 = v34 < v33 || v32 == 0;
          v32 -= 8;
          if (v35)
            return result;
        }
        *a1 = *a2;
        *a2 = v27;
      }
    }
  }
  return result;
}

unint64_t sub_22F131F68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int32x2_t *a8)
{
  uint64_t v10;
  uint64_t v12;
  int32x2_t *v15;
  unint64_t result;
  uint64_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int32x2_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int64_t v41;
  char *v42;
  char *v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v51;
  _QWORD v52[2];
  char v53;

  v10 = a6;
  v12 = a4;
  if (a5 == a3 && a6 == a4)
  {
    v15 = (int32x2_t *)operator new(0x40uLL);
    v15[2] = 0;
    v15[3] = 0;
    result = llvm::deallocate_buffer(0, 0);
    v17 = a7[2].u32[0];
    v15[4].i32[0] = v17;
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = (void *)MEMORY[0x23489D23C](16 * v17, 8);
      v15[2] = (int32x2_t)v19;
      v15[3] = a7[1];
      result = (unint64_t)memcpy(v19, *(const void **)a7, v18);
    }
    else
    {
      v15[2] = 0;
      v15[3] = 0;
    }
    v15[5] = 0;
    v15[6] = 0;
    v15[7] = 0;
    v40 = (_BYTE *)a7[3];
    v39 = (_BYTE *)a7[4];
    v41 = v39 - v40;
    if (v39 != v40)
    {
      if (v41 < 0)
LABEL_47:
        abort();
      v42 = (char *)operator new(v39 - v40);
      v15[5] = (int32x2_t)v42;
      v43 = &v42[16 * (v41 >> 4)];
      v15[7] = (int32x2_t)v43;
      result = (unint64_t)memcpy(v42, v40, v41);
      v15[6] = (int32x2_t)v43;
    }
    v44 = *a8;
    *v15 = *a8;
    v15[1] = (int32x2_t)a8;
    *(_QWORD *)(*(_QWORD *)&v44 + 8) = v15;
    *a8 = (int32x2_t)v15;
    ++*(_QWORD *)&a8[2];
  }
  else
  {
    v49 = sub_22F0C975C(a1, a3);
    result = sub_22E46A3A0(a3);
    if (result != v20)
    {
      v21 = result;
      v22 = v20;
      v47 = v20;
      v48 = a2;
      do
      {
        v23 = *(_QWORD *)(**(_QWORD **)(v21 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v23 + 8) & 0xF) != 0)
          v23 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v21 + 16));
        v24 = sub_22F10C2A4(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
        if (v24)
        {
          if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3)
            v25 = 0;
          else
            v25 = v24;
        }
        else
        {
          v25 = 0;
        }
        if ((*(_BYTE *)(v21 + 12) & 1) != 0)
          v26 = sub_22F2500F4(a2, v25);
        else
          v26 = sub_22E46A3EC(v49, v25) + v12;
        *(_QWORD *)&v51 = v25;
        *((_QWORD *)&v51 + 1) = v26;
        sub_22F40CF80((uint64_t)v52, (uint64_t)a7, (uint64_t *)&v51);
        if (v53)
        {
          v28 = (_OWORD *)a7[4];
          v27 = (unint64_t)a7[5];
          if ((unint64_t)v28 >= v27)
          {
            v45 = v12;
            v46 = v10;
            v30 = (_OWORD *)a7[3];
            v31 = v28 - v30;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 60)
              goto LABEL_47;
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 3 > v32)
              v32 = v33 >> 3;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
              v34 = 0xFFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              if (v34 >> 60)
                sub_22E3B3F8C();
              v35 = (char *)operator new(16 * v34);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[16 * v31];
            *(_OWORD *)v36 = v51;
            v37 = v36;
            if (v28 != v30)
            {
              do
              {
                *((_OWORD *)v37 - 1) = *(v28 - 1);
                v37 -= 16;
                --v28;
              }
              while (v28 != v30);
              v28 = (_OWORD *)a7[3];
            }
            v29 = v36 + 16;
            a7[3] = (int32x2_t)v37;
            a7[4] = (int32x2_t)(v36 + 16);
            a7[5] = (int32x2_t)&v35[16 * v34];
            v10 = v46;
            if (v28)
              operator delete(v28);
            v12 = v45;
          }
          else
          {
            *v28 = v51;
            v29 = v28 + 1;
          }
          a7[4] = (int32x2_t)v29;
          v22 = v47;
          a2 = v48;
        }
        sub_22F131F68(a1, a2, v25, v26, a5, v10, a7, a8);
        v38 = a7[4];
        v52[0] = 0;
        result = sub_22F40D010((uint64_t)*a7, a7[2].i32[0], *(_QWORD *)(*(_QWORD *)&v38 - 16), *(_QWORD *)(*(_QWORD *)&v38 - 8), v52);
        if ((_DWORD)result)
        {
          *(_OWORD *)v52[0] = xmmword_22F4A9D90;
          a7[1] = vadd_s32(a7[1], (int32x2_t)0x1FFFFFFFFLL);
        }
        *(_QWORD *)&a7[4] -= 16;
        v21 += 24;
      }
      while (v21 != v22);
    }
  }
  return result;
}

_OWORD *sub_22F1322CC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40D1B8(a1, v4, &v4[2 * v3]);
    return (_OWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_22F45B630;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F132390(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 16 * v2;
      do
      {
        *(_OWORD *)v6 = xmmword_22F45B630;
        v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v9;
      result = MEMORY[0x23489D23C](16 * v9, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v10 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_OWORD *)result = xmmword_22F45B630;
          result += 16;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

uint64_t *sub_22F132498(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t i;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  result[2] = 0;
  result[1] = 0;
  *result = (uint64_t)(result + 1);
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = result;
    do
    {
      v7 = *(_QWORD **)(a3 + 8);
      for (i = v4[4]; v7; v7 = (_QWORD *)*v7)
      {
        v9 = v7[4];
        if (i >= v9)
        {
          if (v9 >= i)
            goto LABEL_9;
          ++v7;
        }
      }
      result = sub_22F132550(v6, i, v4[4]);
LABEL_9:
      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v12 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
    }
    while (v11 != v3);
  }
  return result;
}

uint64_t *sub_22F132550(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = sub_22E49FD00((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void sub_22F132604(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t i;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  char *v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  __int128 v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64x2_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  llvm **v136;
  char **v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  _BYTE v144[80];
  _BYTE v145[24];
  char *v146;
  __int128 v147;
  uint64_t v148;
  _QWORD v149[2];
  unsigned int v150;
  _QWORD *v151;
  void *v152;
  uint64_t v153;
  int v154;
  _QWORD v155[5];
  void *v156;
  uint64_t v157;
  _DWORD v158[26];
  uint64_t v159;
  __int16 v160;
  char v161;
  llvm *v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  void *v167;
  uint64_t v168;
  _QWORD v169[13];

  v169[10] = *MEMORY[0x24BDAC8D0];
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x400) != 0)
  {
    v121 = a5;
    v12 = sub_22F0C975C(*(_QWORD *)(a1 + 8), a2);
    v13 = v12;
    v135 = 0;
    v14 = *(_QWORD *)(a1 + 32);
    v120 = a6;
    if (*(_DWORD *)(v14 + 88) <= a4)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v12 + 72) + 48);
      v15 = v25 & 0xFFFFFFFFFFFFFFF8;
      v24 = a5;
      if ((v25 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_22:
        v142 = v144;
        v143 = 0xA00000000;
        v146 = (char *)&v147 + 8;
        *(_QWORD *)&v147 = 0xA00000000;
        v163.i64[0] = 0;
        v162 = 0;
        v163.i32[2] = 0;
        if ((*(_BYTE *)(a2 + 72) & 0x80) != 0)
          sub_22EFCC320(a2 + 64);
        for (i = *(_QWORD *)(a2 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
        {
          if ((*(_DWORD *)(i + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
          {
            v136 = *(llvm ***)(i + 40);
            LODWORD(v137) = v147;
            sub_22F0C12F0((uint64_t)&v162, &v136, &v137, (uint64_t)v145);
            v114 = *(_QWORD *)v145;
            if (v145[16])
            {
              *(_QWORD *)v145 = &v145[16];
              *(_QWORD *)&v145[8] = 0x100000000;
              sub_22F338F44((uint64_t)&v146, (unint64_t)v145);
              if (*(_BYTE **)v145 != &v145[16])
                free(*(void **)v145);
            }
            if ((*(_DWORD *)(i + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
            {
              v115 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)i + 32))(i);
              if (((*(_BYTE *)(v115 + 82) & 0xC) != 0 || sub_22EFD7260(v115))
                && (*(_QWORD *)(i + 80) & 0xC0000000) != 0x80000000)
              {
                v116 = &v146[24 * *(unsigned int *)(v114 + 8)];
                v117 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)i + 32))(i);
                v118 = *((unsigned int *)v116 + 2);
                if (v118 >= *((unsigned int *)v116 + 3))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v118 = *((unsigned int *)v116 + 2);
                }
                *(_QWORD *)(*(_QWORD *)v116 + 8 * v118) = v117;
                ++*((_DWORD *)v116 + 2);
              }
            }
          }
        }
        if ((_DWORD)v147)
        {
          v27 = v146;
          v28 = &v146[24 * v147];
          do
          {
            v29 = *(_QWORD *)v27 + 8 * *((unsigned int *)v27 + 2);
            sub_22F2BE118((uint64_t)&v142, v29, v29, *(_QWORD *)v27, *(_QWORD *)v27);
            v27 += 24;
          }
          while (v27 != v28);
        }
        llvm::deallocate_buffer(v162, (void *)(16 * v163.u32[2]));
        sub_22F3390CC(&v146);
        v30 = (uint64_t *)v142;
        if (!(_DWORD)v143)
          goto LABEL_211;
        v123 = (uint64_t *)((char *)v142 + 8 * v143);
        v119 = a1 + 664;
        v122 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v31 = v121;
        v124 = a3;
        while (1)
        {
          v32 = *v30;
          v146 = 0;
          v129 = (char *)v32;
          if (sub_22F12A59C(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 96), v32, a3, &v146))
          {
            v33 = *((_QWORD *)v146 + 2);
            v125 = *((_QWORD *)v146 + 3);
            v133 = *((_QWORD *)v146 + 4);
          }
          else
          {
            v33 = 0;
            v125 = 0;
            v133 = 0;
          }
          v128 = sub_22F12CBC0((uint64_t)v129, a6);
          memset(v145, 0, sizeof(v145));
          v162 = (llvm *)1;
          v163 = v122;
          v164 = v122;
          v165 = v122;
          v166 = v122;
          v167 = v169;
          v168 = 0x800000000;
          v146 = (char *)v149;
          *(_QWORD *)&v147 = v149;
          *((_QWORD *)&v147 + 1) = 8;
          LODWORD(v148) = 0;
          v136 = &v162;
          v137 = &v146;
          sub_22F13371C(v33, (uint64_t *)&v136);
          if ((char *)v147 != v146)
            free((void *)v147);
          v34 = v133;
          if (!(_DWORD)v168)
            goto LABEL_115;
          v146 = 0;
          *(_QWORD *)&v147 = &v147;
          *((_QWORD *)&v147 + 1) = &v147;
          v148 = 0;
          v35 = 5;
          v149[0] = 1;
          do
          {
            (&v146)[v35] = 0;
            v35 += 2;
          }
          while (v35 != 21);
          v151 = v155;
          v152 = v155;
          v153 = 4;
          v154 = 0;
          v155[4] = 0;
          v156 = v158;
          v157 = 0x400000000;
          v158[24] = 0;
          v159 = 0;
          v160 = 257;
          v161 = 1;
          v36 = *(_WORD *)(v33 + 80) & 0x7F;
          v37 = -40;
          if (v36 > 0x46)
          {
            if (v36 == 83)
              goto LABEL_55;
            if (v36 == 71)
            {
              v37 = -56;
              goto LABEL_55;
            }
            if (v36 != 81)
              goto LABEL_49;
          }
          else
          {
            if (v36 > 0x18)
              goto LABEL_48;
            if (v36 == 16)
              goto LABEL_41;
            if (((1 << v36) & 0x1066) == 0)
            {
              if (v36 == 24)
              {
LABEL_41:
                v37 = -48;
                goto LABEL_55;
              }
LABEL_48:
              if (v36 == 70)
              {
                v37 = -64;
                goto LABEL_55;
              }
LABEL_49:
              v38 = v36 - 52;
              v39 = v36 - 33 >= 5;
              v40 = -64;
              if (v39)
                v40 = -48;
              v39 = v38 >= 6;
              v37 = -72;
              if (v39)
                v37 = v40;
            }
          }
LABEL_55:
          v41 = *(_QWORD *)(v33 + 72 + v37 + 16);
          v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
          if ((v41 & 4) != 0)
            v42 = (_QWORD *)*v42;
          if (v42)
            v43 = (unint64_t)(v42 - 8);
          else
            v43 = 0;
          v136 = &v162;
          sub_22EFB3774(v43, (unsigned int (*)(uint64_t, unint64_t, uint64_t))sub_22F13388C, (uint64_t)&v136, (uint64_t)&v146, 0);
          v44 = *(_WORD *)(v33 + 80) & 0x7F;
          v45 = -40;
          if (v44 > 0x46)
          {
            switch(v44)
            {
              case 'S':
                goto LABEL_75;
              case 'G':
                v45 = -56;
                goto LABEL_75;
              case 'Q':
                goto LABEL_75;
            }
          }
          else
          {
            if (v44 <= 0x18)
            {
              if (v44 == 16)
                goto LABEL_63;
              if (((1 << v44) & 0x1066) != 0)
                goto LABEL_75;
              if (v44 == 24)
                goto LABEL_63;
            }
            if (v44 == 70)
              goto LABEL_73;
          }
          if (v44 - 52 < 6)
          {
            v45 = -72;
            goto LABEL_75;
          }
          if (v44 - 33 < 5)
          {
LABEL_73:
            v45 = -64;
            goto LABEL_75;
          }
LABEL_63:
          v45 = -48;
LABEL_75:
          v46 = *(_QWORD *)(v33 + 72 + v45 + 16);
          v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
          if ((v46 & 4) != 0)
            v47 = (_QWORD *)*v47;
          v126 = v30;
          if (v47)
            v48 = (unint64_t)(v47 - 8);
          else
            v48 = 0;
          v132 = sub_22F0C975C(*(_QWORD *)(a1 + 8), v48);
          v49 = *((_QWORD *)&v147 + 1);
          if (*((__int128 **)&v147 + 1) != &v147)
          {
            v34 = 0;
            v50 = 1;
            v130 = v33;
            while (1)
            {
              v51 = *(_DWORD *)(v49 + 24);
              if (v51)
              {
                v52 = 0;
                v53 = *(_QWORD **)(v49 + 16);
                v54 = &v53[3 * v51];
                v55 = v133;
                do
                {
                  v56 = *(_QWORD *)(**(_QWORD **)(*v53 + 16) & 0xFFFFFFFFFFFFFFF0);
                  if ((*(_BYTE *)(v56 + 8) & 0xF) != 0)
                    v56 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*v53 + 16));
                  v57 = v53[1];
                  v58 = sub_22F10C2A4(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0));
                  if (v58)
                  {
                    if ((*(_DWORD *)(v58 + 28) & 0x7Fu) - 35 >= 3)
                      v59 = 0;
                    else
                      v59 = v58;
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = sub_22F0C975C(*(_QWORD *)(a1 + 8), v57);
                  if ((*(_BYTE *)(*v53 + 12) & 1) != 0)
                  {
                    v52 = sub_22F2500F4(v132, v59) + v133;
                    v55 = v52;
                  }
                  else
                  {
                    v55 += sub_22E46A3EC(v60, v59);
                  }
                  v53 += 3;
                }
                while (v53 != v54);
                v33 = v130;
                v61 = (*(_DWORD *)(v130 + 28) & 0x7F) == 57;
                if (v52)
                  goto LABEL_100;
              }
              else
              {
                v61 = (*(_DWORD *)(v33 + 28) & 0x7F) == 57;
                v55 = v133;
              }
              v52 = v133;
LABEL_100:
              if (v61)
                v62 = v52;
              else
                v62 = v55;
              if (v50 & 1 | (v34 > v62))
                v34 = v62;
              v49 = *(_QWORD *)(v49 + 8);
              v50 = 0;
              if ((__int128 *)v49 == &v147)
                goto LABEL_108;
            }
          }
          v34 = 0;
LABEL_108:
          if (v156 != v158)
            free(v156);
          a6 = v120;
          v31 = v121;
          v30 = v126;
          if (v152 != v151)
            free(v152);
          if ((v149[0] & 1) == 0)
            llvm::deallocate_buffer((llvm *)v149[1], (void *)(16 * v150));
          sub_22E687D9C((uint64_t *)&v147);
LABEL_115:
          if (v167 != v169)
            free(v167);
          if ((v162 & 1) == 0)
            llvm::deallocate_buffer((llvm *)v163.i64[0], (void *)(8 * v163.u32[2]));
          v63 = *(_QWORD *)(a1 + 32);
          v64 = v34 - *(_QWORD *)(v63 + 104);
          *(_QWORD *)v145 = v64;
          v65 = v128;
          if (!v128 && (char *)v33 == v129 || !*(_DWORD *)(v63 + 64) || (v66 = **(_QWORD **)(v63 + 56)) == 0)
          {
LABEL_152:
            if (!v31)
              goto LABEL_153;
            goto LABEL_195;
          }
          v67 = sub_22E5E4648(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 88, v66);
          if (!*(_BYTE *)(v67 + 16)
            || ((v68 = *(_QWORD *)(a1 + 32), !*(_DWORD *)(v68 + 64)) ? (v69 = 0) : (v69 = **(_QWORD **)(v68 + 56)),
                v125 == v69))
          {
            v65 = v128;
            if (!v31)
              goto LABEL_153;
            goto LABEL_195;
          }
          v70 = *(_QWORD *)(v67 + 8);
          *(_DWORD *)&v145[8] = v70 - *(_DWORD *)(v68 + 104) - 4;
          v71 = *(_WORD *)(v33 + 80) & 0x7F;
          v72 = -40;
          if (v71 <= 0x46)
          {
            v65 = v128;
            if (v71 <= 0x18)
            {
              if (v71 == 16)
                goto LABEL_131;
              if (((1 << v71) & 0x1066) != 0)
                goto LABEL_145;
              if (v71 == 24)
                goto LABEL_131;
            }
            if (v71 == 70)
              goto LABEL_143;
LABEL_141:
            if (v71 - 52 >= 6)
            {
              if (v71 - 33 >= 5)
              {
LABEL_131:
                v72 = -48;
                goto LABEL_145;
              }
LABEL_143:
              v72 = -64;
              goto LABEL_145;
            }
            v72 = -72;
            goto LABEL_145;
          }
          if (v71 == 83)
          {
            v65 = v128;
            goto LABEL_145;
          }
          v65 = v128;
          if (v71 == 71)
          {
            v72 = -56;
            goto LABEL_145;
          }
          if (v71 != 81)
            goto LABEL_141;
LABEL_145:
          v73 = *(_QWORD *)(v33 + 72 + v72 + 16);
          v74 = (_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF8);
          if ((v73 & 4) != 0)
            v74 = (_QWORD *)*v74;
          if (v74)
            v75 = v74 - 8;
          else
            v75 = 0;
          if (v75 == *(_QWORD **)(a1 + 16) || !v125)
            goto LABEL_152;
          *(_DWORD *)&v145[12] = *(_DWORD *)(v68 + 16)
                               + v70
                               - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 32);
          sub_22EF5CCD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16480) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v146);
          v98 = (int)v146;
          v99 = sub_22F40C330(*(uint64_t **)a1, *(_QWORD *)(a1 + 16), v125);
          v65 = v128;
          *(_DWORD *)&v145[16] = v99 * v98;
          v64 = v34 - v133;
          *(_QWORD *)v145 = v34 - v133;
          if (!v31)
          {
LABEL_153:
            LODWORD(v76) = 0;
            goto LABEL_154;
          }
LABEL_195:
          LODWORD(v76) = sub_22F40C330(*(uint64_t **)a1, *(_QWORD *)(a1 + 16), v31);
          v65 = v128;
LABEL_154:
          a3 = v124;
          if (v65)
          {
            v146 = 0;
            if (sub_22EEDDD4C(*(_QWORD *)(a1 + 664), *(_DWORD *)(a1 + 680), v65, &v146))
            {
              v77 = v146;
              v78 = *(_QWORD *)(a1 + 664);
              v79 = *(unsigned int *)(a1 + 680);
            }
            else
            {
              v78 = *(_QWORD *)(a1 + 664);
              v79 = *(unsigned int *)(a1 + 680);
              v77 = (char *)(v78 + 32 * v79);
            }
            if (v77 != (char *)(v78 + 32 * v79))
            {
              v76 = *((_QWORD *)v77 + 1);
              sub_22F12CD80(&v146, *(_QWORD *)(a1 + 8), (uint64_t)v129, *(_QWORD *)(v128 + 48));
              if (v147 != 0 || v77[25])
              {
                v84 = 0;
                v77[24] = 1;
                v82 = v129;
                if ((char *)v33 == v129)
                {
                  v81 = v128;
                  if (!v64)
                    v84 = *(_OWORD *)&v145[8] == 0;
                }
                else
                {
                  v81 = v128;
                }
                v80 = !v84;
                goto LABEL_172;
              }
              v83 = *((_QWORD *)v77 + 2);
              *(_QWORD *)v77 = -8192;
              *(int32x2_t *)(a1 + 672) = vadd_s32(*(int32x2_t *)(a1 + 672), (int32x2_t)0x1FFFFFFFFLL);
              v146 = v129;
              *(_QWORD *)&v147 = v76;
              *((_QWORD *)&v147 + 1) = v83;
              LOWORD(v148) = 0;
              sub_22F1334E8((uint64_t)&v162, v119, (uint64_t *)&v146);
            }
          }
          else if (v124 == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) && !sub_22EFD7260((uint64_t)v129))
          {
            v80 = 0;
            v81 = v128;
            v82 = v129;
LABEL_172:
            v85 = *(unsigned int *)(a1 + 112) - (uint64_t)*(char *)(a1 + 656);
            v146 = v82;
            *(_QWORD *)&v147 = v76;
            *((_QWORD *)&v147 + 1) = v85;
            LOBYTE(v148) = 0;
            BYTE1(v148) = v81 != 0;
            v86 = v82;
            sub_22F1334E8((uint64_t)&v162, v119, (uint64_t *)&v146);
            if ((*(_BYTE *)(v33 + 82) & 8) != 0)
            {
              v90 = v80;
              v91 = 0;
              v134 = 0;
              v92 = v128;
            }
            else
            {
              sub_22F12CD80(&v146, *(_QWORD *)(a1 + 8), v33, *((_QWORD *)v86 + 6));
              v87 = v147;
              if (v147 != 0)
                v80 = 1;
              if ((_QWORD)v147)
              {
                v88 = v146;
                v89 = *(unsigned int *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 8), (unint64_t)v146) + 72)
                                      + 32);
                v134 = v89 | (sub_22F40C330(*(uint64_t **)a1, (uint64_t)v88, v87) << 32);
                v90 = 1;
              }
              else
              {
                v90 = v80;
                v134 = 0;
              }
              v92 = v128;
              v91 = *((_QWORD *)&v87 + 1);
            }
            if (v92)
              v93 = v92;
            else
              v93 = (uint64_t)v129;
            v94 = *(_QWORD *)(sub_22EFD7558(v93) & 0xFFFFFFFFFFFFFFF0);
            if (v90)
              v95 = v129;
            else
              v95 = 0;
            v138 = *(_OWORD *)v145;
            *(_QWORD *)&v139 = *(_QWORD *)&v145[16];
            *((_QWORD *)&v139 + 1) = v91;
            *(_QWORD *)&v140 = v134;
            *((_QWORD *)&v140 + 1) = v95;
            v141 = v94;
            if (!sub_22F40CE28((uint64_t)&v138))
            {
              v127 = v30;
              v146 = (char *)*(unsigned int *)(a1 + 112);
              v100 = sub_22F12EBC4(a1 + 688, (uint64_t *)&v146);
              v101 = v139;
              *(_OWORD *)(v100 + 1) = v138;
              *(_OWORD *)(v100 + 3) = v101;
              *(_OWORD *)(v100 + 5) = v140;
              v100[7] = v141;
              v146 = (char *)v33;
              v102 = sub_22F40C5E4(a1 + 712, (uint64_t *)&v146);
              v103 = v102;
              v104 = (uint64_t)(v102 + 1);
              v105 = v102[1];
              v106 = *((unsigned int *)v102 + 4);
              if ((_DWORD)v106)
              {
                v131 = v33;
                v107 = 56 * v106;
                v108 = (_QWORD *)v102[1];
                while (!sub_22F40C9C8(v108, &v138))
                {
                  v108 += 7;
                  v107 -= 56;
                  if (!v107)
                  {
                    v108 = (_QWORD *)(v105 + 56 * v106);
                    break;
                  }
                }
                v31 = v121;
                v33 = v131;
              }
              else
              {
                v108 = (_QWORD *)v102[1];
              }
              if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v108 - v105) >> 3) == v106)
              {
                v109 = sub_22E47F7A8(v104, (unint64_t)&v138);
                v110 = v103[1] + 56 * *((unsigned int *)v103 + 4);
                v111 = *(_OWORD *)v109;
                v112 = *(_OWORD *)(v109 + 16);
                v113 = *(_OWORD *)(v109 + 32);
                *(_QWORD *)(v110 + 48) = *(_QWORD *)(v109 + 48);
                *(_OWORD *)(v110 + 16) = v112;
                *(_OWORD *)(v110 + 32) = v113;
                *(_OWORD *)v110 = v111;
                ++*((_DWORD *)v103 + 4);
              }
              v30 = v127;
            }
            v96 = *(unsigned int *)(a1 + 112);
            if (v33 && (*(_DWORD *)(v33 + 28) & 0x7F) == 0x39)
              v97 = v33 | 6;
            else
              v97 = v33 | 4;
            if (v96 >= *(unsigned int *)(a1 + 116))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v96 = *(unsigned int *)(a1 + 112);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v96) = v97;
            ++*(_DWORD *)(a1 + 112);
          }
          if (++v30 == v123)
          {
            v30 = (uint64_t *)v142;
LABEL_211:
            if (v30 != (uint64_t *)v144)
              free(v30);
            return;
          }
        }
      }
      v135 = v25 & 0xFFFFFFFFFFFFFFF8;
      v23 = a3;
    }
    else
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 80) + 8 * a4);
      v135 = v15;
      v16 = sub_22E46A3A0(a2);
      if (v16 == v17)
      {
LABEL_16:
        v23 = sub_22E46A3EC(v13, v15) + a3;
        a6 = v120;
        v24 = a5;
      }
      else
      {
        v18 = v16;
        v19 = v17;
        while (1)
        {
          if ((*(_BYTE *)(v18 + 12) & 1) != 0)
          {
            v20 = *(_QWORD *)(**(_QWORD **)(v18 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
              v20 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v18 + 16));
            v21 = sub_22F10C2A4(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0));
            if (v21)
              v22 = (*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v21;
            else
              v22 = 0;
            if (v22 == v15)
              break;
          }
          v18 += 24;
          if (v18 == v19)
            goto LABEL_16;
        }
        v23 = sub_22F2500F4(*(_QWORD *)(a1 + 24), v15);
        v24 = v15;
        a6 = v120;
      }
    }
    if (v15)
    {
      sub_22F132604(a1, v15, v23, a4 + 1, v24, a6);
      sub_22F40C554(a6, (uint64_t *)&v135);
    }
    goto LABEL_22;
  }
}

uint64_t sub_22F1334E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  llvm *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v7 = a3 + 1;
  v6 = *a3;
  v32 = 0;
  result = sub_22EEDDD4C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, &v32);
  v9 = v32;
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v33 = v32;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(unsigned int *)(a2 + 16);
  if (4 * v11 + 4 >= (3 * v12))
  {
    v13 = 2 * v12;
    goto LABEL_10;
  }
  v13 = *(_DWORD *)(a2 + 16);
  if ((int)v12 + ~v11 - *(_DWORD *)(a2 + 12) <= v12 >> 3)
  {
LABEL_10:
    v16 = *(llvm **)a2;
    v17 = (v13 - 1) | ((unint64_t)(v13 - 1) >> 1);
    v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
    v19 = ((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8);
    if ((v19 + 1) > 0x40)
      v20 = v19 + 1;
    else
      v20 = 64;
    *(_DWORD *)(a2 + 16) = v20;
    v21 = (_QWORD *)MEMORY[0x23489D23C](32 * v20, 8);
    *(_QWORD *)a2 = v21;
    if (v16)
    {
      *(_QWORD *)(a2 + 8) = 0;
      v22 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v22)
      {
        v23 = 32 * v22;
        do
        {
          *v21 = -4096;
          v21 += 4;
          v23 -= 32;
        }
        while (v23);
      }
      v24 = (void *)(32 * v12);
      if ((_DWORD)v12)
      {
        v25 = (char *)v16 + 8;
        v26 = 32 * v12;
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          if ((v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v34 = 0;
            sub_22EEDDD4C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v27, &v34);
            v28 = v34;
            *v34 = v27;
            v29 = *(_OWORD *)v25;
            v28[3] = *((_QWORD *)v25 + 2);
            *(_OWORD *)(v28 + 1) = v29;
            ++*(_DWORD *)(a2 + 8);
          }
          v25 += 32;
          v26 -= 32;
        }
        while (v26);
      }
      llvm::deallocate_buffer(v16, v24);
      v21 = *(_QWORD **)a2;
      LODWORD(v30) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      v30 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v30)
      {
        v31 = 0;
        do
        {
          v21[v31] = -4096;
          v31 += 4;
        }
        while (4 * v30 != v31);
      }
    }
    result = sub_22EEDDD4C((uint64_t)v21, v30, *a3, &v33);
    v11 = *(_DWORD *)(a2 + 8);
    v9 = v33;
  }
  *(_DWORD *)(a2 + 8) = v11 + 1;
  if (*(_QWORD *)v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v9 = *a3;
  v14 = *(_OWORD *)v7;
  *(_QWORD *)(v9 + 24) = v7[2];
  *(_OWORD *)(v9 + 8) = v14;
  v10 = 1;
LABEL_8:
  v15 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F13371C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _WORD *v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_22EFD7394(a1);
  if ((uint64_t *)result != v4)
  {
    v5 = (uint64_t *)result;
    v6 = v4;
    while (1)
    {
      v7 = (_WORD *)*v5;
      if (!sub_22EFD7260(*v5))
        break;
LABEL_4:
      result = sub_22E3BA850(a2[1], v7);
      if (v8)
        result = sub_22F13371C(v7, a2);
      if (++v5 == v6)
        return result;
    }
    v9 = v7[40] & 0x7F;
    v10 = -40;
    if (v9 > 0x46)
    {
      if (v9 != 83)
      {
        if (v9 == 71)
        {
          v10 = -56;
          goto LABEL_25;
        }
        if (v9 == 81)
          goto LABEL_25;
LABEL_19:
        v11 = v9 - 52;
        if (v9 - 33 >= 5)
          v12 = -48;
        else
          v12 = -64;
        if (v11 >= 6)
          v10 = v12;
        else
          v10 = -72;
      }
    }
    else
    {
      if (v9 > 0x18)
        goto LABEL_18;
      if (v9 != 16)
      {
        if (((1 << v9) & 0x1066) != 0)
          goto LABEL_25;
        if (v9 != 24)
        {
LABEL_18:
          if (v9 == 70)
          {
            v10 = -64;
            goto LABEL_25;
          }
          goto LABEL_19;
        }
      }
      v10 = -48;
    }
LABEL_25:
    v13 = *(_QWORD *)((char *)v7 + v10 + 88);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0)
      v14 = (_QWORD *)*v14;
    v15 = *a2;
    if (v14)
      v16 = (uint64_t)(v14 - 8);
    else
      v16 = 0;
    v17 = v16;
    sub_22F40C554(v15, &v17);
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22F13388C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 8) & 0xF) != 0)
    v3 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v4 = sub_22F10C2A4(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0));
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 >= 3)
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33A4AC(v2, v5, &v7);
}

_QWORD *sub_22F13390C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 48 * v3;
      v13 = (uint64_t)v4;
      do
      {
        if ((unint64_t)(*(_QWORD *)v13 + 1) > 1 || *(_DWORD *)(v13 + 8) != 0)
        {
          v20 = 0;
          sub_22F40D3B8((uint64_t *)a1, v13, &v20);
          v15 = v20;
          v16 = *(_QWORD *)v13;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v15 = v16;
          v17 = *(_OWORD *)(v13 + 32);
          *(_OWORD *)(v15 + 16) = *(_OWORD *)(v13 + 16);
          *(_OWORD *)(v15 + 32) = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 48;
        v12 -= 48;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 48 * v18;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 6;
        v19 -= 48;
      }
      while (v19);
    }
  }
  return result;
}

_QWORD *sub_22F133A70(_QWORD *result, llvm::raw_ostream *this, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  _QWORD *v17;
  llvm::raw_ostream *v18;
  void *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  BOOL v27;
  _DWORD *v28;
  _OWORD *v29;
  llvm::raw_ostream *v30;
  _WORD *v31;
  _DWORD *v32;
  llvm::raw_ostream *v33;
  _WORD *v34;
  void *v35;

  v5 = result;
  if (result[3])
  {
    v6 = result + 5;
  }
  else
  {
    v6 = result + 5;
    if (result[4])
      v7 = 0;
    else
      v7 = result[5] == 0;
    if (v7)
    {
      v8 = 1;
      goto LABEL_8;
    }
  }
  if ((a3 & 1) == 0)
  {
    v23 = (_QWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v23 > 7uLL)
    {
      *v23 = 0x202020202020200ALL;
      *((_QWORD *)this + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(this, "\n       ");
    }
  }
  v24 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v24 > 0x1CuLL)
  {
    qmemcpy(v24, "[return adjustment (to type '", 29);
    *((_QWORD *)this + 4) += 29;
    v25 = this;
  }
  else
  {
    v25 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "[return adjustment (to type '");
  }
  v26 = *(_QWORD *)(*(_QWORD *)(*v6 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v26)
    v27 = *(unsigned __int8 *)(v26 + 16) - 27 > 0xFFFFFFFD;
  else
    v27 = 0;
  if (!v27)
    v26 = sub_22F10CF48(v26);
  sub_22F40B69C((uint64_t **)v25, *(_QWORD *)(v26 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v26 + 24) & 0xFFFFFFFFFFFFFFF0) + 8));
  v28 = (_DWORD *)*((_QWORD *)v25 + 4);
  if (*((_QWORD *)v25 + 3) - (_QWORD)v28 > 3uLL)
  {
    *v28 = 540682535;
    *((_QWORD *)v25 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v25, "'): ");
  }
  if (*((_DWORD *)v5 + 8))
  {
    v29 = (_OWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v29 > 0xFuLL)
    {
      *v29 = *(_OWORD *)"vbptr at offset ";
      *((_QWORD *)this + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(this, "vbptr at offset ");
    }
    v30 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v31 = (_WORD *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 1uLL)
    {
      *v31 = 8236;
      *((_QWORD *)v30 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v30, ", ");
    }
  }
  if (*((_DWORD *)v5 + 9))
  {
    v32 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v32 > 6uLL)
    {
      *(_DWORD *)((char *)v32 + 3) = 589325683;
      *v32 = 1935762038;
      *((_QWORD *)this + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(this, "vbase #");
    }
    v33 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v34 = (_WORD *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
    {
      *v34 = 8236;
      *((_QWORD *)v33 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v33, ", ");
    }
  }
  result = (_QWORD *)llvm::raw_ostream::operator<<();
  v35 = (void *)result[4];
  if (result[3] - (_QWORD)v35 > 0xCuLL)
  {
    v8 = 0;
    qmemcpy(v35, " non-virtual]", 13);
    result[4] += 13;
  }
  else
  {
    result = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, " non-virtual]");
    v8 = 0;
  }
LABEL_8:
  if (*v5 || *(_OWORD *)(v5 + 1) != 0)
  {
    if ((v8 & a3 & 1) == 0)
    {
      v9 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 7uLL)
      {
        *v9 = 0x202020202020200ALL;
        *((_QWORD *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "\n       ");
      }
    }
    v10 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 0x11)
    {
      *(_WORD *)(v10 + 16) = 8250;
      *(_OWORD *)v10 = *(_OWORD *)"[this adjustment: ";
      *((_QWORD *)this + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(this, "[this adjustment: ");
    }
    if (*(_OWORD *)(v5 + 1) != 0)
    {
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 0xB)
      {
        *(_DWORD *)(v11 + 8) = 544497952;
        *(_QWORD *)v11 = *(_QWORD *)"vtordisp at ";
        *((_QWORD *)this + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(this, "vtordisp at ");
      }
      v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v13 = (_WORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8236;
        *((_QWORD *)v12 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v12, ", ");
      }
      if (*((_DWORD *)v5 + 3))
      {
        v14 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 8)
        {
          *(_BYTE *)(v14 + 8) = 32;
          *(_QWORD *)v14 = *(_QWORD *)"vbptr at ";
          *((_QWORD *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "vbptr at ");
        }
        v15 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v16 = (void *)*((_QWORD *)v15 + 4);
        if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xCuLL)
        {
          qmemcpy(v16, " to the left,", 13);
          *((_QWORD *)v15 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v15, " to the left,");
        }
        v17 = (_QWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v17 > 7uLL)
        {
          *v17 = 0x202020202020200ALL;
          v19 = (void *)(*((_QWORD *)this + 4) + 8);
          *((_QWORD *)this + 4) = v19;
          v18 = this;
        }
        else
        {
          v18 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "\n       ");
          v19 = (void *)*((_QWORD *)v18 + 4);
        }
        if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0xCuLL)
        {
          qmemcpy(v19, " vboffset at ", 13);
          *((_QWORD *)v18 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v18, " vboffset at ");
        }
        v20 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v21 = *((_QWORD *)v20 + 4);
        if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 0x10)
        {
          *(_BYTE *)(v21 + 16) = 32;
          *(_OWORD *)v21 = *(_OWORD *)" in the vbtable, ";
          *((_QWORD *)v20 + 4) += 17;
        }
        else
        {
          llvm::raw_ostream::write(v20, " in the vbtable, ");
        }
      }
    }
    result = (_QWORD *)llvm::raw_ostream::operator<<();
    v22 = (void *)result[4];
    if (result[3] - (_QWORD)v22 > 0xCuLL)
    {
      qmemcpy(v22, " non-virtual]", 13);
      result[4] += 13;
    }
    else
    {
      return (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, " non-virtual]");
    }
  }
  return result;
}

__n128 sub_22F1340F0(char *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  __int128 v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 2)
  {
    v7 = (uint64_t)a1;
    if (a3 == 2)
    {
      v8 = (__n128 *)(a2 - 56);
      if (sub_22F130768((_QWORD *)a2 - 7, (_QWORD *)a2 - 4, a1, (_QWORD *)a1 + 3))
      {
        v9 = *(_QWORD *)(v7 + 48);
        v10 = *(_OWORD *)(v7 + 16);
        result = *(__n128 *)(v7 + 32);
        v11 = *(__n128 *)v7;
        v13 = *(_OWORD *)(a2 - 40);
        v12 = *(_OWORD *)(a2 - 24);
        v14 = *v8;
        *(_QWORD *)(v7 + 48) = *((_QWORD *)a2 - 1);
        *(_OWORD *)(v7 + 16) = v13;
        *(_OWORD *)(v7 + 32) = v12;
        *(__n128 *)v7 = v14;
        *v8 = v11;
        *(_OWORD *)(a2 - 40) = v10;
        *(__n128 *)(a2 - 24) = result;
        *((_QWORD *)a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v27 = a4;
      v28 = a3 >> 1;
      v29 = &a1[56 * (a3 >> 1)];
      v30 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v31 = sub_22F134450((uint64_t)a1, v29, v30, a4, result);
        v32 = v27 + 56 * v28;
        result.n128_u64[0] = sub_22F134450(v7 + 56 * (a3 >> 1), a2, a3 - (a3 >> 1), v32, v31).n128_u64[0];
        v33 = v27 + 56 * a3;
        v34 = v32;
        while (v34 != v33)
        {
          if (sub_22F130768((_QWORD *)v34, (_QWORD *)(v34 + 24), (_QWORD *)v27, (_QWORD *)(v27 + 24)))
          {
            result = *(__n128 *)v34;
            v35 = *(_OWORD *)(v34 + 16);
            v36 = *(_OWORD *)(v34 + 32);
            *(_QWORD *)(v7 + 48) = *(_QWORD *)(v34 + 48);
            *(_OWORD *)(v7 + 16) = v35;
            *(_OWORD *)(v7 + 32) = v36;
            *(__n128 *)v7 = result;
            v34 += 56;
          }
          else
          {
            result = *(__n128 *)v27;
            v37 = *(_OWORD *)(v27 + 16);
            v38 = *(_OWORD *)(v27 + 32);
            *(_QWORD *)(v7 + 48) = *(_QWORD *)(v27 + 48);
            *(_OWORD *)(v7 + 16) = v37;
            *(_OWORD *)(v7 + 32) = v38;
            *(__n128 *)v7 = result;
            v27 += 56;
          }
          v7 += 56;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              v39 = 0;
              do
              {
                v40 = v7 + v39;
                result = *(__n128 *)(v34 + v39);
                v41 = *(_OWORD *)(v34 + v39 + 16);
                v42 = *(_OWORD *)(v34 + v39 + 32);
                *(_QWORD *)(v40 + 48) = *(_QWORD *)(v34 + v39 + 48);
                *(_OWORD *)(v40 + 16) = v41;
                *(_OWORD *)(v40 + 32) = v42;
                *(__n128 *)v40 = result;
                v39 += 56;
              }
              while (v34 + v39 != v33);
            }
            return result;
          }
        }
        if (v27 != v32)
        {
          v43 = 0;
          do
          {
            v44 = v7 + v43;
            result = *(__n128 *)(v27 + v43);
            v45 = *(_OWORD *)(v27 + v43 + 16);
            v46 = *(_OWORD *)(v27 + v43 + 32);
            *(_QWORD *)(v44 + 48) = *(_QWORD *)(v27 + v43 + 48);
            *(_OWORD *)(v44 + 16) = v45;
            *(_OWORD *)(v44 + 32) = v46;
            *(__n128 *)v44 = result;
            v43 += 56;
          }
          while (v27 + v43 != v32);
        }
      }
      else
      {
        sub_22F1340F0(a1, v29, v30, a4, a5);
        sub_22F1340F0(v7 + 56 * (a3 >> 1), a2, a3 - (a3 >> 1), v27, a5);
        sub_22F134768(v7, (char *)(v7 + 56 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (__int128 *)v27, a5);
      }
    }
    else if (a1 != a2)
    {
      v16 = a1 + 56;
      if (a1 + 56 != a2)
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 = v16;
          if (sub_22F130768(v16, (_QWORD *)v19 + 10, v19, (_QWORD *)v19 + 3))
          {
            v20 = *((_OWORD *)v18 + 1);
            v47 = *(_OWORD *)v18;
            v48 = v20;
            v49 = *((_OWORD *)v18 + 2);
            v50 = *((_QWORD *)v18 + 6);
            v21 = v17;
            while (1)
            {
              v22 = v7 + v21;
              v23 = *(_OWORD *)(v7 + v21 + 16);
              *(_OWORD *)(v22 + 56) = *(_OWORD *)(v7 + v21);
              *(_OWORD *)(v22 + 72) = v23;
              *(_OWORD *)(v22 + 88) = *(_OWORD *)(v7 + v21 + 32);
              *(_QWORD *)(v22 + 104) = *(_QWORD *)(v7 + v21 + 48);
              if (!v21)
                break;
              v21 -= 56;
              if ((sub_22F130768(&v47, (_QWORD *)&v48 + 1, (_QWORD *)(v22 - 56), (_QWORD *)(v22 - 32)) & 1) == 0)
              {
                v24 = v7 + v21 + 56;
                goto LABEL_15;
              }
            }
            v24 = v7;
LABEL_15:
            v25 = v48;
            *(_OWORD *)v24 = v47;
            *(_OWORD *)(v24 + 16) = v25;
            result.n128_u64[0] = v49;
            *(_OWORD *)(v24 + 32) = v49;
            *(_QWORD *)(v24 + 48) = v50;
          }
          v16 = v18 + 56;
          v17 += 56;
        }
        while (v18 + 56 != a2);
      }
    }
  }
  return result;
}

__n128 sub_22F134450(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __n128 *v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;

  if (a3)
  {
    v5 = a4;
    v8 = (_QWORD *)a1;
    if (a3 == 2)
    {
      v11 = (__n128 *)(a2 - 7);
      if (sub_22F130768(a2 - 7, a2 - 4, (_QWORD *)a1, (_QWORD *)(a1 + 24)))
      {
        v12 = *v11;
        v13 = *(_OWORD *)(a2 - 5);
        v14 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(v5 + 48) = *(a2 - 1);
        *(_OWORD *)(v5 + 16) = v13;
        *(_OWORD *)(v5 + 32) = v14;
        *(__n128 *)v5 = v12;
        result = *(__n128 *)v8;
        v15 = *((_OWORD *)v8 + 1);
        v16 = *((_OWORD *)v8 + 2);
        v17 = v8[6];
      }
      else
      {
        v31 = *(__n128 *)v8;
        v32 = *((_OWORD *)v8 + 1);
        v33 = *((_OWORD *)v8 + 2);
        *(_QWORD *)(v5 + 48) = v8[6];
        *(_OWORD *)(v5 + 16) = v32;
        *(_OWORD *)(v5 + 32) = v33;
        *(__n128 *)v5 = v31;
        result = *v11;
        v15 = *(_OWORD *)(a2 - 5);
        v16 = *(_OWORD *)(a2 - 3);
        v17 = *(a2 - 1);
      }
      *(_QWORD *)(v5 + 104) = v17;
      *(_OWORD *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 88) = v16;
      *(__n128 *)(v5 + 56) = result;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      v10 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a4 + 16) = v9;
      *(_OWORD *)(a4 + 32) = v10;
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v34 = 56 * (a3 >> 1);
      v35 = (_QWORD *)(a1 + v34);
      sub_22F1340F0(a1, a1 + v34, a3 >> 1, a4, a3 >> 1);
      sub_22F1340F0(&v8[(unint64_t)v34 / 8], a2, a3 - (a3 >> 1), v5 + v34, a3 - (a3 >> 1));
      v36 = &v8[(unint64_t)v34 / 8];
      while (v36 != a2)
      {
        if (sub_22F130768(v36, v36 + 3, v8, v8 + 3))
        {
          result = *(__n128 *)v36;
          v37 = *((_OWORD *)v36 + 1);
          v38 = *((_OWORD *)v36 + 2);
          *(_QWORD *)(v5 + 48) = v36[6];
          *(_OWORD *)(v5 + 16) = v37;
          *(_OWORD *)(v5 + 32) = v38;
          *(__n128 *)v5 = result;
          v36 += 7;
        }
        else
        {
          result = *(__n128 *)v8;
          v39 = *((_OWORD *)v8 + 1);
          v40 = *((_OWORD *)v8 + 2);
          *(_QWORD *)(v5 + 48) = v8[6];
          *(_OWORD *)(v5 + 16) = v39;
          *(_OWORD *)(v5 + 32) = v40;
          *(__n128 *)v5 = result;
          v8 += 7;
        }
        v5 += 56;
        if (v8 == v35)
        {
          if (v36 != a2)
          {
            v41 = 0;
            do
            {
              v42 = v5 + v41 * 8;
              result = *(__n128 *)&v36[v41];
              v43 = *(_OWORD *)&v36[v41 + 2];
              v44 = *(_OWORD *)&v36[v41 + 4];
              *(_QWORD *)(v42 + 48) = v36[v41 + 6];
              *(_OWORD *)(v42 + 16) = v43;
              *(_OWORD *)(v42 + 32) = v44;
              *(__n128 *)v42 = result;
              v41 += 7;
            }
            while (&v36[v41] != a2);
          }
          return result;
        }
      }
      if (v8 != v35)
      {
        v45 = 0;
        do
        {
          v46 = v5 + v45 * 8;
          result = *(__n128 *)&v8[v45];
          v47 = *(_OWORD *)&v8[v45 + 2];
          v48 = *(_OWORD *)&v8[v45 + 4];
          *(_QWORD *)(v46 + 48) = v8[v45 + 6];
          *(_OWORD *)(v46 + 16) = v47;
          *(_OWORD *)(v46 + 32) = v48;
          *(__n128 *)v46 = result;
          v45 += 7;
        }
        while (&v8[v45] != v35);
      }
    }
    else if ((_QWORD *)a1 != a2)
    {
      result = *(__n128 *)a1;
      v18 = *(_OWORD *)(a1 + 16);
      v19 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a4 + 16) = v18;
      *(_OWORD *)(a4 + 32) = v19;
      *(__n128 *)a4 = result;
      v20 = (_QWORD *)(a1 + 56);
      if ((_QWORD *)(a1 + 56) != a2)
      {
        v21 = 0;
        v22 = a4;
        do
        {
          v23 = v22;
          v24 = v8 + 10;
          v8 = v20;
          v22 += 56;
          v25 = v22;
          if (sub_22F130768(v20, v24, (_QWORD *)v23, (_QWORD *)(v23 + 24)))
          {
            v26 = *(_OWORD *)(v23 + 16);
            *(_OWORD *)v22 = *(_OWORD *)v23;
            *(_OWORD *)(v22 + 16) = v26;
            *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
            *(_QWORD *)(v22 + 48) = *(_QWORD *)(v23 + 48);
            v25 = v5;
            if (v23 != v5)
            {
              v27 = v21;
              while (1)
              {
                v25 = v5 + v27;
                if (!sub_22F130768(v8, v24, (_QWORD *)(v5 + v27 - 56), (_QWORD *)(v5 + v27 - 32)))
                  break;
                v28 = *(_OWORD *)(v5 + v27 - 40);
                *(_OWORD *)v25 = *(_OWORD *)(v5 + v27 - 56);
                *(_OWORD *)(v25 + 16) = v28;
                *(_OWORD *)(v25 + 32) = *(_OWORD *)(v5 + v27 - 24);
                *(_QWORD *)(v25 + 48) = *(_QWORD *)(v5 + v27 - 8);
                v27 -= 56;
                if (!v27)
                {
                  v25 = v5;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v8;
          v29 = *((_OWORD *)v8 + 1);
          v30 = *((_OWORD *)v8 + 2);
          *(_QWORD *)(v25 + 48) = v8[6];
          *(_OWORD *)(v25 + 16) = v29;
          *(_OWORD *)(v25 + 32) = v30;
          *(__n128 *)v25 = result;
          v20 = v8 + 7;
          v21 += 56;
        }
        while (v8 + 7 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_22F134768(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int64_t v39;
  __int128 *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v102 = a5;
  if (a5)
  {
    v11 = result;
    while (a4 > a7 && v102 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = -a4;
      while (1)
      {
        v14 = v11;
        v11 += v12;
        result = sub_22F130768(a2, (_QWORD *)a2 + 3, (_QWORD *)v11, (_QWORD *)(v11 + 24));
        if ((result & 1) != 0)
          break;
        v12 += 56;
        v15 = __CFADD__(v13++, 1);
        v11 = v14;
        if (v15)
          return result;
      }
      v16 = -v13;
      v17 = v102;
      v101 = a2;
      v98 = a3;
      v99 = a7;
      if (-v13 >= v102)
      {
        if (v13 == -1)
        {
          v87 = v14 + v12;
          v122 = *(_QWORD *)(v14 + v12 + 48);
          v112 = *(_OWORD *)(v14 + v12 + 16);
          v117 = *(_OWORD *)(v14 + v12 + 32);
          v107 = *(_OWORD *)(v14 + v12);
          v88 = *(_OWORD *)a2;
          v89 = *((_OWORD *)a2 + 1);
          v90 = *((_OWORD *)a2 + 2);
          *(_QWORD *)(v87 + 48) = *((_QWORD *)a2 + 6);
          *(_OWORD *)(v87 + 16) = v89;
          *(_OWORD *)(v87 + 32) = v90;
          *(_OWORD *)v87 = v88;
          *((_QWORD *)a2 + 6) = v122;
          *((_OWORD *)a2 + 1) = v112;
          *((_OWORD *)a2 + 2) = v117;
          *(_OWORD *)a2 = v107;
          return result;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v97 = v16 >> 1;
        v27 = a2;
        a2 = (char *)(v14 + 56 * (v16 >> 1) + v12);
        v19 = a3;
        if (a3 != v27)
        {
          v28 = 0x6DB6DB6DB6DB6DB7 * ((a3 - v27) >> 3);
          v29 = (_QWORD *)(v14 + 56 * v97 + v12 + 24);
          v19 = v101;
          do
          {
            v30 = &v19[56 * (v28 >> 1)];
            v31 = sub_22F130768(v30, (_QWORD *)v30 + 3, a2, v29);
            if (v31)
              v28 += ~(v28 >> 1);
            else
              v28 >>= 1;
            if (v31)
              v19 = v30 + 56;
          }
          while (v28);
        }
        v20 = a6;
        v25 = v101;
        v26 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v101) >> 3);
        v17 = v102;
        v24 = v97;
      }
      else
      {
        if (v102 >= 0)
          v18 = v102;
        else
          v18 = v102 + 1;
        v19 = &a2[56 * (v18 >> 1)];
        v20 = a6;
        v96 = v18 >> 1;
        if ((char *)v11 != a2)
        {
          v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-v14 - v12] >> 3);
          v22 = &a2[56 * (v18 >> 1) + 24];
          a2 = (char *)v11;
          do
          {
            v23 = &a2[56 * (v21 >> 1)];
            if (sub_22F130768(v19, v22, v23, (_QWORD *)v23 + 3))
            {
              v21 >>= 1;
            }
            else
            {
              a2 = v23 + 56;
              v21 += ~(v21 >> 1);
            }
          }
          while (v21);
          v20 = a6;
          v17 = v102;
        }
        v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-v14 - v12] >> 3);
        v25 = v101;
        v26 = v96;
      }
      a3 = v19;
      if (a2 != v25)
      {
        a3 = a2;
        if (v25 != v19)
        {
          if (a2 + 56 == v25)
          {
            v119 = *((_QWORD *)a2 + 6);
            v109 = *((_OWORD *)a2 + 1);
            v114 = *((_OWORD *)a2 + 2);
            v104 = *(_OWORD *)a2;
            v39 = v19 - v25;
            v40 = v20;
            v41 = v24;
            memmove(a2, v25, v19 - v25);
            v24 = v41;
            v20 = v40;
            v17 = v102;
            a3 = &a2[v39];
            *((_QWORD *)a3 + 6) = v119;
            *((_OWORD *)a3 + 1) = v109;
            *((_OWORD *)a3 + 2) = v114;
            *(_OWORD *)a3 = v104;
          }
          else if (v25 + 56 == v19)
          {
            a3 = a2 + 56;
            v120 = *((_QWORD *)v19 - 1);
            v110 = *(_OWORD *)(v19 - 40);
            v115 = *(_OWORD *)(v19 - 24);
            v105 = *(_OWORD *)(v19 - 56);
            if (v19 - 56 != a2)
            {
              v42 = v20;
              v43 = v24;
              memmove(a2 + 56, a2, v19 - 56 - a2);
              v24 = v43;
              v20 = v42;
            }
            *((_QWORD *)a2 + 6) = v120;
            *((_OWORD *)a2 + 1) = v110;
            *((_OWORD *)a2 + 2) = v115;
            *(_OWORD *)a2 = v105;
          }
          else
          {
            v32 = 0x6DB6DB6DB6DB6DB7 * ((v25 - a2) >> 3);
            if (v32 == 0x6DB6DB6DB6DB6DB7 * ((v19 - v25) >> 3))
            {
              v33 = 0;
              do
              {
                v34 = &v101[v33];
                v35 = &a2[v33];
                v118 = *(_QWORD *)&a2[v33 + 48];
                v108 = *(_OWORD *)&a2[v33 + 16];
                v113 = *(_OWORD *)&a2[v33 + 32];
                v103 = *(_OWORD *)&a2[v33];
                v36 = *(_OWORD *)&v101[v33];
                v37 = *(_OWORD *)&v101[v33 + 16];
                v38 = *(_OWORD *)&v101[v33 + 32];
                *((_QWORD *)v35 + 6) = *(_QWORD *)&v101[v33 + 48];
                *((_OWORD *)v35 + 1) = v37;
                *((_OWORD *)v35 + 2) = v38;
                *(_OWORD *)v35 = v36;
                *((_QWORD *)v34 + 6) = v118;
                *((_OWORD *)v34 + 1) = v108;
                *((_OWORD *)v34 + 2) = v113;
                *(_OWORD *)v34 = v103;
                if (&a2[v33 + 56] == v101)
                  break;
                v33 += 56;
              }
              while (v34 + 56 != v19);
              a3 = v101;
            }
            else
            {
              v44 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v25) >> 3);
              v45 = 0x6DB6DB6DB6DB6DB7 * ((v25 - a2) >> 3);
              do
              {
                v46 = v45;
                v45 = v44;
                v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                v47 = &a2[56 * v45];
                do
                {
                  v48 = *(_OWORD *)(v47 - 56);
                  v49 = *(_OWORD *)(v47 - 40);
                  v50 = *(_OWORD *)(v47 - 24);
                  v51 = *((_QWORD *)v47 - 1);
                  v47 -= 56;
                  v121 = v51;
                  v111 = v49;
                  v116 = v50;
                  v106 = v48;
                  v52 = &v47[8 * ((v25 - a2) >> 3)];
                  v53 = v47;
                  do
                  {
                    v54 = v53;
                    v53 = v52;
                    v55 = *(_OWORD *)v52;
                    v56 = *((_OWORD *)v52 + 1);
                    v57 = *((_OWORD *)v52 + 2);
                    *((_QWORD *)v54 + 6) = *((_QWORD *)v52 + 6);
                    *((_OWORD *)v54 + 1) = v56;
                    *((_OWORD *)v54 + 2) = v57;
                    *(_OWORD *)v54 = v55;
                    v58 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v52) >> 3);
                    v59 = __OFSUB__(v32, v58);
                    v61 = v32 - v58;
                    v60 = (v61 < 0) ^ v59;
                    v52 = &a2[56 * v61];
                    if (v60)
                      v52 = &v53[8 * ((v25 - a2) >> 3)];
                  }
                  while (v52 != v47);
                  *((_QWORD *)v53 + 6) = v121;
                  *((_OWORD *)v53 + 1) = v111;
                  *((_OWORD *)v53 + 2) = v116;
                  *(_OWORD *)v53 = v106;
                }
                while (v47 != a2);
              }
              a3 = &a2[8 * ((v19 - v25) >> 3)];
            }
          }
        }
      }
      a4 = -(v24 + v13);
      v62 = v17 - v26;
      if (v24 + v26 >= v17 - (v24 + v26) - v13)
      {
        v63 = v24;
        result = sub_22F134768(a3, v19, v98, -(v24 + v13), v62, v20, v99);
        v19 = a2;
        v62 = v26;
        a4 = v63;
      }
      else
      {
        result = sub_22F134768(v11, a2, a3, v24, v26, v20, v99);
        v11 = (uint64_t)a3;
        a3 = v98;
      }
      v102 = v62;
      a2 = v19;
      a7 = v99;
      if (!v62)
        return result;
    }
    if (a4 <= v102)
    {
      if ((char *)v11 != a2)
      {
        v75 = 0;
        do
        {
          v76 = (uint64_t)a6 + v75;
          v77 = *(_OWORD *)(v11 + v75);
          v78 = *(_OWORD *)(v11 + v75 + 16);
          v79 = *(_OWORD *)(v11 + v75 + 32);
          *(_QWORD *)(v76 + 48) = *(_QWORD *)(v11 + v75 + 48);
          *(_OWORD *)(v76 + 16) = v78;
          *(_OWORD *)(v76 + 32) = v79;
          *(_OWORD *)v76 = v77;
          v75 += 56;
        }
        while ((char *)(v11 + v75) != a2);
        if (v75)
        {
          v80 = a6;
          while (a2 != a3)
          {
            result = sub_22F130768(a2, (_QWORD *)a2 + 3, v80, (_QWORD *)v80 + 3);
            if ((_DWORD)result)
            {
              v81 = *(_OWORD *)a2;
              v82 = *((_OWORD *)a2 + 1);
              v83 = *((_OWORD *)a2 + 2);
              *(_QWORD *)(v11 + 48) = *((_QWORD *)a2 + 6);
              *(_OWORD *)(v11 + 16) = v82;
              *(_OWORD *)(v11 + 32) = v83;
              *(_OWORD *)v11 = v81;
              a2 += 56;
            }
            else
            {
              v84 = *v80;
              v85 = v80[1];
              v86 = v80[2];
              *(_QWORD *)(v11 + 48) = *((_QWORD *)v80 + 6);
              *(_OWORD *)(v11 + 16) = v85;
              *(_OWORD *)(v11 + 32) = v86;
              *(_OWORD *)v11 = v84;
              v80 = (__int128 *)((char *)v80 + 56);
            }
            v11 += 56;
            if ((__int128 *)((char *)a6 + v75) == v80)
              return result;
          }
          return (uint64_t)memmove((void *)v11, v80, (char *)a6 - (char *)v80 + v75);
        }
      }
    }
    else if (a2 != a3)
    {
      v64 = 0;
      do
      {
        v65 = (uint64_t)a6 + v64;
        v66 = *(_OWORD *)&a2[v64];
        v67 = *(_OWORD *)&a2[v64 + 16];
        v68 = *(_OWORD *)&a2[v64 + 32];
        *(_QWORD *)(v65 + 48) = *(_QWORD *)&a2[v64 + 48];
        *(_OWORD *)(v65 + 16) = v67;
        *(_OWORD *)(v65 + 32) = v68;
        *(_OWORD *)v65 = v66;
        v64 += 56;
      }
      while (&a2[v64] != a3);
      if (v64)
      {
        v69 = (__int128 *)((char *)a6 + v64);
        v70 = a3 - 56;
        while (a2 != (char *)v11)
        {
          result = sub_22F130768((_QWORD *)v69 - 7, (_QWORD *)v69 - 4, (_QWORD *)a2 - 7, (_QWORD *)a2 - 4);
          if ((_DWORD)result)
            v71 = a2 - 56;
          else
            v71 = (char *)v69 - 56;
          if ((_DWORD)result)
            a2 -= 56;
          else
            v69 = (__int128 *)((char *)v69 - 56);
          v73 = *((_OWORD *)v71 + 1);
          v72 = *((_OWORD *)v71 + 2);
          v74 = *(_OWORD *)v71;
          *((_QWORD *)v70 + 6) = *((_QWORD *)v71 + 6);
          *((_OWORD *)v70 + 1) = v73;
          *((_OWORD *)v70 + 2) = v72;
          *(_OWORD *)v70 = v74;
          v70 -= 56;
          if (v69 == a6)
            return result;
        }
        if (v69 != a6)
        {
          v91 = 0;
          do
          {
            v92 = &v70[v91];
            v93 = *(__int128 *)((char *)v69 + v91 - 56);
            v94 = *(__int128 *)((char *)v69 + v91 - 40);
            v95 = *(__int128 *)((char *)v69 + v91 - 24);
            *((_QWORD *)v92 + 6) = *(_QWORD *)((char *)v69 + v91 - 8);
            *((_OWORD *)v92 + 1) = v94;
            *((_OWORD *)v92 + 2) = v95;
            *(_OWORD *)v92 = v93;
            v91 -= 56;
          }
          while ((__int128 *)((char *)v69 + v91) != a6);
        }
      }
    }
  }
  return result;
}

void sub_22F134F10(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  __int128 v76;
  unint64_t v77;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;

__n128 sub_22F135AE0(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 >= *a1)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v14 = a2[7];
      result = *(__n128 *)(a2 + 5);
      v15 = *(_OWORD *)(a2 + 3);
      v16 = *(_OWORD *)(a2 + 1);
      v17 = *(_OWORD *)(a3 + 3);
      v18 = *(_OWORD *)(a3 + 5);
      v19 = a3[7];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[7] = v19;
      *(_OWORD *)(a2 + 5) = v18;
      *(_OWORD *)(a2 + 3) = v17;
      *(_OWORD *)(a3 + 1) = v16;
      *(_OWORD *)(a3 + 3) = v15;
      *(__n128 *)(a3 + 5) = result;
      a3[7] = v14;
      v20 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v20;
        v21 = a1[7];
        result = *(__n128 *)(a1 + 5);
        v22 = *(_OWORD *)(a1 + 3);
        v23 = *(_OWORD *)(a1 + 1);
        v25 = *(_OWORD *)(a2 + 3);
        v24 = *(_OWORD *)(a2 + 5);
        v26 = a2[7];
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        a1[7] = v26;
        *(_OWORD *)(a1 + 5) = v24;
        *(_OWORD *)(a1 + 3) = v25;
        *(_OWORD *)(a2 + 1) = v23;
        *(_OWORD *)(a2 + 3) = v22;
        *(__n128 *)(a2 + 5) = result;
        a2[7] = v21;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 1);
    if (v5 >= v3)
    {
      *a1 = v3;
      *a2 = v4;
      v27 = a1[7];
      v28 = *(_OWORD *)(a1 + 3);
      result = *(__n128 *)(a1 + 5);
      v29 = *v6;
      v30 = *(_OWORD *)(a2 + 3);
      v31 = *(_OWORD *)(a2 + 5);
      v32 = *(_OWORD *)(a2 + 1);
      a1[7] = a2[7];
      *(_OWORD *)(a1 + 3) = v30;
      *(_OWORD *)(a1 + 5) = v31;
      *v6 = v32;
      *(_OWORD *)(a2 + 1) = v29;
      *(_OWORD *)(a2 + 3) = v28;
      *(__n128 *)(a2 + 5) = result;
      a2[7] = v27;
      v33 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v33;
        v34 = a2[7];
        v35 = *(_OWORD *)(a2 + 3);
        result = *(__n128 *)(a2 + 5);
        v36 = *(_OWORD *)(a2 + 1);
        v37 = *(_OWORD *)(a3 + 3);
        v38 = *(_OWORD *)(a3 + 5);
        v39 = *(_OWORD *)(a3 + 1);
        a2[7] = a3[7];
        *(_OWORD *)(a2 + 3) = v37;
        *(_OWORD *)(a2 + 5) = v38;
        *(_OWORD *)(a2 + 1) = v39;
        *(_OWORD *)(a3 + 1) = v36;
        *(_OWORD *)(a3 + 3) = v35;
        *(__n128 *)(a3 + 5) = result;
        a3[7] = v34;
      }
    }
    else
    {
      *a1 = v5;
      *a3 = v4;
      v7 = a1[7];
      v9 = *(_OWORD *)(a1 + 3);
      result = *(__n128 *)(a1 + 5);
      v10 = *v6;
      v11 = *(_OWORD *)(a3 + 3);
      v12 = *(_OWORD *)(a3 + 5);
      v13 = *(_OWORD *)(a3 + 1);
      a1[7] = a3[7];
      *(_OWORD *)(a1 + 3) = v11;
      *(_OWORD *)(a1 + 5) = v12;
      *v6 = v13;
      *(_OWORD *)(a3 + 1) = v10;
      *(_OWORD *)(a3 + 3) = v9;
      *(__n128 *)(a3 + 5) = result;
      a3[7] = v7;
    }
  }
  return result;
}

BOOL sub_22F135CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 64);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 64) = v7;
        v8 = *(_QWORD *)(a1 + 56);
        v9 = *(_OWORD *)(a1 + 40);
        v10 = *(_OWORD *)(a1 + 24);
        v11 = *(_OWORD *)(a1 + 8);
        v12 = *(_OWORD *)(a2 - 40);
        v13 = *(_OWORD *)(a2 - 24);
        v14 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(a1 + 56) = v14;
        *(_OWORD *)(a1 + 40) = v13;
        *(_OWORD *)(a1 + 24) = v12;
        *(_OWORD *)(a2 - 56) = v11;
        *(_OWORD *)(a2 - 40) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_22F135AE0((unint64_t *)a1, (unint64_t *)(a1 + 64), (unint64_t *)(a2 - 64));
      return 1;
    case 4:
      sub_22F136040(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      sub_22F136040(a1, a1 + 64, a1 + 128, a1 + 192);
      v24 = *(_QWORD *)(a2 - 64);
      v25 = *(_QWORD *)(a1 + 192);
      if (v24 >= v25)
        return 1;
      *(_QWORD *)(a1 + 192) = v24;
      *(_QWORD *)(a2 - 64) = v25;
      v26 = *(_QWORD *)(a1 + 248);
      v27 = *(_OWORD *)(a1 + 232);
      v28 = *(_OWORD *)(a1 + 216);
      v29 = *(_OWORD *)(a1 + 200);
      v30 = *(_OWORD *)(a2 - 40);
      v31 = *(_OWORD *)(a2 - 24);
      v32 = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 248) = v32;
      *(_OWORD *)(a1 + 232) = v31;
      *(_OWORD *)(a1 + 216) = v30;
      *(_OWORD *)(a2 - 56) = v29;
      *(_OWORD *)(a2 - 40) = v28;
      *(_OWORD *)(a2 - 24) = v27;
      *(_QWORD *)(a2 - 8) = v26;
      v33 = *(_QWORD *)(a1 + 192);
      v34 = *(_QWORD *)(a1 + 128);
      if (v33 >= v34)
        return 1;
      *(_QWORD *)(a1 + 128) = v33;
      v35 = *(_QWORD *)(a1 + 184);
      v36 = *(_OWORD *)(a1 + 168);
      v37 = *(_OWORD *)(a1 + 136);
      v38 = *(_OWORD *)(a1 + 216);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 200);
      v39 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 152) = v38;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 192) = v34;
      *(_OWORD *)(a1 + 200) = v37;
      *(_OWORD *)(a1 + 216) = v39;
      *(_OWORD *)(a1 + 232) = v36;
      *(_QWORD *)(a1 + 248) = v35;
      v40 = *(_QWORD *)(a1 + 64);
      if (v33 >= v40)
        return 1;
      *(_QWORD *)(a1 + 64) = v33;
      v41 = *(_QWORD *)(a1 + 120);
      v42 = *(_OWORD *)(a1 + 104);
      v43 = *(_OWORD *)(a1 + 72);
      v44 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 136);
      v45 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 88) = v44;
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 128) = v40;
      *(_OWORD *)(a1 + 136) = v43;
      *(_OWORD *)(a1 + 152) = v45;
      *(_OWORD *)(a1 + 168) = v42;
      *(_QWORD *)(a1 + 184) = v41;
      v46 = *(_QWORD *)a1;
      if (v33 >= *(_QWORD *)a1)
        return 1;
      *(_QWORD *)a1 = v33;
      v47 = *(_QWORD *)(a1 + 56);
      v48 = *(_OWORD *)(a1 + 40);
      v49 = *(_OWORD *)(a1 + 8);
      v50 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 72);
      v51 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 24) = v50;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 64) = v46;
      *(_OWORD *)(a1 + 72) = v49;
      *(_OWORD *)(a1 + 88) = v51;
      *(_OWORD *)(a1 + 104) = v48;
      result = 1;
      *(_QWORD *)(a1 + 120) = v47;
      return result;
    default:
      v15 = (unint64_t *)(a1 + 128);
      sub_22F135AE0((unint64_t *)a1, (unint64_t *)(a1 + 64), (unint64_t *)(a1 + 128));
      v16 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *(_QWORD *)v16;
    if (*(_QWORD *)v16 < *v15)
    {
      v52 = *(_OWORD *)(v16 + 8);
      v53 = *(_OWORD *)(v16 + 24);
      v54 = *(_OWORD *)(v16 + 40);
      v55 = *(_QWORD *)(v16 + 56);
      v20 = *v15;
      v21 = v17;
      while (1)
      {
        v22 = a1 + v21;
        *(_QWORD *)(v22 + 192) = v20;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)(a1 + v21 + 136);
        *(_OWORD *)(v22 + 216) = *(_OWORD *)(a1 + v21 + 152);
        *(_OWORD *)(v22 + 232) = *(_OWORD *)(a1 + v21 + 168);
        *(_QWORD *)(v22 + 248) = *(_QWORD *)(a1 + v21 + 184);
        if (v21 == -128)
          break;
        v20 = *(_QWORD *)(v22 + 64);
        v21 -= 64;
        if (v19 >= v20)
        {
          v23 = (_QWORD *)(a1 + v21 + 192);
          goto LABEL_12;
        }
      }
      v23 = (_QWORD *)a1;
LABEL_12:
      *v23 = v19;
      *(_OWORD *)(v22 + 136) = v52;
      *(_OWORD *)(v22 + 152) = v53;
      *(_OWORD *)(v22 + 168) = v54;
      *(_QWORD *)(v22 + 184) = v55;
      if (++v18 == 8)
        return v16 + 64 == a2;
    }
    v15 = (unint64_t *)v16;
    v17 += 64;
    v16 += 64;
    if (v16 == a2)
      return 1;
  }
}

__n128 sub_22F136040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  result.n128_u64[0] = sub_22F135AE0((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3).n128_u64[0];
  v9 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 56);
    result = *(__n128 *)(a3 + 40);
    v11 = *(_OWORD *)(a3 + 24);
    v12 = *(_OWORD *)(a3 + 8);
    v13 = *(_OWORD *)(a4 + 24);
    v14 = *(_OWORD *)(a4 + 40);
    v15 = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 56) = v15;
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_OWORD *)(a4 + 8) = v12;
    *(_OWORD *)(a4 + 24) = v11;
    *(__n128 *)(a4 + 40) = result;
    *(_QWORD *)(a4 + 56) = v10;
    v16 = *(_QWORD *)a2;
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v16;
      v17 = *(_QWORD *)(a2 + 56);
      result = *(__n128 *)(a2 + 40);
      v18 = *(_OWORD *)(a2 + 24);
      v19 = *(_OWORD *)(a2 + 8);
      v21 = *(_OWORD *)(a3 + 24);
      v20 = *(_OWORD *)(a3 + 40);
      v22 = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 56) = v22;
      *(_OWORD *)(a2 + 40) = v20;
      *(_OWORD *)(a2 + 24) = v21;
      *(_OWORD *)(a3 + 8) = v19;
      *(_OWORD *)(a3 + 24) = v18;
      *(__n128 *)(a3 + 40) = result;
      *(_QWORD *)(a3 + 56) = v17;
      v23 = *(_QWORD *)a1;
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v23;
        v24 = *(_QWORD *)(a1 + 56);
        result = *(__n128 *)(a1 + 40);
        v25 = *(_OWORD *)(a1 + 24);
        v26 = *(_OWORD *)(a1 + 8);
        v28 = *(_OWORD *)(a2 + 24);
        v27 = *(_OWORD *)(a2 + 40);
        v29 = *(_QWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 56) = v29;
        *(_OWORD *)(a1 + 40) = v27;
        *(_OWORD *)(a1 + 24) = v28;
        *(_OWORD *)(a2 + 8) = v26;
        *(_OWORD *)(a2 + 24) = v25;
        *(__n128 *)(a2 + 40) = result;
        *(_QWORD *)(a2 + 56) = v24;
      }
    }
  }
  return result;
}

int64x2_t *sub_22F1361A8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int64x2_t *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40D93C(a1, v4, &v4[3 * v3]);
    return (int64x2_t *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (int64x2_t *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F136278(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40E044(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_OWORD *sub_22F136338(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40E240(a1, v4, &v4[3 * v3]);
    return (_OWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45B630;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F136408(char *a1)
{
  if (a1)
  {
    sub_22F136408(*(_QWORD *)a1);
    sub_22F136408(*((_QWORD *)a1 + 1));
    if (a1[87] < 0)
      operator delete(*((void **)a1 + 8));
    operator delete(a1);
  }
}

uint64_t **sub_22F136450(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_16;
  }
  v7 = *a2;
  v8 = (uint64_t *)a2[2];
  v9 = a2[3];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v11 = v5[4];
      if (v7 != v11)
        break;
      v12 = v10[6];
      if ((uint64_t)v8 >= (uint64_t)v12)
      {
        if ((uint64_t)v12 < (uint64_t)v8)
          goto LABEL_13;
        v13 = v10[7];
        if (v9 >= (unint64_t)v13)
        {
          if ((unint64_t)v13 >= v9)
            return v10;
          goto LABEL_13;
        }
      }
LABEL_10:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_16;
    }
    if (v7 < v11)
      goto LABEL_10;
    if (v11 >= v7)
      return v10;
LABEL_13:
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_16:
  v14 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x58uLL);
  v15 = a3[1];
  *((_OWORD *)v10 + 2) = *a3;
  *((_OWORD *)v10 + 3) = v15;
  v10[9] = 0;
  v10[10] = 0;
  v10[8] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v14;
  *v6 = (uint64_t *)v10;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v10;
  if (v16)
  {
    *a1 = v16;
    v17 = *v6;
  }
  sub_22E49FD00(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

_QWORD *sub_22F13655C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40E4FC(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F13661C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[32];
  uint64_t v28[2];

  v28[0] = a2;
  v28[1] = a3;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (*(_DWORD *)(*(_QWORD *)(a2 + 128) + 20))
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8 != a2)
    {
      v9 = *(unsigned int *)(a1 + 1064);
      sub_22F40E7B8(a1 + 2616, v28)[2] = v9;
    }
    v10 = 4;
    if (!a4)
      v10 = 0;
    v11 = a2 & 0xFFFFFFFFFFFFFFFBLL | v10;
    v12 = *(unsigned int *)(a1 + 24);
    v13 = v12;
    if (v12 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(unsigned int *)(a1 + 24);
    }
    v14 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v13);
    *v14 = v11;
    v14[1] = a3;
    ++*(_DWORD *)(a1 + 24);
    sub_22F40E6A4(a1, a2, a3, v12, a2);
    v15 = sub_22E46A3A0(a2);
    if (v15 != v16)
    {
      v17 = v15;
      v18 = v16;
      do
      {
        if ((*(_BYTE *)(v17 + 12) & 1) == 0)
        {
          v19 = *(_QWORD *)(**(_QWORD **)(v17 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
            v19 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v17 + 16));
          v20 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          v21 = sub_22F0C975C(*(_QWORD *)a1, a2);
          v22 = sub_22E46A3EC(v21, v20);
          sub_22F13661C(a1, v20, v22 + a3, 0);
        }
        v17 += 24;
      }
      while (v17 != v18);
    }
    sub_22F40E760((uint64_t *)a1, a2, a3, v12);
    if (v8 == a2)
    {
      v23 = v27;
      v24 = v27;
      v25 = 4;
      v26 = 0;
      sub_22F1369C4(a1, a2, (uint64_t)&v23);
      if (v24 != v23)
        free(v24);
    }
  }
}

uint64_t sub_22F136804(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (*(_DWORD *)(*(_QWORD *)(a2 + 128) + 20))
    v13 = 0;
  else
    v13 = (_DWORD)a4 == 0;
  if (!v13)
  {
    result = sub_22E46A3A0(a2);
    if (result != v14)
    {
      v15 = result;
      v16 = v14;
      while (1)
      {
        v17 = *(_QWORD *)(**(_QWORD **)(v15 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
          v17 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v15 + 16));
        v18 = (uint64_t *)sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                 + 24));
        result = sub_22E463414((uint64_t)v18);
        if (!(_DWORD)result)
          goto LABEL_21;
        if ((*(_BYTE *)(v15 + 12) & 1) == 0)
          break;
        result = sub_22E3BA850(a7, v18);
        if (v23)
        {
          v20 = sub_22F2500F4(a1[326], (uint64_t)v18);
          v22 = 1;
          goto LABEL_17;
        }
LABEL_21:
        v15 += 24;
        if (v15 == v16)
          return result;
      }
      v19 = sub_22F0C975C(*a1, a2);
      v20 = sub_22E46A3EC(v19, (uint64_t)v18) + a3;
      v21 = *(_QWORD *)(*(_QWORD *)(v19 + 72) + 48);
      if ((v21 & 4) != 0)
      {
        v22 = a4;
      }
      else
      {
        v22 = a4;
        if (v18 == (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_20:
          result = sub_22F136804(a1, v18, v20, v22, a5, a6, a7);
          goto LABEL_21;
        }
      }
LABEL_17:
      sub_22E3CD31C((uint64_t *)(v18[13] + 96), v18[13]);
      if ((v22 & 1) != 0 || *(_DWORD *)(v18[16] + 20))
        sub_22F40E6A4((uint64_t)a1, (uint64_t)v18, v20, a5, a6);
      else
        v22 = 0;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_22F1369C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;

  result = sub_22E46A3A0(a2);
  if (result != v6)
  {
    v7 = result;
    v8 = v6;
    while (1)
    {
      v9 = *(_QWORD *)(**(_QWORD **)(v7 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
        v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v7 + 16));
      v10 = (uint64_t *)sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                               + 24));
      if ((*(_BYTE *)(v7 + 12) & 1) == 0)
        goto LABEL_6;
      result = sub_22E3BA850(a3, v10);
      if (v11)
        break;
LABEL_9:
      v7 += 24;
      if (v7 == v8)
        return result;
    }
    v12 = sub_22F2500F4(*(_QWORD *)(a1 + 2608), (uint64_t)v10);
    sub_22F13661C(a1, v10, v12, 1);
LABEL_6:
    result = sub_22E3CD31C((uint64_t *)(v10[13] + 96), v10[13]);
    if (*(_DWORD *)(v10[16] + 20))
      result = sub_22F1369C4(a1, v10, a3);
    goto LABEL_9;
  }
  return result;
}

_OWORD *sub_22F136ACC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F40E8DC(a1, v4, &v4[3 * v3]);
    return (_OWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45B630;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F136B9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int8x8_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned int *)(a1 + 24) <= 0x18uLL)
  {
    *a3 = 0;
    return;
  }
  sub_22F1D1980(a2, a1, 0, 1, 0, (uint64_t)&v10);
  v5 = v11;
  v6 = v10;
  if ((v11 & 1) != 0 || !v10)
  {
    *a3 = 0;
    if ((v5 & 1) != 0)
      return;
    goto LABEL_6;
  }
  v9 = 0;
  if (sub_22F40E9B8(v10, &v9, v4))
  {
    v7 = operator new();
    v6 = 0;
    v8 = v9;
    *(_QWORD *)v7 = v10;
    *(_BYTE *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0x1800000000;
    v5 = v11;
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
  if ((v5 & 1) == 0)
  {
LABEL_6:
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

llvm::raw_ostream *sub_22F136CBC(char *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  size_t v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  llvm::raw_ostream *result;
  _BYTE *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  size_t v28;
  const char *v29;
  size_t v30;
  const char *v31;
  llvm *v32;
  size_t v33;
  const char *v34;
  llvm::raw_ostream *v35;
  _WORD *v36;
  llvm::raw_ostream *v37;
  llvm::raw_ostream *v38;
  _WORD *v39;
  _BYTE *v40;
  _BYTE *v41;
  const char *__src;
  char *v43;
  const char *v44;
  size_t v45;
  char v46;

  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16);
  v3 = bswap32(v2);
  if (a1[8])
    v4 = v3;
  else
    v4 = v2;
  v5 = (llvm::raw_ostream *)llvm::dbgs((llvm *)a1);
  v6 = v5;
  v7 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 544235853;
    *(_QWORD *)v7 = *(_QWORD *)"Header Map ";
    *((_QWORD *)v5 + 4) += 11;
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, "Header Map ");
  }
  v9 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1);
  v10 = v8;
  v11 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (v8 <= *((_QWORD *)v6 + 3) - (_QWORD)v11)
  {
    if (v8)
    {
      memcpy(v11, v9, v8);
      v11 = (_DWORD *)(*((_QWORD *)v6 + 4) + v10);
      *((_QWORD *)v6 + 4) = v11;
    }
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v9);
    v11 = (_DWORD *)*((_QWORD *)v6 + 4);
  }
  if (*((_QWORD *)v6 + 3) - (_QWORD)v11 > 3uLL)
  {
    *v11 = 538970682;
    *((_QWORD *)v6 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v6, ":\n  ");
  }
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ");
  }
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v15 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v15)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
    if (!(_DWORD)v4)
      return result;
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)result + 4);
    if (!(_DWORD)v4)
      return result;
  }
  v16 = 0;
  for (i = 0; i != v4; ++i)
  {
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v19 = v18 + v16;
    v20 = bswap32(*(_DWORD *)(v18 + v16 + 24));
    if (a1[8])
      v21 = v20;
    else
      v21 = *(_DWORD *)(v18 + v16 + 24);
    if (v21)
    {
      v23 = *(_DWORD *)(v19 + 28);
      v22 = *(_DWORD *)(v19 + 32);
      v24 = bswap32(v23);
      if (a1[8])
        v25 = v24;
      else
        v25 = v23;
      v26 = bswap32(v22);
      if (a1[8])
        v27 = v26;
      else
        v27 = v22;
      sub_22F40EA80((size_t)&v44, v18, *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v21);
      if (v46)
        v28 = v45;
      else
        v28 = 9;
      if (v46)
        v29 = v44;
      else
        v29 = "<invalid>";
      __src = v29;
      sub_22F40EA80((size_t)&v44, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v25);
      if (v46)
        v30 = v45;
      else
        v30 = 9;
      if (v46)
        v31 = v44;
      else
        v31 = "<invalid>";
      v43 = (char *)v31;
      v32 = (llvm *)sub_22F40EA80((size_t)&v44, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v27);
      if (v46)
        v33 = v45;
      else
        v33 = 9;
      if (v46)
        v34 = v44;
      else
        v34 = "<invalid>";
      v35 = (llvm::raw_ostream *)llvm::dbgs(v32);
      v36 = (_WORD *)*((_QWORD *)v35 + 4);
      if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 1uLL)
      {
        *v36 = 8224;
        *((_QWORD *)v35 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v35, "  ");
      }
      v37 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v38 = v37;
      v39 = (_WORD *)*((_QWORD *)v37 + 4);
      if (*((_QWORD *)v37 + 3) - (_QWORD)v39 > 1uLL)
      {
        *v39 = 8238;
        v40 = (_BYTE *)(*((_QWORD *)v37 + 4) + 2);
        *((_QWORD *)v38 + 4) = v40;
      }
      else
      {
        v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, ". ");
        v40 = (_BYTE *)*((_QWORD *)v38 + 4);
      }
      if (v28 <= *((_QWORD *)v38 + 3) - (_QWORD)v40)
      {
        if (v28)
        {
          memcpy(v40, __src, v28);
          v40 = (_BYTE *)(*((_QWORD *)v38 + 4) + v28);
          *((_QWORD *)v38 + 4) = v40;
        }
      }
      else
      {
        v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, __src);
        v40 = (_BYTE *)*((_QWORD *)v38 + 4);
      }
      if (*((_QWORD *)v38 + 3) - (_QWORD)v40 > 4uLL)
      {
        v40[4] = 39;
        *(_DWORD *)v40 = 540945696;
        v41 = (_BYTE *)(*((_QWORD *)v38 + 4) + 5);
        *((_QWORD *)v38 + 4) = v41;
      }
      else
      {
        v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, " -> '");
        v41 = (_BYTE *)*((_QWORD *)v38 + 4);
      }
      if (v30 <= *((_QWORD *)v38 + 3) - (_QWORD)v41)
      {
        if (v30)
        {
          memcpy(v41, v43, v30);
          v41 = (_BYTE *)(*((_QWORD *)v38 + 4) + v30);
          *((_QWORD *)v38 + 4) = v41;
        }
      }
      else
      {
        v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, v43);
        v41 = (_BYTE *)*((_QWORD *)v38 + 4);
      }
      if (*((_QWORD *)v38 + 3) - (_QWORD)v41 > 2uLL)
      {
        v41[2] = 39;
        *(_WORD *)v41 = 8231;
        result = (llvm::raw_ostream *)(*((_QWORD *)v38 + 4) + 3);
        *((_QWORD *)v38 + 4) = result;
      }
      else
      {
        v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, "' '");
        result = (llvm::raw_ostream *)*((_QWORD *)v38 + 4);
      }
      if (v33 <= *((_QWORD *)v38 + 3) - (_QWORD)result)
      {
        if (v33)
        {
          memcpy(result, v34, v33);
          result = (llvm::raw_ostream *)(*((_QWORD *)v38 + 4) + v33);
          *((_QWORD *)v38 + 4) = result;
        }
      }
      else
      {
        v38 = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, v34);
        result = (llvm::raw_ostream *)*((_QWORD *)v38 + 4);
      }
      if (*((_QWORD *)v38 + 3) - (_QWORD)result > 1uLL)
      {
        *(_WORD *)result = 2599;
        *((_QWORD *)v38 + 4) += 2;
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(v38, "'\n");
      }
    }
    v16 += 12;
  }
  return result;
}

uint64_t sub_22F1371D4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int i;
  char v12;
  int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  int j;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  const void *v41;
  const void *v42;
  size_t v43;
  char v44;
  const void *v45;
  size_t v46;
  char v47;
  _QWORD v48[2];
  char v49;
  unsigned __int8 *v50;
  uint64_t v51;

  v50 = a2;
  v51 = a3;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = a1[8];
  v9 = a1[8] == 0;
  v10 = bswap32(*(_DWORD *)(v7 + 16));
  if (!a1[8])
    v10 = *(_DWORD *)(v7 + 16);
  for (i = 0; a3; --a3)
  {
    v13 = *a2++;
    v12 = v13;
    v14 = v13 + 32;
    if ((word_22F4ADB24[v13] & 0x20) != 0)
      v12 = v14;
    i += 13 * v12;
  }
  v15 = v10 - 1;
  v16 = i & (v10 - 1);
  v17 = v7 + 24;
  v18 = bswap32(*(_DWORD *)(v17 + 12 * v16));
  if (a1[8])
    v19 = v18;
  else
    v19 = *(_DWORD *)(v17 + 12 * v16);
  if (!v19)
    return 0;
  v20 = v17 + 12 * v16;
  v21 = (unsigned int *)(v20 + 8);
  v22 = (unsigned int *)(v20 + 4);
  for (j = i + 1; ; ++j)
  {
    v24 = *v22;
    v25 = *v21;
    sub_22F40EA80((size_t)v48, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v19);
    if (v49)
    {
      if (v51 == v48[1])
        break;
    }
LABEL_16:
    v26 = *(_QWORD *)(v6 + 8) + 12 * (j & v15);
    v9 = v8 == 0;
    v27 = bswap32(*(_DWORD *)(v26 + 24));
    if (v8)
      v19 = v27;
    else
      v19 = *(_DWORD *)(v26 + 24);
    v22 = (unsigned int *)(v26 + 28);
    v21 = (unsigned int *)(v26 + 32);
    if (!v19)
      return 0;
  }
  if (llvm::StringRef::compare_insensitive())
  {
    v6 = *(_QWORD *)a1;
    v8 = a1[8];
    goto LABEL_16;
  }
  v29 = bswap32(v24);
  if (v9)
    v30 = v24;
  else
    v30 = v29;
  v31 = bswap32(v25);
  if (v9)
    v32 = v25;
  else
    v32 = v31;
  sub_22F40EA80((size_t)&v45, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v30);
  sub_22F40EA80((size_t)&v42, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v32);
  a4[1] = 0;
  if (v47 && v44)
  {
    v33 = v45;
    v34 = v46;
    v35 = a4[2];
    if (v35 < v46)
    {
      v40 = v45;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v33 = v40;
      v36 = a4[1];
LABEL_31:
      memcpy((void *)(*a4 + v36), v33, v34);
      v36 = a4[1];
      v35 = a4[2];
    }
    else
    {
      v36 = 0;
      if (v46)
        goto LABEL_31;
    }
    v37 = v36 + v34;
    a4[1] = v37;
    v38 = v42;
    v39 = v43;
    if (v35 < v43 + v37)
    {
      v41 = v42;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v38 = v41;
      v37 = a4[1];
      if (v39)
      {
LABEL_34:
        memcpy((void *)(*a4 + v37), v38, v39);
        v37 = a4[1];
      }
    }
    else if (v43)
    {
      goto LABEL_34;
    }
    a4[1] = v37 + v39;
  }
  return *a4;
}

uint64_t sub_22F137448(char *a1, const void *a2, size_t a3)
{
  llvm::StringMapImpl *v5;
  int Key;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  size_t v29;
  size_t v30;
  const void *v31;
  void *v32;
  size_t v33;
  uint64_t *v34;
  uint64_t v37;
  const void *v38;
  size_t v39;
  char v40;
  const void *v41;
  unint64_t v42;
  char v43;
  __int128 v44;
  char v45;
  void *v46;
  __int128 v47;
  _QWORD v48[130];

  v48[128] = *MEMORY[0x24BDAC8D0];
  v5 = (llvm::StringMapImpl *)(a1 + 16);
  if (!*((_DWORD *)a1 + 7))
  {
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16);
    v9 = bswap32(v8);
    if (a1[8])
      v8 = v9;
    if (!v8)
      return 0;
    v10 = 0;
    v7 = 0;
    v11 = v48;
    v12 = 12 * v8;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v14 = v13 + v10;
      v15 = bswap32(*(_DWORD *)(v13 + v10 + 24));
      v16 = a1[8] ? v15 : *(_DWORD *)(v13 + v10 + 24);
      if (v16)
      {
        v18 = *(_DWORD *)(v14 + 28);
        v17 = *(_DWORD *)(v14 + 32);
        v19 = bswap32(v18);
        v20 = a1[8] ? v19 : v18;
        v21 = bswap32(v17);
        v22 = a1[8] ? v21 : v17;
        sub_22F40EA80((size_t)&v44, v13, *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v16);
        sub_22F40EA80((size_t)&v41, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v20);
        sub_22F40EA80((size_t)&v38, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16), a1[8], v22);
        if (v45)
        {
          if (v43 && v40)
            break;
        }
      }
LABEL_13:
      v10 += 12;
      if (v12 == v10)
        return v7;
    }
    v46 = v11;
    v47 = xmmword_22F455C90;
    v24 = v41;
    v23 = v42;
    v37 = v7;
    if (v42 >= 0x401)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v26 = (char *)v46;
      v25 = v47;
    }
    else
    {
      v25 = 0;
      if (!v42)
      {
        v27 = v11;
        v28 = 1024;
        goto LABEL_28;
      }
      v26 = (char *)v11;
    }
    v27 = v11;
    memcpy(&v26[v25], v24, v23);
    v28 = *((_QWORD *)&v47 + 1);
    v25 = v47;
LABEL_28:
    v29 = v25 + v23;
    *(_QWORD *)&v47 = v29;
    v31 = v38;
    v30 = v39;
    if (v28 < v39 + v29)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v29 = v47;
    }
    v32 = v46;
    if (v30)
    {
      memcpy((char *)v46 + v29, v31, v30);
      v32 = v46;
      v29 = v47;
    }
    v33 = v29 + v30;
    *(_QWORD *)&v47 = v33;
    v34 = sub_22F40EB08(v5, v32, v33);
    *(_OWORD *)(*v34 + 8) = v44;
    v11 = v27;
    if (a3 == v33)
    {
      v7 = v37;
      if (!a3 || !memcmp(a2, v32, a3))
        v7 = v44;
    }
    else
    {
      v7 = v37;
    }
    if (v46 != v11)
      free(v46);
    goto LABEL_13;
  }
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)a1 + 6))
    return 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8 * Key) + 8);
}

uint64_t sub_22F137718(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 4) & 8) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v3);
      return *(_QWORD *)(a1 + 8);
    }
  }
  else if (a2 && *(_DWORD *)(a1 + 4))
  {
    v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(unsigned int *)(a1 + 4));
    *(_QWORD *)(a1 + 8) = v3;
  }
  return v3;
}

uint64_t sub_22F13778C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_OWORD *)a1 = *a2;
  *a2 = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = 48;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_QWORD *)(a1 + 264) = 0x400000000;
  *(_QWORD *)(a1 + 304) = a1 + 320;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 1;
  *(_OWORD *)(llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)(a1 + 336)) + 24) = 0u;
  *(_QWORD *)(a1 + 376) = a1 + 392;
  *(_QWORD *)(a1 + 384) = 0x400000000;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 448) = 1;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  sub_22F4123E8(a1 + 488, a3, a4, a5, a6, a1);
  *(_DWORD *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_DWORD *)(a1 + 1904) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_DWORD *)(a1 + 1928) = 0;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_QWORD *)(a1 + 1952) = 0x800000000;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 1976) = a1 + 1992;
  *(_QWORD *)(a1 + 1984) = 0x400000000;
  *(_QWORD *)(a1 + 2024) = a1 + 2040;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_QWORD *)(a1 + 2048) = 1;
  *(_OWORD *)(a1 + 2056) = 0u;
  return a1;
}

void sub_22F137910(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  int v14;

  *(_QWORD *)(a1 + 8) = 0;
  if (!a2)
    return;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 << 6 < a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_9;
    if ((unint64_t)(v6 << 6) > 0x3FFFFFFFFFFFFFFELL)
    {
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = v6 << 7;
      if (v7 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v7 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (!v7)
      {
        v9 = 0;
        v8 = 0;
LABEL_13:
        v10 = *(void **)a1;
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = a2;
        *(_QWORD *)(a1 + 16) = v8;
        if (v10)
          operator delete(v10);
        goto LABEL_15;
      }
      if ((v7 & 0x8000000000000000) != 0)
LABEL_9:
        abort();
    }
    v8 = ((v7 - 1) >> 6) + 1;
    v9 = operator new(8 * v8);
    *v9 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 8) = a2;
LABEL_15:
  v11 = *(void **)a1;
  if (*a3)
  {
    v12 = a2 >> 6;
    if (a2 >= 0x40)
      memset(v11, 255, 8 * v12);
    if ((a2 & 0x3F) != 0)
      *((_QWORD *)v11 + v12) |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  }
  else
  {
    v13 = v11;
    v14 = 0;
    sub_22F13CEE8((uint64_t)&v13, a2);
  }
}

_QWORD *sub_22F137A34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  result = sub_22F13CF94(a2, (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 32) - *(_QWORD *)(*(_QWORD *)a1 + 24)) >> 5);
  v4 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 88))
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *result;
    while (((*(_QWORD *)(v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    {
LABEL_8:
      if (++v5 == v4)
        return result;
    }
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & (37 * v5);
      result = (_QWORD *)(v8 + 8 * v10);
      v11 = *(unsigned int *)result;
      if (v5 == v11)
        goto LABEL_6;
      v12 = 1;
      while ((_DWORD)v11 != -1)
      {
        v13 = v10 + v12++;
        v10 = v13 & (v9 - 1);
        v11 = *(unsigned int *)(v8 + 8 * v10);
        if (v5 == v11)
        {
          result = (_QWORD *)(v8 + 8 * v10);
          goto LABEL_6;
        }
      }
    }
    result = (_QWORD *)(v8 + 8 * v9);
LABEL_6:
    if ((_QWORD *)(v8 + 8 * v9) != result)
      *(_QWORD *)(v7 + (((unint64_t)*((unsigned int *)result + 1) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)result + 1);
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_22F137B30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  v5 = a1[58];
  v4 = a1[59];
  if (v5 == v4 || (v6 = v4 - v5, (v6 & 0xFFFFFFFF0) == 0))
  {
LABEL_6:
    sub_22F136B9C(a2, a1[6], &v29);
    v9 = v29;
    if (!v29)
      return 0;
    v11 = (uint64_t *)a1[59];
    v10 = a1[60];
    if ((unint64_t)v11 >= v10)
    {
      v15 = (uint64_t *)a1[58];
      v16 = ((char *)v11 - (char *)v15) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        abort();
      v18 = v10 - (_QWORD)v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19 >> 60)
        sub_22E3B3F8C();
      v20 = (char *)operator new(16 * v19);
      v21 = (uint64_t *)&v20[16 * v16];
      *v21 = a2;
      v21[1] = v9;
      v13 = v21 + 1;
      if (v11 == v15)
      {
        v12 = v21 + 2;
        a1[58] = (uint64_t)v21;
        a1[59] = (uint64_t)(v21 + 2);
        a1[60] = (uint64_t)&v20[16 * v19];
        if (!v11)
          goto LABEL_27;
      }
      else
      {
        v22 = v21;
        do
        {
          v23 = *(v11 - 2);
          v11 -= 2;
          *(v22 - 2) = v23;
          v22 -= 2;
          v24 = v11[1];
          v11[1] = 0;
          v22[1] = v24;
        }
        while (v11 != v15);
        v11 = (uint64_t *)a1[58];
        v25 = (uint64_t *)a1[59];
        v12 = v21 + 2;
        a1[58] = (uint64_t)v22;
        a1[59] = (uint64_t)(v21 + 2);
        a1[60] = (uint64_t)&v20[16 * v19];
        if (v25 != v11)
        {
          v26 = (uint64_t **)(v25 - 1);
          do
          {
            v27 = *v26;
            *v26 = 0;
            if (v27)
              sub_22E6C68E4((uint64_t)v26, v27);
            v28 = (uint64_t *)(v26 - 1);
            v26 -= 2;
          }
          while (v28 != v11);
        }
        if (!v11)
          goto LABEL_27;
      }
      operator delete(v11);
    }
    else
    {
      *v11 = a2;
      v12 = v11 + 2;
      v11[1] = v9;
      v13 = v11 + 1;
    }
LABEL_27:
    a1[59] = (uint64_t)v12;
    return *v13;
  }
  v7 = (v6 >> 4);
  v8 = v5 + 8;
  while (*(_QWORD *)(v8 - 8) != a2)
  {
    v8 += 16;
    if (!--v7)
      goto LABEL_6;
  }
  return *(_QWORD *)v8;
}

void sub_22F137CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  void *__dst[2];
  unint64_t v18;

  v2 = *(_QWORD *)(a1 + 464);
  for (i = *(_QWORD *)(a1 + 472); v2 != i; v2 += 16)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 88);
    do
    {
      v6 = (unint64_t *)v5;
      v7 = *(_QWORD *)(v5 + 8);
      if ((v7 & 2) == 0)
        break;
      v5 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v5);
    v10 = *v6;
    v8 = v6 + 4;
    v9 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)v9;
      v18 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v18) = v9;
      v11 = __dst;
      if (!v9)
        goto LABEL_13;
    }
    memmove(v11, v8, v9);
LABEL_13:
    *((_BYTE *)v11 + v9) = 0;
    v14 = sub_22E3B9688(a2, (unint64_t)__dst, 1);
    v15 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v16 = *(_OWORD *)v14;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
    *(_OWORD *)v15 = v16;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 0;
    ++*(_DWORD *)(a2 + 8);
    if (SHIBYTE(v18) < 0)
      operator delete(__dst[0]);
  }
}

void sub_22F137E24(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  size_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  char v17;
  int v18;
  void *v19;
  size_t v20;
  size_t v21;

  v6 = (unint64_t)sub_22F152B7C(a1 + 488, a2);
  if (v6)
  {
    v7 = *(_BYTE *)(a2 + 23);
    v8 = v7;
    v9 = v7 & 0x7F;
    do
    {
      v10 = (size_t *)v6;
      v11 = *(_QWORD *)(v6 + 8);
      if ((v11 & 2) == 0)
        break;
      v6 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0);
    if (v8 >= 0)
      v12 = (void *)a2;
    else
      v12 = *(void **)a2;
    if (v8 >= 0)
      v13 = v9;
    else
      v13 = *(_QWORD *)(a2 + 8);
    v16 = *v10;
    v14 = v10 + 4;
    v15 = v16;
    v17 = *(_BYTE *)(a1 + 191);
    v18 = v17;
    if (v17 >= 0)
      v19 = (void *)(a1 + 168);
    else
      v19 = *(void **)(a1 + 168);
    v20 = v17 & 0x7F;
    if (v18 >= 0)
      v21 = v20;
    else
      v21 = *(_QWORD *)(a1 + 176);
    sub_22F13854C(v19, v21, a1, v12, v13, v14, v15, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_22F137ED4(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  const void **v11;
  const void **v12;
  char v13;
  BOOL v14;
  const void *v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  char *v22;
  _BYTE *v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  size_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  size_t *v35;
  char **v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char **v42;
  size_t v43;
  const char *v44;
  __int16 v45;
  char *v46;
  _QWORD v47[2];
  uint64_t v48;
  __int16 v49;
  char *v50;
  size_t v51;
  char *v52;
  size_t v53;
  const char *v54;
  __int16 v55;
  void *__src;
  __int128 __len;
  _QWORD v58[34];

  v58[32] = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  v51 = a3;
  v8 = sub_22F34E8E0(*a1 + 144, (uint64_t)&v50);
  v9 = *a1;
  if (*a1 + 152 != v8)
  {
    if (*(char *)(v8 + 79) < 0)
    {
      sub_22E3BB2B4(a5, *(void **)(v8 + 56), *(_QWORD *)(v8 + 64));
    }
    else
    {
      v10 = *(_OWORD *)(v8 + 56);
      a5[2] = *(_QWORD *)(v8 + 72);
      *(_OWORD *)a5 = v10;
    }
    return;
  }
  if ((a4 & 1) != 0 || (v11 = *(const void ***)(v9 + 168), v12 = *(const void ***)(v9 + 176), v11 == v12))
  {
LABEL_45:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  while (1)
  {
    v13 = *((_BYTE *)v11 + 23);
    v14 = v13 < 0;
    if (v13 >= 0)
      v15 = v11;
    else
      v15 = *v11;
    v16 = v13 & 0x7F;
    if (v14)
      v17 = (size_t)v11[1];
    else
      v17 = v16;
    __src = v58;
    __len = xmmword_22F44E320;
    if (v17 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v20 = __src;
      v18 = __len;
LABEL_14:
      memcpy((char *)v20 + v18, v15, v17);
      v19 = __len;
      goto LABEL_15;
    }
    v18 = 0;
    v19 = 0;
    v20 = v58;
    if (v17)
      goto LABEL_14;
LABEL_15:
    *(_QWORD *)&__len = v19 + v17;
    llvm::sys::fs::make_absolute();
    v22 = v50;
    v21 = v51;
    if (!v51 || (v23 = memchr(v50, 58, v51)) == 0 || v23 - v22 == -1)
    {
      v55 = 773;
      v52 = v22;
      v53 = v21;
      v54 = ".pcm";
      v49 = 257;
      v45 = 257;
      goto LABEL_39;
    }
    LOBYTE(v52) = 58;
    v24 = llvm::StringRef::find();
    v25 = v51;
    if (v51 >= v24)
      v26 = v24;
    else
      v26 = v51;
    if (v24 != -1)
      v25 = v26;
    v45 = 773;
    v42 = (char **)v50;
    v43 = v25;
    v44 = "-";
    LOBYTE(v52) = 58;
    v27 = llvm::StringRef::find();
    if (v27 == -1)
    {
      v30 = 0;
      v29 = 0;
    }
    else
    {
      if (v51 >= v27 + 1)
        v28 = v27 + 1;
      else
        v28 = v51;
      v29 = &v50[v28];
      v30 = v51 - v28;
    }
    v31 = v45;
    if (v45 == 1)
    {
      v46 = v29;
      v34 = 1;
      v31 = 5;
      v35 = v47;
      v32 = 5;
LABEL_37:
      *v35 = v30;
      LOBYTE(v49) = v31;
      HIBYTE(v49) = v34;
      v52 = v29;
      v53 = v30;
      v33 = 3;
      v54 = ".pcm";
      goto LABEL_38;
    }
    if ((_BYTE)v45)
    {
      v36 = v42;
      v32 = 2;
      if (HIBYTE(v45) != 1)
      {
        v31 = 2;
        v36 = (char **)&v42;
      }
      v46 = (char *)v36;
      v47[0] = v43;
      v47[1] = v29;
      v29 = (char *)&v46;
      v34 = 5;
      v35 = (size_t *)&v48;
      goto LABEL_37;
    }
    v32 = 0;
    v49 = 256;
    v33 = 1;
LABEL_38:
    LOBYTE(v55) = v32;
    HIBYTE(v55) = v33;
LABEL_39:
    llvm::sys::path::append();
    sub_22F1D07D8(a1[6], __src, __len, 0, 1, (uint64_t)&v52);
    v37 = __src;
    if ((v54 & 1) == 0)
      break;
    if (__src != v58)
      free(__src);
    v11 += 3;
    if (v11 == v12)
      goto LABEL_45;
  }
  v38 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if ((unint64_t)__len >= 0x17)
  {
    v39 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17)
      v39 = __len | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    a5[1] = v38;
    a5[2] = v40 | 0x8000000000000000;
    *a5 = v41;
    a5 = v41;
  }
  else
  {
    *((_BYTE *)a5 + 23) = __len;
    if (!v38)
      goto LABEL_56;
  }
  memmove(a5, v37, v38);
LABEL_56:
  *((_BYTE *)a5 + v38) = 0;
  if (__src != v58)
    free(__src);
}

void sub_22F1382C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  size_t *v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  char v24;
  BOOL v25;
  const void *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  int v33;
  size_t v34;
  size_t v35;
  const void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD v41[2];
  char v42;
  __int16 v43;
  void *v44;
  __int128 v45;
  _QWORD v46[34];

  v46[32] = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t)sub_22F152B7C(a1 + 488, a2);
  v7 = *(_BYTE *)(a2 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  do
  {
    v10 = (size_t *)v6;
    v11 = *(_QWORD *)(v6 + 8);
    if ((v11 & 2) == 0)
      break;
    v6 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  v12 = v8 < 0;
  if (v8 >= 0)
    v13 = (void *)a2;
  else
    v13 = *(void **)a2;
  v40 = v13;
  if (v12)
    v14 = *(_QWORD *)(a2 + 8);
  else
    v14 = v9;
  v39 = v14;
  v15 = *(_QWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 216) & 2) != 0)
  {
    v37 = 0;
    v38 = &unk_22F5CF7E2;
  }
  else
  {
    v16 = *(void **)(a1 + 144);
    v17 = *(_BYTE *)(a1 + 167);
    if (v17 >= 0)
      v16 = (void *)(a1 + 144);
    v38 = v16;
    v18 = *(_QWORD *)(a1 + 152);
    if (v17 >= 0)
      v18 = v17 & 0x7F;
    v37 = v18;
  }
  v19 = *(_QWORD *)(v15 + 168);
  v20 = *(_QWORD *)(v15 + 176);
  if (v19 == v20)
  {
LABEL_44:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v23 = *v10;
  v21 = v10 + 4;
  v22 = v23;
  while (1)
  {
    v24 = *(_BYTE *)(v19 + 23);
    v25 = v24 < 0;
    v26 = v24 >= 0 ? (const void *)v19 : *(const void **)v19;
    v27 = v24 & 0x7F;
    v28 = v25 ? *(_QWORD *)(v19 + 8) : v27;
    v44 = v46;
    v45 = xmmword_22F44E320;
    if (v28 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v31 = v44;
      v29 = v45;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v31 = v46;
      if (!v28)
        goto LABEL_28;
    }
    memcpy((char *)v31 + v29, v26, v28);
    v30 = v45;
LABEL_28:
    *(_QWORD *)&v45 = v30 + v28;
    llvm::sys::fs::make_absolute();
    v43 = 261;
    v41[0] = v38;
    v41[1] = v37;
    llvm::sys::path::append();
    sub_22F13854C(v44, v45, a1, v40, v39, v21, v22, (_QWORD *)a3);
    v32 = *(_BYTE *)(a3 + 23);
    v33 = v32;
    v34 = v32 & 0x7F;
    if (v33 >= 0)
      v35 = v34;
    else
      v35 = *(_QWORD *)(a3 + 8);
    if (!v35)
      goto LABEL_37;
    v36 = v33 >= 0 ? (const void *)a3 : *(const void **)a3;
    sub_22F1D07D8(*(_QWORD *)(a1 + 48), v36, v35, 0, 1, (uint64_t)v41);
    if ((v42 & 1) == 0)
      break;
    LOBYTE(v33) = *(_BYTE *)(a3 + 23);
LABEL_37:
    if ((v33 & 0x80) != 0)
      operator delete(*(void **)a3);
    if (v44 != v46)
      free(v44);
    v19 += 24;
    if (v19 == v20)
      goto LABEL_44;
  }
  if (v44 != v46)
    free(v44);
}

void sub_22F13854C(void *__src@<X5>, size_t __n@<X6>, uint64_t a3@<X0>, void *a4@<X1>, uint64_t a5@<X2>, const void *a6@<X3>, size_t a7@<X4>, _QWORD *a8@<X8>)
{
  _QWORD *v8;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD *v30;
  uint64_t v31;
  const char *v32;
  __int16 v33;
  void *__p;
  __int128 v35;
  _WORD v36[16];
  void *v37;
  __int128 v38;
  _WORD v39[64];
  void *__srca;
  __int128 __len;
  _QWORD v42[33];

  v8 = a8;
  v42[32] = *MEMORY[0x24BDAC8D0];
  if (!__n)
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    return;
  }
  __srca = v42;
  __len = xmmword_22F44E320;
  if (__n >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = __len;
    v17 = __srca;
  }
  else
  {
    v16 = 0;
    v17 = v42;
  }
  memcpy((char *)v17 + v16, __src, __n);
  *(_QWORD *)&__len = __len + __n;
  llvm::sys::fs::make_absolute();
  if ((*(_BYTE *)(*(_QWORD *)a3 + 216) & 6) != 0)
  {
    v39[4] = 773;
    v37 = a4;
    *(_QWORD *)&v38 = a5;
    *((_QWORD *)&v38 + 1) = ".pcm";
    v36[4] = 257;
    v33 = 257;
    v29 = 257;
    llvm::sys::path::append();
    goto LABEL_6;
  }
  v37 = v39;
  v38 = xmmword_22F44E310;
  if (a7 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v20 = v38;
  }
  else
  {
    v20 = 0;
    if (!a7)
      goto LABEL_15;
  }
  memcpy((char *)v37 + v20, a6, a7);
  v20 = v38;
LABEL_15:
  *(_QWORD *)&v38 = v20 + a7;
  v21 = sub_22F41310C(a3 + 488);
  if (v21)
  {
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  else
  {
    v30 = v37;
    v31 = v38;
    llvm::StringRef::lower((llvm::StringRef *)&v30);
    v25 = sub_22F1388F4((uint64_t)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
    __p = v36;
    v35 = xmmword_22F44E310;
    LODWORD(v31) = 64;
    v30 = (_QWORD *)v25;
    llvm::APInt::toString();
    if (v31 >= 0x41 && v30)
      MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
    v27 = 773;
    v26[0] = a4;
    v26[1] = a5;
    v26[2] = "-";
    v28[0] = v26;
    v28[2] = __p;
    v28[3] = v35;
    v29 = 1282;
    v30 = v28;
    v32 = ".pcm";
    v33 = 770;
    llvm::sys::path::append();
    if (__p != v36)
      free(__p);
  }
  if (v37 != v39)
    free(v37);
  if (v21)
    goto LABEL_33;
LABEL_6:
  v18 = __srca;
  if (!__srca)
  {
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    goto LABEL_33;
  }
  v19 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if ((unint64_t)__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    v8[1] = v19;
    v8[2] = v23 | 0x8000000000000000;
    *v8 = v24;
    v8 = v24;
  }
  else
  {
    *((_BYTE *)v8 + 23) = __len;
    if (!v19)
      goto LABEL_22;
  }
  memmove(v8, v18, v19);
LABEL_22:
  *((_BYTE *)v8 + v19) = 0;
LABEL_33:
  if (__srca != v42)
    free(__srca);
}

unint64_t sub_22F1388F4(uint64_t a1)
{
  _OWORD v3[4];
  _OWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  v6 = sub_22E72796C();
  return sub_22F410324((char *)v3, v3, (char *)v4, a1);
}

uint64_t sub_22F138980(uint64_t *a1, const void **a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  result = sub_22F1502C8(a1 + 61);
  if (!result && a5)
  {
    if ((*(_BYTE *)(*a1 + 216) & 0x10) == 0)
      return 0;
    result = sub_22F138AC4(a1, a2, a3, a2, a3, v12, a6);
    if (!result)
    {
      if (a3 >= 8)
      {
        v14 = a3;
        if (*(const void **)((char *)a2 + a3 - 8) != (const void *)0x657461766972505FLL)
        {
LABEL_12:
          if (*(_DWORD *)((char *)a2 + v14 - 7) != 1986622032 || *(_DWORD *)((char *)a2 + v14 - 4) != 1702125942)
            return 0;
          if (v14 >= v14 - 7)
            v16 = v14 - 7;
          else
            v16 = v14;
          return sub_22F138AC4(a1, a2, a3, a2, v16, v13, a6);
        }
        if (a3 >= a3 - 8)
          v14 = a3 - 8;
        else
          v14 = a3;
        result = sub_22F138AC4(a1, a2, a3, a2, v14, v13, a6);
        if (result)
          return result;
      }
      else
      {
        v14 = a3;
      }
      if (v14 < 7)
        return 0;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_22F138AC4(uint64_t *a1, const void **a2, uint64_t a3, const void **a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v31;
  uint64_t *v32;
  uint64_t v35;
  const void **v36;
  uint64_t v37;
  const char *v38;
  __int16 v39;
  void *v40;
  __int128 v41;
  _QWORD v42[18];

  v42[16] = *MEMORY[0x24BDAC8D0];
  v7 = a1[8] - a1[7];
  if (v7)
  {
    v11 = 0;
    v35 = 0;
    v12 = v7 >> 4;
    v32 = a1 + 61;
    while (1)
    {
      v13 = (_BYTE *)(a1[7] + v11);
      v14 = v13[8];
      if ((v14 & 0xC) != 4)
        goto LABEL_13;
      v40 = v42;
      v41 = xmmword_22F44E310;
      v15 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      v17 = *(const void **)v15;
      v16 = *(_QWORD *)(v15 + 8);
      if (v16 >= 0x81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v18 = v41;
      }
      else
      {
        v18 = 0;
        if (!v16)
          goto LABEL_7;
      }
      memcpy((char *)v40 + v18, v17, v16);
      v18 = v41;
LABEL_7:
      *(_QWORD *)&v41 = v18 + v16;
      v39 = 773;
      v36 = a4;
      v37 = a5;
      v38 = ".framework";
      llvm::sys::path::append();
      sub_22F1D0728(a1[6], (char *)v40, v41, 1, (uint64_t)&v36);
      if ((v38 & 1) != 0)
        goto LABEL_8;
      v28 = sub_22F40EE50(a1, (uint64_t)a2, a3, v36, (v13[8] & 3) != 0);
      if (!v28)
      {
        v35 = 0;
LABEL_8:
        v19 = 0;
        v20 = 1;
        goto LABEL_9;
      }
      v35 = v28;
      v20 = 0;
      v19 = 2;
LABEL_9:
      if (v40 != v42)
        free(v40);
      if (v20)
      {
        v14 = v13[8];
LABEL_13:
        if ((v14 & 0xC) != 0)
          goto LABEL_14;
        v21 = v14 & 3;
        if (sub_22F40EF0C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v13 + 8), v21 != 0, 0) == 1)
        {
          v22 = sub_22F1502C8(v32);
          if (v22)
            return v22;
          v35 = 0;
        }
        v31 = v21;
        v40 = v42;
        v41 = xmmword_22F44E310;
        v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        v25 = *(const void **)v23;
        v24 = *(_QWORD *)(v23 + 8);
        if (v24 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v26 = v41;
LABEL_21:
          memcpy((char *)v40 + v26, v25, v24);
          v26 = v41;
        }
        else
        {
          v26 = 0;
          if (v24)
            goto LABEL_21;
        }
        *(_QWORD *)&v41 = v26 + v24;
        v39 = 261;
        v36 = a2;
        v37 = a3;
        llvm::sys::path::append();
        if (sub_22F40F004((uint64_t)a1, (char *)v40, v41, v31 != 0, 0) == 1)
        {
          v27 = sub_22F1502C8(v32);
          if (v27)
          {
            v35 = v27;
            v19 = 2;
LABEL_34:
            if (v40 != v42)
              free(v40);
            goto LABEL_36;
          }
          v35 = 0;
        }
        if ((v13[8] & 0x20) != 0)
        {
          v19 = 3;
        }
        else
        {
          if (a7)
            sub_22F40F0BC((uint64_t)a1, v13);
          v35 = sub_22F1502C8(v32);
          v19 = 2 * (v35 != 0);
        }
        goto LABEL_34;
      }
LABEL_36:
      if (v19 != 3 && v19)
        return v35;
LABEL_14:
      v11 += 16;
      if (!--v12)
        return v35;
    }
  }
  return 0;
}

unint64_t sub_22F138E60(uint64_t *a1, void *a2, size_t a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  const std::error_category *v24;
  const std::error_category *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  size_t size;
  unint64_t v32;
  std::string v34;
  unsigned __int8 *v35[3];
  __int16 v36;
  unint64_t v37;
  std::error_code v38;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  sub_22F1D0894(a1[6], a2, a3, 1, 1, (uint64_t)&v39);
  if ((v40 & 1) != 0)
  {
    v21 = v39;
    v39 = 0;
    v37 = v21;
    v22 = llvm::errorToErrorCode();
    v23 = v22;
    v25 = v24;
    *(_QWORD *)&v38.__val_ = v22;
    v38.__cat_ = v24;
    if (v37)
      (*(void (**)(unint64_t))(*(_QWORD *)v37 + 8))(v37);
    if ((std::generic_category() != v25 || v23 != 2)
      && (std::generic_category() != v25 || v23 != 22)
      && (std::generic_category() != v25 || v23 != 21)
      && (std::generic_category() != v25 || v23 != 20)
      && (std::generic_category() != v25 || v23 != 1))
    {
      v26 = a1[5];
      *(_DWORD *)(v26 + 312) = a4;
      *(_DWORD *)(v26 + 316) = 8;
      if (*(char *)(v26 + 311) < 0)
      {
        **(_BYTE **)(v26 + 288) = 0;
        *(_QWORD *)(v26 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v26 + 288) = 0;
        *(_BYTE *)(v26 + 311) = 0;
      }
      v35[0] = (unsigned __int8 *)(v26 + 320);
      v35[1] = 0;
      v35[2] = (unsigned __int8 *)v26;
      v36 = 1;
      *(_BYTE *)(v26 + 320) = 0;
      *(_DWORD *)(v26 + 664) = 0;
      v27 = *(unsigned int *)(v26 + 776);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v26 + 768);
        v29 = 56 * v27;
        do
        {
          if (*(char *)(v28 + v29 - 9) < 0)
            operator delete(*(void **)(v28 + v29 - 32));
          v29 -= 56;
        }
        while (v29);
      }
      *(_DWORD *)(v26 + 776) = 0;
      sub_22E3B89A8(v35, a2, a3);
      std::error_code::message(&v34, &v38);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v34;
      else
        v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v34.__r_.__value_.__l.__size_;
      sub_22E3B89A8(v35, v30, size);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      sub_22E3BB0B8((uint64_t)v35);
    }
    v20 = 0;
  }
  else
  {
    v16 = v39;
    v17 = v39;
    do
    {
      v18 = *(_QWORD *)(v17 + 8);
      v17 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v18 & 2) != 0 && v17);
    if (!a5)
    {
      do
      {
        v19 = *(_QWORD *)(v16 + 8);
        v16 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v19 & 2) != 0 && v16);
      a5 = *(_QWORD *)(v16 + 40);
    }
    if (sub_22F139100(a1, v17, a5, a7, a8, a6, (uint64_t)a2, a3))
      v20 = v39;
    else
      v20 = 0;
  }
  if ((v40 & 1) != 0)
  {
    v32 = v39;
    v39 = 0;
    if (v32)
      (*(void (**)(unint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  return v20;
}

BOOL sub_22F139100(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2 || !a5 && (!a4 || (*(_WORD *)(a4 + 1344) & 0x2000) == 0))
    return 1;
  if (!a8)
  {
    v12 = *(_QWORD *)(a2 + 88);
    do
    {
      v13 = (uint64_t *)v12;
      v14 = *(_QWORD *)(v12 + 8);
      if ((v14 & 2) == 0)
        break;
      v12 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v12);
    v15 = *v13;
    a7 = (uint64_t)(v13 + 4);
    a8 = v15;
  }
  sub_22F13C32C(a1, a7, a8, a3, a6);
  return sub_22F13C520(a1, a2, a4, a5);
}

unint64_t sub_22F1391A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, _QWORD *a6, uint64_t a7, unint64_t *a8, _BYTE *a9, BOOL *a10, _BYTE *a11, unsigned __int8 **a12)
{
  uint64_t *v12;
  int v15;
  size_t *v17;
  size_t v18;
  const void *v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  size_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  size_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  size_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  size_t *v49;
  void *v52;
  size_t v53;
  void *v54;
  const void *v56;
  size_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  size_t v61;
  size_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  const void *v67;
  size_t v68;
  uint64_t v69;
  uint64_t *v70;
  const void *v71;
  size_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _WORD *v76;
  size_t v77;
  size_t v78;
  size_t v79;
  size_t v80;
  size_t v81;
  char *v82;
  size_t *v83;
  unsigned int v84;
  unsigned __int8 v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  size_t v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  char *v100;
  size_t v101;
  uint64_t *v102;
  char *v103;
  size_t v104;
  void *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  const void *v124;
  uint64_t v125;
  size_t __n;
  char *v131;
  uint64_t *v134;
  _BYTE v135[32];
  __int16 v136;
  void *v137;
  __int128 v138;
  _BYTE v139[777];
  void *v140;
  __int128 v141;
  uint64_t v142;
  __int16 v143;
  void *__src;
  __int128 v145;
  _WORD v146[512];
  uint64_t v147;

  v12 = (uint64_t *)a3;
  v147 = *MEMORY[0x24BDAC8D0];
  *a9 = 0;
  *a11 = 0;
  a12[1] = 0;
  v137 = v139;
  v138 = xmmword_22F455C90;
  v15 = *(_BYTE *)(a1 + 8) & 0xC;
  if (v15 == 8)
  {
    v17 = *(size_t **)a1;
    goto LABEL_31;
  }
  if (v15 != 4)
  {
    v17 = 0;
    if ((*(_BYTE *)(a1 + 8) & 0xC) == 0)
    {
      v19 = (const void *)(*(_QWORD *)a1 + 32);
      v18 = **(_QWORD **)a1;
      if (v18 >= 0x401)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v23 = v137;
        v21 = v138;
        v24 = a5;
        v25 = a6;
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v23 = v139;
        v24 = a5;
        v25 = a6;
        if (!v18)
          goto LABEL_7;
      }
      memcpy(&v23[v21], v19, v18);
      v22 = v138;
LABEL_7:
      *(_QWORD *)&v138 = v22 + v18;
      v146[4] = 261;
      v26 = *(_QWORD *)(a2 + 8);
      __src = *(void **)a2;
      *(_QWORD *)&v145 = v26;
      v143 = 257;
      v136 = 257;
      llvm::sys::path::append();
      if (!v24)
        goto LABEL_12;
      v28 = (const void *)(*(_QWORD *)a1 + 32);
      v27 = **(_QWORD **)a1;
      v24[1] = 0;
      if (v24[2] < v27)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v29 = v24[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
        if (!v27)
        {
LABEL_11:
          v24[1] = v30 + v27;
LABEL_12:
          v31 = a7;
          if (!v25)
          {
LABEL_17:
            if ((*(_BYTE *)(a1 + 8) & 0xC) != 0)
              v37 = 0;
            else
              v37 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            v42 = sub_22F138E60(v12, v137, v138, a4, v37, (*(_BYTE *)(a1 + 8) & 3) != 0, v31, a8);
            goto LABEL_37;
          }
          v32 = v12;
          v25[1] = 0;
          v34 = *(const void **)a2;
          v33 = *(_QWORD *)(a2 + 8);
          if (v25[2] < v33)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v35 = v25[1];
          }
          else
          {
            v35 = 0;
            v36 = 0;
            if (!v33)
            {
LABEL_16:
              v25[1] = v36 + v33;
              v12 = v32;
              v31 = a7;
              goto LABEL_17;
            }
          }
          memcpy((void *)(*v25 + v35), v34, v33);
          v36 = v25[1];
          goto LABEL_16;
        }
      }
      memcpy((void *)(*v24 + v29), v28, v27);
      v30 = v24[1];
      goto LABEL_11;
    }
LABEL_31:
    __src = v146;
    v145 = xmmword_22F455C90;
    v52 = (void *)sub_22F1371D4((unsigned __int8 *)v17, *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8), &__src);
    if (!v53)
    {
      v42 = 0;
      goto LABEL_33;
    }
    v56 = v52;
    v57 = v53;
    *a11 = 1;
    v143 = 261;
    v140 = v52;
    *(_QWORD *)&v141 = v53;
    if (llvm::sys::path::is_relative())
    {
      v58 = a12[1];
      if (a12[2] < &v58[v57])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v58 = a12[1];
      }
      memcpy(&v58[(_QWORD)*a12], v56, v57);
      v59 = *a12;
      v60 = (uint64_t)&a12[1][v57];
      a12[1] = (unsigned __int8 *)v60;
      *(_QWORD *)a2 = v59;
      *(_QWORD *)(a2 + 8) = v60;
      v56 = (const void *)sub_22F1371D4((unsigned __int8 *)v17, v59, v60, &__src);
      v57 = v61;
    }
    v42 = sub_22F2A7C2C(*(_QWORD *)(a3 + 48), v56, v57, 0, 1);
    if (!v42)
    {
      sub_22F139E18(a3, (unint64_t)(a1 - *(_QWORD *)(a3 + 56)) >> 4, a4);
      goto LABEL_33;
    }
    if (!a5)
    {
      if (!a6)
        goto LABEL_33;
LABEL_47:
      a6[1] = 0;
      v63 = *(const void **)a2;
      v62 = *(_QWORD *)(a2 + 8);
      if (a6[2] < v62)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v64 = a6[1];
      }
      else
      {
        v64 = 0;
        v65 = 0;
        if (!v62)
        {
LABEL_50:
          a6[1] = v65 + v62;
          goto LABEL_33;
        }
      }
      memcpy((void *)(*a6 + v64), v63, v62);
      v65 = a6[1];
      goto LABEL_50;
    }
    v67 = (const void *)sub_22F40F380(a1);
    v68 = v66;
    v69 = 0;
    a5[1] = 0;
    if (a5[2] < v66)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v69 = a5[1];
      if (!v68)
      {
LABEL_58:
        a5[1] = v69 + v68;
        if (a6)
          goto LABEL_47;
LABEL_33:
        v54 = __src;
        if (__src == v146)
          goto LABEL_37;
        goto LABEL_34;
      }
    }
    else if (!v66)
    {
      goto LABEL_58;
    }
    memcpy((void *)(*a5 + v69), v67, v68);
    v69 = a5[1];
    goto LABEL_58;
  }
  v38 = *(_QWORD *)(a2 + 8);
  if (!v38)
  {
LABEL_29:
    v42 = 0;
    goto LABEL_37;
  }
  v39 = *(_BYTE **)a2;
  v40 = *(_QWORD *)(a3 + 48);
  v41 = memchr(*(void **)a2, 47, v38);
  v42 = 0;
  if (v41)
  {
    v43 = v41;
    if (v41 - v39 != -1)
    {
      __n = v41 - v39;
      if (v38 >= v41 - v39)
        v44 = v41 - v39;
      else
        v44 = v38;
      v45 = sub_22F4101CC((llvm::StringMapImpl *)(v12 + 42), v39, v44);
      v46 = *v45;
      v47 = *(_QWORD *)(*v45 + 8);
      v48 = *(_BYTE *)(a1 + 8) & 0xC;
      if (v47)
      {
        if (v48 != 4)
          goto LABEL_29;
        v49 = *(size_t **)a1;
        if (!*(_QWORD *)a1 || *(_QWORD *)(v47 + 8) != v49[1])
          goto LABEL_29;
        v125 = *v45;
        __src = v146;
        v145 = xmmword_22F455C90;
      }
      else
      {
        __src = v146;
        v145 = xmmword_22F455C90;
        v125 = v46;
        if (v48 == 4)
          v49 = *(size_t **)a1;
        else
          v49 = 0;
      }
      v70 = a5;
      v73 = *v49;
      v71 = v49 + 4;
      v72 = v73;
      if (v73 >= 0x401)
      {
        v124 = v71;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v71 = v124;
        v74 = v145;
        v76 = __src;
      }
      else
      {
        v74 = 0;
        v75 = 0;
        v76 = v146;
        if (!v72)
        {
LABEL_64:
          v77 = v75 + v72;
          *(_QWORD *)&v145 = v75 + v72;
          if (!(v75 + v72) || *((char *)__src + v77 - 1) != 47)
          {
            if (v77 + 1 > *((_QWORD *)&v145 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v77 = v145;
            }
            *((_BYTE *)__src + v77) = 47;
            v77 = v145 + 1;
            *(_QWORD *)&v145 = v145 + 1;
          }
          v78 = __n;
          if (*((_QWORD *)&v145 + 1) < v77 + __n)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v78 = __n;
            v77 = v145;
          }
          v79 = v78;
          if (v39 != v43)
          {
            memcpy((char *)__src + v77, v39, v78);
            v77 = v145;
          }
          v80 = v77 + v79;
          *(_QWORD *)&v145 = v80;
          v81 = v79;
          if (*((_QWORD *)&v145 + 1) < v80 + 11)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v81 = __n;
            v80 = v145;
          }
          v82 = (char *)__src + v80;
          *(_QWORD *)v82 = *(_QWORD *)".framework/";
          *(_DWORD *)(v82 + 7) = 795570799;
          *(_QWORD *)&v145 = v145 + 11;
          v83 = *(size_t **)(v125 + 8);
          if (!v83)
          {
            do
              v84 = __ldxr((unsigned int *)&dword_255E04E10);
            while (__stxr(v84 + 1, (unsigned int *)&dword_255E04E10));
            v85 = atomic_load(byte_255E04E14);
            if ((v85 & 1) == 0)
              llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_255E04DF8);
            sub_22F1D0728(v40, (char *)__src, v145, 1, (uint64_t)v135);
            if ((v135[16] & 1) != 0)
              goto LABEL_80;
            v81 = __n;
            if ((*(_BYTE *)(a1 + 8) & 0xC) == 4)
              v83 = *(size_t **)a1;
            else
              v83 = 0;
            *(_QWORD *)(v125 + 8) = v83;
            if ((*(_BYTE *)(a1 + 8) & 3) == 0)
            {
              v140 = &v142;
              v141 = xmmword_22F455C90;
              v86 = v145;
              if ((_QWORD)v145)
              {
                sub_22E3B3B4C((uint64_t)&v140, (uint64_t)&__src);
                v87 = *((_QWORD *)&v141 + 1);
                v86 = v141;
              }
              else
              {
                v87 = 1024;
              }
              if (v87 < v86 + 17)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v86 = v141;
              }
              v88 = (char *)v140 + v86;
              *(_OWORD *)v88 = *(_OWORD *)".system_framework";
              v88[16] = 107;
              *(_QWORD *)&v141 = v141 + 17;
              if (!llvm::sys::fs::access())
                *(_BYTE *)(v125 + 16) = 1;
              if (v140 != &v142)
                free(v140);
              v83 = *(size_t **)(v125 + 8);
              v70 = a5;
              v81 = __n;
            }
          }
          v89 = &v39[v81];
          *a9 = *(_BYTE *)(v125 + 16);
          *a10 = v83 != 0;
          if (a6)
          {
            v90 = 0;
            a6[1] = 0;
            v91 = v89 + 1;
            v92 = v38 - (v81 + 1);
            if (a6[2] < v92)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v90 = a6[1];
            }
            v131 = v89;
            if (v91 == &v39[v38])
            {
              v70 = a5;
              v93 = a6;
            }
            else
            {
              v93 = a6;
              memcpy((void *)(*a6 + v90), v91, v92);
              v90 = a6[1];
              v70 = a5;
            }
            v93[1] = v90 + v92;
            v89 = v131;
          }
          v134 = v12;
          v94 = v145;
          v95 = v145;
          if (*((_QWORD *)&v145 + 1) < (unint64_t)(v145 + 8))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v95 = v145;
          }
          *(_QWORD *)((char *)__src + v95) = 0x2F73726564616548;
          v96 = v145 + 8;
          *(_QWORD *)&v145 = v145 + 8;
          if (v70)
          {
            v97 = 0;
            v70[1] = 0;
            v98 = (char *)__src;
            v99 = v70;
            v100 = (char *)__src + v96 - 1;
            v101 = v96 - 1;
            if (v99[2] < (unint64_t)(v96 - 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v97 = a5[1];
            }
            if (v98 == v100)
            {
              v102 = a5;
            }
            else
            {
              v102 = a5;
              memcpy((void *)(*a5 + v97), v98, v101);
              v97 = a5[1];
            }
            v102[1] = v97 + v101;
            v96 = v145;
          }
          v103 = &v39[v38];
          v104 = &v39[v38] - (v89 + 1);
          if (*((_QWORD *)&v145 + 1) < v96 + v104)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v96 = v145;
          }
          v105 = __src;
          v106 = a8;
          v107 = v40;
          if (v89 + 1 != v103)
          {
            memcpy((char *)__src + v96, v89 + 1, v104);
            v96 = v145;
            v105 = __src;
          }
          *(_QWORD *)&v145 = v96 + v104;
          v108 = sub_22F2A7C2C(v40, v105, v96 + v104, a8 == 0, 1);
          if (!v108)
          {
            sub_22E80AF00((uint64_t *)&__src, (uint64_t)__src + v94, "Private", "");
            if (a5)
              sub_22E80AF00(a5, *a5 + v94, "Private", "");
            v106 = a8;
            v107 = v40;
            v108 = sub_22F2A7C2C(v40, __src, v145, a8 == 0, 1);
            if (!v108)
            {
LABEL_80:
              v42 = 0;
              goto LABEL_81;
            }
          }
          if (v106 || a7 && (*(_WORD *)(a7 + 1344) & 0x2000) != 0)
          {
            v109 = v108;
            do
            {
              v110 = *(_QWORD *)(v109 + 8);
              v109 = v110 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v110 & 2) != 0 && v109);
            v111 = *(_QWORD *)(v109 + 40);
            v112 = *(char **)v111;
            v113 = *(_QWORD *)(v111 + 8);
            sub_22F1D0728(v107, *(char **)v111, v113, 1, (uint64_t)&v140);
            if ((BYTE8(v141) & 1) != 0)
            {
LABEL_131:
              v119 = v108;
              do
              {
                v120 = *(_QWORD *)(v119 + 8);
                v119 = v120 & 0xFFFFFFFFFFFFFFFCLL;
              }
              while ((v120 & 2) != 0 && v119);
              if ((*(_BYTE *)(a1 + 8) & 0xC) != 0)
                v121 = 0;
              else
                v121 = *(_QWORD *)(*(_QWORD *)a1 + 8);
              v42 = 0;
              if (!sub_22F139100(v134, v119, v121, a7, v106, (*(_BYTE *)(a1 + 8) & 3) != 0, (uint64_t)&unk_22F5CF7E2, 0))
              {
LABEL_81:
                v54 = __src;
                if (__src != v146)
                {
LABEL_34:
                  free(v54);
                  goto LABEL_37;
                }
                goto LABEL_37;
              }
            }
            else
            {
              while (1)
              {
                v114 = llvm::sys::path::extension();
                if (v115 == 10 && *(_QWORD *)v114 == 0x6F77656D6172662ELL && *(_WORD *)(v114 + 8) == 27506)
                  break;
                v117 = (char *)llvm::sys::path::parent_path();
                if (v118)
                {
                  v112 = v117;
                  v113 = v118;
                  sub_22F1D0728(v107, v117, v118, 1, (uint64_t)&v140);
                  if ((BYTE8(v141) & 1) == 0)
                    continue;
                }
                goto LABEL_131;
              }
              v122 = v108;
              do
              {
                v123 = *(_QWORD *)(v122 + 8);
                v122 = v123 & 0xFFFFFFFFFFFFFFFCLL;
              }
              while ((v123 & 2) != 0 && v122);
              if ((sub_22F139F9C(v134, v122, v112, v113, a7, a8, (*(_BYTE *)(a1 + 8) & 3) != 0) & 1) == 0)
                goto LABEL_80;
            }
          }
          v42 = v108;
          goto LABEL_81;
        }
      }
      memcpy((char *)v76 + v74, v71, v72);
      v75 = v145;
      goto LABEL_64;
    }
  }
LABEL_37:
  if (v137 != v139)
    free(v137);
  return v42;
}

uint64_t sub_22F139E18(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  size_t v16;
  int v17;
  int v18;
  unsigned __int8 *v19[3];
  __int16 v20;

  v3 = result;
  *(_QWORD *)(*(_QWORD *)(result + 80) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(unsigned int *)(result + 32);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & (37 * a2);
    v7 = (int *)(v4 + 8 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_3;
    v17 = 1;
    while (v8 != -1)
    {
      v18 = v6 + v17++;
      v6 = v18 & (v5 - 1);
      v8 = *(_DWORD *)(v4 + 8 * v6);
      if (v8 == a2)
      {
        v7 = (int *)(v4 + 8 * v6);
        goto LABEL_3;
      }
    }
  }
  v7 = (int *)(v4 + 8 * v5);
LABEL_3:
  if ((int *)(v4 + 8 * v5) != v7)
  {
    v9 = *(_QWORD *)(result + 40);
    *(_DWORD *)(v9 + 312) = a3;
    *(_DWORD *)(v9 + 316) = 1280;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v19[0] = (unsigned __int8 *)(v9 + 320);
    v19[1] = 0;
    v19[2] = (unsigned __int8 *)v9;
    v20 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v10 = *(unsigned int *)(v9 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v9 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
    }
    *(_DWORD *)(v9 + 776) = 0;
    v13 = *(_QWORD *)(*(_QWORD *)v3 + 24) + 32 * v7[1];
    v14 = *(_BYTE *)(v13 + 23);
    if (v14 >= 0)
      v15 = (void *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 32 * v7[1]);
    else
      v15 = *(void **)v13;
    if (v14 >= 0)
      v16 = v14 & 0x7F;
    else
      v16 = *(_QWORD *)(v13 + 8);
    sub_22E3B89A8(v19, v15, v16);
    return sub_22E3BB0B8((uint64_t)v19);
  }
  return result;
}

uint64_t sub_22F139F9C(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t *a6, unsigned int a7)
{
  _BOOL8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__dst[2];
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a6 || a5 && (*(_WORD *)(a5 + 1344) & 0x2000) != 0)
  {
    v38 = (char *)&v40;
    v39 = 0x400000000;
    v10 = a1[6];
    sub_22F1D0728(v10, a3, a4, 1, (uint64_t)v41);
    if ((v42 & 1) != 0)
      v11 = 0;
    else
      v11 = v41[0];
    if (v11)
      sub_22F1D1F3C();
    v12 = llvm::sys::path::parent_path();
    if (!v13)
    {
LABEL_32:
      v30 = llvm::sys::path::stem();
      sub_22F40EE50(a1, v30, v31, v11, a7);
      v8 = sub_22F13C520(a1, a2, a5, a6);
      sub_22E3B9848(&v38);
      return v8;
    }
    v14 = (char *)v12;
    v15 = v13;
    while (1)
    {
      sub_22F1D0728(v10, v14, v15, 1, (uint64_t)v41);
      if ((v42 & 1) != 0)
        goto LABEL_32;
      v16 = llvm::sys::path::extension();
      if (v17 == 10 && *(_QWORD *)v16 == 0x6F77656D6172662ELL && *(_WORD *)(v16 + 8) == 27506)
        break;
LABEL_31:
      v14 = (char *)llvm::sys::path::parent_path();
      v15 = v29;
      if (!v29)
        goto LABEL_32;
    }
    v19 = llvm::sys::path::stem();
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v21 = (const void *)v19;
    v22 = (void *)v20;
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      v23 = (void **)operator new(v24 + 1);
      __dst[1] = v22;
      v37 = v25 | 0x8000000000000000;
      __dst[0] = v23;
    }
    else
    {
      HIBYTE(v37) = v20;
      v23 = __dst;
      if (!v20)
        goto LABEL_28;
    }
    memmove(v23, v21, (size_t)v22);
LABEL_28:
    *((_BYTE *)v22 + (_QWORD)v23) = 0;
    v26 = sub_22E3B9688((uint64_t)&v38, (unint64_t)__dst, 1);
    v27 = &v38[24 * v39];
    v28 = *(_OWORD *)v26;
    *((_QWORD *)v27 + 2) = *(_QWORD *)(v26 + 16);
    *(_OWORD *)v27 = v28;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)v26 = 0;
    LODWORD(v39) = v39 + 1;
    if (SHIBYTE(v37) < 0)
      operator delete(__dst[0]);
    v11 = v41[0];
    goto LABEL_31;
  }
  return 1;
}

unint64_t sub_22F13A25C(uint64_t a1, void *a2, size_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10, uint64_t *a11, _QWORD *a12, uint64_t a13, unint64_t *a14, _BYTE *a15, _BYTE *a16, char a17, unsigned __int8 a18)
{
  _BYTE *v24;
  unint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t *v44;
  unsigned int v45;
  unint64_t v46;
  __n128 *v47;
  unsigned __int16 v48;
  unint64_t v49;
  uint64_t v50;
  __n128 *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  size_t v73;
  _BYTE *v74;
  unint64_t *v75;
  const void *v76;
  void *v77;
  const void *v78;
  char v79;
  BOOL v80;
  BOOL v82;
  uint64_t v83;
  size_t v84;
  _BYTE *v85;
  _BYTE *v86;
  __n128 *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  size_t v93;
  int v94;
  _OWORD *v95;
  unint64_t v96;
  uint64_t v97;
  const void *v98;
  size_t v99;
  uint64_t v100;
  unint64_t *v101;
  size_t v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 *v108;
  __n128 *v109;
  int v110;
  __int16 v111;
  unsigned __int16 v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  const void *v120;
  size_t v121;
  char v122;
  BOOL v124;
  unint64_t *v125;
  _BYTE *v126;
  uint64_t *v127;
  unint64_t v128;
  _BYTE *v129;
  unint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v148;
  unint64_t v149;
  llvm::StringMapImpl *v150;
  _BYTE *v151;
  uint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v161;
  uint64_t *v162;
  _QWORD *__srca;
  unint64_t *v165;
  unint64_t v166;
  BOOL v167;
  __int16 v168;
  _QWORD v169[2];
  void *__s;
  size_t __n;
  _BYTE v172[24];
  _BYTE v173[64];
  void *v174;
  __int128 v175;
  _WORD v176[512];
  uint64_t v177;

  v24 = a15;
  v25 = a14;
  v177 = *MEMORY[0x24BDAC8D0];
  __s = a2;
  __n = a3;
  if (a8)
    v26 = a8;
  else
    v26 = v169;
  v169[0] = 0;
  v169[1] = 0;
  if (a15)
    *a15 = 0;
  if (a16)
    *a16 = 0;
  v27 = a12;
  if (a14)
    *a14 = 0;
  v176[4] = 261;
  v174 = a2;
  *(_QWORD *)&v175 = a3;
  if (llvm::sys::path::is_absolute())
  {
    v28 = 0;
    *v26 = 0;
    v29 = v169;
    if (a8)
      v29 = a8;
    v29[1] = 0;
    if (a6)
      return v28;
    if (a11)
      a11[1] = 0;
    if (!a12)
      return sub_22F138E60((uint64_t *)a1, a2, a3, a4, 0, 0, a13, a14);
    a12[1] = 0;
    if (a12[2] < a3)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v30 = a12[1];
    }
    else
    {
      v30 = 0;
      v31 = 0;
      if (!a3)
      {
LABEL_20:
        a12[1] = v31 + a3;
        return sub_22F138E60((uint64_t *)a1, a2, a3, a4, 0, 0, a13, a14);
      }
    }
    memcpy((void *)(*a12 + v30), a2, a3);
    v31 = a12[1];
    goto LABEL_20;
  }
  v157 = a7;
  v158 = a6;
  v32 = 0;
  v162 = (uint64_t *)a1;
  v159 = a5;
  v156 = v26;
  if (!a10)
  {
    v33 = 0;
    goto LABEL_72;
  }
  v33 = 0;
  if ((a5 & 1) != 0)
    goto LABEL_72;
  if (*(_BYTE *)(a1 + 112))
  {
    v32 = 0;
    v33 = 0;
    goto LABEL_72;
  }
  v174 = v176;
  *((_QWORD *)&v175 + 1) = 1024;
  v34 = a9 + 1;
  v35 = 16 * a10;
  v36 = 1;
  while (1)
  {
    v37 = 0;
    v38 = *(v34 - 1);
    v39 = *(const void **)*v34;
    v40 = *(_QWORD *)(*v34 + 8);
    *(_QWORD *)&v175 = 0;
    if (*((_QWORD *)&v175 + 1) >= v40)
    {
      if (!v40)
        goto LABEL_31;
LABEL_30:
      memcpy((char *)v174 + v37, v39, v40);
      v37 = v175;
      goto LABEL_31;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v37 = v175;
    if (v40)
      goto LABEL_30;
LABEL_31:
    v41 = v37 + v40;
    *(_QWORD *)&v175 = v41;
    if (v41 + 1 > *((_QWORD *)&v175 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v41 = v175;
    }
    *((_BYTE *)v174 + v41) = 47;
    v42 = v175 + 1;
    *(_QWORD *)&v175 = v42;
    if (*((_QWORD *)&v175 + 1) >= v42 + a3)
    {
      if (!a3)
        goto LABEL_36;
LABEL_35:
      memcpy((char *)v174 + v42, a2, a3);
      v42 = v175;
      goto LABEL_36;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v42 = v175;
    if (a3)
      goto LABEL_35;
LABEL_36:
    v43 = v42 + a3;
    *(_QWORD *)&v175 = v42 + a3;
    if (v38)
    {
      v44 = v162;
      v45 = (sub_22F13B0E4(v162, v38)->n128_u16[0] & 0x1C) != 0;
      v43 = v175;
    }
    else
    {
      v45 = a18;
      v44 = v162;
    }
    v46 = sub_22F138E60(v44, v174, v43, a4, *v34, v45, a13, a14);
    v28 = v46;
    if (v38)
    {
      if (v46)
        break;
    }
    if (v46)
    {
      v61 = 1;
      goto LABEL_67;
    }
    v36 = 0;
    v34 += 2;
    v35 -= 16;
    if (!v35)
    {
      v61 = 2;
LABEL_67:
      v32 = 0;
      v33 = 0;
      a1 = (uint64_t)v162;
      v25 = a14;
      v24 = a15;
      v26 = v156;
LABEL_68:
      v27 = a12;
      goto LABEL_69;
    }
  }
  v47 = sub_22F13B0E4(v162, v38);
  v48 = v47->n128_u16[0];
  *(__n128 *)v172 = v47[1];
  v49 = v28;
  do
  {
    v50 = *(_QWORD *)(v49 + 8);
    v49 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v50 & 2) != 0 && v49);
  v51 = sub_22F13B0E4(v162, v49);
  v51->n128_u16[0] = v51->n128_u16[0] & 0xFDE3 | v48 & 0x21C;
  v51[1] = *(__n128 *)v172;
  v26 = v156;
  if (a11)
  {
    v52 = 0;
    v53 = *(const void **)*v34;
    v54 = *(_QWORD *)(*v34 + 8);
    a11[1] = 0;
    if (a11[2] < v54)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v52 = a11[1];
      if (v54)
      {
LABEL_54:
        memcpy((void *)(*a11 + v52), v53, v54);
        v52 = a11[1];
      }
    }
    else if (v54)
    {
      goto LABEL_54;
    }
    a11[1] = v52 + v54;
  }
  v25 = a14;
  v24 = a15;
  if (a12)
  {
    a12[1] = 0;
    if (a12[2] < a3)
    {
      v57 = a12;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v55 = a12[1];
LABEL_59:
      memcpy((void *)(*v57 + v55), a2, a3);
      v56 = v57[1];
    }
    else
    {
      v55 = 0;
      v56 = 0;
      v57 = a12;
      if (a3)
        goto LABEL_59;
    }
    v57[1] = v56 + a3;
  }
  v58 = v162[5];
  if ((v36 & 1) != 0)
  {
    v59 = v28;
    do
    {
      v60 = *(_QWORD *)(v59 + 8);
      v59 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v60 & 2) != 0 && v59);
    sub_22F13B21C(v58, a4, *(_QWORD *)*v34, *(_QWORD *)(*v34 + 8), a2, a3, v59, 0, 0);
    v32 = 0;
    v33 = 0;
    v61 = 1;
    a1 = (uint64_t)v162;
    goto LABEL_68;
  }
  v141 = sub_22F1CF68C(*(_QWORD *)(v58 + 32), 0x4CBu, a4, v162[5]);
  v33 = 0;
  if (v141 == 1)
    v32 = 0;
  else
    v32 = v28;
  if (v141 == 1)
    v61 = 1;
  else
    v61 = 2;
  v27 = a12;
  if (a14)
  {
    a1 = (uint64_t)v162;
    if (v141 != 1)
    {
      v33 = *a14;
      *a14 = 0;
      v61 = 2;
      v32 = v28;
    }
  }
  else
  {
    a1 = (uint64_t)v162;
  }
LABEL_69:
  if (v174 != v176)
  {
    v153 = v33;
    free(v174);
    v33 = v153;
  }
  if ((v61 & 0xFFFFFFFD) != 0)
    return v28;
LABEL_72:
  v154 = v33;
  v155 = v32;
  v62 = 0;
  *v26 = 0;
  v63 = v169;
  if (a8)
    v63 = a8;
  v152 = v63;
  v63[1] = 0;
  if (v159)
    v62 = *(unsigned int *)(a1 + 104);
  v64 = sub_22F13D1D0((llvm::StringMapImpl *)(a1 + 216), a2, a3);
  if (v158)
    v65 = v158;
  else
    v65 = a1;
  v66 = *v64;
  if (v158)
    v67 = v157;
  else
    v67 = v62;
  v68 = v67 + 1;
  __srca = (_QWORD *)*v64;
  v150 = (llvm::StringMapImpl *)(a1 + 216);
  if ((a17 & 1) == 0 && *(_QWORD *)(v66 + 8) == v65 && *(_QWORD *)(v66 + 16) == v68)
  {
    if (*(_QWORD *)(v66 + 24))
    {
      v67 = *(_QWORD *)(v66 + 32);
      v65 = *(_QWORD *)(v66 + 24);
    }
    if (*(_QWORD *)(v66 + 40))
    {
      v69 = strlen(*(const char **)(v66 + 40));
      __s = *(void **)(v66 + 40);
      __n = v69;
      if (v24)
        *v24 = 1;
    }
  }
  else
  {
    *(_QWORD *)(v66 + 8) = v65;
    *(_QWORD *)(v66 + 16) = v68;
    *(_QWORD *)(v66 + 40) = 0;
  }
  *(_QWORD *)v172 = v173;
  *(_OWORD *)&v172[8] = xmmword_22F44E300;
  if (v65 == a1 && v67 == (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4)
  {
LABEL_117:
    if (!a10
      || (v83 = *a9) == 0
      || (v159 & 1) != 0
      || (v84 = __n) != 0 && (v85 = __s, (v86 = memchr(__s, 47, __n)) != 0) && v86 - v85 != -1
      || (v87 = sub_22F13B0E4((_QWORD *)a1, v83), (v87->n128_u16[0] & 0x200) == 0))
    {
      v28 = v155;
      if (v155)
      {
        v88 = v155;
        do
        {
          v89 = *(_QWORD *)(v88 + 8);
          v88 = v89 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v89 & 2) != 0 && v88);
      }
      else
      {
        v88 = 0;
      }
      if (sub_22F13B710(*(_QWORD *)(a1 + 40), v88, 0, a4))
      {
        if (v25)
          *v25 = v154;
      }
      else
      {
        v28 = 0;
        v97 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4;
        __srca[3] = a1;
        __srca[4] = v97;
      }
      goto LABEL_238;
    }
    v174 = v176;
    v175 = xmmword_22F44E310;
    v98 = (const void *)v87[1].n128_u64[0];
    v99 = v87[1].n128_u64[1];
    if (v99 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v100 = v175;
    }
    else
    {
      v100 = 0;
      if (!v99)
        goto LABEL_142;
    }
    memcpy((char *)v174 + v100, v98, v99);
    v100 = v175;
LABEL_142:
    v101 = v25;
    v102 = v100 + v99;
    *(_QWORD *)&v175 = v102;
    if (v102 + 1 > *((_QWORD *)&v175 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v102 = v175;
    }
    *((_BYTE *)v174 + v102) = 47;
    v103 = v175 + 1;
    *(_QWORD *)&v175 = v103;
    v104 = __s;
    if (*((_QWORD *)&v175 + 1) < v84 + v103)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v103 = v175;
      if (!v84)
        goto LABEL_147;
    }
    else if (!v84)
    {
LABEL_147:
      *(_QWORD *)&v175 = v103 + v84;
      v28 = sub_22F13A25C(a1, v174);
      if (v155)
      {
        v105 = v155;
        do
        {
          v106 = *(_QWORD *)(v105 + 8);
          v105 = v106 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v106 & 2) != 0 && v105);
      }
      else
      {
        v105 = 0;
      }
      if (v28)
      {
        v142 = v28;
        do
        {
          v143 = *(_QWORD *)(v142 + 8);
          v142 = v143 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v143 & 2) != 0 && v142);
      }
      else
      {
        v142 = 0;
      }
      if (sub_22F13B710(*(_QWORD *)(a1 + 40), v105, v142, a4))
      {
        if (v101)
          *v101 = v154;
        v28 = v155;
      }
      else
      {
        v144 = *sub_22F13D1D0(v150, v104, v84);
        v145 = sub_22F13D1D0(v150, v174, v175);
        v146 = *(_QWORD *)(*v145 + 32);
        *(_QWORD *)(v144 + 24) = *(_QWORD *)(*v145 + 24);
        *(_QWORD *)(v144 + 32) = v146;
        sub_22F139E18(a1, v146, a4);
      }
      if (v174 != v176)
        free(v174);
      goto LABEL_238;
    }
    memcpy((char *)v174 + v103, v104, v84);
    v103 = v175;
    goto LABEL_147;
  }
  v70 = a1 + 240;
  v71 = 16 * v67;
  v161 = v65;
  while (1)
  {
    v168 = 0;
    v167 = 0;
    v72 = sub_22F1391A0(*(_QWORD *)(v65 + 56) + v71, (uint64_t)&__s, a1, a4, a11, v27, a13, v25, (_BYTE *)&v168 + 1, &v167, &v168, (unsigned __int8 **)v172);
    v73 = *(_QWORD *)&v172[8];
    if (*(_QWORD *)&v172[8])
    {
      v74 = v24;
      v75 = v25;
      v76 = *(const void **)v172;
      v77 = (void *)sub_22E3CD3D4(v70, *(_QWORD *)&v172[8] + 1, 0);
      v78 = v76;
      v25 = v75;
      v24 = v74;
      v27 = a12;
      memmove(v77, v78, v73);
      *((_BYTE *)v77 + v73) = 0;
      __srca[5] = v77;
      a1 = (uint64_t)v162;
    }
    if (v24)
    {
      if (*(_QWORD *)&v172[8])
      {
        v79 = 1;
      }
      else
      {
        if ((_BYTE)v168)
          v80 = v72 == 0;
        else
          v80 = 1;
        v79 = !v80;
      }
      *v24 |= v79;
    }
    if (a16)
    {
      v82 = v167 && __srca[5] == 0;
      *a16 |= v82;
    }
    if (v72)
      break;
    ++v67;
    v71 += 16;
    v65 = v161;
    if (v161 == a1 && v67 == (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4)
      goto LABEL_117;
  }
  v151 = v24;
  v165 = v25;
  *v156 = v161;
  v152[1] = v67;
  v90 = v72;
  do
  {
    v91 = *(_QWORD *)(v90 + 8);
    v90 = v91 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v91 & 2) != 0 && v90);
  v166 = v91 & 0xFFFFFFFFFFFFFFFCLL;
  v92 = __s;
  v93 = __n;
  v174 = 0;
  v94 = sub_22F13D2D4(*(_QWORD *)(a1 + 1912), *(_DWORD *)(a1 + 1928), v91 & 0xFFFFFFFFFFFFFFFCLL, &v174);
  v95 = v174;
  if (v94)
  {
    v96 = *((_QWORD *)v174 + 3);
  }
  else
  {
    v95 = sub_22F4103AC(a1 + 1912, (uint64_t *)&v166, v174);
    v95[3] = 0u;
    v95[4] = 0u;
    v95[5] = 0u;
    v95[2] = 0u;
    *(_QWORD *)v95 = v90;
    *((_QWORD *)v95 + 1) = v95 + 2;
    v95[1] = xmmword_22F44E300;
    v96 = 64;
  }
  v107 = 0;
  *((_QWORD *)v95 + 2) = 0;
  if (v96 < v93)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v107 = *((_QWORD *)v95 + 2);
    if (v93)
    {
LABEL_155:
      memcpy((void *)(*((_QWORD *)v95 + 1) + v107), v92, v93);
      v107 = *((_QWORD *)v95 + 2);
    }
  }
  else if (v93)
  {
    goto LABEL_155;
  }
  *((_QWORD *)v95 + 2) = v107 + v93;
  v108 = sub_22F13B0E4((_QWORD *)a1, v166);
  v109 = v108;
  v110 = *(_BYTE *)(*(_QWORD *)(*v156 + 56) + 16 * v152[1] + 8) & 3;
  v111 = v108->n128_u16[0] & 0xFFE3;
  v112 = v111 | (4 * (*(_BYTE *)(*(_QWORD *)(*v156 + 56) + 16 * v152[1] + 8) & 3));
  v108->n128_u16[0] = v112;
  if (v110)
    v113 = 1;
  else
    v113 = HIBYTE(v168) == 0;
  if (!v113)
  {
    v112 = v111 | 4;
    v108->n128_u16[0] = v111 | 4;
  }
  v114 = *(_QWORD *)(a1 + 120);
  v115 = *(_QWORD *)(a1 + 128) - v114;
  if ((v115 & 0x1FFFFFFFE0) != 0)
  {
    v116 = (v115 >> 5) - 1;
    while (1)
    {
      v117 = v116;
      v118 = v114 + 32 * v116;
      v119 = *(_BYTE *)(v118 + 23);
      v120 = v119 >= 0 ? (const void *)(v114 + 32 * v116) : *(const void **)v118;
      v121 = v119 >= 0 ? v119 & 0x7F : *(_QWORD *)(v118 + 8);
      if (v93 >= v121 && (!v121 || !memcmp(v92, v120, v121)))
        break;
      --v116;
      if (!v117)
        goto LABEL_175;
    }
    v109->n128_u16[0] = v112 & 0xFFE3 | (4 * (*(_BYTE *)(v114 + 32 * v116 + 24) & 0x3F));
  }
LABEL_175:
  v122 = *(_BYTE *)(*(_QWORD *)(*v156 + 56) + 16 * v152[1] + 8);
  if ((v122 & 0xC) != 8 || v159 == 0)
  {
    v124 = (v122 & 0xC) != 4 || v93 == 0;
    v125 = v165;
    if (!v124)
    {
      v126 = memchr(v92, 47, v93);
      if (v126)
      {
        if (v126 - (_BYTE *)v92 != -1)
        {
          v127 = sub_22F2A4E30((llvm::StringMapImpl *)(a1 + 1936), v92, v126 - (_BYTE *)v92);
          v128 = *(_QWORD *)*v127;
          v109[1].n128_u64[0] = *v127 + 8;
          v109[1].n128_u64[1] = v128;
        }
      }
    }
  }
  else
  {
    v125 = v165;
    if (v93)
    {
      v129 = memchr(v92, 47, v93);
      if (v129)
      {
        if (v129 - (_BYTE *)v92 != -1)
        {
          v148 = sub_22F2A4E30((llvm::StringMapImpl *)(a1 + 1936), v92, v129 - (_BYTE *)v92);
          v149 = *(_QWORD *)*v148;
          v109[1].n128_u64[0] = *v148 + 8;
          v109[1].n128_u64[1] = v149;
          v122 = *(_BYTE *)(*(_QWORD *)(*v156 + 56) + 16 * v152[1] + 8);
        }
      }
    }
    if ((v122 & 0x1C) == 0x18)
      v109->n128_u16[0] |= 0x200u;
  }
  v130 = v155;
  if (v155)
  {
    v131 = v151;
    do
    {
      v132 = *(_QWORD *)(v130 + 8);
      v130 = v132 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v132 & 2) != 0 && v130);
  }
  else
  {
    v131 = v151;
  }
  v133 = v72;
  do
  {
    v134 = *(_QWORD *)(v133 + 8);
    v133 = v134 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v134 & 2) != 0 && v133);
  if (sub_22F13B710(*(_QWORD *)(a1 + 40), v130, v133, a4))
  {
    if (v125)
      *v125 = v154;
    v28 = v155;
  }
  else
  {
    if (v131)
      v135 = *v131 != 0;
    else
      v135 = 0;
    if (a10)
    {
      v136 = (uint64_t *)a9[1];
      v137 = *v136;
      v138 = v136[1];
      v139 = v72;
      do
      {
        v140 = *(_QWORD *)(v139 + 8);
        v139 = v140 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v140 & 2) != 0 && v139);
      sub_22F13B21C(*(_QWORD *)(a1 + 40), a4, v137, v138, v92, v93, v139, v159, v135);
    }
    __srca[3] = v161;
    __srca[4] = v67;
    sub_22F139E18(a1, v67, a4);
    v28 = v72;
  }
LABEL_238:
  if (*(_BYTE **)v172 != v173)
    free(*(void **)v172);
  return v28;
}

__n128 *sub_22F13B0E4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __n128 *v7;
  uint64_t v8;
  unsigned __int16 v9;
  BOOL v10;
  unsigned __int8 v12;
  __n128 v13[2];
  void *v14;
  _QWORD *v15[3];
  void *v16[17];

  v16[16] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 64);
  v5 = a1[24];
  v6 = a1 + 24;
  if (0x6F96F96F96F96F97 * ((a1[25] - v5) >> 3) <= v4)
  {
    sub_22F13BF18((uint64_t)(a1 + 24), (v4 + 1));
    LODWORD(v4) = *(_DWORD *)(a2 + 64);
    v5 = *v6;
  }
  v7 = (__n128 *)(v5 + 312 * v4);
  v8 = a1[258];
  v9 = v7->n128_u16[0];
  if (v8)
    v10 = (v7->n128_u16[0] & 0x100) == 0;
  else
    v10 = 0;
  if (v10)
  {
    (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v13, v8, a2);
    v12 = v13[0].n128_u8[0];
    if ((v13[0].n128_u16[0] & 0x400) != 0)
    {
      v7->n128_u16[0] |= 0x100u;
      if ((v12 & 0x20) != 0)
        sub_22F13BF5C(v7, v13);
    }
    sub_22E6C6A2C(v16);
    sub_22E6C6AB4((uint64_t)v15, v15[1]);
    sub_22E6C6A2C(&v14);
    v9 = v7->n128_u16[0];
  }
  v7->n128_u16[0] = v9 & 0xFBDF | 0x400;
  return v7;
}

void sub_22F13B21C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, size_t a6, uint64_t a7, char a8, char a9)
{
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  __int128 *p_dst;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  size_t __len;
  void *__src;
  unint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 __p;
  unint64_t v46;
  char v47;
  unsigned __int8 *v48[3];
  __int16 v49;
  char v50;
  char v51;
  __int128 __dst;
  unint64_t v53;
  void *v54;
  __int128 v55;
  _WORD v56[64];
  void *v57;
  __int128 v58;
  _BYTE v59[128];
  void *v60;
  __int128 v61;
  _BYTE v62[128];
  void *__s2;
  __int128 v64;
  _BYTE v65[128];
  _QWORD *v66;
  __int128 v67;
  _QWORD v68[18];

  v68[16] = *MEMORY[0x24BDAC8D0];
  v51 = 0;
  v66 = v68;
  v67 = xmmword_22F44E310;
  __s2 = v65;
  v64 = xmmword_22F44E310;
  v60 = v62;
  v61 = xmmword_22F44E310;
  v57 = v59;
  v58 = xmmword_22F44E310;
  if (!sub_22F13CC18(a3, a4, &v51, &v66, &v60))
    goto LABEL_53;
  __src = a5;
  v50 = 0;
  v14 = *(_QWORD *)(a7 + 88);
  do
  {
    v15 = (uint64_t *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    if ((v16 & 2) == 0)
      break;
    v14 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v14);
  v17 = sub_22F13CC18((uint64_t)(v15 + 4), *v15, &v50, &__s2, &v57);
  v18 = v17;
  if ((a8 & 1) == 0 && (a9 & 1) == 0)
  {
    v54 = v56;
    LOBYTE(v56[0]) = 60;
    v55 = xmmword_22F460B10;
    v37 = v17;
    if (!v17)
    {
      if (a6 + 1 >= 0x81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v25 = v55;
      }
      else
      {
        v25 = 1;
      }
      v24 = a5;
      if (a6)
      {
        memcpy((char *)v54 + v25, a5, a6);
        v25 = v55;
      }
      v21 = v25 + a6;
      *(_QWORD *)&v55 = v21;
      if (*((_QWORD *)&v55 + 1) >= (unint64_t)(v21 + 1))
      {
LABEL_13:
        *((_BYTE *)v54 + v21) = 62;
        *(_QWORD *)&v55 = v55 + 1;
        *(_DWORD *)(a1 + 312) = a2;
        *(_DWORD *)(a1 + 316) = 1371;
        __len = a6;
        if (*(char *)(a1 + 311) < 0)
        {
          **(_BYTE **)(a1 + 288) = 0;
          *(_QWORD *)(a1 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 288) = 0;
          *(_BYTE *)(a1 + 311) = 0;
        }
        v48[0] = (unsigned __int8 *)(a1 + 320);
        v48[1] = 0;
        v48[2] = (unsigned __int8 *)a1;
        v49 = 1;
        *(_BYTE *)(a1 + 320) = 0;
        *(_DWORD *)(a1 + 664) = 0;
        v26 = *(unsigned int *)(a1 + 776);
        if ((_DWORD)v26)
        {
          v27 = *(_QWORD *)(a1 + 768);
          v28 = 56 * v26;
          do
          {
            if (*(char *)(v27 + v28 - 9) < 0)
              operator delete(*(void **)(v27 + v28 - 32));
            v28 -= 56;
          }
          while (v28);
        }
        *(_DWORD *)(a1 + 776) = 0;
        sub_22E3B89A8(v48, v24, a6);
        v30 = v54;
        v29 = v55;
        v43 = 0;
        v44 = 0;
        v47 = 0;
        v41 = a2 | ((unint64_t)a2 << 32);
        v42 = 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if ((unint64_t)v55 >= 0x17)
        {
          v32 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)v55 | 7) != 0x17)
            v32 = v55 | 7;
          v33 = v32 + 1;
          p_dst = (__int128 *)operator new(v32 + 1);
          *((_QWORD *)&__dst + 1) = v29;
          v53 = v33 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
          v18 = v37;
        }
        else
        {
          HIBYTE(v53) = v55;
          p_dst = &__dst;
          v18 = v37;
          if (!(_QWORD)v55)
            goto LABEL_35;
        }
        memmove(p_dst, v30, v29);
LABEL_35:
        *((_BYTE *)p_dst + v29) = 0;
        __p = __dst;
        v46 = v53;
        sub_22E6D82D0((uint64_t *)v48, &v41);
        if (SHIBYTE(v46) < 0)
          operator delete((void *)__p);
        sub_22E3BB0B8((uint64_t)v48);
        a6 = __len;
        if (v54 != v56)
          free(v54);
        goto LABEL_39;
      }
LABEL_20:
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v21 = v55;
      goto LABEL_13;
    }
    v20 = v57;
    v19 = v58;
    if ((unint64_t)(v58 + 1) >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v22 = v54;
      v21 = v55;
    }
    else
    {
      v21 = 1;
      if (!(_QWORD)v58)
      {
        v23 = 128;
LABEL_12:
        *(_QWORD *)&v55 = v21;
        v24 = __src;
        if (v23 >= v21 + 1)
          goto LABEL_13;
        goto LABEL_20;
      }
      v22 = v56;
    }
    memcpy((char *)v22 + v21, v20, v19);
    v23 = *((_QWORD *)&v55 + 1);
    v21 = v55 + v19;
    goto LABEL_12;
  }
LABEL_39:
  if (!v51 && v18 && v50 && (_QWORD)v67 == (_QWORD)v64 && !memcmp(v66, __s2, v67))
  {
    *(_DWORD *)(a1 + 312) = a2;
    *(_DWORD *)(a1 + 316) = 1317;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v54 = (void *)(a1 + 320);
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = a1;
    v56[0] = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v34 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(a1 + 768);
      v36 = 56 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 9) < 0)
          operator delete(*(void **)(v35 + v36 - 32));
        v36 -= 56;
      }
      while (v36);
    }
    *(_DWORD *)(a1 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&v54, __src, a6);
    sub_22E3BB0B8((uint64_t)&v54);
  }
LABEL_53:
  if (v57 != v59)
    free(v57);
  if (v60 != v62)
    free(v60);
  if (__s2 != v65)
    free(__s2);
  if (v66 != v68)
    free(v66);
}

uint64_t sub_22F13B710(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t *v12;
  uint64_t v13;
  unsigned __int8 *v15[3];
  __int16 v16;

  if (a2)
    v4 = a3 == a2;
  else
    v4 = 1;
  v5 = !v4;
  if (!v4)
  {
    *(_DWORD *)(a1 + 312) = a4;
    *(_DWORD *)(a1 + 316) = 1227;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v15[0] = (unsigned __int8 *)(a1 + 320);
    v15[1] = 0;
    v15[2] = (unsigned __int8 *)a1;
    v16 = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v8 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(a1 + 768);
      v10 = 56 * v8;
      do
      {
        if (*(char *)(v9 + v10 - 9) < 0)
          operator delete(*(void **)(v9 + v10 - 32));
        v10 -= 56;
      }
      while (v10);
    }
    *(_DWORD *)(a1 + 776) = 0;
    v11 = *(_QWORD *)(a2 + 88);
    do
    {
      v12 = (size_t *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      if ((v13 & 2) == 0)
        break;
      v11 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v11);
    sub_22E3B89A8(v15, v12 + 4, *v12);
    sub_22E3BB0B8((uint64_t)v15);
  }
  return v5;
}

uint64_t sub_22F13B804(_QWORD *a1, char *__s, size_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, unint64_t *a8)
{
  char *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  size_t v34;
  char *v35;
  size_t v36;
  uint64_t *v37;
  size_t *v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  unsigned __int16 v57;
  unint64_t v58;
  uint64_t v59;
  __int16 v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  size_t v70;
  void *v71;
  char *v72;
  unint64_t *v73;
  uint64_t v74;
  __int128 v75;
  void *__src;
  uint64_t v77;
  void *v78;
  __int128 v79;
  _BYTE v80[777];
  void *__s2;
  __int128 v82;
  _QWORD v83[130];

  v83[128] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v16 = (char *)memchr(__s, 47, a3);
  v17 = 0;
  if (v16)
  {
    v18 = v16;
    v74 = a7;
    v19 = v16 - __s;
    if (v16 - __s != -1)
    {
      v20 = *(_QWORD *)(a4 + 88);
      do
      {
        v21 = (uint64_t *)v20;
        v22 = *(_QWORD *)(v20 + 8);
        if ((v22 & 2) == 0)
          break;
        v20 = v22 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v20);
      v23 = *v21;
      __src = v21 + 4;
      v77 = v23;
      v24 = llvm::StringRef::find();
      if (v24 == -1)
        return 0;
      v25 = *((unsigned __int8 *)__src + v24 + 10);
      if (v25 != 92 && v25 != 47)
        return 0;
      v27 = (char *)__src + v24 + 11;
      v73 = a8;
      __s2 = v83;
      v82 = xmmword_22F455C90;
      v28 = v24 + 11;
      if ((unint64_t)(v24 + 11) >= 0x401)
      {
        v72 = (char *)__src + v24 + 11;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v27 = v72;
        v29 = v82;
      }
      else
      {
        v29 = 0;
      }
      if (__src != v27)
      {
        memcpy((char *)__s2 + v29, __src, v28);
        v29 = v82;
      }
      v30 = v29 + v28;
      *(_QWORD *)&v82 = v30;
      if (*((_QWORD *)&v82 + 1) < v30 + 11)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v30 = v82;
      }
      v31 = (char *)__s2 + v30;
      *(_QWORD *)v31 = *(_QWORD *)"Frameworks/";
      *(_DWORD *)(v31 + 7) = 796093298;
      v32 = v82 + 11;
      *(_QWORD *)&v82 = v32;
      v33 = v73;
      if (*((_QWORD *)&v82 + 1) < v32 + v19)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v32 = v82;
      }
      if (__s != v18)
      {
        memcpy((char *)__s2 + v32, __s, v19);
        v32 = v82;
      }
      v34 = v32 + v19;
      *(_QWORD *)&v82 = v34;
      if (*((_QWORD *)&v82 + 1) < v34 + 11)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v34 = v82;
      }
      v35 = (char *)__s2 + v34;
      *(_QWORD *)v35 = *(_QWORD *)".framework/";
      *(_DWORD *)(v35 + 7) = 795570799;
      *(_QWORD *)&v82 = v82 + 11;
      if (a3 >= v19)
        v36 = v19;
      else
        v36 = a3;
      v75 = 0uLL;
      v37 = sub_22F410550((llvm::StringMapImpl *)(a1 + 42), __s, v36, &v75);
      v38 = (size_t *)*v37;
      if (*(_QWORD *)(*v37 + 8))
      {
        if (*v38 != (_QWORD)v82 || !memcmp(v38 + 3, __s2, *v38))
          goto LABEL_39;
      }
      else
      {
        do
          v39 = __ldxr((unsigned int *)&dword_255E04E30);
        while (__stxr(v39 + 1, (unsigned int *)&dword_255E04E30));
        v40 = atomic_load(byte_255E04E34);
        if ((v40 & 1) == 0)
          llvm::TrackingStatistic::RegisterStatistic((llvm::TrackingStatistic *)off_255E04E18);
        v41 = sub_22E6D59C0(a1[6], (char *)__s2, v82, 1);
        if (v41)
        {
          v38[1] = v41;
LABEL_39:
          v42 = &__s[v19];
          if (a6)
          {
            v43 = 0;
            a6[1] = 0;
            v44 = a3 - (v19 + 1);
            if (a6[2] < v44)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v43 = a6[1];
            }
            if (v42 + 1 != &__s[a3])
            {
              memcpy((void *)(*a6 + v43), &__s[v19 + 1], a3 - (v19 + 1));
              v43 = a6[1];
            }
            a6[1] = v43 + v44;
            v33 = v73;
          }
          v78 = v80;
          v79 = xmmword_22F455C90;
          v45 = v82;
          if ((_QWORD)v82)
          {
            sub_22E3B3B4C((uint64_t)&v78, (uint64_t)&__s2);
            v46 = *((_QWORD *)&v79 + 1);
            v45 = v79;
          }
          else
          {
            v46 = 1024;
          }
          if (v46 < v45 + 8)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v45 = v79;
          }
          *(_QWORD *)((char *)v78 + v45) = 0x2F73726564616548;
          v47 = v79 + 8;
          *(_QWORD *)&v79 = v79 + 8;
          if (a5)
          {
            v48 = 0;
            a5[1] = 0;
            v49 = (char *)v78;
            v50 = (char *)v78 + v47 - 1;
            v51 = v47 - 1;
            if (a5[2] < (unint64_t)(v47 - 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v48 = a5[1];
            }
            if (v49 != v50)
            {
              memcpy((void *)(*a5 + v48), v49, v51);
              v48 = a5[1];
            }
            a5[1] = v48 + v51;
            v47 = v79;
            v33 = v73;
          }
          v52 = v42 + 1;
          v53 = &__s[a3];
          v54 = v53 - (v42 + 1);
          if (*((_QWORD *)&v79 + 1) < v47 + v54)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v47 = v79;
          }
          v55 = v78;
          if (v52 != v53)
          {
            memcpy((char *)v78 + v47, v42 + 1, v53 - (v42 + 1));
            v55 = v78;
            v47 = v79;
          }
          *(_QWORD *)&v79 = v47 + v54;
          v56 = sub_22F2A7C2C(a1[6], v55, v47 + v54, 1, 1);
          if (v56)
            goto LABEL_61;
          sub_22E3B3B4C((uint64_t)&v78, (uint64_t)&__s2);
          v65 = v79;
          if (*((_QWORD *)&v79 + 1) < (unint64_t)(v79 + 15))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v65 = v79;
          }
          qmemcpy((char *)v78 + v65, "PrivateHeaders/", 15);
          v66 = v79 + 15;
          *(_QWORD *)&v79 = v79 + 15;
          if (a5)
          {
            v67 = 0;
            a5[1] = 0;
            v68 = (char *)v78;
            v69 = (char *)v78 + v66 - 1;
            v70 = v66 - 1;
            if (a5[2] < (unint64_t)(v66 - 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v67 = a5[1];
            }
            if (v68 != v69)
            {
              memcpy((void *)(*a5 + v67), v68, v70);
              v67 = a5[1];
            }
            a5[1] = v67 + v70;
            v66 = v79;
          }
          if (*((_QWORD *)&v79 + 1) < v66 + v54)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v66 = v79;
          }
          v71 = v78;
          if (v52 != v53)
          {
            memcpy((char *)v78 + v66, v52, v54);
            v71 = v78;
            v66 = v79;
          }
          *(_QWORD *)&v79 = v66 + v54;
          v56 = sub_22F2A7C2C(a1[6], v71, v66 + v54, 1, 1);
          v33 = v73;
          if (v56)
          {
LABEL_61:
            v57 = sub_22F13B0E4(a1, a4)->n128_u16[0];
            v58 = v56;
            do
            {
              v59 = *(_QWORD *)(v58 + 8);
              v58 = v59 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v59 & 2) != 0 && v58);
            v60 = v57 & 0x1C;
            v61 = sub_22F13B0E4(a1, v58);
            v61->n128_u16[0] = v61->n128_u16[0] & 0xFFE3 | v60;
            v62 = v82 - 1;
            *(_QWORD *)&v82 = v82 - 1;
            v63 = v56;
            do
            {
              v64 = *(_QWORD *)(v63 + 8);
              v63 = v64 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v64 & 2) != 0 && v63);
            if (sub_22F139F9C(a1, v63, (char *)__s2, v62, v74, v33, 0))
              v17 = v56;
            else
              v17 = 0;
          }
          else
          {
            v17 = 0;
          }
          if (v78 != v80)
            free(v78);
          goto LABEL_36;
        }
      }
      v17 = 0;
LABEL_36:
      if (__s2 != v83)
        free(__s2);
    }
  }
  return v17;
}

void sub_22F13BF18(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_22F13D438((void **)a1, v4);
  }
  else if (!v3)
  {
    sub_22E6C69C0((void **)a1, (void **)(*(_QWORD *)a1 + 312 * a2));
  }
}

__n128 sub_22F13BF5C(__n128 *a1, __n128 *a2)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  __int16 v6;
  __int16 v7;
  unsigned __int16 v8;
  __n128 result;

  v2 = a1->n128_u16[0];
  v3 = a2->n128_u16[0] & 1 | a1->n128_u16[0];
  a1->n128_u16[0] = v3;
  v4 = (a2->n128_u16[0] | v2) & 2 | v3 & 0xFFFD;
  a1->n128_u16[0] = v4;
  v5 = v4 & 0xFFBF | (a2->n128_u16[0] | v2) & 0x40;
  a1->n128_u16[0] = v5;
  if (!a1->n128_u64[1] && !a1->n128_u32[1])
  {
    a1->n128_u64[1] = a2->n128_u64[1];
    a1->n128_u32[1] = a2->n128_u32[1];
  }
  v6 = v5 & 0xFBC3;
  if ((v2 & 0x400) != 0)
    v7 = v2 & 0x20 | 0x400;
  else
    v7 = 1056;
  v8 = v6 | v7 | a2->n128_u16[0] & 0x1C;
  a1->n128_u16[0] = v8;
  a1->n128_u16[0] = v8 & 0xFDFF | a2->n128_u16[0] & 0x200;
  if (!a1[1].n128_u64[1])
  {
    result = a2[1];
    a1[1] = result;
  }
  return result;
}

__n128 *sub_22F13C01C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  __n128 *v10;
  unsigned __int8 v11;
  int v13;
  __n128 v14[2];
  void *v15;
  _QWORD *v16[3];
  void *v17[17];

  v17[16] = *(void **)MEMORY[0x24BDAC8D0];
  v5 = a1 + 24;
  v4 = a1[24];
  v6 = *(unsigned int *)(a2 + 64);
  v7 = 0x6F96F96F96F96F97 * ((a1[25] - v4) >> 3);
  if (!a1[258])
  {
    if (v7 > v6)
    {
      v10 = (__n128 *)(v4 + 312 * v6);
      goto LABEL_15;
    }
    return 0;
  }
  if (v7 > v6)
  {
    v10 = (__n128 *)(v4 + 312 * v6);
    if ((a3 & 1) == 0 && (v10->n128_u16[0] & 0x420) != 0x400)
      return 0;
    goto LABEL_10;
  }
  if (!a3)
    return 0;
  sub_22F13BF18((uint64_t)(a1 + 24), (v6 + 1));
  v10 = (__n128 *)(*v5 + 312 * *(unsigned int *)(a2 + 64));
LABEL_10:
  if ((v10->n128_u16[0] & 0x100) == 0)
  {
    (*(void (**)(__n128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)a1[258] + 16))(v14, a1[258], a2);
    v11 = v14[0].n128_u8[0];
    if ((v14[0].n128_u16[0] & 0x400) != 0)
    {
      v10->n128_u16[0] |= 0x100u;
      if ((v11 & 0x20) != 0)
        sub_22F13BF5C(v10, v14);
    }
    sub_22E6C6A2C(v17);
    sub_22E6C6AB4((uint64_t)v16, v16[1]);
    sub_22E6C6A2C(&v15);
  }
LABEL_15:
  if ((v10->n128_u16[0] & 0x400) == 0)
    return 0;
  if ((v10->n128_u16[0] & 0x20) != 0)
    v13 = a3;
  else
    v13 = 1;
  if (v13)
    return v10;
  else
    return 0;
}

__n128 *sub_22F13C1A0(_QWORD *a1, uint64_t a2)
{
  __n128 *result;

  result = sub_22F13C01C(a1, a2, 1);
  if (result)
  {
    if ((result->n128_u16[0] & 2) != 0 || result->n128_u64[1])
      return (__n128 *)1;
    else
      return (__n128 *)(result->n128_u32[1] != 0);
  }
  return result;
}

__n128 *sub_22F13C1E0(__n128 *result, uint64_t a2, char a3, int a4)
{
  __n128 *v6;
  int v7;
  unsigned int v8;
  int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  v6 = result;
  v7 = a3 & 6;
  if ((a4 & 1) != 0
    || (a3 & 6) == 0 && ((result = sub_22F13C01C(result, a2, 1)) == 0 || (result->n128_u16[0] & 0x40) == 0))
  {
    result = sub_22F13B0E4(v6, a2);
    v8 = result->n128_u16[0];
    v9 = (v8 >> 6) & 1;
    if (!v7)
      v9 = 1;
    if (v9)
      v10 = 64;
    else
      v10 = 0;
    v11 = v10 | v8 & 0xFF3F;
    if (a4 | ((v8 & 0x80) >> 7))
      v12 = 128;
    else
      v12 = 0;
    result->n128_u16[0] = v11 | v12;
  }
  return result;
}

uint64_t sub_22F13C288(uint64_t a1)
{
  uint64_t v2;
  _WORD *v3;
  int v4;
  _BOOL8 v5;

  if (!**(_BYTE **)a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  sub_22F151DC8((int32x2_t *)(v2 + 488), **(_QWORD **)(a1 + 16));
  v3 = *(_WORD **)(a1 + 24);
  v4 = (unsigned __int16)*v3;
  if ((~v4 & 0xC0) != 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = sub_22F4124F8(v2 + 488, **(_QWORD **)(a1 + 16));
    v3 = *(_WORD **)(a1 + 24);
    LOWORD(v4) = *v3;
  }
  if ((v4 & 0xC0) == 0x80)
    return sub_22F137718((uint64_t)v3, *(_QWORD *)(v2 + 2056)) || v5;
  return v5;
}

uint64_t sub_22F13C32C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + 216) & 0x10) == 0)
    return 0;
  v26 = v28;
  v27 = 0x200000000;
  v8 = llvm::sys::path::parent_path();
  if (v9)
  {
    v10 = (char *)v8;
    v11 = v9;
    while (1)
    {
      sub_22F1D0728(a1[6], v10, v11, 1, (uint64_t)&v24);
      if ((v25 & 1) != 0)
        break;
      v12 = v24;
      v13 = llvm::sys::path::extension();
      v14 = 0;
      if (v15 == 10)
        v14 = *(_QWORD *)v13 == 0x6F77656D6172662ELL && *(_WORD *)(v13 + 8) == 27506;
      if (sub_22F40EF0C(a1, v12, a5, v14) <= 1)
      {
        if ((_DWORD)v27)
        {
          v19 = 0;
          v20 = (uint64_t)(a1 + 233);
          v21 = 8 * v27;
          v5 = 1;
          do
          {
            *((_BYTE *)sub_22F309434(v20, (uint64_t *)((char *)v26 + v19)) + 8) = 1;
            v19 += 8;
          }
          while (v21 != v19);
        }
        else
        {
          v5 = 1;
        }
        goto LABEL_20;
      }
      if (v12 != a4)
      {
        v17 = v27;
        if (v27 >= (unint64_t)HIDWORD(v27))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v27;
        }
        *((_QWORD *)v26 + v17) = v12;
        LODWORD(v27) = v27 + 1;
        v10 = (char *)llvm::sys::path::parent_path();
        v11 = v18;
        if (v18)
          continue;
      }
      break;
    }
  }
  v5 = 0;
LABEL_20:
  if (v26 != v28)
    free(v26);
  return v5;
}

BOOL sub_22F13C520(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 result;

  if (a1[258])
    sub_22F13C01C(a1, a2, 1);
  v8 = a1 + 61;
  v9 = sub_22F152624((uint64_t)v8, a2, 1, 0);
  v10 = v9;
  if (!a3
    || v9 < 8
    || (*(_WORD *)(a3 + 1344) & 0x2000) == 0
    || (sub_22F412548(v8, (uint64_t *)a3, 0), (sub_22F1D8F94(a3, (_BYTE *)(v10 & 0xFFFFFFFFFFFFFFF8)) & 1) != 0))
  {
    if (!a4)
      return 1;
    if ((v10 & 2) != 0)
      v11 = 0;
    else
      v11 = v10;
LABEL_10:
    *a4 = v11;
    return 1;
  }
  result = sub_22F4124F8((uint64_t)v8, a2);
  if (result)
  {
    if (!a4)
      return 1;
    v11 = 0;
    goto LABEL_10;
  }
  return result;
}

void sub_22F13C5F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, BOOL *a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  void *v19;
  size_t v20;
  unint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[3];
  _BOOL4 v31;
  _QWORD v32[2];
  uint64_t v33;
  unint64_t v34;
  void *v35;
  __int128 v36;
  _BYTE v37[128];
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[17];

  v40[16] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v34 = a3;
  v32[0] = a4;
  v32[1] = a5;
  v31 = 0;
  v30[0] = v32;
  v30[1] = &v33;
  v30[2] = &v31;
  v10 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
  if (!v10)
  {
    LOBYTE(v12) = 0;
    goto LABEL_24;
  }
  v11 = 0;
  v12 = 0;
  v13 = v10 >> 4;
  do
  {
    v14 = *(_QWORD *)(a1 + 56);
    v15 = v14 + v11;
    if ((*(_BYTE *)(v14 + v11 + 8) & 0xC) == 4)
    {
      v18 = sub_22F13C8C8(v30, **(void ***)(*(_QWORD *)(v14 + v11) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + v11) + 8) + 8));
      v12 |= v18;
      if (a8 && v18)
      {
        v17 = v31;
        if (v31)
          v17 = (*(_BYTE *)(v15 + 8) & 3) != 3 && (*(_BYTE *)(v15 + 8) & 3) != 0;
        v12 = 1;
        goto LABEL_19;
      }
    }
    else if ((*(_BYTE *)(v14 + v11 + 8) & 0xC) == 0)
    {
      v16 = sub_22F13C8C8(v30, **(void ***)(*(_QWORD *)(v14 + v11) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + v11) + 8) + 8));
      v12 &= v16 ^ 1;
      if (a8)
      {
        if (v16)
        {
          v17 = v31;
          if (v31)
          {
            v12 = 0;
            v17 = (*(_BYTE *)(v15 + 8) & 3) != 3 && (*(_BYTE *)(v15 + 8) & 3) != 0;
          }
          else
          {
            v12 = 0;
          }
LABEL_19:
          *a8 = v17;
        }
      }
    }
    v11 += 16;
    --v13;
  }
  while (v13);
  if (!v31)
  {
LABEL_24:
    v19 = (void *)llvm::sys::path::parent_path();
    if (sub_22F13C8C8(v30, v19, v20))
    {
      LOBYTE(v12) = 0;
      if (a8)
        *a8 = 0;
    }
  }
  v21 = v31;
  if (v34 < v31)
    v21 = v34;
  v22 = (const void *)(v33 + v21);
  v23 = v34 - v21;
  v24 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
  if (v24)
  {
    v25 = 0;
    v26 = v24 >> 4;
    while (1)
    {
      v27 = *(_QWORD *)(a1 + 56);
      if ((*(_BYTE *)(v27 + v25 + 8) & 0xC) == 8)
      {
        sub_22F137448(*(char **)(v27 + v25), v22, v23);
        if (v28)
          break;
      }
      v25 += 16;
      if (!--v26)
        goto LABEL_34;
    }
    v38 = v40;
    v39 = xmmword_22F44E310;
    v35 = v37;
    v36 = xmmword_22F44E310;
  }
  else
  {
LABEL_34:
    v38 = v40;
    v39 = xmmword_22F44E310;
    v35 = v37;
    v36 = xmmword_22F44E310;
    if ((v12 & 1) != 0)
      sub_22F13CC18((uint64_t)v22, v23, &v29, &v38, &v35);
  }
  llvm::sys::path::convert_to_slash();
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
}

uint64_t sub_22F13C8C8(_QWORD *a1, void *__src, size_t __n)
{
  unint64_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int *v15;
  _BYTE *__s2;
  unint64_t v17;
  _BYTE *v18;
  size_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  if (__n < 0x21)
  {
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  if (__n)
LABEL_3:
    memcpy(v20, __src, __n);
LABEL_4:
  if (*(_QWORD *)(*a1 + 8) && (llvm::sys::path::is_absolute() & 1) == 0)
    llvm::sys::fs::make_absolute();
  llvm::sys::path::remove_dots();
  llvm::sys::path::begin();
  llvm::sys::path::end();
  llvm::sys::path::begin();
  llvm::sys::path::end();
  while (1)
  {
    while ((llvm::sys::path::const_iterator::operator==() & 1) == 0 && v19 == 1 && *v18 == 46)
      llvm::sys::path::const_iterator::operator++();
    if ((llvm::sys::path::const_iterator::operator==() & 1) != 0)
      return 0;
    while ((llvm::sys::path::const_iterator::operator==() & 1) == 0 && v17 == 1 && *__s2 == 46)
      llvm::sys::path::const_iterator::operator++();
    if (llvm::sys::path::const_iterator::operator==())
      break;
    v6 = v19;
    if (v19 == 1)
    {
      if (v17 == 1
        && llvm::sys::path::is_separator((llvm::sys::path *)(char)*v18)
        && (llvm::sys::path::is_separator((llvm::sys::path *)(char)*__s2) & 1) != 0)
      {
        goto LABEL_33;
      }
      v6 = 1;
    }
    if (v6 < 4
      || *(_DWORD *)&v18[v6 - 4] != 1801745198
      || v17 < 4
      || *(_DWORD *)&__s2[v17 - 4] != 1801745198
      || (v7 = (const void *)llvm::sys::path::stem(), v9 = v8, v10 = (const void *)llvm::sys::path::stem(), v11 < v9)
      || v9 && memcmp(v10, v7, v9))
    {
      if (v19 != v17 || v19 && memcmp(v18, __s2, v19))
        return 0;
    }
LABEL_33:
    llvm::sys::path::const_iterator::operator++();
    llvm::sys::path::const_iterator::operator++();
  }
  llvm::sys::path::begin();
  v14 = llvm::sys::path::const_iterator::operator-();
  v12 = 0;
  v15 = (unsigned int *)a1[2];
  if (*v15 < v14)
  {
    *v15 = v14;
    return 1;
  }
  return v12;
}

BOOL sub_22F13CC18(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4, _QWORD *a5)
{
  int v8;
  BOOL v9;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  size_t v22;

  llvm::sys::path::begin();
  llvm::sys::path::end();
  *a3 = 0;
  v8 = 0;
  if ((llvm::sys::path::const_iterator::operator==() & 1) == 0)
  {
    v8 = 0;
    while (v22 != 14)
    {
      if (v22 != 7)
      {
        if (v22 < 0xA)
          goto LABEL_28;
        goto LABEL_24;
      }
      if (*v21 == 1684104520 && *(_DWORD *)((char *)v21 + 3) == 1936876900)
      {
        ++v8;
        goto LABEL_44;
      }
LABEL_28:
      if (v8 >= 2)
      {
        v14 = a5[1];
        if ((unint64_t)(v14 + 1) > a5[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v14 = a5[1];
        }
        *(_BYTE *)(*a5 + v14) = 47;
        v15 = a5[2];
        v16 = a5[1] + 1;
        a5[1] = v16;
        if (v15 < v22 + v16)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v16 = a5[1];
          if (v22)
          {
LABEL_33:
            memcpy((void *)(*a5 + v16), v21, v22);
            v16 = a5[1];
          }
        }
        else if (v22)
        {
          goto LABEL_33;
        }
        a5[1] = v16 + v22;
      }
LABEL_44:
      llvm::sys::path::const_iterator::operator++();
      if (llvm::sys::path::const_iterator::operator==())
        goto LABEL_2;
    }
    if (*(_QWORD *)v21 == 0x4865746176697250 && *(_QWORD *)((char *)v21 + 6) == 0x7372656461654865)
    {
      ++v8;
      *a3 = 1;
      goto LABEL_44;
    }
LABEL_24:
    if (*(_QWORD *)((char *)v21 + v22 - 10) == 0x6F77656D6172662ELL && *(_WORD *)((char *)v21 + v22 - 2) == 27506)
    {
      if (v22 >= v22 - 10)
        v17 = v22 - 10;
      else
        v17 = v22;
      a4[1] = 0;
      if (a4[2] < v17)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v18 = a4[1];
LABEL_40:
        memcpy((void *)(*a4 + v18), v21, v17);
        v20 = 0;
        a4[1] += v17;
        a5[1] = 0;
        if (a5[2] < v17)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v20 = a5[1];
        }
        memcpy((void *)(*a5 + v20), v21, v17);
        v19 = a5[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
        if (v17)
          goto LABEL_40;
      }
      a5[1] = v19 + v17;
      v8 = 1;
      goto LABEL_44;
    }
    goto LABEL_28;
  }
LABEL_2:
  if (a4[1])
    v9 = v8 <= 1;
  else
    v9 = 1;
  return !v9;
}

void sub_22F13CEE8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *sub_22F13CF94(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v8;
  int v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v4 = (a2 - 1) >> 6;
    v5 = operator new(8 * (v4 + 1));
    a1[1] = a2;
    a1[2] = v4 + 1;
    *a1 = v5;
    if (a2 >= 0x41)
      v6 = (a2 - 1) >> 6;
    else
      v6 = 0;
    v5[v6] = 0;
    v8 = v5;
    v9 = 0;
    sub_22F13CEE8((uint64_t)&v8, a2);
  }
  return a1;
}

unint64_t sub_22F13D018(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unint64_t v18[7];
  _QWORD __src[7];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E72796C();
  if (a1 == a2)
  {
    v6 = 0;
    return sub_22E3D0FB4(__src, v6, v4);
  }
  else
  {
    for (i = 0; i != 64; ++i)
    {
      v6 = i + 1;
      *((_BYTE *)__src + i) = *(_BYTE *)(a1 + i);
      v7 = a1 + i + 1;
      if (v7 == a2)
        return sub_22E3D0FB4(__src, v6, v4);
    }
    sub_22F02C49C(__src, v4, v18);
    v8 = a1 + 64;
    if (a1 + 64 == a2)
    {
      v9 = 64;
    }
    else
    {
      v9 = 64;
      do
      {
        v10 = -1;
        do
        {
          v11 = v8 + v10;
          v12 = (char *)__src + v10++;
          v12[1] = *(_BYTE *)(v11 + 1);
          v13 = v11 + 2;
        }
        while (v11 + 2 != a2 && v10 < 0x3F);
        v14 = v10 + 1;
        if (((v10 + 1) & 0x7FFFFFFFFFFFFFBFLL) != 0)
        {
          if (v10 == 62)
          {
            v15 = v20;
            memmove((char *)__src + 1, __src, 0x3FuLL);
            LOBYTE(__src[0]) = v15;
          }
          else if (v10)
          {
            sub_22E54F510(__src, (_BYTE *)__src + v14, &v21);
          }
          else
          {
            v17 = __src[0];
            memmove(__src, (char *)__src + 1, 0x3FuLL);
            v20 = v17;
          }
        }
        v8 += v14;
        sub_22F02C5C4(v18, __src);
        v9 += v10 + 1;
      }
      while (v13 != a2);
    }
    return sub_22F02C6E4(v18, v9);
  }
}

uint64_t *sub_22F13D1D0(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v13 = i[1];
        ++i;
        v7 = v13;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v8 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 49, 3);
  v9 = v8;
  v10 = v8 + 48;
  if (a3)
    memcpy((void *)(v8 + 48), a2, a3);
  *(_BYTE *)(v10 + a3) = 0;
  *(_QWORD *)v9 = a3;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_QWORD *)(v9 + 40) = 0;
  *i = v9;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F13D2D4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 96 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 96 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_22F13D36C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 96 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F410460(a1, v4, &v4[12 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(96 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 96 * v10;
      do
      {
        *result = -4096;
        result += 12;
        v11 -= 96;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F13D438(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void **v30;
  void **v31;
  void **v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0x6F96F96F96F96F97 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[312 * a2];
      do
      {
        *(_WORD *)v4 &= 0xF800u;
        *(_QWORD *)(v4 + 4) = 0;
        *(_QWORD *)(v4 + 20) = 0;
        *(_QWORD *)(v4 + 12) = 0;
        *((_DWORD *)v4 + 7) = 0;
        *((_QWORD *)v4 + 4) = v4 + 48;
        *((_QWORD *)v4 + 5) = 0x200000000;
        *((_QWORD *)v4 + 21) = 0;
        *((_QWORD *)v4 + 20) = v4 + 168;
        *((_QWORD *)v4 + 22) = 0;
        *((_QWORD *)v4 + 23) = v4 + 200;
        *((_QWORD *)v4 + 24) = 0x200000000;
        v4 += 312;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x6F96F96F96F96F97 * ((v4 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xD20D20D20D20D2)
      abort();
    v8 = 0x6F96F96F96F96F97 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x69069069069069)
      v9 = 0xD20D20D20D20D2;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xD20D20D20D20D2)
        sub_22E3B3F8C();
      v10 = (char *)operator new(312 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[312 * v6];
    v13 = &v12[312 * a2];
    v14 = 0x200000000;
    v15 = v12;
    do
    {
      *(_WORD *)v15 &= 0xF800u;
      *(_QWORD *)(v15 + 4) = 0;
      *(_QWORD *)(v15 + 20) = 0;
      *(_QWORD *)(v15 + 12) = 0;
      *((_DWORD *)v15 + 7) = 0;
      *((_QWORD *)v15 + 4) = v15 + 48;
      *((_QWORD *)v15 + 5) = 0x200000000;
      *((_QWORD *)v15 + 21) = 0;
      *((_QWORD *)v15 + 20) = v15 + 168;
      *((_QWORD *)v15 + 22) = 0;
      *((_QWORD *)v15 + 23) = v15 + 200;
      *((_QWORD *)v15 + 24) = 0x200000000;
      v15 += 312;
    }
    while (v15 != v13);
    v16 = &v10[312 * v9];
    v17 = (char *)*a1;
    v18 = (void **)a1[1];
    if (v18 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v16;
      if (v18)
LABEL_34:
        operator delete(v18);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v12[v19];
        v21 = &v12[v19 - 312];
        v22 = (char *)v18 + v19;
        v23 = *(_OWORD *)((char *)v18 + v19 - 296);
        *(_OWORD *)v21 = *(_OWORD *)((char *)v18 + v19 - 312);
        *((_OWORD *)v21 + 1) = v23;
        v24 = &v12[v19 - 280];
        *(_QWORD *)v24 = &v12[v19 - 264];
        *(_QWORD *)&v12[v19 - 272] = v14;
        if (*(_DWORD *)((char *)v18 + v19 - 272))
        {
          v39 = v16;
          v41 = v12;
          v35 = v14;
          v33 = &v12[v19];
          v34 = v17;
          v37 = v19;
          sub_22E791B70((uint64_t)v24, (uint64_t)(v22 - 280));
          v20 = v33;
          v17 = v34;
          v19 = v37;
          v16 = v39;
          v14 = v35;
          v12 = v41;
        }
        *((_QWORD *)v20 - 19) = *((_QWORD *)v22 - 19);
        v25 = v22 - 144;
        v26 = *((_QWORD *)v22 - 18);
        *((_QWORD *)v20 - 18) = v26;
        v27 = v20 - 144;
        v28 = *((_QWORD *)v22 - 17);
        *((_QWORD *)v20 - 17) = v28;
        if (v28)
        {
          *(_QWORD *)(v26 + 16) = v27;
          *((_QWORD *)v22 - 19) = v25;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v22 - 17) = 0;
        }
        else
        {
          *((_QWORD *)v20 - 19) = v27;
        }
        *(_QWORD *)&v12[v19 - 128] = &v12[v19 - 112];
        *(_QWORD *)&v12[v19 - 120] = v14;
        if (*(_DWORD *)((char *)v18 + v19 - 120))
        {
          v40 = v16;
          v42 = v12;
          v36 = v14;
          v29 = v17;
          v38 = v19;
          sub_22E791B70((uint64_t)&v12[v19 - 128], (uint64_t)v18 + v19 - 128);
          v19 = v38;
          v16 = v40;
          v17 = v29;
          v14 = v36;
          v12 = v42;
        }
        v19 -= 312;
      }
      while ((char *)v18 + v19 != v17);
      v18 = (void **)*a1;
      v30 = (void **)a1[1];
      *a1 = &v12[v19];
      a1[1] = v13;
      a1[2] = v16;
      if (v30 != v18)
      {
        v31 = v30 - 16;
        do
        {
          sub_22E6C6A2C(v31);
          sub_22E6C6AB4((uint64_t)(v31 - 3), *(v31 - 2));
          sub_22E6C6A2C(v31 - 19);
          v32 = v31 - 23;
          v31 -= 39;
        }
        while (v32 != v18);
      }
      if (v18)
        goto LABEL_34;
    }
  }
}

uint64_t sub_22F13D768(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_22F13D804(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F410794(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F13D8C4(_QWORD *a1, uint64_t a2, _QWORD *a3, llvm *a4)
{
  unsigned int v4;
  char v5;
  BOOL v6;
  _BYTE *v7;
  size_t v8;
  size_t v9;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  const void *v33;
  size_t v34;
  size_t v35;
  unsigned __int8 v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t n128_u64;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  __n128 *v49;
  char *v50;
  __int128 v51;
  __n128 v52;
  const void *v53;
  uint64_t v54;
  const void *v55;
  char v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  __n128 *v67;
  __n128 *v68;
  __n128 *v69;
  int64_t v70;
  uint64_t v71;
  char *v72;
  __n128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  __n128 v78;
  __n128 *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  __n128 *v85;
  __n128 *v86;
  __n128 v87;
  _OWORD *v88;
  _OWORD *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  __int128 v99;
  char *v100;
  char *v101;
  __int128 v102;
  char *v103;
  char *v104;
  _OWORD *v105;
  _OWORD *v106;
  char *v107;
  int v108;
  uint64_t v109;
  BOOL v110;
  BOOL v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  __int128 v117;
  char *v118;
  char *v119;
  __int128 v120;
  char *v121;
  _OWORD *v122;
  _OWORD *v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  __int128 v130;
  char *v131;
  char *v132;
  __int128 v133;
  int v134;
  _BYTE *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  int v155;
  unint64_t v156;
  _QWORD *v157;
  const std::string *v158;
  __int128 *v159;
  uint64_t v160;
  unint64_t v161;
  void **v162;
  std::string *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void **v167;
  __int128 v168;
  uint64_t j;
  unint64_t v170;
  unsigned int v171;
  unsigned int *v172;
  uint64_t v173;
  _DWORD *v174;
  int v175;
  BOOL v176;
  unsigned int v177;
  _DWORD *v178;
  _DWORD *v179;
  std::string *v180;
  int64_t v181;
  unint64_t v182;
  uint64_t v183;
  std::string *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 *v187;
  __int128 v188;
  std::string *v189;
  llvm *v190;
  unint64_t v191;
  BOOL v192;
  llvm::raw_ostream *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  llvm::raw_ostream *v199;
  void *v200;
  _BYTE *v201;
  llvm *v202;
  llvm *v203;
  size_t v204;
  size_t v205;
  const char *v206;
  const char *v207;
  llvm::raw_ostream *v208;
  llvm::raw_ostream *v209;
  _BYTE *v210;
  _BYTE *v211;
  llvm::raw_ostream *v212;
  llvm::raw_ostream *v213;
  uint64_t v214;
  int v215;
  __n128 *v216;
  __n128 *v218;
  unint64_t v219;
  BOOL v220;
  BOOL v221;
  _BOOL4 v222;
  __n128 *v224;
  __n128 v225;
  size_t v226;
  unint64_t v227;
  BOOL v228;
  void *v231;
  __n128 *v232;
  __n128 *v233;
  __n128 *v234;
  int64_t v235;
  __n128 *v236;
  __n128 v237;
  unint64_t v238;
  BOOL v239;
  BOOL v240;
  _BOOL4 v241;
  unint64_t v243;
  int64_t v244;
  unint64_t v245;
  char *v246;
  const char *v247;
  unsigned int v248;
  __int16 v249;
  uint64_t v250;
  char v251;
  const void *v252;
  size_t v253;
  size_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t *v257;
  const char *v258;
  char *v259;
  const void *v260;
  uint64_t v261;
  const void *v262;
  char v263;
  const void *v264;
  size_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t *v268;
  size_t v269;
  const void *v270;
  __n128 *p_dst;
  uint64_t v272;
  char v273;
  const void *v274;
  size_t v275;
  size_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  llvm::raw_ostream *v280;
  void *v281;
  __n128 *v282;
  unint64_t v283;
  __n128 *v285;
  unint64_t v286;
  BOOL v287;
  __n128 *v289;
  __n128 *v290;
  __n128 *v291;
  __n128 v292;
  __n128 v293;
  _BOOL8 v295;
  __n128 *v296;
  __n128 v297;
  uint64_t v298;
  __n128 *v299;
  char *v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  __n128 v305;
  __n128 *v306;
  __n128 *v307;
  __n128 *v308;
  __n128 v309;
  __n128 *v310;
  char *v311;
  llvm::raw_ostream *v312;
  void *v313;
  __n128 *i;
  unint64_t v315;
  BOOL v316;
  BOOL v317;
  _BOOL4 v318;
  __n128 v320;
  unint64_t v321;
  unint64_t v322;
  size_t v323;
  __n128 *v324;
  void **v325;
  size_t v326;
  __n128 *v327;
  void **v328;
  int v329;
  __n128 v330;
  uint64_t v333;
  uint64_t v334;
  unint64_t v336;
  void *v337[2];
  _OWORD v338[2];
  _QWORD *v339;
  BOOL v340;
  void *v341[2];
  unint64_t v342;
  char v343;
  BOOL v344;
  void *v345[2];
  int64_t v346;
  __int16 v347;
  _QWORD v348[4];
  __int16 v349;
  llvm *v350[2];
  const char *v351;
  uint64_t v352;
  __int16 v353;
  __n128 __p[2];
  char *v355;
  __n128 __dst;
  int64_t v357;
  __int16 v358;
  uint64_t v359;

  v359 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a2 + 848);
  v5 = *(_BYTE *)(a2 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  v8 = v5 & 0x7F;
  if (v6)
    v9 = *(_QWORD *)(a2 + 8);
  else
    v9 = v8;
  *(_OWORD *)v337 = 0u;
  memset(v338, 0, sizeof(v338));
  v339 = a1;
  v340 = (v4 & 0x20) != 0;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_602;
  v11 = a2;
  v12 = (v4 >> 2) & 1;
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    v17 = v15 | 0x8000000000000000;
    v11 = a2;
    v341[1] = (void *)v9;
    v342 = v17;
    v341[0] = v16;
    memmove(v16, v7, v9);
    *((_BYTE *)v16 + v9) = 0;
    v343 = v12;
    v13 = 1;
  }
  else
  {
    HIBYTE(v342) = v9;
    if (v9)
    {
      memmove(v341, v7, v9);
      *((_BYTE *)v341 + v9) = 0;
      v343 = v12;
      v13 = v9 != 1 || *v7 != 47;
      v11 = a2;
    }
    else
    {
      v13 = 0;
      LOBYTE(v341[0]) = 0;
      v343 = v12;
    }
  }
  v344 = v13;
  v18 = *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24);
  if ((v18 & 0x1FFFFFFFE0) != 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = (v18 >> 5);
    do
    {
      v22 = *(_QWORD *)(v11 + 24) + v19;
      v23 = v20 | 0x100000000;
      if ((*(_BYTE *)(v22 + 28) & 2) != 0)
      {
        LOWORD(v355) = 260;
        __p[0].n128_u64[0] = v22;
        sub_22F13FE50((uint64_t)v337, (uint64_t)__p, *(_DWORD *)(v22 + 24), *(_BYTE *)(v22 + 28) & 1, v23);
      }
      else
      {
        LOWORD(v355) = 260;
        __p[0].n128_u64[0] = v22;
        sub_22F1403CC((uint64_t)v337, (void ***)__p, *(_DWORD *)(v22 + 24), *(_BYTE *)(v22 + 28) & 1, v23);
      }
      ++v20;
      v19 += 32;
    }
    while (v21 != v20);
  }
  v24 = *((_DWORD *)a4 + 9);
  switch(v24)
  {
    case 0:
      if ((*((_DWORD *)a4 + 6) - 63) >= 2)
        goto LABEL_334;
      goto LABEL_31;
    case 3:
    case 7:
    case 11:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      if ((*(_WORD *)(v11 + 848) & 2) != 0)
      {
        if (v24 == 31)
        {
          __p[0].n128_u64[0] = (unint64_t)"/System/DriverKit/System/Library/Frameworks";
        }
        else
        {
          __p[0].n128_u64[0] = (unint64_t)"/System/Library/Frameworks";
          LOWORD(v355) = 259;
          sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 1, 0);
          __p[0].n128_u64[0] = (unint64_t)"/Library/Frameworks";
        }
        LOWORD(v355) = 259;
        v25 = 3;
        v26 = 1;
LABEL_30:
        sub_22F1403CC((uint64_t)v337, (void ***)__p, v25, v26, 0);
      }
      goto LABEL_31;
    case 9:
    case 13:
    case 14:
    case 21:
    case 38:
    case 39:
    case 40:
      goto LABEL_31;
    case 15:
      if (*((_DWORD *)a4 + 10) == 18 && *((_DWORD *)a4 + 11) != 5)
        goto LABEL_334;
      goto LABEL_31;
    default:
LABEL_334:
      if ((*a3 & 0x40000100) != 0x100)
        goto LABEL_423;
      v215 = *(unsigned __int16 *)(v11 + 848);
      if ((~v215 & 0xA) != 0)
        goto LABEL_423;
      if ((v215 & 0x10) != 0)
      {
        v247 = "/usr/include/c++/v1";
LABEL_421:
        __p[0].n128_u64[0] = (unint64_t)v247;
        LOWORD(v355) = 259;
LABEL_422:
        sub_22F1403CC((uint64_t)v337, (void ***)__p, 6u, 0, 0);
        goto LABEL_423;
      }
      switch(v24)
      {
        case 4:
          v247 = "/usr/include/c++/5.0";
          goto LABEL_421;
        case 18:
          LOWORD(v355) = 261;
          __p[0].n128_u64[0] = (unint64_t)"/usr/gnu/include/c++/4.4.3";
          __p[0].n128_u64[1] = 26;
          sub_22F1403CC((uint64_t)v337, (void ***)__p, 6u, 0, 0);
          v349 = 773;
          v348[0] = "/usr/gnu/include/c++/4.4.3";
          v348[1] = 26;
          v348[2] = "/";
          v350[0] = (llvm *)v348;
          v351 = "";
          v352 = 0;
          v353 = 1282;
          __dst.n128_u64[0] = (unint64_t)v350;
          v357 = (int64_t)"/";
          v358 = 770;
          __p[0].n128_u64[0] = (unint64_t)&__dst;
          __p[1].n128_u64[0] = (unint64_t)"";
          __p[1].n128_u64[1] = 0;
          LOWORD(v355) = 1282;
          sub_22F1403CC((uint64_t)v337, (void ***)__p, 6u, 0, 0);
          LOWORD(v355) = 773;
          __p[0].n128_u64[0] = (unint64_t)"/usr/gnu/include/c++/4.4.3";
          __p[0].n128_u64[1] = 26;
          __p[1].n128_u64[0] = (unint64_t)"/backward";
          goto LABEL_422;
        case 15:
          sub_22F1405B4((uint64_t)v337, "4.7.3", 5);
          sub_22F1405B4((uint64_t)v337, "4.5.3", 5);
          sub_22F1405B4((uint64_t)v337, "4.3.4", 5);
          sub_22F1405B4((uint64_t)v337, "4.3.2", 5);
          break;
      }
LABEL_423:
      v248 = *((_DWORD *)a4 + 9);
      v249 = *(_WORD *)(v11 + 848);
      if ((v249 & 2) != 0
        && (v248 > 0x1B || ((1 << v248) & 0xE103064) == 0 && (v248 != 15 || *((_DWORD *)a4 + 10) == 18)))
      {
        __p[0].n128_u64[0] = (unint64_t)"/usr/local/include";
        LOWORD(v355) = 259;
        sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
        v249 = *(_WORD *)(v11 + 848);
      }
      if ((v249 & 1) != 0)
      {
        v250 = v11 + 72;
        v251 = *(_BYTE *)(v11 + 95);
        if (v251 >= 0)
          v252 = (const void *)(v11 + 72);
        else
          v252 = *(const void **)(v11 + 72);
        v253 = *(_QWORD *)(v250 + 8);
        if (v251 >= 0)
          v254 = v251 & 0x7F;
        else
          v254 = v253;
        __p[0].n128_u64[0] = (unint64_t)&__p[1].n128_u64[1];
        *(__n128 *)((char *)__p + 8) = (__n128)xmmword_22F44E310;
        if (v254 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v255 = __p[0].n128_u64[1];
          v257 = (unint64_t *)__p[0].n128_u64[0];
        }
        else
        {
          v255 = 0;
          v256 = 0;
          v257 = &__p[1].n128_u64[1];
          if (!v254)
          {
LABEL_436:
            __p[0].n128_u64[1] = v256 + v254;
            __dst.n128_u64[0] = (unint64_t)"include";
            v358 = 259;
            v353 = 257;
            v349 = 257;
            v347 = 257;
            llvm::sys::path::append();
            v358 = 261;
            __dst = __p[0];
            sub_22F13FE50((uint64_t)v337, (uint64_t)&__dst, 4u, 0, 0);
            if ((__int8 *)__p[0].n128_u64[0] != &__p[1].n128_i8[8])
              free((void *)__p[0].n128_u64[0]);
            v11 = a2;
            v249 = *(_WORD *)(a2 + 848);
            goto LABEL_439;
          }
        }
        memcpy((char *)v257 + v255, v252, v254);
        v256 = __p[0].n128_u64[1];
        goto LABEL_436;
      }
LABEL_439:
      if ((v249 & 2) != 0)
      {
        switch(v248)
        {
          case 0xFu:
            if (*((_DWORD *)a4 + 10) != 18)
              goto LABEL_526;
            __p[0].n128_u64[0] = (unint64_t)"/usr/include/w32api";
            LOWORD(v355) = 259;
LABEL_525:
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            goto LABEL_526;
          case 0x10u:
          case 0x12u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
            goto LABEL_526;
          case 0x11u:
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/non-packaged/develop/headers";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/app";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/arch";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/device";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/drivers";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/game";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/interface";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/kernel";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/locale";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/mail";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/media";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/midi";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/midi2";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/net";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/opengl";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/storage";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/support";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/translation";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/add-ons/graphics";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/add-ons/input_server";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/add-ons/mail_daemon";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/add-ons/registrar";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/add-ons/screen_saver";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/add-ons/tracker";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/be_apps/Deskbar";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/be_apps/NetPositive";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/os/be_apps/Tracker";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/3rdparty";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/bsd";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/glibc";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers/posix";
            LOWORD(v355) = 259;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            __p[0].n128_u64[0] = (unint64_t)"/boot/system/develop/headers";
            LOWORD(v355) = 259;
            goto LABEL_525;
          case 0x13u:
          case 0x14u:
          case 0x1Bu:
            break;
          case 0x19u:
          case 0x1Au:
            v345[0] = 0;
            v345[1] = 0;
            v346 = 0;
            if (v344)
              goto LABEL_573;
            if (v248 == 25)
              v258 = "SCE_ORBIS_SDK_DIR";
            else
              v258 = "SCE_PROSPERO_SDK_DIR";
            v259 = getenv(v258);
            if (v259)
            {
              MEMORY[0x2348A0C14](v345, v259);
              goto LABEL_573;
            }
            v262 = *(const void **)(v11 + 72);
            v261 = v11 + 72;
            v260 = v262;
            v263 = *(_BYTE *)(v261 + 23);
            if (v263 >= 0)
              v264 = (const void *)v261;
            else
              v264 = v260;
            if (v263 >= 0)
              v265 = v263 & 0x7F;
            else
              v265 = *(_QWORD *)(v261 + 8);
            __p[0].n128_u64[0] = (unint64_t)&__p[1].n128_u64[1];
            *(__n128 *)((char *)__p + 8) = (__n128)xmmword_22F44E310;
            if (v265 >= 0x81)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v266 = __p[0].n128_u64[1];
              v268 = (unint64_t *)__p[0].n128_u64[0];
            }
            else
            {
              v266 = 0;
              v267 = 0;
              v268 = &__p[1].n128_u64[1];
              if (!v265)
                goto LABEL_455;
            }
            memcpy((char *)v268 + v266, v264, v265);
            v267 = __p[0].n128_u64[1];
LABEL_455:
            __p[0].n128_u64[1] = v267 + v265;
            __dst.n128_u64[0] = (unint64_t)"../../..";
            v358 = 259;
            v353 = 257;
            v349 = 257;
            v347 = 257;
            llvm::sys::path::append();
            v269 = __p[0].n128_u64[1];
            if (__p[0].n128_u64[1] > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_602;
            v270 = (const void *)__p[0].n128_u64[0];
            if (__p[0].n128_u64[1] >= 0x17)
            {
              v321 = (__p[0].n128_u64[1] & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__p[0].n128_u64[1] | 7) != 0x17)
                v321 = __p[0].n128_u64[1] | 7;
              v322 = v321 + 1;
              p_dst = (__n128 *)operator new(v321 + 1);
              __dst.n128_u64[1] = v269;
              v357 = v322 | 0x8000000000000000;
              __dst.n128_u64[0] = (unint64_t)p_dst;
            }
            else
            {
              HIBYTE(v357) = __p[0].n128_u8[8];
              p_dst = &__dst;
              if (!__p[0].n128_u64[1])
                goto LABEL_569;
            }
            memmove(p_dst, v270, v269);
LABEL_569:
            p_dst->n128_u8[v269] = 0;
            if (SHIBYTE(v346) < 0)
              operator delete(v345[0]);
            *(__n128 *)v345 = __dst;
            v346 = v357;
            v11 = a2;
            if ((__int8 *)__p[0].n128_u64[0] != &__p[1].n128_i8[8])
              free((void *)__p[0].n128_u64[0]);
LABEL_573:
            if (v346 >= 0)
              v323 = HIBYTE(v346) & 0x7F;
            else
              v323 = (size_t)v345[1];
            sub_22E3B8BF4((uint64_t)&__dst, v323 + 15);
            if (v357 >= 0)
              v324 = &__dst;
            else
              v324 = (__n128 *)__dst.n128_u64[0];
            if (v323)
            {
              if (v346 >= 0)
                v325 = v345;
              else
                v325 = (void **)v345[0];
              memmove(v324, v325, v323);
            }
            strcpy((char *)v324 + v323, "/target/include");
            LOWORD(v355) = 260;
            __p[0].n128_u64[0] = (unint64_t)&__dst;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            if (SHIBYTE(v357) < 0)
              operator delete((void *)__dst.n128_u64[0]);
            if (v346 >= 0)
              v326 = HIBYTE(v346) & 0x7F;
            else
              v326 = (size_t)v345[1];
            sub_22E3B8BF4((uint64_t)&__dst, v326 + 22);
            if (v357 >= 0)
              v327 = &__dst;
            else
              v327 = (__n128 *)__dst.n128_u64[0];
            if (v326)
            {
              if (v346 >= 0)
                v328 = v345;
              else
                v328 = (void **)v345[0];
              memmove(v327, v328, v326);
            }
            strcpy((char *)v327 + v326, "/target/include_common");
            LOWORD(v355) = 260;
            __p[0].n128_u64[0] = (unint64_t)&__dst;
            sub_22F1403CC((uint64_t)v337, (void ***)__p, 3u, 0, 0);
            if (SHIBYTE(v357) < 0)
              operator delete((void *)__dst.n128_u64[0]);
            if (SHIBYTE(v346) < 0)
              operator delete(v345[0]);
            break;
          default:
            if (v248 == 6)
              break;
            if (v248 != 2)
            {
LABEL_526:
              __p[0].n128_u64[0] = (unint64_t)"/usr/include";
              LOWORD(v355) = 259;
              v25 = 4;
              v26 = 0;
              goto LABEL_30;
            }
            v272 = v11 + 72;
            v273 = *(_BYTE *)(v11 + 95);
            if (v273 >= 0)
              v274 = (const void *)(v11 + 72);
            else
              v274 = *(const void **)(v11 + 72);
            v275 = *(_QWORD *)(v272 + 8);
            if (v273 >= 0)
              v276 = v273 & 0x7F;
            else
              v276 = v275;
            __p[0].n128_u64[0] = (unint64_t)&__p[1].n128_u64[1];
            *(__n128 *)((char *)__p + 8) = (__n128)xmmword_22F44E310;
            if (v276 >= 0x81)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v277 = __p[0].n128_u64[1];
              v279 = (unint64_t *)__p[0].n128_u64[0];
            }
            else
            {
              v277 = 0;
              v278 = 0;
              v279 = &__p[1].n128_u64[1];
              if (!v276)
                goto LABEL_470;
            }
            memcpy((char *)v279 + v277, v274, v276);
            v278 = __p[0].n128_u64[1];
LABEL_470:
            __p[0].n128_u64[1] = v278 + v276;
            __dst.n128_u64[0] = (unint64_t)"../../..";
            v358 = 259;
            v353 = 260;
            v350[0] = a4;
            v348[0] = "include";
            v349 = 259;
            v347 = 257;
            llvm::sys::path::append();
            v358 = 261;
            __dst = __p[0];
            sub_22F1403CC((uint64_t)v337, (void ***)&__dst, 3u, 0, 0);
            if ((__int8 *)__p[0].n128_u64[0] != &__p[1].n128_i8[8])
              free((void *)__p[0].n128_u64[0]);
            v11 = a2;
            break;
        }
      }
LABEL_31:
      v27 = *(_QWORD *)(v11 + 56) - *(_QWORD *)(v11 + 48);
      if ((v27 & 0x1FFFFFFFE0) != 0)
      {
        v28 = 0;
        v29 = (v27 >> 5);
        while (1)
        {
          v30 = *(_QWORD *)(v11 + 48) + 32 * v28;
          v31 = *(_BYTE *)(v30 + 23);
          v32 = v31 < 0;
          if (v31 >= 0)
            v33 = (const void *)(*(_QWORD *)(v11 + 48) + 32 * v28);
          else
            v33 = *(const void **)v30;
          v34 = v31 & 0x7F;
          if (v32)
            v35 = *(_QWORD *)(v30 + 8);
          else
            v35 = v34;
          if (v35 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_602;
          v36 = *(_BYTE *)(v30 + 24);
          if (v35 >= 0x17)
            break;
          HIBYTE(v357) = v35;
          v37 = &__dst;
          if (v35)
            goto LABEL_46;
LABEL_47:
          v37->n128_u8[v35] = 0;
          v42 = *((_QWORD *)&v338[1] + 1);
          v41 = *(_QWORD *)&v338[1];
          if (*(_QWORD *)&v338[1] >= *((_QWORD *)&v338[1] + 1))
          {
            v44 = *((_QWORD *)&v338[0] + 1);
            v45 = (uint64_t)(*(_QWORD *)&v338[1] - *((_QWORD *)&v338[0] + 1)) >> 5;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 59)
              goto LABEL_602;
            if ((uint64_t)(*((_QWORD *)&v338[1] + 1) - *((_QWORD *)&v338[0] + 1)) >> 4 > v46)
              v46 = (uint64_t)(*((_QWORD *)&v338[1] + 1) - *((_QWORD *)&v338[0] + 1)) >> 4;
            if (*((_QWORD *)&v338[1] + 1) - *((_QWORD *)&v338[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
              v47 = 0x7FFFFFFFFFFFFFFLL;
            else
              v47 = v46;
            __p[1].n128_u64[1] = 0;
            v355 = (char *)&v338[1] + 8;
            if (v47 >> 59)
              goto LABEL_603;
            v48 = (char *)operator new(32 * v47);
            v49 = (__n128 *)&v48[32 * v45];
            *v49 = __dst;
            v49[1].n128_u64[0] = v357;
            v49[1].n128_u8[8] = v36;
            if (v41 == v44)
            {
              v52 = (__n128)vdupq_n_s64(v41);
              v50 = &v48[32 * v45];
            }
            else
            {
              v50 = &v48[32 * v45];
              do
              {
                v51 = *(_OWORD *)(v41 - 32);
                *((_QWORD *)v50 - 2) = *(_QWORD *)(v41 - 16);
                *((_OWORD *)v50 - 2) = v51;
                *(_QWORD *)(v41 - 24) = 0;
                *(_QWORD *)(v41 - 16) = 0;
                *(_QWORD *)(v41 - 32) = 0;
                *(v50 - 8) = *(_BYTE *)(v41 - 8);
                v50 -= 32;
                v41 -= 32;
              }
              while (v41 != v44);
              v52 = *(__n128 *)((char *)v338 + 8);
              v42 = *((_QWORD *)&v338[1] + 1);
            }
            n128_u64 = (unint64_t)v49[2].n128_u64;
            *((_QWORD *)&v338[0] + 1) = v50;
            *(_QWORD *)&v338[1] = v49 + 2;
            *(__n128 *)((char *)__p + 8) = v52;
            *((_QWORD *)&v338[1] + 1) = &v48[32 * v47];
            __p[1].n128_u64[1] = v42;
            __p[0].n128_u64[0] = v52.n128_u64[0];
            sub_22E3B3F98((uint64_t)__p);
            v11 = a2;
          }
          else
          {
            **(_OWORD **)&v338[1] = __dst;
            *(_QWORD *)(v41 + 16) = v357;
            *(_BYTE *)(v41 + 24) = v36;
            n128_u64 = v41 + 32;
          }
          *(_QWORD *)&v338[1] = n128_u64;
          if (++v28 == v29)
            goto LABEL_63;
        }
        v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17)
          v38 = v35 | 7;
        v39 = v38 + 1;
        v37 = (__n128 *)operator new(v38 + 1);
        v40 = v39 | 0x8000000000000000;
        v11 = a2;
        __dst.n128_u64[1] = v35;
        v357 = v40;
        __dst.n128_u64[0] = (unint64_t)v37;
LABEL_46:
        memmove(v37, v33, v35);
        goto LABEL_47;
      }
LABEL_63:
      if ((*(_WORD *)(v11 + 848) & 1) != 0)
      {
        v55 = *(const void **)(v11 + 72);
        v54 = v11 + 72;
        v53 = v55;
        v56 = *(_BYTE *)(v54 + 23);
        v57 = v56;
        if (v56 >= 0)
          v58 = (const void *)v54;
        else
          v58 = v53;
        v59 = v56 & 0x7F;
        if (v57 >= 0)
          v60 = v59;
        else
          v60 = *(_QWORD *)(v54 + 8);
        __p[0].n128_u64[0] = (unint64_t)&__p[1].n128_u64[1];
        *(__n128 *)((char *)__p + 8) = (__n128)xmmword_22F44E310;
        if (v60 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v61 = __p[0].n128_u64[1];
          v63 = (unint64_t *)__p[0].n128_u64[0];
          v64 = a1;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v63 = &__p[1].n128_u64[1];
          v64 = a1;
          if (!v60)
          {
LABEL_73:
            __p[0].n128_u64[1] = v62 + v60;
            __dst.n128_u64[0] = (unint64_t)"include";
            v358 = 259;
            v353 = 257;
            v349 = 257;
            v347 = 257;
            llvm::sys::path::append();
            sub_22F1D0728(v64[6], (char *)__p[0].n128_u64[0], __p[0].n128_u64[1], 1, (uint64_t)&__dst);
            if ((v357 & 1) == 0)
              v64[69] = __dst.n128_u64[0];
            if ((__int8 *)__p[0].n128_u64[0] != &__p[1].n128_i8[8])
              free((void *)__p[0].n128_u64[0]);
            goto LABEL_77;
          }
        }
        memcpy((char *)v63 + v61, v58, v60);
        v62 = __p[0].n128_u64[1];
        goto LABEL_73;
      }
LABEL_77:
      v65 = 0;
      v66 = 0;
      v67 = 0;
      __dst = 0uLL;
      v357 = 0;
      v68 = (__n128 *)v337[0];
      v69 = (__n128 *)v337[1];
      v70 = (char *)v337[1] - (char *)v337[0];
      if (v337[1] == v337[0])
        goto LABEL_114;
      if (v70 < 0)
        goto LABEL_602;
      v71 = v70 >> 5;
      v72 = (char *)operator new(v70);
      v66 = &v72[32 * v71];
      __dst.n128_u64[0] = (unint64_t)v72;
      __dst.n128_u64[1] = (unint64_t)v72;
      v357 = (int64_t)v66;
      if (v343)
      {
        while (1)
        {
          v82 = sub_22F40F380((uint64_t)&v68->n128_i64[1]);
          if (v83 >= 0xC
            && *(_QWORD *)(v82 + v83 - 12) == 0x636E692F7273752FLL
            && *(_DWORD *)(v82 + v83 - 4) == 1701082476)
          {
            break;
          }
          v68 += 2;
          if (v68 == v69)
          {
            v68 = v69;
            break;
          }
        }
        v86 = (__n128 *)v337[0];
        v85 = (__n128 *)v337[1];
        if (v337[0] == v337[1])
          goto LABEL_113;
        while (1)
        {
          v190 = (llvm *)sub_22F40F380((uint64_t)&v86->n128_i64[1]);
          if (v191 >= 0x13)
          {
            v192 = *(_QWORD *)((char *)v190 + v191 - 19) == 0x636E692F7273752FLL
                && *(_QWORD *)((char *)v190 + v191 - 11) == 0x2B2B632F6564756CLL;
            if (v192 && *(_QWORD *)((char *)v190 + v191 - 8) == 0x31762F2B2B632F65)
              break;
          }
          v86 += 2;
          if (v86 == v85)
          {
            v86 = v85;
            break;
          }
        }
        v216 = (__n128 *)v337[0];
        v69 = (__n128 *)v337[1];
        if (v68 == v337[1] || v86 == v337[1])
        {
          v68 = (__n128 *)v337[0];
          goto LABEL_80;
        }
        if (v337[0] == v337[1])
        {
          v218 = (__n128 *)v337[1];
        }
        else
        {
          while (1)
          {
            v190 = (llvm *)sub_22F40F380((uint64_t)&v216->n128_i64[1]);
            if (v219 >= 0x13)
            {
              v220 = *(_QWORD *)((char *)v190 + v219 - 19) == 0x636E692F7273752FLL
                  && *(_QWORD *)((char *)v190 + v219 - 11) == 0x2B2B632F6564756CLL;
              v221 = v220 && *(_QWORD *)((char *)v190 + v219 - 8) == 0x31762F2B2B632F65;
              v222 = !v221;
              if (!v222 && v216->n128_u32[0] == 3)
                break;
            }
            v216 += 2;
            if (v216 == v69)
            {
              v216 = v69;
              break;
            }
          }
          v218 = (__n128 *)v337[0];
          v224 = (__n128 *)v337[1];
          if (v216 == v337[1])
          {
            v69 = v216;
          }
          else
          {
            if (v337[0] == v337[1])
            {
LABEL_409:
              v218 = v224;
            }
            else
            {
              while (1)
              {
                v190 = (llvm *)sub_22F40F380((uint64_t)&v218->n128_i64[1]);
                if (v238 >= 0x13)
                {
                  v239 = *(_QWORD *)((char *)v190 + v238 - 19) == 0x636E692F7273752FLL
                      && *(_QWORD *)((char *)v190 + v238 - 11) == 0x2B2B632F6564756CLL;
                  v240 = v239 && *(_QWORD *)((char *)v190 + v238 - 8) == 0x31762F2B2B632F65;
                  v241 = !v240;
                  if (!v241 && v218->n128_u32[0] != 3)
                    break;
                }
                v218 += 2;
                if (v218 == v224)
                  goto LABEL_409;
              }
              for (i = v218 + 2; i != v224; i += 2)
              {
                v190 = (llvm *)sub_22F40F380((uint64_t)&i->n128_i64[1]);
                if (v315 >= 0x13)
                {
                  v316 = *(_QWORD *)((char *)v190 + v315 - 19) == 0x636E692F7273752FLL
                      && *(_QWORD *)((char *)v190 + v315 - 11) == 0x2B2B632F6564756CLL;
                  v317 = v316 && *(_QWORD *)((char *)v190 + v315 - 8) == 0x31762F2B2B632F65;
                  v318 = !v317;
                  if (!v318 && i->n128_u32[0] != 3)
                    continue;
                }
                v320 = i[1];
                *v218 = *i;
                v218[1] = v320;
                v218 += 2;
              }
            }
            if (v218 == v337[1])
            {
              v69 = v218;
              v218 = (__n128 *)v337[0];
            }
            else
            {
              v337[1] = v218;
              if (v340)
              {
                v280 = (llvm::raw_ostream *)llvm::errs(v190);
                v281 = (void *)*((_QWORD *)v280 + 4);
                if (*((_QWORD *)v280 + 3) - (_QWORD)v281 > 0x21uLL)
                {
                  qmemcpy(v281, "removed duplicate -I C++ includes\n", 34);
                  *((_QWORD *)v280 + 4) += 34;
                }
                else
                {
                  llvm::raw_ostream::write(v280, "removed duplicate -I C++ includes\n");
                }
              }
              v68 = (__n128 *)v337[0];
              v282 = (__n128 *)v337[1];
              if (v337[0] == v337[1])
                goto LABEL_113;
              while (1)
              {
                v190 = (llvm *)sub_22F40F380((uint64_t)&v68->n128_i64[1]);
                if (v283 >= 0xC
                  && *(_QWORD *)((char *)v190 + v283 - 12) == 0x636E692F7273752FLL
                  && *(_DWORD *)((char *)v190 + v283 - 4) == 1701082476)
                {
                  break;
                }
                v68 += 2;
                if (v68 == v282)
                {
                  v68 = v282;
                  break;
                }
              }
              v69 = (__n128 *)v337[0];
              v285 = (__n128 *)v337[1];
              if (v337[0] == v337[1])
              {
                v218 = (__n128 *)v337[0];
                v86 = (__n128 *)v337[0];
              }
              else
              {
                while (1)
                {
                  v190 = (llvm *)sub_22F40F380((uint64_t)&v69->n128_i64[1]);
                  if (v286 >= 0x13)
                  {
                    v287 = *(_QWORD *)((char *)v190 + v286 - 19) == 0x636E692F7273752FLL
                        && *(_QWORD *)((char *)v190 + v286 - 11) == 0x2B2B632F6564756CLL;
                    if (v287 && *(_QWORD *)((char *)v190 + v286 - 8) == 0x31762F2B2B632F65)
                      break;
                  }
                  v69 += 2;
                  if (v69 == v285)
                  {
                    v69 = v285;
                    break;
                  }
                }
                v86 = v69;
                v218 = (__n128 *)v337[0];
                v69 = (__n128 *)v337[1];
              }
            }
          }
        }
        if (v68 >= v86)
        {
          v68 = v218;
          goto LABEL_80;
        }
        v225 = v68[1];
        __p[0] = *v68;
        __p[1] = v225;
        v226 = (char *)v69 - (char *)&v68[2];
        if (v226)
        {
          v190 = (llvm *)memmove(v68, &v68[2], v226);
          v218 = (__n128 *)v337[0];
        }
        v337[1] = (char *)v68 + v226;
        if (v218 != (__n128 *)((char *)v68 + v226))
        {
          while (1)
          {
            v190 = (llvm *)sub_22F40F380((uint64_t)&v218->n128_i64[1]);
            if (v227 >= 0x13)
            {
              v228 = *(_QWORD *)((char *)v190 + v227 - 19) == 0x636E692F7273752FLL
                  && *(_QWORD *)((char *)v190 + v227 - 11) == 0x2B2B632F6564756CLL;
              if (v228 && *(_QWORD *)((char *)v190 + v227 - 8) == 0x31762F2B2B632F65)
                break;
            }
            v218 += 2;
            if (v218 == (__n128 *)((char *)v68 + v226))
            {
              v218 = (__n128 *)((char *)v68 + v226);
              break;
            }
          }
        }
        if (__p[0].n128_u32[0] <= 1 && v218->n128_u32[0] >= 2)
        {
          __p[0].n128_u32[0] = 3;
          v190 = (llvm *)llvm::errs(v190);
          v231 = (void *)*((_QWORD *)v190 + 4);
          if (*((_QWORD *)v190 + 3) - (_QWORD)v231 > 0x24uLL)
          {
            qmemcpy(v231, "changed -I to -isystem for C include\n", 37);
            *((_QWORD *)v190 + 4) += 37;
          }
          else
          {
            v190 = (llvm *)llvm::raw_ostream::write(v190, "changed -I to -isystem for C include\n");
          }
        }
        v232 = v218 + 2;
        v234 = (__n128 *)v337[0];
        v233 = (__n128 *)v337[1];
        v235 = (char *)&v218[2] - (char *)v337[0];
        v236 = (__n128 *)((char *)v337[0] + (v235 & 0xFFFFFFFFFFFFFFE0));
        if (v337[1] < (void *)*(_QWORD *)&v338[0])
        {
          if (v236 == v337[1])
          {
            v237 = __p[1];
            *v236 = __p[0];
            v236[1] = v237;
            v337[1] = &v236[2];
          }
          else
          {
            v289 = v236 + 2;
            v290 = (__n128 *)((char *)v337[1] - 32);
            v291 = (__n128 *)v337[1];
            while (v290 < v233)
            {
              v292 = *v290;
              v293 = v290[1];
              v290 += 2;
              *v291 = v292;
              v291[1] = v293;
              v291 += 2;
            }
            v337[1] = v291;
            if (v233 != v289)
            {
              v190 = (llvm *)memmove(&v233[-2 * (((char *)v233 - (char *)v289) >> 5)], v236, (char *)v233 - (char *)v289);
              v291 = (__n128 *)v337[1];
            }
            v295 = v236 <= __p && v291 > __p;
            v296 = &__p[2 * v295];
            v297 = v296[1];
            *v236 = *v296;
            v236[1] = v297;
          }
LABEL_540:
          if (v340)
          {
            v312 = (llvm::raw_ostream *)llvm::errs(v190);
            v313 = (void *)*((_QWORD *)v312 + 4);
            if (*((_QWORD *)v312 + 3) - (_QWORD)v313 > 0x27uLL)
            {
              qmemcpy(v313, "reordered C includes after C++ includes\n", 40);
              *((_QWORD *)v312 + 4) += 40;
            }
            else
            {
              llvm::raw_ostream::write(v312, "reordered C includes after C++ includes\n");
            }
          }
          v68 = (__n128 *)v337[0];
          v69 = (__n128 *)v337[1];
          goto LABEL_80;
        }
        v243 = (((char *)v337[1] - (char *)v337[0]) >> 5) + 1;
        if (v243 >> 59)
          goto LABEL_602;
        v244 = *(_QWORD *)&v338[0] - (unint64_t)v337[0];
        if ((uint64_t)(*(_QWORD *)&v338[0] - (unint64_t)v337[0]) >> 4 > v243)
          v243 = v244 >> 4;
        if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFE0)
          v245 = 0x7FFFFFFFFFFFFFFLL;
        else
          v245 = v243;
        if (v245)
        {
          if (v245 >> 59)
            goto LABEL_603;
          v246 = (char *)operator new(32 * v245);
        }
        else
        {
          v246 = 0;
        }
        v298 = v235 >> 5;
        v299 = (__n128 *)&v246[32 * (v235 >> 5)];
        v300 = &v246[32 * v245];
        if (v235 >> 5 != v245)
        {
LABEL_533:
          v305 = __p[1];
          *v299 = __p[0];
          v299[1] = v305;
          v306 = v299;
          if (v236 != v234)
          {
            v307 = v236;
            v308 = v299;
            do
            {
              v309 = v307[-1];
              v306 = v308 - 2;
              v308[-2] = v307[-2];
              v308[-1] = v309;
              v307 -= 2;
              v308 -= 2;
            }
            while (v307 != v234);
          }
          v310 = v299 + 2;
          v311 = (char *)((char *)v337[1] - (char *)v236);
          if (v337[1] != v236)
            memmove(v310, v236, (char *)v337[1] - (char *)v236);
          v190 = (llvm *)v337[0];
          v337[0] = v306;
          v337[1] = &v311[(_QWORD)v310];
          *(_QWORD *)&v338[0] = v300;
          if (v190)
            operator delete(v190);
          goto LABEL_540;
        }
        if (v235 >= 1)
        {
          if (v298 >= -1)
            v301 = v298 + 1;
          else
            v301 = v298 + 2;
          v299 -= 2 * (v301 >> 1);
          goto LABEL_533;
        }
        v302 = 2 * v298;
        if (v232 == v234)
          v303 = 1;
        else
          v303 = v302;
        if (!(v303 >> 59))
        {
          v304 = (char *)operator new(32 * v303);
          v299 = (__n128 *)&v304[32 * (v303 >> 2)];
          v300 = &v304[32 * v303];
          if (v246)
          {
            operator delete(v246);
            v234 = (__n128 *)v337[0];
          }
          goto LABEL_533;
        }
LABEL_603:
        sub_22E3B3F8C();
      }
LABEL_80:
      if (v68 == v69)
      {
LABEL_113:
        v65 = v72;
        v67 = (__n128 *)v72;
        goto LABEL_114;
      }
      v65 = v72;
      do
      {
        if (v68->n128_u32[0])
        {
          v67 = (__n128 *)v72;
        }
        else if (v72 >= v66)
        {
          v74 = (v72 - v65) >> 5;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 59)
            goto LABEL_602;
          if ((v66 - v65) >> 4 > v75)
            v75 = (v66 - v65) >> 4;
          if ((unint64_t)(v66 - v65) >= 0x7FFFFFFFFFFFFFE0)
            v76 = 0x7FFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          if (v76)
          {
            if (v76 >> 59)
              goto LABEL_603;
            v77 = (char *)operator new(32 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = v68[1];
          v79 = (__n128 *)&v77[32 * v74];
          *v79 = *v68;
          v79[1] = v78;
          if (v72 == v65)
          {
            v65 = &v77[32 * v74];
          }
          else
          {
            v80 = &v77[32 * v74];
            do
            {
              v81 = *((_OWORD *)v72 - 1);
              *((_OWORD *)v80 - 2) = *((_OWORD *)v72 - 2);
              *((_OWORD *)v80 - 1) = v81;
              v80 -= 32;
              v72 -= 32;
            }
            while (v72 != v65);
            v72 = v65;
            v65 = v80;
          }
          v66 = &v77[32 * v76];
          v67 = v79 + 2;
          if (v72)
            operator delete(v72);
        }
        else
        {
          v73 = v68[1];
          *(__n128 *)v72 = *v68;
          *((__n128 *)v72 + 1) = v73;
          v67 = (__n128 *)(v72 + 32);
        }
        v68 += 2;
        v72 = (char *)v67;
      }
      while (v68 != v69);
LABEL_114:
      __dst.n128_u64[1] = (unint64_t)v67;
      v357 = (int64_t)v66;
      __dst.n128_u64[0] = (unint64_t)v65;
      sub_22F14078C((uint64_t *)&__dst, 0, v340);
      v87 = __dst;
      v88 = v337[0];
      v89 = v337[1];
      v90 = (char *)v357;
      if (v337[0] == v337[1])
      {
        v92 = (char *)__dst.n128_u64[1];
        v91 = (char *)__dst.n128_u64[0];
      }
      else
      {
        v93 = (char *)__dst.n128_u64[1];
        v91 = (char *)__dst.n128_u64[0];
        do
        {
          if ((*(_DWORD *)v88 - 1) > 1)
          {
            v92 = v93;
          }
          else if (v93 >= v90)
          {
            v95 = (v93 - v91) >> 5;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 59)
              goto LABEL_602;
            if ((v90 - v91) >> 4 > v96)
              v96 = (v90 - v91) >> 4;
            if ((unint64_t)(v90 - v91) >= 0x7FFFFFFFFFFFFFE0)
              v97 = 0x7FFFFFFFFFFFFFFLL;
            else
              v97 = v96;
            if (v97)
            {
              if (v97 >> 59)
                goto LABEL_603;
              v98 = (char *)operator new(32 * v97);
            }
            else
            {
              v98 = 0;
            }
            v99 = v88[1];
            v100 = &v98[32 * v95];
            *(_OWORD *)v100 = *v88;
            *((_OWORD *)v100 + 1) = v99;
            if (v93 == v91)
            {
              v91 = &v98[32 * v95];
            }
            else
            {
              v101 = &v98[32 * v95];
              do
              {
                v102 = *((_OWORD *)v93 - 1);
                *((_OWORD *)v101 - 2) = *((_OWORD *)v93 - 2);
                *((_OWORD *)v101 - 1) = v102;
                v101 -= 32;
                v93 -= 32;
              }
              while (v93 != v91);
              v93 = v91;
              v91 = v101;
            }
            v90 = &v98[32 * v97];
            v92 = v100 + 32;
            if (v93)
              operator delete(v93);
          }
          else
          {
            v94 = v88[1];
            *(_OWORD *)v93 = *v88;
            *((_OWORD *)v93 + 1) = v94;
            v92 = v93 + 32;
          }
          v88 += 2;
          v93 = v92;
        }
        while (v88 != v89);
      }
      __dst.n128_u64[1] = (unint64_t)v92;
      v357 = (int64_t)v90;
      __dst.n128_u64[0] = (unint64_t)v91;
      v336 = (v87.n128_u64[1] - v87.n128_u64[0]) >> 5;
      sub_22F14078C((uint64_t *)&__dst, v336, v340);
      v103 = (char *)__dst.n128_u64[1];
      v104 = (char *)__dst.n128_u64[0];
      v105 = v337[0];
      v106 = v337[1];
      v107 = (char *)v357;
      v330 = __dst;
      if (v337[0] == v337[1])
        goto LABEL_175;
      do
      {
        v108 = *(_DWORD *)v105;
        if ((*(_DWORD *)v105 - 3) < 2
          || ((v109 = *a3 & 0x4100, v108 == 5) ? (v110 = v109 == 0) : (v110 = 0),
              v110
           || (v108 == 6 ? (v111 = (*a3 & 0x100) == 0) : (v111 = 1),
               !v111 || v108 == 7 && v109 == 0x4000 || v108 == 8 && v109 == 16640)))
        {
          if (v103 >= v107)
          {
            v113 = (v103 - v104) >> 5;
            v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 59)
              goto LABEL_602;
            if ((v107 - v104) >> 4 > v114)
              v114 = (v107 - v104) >> 4;
            if ((unint64_t)(v107 - v104) >= 0x7FFFFFFFFFFFFFE0)
              v115 = 0x7FFFFFFFFFFFFFFLL;
            else
              v115 = v114;
            if (v115)
            {
              if (v115 >> 59)
                goto LABEL_603;
              v116 = (char *)operator new(32 * v115);
            }
            else
            {
              v116 = 0;
            }
            v117 = v105[1];
            v118 = &v116[32 * v113];
            *(_OWORD *)v118 = *v105;
            *((_OWORD *)v118 + 1) = v117;
            if (v103 == v104)
            {
              v121 = v103;
              v104 = &v116[32 * v113];
            }
            else
            {
              v119 = &v116[32 * v113];
              do
              {
                v120 = *((_OWORD *)v103 - 1);
                *((_OWORD *)v119 - 2) = *((_OWORD *)v103 - 2);
                *((_OWORD *)v119 - 1) = v120;
                v119 -= 32;
                v103 -= 32;
              }
              while (v103 != v104);
              v121 = v104;
              v104 = v119;
            }
            v107 = &v116[32 * v115];
            v103 = v118 + 32;
            if (v121)
              operator delete(v121);
          }
          else
          {
            v112 = v105[1];
            *(_OWORD *)v103 = *v105;
            *((_OWORD *)v103 + 1) = v112;
            v103 += 32;
          }
        }
        v105 += 2;
      }
      while (v105 != v106);
      v122 = v337[0];
      v123 = v337[1];
      __dst.n128_u64[1] = (unint64_t)v103;
      v357 = (int64_t)v107;
      __dst.n128_u64[0] = (unint64_t)v104;
      if (v337[0] == v337[1])
      {
LABEL_175:
        v124 = v103;
      }
      else
      {
        do
        {
          if (*(_DWORD *)v122 == 9)
          {
            if (v103 >= v107)
            {
              v126 = (v103 - v104) >> 5;
              v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 59)
                goto LABEL_602;
              if ((v107 - v104) >> 4 > v127)
                v127 = (v107 - v104) >> 4;
              if ((unint64_t)(v107 - v104) >= 0x7FFFFFFFFFFFFFE0)
                v128 = 0x7FFFFFFFFFFFFFFLL;
              else
                v128 = v127;
              if (v128)
              {
                if (v128 >> 59)
                  goto LABEL_603;
                v129 = (char *)operator new(32 * v128);
              }
              else
              {
                v129 = 0;
              }
              v130 = v122[1];
              v131 = &v129[32 * v126];
              *(_OWORD *)v131 = *v122;
              *((_OWORD *)v131 + 1) = v130;
              if (v103 == v104)
              {
                v104 = &v129[32 * v126];
              }
              else
              {
                v132 = &v129[32 * v126];
                do
                {
                  v133 = *((_OWORD *)v103 - 1);
                  *((_OWORD *)v132 - 2) = *((_OWORD *)v103 - 2);
                  *((_OWORD *)v132 - 1) = v133;
                  v132 -= 32;
                  v103 -= 32;
                }
                while (v103 != v104);
                v103 = v104;
                v104 = v132;
              }
              v107 = &v129[32 * v128];
              v124 = v131 + 32;
              if (v103)
                operator delete(v103);
            }
            else
            {
              v125 = v122[1];
              *(_OWORD *)v103 = *v122;
              *((_OWORD *)v103 + 1) = v125;
              v124 = v103 + 32;
            }
          }
          else
          {
            v124 = v103;
          }
          v122 += 2;
          v103 = v124;
        }
        while (v122 != v123);
      }
      __dst.n128_u64[1] = (unint64_t)v124;
      v357 = (int64_t)v107;
      __dst.n128_u64[0] = (unint64_t)v104;
      v134 = sub_22F14078C((uint64_t *)&__dst, v336, v340);
      v135 = 0;
      v136 = (uint64_t)v339;
      memset(__p, 0, 24);
      v138 = __dst.n128_u64[1];
      v137 = __dst.n128_u64[0];
      v139 = __dst.n128_u64[1] - __dst.n128_u64[0];
      if (__dst.n128_u64[1] != __dst.n128_u64[0])
      {
        if (v139 < 0)
          goto LABEL_602;
        v140 = v139 >> 5;
        v135 = operator new((unint64_t)v139 >> 1);
        __p[0].n128_u64[0] = (unint64_t)v135;
        __p[0].n128_u64[1] = (unint64_t)v135;
        __p[1].n128_u64[0] = (unint64_t)&v135[16 * v140];
      }
      v141 = v138;
      if (v138 != v137)
      {
        v329 = v134;
        v333 = v136;
        do
        {
          v142 = *(_QWORD *)(v137 + 8);
          v143 = *(_QWORD *)(v137 + 16);
          if ((unint64_t)v135 >= __p[1].n128_u64[0])
          {
            v145 = __p[0].n128_u64[0];
            v146 = (uint64_t)&v135[-__p[0].n128_u64[0]] >> 4;
            v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 60)
              goto LABEL_602;
            v148 = __p[1].n128_u64[0] - __p[0].n128_u64[0];
            if ((uint64_t)(__p[1].n128_u64[0] - __p[0].n128_u64[0]) >> 3 > v147)
              v147 = v148 >> 3;
            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
              v149 = 0xFFFFFFFFFFFFFFFLL;
            else
              v149 = v147;
            if (v149)
            {
              if (v149 >> 60)
                goto LABEL_603;
              v150 = (char *)operator new(16 * v149);
            }
            else
            {
              v150 = 0;
            }
            v151 = &v150[16 * v146];
            *(_QWORD *)v151 = v142;
            *((_QWORD *)v151 + 1) = v143;
            v152 = (unint64_t)v151;
            if (v135 != (_BYTE *)v145)
            {
              do
              {
                v153 = *((_QWORD *)v135 - 2);
                v135 -= 16;
                v154 = v135[8];
                *(_QWORD *)(v152 - 16) = v153;
                v152 -= 16;
                *(_BYTE *)(v152 + 8) = v154;
              }
              while (v135 != (_BYTE *)v145);
              v135 = (_BYTE *)__p[0].n128_u64[0];
            }
            v144 = (unint64_t)(v151 + 16);
            __p[0].n128_u64[0] = v152;
            __p[0].n128_u64[1] = (unint64_t)(v151 + 16);
            __p[1].n128_u64[0] = (unint64_t)&v150[16 * v149];
            if (v135)
              operator delete(v135);
          }
          else
          {
            *(_QWORD *)v135 = v142;
            *((_QWORD *)v135 + 1) = v143;
            v144 = (unint64_t)(v135 + 16);
          }
          __p[0].n128_u64[1] = v144;
          v137 += 32;
          v135 = (_BYTE *)v144;
        }
        while (v137 != v138);
        v141 = __dst.n128_u64[1];
        v138 = __dst.n128_u64[0];
        v136 = v333;
        v134 = v329;
      }
      v155 = ((v330.n128_u64[1] - v330.n128_u64[0]) >> 5) - v134;
      v156 = v141 - v138;
      v350[0] = 0;
      v350[1] = 0;
      LODWORD(v351) = 0;
      v334 = (v141 - v138) & 0x1FFFFFFFE0;
      if (v334)
      {
        for (j = 0; j != (v156 >> 5); ++j)
        {
          v170 = v138 + 32 * j;
          if (*(_BYTE *)(v170 + 28))
          {
            LODWORD(v348[0]) = j;
            HIDWORD(v348[0]) = *(_DWORD *)(v170 + 24);
            if (!(_DWORD)v351)
            {
              v178 = 0;
LABEL_255:
              v179 = sub_22E742DA8((uint64_t)v350, (uint64_t)v348, v348, v178);
              *(_QWORD *)v179 = v348[0];
              continue;
            }
            v171 = ((_DWORD)v351 - 1) & (37 * j);
            v172 = (unsigned int *)((char *)v350[0] + 8 * v171);
            v173 = *v172;
            if (j != v173)
            {
              v174 = 0;
              v175 = 1;
              while ((_DWORD)v173 != -1)
              {
                if (v174)
                  v176 = 0;
                else
                  v176 = (_DWORD)v173 == -2;
                if (v176)
                  v174 = v172;
                v177 = v171 + v175++;
                v171 = v177 & ((_DWORD)v351 - 1);
                v172 = (unsigned int *)((char *)v350[0] + 8 * v171);
                v173 = *v172;
                if (j == v173)
                  goto LABEL_256;
              }
              if (v174)
                v178 = v174;
              else
                v178 = v172;
              goto LABEL_255;
            }
          }
LABEL_256:
          ;
        }
      }
      sub_22F40ED34(v136, __p, v336, v155, 0, (uint64_t)v350);
      llvm::deallocate_buffer(v350[0], (void *)(8 * v351));
      if (__p[0].n128_u64[0])
      {
        __p[0].n128_u64[1] = __p[0].n128_u64[0];
        operator delete((void *)__p[0].n128_u64[0]);
      }
      v157 = v339;
      v158 = (const std::string *)*((_QWORD *)&v338[0] + 1);
      v159 = *(__int128 **)&v338[1];
      v160 = *(_QWORD *)&v338[1] - *((_QWORD *)&v338[0] + 1);
      v161 = (uint64_t)(*(_QWORD *)&v338[1] - *((_QWORD *)&v338[0] + 1)) >> 5;
      v162 = (void **)(v339 + 15);
      v163 = (std::string *)v339[15];
      if (v161 > (uint64_t)(v339[17] - (_QWORD)v163) >> 5)
      {
        sub_22E6C7A1C(v162);
        if ((v160 & 0x8000000000000000) == 0)
        {
          v164 = v157[17] - v157[15];
          v165 = v164 >> 4;
          if (v164 >> 4 <= v161)
            v165 = v161;
          v166 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v165;
          if (!(v166 >> 59))
          {
            v162 = (void **)operator new(32 * v166);
            v167 = v162;
            v157[15] = v162;
            v157[16] = v162;
            v157[17] = &v162[4 * v166];
            if (v159 != (__int128 *)v158)
            {
              do
              {
                if (SHIBYTE(v158->__r_.__value_.__r.__words[2]) < 0)
                {
                  v162 = (void **)sub_22E3BB2B4(v167, v158->__r_.__value_.__l.__data_, v158->__r_.__value_.__l.__size_);
                }
                else
                {
                  v168 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
                  v167[2] = (void *)v158->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v167 = v168;
                }
                *((_BYTE *)v167 + 24) = v158[1].__r_.__value_.__s.__data_[0];
                v158 = (const std::string *)((char *)v158 + 32);
                v167 += 4;
                v160 -= 32;
              }
              while (v160);
            }
            v157[16] = v167;
            goto LABEL_291;
          }
        }
LABEL_602:
        abort();
      }
      v180 = (std::string *)v339[16];
      v181 = (char *)v180 - (char *)v163;
      v182 = ((char *)v180 - (char *)v163) >> 5;
      if (v182 >= v161)
      {
        if (*(_QWORD *)&v338[1] == *((_QWORD *)&v338[0] + 1))
        {
          v189 = (std::string *)v339[15];
        }
        else
        {
          v189 = (std::string *)v339[15];
          do
          {
            v162 = (void **)std::string::operator=(v163, v158);
            v163[1].__r_.__value_.__s.__data_[0] = v158[1].__r_.__value_.__s.__data_[0];
            v189 = (std::string *)((char *)v189 + 32);
            v158 = (const std::string *)((char *)v158 + 32);
            v163 = (std::string *)((char *)v163 + 32);
          }
          while (v158 != (const std::string *)v159);
          v180 = (std::string *)v157[16];
        }
        while (v180 != v189)
        {
          if (v180[-1].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v180[-2].__r_.__value_.__r.__words[2]);
          v180 = (std::string *)((char *)v180 - 32);
        }
        v157[16] = v189;
      }
      else
      {
        v183 = *((_QWORD *)&v338[0] + 1) + 32 * v182;
        if (v180 != v163)
        {
          do
          {
            v162 = (void **)std::string::operator=(v163, v158);
            v163[1].__r_.__value_.__s.__data_[0] = v158[1].__r_.__value_.__s.__data_[0];
            v158 = (const std::string *)((char *)v158 + 32);
            v163 = (std::string *)((char *)v163 + 32);
          }
          while (v158 != (const std::string *)v183);
          v163 = (std::string *)v157[16];
        }
        v184 = v163;
        if (v182 != v161)
        {
          v185 = 0;
          v186 = v160 - v181;
          do
          {
            v187 = (__int128 *)(v183 + v185);
            v162 = (void **)((char *)&v163->__r_.__value_.__l.__data_ + v185);
            if (*(char *)(v183 + v185 + 23) < 0)
            {
              v162 = (void **)sub_22E3BB2B4(v162, *(void **)v187, *((_QWORD *)v187 + 1));
            }
            else
            {
              v188 = *v187;
              v162[2] = (void *)*((_QWORD *)v187 + 2);
              *(_OWORD *)v162 = v188;
            }
            v163[1].__r_.__value_.__s.__data_[v185] = *(_BYTE *)(v183 + v185 + 24);
            v185 += 32;
          }
          while (v186 != v185);
          v184 = (std::string *)((char *)v163 + v185);
        }
        v157[16] = v184;
      }
LABEL_291:
      if (v340)
      {
        v194 = (llvm::raw_ostream *)llvm::errs((llvm *)v162);
        v195 = (void *)*((_QWORD *)v194 + 4);
        if (*((_QWORD *)v194 + 3) - (_QWORD)v195 > 0x22uLL)
        {
          qmemcpy(v195, "#include \"...\" search starts here:\n", 35);
          *((_QWORD *)v194 + 4) += 35;
        }
        else
        {
          v194 = (llvm::raw_ostream *)llvm::raw_ostream::write(v194, "#include \"...\" search starts here:\n");
        }
        if (v334)
        {
          v196 = (v156 >> 5);
          v197 = ((v87.n128_u64[1] - v87.n128_u64[0]) >> 5);
          v198 = 16;
          do
          {
            if (!v197)
            {
              v199 = (llvm::raw_ostream *)llvm::errs(v194);
              v200 = (void *)*((_QWORD *)v199 + 4);
              if (*((_QWORD *)v199 + 3) - (_QWORD)v200 > 0x22uLL)
              {
                qmemcpy(v200, "#include <...> search starts here:\n", 35);
                *((_QWORD *)v199 + 4) += 35;
              }
              else
              {
                llvm::raw_ostream::write(v199, "#include <...> search starts here:\n");
              }
            }
            v201 = (_BYTE *)(__dst.n128_u64[0] + v198);
            v202 = (llvm *)sub_22F40F380(__dst.n128_u64[0] + v198 - 8);
            v203 = v202;
            v205 = v204;
            v206 = " (headermap)";
            if ((*v201 & 0xC) == 4)
              v206 = " (framework directory)";
            if ((*v201 & 0xC) != 0)
              v207 = v206;
            else
              v207 = "";
            v208 = (llvm::raw_ostream *)llvm::errs(v202);
            v209 = v208;
            v210 = (_BYTE *)*((_QWORD *)v208 + 4);
            if (*((_BYTE **)v208 + 3) == v210)
            {
              v209 = (llvm::raw_ostream *)llvm::raw_ostream::write(v208, " ");
              v211 = (_BYTE *)*((_QWORD *)v209 + 4);
            }
            else
            {
              *v210 = 32;
              v211 = (_BYTE *)(*((_QWORD *)v208 + 4) + 1);
              *((_QWORD *)v208 + 4) = v211;
            }
            if (v205 <= *((_QWORD *)v209 + 3) - (_QWORD)v211)
            {
              if (v205)
              {
                memcpy(v211, v203, v205);
                v211 = (_BYTE *)(*((_QWORD *)v209 + 4) + v205);
                *((_QWORD *)v209 + 4) = v211;
              }
            }
            else
            {
              v209 = (llvm::raw_ostream *)llvm::raw_ostream::write(v209, (const char *)v203);
              v211 = (_BYTE *)*((_QWORD *)v209 + 4);
            }
            v194 = (llvm::raw_ostream *)strlen(v207);
            v212 = v194;
            if ((unint64_t)v194 <= *((_QWORD *)v209 + 3) - (_QWORD)v211)
            {
              if (v194)
              {
                v194 = (llvm::raw_ostream *)memcpy(v211, v207, (size_t)v194);
                v211 = (char *)v212 + *((_QWORD *)v209 + 4);
                *((_QWORD *)v209 + 4) = v211;
              }
            }
            else
            {
              v194 = (llvm::raw_ostream *)llvm::raw_ostream::write(v209, v207);
              v209 = v194;
              v211 = (_BYTE *)*((_QWORD *)v194 + 4);
            }
            if (*((_BYTE **)v209 + 3) == v211)
            {
              v194 = (llvm::raw_ostream *)llvm::raw_ostream::write(v209, "\n");
            }
            else
            {
              *v211 = 10;
              ++*((_QWORD *)v209 + 4);
            }
            v198 += 32;
            --v197;
            --v196;
          }
          while (v196);
        }
        v213 = (llvm::raw_ostream *)llvm::errs(v194);
        v214 = *((_QWORD *)v213 + 4);
        if ((unint64_t)(*((_QWORD *)v213 + 3) - v214) > 0x13)
        {
          *(_DWORD *)(v214 + 16) = 170816627;
          *(_OWORD *)v214 = *(_OWORD *)"End of search list.\n";
          *((_QWORD *)v213 + 4) += 20;
        }
        else
        {
          llvm::raw_ostream::write(v213, "End of search list.\n");
        }
      }
      if (__dst.n128_u64[0])
        operator delete((void *)__dst.n128_u64[0]);
      if (SHIBYTE(v342) < 0)
        operator delete(v341[0]);
      __p[0].n128_u64[0] = (unint64_t)v338 + 8;
      sub_22E6187CC((void ***)__p);
      if (v337[0])
      {
        v337[1] = v337[0];
        operator delete(v337[0]);
      }
      return;
  }
}

void sub_22F13FE50(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  size_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  llvm *v22;
  llvm *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  llvm *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  llvm::raw_ostream *v33;
  llvm::raw_ostream *v34;
  void *v35;
  _WORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  const char *v55;
  char v56;
  unsigned __int8 *v57[2];
  uint64_t v58;
  __int16 v59;
  void *v60;
  __int128 v61;
  _QWORD v62[34];

  v62[32] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48);
  v60 = v62;
  v61 = xmmword_22F44E320;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v10 = 0;
    v11 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v10 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
        {
          v11 = strlen(*(const char **)a2);
          goto LABEL_7;
        }
        v11 = 0;
        break;
      case 4:
        v55 = *(const char **)a2;
        v56 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v56 >= 0)
          v10 = *(_DWORD **)a2;
        else
          v10 = *(_DWORD **)v55;
        if (v56 >= 0)
          v11 = v56 & 0x7F;
        else
          v11 = *((_QWORD *)v55 + 1);
        goto LABEL_7;
      case 5:
        v10 = *(_DWORD **)a2;
        v11 = *(_QWORD *)(a2 + 8);
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector();
    v10 = v60;
    v11 = v61;
LABEL_7:
    if (*(_BYTE *)(a1 + 89) && v11 >= 0xC)
    {
      v12 = *(_QWORD *)v10 == 0x636E692F7273752FLL && v10[2] == 1701082476;
      if (v12
        || v11 >= 0x12
        && (*(_QWORD *)v10 == 0x636F6C2F7273752FLL ? (v13 = *((_QWORD *)v10 + 1) == 0x756C636E692F6C61) : (v13 = 0),
            v13 ? (v14 = *((unsigned __int16 *)v10 + 8) == 25956) : (v14 = 0),
            v14))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40);
        *(_QWORD *)(v15 + 312) = 0x8D00000000;
        v16 = a5;
        if (*(char *)(v15 + 311) < 0)
        {
          **(_BYTE **)(v15 + 288) = 0;
          *(_QWORD *)(v15 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v15 + 288) = 0;
          *(_BYTE *)(v15 + 311) = 0;
        }
        v57[0] = (unsigned __int8 *)(v15 + 320);
        v57[1] = 0;
        v58 = v15;
        v59 = 1;
        *(_BYTE *)(v15 + 320) = 0;
        *(_DWORD *)(v15 + 664) = 0;
        v17 = *(unsigned int *)(v15 + 776);
        if ((_DWORD)v17)
        {
          v18 = *(_QWORD *)(v15 + 768);
          v19 = 56 * v17;
          do
          {
            if (*(char *)(v18 + v19 - 9) < 0)
              operator delete(*(void **)(v18 + v19 - 32));
            v19 -= 56;
          }
          while (v19);
        }
        *(_DWORD *)(v15 + 776) = 0;
        sub_22E3B89A8(v57, v10, v11);
        sub_22E3BB0B8((uint64_t)v57);
        a5 = v16;
      }
    }
  }
  if (a3 == 4)
    v20 = 2;
  else
    v20 = 1;
  if (a3 >= 3)
    v21 = v20;
  else
    v21 = 0;
  v22 = (llvm *)sub_22E6D59C0(v9, (char *)v10, v11, 1);
  if (v22)
  {
    v23 = v22;
    v24 = 4;
    if (!a4)
      v24 = 0;
    v25 = v24 | v21;
    v27 = *(_QWORD **)(a1 + 8);
    v26 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v27 < v26)
    {
      *(_DWORD *)v27 = a3;
      v27[1] = v22;
      v27[2] = v25;
LABEL_42:
      v28 = (char *)(v27 + 4);
      v27[3] = a5;
LABEL_82:
      *(_QWORD *)(a1 + 8) = v28;
      goto LABEL_83;
    }
    v37 = *(_QWORD **)a1;
    v38 = ((uint64_t)v27 - *(_QWORD *)a1) >> 5;
    v39 = v38 + 1;
    if (!((unint64_t)(v38 + 1) >> 59))
    {
      v40 = a5;
      v41 = v26 - (_QWORD)v37;
      if (v41 >> 4 > v39)
        v39 = v41 >> 4;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
        v42 = 0x7FFFFFFFFFFFFFFLL;
      else
        v42 = v39;
      if (!(v42 >> 59))
      {
        v43 = (char *)operator new(32 * v42);
        v44 = &v43[32 * v38];
        *(_DWORD *)v44 = a3;
        v45 = &v43[32 * v42];
        *((_QWORD *)v44 + 1) = v23;
        *((_QWORD *)v44 + 2) = v25;
        *((_QWORD *)v44 + 3) = v40;
        v28 = v44 + 32;
        if (v27 != v37)
        {
          do
          {
            v46 = *((_OWORD *)v27 - 1);
            v47 = v44 - 32;
            *((_OWORD *)v44 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v44 - 1) = v46;
            v27 -= 4;
            v44 -= 32;
          }
          while (v27 != v37);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  if ((a4 & 1) == 0)
  {
    v22 = (llvm *)sub_22F1D07D8(v9, v10, v11, 0, 1, (uint64_t)v57);
    if ((v58 & 1) == 0)
    {
      v22 = (llvm *)sub_22F137B30(*(uint64_t **)(a1 + 48), (uint64_t)v57[0]);
      if (v22)
      {
        v29 = v22;
        v30 = 8;
        if (a3 == 2)
          v30 = 24;
        v31 = v30 | v21;
        v27 = *(_QWORD **)(a1 + 8);
        v32 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v27 < v32)
        {
          *(_DWORD *)v27 = a3;
          v27[1] = v22;
          v27[2] = v31;
          goto LABEL_42;
        }
        v37 = *(_QWORD **)a1;
        v48 = ((uint64_t)v27 - *(_QWORD *)a1) >> 5;
        v49 = v48 + 1;
        if (!((unint64_t)(v48 + 1) >> 59))
        {
          v50 = a5;
          v51 = v32 - (_QWORD)v37;
          if (v51 >> 4 > v49)
            v49 = v51 >> 4;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
            v52 = 0x7FFFFFFFFFFFFFFLL;
          else
            v52 = v49;
          if (!(v52 >> 59))
          {
            v53 = (char *)operator new(32 * v52);
            v44 = &v53[32 * v48];
            *(_DWORD *)v44 = a3;
            v45 = &v53[32 * v52];
            *((_QWORD *)v44 + 1) = v29;
            *((_QWORD *)v44 + 2) = v31;
            *((_QWORD *)v44 + 3) = v50;
            v28 = v44 + 32;
            if (v27 != v37)
            {
              do
              {
                v54 = *((_OWORD *)v27 - 1);
                v47 = v44 - 32;
                *((_OWORD *)v44 - 2) = *((_OWORD *)v27 - 2);
                *((_OWORD *)v44 - 1) = v54;
                v27 -= 4;
                v44 -= 32;
              }
              while (v27 != v37);
LABEL_80:
              *(_QWORD *)a1 = v47;
              *(_QWORD *)(a1 + 8) = v28;
              *(_QWORD *)(a1 + 16) = v45;
              if (v37)
                operator delete(v37);
              goto LABEL_82;
            }
LABEL_79:
            v47 = v44;
            goto LABEL_80;
          }
LABEL_95:
          sub_22E3B3F8C();
        }
LABEL_94:
        abort();
      }
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v33 = (llvm::raw_ostream *)llvm::errs(v22);
    v34 = v33;
    v35 = (void *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v35 > 0x1FuLL)
    {
      qmemcpy(v35, "ignoring nonexistent directory \"", 32);
      v36 = (_WORD *)(*((_QWORD *)v33 + 4) + 32);
      *((_QWORD *)v34 + 4) = v36;
    }
    else
    {
      v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v33, "ignoring nonexistent directory \"");
      v36 = (_WORD *)*((_QWORD *)v34 + 4);
    }
    if (v11 <= *((_QWORD *)v34 + 3) - (_QWORD)v36)
    {
      if (v11)
      {
        memcpy(v36, v10, v11);
        v36 = (_WORD *)(*((_QWORD *)v34 + 4) + v11);
        *((_QWORD *)v34 + 4) = v36;
      }
    }
    else
    {
      v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v34, (const char *)v10);
      v36 = (_WORD *)*((_QWORD *)v34 + 4);
    }
    if (*((_QWORD *)v34 + 3) - (_QWORD)v36 > 1uLL)
    {
      *v36 = 2594;
      *((_QWORD *)v34 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v34, "\"\n");
    }
  }
LABEL_83:
  if (v60 != v62)
    free(v60);
}

void sub_22F1403CC(uint64_t a1, void ***a2, unsigned int a3, int a4, uint64_t a5)
{
  size_t v10;
  void **v11;
  int is_absolute;
  char v13;
  int v14;
  __int16 v15;
  void **v16;
  const char *v17;
  char v18;
  _QWORD v19[4];
  __int16 v20;
  void *v21;
  __int128 v22;
  _QWORD v23[33];

  v23[32] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 89))
  {
LABEL_22:
    sub_22F13FE50(a1, (uint64_t)a2, a3, a4, a5);
    return;
  }
  v21 = v23;
  v22 = xmmword_22F44E320;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v10 = 0;
    v11 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v11 = *a2;
        if (*a2)
          v10 = strlen((const char *)*a2);
        else
          v10 = 0;
        break;
      case 4:
        v18 = *((_BYTE *)*a2 + 23);
        if (v18 >= 0)
          v11 = *a2;
        else
          v11 = (void **)**a2;
        if (v18 >= 0)
          v10 = v18 & 0x7F;
        else
          v10 = (size_t)(*a2)[1];
        break;
      case 5:
        v11 = *a2;
        v10 = (size_t)a2[1];
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector();
    v11 = (void **)v21;
    v10 = v22;
  }
  v20 = 261;
  v19[0] = v11;
  v19[1] = v10;
  is_absolute = llvm::sys::path::is_absolute();
  v13 = is_absolute;
  if (is_absolute)
  {
    v14 = *((unsigned __int8 *)a2 + 32);
    if (v14 == 1)
    {
      v19[0] = a1 + 64;
      v15 = 260;
    }
    else
    {
      if (*((_BYTE *)a2 + 32))
      {
        v16 = a2[1];
        if (*((_BYTE *)a2 + 33) == 1)
        {
          v17 = (const char *)*a2;
        }
        else
        {
          LOBYTE(v14) = 2;
          v17 = (const char *)a2;
        }
        v19[0] = a1 + 64;
        v19[2] = v17;
        v19[3] = v16;
        LOBYTE(v20) = 4;
        HIBYTE(v20) = v14;
        goto LABEL_18;
      }
      v15 = 256;
    }
    v20 = v15;
LABEL_18:
    sub_22F13FE50(a1, (uint64_t)v19, a3, a4, a5);
  }
  if (v21 != v23)
    free(v21);
  if ((v13 & 1) == 0)
    goto LABEL_22;
}

void sub_22F1405B4(uint64_t a1, const char *a2, uint64_t a3)
{
  _QWORD v6[4];
  __int16 v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  __int16 v12;
  _QWORD v13[2];
  const char *v14;
  uint64_t v15;
  __int16 v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[2];
  const char *v22;
  uint64_t v23;
  __int16 v24;
  void **v25[2];
  const char *v26;
  uint64_t v27;
  __int16 v28;

  v12 = 773;
  v8 = "/usr/lib/gcc";
  v9 = 12;
  v10 = "/";
  v13[0] = &v8;
  v14 = "i686-pc-cygwin";
  v15 = 14;
  v16 = 1282;
  v17[0] = v13;
  v18 = "/";
  v20 = 770;
  v21[0] = v17;
  v22 = a2;
  v23 = a3;
  v24 = 1282;
  v25[0] = (void **)v21;
  v26 = "/include/c++";
  v28 = 770;
  sub_22F1403CC(a1, v25, 6u, 0, 0);
  v7 = 773;
  v6[0] = "/usr/lib/gcc";
  v6[1] = 12;
  v6[2] = "/";
  v8 = (const char *)v6;
  v10 = "i686-pc-cygwin";
  v11 = 14;
  v12 = 1282;
  v13[0] = &v8;
  v14 = "/";
  v16 = 770;
  v17[0] = v13;
  v18 = a2;
  v19 = a3;
  v20 = 1282;
  v21[0] = v17;
  v22 = "/include/c++/";
  v24 = 770;
  v25[0] = (void **)v21;
  v26 = "i686-pc-cygwin";
  v27 = 14;
  v28 = 1282;
  sub_22F1403CC(a1, v25, 6u, 0, 0);
  v12 = 773;
  v8 = "/usr/lib/gcc";
  v9 = 12;
  v10 = "/";
  v13[0] = &v8;
  v14 = "i686-pc-cygwin";
  v15 = 14;
  v16 = 1282;
  v17[0] = v13;
  v18 = "/";
  v20 = 770;
  v21[0] = v17;
  v22 = a2;
  v23 = a3;
  v24 = 1282;
  v25[0] = (void **)v21;
  v26 = "/include/c++/backward";
  v28 = 770;
  sub_22F1403CC(a1, v25, 6u, 0, 0);
}

uint64_t sub_22F14078C(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char v13;
  uint64_t v14;
  int v15;
  const void *v16;
  _QWORD *v17;
  llvm *v18;
  char v19;
  unsigned __int8 v20;
  unsigned int v21;
  int v22;
  unsigned int i;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  llvm::raw_ostream *v33;
  void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  _WORD *v38;
  llvm::raw_ostream *v39;
  void *v40;
  uint64_t v41;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[64];
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[64];
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[72];

  v3 = 0;
  v53 = v57;
  v54 = v57;
  v48 = v52;
  v49 = v52;
  v43 = v47;
  v44 = v47;
  v4 = a2;
  v5 = *a1;
  v6 = a1[1] - *a1;
  v55 = 8;
  v56 = 0;
  v50 = 8;
  v51 = 0;
  v45 = 8;
  v46 = 0;
  if (a2 == v6 >> 5)
    goto LABEL_61;
  v3 = 0;
  v10 = a2;
  do
  {
    v11 = v5 + 32 * v4;
    v13 = *(_BYTE *)(v11 + 16);
    v12 = (unsigned __int8 *)(v11 + 16);
    v14 = (uint64_t)(v12 - 8);
    v15 = v13 & 0xC;
    if (v15 == 8)
    {
      v16 = *(const void **)v14;
LABEL_10:
      v17 = &v43;
      goto LABEL_11;
    }
    if (v15 == 4)
    {
      v16 = *(const void **)(*(_QWORD *)v14 + 8);
      v17 = &v48;
      goto LABEL_11;
    }
    if (v15)
    {
      v16 = 0;
      goto LABEL_10;
    }
    v16 = *(const void **)(*(_QWORD *)v14 + 8);
    v17 = &v53;
LABEL_11:
    v18 = (llvm *)sub_22E3BA850((uint64_t)v17, v16);
    if (v19)
      goto LABEL_40;
    v20 = *v12;
    v21 = v10;
    if ((v20 & 3) == 0)
      goto LABEL_33;
    v22 = v20 & 0xC;
    for (i = a2; ; ++i)
    {
      v24 = *a1 + 32 * i;
      v25 = *(_BYTE *)(v24 + 16);
      if (((v25 ^ v20) & 0xC) != 0)
        continue;
      v26 = v24 + 8;
      if (v22 == 4)
      {
        if ((v25 & 0xC) == 4)
        {
LABEL_20:
          v27 = *(_QWORD *)(*(_QWORD *)v26 + 8);
          goto LABEL_21;
        }
LABEL_18:
        v27 = 0;
LABEL_21:
        v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
        goto LABEL_28;
      }
      if ((v20 & 0xC) == 0)
      {
        if ((v25 & 0xC) == 0)
          goto LABEL_20;
        goto LABEL_18;
      }
      v27 = (v25 & 0xC) == 8 ? *(_QWORD *)v26 : 0;
      v28 = v22 == 8 ? *(_QWORD *)v14 : 0;
LABEL_28:
      if (v27 == v28)
        break;
    }
    if ((v25 & 3) != 0)
      v21 = v10;
    else
      v21 = i;
LABEL_33:
    if (a3)
    {
      v32 = (llvm::raw_ostream *)llvm::errs(v18);
      v33 = v32;
      v34 = (void *)*((_QWORD *)v32 + 4);
      if (*((_QWORD *)v32 + 3) - (_QWORD)v34 > 0x1DuLL)
      {
        qmemcpy(v34, "ignoring duplicate directory \"", 30);
        *((_QWORD *)v32 + 4) += 30;
      }
      else
      {
        v33 = (llvm::raw_ostream *)llvm::raw_ostream::write(v32, "ignoring duplicate directory \"");
      }
      v36 = (const void *)sub_22F40F380(v14);
      v37 = v35;
      v38 = (_WORD *)*((_QWORD *)v33 + 4);
      if (v35 <= *((_QWORD *)v33 + 3) - (_QWORD)v38)
      {
        if (v35)
        {
          memcpy(v38, v36, v35);
          v38 = (_WORD *)(*((_QWORD *)v33 + 4) + v37);
          *((_QWORD *)v33 + 4) = v38;
        }
      }
      else
      {
        v33 = (llvm::raw_ostream *)llvm::raw_ostream::write(v33, (const char *)v36);
        v38 = (_WORD *)*((_QWORD *)v33 + 4);
      }
      if (*((_QWORD *)v33 + 3) - (_QWORD)v38 > 1uLL)
      {
        *v38 = 2594;
        *((_QWORD *)v33 + 4) += 2;
      }
      else
      {
        v38 = (_WORD *)llvm::raw_ostream::write(v33, "\"\n");
      }
      if (v21 != v10)
      {
        v39 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
        v40 = (void *)*((_QWORD *)v39 + 4);
        if (*((_QWORD *)v39 + 3) - (_QWORD)v40 > 0x31uLL)
        {
          qmemcpy(v40, "  as it is a non-system directory that duplicates ", 50);
          v41 = *((_QWORD *)v39 + 4) + 50;
          *((_QWORD *)v39 + 4) = v41;
        }
        else
        {
          v39 = (llvm::raw_ostream *)llvm::raw_ostream::write(v39, "  as it is a non-system directory that duplicates ");
          v41 = *((_QWORD *)v39 + 4);
        }
        if ((unint64_t)(*((_QWORD *)v39 + 3) - v41) > 0x12)
        {
          *(_DWORD *)(v41 + 15) = 175731311;
          *(_OWORD *)v41 = *(_OWORD *)"a system directory\n";
          *((_QWORD *)v39 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(v39, "a system directory\n");
        }
      }
    }
    if (v21 == v10)
      v3 = v3;
    else
      v3 = (v3 + 1);
    v29 = a1[1];
    v30 = *a1 + 32 * v21;
    v31 = v29 - (v30 + 32);
    if (v29 != v30 + 32)
      memmove((void *)(*a1 + 32 * v21), (const void *)(v30 + 32), v29 - (v30 + 32));
    a1[1] = v30 + v31;
    --v10;
LABEL_40:
    v5 = *a1;
    v4 = ++v10;
  }
  while (v10 != (a1[1] - *a1) >> 5);
  if (v44 != v43)
    free(v44);
LABEL_61:
  if (v49 != v48)
    free(v49);
  if (v54 != v53)
    free(v54);
  return v3;
}

BOOL sub_22F140B7C(uint64_t a1, int a2)
{
  int v2;
  unsigned int v4;
  _DWORD *v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a1 + 16);
  if ((v2 - 399) < 0x29 || (unsigned __int16)(v2 - 7) < 6u)
    return 0;
  v4 = v2 - 1;
  if (v4 < 0x12 && ((0x3F001u >> v4) & 1) != 0)
    return 0;
  v5 = *(_DWORD **)(a1 + 8);
  if (!v5)
    return 0;
  v6 = (unsigned __int16)(*v5 >> 9);
  if (v6 >= 0x1B)
    v6 = 0;
  return v6 == a2;
}

uint64_t sub_22F140BE0(uint64_t a1)
{
  int v1;
  _DWORD *v5;
  unsigned int v6;

  v1 = *(unsigned __int16 *)(a1 + 16);
  if ((v1 - 399) < 0x29 || (v1 - 7) < 6)
    return 0;
  if ((v1 - 13) < 6 || v1 == 1)
    return 0;
  v5 = *(_DWORD **)(a1 + 8);
  if (!v5)
    return 0;
  v6 = (unsigned __int16)(*v5 >> 9);
  if (v6 >= 0x1B)
    return 0;
  else
    return v6;
}

double sub_22F140C2C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  *(_QWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = a4;
  if (a2 == a3)
  {
    if ((unint64_t)(a4 - (_QWORD)a2) < 3)
    {
      v5 = 0;
    }
    else
    {
      v5 = 3;
      if (*a2 ^ 0xBBEF | *((unsigned __int8 *)a2 + 2) ^ 0xBF)
        v5 = 0;
    }
    *(_QWORD *)(a1 + 184) = (char *)a2 + v5;
  }
  *(_WORD *)(a1 + 177) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(a1 + 192) = 257;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  return result;
}

uint64_t sub_22F140CA8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  char v13;

  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0x1800000000;
  v9 = *(_QWORD *)(a4 + 88);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v9 + 192);
  *(_QWORD *)a1 = off_24FAC7EB0;
  *(_QWORD *)(a1 + 8) = a4;
  v10 = sub_22E49F3DC((_QWORD *)v9, a2);
  if (v10)
    v11 = *v10 & 0x7FFFFFFF;
  else
    v11 = 0;
  *(_DWORD *)(a1 + 160) = v11;
  v12 = *(_DWORD **)(a4 + 56);
  *(_QWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 176) = (*v12 & 0x200000) != 0;
  *(_BYTE *)(a1 + 196) = a5;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  sub_22F140C2C(a1, *(unsigned __int16 **)a3, *(unsigned __int16 **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) & 0x4000000000000) != 0)
    v13 = 2;
  else
    v13 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 536) & 1;
  *(_BYTE *)(a1 + 178) = v13;
  return a1;
}

uint64_t sub_22F140DA4(uint64_t a1, int a2, _DWORD *a3, unsigned __int16 *a4, unsigned __int16 *a5, uint64_t a6, char a7)
{
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0x1800000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24FAC7EB0;
  *(_DWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = a3;
  *(_BYTE *)(a1 + 176) = (*a3 & 0x200000) != 0;
  *(_BYTE *)(a1 + 196) = a7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  sub_22F140C2C(a1, a4, a5, a6);
  *(_BYTE *)(a1 + 26) = 1;
  return a1;
}

uint64_t sub_22F140E3C(uint64_t a1, int a2, _DWORD *a3, unsigned __int16 *a4, unsigned __int16 *a5, uint64_t a6, char a7)
{
  return sub_22F140DA4(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_22F140E44(int a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  _DWORD *v23;
  uint64_t v24;
  _BYTE v26[32];
  uint64_t v27[2];

  v9 = *(_QWORD *)(a5 + 88);
  v11 = a1 & 0x7FFFFFFF;
  v12 = *(_DWORD *)(v9 + 304);
  v13 = v12 + 1;
  if (v12 + 1 > 1)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v15 = -2 - v12;
      if (((*(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * ((-2 - v12) >> 6)) >> (-2 - v12)) & 1) != 0)
        v14 = (_DWORD *)(*(_QWORD *)(v9 + 200) + 24 * v15);
      else
        v14 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a5 + 88), v15, 0);
    }
    else
    {
      v14 = (_DWORD *)(*(_QWORD *)(v9 + 184) + 24 * v12);
    }
  }
  else
  {
    v14 = *(_DWORD **)(v9 + 184);
  }
  if ((*v14 & 0x7FFFFFFFu) <= v11
    && (v12 == -2
     || (v13 != *(_DWORD *)(v9 + 192)
       ? ((v13 & 0x80000000) != 0
        ? ((v19 = -3 - v12,
            ((*(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * ((-3 - v12) >> 6)) >> (-3 - v12)) & 1) == 0)
         ? (v18 = (_DWORD *)sub_22F1E1134(v9, v19, 0))
         : (v18 = (_DWORD *)(*(_QWORD *)(v9 + 200) + 24 * v19)))
        : (v18 = (_DWORD *)(*(_QWORD *)(v9 + 184) + 24 * v13)),
          v17 = *v18 & 0x7FFFFFFF)
       : (v17 = *(_DWORD *)(v9 + 216)),
         v17 > v11)))
  {
    v16 = *(_DWORD *)(v9 + 304);
  }
  else
  {
    v16 = sub_22F1E1EE8(v9, v11);
  }
  v20 = v16;
  sub_22E72C63C((_QWORD *)v9, v16, 0, (llvm::MemoryBufferRef *)v26);
  v21 = operator new();
  sub_22F140CA8(v21, v20, (uint64_t)v26, a5, 1);
  v22 = sub_22F1E2D38((uint64_t *)v9, a1, 0);
  *(_QWORD *)(v21 + 184) = v22;
  *(_QWORD *)(v21 + 152) = &v22[a4];
  v23 = sub_22E49F3DC((_QWORD *)v9, v20);
  if (v23)
    v24 = *v23 & 0x7FFFFFFF;
  else
    v24 = 0;
  v27[0] = v24 | (a2 << 32);
  v27[1] = a3 | 0x100000000;
  *(_DWORD *)(v21 + 160) = sub_22F1E1CA0(v9, v27, a4, 0, 0);
  *(_BYTE *)(v21 + 24) = 1;
  *(_BYTE *)(v21 + 177) = 1;
  return v21;
}

void *sub_22F141060@<X0>(void *__src@<X0>, size_t __len@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  const void *v7;
  void *v8;
  size_t v9;
  size_t v10;
  char v11;
  int v12;
  unint64_t v13;
  unint64_t size;
  unint64_t v15;
  int v16;
  std::string *v17;
  std::string::const_iterator v18;
  int v19;
  int v21;
  unint64_t v23;
  int v24;
  BOOL v25;
  std::string *v26;
  std::string::const_iterator v27;
  std::string *v28;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = __src;
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    a4->__r_.__value_.__l.__size_ = __len;
    a4->__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    a4->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    goto LABEL_8;
  }
  *((_BYTE *)&a4->__r_.__value_.__s + 23) = __len;
  v8 = a4;
  if (__len)
LABEL_8:
    __src = memmove(v8, v7, __len);
  *((_BYTE *)v8 + __len) = 0;
  v11 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v12 = v11;
  v13 = v11 & 0x7F;
  if (v12 >= 0)
    size = v13;
  else
    size = a4->__r_.__value_.__l.__size_;
  if (size)
  {
    v15 = 0;
    if (a3)
      v16 = 39;
    else
      v16 = 34;
    do
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = a4;
      else
        v17 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v18.__i_ = (char *)v17 + v15;
      v19 = v17->__r_.__value_.__s.__data_[v15];
      if (v19 == 92 || v16 == v19)
      {
        __src = std::string::insert(a4, v18, 92).__i_;
        v15 += 2;
        ++size;
      }
      else
      {
        v21 = v17->__r_.__value_.__s.__data_[v15];
        if (v21 == 13 || v21 == 10)
        {
          if (v15 < size - 1
            && ((v23 = v15 + 1, v24 = v17->__r_.__value_.__s.__data_[v15 + 1], v24 != 13)
              ? (v25 = v24 == 10)
              : (v25 = 1),
                v25 && *(unsigned __int8 *)v18.__i_ != v17->__r_.__value_.__s.__data_[v23]))
          {
            *v18.__i_ = 92;
            if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = a4;
            else
              v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
            v28->__r_.__value_.__s.__data_[v23] = 110;
          }
          else
          {
            *v18.__i_ = 92;
            if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = a4;
            else
              v26 = (std::string *)a4->__r_.__value_.__r.__words[0];
            v27.__i_ = &v26->__r_.__value_.__s.__data_[v15 + 1];
            __src = std::string::insert(a4, v27, 110).__i_;
            ++size;
          }
          v15 += 2;
        }
        else
        {
          ++v15;
        }
      }
    }
    while (v15 < size);
  }
  return __src;
}

unint64_t sub_22F141218(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v6 = a2;
  v7 = *(unsigned int *)(a1 + 4);
  v8 = (unint64_t)&a2[v7];
  v9 = *(unsigned __int16 *)(a1 + 16);
  v10 = v9 > 0x12;
  v11 = (1 << v9) & 0x76000;
  if (v10 || v11 == 0)
  {
    v17 = 0;
  }
  else
  {
    v13 = 0;
    v14 = a2;
    while ((unint64_t)v14 < v8)
    {
      v15 = *v14;
      if (v15 == 92 || v15 == 63)
      {
        v29 = 0;
        LOBYTE(v15) = sub_22F142EEC(v14, (int *)&v29, a3);
        v16 = v29;
      }
      else
      {
        v16 = 1;
      }
      v17 = v13 + 1;
      *(_BYTE *)(a4 + v13) = v15;
      v14 += v16;
      ++v13;
      if (v15 == 34)
        goto LABEL_14;
    }
    v17 = v13;
LABEL_14:
    if (v17 >= 2 && *(_BYTE *)(v17 + a4 - 2) == 82 && *(_BYTE *)(v17 + a4 - 1) == 34)
    {
      v18 = v6 + 1;
      v19 = v6 + 1 - v14;
      v20 = &v6[v17] - v14 + 1;
      v21 = v6 - 1;
      do
      {
        v22 = v21[v7];
        --v18;
        --v20;
        --v19;
        --v21;
      }
      while (v22 != 34);
      memcpy((void *)(a4 + v17), v14, v7 + v19);
      v17 = v7 + v20;
      v6 = &v18[v7];
    }
    else
    {
      v6 = v14;
    }
  }
  if ((unint64_t)v6 >= v8)
    return v17;
  do
  {
    v28 = 0;
    v23 = *v6;
    if (v23 == 63 || v23 == 92)
    {
      v24 = sub_22F142EEC(v6, (int *)&v28, a3);
      v25 = v28;
    }
    else
    {
      v28 = 1;
      v24 = *v6;
      v25 = 1;
    }
    v26 = v17 + 1;
    *(_BYTE *)(a4 + v17) = v24;
    v6 += v25;
    ++v17;
  }
  while ((unint64_t)v6 < v8);
  return v26;
}

void sub_22F1413E0(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  char *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::string::size_type v13;
  unsigned __int8 v14;

  v14 = 0;
  v9 = (char *)sub_22F1E2D38(a2, *(_DWORD *)a1, &v14);
  v10 = (unsigned __int8 *)v9;
  v11 = v14;
  if (a4)
    *a4 = v14;
  if (v11)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else if ((*(_WORD *)(a1 + 18) & 8) != 0)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    std::string::resize((std::string *)a5, *(unsigned int *)(a1 + 4), 0);
    if (*(char *)(a5 + 23) >= 0)
      v12 = a5;
    else
      v12 = *(_QWORD *)a5;
    v13 = sub_22F141218(a1, v10, a3, v12);
    std::string::resize((std::string *)a5, v13, 0);
  }
  else
  {
    sub_22E3B4274((_QWORD *)a5, v9, &v9[*(unsigned int *)(a1 + 4)], *(unsigned int *)(a1 + 4));
  }
}

unint64_t sub_22F1414C0(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, unsigned __int8 *a5)
{
  int v9;
  unsigned __int8 *v10;
  int v12;
  unint64_t result;
  uint64_t v14;
  unsigned __int8 v15;

  v9 = *(unsigned __int16 *)(a1 + 16);
  if (v9 != 6)
  {
    if ((*(_WORD *)(a1 + 18) & 0x40) != 0)
    {
      v10 = *(unsigned __int8 **)(a1 + 8);
      if ((v9 - 19) < 0xFFFFFFF4 || v10 == 0)
        goto LABEL_12;
      goto LABEL_16;
    }
    if ((v9 - 7) >= 6 && (v9 - 13) >= 6)
    {
      if (v9 != 1)
      {
        v14 = *(_QWORD *)(a1 + 8);
        if (v14)
        {
          *a2 = *(_QWORD *)(v14 + 16) + 16;
          return **(unsigned int **)(v14 + 16);
        }
      }
      goto LABEL_12;
    }
  }
  v10 = *(unsigned __int8 **)(a1 + 8);
  if (!v10)
  {
LABEL_12:
    v15 = 0;
    v10 = (unsigned __int8 *)sub_22F1E2D38(a3, *(_DWORD *)a1, &v15);
    v12 = v15;
    if (a5)
      *a5 = v15;
    if (v12)
    {
      result = 0;
      *a2 = (uint64_t)&unk_22F5D0126;
      return result;
    }
  }
LABEL_16:
  if ((*(_WORD *)(a1 + 18) & 8) != 0)
    return sub_22F141218(a1, v10, a4, *a2);
  *a2 = (uint64_t)v10;
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_22F1415D0(int a1, uint64_t a2, _QWORD *a3, _DWORD *a4, char a5)
{
  unint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  _DWORD *v14;
  int v15;
  _QWORD v17[2];
  char v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1 < 0)
    a1 = sub_22F1E22F0(a3, a1);
  v9 = sub_22E677168((uint64_t)a3, a1);
  v10 = v9;
  sub_22F1E1E78(a3, v9, (uint64_t)v17);
  if (!v18)
    return 1;
  v11 = (unsigned __int16 *)v17[0];
  v12 = v17[1];
  v13 = (unsigned __int16 *)(v17[0] + HIDWORD(v9));
  if ((a5 & 1) == 0 && (word_22F4ADB24[*(unsigned __int8 *)v13] & 7) != 0)
    return 1;
  v14 = sub_22E49F3DC(a3, v10);
  if (v14)
    v15 = *v14 & 0x7FFFFFFF;
  else
    v15 = 0;
  sub_22F140DA4((uint64_t)v17, v15, a4, v11, v13, (uint64_t)v11 + v12, 1);
  v21[66] = 1;
  sub_22F14651C(v17, a2);
  v17[0] = &unk_24FAC8A48;
  sub_22E730D24((uint64_t)v21);
  if (v19 != &v20)
    free(v19);
  return 0;
}

uint64_t sub_22F141740(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unsigned __int8 *v12;
  unsigned __int16 *v13;
  _DWORD v15[4];
  __int16 v16;
  const char *v17;
  unint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[72];
  unint64_t v23;
  uint64_t v24;

  v5 = a1;
  v24 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E677168((uint64_t)a2, a1);
  if ((_DWORD)v6)
  {
    v7 = v6;
    sub_22F1E1E78(a2, v6, (uint64_t)&v17);
    v8 = v19 ? v18 : 33;
    v9 = (unsigned __int16 *)(v19 ? v17 : "<<<<<INVALID SOURCE LOCATION>>>>>");
    if (v19)
    {
      v10 = HIDWORD(v7);
      if (HIDWORD(v7))
      {
        if (v18 > v10)
        {
          v11 = (unsigned __int16 *)&v17[v10];
          v12 = (unsigned __int8 *)&v17[v10];
          while ((word_22F4ADB24[*v12] & 2) == 0 || sub_22F410D78((unint64_t)v9, v12))
          {
            if (--v12 == (unsigned __int8 *)v9)
            {
              v13 = v9;
              goto LABEL_17;
            }
          }
          v13 = (unsigned __int16 *)(v12 + 1);
LABEL_17:
          if (v13 && v13 != v11)
          {
            sub_22F140DA4((uint64_t)&v17, v5 - v10, a3, v9, v13, (uint64_t)v9 + v8, 1);
            v22[66] = 1;
            while (1)
            {
              sub_22F14651C(&v17, (uint64_t)v15);
              if (v23 > (unint64_t)v11)
                break;
              if (v16 == 1)
                goto LABEL_26;
            }
            if (v23 - v15[1] <= (unint64_t)v11)
              v5 = v15[0];
            else
              v5 = v5;
LABEL_26:
            v17 = (const char *)&unk_24FAC8A48;
            sub_22E730D24((uint64_t)v22);
            if (v20 != &v21)
              free(v20);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_22F1418F4(int a1, unsigned int a2, uint64_t *a3, _QWORD *a4)
{
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  char v20;

  v20 = 0;
  v6 = sub_22F1E2D38(a3, a1, &v20);
  if (v20)
    return 0;
  if (!a2)
  {
    v17 = *(unsigned __int8 *)v6;
    if (v17 != 92 && v17 != 63)
      return 0;
  }
  v7 = 0;
  v8 = a2;
  while (1)
  {
    v9 = v6[v7];
    if (v9 == 92 || v9 == 63)
      break;
    if (a2 == (_DWORD)v7)
      return a2;
    ++v7;
  }
  v11 = a2;
  v12 = (unsigned __int8 *)&v6[v7];
  v18 = v7;
  if (v11 != (_DWORD)v7)
  {
    v13 = 0;
    v14 = v8 - v7;
    do
    {
      v15 = *v12;
      if (v15 == 92 || v15 == 63)
      {
        v19 = 0;
        sub_22F142EEC(v12, (int *)&v19, a4);
        v16 = v19;
      }
      else
      {
        v16 = 1;
      }
      v12 += v16;
      v18 = v16 + v18;
      ++v13;
    }
    while (v14 != v13);
    v9 = *v12;
  }
  if (v9 == 92 || v9 == 63)
    return v18 + sub_22F410CD8(v12) - (_DWORD)v12;
  else
    return v18;
}

uint64_t sub_22F141A3C(uint64_t result, unsigned int a2, _QWORD *a3, _DWORD *a4)
{
  int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  _BYTE v12[4];
  unsigned int v13;

  v11 = result;
  if (!(_DWORD)result)
    return result;
  if ((result & 0x80000000) == 0)
    goto LABEL_3;
  if (a2)
    return 0;
  result = sub_22F141AE0(result, a3, a4, &v11);
  if ((_DWORD)result)
  {
    LODWORD(result) = v11;
LABEL_3:
    v7 = sub_22F1415D0(result, (uint64_t)v12, a3, a4, 0);
    v8 = v13;
    if (v7)
      v8 = 0;
    v9 = v8 >= a2;
    v10 = v8 - a2;
    if (!v9)
      v10 = 0;
    return v11 + v10;
  }
  return result;
}

uint64_t sub_22F141AE0(int a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v7;
  char v8;
  uint64_t result;
  int v10;
  int v11;

  v7 = a1;
  if (a1 < 0)
    a1 = sub_22F1E238C(a2, a1);
  v8 = sub_22F1415D0(a1, (uint64_t)&v10, a2, a3, 0);
  result = 0;
  if ((v8 & 1) == 0)
  {
    if (v11)
    {
      v10 = 0;
      result = sub_22F1E2AD4((uint64_t)a2, v11 + v7, &v10);
      if ((_DWORD)result)
      {
        if (v10 < 0)
        {
          return sub_22F141AE0();
        }
        else
        {
          if (a4)
            *a4 = v10;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F141B98(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5;
  uint64_t result;
  int v7;

  v7 = 0;
  v5 = sub_22F1E2980(a2, a1, &v7);
  result = 0;
  if (v5)
  {
    if (v7 < 0)
    {
      return sub_22F141B98();
    }
    else
    {
      if (a4)
        *a4 = v7;
      return 1;
    }
  }
  return result;
}

unint64_t sub_22F141C1C(unint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;

  v4 = a2;
  v5 = a1;
  v6 = HIDWORD(a1);
  v48 = HIDWORD(a1);
  v49 = a1;
  v7 = 0;
  LODWORD(a1) = 0;
  if (v49 && (_DWORD)v6)
  {
    v10 = a2;
    v11 = v5 & 0x8000000080000000;
    if ((v5 & 0x8000000080000000) != 0x8000000000000000)
    {
      if (v11 == 0x80000000)
      {
        if (sub_22F141B98(v5, a3, (uint64_t)a4, &v49))
        {
          v13 = v5 & 0xFFFFFFFF00000000 | v49;
          LOBYTE(a2) = v4;
LABEL_19:
          a1 = sub_22F142128(v13, a2, (_QWORD *)a3, a4);
LABEL_20:
          v7 = a1 & 0xFFFFFFFF00000000;
          return a1 | v7;
        }
      }
      else
      {
        if (!v11)
          goto LABEL_18;
        v47 = 0;
        v14 = v5;
        if (sub_22F141B98(v5, a3, (uint64_t)a4, (_DWORD *)&v47 + 1))
        {
          if (v10)
          {
            if ((sub_22F141AE0(v6, (_QWORD *)a3, a4, &v47) & 1) != 0)
            {
              v16 = v47;
              v15 = HIDWORD(v47);
              v17 = sub_22F1421DC(v6, a3);
LABEL_23:
              v13 = v15 | (unint64_t)(v16 << 32);
              LOBYTE(a2) = v17;
              goto LABEL_19;
            }
          }
          else if (sub_22F141B98(v6, a3, (uint64_t)a4, &v47))
          {
            v16 = v47;
            v15 = HIDWORD(v47);
            v17 = v4;
            goto LABEL_23;
          }
        }
        v46 = 0;
        v19 = v5 & 0x7FFFFFFF;
        v20 = *(_DWORD *)(a3 + 304);
        v21 = v20 + 1;
        if (v20 + 1 > 1)
        {
          if ((v20 & 0x80000000) != 0)
          {
            v23 = -2 - v20;
            if (((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v20) >> 6)) >> (-2 - v20)) & 1) != 0)
            {
              v22 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v23);
            }
            else
            {
              v45 = *(_DWORD *)(a3 + 304);
              v22 = (_DWORD *)sub_22F1E1134(a3, v23, 0);
              v20 = v45;
            }
          }
          else
          {
            v22 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v20);
          }
        }
        else
        {
          v22 = *(_DWORD **)(a3 + 184);
        }
        if ((*v22 & 0x7FFFFFFFu) <= v19
          && (v20 == -2
           || (v21 != *(_DWORD *)(a3 + 192)
             ? ((v21 & 0x80000000) != 0
              ? ((v26 = -3 - v20,
                  ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-3 - v20) >> 6)) >> (-3 - v20)) & 1) == 0)
               ? (v25 = (_DWORD *)sub_22F1E1134(a3, v26, 0))
               : (v25 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v26)))
              : (v25 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v21)),
                v24 = *v25 & 0x7FFFFFFF)
             : (v24 = *(_DWORD *)(a3 + 216)),
               v24 > v19)))
        {
          v27 = *(_DWORD *)(a3 + 304);
        }
        else
        {
          v27 = sub_22F1E1EE8(a3, v19);
        }
        if (v27 + 1 >= 2)
        {
          if ((v27 & 0x80000000) != 0)
          {
            v29 = -2 - v27;
            v28 = ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v27) >> 6)) >> (-2 - v27)) & 1) != 0
                ? *(_QWORD *)(a3 + 200) + 24 * v29
                : sub_22F1E1134(a3, v29, &v46);
          }
          else
          {
            v28 = *(_QWORD *)(a3 + 184) + 24 * v27;
          }
          if (!v46 && *(_DWORD *)(v28 + 12) && !*(_DWORD *)(v28 + 16))
          {
            v31 = v6 & 0x7FFFFFFF;
            v32 = *(_DWORD *)(a3 + 304);
            v33 = v32 + 1;
            if (v32 + 1 > 1)
            {
              if ((v32 & 0x80000000) != 0)
              {
                if (((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v32) >> 6)) >> (-2 - v32)) & 1) != 0)
                {
                  v34 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * (-2 - v32));
                }
                else
                {
                  v34 = (_DWORD *)sub_22F1E1134(a3, -2 - v32, 0);
                  v33 = v32 + 1;
                  v31 = v6 & 0x7FFFFFFF;
                }
              }
              else
              {
                v34 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v32);
              }
            }
            else
            {
              v34 = *(_DWORD **)(a3 + 184);
            }
            if ((*v34 & 0x7FFFFFFFu) > v31)
              goto LABEL_59;
            if (v32 == -2
              || (v33 != *(_DWORD *)(a3 + 192)
                ? ((v33 & 0x80000000) != 0
                 ? ((v38 = -3 - v32,
                     ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-3 - v32) >> 6)) >> (-3 - v32)) & 1) == 0)
                  ? (_DWORD *)(v44 = v31, v37 = (_DWORD *)sub_22F1E1134(a3, v38, 0), v31 = v44)
                  : (v37 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v38)))
                 : (v37 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v33)),
                   v36 = *v37 & 0x7FFFFFFF)
                : (v36 = *(_DWORD *)(a3 + 216)),
                  v36 > v31))
            {
              v35 = *(_DWORD *)(a3 + 304);
            }
            else
            {
LABEL_59:
              v35 = sub_22F1E1EE8(a3, v31);
            }
            if (v35 + 1 >= 2)
            {
              if ((v35 & 0x80000000) != 0)
              {
                v40 = -2 - v35;
                v39 = ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v35) >> 6)) >> (-2 - v35)) & 1) != 0
                    ? *(_QWORD *)(a3 + 200) + 24 * v40
                    : sub_22F1E1134(a3, v40, &v46);
              }
              else
              {
                v39 = *(_QWORD *)(a3 + 184) + 24 * v35;
              }
              if (!v46)
              {
                v41 = *(_DWORD *)(v39 + 12);
                if (v41)
                {
                  if (!*(_DWORD *)(v39 + 16) && *(_DWORD *)(v28 + 12) == v41)
                  {
                    v42 = sub_22F1E2500((_QWORD *)a3, v14);
                    v43 = sub_22F1E2500((_QWORD *)a3, v6);
                    a1 = sub_22F141C1C(v42 | (unint64_t)(v43 << 32), v4, a3, a4);
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }
      }
LABEL_48:
      v7 = 0;
      LODWORD(a1) = 0;
      return a1 | v7;
    }
    if ((_BYTE)a2)
    {
      if (!sub_22F141AE0(v6, (_QWORD *)a3, a4, &v48))
        goto LABEL_48;
      v12 = sub_22F1421DC(v6, a3);
    }
    else
    {
      v18 = sub_22F141B98(v6, a3, (uint64_t)a4, &v48);
      v12 = v4;
      if (!v18)
        goto LABEL_48;
    }
    v5 = v5 | ((unint64_t)v48 << 32);
    LOBYTE(a2) = v12;
LABEL_18:
    v13 = v5;
    goto LABEL_19;
  }
  return a1 | v7;
}

uint64_t sub_22F142128(unint64_t a1, char a2, _QWORD *a3, _DWORD *a4)
{
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v5 = a1;
  v6 = HIDWORD(a1);
  if ((!a2 || (v6 = sub_22F141A3C(HIDWORD(a1), 0, a3, a4), (_DWORD)v6))
    && (v7 = sub_22E677168((uint64_t)a3, v5), (_DWORD)v7))
  {
    v8 = HIDWORD(v7);
    v15 = 0;
    v9 = sub_22E6C4D08((uint64_t)a3, v6, v7, &v15);
    v10 = v15 >= v8;
    v11 = !v9 || !v10;
    if (v9 && v10)
      v12 = v6 << 32;
    else
      v12 = 0;
    if (v11)
      v13 = 0;
    else
      v13 = v5;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  return v13 | v12;
}

uint64_t sub_22F1421DC(int a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  v3 = a1 & 0x7FFFFFFF;
  v4 = *(_DWORD *)(a2 + 304);
  v5 = v4 + 1;
  if (v4 + 1 > 1)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v7 = -2 - v4;
      if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v6 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v7);
      else
        v6 = (_DWORD *)sub_22F1E1134(a2, v7, 0);
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v4);
    }
  }
  else
  {
    v6 = *(_DWORD **)(a2 + 184);
  }
  if ((*v6 & 0x7FFFFFFFu) <= v3
    && (v4 == -2
     || (v5 != *(_DWORD *)(a2 + 192)
       ? ((v5 & 0x80000000) != 0
        ? ((v11 = -3 - v4,
            ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v4) >> 6)) >> (-3 - v4)) & 1) == 0)
         ? (v10 = (_DWORD *)sub_22F1E1134(a2, v11, 0))
         : (v10 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v11)))
        : (v10 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v5)),
          v9 = *v10 & 0x7FFFFFFF)
       : (v9 = *(_DWORD *)(a2 + 216)),
         v9 > v3)))
  {
    v8 = *(_DWORD *)(a2 + 304);
  }
  else
  {
    v8 = sub_22F1E1EE8(a2, v3);
  }
  if (v8 + 1 > 1)
  {
    if ((v8 & 0x80000000) != 0)
    {
      v13 = -2 - v8;
      if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v8) >> 6)) >> (-2 - v8)) & 1) != 0)
        v12 = *(_QWORD *)(a2 + 200) + 24 * v13;
      else
        v12 = sub_22F1E1134(a2, v13, 0);
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 184) + 24 * v8;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 184);
  }
  return *(unsigned __int8 *)(v12 + 20);
}

uint64_t sub_22F142368(unint64_t a1, unsigned int a2, _QWORD *a3, _DWORD *a4, _BYTE *a5)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  unsigned int v18;
  _QWORD v19[2];
  char v20;

  v7 = sub_22F141C1C(a1, a2, (uint64_t)a3, a4);
  v8 = HIDWORD(v7);
  if (HIDWORD(v7))
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9
    && (v10 = sub_22E677168((uint64_t)a3, v7), (v11 = v10) != 0)
    && ((v12 = HIDWORD(v10), v18 = 0, sub_22E6C4D08((uint64_t)a3, v8, v10, &v18))
      ? (v13 = v18 >= v12)
      : (v13 = 0),
        v13 && (sub_22F1E1E78(a3, v11, (uint64_t)v19), v20)))
  {
    v15 = v19[0];
    v14 = v19[1];
    if (a5)
      *a5 = 0;
    if (v14 >= v12)
      v16 = v12;
    else
      v16 = v14;
    return v15 + v16;
  }
  else
  {
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

const char *sub_22F142460(int a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  while (1)
  {
    v6 = *(_DWORD *)(a2 + 304);
    v7 = v6 + 1;
    if (v6 + 1 > 1)
    {
      if ((v6 & 0x80000000) != 0)
      {
        v9 = -2 - v6;
        if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
          v8 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v9);
        else
          v8 = (_DWORD *)sub_22F1E1134(a2, v9, 0);
      }
      else
      {
        v8 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v6);
      }
    }
    else
    {
      v8 = *(_DWORD **)(a2 + 184);
    }
    v10 = a1 & 0x7FFFFFFF;
    if ((*v8 & 0x7FFFFFFFu) <= v10
      && (v6 == -2
       || (v7 != *(_DWORD *)(a2 + 192)
         ? ((v7 & 0x80000000) != 0
          ? ((v14 = -3 - v6,
              ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v6) >> 6)) >> (-3 - v6)) & 1) == 0)
           ? (v13 = (_DWORD *)sub_22F1E1134(a2, v14, 0))
           : (v13 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v14)))
          : (v13 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v7)),
            v12 = *v13 & 0x7FFFFFFF)
         : (v12 = *(_DWORD *)(a2 + 216)),
           v12 > v10)))
    {
      v11 = *(_DWORD *)(a2 + 304);
    }
    else
    {
      v11 = sub_22F1E1EE8(a2, v10);
    }
    if (v11 + 1 > 1)
    {
      if ((v11 & 0x80000000) != 0)
      {
        v16 = -2 - v11;
        if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v11) >> 6)) >> (-2 - v11)) & 1) != 0)
          v15 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v16);
        else
          v15 = (_DWORD *)sub_22F1E1134(a2, v16, 0);
      }
      else
      {
        v15 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v11);
      }
    }
    else
    {
      v15 = *(_DWORD **)(a2 + 184);
    }
    v17 = v15[3];
    if (!v17)
    {
      v18 = 0;
      goto LABEL_76;
    }
    if (v15[4])
      break;
    v18 = sub_22F1E25A4((_QWORD *)a2, v17);
    a1 = v15[2];
    if (!a1)
      a1 = v15[3];
    if (a1 < 0)
    {
      v19 = *(_DWORD *)(a2 + 304);
      v20 = v19 + 1;
      if (v19 + 1 > 1)
      {
        if ((v19 & 0x80000000) != 0)
        {
          v22 = -2 - v19;
          v21 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v19) >> 6)) >> (-2 - v19)) & 1) != 0
                         ? *(_QWORD *)(a2 + 200) + 24 * v22
                         : sub_22F1E1134(a2, v22, 0));
        }
        else
        {
          v21 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v19);
        }
      }
      else
      {
        v21 = *(_DWORD **)(a2 + 184);
      }
      if ((*v21 & 0x7FFFFFFFu) <= (v18 & 0x7FFFFFFFu)
        && (v19 == -2
         || (v20 != *(_DWORD *)(a2 + 192)
           ? ((v20 & 0x80000000) != 0
            ? ((v26 = -3 - v19,
                ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v19) >> 6)) >> (-3 - v19)) & 1) == 0)
             ? (v25 = (_DWORD *)sub_22F1E1134(a2, v26, 0))
             : (v25 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v26)))
            : (v25 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v20)),
              v24 = *v25 & 0x7FFFFFFF)
           : (v24 = *(_DWORD *)(a2 + 216)),
             v24 > (v18 & 0x7FFFFFFFu))))
      {
        v23 = *(_DWORD *)(a2 + 304);
      }
      else
      {
        v23 = sub_22F1E1EE8(a2, v18 & 0x7FFFFFFF);
      }
      v27 = v23;
      v28 = v23 + 1;
      if (v23 + 1 > 1)
      {
        if ((v23 & 0x80000000) != 0)
        {
          v30 = -2 - v23;
          v29 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v23) >> 6)) >> (-2 - v23)) & 1) != 0
                         ? *(_QWORD *)(a2 + 200) + 24 * v30
                         : sub_22F1E1134(a2, v30, 0));
        }
        else
        {
          v29 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v23);
        }
      }
      else
      {
        v29 = *(_DWORD **)(a2 + 184);
      }
      if ((*v29 & 0x7FFFFFFFu) > (a1 & 0x7FFFFFFFu))
        continue;
      if (v27 != -2)
      {
        if (v28 == *(_DWORD *)(a2 + 192))
        {
          v31 = *(_DWORD *)(a2 + 216);
        }
        else
        {
          if ((v28 & 0x80000000) != 0)
          {
            v33 = -3 - v27;
            v32 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v27) >> 6)) >> (-3 - v27)) & 1) != 0
                           ? *(_QWORD *)(a2 + 200) + 24 * v33
                           : sub_22F1E1134(a2, v33, 0));
          }
          else
          {
            v32 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v28);
          }
          v31 = *v32 & 0x7FFFFFFF;
        }
        if (v31 <= (a1 & 0x7FFFFFFFu))
          continue;
      }
    }
    goto LABEL_74;
  }
  v18 = v15[3];
LABEL_74:
  if (v18 < 0)
    v18 = sub_22F1E238C((_QWORD *)a2, v18);
LABEL_76:
  v34 = v18;
  v35 = sub_22E677168(a2, v18);
  sub_22F1415D0(v34, (uint64_t)v40, (_QWORD *)a2, a3, 0);
  sub_22F1E1E78((_QWORD *)a2, v35, (uint64_t)v40);
  v36 = (const char *)v40[0];
  v37 = 33;
  if (v41)
    v37 = v40[1];
  else
    v36 = "<<<<<INVALID SOURCE LOCATION>>>>>";
  if (v37 >= HIDWORD(v35))
    v38 = HIDWORD(v35);
  else
    v38 = v37;
  return &v36[v38];
}

const char *sub_22F142898(int a1, _QWORD *a2, _DWORD *a3)
{
  int v5;
  int i;
  int v8;
  int v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  char v15;

  v5 = a1;
  for (i = a1; sub_22F1E2440(a2, v5, 0); i = v5)
    v5 = sub_22F1E25A4(a2, i);
  if (v5 < 0)
  {
    v5 = sub_22F1E238C(a2, i);
    if (v5 < 0)
      return 0;
  }
  if (sub_22E906358((uint64_t)a2, v5))
    return 0;
  v8 = sub_22F1E25A4(a2, i);
  if (v8 < 0)
    v8 = sub_22F1E238C(a2, v8);
  v9 = v8;
  v10 = sub_22E677168((uint64_t)a2, v8);
  sub_22F1415D0(v9, (uint64_t)v14, a2, a3, 0);
  sub_22F1E1E78(a2, v10, (uint64_t)v14);
  v11 = (const char *)v14[0];
  v12 = 33;
  if (v15)
    v12 = v14[1];
  else
    v11 = "<<<<<INVALID SOURCE LOCATION>>>>>";
  if (v12 >= HIDWORD(v10))
    v13 = HIDWORD(v10);
  else
    v13 = v12;
  return &v11[v13];
}

const char *sub_22F1429EC(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  const char *result;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 1)
    return 0;
  v16 = v2;
  v17 = v3;
  v5 = sub_22E677168((uint64_t)a2, a1);
  if (!(_DWORD)v5)
    return 0;
  v6 = v5;
  sub_22F1E1E78(a2, v5, (uint64_t)&v13);
  if (v15)
    v7 = v14;
  else
    v7 = 33;
  if (v15)
    v8 = v13;
  else
    v8 = "<<<<<INVALID SOURCE LOCATION>>>>>";
  if (!v15)
    return 0;
  v9 = HIDWORD(v6);
  result = 0;
  if (v7 <= v9)
    return result;
  if (v9)
  {
    do
    {
      if ((word_22F4ADB24[v8[v9]] & 2) != 0
        && !sub_22F410D78((unint64_t)v8, (unsigned __int8 *)&v8[v9]))
      {
        v11 = (uint64_t)&v8[v9 + 1];
        goto LABEL_22;
      }
      --v9;
    }
    while (v9);
    v11 = (uint64_t)v8;
    if (!v8)
      return 0;
  }
  else
  {
    v11 = (uint64_t)v8;
    if (!v8)
      return 0;
  }
LABEL_22:
  v12 = v11 - (_QWORD)v8;
  if (v7 < v12)
    v12 = v7;
  v13 = &v8[v12];
  v14 = v7 - v12;
  if (llvm::StringRef::find_first_not_of() == -1)
    return (const char *)&unk_22F5D0126;
  else
    return v13;
}

uint64_t sub_22F142B40(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  v6 = *(_QWORD **)(a1 + 88);
  v7 = a2;
  if (a2 < 0)
    a2 = sub_22F1E238C(*(_QWORD **)(a1 + 88), a2);
  v8 = (a2 + a3);
  v9 = sub_22F1E25A4(v6, v7);
  v11[0] = v8 | (v9 << 32);
  v11[1] = HIDWORD(v9) | 0x100000000;
  return sub_22F1E1CA0((uint64_t)v6, v11, a4, 0, 0);
}

uint64_t sub_22F142BC4(unsigned int a1, int a2, uint64_t *a3, _DWORD *a4, char a5)
{
  BOOL v8;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v18;
  int v19;
  int v21;
  int v22;
  unsigned __int16 v23;
  char v24;

  sub_22F410EA4(a1, a3, a4, &v21);
  if (v24)
    v8 = v23 == a2;
  else
    v8 = 0;
  if (!v8)
    return 0;
  v10 = v21;
  if ((a5 & 1) != 0)
  {
    v11 = sub_22F1E2D38(a3, v21, 0);
    v12 = v22;
    v13 = &v11[v22];
    v14 = *(unsigned __int8 *)v13;
    if ((word_22F4ADB24[*(unsigned __int8 *)v13] & 5) != 0)
    {
      v15 = 0;
      do
      {
        v14 = v13[v15 + 1];
        v16 = word_22F4ADB24[v13[++v15]];
      }
      while ((v16 & 5) != 0);
      v13 += v15;
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if (v14 == 13 || v14 == 10)
    {
      v18 = *((unsigned __int8 *)v13 + 1);
      v19 = v15 + 1;
      if (v18 == 13 || v18 == 10)
      {
        LODWORD(v15) = v15 + 2;
        if (v18 == v14)
          LODWORD(v15) = v19;
      }
      else
      {
        LODWORD(v15) = v15 + 1;
      }
    }
  }
  else
  {
    LODWORD(v15) = 0;
    v12 = v22;
  }
  return (v12 + v10 + v15);
}

uint64_t sub_22F142CD4(uint64_t a1, unsigned __int8 *a2, int *a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[32];
  unsigned __int8 *v24[4];
  _BYTE v25[39];
  char __src;

  v8 = *a2;
  if (v8 != 63)
  {
    if (v8 == 92)
    {
      v9 = *a3 + 1;
      *a3 = v9;
      v10 = a2 + 1;
      goto LABEL_4;
    }
LABEL_44:
    ++*a3;
    LOBYTE(v19) = *a2;
    return (char)v19;
  }
  if (a2[1] != 63)
    goto LABEL_44;
  if (a4)
    v20 = a1;
  else
    v20 = 0;
  v21 = **(_QWORD **)(a1 + 168);
  v19 = sub_22F143008((char)a2[2]);
  __src = v19;
  if (v20 && v19)
  {
    if ((v21 & 0x100000) == 0)
    {
      if (!*(_BYTE *)(v20 + 26))
      {
        sub_22F410E24((uint64_t)v25, v20, (int)a2, 1283);
        sub_22E3BB0B8((uint64_t)v25);
      }
      goto LABEL_44;
    }
    if (*(_BYTE *)(v20 + 26))
      goto LABEL_40;
    sub_22F410E24((uint64_t)v24, v20, (int)a2, 1281);
    sub_22E3B89A8(v24, &__src, 1uLL);
    sub_22E3BB0B8((uint64_t)v24);
    LOBYTE(v19) = __src;
  }
  if (!(_BYTE)v19)
    goto LABEL_44;
LABEL_40:
  if (a4)
    *(_WORD *)(a4 + 18) |= 8u;
  v9 = *a3 + 3;
  *a3 = v9;
  if (v19 != 92)
    return (char)v19;
  v10 = a2 + 3;
LABEL_4:
  if ((word_22F4ADB24[*v10] & 7) != 0)
  {
    v11 = 1;
    while (1)
    {
      v12 = v10[v11 - 1];
      if ((word_22F4ADB24[v10[v11 - 1]] & 7) == 0)
        break;
      ++v11;
      if (v12 == 13 || v12 == 10)
      {
        v14 = v11 - 1;
        v15 = v10[v11 - 1];
        if (v12 == v15)
          --v11;
        if (v15 == 10 || v15 == 13)
          v17 = v11;
        else
          v17 = v14;
        if (v17)
        {
          if (a4)
          {
            *(_WORD *)(a4 + 18) |= 8u;
            v18 = *v10;
            if (v18 != 10 && v18 != 13 && !*(_BYTE *)(a1 + 26))
            {
              sub_22F410E24((uint64_t)v23, a1, (int)v10, 1024);
              sub_22E3BB0B8((uint64_t)v23);
              v9 = *a3;
            }
          }
          *a3 = v9 + v17;
          LOBYTE(v19) = sub_22F142CD4(a1, &v10[v17], a3, a4);
          return (char)v19;
        }
        break;
      }
    }
  }
  LOBYTE(v19) = 92;
  return (char)v19;
}

uint64_t sub_22F142EEC(unsigned __int8 *a1, int *a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v14;
  int v15;

uint64_t sub_22F143008(int a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  result = 0;
  if (a1 > 59)
  {
    if (a1 == 61)
      v3 = 35;
    else
      v3 = 0;
    if (a1 == 62)
      v4 = 125;
    else
      v4 = v3;
    if (a1 == 60)
      return 123;
    else
      return v4;
  }
  else
  {
    switch(a1)
    {
      case '!':
        result = 124;
        break;
      case '\'':
        result = 94;
        break;
      case '(':
        result = 91;
        break;
      case ')':
        result = 93;
        break;
      case '-':
        result = 126;
        break;
      case '/':
        result = 92;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_22F143094(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  unsigned __int8 *v8;
  int v9;
  _BOOL4 v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  char v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t *__src;
  _BOOL4 v41;
  _BYTE v42[32];
  _BYTE v43[32];
  _BYTE v44[32];
  _BYTE v45[32];
  unsigned __int8 *v46;
  _BYTE v47[12];
  char v48;
  void *__p;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53[4];
  _BYTE v54[32];
  _BYTE v55[36];
  int v56[3];

  v8 = *a2;
  v9 = *v8;
  if (v9 == 63 || v9 == 92)
  {
    v56[0] = 0;
    LOBYTE(v9) = sub_22F142CD4(a1, v8, v56, 0);
    if (a4)
    {
LABEL_4:
      v10 = *(_BYTE *)(a1 + 26) == 0;
      goto LABEL_7;
    }
  }
  else
  {
    v56[0] = 1;
    if (a4)
      goto LABEL_4;
  }
  v10 = 0;
LABEL_7:
  if (v9 == 117)
  {
    v11 = 4;
  }
  else
  {
    if (v9 != 85)
      return 0;
    v11 = 8;
  }
  if ((**(_WORD **)(a1 + 168) & 0x101) == 0)
  {
    if (!v10)
      return 0;
    sub_22F410E24((uint64_t)v55, a1, a3, 1375);
    v19 = (uint64_t *)v55;
    goto LABEL_75;
  }
  v41 = v10;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = &(*a2)[v56[0]];
  __src = (uint64_t *)(v15 - 1);
  v39 = (int)v15;
  while (1)
  {
    v16 = *v15;
    if (v16 == 63 || v16 == 92)
    {
      v56[0] = 0;
      LOBYTE(v16) = sub_22F142CD4(a1, v15, v56, 0);
    }
    else
    {
      v56[0] = 1;
    }
    LOBYTE(v53[0]) = v16;
    if (!(v12 & 1 | (v16 != 123)))
    {
      v12 = 1;
      goto LABEL_23;
    }
    if ((v12 & (v16 == 125)) == 1)
    {
      v15 += v56[0];
      goto LABEL_36;
    }
    v17 = word_22F4A1464[v16];
    if (v17 == -1)
      break;
    if (v14 >> 28)
    {
      if (!v41)
        return 0;
      sub_22F410E24((uint64_t)&v46, a1, (int)__src, 1040);
      v25 = v46;
      if (!v46)
      {
        v25 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v47);
        v46 = v25;
      }
      v25[*v25 + 1] = 2;
      v26 = v46;
      v27 = *v46;
      *v46 = v27 + 1;
      *(_QWORD *)&v26[8 * v27 + 16] = 0;
      goto LABEL_74;
    }
    v14 = v17 | (16 * v14);
    ++v13;
LABEL_23:
    v15 += v56[0];
    if (v13 == v11 && (v12 & 1) == 0)
    {
      v18 = 2;
      goto LABEL_26;
    }
  }
  if ((v12 & 1) != 0)
  {
    if (!v41)
      return 0;
    v20 = *(_QWORD *)(a1 + 184);
    v21 = a1;
    v22 = 1315;
    goto LABEL_35;
  }
LABEL_36:
  if (!v13)
  {
    if (!v41)
      return 0;
    if ((v12 & (v16 == 125)) != 0)
      v30 = 1314;
    else
      v30 = 1373;
    sub_22F410E24((uint64_t)&v46, a1, (int)*a2, v30);
    v23 = __src;
    goto LABEL_73;
  }
  if (v13 == v11)
    v24 = 1;
  else
    v24 = v12 & (v16 == 125);
  if ((v24 & 1) == 0)
  {
    if (!v41)
      return 0;
    sub_22F410E24((uint64_t)v54, a1, *(_QWORD *)(a1 + 184), 1372);
    sub_22E3BB0B8((uint64_t)v54);
    v14 = 0;
    if (v9 == 117 || v13 != 4)
      return v14;
    v32 = *(_QWORD *)(a1 + 144);
    v33 = (_DWORD)__src - v32;
    v34 = *(_DWORD *)(a1 + 160);
    if (v34 < 0)
    {
      v35 = sub_22F142B40(*(_QWORD *)(a1 + 8), v34, v33, 1);
      v34 = *(_DWORD *)(a1 + 160);
      v36 = v39 - *(_DWORD *)(a1 + 144);
      if (v34 < 0)
      {
        v37 = sub_22F142B40(*(_QWORD *)(a1 + 8), v34, v36, 1);
        goto LABEL_89;
      }
    }
    else
    {
      v35 = v34 + v33;
      v36 = v39 - v32;
    }
    v37 = (v34 + v36);
LABEL_89:
    v38 = (unsigned __int8 *)(v35 | (unint64_t)(v37 << 32));
    sub_22F410E24((uint64_t)v53, a1, (int)__src, 1260);
    v48 = 0;
    *(_QWORD *)&v47[4] = 0;
    v50 = 0;
    v51 = 0x100000000000000;
    v52 = 0;
    v46 = v38;
    v47[0] = 0;
    __p = (void *)117;
    sub_22E6D82D0(v53, &v46);
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
    v19 = v53;
    goto LABEL_75;
  }
  if ((v12 & (v16 == 125)) != 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      sub_22F410E24((uint64_t)v45, a1, *(_QWORD *)(a1 + 184), 1202);
      sub_22E3BB0B8((uint64_t)v45);
    }
    v18 = 4;
    v11 = v13;
    if (!a4)
      goto LABEL_28;
LABEL_27:
    *(_WORD *)(a4 + 18) |= 0x40u;
    if (v15 - *a2 == v18 + v11)
      goto LABEL_28;
    while (*a2 != v15)
      sub_22F411378(a1, a2, a4);
  }
  else
  {
    v18 = 2;
    v11 = v13;
LABEL_26:
    if (a4)
      goto LABEL_27;
LABEL_28:
    *a2 = v15;
  }
  if ((**(_QWORD **)(a1 + 168) & 0x40000000) != 0)
    return v14;
  if (v14 > 0x9F)
  {
    v28 = v14 & 0xFFFFF800;
    if ((v14 & 0xFFFFF800) == 0xD800)
      v14 = 0;
    else
      v14 = v14;
    if (!a4 || v28 != 55296)
      return v14;
    if (!*(_QWORD *)(a1 + 8))
      return 0;
    v29 = *(_QWORD *)(a1 + 184);
    if ((**(_QWORD **)(a1 + 168) & 0x300) == 0x100)
    {
      sub_22F410E24((uint64_t)v43, a1, v29, 1374);
      v19 = (uint64_t *)v43;
    }
    else
    {
      sub_22F410E24((uint64_t)v42, a1, v29, 1186);
      v19 = (uint64_t *)v42;
    }
LABEL_75:
    sub_22E3BB0B8((uint64_t)v19);
    return 0;
  }
  if ((v14 - 36) > 0x3C || ((1 << (v14 - 36)) & 0x1000000010000001) == 0)
  {
    if (a4 && *(_QWORD *)(a1 + 8))
    {
      if ((v14 - 127) <= 0xFFFFFFA0)
      {
        sub_22F410E24((uint64_t)v44, a1, *(_QWORD *)(a1 + 184), 1183);
        v19 = (uint64_t *)v44;
        goto LABEL_75;
      }
      LOBYTE(v53[0]) = v14;
      v20 = *(_QWORD *)(a1 + 184);
      v21 = a1;
      v22 = 1184;
LABEL_35:
      sub_22F410E24((uint64_t)&v46, v21, v20, v22);
      v23 = v53;
LABEL_73:
      sub_22E3B89A8(&v46, v23, 1uLL);
LABEL_74:
      v19 = (uint64_t *)&v46;
      goto LABEL_75;
    }
    return 0;
  }
  return v14;
}

BOOL sub_22F1435D8(unsigned int a1, int a2)
{
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;

  if ((a2 & 0x40000000) != 0)
    return 0;
  if (a1 == 36 && (a2 & 0x20000000) != 0)
    return 1;
  if ((a2 & 0x100) != 0)
  {
    if (a1 == 95)
      return 1;
    v10 = (char *)&unk_22F4A9F38;
    v11 = 655;
    do
    {
      v12 = v11 >> 1;
      v13 = &v10[8 * (v11 >> 1)];
      v14 = *((_DWORD *)v13 + 1);
      v15 = v13 + 8;
      v11 += ~(v11 >> 1);
      if (v14 < a1)
        v10 = v15;
      else
        v11 = v12;
    }
    while (v11);
    if (v10 != (char *)&unk_22F4AB3B0 && *(_DWORD *)v10 <= a1)
      return 1;
    v3 = (unsigned int *)&unk_22F4AB3B0;
    v16 = 363;
    do
    {
      v17 = v16 >> 1;
      v18 = &v3[2 * (v16 >> 1)];
      v19 = v18[1];
      v20 = v18 + 2;
      v16 += ~(v16 >> 1);
      if (v19 < a1)
        v3 = v20;
      else
        v16 = v17;
    }
    while (v16);
    v9 = (unsigned int *)&unk_22F4ABF08;
  }
  else if ((a2 & 2) != 0)
  {
    v3 = (unsigned int *)&unk_22F4ABF08;
    v21 = 45;
    do
    {
      v22 = v21 >> 1;
      v23 = &v3[2 * (v21 >> 1)];
      v24 = v23[1];
      v25 = v23 + 2;
      v21 += ~(v21 >> 1);
      if (v24 < a1)
        v3 = v25;
      else
        v21 = v22;
    }
    while (v21);
    v9 = (unsigned int *)&unk_22F4AC070;
  }
  else
  {
    v3 = (unsigned int *)&unk_22F4AC070;
    v4 = 246;
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[2 * (v4 >> 1)];
      v7 = v6[1];
      v8 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (v7 < a1)
        v3 = v8;
      else
        v4 = v5;
    }
    while (v4);
    v9 = (unsigned int *)&unk_22F4AC820;
  }
  return v3 != v9 && *v3 <= a1;
}

void sub_22F14373C(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v14;
  _BOOL4 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _BYTE v39[72];
  _QWORD *v40;
  __int128 v41;
  _QWORD v42[11];

  if (a3 >= 0x80)
  {
    v42[9] = v6;
    v42[10] = v7;
    v14 = sub_22F143F38(a3, a2);
    v15 = (v14 & 1) != 0 || sub_22F1435D8(a3, a2);
    v16 = a6 ? v14 : v15;
    if ((v16 & 1) == 0)
    {
      v17 = a6 & ~v14 & v15;
      v40 = v42;
      v41 = xmmword_22F481F50;
      sub_22F242C48((uint64_t)v39, (uint64_t)&v40);
      llvm::write_hex();
      if (!a6 || (_DWORD)v17)
      {
        *(_DWORD *)(a1 + 312) = a4;
        *(_DWORD *)(a1 + 316) = 1029;
        if (*(char *)(a1 + 311) < 0)
        {
          **(_BYTE **)(a1 + 288) = 0;
          *(_QWORD *)(a1 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 288) = 0;
          *(_BYTE *)(a1 + 311) = 0;
        }
        v35 = (unsigned __int8 *)(a1 + 320);
        v36 = 0;
        v37 = a1;
        v38 = 1;
        *(_BYTE *)(a1 + 320) = 0;
        *(_DWORD *)(a1 + 664) = 0;
        v21 = *(unsigned int *)(a1 + 776);
        if ((_DWORD)v21)
        {
          v22 = *(_QWORD *)(a1 + 768);
          v23 = 56 * v21;
          do
          {
            if (*(char *)(v22 + v23 - 9) < 0)
              operator delete(*(void **)(v22 + v23 - 32));
            v23 -= 56;
          }
          while (v23);
        }
        *(_DWORD *)(a1 + 776) = 0;
        sub_22E4D6448(a1 + 656, a4, a5);
        sub_22E3B89A8(&v35, v40, v41);
        v24 = v35;
        if (!v35)
        {
          v24 = (unsigned __int8 *)sub_22E3B8AAC(v36);
          v35 = v24;
        }
        v24[*v24 + 1] = 2;
        v25 = v35;
        v26 = *v35;
        *v35 = v26 + 1;
        *(_QWORD *)&v25[8 * v26 + 16] = v17;
      }
      else
      {
        *(_DWORD *)(a1 + 312) = a4;
        *(_DWORD *)(a1 + 316) = 1028;
        if (*(char *)(a1 + 311) < 0)
        {
          **(_BYTE **)(a1 + 288) = 0;
          *(_QWORD *)(a1 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 288) = 0;
          *(_BYTE *)(a1 + 311) = 0;
        }
        v35 = (unsigned __int8 *)(a1 + 320);
        v36 = 0;
        v37 = a1;
        v38 = 1;
        *(_BYTE *)(a1 + 320) = 0;
        *(_DWORD *)(a1 + 664) = 0;
        v18 = *(unsigned int *)(a1 + 776);
        if ((_DWORD)v18)
        {
          v19 = *(_QWORD *)(a1 + 768);
          v20 = 56 * v18;
          do
          {
            if (*(char *)(v19 + v20 - 9) < 0)
              operator delete(*(void **)(v19 + v20 - 32));
            v20 -= 56;
          }
          while (v20);
        }
        *(_DWORD *)(a1 + 776) = 0;
        sub_22E4D6448(a1 + 656, a4, a5);
        sub_22E3B89A8(&v35, v40, v41);
      }
      v30 = 0;
      v29 = 0;
      v32 = 0;
      v33 = 0;
      __p = 0;
      v34 = 0;
      v27 = a4;
      v28 = a5;
      sub_22E6D82D0((uint64_t *)&v35, &v27);
      if (SHIBYTE(v33) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v35);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v39);
      if (v40 != v42)
        free(v40);
    }
  }
}

unint64_t sub_22F1439DC(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 144);
  v5 = a2 - v4;
  v6 = *(_DWORD *)(a1 + 160);
  if (v6 < 0)
  {
    v7 = sub_22F142B40(*(_QWORD *)(a1 + 8), v6, v5, 1);
    v6 = *(_DWORD *)(a1 + 160);
    v8 = a3 - *(_DWORD *)(a1 + 144);
    if (v6 < 0)
    {
      v10 = sub_22F142B40(*(_QWORD *)(a1 + 8), v6, v8, 1);
      return v7 | (unint64_t)(v10 << 32);
    }
  }
  else
  {
    v7 = v6 + v5;
    v8 = a3 - v4;
  }
  v10 = (v6 + v8);
  return v7 | (unint64_t)(v10 << 32);
}

uint64_t sub_22F143A60(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;

  result = sub_22F1CF68C(*(_QWORD *)(a1 + 32), 0x509u, a3, a1);
  if ((_DWORD)result != 1)
  {
    v11 = (char *)&unk_22F4AC070;
    v12 = 246;
    do
    {
      v13 = v12 >> 1;
      v14 = &v11[8 * (v12 >> 1)];
      v15 = *((_DWORD *)v14 + 1);
      v16 = v14 + 8;
      v12 += ~(v12 >> 1);
      if (v15 < a2)
        v11 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v11 == (char *)&unk_22F4AC820 || *(_DWORD *)v11 > a2)
    {
      *(_DWORD *)(a1 + 312) = a3;
      *(_DWORD *)(a1 + 316) = 1289;
      if (*(char *)(a1 + 311) < 0)
      {
        **(_BYTE **)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 288) = 0;
        *(_BYTE *)(a1 + 311) = 0;
      }
      v23 = a1 + 320;
      v33 = a1 + 320;
      v34 = 0;
      v35 = a1;
      v36 = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 664) = 0;
      v24 = *(unsigned int *)(a1 + 776);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(a1 + 768);
        v26 = 56 * v24;
        do
        {
          if (*(char *)(v25 + v26 - 9) < 0)
            operator delete(*(void **)(v25 + v26 - 32));
          v26 -= 56;
        }
        while (v26);
      }
      *(_DWORD *)(a1 + 776) = 0;
      sub_22E4D6448(a1 + 656, a3, a4);
      v27 = *(unsigned __int8 *)(a1 + 320);
      *(_BYTE *)(v23 + v27 + 1) = 2;
      *(_BYTE *)(a1 + 320) = v27 + 1;
      *(_QWORD *)(v23 + 8 * v27 + 16) = 0;
      return sub_22E3BB0B8((uint64_t)&v33);
    }
    if (a5)
    {
      v17 = (char *)&unk_22F4AC868;
      v18 = 14;
      do
      {
        v19 = v18 >> 1;
        v20 = &v17[8 * (v18 >> 1)];
        v21 = *((_DWORD *)v20 + 1);
        v22 = v20 + 8;
        v18 += ~(v18 >> 1);
        if (v21 < a2)
          v17 = v22;
        else
          v18 = v19;
      }
      while (v18);
      if (v17 != (char *)&unk_22F4AC8D8 && *(_DWORD *)v17 <= a2)
      {
        *(_DWORD *)(a1 + 312) = a3;
        *(_DWORD *)(a1 + 316) = 1289;
        if (*(char *)(a1 + 311) < 0)
        {
          **(_BYTE **)(a1 + 288) = 0;
          *(_QWORD *)(a1 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 288) = 0;
          *(_BYTE *)(a1 + 311) = 0;
        }
        v28 = a1 + 320;
        v33 = a1 + 320;
        v34 = 0;
        v35 = a1;
        v36 = 1;
        *(_BYTE *)(a1 + 320) = 0;
        *(_DWORD *)(a1 + 664) = 0;
        v29 = *(unsigned int *)(a1 + 776);
        if ((_DWORD)v29)
        {
          v30 = *(_QWORD *)(a1 + 768);
          v31 = 56 * v29;
          do
          {
            if (*(char *)(v30 + v31 - 9) < 0)
              operator delete(*(void **)(v30 + v31 - 32));
            v31 -= 56;
          }
          while (v31);
        }
        *(_DWORD *)(a1 + 776) = 0;
        sub_22E4D6448(a1 + 656, a3, a4);
        v32 = *(unsigned __int8 *)(a1 + 320);
        *(_BYTE *)(v28 + v32 + 1) = 2;
        *(_BYTE *)(a1 + 320) = v32 + 1;
        *(_QWORD *)(v28 + 8 * v32 + 16) = 1;
        return sub_22E3BB0B8((uint64_t)&v33);
      }
    }
  }
  return result;
}

void sub_22F143CD4(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[2];
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  __int128 v28;
  uint64_t v29;

  v7 = 49;
  v8 = &unk_22F4AC8D8;
  do
  {
    v9 = v7 >> 1;
    v10 = (unsigned int *)&v8[8 * (v7 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v7 += ~(v7 >> 1);
    if (v12 < a2)
      v8 = v11;
    else
      v7 = v9;
  }
  while (v7);
  if (*(_DWORD *)v8 == a2)
  {
    v27 = &v29;
    v28 = xmmword_22F481F50;
    sub_22F242C48((uint64_t)&v23, (uint64_t)&v27);
    llvm::write_hex();
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
    if (v8[4])
    {
      v22[0] = v8[4];
      v22[1] = 0;
      *(_DWORD *)(a1 + 312) = a3;
      *(_DWORD *)(a1 + 316) = 1379;
      if (*(char *)(a1 + 311) < 0)
      {
        **(_BYTE **)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 288) = 0;
        *(_BYTE *)(a1 + 311) = 0;
      }
      v23 = (unsigned __int8 *)(a1 + 320);
      v24 = 0;
      v25 = a1;
      v26 = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 664) = 0;
      v13 = *(unsigned int *)(a1 + 776);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(a1 + 768);
        v15 = 56 * v13;
        do
        {
          if (*(char *)(v14 + v15 - 9) < 0)
            operator delete(*(void **)(v14 + v15 - 32));
          v15 -= 56;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 776) = 0;
      sub_22E4D6448(a1 + 656, a3, a4);
      sub_22E3B89A8(&v23, v27, v28);
      v16 = v23;
      if (!v23)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC(v24);
        v23 = v16;
      }
      v16[*v16 + 1] = 1;
      v17 = v23;
      v18 = *v23;
      *v23 = v18 + 1;
      *(_QWORD *)&v17[8 * v18 + 16] = v22;
    }
    else
    {
      *(_DWORD *)(a1 + 312) = a3;
      *(_DWORD *)(a1 + 316) = 1380;
      if (*(char *)(a1 + 311) < 0)
      {
        **(_BYTE **)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 288) = 0;
        *(_BYTE *)(a1 + 311) = 0;
      }
      v23 = (unsigned __int8 *)(a1 + 320);
      v24 = 0;
      v25 = a1;
      v26 = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 664) = 0;
      v19 = *(unsigned int *)(a1 + 776);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD *)(a1 + 768);
        v21 = 56 * v19;
        do
        {
          if (*(char *)(v20 + v21 - 9) < 0)
            operator delete(*(void **)(v20 + v21 - 32));
          v21 -= 56;
        }
        while (v21);
      }
      *(_DWORD *)(a1 + 776) = 0;
      sub_22E4D6448(a1 + 656, a3, a4);
      sub_22E3B89A8(&v23, v27, v28);
    }
    sub_22E3BB0B8((uint64_t)&v23);
    if (v27 != &v29)
      free(v27);
  }
}

BOOL sub_22F143F38(unsigned int a1, int a2)
{
  char v2;
  _BOOL8 result;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  _DWORD *v10;
  __int16 *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;

  v2 = a2;
  if ((a2 & 0x40000000) != 0)
    return 0;
  if ((a2 & 0x100) != 0)
  {
    if (a1 == 95)
      return 1;
    v12 = (char *)&unk_22F4A9F38;
    v13 = 655;
    do
    {
      v14 = v13 >> 1;
      v15 = &v12[8 * (v13 >> 1)];
      v16 = *((_DWORD *)v15 + 1);
      v17 = v15 + 8;
      v13 += ~(v13 >> 1);
      if (v16 < a1)
        v12 = v17;
      else
        v13 = v14;
    }
    while (v13);
    if (v12 != (char *)&unk_22F4AB3B0)
      return *(_DWORD *)v12 <= a1;
    return 0;
  }
  result = sub_22F1435D8(a1, a2);
  if (!result)
    return result;
  if ((v2 & 2) != 0)
  {
    v5 = &unk_22F4ACA68;
    v18 = 4;
    do
    {
      v19 = v18 >> 1;
      v20 = &v5[2 * (v18 >> 1)];
      v21 = v20[1];
      v22 = v20 + 2;
      v18 += ~(v18 >> 1);
      if (v21 < a1)
        v5 = v22;
      else
        v18 = v19;
    }
    while (v18);
    v11 = &jpt_22F149E94;
  }
  else
  {
    v5 = &unk_22F4AC868;
    v6 = 14;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[2 * (v6 >> 1)];
      v9 = v8[1];
      v10 = v8 + 2;
      v6 += ~(v6 >> 1);
      if (v9 < a1)
        v5 = v10;
      else
        v6 = v7;
    }
    while (v6);
    v11 = (__int16 *)&unk_22F4AC8D8;
  }
  if (v5 != (_DWORD *)v11)
    return *v5 > a1;
  return 1;
}

uint64_t sub_22F14407C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _WORD *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  __int16 i;
  int v22;
  _BYTE v23[36];
  int v24;
  unsigned __int8 *v25;
  unsigned int v26;

  v25 = a3;
  do
  {
    v5 = v25;
    v6 = *v25;
    v7 = word_22F4ADB24[v6];
    if ((v7 & 0xE8) != 0)
    {
      v8 = v25 + 1;
      goto LABEL_18;
    }
    if ((_DWORD)v6 == 63 || (_DWORD)v6 == 92)
    {
      v24 = 0;
      LOBYTE(v6) = sub_22F142CD4(a1, v25, &v24, 0);
      v7 = word_22F4ADB24[v6];
    }
    else
    {
      v24 = 1;
    }
    if ((v7 & 0xE8) != 0)
      goto LABEL_9;
    if (v6 == 36)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 3) & 0x20) != 0)
      {
        if (!*(_BYTE *)(a1 + 26))
        {
          sub_22F410E24((uint64_t)v23, a1, (int)v5, 1203);
          sub_22E3BB0B8((uint64_t)v23);
        }
LABEL_9:
        if (v24 == 1)
        {
          v9 = 1;
        }
        else
        {
          v26 = 0;
          sub_22F142CD4(a1, v5, (int *)&v26, a2);
          v9 = v26;
        }
        v8 = &v5[v9];
LABEL_18:
        v25 = v8;
LABEL_19:
        v10 = 2;
        continue;
      }
    }
    else if (v6 == 92)
    {
      if ((sub_22F411194(a1, &v25, v24, a2) & 1) != 0)
        goto LABEL_19;
    }
    else if ((v6 & 0x80) != 0 && (sub_22F4113DC(a1, (uint64_t *)&v25) & 1) != 0)
    {
      goto LABEL_19;
    }
    v10 = 3;
  }
  while (v10 == 2);
  v11 = *(_QWORD *)(a1 + 184);
  v12 = v25;
  v13 = (_DWORD)v25 - v11;
  *(_DWORD *)(a2 + 4) = (_DWORD)v25 - v11;
  v14 = v11 - *(_DWORD *)(a1 + 144);
  v15 = *(_DWORD *)(a1 + 160);
  if (v15 < 0)
    v16 = sub_22F142B40(*(_QWORD *)(a1 + 8), v15, v14, v13);
  else
    v16 = v15 + v14;
  *(_DWORD *)a2 = v16;
  *(_WORD *)(a2 + 16) = 6;
  *(_QWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a2 + 8) = v11;
  if (*(_BYTE *)(a1 + 26))
    return 1;
  v18 = sub_22F18F0FC(*(_QWORD *)(a1 + 8), a2);
  v19 = *(_QWORD *)(a1 + 8);
  if (v19
    && *(_QWORD *)(v19 + 752)
    && *(_DWORD *)(a1 + 160) + (_DWORD)v12 - *(_DWORD *)(a1 + 144) == *(_DWORD *)(v19 + 764))
  {
    *(_WORD *)(a2 + 16) = 3;
    v20 = v12 + 1;
    if ((unint64_t)(v12 + 1) < *(_QWORD *)(a1 + 152))
    {
      for (i = word_22F4ADB24[*v20]; (i & 0xE8) != 0; i = word_22F4ADB24[v22])
        v22 = *++v20;
    }
    *(_QWORD *)(a1 + 184) = v20;
    return 1;
  }
  else
  {
    if ((*((_BYTE *)v18 + 3) & 0x80) == 0)
      return 1;
    return sub_22F18F434(v19, a2);
  }
}

uint64_t sub_22F1442D0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _BYTE v31[32];
  int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned int v35;

  while (1)
  {
    v3 = a3;
    v4 = a2;
    v5 = a1;
    v34 = a3;
    v6 = *a3;
    if (v6 == 63 || v6 == 92)
    {
      v33 = 0;
      LOBYTE(v6) = sub_22F142CD4(a1, a3, (int *)&v33, 0);
    }
    else
    {
      v33 = 1;
    }
    if ((word_22F4ADB24[v6] & 0x1E8) != 0)
    {
      do
      {
        v7 = v6;
        if (v33 == 1)
        {
          v8 = 1;
        }
        else
        {
          v35 = 0;
          sub_22F142CD4(v5, v3, (int *)&v35, v4);
          v8 = v35;
        }
        v3 += v8;
        v34 = v3;
        v6 = *v3;
        if (v6 == 63 || v6 == 92)
        {
          v33 = 0;
          LOBYTE(v6) = sub_22F142CD4(v5, v3, (int *)&v33, 0);
        }
        else
        {
          v33 = 1;
        }
      }
      while ((word_22F4ADB24[v6] & 0x1E8) != 0);
    }
    else
    {
      v7 = 0;
    }
    if (v6 <= 0x2Cu)
      break;
    if (v6 != 45)
    {
      if (v6 == 92)
      {
        if (!sub_22F411194(v5, &v34, v33, v4))
          goto LABEL_40;
      }
      else
      {
LABEL_39:
        if ((v6 & 0x80) == 0 || !sub_22F4113DC(v5, (uint64_t *)&v34))
          goto LABEL_40;
      }
      a3 = v34;
      goto LABEL_37;
    }
    if ((v7 & 0xDF) == 0x45)
    {
      v9 = *(_QWORD **)(v5 + 168);
      if ((*(_BYTE *)v9 & 0x20) == 0 || !sub_22F411760(*(unsigned __int8 **)(v5 + 184), v9))
        goto LABEL_28;
    }
LABEL_21:
    if (v6 != 45 && v6 != 43 || (v7 & 0xDF) != 0x50)
      goto LABEL_40;
    v10 = *(uint64_t **)(v5 + 168);
    v11 = *v10;
    if ((*v10 & 1) == 0)
    {
      v28 = *(unsigned __int8 **)(v5 + 184);
      if (!sub_22F411760(v28, v10))
        goto LABEL_40;
      v12 = v34;
      if ((v11 & 0x800) == 0)
      {
        v29 = (unsigned __int8 *)memchr(v28, 95, v34 - v28);
        v30 = v29 ? v29 : v12;
        if (v30 != v12)
          goto LABEL_40;
      }
    }
    else
    {
LABEL_28:
      v12 = v34;
    }
    if (v33 == 1)
    {
      v13 = 1;
    }
    else
    {
      v35 = 0;
      sub_22F142CD4(v5, v12, (int *)&v35, v4);
      v13 = v35;
    }
    a3 = &v12[v13];
LABEL_37:
    a1 = v5;
    a2 = v4;
  }
  if (v6 != 39)
  {
    if (v6 != 43)
      goto LABEL_39;
    goto LABEL_21;
  }
  v14 = *(uint64_t **)(v5 + 168);
  v15 = *v14;
  if ((*v14 & 0x408) == 0
    || ((v32 = 0, v16 = v33, v17 = v3[v33], v17 != 63) && v17 != 92
      ? (v32 = 1)
      : (LOBYTE(v17) = sub_22F142EEC(&v3[v33], &v32, v14)),
        (word_22F4ADB24[v17] & 0xE8) == 0))
  {
LABEL_40:
    v18 = *(_QWORD *)(v5 + 184);
    v19 = v34;
    v20 = (_DWORD)v34 - v18;
    *(_DWORD *)(v4 + 4) = (_DWORD)v34 - v18;
    v21 = v18 - *(_DWORD *)(v5 + 144);
    v22 = *(_DWORD *)(v5 + 160);
    if (v22 < 0)
      result = sub_22F142B40(*(_QWORD *)(v5 + 8), v22, v21, v20);
    else
      result = (v22 + v21);
    *(_DWORD *)v4 = result;
    *(_WORD *)(v4 + 16) = 7;
    *(_QWORD *)(v5 + 184) = v19;
    *(_QWORD *)(v4 + 8) = v18;
    return result;
  }
  if (!*(_BYTE *)(v5 + 26))
  {
    if ((v15 & 0x100) != 0)
      v27 = 1293;
    else
      v27 = 1288;
    sub_22F410E24((uint64_t)v31, v5, (int)v3, v27);
    sub_22E3BB0B8((uint64_t)v31);
    v3 = v34;
  }
  if (v16 == 1)
  {
    v24 = 1;
  }
  else
  {
    v35 = 0;
    sub_22F142CD4(v5, v3, (int *)&v35, v4);
    v24 = v35;
  }
  v25 = &v3[v24];
  v34 = v25;
  if (v32 == 1)
  {
    v26 = 1;
  }
  else
  {
    v35 = 0;
    sub_22F142CD4(v5, v25, (int *)&v35, v4);
    v26 = v35;
  }
  v34 = &v25[v26];
  return sub_22F1442D0(v5, v4);
}

unsigned __int8 *sub_22F1446B4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  int v8;
  unint64_t *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35[4];
  int v36;
  unsigned __int8 *v37;

  v37 = a3;
  v8 = *a3;
  if (v8 == 63 || v8 == 92)
  {
    v36 = 0;
    LOBYTE(v8) = sub_22F142CD4(a1, a3, &v36, 0);
  }
  else
  {
    v36 = 1;
  }
  if ((word_22F4ADB24[v8] & 0xE0) != 0)
  {
    v9 = *(unint64_t **)(a1 + 168);
    if ((*v9 & 0x200) == 0)
    {
LABEL_7:
      if (*(_BYTE *)(a1 + 26))
        return v37;
      v10 = (int)v37;
      if (v8 == 95)
        v11 = 1295;
      else
        v11 = 1294;
      sub_22F410E24((uint64_t)v35, a1, (int)v37, v11);
      v12 = v10 - *(_DWORD *)(a1 + 144);
      goto LABEL_58;
    }
    if (v8 == 95 || !a4)
    {
      if (v8 == 95)
      {
        v17 = v36;
LABEL_31:
        if (v17 == 1)
        {
          v18 = 1;
        }
        else
        {
          LODWORD(v27) = 0;
          sub_22F142CD4(a1, a3, (int *)&v27, a2);
          v18 = v27;
        }
        v37 = &a3[v18];
        goto LABEL_35;
      }
    }
    else if ((*v9 & 0x400) != 0)
    {
      LOBYTE(v35[0]) = v8;
      *(_WORD *)((char *)v35 + 1) = 0;
      v13 = v36;
      v14 = 1;
      v26 = v36;
      while (1)
      {
        v15 = a3[v13];
        if (v15 == 63 || v15 == 92)
        {
          LODWORD(v27) = 0;
          LOBYTE(v15) = sub_22F142EEC(&a3[v13], (int *)&v27, v9);
        }
        else
        {
          LODWORD(v27) = 1;
        }
        if ((word_22F4ADB24[v15] & 0xE8) == 0)
          break;
        if (v14 == 3)
          goto LABEL_28;
        *((_BYTE *)v35 + v14++) = v15;
        v13 += v27;
      }
      v25 = sub_22F411FBC(v9, (unsigned __int8 *)v35, v14);
      v17 = v26;
      if (v25)
        goto LABEL_31;
    }
LABEL_28:
    if (*(_BYTE *)(a1 + 26))
      return v37;
    if ((**(_QWORD **)(a1 + 168) & 0x10) != 0)
      v22 = 1212;
    else
      v22 = 1237;
    sub_22F410E24((uint64_t)v35, a1, (int)a3, v22);
    v12 = (_DWORD)a3 - *(_DWORD *)(a1 + 144);
LABEL_58:
    v23 = *(_DWORD *)(a1 + 160);
    if (v23 < 0)
      v24 = sub_22F142B40(*(_QWORD *)(a1 + 8), v23, v12, 1);
    else
      v24 = v23 + v12;
    v30 = 0;
    v29 = 0;
    v32 = 0;
    v33 = 0x100000000000000;
    v27 = v24 | ((unint64_t)v24 << 32);
    v28 = 0;
    __p = (void *)32;
    v34 = 0;
    sub_22E6D82D0(v35, &v27);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)v35);
    return v37;
  }
  if (v8 == 92)
  {
    if ((sub_22F411194(a1, &v37, v36, a2) & 1) == 0)
      return v37;
  }
  else if ((v8 & 0x80) == 0 || !sub_22F4113DC(a1, (uint64_t *)&v37))
  {
    return v37;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 2) == 0)
    goto LABEL_7;
LABEL_35:
  *(_WORD *)(a2 + 18) |= 0x20u;
  do
  {
    while (1)
    {
      while (1)
      {
        v19 = v37;
        v20 = *v37;
        if (v20 == 63 || v20 == 92)
        {
          v36 = 0;
          LOBYTE(v20) = sub_22F142CD4(a1, v37, &v36, 0);
        }
        else
        {
          v36 = 1;
        }
        if ((word_22F4ADB24[v20] & 0xE8) == 0)
          break;
        if (v36 == 1)
        {
          v21 = 1;
        }
        else
        {
          LODWORD(v27) = 0;
          sub_22F142CD4(a1, v19, (int *)&v27, a2);
          v21 = v27;
        }
        v37 = &v19[v21];
      }
      if (v20 != 92)
        break;
      if ((sub_22F411194(a1, &v37, v36, a2) & 1) == 0)
        return v37;
    }
  }
  while ((v20 & 0x80) != 0 && (sub_22F4113DC(a1, (uint64_t *)&v37) & 1) != 0);
  return v37;
}

uint64_t sub_22F144A68(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  __int16 v4;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _BYTE v34[32];

  v4 = a4;
  if ((a4 - 16) <= 2 && *(_BYTE *)(a1 + 26) == 0)
  {
    if ((**(_QWORD **)(a1 + 168) & 0x100) != 0)
      v21 = 1310;
    else
      v21 = 1290;
    sub_22F410E24((uint64_t)v34, a1, *(_QWORD *)(a1 + 184), v21);
    sub_22E3BB0B8((uint64_t)v34);
  }
  v9 = *a3;
  if (v9 == 63 || v9 == 92)
  {
    LODWORD(v32) = 0;
    LOBYTE(v9) = sub_22F142CD4(a1, a3, (int *)&v32, a2);
    v10 = &a3[v32];
  }
  else
  {
    v10 = a3 + 1;
  }
  v11 = 0;
  while (1)
  {
    if (v9 == 92)
    {
      v9 = *v10;
      if (v9 == 63 || v9 == 92)
      {
        LODWORD(v32) = 0;
        LOBYTE(v9) = sub_22F142CD4(a1, v10, (int *)&v32, a2);
        v10 += v32;
      }
      else
      {
        ++v10;
      }
    }
    else if (v9 == 34)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 1) != 0)
        v10 = sub_22F1446B4(a1, a2, v10, 1);
      if (v11 && !*(_BYTE *)(a1 + 26))
      {
        sub_22F410E24((uint64_t)&v32, a1, (int)v11, 1261);
        v29 = v32;
        if (!v32)
        {
          v29 = (unsigned __int8 *)sub_22E3B8AAC(v33);
          v32 = v29;
        }
        v29[*v29 + 1] = 2;
        v30 = v32;
        v31 = *v32;
        *v32 = v31 + 1;
        *(_QWORD *)&v30[8 * v31 + 16] = 1;
        sub_22E3BB0B8((uint64_t)&v32);
      }
      v18 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)(a2 + 4) = (_DWORD)v10 - v18;
      v19 = v18 - *(_DWORD *)(a1 + 144);
      v20 = *(_DWORD *)(a1 + 160);
      if (v20 < 0)
        result = sub_22F142B40(*(_QWORD *)(a1 + 8), v20, v19, (int)v10 - (int)v18);
      else
        result = (v20 + v19);
      *(_DWORD *)a2 = result;
      *(_WORD *)(a2 + 16) = v4;
      *(_QWORD *)(a1 + 184) = v10;
      *(_QWORD *)(a2 + 8) = v18;
      return result;
    }
    if ((_BYTE)v9)
    {
      if (v9 == 10 || v9 == 13)
      {
LABEL_29:
        if (!*(_BYTE *)(a1 + 26) && (*(_BYTE *)(*(_QWORD *)(a1 + 168) + 3) & 0x40) == 0)
        {
          sub_22F410E24((uint64_t)&v32, a1, *(_QWORD *)(a1 + 184), 1242);
          v26 = v32;
          if (!v32)
          {
            v26 = (unsigned __int8 *)sub_22E3B8AAC(v33);
            v32 = v26;
          }
          v26[*v26 + 1] = 2;
          v27 = v32;
          v28 = *v32;
          *v32 = v28 + 1;
          *(_QWORD *)&v27[8 * v28 + 16] = 1;
          sub_22E3BB0B8((uint64_t)&v32);
        }
        v13 = *(_DWORD *)(a1 + 184);
        v14 = (_DWORD)v10 - 1 - v13;
        *(_DWORD *)(a2 + 4) = v14;
        v15 = v13 - *(_DWORD *)(a1 + 144);
        v16 = *(_DWORD *)(a1 + 160);
        if (v16 < 0)
          result = sub_22F142B40(*(_QWORD *)(a1 + 8), v16, v15, v14);
        else
          result = (v16 + v15);
        *(_DWORD *)a2 = result;
        *(_WORD *)(a2 + 16) = 0;
        *(_QWORD *)(a1 + 184) = v10 - 1;
        return result;
      }
      goto LABEL_25;
    }
    v11 = v10 - 1;
    if (v10 - 1 == *(unsigned __int8 **)(a1 + 152))
      goto LABEL_29;
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 752)
        && *(_DWORD *)(a1 + 160) + (_DWORD)v11 - *(_DWORD *)(a1 + 144) == *(_DWORD *)(v12 + 764))
      {
        break;
      }
    }
LABEL_25:
    v9 = *v10;
    if (v9 == 63 || v9 == 92)
    {
      LODWORD(v32) = 0;
      LOBYTE(v9) = sub_22F142CD4(a1, v10, (int *)&v32, a2);
      v10 += v32;
    }
    else
    {
      ++v10;
    }
  }
  if (*(_BYTE *)(a1 + 25))
  {
    sub_22F144E20(a1, (char *)a3, (uint64_t)(v10 - 1), 0);
  }
  else
  {
    *(_BYTE *)(v12 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v12 + 48) + 6) = 1;
    v22 = *(_QWORD *)(v12 + 744);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 64))(v22);
  }
  v23 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a2 + 4) = (_DWORD)v11 - v23;
  v24 = v23 - *(_DWORD *)(a1 + 144);
  v25 = *(_DWORD *)(a1 + 160);
  if (v25 < 0)
    result = sub_22F142B40(*(_QWORD *)(a1 + 8), v25, v24, (int)v11 - v23);
  else
    result = (v25 + v24);
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 152);
  return result;
}

uint64_t sub_22F144E20(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t last_of;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;

  v5 = a3;
  v6 = a2;
  v30 = a3 - (_QWORD)a2;
  v8 = **(_QWORD **)(a1 + 168);
  if ((v8 & 0x10) != 0)
    v9 = "/\\";
  else
    v9 = "/";
  if ((v8 & 0x10) != 0)
    v10 = 2;
  else
    v10 = 1;
  last_of = llvm::StringRef::find_last_of();
  v28 = last_of;
  if (last_of != -1)
    v6 += last_of + 1;
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v12 + 872) = sub_22E3CB704((llvm::StringMapImpl *)(v12 + 544), v6, v5 - (_QWORD)v6);
  v13 = *(_QWORD *)(a1 + 152);
  if (a4)
    v14 = 62;
  else
    v14 = 34;
  v15 = (unsigned __int8 *)(v5 + 1);
  while (1)
  {
    v16 = v15;
    v17 = v15 - 1;
    if ((unint64_t)v17 >= v13)
      break;
    v18 = *v16;
    if (v18 <= 0xD && ((1 << v18) & 0x2401) != 0)
    {
      LODWORD(v16) = (_DWORD)v17;
      goto LABEL_26;
    }
    LODWORD(v5) = v5 + 1;
    if (v14 == (char)v18)
      break;
    v20 = (char *)memchr(v9, (char)v18, v10);
    if (v20)
      v21 = v20;
    else
      v21 = &v9[v10];
    v22 = v21 - v9;
    v15 = v16 + 1;
    if (v22 != v10)
      goto LABEL_26;
  }
  LODWORD(v16) = v5;
LABEL_26:
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 880) = (*(_DWORD *)(a1 + 160) + (_DWORD)v6 - *(_DWORD *)(a1 + 144)) | ((unint64_t)(*(_DWORD *)(a1 + 160) + (_DWORD)v16 - *(_DWORD *)(a1 + 144)) << 32);
  v23 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v23 + 864) = 1;
  *(_BYTE *)(*(_QWORD *)(v23 + 48) + 6) = 1;
  result = *(_QWORD *)(v23 + 744);
  if (result)
  {
    v25 = v30;
    if (v30 >= v28)
      v25 = v28;
    if (v28 == -1)
      v26 = (char *)&unk_22F5D0126;
    else
      v26 = a2;
    if (v28 == -1)
      v27 = 0;
    else
      v27 = v25;
    return (*(uint64_t (**)(uint64_t, char *, unint64_t, _QWORD))(*(_QWORD *)result + 56))(result, v26, v27, a4);
  }
  return result;
}

uint64_t sub_22F144FF0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  char *v3;
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  _WORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[4];

  v3 = (char *)a3;
  v4 = a2;
  v6 = *a3;
  if (v6 == 63 || v6 == 92)
  {
    LODWORD(v51[0]) = 0;
    v35 = a1;
    LOBYTE(v6) = sub_22F142CD4(a1, a3, (int *)v51, a2);
    v3 = (char *)a3;
    v4 = a2;
    a1 = v35;
    v7 = &a3[LODWORD(v51[0])];
  }
  else
  {
    v7 = a3 + 1;
  }
  v8 = 0;
  v9 = word_22F4ADB24;
  while (v6 != 62)
  {
    if (v6 == 92)
    {
      v18 = v9;
      v49 = v8;
      v19 = v3;
      v6 = *v7;
      if (v6 == 63 || v6 == 92)
      {
        LODWORD(v51[0]) = 0;
        v20 = a1;
        v21 = v4;
        LOBYTE(v6) = sub_22F142CD4(a1, v7, (int *)v51, v4);
        v4 = v21;
        a1 = v20;
        v7 += LODWORD(v51[0]);
      }
      else
      {
        ++v7;
      }
      v3 = v19;
      v8 = v49;
      v9 = v18;
    }
    if ((v9[v6] & 2) != 0)
    {
LABEL_26:
      v29 = *(_DWORD *)(a1 + 184);
      v30 = v3;
      v31 = v4;
      *(_DWORD *)(v4 + 4) = (_DWORD)v3 - v29;
      v32 = v29 - *(_DWORD *)(a1 + 144);
      v33 = a1;
      v34 = *(_DWORD *)(a1 + 160);
      if (v34 < 0)
        result = sub_22F142B40(*(_QWORD *)(a1 + 8), v34, v32, (int)v3 - v29);
      else
        result = (v34 + v32);
      *(_DWORD *)v31 = result;
      *(_WORD *)(v31 + 16) = 46;
      *(_QWORD *)(v33 + 184) = v30;
      return result;
    }
    if (!(_BYTE)v6)
    {
      v22 = (uint64_t)(v7 - 1);
      if (v7 - 1 == *(unsigned __int8 **)(a1 + 152))
        goto LABEL_26;
      v23 = v9;
      v24 = v3;
      v25 = v7;
      v26 = v4;
      v27 = a1;
      v28 = *(_QWORD *)(a1 + 8);
      if (v28
        && *(_QWORD *)(v28 + 752)
        && *(_DWORD *)(v27 + 160) + (_DWORD)v22 - *(_DWORD *)(v27 + 144) == *(_DWORD *)(v28 + 764))
      {
        sub_22F144E20(v27, v24, v22, 1u);
        v44 = *(_QWORD *)(v27 + 152);
        *(_QWORD *)(v27 + 184) = v44;
        *(_DWORD *)(v26 + 4) = v22 - v44;
        v45 = v44 - *(_DWORD *)(v27 + 144);
        v46 = *(_DWORD *)(v27 + 160);
        if (v46 < 0)
          result = sub_22F142B40(*(_QWORD *)(v27 + 8), v46, v45, (int)v22 - (int)v44);
        else
          result = (v46 + v45);
        *(_DWORD *)v26 = result;
        *(_WORD *)(v26 + 16) = 0;
        *(_QWORD *)(v27 + 184) = v22;
        return result;
      }
      a1 = v27;
      v7 = v25;
      v3 = v24;
      v8 = v22;
      v9 = v23;
    }
    v6 = *v7;
    if (v6 == 63 || v6 == 92)
    {
      LODWORD(v51[0]) = 0;
      v14 = v8;
      v15 = a1;
      v47 = v7;
      v48 = v4;
      v16 = v7;
      v17 = v3;
      LOBYTE(v6) = sub_22F142CD4(a1, v16, (int *)v51, v4);
      v3 = v17;
      v4 = v48;
      a1 = v15;
      v8 = v14;
      v7 = &v47[LODWORD(v51[0])];
    }
    else
    {
      ++v7;
    }
  }
  if (v8 && !*(_BYTE *)(a1 + 26))
  {
    v37 = v4;
    v38 = a1;
    sub_22F410E24((uint64_t)v51, a1, v8, 1261);
    v39 = (unsigned __int8 *)v51[0];
    if (!v51[0])
    {
      v39 = (unsigned __int8 *)sub_22E3B8AAC(v51[1]);
      v51[0] = v39;
    }
    v39[*v39 + 1] = 2;
    v40 = v51[0];
    v41 = *(unsigned __int8 *)v51[0];
    *(_BYTE *)v51[0] = v41 + 1;
    *(_QWORD *)(v40 + 8 * v41 + 16) = 1;
    sub_22E3BB0B8((uint64_t)v51);
    a1 = v38;
    v4 = v37;
  }
  v10 = *(_QWORD *)(a1 + 184);
  *(_DWORD *)(v4 + 4) = (_DWORD)v7 - v10;
  v11 = v10 - *(_DWORD *)(a1 + 144);
  v12 = *(_DWORD *)(a1 + 160);
  if (v12 < 0)
  {
    v42 = a1;
    v43 = v4;
    result = sub_22F142B40(*(_QWORD *)(a1 + 8), v12, v11, (int)v7 - (int)v10);
    v4 = v43;
    a1 = v42;
  }
  else
  {
    result = (v12 + v11);
  }
  *(_DWORD *)v4 = result;
  *(_WORD *)(v4 + 16) = 15;
  *(_QWORD *)(a1 + 184) = v7;
  *(_QWORD *)(v4 + 8) = v10;
  return result;
}

uint64_t sub_22F145368(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  __int16 v4;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  _BYTE v37[32];
  _BYTE v38[32];
  _BYTE v39[32];

  v4 = a4;
  if (!*(_BYTE *)(a1 + 26))
  {
    if ((a4 - 11) <= 1)
    {
      v24 = *(_QWORD *)(a1 + 184);
      if ((**(_QWORD **)(a1 + 168) & 0x100) != 0)
        v25 = 1310;
      else
        v25 = 1290;
      v26 = v39;
      v27 = v39;
      v28 = a1;
    }
    else
    {
      if (a4 != 10)
        goto LABEL_4;
      v24 = *(_QWORD *)(a1 + 184);
      v26 = v38;
      v27 = v38;
      v28 = a1;
      v25 = 1297;
    }
    sub_22F410E24((uint64_t)v27, v28, v24, v25);
    sub_22E3BB0B8((uint64_t)v26);
  }
LABEL_4:
  v8 = *a3;
  if (v8 == 63 || v8 == 92)
  {
    LODWORD(v35) = 0;
    LOBYTE(v8) = sub_22F142CD4(a1, a3, (int *)&v35, a2);
    v9 = &a3[v35];
  }
  else
  {
    v9 = a3 + 1;
  }
  if (v8 != 39)
  {
    v10 = 0;
    while (1)
    {
      if (v8 == 92)
      {
        v8 = *v9;
        if (v8 == 63 || v8 == 92)
        {
          LODWORD(v35) = 0;
          LOBYTE(v8) = sub_22F142CD4(a1, v9, (int *)&v35, a2);
          v9 += v35;
        }
        else
        {
          ++v9;
        }
      }
      else if (v8 == 39)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 1) != 0)
          v9 = sub_22F1446B4(a1, a2, v9, 0);
        if (v10 && !*(_BYTE *)(a1 + 26))
        {
          sub_22F410E24((uint64_t)&v35, a1, (int)v10, 1261);
          v32 = v35;
          if (!v35)
          {
            v32 = (unsigned __int8 *)sub_22E3B8AAC(v36);
            v35 = v32;
          }
          v32[*v32 + 1] = 2;
          v33 = v35;
          v34 = *v35;
          *v35 = v34 + 1;
          *(_QWORD *)&v33[8 * v34 + 16] = 0;
          sub_22E3BB0B8((uint64_t)&v35);
        }
        v17 = *(_QWORD *)(a1 + 184);
        *(_DWORD *)(a2 + 4) = (_DWORD)v9 - v17;
        v18 = v17 - *(_DWORD *)(a1 + 144);
        v19 = *(_DWORD *)(a1 + 160);
        if (v19 < 0)
          result = sub_22F142B40(*(_QWORD *)(a1 + 8), v19, v18, (int)v9 - (int)v17);
        else
          result = (v19 + v18);
        *(_DWORD *)a2 = result;
        *(_WORD *)(a2 + 16) = v4;
        *(_QWORD *)(a1 + 184) = v9;
        *(_QWORD *)(a2 + 8) = v17;
        return result;
      }
      if ((_BYTE)v8)
      {
        if (v8 == 10 || v8 == 13)
        {
LABEL_32:
          if (!*(_BYTE *)(a1 + 26) && (*(_BYTE *)(*(_QWORD *)(a1 + 168) + 3) & 0x40) == 0)
          {
            sub_22F410E24((uint64_t)&v35, a1, *(_QWORD *)(a1 + 184), 1242);
            v29 = v35;
            if (!v35)
            {
              v29 = (unsigned __int8 *)sub_22E3B8AAC(v36);
              v35 = v29;
            }
            v29[*v29 + 1] = 2;
            v30 = v35;
            v31 = *v35;
            *v35 = v31 + 1;
            *(_QWORD *)&v30[8 * v31 + 16] = 0;
            sub_22E3BB0B8((uint64_t)&v35);
          }
          --v9;
          goto LABEL_35;
        }
      }
      else
      {
        v10 = v9 - 1;
        if (v9 - 1 == *(unsigned __int8 **)(a1 + 152))
          goto LABEL_32;
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          if (*(_QWORD *)(v11 + 752))
          {
            v12 = *(_QWORD *)(a1 + 144);
            if (*(_DWORD *)(a1 + 160) + (_DWORD)v10 - (_DWORD)v12 == *(_DWORD *)(v11 + 764))
            {
              *(_BYTE *)(v11 + 864) = 1;
              *(_BYTE *)(*(_QWORD *)(v11 + 48) + 6) = 1;
              v20 = *(_QWORD *)(v11 + 744);
              if (v20)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 64))(v20);
                v12 = *(_QWORD *)(a1 + 144);
              }
              v21 = *(_DWORD *)(a1 + 184);
              *(_DWORD *)(a2 + 4) = (_DWORD)v10 - v21;
              v22 = v21 - v12;
              v23 = *(_DWORD *)(a1 + 160);
              if (v23 < 0)
                result = sub_22F142B40(*(_QWORD *)(a1 + 8), v23, v22, (int)v10 - v21);
              else
                result = (v23 + v22);
              *(_DWORD *)a2 = result;
              *(_WORD *)(a2 + 16) = 0;
              *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 152);
              return result;
            }
          }
        }
      }
      v8 = *v9;
      if (v8 == 63 || v8 == 92)
      {
        LODWORD(v35) = 0;
        LOBYTE(v8) = sub_22F142CD4(a1, v9, (int *)&v35, a2);
        v9 += v35;
      }
      else
      {
        ++v9;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 26) && (*(_BYTE *)(*(_QWORD *)(a1 + 168) + 3) & 0x40) == 0)
  {
    sub_22F410E24((uint64_t)v37, a1, *(_QWORD *)(a1 + 184), 1205);
    sub_22E3BB0B8((uint64_t)v37);
  }
LABEL_35:
  v13 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a2 + 4) = (_DWORD)v9 - v13;
  v14 = v13 - *(_DWORD *)(a1 + 144);
  v15 = *(_DWORD *)(a1 + 160);
  if (v15 < 0)
    result = sub_22F142B40(*(_QWORD *)(a1 + 8), v15, v14, (int)v9 - v13);
  else
    result = (v15 + v14);
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 184) = v9;
  return result;
}

uint64_t sub_22F14575C(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  _BYTE *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v32;
  _BYTE *v33;

  v4 = a3 - 1;
  v5 = (unsigned __int16)word_22F4ADB24[*(a3 - 1)];
  v6 = (v5 >> 1) & 1;
  v7 = *a3;
  if ((v5 & 2) != 0)
  {
    if (!*(_QWORD *)(a1 + 200))
      *(_QWORD *)(a1 + 200) = v4;
  }
  else
  {
    v4 = 0;
  }
  while (1)
  {
    while (1)
    {
      v8 = word_22F4ADB24[v7];
      if ((v8 & 5) == 0)
        break;
      v9 = *++a3;
      v7 = v9;
    }
    if ((v8 & 2) == 0)
      break;
    if (*(_BYTE *)(a1 + 24))
      goto LABEL_12;
    if (*a3 == 10)
    {
      v4 = a3;
      if (!*(_QWORD *)(a1 + 200))
      {
        *(_QWORD *)(a1 + 200) = a3;
        v4 = a3;
      }
    }
    v22 = *++a3;
    v7 = v22;
    LOBYTE(v6) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 178) < 2u)
  {
    v10 = (*(_WORD *)(a2 + 18) & 0xFFFD | (2 * (((unsigned __int16)word_22F4ADB24[*(a3 - 1)] >> 1) & 1))) ^ 2;
    *(_WORD *)(a2 + 18) = (*(_WORD *)(a2 + 18) & 0xFFFD | (2 * ((word_22F4ADB24[*(a3 - 1)] >> 1) & 1))) ^ 2;
    if ((v6 & 1) == 0)
      goto LABEL_12;
    *(_WORD *)(a2 + 18) = v10 | 1;
    *a4 = 1;
    v11 = *(_BYTE **)(a1 + 200);
    if (!v11)
      goto LABEL_12;
    if (!v4)
      goto LABEL_12;
    if (v11 == v4)
      goto LABEL_12;
    v14 = *(_QWORD *)(a1 + 8);
    if (!v14 || !*(_QWORD *)(v14 + 728))
      goto LABEL_12;
    v15 = (int)v4;
    v29 = *(_QWORD *)(v14 + 728);
    v30 = a1;
    v32 = a3;
    v16 = *(_QWORD *)(a1 + 144);
    v17 = (_DWORD)v11 - v16 + 1;
    v18 = *(_DWORD *)(a1 + 160);
    if (v18 < 0)
    {
      v19 = sub_22F142B40(v14, v18, v17, 1);
      v18 = *(_DWORD *)(v30 + 160);
      v20 = v15 - *(_DWORD *)(v30 + 144);
      if (v18 < 0)
      {
        v21 = sub_22F142B40(*(_QWORD *)(v30 + 8), v18, v20, 1);
        goto LABEL_19;
      }
    }
    else
    {
      v19 = v18 + v17;
      v20 = v15 - v16;
    }
    v21 = (v18 + v20);
LABEL_19:
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v19 | (unint64_t)(v21 << 32));
    a1 = v30;
    a3 = v32;
LABEL_12:
    v12 = 0;
    *(_QWORD *)(a1 + 184) = a3;
    return v12;
  }
  v23 = *(_DWORD *)(a1 + 184);
  v33 = a3;
  v24 = (_DWORD)a3 - v23;
  *(_DWORD *)(a2 + 4) = (_DWORD)a3 - v23;
  v25 = v23 - *(_DWORD *)(a1 + 144);
  v26 = a1;
  v27 = *(_DWORD *)(a1 + 160);
  if (v27 < 0)
    v28 = sub_22F142B40(*(_QWORD *)(a1 + 8), v27, v25, v24);
  else
    v28 = v27 + v25;
  *(_DWORD *)a2 = v28;
  *(_WORD *)(a2 + 16) = 0;
  *(_QWORD *)(v26 + 184) = v33;
  if ((v6 & 1) != 0)
    *(_WORD *)(v26 + 192) = 257;
  return 1;
}

uint64_t sub_22F145950(uint64_t a1, uint64_t a2, unsigned __int8 *a3, _BYTE *a4)
{
  int v8;
  unsigned __int8 *v9;
  char v11;
  unsigned __int8 *v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t data_low;
  BOOL v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  std::string *v41;
  std::string *v42;
  unsigned int v43;
  __int16 v44;
  _BYTE v45[32];
  _BYTE v46[32];
  _BYTE v47[32];
  std::string v48;
  unsigned __int8 v49;

  if (!*(_BYTE *)(a1 + 176))
  {
    if (!*(_BYTE *)(a1 + 26))
    {
      sub_22F410E24((uint64_t)v47, a1, *(_QWORD *)(a1 + 184), 1209);
      sub_22E3BB0B8((uint64_t)v47);
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  while (1)
  {
    while (1)
    {
      v8 = *a3;
      v9 = a3;
      if (!*a3)
        goto LABEL_23;
      if (v8 == 13 || v8 == 10)
        break;
      ++a3;
    }
    v11 = 0;
    v12 = a3;
    do
    {
      v13 = v11;
      v15 = *--v12;
      v14 = v15;
      v11 = 1;
    }
    while ((word_22F4ADB24[v15] & 5) != 0);
    if (v14 == 47)
    {
      if (*(v12 - 1) != 63)
        goto LABEL_63;
      v9 = v12 - 2;
      if (*(v12 - 2) != 63 || (*(_BYTE *)(*(_QWORD *)(a1 + 168) + 2) & 0x10) == 0)
        goto LABEL_63;
    }
    else
    {
      v9 = v12;
      if (v14 != 92)
        goto LABEL_63;
    }
    if ((v13 & 1) == 0)
      goto LABEL_23;
    if (!*(_BYTE *)(a1 + 26))
    {
      sub_22F410E24((uint64_t)v46, a1, (int)v12, 1024);
      sub_22E3BB0B8((uint64_t)v46);
LABEL_23:
      v16 = *(unsigned __int8 *)(a1 + 26);
      goto LABEL_24;
    }
    v16 = 1;
LABEL_24:
    *(_BYTE *)(a1 + 26) = 1;
    v17 = *v9;
    if (v17 == 92 || v17 == 63)
    {
      LODWORD(v48.__r_.__value_.__l.__data_) = 0;
      LOBYTE(v17) = sub_22F142CD4(a1, v9, (int *)&v48, a2);
      data_low = LODWORD(v48.__r_.__value_.__l.__data_);
    }
    else
    {
      data_low = 1;
    }
    *(_BYTE *)(a1 + 26) = v16;
    if ((_BYTE)v17)
      v19 = data_low == 1;
    else
      v19 = 0;
    if (v19)
      goto LABEL_63;
    a3 = &v9[data_low];
    if (data_low != 1
      && v17 != 47
      && (a3 == (unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 1) || *a3 != 47)
      && data_low)
    {
      v20 = v9 - 1;
      while (1)
      {
        v21 = v20[1];
        if (v21 == 13 || v21 == 10)
          break;
        ++v20;
        if (!--data_low)
          goto LABEL_52;
      }
      if ((word_22F4ADB24[v17] & 7) == 0)
        goto LABEL_51;
      v23 = a3;
      do
      {
        v25 = *v23++;
        v24 = v25;
      }
      while ((word_22F4ADB24[v25] & 7) != 0);
      if (v24 != 47)
      {
LABEL_51:
        if (v16)
          goto LABEL_52;
LABEL_50:
        sub_22F410E24((uint64_t)v45, a1, (int)v20, 1213);
        sub_22E3BB0B8((uint64_t)v45);
        goto LABEL_52;
      }
      if (!v16 && *v23 != 47)
        goto LABEL_50;
    }
LABEL_52:
    if (v17 == 10)
      break;
    if (v17 == 13)
      break;
    v26 = *(_BYTE **)(a1 + 152);
    if (a3 == v26 + 1)
      break;
    if (!(_BYTE)v17)
    {
      v27 = *(_QWORD *)(a1 + 8);
      if (v27)
      {
        if (*(_QWORD *)(v27 + 752)
          && *(_DWORD *)(a1 + 160) + (_DWORD)a3 - 1 - *(_DWORD *)(a1 + 144) == *(_DWORD *)(v27 + 764))
        {
          *(_BYTE *)(v27 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v27 + 48) + 6) = 1;
          v28 = *(_QWORD *)(v27 + 744);
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 64))(v28);
            v26 = *(_BYTE **)(a1 + 152);
          }
          result = 0;
          goto LABEL_95;
        }
      }
    }
  }
  --a3;
LABEL_63:
  v30 = *(_QWORD *)(a1 + 8);
  if (v30 && !*(_BYTE *)(a1 + 26))
  {
    v31 = *(_QWORD *)(a1 + 144);
    v32 = *(_DWORD *)(a1 + 184) - v31;
    v33 = *(_DWORD *)(a1 + 160);
    if ((v33 & 0x80000000) == 0)
    {
      v34 = v33 + v32;
      v35 = (_DWORD)a3 - v31;
      goto LABEL_68;
    }
    v34 = sub_22F142B40(*(_QWORD *)(a1 + 8), v33, v32, 1);
    v33 = *(_DWORD *)(a1 + 160);
    v35 = (_DWORD)a3 - *(_DWORD *)(a1 + 144);
    if (v33 < 0)
      v36 = sub_22F142B40(*(_QWORD *)(a1 + 8), v33, v35, 1);
    else
LABEL_68:
      v36 = (v33 + v35);
    if (sub_22F1908DC(v30, (unsigned int *)a2, v34 | (unint64_t)(v36 << 32)))
    {
      *(_QWORD *)(a1 + 184) = a3;
      return 1;
    }
  }
  if (*(_BYTE *)(a1 + 178))
  {
    v37 = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a2 + 4) = (_DWORD)a3 - v37;
    v38 = v37 - *(_DWORD *)(a1 + 144);
    v39 = *(_DWORD *)(a1 + 160);
    if (v39 < 0)
      v40 = sub_22F142B40(*(_QWORD *)(a1 + 8), v39, v38, (int)a3 - v37);
    else
      v40 = v39 + v38;
    *(_DWORD *)a2 = v40;
    *(_WORD *)(a2 + 16) = 4;
    *(_QWORD *)(a1 + 184) = a3;
    if (*(_BYTE *)(a1 + 24) && !*(_BYTE *)(a1 + 26))
    {
      v49 = 0;
      sub_22F1413E0(a2, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), &v49, (uint64_t)&v48);
      if (!v49)
      {
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v48;
        else
          v41 = (std::string *)v48.__r_.__value_.__r.__words[0];
        v41->__r_.__value_.__s.__data_[1] = 42;
        std::string::append(&v48, "*/");
        *(_WORD *)(a2 + 16) = 4;
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v48;
        else
          v42 = (std::string *)v48.__r_.__value_.__r.__words[0];
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = *((_BYTE *)&v48.__r_.__value_.__s + 23) & 0x7F;
        else
          v43 = v48.__r_.__value_.__r.__words[1];
        sub_22F18E27C(*(_QWORD *)(a1 + 8), v42, v43, a2, *(_DWORD *)a2, *(_DWORD *)a2);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  if (*(_BYTE *)(a1 + 24) || a3 == *(unsigned __int8 **)(a1 + 152))
  {
    result = 0;
    *(_QWORD *)(a1 + 184) = a3;
    return result;
  }
  result = 0;
  v26 = a3 + 1;
  *(_QWORD *)(a1 + 200) = a3;
  v44 = *(_WORD *)(a2 + 18);
  *a4 = 1;
  *(_WORD *)(a2 + 18) = v44 & 0xFFFC | 1;
LABEL_95:
  *(_QWORD *)(a1 + 184) = v26;
  return result;
}

uint64_t sub_22F145DF8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, _BYTE *a4)
{
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t v34;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t result;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[36];
  unsigned int v62;
  _BYTE v63[32];
  _BYTE v64[32];
  _BYTE v65[32];
  _BYTE v66[32];

  v8 = *a3;
  if (v8 == 63 || v8 == 92)
  {
    v62 = 0;
    LOBYTE(v8) = sub_22F142CD4(a1, a3, (int *)&v62, 0);
    v9 = v62;
  }
  else
  {
    v9 = 1;
    v62 = 1;
  }
  v10 = &a3[v9];
  if (v8 == 47)
  {
    v11 = *v10++;
    LOBYTE(v8) = v11;
    goto LABEL_10;
  }
  if ((_BYTE)v8)
  {
    while (1)
    {
LABEL_10:
      v12 = *(_QWORD *)(a1 + 152);
      if ((unint64_t)(v10 + 24) >= v12)
        goto LABEL_70;
      v13 = *(_QWORD *)(a1 + 8);
      if (v13)
      {
        if (*(_DWORD *)(v13 + 768) == *(_DWORD *)(a1 + 160))
          goto LABEL_70;
      }
      if (v8 != 47 && (v10 & 0xF) != 0)
      {
        v14 = v10 + 1;
        do
        {
          v15 = *v10++;
          LOBYTE(v8) = v15;
          v16 = v14++ & 0xF;
        }
        while (v15 != 47 && v16 != 0);
      }
      if (v8 != 47)
        break;
LABEL_22:
      v19 = v10 - 2;
      v18 = *(v10 - 2);
      if (v18 == 10 || v18 == 13)
      {
        v21 = 0;
        v22 = 0;
        do
        {
          v23 = *(v19 - 1);
          if (v23 == 13 || v23 == 10)
          {
            if (v23 == v18)
              goto LABEL_57;
            v19 -= 2;
          }
          else
          {
            --v19;
          }
          v25 = v22;
          do
          {
            v22 = v25;
            v25 = v19;
            v27 = *v19--;
            v26 = v27;
            v28 = word_22F4ADB24[v27] & 5;
            if (v27)
              v29 = v28 == 0;
            else
              v29 = 0;
          }
          while (!v29);
          if (v26 == 47)
          {
            if (*v19 != 63)
              goto LABEL_57;
            v21 = v19 - 1;
            if (*(v19 - 1) != 63)
              goto LABEL_57;
            v19 -= 2;
          }
          else if (v26 != 92)
          {
            goto LABEL_57;
          }
          v18 = *v19;
        }
        while (v18 == 10 || v18 == 13);
        if (v18 == 42)
        {
          if (!v21)
            goto LABEL_98;
          if ((**(_QWORD **)(a1 + 168) & 0x100000) != 0)
          {
            if (*(_BYTE *)(a1 + 26))
              goto LABEL_99;
            sub_22F410E24((uint64_t)v65, a1, (int)v21, 1282);
            sub_22E3BB0B8((uint64_t)v65);
LABEL_98:
            if (*(_BYTE *)(a1 + 26))
            {
LABEL_99:
              if (v22)
              {
LABEL_100:
                if (!*(_BYTE *)(a1 + 26))
                {
                  sub_22F410E24((uint64_t)v63, a1, (int)v22, 1024);
                  sub_22E3BB0B8((uint64_t)v63);
                }
              }
            }
            else
            {
              sub_22F410E24((uint64_t)v64, a1, (_DWORD)v19 + 1, 1195);
              sub_22E3BB0B8((uint64_t)v64);
              if (v22)
                goto LABEL_100;
            }
LABEL_102:
            v48 = *(_QWORD *)(a1 + 8);
            if (v48 && !*(_BYTE *)(a1 + 26))
            {
              v49 = *(_QWORD *)(a1 + 144);
              v50 = *(_DWORD *)(a1 + 184) - v49;
              v51 = *(_DWORD *)(a1 + 160);
              if ((v51 & 0x80000000) == 0)
              {
                v52 = v51 + v50;
                v53 = (_DWORD)v10 - v49;
                goto LABEL_107;
              }
              v52 = sub_22F142B40(*(_QWORD *)(a1 + 8), v51, v50, 1);
              v51 = *(_DWORD *)(a1 + 160);
              v53 = (_DWORD)v10 - *(_DWORD *)(a1 + 144);
              if (v51 < 0)
                v54 = sub_22F142B40(*(_QWORD *)(a1 + 8), v51, v53, 1);
              else
LABEL_107:
                v54 = (v51 + v53);
              if (sub_22F1908DC(v48, (unsigned int *)a2, v52 | (unint64_t)(v54 << 32)))
              {
LABEL_116:
                *(_QWORD *)(a1 + 184) = v10;
                return 1;
              }
            }
            if (*(_BYTE *)(a1 + 178))
            {
              v55 = *(_DWORD *)(a1 + 184);
              *(_DWORD *)(a2 + 4) = (_DWORD)v10 - v55;
              v56 = v55 - *(_DWORD *)(a1 + 144);
              v57 = *(_DWORD *)(a1 + 160);
              if (v57 < 0)
                v58 = sub_22F142B40(*(_QWORD *)(a1 + 8), v57, v56, (int)v10 - v55);
              else
                v58 = v57 + v56;
              *(_DWORD *)a2 = v58;
              *(_WORD *)(a2 + 16) = 4;
              goto LABEL_116;
            }
            if ((word_22F4ADB24[*v10] & 5) != 0)
            {
              sub_22F14575C(a1, a2, v10 + 1, a4);
              return 0;
            }
            else
            {
              result = 0;
              *(_QWORD *)(a1 + 184) = v10;
              *(_WORD *)(a2 + 18) |= 2u;
            }
            return result;
          }
          if (!*(_BYTE *)(a1 + 26))
          {
            sub_22F410E24((uint64_t)v66, a1, (int)v21, 1284);
            sub_22E3BB0B8((uint64_t)v66);
          }
        }
      }
      else if (v18 == 42)
      {
        goto LABEL_102;
      }
LABEL_57:
      if (*v10 == 42 && v10[1] != 47 && !*(_BYTE *)(a1 + 26))
      {
        sub_22F410E24((uint64_t)v60, a1, (_DWORD)v10 - 1, 1329);
        sub_22E3BB0B8((uint64_t)v60);
      }
LABEL_78:
      v39 = *v10++;
      LOBYTE(v8) = v39;
    }
    v31 = v10 + 1;
    do
    {
      v10 = v31;
      v33 = *(v31 - 1);
      v32 = v31 - 1;
      LOBYTE(v8) = v33;
      if (v33 == 47 || v32[1] == 47 || v32[2] == 47)
        break;
      v34 = (unint64_t)(v32 + 4);
      v31 = v10 + 4;
    }
    while (v10[2] != 47 && v34 < v12);
LABEL_70:
    v36 = 1 - (_DWORD)v10;
    while ((_BYTE)v8)
    {
      if (v8 == 47)
        goto LABEL_22;
      v37 = *v10++;
      LOBYTE(v8) = v37;
      --v36;
    }
    if (v10 == (unsigned __int8 *)(v12 + 1))
    {
      if (!*(_BYTE *)(a1 + 26))
      {
        sub_22F410E24((uint64_t)v59, a1, *(_QWORD *)(a1 + 184), 1191);
        sub_22E3BB0B8((uint64_t)v59);
      }
      v40 = v10 - 1;
      if (*(unsigned __int8 *)(a1 + 178) >= 2u)
      {
        v41 = *(_DWORD *)(a1 + 184);
        v42 = -v36 - v41;
        goto LABEL_90;
      }
      goto LABEL_92;
    }
    v38 = *(_QWORD *)(a1 + 8);
    if (v38 && *(_QWORD *)(v38 + 752) && *(_DWORD *)(a1 + 160) - *(_DWORD *)(v38 + 764) - *(_DWORD *)(a1 + 144) == v36)
    {
      *(_BYTE *)(v38 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v38 + 48) + 6) = 1;
      v43 = *(_QWORD *)(v38 + 744);
      if (v43)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 64))(v43);
        v12 = *(_QWORD *)(a1 + 152);
      }
      result = 0;
      *(_QWORD *)(a1 + 184) = v12;
      return result;
    }
    goto LABEL_78;
  }
  if (v10 != (unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 1))
  {
    LOBYTE(v8) = 0;
    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 26))
  {
    sub_22F410E24((uint64_t)v61, a1, *(_QWORD *)(a1 + 184), 1191);
    sub_22E3BB0B8((uint64_t)v61);
  }
  v40 = v10 - 1;
  if (*(unsigned __int8 *)(a1 + 178) < 2u)
  {
LABEL_92:
    result = 0;
  }
  else
  {
    v41 = *(_DWORD *)(a1 + 184);
    v42 = (_DWORD)v40 - v41;
LABEL_90:
    *(_DWORD *)(a2 + 4) = v42;
    v45 = v41 - *(_DWORD *)(a1 + 144);
    v46 = *(_DWORD *)(a1 + 160);
    if (v46 < 0)
      v47 = sub_22F142B40(*(_QWORD *)(a1 + 8), v46, v45, v42);
    else
      v47 = v46 + v45;
    *(_DWORD *)a2 = v47;
    *(_WORD *)(a2 + 16) = 0;
    result = 1;
  }
  *(_QWORD *)(a1 + 184) = v40;
  return result;
}

uint64_t sub_22F146378(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  int v13;
  unsigned int v14;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v4 = *(unsigned __int8 **)(a1 + 184);
  while (1)
  {
    v5 = *v4;
    if (v5 == 63 || v5 == 92)
    {
      v14 = 0;
      LOBYTE(v5) = sub_22F142CD4(a1, v4, (int *)&v14, (uint64_t)v12);
      v4 += v14;
    }
    else
    {
      ++v4;
    }
    if (v5 == 10)
    {
LABEL_20:
      *(_QWORD *)(a1 + 184) = v4 - 1;
      result = sub_22F14651C(a1, v12);
      if ((unsigned __int16)v13 == 3)
      {
        v10 = *(_QWORD *)(a1 + 8);
        if (v10)
        {
          *(_BYTE *)(v10 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v10 + 48) + 6) = 1;
          v11 = *(_QWORD *)(v10 + 744);
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
        }
        return sub_22F14651C(a1, v12);
      }
      return result;
    }
    if ((_BYTE)v5)
    {
      if ((char)v5 == 13)
        goto LABEL_20;
      goto LABEL_8;
    }
    v7 = *(unsigned __int8 **)(a1 + 152);
    if (v4 - 1 == v7)
      goto LABEL_20;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 752)
        && *(_DWORD *)(a1 + 160) + (_DWORD)v4 - 1 - *(_DWORD *)(a1 + 144) == *(_DWORD *)(v8 + 764))
      {
        break;
      }
    }
LABEL_8:
    if (a2)
    {
      v6 = a2[1];
      if ((unint64_t)(v6 + 1) > a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v6 = a2[1];
      }
      *(_BYTE *)(*a2 + v6) = v5;
      ++a2[1];
    }
  }
  *(_BYTE *)(v8 + 864) = 1;
  *(_BYTE *)(*(_QWORD *)(v8 + 48) + 6) = 1;
  result = *(_QWORD *)(v8 + 744);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
    v7 = *(unsigned __int8 **)(a1 + 152);
  }
  *(_QWORD *)(a1 + 184) = v7;
  return result;
}

uint64_t sub_22F14651C(_BYTE *a1, uint64_t a2)
{
  __int16 v2;
  char v3;

  v2 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  if (a1[192])
  {
    v2 = 1;
    *(_WORD *)(a2 + 18) = 1;
    a1[192] = 0;
  }
  if (a1[194])
  {
    v2 |= 2u;
    *(_WORD *)(a2 + 18) = v2;
    a1[194] = 0;
  }
  if (a1[195])
  {
    *(_WORD *)(a2 + 18) = v2 | 0x10;
    a1[195] = 0;
  }
  v3 = a1[193];
  a1[193] = 0;
  return sub_22F146C18((uint64_t)a1, a2, v3);
}

uint64_t sub_22F14657C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  unsigned int i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  void *__p;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42[4];
  _QWORD v43[3];
  __int16 v44;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v6 = *(_DWORD *)(a1 + 184);
    v7 = a3 - v6;
    *(_DWORD *)(a2 + 4) = a3 - v6;
    v8 = v6 - *(_DWORD *)(a1 + 144);
    v9 = *(_DWORD *)(a1 + 160);
    if (v9 < 0)
      v10 = sub_22F142B40(*(_QWORD *)(a1 + 8), v9, v8, v7);
    else
      v10 = v9 + v8;
    *(_DWORD *)a2 = v10;
    *(_WORD *)(a2 + 16) = 2;
    *(_QWORD *)(a1 + 184) = a3;
    v15 = *(_QWORD *)(a1 + 8);
    if (v15)
    {
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) & 0x4000000000000) != 0)
        v16 = 2;
      else
        v16 = *(_BYTE *)(v15 + 536) & 1;
      *(_BYTE *)(a1 + 178) = v16;
    }
    return 1;
  }
  else if (*(_BYTE *)(a1 + 26))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    v11 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 184) = v11;
    v12 = v11 - *(_DWORD *)(a1 + 144);
    v13 = *(_DWORD *)(a1 + 160);
    if (v13 < 0)
      v14 = sub_22F142B40(*(_QWORD *)(a1 + 8), v13, v12, 0);
    else
      v14 = v13 + v12;
    *(_DWORD *)a2 = v14;
    result = 1;
    *(_WORD *)(a2 + 16) = 1;
    *(_QWORD *)(a1 + 184) = v11;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v18 + 1000) == 1 && sub_22F4157AC(*(_QWORD **)(a1 + 8)))
    {
      v30 = *(unsigned int *)(a1 + 72);
      v31 = *(_BYTE **)(a1 + 64);
      *(_DWORD *)(v18 + 960) = 0;
      sub_22F2633B0(v18 + 952, v31, &v31[8 * v30]);
      if (*(_DWORD *)(a1 + 72))
      {
        if (*(_QWORD *)(a1 + 40))
        {
          *(_WORD *)(a1 + 32) = 0;
        }
        else
        {
          *(_WORD *)(a1 + 32) = 1;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
        }
      }
      *(_DWORD *)(a1 + 72) = 0;
    }
    for (i = *(_DWORD *)(a1 + 72); i; *(_DWORD *)(a1 + 72) = i)
    {
      v20 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v20 + 768) != *(_DWORD *)(a1 + 160))
      {
        v21 = *(_QWORD *)(v20 + 48);
        *(_DWORD *)(v21 + 312) = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8 * i - 8);
        *(_DWORD *)(v21 + 316) = 1170;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v43[0] = v21 + 320;
        v43[1] = 0;
        v43[2] = v21;
        v44 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v22 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)(v21 + 768);
          v24 = 56 * v22;
          do
          {
            if (*(char *)(v23 + v24 - 9) < 0)
              operator delete(*(void **)(v23 + v24 - 32));
            v24 -= 56;
          }
          while (v24);
        }
        *(_DWORD *)(v21 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v43);
        i = *(_DWORD *)(a1 + 72);
      }
      --i;
    }
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(_DWORD *)(a1 + 152) - v25;
    v27 = *(_DWORD *)(a1 + 160);
    if (v27 < 0)
    {
      v28 = sub_22F142B40(*(_QWORD *)(a1 + 8), v27, v26, 1);
      v25 = *(_QWORD *)(a1 + 144);
    }
    else
    {
      v28 = v27 + v26;
    }
    if (v25 != a3)
    {
      v29 = *(unsigned __int8 *)(a3 - 1);
      if (v29 != 10 && v29 != 13)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 2) != 0)
        {
          v32 = v28;
          if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 32), 0x51Bu, v28, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) == 1)v33 = 1330;
          else
            v33 = 1307;
        }
        else
        {
          v32 = v28;
          v33 = 1215;
        }
        sub_22F410E24((uint64_t)v42, a1, *(_QWORD *)(a1 + 152), v33);
        v37 = 0;
        v36 = 0;
        v39 = 0;
        v40 = 0x100000000000000;
        v34 = v32 | (v32 << 32);
        v35 = 0;
        __p = (void *)10;
        v41 = 0;
        sub_22E6D82D0(v42, &v34);
        if (SHIBYTE(v40) < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)v42);
      }
    }
    *(_QWORD *)(a1 + 184) = a3;
    return sub_22F173830(*(_QWORD *)(a1 + 8), a2, v28, *(_BYTE *)(a1 + 177));
  }
  return result;
}

uint64_t sub_22F1468BC(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __int16 v4;
  char v5;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v9[16];
  __int16 v10;

  if (*(_QWORD *)(a1 + 224))
  {
    v7 = *(unsigned int *)(a1 + 232);
    v8 = *(_QWORD **)(a1 + 216);
    if (v8[1] == v7)
      return 2;
    else
      return *(unsigned __int16 *)(*v8 + 12 * v7 + 8) == 21;
  }
  else
  {
    *(_BYTE *)(a1 + 26) = 1;
    v2 = *(_QWORD *)(a1 + 184);
    v3 = *(_BYTE *)(a1 + 24);
    v4 = *(_WORD *)(a1 + 192);
    v5 = *(_BYTE *)(a1 + 194);
    sub_22F14651C(a1, v9);
    *(_QWORD *)(a1 + 184) = v2;
    *(_BYTE *)(a1 + 24) = v3;
    *(_BYTE *)(a1 + 194) = v5;
    *(_WORD *)(a1 + 192) = v4;
    *(_BYTE *)(a1 + 26) = 0;
    if (v10 == 1)
      return 2;
    else
      return v10 == 21;
  }
}

uint64_t sub_22F146980(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t v6;
  uint64_t result;
  int v10;
  int v11;
  _BYTE v13[32];

  v2 = a2;
  if (*(unsigned __int8 **)(a1 + 144) != a2)
  {
    v4 = *(a2 - 1);
    if (v4 != 13 && v4 != 10)
      return 0;
  }
  v6 = *(_QWORD *)(a1 + 152);
  if ((unint64_t)(v6 - (_QWORD)v2) >= 7)
  {
    if (*(_DWORD *)v2 == 1010580540 && *(_DWORD *)(v2 + 3) == 1010580540)
      goto LABEL_19;
  }
  else if ((unint64_t)(v6 - (_QWORD)v2) < 5)
  {
    return 0;
  }
  if (*(_DWORD *)v2 != 1044266558 || v2[4] != 32)
    return 0;
LABEL_19:
  if (*(_DWORD *)(a1 + 208) || *(_BYTE *)(a1 + 26))
    return 0;
  if (*v2 == 60)
    v10 = 1;
  else
    v10 = 2;
  result = sub_22F146A94((uint64_t)v2, v6, v10);
  if (result)
  {
    sub_22F410E24((uint64_t)v13, a1, (int)v2, 1031);
    sub_22E3BB0B8((uint64_t)v13);
    *(_DWORD *)(a1 + 208) = v10;
    while (1)
    {
      v11 = *v2;
      if (v11 == 10 || v11 == 13)
        break;
      ++v2;
    }
    *(_QWORD *)(a1 + 184) = v2;
    return 1;
  }
  return result;
}

uint64_t sub_22F146A94(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;
  uint64_t v12;
  unint64_t i;

  v3 = a2 - a1;
  if (a3 == 2)
    v4 = 5;
  else
    v4 = 7;
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = a2 - a1;
  v12 = a1 + v5;
  for (i = v3 - v5; ; i -= v10)
  {
    v6 = llvm::StringRef::find();
    if (!v6)
    {
      v7 = v12;
      goto LABEL_17;
    }
    if (v6 == -1)
      break;
    v7 = v12;
    v8 = *(unsigned __int8 *)(v6 + v12 - 1);
    if (v8 == 10 || v8 == 13)
      return v12 + v6;
LABEL_17:
    v10 = v6 + v4;
    if (i < v6 + v4)
      v10 = i;
    v12 = v7 + v10;
  }
  return 0;
}

uint64_t sub_22F146B5C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (*(unsigned __int8 **)(a1 + 144) == a2 || ((v3 = *(a2 - 1), v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    v5 = *(_DWORD *)(a1 + 208);
    if (v5)
    {
      if (!*(_BYTE *)(a1 + 26))
      {
        v7 = 1;
        while (a2[v7] == *a2)
        {
          if (++v7 == 4)
          {
            result = sub_22F146A94((uint64_t)a2, *(_QWORD *)(a1 + 152), v5);
            if (result)
            {
              v8 = *(_QWORD *)(a1 + 152);
              if (result != v8)
              {
                while (1)
                {
                  v9 = *(unsigned __int8 *)result;
                  if (v9 == 10 || v9 == 13)
                    break;
                  if (++result == v8)
                  {
                    result = *(_QWORD *)(a1 + 152);
                    break;
                  }
                }
              }
              *(_QWORD *)(a1 + 184) = result;
              *(_DWORD *)(a1 + 208) = 0;
              return 1;
            }
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_22F146C18(uint64_t a1, uint64_t a2, char a3)
{
  char v3;
  __int16 v6;
  __int16 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 v22;
  int v23;
  unsigned __int8 v24;
  int v25;
  unsigned __int8 v26;
  int v27;
  unsigned __int8 v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  char v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  char v69;
  int v70;
  unsigned __int8 v71;
  int v72;
  int v73;
  unsigned __int8 v74;
  int v75;
  unsigned __int8 v76;
  int v77;
  unsigned __int8 v78;
  int v79;
  unsigned __int8 v80;
  int v81;
  unsigned __int8 v82;
  int v83;
  unsigned __int8 v84;
  int v85;
  unsigned __int8 v86;
  int v87;
  unsigned __int8 v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned __int8 v95;
  int v96;
  unsigned __int8 v97;
  int v98;
  unsigned __int8 v99;
  int v100;
  unsigned __int8 v101;
  int v102;
  unsigned __int8 v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned __int8 *v173;
  int v174;
  int v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  int v179;
  unsigned __int8 *v180;
  uint64_t v181;
  unsigned __int8 *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  int v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 *v194;
  int v195;
  unsigned __int8 *v196;
  uint64_t v197;
  unsigned __int8 *v198;
  int v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  unsigned __int8 *v203;
  uint64_t v204;
  unsigned __int8 *v205;
  uint64_t v206;
  unsigned __int8 *v207;
  int v208;
  unsigned __int8 *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned __int8 *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  unsigned __int8 *v222;
  int v223;
  uint64_t v224;
  unsigned __int8 *v225;
  int v226;
  unsigned __int8 v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  uint64_t v233;
  unsigned __int8 *v234;
  int v235;
  unsigned __int8 *v236;
  uint64_t v237;
  unsigned __int8 *v238;
  uint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  int v242;
  unsigned __int8 *v243;
  int v244;
  unsigned __int8 *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int8 *v248;
  uint64_t v249;
  unsigned __int8 *v250;
  uint64_t v251;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  __int16 v256;
  uint64_t v257;
  unsigned __int8 *v258;
  uint64_t v259;
  unsigned __int8 *v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unsigned __int8 *v268;
  uint64_t v269;
  int v270;
  int v271;
  unsigned int v272;
  unsigned __int8 *v273;
  uint64_t v274;
  unsigned __int8 *v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  unsigned __int8 *v281;
  uint64_t v282;
  unsigned __int8 *v283;
  uint64_t v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unsigned __int8 *v287;
  uint64_t v288;
  _BYTE v289[32];
  _BYTE v290[32];
  _BYTE v291[32];
  unint64_t v292;
  char v293;
  uint64_t v294;
  char v295;
  void *__p;
  uint64_t v297;
  uint64_t v298;
  char v299;
  uint64_t v300[4];
  _BYTE v301[32];
  _BYTE v302[32];
  _BYTE v303[32];
  _BYTE v304[32];
  _BYTE v305[32];
  uint64_t v306;
  unsigned __int8 *v307;
  char v308;

  v308 = a3;
  v6 = 60;
  while (2)
  {
    v7 = *(_WORD *)(a2 + 18) & 0xFFF7;
    *(_WORD *)(a2 + 18) = v7;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(unsigned __int8 **)(a1 + 184);
    v307 = v8;
    if ((word_22F4ADB24[*v8] & 5) != 0)
    {
      v9 = 0;
      do
        v307 = &v8[++v9];
      while ((word_22F4ADB24[*v307] & 5) != 0);
      v10 = &v8[v9];
      if (*(unsigned __int8 *)(a1 + 178) >= 2u)
      {
        *(_DWORD *)(a2 + 4) = v9;
        v53 = (_DWORD)v8 - *(_DWORD *)(a1 + 144);
        v54 = *(_DWORD *)(a1 + 160);
        if (v54 < 0)
          v55 = sub_22F142B40(*(_QWORD *)(a1 + 8), v54, v53, v9);
        else
          v55 = v54 + v53;
        *(_DWORD *)a2 = v55;
        *(_WORD *)(a2 + 16) = 0;
        goto LABEL_209;
      }
      *(_QWORD *)(a1 + 184) = v10;
      *(_WORD *)(a2 + 18) = v7 | 2;
      v8 += v9;
    }
    v306 = 0;
    v11 = *v8;
    if (v11 == 63 || v11 == 92)
    {
      LODWORD(v292) = 0;
      v12 = sub_22F142CD4(a1, v8, (int *)&v292, a2);
      v13 = &v307[v292];
      v307 = v13;
    }
    else
    {
      v13 = v8 + 1;
      v307 = v8 + 1;
      v12 = *v8;
    }
    if ((word_22F4ADB24[v12] & 2) == 0)
      *(_QWORD *)(a1 + 200) = 0;
    switch(v12)
    {
      case 0u:
        v14 = (uint64_t)(v13 - 1);
        if (v13 - 1 == *(unsigned __int8 **)(a1 + 152))
          goto LABEL_162;
        v15 = *(_QWORD *)(a1 + 8);
        if (v15)
        {
          if (*(_QWORD *)(v15 + 752))
          {
            v16 = *(_QWORD *)(a1 + 144);
            if (*(_DWORD *)(a1 + 160) + (_DWORD)v14 - (_DWORD)v16 == *(_DWORD *)(v15 + 764))
            {
              *(_DWORD *)(a2 + 16) = 0;
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              v127 = *(_DWORD *)(a1 + 184);
              *(_DWORD *)(a2 + 4) = (_DWORD)v13 - v127;
              v128 = v127 - v16;
              v129 = *(_DWORD *)(a1 + 160);
              if (v129 < 0)
                v130 = sub_22F142B40(v15, v129, v128, (int)v13 - v127);
              else
                v130 = v129 + v128;
              *(_DWORD *)a2 = v130;
              *(_WORD *)(a2 + 16) = 3;
              goto LABEL_478;
            }
          }
        }
        if (!*(_BYTE *)(a1 + 26))
        {
          sub_22F410E24((uint64_t)v305, a1, v14, 1262);
          sub_22E3BB0B8((uint64_t)v305);
          v13 = v307;
        }
        v17 = *(_WORD *)(a2 + 18) | 2;
        goto LABEL_31;
      case 9u:
      case 0xBu:
      case 0xCu:
      case 0x20u:
        goto LABEL_115;
      case 0xAu:
        goto LABEL_29;
      case 0xDu:
        if (*v13 == 10)
          v307 = ++v13;
LABEL_29:
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v57 = *(_QWORD *)(a1 + 8);
          if (v57)
          {
            if ((*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) & 0x4000000000000) != 0)
              v58 = 2;
            else
              v58 = *(_BYTE *)(v57 + 536) & 1;
            *(_BYTE *)(a1 + 178) = v58;
          }
          *(_WORD *)(a1 + 192) = 257;
          *(_QWORD *)(a1 + 200) = v13 - 1;
          v6 = 2;
          goto LABEL_205;
        }
        v17 = *(_WORD *)(a2 + 18) & 0xFFFD;
LABEL_31:
        *(_WORD *)(a2 + 18) = v17;
        v18 = a1;
        v19 = a2;
        v20 = v13;
        goto LABEL_32;
      case 0x1Au:
        if ((**(_BYTE **)(a1 + 168) & 0x20) == 0)
          goto LABEL_204;
        if (!*(_BYTE *)(a1 + 26))
        {
          sub_22F410E24((uint64_t)v304, a1, (_DWORD)v13 - 1, 1201);
          sub_22E3BB0B8((uint64_t)v304);
          v13 = v307;
        }
        v14 = (uint64_t)(v13 - 1);
LABEL_162:
        v69 = sub_22F14657C(a1, a2, v14);
        goto LABEL_519;
      case 0x21u:
        v70 = *v13;
        if (v70 == 63 || v70 == 92)
        {
          HIDWORD(v306) = 0;
          v71 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v71 = *v13;
        }
        if (v71 == 61)
        {
          v131 = v307;
          if (HIDWORD(v306) == 1)
          {
            v132 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v132 = v292;
          }
          v307 = &v131[v132];
          v6 = 41;
        }
        else
        {
          v6 = 40;
        }
        goto LABEL_205;
      case 0x22u:
        v3 = 1;
        *(_WORD *)(a1 + 32) = 1;
        if (*(_BYTE *)(a1 + 25))
          v72 = 15;
        else
          v72 = 13;
        sub_22F144A68(a1, a2, v13, v72);
        return v3 & 1;
      case 0x23u:
        v73 = *v13;
        if (v73 == 63 || v73 == 92)
        {
          HIDWORD(v306) = 0;
          v74 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v74 = *v13;
        }
        if (v74 != 64)
        {
          if (v74 != 35)
            goto LABEL_623;
          v133 = v307;
          v134 = HIDWORD(v306);
          goto LABEL_299;
        }
        if ((**(_BYTE **)(a1 + 168) & 0x20) == 0)
          goto LABEL_623;
        if (!*(_BYTE *)(a1 + 26))
        {
          sub_22F410E24((uint64_t)v290, a1, *(_QWORD *)(a1 + 184), 1199);
          sub_22E3BB0B8((uint64_t)v290);
        }
        v162 = v307;
        if (HIDWORD(v306) == 1)
        {
          v163 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v307, (int *)&v292, a2);
          v163 = v292;
        }
        v307 = &v162[v163];
        goto LABEL_522;
      case 0x24u:
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 3) & 0x20) == 0)
          goto LABEL_204;
        if (!*(_BYTE *)(a1 + 26))
        {
          sub_22F410E24((uint64_t)v303, a1, (_DWORD)v13 - 1, 1203);
          sub_22E3BB0B8((uint64_t)v303);
          v13 = v307;
        }
        goto LABEL_516;
      case 0x25u:
        v75 = *v13;
        if (v75 == 63 || v75 == 92)
        {
          HIDWORD(v306) = 0;
          v76 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v76 = *v13;
        }
        if (v76 == 61)
        {
          v136 = v307;
          if (HIDWORD(v306) == 1)
          {
            v137 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v137 = v292;
          }
          v307 = &v136[v137];
          v6 = 45;
          goto LABEL_205;
        }
        v138 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) & 0x400000000;
        if (v76 == 62 && v138)
        {
          v139 = v307;
          if (HIDWORD(v306) == 1)
          {
            v140 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v140 = v292;
          }
          v307 = &v139[v140];
LABEL_481:
          v6 = 24;
          goto LABEL_205;
        }
        v6 = 44;
        if (v76 != 58 || !v138)
          goto LABEL_205;
        v171 = v307;
        if (HIDWORD(v306) == 1)
        {
          v172 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v307, (int *)&v292, a2);
          v172 = v292;
        }
        v225 = &v171[v172];
        v307 = &v171[v172];
        v226 = v171[v172];
        if (v226 == 63 || v226 == 92)
        {
          HIDWORD(v306) = 0;
          v227 = sub_22F142CD4(a1, v225, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v227 = *v225;
        }
        if (v227 == 64)
        {
          if ((**(_BYTE **)(a1 + 168) & 0x20) != 0)
          {
            v236 = v307;
            if (HIDWORD(v306) == 1)
            {
              v237 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v237 = v292;
            }
            v307 = &v236[v237];
            if (!*(_BYTE *)(a1 + 26))
            {
              sub_22F410E24((uint64_t)v302, a1, *(_QWORD *)(a1 + 184), 1199);
              sub_22E3BB0B8((uint64_t)v302);
            }
LABEL_522:
            v6 = 68;
            goto LABEL_205;
          }
        }
        else if (v227 == 37)
        {
          v234 = &v307[HIDWORD(v306)];
          v235 = *v234;
          if (v235 == 63 || v235 == 92)
          {
            LODWORD(v306) = 0;
            LOBYTE(v235) = sub_22F142CD4(a1, v234, (int *)&v306, 0);
          }
          else
          {
            LODWORD(v306) = 1;
          }
          if (v235 == 58)
          {
            v258 = v307;
            if (HIDWORD(v306) == 1)
            {
              v259 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v259 = v292;
            }
            v133 = &v258[v259];
            v134 = v306;
LABEL_299:
            if (v134 == 1)
            {
              v135 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v133, (int *)&v292, a2);
              v135 = v292;
            }
            v307 = &v133[v135];
            v6 = 67;
            goto LABEL_205;
          }
        }
LABEL_623:
        if (!v308 || *(_BYTE *)(a1 + 26) || *(_BYTE *)(a1 + 177))
        {
          v6 = 66;
          goto LABEL_205;
        }
        v260 = v307;
        v261 = *(_DWORD *)(a1 + 184);
        v262 = (_DWORD)v307 - v261;
        *(_DWORD *)(a2 + 4) = (_DWORD)v307 - v261;
        v263 = v261 - *(_DWORD *)(a1 + 144);
        v264 = *(_DWORD *)(a1 + 160);
        if (v264 < 0)
          v265 = sub_22F142B40(*(_QWORD *)(a1 + 8), v264, v263, v262);
        else
          v265 = v264 + v263;
        *(_DWORD *)a2 = v265;
        *(_WORD *)(a2 + 16) = 66;
        *(_QWORD *)(a1 + 184) = v260;
        sub_22F168624(*(_QWORD *)(a1 + 8), (unsigned int *)a2);
        v3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 9) != 0;
        return v3 & 1;
      case 0x26u:
        v77 = *v13;
        if (v77 == 63 || v77 == 92)
        {
          HIDWORD(v306) = 0;
          v78 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v78 = *v13;
        }
        if (v78 == 61)
        {
          v164 = v307;
          if (HIDWORD(v306) == 1)
          {
            v165 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v165 = v292;
          }
          v307 = &v164[v165];
          v6 = 29;
        }
        else if (v78 == 38)
        {
          v141 = v307;
          if (HIDWORD(v306) == 1)
          {
            v142 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v142 = v292;
          }
          v307 = &v141[v142];
          v6 = 28;
        }
        else
        {
          v6 = 27;
        }
        goto LABEL_205;
      case 0x27u:
        v3 = 1;
        *(_WORD *)(a1 + 32) = 1;
        sub_22F145368(a1, a2, v13, 8);
        return v3 & 1;
      case 0x28u:
        v6 = 21;
        goto LABEL_205;
      case 0x29u:
        v6 = 22;
        goto LABEL_205;
      case 0x2Au:
        v79 = *v13;
        if (v79 == 63 || v79 == 92)
        {
          HIDWORD(v306) = 0;
          v80 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v80 = *v13;
        }
        if (v80 == 61)
        {
          v143 = v307;
          if (HIDWORD(v306) == 1)
          {
            v144 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v144 = v292;
          }
          v307 = &v143[v144];
          v6 = 31;
        }
        else
        {
          v6 = 30;
        }
        goto LABEL_205;
      case 0x2Bu:
        v81 = *v13;
        if (v81 == 63 || v81 == 92)
        {
          HIDWORD(v306) = 0;
          v82 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v82 = *v13;
        }
        if (v82 == 61)
        {
          v166 = v307;
          if (HIDWORD(v306) == 1)
          {
            v167 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v167 = v292;
          }
          v307 = &v166[v167];
          v6 = 34;
        }
        else if (v82 == 43)
        {
          v145 = v307;
          if (HIDWORD(v306) == 1)
          {
            v146 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v146 = v292;
          }
          v307 = &v145[v146];
          v6 = 33;
        }
        else
        {
          v6 = 32;
        }
        goto LABEL_205;
      case 0x2Cu:
        v6 = 65;
        goto LABEL_205;
      case 0x2Du:
        v83 = *v13;
        if (v83 == 63 || v83 == 92)
        {
          HIDWORD(v306) = 0;
          v84 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v84 = *v13;
        }
        switch(v84)
        {
          case '>':
            v173 = v307;
            v174 = HIDWORD(v306);
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 1) != 0
              && ((v175 = v307[HIDWORD(v306)], v175 != 63) && v175 != 92
                ? (LODWORD(v306) = 1)
                : (LODWORD(v306) = 0,
                   LOBYTE(v175) = sub_22F142CD4(a1, &v307[HIDWORD(v306)], (int *)&v306, 0),
                   v173 = v307,
                   v174 = HIDWORD(v306)),
                  v175 == 42))
            {
              if (v174 == 1)
              {
                v228 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v173, (int *)&v292, a2);
                v228 = v292;
              }
              v238 = &v173[v228];
              if ((_DWORD)v306 == 1)
              {
                v239 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v238, (int *)&v292, a2);
                v239 = v292;
              }
              v307 = &v238[v239];
              v6 = 70;
            }
            else
            {
              if (v174 == 1)
              {
                v229 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v173, (int *)&v292, a2);
                v229 = v292;
              }
              v307 = &v173[v229];
              v6 = 36;
            }
            break;
          case '=':
            v176 = v307;
            if (HIDWORD(v306) == 1)
            {
              v177 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v177 = v292;
            }
            v307 = &v176[v177];
            v6 = 38;
            break;
          case '-':
            v147 = v307;
            if (HIDWORD(v306) == 1)
            {
              v148 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v148 = v292;
            }
            v307 = &v147[v148];
            v6 = 37;
            break;
          default:
            v6 = 35;
            break;
        }
        goto LABEL_205;
      case 0x2Eu:
        v85 = *v13;
        if (v85 == 63 || v85 == 92)
        {
          HIDWORD(v306) = 0;
          v86 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v86 = *v13;
        }
        if ((v86 - 48) > 9u)
        {
          if (v86 == 42 && (**(_QWORD **)(a1 + 168) & 0x100) != 0)
          {
            v307 += HIDWORD(v306);
            v6 = 69;
          }
          else if (v86 == 46
                 && ((v178 = &v307[HIDWORD(v306)], v179 = *v178, v179 != 63) && v179 != 92
                   ? (LODWORD(v306) = 1)
                   : (LODWORD(v306) = 0, LOBYTE(v179) = sub_22F142CD4(a1, v178, (int *)&v306, 0)),
                     v179 == 46))
          {
            v230 = v307;
            if (HIDWORD(v306) == 1)
            {
              v231 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v231 = v292;
            }
            v240 = &v230[v231];
            if ((_DWORD)v306 == 1)
            {
              v241 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v240, (int *)&v292, a2);
              v241 = v292;
            }
            v307 = &v240[v241];
            v6 = 26;
          }
          else
          {
            v6 = 25;
          }
          goto LABEL_205;
        }
        v149 = 1;
        *(_WORD *)(a1 + 32) = 1;
        v150 = v307;
        if (HIDWORD(v306) != 1)
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v307, (int *)&v292, a2);
          v149 = v292;
        }
        sub_22F1442D0(a1, a2, &v150[v149]);
        goto LABEL_613;
      case 0x2Fu:
        v21 = *v13;
        if (v21 == 63 || v21 == 92)
        {
          HIDWORD(v306) = 0;
          v22 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v22 = *v13;
        }
        switch(v22)
        {
          case '*':
            v37 = v307;
            if (HIDWORD(v306) == 1)
            {
              v38 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v38 = v292;
            }
            if ((sub_22F145DF8(a1, a2, &v37[v38], &v308) & 1) != 0)
              goto LABEL_613;
            goto LABEL_112;
          case '/':
            if (*(_BYTE *)(a1 + 176)
              && ((v33 = *(_QWORD *)(a1 + 168), (*(_BYTE *)(v33 + 1) & 1) != 0)
               || (*(_QWORD *)(v33 + 8) & 0x4000000000000) == 0)
              || ((v34 = *(_QWORD *)(a1 + 8)) == 0 || (*(_WORD *)(v34 + 536) & 0x200) == 0)
              && ((v35 = &v307[HIDWORD(v306)], v36 = *v35, v36 != 63) && v36 != 92
                ? (LODWORD(v306) = 1)
                : (LODWORD(v306) = 0, LOBYTE(v36) = sub_22F142CD4(a1, v35, (int *)&v306, 0)),
                  v36 != 42))
            {
              v45 = v307;
              if (HIDWORD(v306) == 1)
              {
                v46 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v307, (int *)&v292, a2);
                v46 = v292;
              }
              v47 = &v45[v46];
              while (2)
              {
                if ((sub_22F145950(a1, a2, v47, &v308) & 1) != 0)
                  goto LABEL_613;
                while (1)
                {
                  v13 = *(unsigned __int8 **)(a1 + 184);
                  v307 = v13;
                  v50 = *v13;
                  if (v50 != 47)
                    goto LABEL_130;
                  v51 = v13[1];
                  if (v51 != 42)
                    break;
                  if (*(_BYTE *)(a1 + 178))
                  {
LABEL_129:
                    v50 = 47;
LABEL_130:
                    if ((word_22F4ADB24[v50] & 5) == 0)
                      goto LABEL_112;
LABEL_115:
                    *(_WORD *)(a2 + 18) |= 2u;
                    if ((sub_22F14575C(a1, a2, v13, &v308) & 1) != 0)
                      goto LABEL_613;
                  }
                  else if ((sub_22F145DF8(a1, a2, v13 + 2, &v308) & 1) != 0)
                  {
                    goto LABEL_613;
                  }
                }
                if (v51 == 47 && !*(_BYTE *)(a1 + 178))
                {
                  if (*(_BYTE *)(a1 + 176))
                  {
                    v52 = *(_QWORD *)(a1 + 168);
                    if ((*(_BYTE *)(v52 + 1) & 1) != 0 || (*(_QWORD *)(v52 + 8) & 0x4000000000000) == 0)
                    {
                      v47 = v13 + 2;
                      continue;
                    }
                  }
                }
                goto LABEL_129;
              }
            }
            break;
          case '=':
            v104 = v307;
            if (HIDWORD(v306) == 1)
            {
              v105 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v105 = v292;
            }
            v307 = &v104[v105];
            v6 = 43;
            goto LABEL_205;
        }
        v6 = 42;
        goto LABEL_205;
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
        v3 = 1;
        *(_WORD *)(a1 + 32) = 1;
        sub_22F1442D0(a1, a2, v13);
        return v3 & 1;
      case 0x3Au:
        v87 = *v13;
        if (v87 == 63 || v87 == 92)
        {
          HIDWORD(v306) = 0;
          v88 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v88 = *v13;
        }
        v151 = *(_QWORD *)(a1 + 168);
        if ((*(_QWORD *)(v151 + 8) & 0x400000000) != 0 && v88 == 62)
        {
          v152 = v307;
          if (HIDWORD(v306) == 1)
          {
            v153 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v153 = v292;
          }
          v307 = &v152[v153];
LABEL_408:
          v6 = 20;
        }
        else
        {
          if ((*(_BYTE *)(v151 + 1) & 1) != 0)
          {
            if (v88 != 58)
            {
              v6 = 61;
              goto LABEL_205;
            }
          }
          else
          {
            v6 = 61;
            if ((*(_QWORD *)(v151 + 20) & 0x1000000000) == 0 || v88 != 58)
              goto LABEL_205;
          }
          v180 = v307;
          if (HIDWORD(v306) == 1)
          {
            v181 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v181 = v292;
          }
          v307 = &v180[v181];
          v6 = 71;
        }
        goto LABEL_205;
      case 0x3Bu:
        v6 = 62;
        goto LABEL_205;
      case 0x3Cu:
        v23 = *v13;
        if (v23 == 63 || v23 == 92)
        {
          HIDWORD(v306) = 0;
          v24 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v24 = *v13;
        }
        if (*(_BYTE *)(a1 + 25))
        {
          sub_22F144FF0(a1, a2, v307);
LABEL_613:
          v3 = 1;
          return v3 & 1;
        }
        if (v24 != 60)
        {
          if (v24 == 61)
          {
            v63 = &v307[HIDWORD(v306)];
            v64 = *v63;
            if (v64 == 63 || v64 == 92)
            {
              LODWORD(v306) = 0;
              LOBYTE(v64) = sub_22F142CD4(a1, v63, (int *)&v306, 0);
            }
            else
            {
              LODWORD(v306) = 1;
            }
            if (v64 == 62)
            {
              v168 = **(_QWORD **)(a1 + 168);
              if ((v168 & 0x1000) != 0)
              {
                if (!*(_BYTE *)(a1 + 26))
                {
                  sub_22F410E24((uint64_t)v301, a1, *(_QWORD *)(a1 + 184), 1299);
                  sub_22E3BB0B8((uint64_t)v301);
                }
                v192 = v307;
                if (HIDWORD(v306) == 1)
                {
                  v193 = 1;
                }
                else
                {
                  LODWORD(v292) = 0;
                  sub_22F142CD4(a1, v307, (int *)&v292, a2);
                  v193 = v292;
                }
                v209 = &v192[v193];
                if ((_DWORD)v306 == 1)
                {
                  v210 = 1;
                }
                else
                {
                  LODWORD(v292) = 0;
                  sub_22F142CD4(a1, v209, (int *)&v292, a2);
                  v210 = v292;
                }
                v56 = &v209[v210];
                v6 = 50;
                goto LABEL_136;
              }
              if ((v168 & 0x100) != 0 && !*(_BYTE *)(a1 + 26))
              {
                sub_22F410E24((uint64_t)v300, a1, *(_QWORD *)(a1 + 184), 1301);
                v270 = (_DWORD)v307 + HIDWORD(v306) - *(_DWORD *)(a1 + 144);
                v271 = *(_DWORD *)(a1 + 160);
                if (v271 < 0)
                  v272 = sub_22F142B40(*(_QWORD *)(a1 + 8), v271, v270, v306);
                else
                  v272 = v271 + v270;
                v295 = 0;
                v294 = 0;
                v297 = 0;
                v298 = 0x100000000000000;
                v292 = v272 | ((unint64_t)v272 << 32);
                v293 = 0;
                __p = (void *)32;
                v299 = 0;
                sub_22E6D82D0(v300, &v292);
                if (SHIBYTE(v298) < 0)
                  operator delete(__p);
                sub_22E3BB0B8((uint64_t)v300);
              }
            }
            v169 = v307;
            if (HIDWORD(v306) == 1)
            {
              v170 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v170 = v292;
            }
            v56 = &v169[v170];
            v6 = 48;
LABEL_136:
            v307 = v56;
            goto LABEL_205;
          }
          v106 = *(_QWORD *)(a1 + 168);
          v107 = *(_QWORD *)(v106 + 8);
          if ((v107 & 0x400000000) != 0 && v24 == 58)
          {
            v108 = v307;
            v109 = HIDWORD(v306);
            if ((*(_BYTE *)(v106 + 1) & 2) == 0)
              goto LABEL_534;
            v110 = v307[HIDWORD(v306)];
            if (v110 == 63 || v110 == 92)
            {
              LODWORD(v306) = 0;
              LOBYTE(v110) = sub_22F142CD4(a1, &v307[HIDWORD(v306)], (int *)&v306, 0);
              v108 = v307;
              v109 = HIDWORD(v306);
            }
            else
            {
              LODWORD(v306) = 1;
            }
            if (v110 != 58)
              goto LABEL_534;
            v222 = &v108[v109 + v306];
            v223 = *v222;
            if (v223 == 92 || v223 == 63)
            {
              LODWORD(v292) = 0;
              LOBYTE(v223) = sub_22F142CD4(a1, v222, (int *)&v292, 0);
            }
            if ((v223 & 0xFB) == 0x3A)
            {
              v108 = v307;
              v109 = HIDWORD(v306);
LABEL_534:
              if (v109 == 1)
              {
                v224 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v108, (int *)&v292, a2);
                v224 = v292;
              }
              v307 = &v108[v224];
LABEL_538:
              v6 = 19;
LABEL_205:
              *(_WORD *)(a1 + 32) = 1;
              v10 = v307;
              v89 = *(_DWORD *)(a1 + 184);
              v90 = (_DWORD)v307 - v89;
              *(_DWORD *)(a2 + 4) = (_DWORD)v307 - v89;
              v91 = v89 - *(_DWORD *)(a1 + 144);
              v92 = *(_DWORD *)(a1 + 160);
              if (v92 < 0)
                v93 = sub_22F142B40(*(_QWORD *)(a1 + 8), v92, v91, v90);
              else
                v93 = v92 + v91;
              *(_DWORD *)a2 = v93;
              *(_WORD *)(a2 + 16) = v6;
LABEL_209:
              v3 = 1;
              *(_QWORD *)(a1 + 184) = v10;
              return v3 & 1;
            }
            if (!*(_BYTE *)(a1 + 26))
            {
              sub_22F410E24((uint64_t)v291, a1, *(_QWORD *)(a1 + 184), 1304);
              sub_22E3BB0B8((uint64_t)v291);
            }
          }
          else
          {
            if ((v107 & 0x400000000) != 0 && v24 == 37)
            {
              v119 = v307;
              if (HIDWORD(v306) == 1)
              {
                v120 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v307, (int *)&v292, a2);
                v120 = v292;
              }
              v307 = &v119[v120];
LABEL_498:
              v6 = 23;
              goto LABEL_205;
            }
            v6 = 46;
            if (v24 != 35 || HIDWORD(v306) != 1)
              goto LABEL_205;
            v187 = *(_QWORD *)(a1 + 8);
            if (v187)
            {
              if (*(_BYTE *)(*(_QWORD *)(v187 + 32) + 195))
              {
                if (!*(_BYTE *)(a1 + 26))
                {
                  v188 = v307 + 1;
                  v189 = *(unsigned __int8 **)(a1 + 152);
                  if (v307 + 1 != v189)
                  {
                    v190 = v189 - 1;
                    if (v188 != v190)
                    {
                      v191 = -3 - (_DWORD)v307;
                      while (*v188 != 35 || v188[1] != 62)
                      {
                        ++v188;
                        --v191;
                        if (v188 == v190)
                          goto LABEL_552;
                      }
                      v13 = v188 + 2;
                      v275 = v307 - 1;
                      if ((*(_BYTE *)(v106 + 197) & 0x20) == 0)
                      {
                        sub_22F410E24((uint64_t)&v292, a1, (_DWORD)v307 - 1, 1100);
                        sub_22E3BB0B8((uint64_t)&v292);
                      }
                      *(_DWORD *)(a2 + 16) = 0;
                      *(_QWORD *)a2 = 0;
                      *(_QWORD *)(a2 + 8) = 0;
                      v276 = *(_DWORD *)(a1 + 184);
                      v277 = -v191 - v276;
                      *(_DWORD *)(a2 + 4) = v277;
                      v278 = v276 - *(_DWORD *)(a1 + 144);
                      v279 = *(_DWORD *)(a1 + 160);
                      if (v279 < 0)
                        v280 = sub_22F142B40(*(_QWORD *)(a1 + 8), v279, v278, v277);
                      else
                        v280 = v279 + v278;
                      *(_DWORD *)a2 = v280;
                      *(_WORD *)(a2 + 16) = 6;
                      *(_QWORD *)(a1 + 184) = v13;
                      *(_QWORD *)(a2 + 8) = v275;
                      sub_22F18F0FC(*(_QWORD *)(a1 + 8), a2);
                      *(_WORD *)(a2 + 18) |= 0x400u;
LABEL_478:
                      *(_QWORD *)(a1 + 184) = v13;
                      goto LABEL_613;
                    }
                  }
                }
              }
            }
          }
LABEL_552:
          v6 = 46;
          goto LABEL_205;
        }
        v39 = &v307[HIDWORD(v306)];
        v40 = *v39;
        if (v40 == 63 || v40 == 92)
        {
          LODWORD(v306) = 0;
          LOBYTE(v40) = sub_22F142CD4(a1, v39, (int *)&v306, 0);
        }
        else
        {
          LODWORD(v306) = 1;
        }
        if (v40 != 60)
        {
          if (v40 == 61)
          {
            v67 = v307;
            if (HIDWORD(v306) == 1)
            {
              v68 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v68 = v292;
            }
            v124 = &v67[v68];
            if ((_DWORD)v306 == 1)
            {
              v125 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v124, (int *)&v292, a2);
              v125 = v292;
            }
            v307 = &v124[v125];
            v6 = 49;
            goto LABEL_205;
          }
          v116 = v307;
          v117 = HIDWORD(v306);
LABEL_255:
          if (v117 == 1)
          {
            v118 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v116, (int *)&v292, a2);
            v118 = v292;
          }
          v307 = &v116[v118];
          v6 = 47;
          goto LABEL_205;
        }
        if ((sub_22F146980(a1, v307 - 1) & 1) == 0 && (sub_22F146B5C(a1, v307 - 1) & 1) == 0)
        {
          v116 = v307;
          v117 = HIDWORD(v306);
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 68) & 0x20) != 0)
          {
            if (HIDWORD(v306) == 1)
            {
              v126 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v126 = v292;
            }
            v213 = &v116[v126];
            if ((_DWORD)v306 == 1)
            {
              v214 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v213, (int *)&v292, a2);
              v214 = v292;
            }
            v307 = &v213[v214];
            v6 = 73;
            goto LABEL_205;
          }
          goto LABEL_255;
        }
LABEL_112:
        v49 = 2;
LABEL_113:
        if (v49 == 1)
          return v3 & 1;
        continue;
      case 0x3Du:
        v25 = *v13;
        if (v25 == 63 || v25 == 92)
        {
          HIDWORD(v306) = 0;
          v26 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v26 = *v13;
        }
        if (v26 != 61)
        {
          v6 = 63;
          goto LABEL_205;
        }
        v41 = v307;
        if (v307[1] != 61)
          goto LABEL_242;
        if ((sub_22F146B5C(a1, v307 - 1) & 1) != 0)
          goto LABEL_112;
        v41 = v307;
LABEL_242:
        if (HIDWORD(v306) == 1)
        {
          v111 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v41, (int *)&v292, a2);
          v111 = v292;
        }
        v307 = &v41[v111];
        v6 = 64;
        goto LABEL_205;
      case 0x3Eu:
        v27 = *v13;
        if (v27 == 63 || v27 == 92)
        {
          HIDWORD(v306) = 0;
          v28 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v28 = *v13;
        }
        if (v28 != 62)
        {
          if (v28 == 61)
          {
            v59 = v307;
            if (HIDWORD(v306) == 1)
            {
              v60 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v60 = v292;
            }
            v307 = &v59[v60];
            v6 = 53;
          }
          else
          {
            v6 = 51;
          }
          goto LABEL_205;
        }
        v42 = &v307[HIDWORD(v306)];
        v43 = *v42;
        if (v43 == 63 || v43 == 92)
        {
          LODWORD(v306) = 0;
          LOBYTE(v43) = sub_22F142CD4(a1, v42, (int *)&v306, 0);
        }
        else
        {
          LODWORD(v306) = 1;
        }
        if (v43 != 62)
        {
          if (v43 == 61)
          {
            v65 = v307;
            if (HIDWORD(v306) == 1)
            {
              v66 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v66 = v292;
            }
            v121 = &v65[v66];
            if ((_DWORD)v306 == 1)
            {
              v122 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v121, (int *)&v292, a2);
              v122 = v292;
            }
            v307 = &v121[v122];
            v6 = 54;
            goto LABEL_205;
          }
          v112 = v307;
          v113 = HIDWORD(v306);
LABEL_248:
          if (v113 == 1)
          {
            v114 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v112, (int *)&v292, a2);
            v114 = v292;
          }
          v307 = &v112[v114];
          v6 = 52;
          goto LABEL_205;
        }
        if ((sub_22F146980(a1, v307 - 1) & 1) == 0 && (sub_22F146B5C(a1, v307 - 1) & 1) == 0)
        {
          v112 = v307;
          v113 = HIDWORD(v306);
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 68) & 0x20) != 0)
          {
            if (HIDWORD(v306) == 1)
            {
              v123 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v123 = v292;
            }
            v211 = &v112[v123];
            if ((_DWORD)v306 == 1)
            {
              v212 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v211, (int *)&v292, a2);
              v212 = v292;
            }
            v307 = &v211[v212];
            v6 = 74;
            goto LABEL_205;
          }
          goto LABEL_248;
        }
        goto LABEL_112;
      case 0x3Fu:
        goto LABEL_205;
      case 0x40u:
        if (*(v13 - 1) != 64 || (*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 0x40) == 0)
          goto LABEL_204;
        v6 = 72;
        goto LABEL_205;
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x53u:
      case 0x54u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
      case 0x5Fu:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
        goto LABEL_516;
      case 0x4Cu:
        *(_WORD *)(a1 + 32) = 1;
        v94 = *v13;
        if (v94 == 63 || v94 == 92)
        {
          HIDWORD(v306) = 0;
          v95 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v95 = *v13;
        }
        if (v95 == 34)
        {
          v154 = v307;
          if (HIDWORD(v306) == 1)
          {
            v155 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v155 = v292;
          }
          v182 = &v154[v155];
          v183 = a1;
          v184 = a2;
          v185 = 14;
LABEL_612:
          sub_22F144A68(v183, v184, v182, v185);
          goto LABEL_613;
        }
        if (v95 == 82 && (**(_QWORD **)(a1 + 168) & 0x200) != 0)
        {
          v13 = v307;
          v156 = &v307[HIDWORD(v306)];
          v157 = *v156;
          if (v157 == 63 || v157 == 92)
          {
            LODWORD(v306) = 0;
            LOBYTE(v157) = sub_22F142CD4(a1, v156, (int *)&v306, 0);
            v13 = v307;
          }
          else
          {
            LODWORD(v306) = 1;
          }
          if (v157 != 34)
            goto LABEL_516;
          if (HIDWORD(v306) == 1)
          {
            v257 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v13, (int *)&v292, a2);
            v257 = v292;
          }
          v268 = &v13[v257];
          if ((_DWORD)v306 == 1)
          {
            v269 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v268, (int *)&v292, a2);
            v269 = v292;
          }
          v253 = (char *)&v268[v269];
          v254 = a1;
          v255 = a2;
          v256 = 14;
LABEL_681:
          sub_22F411808(v254, v255, v253, v256);
          goto LABEL_613;
        }
        v13 = v307;
        if (v95 != 39)
        {
LABEL_516:
          *(_WORD *)(a1 + 32) = 1;
          goto LABEL_517;
        }
        if (HIDWORD(v306) == 1)
        {
          v186 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v307, (int *)&v292, a2);
          v186 = v292;
        }
        v218 = &v13[v186];
        v219 = a1;
        v220 = a2;
        v221 = 9;
        break;
      case 0x52u:
        *(_WORD *)(a1 + 32) = 1;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 2) == 0)
          goto LABEL_517;
        v96 = *v13;
        if (v96 == 63 || v96 == 92)
        {
          HIDWORD(v306) = 0;
          v97 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
          v13 = v307;
        }
        else
        {
          HIDWORD(v306) = 1;
          v97 = *v13;
        }
        if (v97 != 34)
          goto LABEL_517;
        if (HIDWORD(v306) == 1)
        {
          v200 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v13, (int *)&v292, a2);
          v200 = v292;
        }
        v253 = (char *)&v13[v200];
        v254 = a1;
        v255 = a2;
        v256 = 13;
        goto LABEL_681;
      case 0x55u:
        *(_WORD *)(a1 + 32) = 1;
        if ((**(_WORD **)(a1 + 168) & 0x202) == 0)
          goto LABEL_517;
        v98 = *v13;
        if (v98 == 63 || v98 == 92)
        {
          HIDWORD(v306) = 0;
          v99 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v99 = *v13;
        }
        if (v99 == 34)
        {
          v201 = v307;
          if (HIDWORD(v306) == 1)
          {
            v202 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v202 = v292;
          }
          v182 = &v201[v202];
          v183 = a1;
          v184 = a2;
          v185 = 18;
          goto LABEL_612;
        }
        if (v99 != 39)
        {
          if (v99 == 82)
          {
            v13 = v307;
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 2) != 0)
            {
              v194 = &v307[HIDWORD(v306)];
              v195 = *v194;
              if (v195 == 63 || v195 == 92)
              {
                LODWORD(v306) = 0;
                LOBYTE(v195) = sub_22F142CD4(a1, v194, (int *)&v306, 0);
                v13 = v307;
              }
              else
              {
                LODWORD(v306) = 1;
              }
              if (v195 == 34)
              {
                if (HIDWORD(v306) == 1)
                {
                  v247 = 1;
                }
                else
                {
                  LODWORD(v292) = 0;
                  sub_22F142CD4(a1, v13, (int *)&v292, a2);
                  v247 = v292;
                }
                v273 = &v13[v247];
                if ((_DWORD)v306 == 1)
                {
                  v274 = 1;
                }
                else
                {
                  LODWORD(v292) = 0;
                  sub_22F142CD4(a1, v273, (int *)&v292, a2);
                  v274 = v292;
                }
                v253 = (char *)&v273[v274];
                v254 = a1;
                v255 = a2;
                v256 = 18;
                goto LABEL_681;
              }
            }
          }
          else
          {
            v13 = v307;
          }
LABEL_517:
          v215 = a1;
          v216 = a2;
          v217 = v13;
          goto LABEL_518;
        }
        v203 = v307;
        if (HIDWORD(v306) == 1)
        {
          v204 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v307, (int *)&v292, a2);
          v204 = v292;
        }
        v218 = &v203[v204];
        v219 = a1;
        v220 = a2;
        v221 = 12;
        break;
      case 0x5Bu:
        goto LABEL_538;
      case 0x5Cu:
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 3) & 0x40) != 0)
          goto LABEL_204;
        v29 = sub_22F143094(a1, &v307, *(_QWORD *)(a1 + 184), a2);
        if (!v29)
          goto LABEL_204;
        v30 = v29;
        if (sub_22F411AA0(a1, a2, v29, (int)v307))
        {
          v18 = a1;
          v19 = a2;
          v20 = v307;
LABEL_32:
          if ((sub_22F14575C(v18, v19, v20, &v308) & 1) != 0)
            goto LABEL_613;
          goto LABEL_112;
        }
        v69 = sub_22F411584(a1, a2, v30, v307);
LABEL_519:
        v3 = v69;
        return v3 & 1;
      case 0x5Du:
        goto LABEL_408;
      case 0x5Eu:
        v100 = *v13;
        if (v100 == 63 || v100 == 92)
        {
          HIDWORD(v306) = 0;
          v101 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v101 = *v13;
        }
        if (v101 == 61)
        {
          v158 = v307;
          if (HIDWORD(v306) == 1)
          {
            v159 = 1;
          }
          else
          {
            LODWORD(v292) = 0;
            sub_22F142CD4(a1, v307, (int *)&v292, a2);
            v159 = v292;
          }
          v307 = &v158[v159];
          v6 = 56;
        }
        else
        {
          v6 = 55;
          if (v101 == 94 && (*(_DWORD *)(*(_QWORD *)(a1 + 168) + 52) & 0x40000000) != 0)
          {
            v160 = v307;
            if (HIDWORD(v306) == 1)
            {
              v161 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v161 = v292;
            }
            v307 = &v160[v161];
            v6 = 75;
          }
        }
        goto LABEL_205;
      case 0x75u:
        *(_WORD *)(a1 + 32) = 1;
        if ((**(_WORD **)(a1 + 168) & 0x202) == 0)
          goto LABEL_650;
        v102 = *v13;
        if (v102 == 63 || v102 == 92)
        {
          HIDWORD(v306) = 0;
          v103 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v103 = *v13;
        }
        if (v103 > 0x37u)
        {
          if (v103 == 56)
          {
            v207 = &v307[HIDWORD(v306)];
            v208 = *v207;
            if (v208 == 63 || v208 == 92)
            {
              LODWORD(v306) = 0;
              LOBYTE(v208) = sub_22F142CD4(a1, v207, (int *)&v306, 0);
            }
            else
            {
              LODWORD(v306) = 1;
            }
            switch(v208)
            {
              case 'R':
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 2) != 0)
                {
                  v242 = v306;
                  v243 = &v307[HIDWORD(v306) + v306];
                  v244 = *v243;
                  if (v244 == 63 || v244 == 92)
                  {
                    LODWORD(v300[0]) = 0;
                    LOBYTE(v244) = sub_22F142CD4(a1, v243, (int *)v300, 0);
                  }
                  else
                  {
                    LODWORD(v300[0]) = 1;
                  }
                  if (v244 == 34)
                  {
                    v283 = v307;
                    if (HIDWORD(v306) == 1)
                    {
                      v284 = 1;
                    }
                    else
                    {
                      LODWORD(v292) = 0;
                      sub_22F142CD4(a1, v307, (int *)&v292, a2);
                      v284 = v292;
                    }
                    v285 = &v283[v284];
                    if (v242 == 1)
                    {
                      v286 = 1;
                    }
                    else
                    {
                      LODWORD(v292) = 0;
                      sub_22F142CD4(a1, v285, (int *)&v292, a2);
                      v286 = v292;
                    }
                    v287 = &v285[v286];
                    if (LODWORD(v300[0]) == 1)
                    {
                      v288 = 1;
                    }
                    else
                    {
                      LODWORD(v292) = 0;
                      sub_22F142CD4(a1, v287, (int *)&v292, a2);
                      v288 = v292;
                    }
                    v253 = (char *)&v287[v288];
                    v254 = a1;
                    v255 = a2;
                    v256 = 16;
                    goto LABEL_681;
                  }
                }
                break;
              case '\'':
                if ((**(_WORD **)(a1 + 168) & 0x808) != 0)
                {
                  v245 = v307;
                  if (HIDWORD(v306) == 1)
                  {
                    v246 = 1;
                  }
                  else
                  {
                    LODWORD(v292) = 0;
                    sub_22F142CD4(a1, v307, (int *)&v292, a2);
                    v246 = v292;
                  }
                  v266 = &v245[v246];
                  if ((_DWORD)v306 == 1)
                  {
                    v267 = 1;
                  }
                  else
                  {
                    LODWORD(v292) = 0;
                    sub_22F142CD4(a1, v266, (int *)&v292, a2);
                    v267 = v292;
                  }
                  v218 = &v266[v267];
                  v219 = a1;
                  v220 = a2;
                  v221 = 10;
                  goto LABEL_547;
                }
                break;
              case '"':
                v232 = v307;
                if (HIDWORD(v306) == 1)
                {
                  v233 = 1;
                }
                else
                {
                  LODWORD(v292) = 0;
                  sub_22F142CD4(a1, v307, (int *)&v292, a2);
                  v233 = v292;
                }
                v250 = &v232[v233];
                if ((_DWORD)v306 == 1)
                {
                  v251 = 1;
                }
                else
                {
                  LODWORD(v292) = 0;
                  sub_22F142CD4(a1, v250, (int *)&v292, a2);
                  v251 = v292;
                }
                v182 = &v250[v251];
                v183 = a1;
                v184 = a2;
                v185 = 16;
                goto LABEL_612;
            }
          }
          else if (v103 == 82 && (*(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) & 2) != 0)
          {
            v198 = &v307[HIDWORD(v306)];
            v199 = *v198;
            if (v199 == 63 || v199 == 92)
            {
              LODWORD(v306) = 0;
              LOBYTE(v199) = sub_22F142CD4(a1, v198, (int *)&v306, 0);
            }
            else
            {
              LODWORD(v306) = 1;
            }
            if (v199 == 34)
            {
              v248 = v307;
              if (HIDWORD(v306) == 1)
              {
                v249 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v307, (int *)&v292, a2);
                v249 = v292;
              }
              v281 = &v248[v249];
              if ((_DWORD)v306 == 1)
              {
                v282 = 1;
              }
              else
              {
                LODWORD(v292) = 0;
                sub_22F142CD4(a1, v281, (int *)&v292, a2);
                v282 = v292;
              }
              v253 = (char *)&v281[v282];
              v254 = a1;
              v255 = a2;
              v256 = 17;
              goto LABEL_681;
            }
          }
        }
        else
        {
          if (v103 == 34)
          {
            v205 = v307;
            if (HIDWORD(v306) == 1)
            {
              v206 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v206 = v292;
            }
            v182 = &v205[v206];
            v183 = a1;
            v184 = a2;
            v185 = 17;
            goto LABEL_612;
          }
          if (v103 == 39)
          {
            v196 = v307;
            if (HIDWORD(v306) == 1)
            {
              v197 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v197 = v292;
            }
            v218 = &v196[v197];
            v219 = a1;
            v220 = a2;
            v221 = 11;
            goto LABEL_547;
          }
        }
LABEL_650:
        v217 = v307;
        v215 = a1;
        v216 = a2;
LABEL_518:
        v69 = sub_22F14407C(v215, v216, v217);
        goto LABEL_519;
      case 0x7Bu:
        goto LABEL_498;
      case 0x7Cu:
        v31 = *v13;
        if (v31 == 63 || v31 == 92)
        {
          HIDWORD(v306) = 0;
          v32 = sub_22F142CD4(a1, v13, (int *)&v306 + 1, 0);
        }
        else
        {
          HIDWORD(v306) = 1;
          v32 = *v13;
        }
        if (v32 != 124)
        {
          if (v32 == 61)
          {
            v61 = v307;
            if (HIDWORD(v306) == 1)
            {
              v62 = 1;
            }
            else
            {
              LODWORD(v292) = 0;
              sub_22F142CD4(a1, v307, (int *)&v292, a2);
              v62 = v292;
            }
            v307 = &v61[v62];
            v6 = 59;
          }
          else
          {
            v6 = 57;
          }
          goto LABEL_205;
        }
        v44 = v307;
        if (v307[1] != 124)
          goto LABEL_250;
        if ((sub_22F146B5C(a1, v307 - 1) & 1) != 0)
          goto LABEL_112;
        v44 = v307;
LABEL_250:
        if (HIDWORD(v306) == 1)
        {
          v115 = 1;
        }
        else
        {
          LODWORD(v292) = 0;
          sub_22F142CD4(a1, v44, (int *)&v292, a2);
          v115 = v292;
        }
        v307 = &v44[v115];
        v6 = 58;
        goto LABEL_205;
      case 0x7Du:
        goto LABEL_481;
      case 0x7Eu:
        v6 = 39;
        goto LABEL_205;
      default:
        if ((v12 & 0x80) == 0)
        {
LABEL_204:
          v6 = 0;
          goto LABEL_205;
        }
        LODWORD(v292) = 0;
        v307 = v13 - 1;
        if (!sub_22F311A7C(&v307, *(_QWORD *)(a1 + 152)))
        {
          if (sub_22F411AA0(a1, a2, v292, (int)v307))
          {
            v48 = sub_22F14575C(a1, a2, v307, &v308);
            if (v48)
              v49 = 1;
            else
              v49 = 2;
            v3 |= v48;
          }
          else
          {
            v3 = sub_22F411584(a1, a2, v292, v307);
            v49 = 1;
          }
          goto LABEL_113;
        }
        if (*(_BYTE *)(a1 + 26) || *(_BYTE *)(a1 + 24) || (*(_WORD *)(*(_QWORD *)(a1 + 8) + 536) & 0x200) != 0)
        {
          v6 = 0;
          v56 = v307 + 1;
          goto LABEL_136;
        }
        sub_22F410E24((uint64_t)v289, a1, (int)v307, 1053);
        sub_22E3BB0B8((uint64_t)v289);
        *(_QWORD *)(a1 + 184) = v307 + 1;
        goto LABEL_112;
    }
    break;
  }
LABEL_547:
  sub_22F145368(v219, v220, v218, v221);
  goto LABEL_613;
}

uint64_t sub_22F14943C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v4 = *(unsigned int *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(v5 + 8) == v4)
  {
    v6 = v5 + 24;
    do
    {
      v7 = *(unsigned __int8 *)(v5 + 16);
      if (v7 == 25)
      {
        *(_WORD *)(a1 + 32) = 1;
      }
      else if (v7 == 26)
      {
        return sub_22F14657C(a1, a2, *(_QWORD *)(a1 + 152));
      }
      *(_DWORD *)(a1 + 232) = 0;
      v8 = *(_QWORD *)(a1 + 224) - 1;
      v9 = (_QWORD *)(v5 + 24);
      *(_QWORD *)(a1 + 216) = v6;
      *(_QWORD *)(a1 + 224) = v8;
      v10 = *(_QWORD *)(v5 + 32);
      v6 += 24;
      v5 += 24;
    }
    while (!v10);
    v11 = 0;
    LODWORD(v4) = 0;
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 232);
    v9 = *(_QWORD **)(a1 + 216);
  }
  v12 = v11 + 1;
  *(_DWORD *)(a1 + 232) = v12;
  v13 = (unsigned int *)(*v9 + 12 * v4);
  v14 = *((unsigned __int16 *)v13 + 4);
  if (v12 > 1 || v14 != 66)
  {
    *(_WORD *)(a1 + 32) = 1;
    if (*(_BYTE *)(a1 + 25))
    {
      if (v14 == 46)
      {
        v15 = *(_QWORD *)(a1 + 144) + *v13;
        *(_QWORD *)(a1 + 184) = v15;
        sub_22F144FF0(a1, a2, (unsigned __int8 *)(v15 + 1));
        if (*(_WORD *)(a2 + 16) == 15)
        {
          v16 = **(_QWORD **)(a1 + 216);
          v17 = *(_QWORD *)(a1 + 144);
          v18 = *(_QWORD *)(a1 + 184);
          v19 = *(_DWORD *)(a1 + 232);
          if (v17 + (unint64_t)*(unsigned int *)(v16 + 12 * v19) < v18)
          {
            do
              ++v19;
            while (v17 + (unint64_t)*(unsigned int *)(v16 + 12 * v19) < v18);
            *(_DWORD *)(a1 + 232) = v19;
          }
        }
        return 1;
      }
    }
  }
  v21 = sub_22F411BAC(a1, v13, a2);
  v22 = *(unsigned __int16 *)(a2 + 16);
  if (v22 != 6)
  {
    if (v22 != 66)
    {
      if ((v22 - 7) >= 6 && (v22 - 13) >= 6)
      {
        if (v22 == 2)
        {
          *(_BYTE *)(a1 + 24) = 0;
        }
        else if (v22 == 61)
        {
          v23 = *(_QWORD *)(a1 + 168);
          if (((*(_BYTE *)(v23 + 1) & 1) != 0 || (*(_QWORD *)(v23 + 20) & 0x1000000000) != 0)
            && **(_BYTE **)(a1 + 184) == 58)
          {
            ++*(_DWORD *)(a1 + 232);
            *(_WORD *)(a2 + 16) = 71;
          }
        }
      }
      else
      {
        *(_QWORD *)(a2 + 8) = v21;
      }
      return 1;
    }
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      sub_22F168624(*(_QWORD *)(a1 + 8), (unsigned int *)a2);
      return 0;
    }
    return 1;
  }
  *(_QWORD *)(a2 + 8) = v21;
  if (*(_BYTE *)(a1 + 26) || (*((_BYTE *)sub_22F18F0FC(*(_QWORD *)(a1 + 8), a2) + 3) & 0x80) == 0)
    return 1;
  return sub_22F18F434(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_22F149680(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int *v10;

  v3 = 0;
  v5 = *(_QWORD *)(a1 + 216);
  v4 = *(_QWORD *)(a1 + 224);
  while (2)
  {
    while (2)
    {
      v6 = v3;
      v7 = v5 + 24;
      --v4;
      for (v5 += 24; ; v5 += 24)
      {
        v8 = *(unsigned __int8 *)(v5 + 16);
        if ((v8 - 15) >= 4)
          break;
        if (!v6)
        {
          *(_QWORD *)(a1 + 216) = v7;
          *(_QWORD *)(a1 + 224) = v4;
          goto LABEL_14;
        }
LABEL_9:
        v7 += 24;
        --v4;
      }
      if ((v8 - 12) < 3)
      {
        *(_QWORD *)(a1 + 216) = v7;
        *(_QWORD *)(a1 + 224) = v4;
        v3 = v6 + 1;
        continue;
      }
      break;
    }
    if (v8 != 19)
    {
      if (v8 == 26)
      {
        *(_QWORD *)(a1 + 216) = v7;
        *(_QWORD *)(a1 + 224) = v4;
        *(_DWORD *)(a1 + 232) = 0;
        return sub_22F14657C(a1, a2, *(_QWORD *)(a1 + 152));
      }
      goto LABEL_9;
    }
    *(_QWORD *)(a1 + 216) = v7;
    *(_QWORD *)(a1 + 224) = v4;
    v3 = v6 - 1;
    if (v6)
      continue;
    break;
  }
LABEL_14:
  v10 = *(unsigned int **)v5;
  *(_DWORD *)(a1 + 232) = 1;
  sub_22F411BAC(a1, v10, a2);
  return 0;
}

void sub_22F149740(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_24FAC8A48;
  sub_22E730D24((uint64_t)(a1 + 14));
  v2 = (_QWORD *)a1[8];
  if (v2 != a1 + 10)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F14979C(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 184) - *(_DWORD *)(a1 + 144);
  v2 = *(_DWORD *)(a1 + 160);
  if (v2 < 0)
    return sub_22F142B40(*(_QWORD *)(a1 + 8), v2, v1, 1);
  else
    return (v2 + v1);
}

uint64_t sub_22F1497C4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  _BOOL4 v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v60;
  uint64_t v61;
  _BYTE *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  _BOOL4 v69;
  unsigned __int8 *v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  _BYTE *v76;
  BOOL v77;
  _BYTE *v78;
  int v79;
  unsigned __int8 *v80;
  _BOOL4 v81;
  char v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  char v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL4 v133;
  int v135;
  _QWORD v136[3];
  __int16 v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t v144;
  __int16 v145;

  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a8;
  *(_QWORD *)(a1 + 24) = a2;
  v11 = &a2[a3];
  *(_QWORD *)(a1 + 72) = a1 + 96;
  v12 = a1 + 72;
  *(_OWORD *)(a1 + 80) = xmmword_22F44E330;
  *(_QWORD *)(a1 + 32) = &a2[a3];
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 68) = 0;
  v13 = *(_WORD *)(a1 + 128);
  *(_BYTE *)(a1 + 130) = 0;
  *(_WORD *)(a1 + 128) = v13 & 0xC000;
  if ((word_22F4ADB24[a2[a3]] & 0x1E8) != 0)
  {
    *(_DWORD *)(a8 + 312) = a4;
    *(_DWORD *)(a8 + 316) = 1055;
    if (*(char *)(a8 + 311) < 0)
    {
      **(_BYTE **)(a8 + 288) = 0;
      *(_QWORD *)(a8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a8 + 288) = 0;
      *(_BYTE *)(a8 + 311) = 0;
    }
    v136[0] = a8 + 320;
    v136[1] = 0;
    v136[2] = a8;
    v137 = 1;
    *(_BYTE *)(a8 + 320) = 0;
    *(_DWORD *)(a8 + 664) = 0;
    v21 = *(unsigned int *)(a8 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(a8 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(a8 + 776) = 0;
    v24 = (unsigned __int8 **)v136;
LABEL_20:
    sub_22E3BB0B8((uint64_t)v24);
    *(_WORD *)(a1 + 128) |= 1u;
    return a1;
  }
  if (*a2 != 48)
  {
    *(_DWORD *)(a1 + 64) = 10;
    if (!a3)
    {
      v11 = a2;
LABEL_29:
      *(_QWORD *)(a1 + 56) = v11;
      v135 = a4;
      goto LABEL_117;
    }
    while (1)
    {
      v25 = *a2;
      if (v25 != 39 && (word_22F4ADB24[v25] & 8) == 0)
        break;
      ++a2;
      if (!--a3)
        goto LABEL_29;
    }
    *(_QWORD *)(a1 + 56) = a2;
    v30 = a4;
    v135 = a4;
    goto LABEL_115;
  }
  v135 = a4;
  v16 = a2 + 1;
  *(_QWORD *)(a1 + 56) = a2 + 1;
  v17 = a2[1] & 0xDF;
  if (v17 == 66)
  {
    if ((a2[2] & 0xFE) == 0x30)
    {
      if ((*(_QWORD *)a6 & 0x100) != 0)
        v27 = 1197;
      else
        v27 = 1196;
      if ((*(_QWORD *)a6 & 0x400) != 0)
        v28 = 1292;
      else
        v28 = v27;
      *(_DWORD *)(a8 + 312) = a4;
      *(_DWORD *)(a8 + 316) = v28;
      if (*(char *)(a8 + 311) < 0)
      {
        **(_BYTE **)(a8 + 288) = 0;
        *(_QWORD *)(a8 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a8 + 288) = 0;
        *(_BYTE *)(a8 + 311) = 0;
      }
      v142 = (unsigned __int8 *)(a8 + 320);
      v143 = 0;
      v144 = a8;
      v145 = 1;
      *(_BYTE *)(a8 + 320) = 0;
      *(_DWORD *)(a8 + 664) = 0;
      v41 = *(unsigned int *)(a8 + 776);
      if ((_DWORD)v41)
      {
        v42 = *(_QWORD *)(a8 + 768);
        v43 = 56 * v41;
        do
        {
          if (*(char *)(v42 + v43 - 9) < 0)
            operator delete(*(void **)(v42 + v43 - 32));
          v43 -= 56;
        }
        while (v43);
      }
      *(_DWORD *)(a8 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v142);
      v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 1);
      *(_QWORD *)(a1 + 56) = v16;
      *(_DWORD *)(a1 + 64) = 2;
      *(_QWORD *)(a1 + 40) = v16;
      v44 = *(unsigned __int8 **)(a1 + 32);
      if (v16 != v44)
      {
        v45 = v16;
        while (1)
        {
          v46 = *v16;
          v47 = v46 > 0x31;
          v48 = (1 << v46) & 0x3008000000000;
          if (v47 || v48 == 0)
            break;
          ++v16;
          ++v45;
          if (v16 == v44)
          {
            v16 = *(unsigned __int8 **)(a1 + 32);
            goto LABEL_40;
          }
        }
        *(_QWORD *)(a1 + 56) = v16;
        if ((word_22F4ADB24[*v16] & 0x18) == 0 || sub_22F14ADA0(*(unint64_t **)(a1 + 8), v45, v44 - v45))
          goto LABEL_116;
        v89 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(v89 + 312) = sub_22F1418F4(v135, *(_DWORD *)(a1 + 56) - *(_DWORD *)(a1 + 24), *(uint64_t **)a1, *(_QWORD **)(a1 + 8))+ a4;
        *(_DWORD *)(v89 + 316) = 1051;
        if (*(char *)(v89 + 311) < 0)
        {
          **(_BYTE **)(v89 + 288) = 0;
          *(_QWORD *)(v89 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v89 + 288) = 0;
          *(_BYTE *)(v89 + 311) = 0;
        }
        v138 = (unsigned __int8 *)(v89 + 320);
        v139 = 0;
        v140 = v89;
        v141 = 1;
        *(_BYTE *)(v89 + 320) = 0;
        *(_DWORD *)(v89 + 664) = 0;
        v111 = *(unsigned int *)(v89 + 776);
        if ((_DWORD)v111)
        {
          v112 = *(_QWORD *)(v89 + 768);
          v113 = 56 * v111;
          do
          {
            if (*(char *)(v112 + v113 - 9) < 0)
              operator delete(*(void **)(v112 + v113 - 32));
            v113 -= 56;
          }
          while (v113);
        }
        *(_DWORD *)(v89 + 776) = 0;
        sub_22E3B89A8(&v138, *(void **)(a1 + 56), 1uLL);
        v114 = v138;
        if (!v138)
        {
          v114 = (unsigned __int8 *)sub_22E3B8AAC(v139);
          v138 = v114;
        }
        v114[*v114 + 1] = 2;
        v115 = v138;
        v116 = *v138;
        *v138 = v116 + 1;
        *(_QWORD *)&v115[8 * v116 + 16] = 2;
        v55 = &v138;
        goto LABEL_94;
      }
LABEL_40:
      *(_QWORD *)(a1 + 56) = v16;
      goto LABEL_116;
    }
    goto LABEL_39;
  }
  if (v17 != 88 || (v19 = a2 + 2, v18 = a2[2], v18 != 46) && (word_22F4ADB24[v18] & 0x18) == 0)
  {
LABEL_39:
    *(_DWORD *)(a1 + 64) = 8;
    if (a3 == 1)
      goto LABEL_40;
    v29 = a2[1];
    if (v29 == 39 || (v29 & 0xF8) == 0x30)
    {
      v31 = 0;
      do
      {
        if (a3 - 2 == v31)
        {
          *(_QWORD *)(a1 + 56) = v11;
          *(_QWORD *)(a1 + 40) = v16;
          goto LABEL_116;
        }
        v32 = a2[v31++ + 2];
      }
      while (v32 == 39 || (v32 & 0xF8) == 0x30);
      *(_QWORD *)(a1 + 40) = v16;
      v16 = &a2[v31 + 1];
      *(_QWORD *)(a1 + 56) = v16;
      if (a3 - 1 != v31)
        goto LABEL_52;
      goto LABEL_116;
    }
    *(_QWORD *)(a1 + 56) = v16;
LABEL_52:
    if ((word_22F4ADB24[*v16] & 8) != 0)
    {
      while (v16 != v11)
      {
        v33 = *v16;
        if (v33 != 39 && (word_22F4ADB24[v33] & 8) == 0)
        {
          v11 = v16;
          break;
        }
        ++v16;
      }
      v60 = *v11 - 46;
      v47 = v60 > 0x37;
      v61 = (1 << v60) & 0x80000000800001;
      if (!v47 && v61 != 0)
      {
        *(_QWORD *)(a1 + 56) = v11;
        *(_DWORD *)(a1 + 64) = 10;
      }
    }
    v30 = a4;
LABEL_115:
    sub_22F14A8D0(a1, v30);
    goto LABEL_116;
  }
  *(_QWORD *)(a1 + 56) = v19;
  *(_DWORD *)(a1 + 64) = 16;
  *(_QWORD *)(a1 + 40) = v19;
  if (a3 == 2)
  {
    LODWORD(v20) = (_DWORD)a2 + 2;
LABEL_11:
    *(_DWORD *)(a8 + 312) = sub_22F1418F4(a4, (int)v20 - (int)a2, a5, (_QWORD *)a6) + a4;
    *(_DWORD *)(a8 + 316) = 1046;
    if (*(char *)(a8 + 311) < 0)
    {
      **(_BYTE **)(a8 + 288) = 0;
      *(_QWORD *)(a8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a8 + 288) = 0;
      *(_BYTE *)(a8 + 311) = 0;
    }
    v142 = (unsigned __int8 *)(a8 + 320);
    v143 = 0;
    v144 = a8;
    v145 = 1;
    *(_BYTE *)(a8 + 320) = 0;
    *(_DWORD *)(a8 + 664) = 0;
    v50 = *(unsigned int *)(a8 + 776);
    if ((_DWORD)v50)
    {
      v51 = *(_QWORD *)(a8 + 768);
      v52 = 56 * v50;
      do
      {
        if (*(char *)(v51 + v52 - 9) < 0)
          operator delete(*(void **)(v51 + v52 - 32));
        v52 -= 56;
      }
      while (v52);
      LODWORD(v50) = *(unsigned __int8 *)(a8 + 320);
    }
    *(_DWORD *)(a8 + 776) = 0;
    v53 = (**(_QWORD **)(a1 + 8) >> 8) & 1;
    *(_BYTE *)(a8 + 321 + v50) = 3;
    *(_QWORD *)(a8 + 336 + 8 * v50) = v53;
    v54 = (v50 + 1);
    *(_BYTE *)(a8 + 321 + v54) = 2;
    *(_BYTE *)(a8 + 320) = v50 + 2;
    *(_QWORD *)(a8 + 336 + 8 * v54) = 1;
LABEL_93:
    v55 = &v142;
LABEL_94:
    sub_22E3BB0B8((uint64_t)v55);
    *(_WORD *)(a1 + 128) |= 1u;
    goto LABEL_116;
  }
  v35 = a2[2];
  if (v35 == 39 || (word_22F4ADB24[v35] & 0x18) != 0)
  {
    v56 = a3;
    v57 = 3;
    while (a3 != v57)
    {
      v58 = a2[v57++];
      if (v58 != 39 && (word_22F4ADB24[v58] & 0x18) == 0)
      {
        v56 = v57 - 1;
        break;
      }
    }
    v20 = &a2[v56];
    *(_QWORD *)(a1 + 56) = &a2[v56];
    if (v56 == 2)
    {
      v36 = 0;
    }
    else if (v56 == 3)
    {
      v36 = *v19 != 39;
      if (a3 == 3)
        goto LABEL_106;
    }
    else
    {
      if (v56 == a3)
        goto LABEL_235;
      v36 = 1;
    }
  }
  else
  {
    v36 = 0;
    v20 = a2 + 2;
  }
  if (*v20 == 46)
  {
    v37 = v20 + 1;
    *(_QWORD *)(a1 + 56) = v20 + 1;
    *(_BYTE *)(a1 + 69) = 1;
    if (v20 + 1 == v11)
    {
      v90 = 0;
      *(_QWORD *)(a1 + 56) = v11;
    }
    else
    {
      v38 = 1;
      while (1)
      {
        v39 = v20[v38];
        if (v39 != 39 && (word_22F4ADB24[v39] & 0x18) == 0)
          break;
        if (v11 - v20 == ++v38)
        {
          v38 = v11 - v20;
          goto LABEL_229;
        }
      }
      v11 = &v20[v38];
LABEL_229:
      *(_QWORD *)(a1 + 56) = v11;
      if (v38 == 1)
      {
        v90 = 0;
      }
      else
      {
        if (v38 != 2)
        {
LABEL_234:
          sub_22F14AC60(a1, a4, v37, 0);
          v20 = *(unsigned __int8 **)(a1 + 56);
          goto LABEL_235;
        }
        v90 = *v37 != 39;
      }
    }
    if (!v90 && !v36)
    {
      LODWORD(v20) = (_DWORD)v11;
      goto LABEL_11;
    }
    goto LABEL_234;
  }
LABEL_106:
  if (!v36)
    goto LABEL_11;
LABEL_235:
  if ((*v20 | 0x20) == 0x70)
  {
    sub_22F14AC60(a1, v135, v20, 1u);
    v91 = *(_QWORD *)(a1 + 56);
    v92 = (_BYTE *)(v91 + 1);
    *(_QWORD *)(a1 + 56) = v91 + 1;
    *(_BYTE *)(a1 + 68) = 1;
    v93 = *(_BYTE **)(a1 + 32);
    if ((_BYTE *)(v91 + 1) != v93)
    {
      v94 = *v92;
      if (v94 == 45 || v94 == 43)
      {
        v92 = (_BYTE *)(v91 + 2);
        *(_QWORD *)(a1 + 56) = v91 + 2;
      }
    }
    if (v92 == v93)
      goto LABEL_256;
    v95 = 0;
    while (1)
    {
      v96 = v92[v95];
      if (v96 != 39 && (word_22F4ADB24[v96] & 8) == 0)
        break;
      if (v93 - v92 == ++v95)
      {
        v95 = v93 - v92;
        goto LABEL_253;
      }
    }
    v93 = &v92[v95];
LABEL_253:
    if (!v95 || v95 == 1 && *v92 == 39)
    {
LABEL_256:
      if ((*(_WORD *)(a1 + 128) & 1) == 0)
      {
        v99 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(v99 + 312) = sub_22F1418F4(v135, (int)v91 - *(_DWORD *)(a1 + 24), *(uint64_t **)a1, *(_QWORD **)(a1 + 8))+ a4;
        *(_DWORD *)(v99 + 316) = 1042;
        if (*(char *)(v99 + 311) < 0)
        {
          **(_BYTE **)(v99 + 288) = 0;
          *(_QWORD *)(v99 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v99 + 288) = 0;
          *(_BYTE *)(v99 + 311) = 0;
        }
        v142 = (unsigned __int8 *)(v99 + 320);
        v143 = 0;
        v144 = v99;
        v145 = 1;
        *(_BYTE *)(v99 + 320) = 0;
        *(_DWORD *)(v99 + 664) = 0;
        v103 = *(unsigned int *)(v99 + 776);
        if ((_DWORD)v103)
        {
          v104 = *(_QWORD *)(v99 + 768);
          v105 = 56 * v103;
          do
          {
            if (*(char *)(v104 + v105 - 9) < 0)
              operator delete(*(void **)(v104 + v105 - 32));
            v105 -= 56;
          }
          while (v105);
        }
        *(_DWORD *)(v99 + 776) = 0;
        goto LABEL_93;
      }
    }
    else
    {
      sub_22F14AC60(a1, v135, v92, 0);
      *(_QWORD *)(a1 + 56) = v93;
      v100 = *(_QWORD *)(a1 + 8);
      if ((*(_QWORD *)(v100 + 8) & 0x800000000) != 0)
      {
        if ((*(_BYTE *)(v100 + 1) & 8) == 0)
          goto LABEL_116;
        v101 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(v101 + 312) = a4;
        *(_DWORD *)(v101 + 316) = 1300;
        if (*(char *)(v101 + 311) < 0)
        {
          **(_BYTE **)(v101 + 288) = 0;
          *(_QWORD *)(v101 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v101 + 288) = 0;
          *(_BYTE *)(v101 + 311) = 0;
        }
        v142 = (unsigned __int8 *)(v101 + 320);
        v143 = 0;
        v144 = v101;
        v145 = 1;
        *(_BYTE *)(v101 + 320) = 0;
        *(_DWORD *)(v101 + 664) = 0;
        v129 = *(unsigned int *)(v101 + 776);
        if ((_DWORD)v129)
        {
          v130 = *(_QWORD *)(v101 + 768);
          v131 = 56 * v129;
          do
          {
            if (*(char *)(v130 + v131 - 9) < 0)
              operator delete(*(void **)(v130 + v131 - 32));
            v131 -= 56;
          }
          while (v131);
        }
      }
      else
      {
        v101 = *(_QWORD *)(a1 + 16);
        if ((*(_QWORD *)v100 & 0x100) != 0)
          v102 = 1208;
        else
          v102 = 1207;
        *(_DWORD *)(v101 + 312) = a4;
        *(_DWORD *)(v101 + 316) = v102;
        if (*(char *)(v101 + 311) < 0)
        {
          **(_BYTE **)(v101 + 288) = 0;
          *(_QWORD *)(v101 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v101 + 288) = 0;
          *(_BYTE *)(v101 + 311) = 0;
        }
        v142 = (unsigned __int8 *)(v101 + 320);
        v143 = 0;
        v144 = v101;
        v145 = 1;
        *(_BYTE *)(v101 + 320) = 0;
        *(_DWORD *)(v101 + 664) = 0;
        v126 = *(unsigned int *)(v101 + 776);
        if ((_DWORD)v126)
        {
          v127 = *(_QWORD *)(v101 + 768);
          v128 = 56 * v126;
          do
          {
            if (*(char *)(v127 + v128 - 9) < 0)
              operator delete(*(void **)(v127 + v128 - 32));
            v128 -= 56;
          }
          while (v128);
        }
      }
      *(_DWORD *)(v101 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v142);
    }
  }
  else if (*(_BYTE *)(a1 + 69))
  {
    v98 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v98 + 312) = sub_22F1418F4(v135, (int)v20 - *(_DWORD *)(a1 + 24), *(uint64_t **)a1, *(_QWORD **)(a1 + 8))
                           + a4;
    *(_DWORD *)(v98 + 316) = 1046;
    if (*(char *)(v98 + 311) < 0)
    {
      **(_BYTE **)(v98 + 288) = 0;
      *(_QWORD *)(v98 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v98 + 288) = 0;
      *(_BYTE *)(v98 + 311) = 0;
    }
    v142 = (unsigned __int8 *)(v98 + 320);
    v143 = 0;
    v144 = v98;
    v145 = 1;
    *(_BYTE *)(v98 + 320) = 0;
    *(_DWORD *)(v98 + 664) = 0;
    v106 = *(unsigned int *)(v98 + 776);
    if ((_DWORD)v106)
    {
      v107 = *(_QWORD *)(v98 + 768);
      v108 = 56 * v106;
      do
      {
        if (*(char *)(v107 + v108 - 9) < 0)
          operator delete(*(void **)(v107 + v108 - 32));
        v108 -= 56;
      }
      while (v108);
      LODWORD(v106) = *(unsigned __int8 *)(v98 + 320);
    }
    *(_DWORD *)(v98 + 776) = 0;
    v109 = (**(_QWORD **)(a1 + 8) >> 8) & 1;
    *(_BYTE *)(v98 + 321 + v106) = 3;
    *(_QWORD *)(v98 + 336 + 8 * v106) = v109;
    v110 = (v106 + 1);
    *(_BYTE *)(v98 + 321 + v110) = 2;
    *(_BYTE *)(v98 + 320) = v106 + 2;
    *(_QWORD *)(v98 + 336 + 8 * v110) = 0;
    goto LABEL_93;
  }
LABEL_116:
  if ((*(_WORD *)(a1 + 128) & 1) != 0)
    return a1;
LABEL_117:
  v63 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v63;
  sub_22F14AC60(a1, v135, v63, 1u);
  if ((*(_BYTE *)(a6 + 204) & 1) != 0)
  {
    v64 = *(unsigned __int8 **)(a1 + 56);
    v65 = *(unsigned __int8 **)(a1 + 32);
    if (v64 != v65)
    {
      while (1)
      {
        v66 = *v64 - 75;
        v47 = v66 > 0x27;
        v67 = (1 << v66) & 0x8100000081;
        if (!v47 && v67 != 0)
          break;
        if (++v64 == v65)
          goto LABEL_125;
      }
      *(_BYTE *)(a1 + 71) = 1;
    }
  }
LABEL_125:
  if (*(_BYTE *)(a1 + 69) || *(_BYTE *)(a1 + 68))
  {
    v133 = *(_BYTE *)(a1 + 71) != 0;
    v69 = *(_BYTE *)(a1 + 71) == 0;
  }
  else
  {
    v133 = 0;
    v69 = 0;
  }
  v70 = *(unsigned __int8 **)(a1 + 56);
  v71 = *(_QWORD *)(a1 + 32);
  if (v70 == (unsigned __int8 *)v71)
  {
    v71 = *(_QWORD *)(a1 + 56);
    goto LABEL_296;
  }
  v72 = 0;
  v73 = !v69;
  v132 = 2;
  while (2)
  {
    v74 = *v70;
    switch(*v70)
    {
      case 'B':
      case 'b':
        v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 104))(a7);
        v70 = *(unsigned __int8 **)(a1 + 56);
        v71 = *(_QWORD *)(a1 + 32);
        v76 = v70 + 3;
        if (v75)
          v77 = (unint64_t)v76 >= v71;
        else
          v77 = 1;
        if (v77)
          goto LABEL_136;
        v88 = *v70;
        if (v88 == 66)
        {
          if (v70[1] != 70)
            goto LABEL_136;
        }
        else if (v88 != 98 || v70[1] != 102)
        {
          goto LABEL_136;
        }
        if (v70[2] == 49 && *v76 == 54)
        {
          v87 = 3;
LABEL_197:
          if (((v73 | v72) & 1) != 0)
            goto LABEL_295;
          v70 += v87;
          v84 = *(_WORD *)(a1 + 128) | 0x20;
          goto LABEL_202;
        }
LABEL_136:
        if ((*(_BYTE *)(a6 + 2) & 0x40) == 0)
          goto LABEL_295;
        v78 = v70 + 1;
        if ((unint64_t)(v70 + 1) >= v71)
          goto LABEL_295;
        v79 = *v70;
        if (v79 == 66)
        {
          if (*v78 != 70)
            goto LABEL_295;
        }
        else if (v79 != 98 || *v78 != 102)
        {
          goto LABEL_295;
        }
        v87 = 1;
        goto LABEL_197;
      case 'F':
      case 'f':
        if (((v73 | v72) & 1) != 0)
          goto LABEL_295;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 96))(a7) & 1) != 0
          || (*(_BYTE *)(a6 + 68) & 0x20) != 0)
        {
          v80 = *(unsigned __int8 **)(a1 + 56);
          v70 = v80 + 2;
          v71 = *(_QWORD *)(a1 + 32);
          if ((unint64_t)(v80 + 2) < v71 && v80[1] == 49 && *v70 == 54)
          {
            v84 = *(_WORD *)(a1 + 128) | 0x200;
            goto LABEL_202;
          }
        }
        else
        {
          v80 = *(unsigned __int8 **)(a1 + 56);
          v71 = *(_QWORD *)(a1 + 32);
        }
        *(_WORD *)(a1 + 128) |= 0x80u;
        v72 = 1;
        v70 = v80;
        goto LABEL_204;
      case 'H':
      case 'h':
        if ((*(_BYTE *)(a6 + 3) & 1) == 0 && (*(_BYTE *)(a6 + 204) & 1) == 0)
          goto LABEL_295;
        v81 = !*(_BYTE *)(a1 + 69) && *(_BYTE *)(a1 + 68) == 0;
        if (((v81 | v72) & 1) != 0)
          goto LABEL_295;
        v84 = *(_WORD *)(a1 + 128) | 0x40;
        goto LABEL_202;
      case 'I':
      case 'i':
        v82 = (*(_BYTE *)a6 & 0x20) == 0 || v69;
        if ((v82 & 1) != 0)
          goto LABEL_154;
        v86 = 8;
        switch(v70[1])
        {
          case '1':
            if (v70[2] != 54)
              goto LABEL_154;
            v86 = 16;
            goto LABEL_292;
          case '3':
            if (v70[2] != 50)
              goto LABEL_154;
            v86 = 32;
            goto LABEL_292;
          case '6':
            if (v70[2] != 52)
              goto LABEL_154;
            v86 = 64;
LABEL_292:
            v132 = 3;
            break;
          case '8':
            break;
          default:
            goto LABEL_154;
        }
        if ((v72 & 1) == 0)
        {
          *(_BYTE *)(a1 + 130) = v86;
          v70 += v132;
          *(_QWORD *)(a1 + 56) = v70;
        }
        goto LABEL_295;
      case 'J':
      case 'j':
LABEL_154:
        if ((*(_WORD *)(a1 + 128) & 0x100) != 0)
          goto LABEL_295;
        v83 = *(_WORD *)(a1 + 128) | 0x100;
        goto LABEL_175;
      case 'K':
      case 'k':
        if ((*(_BYTE *)(a6 + 204) & 1) == 0
          || (*(_WORD *)(a1 + 128) & 0x1800) != 0
          || !*(_BYTE *)(a1 + 69) && !*(_BYTE *)(a1 + 68))
        {
          goto LABEL_295;
        }
        v83 = *(_WORD *)(a1 + 128) | 0x1000;
        goto LABEL_175;
      case 'L':
      case 'l':
        if ((v72 & 1) != 0)
          goto LABEL_295;
        if (v70[1] != v74)
        {
          v84 = *(_WORD *)(a1 + 128) | 4;
LABEL_202:
          *(_WORD *)(a1 + 128) = v84;
          goto LABEL_203;
        }
        if (v69)
          goto LABEL_295;
        *(_WORD *)(a1 + 128) |= 8u;
        v72 = 1;
        ++v70;
        goto LABEL_204;
      case 'Q':
      case 'q':
        if (((v73 | v72) & 1) != 0)
          goto LABEL_295;
        v84 = *(_WORD *)(a1 + 128) | 0x400;
        goto LABEL_202;
      case 'R':
      case 'r':
        if ((*(_BYTE *)(a6 + 204) & 1) == 0
          || (*(_WORD *)(a1 + 128) & 0x1800) != 0
          || !*(_BYTE *)(a1 + 69) && !*(_BYTE *)(a1 + 68))
        {
          goto LABEL_295;
        }
        v83 = *(_WORD *)(a1 + 128) | 0x800;
        goto LABEL_175;
      case 'U':
      case 'u':
        if (v69)
          goto LABEL_295;
        v85 = *(_WORD *)(a1 + 128);
        if ((v85 & 2) != 0)
          goto LABEL_295;
        v83 = v85 | 2;
LABEL_175:
        *(_WORD *)(a1 + 128) = v83;
        goto LABEL_204;
      case 'W':
      case 'w':
        if (((v69 | v72) & 1) != 0 || (*(_BYTE *)(a6 + 1) & 1) != 0)
          goto LABEL_295;
        if (v74 == 87)
        {
          if (v70[1] != 66)
            goto LABEL_295;
          goto LABEL_194;
        }
        if (v74 == 119 && v70[1] == 98)
        {
LABEL_194:
          *(_WORD *)(a1 + 128) |= 0x2000u;
          *(_QWORD *)(a1 + 56) = ++v70;
LABEL_203:
          v72 = 1;
LABEL_204:
          *(_QWORD *)(a1 + 56) = ++v70;
          if (v70 == (unsigned __int8 *)v71)
            goto LABEL_296;
          continue;
        }
LABEL_295:
        if (v70 == (unsigned __int8 *)v71)
        {
LABEL_296:
          if ((*(_WORD *)(a1 + 128) & 0x100) == 0)
            return a1;
        }
        sub_22F411C48(v12, *(unsigned __int8 **)(a1 + 48), (char **)(v71 - *(_QWORD *)(a1 + 48)));
        if (!sub_22F14ADA0((unint64_t *)a6, *(unsigned __int8 **)(a1 + 72), *(_QWORD *)(a1 + 80)))
        {
          if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 32))
            return a1;
          *(_DWORD *)(a8 + 312) = sub_22F1418F4(v135, *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 24), a5, (_QWORD *)a6)
                                + a4;
          *(_DWORD *)(a8 + 316) = 1052;
          if (*(char *)(a8 + 311) < 0)
          {
            **(_BYTE **)(a8 + 288) = 0;
            *(_QWORD *)(a8 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a8 + 288) = 0;
            *(_BYTE *)(a8 + 311) = 0;
          }
          v142 = (unsigned __int8 *)(a8 + 320);
          v143 = 0;
          v144 = a8;
          v145 = 1;
          *(_BYTE *)(a8 + 320) = 0;
          *(_DWORD *)(a8 + 664) = 0;
          v119 = *(unsigned int *)(a8 + 776);
          if ((_DWORD)v119)
          {
            v120 = *(_QWORD *)(a8 + 768);
            v121 = 56 * v119;
            do
            {
              if (*(char *)(v120 + v121 - 9) < 0)
                operator delete(*(void **)(v120 + v121 - 32));
              v121 -= 56;
            }
            while (v121);
          }
          *(_DWORD *)(a8 + 776) = 0;
          sub_22E3B89A8(&v142, *(void **)(a1 + 48), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 48));
          v122 = v142;
          if (!v142)
          {
            v122 = (unsigned __int8 *)sub_22E3B8AAC(v143);
            v142 = v122;
          }
          if (v133)
            v123 = 2;
          else
            v123 = v69;
          v122[*v122 + 1] = 2;
          v124 = v142;
          v125 = *v142;
          *v142 = v125 + 1;
          *(_QWORD *)&v124[8 * v125 + 16] = v123;
          v24 = &v142;
          goto LABEL_20;
        }
        v118 = *(_WORD *)(a1 + 128);
        if ((v118 & 0x100) == 0)
        {
          *(_BYTE *)(a1 + 130) = 0;
          *(_BYTE *)(a1 + 71) = 0;
          *(_WORD *)(a1 + 128) = v118 & 0xC401;
        }
        *(_BYTE *)(a1 + 70) = 1;
        return a1;
      case 'Z':
      case 'z':
        if (((v69 | v72) & 1) != 0)
          goto LABEL_295;
        v84 = *(_WORD *)(a1 + 128) | 0x10;
        goto LABEL_202;
      default:
        goto LABEL_295;
    }
  }
}

uint64_t sub_22F14A8D0(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  _BYTE *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _QWORD v31[3];
  __int16 v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;

  v3 = result;
  v4 = *(unsigned __int8 **)(result + 56);
  v5 = *v4;
  if ((word_22F4ADB24[*v4] & 0x18) == 0)
  {
LABEL_5:
    if (v5 == 46)
    {
      sub_22F14AC60(v3, a2, v4, 1u);
      v6 = (_BYTE *)(*(_QWORD *)(v3 + 56) + 1);
      *(_QWORD *)(v3 + 56) = v6;
      *(_DWORD *)(v3 + 64) = 10;
      *(_BYTE *)(v3 + 69) = 1;
      result = sub_22F14AC60(v3, a2, v6, 0);
      v4 = *(unsigned __int8 **)(v3 + 56);
      v7 = *(unsigned __int8 **)(v3 + 32);
      if (v4 != v7)
      {
        while (1)
        {
          v8 = *v4;
          if (v8 != 39 && (word_22F4ADB24[v8] & 8) == 0)
            break;
          if (++v4 == v7)
          {
            v4 = *(unsigned __int8 **)(v3 + 32);
            break;
          }
        }
      }
      *(_QWORD *)(v3 + 56) = v4;
      v5 = *v4;
    }
    goto LABEL_14;
  }
  if ((v5 | 0x20) != 0x65)
  {
    result = sub_22F14ADA0(*(unint64_t **)(result + 8), v4, *(_QWORD *)(result + 32) - (_QWORD)v4);
    v4 = *(unsigned __int8 **)(v3 + 56);
    if (!(_DWORD)result)
    {
      v19 = *(_QWORD *)(v3 + 16);
      *(_DWORD *)(v19 + 312) = sub_22F1418F4(a2, (int)v4 - *(_DWORD *)(v3 + 24), *(uint64_t **)v3, *(_QWORD **)(v3 + 8))
                             + a2;
      *(_DWORD *)(v19 + 316) = 1051;
      if (*(char *)(v19 + 311) < 0)
      {
        **(_BYTE **)(v19 + 288) = 0;
        *(_QWORD *)(v19 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v19 + 288) = 0;
        *(_BYTE *)(v19 + 311) = 0;
      }
      v33 = (unsigned __int8 *)(v19 + 320);
      v34 = 0;
      v35 = v19;
      v36 = 1;
      *(_BYTE *)(v19 + 320) = 0;
      *(_DWORD *)(v19 + 664) = 0;
      v24 = *(unsigned int *)(v19 + 776);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v19 + 768);
        v26 = 56 * v24;
        do
        {
          if (*(char *)(v25 + v26 - 9) < 0)
            operator delete(*(void **)(v25 + v26 - 32));
          v26 -= 56;
        }
        while (v26);
      }
      *(_DWORD *)(v19 + 776) = 0;
      sub_22E3B89A8(&v33, *(void **)(v3 + 56), 1uLL);
      v27 = *(_DWORD *)(v3 + 64);
      v28 = v33;
      if (!v33)
      {
        v28 = (unsigned __int8 *)sub_22E3B8AAC(v34);
        v33 = v28;
      }
      v28[*v28 + 1] = 2;
      v29 = v33;
      v30 = *v33;
      *v33 = v30 + 1;
      *(_QWORD *)&v29[8 * v30 + 16] = v27 == 8;
      v23 = &v33;
      goto LABEL_53;
    }
    v5 = *v4;
    goto LABEL_5;
  }
LABEL_14:
  if ((v5 | 0x20) != 0x65)
    return result;
  result = sub_22F14AC60(v3, a2, v4, 1u);
  v10 = *(_QWORD *)(v3 + 56);
  v11 = (_BYTE *)(v10 + 1);
  *(_QWORD *)(v3 + 56) = v10 + 1;
  *(_DWORD *)(v3 + 64) = 10;
  *(_BYTE *)(v3 + 68) = 1;
  v12 = *(_BYTE **)(v3 + 32);
  if ((_BYTE *)(v10 + 1) != v12)
  {
    v13 = *v11;
    if (v13 == 45 || v13 == 43)
    {
      v11 = (_BYTE *)(v10 + 2);
      *(_QWORD *)(v3 + 56) = v10 + 2;
    }
  }
  if (v11 != v12)
  {
    v14 = 0;
    v15 = v12 - v11;
    while (1)
    {
      v16 = v11[v14];
      if (v16 != 39 && (word_22F4ADB24[v16] & 8) == 0)
        break;
      if (v15 == ++v14)
      {
        v14 = v12 - v11;
        if (!v15)
          goto LABEL_31;
        goto LABEL_29;
      }
    }
    v12 = &v11[v14];
    if (!v14)
      goto LABEL_31;
LABEL_29:
    if (v14 != 1 || *v11 != 39)
    {
      result = sub_22F14AC60(v3, a2, v11, 0);
      *(_QWORD *)(v3 + 56) = v12;
      return result;
    }
  }
LABEL_31:
  if ((*(_WORD *)(v3 + 128) & 1) != 0)
    return result;
  v18 = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(v18 + 312) = sub_22F1418F4(a2, (int)v10 - *(_DWORD *)(v3 + 24), *(uint64_t **)v3, *(_QWORD **)(v3 + 8))
                         + a2;
  *(_DWORD *)(v18 + 316) = 1042;
  if (*(char *)(v18 + 311) < 0)
  {
    **(_BYTE **)(v18 + 288) = 0;
    *(_QWORD *)(v18 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v18 + 288) = 0;
    *(_BYTE *)(v18 + 311) = 0;
  }
  v31[0] = v18 + 320;
  v31[1] = 0;
  v31[2] = v18;
  v32 = 1;
  *(_BYTE *)(v18 + 320) = 0;
  *(_DWORD *)(v18 + 664) = 0;
  v20 = *(unsigned int *)(v18 + 776);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(v18 + 768);
    v22 = 56 * v20;
    do
    {
      if (*(char *)(v21 + v22 - 9) < 0)
        operator delete(*(void **)(v21 + v22 - 32));
      v22 -= 56;
    }
    while (v22);
  }
  *(_DWORD *)(v18 + 776) = 0;
  v23 = (unsigned __int8 **)v31;
LABEL_53:
  result = sub_22E3BB0B8((uint64_t)v23);
  *(_WORD *)(v3 + 128) |= 1u;
  return result;
}

uint64_t sub_22F14AC60(uint64_t result, int a2, _BYTE *a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  __int16 v12;

  v5 = result;
  if (a4 == 1)
  {
    if (*(_BYTE **)(result + 24) == a3)
      return result;
    --a3;
  }
  else if (*(_BYTE **)(result + 32) == a3)
  {
    return result;
  }
  if (*a3 == 39)
  {
    v6 = *(_QWORD *)(result + 16);
    *(_DWORD *)(v6 + 312) = sub_22F1418F4(a2, (int)a3 - *(_DWORD *)(result + 24), *(uint64_t **)result, *(_QWORD **)(result + 8))+ a2;
    *(_DWORD *)(v6 + 316) = 1038;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v7 = (unsigned __int8 *)(v6 + 320);
    v11[0] = v6 + 320;
    v11[1] = 0;
    v11[2] = v6;
    v12 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v8 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(v6 + 768);
      v10 = 56 * v8;
      do
      {
        if (*(char *)(v9 + v10 - 9) < 0)
          operator delete(*(void **)(v9 + v10 - 32));
        v10 -= 56;
      }
      while (v10);
      LODWORD(v8) = *v7;
    }
    *(_DWORD *)(v6 + 776) = 0;
    v7[v8 + 1] = 2;
    *(_BYTE *)(v6 + 320) = v8 + 1;
    *(_QWORD *)&v7[8 * v8 + 16] = a4;
    result = sub_22E3BB0B8((uint64_t)v11);
    *(_WORD *)(v5 + 128) |= 1u;
  }
  return result;
}

BOOL sub_22F14ADA0(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  _BOOL8 result;
  unint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[2];
  __int16 v14;

  result = 0;
  v5 = *a1;
  if ((v5 & 0x200) == 0 || !a3)
    return result;
  v6 = *a2;
  if (v6 == 95)
    return 1;
  if ((v5 & 0x400) == 0)
    return 0;
  v13[0] = a2;
  v13[1] = a3;
  v14 = 0;
  if (a3 == 3)
  {
    if (*(_WORD *)a2 != 26989 || a2[2] != 110)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (a3 != 2)
  {
    if (a3 != 1)
      goto LABEL_25;
    v7 = v6 - 104;
    if (v7 > 0xB || ((1 << v7) & 0x803) == 0)
      goto LABEL_25;
LABEL_24:
    v14 = 257;
    goto LABEL_25;
  }
  if (*(_WORD *)a2 == 29549
    || *(_WORD *)a2 == 29557
    || *(_WORD *)a2 == 29550
    || *(_WORD *)a2 == 27753
    || *(_WORD *)a2 == 26217)
  {
    goto LABEL_24;
  }
LABEL_25:
  v9 = (v5 >> 12) & 1;
  v10 = sub_22F2ABF14((uint64_t)v13, "d", 1, (v5 & 0x1000) != 0);
  v11 = sub_22F2ABF14(v10, "y", 1, v9);
  if (*(_BYTE *)(v11 + 17))
    v12 = *(_BYTE *)(v11 + 16) == 0;
  else
    v12 = 1;
  return !v12;
}

void sub_22F14AEF4(uint64_t a1)
{
  uint64_t v1;

  HIDWORD(v1) = *(_DWORD *)(a1 + 64);
  LODWORD(v1) = HIDWORD(v1) - 2;
  __asm { BR              X14 }
}

uint64_t sub_22F14B2C0(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;
  void *v16;
  __int128 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v1 = (unsigned __int8 *)a1[3];
  v2 = a1[6] - (_QWORD)v1;
  if (a1[4] - (_QWORD)v1 < v2)
    v2 = a1[4] - (_QWORD)v1;
  v16 = v18;
  v17 = xmmword_22F44E350;
  v3 = v2;
  if ((_DWORD)v2)
  {
    v4 = memchr(v1, 39, v2);
    if (v4 && v4 - v1 != -1)
    {
      if (v3 >= 0x11)
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      do
      {
        v6 = *v1;
        if (v6 != 39)
        {
          v7 = v17;
          if ((unint64_t)(v17 + 1) > *((_QWORD *)&v17 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v7 = v17;
          }
          *((_BYTE *)v16 + v7) = v6;
          *(_QWORD *)&v17 = v17 + 1;
        }
        ++v1;
        --v3;
      }
      while (v3);
    }
  }
  llvm::APFloat::convertFromString();
  if ((v15 & 1) != 0)
  {
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      v12 = v9;
      sub_22E6C5940(&v12, &v13);
      if (v12)
        (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
      if ((v15 & 1) != 0)
      {
        v11 = v14;
        v14 = 0;
        if (v11)
          (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
      }
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = v14;
  }
  if (v16 != v18)
    free(v16);
  return v8;
}

uint64_t sub_22F14B48C(uint64_t a1, llvm::APInt *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t i;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;

  v6 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 68))
  {
    for (i = v6 + 1; ; ++i)
    {
      v8 = *(unsigned __int8 *)(i - 1) - 69;
      v9 = v8 > 0x2B;
      v10 = (1 << v8) & 0x80100000801;
      if (!v9 && v10 != 0)
      {
        HIDWORD(v12) = *(_DWORD *)(a1 + 64);
        LODWORD(v12) = HIDWORD(v12) - 2;
        __asm { BR              X11 }
      }
    }
  }
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 48) - v6 - *(char *)(a1 + 69);
  v15 = 4 * v14 + (unint64_t)a3;
  v16 = 4 * v14 + a3;
  if (*(_DWORD *)(a1 + 64) != 10)
    v16 = v15;
  v36 = v16;
  v30 = v16;
  if (v16 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v35);
  else
    v35 = 0;
  if (!*(_BYTE *)(a1 + 68))
    v13 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE **)(a1 + 40);
  if ((unint64_t)v17 >= v13)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = v13 - (_QWORD)v17;
    do
    {
      if (*v17 == 46)
      {
        v19 = 1;
      }
      else
      {
        llvm::APInt::operator*=();
        llvm::APInt::operator+=();
        v18 -= v19 & 1;
      }
      ++v17;
      --v20;
    }
    while (v20);
  }
  if (*(_DWORD *)(a1 + 64) == 16)
    v21 = 4 * v18;
  else
    v21 = v18;
  v22 = v21;
  sub_22E463264((llvm::APInt *)&v35, a3);
  if (v22 < 1)
  {
    if (v22 < 0)
    {
      v23 = v36;
      do
      {
        if (v23 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v35) == v23)
            break;
        }
        else if (!v35)
        {
          break;
        }
        llvm::APInt::udiv((llvm::APInt *)&v35);
        if (v36 >= 0x41 && v35)
          MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
        v35 = v33;
        v23 = v34;
        v36 = v34;
      }
      while (!__CFADD__(v22++, 1));
    }
  }
  else
  {
    do
    {
      llvm::APInt::operator*=();
      --v22;
    }
    while (v22);
  }
  v25 = *((_DWORD *)a2 + 2);
  v34 = v25;
  if (v25 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v33);
    v25 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
    if (!v25)
      v26 = 0;
    v33 = v26;
  }
  v27 = v36;
  if (v36 <= v25)
  {
    if (v36 >= v25)
    {
      if (v25 > 0x40)
      {
        llvm::APInt::assignSlowCase(a2, (const llvm::APInt *)&v35);
        v28 = 0;
      }
      else
      {
        v28 = 0;
        *(_QWORD *)a2 = v35;
        *((_DWORD *)a2 + 2) = v27;
      }
      goto LABEL_58;
    }
    llvm::APInt::zext((llvm::APInt *)&v35);
    v28 = (int)llvm::APInt::compare((llvm::APInt *)&v31, (const llvm::APInt *)&v33) > 0;
    if (v32 >= 0x41 && v31)
      MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
    llvm::APInt::zext((llvm::APInt *)&v35);
  }
  else
  {
    llvm::APInt::zext((llvm::APInt *)&v33);
    v28 = (int)llvm::APInt::compare((llvm::APInt *)&v35, (const llvm::APInt *)&v31) > 0;
    if (v32 >= 0x41 && v31)
      MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
    llvm::APInt::trunc((llvm::APInt *)&v35);
  }
  if (*((_DWORD *)a2 + 2) >= 0x41u && *(_QWORD *)a2)
    MEMORY[0x2348A0E84](*(_QWORD *)a2, 0x1000C8000313F17);
  *(_QWORD *)a2 = v31;
  *((_DWORD *)a2 + 2) = v32;
LABEL_58:
  if (v34 >= 0x41 && v33)
    MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return (HIDWORD(v30) != 0) | v28;
}

uint64_t sub_22F14B96C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, int a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _BYTE *i;
  uint64_t v25;
  char *v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int *v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned __int8 **v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 **v95;
  unsigned __int8 *v96;
  unsigned __int8 *v98;
  _QWORD *v99;
  _BYTE *v100;
  uint64_t v102;
  _QWORD v104[3];
  __int16 v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  _QWORD v112[3];
  __int16 v113;
  _QWORD v114[3];
  __int16 v115;
  _QWORD v116[3];
  __int16 v117;
  _QWORD v118[3];
  __int16 v119;
  _QWORD v120[3];
  __int16 v121;
  int *v122;
  _QWORD v123[3];
  __int16 v124;
  char *v125;
  int *v126;
  uint64_t v127;
  _QWORD v128[4];

  v6 = a5;
  v7 = a1;
  v128[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = a1 + 40;
  v8 = a1 + 16;
  *(_OWORD *)(v8 + 8) = xmmword_22F44E330;
  *(_BYTE *)(v8 - 5) = 0;
  v9 = (_BYTE *)(v8 - 5);
  *(_WORD *)(v8 - 8) = a6;
  v10 = 1;
  if (a6 == 10)
    v10 = 2;
  if (a6 == 8)
    v10 = 0;
  v11 = (_BYTE *)(a2 + v10);
  if (*v11 == 39)
  {
    v12 = a3;
    v102 = v7;
    v13 = v11 + 1;
    v125 = v11 + 1;
    v100 = (_BYTE *)(v8 - 5);
    if (*(_BYTE *)(a3 - 1) != 39)
    {
      v65 = 0;
      do
        v66 = *(unsigned __int8 *)(a3 + v65-- - 2);
      while (v66 != 39);
      sub_22F411C48(v8, (unsigned __int8 *)(a3 + v65), (char **)-v65);
      *(_DWORD *)(v102 + 72) = v12 - a2 + v65;
      v12 += v65;
    }
    v14 = (char *)(v12 - 1);
    v126 = (int *)v128;
    v127 = 0x400000000;
    v15 = v12 - 1 - (_QWORD)v13;
    if ((unsigned __int8 *)(v12 - 1) == v13)
    {
      v17 = (int *)v128;
    }
    else
    {
      if (v15 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v127;
        v17 = v126;
      }
      else
      {
        v16 = 0;
        v17 = (int *)v128;
      }
      if (v15 != v16)
        bzero(&v17[v16], 4 * (v15 - v16));
      LODWORD(v127) = v12 - 1 - (_DWORD)v13;
    }
    v122 = v17;
    v22 = *(unsigned __int16 *)(v102 + 8);
    switch(v22)
    {
      case 12:
        v23 = 1114111;
        break;
      case 11:
        v23 = 0xFFFF;
        break;
      case 9:
        v23 = 0xFFFFFFFF >> -(char)sub_22F1E724C((_QWORD *)v6[8], *(_DWORD *)(v6[8] + *(_QWORD *)(*(_QWORD *)v6[8] - 24) + 128));
        break;
      default:
        v23 = 127;
        break;
    }
    v99 = v6;
    if (v14 == (char *)v13)
    {
      v52 = v17;
      i = v100;
    }
    else
    {
      v98 = (unsigned __int8 *)(v12 - 2);
      i = v100;
      do
      {
        if (*v13 == 92)
        {
          if ((v13[1] | 0x20) == 0x75)
          {
            LOWORD(v108) = 0;
            if ((sub_22F14C500(a2, (void **)&v125, v14, v122, (__int16 *)&v108, a4, (uint64_t *)v6[11], v6[6], (_QWORD *)v6[7]) & 1) != 0)
            {
              if (*v122 > v23)
              {
                *i = 1;
                v25 = v6[6];
                *(_DWORD *)(v25 + 312) = a4;
                *(_DWORD *)(v25 + 316) = 1030;
                if (*(char *)(v25 + 311) < 0)
                {
                  **(_BYTE **)(v25 + 288) = 0;
                  *(_QWORD *)(v25 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v25 + 288) = 0;
                  *(_BYTE *)(v25 + 311) = 0;
                }
                v116[0] = v25 + 320;
                v116[1] = 0;
                v116[2] = v25;
                v117 = 1;
                *(_BYTE *)(v25 + 320) = 0;
                *(_DWORD *)(v25 + 664) = 0;
                v49 = *(unsigned int *)(v25 + 776);
                if ((_DWORD)v49)
                {
                  v50 = *(_QWORD *)(v25 + 768);
                  v51 = 56 * v49;
                  do
                  {
                    if (*(char *)(v50 + v51 - 9) < 0)
                      operator delete(*(void **)(v50 + v51 - 32));
                    v51 -= 56;
                  }
                  while (v51);
                }
                *(_DWORD *)(v25 + 776) = 0;
                sub_22E3BB0B8((uint64_t)v116);
              }
            }
            else
            {
              *i = 1;
            }
            v43 = v122 + 1;
          }
          else
          {
            v40 = sub_22F14CA60(*(unsigned __int16 *)(v102 + 8));
            v41 = sub_22F14CAD0(a2, (void **)&v125, v14, i, a4, (uint64_t *)v6[11], v40, v6[6], (_QWORD *)v6[7]);
            v42 = v122;
            *v122 = v41;
            v43 = v42 + 1;
          }
          v122 = v43;
        }
        else
        {
          v108 = v13;
          v26 = (char *)(v13 + 1);
          while (v26 != v14)
          {
            v27 = *v26++;
            if (v27 == 92)
            {
              v28 = (unsigned __int8 *)(v26 - 2);
              v29 = (unsigned __int8 *)(v26 - 1);
              goto LABEL_43;
            }
          }
          v28 = v98;
          v29 = (unsigned __int8 *)v14;
LABEL_43:
          v125 = (char *)v29;
          v30 = v122;
          if (llvm::ConvertUTF8toUTF32())
          {
            v31 = v6;
            v32 = *(unsigned __int16 *)(v102 + 8);
            if (v32 == 8)
              v33 = 1286;
            else
              v33 = 1026;
            v34 = v31[6];
            *(_DWORD *)(v34 + 312) = a4;
            *(_DWORD *)(v34 + 316) = v33;
            if (*(char *)(v34 + 311) < 0)
            {
              **(_BYTE **)(v34 + 288) = 0;
              *(_QWORD *)(v34 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v34 + 288) = 0;
              *(_BYTE *)(v34 + 311) = 0;
            }
            v120[0] = v34 + 320;
            v120[1] = 0;
            v120[2] = v34;
            v121 = 1;
            *(_BYTE *)(v34 + 320) = 0;
            *(_DWORD *)(v34 + 664) = 0;
            v44 = *(unsigned int *)(v34 + 776);
            if ((_DWORD)v44)
            {
              v45 = *(_QWORD *)(v34 + 768);
              v46 = 56 * v44;
              do
              {
                if (*(char *)(v45 + v46 - 9) < 0)
                  operator delete(*(void **)(v45 + v46 - 32));
                v46 -= 56;
              }
              while (v46);
            }
            *(_DWORD *)(v34 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v120);
            if (v32 == 8)
            {
              v108 = v13;
              v122 = v30;
              v56 = v13 == v29;
              v6 = v99;
              i = v100;
              if (!v56)
              {
                v47 = v30 + 1;
                do
                {
                  v56 = v13 == v28;
                  v48 = *v13++;
                  *(v47 - 1) = v48;
                  v108 = v13;
                  v122 = v47++;
                }
                while (!v56);
              }
            }
            else
            {
              i = v100;
              *v100 = 1;
              v6 = v99;
            }
          }
          else
          {
            v35 = v122;
            for (i = v100; v30 < v35; ++v30)
            {
              if (*v30 > v23)
              {
                *v100 = 1;
                v36 = v6[6];
                *(_DWORD *)(v36 + 312) = a4;
                *(_DWORD *)(v36 + 316) = 1030;
                if (*(char *)(v36 + 311) < 0)
                {
                  **(_BYTE **)(v36 + 288) = 0;
                  *(_QWORD *)(v36 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v36 + 288) = 0;
                  *(_BYTE *)(v36 + 311) = 0;
                }
                v118[0] = v36 + 320;
                v118[1] = 0;
                v118[2] = v36;
                v119 = 1;
                *(_BYTE *)(v36 + 320) = 0;
                *(_DWORD *)(v36 + 664) = 0;
                v37 = *(unsigned int *)(v36 + 776);
                if ((_DWORD)v37)
                {
                  v38 = *(_QWORD *)(v36 + 768);
                  v39 = 56 * v37;
                  do
                  {
                    if (*(char *)(v38 + v39 - 9) < 0)
                      operator delete(*(void **)(v38 + v39 - 32));
                    v39 -= 56;
                  }
                  while (v39);
                }
                *(_DWORD *)(v36 + 776) = 0;
                sub_22E3BB0B8((uint64_t)v118);
                v35 = v122;
              }
            }
          }
        }
        v13 = (unsigned __int8 *)v125;
      }
      while (v125 != v14);
      v52 = v122;
      v17 = v126;
    }
    v53 = (char *)v52 - (char *)v17;
    v54 = (unint64_t)((char *)v52 - (char *)v17) >> 2;
    v7 = v102;
    if (v54 < 2)
    {
      v58 = 0;
      goto LABEL_130;
    }
    v55 = *(unsigned __int16 *)(v102 + 8);
    v56 = (_DWORD)v54 == 4 && v55 == 8;
    if (v56)
    {
      v59 = v99[6];
      *(_DWORD *)(v59 + 312) = a4;
      *(_DWORD *)(v59 + 316) = 1316;
      if (*(char *)(v59 + 311) < 0)
      {
        **(_BYTE **)(v59 + 288) = 0;
        *(_QWORD *)(v59 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v59 + 288) = 0;
        *(_BYTE *)(v59 + 311) = 0;
      }
      v114[0] = v59 + 320;
      v114[1] = 0;
      v114[2] = v59;
      v115 = 1;
      *(_BYTE *)(v59 + 320) = 0;
      *(_DWORD *)(v59 + 664) = 0;
      v61 = *(unsigned int *)(v59 + 776);
      if ((_DWORD)v61)
      {
        v62 = *(_QWORD *)(v59 + 768);
        v63 = 56 * v61;
        do
        {
          if (*(char *)(v62 + v63 - 9) < 0)
            operator delete(*(void **)(v62 + v63 - 32));
          v63 -= 56;
        }
        while (v63);
      }
      *(_DWORD *)(v59 + 776) = 0;
      v64 = v114;
    }
    else
    {
      if (v55 != 8)
      {
        v60 = v99[6];
        *(_DWORD *)(v60 + 312) = a4;
        *(_DWORD *)(v60 + 316) = 1096;
        if (*(char *)(v60 + 311) < 0)
        {
          **(_BYTE **)(v60 + 288) = 0;
          *(_QWORD *)(v60 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v60 + 288) = 0;
          *(_BYTE *)(v60 + 311) = 0;
        }
        v70 = (unsigned __int8 *)(v60 + 320);
        v108 = (unsigned __int8 *)(v60 + 320);
        v109 = 0;
        v110 = v60;
        v111 = 1;
        *(_BYTE *)(v60 + 320) = 0;
        *(_DWORD *)(v60 + 664) = 0;
        v71 = *(unsigned int *)(v60 + 776);
        if ((_DWORD)v71)
        {
          v72 = *(_QWORD *)(v60 + 768);
          v73 = 56 * v71;
          do
          {
            if (*(char *)(v72 + v73 - 9) < 0)
              operator delete(*(void **)(v72 + v73 - 32));
            v73 -= 56;
          }
          while (v73);
          v70 = v108;
          *(_DWORD *)(v60 + 776) = 0;
          v74 = *(unsigned __int16 *)(v102 + 8);
          if (!v70)
          {
            v70 = (unsigned __int8 *)sub_22E3B8AAC(v109);
            v108 = v70;
          }
        }
        else
        {
          *(_DWORD *)(v60 + 776) = 0;
          v74 = *(unsigned __int16 *)(v102 + 8);
        }
        v70[*v70 + 1] = 2;
        v75 = v108;
        v76 = *v108;
        *v108 = v76 + 1;
        *(_QWORD *)&v75[8 * v76 + 16] = v74 != 9;
        sub_22E3BB0B8((uint64_t)&v108);
        v58 = 1;
        *i = 1;
LABEL_130:
        *(_BYTE *)(v102 + 10) = v58;
        LODWORD(v109) = *(unsigned __int8 *)(v99[8] + *(_QWORD *)(*(_QWORD *)v99[8] - 24) + 4);
        if (v109 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v108);
        else
          v108 = 0;
        v77 = *(unsigned __int16 *)(v102 + 8);
        if (v77 == 8 && *(_BYTE *)(v102 + 10))
        {
          v78 = v109;
          if (v109 > 0x40)
          {
            *(_QWORD *)v108 = 0;
            bzero(v108 + 8, (((unint64_t)(v78 + 63) >> 3) - 8) & 0xFFFFFFF8);
          }
          else
          {
            v108 = 0;
          }
          v83 = (v53 >> 2);
          if ((v53 >> 2))
          {
            v84 = 0;
            v85 = 0;
            v86 = 4 * v83;
            do
            {
              if (v109 > 0x40)
                v87 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v108);
              else
                v87 = v109 + __clz((unint64_t)v108) - 64;
              v88 = v87 < 8;
              sub_22E463264((llvm::APInt *)&v108, 8);
              v107 = v109;
              if (v109 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v106, (const llvm::APInt *)&v108);
              else
                v106 = v108;
              llvm::APInt::operator+=();
              v89 = v107;
              v90 = v106;
              v107 = 0;
              if (v109 > 0x40 && v108)
              {
                MEMORY[0x2348A0E84](v108, 0x1000C8000313F17);
                v108 = v90;
                LODWORD(v109) = v89;
                if (v107 >= 0x41 && v106)
                  MEMORY[0x2348A0E84](v106, 0x1000C8000313F17);
              }
              else
              {
                v108 = v106;
                LODWORD(v109) = v89;
              }
              v85 |= v88;
              v84 += 4;
            }
            while (v86 != v84);
            if (((*i == 0) & v85) == 1)
            {
              v91 = v99[6];
              *(_DWORD *)(v91 + 312) = a4;
              *(_DWORD *)(v91 + 316) = 1291;
              if (*(char *)(v91 + 311) < 0)
              {
                **(_BYTE **)(v91 + 288) = 0;
                *(_QWORD *)(v91 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v91 + 288) = 0;
                *(_BYTE *)(v91 + 311) = 0;
              }
              v104[0] = v91 + 320;
              v104[1] = 0;
              v104[2] = v91;
              v105 = 1;
              *(_BYTE *)(v91 + 320) = 0;
              *(_DWORD *)(v91 + 664) = 0;
              v92 = *(unsigned int *)(v91 + 776);
              if ((_DWORD)v92)
              {
                v93 = *(_QWORD *)(v91 + 768);
                v94 = 56 * v92;
                do
                {
                  if (*(char *)(v93 + v94 - 9) < 0)
                    operator delete(*(void **)(v93 + v94 - 32));
                  v94 -= 56;
                }
                while (v94);
              }
              *(_DWORD *)(v91 + 776) = 0;
              sub_22E3BB0B8((uint64_t)v104);
            }
          }
        }
        else if ((_DWORD)v54)
        {
          v79 = *(v122 - 1);
          v80 = v109;
          if (v109 <= 0x40)
          {
            v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
            if (!(_DWORD)v109)
              v81 = 0;
            v82 = (unsigned __int8 **)(v81 & v79);
            v108 = (unsigned __int8 *)(v81 & v79);
            goto LABEL_169;
          }
          *(_QWORD *)v108 = v79;
          bzero(v108 + 8, (((unint64_t)(v80 + 63) >> 3) - 8) & 0xFFFFFFF8);
        }
        v82 = (unsigned __int8 **)v108;
        LODWORD(v80) = v109;
        v77 = *(unsigned __int16 *)(v102 + 8);
LABEL_169:
        v95 = &v108;
        if (v80 >= 0x41)
          v95 = v82;
        v96 = *v95;
        *(_QWORD *)v102 = v96;
        if ((_DWORD)v54 == 1
          && v77 == 8
          && (v96 & 0x80) != 0
          && (*(_DWORD *)(v99[7] + 52) & 0x800000) != 0)
        {
          *(_QWORD *)v102 = (char)v96;
        }
        if (v80 >= 0x41 && v82)
          MEMORY[0x2348A0E84](v82, 0x1000C8000313F17);
        if (v126 != (int *)v128)
          free(v126);
        return v7;
      }
      v57 = v99[6];
      *(_DWORD *)(v57 + 312) = a4;
      *(_DWORD *)(v57 + 316) = 1328;
      if (*(char *)(v57 + 311) < 0)
      {
        **(_BYTE **)(v57 + 288) = 0;
        *(_QWORD *)(v57 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v57 + 288) = 0;
        *(_BYTE *)(v57 + 311) = 0;
      }
      v112[0] = v57 + 320;
      v112[1] = 0;
      v112[2] = v57;
      v113 = 1;
      *(_BYTE *)(v57 + 320) = 0;
      *(_DWORD *)(v57 + 664) = 0;
      v67 = *(unsigned int *)(v57 + 776);
      if ((_DWORD)v67)
      {
        v68 = *(_QWORD *)(v57 + 768);
        v69 = 56 * v67;
        do
        {
          if (*(char *)(v68 + v69 - 9) < 0)
            operator delete(*(void **)(v68 + v69 - 32));
          v69 -= 56;
        }
        while (v69);
      }
      *(_DWORD *)(v57 + 776) = 0;
      v64 = v112;
    }
    sub_22E3BB0B8((uint64_t)v64);
    v58 = 1;
    goto LABEL_130;
  }
  v18 = a5[6];
  *(_DWORD *)(v18 + 312) = a4;
  *(_DWORD *)(v18 + 316) = 1054;
  if (*(char *)(v18 + 311) < 0)
  {
    **(_BYTE **)(v18 + 288) = 0;
    *(_QWORD *)(v18 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v18 + 288) = 0;
    *(_BYTE *)(v18 + 311) = 0;
  }
  v123[0] = v18 + 320;
  v123[1] = 0;
  v123[2] = v18;
  v124 = 1;
  *(_BYTE *)(v18 + 320) = 0;
  *(_DWORD *)(v18 + 664) = 0;
  v19 = *(unsigned int *)(v18 + 776);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(v18 + 768);
    v21 = 56 * v19;
    do
    {
      if (*(char *)(v20 + v21 - 9) < 0)
        operator delete(*(void **)(v20 + v21 - 32));
      v21 -= 56;
    }
    while (v21);
  }
  *(_DWORD *)(v18 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v123);
  *v9 = 1;
  return v7;
}

uint64_t sub_22F14C500(uint64_t a1, void **a2, _BYTE *a3, int *a4, __int16 *a5, uint64_t a6, uint64_t *a7, uint64_t a8, _QWORD *a9)
{
  _BYTE *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  _BYTE *v17;
  BOOL v18;
  int v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 **v40;
  char v42;
  unsigned int v43;
  int v44;
  int v45;
  char v46;
  int v47;
  uint64_t v48;
  void **v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  int v55;
  int v56;
  unsigned __int8 **v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  __int16 *v62;
  int *v63;
  _BYTE v64[32];
  _BYTE v65[32];
  _BYTE v66[39];
  char __src;
  _BYTE v68[32];
  _BYTE v69[32];
  unsigned __int8 *v70;
  uint64_t v71;

  v12 = a3;
  v13 = a2;
  v14 = a1;
  v15 = a9;
  v16 = (char *)*a2;
  v17 = (char *)*a2 + 2;
  *a2 = v17;
  v18 = v16[1] != 117 || v17 == a3;
  if (v18 || *v17 != 123)
  {
    if (v17 == a3 || (word_22F4ADB24[*v17] & 0x18) == 0)
    {
      if (a8)
      {
        sub_22F14E658((uint64_t)&v70, a8, a9, a6, a7, a1, (int)v16, (int)v17, 1047);
        sub_22E3B89A8(&v70, (char *)*v13 - 1, 1uLL);
        goto LABEL_47;
      }
      return 0;
    }
    v19 = 0;
  }
  else
  {
    v17 = v16 + 3;
    *a2 = v16 + 3;
    v19 = 1;
  }
  if (*(v17 - 1) == 117)
    v20 = 4;
  else
    v20 = 8;
  *a5 = v20;
  if (v17 == a3)
  {
    v21 = 0;
    LOWORD(v23) = 0;
LABEL_42:
    if (v19)
    {
      if (!a8)
        return 0;
      sub_22F14E658((uint64_t)&v70, a8, v15, a6, a7, v14, (int)v16, (int)v12, 15);
      v38 = v70;
      if (!v70)
      {
        v38 = (unsigned __int8 *)sub_22E3B8AAC(v71);
        v70 = v38;
      }
      v39 = *v38;
      v38[v39 + 1] = 4;
      *v38 = v39 + 1;
      *(_QWORD *)&v38[8 * v39 + 16] = 24;
LABEL_47:
      v40 = &v70;
    }
    else
    {
LABEL_50:
      if ((_WORD)v23 && ((unsigned __int16)*a5 == (unsigned __int16)v23 ? (v42 = 1) : (v42 = v19), (v42 & 1) != 0))
      {
        if ((v21 & 1) != 0)
          return 0;
        v43 = *a4;
        if (HIWORD(*a4) <= 0x10u && (v43 & 0xFFFFF800) != 0xD800)
        {
          if (v43 <= 0x9F && (v43 - 36 > 0x3C || ((1 << (v43 - 36)) & 0x1000000010000001) == 0))
          {
            v48 = *v15;
            if (a8)
            {
              v49 = v13;
              __src = *a4;
              if (v43 - 32 > 0x5E)
              {
                if ((v48 & 0x200) != 0)
                  v58 = 1305;
                else
                  v58 = 1183;
                v51 = a8;
                v59 = a8;
                v53 = a7;
                v60 = a7;
                v55 = v14;
                v56 = (int)v16;
                sub_22F14E658((uint64_t)v66, v59, v15, a6, v60, v14, (int)v16, (int)v12, v58);
                v57 = (unsigned __int8 **)v66;
              }
              else
              {
                if ((v48 & 0x200) != 0)
                  v50 = 1306;
                else
                  v50 = 1184;
                v51 = a8;
                v52 = a8;
                v53 = a7;
                v54 = a7;
                v55 = v14;
                v56 = (int)v16;
                sub_22F14E658((uint64_t)&v70, v52, v15, a6, v54, v14, (int)v16, (int)v12, v50);
                sub_22E3B89A8(&v70, &__src, 1uLL);
                v57 = &v70;
              }
              sub_22E3BB0B8((uint64_t)v57);
              LODWORD(v14) = v55;
              LODWORD(v16) = v56;
              a7 = v53;
              a8 = v51;
              v13 = v49;
            }
            if ((v48 & 0x200) == 0)
              return 0;
          }
          if ((*v15 & 0x100) == 0 && a8 && (*v15 & 1) == 0)
          {
            v44 = v14;
            v45 = (int)v16;
            sub_22F14E658((uint64_t)v65, a8, v15, a6, a7, v14, (int)v16, (int)*v13, 1376);
            sub_22E3BB0B8((uint64_t)v65);
            LODWORD(v16) = v45;
            LODWORD(v14) = v44;
          }
          v46 = v19 ^ 1;
          if (!a8)
            v46 = 1;
          if ((v46 & 1) == 0)
          {
            sub_22F14E658((uint64_t)v64, a8, v15, a6, a7, v14, (int)v16, (int)*v13, 1202);
            sub_22E3BB0B8((uint64_t)v64);
          }
          return 1;
        }
        if (!a8)
          return 0;
        sub_22F14E658((uint64_t)v68, a8, v15, a6, a7, v14, (int)v16, (int)v12, 1186);
        v40 = (unsigned __int8 **)v68;
      }
      else
      {
        if (!a8)
          return 0;
        if (v19)
          v47 = 1033;
        else
          v47 = 1185;
        sub_22F14E658((uint64_t)v69, a8, v15, a6, a7, v14, (int)v16, (int)v12, v47);
        v40 = (unsigned __int8 **)v69;
      }
    }
    sub_22E3BB0B8((uint64_t)v40);
    return 0;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v62 = a5;
  v63 = a4;
  v61 = a8;
  while (1)
  {
    v24 = (unsigned __int16)*a5 == (unsigned __int16)v23 ? v19 : 1;
    if (v24 != 1)
      break;
    v25 = *v17;
    if (v19)
    {
      if ((_DWORD)v25 == 125)
      {
        *v13 = ++v17;
        LODWORD(v12) = (_DWORD)v17;
        if ((v22 & 1) == 0)
          goto LABEL_50;
        goto LABEL_38;
      }
      v26 = (unsigned __int16)word_22F4A1464[v25];
      if (v26 == 0xFFFF)
      {
        if (a8)
        {
          v27 = a8;
          v28 = v15;
          v29 = a6;
          v30 = a7;
          v31 = v14;
          v32 = a6;
          v33 = a7;
          v34 = v16;
          v35 = v22;
          sub_22F14E658((uint64_t)&v70, v27, v28, v29, v30, v14, (int)v16, (int)v17, 1034);
          sub_22E3B89A8(&v70, *v13, 1uLL);
          sub_22E3BB0B8((uint64_t)&v70);
          v22 = v35;
          a5 = v62;
          a4 = v63;
          v16 = v34;
          a7 = v33;
          a6 = v32;
          v15 = a9;
          a8 = v61;
          v14 = v31;
          v17 = *v13;
        }
        ++v23;
        v21 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      v26 = (unsigned __int16)word_22F4A1464[v25];
      if (v26 == 0xFFFF)
      {
        v21 = 1;
        break;
      }
    }
    if (*a4 >> 28)
    {
      v22 = 1;
    }
    else
    {
      *a4 = (__int16)v26 | (16 * *a4);
      ++v23;
    }
LABEL_29:
    *v13 = ++v17;
    if (v17 == v12)
    {
      LODWORD(v17) = (_DWORD)v12;
      break;
    }
  }
  LODWORD(v12) = (_DWORD)v17;
  if ((v22 & 1) == 0)
    goto LABEL_42;
LABEL_38:
  if (a8)
  {
    sub_22F14E658((uint64_t)&v70, a8, v15, a6, a7, v14, (int)v16, (int)v17, 1040);
    v36 = v70;
    if (!v70)
    {
      v36 = (unsigned __int8 *)sub_22E3B8AAC(v71);
      v70 = v36;
    }
    v37 = *v36;
    v36[v37 + 1] = 2;
    *v36 = v37 + 1;
    *(_QWORD *)&v36[8 * v37 + 16] = 0;
    goto LABEL_47;
  }
  return 0;
}

uint64_t sub_22F14CA60(int a1)
{
  return ((uint64_t (*)())((char *)sub_22F14CA7C + 4 * byte_22F4ACB22[a1 - 8]))();
}

uint64_t sub_22F14CA7C()
{
  return 8;
}

uint64_t sub_22F14CA84(uint64_t a1, _QWORD *a2)
{
  return sub_22F1E724C(a2, *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 140));
}

uint64_t sub_22F14CAD0(uint64_t a1, void **a2, char *a3, _BYTE *a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v12;
  char *v13;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  int v20;
  uint64_t v22;
  char *v23;
  BOOL v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  void *v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  const char *v33;
  char *v34;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v46;
  char *v47;
  int v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  unsigned int v55;
  char v56;
  uint64_t *v57;
  int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  std::string *v61;
  std::string::size_type v62;
  __int128 *p_src;
  size_t v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t *v72;
  BOOL v73;
  int v74;
  int v75;
  BOOL v76;
  char v77;
  char v78;
  _BYTE v79[32];
  std::string v80;
  _BYTE v81[32];
  _BYTE v82[32];
  _BYTE v83[32];
  unsigned __int8 *v84;
  uint64_t v85;
  __int128 __src;
  _QWORD v87[4];

  v12 = a5;
  v13 = a3;
  v15 = a1;
  v16 = a9;
  v87[2] = *MEMORY[0x24BDAC8D0];
  v17 = (char *)*a2;
  v18 = (char *)*a2 + 2;
  *a2 = v18;
  v19 = v17[1];
  v20 = v17[1];
  if ((int)v19 > 68)
  {
    switch(v17[1])
    {
      case '[':
        goto LABEL_31;
      case '\\':
        return v19;
      case ']':
      case '^':
      case '_':
      case 'c':
      case 'd':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'p':
      case 'q':
      case 's':
      case 'u':
      case 'w':
        goto LABEL_28;
      case 'a':
        return 7;
      case 'b':
        return 8;
      case 'e':
        if (!a8)
          return 27;
        sub_22F14E658((uint64_t)&v84, a8, a9, a5, a6, a1, (int)v17, (int)v18, 1216);
        v30 = v84;
        if (!v84)
        {
          v30 = (unsigned __int8 *)sub_22E3B8AAC(v85);
          v84 = v30;
        }
        v31 = *v30;
        v30[v31 + 1] = 1;
        *v30 = v31 + 1;
        v32 = &v30[8 * v31];
        v33 = "e";
        goto LABEL_60;
      case 'f':
        return 12;
      case 'n':
        return 10;
      case 'o':
        if (v18 == a3 || *v18 != 123)
        {
          *a4 = 1;
          if (a8)
          {
            sub_22F14E658((uint64_t)v82, a8, a9, a5, a6, a1, (int)v17, (int)v18, 1035);
            sub_22E3BB0B8((uint64_t)v82);
          }
          return 111;
        }
        v34 = v17 + 3;
        *a2 = v17 + 3;
        if (v17[3] == 125)
        {
          sub_22F14E658((uint64_t)v81, a8, a9, a5, a6, a1, (int)v17, (int)v34, 1033);
          v35 = (unsigned __int8 **)v81;
          goto LABEL_81;
        }
        if (v34 == a3)
        {
          if (*a4)
          {
            v19 = 0;
            if (a8)
              goto LABEL_149;
            return v19;
          }
          v19 = 0;
          v54 = 0;
        }
        else
        {
          v19 = 0;
          v74 = 0;
          while (1)
          {
            v48 = *v34;
            v76 = v48 == 125;
            if (v48 == 125)
              break;
            if ((v48 - 56) > 0xFFFFFFF7)
            {
              v74 |= (v19 & 0x20000000) >> 29;
              *a2 = v34 + 1;
              v19 = (*v34++ - 48) | (8 * v19);
              if (v34 == v13)
                goto LABEL_131;
            }
            else
            {
              *a4 = 1;
              if (a8)
              {
                v49 = v16;
                v50 = v12;
                v51 = v15;
                v52 = v12;
                v53 = a6;
                sub_22F14E658((uint64_t)&v84, a8, v49, v50, a6, v15, (int)v17, (int)v34, 1034);
                sub_22E3B89A8(&v84, *a2, 1uLL);
                sub_22E3BB0B8((uint64_t)&v84);
                a6 = v53;
                v12 = v52;
                v16 = a9;
                v15 = v51;
                v34 = (char *)*a2;
              }
              *a2 = ++v34;
              if (v34 == v13)
                goto LABEL_131;
            }
          }
          LODWORD(v13) = (_DWORD)v34 + 1;
          *a2 = v34 + 1;
LABEL_131:
          v54 = v76;
          if (*a4)
          {
LABEL_142:
            v73 = 1;
            goto LABEL_143;
          }
          if ((v74 & 1) != 0)
          {
LABEL_137:
            *a4 = 1;
            if (a8)
            {
              v78 = v54;
              v72 = a6;
              v65 = v15;
              sub_22F14E658((uint64_t)&v84, a8, v16, v12, a6, v15, (int)v17, (int)v13, 1040);
              v66 = v84;
              if (!v84)
              {
                v66 = (unsigned __int8 *)sub_22E3B8AAC(v85);
                v84 = v66;
              }
              v67 = *v66;
              v66[v67 + 1] = 2;
              *v66 = v67 + 1;
              *(_QWORD *)&v66[8 * v67 + 16] = 1;
              sub_22E3BB0B8((uint64_t)&v84);
              LODWORD(v15) = v65;
              a6 = v72;
              v54 = v78;
            }
            v19 = v19 & (0xFFFFFFFF >> -(char)a7);
            goto LABEL_142;
          }
        }
        v73 = 1;
        if (a7 != 32 && v19 >> a7)
          goto LABEL_137;
        goto LABEL_143;
      case 'r':
        return 13;
      case 't':
        return 9;
      case 'v':
        return 11;
      case 'x':
        if (v18 == a3)
          goto LABEL_77;
        v36 = *v18;
        if (v36 == 123)
        {
          v18 = v17 + 3;
          *a2 = v17 + 3;
          if (v17[3] == 125)
          {
            sub_22F14E658((uint64_t)v83, a8, a9, a5, a6, a1, (int)v17, (int)v18, 1033);
            v35 = (unsigned __int8 **)v83;
            goto LABEL_81;
          }
        }
        else if ((word_22F4ADB24[v36] & 0x18) == 0)
        {
LABEL_77:
          if (!a8)
            return 0;
          sub_22F14E658((uint64_t)&v84, a8, a9, a5, a6, a1, (int)v17, (int)v18, 1047);
          v43 = v84;
          if (!v84)
          {
            v43 = (unsigned __int8 *)sub_22E3B8AAC(v85);
            v84 = v43;
          }
          v44 = *v43;
          v43[v44 + 1] = 1;
          *v43 = v44 + 1;
          *(_QWORD *)&v43[8 * v44 + 16] = "x";
          v35 = &v84;
LABEL_81:
          sub_22E3BB0B8((uint64_t)v35);
          return 0;
        }
        v73 = v36 == 123;
        if (v18 != a3)
        {
          LODWORD(v19) = 0;
          v39 = 0;
          v70 = v36;
          v71 = a6;
          while (1)
          {
            v40 = *v18;
            if ((_DWORD)v36 == 123)
            {
              if ((_DWORD)v40 == 125)
              {
                LODWORD(v13) = (_DWORD)v18 + 1;
                *a2 = v18 + 1;
                v54 = 1;
                goto LABEL_100;
              }
              v41 = (unsigned __int16)word_22F4A1464[v40];
              if (v41 == 0xFFFF)
              {
                *a4 = 1;
                if (a8)
                {
                  v42 = v15;
                  v75 = v39;
                  sub_22F14E658((uint64_t)&v84, a8, a9, v12, a6, v15, (int)v17, (int)v18, 1034);
                  sub_22E3B89A8(&v84, *a2, 1uLL);
                  sub_22E3BB0B8((uint64_t)&v84);
                  LODWORD(v36) = v70;
                  a6 = v71;
                  v39 = v75;
                  v15 = v42;
                  v18 = (char *)*a2;
                }
                goto LABEL_75;
              }
            }
            else
            {
              v41 = (unsigned __int16)word_22F4A1464[v40];
              if (v41 == 0xFFFF)
              {
                v54 = 0;
                LODWORD(v13) = (_DWORD)v18;
                goto LABEL_100;
              }
            }
            v39 |= (v19 & 0xF0000000) != 0;
            LODWORD(v19) = (__int16)v41 | (16 * v19);
LABEL_75:
            *a2 = ++v18;
            if (v18 == v13)
              goto LABEL_99;
          }
        }
        LOBYTE(v39) = 0;
        LODWORD(v19) = 0;
LABEL_99:
        v54 = 0;
LABEL_100:
        v55 = v19 & (0xFFFFFFFF >> -(char)a7);
        if (v19 >> a7)
          v56 = 1;
        else
          v56 = v39;
        if (!(v19 >> a7))
          v55 = v19;
        if (a7 == 32)
        {
          v56 = v39;
          v19 = v19;
        }
        else
        {
          v19 = v55;
        }
        if (*a4 || (v56 & 1) == 0)
          goto LABEL_143;
        *a4 = 1;
        if (!a8)
          return v19;
        v77 = v54;
        v57 = a6;
        v58 = v15;
        sub_22F14E658((uint64_t)&v84, a8, a9, v12, a6, v15, (int)v17, (int)v13, 1040);
        v59 = v84;
        if (!v84)
        {
          v59 = (unsigned __int8 *)sub_22E3B8AAC(v85);
          v84 = v59;
        }
        v60 = *v59;
        v59[v60 + 1] = 2;
        *v59 = v60 + 1;
        *(_QWORD *)&v59[8 * v60 + 16] = 0;
        sub_22E3BB0B8((uint64_t)&v84);
        LODWORD(v15) = v58;
        a6 = v57;
        v54 = v77;
LABEL_143:
        if (!a8 || !v73)
          return v19;
        if ((v54 & 1) == 0)
        {
          v13 = (char *)*a2;
LABEL_149:
          sub_22F14E658((uint64_t)&v84, a8, v16, v12, a6, v15, (int)v17, (int)v13, 15);
          v68 = v84;
          if (!v84)
          {
            v68 = (unsigned __int8 *)sub_22E3B8AAC(v85);
            v84 = v68;
          }
          v69 = *v68;
          v68[v69 + 1] = 4;
          *v68 = v69 + 1;
          *(_QWORD *)&v68[8 * v69 + 16] = 24;
          goto LABEL_36;
        }
        if (*a4)
          return v19;
        sub_22F14E658((uint64_t)v79, a8, v16, v12, a6, v15, (int)v17, (int)*a2, 1202);
        v29 = (unsigned __int8 **)v79;
        break;
      default:
        if ((_DWORD)v19 == 69)
        {
          if (a8)
          {
            sub_22F14E658((uint64_t)&v84, a8, a9, a5, a6, a1, (int)v17, (int)v18, 1216);
            v37 = v84;
            if (!v84)
            {
              v37 = (unsigned __int8 *)sub_22E3B8AAC(v85);
              v84 = v37;
            }
            v38 = *v37;
            v37[v38 + 1] = 1;
            *v37 = v38 + 1;
            v32 = &v37[8 * v38];
            v33 = "E";
LABEL_60:
            *((_QWORD *)v32 + 2) = v33;
            sub_22E3BB0B8((uint64_t)&v84);
          }
          return 27;
        }
        if ((_DWORD)v19 == 123)
          goto LABEL_31;
        goto LABEL_28;
    }
    goto LABEL_37;
  }
  if ((int)v19 <= 39)
  {
    if ((_DWORD)v19 == 34)
      return v19;
    if ((_DWORD)v19 != 37)
    {
      if ((_DWORD)v19 == 39)
        return v19;
      goto LABEL_28;
    }
LABEL_31:
    if (!a8)
      return v19;
    v27 = 1216;
    goto LABEL_33;
  }
  if ((v19 - 48) >= 8)
  {
    if ((_DWORD)v19 != 40)
    {
      if ((_DWORD)v19 == 63)
        return v19;
LABEL_28:
      if (!a8)
        return v19;
      if ((word_22F4ADB24[v17[1]] & 0x7EC) == 0)
      {
        sub_22F14E658((uint64_t)&v84, a8, a9, a5, a6, a1, (int)v17, (int)v18, 1241);
        if (v20)
        {
          v46 = v19;
          v47 = (char *)v87 + 1;
          do
          {
            *--v47 = a0123456789abcd_2[v46 & 0xF];
            v24 = v46 > 0xF;
            v46 >>= 4;
          }
          while (v24);
        }
        else
        {
          v47 = (char *)v87;
          LOBYTE(v87[0]) = 48;
        }
        sub_22E3B4274(&v80, v47, (char *)v87 + 1, (char *)v87 + 1 - v47);
        v61 = std::string::insert(&v80, 0, "x");
        v62 = v61->__r_.__value_.__r.__words[2];
        __src = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v87[0] = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        if (v87[0] >= 0)
          p_src = &__src;
        else
          p_src = (__int128 *)__src;
        if (v87[0] >= 0)
          v64 = HIBYTE(v87[0]) & 0x7F;
        else
          v64 = *((_QWORD *)&__src + 1);
        sub_22E3B89A8(&v84, p_src, v64);
        if (SHIBYTE(v87[0]) < 0)
          operator delete((void *)__src);
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_36;
        v28 = (void *)v80.__r_.__value_.__r.__words[0];
        goto LABEL_35;
      }
      v27 = 1241;
LABEL_33:
      sub_22F14E658((uint64_t)&v84, a8, a9, a5, a6, a1, (int)v17, (int)v18, v27);
      HIBYTE(v87[0]) = 1;
      LOWORD(__src) = v20;
      sub_22E3B89A8(&v84, &__src, 1uLL);
      if ((SHIBYTE(v87[0]) & 0x80000000) == 0)
      {
LABEL_36:
        v29 = &v84;
LABEL_37:
        sub_22E3BB0B8((uint64_t)v29);
        return v19;
      }
      v28 = (void *)__src;
LABEL_35:
      operator delete(v28);
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  v22 = 0;
  LODWORD(v19) = 0;
  do
  {
    v23 = &v17[v22 + 2];
    *a2 = v23;
    v19 = (v17[v22 + 1] - 48) | (8 * v19);
    v24 = v23 == a3 || v22 > 1;
    if (v24)
      break;
    ++v22;
  }
  while ((*v23 & 0xF8) == 0x30);
  if (a7 != 32 && v19 >> a7)
  {
    if (a8)
    {
      sub_22F14E658((uint64_t)&v84, a8, a9, a5, a6, a1, (int)v17, (int)v23, 1040);
      v25 = v84;
      if (!v84)
      {
        v25 = (unsigned __int8 *)sub_22E3B8AAC(v85);
        v84 = v25;
      }
      v26 = *v25;
      v25[v26 + 1] = 2;
      *v25 = v26 + 1;
      *(_QWORD *)&v25[8 * v26 + 16] = 1;
      sub_22E3BB0B8((uint64_t)&v84);
    }
    return v19 & (0xFFFFFFFF >> -(char)a7);
  }
  return v19;
}

void sub_22F14D524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  int v34;
  size_t v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  int v53;
  char *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  int v60;
  char *v61;
  char *v62;
  char *v63;
  BOOL v64;
  BOOL v65;
  int64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  size_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  unsigned __int8 *v79;
  int v80;
  char *v81;
  int v82;
  int v83;
  _DWORD *v84;
  _WORD *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _WORD *v91;
  _BYTE *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  _DWORD *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _WORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const void **v118;
  char *__src;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  unsigned __int8 v128;
  unsigned __int8 *v129;
  _QWORD v130[3];
  __int16 v131;
  char *v132;
  __int128 v133;
  _WORD v134[16];
  void *v135;
  __int128 v136;
  _QWORD v137[66];

  v137[64] = *MEMORY[0x24BDAC8D0];
  if (!a3 || (v4 = (_DWORD *)a2, v5 = *(_DWORD *)(a2 + 4), v5 <= 1))
  {
    sub_22F14E248(a1, 0);
    return;
  }
  v6 = a3;
  v7 = v5 - 2;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v5 - 2;
  v8 = *(unsigned __int16 *)(a2 + 16);
  *(_WORD *)(a1 + 44) = v8;
  v9 = (_BYTE *)(a1 + 656);
  *(_BYTE *)(a1 + 656) = 0;
  if (a3 != 1)
  {
    v10 = 1;
    v11 = 1;
    do
    {
      v12 = &v4[6 * v10];
      v13 = v12[1];
      if (v13 < 2)
      {
        sub_22F14E248(a1, *v12);
        return;
      }
      v14 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 36) = v13 + *(_DWORD *)(a1 + 36) - 2;
      if (v13 > v14)
        *(_DWORD *)(a1 + 32) = v13;
      v15 = *(unsigned __int16 *)(a1 + 44);
      v16 = LOWORD(v4[6 * v10 + 4]);
      if (v16 != v15 && v16 != 13)
      {
        if (v15 == 13)
        {
          *(_WORD *)(a1 + 44) = v16;
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 24);
          if (v18)
          {
            *(_DWORD *)(v18 + 312) = *v12;
            *(_DWORD *)(v18 + 316) = 1188;
            if (*(char *)(v18 + 311) < 0)
            {
              **(_BYTE **)(v18 + 288) = 0;
              *(_QWORD *)(v18 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v18 + 288) = 0;
              *(_BYTE *)(v18 + 311) = 0;
            }
            v130[0] = v18 + 320;
            v130[1] = 0;
            v130[2] = v18;
            v131 = 1;
            *(_BYTE *)(v18 + 320) = 0;
            *(_DWORD *)(v18 + 664) = 0;
            v19 = *(unsigned int *)(v18 + 776);
            if ((_DWORD)v19)
            {
              v20 = *(_QWORD *)(v18 + 768);
              v21 = 56 * v19;
              do
              {
                if (*(char *)(v20 + v21 - 9) < 0)
                  operator delete(*(void **)(v20 + v21 - 32));
                v21 -= 56;
              }
              while (v21);
            }
            *(_DWORD *)(v18 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v130);
            v4 = (_DWORD *)a2;
          }
          *v9 = 1;
        }
      }
      v10 = ++v11;
    }
    while (v6 != v11);
    v7 = *(_DWORD *)(a1 + 36);
    v8 = *(unsigned __int16 *)(a1 + 44);
  }
  v22 = v7 + 1;
  *(_DWORD *)(a1 + 36) = v7 + 1;
  v23 = sub_22F14CA60(v8);
  v24 = (v23 >> 3) * v22;
  *(_DWORD *)(a1 + 36) = v24;
  *(_DWORD *)(a1 + 40) = v23 >> 3;
  v25 = *(_QWORD *)(a1 + 56);
  if (v25 != v24)
  {
    if (v25 <= v24)
    {
      if (*(_QWORD *)(a1 + 64) < v24)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v25 = *(_QWORD *)(a1 + 56);
      }
      if (v24 != v25)
        bzero((void *)(*(_QWORD *)(a1 + 48) + v25), v24 - v25);
    }
    *(_QWORD *)(a1 + 56) = v24;
  }
  v135 = v137;
  v136 = xmmword_22F45DFC0;
  v26 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v26)
  {
    if (v26 < 0x201)
    {
      v113 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v113 = v136;
    }
    if (v26 != v113)
      bzero((char *)v135 + v113, v26 - v113);
    *(_QWORD *)&v136 = v26;
  }
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 657) = 0;
  v123 = v6;
  if (!(_DWORD)v6)
    goto LABEL_154;
  v27 = 0;
  v118 = (const void **)(a1 + 592);
  v121 = 0;
  v117 = v6;
  do
  {
    v129 = (unsigned __int8 *)v135;
    v128 = 0;
    v28 = &v4[6 * v27];
    v29 = sub_22F1414C0((uint64_t)v28, (uint64_t *)&v129, *(uint64_t **)a1, *(_QWORD **)(a1 + 8), &v128);
    if (v128)
    {
LABEL_148:
      sub_22F14E248(a1, *v28);
      goto LABEL_199;
    }
    v30 = v129;
    v31 = &v129[v29];
    if (*(v31 - 1) == 34)
      goto LABEL_51;
    v32 = 0;
    v33 = v29;
    do
      v34 = v31[v32-- - 2];
    while (v34 != 34);
    v31 += v32;
    v35 = -v32;
    v36 = *(_QWORD *)(a1 + 600);
    if (!v36)
    {
      if ((v4[6 * v27 + 4] & 0x400000) != 0)
      {
        sub_22F411C48((uint64_t)v118, v31, (char **)-v32);
        goto LABEL_50;
      }
      *(_QWORD *)(a1 + 600) = 0;
      if (*(_QWORD *)(a1 + 608) < v35)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v43 = *(_QWORD *)(a1 + 600);
      }
      else
      {
        v43 = 0;
        v44 = 0;
        if (!v32)
        {
LABEL_49:
          *(_QWORD *)(a1 + 600) = v44 - v32;
LABEL_50:
          *(_DWORD *)(a1 + 648) = v27;
          *(_DWORD *)(a1 + 652) = v33 + v32;
          v121 = *v28;
LABEL_51:
          v45 = v30;
          goto LABEL_67;
        }
      }
      memcpy((void *)(*(_QWORD *)(a1 + 592) + v43), v31, -v32);
      v44 = *(_QWORD *)(a1 + 600);
      goto LABEL_49;
    }
    v132 = (char *)v134;
    v133 = xmmword_22F44E330;
    if ((v4[6 * v27 + 4] & 0x400000) != 0)
    {
      sub_22F411C48((uint64_t)&v132, v31, (char **)v35);
      v37 = v132;
      v35 = v133;
      v36 = *(_QWORD *)(a1 + 600);
      v38 = v132;
    }
    else
    {
      v37 = (char *)v31;
      v38 = (char *)v134;
    }
    if (v36 != v35 || v36 && (v39 = v37, v40 = memcmp(*v118, v37, v36), v37 = v39, v40))
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (v41)
      {
        v42 = *v28;
        *(_DWORD *)(v41 + 312) = v42;
        *(_DWORD *)(v41 + 316) = 1180;
        v120 = v42;
        if (*(char *)(v41 + 311) < 0)
        {
          **(_BYTE **)(v41 + 288) = 0;
          *(_QWORD *)(v41 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 288) = 0;
          *(_BYTE *)(v41 + 311) = 0;
        }
        __src = v37;
        v124 = (unsigned __int8 *)(v41 + 320);
        v125 = 0;
        v126 = v41;
        v127 = 1;
        *(_BYTE *)(v41 + 320) = 0;
        *(_DWORD *)(v41 + 664) = 0;
        v46 = *(unsigned int *)(v41 + 776);
        if ((_DWORD)v46)
        {
          v47 = *(_QWORD *)(v41 + 768);
          v48 = 56 * v46;
          do
          {
            if (*(char *)(v47 + v48 - 9) < 0)
              operator delete(*(void **)(v47 + v48 - 32));
            v48 -= 56;
          }
          while (v48);
        }
        *(_DWORD *)(v41 + 776) = 0;
        sub_22E3B89A8(&v124, *(void **)(a1 + 592), *(_QWORD *)(a1 + 600));
        sub_22E3B89A8(&v124, __src, v35);
        v49 = v124;
        if (!v124)
        {
          v49 = (unsigned __int8 *)sub_22E3B8AAC(v125);
          v124 = v49;
        }
        sub_22E4D6448((uint64_t)(v49 + 336), 0x100000001 * v121, 1);
        v50 = v124;
        v4 = (_DWORD *)a2;
        if (!v124)
        {
          v50 = (unsigned __int8 *)sub_22E3B8AAC(v125);
          v124 = v50;
        }
        sub_22E4D6448((uint64_t)(v50 + 336), v120 | (v120 << 32), 1);
        sub_22E3BB0B8((uint64_t)&v124);
        v38 = v132;
      }
      *v9 = 1;
    }
    if (v38 != (char *)v134)
      free(v38);
    v45 = v129;
LABEL_67:
    v51 = *v45;
    if ((v51 - 76) <= 0x29 && ((1 << (v51 - 76)) & 0x20000000201) != 0)
    {
      v51 = v45[1];
      v129 = v45 + 1;
      if (v51 == 56)
      {
        v53 = v45[2];
        v45 += 2;
        v51 = v53;
        v129 = v45;
      }
      else
      {
        ++v45;
      }
    }
    v54 = (char *)(v31 - 1);
    if (v51 == 34)
    {
      v61 = (char *)(v45 + 1);
      v129 = v45 + 1;
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & 0x4000000000) != 0
        && v45 + 2 != (unsigned __int8 *)v54
        && *v61 == 92
        && v45[2] == 112)
      {
        if (v27)
        {
          if (*(_BYTE *)(a1 + 657))
          {
            v61 = (char *)(v45 + 3);
            v129 = v45 + 3;
          }
        }
        else
        {
          v129 = v45 + 2;
          *(_BYTE *)(a1 + 657) = 1;
          v61 = (char *)(v45 + 2);
        }
      }
      while (1)
      {
        if (v61 == v54)
          goto LABEL_144;
        if (*v61 == 92)
        {
          if ((v61[1] | 0x20) != 0x75)
          {
            v82 = sub_22F14CAD0((uint64_t)v30, (void **)&v129, v54, (_BYTE *)(a1 + 656), *v28, *(uint64_t **)a1, 8 * *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 8));
            v83 = *(_DWORD *)(a1 + 40);
            if (v83 == 2)
            {
              v91 = *(_WORD **)(a1 + 584);
              *v91 = v82;
              v78 = v91 + 1;
            }
            else
            {
              if (v83 != 4)
              {
                v92 = *(_BYTE **)(a1 + 584);
                *(_QWORD *)(a1 + 584) = v92 + 1;
                *v92 = v82;
                goto LABEL_142;
              }
              v84 = *(_DWORD **)(a1 + 584);
              *v84 = v82;
              v78 = v84 + 1;
            }
            goto LABEL_141;
          }
          v72 = *v28;
          v73 = *(_DWORD *)(a1 + 40);
          v74 = *(_QWORD *)(a1 + 24);
          v75 = *(uint64_t **)a1;
          v76 = *(_QWORD **)(a1 + 8);
          LODWORD(v132) = 0;
          LOWORD(v124) = 0;
          if ((sub_22F14C500((uint64_t)v30, (void **)&v129, v54, (int *)&v132, (__int16 *)&v124, v72, v75, v74, v76) & 1) == 0)
            goto LABEL_117;
          if (v73 != 2)
          {
            if (v73 == 4)
            {
              v77 = *(_DWORD **)(a1 + 584);
              *v77 = (_DWORD)v132;
              v78 = v77 + 1;
            }
            else
            {
              v88 = v132;
              if (v132 > 0x7F)
              {
                if (v132 > 0x7FF)
                {
                  v90 = 3;
                  if (v132 < 0x10000)
                    v94 = 3;
                  else
                    v94 = 4;
                  if (v132 >= 0x10000)
                    v90 = 4;
                  v95 = *(_QWORD *)(a1 + 584) + v90;
                  if (v94 != 3)
                  {
                    *(_QWORD *)(a1 + 584) = v95 - 1;
                    *(_BYTE *)(v95 - 1) = v88 & 0x3F | 0x80;
                    v88 >>= 6;
                    v95 = *(_QWORD *)(a1 + 584);
                  }
                  *(_QWORD *)(a1 + 584) = v95 - 1;
                  *(_BYTE *)(v95 - 1) = v88 & 0x3F | 0x80;
                  v88 >>= 6;
                  v93 = *(_QWORD *)(a1 + 584);
                }
                else
                {
                  v93 = *(_QWORD *)(a1 + 584) + 2;
                  v90 = 2u;
                }
                *(_QWORD *)(a1 + 584) = v93 - 1;
                *(_BYTE *)(v93 - 1) = v88 & 0x3F | 0x80;
                v88 >>= 6;
                v89 = *(_QWORD *)(a1 + 584);
              }
              else
              {
                v89 = *(_QWORD *)(a1 + 584) + 1;
                v90 = 1u;
              }
              v96 = *((_BYTE *)&unk_22F4ACB6A + v90) | v88;
              *(_QWORD *)(a1 + 584) = v89 - 1;
              *(_BYTE *)(v89 - 1) = v96;
              v78 = (_DWORD *)(*(_QWORD *)(a1 + 584) + v90);
            }
LABEL_141:
            *(_QWORD *)(a1 + 584) = v78;
            goto LABEL_142;
          }
          v85 = *(_WORD **)(a1 + 584);
          LOWORD(v86) = (_WORD)v132;
          if (v132 >> 16)
          {
            v86 = (((_DWORD)v132 + 67043328) >> 10) - 10240;
            v85[1] = (unsigned __int16)v132 & 0x3FF | 0xDC00;
            v87 = 2;
          }
          else
          {
            v87 = 1;
          }
          *v85 = v86;
          *(_QWORD *)(a1 + 584) = &v85[v87];
        }
        else
        {
          v79 = (unsigned __int8 *)(v61 + 1);
          while (1)
          {
            v129 = v79;
            if (v79 == (unsigned __int8 *)v54)
              break;
            v80 = *v79++;
            if (v80 == 92)
            {
              v81 = (char *)(v79 - 1);
              goto LABEL_116;
            }
          }
          v81 = v54;
LABEL_116:
          if (sub_22F14E304(a1, v28, (int)v30, v61, v81 - v61))
LABEL_117:
            *v9 = 1;
        }
LABEL_142:
        v61 = (char *)v129;
      }
    }
    if (v51 != 82 || v45[1] != 34)
      goto LABEL_148;
    v55 = 0;
    v56 = v45 + 2;
    v129 = v45 + 2;
    do
    {
      v57 = &v45[v55];
      if (v45[v55 + 2] == 40)
      {
        v59 = v57 + 2;
        goto LABEL_90;
      }
      v129 = v57 + 3;
      ++v55;
    }
    while ((v55 & 0xFFFFFFF0) == 0);
    v58 = &v45[v55];
    v60 = v58[2];
    v59 = v58 + 2;
    if (v60 != 40)
      goto LABEL_148;
LABEL_90:
    v62 = (char *)(v59 + 1);
    v63 = &v54[v56 - (unsigned __int8 *)v62];
    v64 = v63 >= v62;
    v66 = v63 - v62;
    v65 = v66 == 0;
    if (!v64)
      goto LABEL_148;
    while (1)
    {
      v132 = v62;
      *(_QWORD *)&v133 = v66;
      if (v65)
        break;
      v67 = llvm::StringRef::find();
      v68 = v67;
      v69 = v132;
      v70 = v133;
      if ((unint64_t)v133 >= v67)
        v71 = v67;
      else
        v71 = v133;
      if (sub_22F14E304(a1, v28, (int)v30, v132, v71))
        *v9 = 1;
      v62 = &v69[v71];
      if (v70 > v68)
        ++v62;
      v66 = (__PAIR128__(v70, v68) - __PAIR128__(v71, v70)) >> 64;
      v65 = v66 == 0;
    }
LABEL_144:
    ++v27;
  }
  while (v27 != v123);
  v6 = v117;
  if (*(_BYTE *)(a1 + 657))
  {
    v97 = *(_DWORD *)(a1 + 40);
    if (v97 == 2)
    {
      v111 = *(_WORD **)(a1 + 48);
      v99 = *(_DWORD *)(a1 + 584) - (_DWORD)v111;
      *v111 = (v99 >> 1) - 1;
    }
    else if (v97 == 4)
    {
      v98 = *(_DWORD **)(a1 + 48);
      v99 = *(_DWORD *)(a1 + 584) - (_DWORD)v98;
      *v98 = (v99 >> 2) - 1;
    }
    else
    {
      **(_BYTE **)(a1 + 48) = (*(_DWORD *)(a1 + 584) - *(_QWORD *)(a1 + 48)) / v97 - 1;
      v99 = *(_DWORD *)(a1 + 584) - *(_DWORD *)(a1 + 48);
    }
    if (v99 >= 0x101)
    {
      v112 = *(_QWORD *)(a1 + 24);
      if (v112)
      {
        *(_DWORD *)(v112 + 312) = *v4;
        *(_DWORD *)(v112 + 316) = 1097;
        if (*(char *)(v112 + 311) < 0)
        {
          **(_BYTE **)(v112 + 288) = 0;
          *(_QWORD *)(v112 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v112 + 288) = 0;
          *(_BYTE *)(v112 + 311) = 0;
        }
        v132 = (char *)(v112 + 320);
        *(_QWORD *)&v133 = 0;
        *((_QWORD *)&v133 + 1) = v112;
        v134[0] = 1;
        *(_BYTE *)(v112 + 320) = 0;
        *(_DWORD *)(v112 + 664) = 0;
        v114 = *(unsigned int *)(v112 + 776);
        if ((_DWORD)v114)
        {
          v115 = *(_QWORD *)(v112 + 768);
          v116 = 56 * v114;
          do
          {
            if (*(char *)(v115 + v116 - 9) < 0)
              operator delete(*(void **)(v115 + v116 - 32));
            v116 -= 56;
          }
          while (v116);
        }
        *(_DWORD *)(v112 + 776) = 0;
        sub_22E4D6448(v112 + 656, *v4 | ((unint64_t)v4[6 * v117 - 6] << 32), 1);
        sub_22E3BB0B8((uint64_t)&v132);
      }
      *v9 = 1;
    }
    goto LABEL_199;
  }
LABEL_154:
  v100 = *(_QWORD *)(a1 + 24);
  if (v100)
  {
    v101 = **(_QWORD **)(a1 + 8);
    v102 = (v101 & 1) != 0 ? 4095 : 509;
    v103 = (v101 & 0x100) != 0 ? 0x10000 : v102;
    if ((*(_DWORD *)(a1 + 584) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 40) > v103)
    {
      *(_DWORD *)(v100 + 312) = *v4;
      *(_DWORD *)(v100 + 316) = 1238;
      if (*(char *)(v100 + 311) < 0)
      {
        **(_BYTE **)(v100 + 288) = 0;
        *(_QWORD *)(v100 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v100 + 288) = 0;
        *(_BYTE *)(v100 + 311) = 0;
      }
      v132 = (char *)(v100 + 320);
      *(_QWORD *)&v133 = 0;
      *((_QWORD *)&v133 + 1) = v100;
      v134[0] = 1;
      *(_BYTE *)(v100 + 320) = 0;
      *(_DWORD *)(v100 + 664) = 0;
      v104 = *(unsigned int *)(v100 + 776);
      if ((_DWORD)v104)
      {
        v105 = *(_QWORD *)(v100 + 768);
        v106 = 56 * v104;
        do
        {
          if (*(char *)(v105 + v106 - 9) < 0)
            operator delete(*(void **)(v105 + v106 - 32));
          v106 -= 56;
        }
        while (v106);
        LODWORD(v104) = *(unsigned __int8 *)(v100 + 320);
      }
      *(_DWORD *)(v100 + 776) = 0;
      v107 = (*(_DWORD *)(a1 + 584) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 40);
      *(_BYTE *)(v100 + 321 + v104) = 3;
      *(_QWORD *)(v100 + 336 + 8 * v104) = v107;
      v108 = (v104 + 1);
      *(_BYTE *)(v100 + 321 + v108) = 3;
      *(_BYTE *)(v100 + 320) = v104 + 2;
      *(_QWORD *)(v100 + 336 + 8 * v108) = v103;
      v109 = **(_QWORD **)(a1 + 8) & 1;
      if ((**(_QWORD **)(a1 + 8) & 0x100) != 0)
        v109 = 2;
      v110 = (v104 + 2);
      *(_BYTE *)(v100 + 321 + v110) = 2;
      *(_BYTE *)(v100 + 320) = v104 + 3;
      *(_QWORD *)(v100 + 336 + 8 * v110) = v109;
      sub_22E4D6448(v100 + 656, *v4 | ((unint64_t)v4[6 * v6 - 6] << 32), 1);
      sub_22E3BB0B8((uint64_t)&v132);
    }
  }
LABEL_199:
  if (v135 != v137)
    free(v135);
}

uint64_t sub_22F14E1D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *(_QWORD *)a1 = a4[11];
  *(_QWORD *)(a1 + 8) = a4[7];
  *(_QWORD *)(a1 + 16) = a4[8];
  *(_QWORD *)(a1 + 24) = a4[6];
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 72;
  *(_OWORD *)(a1 + 56) = xmmword_22F45DFC0;
  *(_QWORD *)(a1 + 584) = a1 + 72;
  *(_QWORD *)(a1 + 592) = a1 + 616;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 32;
  *(_WORD *)(a1 + 656) = 0;
  sub_22F14D524(a1, a2, a3);
  return a1;
}

uint64_t sub_22F14E248(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  __int16 v7;

  *(_BYTE *)(result + 656) = 1;
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(v2 + 312) = a2;
    *(_DWORD *)(v2 + 316) = 1056;
    if (*(char *)(v2 + 311) < 0)
    {
      **(_BYTE **)(v2 + 288) = 0;
      *(_QWORD *)(v2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 288) = 0;
      *(_BYTE *)(v2 + 311) = 0;
    }
    v6[0] = v2 + 320;
    v6[1] = 0;
    v6[2] = v2;
    v7 = 1;
    *(_BYTE *)(v2 + 320) = 0;
    *(_DWORD *)(v2 + 664) = 0;
    v3 = *(unsigned int *)(v2 + 776);
    if ((_DWORD)v3)
    {
      v4 = *(_QWORD *)(v2 + 768);
      v5 = 56 * v3;
      do
      {
        if (*(char *)(v4 + v5 - 9) < 0)
          operator delete(*(void **)(v4 + v5 - 32));
        v5 -= 56;
      }
      while (v5);
    }
    *(_DWORD *)(v2 + 776) = 0;
    return sub_22E3BB0B8((uint64_t)v6);
  }
  return result;
}

BOOL sub_22F14E304(uint64_t a1, int *a2, int a3, char *a4, size_t a5)
{
  void **v9;
  _BOOL8 v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  unsigned int NumBytesForUTF8;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  char v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _BOOL4 v45;
  _QWORD v47[4];
  unsigned __int8 *v48;
  void *v49;
  __int128 v50;
  _QWORD v51[66];

  v51[64] = *MEMORY[0x24BDAC8D0];
  v48 = 0;
  v9 = (void **)(a1 + 584);
  if ((llvm::ConvertUTF8toWide() & 1) != 0)
    return 0;
  v11 = *(unsigned __int16 *)(a1 + 44);
  v10 = v11 != 13;
  if (v11 == 13)
  {
    memcpy(*v9, a4, a5);
    *v9 = (char *)*v9 + a5;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
  {
    v45 = v11 != 13;
    v13 = v48;
    v14 = *a2;
    v15 = *(uint64_t **)a1;
    v16 = (unsigned __int8 *)&a4[a5];
    if (v48 == (unsigned __int8 *)&a4[a5])
    {
      if (v11 == 13)
        v30 = 1287;
      else
        v30 = 1027;
      sub_22F14E658((uint64_t)v47, v12, *(_QWORD **)(a1 + 8), v14, v15, a3, (int)v48, (int)v48, v30);
      v31 = (int)v13;
    }
    else
    {
      v17 = *(_QWORD **)(a1 + 8);
      NumBytesForUTF8 = llvm::getNumBytesForUTF8((llvm *)*v48);
      v19 = 0;
      v20 = (_DWORD)v16 - (_DWORD)v48;
      if (NumBytesForUTF8 >= (int)v16 - (int)v48)
        v21 = v20;
      else
        v21 = NumBytesForUTF8;
      v22 = (_DWORD)v48 + v21;
      v23 = v21 - 1;
      while (v23 != v19)
      {
        v24 = v48[++v19] & 0xC0;
        if (v24 != 128)
        {
          v22 = (_DWORD)v48 + v19;
          break;
        }
      }
      if (v11 == 13)
        v25 = 1287;
      else
        v25 = 1027;
      sub_22F14E658((uint64_t)v47, v12, v17, v14, v15, a3, (int)v48, v22, v25);
      v26 = llvm::getNumBytesForUTF8((llvm *)*v13);
      if (v26 >= v20)
        v27 = v20;
      else
        v27 = v26;
      v28 = v27 - 1;
      do
      {
        if (!v28)
          break;
        v29 = *++v13;
        --v28;
      }
      while ((v29 & 0xC0) == 0x80);
      v31 = (int)v16;
    }
    v49 = v51;
    v50 = xmmword_22F45DFC0;
    if (a5 * *(unsigned int *)(a1 + 40) >= 0x201)
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    if ((llvm::ConvertUTF8toWide() & 1) == 0)
    {
      do
      {
        v32 = v48;
        if (v48 == v16)
        {
          LODWORD(v32) = (_DWORD)v16;
          LODWORD(v37) = v31;
        }
        else
        {
          v33 = llvm::getNumBytesForUTF8((llvm *)*v48);
          if (v33 >= v31 - (int)v32)
            v34 = (v31 - (_DWORD)v32);
          else
            v34 = v33;
          v35 = (_DWORD)v32 + v34;
          v36 = v34 - 1;
          v37 = v32;
          while (v36)
          {
            v38 = *++v37;
            --v36;
            if ((v38 & 0xC0) != 0x80)
              goto LABEL_42;
          }
          LODWORD(v37) = v35;
        }
LABEL_42:
        v39 = *(_QWORD **)(a1 + 8);
        v40 = sub_22F1418F4(v14, (int)v32 - a3, v15, v39);
        v41 = (v40 + v14);
        v42 = sub_22F1418F4(v40 + v14, (int)v37 - (int)v32, v15, v39);
        v43 = v47[0];
        if (!v47[0])
        {
          v43 = sub_22E3B8AAC(v47[1]);
          v47[0] = v43;
        }
        sub_22E4D6448(v43 + 336, v41 | ((unint64_t)(v42 + v41) << 32), 0);
      }
      while (!llvm::ConvertUTF8toWide());
    }
    if (v49 != v51)
      free(v49);
    sub_22E3BB0B8((uint64_t)v47);
    return v45;
  }
  return v10;
}

uint64_t sub_22F14E658(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t *a5, int a6, int a7, int a8, int a9)
{
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD v24[3];
  __int16 v25;

  v14 = a7 - a6;
  *(_DWORD *)(a2 + 312) = sub_22F1418F4(a4, a7 - a6, a5, a3) + a4;
  *(_DWORD *)(a2 + 316) = a9;
  if (*(char *)(a2 + 311) < 0)
  {
    **(_BYTE **)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 288) = 0;
    *(_BYTE *)(a2 + 311) = 0;
  }
  v24[0] = a2 + 320;
  v24[1] = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 664) = 0;
  v16 = *(unsigned int *)(a2 + 776);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(a2 + 768);
    v18 = 56 * v16;
    do
    {
      if (*(char *)(v17 + v18 - 9) < 0)
        operator delete(*(void **)(v17 + v18 - 32));
      v18 -= 56;
    }
    while (v18);
  }
  *(_DWORD *)(a2 + 776) = 0;
  v19 = sub_22F1418F4(a4, v14, a5, a3) + a4;
  v20 = sub_22F1418F4(v19, a8 - a7, a5, a3);
  sub_22E4D6448(a2 + 656, v19 | ((unint64_t)(v20 + v19) << 32), 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = a2 + 320;
  *(_WORD *)(a1 + 24) = 1;
  v24[2] = 0;
  v25 = 0;
  return sub_22E3BB0B8((uint64_t)v24);
}

_QWORD *sub_22F14E7A8(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  if (result[2] < (unint64_t)(v7 + a3 - __src))
  {
    result = (_QWORD *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

unsigned int *sub_22F14E828(uint64_t a1, void *__src, unint64_t a3, char a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v17;

  v9 = *(unsigned int **)(a5 + 2144);
  if (v9)
  {
    v10 = 0;
    v11 = (unsigned int *)(a5 + 2144);
    v12 = -1;
    do
    {
      v13 = *v9;
      if (a3 <= v13 && v13 < v12)
      {
        v10 = v11;
        if (a3 == v13)
          goto LABEL_12;
        v12 = *v9;
      }
      v11 = v9 + 8;
      v9 = (unsigned int *)*((_QWORD *)v9 + 4);
    }
    while (v9);
    if (!v10)
      goto LABEL_16;
    v9 = *(unsigned int **)v10;
LABEL_12:
    *(_QWORD *)v10 = *((_QWORD *)v9 + 4);
    *v9 = a3;
    *((_BYTE *)v9 + 4) = a4;
    v15 = *(_DWORD *)(a1 + 24);
  }
  else
  {
LABEL_16:
    v9 = (unsigned int *)malloc_type_malloc(24 * a3 + 48, 0x4065EBACuLL);
    if (!v9 && (24 * a3 != -48 || (v9 = (unsigned int *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    {
      v17 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      return (unsigned int *)sub_22F14E94C(v17);
    }
    v15 = *(_DWORD *)(a1 + 24);
    *v9 = a3;
    *((_BYTE *)v9 + 4) = a4;
    *(_OWORD *)(v9 + 2) = 0u;
    *(_OWORD *)(v9 + 6) = 0u;
  }
  v9[10] = v15;
  if (a3)
    memmove(v9 + 12, __src, 24 * a3);
  return v9;
}

char **sub_22F14E94C(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  char **v10;
  unsigned int v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char v29;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v7) >> 3) < v8)
  {
    sub_22F412090(a1 + 8, v8);
    v7 = *v6;
  }
  v9 = (char **)(v7 + 24 * a2);
  v10 = v9 + 1;
  if (*v9 == v9[1])
  {
    v11 = a2;
    v29 = *(_BYTE *)(a3 + 539);
    *(_BYTE *)(a3 + 539) = 1;
    for (i = a1 + 48; a2; a2 -= v13)
    {
      v13 = *(unsigned __int16 *)(i + 16) == 1;
      i += 24;
    }
    if (*(_WORD *)(i + 16) == 1)
    {
      v14 = 1;
    }
    else
    {
      v15 = (unsigned __int16 *)(i + 40);
      LODWORD(v14) = 1;
      do
      {
        v16 = *v15;
        v15 += 12;
        v14 = (v14 + 1);
      }
      while (v16 != 1);
    }
    sub_22F1735E4(a3, (_BYTE *)i, v14, 0, 0, 0);
    v17 = (_QWORD *)(v7 + 24 * v11 + 16);
    v18 = *v10;
    do
    {
      if ((unint64_t)v18 >= *v17)
      {
        v20 = *v9;
        v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *v9) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(*v17 - (_QWORD)v20) >> 3) > v22)
          v22 = 0x5555555555555556 * ((uint64_t)(*v17 - (_QWORD)v20) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v17 - (_QWORD)v20) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v22;
        if (v23)
        {
          if (v23 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v24 = (char *)operator new(24 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[24 * v21];
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = 0;
        v26 = v25;
        if (v18 != v20)
        {
          do
          {
            v27 = *(_OWORD *)(v18 - 24);
            *((_QWORD *)v26 - 1) = *((_QWORD *)v18 - 1);
            *(_OWORD *)(v26 - 24) = v27;
            v26 -= 24;
            v18 -= 24;
          }
          while (v18 != v20);
          v18 = *v9;
        }
        *v9 = v26;
        v19 = v25 + 24;
        *v10 = v25 + 24;
        *v17 = &v24[24 * v23];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        v19 = v18 + 24;
        *((_QWORD *)v18 + 2) = 0;
      }
      *v10 = v19;
      sub_22F18FB4C(a3, (unsigned int *)v19 - 6);
      v18 = *v10;
    }
    while (*((_WORD *)*v10 - 4) != 1);
    if (!(*(_QWORD *)(a3 + 1016) | *(_QWORD *)(a3 + 1040)) && *(_QWORD *)(a3 + 1064) != *(_QWORD *)(a3 + 1072))
      sub_22F1754E8(a3);
    sub_22F1754E8(a3);
    *(_BYTE *)(a3 + 539) = v29;
  }
  return v9;
}

uint64_t sub_22F14EBCC(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned __int16 *i;
  int v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(a2 + 16);
  if (v2 == 1)
    return 0;
  for (i = (unsigned __int16 *)(a2 + 40); ; i += 12)
  {
    if ((v2 - 7) >= 6 && (v2 - 13) >= 6 && v2 != 1)
    {
      v6 = *((_QWORD *)i - 4);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 3) & 2) != 0)
          break;
      }
    }
    v5 = *i;
    v2 = v5;
    if (v5 == 1)
      return 0;
  }
  return 1;
}

void sub_22F14EC2C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int v6;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  size_t v28;
  std::string *v29;
  std::string::size_type size;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD v50[3];
  __int16 v51;
  _QWORD v52[3];
  __int16 v53;
  std::string v54;
  void *__p[2];
  char v56;
  unsigned __int8 v57;
  void *v58;
  __int128 v59;
  _BYTE v60[128];
  uint64_t v61;

  v6 = a5;
  v61 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v11 = 8;
  else
    v11 = 13;
  *(_DWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_WORD *)(a6 + 16) = v11;
  v58 = v60;
  v60[0] = 34;
  v59 = xmmword_22F460B10;
  v12 = *(unsigned __int16 *)(a1 + 16);
  v13 = 1;
  if (v12 != 1)
  {
    v15 = a1;
    v16 = 1;
    while (1)
    {
      v17 = v15;
      if ((v16 & 1) == 0 && (*(_WORD *)(v15 + 18) & 3) != 0)
      {
        v18 = v59;
        if ((unint64_t)(v59 + 1) > *((_QWORD *)&v59 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v18 = v59;
        }
        *((_BYTE *)v58 + v18) = 32;
        *(_QWORD *)&v59 = v59 + 1;
        v12 = *(unsigned __int16 *)(v17 + 16);
      }
      if (v12 > 0x12)
        break;
      if (((1 << v12) & 0x77F00) != 0)
      {
        v57 = 0;
        sub_22F1413E0(v17, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), &v57, (uint64_t)__p);
        if (!v57)
        {
          if (v56 >= 0)
            v27 = __p;
          else
            v27 = (void **)__p[0];
          if (v56 >= 0)
            v28 = v56 & 0x7F;
          else
            v28 = (size_t)__p[1];
          sub_22F141060(v27, v28, 0, &v54);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v54;
          else
            v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
          size = *((_BYTE *)&v54.__r_.__value_.__s + 23) & 0x7F;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v54.__r_.__value_.__l.__size_;
          sub_22F24FBF8((uint64_t)&v58, (char *)v29, (char *)v29 + size);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v56 < 0)
          operator delete(__p[0]);
      }
      else
      {
        if (v12 != 3)
          break;
        *(_BYTE *)(a2 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + 6) = 1;
        v19 = *(_QWORD *)(a2 + 744);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 64))(v19);
      }
LABEL_17:
      v16 = 0;
      v15 = v17 + 24;
      v12 = *(unsigned __int16 *)(v17 + 40);
      if (v12 == 1)
      {
        v14 = v58;
        v13 = v59;
        v6 = a5;
        goto LABEL_54;
      }
    }
    v20 = v59;
    v21 = (*(_DWORD *)(v17 + 4) + v59);
    if ((_QWORD)v59 != v21)
    {
      if ((unint64_t)v59 <= v21)
      {
        v31 = v59;
        if (*((_QWORD *)&v59 + 1) < v21)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v31 = v59;
        }
        if (v21 != v31)
          bzero((char *)v58 + v31, v21 - v31);
      }
      *(_QWORD *)&v59 = v21;
    }
    __p[0] = (char *)v58 + v20;
    v54.__r_.__value_.__s.__data_[0] = 0;
    v22 = sub_22F1414C0(v17, (uint64_t *)__p, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), (unsigned __int8 *)&v54);
    if (!v54.__r_.__value_.__s.__data_[0])
    {
      v23 = v22;
      if (v22)
      {
        v24 = (char *)v58 + v20;
        if (__p[0] != v24)
          memcpy(v24, __p[0], v23);
      }
      if (v23 != *(_DWORD *)(v17 + 4))
      {
        v25 = v23 + v20;
        v26 = v59;
        if ((_QWORD)v59 != v25)
        {
          if ((unint64_t)v59 <= v25)
          {
            if (*((_QWORD *)&v59 + 1) < v25)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v26 = v59;
            }
            if (v25 != v26)
              bzero((char *)v58 + v26, v25 - v26);
          }
          *(_QWORD *)&v59 = v25;
        }
      }
    }
    goto LABEL_17;
  }
  v14 = v60;
  v15 = a1;
LABEL_54:
  if (v14[v13 - 1] == 92)
  {
    v32 = v13 - 2;
    do
    {
      v33 = v32;
      v34 = v14[v32--];
    }
    while (v34 == 92);
    if ((((_DWORD)v13 + ~v33) & 1) != 0)
    {
      v35 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v35 + 312) = *(_DWORD *)(v15 - 24);
      *(_DWORD *)(v35 + 316) = 1272;
      if (*(char *)(v35 + 311) < 0)
      {
        **(_BYTE **)(v35 + 288) = 0;
        *(_QWORD *)(v35 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v35 + 288) = 0;
        *(_BYTE *)(v35 + 311) = 0;
      }
      v52[0] = v35 + 320;
      v52[1] = 0;
      v52[2] = v35;
      v53 = 1;
      *(_BYTE *)(v35 + 320) = 0;
      *(_DWORD *)(v35 + 664) = 0;
      v36 = *(unsigned int *)(v35 + 776);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(v35 + 768);
        v38 = 56 * v36;
        do
        {
          if (*(char *)(v37 + v38 - 9) < 0)
            operator delete(*(void **)(v37 + v38 - 32));
          v38 -= 56;
        }
        while (v38);
      }
      *(_DWORD *)(v35 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v52);
      v13 = v59 - 1;
      *(_QWORD *)&v59 = v59 - 1;
    }
  }
  if ((unint64_t)(v13 + 1) > *((_QWORD *)&v59 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v13 = v59;
  }
  *((_BYTE *)v58 + v13) = 34;
  v39 = v58;
  v40 = v59 + 1;
  *(_QWORD *)&v59 = v59 + 1;
  if (!a3)
    goto LABEL_76;
  *(_BYTE *)v58 = 39;
  *((char *)v58 + v59 - 1) = 39;
  if ((_QWORD)v59 == 4)
  {
    v39 = v58;
    if (*((_BYTE *)v58 + 1) == 92)
    {
      v40 = 4;
      goto LABEL_76;
    }
  }
  else if ((_QWORD)v59 == 3)
  {
    v39 = v58;
    if (*((_BYTE *)v58 + 1) != 39)
    {
      v40 = 3;
LABEL_76:
      v41 = a4;
      goto LABEL_88;
    }
  }
  v42 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v42 + 312) = *(_DWORD *)a1;
  *(_DWORD *)(v42 + 316) = 1050;
  if (*(char *)(v42 + 311) < 0)
  {
    **(_BYTE **)(v42 + 288) = 0;
    *(_QWORD *)(v42 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v42 + 288) = 0;
    *(_BYTE *)(v42 + 311) = 0;
  }
  v50[0] = v42 + 320;
  v50[1] = 0;
  v50[2] = v42;
  v51 = 1;
  *(_BYTE *)(v42 + 320) = 0;
  *(_DWORD *)(v42 + 664) = 0;
  v43 = *(unsigned int *)(v42 + 776);
  v41 = a4;
  if ((_DWORD)v43)
  {
    v44 = *(_QWORD *)(v42 + 768);
    v45 = 56 * v43;
    do
    {
      if (*(char *)(v44 + v45 - 9) < 0)
        operator delete(*(void **)(v44 + v45 - 32));
      v45 -= 56;
    }
    while (v45);
  }
  *(_DWORD *)(v42 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v50);
  v46 = 0;
  *(_QWORD *)&v59 = 0;
  if (*((_QWORD *)&v59 + 1) <= 2uLL)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v46 = v59;
  }
  v47 = (char *)v58 + v46;
  v47[2] = 39;
  *(_WORD *)v47 = 8231;
  v39 = v58;
  v40 = v59 + 3;
  *(_QWORD *)&v59 = v59 + 3;
LABEL_88:
  sub_22F18E27C(a2, v39, v40, a6, v41, v6);
  if (v58 != v60)
    free(v58);
}

void sub_22F14F208(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22F14F284(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  int64x2_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  char **v22;

  v4 = a1[2];
  v5 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) < a2)
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3) + a2;
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((v4 - v7) >> 3) > v9)
      v9 = 0x5555555555555556 * ((v4 - v7) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_22E3B3F8C();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * (v8 >> 3)];
    v13 = &v11[24 * v10];
    v21 = v13;
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v12, v14);
    v15 = &v11[v8 + v14];
    v20.i64[1] = (uint64_t)v15;
    if (v5 == v7)
    {
      v16 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        v17 = v12;
        *((_QWORD *)v12 - 2) = 0;
        *((_QWORD *)v12 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 24);
        v5 -= 24;
        *(_OWORD *)(v12 - 24) = v18;
        v12 -= 24;
        *((_QWORD *)v17 - 1) = *((_QWORD *)v5 + 2);
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
      }
      while (v5 != v7);
      v16 = *(int64x2_t *)a1;
      v4 = a1[2];
      v15 = (char *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v15;
    v20 = v16;
    a1[2] = v13;
    v21 = v4;
    v19 = v16.i64[0];
    sub_22F412124((uint64_t)&v19);
  }
  else
  {
    if (a2)
    {
      v6 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v6);
      v5 += v6;
    }
    a1[1] = v5;
  }
}

uint64_t sub_22F14F450(uint64_t a1, uint64_t a2)
{
  int v3;
  int *v5;
  int *v6;
  int v7;
  unint64_t v8;
  uint64_t result;

  *(_WORD *)(a1 + 36) |= 1u;
  v3 = *(_DWORD *)(a1 + 28);
  if (v3)
  {
    v5 = *(int **)(a1 + 16);
    v6 = &v5[6 * v3];
    v7 = *(v6 - 6);
    v8 = sub_22E74B2B0(a2, *v5) >> 32;
    result = ((sub_22E74B2B0(a2, v7) >> 32) - v8 + *(v6 - 5));
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_22F14F4DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  char v26;
  size_t v27;
  int v28;
  void *v29;
  void **v30;
  uint64_t v31;
  void **p_s1;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v38;
  _BOOL4 v39;
  int v40;
  uint64_t v42;
  uint64_t v44;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *__p[2];
  char v58;
  void *__s1;
  size_t __n;
  char v61;

  v4 = *(_DWORD *)(a1 + 28);
  if (v4 != *(_DWORD *)(a2 + 28))
    return 0;
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7 != *(_DWORD *)(a2 + 24))
    return 0;
  v8 = *(unsigned __int16 *)(a1 + 36);
  v9 = *(unsigned __int16 *)(a2 + 36);
  if (((v8 ^ v9) & 2) != 0
    || ((v8 ^ v9) & 4) != 0
    || ((v8 ^ v9) & 8) != 0)
  {
    return 0;
  }
  if ((a4 & 1) == 0 && (_DWORD)v7)
  {
    v13 = *(_QWORD **)(a1 + 8);
    v14 = *(_QWORD **)(a2 + 8);
    v15 = 8 * v7;
    while (*v13 == *v14)
    {
      ++v13;
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  if (v4)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = v17 + 24 * v16;
      v19 = *(_QWORD *)(a2 + 16);
      v20 = v19 + 24 * v16;
      v21 = *(unsigned __int16 *)(v18 + 16);
      if (v21 != *(unsigned __int16 *)(v20 + 16))
        return 0;
      v22 = v16;
      if (v16)
      {
        v23 = *(_WORD *)(v17 + 24 * v16 + 18) ^ *(_WORD *)(v19 + 24 * v16 + 18);
        if ((v23 & 1) != 0 || (v23 & 2) != 0)
          return 0;
      }
      if ((v21 - 7) < 6)
        break;
      v24 = v21 - 13;
      if ((v21 - 13) < 6 || v21 == 1)
        break;
      v42 = *(_QWORD *)(v17 + 24 * v22 + 8);
      if (!v42)
      {
        v51 = v24 < 6 || v21 == 1;
        if (v51 || !*(_QWORD *)(v19 + 24 * v22 + 8))
          break;
      }
      if (v24 < 6 || v21 == 1)
        v44 = 0;
      else
        v44 = v42;
      if (v24 < 6 || v21 == 1)
        v56 = 0;
      else
        v56 = *(_QWORD *)(v19 + 24 * v22 + 8);
      v46 = v44 == v56;
      if (v44 == v56)
        v40 = 7;
      else
        v40 = 1;
      if (v46 || !a4)
        goto LABEL_50;
      if (v21 == 1)
        v42 = 0;
      if (v24 >= 6)
        v47 = v42;
      else
        v47 = 0;
      v48 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v48)
        return 0;
      v49 = 0;
      v50 = 8 * v48;
      while (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v49) != v47)
      {
        result = 0;
        ++v49;
        v50 -= 8;
        if (!v50)
          return result;
      }
      if ((_DWORD)v49 == -1)
        return 0;
      v52 = 0;
      if (v24 >= 6 && v21 != 1)
        v52 = *(_QWORD *)(v19 + 24 * v22 + 8);
      v53 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v53)
      {
        v54 = 0;
        v55 = 8 * v53;
        while (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v54) != v52)
        {
          ++v54;
          v55 -= 8;
          if (!v55)
            goto LABEL_97;
        }
      }
      else
      {
LABEL_97:
        LODWORD(v54) = -1;
      }
      if ((_DWORD)v54 != (_DWORD)v49)
        return 0;
LABEL_55:
      v16 = v22 + 1;
      result = 1;
      if (v22 + 1 == *(_DWORD *)(a1 + 28))
        return result;
    }
    sub_22F1413E0(v18, *(uint64_t **)(a3 + 88), *(_QWORD **)(a3 + 56), 0, (uint64_t)&__s1);
    sub_22F1413E0(v20, *(uint64_t **)(a3 + 88), *(_QWORD **)(a3 + 56), 0, (uint64_t)__p);
    v26 = v61;
    if (v61 >= 0)
      v27 = v61 & 0x7F;
    else
      v27 = __n;
    v28 = v58;
    v29 = (void *)(v58 & 0x7F);
    if (v58 < 0)
      v29 = __p[1];
    if ((void *)v27 == v29)
    {
      if (v58 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      if (v61 < 0)
      {
        v39 = memcmp(__s1, v30, __n) == 0;
      }
      else if ((v61 & 0x7F) != 0)
      {
        v31 = (v61 & 0x7F) - 1;
        p_s1 = &__s1;
        do
        {
          v34 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v33 = v34;
          v36 = *(unsigned __int8 *)v30;
          v30 = (void **)((char *)v30 + 1);
          v35 = v36;
          v38 = v31-- != 0;
          v39 = v33 == v35;
        }
        while (v33 == v35 && v38);
      }
      else
      {
        v39 = 1;
      }
    }
    else
    {
      v39 = 0;
    }
    if (v28 < 0)
    {
      operator delete(__p[0]);
      v26 = v61;
    }
    if (v26 < 0)
      operator delete(__s1);
    v40 = !v39;
LABEL_50:
    if (v40 != 7 && v40 != 0)
      return 0;
    goto LABEL_55;
  }
  return 1;
}

_WORD *sub_22F14F840(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  _WORD *result;
  _DWORD *v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  llvm::raw_ostream *v24;
  const char *v25;
  size_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  const char *v30;
  size_t v31;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = v2;
  v4 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v4) > 9)
  {
    *(_WORD *)(v4 + 8) = 8303;
    *(_QWORD *)v4 = *(_QWORD *)"MacroInfo ";
    *((_QWORD *)v2 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v2, "MacroInfo ");
  }
  result = (_WORD *)llvm::raw_ostream::operator<<();
  v6 = (_DWORD *)*((_QWORD *)v3 + 4);
  if ((*(_WORD *)(a1 + 36) & 0x10) != 0)
  {
    if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 7uLL)
    {
      *(_QWORD *)v6 = 0x6E69746C69756220;
      v6 = (_DWORD *)(*((_QWORD *)v3 + 4) + 8);
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, " builtin");
      v6 = (_DWORD *)*((_QWORD *)v3 + 4);
    }
  }
  if ((*(_WORD *)(a1 + 36) & 0x40) != 0)
  {
    if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 8uLL)
    {
      *((_BYTE *)v6 + 8) = 100;
      *(_QWORD *)v6 = *(_QWORD *)" disabled";
      v6 = (_DWORD *)(*((_QWORD *)v3 + 4) + 9);
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, " disabled");
      v6 = (_DWORD *)*((_QWORD *)v3 + 4);
    }
  }
  if ((*(_WORD *)(a1 + 36) & 0x80) != 0)
  {
    if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 4uLL)
    {
      *((_BYTE *)v6 + 4) = 100;
      *v6 = 1702065440;
      v6 = (_DWORD *)(*((_QWORD *)v3 + 4) + 5);
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, " used");
      v6 = (_DWORD *)*((_QWORD *)v3 + 4);
    }
  }
  if ((*(_WORD *)(a1 + 36) & 0x100) != 0)
  {
    if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 0x23uLL)
    {
      qmemcpy(v6, " allow_redefinitions_without_warning", 36);
      v6 = (_DWORD *)(*((_QWORD *)v3 + 4) + 36);
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, " allow_redefinitions_without_warning");
      v6 = (_DWORD *)*((_QWORD *)v3 + 4);
    }
  }
  if ((*(_WORD *)(a1 + 36) & 0x200) != 0)
  {
    if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 0xEuLL)
    {
      qmemcpy(v6, " warn_if_unused", 15);
      v6 = (_DWORD *)(*((_QWORD *)v3 + 4) + 15);
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, " warn_if_unused");
      v6 = (_DWORD *)*((_QWORD *)v3 + 4);
    }
  }
  if ((*(_WORD *)(a1 + 36) & 0x400) != 0)
  {
    if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 0xCuLL)
    {
      qmemcpy(v6, " header_guard", 13);
      v6 = (_DWORD *)(*((_QWORD *)v3 + 4) + 13);
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, " header_guard");
      v6 = (_DWORD *)*((_QWORD *)v3 + 4);
    }
  }
  if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 0x13uLL)
  {
    v6[4] = 1047491171;
    *(_OWORD *)v6 = *(_OWORD *)"\n    #define <macro>";
    *((_QWORD *)v3 + 4) += 20;
  }
  else
  {
    result = (_WORD *)llvm::raw_ostream::write(v3, "\n    #define <macro>");
  }
  if ((*(_WORD *)(a1 + 36) & 2) != 0)
  {
    v7 = (_BYTE *)*((_QWORD *)v3 + 4);
    if (*((_BYTE **)v3 + 3) == v7)
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, "(");
    }
    else
    {
      *v7 = 40;
      ++*((_QWORD *)v3 + 4);
    }
    if (*(_DWORD *)(a1 + 24))
    {
      v8 = 0;
      do
      {
        result = (_WORD *)*((_QWORD *)v3 + 4);
        if (v8)
        {
          if (*((_QWORD *)v3 + 3) - (_QWORD)result > 1uLL)
          {
            *result = 8236;
            result = (_WORD *)(*((_QWORD *)v3 + 4) + 2);
            *((_QWORD *)v3 + 4) = result;
          }
          else
          {
            llvm::raw_ostream::write(v3, ", ");
            result = (_WORD *)*((_QWORD *)v3 + 4);
          }
        }
        v9 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8) + 16);
        v12 = *v9;
        v10 = v9 + 4;
        v11 = v12;
        if ((unint64_t)v12 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
        {
          if (v11)
          {
            result = memcpy(result, v10, v11);
            *((_QWORD *)v3 + 4) += v11;
          }
        }
        else
        {
          result = (_WORD *)llvm::raw_ostream::write(v3, (const char *)v10);
        }
        ++v8;
      }
      while (v8 != *(_DWORD *)(a1 + 24));
    }
    else
    {
      v8 = 0;
    }
    v13 = *(_WORD *)(a1 + 36);
    v14 = *((_QWORD *)v3 + 4);
    if ((v13 & 0xC) != 0)
    {
      if (v8 && (v13 & 4) != 0)
      {
        if ((unint64_t)(*((_QWORD *)v3 + 3) - v14) > 1)
        {
          *(_WORD *)v14 = 8236;
          v14 = *((_QWORD *)v3 + 4) + 2;
          *((_QWORD *)v3 + 4) = v14;
        }
        else
        {
          result = (_WORD *)llvm::raw_ostream::write(v3, ", ");
          v14 = *((_QWORD *)v3 + 4);
        }
      }
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v14) > 2)
      {
        *(_BYTE *)(v14 + 2) = 46;
        *(_WORD *)v14 = 11822;
        v14 = *((_QWORD *)v3 + 4) + 3;
        *((_QWORD *)v3 + 4) = v14;
      }
      else
      {
        result = (_WORD *)llvm::raw_ostream::write(v3, "...");
        v14 = *((_QWORD *)v3 + 4);
      }
    }
    if (*((_QWORD *)v3 + 3) == v14)
    {
      result = (_WORD *)llvm::raw_ostream::write(v3, ")");
    }
    else
    {
      *(_BYTE *)v14 = 41;
      ++*((_QWORD *)v3 + 4);
    }
  }
  v15 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v15)
  {
    v16 = 24 * v15;
    v17 = (unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 16);
    v18 = 1;
    while (1)
    {
      if ((v18 & 1) != 0 || (v17[1] & 2) != 0)
      {
        v19 = (_BYTE *)*((_QWORD *)v3 + 4);
        if (*((_BYTE **)v3 + 3) == v19)
        {
          llvm::raw_ostream::write(v3, " ");
        }
        else
        {
          *v19 = 32;
          ++*((_QWORD *)v3 + 4);
        }
      }
      v20 = *v17;
      v21 = sub_22F43F6D8(*v17);
      if (v21)
        break;
      if ((unsigned __int16)(v20 - 7) >= 6u && (v20 - 13) >= 6)
      {
        if ((_DWORD)v20 == 1 || (v27 = *((_QWORD *)v17 - 1)) == 0)
        {
LABEL_73:
          v30 = off_24FCAD0E8[v20];
          v31 = strlen(v30);
          result = (_WORD *)*((_QWORD *)v3 + 4);
          if (v31 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
          {
            if (!v31)
              goto LABEL_58;
            result = memcpy(result, v30, v31);
            v26 = *((_QWORD *)v3 + 4) + v31;
            goto LABEL_67;
          }
          v24 = v3;
          v25 = v30;
        }
        else
        {
          v28 = *(_DWORD **)(v27 + 16);
          v29 = *v28;
          v25 = (const char *)(v28 + 4);
          v23 = v29;
          result = (_WORD *)*((_QWORD *)v3 + 4);
          if ((unint64_t)v29 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
          {
            if (!v23)
              goto LABEL_58;
LABEL_66:
            result = memcpy(result, v25, v23);
            v26 = *((_QWORD *)v3 + 4) + v23;
LABEL_67:
            *((_QWORD *)v3 + 4) = v26;
            goto LABEL_58;
          }
LABEL_64:
          v24 = v3;
        }
LABEL_57:
        result = (_WORD *)llvm::raw_ostream::write(v24, v25);
        goto LABEL_58;
      }
      v25 = (const char *)*((_QWORD *)v17 - 1);
      if (!v25)
        goto LABEL_73;
      v23 = *((unsigned int *)v17 - 3);
      result = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)result < v23)
        goto LABEL_64;
      if ((_DWORD)v23)
        goto LABEL_66;
LABEL_58:
      v18 = 0;
      v17 += 12;
      v16 -= 24;
      if (!v16)
        return result;
    }
    v22 = v21;
    v23 = strlen(v21);
    result = (_WORD *)*((_QWORD *)v3 + 4);
    if (v23 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
    {
      if (!v23)
        goto LABEL_58;
      v25 = v22;
      goto LABEL_66;
    }
    v24 = v3;
    v25 = v22;
    goto LABEL_57;
  }
  return result;
}

uint64_t *sub_22F14FEA4(uint64_t *result)
{
  if (!result)
    return 0;
  while ((*((_BYTE *)result + 12) & 3) == 1 || (*((_BYTE *)result + 12) & 3) != 0)
  {
    result = (uint64_t *)*result;
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_22F14FF24(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = v2;
  v4 = *(_BYTE *)(a1 + 12) & 3;
  if (v4 == 2)
  {
    v7 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v7 <= 0x17uLL)
    {
      v6 = "VisibilityMacroDirective";
      goto LABEL_10;
    }
    qmemcpy(v7, "VisibilityMacroDirective", 24);
    v19 = *((_QWORD *)v2 + 4) + 24;
  }
  else if (v4 == 1)
  {
    v8 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v8) <= 0x12)
    {
      v6 = "UndefMacroDirective";
      goto LABEL_10;
    }
    *(_DWORD *)(v8 + 15) = 1702259060;
    *(_OWORD *)v8 = *(_OWORD *)"UndefMacroDirective";
    v19 = *((_QWORD *)v2 + 4) + 19;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 12) & 3) != 0)
      goto LABEL_11;
    v5 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v5) <= 0x10)
    {
      v6 = "DefMacroDirective";
LABEL_10:
      llvm::raw_ostream::write(v2, v6);
      goto LABEL_11;
    }
    *(_BYTE *)(v5 + 16) = 101;
    *(_OWORD *)v5 = *(_OWORD *)"DefMacroDirective";
    v19 = *((_QWORD *)v2 + 4) + 17;
  }
  *((_QWORD *)v2 + 4) = v19;
LABEL_11:
  v9 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v9)
  {
    llvm::raw_ostream::write(v3, " ");
  }
  else
  {
    *v9 = 32;
    ++*((_QWORD *)v3 + 4);
  }
  result = llvm::raw_ostream::operator<<();
  if (*(_QWORD *)a1)
  {
    v11 = *((_QWORD *)v3 + 4);
    if ((unint64_t)(*((_QWORD *)v3 + 3) - v11) > 5)
    {
      *(_WORD *)(v11 + 4) = 8310;
      *(_DWORD *)v11 = 1701998624;
      *((_QWORD *)v3 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v3, " prev ");
    }
    result = llvm::raw_ostream::operator<<();
  }
  if ((*(_BYTE *)(a1 + 12) & 4) != 0)
  {
    v12 = *((_QWORD *)v3 + 4);
    if ((unint64_t)(*((_QWORD *)v3 + 3) - v12) > 8)
    {
      *(_BYTE *)(v12 + 8) = 104;
      *(_QWORD *)v12 = *(_QWORD *)" from_pch";
      *((_QWORD *)v3 + 4) += 9;
    }
    else
    {
      result = llvm::raw_ostream::write(v3, " from_pch");
    }
  }
  if ((*(_BYTE *)(a1 + 12) & 3) == 2)
  {
    if ((*(_BYTE *)(a1 + 12) & 8) != 0)
      v13 = " public";
    else
      v13 = " private";
    if ((*(_BYTE *)(a1 + 12) & 8) != 0)
      v14 = 7;
    else
      v14 = 8;
    v15 = (void *)*((_QWORD *)v3 + 4);
    if (v14 <= *((_QWORD *)v3 + 3) - (_QWORD)v15)
    {
      result = (uint64_t)memcpy(v15, v13, v14);
      *((_QWORD *)v3 + 4) += v14;
    }
    else
    {
      result = llvm::raw_ostream::write(v3, v13);
    }
  }
  if ((*(_BYTE *)(a1 + 12) & 3) == 0)
  {
    v16 = *(_QWORD *)(a1 + 16);
    if (v16)
    {
      v17 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v17) > 2)
      {
        *(_BYTE *)(v17 + 2) = 32;
        *(_WORD *)v17 = 8202;
        *((_QWORD *)v3 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v3, "\n  ");
      }
      result = (uint64_t)sub_22F14F840(v16);
    }
  }
  v18 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v18)
    return llvm::raw_ostream::write(v3, "\n");
  *v18 = 10;
  ++*((_QWORD *)v3 + 4);
  return result;
}

uint64_t sub_22F150244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 8 * a6;
  v12 = sub_22E3CD3D4(a1 + 128, 8 * a6 + 40, 3);
  v13 = v12;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = a3;
  *(_QWORD *)(v12 + 16) = a4;
  *(_QWORD *)(v12 + 24) = a2;
  *(_DWORD *)(v12 + 32) = 0;
  *(_DWORD *)(v12 + 36) = a6;
  if (a6)
    memmove((void *)(v12 + 40), a5, v11);
  return v13;
}

uint64_t sub_22F1502C8(uint64_t *a1)
{
  int Key;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)a1 + 258))
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(a1[128] + 8 * Key) + 8);
  if (*(_DWORD *)(result + 24))
  {
    v4 = *((unsigned int *)a1 + 12);
    if ((_DWORD)v4)
    {
      v12 = result;
      v5 = (uint64_t *)a1[5];
      v6 = &v5[v4];
      v7 = result;
      do
      {
        v8 = *v5;
        v9 = (unint64_t)sub_22F158DEC(a1, v12);
        do
        {
          v10 = *(_QWORD *)(v9 + 8);
          v9 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v10 & 2) != 0 && v9);
        v11 = sub_22F1E361C((_QWORD *)*a1, *(_DWORD *)(v7 + 24)) == 4;
        (*(void (**)(uint64_t, unint64_t, uint64_t, _BOOL8))(*(_QWORD *)v8 + 32))(v8, v9, v7, v11);
        ++v5;
      }
      while (v5 != v6);
      return v12;
    }
  }
  return result;
}

uint64_t *sub_22F1503B4(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  size_t v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  size_t v36;
  void *p_p;
  size_t v38;
  void *__p;
  size_t v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;

  if (a3)
  {
    v8 = (uint64_t)a3;
    while (1)
    {
      v9 = sub_22F41FEF0(v8);
      if (v9)
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        goto LABEL_5;
    }
    v10 = (uint64_t *)v9;
  }
  else
  {
LABEL_5:
    v10 = (uint64_t *)sub_22F1502C8(a1);
    if (!v10)
    {
      if (a4)
      {
        v30 = a1[1];
        *(_DWORD *)(v30 + 312) = *(_DWORD *)(*(_QWORD *)a2 + 24);
        *(_DWORD *)(v30 + 316) = 1086;
        if (*(char *)(v30 + 311) < 0)
        {
          **(_BYTE **)(v30 + 288) = 0;
          *(_QWORD *)(v30 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v30 + 288) = 0;
          *(_BYTE *)(v30 + 311) = 0;
        }
        v43 = (unsigned __int8 *)(v30 + 320);
        v44 = 0;
        v45 = v30;
        v46 = 1;
        *(_BYTE *)(v30 + 320) = 0;
        *(_DWORD *)(v30 + 664) = 0;
        v31 = *(unsigned int *)(v30 + 776);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(v30 + 768);
          v33 = 56 * v31;
          do
          {
            if (*(char *)(v32 + v33 - 9) < 0)
              operator delete(*(void **)(v32 + v33 - 32));
            v33 -= 56;
          }
          while (v33);
        }
        *(_DWORD *)(v30 + 776) = 0;
        v34 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v34 >= 0)
          v35 = *(void **)a2;
        else
          v35 = **(void ***)a2;
        if (v34 >= 0)
          v36 = v34 & 0x7F;
        else
          v36 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        sub_22E3B89A8(&v43, v35, v36);
        sub_22F1D8A24(a3, 0, &__p);
        if (v42 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v42 >= 0)
          v38 = v42 & 0x7F;
        else
          v38 = v41;
        sub_22E3B89A8(&v43, p_p, v38);
        if (v42 < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v43);
      }
      return 0;
    }
  }
  v11 = *(_DWORD *)(a2 + 8);
  if (v11 != 1)
  {
    for (i = 1; v11 != (_DWORD)i; ++i)
    {
      v29 = sub_22F41FEF0((uint64_t)v10);
      v13 = v29;
      if (v29)
        v14 = (uint64_t *)v29;
      else
        v14 = v10;
      if (v29)
        v15 = 1;
      else
        v15 = a4 == 0;
      if (v15)
      {
        v10 = v14;
        if (!v29)
          return 0;
      }
      else
      {
        v16 = a1[1];
        *(_DWORD *)(v16 + 312) = *(_DWORD *)(*(_QWORD *)a2 + 32 * i + 24);
        *(_DWORD *)(v16 + 316) = 1085;
        if (*(char *)(v16 + 311) < 0)
        {
          **(_BYTE **)(v16 + 288) = 0;
          *(_QWORD *)(v16 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v16 + 288) = 0;
          *(_BYTE *)(v16 + 311) = 0;
        }
        v43 = (unsigned __int8 *)(v16 + 320);
        v44 = 0;
        v45 = v16;
        v46 = 1;
        *(_BYTE *)(v16 + 320) = 0;
        *(_DWORD *)(v16 + 664) = 0;
        v17 = *(unsigned int *)(v16 + 776);
        if ((_DWORD)v17)
        {
          v18 = *(_QWORD *)(v16 + 768);
          v19 = 56 * v17;
          do
          {
            if (*(char *)(v18 + v19 - 9) < 0)
              operator delete(*(void **)(v18 + v19 - 32));
            v19 -= 56;
          }
          while (v19);
        }
        *(_DWORD *)(v16 + 776) = 0;
        v20 = *(_QWORD *)a2 + 32 * i;
        v21 = *(_BYTE *)(v20 + 23);
        if (v21 >= 0)
          v22 = (void *)(*(_QWORD *)a2 + 32 * i);
        else
          v22 = *(void **)v20;
        if (v21 >= 0)
          v23 = v21 & 0x7F;
        else
          v23 = *(_QWORD *)(v20 + 8);
        sub_22E3B89A8(&v43, v22, v23);
        sub_22F1D8A24(v10, 0, &__p);
        if (v42 >= 0)
          v24 = &__p;
        else
          v24 = __p;
        if (v42 >= 0)
          v25 = v42 & 0x7F;
        else
          v25 = v41;
        sub_22E3B89A8(&v43, v24, v25);
        v26 = *(unsigned int *)(*(_QWORD *)a2 + 24);
        v27 = *(unsigned int *)(*(_QWORD *)a2 + 32 * i - 8);
        v28 = v43;
        if (!v43)
        {
          v28 = (unsigned __int8 *)sub_22E3B8AAC(v44);
          v43 = v28;
        }
        sub_22E4D6448((uint64_t)(v28 + 336), v26 | (v27 << 32), 1);
        if (v42 < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v43);
        if (!v13)
          return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_22F150730(uint64_t a1)
{
  unint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  char v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  const char **v14;
  uint64_t v15;
  const char *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  _QWORD *v31;
  unint64_t v32;
  const void **v33;
  char *v34;
  const char **v35;
  uint64_t v36;
  const char *v37;
  _QWORD *v38;
  const char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  _BYTE v49[16];
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  v3 = **(uint64_t ***)(a1 + 8);
  v47 = v49;
  v48 = 0x200000000;
  if (v3)
  {
    v4 = 0;
    do
    {
      if ((v3[168] & 0x10) != 0)
      {
        v5 = *((_BYTE *)v3 + 23);
        v6 = v5 < 0;
        if (v5 >= 0)
          v7 = v3;
        else
          v7 = (uint64_t *)*v3;
        v8 = v5 & 0x7F;
        if (v6)
          v9 = v3[1];
        else
          v9 = v8;
        if (v4 >= HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v4 = v48;
        }
        v10 = (char *)&v47[16 * v4];
        *(_QWORD *)v10 = v7;
        *((_QWORD *)v10 + 1) = v9;
        v4 = v48 + 1;
        LODWORD(v48) = v48 + 1;
      }
      v3 = (uint64_t *)v3[4];
    }
    while (v3);
    v11 = (char *)v47;
    if (v4 && &v47[16 * v4 - 16] != v47)
    {
      v46 = v2;
      v12 = 16 * v4;
      do
      {
        llvm::sys::path::append();
        v12 -= 16;
      }
      while (v12 != 16);
      v11 = (char *)v47;
      v2 = v46;
    }
    if (v11 != v49)
      free(v11);
  }
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8);
  v47 = "Headers";
  v50 = 259;
  llvm::sys::path::append();
  v14 = *(const char ***)(a1 + 16);
  v50 = 261;
  v16 = *v14;
  v15 = (uint64_t)v14[1];
  v47 = v16;
  v48 = v15;
  llvm::sys::path::append();
  v17 = *(_QWORD **)(a1 + 32);
  sub_22F1D0894(*(_QWORD *)(*(_QWORD *)*v17 + 16), **(const void ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), 0, 1, (uint64_t)&v47);
  v18 = sub_22E6D5834(&v47);
  if ((v48 & 1) != 0)
  {
    v19 = v47;
    v47 = 0;
    if (v19)
      (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
  }
  if (!v18)
    goto LABEL_35;
  v20 = v17[1];
  if (*(_BYTE *)(v20 + 48))
  {
    v21 = v18;
    do
    {
      v22 = *(_QWORD *)(v21 + 8);
      v21 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v22 & 2) != 0 && v21);
    if (*(_QWORD *)(v21 + 24) != *(_QWORD *)(v20 + 40))
      goto LABEL_35;
  }
  if (*(_BYTE *)(v20 + 64))
  {
    v23 = v18;
    do
    {
      v24 = *(_QWORD *)(v23 + 8);
      v23 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v24 & 2) != 0 && v23);
    if (*(_QWORD *)(v23 + 32) != *(_QWORD *)(v20 + 56))
    {
LABEL_35:
      v25 = **(_WORD ***)(a1 + 8);
      if ((v25[672] & 0x10) == 0)
        goto LABEL_49;
      v26 = *((unsigned __int8 *)v25 + 23);
      v27 = *((_QWORD *)v25 + 1);
      v28 = (v26 & 0x80u) == 0 ? v26 & 0x7F : *((_QWORD *)v25 + 1);
      if (v28 != 7)
        goto LABEL_49;
      if ((v26 & 0x80) != 0)
      {
        v25 = *(_WORD **)v25;
        v26 = v27;
      }
      v29 = v26 >= 7 ? 7 : v26;
      if (!memcmp(v25, "Private", v29) && v26 == 7)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = 0;
      }
      else
      {
LABEL_49:
        v31 = *(_QWORD **)(a1 + 16);
        v32 = v31[1];
        if (v32 != v13)
        {
          if (v32 <= v13)
          {
            if (v31[2] < v13)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v32 = v31[1];
            }
            if (v13 != v32)
              bzero((void *)(*v31 + v32), v13 - v32);
          }
          v31[1] = v13;
        }
      }
      v33 = *(const void ***)a1;
      v34 = *(char **)(*(_QWORD *)a1 + 8);
      if (v34 != (char *)v2)
      {
        if ((unint64_t)v34 <= v2)
        {
          if ((unint64_t)v33[2] < v2)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v34 = (char *)v33[1];
          }
          if ((char *)v2 != v34)
            bzero(&v34[(_QWORD)*v33], v2 - (_QWORD)v34);
        }
        v33[1] = (const void *)v2;
      }
      v47 = "PrivateHeaders";
      v50 = 259;
      llvm::sys::path::append();
      v35 = *(const char ***)(a1 + 16);
      v50 = 261;
      v37 = *v35;
      v36 = (uint64_t)v35[1];
      v47 = v37;
      v48 = v36;
      llvm::sys::path::append();
      v38 = *(_QWORD **)(a1 + 32);
      sub_22F1D0894(*(_QWORD *)(*(_QWORD *)*v38 + 16), **(const void ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), 0, 1, (uint64_t)&v47);
      v18 = sub_22E6D5834(&v47);
      if ((v48 & 1) != 0)
      {
        v39 = v47;
        v47 = 0;
        if (v39)
          (*(void (**)(const char *))(*(_QWORD *)v39 + 8))(v39);
      }
      if (v18)
      {
        v40 = v38[1];
        if (*(_BYTE *)(v40 + 48))
        {
          v41 = v18;
          do
          {
            v42 = *(_QWORD *)(v41 + 8);
            v41 = v42 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v42 & 2) != 0 && v41);
          if (*(_QWORD *)(v41 + 24) != *(_QWORD *)(v40 + 40))
            return 0;
        }
        if (*(_BYTE *)(v40 + 64))
        {
          v43 = v18;
          do
          {
            v44 = *(_QWORD *)(v43 + 8);
            v43 = v44 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v44 & 2) != 0 && v43);
          if (*(_QWORD *)(v43 + 32) != *(_QWORD *)(v40 + 56))
            return 0;
        }
      }
    }
  }
  return v18;
}

void sub_22F150C6C(uint64_t a1, uint64_t *a2, int *a3, _BYTE *a4)
{
  uint64_t v8;
  size_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const void *v20;
  unint64_t v21;
  size_t v23;
  void *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  char *v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  const void *v38;
  size_t v39;
  size_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  BOOL v56;
  void *v57;
  size_t v58;
  size_t v59;
  void **v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  size_t v66;
  void *v67[2];
  uint64_t v68;
  __int128 __p;
  unint64_t v70;
  unint64_t v71;
  __int16 v72;
  __int16 v73;
  void *v74[2];
  char v75;
  __int16 v76;
  void *v77;
  uint64_t **v78;
  void **p_src;
  int *v80;
  uint64_t *v81;
  uint64_t v82;
  int *v83;
  uint64_t *v84;
  void *__src;
  __int128 __len;
  _BYTE v87[128];
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  __int16 v92;
  _BYTE __dst[24];
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v84 = a2;
  __src = v87;
  __len = xmmword_22F44E310;
  v8 = a2[5];
  v10 = *(const void **)v8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)__dst = &v94;
  *(_OWORD *)&__dst[8] = xmmword_22F44E310;
  if (v9 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v11 = *(_QWORD *)&__dst[8];
  }
  else
  {
    v11 = 0;
    if (!v9)
      goto LABEL_4;
  }
  memcpy((void *)(*(_QWORD *)__dst + v11), v10, v9);
  v11 = *(_QWORD *)&__dst[8];
LABEL_4:
  *(_QWORD *)&__dst[8] = v11 + v9;
  v82 = a1;
  v83 = a3;
  v77 = __dst;
  v78 = &v84;
  p_src = &__src;
  v80 = a3;
  v81 = &v82;
  v92 = 260;
  v88 = (unsigned __int8 *)(a3 + 2);
  if ((llvm::sys::path::is_absolute() & 1) != 0)
  {
    *(_QWORD *)&__len = 0;
    v32 = *((_BYTE *)a3 + 31);
    v33 = v32 < 0;
    if (v32 >= 0)
      v34 = (char *)(a3 + 2);
    else
      v34 = (char *)*((_QWORD *)a3 + 1);
    v35 = v32 & 0x7F;
    if (v33)
      v35 = *((_QWORD *)a3 + 2);
    sub_22F24FBF8((uint64_t)&__src, v34, &v34[v35]);
    v36 = *((_BYTE *)a3 + 31);
    v37 = v36 < 0;
    if (v36 >= 0)
      v38 = a3 + 2;
    else
      v38 = (const void *)*((_QWORD *)a3 + 1);
    v39 = v36 & 0x7F;
    if (v37)
      v40 = *((_QWORD *)a3 + 2);
    else
      v40 = v39;
    sub_22F1D0894(*(_QWORD *)(*(_QWORD *)v82 + 16), v38, v40, 0, 1, (uint64_t)&v88);
    v13 = sub_22E6D5834(&v88);
    if ((v89 & 1) != 0)
    {
      v41 = v88;
      v88 = 0;
      if (v41)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v41 + 8))(v41);
    }
    if (!v13)
      goto LABEL_29;
    if (!*((_BYTE *)v83 + 48))
      goto LABEL_99;
    v42 = v13;
    do
    {
      v43 = *(_QWORD *)(v42 + 8);
      v42 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v43 & 2) != 0 && v42);
    if (*(_QWORD *)(v42 + 24) == *((_QWORD *)v83 + 5))
    {
LABEL_99:
      if (!*((_BYTE *)v83 + 64))
        goto LABEL_29;
      v44 = v13;
      do
      {
        v45 = *(_QWORD *)(v44 + 8);
        v44 = v45 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v45 & 2) != 0 && v44);
      if (*(_QWORD *)(v44 + 32) == *((_QWORD *)v83 + 7))
        goto LABEL_29;
    }
LABEL_27:
    v13 = 0;
    goto LABEL_29;
  }
  v12 = v84;
  if (!v84)
  {
LABEL_8:
    v92 = 260;
    v88 = (unsigned __int8 *)(a3 + 2);
    llvm::sys::path::append();
    v92 = 261;
    v88 = (unsigned __int8 *)__src;
    v89 = __len;
    v76 = 257;
    v73 = 257;
    v72 = 257;
    llvm::sys::path::append();
    sub_22F1D0894(*(_QWORD *)(*(_QWORD *)v82 + 16), *(const void **)__dst, *(size_t *)&__dst[8], 0, 1, (uint64_t)&v88);
    v13 = sub_22E6D5834(&v88);
    if ((v89 & 1) != 0)
    {
      v14 = v88;
      v88 = 0;
      if (v14)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v14 + 8))(v14);
    }
    if (v13)
    {
      if (!*((_BYTE *)v83 + 48))
        goto LABEL_150;
      v15 = v13;
      do
      {
        v16 = *(_QWORD *)(v15 + 8);
        v15 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v16 & 2) != 0 && v15);
      if (*(_QWORD *)(v15 + 24) == *((_QWORD *)v83 + 5))
      {
LABEL_150:
        if (!*((_BYTE *)v83 + 64))
          goto LABEL_29;
        v17 = v13;
        do
        {
          v18 = *(_QWORD *)(v17 + 8);
          v17 = v18 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v18 & 2) != 0 && v17);
        if (*(_QWORD *)(v17 + 32) == *((_QWORD *)v83 + 7))
          goto LABEL_29;
      }
    }
    v19 = *(_QWORD *)(v8 + 8);
    if (v19 >= 0xA)
    {
      v20 = *(const void **)v8;
      v21 = *(_QWORD *)v8 + v19;
      if (*(_QWORD *)(v21 - 10) == 0x6F77656D6172662ELL && *(_WORD *)(v21 - 2) == 27506)
      {
        v29 = 0;
        *(_QWORD *)&__dst[8] = 0;
        v30 = v21 - (_QWORD)v20;
        if (*(_QWORD *)&__dst[16] < v21 - (unint64_t)v20)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v29 = *(_QWORD *)&__dst[8];
        }
        memcpy((void *)(*(_QWORD *)__dst + v29), v20, v30);
        *(_QWORD *)&__dst[8] += v30;
        *(_QWORD *)&__len = 0;
        if (sub_22F150730((uint64_t)&v77))
        {
          v31 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(v31 + 312) = a3[1];
          *(_DWORD *)(v31 + 316) = 1321;
          if (*(char *)(v31 + 311) < 0)
          {
            **(_BYTE **)(v31 + 288) = 0;
            *(_QWORD *)(v31 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v31 + 288) = 0;
            *(_BYTE *)(v31 + 311) = 0;
          }
          v88 = (unsigned __int8 *)(v31 + 320);
          v89 = 0;
          v90 = v31;
          v91 = 1;
          *(_BYTE *)(v31 + 320) = 0;
          *(_DWORD *)(v31 + 664) = 0;
          v52 = *(unsigned int *)(v31 + 776);
          if ((_DWORD)v52)
          {
            v53 = *(_QWORD *)(v31 + 768);
            v54 = 56 * v52;
            do
            {
              if (*(char *)(v53 + v54 - 9) < 0)
                operator delete(*(void **)(v53 + v54 - 32));
              v54 -= 56;
            }
            while (v54);
          }
          *(_DWORD *)(v31 + 776) = 0;
          v55 = *((_BYTE *)a3 + 31);
          v56 = v55 < 0;
          if (v55 >= 0)
            v57 = a3 + 2;
          else
            v57 = (void *)*((_QWORD *)a3 + 1);
          v58 = v55 & 0x7F;
          if (v56)
            v59 = *((_QWORD *)a3 + 2);
          else
            v59 = v58;
          sub_22E3B89A8(&v88, v57, v59);
          sub_22F1D8A24(v84, 0, v74);
          if (v75 >= 0)
            v60 = v74;
          else
            v60 = (void **)v74[0];
          if (v75 >= 0)
            v61 = v75 & 0x7F;
          else
            v61 = (size_t)v74[1];
          sub_22E3B89A8(&v88, v60, v61);
          if (v75 < 0)
            operator delete(v74[0]);
          sub_22E3BB0B8((uint64_t)&v88);
          v13 = 0;
          *a4 = 1;
          goto LABEL_29;
        }
      }
    }
    goto LABEL_27;
  }
  while ((v12[168] & 0x10) == 0)
  {
    v12 = (uint64_t *)v12[4];
    if (!v12)
      goto LABEL_8;
  }
  v13 = sub_22F150730((uint64_t)&v77);
LABEL_29:
  if (*(__int128 **)__dst != &v94)
    free(*(void **)__dst);
  if (v13)
  {
    if (!*((_BYTE *)a3 + 32))
    {
      if (*((char *)a3 + 31) < 0)
      {
        sub_22E3BB2B4(__dst, *((void **)a3 + 1), *((_QWORD *)a3 + 2));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a3 + 2);
        *(_QWORD *)&__dst[16] = *((_QWORD *)a3 + 3);
      }
      v23 = __len;
      if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v24 = __src;
      if ((unint64_t)__len >= 0x17)
      {
        v26 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)__len | 7) != 0x17)
          v26 = __len | 7;
        v27 = v26 + 1;
        v25 = (__int128 *)operator new(v26 + 1);
        *((_QWORD *)&v94 + 1) = v23;
        v95 = v27 | 0x8000000000000000;
        *(_QWORD *)&v94 = v25;
      }
      else
      {
        HIBYTE(v95) = __len;
        v25 = &v94;
        if (!(_QWORD)__len)
        {
LABEL_50:
          *((_BYTE *)v25 + v23) = 0;
          do
          {
            v28 = *(_QWORD *)(v13 + 8);
            v13 = v28 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v28 & 2) != 0 && v13);
          v96 = v28 & 0xFFFFFFFFFFFFFFFCLL;
          if ((__dst[23] & 0x80000000) != 0)
          {
            sub_22E3BB2B4(v67, *(void **)__dst, *(unint64_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)v67 = *(_OWORD *)__dst;
            v68 = *(_QWORD *)&__dst[16];
          }
          if (SHIBYTE(v95) < 0)
          {
            sub_22E3BB2B4(&__p, (void *)v94, *((unint64_t *)&v94 + 1));
          }
          else
          {
            __p = v94;
            v70 = v95;
          }
          v71 = v96;
          sub_22F151620(a1, (uint64_t)a2, (unint64_t)v67, dword_22F4ACC38[*a3], 0);
          if (SHIBYTE(v70) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v68) < 0)
            operator delete(v67[0]);
          if (SHIBYTE(v95) < 0)
            operator delete((void *)v94);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          goto LABEL_67;
        }
      }
      memmove(v25, v24, v23);
      goto LABEL_50;
    }
    v46 = v13;
    do
    {
      v47 = v46;
      v48 = *(_QWORD *)(v46 + 8);
      if ((v48 & 2) == 0)
        break;
      v46 = v48 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v46);
    v88 = *(unsigned __int8 **)(*(_QWORD *)(v47 + 16) + 8);
    v49 = (uint64_t *)sub_22F25E108((uint64_t *)(a1 + 1224), &v88)[1];
    if (v49)
    {
      v50 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v50 + 312) = a3[1];
      *(_DWORD *)(v50 + 316) = 1093;
      if (*(char *)(v50 + 311) < 0)
      {
        **(_BYTE **)(v50 + 288) = 0;
        *(_QWORD *)(v50 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v50 + 288) = 0;
        *(_BYTE *)(v50 + 311) = 0;
      }
      *(_OWORD *)__dst = (unint64_t)(v50 + 320);
      *(_QWORD *)&__dst[16] = v50;
      LOWORD(v94) = 1;
      *(_BYTE *)(v50 + 320) = 0;
      *(_DWORD *)(v50 + 664) = 0;
      v62 = *(unsigned int *)(v50 + 776);
      if ((_DWORD)v62)
      {
        v63 = *(_QWORD *)(v50 + 768);
        v64 = 56 * v62;
        do
        {
          if (*(char *)(v63 + v64 - 9) < 0)
            operator delete(*(void **)(v63 + v64 - 32));
          v64 -= 56;
        }
        while (v64);
      }
      *(_DWORD *)(v50 + 776) = 0;
      sub_22F1D8A24(v49, 0, &v77);
      if (SHIBYTE(p_src) >= 0)
        v65 = &v77;
      else
        v65 = v77;
      if (SHIBYTE(p_src) >= 0)
        v66 = HIBYTE(p_src) & 0x7F;
      else
        v66 = (size_t)v78;
      sub_22E3B89A8((unsigned __int8 **)__dst, v65, v66);
      if (SHIBYTE(p_src) < 0)
        operator delete(v77);
      sub_22E3BB0B8((uint64_t)__dst);
    }
    else
    {
      do
      {
        v51 = *(_QWORD *)(v13 + 8);
        v13 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v51 & 2) != 0 && v13);
      WORD4(v94) = 260;
      *(_QWORD *)__dst = a3 + 2;
      LOWORD(v81) = 261;
      v77 = __src;
      v78 = (uint64_t **)__len;
      sub_22F1514D0(a1, (uint64_t)a2, v13, (llvm::Twine *)__dst, (llvm::Twine *)&v77);
    }
  }
  else if ((!*((_BYTE *)a3 + 33) || *((_BYTE *)a3 + 48) || *((_BYTE *)a3 + 64)) && *a3 != 4)
  {
    sub_22F15185C((uint64_t)(a2 + 146), (unint64_t)a3);
    if (!(*((unsigned __int8 *)a3 + 48) | *((unsigned __int8 *)a3 + 64)))
      sub_22F1D9260((uint64_t)a2, 0);
  }
LABEL_67:
  if (__src != v87)
    free(__src);
}

_QWORD *sub_22F1514D0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Twine *a4, llvm::Twine *a5)
{
  _QWORD *v9;
  unsigned int v10;
  void **v11;
  void **v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a3;
  v9 = sub_22F16164C((_DWORD *)(a1 + 1152), &v20);
  v10 = *((_DWORD *)v9 + 4);
  if (v10 >= *((_DWORD *)v9 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *((_DWORD *)v9 + 4);
  }
  *(_QWORD *)(v9[1] + 8 * v10) = a2 & 0xFFFFFFFFFFFFFFF8;
  ++*((_DWORD *)v9 + 4);
  *(_QWORD *)(a2 + 72) = v20 & 0xFFFFFFFFFFFFFFFBLL;
  llvm::Twine::str(a4);
  v11 = (void **)(a2 + 104);
  if (*(char *)(a2 + 127) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v18;
  *(_QWORD *)(a2 + 120) = v19;
  llvm::Twine::str(a5);
  v12 = (void **)(a2 + 128);
  if (*(char *)(a2 + 151) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = v18;
  *(_QWORD *)(a2 + 144) = v19;
  *(_QWORD *)&v18 = *(_QWORD *)(v20 + 40);
  result = sub_22F25E108((uint64_t *)(a1 + 1224), &v18);
  result[1] = a2;
  v14 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(a1 + 40);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 48))(v17, *(_QWORD *)(*(_QWORD *)a1 + 16), v20);
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

_QWORD *sub_22F151620(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v8 = a2;
  v10 = a2 & 0xFFFFFFFFFFFFFFF8 | a4;
  v11 = (uint64_t *)(a3 + 48);
  result = sub_22F16164C((_DWORD *)(a1 + 1152), (_QWORD *)(a3 + 48));
  v13 = (_QWORD *)result[1];
  v14 = *((unsigned int *)result + 4);
  v15 = v13;
  if ((_DWORD)v14)
  {
    v27 = 8 * v14;
    v15 = (_QWORD *)result[1];
    while (*v15 != v10)
    {
      ++v15;
      v27 -= 8;
      if (!v27)
      {
        v15 = &v13[v14];
        break;
      }
    }
  }
  if (v14 == v15 - v13)
  {
    if (v14 >= *((_DWORD *)result + 5))
    {
      v28 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v28;
      v13 = (_QWORD *)v28[1];
      v14 = *((unsigned int *)v28 + 4);
    }
    v13[v14] = v10;
    ++*((_DWORD *)result + 4);
    v16 = v8 + (qword_22F4ACC10[a4] << 7);
    v17 = v16 + 440;
    v18 = sub_22E730DA4(v16 + 440, a3, 1);
    v19 = *(_QWORD *)(v16 + 440);
    v20 = *(_DWORD *)(v16 + 448);
    v21 = v19 + 56 * v20;
    if (*(char *)(v18 + 23) < 0)
    {
      sub_22E3BB2B4((_BYTE *)v21, *(void **)v18, *(_QWORD *)(v18 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v18;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v21 = v22;
    }
    result = (_QWORD *)(v19 + 56 * v20 + 24);
    if (*(char *)(v18 + 47) < 0)
    {
      result = sub_22E3BB2B4(result, *(void **)(v18 + 24), *(_QWORD *)(v18 + 32));
    }
    else
    {
      v23 = *(_OWORD *)(v18 + 24);
      *(_QWORD *)(v19 + 56 * v20 + 40) = *(_QWORD *)(v18 + 40);
      *(_OWORD *)result = v23;
    }
    *(_QWORD *)(v19 + 56 * v20 + 48) = *(_QWORD *)(v18 + 48);
    ++*(_DWORD *)(v17 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 240) & 0xE0) != 0)
    {
      do
      {
        v24 = v8;
        v8 = *(_QWORD *)(v8 + 32);
      }
      while (v8);
      v25 = v24 == *(_QWORD *)(a1 + 936);
    }
    else
    {
      v25 = 0;
    }
    if (!a5 || v25)
      result = sub_22F13C1E0(*(__n128 **)(a1 + 32), *v11, a4, v25);
    v26 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v26)
    {
      v29 = *(_QWORD **)(a1 + 40);
      v30 = &v29[v26];
      do
      {
        v31 = *(_QWORD *)(*v11 + 88);
        do
        {
          v32 = (_QWORD *)v31;
          v33 = *(_QWORD *)(v31 + 8);
          if ((v33 & 2) == 0)
            break;
          v31 = v33 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v31);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)*v29 + 40))(*v29, v32 + 4, *v32);
        ++v29;
      }
      while (v29 != v30);
    }
  }
  return result;
}

__n128 sub_22F15185C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  __n128 result;
  __int128 v12;
  unint64_t v13;
  unint64_t v15;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v5 + 72 * v4;
    if (v5 <= a2 && v13 > a2)
    {
      v15 = a2 - v5;
      sub_22F413854(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v15;
    }
    else
    {
      sub_22F413854(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 72 * v6);
  *v7 = *(_QWORD *)v2;
  v8 = v7 + 1;
  if (*(char *)(v2 + 31) < 0)
  {
    sub_22E3BB2B4(v8, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(v2 + 8);
    v8[2] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)v8 = v9;
  }
  v10 = v5 + 72 * v6;
  result = *(__n128 *)(v2 + 32);
  v12 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(v10 + 64) = *(_QWORD *)(v2 + 64);
  *(__n128 *)(v10 + 32) = result;
  *(_OWORD *)(v10 + 48) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_22F151934(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  _BOOL8 result;

  switch(a2)
  {
    case 7:
      v2 = *(_DWORD *)(a1 + 3);
      v3 = *(_DWORD *)a1 == 1634692198;
      v4 = 1747874913;
      goto LABEL_12;
    case 8:
      if (*(_QWORD *)a1 == 0x682E3634366F7369
        || *(_QWORD *)a1 == 0x682E7374696D696CLL
        || *(_QWORD *)a1 == 0x682E677261647473
        || *(_QWORD *)a1 == 0x682E666564647473
        || *(_QWORD *)a1 == 0x682E746E69647473
        || *(_QWORD *)a1 == 0x682E6874616D6774)
      {
        goto LABEL_22;
      }
      return *(_QWORD *)a1 == 0x682E646E69776E75;
    case 9:
      v2 = *(unsigned __int8 *)(a1 + 8);
      v3 = *(_QWORD *)a1 == 0x2E6C6F6F62647473;
      v4 = 104;
      goto LABEL_12;
    case 10:
      v2 = *(unsigned __int16 *)(a1 + 8);
      v3 = *(_QWORD *)a1 == 0x6E67696C61647473;
      v4 = 26670;
LABEL_12:
      if (!v3 || v2 != v4)
        goto LABEL_16;
      goto LABEL_22;
    case 11:
      if (*(_QWORD *)a1 != 0x696D6F7461647473 || *(_QWORD *)(a1 + 3) != 0x682E63696D6F7461)
        goto LABEL_16;
LABEL_22:
      result = 1;
      break;
    default:
LABEL_16:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22F151AD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  llvm *v15;
  uint64_t v16;
  char **v18;
  uint64_t v19;
  void *v20;

  v2 = *(unsigned int *)(a1 + 1032);
  if ((_DWORD)v2)
  {
    for (i = *(uint64_t **)(a1 + 1024); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 1024);
  }
  v4 = *(_QWORD *)(a1 + 1024) + 8 * v2;
  if (i != (uint64_t *)v4)
  {
    v5 = *i;
    do
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = sub_22F1D7BC4(v6);
        MEMORY[0x2348A0E9C](v7, 0x10F2C40A72A4818);
      }
      do
      {
        v8 = i[1];
        ++i;
        v5 = v8;
        if (v8)
          v9 = v5 == -8;
        else
          v9 = 1;
      }
      while (v9);
    }
    while (i != (uint64_t *)v4);
  }
  v10 = *(unsigned int *)(a1 + 1088);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a1 + 1080);
    v12 = 8 * v10;
    do
    {
      if (*v11)
      {
        v13 = sub_22F1D7BC4(*v11);
        MEMORY[0x2348A0E9C](v13, 0x10F2C40A72A4818);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 1352), (void *)(16 * *(unsigned int *)(a1 + 1368)));
  sub_22F413B70((unsigned int *)(a1 + 1328));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1328), (void *)(48 * *(unsigned int *)(a1 + 1344)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1304), (void *)(16 * *(unsigned int *)(a1 + 1320)));
  v14 = *(_DWORD *)(a1 + 1296);
  v15 = *(llvm **)(a1 + 1280);
  if (v14)
  {
    v18 = (char **)((char *)v15 + 24);
    v19 = 88 * v14;
    do
    {
      if (((unint64_t)*(v18 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v18 = sub_22E3B9848(v18);
      v18 += 11;
      v19 -= 88;
    }
    while (v19);
    v15 = *(llvm **)(a1 + 1280);
    v16 = 88 * *(unsigned int *)(a1 + 1296);
  }
  else
  {
    v16 = 0;
  }
  llvm::deallocate_buffer(v15, (void *)v16);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1256), (void *)(16 * *(unsigned int *)(a1 + 1272)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1224), (void *)(16 * *(unsigned int *)(a1 + 1240)));
  sub_22F413AEC(a1 + 1200);
  sub_22F413A68(a1 + 1176);
  sub_22E7946F4(a1 + 1152);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1152), (void *)(32 * *(unsigned int *)(a1 + 1168)));
  sub_22F4139D4(a1 + 1120);
  v20 = *(void **)(a1 + 1080);
  if (v20 != (void *)(a1 + 1096))
    free(v20);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1056), (void *)(16 * *(unsigned int *)(a1 + 1072)));
  sub_22E6C6358(a1 + 1024);
  sub_22F413944((void **)(a1 + 944));
  sub_22E54B4D4(a1 + 72);
  sub_22F4138C0((void **)(a1 + 40));
  return a1;
}

uint64_t sub_22F151CF0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_22F151DC8((int32x2_t *)a1, a2);
  v10 = a2;
  v11 = 0;
  v4 = sub_22E54D320(a1 + 1152, &v10, &v11);
  v5 = *(_QWORD *)(a1 + 1152);
  v6 = *(unsigned int *)(a1 + 1168);
  if (v4)
    result = v11;
  else
    result = v5 + 32 * v6;
  if ((*(_BYTE *)(**(_QWORD **)(a1 + 32) + 216) & 0x10) != 0)
  {
    v9 = result;
    if (v5 + 32 * v6 == result)
    {
      v8 = sub_22F4124F8(a1, a2);
      result = v9;
      if (v8)
      {
        sub_22F41010C(*(_QWORD **)(a1 + 32));
        v10 = a2;
        v11 = 0;
        if (sub_22E54D320(a1 + 1152, &v10, &v11))
          return v11;
        else
          return *(_QWORD *)(a1 + 1152) + 32 * *(unsigned int *)(a1 + 1168);
      }
    }
  }
  return result;
}

int32x2_t sub_22F151DC8(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int32x2_t result;
  unint64_t v29;
  uint64_t v30;

  v4 = a1[147];
  v5 = a1[149].u32[0];
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    LODWORD(v7) = (v5 - 1) & (37 * v6);
    v8 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v7);
    v9 = *v8;
    if (*v8 == v6)
      goto LABEL_8;
    v10 = 1;
    while (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v7);
      if (v9 == v6)
      {
        v8 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v5);
LABEL_8:
  if ((uint64_t *)(*(_QWORD *)&v4 + 16 * v5) != v8)
  {
    v20 = v8[1];
    if ((v20 & 4) != 0)
    {
      v26 = v20 & 0xFFFFFFFFFFFFFFF8;
      v22 = *(uint64_t **)v26;
      v21 = *(_QWORD *)v26 + 8 * *(unsigned int *)(v26 + 8);
    }
    else
    {
      v21 = (uint64_t)&v8[(v20 > 7) + 1];
      v22 = v8 + 1;
    }
    while (v22 != (uint64_t *)v21)
    {
      v27 = *v22++;
      sub_22F41274C((uint64_t)a1, v27, a2, 1u);
    }
    sub_22F29CFE8(v8 + 1);
    *v8 = 0x8000000000000000;
    result = vadd_s32(a1[148], (int32x2_t)0x1FFFFFFFFLL);
    a1[148] = result;
  }
  v12 = a1[150];
  v13 = a1[152].u32[0];
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(a2 + 32);
    LODWORD(v15) = (v13 - 1) & (37 * v14);
    v16 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v15);
    v17 = *v16;
    if (*v16 == v14)
      goto LABEL_16;
    v18 = 1;
    while (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v13 - 1);
      v17 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v15);
      if (v17 == v14)
      {
        v16 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v15);
        goto LABEL_16;
      }
    }
  }
  v16 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v13);
LABEL_16:
  if ((uint64_t *)(*(_QWORD *)&v12 + 16 * v13) != v16)
  {
    v23 = v16[1];
    if ((v23 & 4) != 0)
    {
      v29 = v23 & 0xFFFFFFFFFFFFFFF8;
      v25 = *(uint64_t **)v29;
      v24 = *(_QWORD *)v29 + 8 * *(unsigned int *)(v29 + 8);
    }
    else
    {
      v24 = (uint64_t)&v16[(v23 > 7) + 1];
      v25 = v16 + 1;
    }
    while (v25 != (uint64_t *)v24)
    {
      v30 = *v25++;
      sub_22F41274C((uint64_t)a1, v30, a2, 1u);
    }
    sub_22F29CFE8(v16 + 1);
    *v16 = 0x7FFFFFFFFFFFFFFELL;
    result = vadd_s32(a1[151], (int32x2_t)0x1FFFFFFFFLL);
    a1[151] = result;
  }
  return result;
}

unint64_t sub_22F151FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 1232))
    return 0;
  v5 = (uint64_t *)(a1 + 1224);
  v6 = *(_QWORD *)(a2 + 40);
  sub_22F1D1F3C();
  while (1)
  {
    v11 = v6;
    v12[0] = 0;
    if (sub_22F246C54(v5, &v11, v12))
    {
      if (v12[0] != *(_QWORD *)(a1 + 1224) + 16 * *(unsigned int *)(a1 + 1240))
        break;
    }
    v8 = *(unsigned int *)(a3 + 8);
    if (v8 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v6;
    ++*(_DWORD *)(a3 + 8);
    v9 = (char *)llvm::sys::path::parent_path();
    if (!v10)
      return 0;
    sub_22F1D0728(*(_QWORD *)(*(_QWORD *)a1 + 16), v9, v10, 1, (uint64_t)v12);
    result = 0;
    if ((v13 & 1) == 0)
    {
      v6 = v12[0];
      if (v12[0])
        continue;
    }
    return result;
  }
  return *(_QWORD *)(v12[0] + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F15213C(uint64_t result, uint64_t *a2, int a3, int a4, void *a5, size_t a6, unint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  void *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  size_t v60;
  size_t *v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;

  v12 = a2;
  v13 = result;
  if (a2)
  {
    v14 = a2;
    do
    {
      v15 = v14;
      v14 = (uint64_t *)v14[4];
    }
    while (v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = *(uint64_t **)(result + 936);
  if (v16)
  {
    do
    {
      v17 = v16;
      v16 = (uint64_t *)v16[4];
    }
    while (v16);
  }
  else
  {
    v17 = 0;
  }
  if (v15 != v17)
    return result;
  if (a2)
  {
    sub_22F412548((uint64_t *)result, a2, 0);
    sub_22F41274C(v13, (uint64_t)v12, 0, 0);
  }
  v18 = a7;
  do
  {
    v19 = *(_QWORD *)(v18 + 8);
    v18 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v19 & 2) != 0 && v18);
  result = sub_22F151CF0(v13, v18);
  if (*(_QWORD *)(v13 + 1152) + 32 * *(unsigned int *)(v13 + 1168) != result)
  {
    v20 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v20)
      return result;
    v21 = 0;
    v22 = 0;
    v23 = *(uint64_t **)(result + 8);
    v24 = &v23[v20];
    while (1)
    {
      v25 = v21;
      v26 = *v23;
      if ((*v23 & 7) != 4)
      {
        v27 = a7;
        do
        {
          v28 = *(_QWORD *)(v27 + 8);
          if ((v28 & 2) == 0)
            break;
          v27 = v28 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v27);
        if (v12 && (v26 & 1) != 0)
        {
          v29 = v12;
          do
          {
            v30 = v29;
            v29 = (uint64_t *)v29[4];
          }
          while (v29);
          v21 = v26 & 0xFFFFFFFFFFFFFFF8;
          v31 = v26 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v32 = v31;
            v31 = *(_QWORD *)(v31 + 32);
          }
          while (v31);
          if (v30 != (uint64_t *)v32)
            goto LABEL_38;
        }
        else
        {
          if ((v26 & 1) != 0)
          {
            v21 = v26 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_38;
          }
          if (!v12)
            return result;
        }
        if ((*(_QWORD *)(*(_QWORD *)(v13 + 16) + 20) & 0x10000000000000) == 0)
          return result;
        result = sub_22F1D8F94((uint64_t)v12, (_BYTE *)(v26 & 0xFFFFFFFFFFFFFFF8));
        if ((result & 1) != 0)
          return result;
        v22 = *v23 & 0xFFFFFFFFFFFFFFF8;
      }
      v21 = v25;
LABEL_38:
      if (++v23 == v24)
      {
        if (v21)
        {
          v33 = *(_QWORD *)(v13 + 8);
          *(_DWORD *)(v33 + 312) = a4;
          *(_DWORD *)(v33 + 316) = 1378;
          if (*(char *)(v33 + 311) < 0)
          {
            **(_BYTE **)(v33 + 288) = 0;
            *(_QWORD *)(v33 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v33 + 288) = 0;
            *(_BYTE *)(v33 + 311) = 0;
          }
          v65 = (unsigned __int8 *)(v33 + 320);
          v66 = 0;
          v67 = v33;
          v68 = 1;
          *(_BYTE *)(v33 + 320) = 0;
          *(_DWORD *)(v33 + 664) = 0;
          v35 = *(unsigned int *)(v33 + 776);
          if ((_DWORD)v35)
          {
            v36 = *(_QWORD *)(v33 + 768);
            v37 = 56 * v35;
            do
            {
              if (*(char *)(v36 + v37 - 9) < 0)
                operator delete(*(void **)(v36 + v37 - 32));
              v37 -= 56;
            }
            while (v37);
          }
          *(_DWORD *)(v33 + 776) = 0;
LABEL_84:
          sub_22E3B89A8(&v65, a5, a6);
          return sub_22E3BB0B8((uint64_t)&v65);
        }
        if (!v22)
          return result;
        v34 = *(_QWORD *)(v13 + 8);
        *(_DWORD *)(v34 + 312) = a4;
        *(_DWORD *)(v34 + 316) = 1187;
        if (*(char *)(v34 + 311) < 0)
        {
          **(_BYTE **)(v34 + 288) = 0;
          *(_QWORD *)(v34 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v34 + 288) = 0;
          *(_BYTE *)(v34 + 311) = 0;
        }
        v65 = (unsigned __int8 *)(v34 + 320);
        v66 = 0;
        v67 = v34;
        v68 = 1;
        *(_BYTE *)(v34 + 320) = 0;
        *(_DWORD *)(v34 + 664) = 0;
        v45 = *(unsigned int *)(v34 + 776);
        if ((_DWORD)v45)
        {
          v46 = *(_QWORD *)(v34 + 768);
          v47 = 56 * v45;
          do
          {
            if (*(char *)(v46 + v47 - 9) < 0)
              operator delete(*(void **)(v46 + v47 - 32));
            v47 -= 56;
          }
          while (v47);
        }
        *(_DWORD *)(v34 + 776) = 0;
        do
        {
          v48 = v12;
          v12 = (uint64_t *)v12[4];
        }
        while (v12);
LABEL_77:
        v49 = *((_BYTE *)v48 + 23);
        if (v49 >= 0)
          v50 = v48;
        else
          v50 = (void *)*v48;
        if (v49 >= 0)
          v51 = v49 & 0x7F;
        else
          v51 = v48[1];
        sub_22E3B89A8(&v65, v50, v51);
        goto LABEL_84;
      }
    }
  }
  v38 = a7;
  do
  {
    v39 = *(_QWORD *)(v38 + 8);
    v38 = v39 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v39 & 2) != 0 && v38);
  result = sub_22F412874(v13, v38);
  if (!v12 || (result & 1) != 0)
    return result;
  v40 = *(_QWORD *)(v13 + 16);
  if ((*(_QWORD *)(v40 + 20) & 0x40000000000000) != 0)
  {
    v52 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(v52 + 312) = a4;
    *(_DWORD *)(v52 + 316) = 1187;
    if (*(char *)(v52 + 311) < 0)
    {
      **(_BYTE **)(v52 + 288) = 0;
      *(_QWORD *)(v52 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v52 + 288) = 0;
      *(_BYTE *)(v52 + 311) = 0;
    }
    v65 = (unsigned __int8 *)(v52 + 320);
    v66 = 0;
    v67 = v52;
    v68 = 1;
    *(_BYTE *)(v52 + 320) = 0;
    *(_DWORD *)(v52 + 664) = 0;
    v53 = *(unsigned int *)(v52 + 776);
    if ((_DWORD)v53)
    {
      v54 = *(_QWORD *)(v52 + 768);
      v55 = 56 * v53;
      do
      {
        if (*(char *)(v54 + v55 - 9) < 0)
          operator delete(*(void **)(v54 + v55 - 32));
        v55 -= 56;
      }
      while (v55);
    }
    *(_DWORD *)(v52 + 776) = 0;
    do
    {
      v48 = v12;
      v12 = (uint64_t *)v12[4];
    }
    while (v12);
    goto LABEL_77;
  }
  if (a3 && (*(_BYTE *)(v40 + 240) & 0xE0) != 0)
  {
    v41 = v12;
    do
    {
      v42 = v41;
      v41 = (uint64_t *)v41[4];
    }
    while (v41);
    if ((v42[168] & 0x10) != 0)
      v43 = 1331;
    else
      v43 = 1332;
    v44 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(v44 + 312) = a4;
    *(_DWORD *)(v44 + 316) = v43;
    if (*(char *)(v44 + 311) < 0)
    {
      **(_BYTE **)(v44 + 288) = 0;
      *(_QWORD *)(v44 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v44 + 288) = 0;
      *(_BYTE *)(v44 + 311) = 0;
    }
    v65 = (unsigned __int8 *)(v44 + 320);
    v66 = 0;
    v67 = v44;
    v68 = 1;
    *(_BYTE *)(v44 + 320) = 0;
    *(_DWORD *)(v44 + 664) = 0;
    v56 = *(unsigned int *)(v44 + 776);
    if ((_DWORD)v56)
    {
      v57 = *(_QWORD *)(v44 + 768);
      v58 = 56 * v56;
      do
      {
        if (*(char *)(v57 + v58 - 9) < 0)
          operator delete(*(void **)(v57 + v58 - 32));
        v58 -= 56;
      }
      while (v58);
    }
    *(_DWORD *)(v44 + 776) = 0;
    sub_22F1D8A24(v12, 0, __p);
    if (v64 >= 0)
      v59 = __p;
    else
      v59 = (void **)__p[0];
    if (v64 >= 0)
      v60 = v64 & 0x7F;
    else
      v60 = (size_t)__p[1];
    sub_22E3B89A8(&v65, v59, v60);
    do
    {
      v61 = (size_t *)a7;
      v62 = *(_QWORD *)(a7 + 8);
      if ((v62 & 2) == 0)
        break;
      a7 = v62 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v62 & 0xFFFFFFFFFFFFFFFCLL) != 0);
    sub_22E3B89A8(&v65, v61 + 4, *v61);
    if (v64 < 0)
      operator delete(__p[0]);
    return sub_22E3BB0B8((uint64_t)&v65);
  }
  return result;
}

unint64_t sub_22F152624(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v8 = sub_22F151CF0(a1, a2);
  if (*(_QWORD *)(a1 + 1152) + 32 * *(unsigned int *)(a1 + 1168) == v8)
  {
    result = sub_22F15274C(a1, a2);
    goto LABEL_14;
  }
  v9 = v8;
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
  {
    result = 0;
    goto LABEL_14;
  }
  result = 0;
  v12 = *(unint64_t **)(v9 + 8);
  v13 = &v12[v10];
  while (1)
  {
    v14 = *v12;
    if ((a4 & 1) == 0 && (*v12 & 7) == 4)
      goto LABEL_11;
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v16 = v15;
      v15 = *(_QWORD *)(v15 + 32);
    }
    while (v15);
    if (v16 == *(_QWORD *)(a1 + 936))
      break;
    if (result >= 8
      && ((*(_WORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 1344) & 4) == 0
       || (*(_WORD *)((result & 0xFFFFFFFFFFFFFFF8) + 1344) & 4) != 0))
    {
      if (((v14 & 7 ^ result & 7) & 1) != 0)
      {
        if ((v14 & 1) != 0)
          goto LABEL_11;
      }
      else if (((v14 & 7 ^ result & 7) & 2) != 0)
      {
        if ((v14 & 2) != 0)
          goto LABEL_11;
      }
      else if ((result & 7) != 4 || (v14 & 7) == 4)
      {
        goto LABEL_11;
      }
    }
    result = *v12;
LABEL_11:
    if (++v12 == v13)
      goto LABEL_14;
  }
  result = *v12;
LABEL_14:
  if ((result & 2) != 0)
    v17 = a3;
  else
    v17 = 1;
  if (!v17)
    return 0;
  return result;
}

unint64_t sub_22F15274C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  unsigned __int8 *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  size_t v27;
  unsigned __int8 *v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[4];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v45 = v47;
  v46 = 0x200000000;
  v4 = sub_22F151FD0(a1, a2, (uint64_t)&v45);
  if (v4 < 8)
  {
    v7 = 0;
  }
  else
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    v37 = v4 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      sub_22F1D8DAC(v5, (uint64_t)&v40);
      if (v44)
        break;
      v6 = *(_QWORD *)(v5 + 32);
      if (v43 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v41) < 0)
        operator delete(v40);
      if (!v6)
        goto LABEL_15;
      v5 = *(_QWORD *)(v5 + 32);
    }
    if (v43 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40);
LABEL_15:
    if ((*(_WORD *)(v5 + 1344) & 0x200) != 0)
    {
      v13 = (unint64_t)sub_22F152B7C(a1, v5);
      v36 = (*(unsigned __int16 *)(v5 + 1344) >> 10) & 1;
      if ((_DWORD)v46)
      {
        v35 = (char *)v45;
        v24 = (char *)v45 + 8 * v46;
        do
        {
          v25 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          v39 = v25;
          v40 = __p;
          v41 = xmmword_22F44E330;
          v26 = (unsigned __int8 *)llvm::sys::path::stem();
          v28 = sub_22F152BE4(v26, v27, (unsigned __int8 **)&v40);
          v37 = (uint64_t)sub_22F158808(a1, v28, v29, v37, 0, v36);
          if (v13)
          {
            v30 = v13;
            do
            {
              v31 = *(_QWORD *)(v30 + 8);
              v30 = v31 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v31 & 2) != 0 && v30);
          }
          else
          {
            v30 = 0;
          }
          sub_22F37065C((uint64_t *)(a1 + 1304), &v37)[1] = v30;
          v32 = v37;
          *(_WORD *)(v37 + 1344) |= 0x100u;
          sub_22F25E108((uint64_t *)(a1 + 1224), &v39)[1] = v32;
          if ((*(_WORD *)(v5 + 1344) & 0x800) != 0)
          {
            v33 = v37;
            if (!*(_DWORD *)(v37 + 1480))
            {
              if (*(_DWORD *)(v37 + 1484))
              {
                v34 = 0;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v34 = *(unsigned int *)(v33 + 1480);
              }
              *(_QWORD *)(*(_QWORD *)(v33 + 1472) + 8 * v34) = 4;
              ++*(_DWORD *)(v33 + 1480);
            }
          }
          if (v40 != __p)
            free(v40);
        }
        while (v24 != v35);
      }
      v40 = __p;
      v41 = xmmword_22F44E330;
      v14 = *(_QWORD *)(a2 + 88);
      do
      {
        v15 = *(_QWORD *)(v14 + 8);
        if ((v15 & 2) == 0)
          break;
        v14 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v14);
      v16 = (unsigned __int8 *)llvm::sys::path::stem();
      v18 = sub_22F152BE4(v16, v17, (unsigned __int8 **)&v40);
      v37 = (uint64_t)sub_22F158808(a1, v18, v19, v37, 0, v36);
      if (v13)
      {
        do
        {
          v20 = *(_QWORD *)(v13 + 8);
          v13 = v20 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v20 & 2) != 0 && v13);
      }
      sub_22F37065C((uint64_t *)(a1 + 1304), &v37)[1] = v13;
      v21 = v37;
      *(_WORD *)(v37 + 1344) |= 0x100u;
      v39 = a2;
      sub_22F41FE64(v21 + 328, &v39);
      if ((*(_WORD *)(v5 + 1344) & 0x800) != 0)
      {
        v22 = v37;
        if (!*(_DWORD *)(v37 + 1480))
        {
          if (*(_DWORD *)(v37 + 1484))
          {
            v23 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v23 = *(unsigned int *)(v22 + 1480);
          }
          *(_QWORD *)(*(_QWORD *)(v22 + 1472) + 8 * v23) = 4;
          ++*(_DWORD *)(v22 + 1480);
        }
      }
      if (v40 != __p)
        free(v40);
    }
    else if ((_DWORD)v46)
    {
      v8 = 0;
      v9 = 8 * v46;
      do
      {
        sub_22F25E108((uint64_t *)(a1 + 1224), (char *)v45 + v8)[1] = v37;
        v8 += 8;
      }
      while (v9 != v8);
    }
    v7 = v37 & 0xFFFFFFFFFFFFFFF8;
    v10 = sub_22F16164C((_DWORD *)(a1 + 1152), &v38);
    v11 = *((_DWORD *)v10 + 4);
    if (v11 >= *((_DWORD *)v10 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *((_DWORD *)v10 + 4);
    }
    *(_QWORD *)(v10[1] + 8 * v11) = v7;
    ++*((_DWORD *)v10 + 4);
  }
  if (v45 != v47)
    free(v45);
  return v7;
}

_DWORD *sub_22F152B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if ((*(_WORD *)(a2 + 1344) & 0x100) == 0)
    return sub_22F158DEC((uint64_t *)a1, a2);
  v5 = 0;
  v6 = a2;
  if (sub_22F246C54((uint64_t *)(a1 + 1304), &v6, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)(a1 + 1304) + 16 * *(unsigned int *)(a1 + 1320);
  return *(_DWORD **)(*(_QWORD *)(v3 + 8) + 88);
}

unsigned __int8 *sub_22F152BE4(unsigned __int8 *__s1, size_t a2, unsigned __int8 **a3)
{
  size_t v3;
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  BOOL v19;
  _BOOL4 v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;
  int v32;
  BOOL v34;
  BOOL v35;
  int v36;
  BOOL v41;
  int v42;
  unsigned int v45;
  int v52;
  char v58;
  char v59;
  BOOL v64;
  char v65;
  char v66;
  char v67;
  char v70;
  char v72;
  BOOL v74;
  char v75;
  char v76;
  char v78;
  char v80;
  char v82;
  char v84;
  char v86;
  BOOL v87;
  char v88;
  char v89;
  char v91;
  char v93;
  BOOL v95;
  BOOL v96;
  char v98;
  BOOL v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v106;
  char v108;
  char v109;
  char v112;
  char v113;
  char v116;
  char v117;
  char v118;
  char v120;
  char v121;
  char v122;
  char v124;
  char v127;
  char v129;
  char v130;
  char v131;
  char v133;
  char v134;
  char v135;
  char v138;
  char v139;
  char v142;
  char v144;
  char v145;
  char v146;
  char v149;
  char v150;
  char v153;
  char v155;
  char v157;
  char v159;
  BOOL v161;
  char v166;
  char v168;
  BOOL v169;
  char v171;
  BOOL v173;
  BOOL v174;
  char v183;
  char v185;
  char v187;
  char v188;
  char v190;
  char v191;
  char v193;
  char v195;
  BOOL v196;
  BOOL v197;
  char v198;
  char v200;
  char v202;
  char v204;
  char v206;
  BOOL v208;
  char v212;
  BOOL v215;
  char v218;
  BOOL v219;
  BOOL v220;
  BOOL v222;
  char v224;
  BOOL v225;
  BOOL v227;
  char v232;
  char v233;
  BOOL v234;
  BOOL v235;
  BOOL v237;
  BOOL v238;
  BOOL v240;
  BOOL v241;
  char v243;
  BOOL v244;
  char v246;
  BOOL v247;
  char v249;
  BOOL v250;
  BOOL v251;
  char v253;
  BOOL v254;
  char v256;
  BOOL v257;
  char v259;
  BOOL v260;
  BOOL v261;
  BOOL v263;
  BOOL v265;
  char v267;
  char v269;
  char v272;
  char v274;
  BOOL v275;
  char v277;
  char v279;
  char v281;
  uint64_t v283;
  BOOL v284;
  uint64_t v285;
  BOOL v286;
  char v287;
  BOOL v288;
  char v291;
  BOOL v292;
  BOOL v293;
  char v295;
  BOOL v296;
  BOOL v297;
  BOOL v299;
  char v301;
  int v303;
  BOOL v304;
  uint64_t v305;
  BOOL v306;
  uint64_t v307;
  char v310;
  char v313;
  char v315;
  BOOL v316;
  char v318;
  char v320;
  BOOL v321;
  char v323;
  char v325;
  char v327;
  char v329;
  BOOL v331;
  uint64_t v333;
  BOOL v334;
  uint64_t v335;
  char v337;
  char v338;
  char v341;
  uint64_t v343;
  BOOL v344;
  uint64_t v345;
  char v348;
  BOOL v349;
  BOOL v350;
  char v352;
  BOOL v353;
  char v355;
  char v357;
  char v359;
  char v361;
  char v363;
  uint64_t v365;
  BOOL v366;
  uint64_t v367;
  char v369;
  uint64_t v371;
  BOOL v372;
  uint64_t v373;
  char v375;
  BOOL v376;
  BOOL v377;
  BOOL v379;
  BOOL v380;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  BOOL v385;
  char v386;
  BOOL v387;
  BOOL v388;
  unsigned __int8 **v389;
  _BOOL4 v390;
  BOOL v391;
  char v392;
  char v395;
  BOOL v396;
  BOOL v397;
  BOOL v399;
  int v402;
  unsigned __int8 *v403;
  const char *v404;
  size_t v405;
  int v406;
  char v407;
  char v408;
  BOOL v409;
  BOOL v411;
  int v413;
  char v414;
  BOOL v415;
  BOOL v416;
  BOOL v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  BOOL v422;
  uint64_t v423;
  BOOL v424;
  uint64_t v425;
  char v428;
  char v430;
  char v432;
  char v434;
  char v435;
  char v438;
  char v441;
  char v443;
  char v445;
  char v447;
  char v448;
  char v450;
  char v452;
  char v453;
  char v456;
  char v458;
  char v460;
  char v461;
  char v462;
  char v465;
  char v466;
  char v467;
  char v470;
  char v472;
  char v474;
  char v475;
  BOOL v476;
  char v478;
  char v480;
  char v481;
  char v483;
  char v486;
  char v487;
  char v492;
  char v494;
  char v495;
  BOOL v498;
  char v499;
  char v500;
  char v502;
  char v505;
  char v507;
  char v508;
  BOOL v511;
  char v513;
  char v515;
  char v516;
  BOOL v517;
  BOOL v519;
  BOOL v521;
  BOOL v522;
  char v524;
  char v526;
  char v528;
  char v529;
  char v532;
  char v533;
  char v535;
  BOOL v536;
  int v537;
  char v538;
  char v539;
  char v540;
  char v542;
  char v543;
  char v546;
  BOOL v548;
  char v549;
  BOOL v550;
  char v553;
  char v555;
  char v557;
  char v559;
  char v560;
  char v562;
  char v564;
  char v566;
  char v568;
  char v570;
  char v572;
  char v574;
  char v576;
  char v578;
  char v579;
  char v580;
  char v582;
  char v584;
  char v585;
  BOOL v587;
  char v588;
  char v589;
  char v591;
  char v592;
  char v593;
  BOOL v596;
  char v597;
  char v598;
  uint64_t v600;
  BOOL v601;
  uint64_t v602;
  char v604;
  char v605;
  char v608;
  char v609;
  char v612;
  char v614;
  char v615;
  char v617;
  char v619;
  char v620;
  char v623;
  char v625;
  char v627;
  BOOL v628;
  uint64_t v630;
  BOOL v631;
  uint64_t v632;
  char v634;
  char v636;
  char v638;
  char v639;
  char v642;
  BOOL v645;
  char v646;
  char v647;
  char v649;
  char v650;
  char v653;
  BOOL v654;
  char v655;
  char v657;
  char v659;
  char v660;
  char v663;
  char v664;
  BOOL v667;
  char v669;
  char v670;
  char v673;
  char v675;
  char v676;
  char v678;
  char v680;
  char v682;
  char v684;
  char v686;
  BOOL v687;
  char v689;
  BOOL v691;
  char v693;
  char v694;
  char v697;
  BOOL v698;
  char v700;
  BOOL v701;
  char v703;
  BOOL v704;
  char v706;
  BOOL v707;
  BOOL v708;
  char v710;
  char v711;
  unsigned __int8 *v712;
  const char *v713;
  size_t v714;
  unsigned int v715;
  unsigned __int8 *v716;
  int v717;
  BOOL v719;
  BOOL v720;
  BOOL v721;
  BOOL v722;
  BOOL v723;
  BOOL v724;
  BOOL v725;
  char v726;
  char v727;
  BOOL v728;
  char v729;

  v3 = a2;
  v4 = __s1;
  if (a2)
  {
    v5 = a3;
    if ((word_22F4ADB24[*__s1] & 0xE0) != 0)
    {
      v6 = 0;
      while ((word_22F4ADB24[__s1[v6]] & 0xE8) != 0)
      {
        if (a2 == ++v6)
          goto LABEL_24;
      }
    }
    v7 = 0;
    a3[1] = 0;
    if ((word_22F4ADB24[*__s1] & 8) != 0)
    {
      if (a3[2])
      {
        v8 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v8 = v5[1];
      }
      v8[(_QWORD)*v5] = 95;
      v7 = (uint64_t)(v5[1] + 1);
      v5[1] = (unsigned __int8 *)v7;
    }
    if ((unint64_t)v5[2] < v7 + v3)
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v9 = v3;
    if ((_DWORD)v3)
    {
      v3 = (size_t)v5[1];
      do
      {
        v11 = *v4++;
        v10 = v11;
        if ((word_22F4ADB24[v11] & 0xE8) != 0)
          v12 = v10;
        else
          v12 = 95;
        if (v3 + 1 > (unint64_t)v5[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v3 = (size_t)v5[1];
        }
        (*v5)[v3] = v12;
        v3 = (size_t)(v5[1] + 1);
        v5[1] = (unsigned __int8 *)v3;
        --v9;
      }
      while (v9);
    }
    else
    {
      v3 = (size_t)v5[1];
    }
    v4 = *v5;
    while (1)
    {
LABEL_24:
      if (v3 == 4)
      {
        if (*(_DWORD *)v4 == 1869903201
          || *(_DWORD *)v4 == 1702060387
          || *(_DWORD *)v4 == 1918986339
          || *(_DWORD *)v4 == 1702063205)
        {
          v15 = 0;
          v16 = 0;
          v13 = 257;
        }
        else
        {
          if (*(_DWORD *)v4 == 1836412517)
            v13 = 257;
          else
            v13 = 0;
          if (*(_DWORD *)v4 == 1869901671)
            v13 = 257;
          if (v13 <= 0xFF && *(_DWORD *)v4 == 1735290732)
            v13 = 257;
          if (v13 <= 0xFF)
          {
            LOBYTE(v14) = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v22 = 0;
            v23 = *(_DWORD *)v4 == 1684631414;
            goto LABEL_246;
          }
LABEL_3000:
          v15 = 0;
          v16 = 0;
        }
LABEL_48:
        v14 = 0;
        v25 = v13 < 0x100;
LABEL_49:
        v20 = v3 == 10;
        if (v3 == 10 && v25)
        {
          v22 = 0;
          v21 = 0;
          v19 = 0;
          if (*((_WORD *)v4 + 4) == 31090 && *(_QWORD *)v4 == 0x616E6967616D495FLL)
            v13 = 257;
          v20 = 1;
          goto LABEL_243;
        }
        v21 = v3 == 9;
        if (v3 == 9 && v25)
        {
          v22 = 0;
          v19 = 0;
          if (v4[8] == 110 && *(_QWORD *)v4 == 0x72757465726F4E5FLL)
            v13 = 257;
          v21 = 1;
          goto LABEL_243;
        }
        v19 = v3 == 14;
        if (v3 == 14 && v25)
        {
          v22 = 0;
          if (*(_QWORD *)(v4 + 6) == 0x7472657373615F63 && *(_QWORD *)v4 == 0x5F6369746174535FLL)
            v13 = 257;
          v19 = 1;
LABEL_243:
          v17 = 0;
          if (!v14 || v13 > 0xFF)
          {
            v18 = 0;
            goto LABEL_250;
          }
          v17 = 0;
          v18 = 0;
          v23 = *(_QWORD *)v4 == 0x5F5F636E75665F5FLL;
LABEL_246:
          if (v23)
            v13 = 257;
          goto LABEL_250;
        }
        v22 = v3 == 13;
        if (v3 != 13)
          v25 = 0;
        if (!v25)
          goto LABEL_243;
        v17 = 0;
        v18 = 0;
        if (*(_QWORD *)(v4 + 5) == 0x6C61636F6C5F6461 && *(_QWORD *)v4 == 0x5F6461657268545FLL)
          v13 = 257;
        v22 = 1;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v13 = 0;
        switch(v3)
        {
          case 2uLL:
            v24 = *(unsigned __int16 *)v4;
            if (v24 == 28516)
              v13 = 257;
            else
              v13 = 0;
            if (v24 == 28516)
              goto LABEL_3000;
            v15 = 0;
            v16 = 0;
            if (*(_WORD *)v4 == 26217)
              v13 = 257;
            goto LABEL_48;
          case 3uLL:
            v32 = *(unsigned __int16 *)v4 ^ 0x6F66 | v4[2] ^ 0x72;
            if (v32)
              v13 = 0;
            else
              v13 = 257;
            LOBYTE(v14) = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v22 = 0;
            if (v32)
            {
              if (v4[2] == 116 && *(_WORD *)v4 == 28265)
                v13 = 257;
            }
            v18 = 1;
            break;
          case 4uLL:
            goto LABEL_48;
          case 5uLL:
            v34 = *(_DWORD *)v4 == 1634038370 && v4[4] == 107;
            if (v34 || (*(_DWORD *)v4 == 1936617315 ? (v35 = v4[4] == 116) : (v35 = 0), v35))
            {
              v16 = 0;
              v13 = 257;
            }
            else
            {
              v36 = *(_DWORD *)v4 ^ 0x616F6C66 | v4[4] ^ 0x74;
              if (v36)
                v13 = 0;
              else
                v13 = 257;
              if (v36)
              {
                if (v4[4] == 116 && *(_DWORD *)v4 == 1919903859)
                  v13 = 257;
              }
              if (v13 <= 0xFF && v4[4] == 110 && *(_DWORD *)v4 == 1869180533)
                v13 = 257;
              if (v13 <= 0xFF && v4[4] == 101 && *(_DWORD *)v4 == 1818847351)
                v13 = 257;
              if (v13 > 0xFF)
              {
                v16 = 0;
              }
              else
              {
                v16 = 0;
                if (v4[4] == 108 && *(_DWORD *)v4 == 1869562463)
                  v13 = 257;
              }
            }
            v15 = 1;
            goto LABEL_48;
          case 6uLL:
            v41 = *(_DWORD *)v4 == 1651863396 && *((_WORD *)v4 + 2) == 25964;
            v42 = !v41;
            if (v41)
            {
              v13 = 257;
              if (!v42)
              {
LABEL_3007:
                v15 = 0;
LABEL_3011:
                v16 = 1;
                goto LABEL_48;
              }
            }
            else
            {
              v13 = 0;
              if (*(_DWORD *)v4 == 1702131813 && *((_WORD *)v4 + 2) == 28274)
              {
                v15 = 0;
                v13 = 257;
                goto LABEL_3011;
              }
              if (!v42)
                goto LABEL_3007;
            }
            if (*((_WORD *)v4 + 2) == 25966 && *(_DWORD *)v4 == 1768713833)
              v45 = 257;
            else
              v45 = v13;
            v13 = v45;
            if (v45 <= 0xFF)
            {
              if (*((_WORD *)v4 + 2) == 28274 && *(_DWORD *)v4 == 1970562418)
                v13 = 257;
              else
                v13 = v45;
            }
            if (v13 <= 0xFF && *((_WORD *)v4 + 2) == 25701 && *(_DWORD *)v4 == 1852270963)
              v13 = 257;
            if (v13 <= 0xFF && *((_WORD *)v4 + 2) == 26223 && *(_DWORD *)v4 == 1702521203)
              v13 = 257;
            if (v13 <= 0xFF && *((_WORD *)v4 + 2) == 25449 && *(_DWORD *)v4 == 1952543859)
              v13 = 257;
            if (v13 <= 0xFF && *((_WORD *)v4 + 2) == 29795 && *(_DWORD *)v4 == 1970435187)
              v13 = 257;
            if (v13 > 0xFF)
            {
              LOBYTE(v14) = 0;
              v15 = 0;
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 0;
            }
            else
            {
              LOBYTE(v14) = 0;
              v15 = 0;
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 0;
              if (*((_WORD *)v4 + 2) == 26723 && *(_DWORD *)v4 == 1953068915)
                v13 = 257;
            }
            v16 = 1;
            break;
          case 7uLL:
            v52 = *(_DWORD *)v4 ^ 0x61666564 | *(_DWORD *)(v4 + 3) ^ 0x746C7561;
            if (v52)
              v13 = 0;
            else
              v13 = 257;
            if (v52)
            {
              if (*(_DWORD *)(v4 + 3) == 1953384820 && *(_DWORD *)v4 == 1954039135)
                v13 = 257;
            }
            if (v13 <= 0xFF && *(_DWORD *)(v4 + 3) == 1953384820 && *(_DWORD *)v4 == 1953055327)
              v13 = 257;
            if (v13 <= 0xFF && *(_DWORD *)(v4 + 3) == 1717920869 && *(_DWORD *)v4 == 1701869940)
              v13 = 257;
            if (v13 > 0xFF)
            {
              LOBYTE(v14) = 0;
              v15 = 0;
              v16 = 0;
              v18 = 0;
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 0;
            }
            else
            {
              LOBYTE(v14) = 0;
              v15 = 0;
              v16 = 0;
              v18 = 0;
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 0;
              if (*(_DWORD *)(v4 + 3) == 1667853679 && *(_DWORD *)v4 == 1869889887)
                v13 = 257;
            }
            v17 = 1;
            break;
          case 8uLL:
            if (*(_QWORD *)v4 == 0x65756E69746E6F63)
              v13 = 257;
            else
              v13 = 0;
            if (*(_QWORD *)v4 == 0x7265747369676572)
              v13 = 257;
            if (v13 <= 0xFF && *(_QWORD *)v4 == 0x7463697274736572)
              v13 = 257;
            if (v13 <= 0xFF && *(_QWORD *)v4 == 0x64656E6769736E75)
              v13 = 257;
            if (v13 <= 0xFF && *(_QWORD *)v4 == 0x656C6974616C6F76)
              v13 = 257;
            if (v13 <= 0xFF && *(_QWORD *)v4 == 0x73616E67696C415FLL)
              v13 = 257;
            if (v13 <= 0xFF && *(_QWORD *)v4 == 0x666F6E67696C415FLL)
              v13 = 257;
            if (v13 <= 0xFF && *(_QWORD *)v4 == 0x78656C706D6F435FLL)
              v13 = 257;
            v25 = v13 < 0x100;
            if (v13 > 0xFF)
            {
              v15 = 0;
              v16 = 0;
              v14 = 1;
              goto LABEL_49;
            }
            v15 = 0;
            v16 = 0;
            v22 = 0;
            v21 = 0;
            v20 = 0;
            v19 = 0;
            if (*(_QWORD *)v4 == 0x636972656E65475FLL)
              v13 = 257;
            v14 = 1;
            goto LABEL_243;
          default:
            v16 = 0;
            v13 = 0;
            goto LABEL_48;
        }
      }
LABEL_250:
      if (v20 && v13 <= 0xFF && *((_WORD *)v4 + 4) == 29541 && *(_QWORD *)v4 == 0x795F636A626F5F5FLL)
        v13 = 257;
      v58 = !v21;
      v59 = v13 > 0xFF || !v21;
      if ((v59 & 1) == 0 && v4[8] == 111 && *(_QWORD *)v4 == 0x6E5F636A626F5F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v58 = 1;
      if ((v58 & 1) == 0 && v4[8] == 104 && *(_QWORD *)v4 == 0x7475617274705F5FLL)
        v13 = 257;
      if (v3 == 27 && v13 <= 0xFF)
      {
        v64 = *(_QWORD *)(v4 + 19) == 0x727470746E695F64
           && *((_QWORD *)v4 + 2) == 0x746E695F64657463
           && *((_QWORD *)v4 + 1) == 0x6972747365725F68
           && *(_QWORD *)v4 == 0x7475617274705F5FLL;
      }
      else
      {
        v65 = v18 ^ 1;
        if (v13 > 0xFF)
          v65 = 1;
        if ((v65 & 1) != 0)
        {
          if (v3 != 4 || v13 > 0xFF)
            goto LABEL_296;
          v64 = *(_DWORD *)v4 == 1819242338;
        }
        else
        {
          v64 = v4[2] == 109 && *(_WORD *)v4 == 29537;
        }
      }
      if (v64)
        v13 = 257;
LABEL_296:
      v66 = v15 ^ 1;
      if (v13 > 0xFF)
        v67 = 1;
      else
        v67 = v15 ^ 1;
      if ((v67 & 1) == 0 && v4[4] == 104 && *(_DWORD *)v4 == 1668571491)
        v13 = 257;
      if (v13 > 0xFF)
        v66 = 1;
      if ((v66 & 1) == 0 && v4[4] == 115 && *(_DWORD *)v4 == 1935764579)
        v13 = 257;
      v70 = !v20;
      if (v13 > 0xFF)
        v70 = 1;
      if ((v70 & 1) == 0 && *((_WORD *)v4 + 4) == 29811 && *(_QWORD *)v4 == 0x61635F74736E6F63)
        v13 = 257;
      v72 = v16 ^ 1;
      if (v13 > 0xFF)
        v72 = 1;
      if ((v72 & 1) == 0 && *((_WORD *)v4 + 2) == 25972 && *(_DWORD *)v4 == 1701602660)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v74 = *((_DWORD *)v4 + 2) == 1953718627 && *(_QWORD *)v4 == 0x5F63696D616E7964;
LABEL_338:
        if (v74)
          v13 = 257;
        goto LABEL_340;
      }
      v75 = v14 ^ 1;
      if (v13 > 0xFF)
        v75 = 1;
      if ((v75 & 1) == 0)
      {
        v74 = *(_QWORD *)v4 == 0x746963696C707865;
        goto LABEL_338;
      }
LABEL_340:
      v76 = v16 ^ 1;
      if (v13 > 0xFF)
        v76 = 1;
      if ((v76 & 1) == 0 && *((_WORD *)v4 + 2) == 29810 && *(_DWORD *)v4 == 1869641829)
        v13 = 257;
      v78 = v15 ^ 1;
      if (v13 > 0xFF)
        v78 = 1;
      if ((v78 & 1) == 0 && v4[4] == 101 && *(_DWORD *)v4 == 1936482662)
        v13 = 257;
      v80 = v16 ^ 1;
      if (v13 > 0xFF)
        v80 = 1;
      if ((v80 & 1) == 0 && *((_WORD *)v4 + 2) == 25710 && *(_DWORD *)v4 == 1701409382)
        v13 = 257;
      v82 = v17 ^ 1;
      if (v13 > 0xFF)
        v82 = 1;
      if ((v82 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1701601889 && *(_DWORD *)v4 == 1635022189)
        v13 = 257;
      v84 = !v21;
      if (v13 > 0xFF)
        v84 = 1;
      if ((v84 & 1) == 0 && v4[8] == 101 && *(_QWORD *)v4 == 0x63617073656D616ELL)
        v13 = 257;
      v86 = v18 ^ 1;
      if (v13 > 0xFF)
        v86 = 1;
      if ((v86 & 1) == 0)
      {
        v87 = v4[2] == 119 && *(_WORD *)v4 == 25966;
LABEL_390:
        if (v87)
          v13 = 257;
        goto LABEL_392;
      }
      v88 = v14 ^ 1;
      if (v13 > 0xFF)
        v88 = 1;
      if ((v88 & 1) == 0)
      {
        v87 = *(_QWORD *)v4 == 0x726F74617265706FLL;
        goto LABEL_390;
      }
LABEL_392:
      v89 = v17 ^ 1;
      if (v13 > 0xFF)
        v89 = 1;
      if ((v89 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1702125942 && *(_DWORD *)v4 == 1986622064)
        v13 = 257;
      v91 = !v21;
      if (v13 > 0xFF)
        v91 = 1;
      if ((v91 & 1) == 0 && v4[8] == 100 && *(_QWORD *)v4 == 0x65746365746F7270)
        v13 = 257;
      v93 = v16 ^ 1;
      if (v13 > 0xFF)
        v93 = 1;
      if ((v93 & 1) == 0 && *((_WORD *)v4 + 2) == 25449 && *(_DWORD *)v4 == 1818391920)
        v13 = 257;
      if (v3 == 16 && v13 <= 0xFF)
      {
        v95 = 0;
        v96 = *((_QWORD *)v4 + 1) == 0x747361635F746572 && *(_QWORD *)v4 == 0x707265746E696572;
LABEL_421:
        if (v96)
          v13 = 257;
        goto LABEL_432;
      }
      v95 = v3 == 11;
      if (v3 != 11 || v13 > 0xFF)
      {
        v102 = v14 ^ 1;
        if (v13 > 0xFF)
          v102 = 1;
        if ((v102 & 1) != 0)
        {
          if (v3 != 4 || v13 > 0xFF)
            goto LABEL_432;
          v96 = *(_DWORD *)v4 == 1936287860;
        }
        else
        {
          v96 = *(_QWORD *)v4 == 0x6574616C706D6574;
        }
        goto LABEL_421;
      }
      if (*(_QWORD *)(v4 + 3) == 0x747361635F636974 && *(_QWORD *)v4 == 0x635F636974617473)
        v13 = 257;
      v95 = 1;
LABEL_432:
      v98 = v15 ^ 1;
      if (v13 > 0xFF)
        v98 = 1;
      if ((v98 & 1) == 0 && v4[4] == 119 && *(_DWORD *)v4 == 1869768820)
        v13 = 257;
      if (v3 == 4 && v13 <= 0xFF)
      {
        v100 = *(_DWORD *)v4 == 1702195828;
        goto LABEL_457;
      }
      v101 = v18 ^ 1;
      if (v13 > 0xFF)
        v101 = 1;
      if ((v101 & 1) == 0)
      {
        v100 = v4[2] == 121 && *(_WORD *)v4 == 29300;
LABEL_457:
        if (v100)
          v13 = 257;
        goto LABEL_459;
      }
      v103 = v14 ^ 1;
      if (v13 > 0xFF)
        v103 = 1;
      if ((v103 & 1) == 0)
      {
        v100 = *(_QWORD *)v4 == 0x656D616E65707974;
        goto LABEL_457;
      }
LABEL_459:
      v104 = v16 ^ 1;
      if (v13 > 0xFF)
        v104 = 1;
      if ((v104 & 1) == 0 && *((_WORD *)v4 + 2) == 25705 && *(_DWORD *)v4 == 1701869940)
        v13 = 257;
      v106 = v15 ^ 1;
      if (v13 > 0xFF)
        v106 = 1;
      if ((v106 & 1) == 0 && v4[4] == 103 && *(_DWORD *)v4 == 1852404597)
        v13 = 257;
      v108 = v17 ^ 1;
      if (v13 > 0xFF)
        v109 = 1;
      else
        v109 = v17 ^ 1;
      if ((v109 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1818326388 && *(_DWORD *)v4 == 1953655158)
        v13 = 257;
      if (v13 > 0xFF)
        v108 = 1;
      if ((v108 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1952412257 && *(_DWORD *)v4 == 1634231159)
        v13 = 257;
      v112 = v17 ^ 1;
      if (v13 > 0xFF)
        v113 = 1;
      else
        v113 = v17 ^ 1;
      if ((v113 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1935765095 && *(_DWORD *)v4 == 1734962273)
        v13 = 257;
      if (v13 > 0xFF)
        v112 = 1;
      if ((v112 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1718578791 && *(_DWORD *)v4 == 1734962273)
        v13 = 257;
      v116 = v14 ^ 1;
      if (v13 > 0xFF)
        v117 = 1;
      else
        v117 = v14 ^ 1;
      if ((v117 & 1) == 0 && *(_QWORD *)v4 == 0x745F363172616863)
        v13 = 257;
      if (v13 > 0xFF)
        v116 = 1;
      if ((v116 & 1) == 0 && *(_QWORD *)v4 == 0x745F323372616863)
        v13 = 257;
      v118 = !v21;
      if (v13 > 0xFF)
        v118 = 1;
      if ((v118 & 1) == 0 && v4[8] == 114 && *(_QWORD *)v4 == 0x70786574736E6F63)
        v13 = 257;
      v120 = v14 ^ 1;
      if (v13 > 0xFF)
        v121 = 1;
      else
        v121 = v14 ^ 1;
      if ((v121 & 1) == 0 && *(_QWORD *)v4 == 0x657079746C636564)
        v13 = 257;
      if (v13 > 0xFF)
        v120 = 1;
      if ((v120 & 1) == 0 && *(_QWORD *)v4 == 0x7470656378656F6ELL)
        v13 = 257;
      v122 = v17 ^ 1;
      if (v13 > 0xFF)
        v122 = 1;
      if ((v122 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1920233580 && *(_DWORD *)v4 == 1819047278)
        v13 = 257;
      v124 = !v22;
      if (v13 > 0xFF)
        v124 = 1;
      if ((v124 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x7472657373615F63 && *(_QWORD *)v4 == 0x615F636974617473)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 1818321775 && *(_QWORD *)v4 == 0x6C5F646165726874)
        v13 = 257;
      v127 = v17 ^ 1;
      if (v13 > 0xFF)
        v127 = 1;
      if ((v127 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1953523043 && *(_DWORD *)v4 == 1668181859)
        v13 = 257;
      v129 = v14 ^ 1;
      if (v13 > 0xFF)
        v130 = 1;
      else
        v130 = v14 ^ 1;
      if ((v130 & 1) == 0 && *(_QWORD *)v4 == 0x7365726975716572)
        v13 = 257;
      if (v13 > 0xFF)
        v129 = 1;
      if ((v129 & 1) == 0 && *(_QWORD *)v4 == 0x74696177615F6F63)
        v13 = 257;
      v131 = !v21;
      if (v13 > 0xFF)
        v131 = 1;
      if ((v131 & 1) == 0 && v4[8] == 110 && *(_QWORD *)v4 == 0x72757465725F6F63)
        v13 = 257;
      v133 = v14 ^ 1;
      if (v13 > 0xFF)
        v133 = 1;
      if ((v133 & 1) == 0 && *(_QWORD *)v4 == 0x646C6569795F6F63)
        v13 = 257;
      v134 = v16 ^ 1;
      if (v13 > 0xFF)
        v135 = 1;
      else
        v135 = v16 ^ 1;
      if ((v135 & 1) == 0 && *((_WORD *)v4 + 2) == 25964 && *(_DWORD *)v4 == 1969516397)
        v13 = 257;
      if (v13 > 0xFF)
        v134 = 1;
      if ((v134 & 1) == 0 && *((_WORD *)v4 + 2) == 29810 && *(_DWORD *)v4 == 1869639017)
        v13 = 257;
      v138 = !v21;
      v139 = v13 > 0xFF || !v21;
      if ((v139 & 1) == 0 && v4[8] == 108 && *(_QWORD *)v4 == 0x61766574736E6F63)
        v13 = 257;
      if (v13 > 0xFF)
        v138 = 1;
      if ((v138 & 1) == 0 && v4[8] == 116 && *(_QWORD *)v4 == 0x696E6974736E6F63)
        v13 = 257;
      v142 = v17 ^ 1;
      if (v13 > 0xFF)
        v142 = 1;
      if ((v142 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1952397426 && *(_DWORD *)v4 == 1918986339)
        v13 = 257;
      v144 = v14 ^ 1;
      if (v13 > 0xFF)
        v144 = 1;
      if ((v144 & 1) == 0 && *(_QWORD *)v4 == 0x363174616F6C465FLL)
        v13 = 257;
      v145 = v16 ^ 1;
      if (v13 > 0xFF)
        v146 = 1;
      else
        v146 = v16 ^ 1;
      if ((v146 & 1) == 0 && *((_WORD *)v4 + 2) == 28021 && *(_DWORD *)v4 == 1667449183)
        v13 = 257;
      if (v13 > 0xFF)
        v145 = 1;
      if ((v145 & 1) == 0 && *((_WORD *)v4 + 2) == 29795 && *(_DWORD *)v4 == 1634879071)
        v13 = 257;
      if (v3 == 4 && v13 <= 0xFF && *(_DWORD *)v4 == 1952535391)
        v13 = 257;
      v149 = !v20;
      v150 = v13 > 0xFF || !v20;
      if ((v150 & 1) == 0 && *((_WORD *)v4 + 4) == 12851 && *(_QWORD *)v4 == 0x6C616D696365445FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v149 = 1;
      if ((v149 & 1) == 0 && *((_WORD *)v4 + 4) == 13366 && *(_QWORD *)v4 == 0x6C616D696365445FLL)
        v13 = 257;
      v153 = !v95;
      if (v13 > 0xFF)
        v153 = 1;
      if ((v153 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x3832316C616D6963 && *(_QWORD *)v4 == 0x6C616D696365445FLL)
        v13 = 257;
      v155 = v16 ^ 1;
      if (v13 > 0xFF)
        v155 = 1;
      if ((v155 & 1) == 0 && *((_WORD *)v4 + 2) == 27756 && *(_DWORD *)v4 == 1970167647)
        v13 = 257;
      v157 = !v21;
      if (v13 > 0xFF)
        v157 = 1;
      if ((v157 & 1) == 0 && v4[8] == 102 && *(_QWORD *)v4 == 0x6F6E67696C615F5FLL)
        v13 = 257;
      v159 = !v95;
      if (v13 > 0xFF)
        v159 = 1;
      if ((v159 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x6574756269727474 && *(_QWORD *)v4 == 0x6269727474615F5FLL)
        v13 = 257;
      if (v3 == 21 && v13 <= 0xFF)
      {
        v161 = 0;
        if (*(_QWORD *)(v4 + 13) == 0x727078655F65736FLL
          && *((_QWORD *)v4 + 1) == 0x65736F6F68635F6ELL
          && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
        {
          v13 = 257;
        }
      }
      else
      {
        v161 = v3 == 18;
        if (v3 == 18 && v13 <= 0xFF)
        {
          if (*((_WORD *)v4 + 8) == 26223
            && *((_QWORD *)v4 + 1) == 0x74657366666F5F6ELL
            && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          {
            v13 = 257;
          }
          v161 = 1;
        }
      }
      v166 = !v19;
      if (v13 > 0xFF)
        v166 = 1;
      if ((v166 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x454C49465F6E6974 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
        v13 = 257;
      v168 = !v161;
      if (v13 > 0xFF)
        v168 = 1;
      if ((v168 & 1) == 0)
      {
        v169 = *((_WORD *)v4 + 8) == 20047 && *((_QWORD *)v4 + 1) == 0x4954434E55465F6ELL;
        if (v169 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
      }
      v171 = !v19;
      if (v13 > 0xFF)
        v171 = 1;
      if ((v171 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x454E494C5F6E6974 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
        v13 = 257;
      if (v3 == 16 && v13 <= 0xFF)
      {
        v173 = 0;
        v174 = 0;
        if (*((_QWORD *)v4 + 1) == 0x4E4D554C4F435F6ELL && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
LABEL_767:
        if (v3 == 16
          && v13 <= 0xFF
          && *((_QWORD *)v4 + 1) == 0x6772615F61765F6ELL
          && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
        {
          v13 = 257;
        }
        goto LABEL_803;
      }
      v174 = v3 == 25;
      if (v3 == 25 && v13 <= 0xFF)
      {
        v173 = 0;
        if (v4[24] == 110
          && *((_QWORD *)v4 + 2) == 0x6F697461636F6C5FLL
          && *((_QWORD *)v4 + 1) == 0x656372756F735F6ELL
          && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
        {
          v13 = 257;
        }
        v174 = 1;
      }
      else
      {
        v173 = v3 == 28;
        if (v3 != 28 || v13 > 0xFF)
          goto LABEL_767;
        if (*((_DWORD *)v4 + 6) == 1885300076
          && *((_QWORD *)v4 + 2) == 0x62697461706D6F63
          && *((_QWORD *)v4 + 1) == 0x5F73657079745F6ELL
          && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
        {
          v13 = 257;
        }
        v173 = 1;
      }
LABEL_803:
      v183 = !v22;
      if (v13 > 0xFF)
        v183 = 1;
      if ((v183 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x5F5F6E6F69736E65 && *(_QWORD *)v4 == 0x736E657478655F5FLL)
        v13 = 257;
      v185 = !v20;
      if (v13 > 0xFF)
        v185 = 1;
      if ((v185 & 1) == 0 && *((_WORD *)v4 + 4) == 14386 && *(_QWORD *)v4 == 0x3174616F6C665F5FLL)
        v13 = 257;
      v187 = v14 ^ 1;
      if (v13 > 0xFF)
        v187 = 1;
      if ((v187 & 1) == 0 && *(_QWORD *)v4 == 0x3832316D62695F5FLL)
        v13 = 257;
      v188 = v16 ^ 1;
      if (v13 > 0xFF)
        v188 = 1;
      if ((v188 & 1) == 0 && *((_WORD *)v4 + 2) == 26465 && *(_DWORD *)v4 == 1835622239)
        v13 = 257;
      v190 = v14 ^ 1;
      if (v13 > 0xFF)
        v190 = 1;
      if ((v190 & 1) == 0 && *(_QWORD *)v4 == 0x383231746E695F5FLL)
        v13 = 257;
      v191 = !v21;
      if (v13 > 0xFF)
        v191 = 1;
      if ((v191 & 1) == 0 && v4[8] == 95 && *(_QWORD *)v4 == 0x5F6C6562616C5F5FLL)
        v13 = 257;
      v193 = v16 ^ 1;
      if (v13 > 0xFF)
        v193 = 1;
      if ((v193 & 1) == 0 && *((_WORD *)v4 + 2) == 27745 && *(_DWORD *)v4 == 1701994335)
        v13 = 257;
      v195 = v14 ^ 1;
      if (v13 > 0xFF)
        v195 = 1;
      if ((v195 & 1) == 0)
      {
        v196 = 0;
        v197 = *(_QWORD *)v4 == 0x6461657268745F5FLL;
        goto LABEL_862;
      }
      if (v3 == 12 && v13 <= 0xFF)
      {
        v196 = 0;
        v197 = *((_DWORD *)v4 + 2) == 1600081487 && *(_QWORD *)v4 == 0x4954434E55465F5FLL;
LABEL_862:
        if (v197)
          v13 = 257;
        goto LABEL_864;
      }
      v196 = v3 == 19;
      if (v3 == 19 && v13 <= 0xFF)
      {
        if (*(_QWORD *)(v4 + 11) == 0x5F5F4E4F4954434ELL
          && *((_QWORD *)v4 + 1) == 0x4F4954434E55465FLL
          && *(_QWORD *)v4 == 0x5954544552505F5FLL)
        {
          v13 = 257;
        }
        v196 = 1;
      }
LABEL_864:
      v198 = !v95;
      if (v13 > 0xFF)
        v198 = 1;
      if ((v198 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x657079745F6F7475 && *(_QWORD *)v4 == 0x745F6F7475615F5FLL)
        v13 = 257;
      v200 = v16 ^ 1;
      if (v13 > 0xFF)
        v200 = 1;
      if ((v200 & 1) == 0 && *((_WORD *)v4 + 2) == 26223 && *(_DWORD *)v4 == 1701869940)
        v13 = 257;
      v202 = !v22;
      if (v13 > 0xFF)
        v202 = 1;
      if ((v202 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x5F5F454D414E4443 && *(_QWORD *)v4 == 0x4E44434E55465F5FLL)
        v13 = 257;
      v204 = !v95;
      if (v13 > 0xFF)
        v204 = 1;
      if ((v204 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x5F5F474953434E55 && *(_QWORD *)v4 == 0x4953434E55465F5FLL)
        v13 = 257;
      v206 = !v22;
      if (v13 > 0xFF)
        v206 = 1;
      if ((v206 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x5F5F4E4F4954434ELL && *(_QWORD *)v4 == 0x54434E55465F5F4CLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v208 = 0;
        if (*((_DWORD *)v4 + 2) == 1600079689 && *(_QWORD *)v4 == 0x53434E55465F5F4CLL)
          v13 = 257;
      }
      else
      {
        v208 = v3 == 20;
        if (v3 == 20 && v13 <= 0xFF)
        {
          if (*((_DWORD *)v4 + 4) == 1936941420
            && *((_QWORD *)v4 + 1) == 0x635F656361667265
            && *(_QWORD *)v4 == 0x746E695F73695F5FLL)
          {
            v13 = 257;
          }
          v208 = 1;
        }
      }
      v212 = !v95;
      if (v13 > 0xFF)
        v212 = 1;
      if ((v212 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x64656C6165735F73 && *(_QWORD *)v4 == 0x6165735F73695F5FLL)
        v13 = 257;
      if (v3 == 17 && v13 <= 0xFF)
      {
        v215 = v4[16] == 101 && *((_QWORD *)v4 + 1) == 0x6C62697463757274 && *(_QWORD *)v4 == 0x7365645F73695F5FLL;
      }
      else
      {
        if (v3 != 27 || v13 > 0xFF)
          goto LABEL_952;
        v215 = *(_QWORD *)(v4 + 19) == 0x656C626974637572
            && *((_QWORD *)v4 + 2) == 0x6974637572747365
            && *((_QWORD *)v4 + 1) == 0x645F796C6C616976
            && *(_QWORD *)v4 == 0x6972745F73695F5FLL;
      }
      if (v215)
        v13 = 257;
LABEL_952:
      v218 = !v174;
      if (v13 > 0xFF)
        v218 = 1;
      if ((v218 & 1) == 0)
      {
        v219 = v4[24] == 101 && *((_QWORD *)v4 + 2) == 0x6C62697463757274;
        v220 = v219 && *((_QWORD *)v4 + 1) == 0x7365645F776F7268;
        if (v220 && *(_QWORD *)v4 == 0x746F6E5F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 23 && v13 <= 0xFF)
      {
        v222 = *(_QWORD *)(v4 + 15) == 0x656C62616E676973 && *((_QWORD *)v4 + 1) == 0x7373615F776F7268;
        if (v222 && *(_QWORD *)v4 == 0x746F6E5F73695F5FLL)
          v13 = 257;
      }
      v224 = !v161;
      if (v13 > 0xFF)
        v224 = 1;
      if ((v224 & 1) == 0)
      {
        v225 = *((_WORD *)v4 + 8) == 25964 && *((_QWORD *)v4 + 1) == 0x6269746375727473;
        if (v225 && *(_QWORD *)v4 == 0x6E6F635F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 26 && v13 <= 0xFF)
      {
        v227 = 0;
        if (*((_WORD *)v4 + 12) == 25964
          && *((_QWORD *)v4 + 2) == 0x6269746375727473
          && *((_QWORD *)v4 + 1) == 0x6E6F635F776F7268
          && *(_QWORD *)v4 == 0x746F6E5F73695F5FLL)
        {
          v13 = 257;
        }
      }
      else
      {
        v227 = v3 == 15;
        if (v3 == 15 && v13 <= 0xFF)
        {
          if (*(_QWORD *)(v4 + 7) == 0x656C62616E676973 && *(_QWORD *)v4 == 0x7373615F73695F5FLL)
            v13 = 257;
          v227 = 1;
        }
      }
      v232 = !v174;
      v233 = v13 > 0xFF || !v174;
      if ((v233 & 1) == 0)
      {
        v234 = v4[24] == 110 && *((_QWORD *)v4 + 2) == 0x67697373615F6576;
        v235 = v234 && *((_QWORD *)v4 + 1) == 0x6F6D5F776F726874;
        if (v235 && *(_QWORD *)v4 == 0x6F6E5F7361685F5FLL)
          v13 = 257;
      }
      if (v13 > 0xFF)
        v232 = 1;
      if ((v232 & 1) == 0)
      {
        v237 = v4[24] == 110 && *((_QWORD *)v4 + 2) == 0x67697373615F6576;
        v238 = v237 && *((_QWORD *)v4 + 1) == 0x6F6D5F6C61697669;
        if (v238 && *(_QWORD *)v4 == 0x72745F7361685F5FLL)
          v13 = 257;
      }
      if (v3 == 30 && v13 <= 0xFF)
      {
        v240 = *(_QWORD *)(v4 + 22) == 0x726F746375727473 && *((_QWORD *)v4 + 2) == 0x74736E6F635F6576;
        v241 = v240 && *((_QWORD *)v4 + 1) == 0x6F6D5F6C61697669;
        if (v241 && *(_QWORD *)v4 == 0x72745F7361685F5FLL)
          v13 = 257;
      }
      v243 = !v208;
      if (v13 > 0xFF)
        v243 = 1;
      if ((v243 & 1) == 0)
      {
        v244 = *((_DWORD *)v4 + 4) == 1852270963 && *((_QWORD *)v4 + 1) == 0x73615F776F726874;
        if (v244 && *(_QWORD *)v4 == 0x6F6E5F7361685F5FLL)
          v13 = 257;
      }
      v246 = !v161;
      if (v13 > 0xFF)
        v246 = 1;
      if ((v246 & 1) == 0)
      {
        v247 = *((_WORD *)v4 + 8) == 31088 && *((_QWORD *)v4 + 1) == 0x6F635F776F726874;
        if (v247 && *(_QWORD *)v4 == 0x6F6E5F7361685F5FLL)
          v13 = 257;
      }
      v249 = !v174;
      if (v13 > 0xFF)
        v249 = 1;
      if ((v249 & 1) == 0)
      {
        v250 = v4[24] == 114 && *((_QWORD *)v4 + 2) == 0x6F7463757274736ELL;
        v251 = v250 && *((_QWORD *)v4 + 1) == 0x6F635F776F726874;
        if (v251 && *(_QWORD *)v4 == 0x6F6E5F7361685F5FLL)
          v13 = 257;
      }
      v253 = !v208;
      if (v13 > 0xFF)
        v253 = 1;
      if ((v253 & 1) == 0)
      {
        v254 = *((_DWORD *)v4 + 4) == 1852270963 && *((_QWORD *)v4 + 1) == 0x73615F6C61697669;
        if (v254 && *(_QWORD *)v4 == 0x72745F7361685F5FLL)
          v13 = 257;
      }
      v256 = !v161;
      if (v13 > 0xFF)
        v256 = 1;
      if ((v256 & 1) == 0)
      {
        v257 = *((_WORD *)v4 + 8) == 31088 && *((_QWORD *)v4 + 1) == 0x6F635F6C61697669;
        if (v257 && *(_QWORD *)v4 == 0x72745F7361685F5FLL)
          v13 = 257;
      }
      v259 = !v174;
      if (v13 > 0xFF)
        v259 = 1;
      if ((v259 & 1) == 0)
      {
        v260 = v4[24] == 114 && *((_QWORD *)v4 + 2) == 0x6F7463757274736ELL;
        v261 = v260 && *((_QWORD *)v4 + 1) == 0x6F635F6C61697669;
        if (v261 && *(_QWORD *)v4 == 0x72745F7361685F5FLL)
          v13 = 257;
      }
      if (v3 == 24 && v13 <= 0xFF)
      {
        v263 = *((_QWORD *)v4 + 2) == 0x726F746375727473 && *((_QWORD *)v4 + 1) == 0x65645F6C61697669;
        if (v263 && *(_QWORD *)v4 == 0x72745F7361685F5FLL)
          v13 = 257;
      }
      if (v3 == 24 && v13 <= 0xFF)
      {
        v265 = *((_QWORD *)v4 + 2) == 0x726F746375727473 && *((_QWORD *)v4 + 1) == 0x65645F6C61757472;
        if (v265 && *(_QWORD *)v4 == 0x69765F7361685F5FLL)
          v13 = 257;
      }
      v267 = !v22;
      if (v13 > 0xFF)
        v267 = 1;
      if ((v267 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x7463617274736261 && *(_QWORD *)v4 == 0x7362615F73695F5FLL)
        v13 = 257;
      v269 = !v19;
      if (v13 > 0xFF)
        v269 = 1;
      if ((v269 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x6574616765726767 && *(_QWORD *)v4 == 0x6767615F73695F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 1718574949 && *(_QWORD *)v4 == 0x7361625F73695F5FLL)
        v13 = 257;
      v272 = !v20;
      if (v13 > 0xFF)
        v272 = 1;
      if ((v272 & 1) == 0 && *((_WORD *)v4 + 4) == 29555 && *(_QWORD *)v4 == 0x616C635F73695F5FLL)
        v13 = 257;
      v274 = !v196;
      if (v13 > 0xFF)
        v274 = 1;
      if ((v274 & 1) == 0)
      {
        v275 = *(_QWORD *)(v4 + 11) == 0x6F745F656C626974 && *((_QWORD *)v4 + 1) == 0x656C626974726576;
        if (v275 && *(_QWORD *)v4 == 0x6E6F635F73695F5FLL)
          v13 = 257;
      }
      v277 = !v20;
      if (v13 > 0xFF)
        v277 = 1;
      if ((v277 & 1) == 0 && *((_WORD *)v4 + 4) == 31092 && *(_QWORD *)v4 == 0x706D655F73695F5FLL)
        v13 = 257;
      v279 = !v21;
      if (v13 > 0xFF)
        v279 = 1;
      if ((v279 & 1) == 0 && v4[8] == 109 && *(_QWORD *)v4 == 0x756E655F73695F5FLL)
        v13 = 257;
      v281 = !v20;
      if (v13 > 0xFF)
        v281 = 1;
      if ((v281 & 1) == 0 && *((_WORD *)v4 + 4) == 27745 && *(_QWORD *)v4 == 0x6E69665F73695F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v283 = *(_QWORD *)v4;
        v284 = *((unsigned int *)v4 + 2) == 1818325605;
LABEL_1217:
        v285 = 0x74696C5F73695F5FLL;
        goto LABEL_1218;
      }
      if (v3 == 17 && v13 <= 0xFF)
      {
        v283 = *(_QWORD *)v4;
        v284 = v4[16] == 101 && *((_QWORD *)v4 + 1) == 0x7079745F6C617265;
        goto LABEL_1217;
      }
      v310 = v14 ^ 1;
      if (v13 > 0xFF)
        v310 = 1;
      if ((v310 & 1) == 0)
      {
        v286 = *(_QWORD *)v4 == 0x646F705F73695F5FLL;
        goto LABEL_1221;
      }
      if (v3 != 16 || v13 > 0xFF)
        goto LABEL_1223;
      v283 = *(_QWORD *)v4;
      v284 = *((_QWORD *)v4 + 1) == 0x63696870726F6D79;
      v285 = 0x6C6F705F73695F5FLL;
LABEL_1218:
      v286 = v284 && v283 == v285;
LABEL_1221:
      if (v286)
        v13 = 257;
LABEL_1223:
      v287 = !v208;
      if (v13 > 0xFF)
        v287 = 1;
      if ((v287 & 1) == 0)
      {
        v288 = *((_DWORD *)v4 + 4) == 1953853305 && *((_QWORD *)v4 + 1) == 0x616C5F647261646ELL;
        if (v288 && *(_QWORD *)v4 == 0x6174735F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 1818323318 && *(_QWORD *)v4 == 0x6972745F73695F5FLL)
        v13 = 257;
      v291 = !v174;
      if (v13 > 0xFF)
        v291 = 1;
      if ((v291 & 1) == 0)
      {
        v292 = v4[24] == 101 && *((_QWORD *)v4 + 2) == 0x6C62616E67697373;
        v293 = v292 && *((_QWORD *)v4 + 1) == 0x615F796C6C616976;
        if (v293 && *(_QWORD *)v4 == 0x6972745F73695F5FLL)
          v13 = 257;
      }
      v295 = !v173;
      if (v13 > 0xFF)
        v295 = 1;
      if ((v295 & 1) == 0)
      {
        v296 = *((_DWORD *)v4 + 6) == 1701601897 && *((_QWORD *)v4 + 2) == 0x7463757274736E6FLL;
        v297 = v296 && *((_QWORD *)v4 + 1) == 0x635F796C6C616976;
        if (v297 && *(_QWORD *)v4 == 0x6972745F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 23 && v13 <= 0xFF)
      {
        v299 = *(_QWORD *)(v4 + 15) == 0x656C626179706F63 && *((_QWORD *)v4 + 1) == 0x635F796C6C616976;
        if (v299 && *(_QWORD *)v4 == 0x6972745F73695F5FLL)
          v13 = 257;
      }
      v301 = !v20;
      if (v13 > 0xFF)
        v301 = 1;
      if ((v301 & 1) == 0 && *((_WORD *)v4 + 4) == 28271 && *(_QWORD *)v4 == 0x696E755F73695F5FLL)
        v13 = 257;
      v728 = v20;
      v729 = v15;
      v726 = v17;
      v727 = v16;
      v722 = v22;
      v723 = v95;
      v724 = v208;
      v725 = v161;
      v720 = v196;
      v721 = v19;
      if (v3 == 35 && v13 <= 0xFF)
      {
        v303 = memcmp(v4, "__has_unique_object_representations", 0x23uLL);
        v19 = v721;
        v208 = v724;
        v161 = v725;
        v196 = v720;
        v22 = v722;
        v95 = v723;
        v17 = v726;
        v16 = v727;
        v304 = v303 == 0;
        LOBYTE(v20) = v728;
        v15 = v729;
        goto LABEL_1339;
      }
      if (v3 == 17 && v13 <= 0xFF)
      {
        v305 = *(_QWORD *)v4;
        v306 = v4[16] == 101 && *((_QWORD *)v4 + 1) == 0x7079745F676E6979;
        v307 = 0x6C7265646E755F5FLL;
        goto LABEL_1336;
      }
      if (v3 == 30 && v13 <= 0xFF)
      {
        v305 = *(_QWORD *)v4;
        v306 = *(_QWORD *)(v4 + 22) == 0x797261726F706D65
            && *((_QWORD *)v4 + 2) == 0x6D65745F6F745F73
            && *((_QWORD *)v4 + 1) == 0x646E69625F65636ELL;
        v307 = 0x6572656665725F5FLL;
        goto LABEL_1336;
      }
      if (v3 == 16
        && v13 <= 0xFF
        && *((_QWORD *)v4 + 1) == 0x727078655F65756CLL
        && *(_QWORD *)v4 == 0x61766C5F73695F5FLL)
      {
        v13 = 257;
      }
      if (v3 == 16 && v13 <= 0xFF)
      {
        v305 = *(_QWORD *)v4;
        v306 = *((_QWORD *)v4 + 1) == 0x727078655F65756CLL;
        v307 = 0x6176725F73695F5FLL;
LABEL_1336:
        v304 = v306 && v305 == v307;
LABEL_1339:
        if (v304)
          v13 = 257;
      }
      v313 = !v227;
      if (v13 > 0xFF)
        v313 = 1;
      if ((v313 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x636974656D687469 && *(_QWORD *)v4 == 0x6972615F73695F5FLL)
        v13 = 257;
      v315 = !v196;
      if (v13 > 0xFF)
        v315 = 1;
      if ((v315 & 1) == 0)
      {
        v316 = *(_QWORD *)(v4 + 11) == 0x746E696F705F676ELL && *((_QWORD *)v4 + 1) == 0x6F705F676E697461;
        if (v316 && *(_QWORD *)v4 == 0x6F6C665F73695F5FLL)
          v13 = 257;
      }
      v318 = !v22;
      if (v13 > 0xFF)
        v318 = 1;
      if ((v318 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x6C61726765746E69 && *(_QWORD *)v4 == 0x746E695F73695F5FLL)
        v13 = 257;
      v320 = !v161;
      if (v13 > 0xFF)
        v320 = 1;
      if ((v320 & 1) == 0)
      {
        v321 = *((_WORD *)v4 + 8) == 25968 && *((_QWORD *)v4 + 1) == 0x79745F6574656C70;
        if (v321 && *(_QWORD *)v4 == 0x6D6F635F73695F5FLL)
          v13 = 257;
      }
      v323 = !v21;
      if (v13 > 0xFF)
        v323 = 1;
      if ((v323 & 1) == 0 && v4[8] == 100 && *(_QWORD *)v4 == 0x696F765F73695F5FLL)
        v13 = 257;
      v325 = !v20;
      if (v13 > 0xFF)
        v325 = 1;
      if ((v325 & 1) == 0 && *((_WORD *)v4 + 4) == 31073 && *(_QWORD *)v4 == 0x7272615F73695F5FLL)
        v13 = 257;
      v327 = !v22;
      if (v13 > 0xFF)
        v327 = 1;
      if ((v327 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x6E6F6974636E7566 && *(_QWORD *)v4 == 0x6E75665F73695F5FLL)
        v13 = 257;
      v329 = !v19;
      if (v13 > 0xFF)
        v329 = 1;
      if ((v329 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x65636E6572656665 && *(_QWORD *)v4 == 0x6665725F73695F5FLL)
        v13 = 257;
      if (v3 == 21 && v13 <= 0xFF)
      {
        v331 = *(_QWORD *)(v4 + 13) == 0x65636E6572656665 && *((_QWORD *)v4 + 1) == 0x656665725F65756CLL;
        if (v331 && *(_QWORD *)v4 == 0x61766C5F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 21 && v13 <= 0xFF)
      {
        v333 = *(_QWORD *)v4;
        v334 = *(_QWORD *)(v4 + 13) == 0x65636E6572656665 && *((_QWORD *)v4 + 1) == 0x656665725F65756CLL;
        v335 = 0x6176725F73695F5FLL;
      }
      else
      {
        if (v3 != 16 || v13 > 0xFF)
          goto LABEL_1435;
        v333 = *(_QWORD *)v4;
        v334 = *((_QWORD *)v4 + 1) == 0x6C61746E656D6164;
        v335 = 0x6E75665F73695F5FLL;
      }
      if (v334 && v333 == v335)
        v13 = 257;
LABEL_1435:
      v337 = !v95;
      v338 = v13 > 0xFF || !v95;
      if ((v338 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x7463656A626F5F73 && *(_QWORD *)v4 == 0x6A626F5F73695F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v337 = 1;
      if ((v337 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x72616C6163735F73 && *(_QWORD *)v4 == 0x6163735F73695F5FLL)
        v13 = 257;
      v341 = !v22;
      if (v13 > 0xFF)
        v341 = 1;
      if ((v341 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x646E756F706D6F63 && *(_QWORD *)v4 == 0x6D6F635F73695F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v343 = *(_QWORD *)v4;
        v344 = *((unsigned int *)v4 + 2) == 1919251566;
        v345 = 0x696F705F73695F5FLL;
      }
      else
      {
        if (v3 != 26 || v13 > 0xFF)
          goto LABEL_1477;
        v343 = *(_QWORD *)v4;
        v196 = v720;
        v344 = *((_WORD *)v4 + 12) == 29285
            && *((_QWORD *)v4 + 2) == 0x746E696F705F7463
            && *((_QWORD *)v4 + 1) == 0x656A626F5F726562;
        v345 = 0x6D656D5F73695F5FLL;
      }
      if (v344 && v343 == v345)
        v13 = 257;
LABEL_1477:
      v348 = !v173;
      if (v13 > 0xFF)
        v348 = 1;
      if ((v348 & 1) == 0)
      {
        v349 = *((_DWORD *)v4 + 6) == 1919251566 && *((_QWORD *)v4 + 2) == 0x696F705F6E6F6974;
        v350 = v349 && *((_QWORD *)v4 + 1) == 0x636E75665F726562;
        if (v350 && *(_QWORD *)v4 == 0x6D656D5F73695F5FLL)
          v13 = 257;
      }
      v352 = !v196;
      if (v13 > 0xFF)
        v352 = 1;
      if ((v352 & 1) == 0)
      {
        v353 = *(_QWORD *)(v4 + 11) == 0x7265746E696F705FLL && *((_QWORD *)v4 + 1) == 0x6E696F705F726562;
        if (v353 && *(_QWORD *)v4 == 0x6D656D5F73695F5FLL)
          v13 = 257;
      }
      v355 = !v20;
      if (v13 > 0xFF)
        v355 = 1;
      if ((v355 & 1) == 0 && *((_WORD *)v4 + 4) == 29811 && *(_QWORD *)v4 == 0x6E6F635F73695F5FLL)
        v13 = 257;
      v357 = !v22;
      if (v13 > 0xFF)
        v357 = 1;
      if ((v357 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x656C6974616C6F76 && *(_QWORD *)v4 == 0x6C6F765F73695F5FLL)
        v13 = 257;
      v359 = !v95;
      if (v13 > 0xFF)
        v359 = 1;
      if ((v359 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x64656E6769735F73 && *(_QWORD *)v4 == 0x6769735F73695F5FLL)
        v13 = 257;
      v361 = !v22;
      if (v13 > 0xFF)
        v361 = 1;
      if ((v361 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x64656E6769736E75 && *(_QWORD *)v4 == 0x736E755F73695F5FLL)
        v13 = 257;
      v363 = !v21;
      if (v13 > 0xFF)
        v363 = 1;
      if ((v363 & 1) == 0 && v4[8] == 101 && *(_QWORD *)v4 == 0x6D61735F73695F5FLL)
        v13 = 257;
      if (v3 == 16 && v13 <= 0xFF)
      {
        v365 = *(_QWORD *)v4;
        v366 = *((_QWORD *)v4 + 1) == 0x656C626974726576;
        v367 = 0x6E6F635F73695F5FLL;
      }
      else
      {
        if (v3 != 12 || v13 > 0xFF)
          goto LABEL_1553;
        v365 = *(_QWORD *)v4;
        v366 = *((_DWORD *)v4 + 2) == 1802396018;
        v367 = 0x5F79617272615F5FLL;
      }
      if (v366 && v365 == v367)
        v13 = 257;
LABEL_1553:
      v369 = !v19;
      if (v13 > 0xFF)
        v369 = 1;
      if ((v369 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x746E657478655F79 && *(_QWORD *)v4 == 0x5F79617272615F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v371 = *(_QWORD *)v4;
        v372 = *((_DWORD *)v4 + 2) == 1935761253;
        v373 = 0x6D61735F73695F5FLL;
      }
      else
      {
        if (v3 != 17 || v13 > 0xFF)
          goto LABEL_1575;
        v371 = *(_QWORD *)v4;
        v372 = v4[16] == 114 && *((_QWORD *)v4 + 1) == 0x65666675625F6C61;
        v373 = 0x74656D5F73695F5FLL;
      }
      if (v372 && v371 == v373)
        v13 = 257;
LABEL_1575:
      v375 = !v174;
      if (v13 > 0xFF)
        v375 = 1;
      if ((v375 & 1) == 0)
      {
        v376 = v4[24] == 101 && *((_QWORD *)v4 + 2) == 0x65746E696F705F72;
        v377 = v376 && *((_QWORD *)v4 + 1) == 0x65666675625F6C61;
        if (v377 && *(_QWORD *)v4 == 0x74656D5F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 32 && v13 <= 0xFF)
      {
        v379 = *((_QWORD *)v4 + 3) == 0x6C656E6E6168635FLL && *((_QWORD *)v4 + 2) == 0x657275747865745FLL;
        v380 = v379 && *((_QWORD *)v4 + 1) == 0x726F6C6F635F6C61;
        if (v380 && *(_QWORD *)v4 == 0x74656D5F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 32 && v13 <= 0xFF)
      {
        v382 = *(_QWORD *)v4;
        v383 = *((_QWORD *)v4 + 1);
        v384 = 0x68747065645F6C61;
        v385 = *((_QWORD *)v4 + 3) == 0x6C656E6E6168635FLL && *((_QWORD *)v4 + 2) == 0x657275747865745FLL;
      }
      else
      {
        v719 = v21;
        v386 = v14;
        v387 = v174;
        v388 = v173;
        v389 = v5;
        v390 = v3 == 51;
        if (v3 == 51 && v13 <= 0xFF)
        {
          v391 = 0;
          if (!memcmp(v4, "__is_metal_explicit_layout_imageblock_slice_storage", 0x33uLL))
            v13 = 257;
          v390 = 1;
        }
        else
        {
          v391 = v3 == 44;
          if (v3 == 44 && v13 <= 0xFF)
          {
            if (!memcmp(v4, "__is_metal_explicit_layout_imageblock_struct", 0x2CuLL))
              v13 = 257;
            v391 = 1;
          }
        }
        if (v390 && v13 <= 0xFF && !memcmp(v4, "__is_metal_implicit_layout_imageblock_slice_storage", 0x33uLL))
          v13 = 257;
        v5 = v389;
        v392 = !v391;
        if (v13 > 0xFF)
          v392 = 1;
        v173 = v388;
        if ((v392 & 1) == 0 && !memcmp(v4, "__is_metal_implicit_layout_imageblock_struct", 0x2CuLL))
          v13 = 257;
        LOBYTE(v20) = v728;
        v15 = v729;
        v17 = v726;
        v16 = v727;
        v22 = v722;
        v95 = v723;
        v208 = v724;
        v161 = v725;
        v19 = v721;
        v174 = v387;
        LOBYTE(v14) = v386;
        if (v3 != 27)
        {
          v21 = v719;
          goto LABEL_1640;
        }
        v21 = v719;
        if (v13 > 0xFF)
          goto LABEL_1640;
        v382 = *(_QWORD *)v4;
        v383 = *((_QWORD *)v4 + 1);
        v385 = *(_QWORD *)(v4 + 19) == 0x6761745F6E6F6974 && *((_QWORD *)v4 + 2) == 0x5F6E6F6974636573;
        v384 = 0x7265746E695F6C61;
      }
      if (v385 && v383 == v384 && v382 == 0x74656D5F73695F5FLL)
        v13 = 257;
LABEL_1640:
      v395 = !v174;
      if (v13 > 0xFF)
        v395 = 1;
      if ((v395 & 1) == 0)
      {
        v396 = v4[24] == 101 && *((_QWORD *)v4 + 2) == 0x766974696D697270;
        v397 = v396 && *((_QWORD *)v4 + 1) == 0x5F6873656D5F6C61;
        if (v397 && *(_QWORD *)v4 == 0x74656D5F73695F5FLL)
          v13 = 257;
      }
      if (v3 == 22 && v13 <= 0xFF)
      {
        v399 = 0;
        if (*(_QWORD *)(v4 + 14) == 0x7865747265765F68
          && *((_QWORD *)v4 + 1) == 0x5F6873656D5F6C61
          && *(_QWORD *)v4 == 0x74656D5F73695F5FLL)
        {
          v13 = 257;
        }
      }
      else
      {
        v399 = v3 == 37;
        if (v3 != 37 || v13 > 0xFF)
        {
          if (v3 == 35 && v13 <= 0xFF)
          {
            v403 = v4;
            v404 = "__is_metal_simdgroup_matrix_element";
            v405 = 35;
LABEL_1677:
            v406 = memcmp(v403, v404, v405);
            v19 = v721;
            v22 = v722;
            v95 = v723;
            if (!v406)
              v13 = 257;
          }
          else if (v3 == 55 && v13 <= 0xFF)
          {
            v403 = v4;
            v404 = "__is_metal_color_texture_imageblock_slice_storage_valid";
            v405 = 55;
            goto LABEL_1677;
          }
          LOBYTE(v20) = v728;
          v15 = v729;
          v17 = v726;
          v16 = v727;
          v208 = v724;
          v161 = v725;
          goto LABEL_1680;
        }
        v402 = memcmp(v4, "__is_metal_patch_control_point_struct", 0x25uLL);
        v19 = v721;
        v208 = v724;
        v161 = v725;
        v22 = v722;
        v95 = v723;
        v17 = v726;
        v16 = v727;
        v23 = v402 == 0;
        LOBYTE(v20) = v728;
        v15 = v729;
        if (v23)
          v13 = 257;
        v399 = 1;
      }
LABEL_1680:
      v407 = !v161;
      v408 = v13 > 0xFF || !v161;
      if ((v408 & 1) == 0)
      {
        v409 = *((_WORD *)v4 + 8) == 24415 && *((_QWORD *)v4 + 1) == 0x6E72657478655F65;
        if (v409 && *(_QWORD *)v4 == 0x7461766972705F5FLL)
          v13 = 257;
      }
      if (v13 > 0xFF)
        v407 = 1;
      if ((v407 & 1) == 0)
      {
        v411 = *((_WORD *)v4 + 8) == 24415 && *((_QWORD *)v4 + 1) == 0x657461766972705FLL;
        if (v411 && *(_QWORD *)v4 == 0x656C75646F6D5F5FLL)
          v13 = 257;
      }
      if (v3 == 36 && v13 <= 0xFF)
      {
        v413 = memcmp(v4, "__builtin_ptrauth_type_discriminator", 0x24uLL);
        v19 = v721;
        v208 = v724;
        v161 = v725;
        v22 = v722;
        v95 = v723;
        v17 = v726;
        v16 = v727;
        v23 = v413 == 0;
        LOBYTE(v20) = v728;
        v15 = v729;
        if (v23)
          v13 = 257;
      }
      v414 = !v173;
      if (v13 > 0xFF)
        v414 = 1;
      if ((v414 & 1) == 0)
      {
        v415 = *((_DWORD *)v4 + 6) == 1701999988 && *((_QWORD *)v4 + 2) == 0x616E6769735F6570;
        v416 = v415 && *((_QWORD *)v4 + 1) == 0x79745F756E785F6ELL;
        if (v416 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
      }
      if (v3 == 26 && v13 <= 0xFF)
      {
        v418 = 0;
        v419 = *(_QWORD *)v4;
        v420 = *((_QWORD *)v4 + 1);
        v421 = *((_QWORD *)v4 + 2);
        v422 = *((unsigned __int16 *)v4 + 12) == 31090;
        v423 = 0x616D6D75735F6570;
        goto LABEL_1727;
      }
      if (v3 == 30 && v13 <= 0xFF)
      {
        v418 = 0;
        v419 = *(_QWORD *)v4;
        v420 = *((_QWORD *)v4 + 1);
        v421 = *((_QWORD *)v4 + 2);
        v422 = *(_QWORD *)(v4 + 22) == 0x656C62697461706DLL;
        v423 = 0x706D6F635F736570;
LABEL_1727:
        v424 = v422 && v421 == v423;
        v425 = 0x79745F756E785F6ELL;
LABEL_1731:
        if (v424 && v420 == v425 && v419 == 0x69746C6975625F5FLL)
          v13 = 257;
        goto LABEL_1739;
      }
      if (v3 == 27 && v13 <= 0xFF)
      {
        v418 = 0;
        v419 = *(_QWORD *)v4;
        v420 = *((_QWORD *)v4 + 1);
        v424 = *(_QWORD *)(v4 + 19) == 0x617461645F657079 && *((_QWORD *)v4 + 2) == 0x645F657079745F74;
        v425 = 0x65675F6F6D745F6ELL;
        goto LABEL_1731;
      }
      v418 = v3 == 33;
      if (v3 == 33 && v13 <= 0xFF)
      {
        v717 = memcmp(v4, "__builtin_tmo_get_type_descriptor", 0x21uLL);
        v19 = v721;
        v208 = v724;
        v161 = v725;
        v22 = v722;
        v95 = v723;
        v17 = v726;
        v16 = v727;
        v23 = v717 == 0;
        LOBYTE(v20) = v728;
        v15 = v729;
        if (v23)
          v13 = 257;
        v418 = 1;
      }
LABEL_1739:
      v428 = !v20;
      if (v13 > 0xFF)
        v428 = 1;
      if ((v428 & 1) == 0 && *((_WORD *)v4 + 4) == 25445 && *(_QWORD *)v4 == 0x70736C6365645F5FLL)
        v13 = 257;
      v430 = v17 ^ 1;
      if (v13 > 0xFF)
        v430 = 1;
      if ((v430 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1818453348 && *(_DWORD *)v4 == 1684234079)
        v13 = 257;
      v432 = !v21;
      if (v13 > 0xFF)
        v432 = 1;
      if ((v432 & 1) == 0 && v4[8] == 108 && *(_QWORD *)v4 == 0x6C61636474735F5FLL)
        v13 = 257;
      v434 = !v20;
      v435 = v13 > 0xFF || !v20;
      if ((v435 & 1) == 0 && *((_WORD *)v4 + 4) == 27756 && *(_QWORD *)v4 == 0x6163747361665F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v434 = 1;
      if ((v434 & 1) == 0 && *((_WORD *)v4 + 4) == 27756 && *(_QWORD *)v4 == 0x6163736968745F5FLL)
        v13 = 257;
      v438 = !v21;
      if (v13 > 0xFF)
        v438 = 1;
      if ((v438 & 1) == 0 && v4[8] == 108 && *(_QWORD *)v4 == 0x6C61636765725F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 1819042147 && *(_QWORD *)v4 == 0x726F746365765F5FLL)
        v13 = 257;
      v441 = !v22;
      if (v13 > 0xFF)
        v441 = 1;
      if ((v441 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x656E696C6E696563 && *(_QWORD *)v4 == 0x696563726F665F5FLL)
        v13 = 257;
      v443 = !v95;
      if (v13 > 0xFF)
        v443 = 1;
      if ((v443 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x64656E67696C616ELL && *(_QWORD *)v4 == 0x67696C616E755F5FLL)
        v13 = 257;
      v445 = v17 ^ 1;
      if (v13 > 0xFF)
        v445 = 1;
      if ((v445 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1919250549 && *(_DWORD *)v4 == 1970495327)
        v13 = 257;
      v447 = v14 ^ 1;
      if (v13 > 0xFF)
        v447 = 1;
      if ((v447 & 1) == 0 && *(_QWORD *)v4 == 0x6C61626F6C675F5FLL)
        v13 = 257;
      v448 = v17 ^ 1;
      if (v13 > 0xFF)
        v448 = 1;
      if ((v448 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1818321775 && *(_DWORD *)v4 == 1869373279)
        v13 = 257;
      v450 = !v20;
      if (v13 > 0xFF)
        v450 = 1;
      if ((v450 & 1) == 0 && *((_WORD *)v4 + 4) == 29806 && *(_QWORD *)v4 == 0x6174736E6F635F5FLL)
        v13 = 257;
      v452 = !v21;
      v453 = v13 > 0xFF || !v21;
      if ((v453 & 1) == 0 && v4[8] == 101 && *(_QWORD *)v4 == 0x7461766972705F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v452 = 1;
      if ((v452 & 1) == 0 && v4[8] == 99 && *(_QWORD *)v4 == 0x6972656E65675F5FLL)
        v13 = 257;
      v456 = v16 ^ 1;
      if (v13 > 0xFF)
        v456 = 1;
      if ((v456 & 1) == 0 && *((_WORD *)v4 + 2) == 27745 && *(_DWORD *)v4 == 1651469415)
        v13 = 257;
      v458 = v15 ^ 1;
      if (v13 > 0xFF)
        v458 = 1;
      if ((v458 & 1) == 0 && v4[4] == 108 && *(_DWORD *)v4 == 1633906540)
        v13 = 257;
      v460 = v14 ^ 1;
      if (v13 > 0xFF)
        v460 = 1;
      if ((v460 & 1) == 0 && *(_QWORD *)v4 == 0x746E6174736E6F63)
        v13 = 257;
      v461 = v17 ^ 1;
      if (v13 > 0xFF)
        v462 = 1;
      else
        v462 = v17 ^ 1;
      if ((v462 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1702125942 && *(_DWORD *)v4 == 1986622064)
        v13 = 257;
      if (v13 > 0xFF)
        v461 = 1;
      if ((v461 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1667854949 && *(_DWORD *)v4 == 1701733735)
        v13 = 257;
      v465 = v14 ^ 1;
      if (v13 > 0xFF)
        v465 = 1;
      if ((v465 & 1) == 0 && *(_QWORD *)v4 == 0x6C656E72656B5F5FLL)
        v13 = 257;
      v466 = v16 ^ 1;
      if (v13 > 0xFF)
        v467 = 1;
      else
        v467 = v16 ^ 1;
      if ((v467 & 1) == 0 && *((_WORD *)v4 + 2) == 27749 && *(_DWORD *)v4 == 1852990827)
        v13 = 257;
      if (v13 > 0xFF)
        v466 = 1;
      if ((v466 & 1) == 0 && *((_WORD *)v4 + 2) == 25697 && *(_DWORD *)v4 == 1701996660)
        v13 = 257;
      v470 = v16 ^ 1;
      if (v13 > 0xFF)
        v470 = 1;
      if ((v470 & 1) == 0 && *((_WORD *)v4 + 2) == 25955 && *(_DWORD *)v4 == 1769366884)
        v13 = 257;
      v472 = !v95;
      if (v13 > 0xFF)
        v472 = 1;
      if ((v472 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x70756F7267646165 && *(_QWORD *)v4 == 0x7267646165726874)
        v13 = 257;
      v474 = v14 ^ 1;
      if (v13 > 0xFF)
        v474 = 1;
      if ((v474 & 1) != 0)
      {
        if (v3 == 22 && v13 <= 0xFF)
        {
          v476 = *(_QWORD *)(v4 + 14) == 0x6B636F6C62656761
              && *((_QWORD *)v4 + 1) == 0x67616D695F70756FLL
              && *(_QWORD *)v4 == 0x7267646165726874;
LABEL_1950:
          if (v476)
            v13 = 257;
          goto LABEL_1952;
        }
      }
      else if (*(_QWORD *)v4 == 0x746E6174736E6F63)
      {
        v13 = 257;
      }
      v475 = v14 ^ 1;
      if (v13 > 0xFF)
        v475 = 1;
      if ((v475 & 1) == 0)
      {
        v476 = *(_QWORD *)v4 == 0x617461645F796172;
        goto LABEL_1950;
      }
LABEL_1952:
      v478 = !v95;
      if (v13 > 0xFF)
        v478 = 1;
      if ((v478 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x617461645F746365 && *(_QWORD *)v4 == 0x645F7463656A626FLL)
        v13 = 257;
      v480 = v14 ^ 1;
      if (v13 > 0xFF)
        v480 = 1;
      if ((v480 & 1) == 0 && *(_QWORD *)v4 == 0x746E657265686F63)
        v13 = 257;
      v481 = !v20;
      if (v13 > 0xFF)
        v481 = 1;
      if ((v481 & 1) == 0 && *((_WORD *)v4 + 4) == 27745 && *(_QWORD *)v4 == 0x626F6C675F6C636FLL)
        v13 = 257;
      v483 = !v21;
      if (v13 > 0xFF)
        v483 = 1;
      if ((v483 & 1) == 0 && v4[8] == 108 && *(_QWORD *)v4 == 0x61636F6C5F6C636FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 1953390964 && *(_QWORD *)v4 == 0x736E6F635F6C636FLL)
        v13 = 257;
      v486 = !v95;
      v487 = v13 > 0xFF || !v95;
      if ((v487 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x657461766972705FLL && *(_QWORD *)v4 == 0x766972705F6C636FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v486 = 1;
      if ((v486 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x796C6E6F5F646165 && *(_QWORD *)v4 == 0x6F5F646165725F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 2037149295 && *(_QWORD *)v4 == 0x5F65746972775F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF && *((_DWORD *)v4 + 2) == 1702127986 && *(_QWORD *)v4 == 0x775F646165725F5FLL)
        v13 = 257;
      v492 = !v21;
      if (v13 > 0xFF)
        v492 = 1;
      if ((v492 & 1) == 0 && v4[8] == 121 && *(_QWORD *)v4 == 0x6C6E6F5F64616572)
        v13 = 257;
      v494 = !v20;
      v495 = v13 > 0xFF || !v20;
      if ((v495 & 1) == 0 && *((_WORD *)v4 + 4) == 31084 && *(_QWORD *)v4 == 0x6E6F5F6574697277)
        v13 = 257;
      if (v13 > 0xFF)
        v494 = 1;
      if ((v494 & 1) == 0 && *((_WORD *)v4 + 4) == 25972 && *(_QWORD *)v4 == 0x6972775F64616572)
        v13 = 257;
      if (v3 == 16 && v13 <= 0xFF)
      {
        v498 = *((_QWORD *)v4 + 1) == 0x6570797473615F6ELL && *(_QWORD *)v4 == 0x69746C6975625F5FLL;
LABEL_2053:
        if (v498)
          v13 = 257;
        goto LABEL_2055;
      }
      v499 = v14 ^ 1;
      if (v13 > 0xFF)
        v499 = 1;
      if ((v499 & 1) == 0)
      {
        v498 = *(_QWORD *)v4 == 0x706574735F636576;
        goto LABEL_2053;
      }
LABEL_2055:
      v500 = !v21;
      if (v13 > 0xFF)
        v500 = 1;
      if ((v500 & 1) == 0 && v4[8] == 116 && *(_QWORD *)v4 == 0x5F64316567616D69)
        v13 = 257;
      v502 = !v227;
      if (v13 > 0xFF)
        v502 = 1;
      if ((v502 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x745F79617272615FLL && *(_QWORD *)v4 == 0x5F64316567616D69)
        v13 = 257;
      if (v3 == 16
        && v13 <= 0xFF
        && *((_QWORD *)v4 + 1) == 0x745F726566667562
        && *(_QWORD *)v4 == 0x5F64316567616D69)
      {
        v13 = 257;
      }
      v505 = !v21;
      if (v13 > 0xFF)
        v505 = 1;
      if ((v505 & 1) == 0 && v4[8] == 116 && *(_QWORD *)v4 == 0x5F64326567616D69)
        v13 = 257;
      v507 = !v227;
      v508 = v13 > 0xFF || !v227;
      if ((v508 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x745F79617272615FLL && *(_QWORD *)v4 == 0x5F64326567616D69)
        v13 = 257;
      if (v13 > 0xFF)
        v507 = 1;
      if ((v507 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x745F68747065645FLL && *(_QWORD *)v4 == 0x5F64326567616D69)
        v13 = 257;
      if (v3 == 21 && v13 <= 0xFF)
      {
        v511 = *(_QWORD *)(v4 + 13) == 0x745F68747065645FLL && *((_QWORD *)v4 + 1) == 0x65645F7961727261;
        if (v511 && *(_QWORD *)v4 == 0x5F64326567616D69)
          v13 = 257;
      }
      v513 = !v19;
      if (v13 > 0xFF)
        v513 = 1;
      if ((v513 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x745F6161736D5F64 && *(_QWORD *)v4 == 0x5F64326567616D69)
        v13 = 257;
      v515 = !v208;
      v516 = v13 > 0xFF || !v208;
      if ((v516 & 1) == 0)
      {
        v517 = *((_DWORD *)v4 + 4) == 1952407905 && *((_QWORD *)v4 + 1) == 0x736D5F7961727261;
        if (v517 && *(_QWORD *)v4 == 0x5F64326567616D69)
          v13 = 257;
      }
      if (v13 > 0xFF)
        v515 = 1;
      if ((v515 & 1) == 0)
      {
        v519 = *((_DWORD *)v4 + 4) == 1952409716 && *((_QWORD *)v4 + 1) == 0x7065645F6161736DLL;
        if (v519 && *(_QWORD *)v4 == 0x5F64326567616D69)
          v13 = 257;
      }
      if (v3 == 26 && v13 <= 0xFF)
      {
        v521 = *((_WORD *)v4 + 12) == 29791 && *((_QWORD *)v4 + 2) == 0x68747065645F6161;
        v522 = v521 && *((_QWORD *)v4 + 1) == 0x736D5F7961727261;
        if (v522 && *(_QWORD *)v4 == 0x5F64326567616D69)
          v13 = 257;
      }
      v524 = !v21;
      if (v13 > 0xFF)
        v524 = 1;
      if ((v524 & 1) == 0 && v4[8] == 116 && *(_QWORD *)v4 == 0x5F64336567616D69)
        v13 = 257;
      if (v3 == 4 && v13 <= 0xFF && *(_DWORD *)v4 == 1701865840)
        v13 = 257;
      v526 = !v19;
      if (v13 > 0xFF)
        v526 = 1;
      if ((v526 & 1) == 0 && *(_QWORD *)(v4 + 6) == 0x747361635F656361 && *(_QWORD *)v4 == 0x6361707372646461)
        v13 = 257;
      v528 = v16 ^ 1;
      if (v13 > 0xFF)
        v529 = 1;
      else
        v529 = v16 ^ 1;
      if ((v529 & 1) == 0 && *((_WORD *)v4 + 2) == 27749 && *(_DWORD *)v4 == 1852990827)
        v13 = 257;
      if (v13 > 0xFF)
        v528 = 1;
      if ((v528 & 1) == 0 && *((_WORD *)v4 + 2) == 30821 && *(_DWORD *)v4 == 1953654134)
        v13 = 257;
      v532 = v14 ^ 1;
      if (v13 > 0xFF)
        v532 = 1;
      if ((v532 & 1) == 0 && *(_QWORD *)v4 == 0x746E656D67617266)
        v13 = 257;
      v533 = v17 ^ 1;
      if (v13 > 0xFF)
        v533 = 1;
      if ((v533 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1701869940 && *(_DWORD *)v4 == 1952412513)
        v13 = 257;
      v535 = !v418;
      if (v13 > 0xFF)
        v535 = 1;
      v536 = v418;
      if ((v535 & 1) == 0)
      {
        v537 = memcmp(v4, "__builtin_omp_required_simd_align", 0x21uLL);
        v418 = v536;
        v22 = v722;
        v208 = v724;
        v161 = v725;
        v95 = v723;
        v17 = v726;
        v16 = v727;
        v23 = v537 == 0;
        LOBYTE(v20) = v728;
        v15 = v729;
        if (v23)
          v13 = 257;
      }
      v538 = v14 ^ 1;
      if (v13 > 0xFF)
        v539 = 1;
      else
        v539 = v14 ^ 1;
      if ((v539 & 1) == 0 && *(_QWORD *)v4 == 0x6C61637361705F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v538 = 1;
      if ((v538 & 1) == 0 && *(_QWORD *)v4 == 0x726F746365765F5FLL)
        v13 = 257;
      v540 = v17 ^ 1;
      if (v13 > 0xFF)
        v540 = 1;
      if ((v540 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1818589289 && *(_DWORD *)v4 == 1768972127)
        v13 = 257;
      v542 = v16 ^ 1;
      if (v13 > 0xFF)
        v543 = 1;
      else
        v543 = v16 ^ 1;
      if ((v543 & 1) == 0 && *((_WORD *)v4 + 2) == 27759 && *(_DWORD *)v4 == 1868717919)
        v13 = 257;
      if (v13 > 0xFF)
        v542 = 1;
      if ((v542 & 1) == 0 && *((_WORD *)v4 + 2) == 13873 && *(_DWORD *)v4 == 1885757279)
        v13 = 257;
      v546 = v16 ^ 1;
      if (v13 > 0xFF)
        v546 = 1;
      if ((v546 & 1) == 0 && *((_WORD *)v4 + 2) == 13873 && *(_DWORD *)v4 == 1717722975)
        v13 = 257;
      if (v3 == 4 && v13 <= 0xFF)
      {
        v548 = *(_DWORD *)v4 == 1718378856;
        goto LABEL_2287;
      }
      v549 = v14 ^ 1;
      if (v13 > 0xFF)
        v549 = 1;
      if ((v549 & 1) == 0)
      {
        v548 = *(_QWORD *)v4 == 0x6567646972625F5FLL;
        goto LABEL_2287;
      }
      if (v3 == 17 && v13 <= 0xFF)
      {
        v550 = v4[16] == 114 && *((_QWORD *)v4 + 1) == 0x6566736E6172745FLL;
        if (v550 && *(_QWORD *)v4 == 0x6567646972625F5FLL)
          v13 = 257;
      }
      if (v3 == 17 && v13 <= 0xFF)
      {
        v548 = v4[16] == 100 && *((_QWORD *)v4 + 1) == 0x656E69617465725FLL && *(_QWORD *)v4 == 0x6567646972625F5FLL;
LABEL_2287:
        if (v548)
          v13 = 257;
      }
      v553 = !v227;
      if (v13 > 0xFF)
        v553 = 1;
      if ((v553 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x6E69617465725F65 && *(_QWORD *)v4 == 0x6567646972625F5FLL)
        v13 = 257;
      v555 = !v95;
      if (v13 > 0xFF)
        v555 = 1;
      if ((v555 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x746E61697261766FLL && *(_QWORD *)v4 == 0x697261766F635F5FLL)
        v13 = 257;
      v557 = !v227;
      if (v13 > 0xFF)
        v557 = 1;
      if ((v557 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x746E616972617661 && *(_QWORD *)v4 == 0x6172746E6F635F5FLL)
        v13 = 257;
      v559 = v14 ^ 1;
      if (v13 > 0xFF)
        v559 = 1;
      if ((v559 & 1) == 0 && *(_QWORD *)v4 == 0x666F646E696B5F5FLL)
        v13 = 257;
      v560 = !v95;
      if (v13 > 0xFF)
        v560 = 1;
      if ((v560 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x5F5F666F6E67696CLL && *(_QWORD *)v4 == 0x6F6E67696C615F5FLL)
        v13 = 257;
      v562 = v15 ^ 1;
      if (v13 > 0xFF)
        v562 = 1;
      if ((v562 & 1) == 0 && v4[4] == 109 && *(_DWORD *)v4 == 1935761247)
        v13 = 257;
      v564 = v17 ^ 1;
      if (v13 > 0xFF)
        v564 = 1;
      if ((v564 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1600089459 && *(_DWORD *)v4 == 1935761247)
        v13 = 257;
      v566 = !v22;
      if (v13 > 0xFF)
        v566 = 1;
      if ((v566 & 1) == 0 && *(_QWORD *)(v4 + 5) == 0x5F5F657475626972 && *(_QWORD *)v4 == 0x6269727474615F5FLL)
        v13 = 257;
      v568 = !v21;
      if (v13 > 0xFF)
        v568 = 1;
      if ((v568 & 1) == 0 && v4[8] == 120 && *(_QWORD *)v4 == 0x656C706D6F635F5FLL)
        v13 = 257;
      v570 = !v95;
      if (v13 > 0xFF)
        v570 = 1;
      if ((v570 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x5F5F78656C706D6FLL && *(_QWORD *)v4 == 0x656C706D6F635F5FLL)
        v13 = 257;
      v572 = v17 ^ 1;
      if (v13 > 0xFF)
        v572 = 1;
      if ((v572 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1953721967 && *(_DWORD *)v4 == 1868783455)
        v13 = 257;
      v574 = !v21;
      if (v13 > 0xFF)
        v574 = 1;
      if ((v574 & 1) == 0 && v4[8] == 95 && *(_QWORD *)v4 == 0x5F74736E6F635F5FLL)
        v13 = 257;
      v576 = !v20;
      if (v13 > 0xFF)
        v576 = 1;
      if ((v576 & 1) == 0 && *((_WORD *)v4 + 4) == 25968 && *(_QWORD *)v4 == 0x79746C6365645F5FLL)
        v13 = 257;
      v578 = v14 ^ 1;
      if (v13 > 0xFF)
        v579 = 1;
      else
        v579 = v14 ^ 1;
      if ((v579 & 1) == 0 && *(_QWORD *)v4 == 0x5F5F67616D695F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v578 = 1;
      if ((v578 & 1) == 0 && *(_QWORD *)v4 == 0x656E696C6E695F5FLL)
        v13 = 257;
      v580 = !v20;
      if (v13 > 0xFF)
        v580 = 1;
      if ((v580 & 1) == 0 && *((_WORD *)v4 + 4) == 24415 && *(_QWORD *)v4 == 0x656E696C6E695F5FLL)
        v13 = 257;
      v582 = !v21;
      if (v13 > 0xFF)
        v582 = 1;
      if ((v582 & 1) == 0 && v4[8] == 114 && *(_QWORD *)v4 == 0x74706C6C756E5F5FLL)
        v13 = 257;
      v584 = v14 ^ 1;
      if (v13 > 0xFF)
        v584 = 1;
      if ((v584 & 1) == 0 && *(_QWORD *)v4 == 0x5F5F6C6165725F5FLL)
        v13 = 257;
      v585 = !v20;
      if (v13 > 0xFF)
        v585 = 1;
      if ((v585 & 1) == 0 && *((_WORD *)v4 + 4) == 29795 && *(_QWORD *)v4 == 0x6972747365725F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v587 = *((_DWORD *)v4 + 2) == 1600091235 && *(_QWORD *)v4 == 0x6972747365725F5FLL;
LABEL_2439:
        if (v587)
          v13 = 257;
        goto LABEL_2441;
      }
      v588 = v14 ^ 1;
      if (v13 > 0xFF)
        v588 = 1;
      if ((v588 & 1) == 0)
      {
        v587 = *(_QWORD *)v4 == 0x64656E6769735F5FLL;
        goto LABEL_2439;
      }
LABEL_2441:
      v589 = !v20;
      if (v13 > 0xFF)
        v589 = 1;
      if ((v589 & 1) == 0 && *((_WORD *)v4 + 4) == 24415 && *(_QWORD *)v4 == 0x64656E6769735F5FLL)
        v13 = 257;
      v591 = v14 ^ 1;
      if (v13 > 0xFF)
        v591 = 1;
      if ((v591 & 1) == 0 && *(_QWORD *)v4 == 0x666F657079745F5FLL)
        v13 = 257;
      v592 = !v20;
      v593 = v13 > 0xFF || !v20;
      if ((v593 & 1) == 0 && *((_WORD *)v4 + 4) == 24415 && *(_QWORD *)v4 == 0x666F657079745F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v592 = 1;
      if ((v592 & 1) == 0 && *((_WORD *)v4 + 4) == 25964 && *(_QWORD *)v4 == 0x6974616C6F765F5FLL)
        v13 = 257;
      if (v3 == 12 && v13 <= 0xFF)
      {
        v596 = *((_DWORD *)v4 + 2) == 1600087404 && *(_QWORD *)v4 == 0x6974616C6F765F5FLL;
LABEL_2480:
        if (v596)
          v13 = 257;
        goto LABEL_2482;
      }
      v597 = v14 ^ 1;
      if (v13 > 0xFF)
        v597 = 1;
      if ((v597 & 1) == 0)
      {
        v596 = *(_QWORD *)v4 == 0x6C6C756E6E6F4E5FLL;
        goto LABEL_2480;
      }
LABEL_2482:
      v598 = !v21;
      if (v13 > 0xFF)
        v598 = 1;
      if ((v598 & 1) == 0 && v4[8] == 101 && *(_QWORD *)v4 == 0x6C62616C6C754E5FLL)
        v13 = 257;
      if (v3 == 16 && v13 <= 0xFF)
      {
        v600 = *(_QWORD *)v4;
        v601 = *((_QWORD *)v4 + 1) == 0x746C757365725F65;
        v602 = 0x6C62616C6C754E5FLL;
      }
      else
      {
        if (v3 != 17 || v13 > 0xFF)
          goto LABEL_2504;
        v600 = *(_QWORD *)v4;
        v601 = v4[16] == 100 && *((_QWORD *)v4 + 1) == 0x6569666963657073;
        v602 = 0x6E755F6C6C754E5FLL;
      }
      if (v601 && v600 == v602)
        v13 = 257;
LABEL_2504:
      v604 = v17 ^ 1;
      if (v13 > 0xFF)
        v605 = 1;
      else
        v605 = v17 ^ 1;
      if ((v605 & 1) == 0 && *(_DWORD *)(v4 + 3) == 875983476 && *(_DWORD *)v4 == 1953521503)
        v13 = 257;
      if (v13 > 0xFF)
        v604 = 1;
      if ((v604 & 1) == 0 && *(_DWORD *)(v4 + 3) == 842232436 && *(_DWORD *)v4 == 1953521503)
        v13 = 257;
      v608 = v16 ^ 1;
      if (v13 > 0xFF)
        v609 = 1;
      else
        v609 = v16 ^ 1;
      if ((v609 & 1) == 0 && *((_WORD *)v4 + 2) == 29300 && *(_DWORD *)v4 == 1886609247)
        v13 = 257;
      if (v13 > 0xFF)
        v608 = 1;
      if ((v608 & 1) == 0 && *((_WORD *)v4 + 2) == 29300 && *(_DWORD *)v4 == 1886740319)
        v13 = 257;
      v612 = v15 ^ 1;
      if (v13 > 0xFF)
        v612 = 1;
      if ((v612 & 1) == 0 && v4[4] == 52 && *(_DWORD *)v4 == 913792863)
        v13 = 257;
      v614 = v14 ^ 1;
      if (v13 > 0xFF)
        v614 = 1;
      if ((v614 & 1) == 0 && *(_QWORD *)v4 == 0x666F646975755F5FLL)
        v13 = 257;
      v615 = v15 ^ 1;
      if (v13 > 0xFF)
        v615 = 1;
      if ((v615 & 1) == 0 && v4[4] == 121 && *(_DWORD *)v4 == 1920229215)
        v13 = 257;
      v617 = !v21;
      if (v13 > 0xFF)
        v617 = 1;
      if ((v617 & 1) == 0 && v4[8] == 121 && *(_QWORD *)v4 == 0x6C6C616E69665F5FLL)
        v13 = 257;
      v619 = v17 ^ 1;
      if (v13 > 0xFF)
        v620 = 1;
      else
        v620 = v17 ^ 1;
      if ((v620 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1702256997 && *(_DWORD *)v4 == 1701601119)
        v13 = 257;
      if (v13 > 0xFF)
        v619 = 1;
      if ((v619 & 1) == 0 && *(_DWORD *)(v4 + 3) == 875983982 && *(_DWORD *)v4 == 1852399455)
        v13 = 257;
      v623 = !v95;
      if (v13 > 0xFF)
        v623 = 1;
      if ((v623 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x7374736978655F66 && *(_QWORD *)v4 == 0x6978655F66695F5FLL)
        v13 = 257;
      v625 = !v227;
      if (v13 > 0xFF)
        v625 = 1;
      if ((v625 & 1) == 0 && *(_QWORD *)(v4 + 7) == 0x7374736978655F74 && *(_QWORD *)v4 == 0x746F6E5F66695F5FLL)
        v13 = 257;
      v627 = !v208;
      if (v13 > 0xFF)
        v627 = 1;
      if ((v627 & 1) == 0)
      {
        v628 = *((_DWORD *)v4 + 4) == 1701015137 && *((_QWORD *)v4 + 1) == 0x74697265686E695FLL;
        if (v628 && *(_QWORD *)v4 == 0x656C676E69735F5FLL)
          v13 = 257;
      }
      if (v3 == 22 && v13 <= 0xFF)
      {
        v630 = *(_QWORD *)v4;
        v631 = *(_QWORD *)(v4 + 14) == 0x65636E6174697265 && *((_QWORD *)v4 + 1) == 0x7265686E695F656CLL;
        v632 = 0x7069746C756D5F5FLL;
      }
      else
      {
        if (v3 != 21 || v13 > 0xFF)
          goto LABEL_2628;
        v630 = *(_QWORD *)v4;
        v631 = *(_QWORD *)(v4 + 13) == 0x65636E6174697265 && *((_QWORD *)v4 + 1) == 0x697265686E695F6CLL;
        v632 = 0x6175747269765F5FLL;
      }
      if (v631 && v630 == v632)
        v13 = 257;
LABEL_2628:
      v634 = !v95;
      if (v13 > 0xFF)
        v634 = 1;
      if ((v634 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x656361667265746ELL && *(_QWORD *)v4 == 0x667265746E695F5FLL)
        v13 = 257;
      v636 = v16 ^ 1;
      if (v13 > 0xFF)
        v636 = 1;
      if ((v636 & 1) == 0 && *((_WORD *)v4 + 2) == 14452 && *(_DWORD *)v4 == 1852399455)
        v13 = 257;
      v638 = v17 ^ 1;
      if (v13 > 0xFF)
        v639 = 1;
      else
        v639 = v17 ^ 1;
      if ((v639 & 1) == 0 && *(_DWORD *)(v4 + 3) == 909210734 && *(_DWORD *)v4 == 1852399455)
        v13 = 257;
      if (v13 > 0xFF)
        v638 = 1;
      if ((v638 & 1) == 0 && *(_DWORD *)(v4 + 3) == 842232942 && *(_DWORD *)v4 == 1852399455)
        v13 = 257;
      v642 = !v21;
      if (v13 > 0xFF)
        v642 = 1;
      if ((v642 & 1) == 0 && v4[8] == 116 && *(_QWORD *)v4 == 0x5F72616863775F5FLL)
        v13 = 257;
      if (v3 == 17 && v13 <= 0xFF)
      {
        v645 = v4[16] == 102 && *((_QWORD *)v4 + 1) == 0x6F6E67696C615F6ELL && *(_QWORD *)v4 == 0x69746C6975625F5FLL;
LABEL_2684:
        if (v645)
          v13 = 257;
        goto LABEL_2686;
      }
      if (v3 == 4 && v13 <= 0xFF)
      {
        v645 = *(_DWORD *)v4 == 1836278111;
        goto LABEL_2684;
      }
      v646 = v14 ^ 1;
      if (v13 > 0xFF)
        v646 = 1;
      if ((v646 & 1) == 0)
      {
        v645 = *(_QWORD *)v4 == 0x666F6E67696C615FLL;
        goto LABEL_2684;
      }
LABEL_2686:
      v647 = v16 ^ 1;
      if (v13 > 0xFF)
        v647 = 1;
      if ((v647 & 1) == 0 && *((_WORD *)v4 + 2) == 27747 && *(_DWORD *)v4 == 1701077855)
        v13 = 257;
      v649 = !v21;
      v650 = v13 > 0xFF || !v21;
      if ((v650 & 1) == 0 && v4[8] == 99 && *(_QWORD *)v4 == 0x6570736C6365645FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v649 = 1;
      if ((v649 & 1) == 0 && v4[8] == 108 && *(_QWORD *)v4 == 0x6C6163747361665FLL)
        v13 = 257;
      v653 = v14 ^ 1;
      if (v13 > 0xFF)
        v653 = 1;
      if ((v653 & 1) != 0)
      {
        if (v3 != 12 || v13 > 0xFF)
          goto LABEL_2722;
        v654 = *((_DWORD *)v4 + 2) == 1701734764 && *(_QWORD *)v4 == 0x6E696563726F665FLL;
      }
      else
      {
        v654 = *(_QWORD *)v4 == 0x796C6C616E69665FLL;
      }
      if (v654)
        v13 = 257;
LABEL_2722:
      v655 = v17 ^ 1;
      if (v13 > 0xFF)
        v655 = 1;
      if ((v655 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1701734764 && *(_DWORD *)v4 == 1819175263)
        v13 = 257;
      v657 = v15 ^ 1;
      if (v13 > 0xFF)
        v657 = 1;
      if ((v657 & 1) == 0 && v4[4] == 56 && *(_DWORD *)v4 == 1953392991)
        v13 = 257;
      v659 = v16 ^ 1;
      if (v13 > 0xFF)
        v660 = 1;
      else
        v660 = v16 ^ 1;
      if ((v660 & 1) == 0 && *((_WORD *)v4 + 2) == 13873 && *(_DWORD *)v4 == 1953392991)
        v13 = 257;
      if (v13 > 0xFF)
        v659 = 1;
      if ((v659 & 1) == 0 && *((_WORD *)v4 + 2) == 12851 && *(_DWORD *)v4 == 1953392991)
        v13 = 257;
      v663 = v16 ^ 1;
      if (v13 > 0xFF)
        v664 = 1;
      else
        v664 = v16 ^ 1;
      if ((v664 & 1) == 0 && *((_WORD *)v4 + 2) == 13366 && *(_DWORD *)v4 == 1953392991)
        v13 = 257;
      if (v13 > 0xFF)
        v663 = 1;
      if ((v663 & 1) == 0 && *((_WORD *)v4 + 2) == 25974 && *(_DWORD *)v4 == 1634036831)
        v13 = 257;
      if (v3 == 21 && v13 <= 0xFF)
      {
        v667 = *(_QWORD *)(v4 + 13) == 0x65636E6174697265 && *((_QWORD *)v4 + 1) == 0x697265686E695F65;
        if (v667 && *(_QWORD *)v4 == 0x6C7069746C756D5FLL)
          v13 = 257;
      }
      v669 = v16 ^ 1;
      if (v13 > 0xFF)
        v670 = 1;
      else
        v670 = v16 ^ 1;
      if ((v670 & 1) == 0 && *((_WORD *)v4 + 2) == 12851 && *(_DWORD *)v4 == 1920233567)
        v13 = 257;
      if (v13 > 0xFF)
        v669 = 1;
      if ((v669 & 1) == 0 && *((_WORD *)v4 + 2) == 13366 && *(_DWORD *)v4 == 1920233567)
        v13 = 257;
      v673 = !v21;
      if (v13 > 0xFF)
        v673 = 1;
      if ((v673 & 1) == 0 && v4[8] == 116 && *(_QWORD *)v4 == 0x636972747365725FLL)
        v13 = 257;
      v675 = v14 ^ 1;
      if (v13 > 0xFF)
        v675 = 1;
      if ((v675 & 1) == 0 && *(_QWORD *)v4 == 0x6C6C61636474735FLL)
        v13 = 257;
      v676 = !v21;
      if (v13 > 0xFF)
        v676 = 1;
      if ((v676 & 1) == 0 && v4[8] == 108 && *(_QWORD *)v4 == 0x6C6163736968745FLL)
        v13 = 257;
      if (v3 == 4 && v13 <= 0xFF && *(_DWORD *)v4 == 2037544031)
        v13 = 257;
      v678 = !v95;
      if (v13 > 0xFF)
        v678 = 1;
      if ((v678 & 1) == 0 && *(_QWORD *)(v4 + 3) == 0x6C6C6163726F7463 && *(_QWORD *)v4 == 0x63726F746365765FLL)
        v13 = 257;
      v680 = !v20;
      if (v13 > 0xFF)
        v680 = 1;
      if ((v680 & 1) == 0 && *((_WORD *)v4 + 4) == 25701 && *(_QWORD *)v4 == 0x6E67696C616E755FLL)
        v13 = 257;
      v682 = v15 ^ 1;
      if (v13 > 0xFF)
        v682 = 1;
      if ((v682 & 1) == 0 && v4[4] == 114 && *(_DWORD *)v4 == 1953527135)
        v13 = 257;
      v684 = v17 ^ 1;
      if (v13 > 0xFF)
        v684 = 1;
      if ((v684 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1718576233 && *(_DWORD *)v4 == 1769305439)
        v13 = 257;
      v686 = !v208;
      if (v13 > 0xFF)
        v686 = 1;
      if ((v686 & 1) == 0)
      {
        v687 = *((_DWORD *)v4 + 4) == 1701015137 && *((_QWORD *)v4 + 1) == 0x74697265686E695FLL;
        if (v687 && *(_QWORD *)v4 == 0x6C6175747269765FLL)
          v13 = 257;
      }
      if (v3 == 4 && v13 <= 0xFF && *(_DWORD *)v4 == 875984735)
        v13 = 257;
      v689 = v17 ^ 1;
      if (v13 > 0xFF)
        v689 = 1;
      if ((v689 & 1) == 0 && *(_DWORD *)(v4 + 3) == 1818321779 && *(_DWORD *)v4 == 1935765599)
        v13 = 257;
      if (v3 == 23 && v13 <= 0xFF)
      {
        v691 = *(_QWORD *)(v4 + 15) == 0x726F746365767472 && *((_QWORD *)v4 + 1) == 0x7265766E6F635F6ELL;
        if (v691 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
      }
      v693 = !v20;
      v694 = v13 > 0xFF || !v20;
      if ((v694 & 1) == 0 && *((_WORD *)v4 + 4) == 29791 && *(_QWORD *)v4 == 0x3631726168635F5FLL)
        v13 = 257;
      if (v13 > 0xFF)
        v693 = 1;
      if ((v693 & 1) == 0 && *((_WORD *)v4 + 4) == 29791 && *(_QWORD *)v4 == 0x3233726168635F5FLL)
        v13 = 257;
      v697 = !v161;
      if (v13 > 0xFF)
        v697 = 1;
      if ((v697 & 1) == 0)
      {
        v698 = *((_WORD *)v4 + 8) == 29811 && *((_QWORD *)v4 + 1) == 0x61635F7469625F6ELL;
        if (v698 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
      }
      v700 = !v720;
      if (v13 > 0xFF)
        v700 = 1;
      if ((v700 & 1) == 0)
      {
        v701 = *(_QWORD *)(v4 + 11) == 0x656C62616C696176 && *((_QWORD *)v4 + 1) == 0x616C696176615F6ELL;
        if (v701 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
      }
      v703 = !v418;
      if (v13 > 0xFF)
        v703 = 1;
      if ((v703 & 1) == 0 && !memcmp(v4, "__builtin_sycl_unique_stable_name", 0x21uLL))
        v13 = 257;
      if (v3 == 17 && v13 <= 0xFF)
      {
        v704 = v4[16] == 101 && *((_QWORD *)v4 + 1) == 0x707974796E615F6ELL;
        if (v704 && *(_QWORD *)v4 == 0x776F6E6B6E755F5FLL)
          v13 = 257;
      }
      v706 = !v399;
      if (v13 > 0xFF)
        v706 = 1;
      if ((v706 & 1) == 0 && !memcmp(v4, "__builtin_unsafe_forge_bidi_indexable", 0x25uLL))
        v13 = 257;
      if (v3 == 29 && v13 <= 0xFF)
      {
        v707 = *(_QWORD *)(v4 + 21) == 0x656C676E69735F65 && *((_QWORD *)v4 + 2) == 0x735F6567726F665FLL;
        v708 = v707 && *((_QWORD *)v4 + 1) == 0x656661736E755F6ELL;
        if (v708 && *(_QWORD *)v4 == 0x69746C6975625F5FLL)
          v13 = 257;
      }
      v710 = v13 > 0xFF || !v536;
      if ((v710 & 1) == 0 && !memcmp(v4, "__builtin_get_pointer_lower_bound", 0x21uLL))
        v13 = 257;
      v711 = v13 > 0xFF || !v536;
      if ((v711 & 1) == 0 && !memcmp(v4, "__builtin_get_pointer_upper_bound", 0x21uLL))
        v13 = 257;
      if (v3 == 36 && v13 <= 0xFF)
      {
        v712 = v4;
        v713 = "__builtin_terminated_by_to_indexable";
        v714 = 36;
      }
      else if (v3 == 43 && v13 <= 0xFF)
      {
        v712 = v4;
        v713 = "__builtin_unsafe_terminated_by_to_indexable";
        v714 = 43;
      }
      else
      {
        v715 = v13 >> 8;
        if (v3 != 45 || v13 > 0xFF)
          goto LABEL_2985;
        v712 = v4;
        v713 = "__builtin_unsafe_terminated_by_from_indexable";
        v714 = 45;
      }
      if (!memcmp(v712, v713, v714))
        v13 = 257;
      v715 = v13 >> 8;
LABEL_2985:
      if (!v715 || !(_BYTE)v13)
        return v4;
      v716 = v5[1];
      if (v4 != *v5)
      {
        if (v5[2] < &v716[v3])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v716 = v5[1];
          if (v3)
          {
LABEL_2990:
            memcpy(&v716[(_QWORD)*v5], v4, v3);
            v716 = v5[1];
          }
        }
        else if (v3)
        {
          goto LABEL_2990;
        }
        v716 += v3;
        v5[1] = v716;
      }
      if (v716 + 1 > v5[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v716 = v5[1];
      }
      v716[(_QWORD)*v5] = 95;
      v4 = *v5;
      v3 = (size_t)(v5[1] + 1);
      v5[1] = (unsigned __int8 *)v3;
    }
  }
  return v4;
}

char *sub_22F158808(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  const void *v16;
  char v17;
  size_t v18;
  const void *v19;
  const void *v20;
  size_t v21;
  int v22;
  char *v24;

  if (a4)
    v12 = sub_22F41FEF0(a4);
  else
    v12 = sub_22F1502C8((uint64_t *)a1);
  v13 = (char *)v12;
  if (!v12)
  {
    v13 = (char *)operator new();
    v14 = *(_DWORD *)(a1 + 1112);
    *(_DWORD *)(a1 + 1112) = v14 + 1;
    v24 = sub_22F1D7750(v13, a2, a3, 0, a4, a5, a6, v14);
    if (!a4)
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (const void *)(v15 + 496);
      v17 = *(_BYTE *)(v15 + 519);
      v19 = *(const void **)(v15 + 496);
      v18 = *(_QWORD *)(v15 + 504);
      if (v17 >= 0)
        v20 = v16;
      else
        v20 = v19;
      if (v17 >= 0)
        v21 = v17 & 0x7F;
      else
        v21 = v18;
      if (v21 == a3 && (!v21 || !memcmp(v20, a2, v21)))
        *(_QWORD *)(a1 + 936) = v13;
      *(_QWORD *)(*sub_22F161990((llvm::StringMapImpl *)(a1 + 1024), a2, a3) + 8) = v13;
      v22 = *(_DWORD *)(a1 + 1248);
      *((_DWORD *)sub_22E7448C8((_DWORD *)(a1 + 1256), &v24) + 2) = v22;
      return v24;
    }
  }
  return v13;
}

uint64_t sub_22F158954(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  size_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v45;
  void *v46;
  __int128 v47;
  void *__p[2];
  char v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[3];

  v53[2] = *MEMORY[0x24BDAC8D0];
  sub_22F151DC8((int32x2_t *)a1, (uint64_t)a2);
  v46 = a2;
  v51 = 0;
  if (sub_22E54D320(a1 + 1152, &v46, &v51))
  {
    v7 = v51;
    v8 = *(_QWORD *)(a1 + 1152);
    v9 = *(unsigned int *)(a1 + 1168);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 1152);
    v9 = *(unsigned int *)(a1 + 1168);
    v7 = (_QWORD *)(v8 + 32 * v9);
  }
  if (v7 == (_QWORD *)(v8 + 32 * v9))
  {
    v16 = (void *)a2[5];
    v51 = v53;
    v52 = 0x200000000;
    while (1)
    {
      v45 = 0;
      v46 = v16;
      if (sub_22F246C54((uint64_t *)(a1 + 1224), &v46, &v45))
      {
        v17 = v45;
        v18 = *(_QWORD *)(a1 + 1224);
        v19 = *(unsigned int *)(a1 + 1240);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 1224);
        v19 = *(unsigned int *)(a1 + 1240);
        v17 = v18 + 16 * v19;
      }
      if (v17 != v18 + 16 * v19)
        break;
      v20 = v52;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v52;
      }
      *((_QWORD *)v51 + v20) = v16;
      LODWORD(v52) = v52 + 1;
      v21 = (char *)llvm::sys::path::parent_path();
      if (!v22)
        goto LABEL_97;
      sub_22F1D0728(*(_QWORD *)(*(_QWORD *)a1 + 16), v21, v22, 1, (uint64_t)&v46);
      v3 = 0;
      if ((BYTE8(v47) & 1) == 0)
      {
        v16 = v46;
        if (v46)
          continue;
      }
      goto LABEL_98;
    }
    v23 = *(_QWORD *)(v17 + 8);
    if ((*(_WORD *)(v23 + 1344) & 4) == 0)
    {
      v3 = 1;
      if (!a3 || v23 == a3)
      {
LABEL_98:
        if (v51 != v53)
          free(v51);
        return v3 & 1;
      }
      v24 = *(_QWORD *)(v17 + 8);
      do
        v24 = *(_QWORD *)(v24 + 32);
      while (v24 != a3 && v24 != 0);
      if (v24)
      {
        v3 = 1;
        goto LABEL_98;
      }
    }
    sub_22F1D8DAC(v23, (uint64_t)&v46);
    v26 = v23;
    if (v50)
    {
LABEL_52:
      if (v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v47) < 0)
        operator delete(v46);
    }
    else
    {
      v26 = v23;
      while (1)
      {
        v27 = *(_QWORD *)(v26 + 32);
        if (v49 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v47) < 0)
          operator delete(v46);
        if (!v27)
          break;
        v26 = *(_QWORD *)(v26 + 32);
        sub_22F1D8DAC(v26, (uint64_t)&v46);
        if (v50)
          goto LABEL_52;
      }
    }
    if ((*(_WORD *)(v26 + 1344) & 0x200) != 0)
    {
      v28 = (char *)v51;
      v29 = (char *)v51 + 8 * v52;
      while (v29 != v28)
      {
        v29 -= 8;
        v46 = __p;
        v47 = xmmword_22F44E330;
        v30 = (unsigned __int8 *)llvm::sys::path::stem();
        sub_22F152BE4(v30, v31, (unsigned __int8 **)&v46);
        if (v23)
          v32 = sub_22F41FEF0(v23);
        else
          v32 = sub_22F1502C8((uint64_t *)a1);
        v23 = v32;
        if (v32)
        {
          v33 = *(_WORD *)(v32 + 1344) & 4;
          v34 = v33 == 0;
          if (a3 && !v33)
          {
            if (v32 == a3)
            {
              v34 = 1;
            }
            else
            {
              v35 = v32;
              do
              {
                v35 = *(_QWORD *)(v35 + 32);
                v34 = v35 != 0;
              }
              while (v35 != a3 && v35 != 0);
            }
          }
          v37 = !v34;
          v3 |= v34;
        }
        else
        {
          v37 = 0;
          v3 = 0;
        }
        if (v46 != __p)
          free(v46);
        if (!v37)
          goto LABEL_98;
      }
      v46 = __p;
      v47 = xmmword_22F44E330;
      v38 = a2[11];
      do
      {
        v39 = *(_QWORD *)(v38 + 8);
        if ((v39 & 2) == 0)
          break;
        v38 = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v38);
      v40 = (unsigned __int8 *)llvm::sys::path::stem();
      sub_22F152BE4(v40, v41, (unsigned __int8 **)&v46);
      if (v23)
        v42 = sub_22F41FEF0(v23);
      else
        v42 = sub_22F1502C8((uint64_t *)a1);
      v23 = v42;
      if (v46 != __p)
        free(v46);
      if (!v23)
        goto LABEL_97;
    }
    if ((*(_WORD *)(v23 + 1344) & 4) != 0)
    {
LABEL_97:
      v3 = 0;
      goto LABEL_98;
    }
    v3 = 1;
    if (a3 && v23 != a3)
    {
      do
      {
        v23 = *(_QWORD *)(v23 + 32);
        v3 = v23 != 0;
      }
      while (v23 != a3 && v23 != 0);
    }
    goto LABEL_98;
  }
  v10 = *((unsigned int *)v7 + 4);
  if ((_DWORD)v10)
  {
    v11 = (_QWORD *)v7[1];
    v12 = &v11[v10];
    do
    {
      v13 = *v11 & 7;
      if (v13 != 4)
      {
        v14 = *v11 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_WORD *)(v14 + 1344) & 4) != 0)
        {
          if (a3)
          {
            if (v14 == a3)
              goto LABEL_32;
            do
              v14 = *(_QWORD *)(v14 + 32);
            while (v14 != a3 && v14 != 0);
            if (v14)
            {
LABEL_32:
              v3 = 0;
              return v3 & 1;
            }
          }
          else if (v13 != 2)
          {
            goto LABEL_32;
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v3 = 1;
  return v3 & 1;
}

_DWORD *sub_22F158DEC(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;

  v2 = *(_DWORD *)(a2 + 24);
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = v2 & 0x7FFFFFFF;
  v5 = *(_DWORD *)(*a1 + 304);
  v6 = v5 + 1;
  if (v5 + 1 > 1)
  {
    if ((v5 & 0x80000000) != 0)
    {
      v9 = -2 - v5;
      if (((*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * ((-2 - v5) >> 6)) >> (-2 - v5)) & 1) != 0)
        v7 = (_DWORD *)(*(_QWORD *)(v3 + 200) + 24 * v9);
      else
        v7 = (_DWORD *)sub_22F1E1134(*a1, v9, 0);
    }
    else
    {
      v7 = (_DWORD *)(*(_QWORD *)(v3 + 184) + 24 * v5);
    }
  }
  else
  {
    v7 = *(_DWORD **)(v3 + 184);
  }
  if ((*v7 & 0x7FFFFFFFu) <= v4
    && (v5 == -2
     || (v6 != *(_DWORD *)(v3 + 192)
       ? ((v6 & 0x80000000) != 0
        ? ((v13 = -3 - v5,
            ((*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * ((-3 - v5) >> 6)) >> (-3 - v5)) & 1) == 0)
         ? (v12 = (_DWORD *)sub_22F1E1134(v3, v13, 0))
         : (v12 = (_DWORD *)(*(_QWORD *)(v3 + 200) + 24 * v13)))
        : (v12 = (_DWORD *)(*(_QWORD *)(v3 + 184) + 24 * v6)),
          v11 = *v12 & 0x7FFFFFFF)
       : (v11 = *(_DWORD *)(v3 + 216)),
         v11 > v4)))
  {
    v10 = *(_DWORD *)(v3 + 304);
  }
  else
  {
    v10 = sub_22F1E1EE8(v3, v4);
  }
  result = sub_22E49F3DC((_QWORD *)v3, v10);
  if (result)
    return *(_DWORD **)((*((_QWORD *)result + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
  return result;
}

char *sub_22F158F40(uint64_t a1, int a2, void *a3, size_t a4, uint64_t a5)
{
  char *v10;
  int v11;
  char *v12;
  void *v14[2];
  uint64_t v15;
  __int128 __p;
  uint64_t v17;
  uint64_t v18;

  v10 = (char *)operator new();
  v11 = *(_DWORD *)(a1 + 1112);
  *(_DWORD *)(a1 + 1112) = v11 + 1;
  v12 = sub_22F1D7750(v10, a3, a4, a2, 0, 0, 0, v11);
  *((_DWORD *)v12 + 7) = 2;
  *(_QWORD *)(a1 + 936) = v12;
  *(_QWORD *)(*sub_22F161990((llvm::StringMapImpl *)(a1 + 1024), a3, a4) + 8) = v10;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_22E3BB2B4(v14, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a5;
    v15 = *(_QWORD *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_22E3BB2B4(&__p, *(void **)(a5 + 24), *(_QWORD *)(a5 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a5 + 24);
    v17 = *(_QWORD *)(a5 + 40);
  }
  v18 = *(_QWORD *)(a5 + 48);
  sub_22F151620(a1, (uint64_t)v10, (unint64_t)v14, 0, 0);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return v10;
}

uint64_t sub_22F159088(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  unsigned __int8 *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const void **v25;
  const void *v26;
  size_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE *v39;
  uint64_t v40;
  size_t v41;
  const void **v42;
  uint64_t v43;
  const void *v44;
  size_t v45;
  uint64_t v46;
  const void **v47;
  char v48;
  BOOL v49;
  const void *v50;
  const void *v51;
  _BYTE *v52;
  char *v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  const void *v58;
  char v59;
  uint64_t v60;
  const void *v61;
  const void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  unsigned int v68;
  size_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  const char *v79;
  char *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  const void **v91;
  uint64_t *v92;
  const void **v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  const void **v97;
  unint64_t *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int16 v103;
  _QWORD v104[2];
  int v105[2];
  uint64_t v106;
  std::__shared_weak_count *v107;
  __int16 v108;
  _BYTE v109[24];
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  char v113;
  _QWORD v114[2];
  char v115;
  __int16 v116;
  const char *v117;
  size_t v118;
  const char *v119;
  __int16 v120;
  void *v121;
  __int128 v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  __int128 v127;
  _QWORD v128[6];

  v128[4] = *MEMORY[0x24BDAC8D0];
  v99 = a3;
  v8 = sub_22F1D1F3C();
  v10 = v9;
  v126 = (unsigned __int8 *)v128;
  v127 = xmmword_22F44E330;
  v11 = (unsigned __int8 *)llvm::sys::path::stem();
  v13 = sub_22F152BE4(v11, v12, &v126);
  v15 = v14;
  if (a4)
  {
    v16 = sub_22F41FEF0(a4);
    if (v16)
      goto LABEL_6;
    v22 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v23 = (unint64_t)sub_22F152B7C(a1, a4);
    v96 = v22;
    if (v23)
    {
      do
      {
        v24 = *(_QWORD *)(v23 + 8);
        v23 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v24 & 2) != 0 && v23);
    }
  }
  else
  {
    v16 = sub_22F1502C8((uint64_t *)a1);
    if (v16)
      goto LABEL_6;
    v17 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    LOWORD(v124) = 261;
    v121 = v8;
    *(_QWORD *)&v122 = v10;
    if (!llvm::sys::path::has_parent_path())
      goto LABEL_5;
    v97 = a2;
    v18 = (char *)llvm::sys::path::parent_path();
    v20 = v19;
    sub_22F1D0728(v17, v18, v19, 1, (uint64_t)&v117);
    if ((v119 & 1) != 0)
      goto LABEL_5;
    v94 = (char *)v117;
    v96 = v17;
    *(_QWORD *)v109 = v117;
    v121 = 0;
    v92 = (uint64_t *)(a1 + 1280);
    v29 = sub_22F2ABDF8((uint64_t *)(a1 + 1280), v109, &v121);
    v30 = *(_QWORD *)(a1 + 1280);
    v31 = *(_DWORD *)(a1 + 1296);
    v32 = (_BYTE *)(v30 + 88 * v31);
    if (v29)
      v33 = v121;
    else
      v33 = (_BYTE *)(v30 + 88 * v31);
    if (v32 == v33)
    {
      v34 = v20 >= 0xA && *(_QWORD *)&v18[v20 - 10] == 0x6F77656D6172662ELL && *(_WORD *)&v18[v20 - 2] == 27506;
      v36 = sub_22F40FAF8(*(uint64_t **)(a1 + 32), (uint64_t)v94, v34);
      if (v36)
      {
        sub_22F412D98((uint64_t *)a1, v36, v99 & 1, (uint64_t)v94, 0, 0, 0);
        *(_QWORD *)v109 = v94;
        v121 = 0;
        v89 = sub_22F2ABDF8(v92, v109, &v121);
        v37 = *(_QWORD *)(a1 + 1280);
        v38 = *(_DWORD *)(a1 + 1296);
        v33 = (_BYTE *)(v37 + 88 * v38);
        if (v89)
          v33 = v121;
      }
      else
      {
        v37 = *(_QWORD *)(a1 + 1280);
        v38 = *(_DWORD *)(a1 + 1296);
        v33 = v32;
      }
      if (v33 == (_BYTE *)(v37 + 88 * v38))
      {
        v109[0] = 0;
        v109[4] &= 0xE8u;
        *(_QWORD *)&v109[16] = &v111;
        v110 = 0x200000000;
        v122 = *(_OWORD *)v109;
        v121 = v94;
        v123 = (char *)&v125;
        v124 = 0x200000000;
        sub_22F413CD0((uint64_t)v114, (uint64_t)v92, &v121, (uint64_t)&v122);
        v90 = (_BYTE *)v114[0];
        sub_22E3B9848(&v123);
        sub_22E3B9848((char **)&v109[16]);
        v33 = v90;
      }
    }
    if ((v33[8] & 1) == 0)
    {
LABEL_5:
      v16 = 0;
      goto LABEL_6;
    }
    v39 = v33;
    v40 = llvm::sys::path::stem();
    v42 = (const void **)*((_QWORD *)v39 + 3);
    v43 = *((unsigned int *)v39 + 8);
    if ((_DWORD)v43)
    {
      v44 = (const void *)v40;
      v45 = v41;
      v91 = &v42[3 * v43];
      v93 = (const void **)*((_QWORD *)v39 + 3);
      v95 = *((unsigned int *)v39 + 8);
      v46 = 24 * v43;
      v47 = v93;
      while (1)
      {
        v48 = *((_BYTE *)v47 + 23);
        v49 = v48 < 0;
        if (v48 >= 0)
          v50 = v47;
        else
          v50 = *v47;
        v51 = (const void *)(v48 & 0x7F);
        if (v49)
          v51 = v47[1];
        if (v51 == (const void *)v45 && (!v45 || !memcmp(v50, v44, v45)))
          break;
        v47 += 3;
        v46 -= 24;
        if (!v46)
        {
          v47 = v91;
          break;
        }
      }
      v52 = v39;
      v42 = v93;
      v43 = v95;
    }
    else
    {
      v52 = v39;
      v47 = (const void **)*((_QWORD *)v39 + 3);
    }
    a2 = v97;
    if (0xAAAAAAAAAAAAAAABLL * (v47 - v42) != v43)
    {
      v16 = 0;
      goto LABEL_6;
    }
    v99 = v52[12] & 1 | v99 & 0xE9 | (v52[12] | v99) & 0x16;
    v23 = *((_QWORD *)v52 + 2);
  }
  v25 = a2;
  v26 = *a2;
  v98 = (unint64_t *)v25;
  v27 = (size_t)v25[1];
  v121 = &v123;
  v122 = xmmword_22F44E310;
  if (v27 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v28 = v122;
    goto LABEL_15;
  }
  v28 = 0;
  if (v27)
  {
LABEL_15:
    memcpy((char *)v121 + v28, v26, v27);
    v28 = v122;
  }
  *(_QWORD *)&v122 = v28 + v27;
  *(_QWORD *)v109 = "Headers";
  v111 = 259;
  v120 = 773;
  v117 = (const char *)v13;
  v118 = v15;
  v119 = ".h";
  v116 = 257;
  v108 = 257;
  llvm::sys::path::append();
  sub_22F1D07D8(v96, v121, v122, 0, 1, (uint64_t)&v112);
  if ((v113 & 1) != 0)
  {
    v16 = 0;
  }
  else
  {
    *(_QWORD *)v105 = 0;
    v53 = (char *)operator new();
    v54 = *(_DWORD *)(a1 + 1112);
    *(_DWORD *)(a1 + 1112) = v54 + 1;
    *(_QWORD *)v105 = sub_22F1D7750(v53, v13, v15, 0, a4, 1, 0, v54);
    sub_22F37065C((uint64_t *)(a1 + 1304), v105)[1] = v23;
    v55 = *(_QWORD *)v105;
    v56 = *(_WORD *)(*(_QWORD *)v105 + 1344) | 0x100;
    *(_WORD *)(*(_QWORD *)v105 + 1344) = v56;
    if (!a4)
    {
      v57 = *(_QWORD *)(a1 + 16);
      v58 = (const void *)(v57 + 496);
      v59 = *(_BYTE *)(v57 + 519);
      v61 = *(const void **)(v57 + 496);
      v60 = *(_QWORD *)(v57 + 504);
      if (v59 >= 0)
        v62 = v58;
      else
        v62 = v61;
      if (v59 >= 0)
        v60 = v59 & 0x7F;
      if (v60 == v15 && (!v15 || !memcmp(v62, v13, v15)))
        *(_QWORD *)(a1 + 936) = v55;
      *(_QWORD *)(*sub_22F161990((llvm::StringMapImpl *)(a1 + 1024), v13, v15) + 8) = v55;
      v63 = *(_DWORD *)(a1 + 1248);
      *((_DWORD *)sub_22E7448C8((_DWORD *)(a1 + 1256), v105) + 2) = v63;
      v55 = *(_QWORD *)v105;
      v56 = *(_WORD *)(*(_QWORD *)v105 + 1344);
    }
    v64 = a3 & 0xFFFFFF00;
    *(_WORD *)(v55 + 1344) = ((_WORD)v99 << 10) & 0x1000 | ((v99 & 3) << 6) | (((v99 >> 4) & 1) << 13) | v56;
    *(_QWORD *)(v55 + 40) = v98;
    do
      v55 = *(_QWORD *)(v55 + 32);
    while (v55);
    v65 = llvm::sys::path::relative_path();
    v111 = 773;
    *(_QWORD *)v109 = v13;
    *(_QWORD *)&v109[8] = v15;
    *(_QWORD *)&v109[16] = ".h";
    v120 = 261;
    v117 = (const char *)v65;
    v118 = v66;
    sub_22F1514D0(a1, *(uint64_t *)v105, v112, (llvm::Twine *)v109, (llvm::Twine *)&v117);
    v67 = *(_QWORD *)v105;
    v68 = *(_DWORD *)(*(_QWORD *)v105 + 1480);
    if (v68 >= *(_DWORD *)(*(_QWORD *)v105 + 1484))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v68 = *(_DWORD *)(v67 + 1480);
    }
    *(_QWORD *)(*(_QWORD *)(v67 + 1472) + 8 * v68) = 4;
    ++*(_DWORD *)(v67 + 1480);
    *(_WORD *)(*(_QWORD *)v105 + 1344) |= 0xA00u;
    LODWORD(v104[0]) = 0;
    v104[1] = std::system_category();
    v70 = *v98;
    v69 = v98[1];
    *(_QWORD *)v109 = &v110;
    *(_OWORD *)&v109[8] = xmmword_22F44E310;
    if (v69 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v71 = *(_QWORD *)&v109[8];
    }
    else
    {
      v71 = 0;
    }
    if (v69)
    {
      memcpy((void *)(*(_QWORD *)v109 + v71), (const void *)v70, v69);
      v71 = *(_QWORD *)&v109[8];
    }
    *(_QWORD *)&v109[8] = v71 + v69;
    v117 = "Frameworks";
    v120 = 259;
    v116 = 257;
    v108 = 257;
    v103 = 257;
    llvm::sys::path::append();
    llvm::sys::path::native();
    v72 = *(_QWORD *)(v96 + 8);
    v120 = 261;
    v117 = *(const char **)v109;
    v118 = *(_QWORD *)&v109[8];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const char **, _QWORD *))(*(_QWORD *)v72 + 32))(&v106, v72, &v117, v104);
    v101 = 0;
    v102 = 0;
    if (!sub_22E6D5ADC(&v106, &v101) && !LODWORD(v104[0]))
    {
      v100 = v64 | v99;
      do
      {
        v73 = *(_BYTE *)(v106 + 31);
        v74 = v73;
        v75 = v73 & 0x7F;
        if (v74 >= 0)
          v76 = v75;
        else
          v76 = *(_QWORD *)(v106 + 16);
        if (v76 >= 0xA)
        {
          v77 = v74 >= 0 ? (char *)(v106 + 8) : *(char **)(v106 + 8);
          if (*(_QWORD *)&v77[v76 - 10] == 0x6F77656D6172662ELL && *(_WORD *)&v77[v76 - 2] == 27506)
          {
            sub_22F1D0728(v96, v77, v76, 1, (uint64_t)&v117);
            if ((v119 & 1) == 0)
            {
              v79 = v117;
              sub_22F1D1F3C();
              while (1)
              {
                v80 = (char *)llvm::sys::path::parent_path();
                if (!v81)
                  break;
                sub_22F1D0728(v96, v80, v81, 1, (uint64_t)v114);
                if ((v115 & 1) == 0 && (unint64_t *)v114[0] == v98)
                {
                  v70 = v100 | v70 & 0xFFFFFFFF00000000;
                  sub_22F159088(a1, v79, v70, *(_QWORD *)v105);
                  break;
                }
              }
            }
          }
        }
        sub_22E6D5A44(&v106, v104);
      }
      while (!sub_22E6D5ADC(&v106, &v101) && !LODWORD(v104[0]));
    }
    v82 = v102;
    if (v102)
    {
      p_shared_owners = (unint64_t *)&v102->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = v107;
    if (v107)
    {
      v86 = (unint64_t *)&v107->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v16 = *(_QWORD *)v105;
    if ((*(_WORD *)(*(_QWORD *)v105 + 1344) & 0x10) != 0 && (v88 = *(_QWORD *)(*(_QWORD *)v105 + 32)) != 0)
    {
      while ((*(_WORD *)(v88 + 1344) & 0x10) == 0)
      {
        v88 = *(_QWORD *)(v88 + 32);
        if (!v88)
          goto LABEL_110;
      }
    }
    else
    {
LABEL_110:
      sub_22F159AC0(*(void ***)v105, (void *)*v98, v98[1], v96);
      v16 = *(_QWORD *)v105;
    }
    if (*(uint64_t **)v109 != &v110)
      free(*(void **)v109);
  }
  if (v121 != &v123)
    free(v121);
LABEL_6:
  if (v126 != (unsigned __int8 *)v128)
    free(v126);
  return v16;
}

void sub_22F159AC0(void **a1, void *__src, size_t __n, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  void *__p[2];
  void *v14;
  char v15;
  __int16 v16;
  void *v17;
  __int128 v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = xmmword_22F44E310;
  if (__n >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v8 = v18;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = 0;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v17 + v8, __src, __n);
    v8 = v18;
  }
LABEL_4:
  *(_QWORD *)&v18 = v8 + __n;
  v16 = 260;
  __p[0] = a1;
  llvm::sys::path::append();
  v9 = 0;
  while (1)
  {
    v10 = *(_BYTE **)((char *)&off_24FAC7ED8 + v9);
    v16 = 257;
    if (*v10)
    {
      __p[0] = v10;
      v11 = 3;
    }
    else
    {
      v11 = 1;
    }
    LOBYTE(v16) = v11;
    llvm::sys::path::replace_extension();
    v12 = *(_QWORD *)(a4 + 8);
    v16 = 261;
    __p[0] = v17;
    __p[1] = (void *)v18;
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v12 + 72))(v12, __p))
      break;
    v9 += 8;
    if (v9 == 32)
      goto LABEL_16;
  }
  if (*((char *)a1 + 23) < 0)
  {
    sub_22E3BB2B4(__p, *a1, (unint64_t)a1[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v14 = a1[2];
  }
  v15 = 1;
  sub_22E780FD4((uint64_t)(a1 + 247), (__n128 *)__p);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
LABEL_16:
  if (v17 != v19)
    free(v17);
}

_QWORD *sub_22F159CA8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Twine *this, llvm::Twine *a5)
{
  void **v8;
  void **v9;
  _QWORD *result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a3;
  *(_QWORD *)(a2 + 72) = a3 | 4;
  llvm::Twine::str(this);
  v8 = (void **)(a2 + 104);
  if (*(char *)(a2 + 127) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v11;
  *(_QWORD *)(a2 + 120) = v12;
  llvm::Twine::str(a5);
  v9 = (void **)(a2 + 128);
  if (*(char *)(a2 + 151) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = v11;
  *(_QWORD *)(a2 + 144) = v12;
  result = sub_22F25E108((uint64_t *)(a1 + 1224), &v13);
  result[1] = a2;
  return result;
}

void sub_22F159D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _BYTE v48[15];

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == a1 + 16 || *(_QWORD *)a2 == a2 + 16)
    {
      if (*(_DWORD *)(a1 + 12) < *(_DWORD *)(a2 + 8))
        sub_22F413854(a1);
      v7 = *(_DWORD *)(a1 + 8);
      if (*(_DWORD *)(a2 + 12) < v7)
      {
        sub_22F413854(a2);
        v7 = *(_DWORD *)(a1 + 8);
      }
      v8 = *(_DWORD *)(a2 + 8);
      if (v7 >= v8)
        v9 = v8;
      else
        v9 = v7;
      if ((_DWORD)v9)
      {
        v10 = 0;
        do
        {
          v11 = (uint64_t *)(*(_QWORD *)a1 + v10);
          v12 = (uint64_t *)(*(_QWORD *)a2 + v10);
          v13 = *v11;
          v14 = v11[1];
          *(_QWORD *)v48 = v11[2];
          *(_QWORD *)&v48[7] = *(uint64_t *)((char *)v11 + 23);
          v15 = *((_BYTE *)v11 + 31);
          v11[2] = 0;
          v11[3] = 0;
          v11[1] = 0;
          v45 = *((_OWORD *)v11 + 2);
          v46 = *((_OWORD *)v11 + 3);
          v47 = v11[8];
          *v11 = *v12;
          v16 = *(_OWORD *)(v12 + 1);
          v11[3] = v12[3];
          *(_OWORD *)(v11 + 1) = v16;
          *((_BYTE *)v12 + 31) = 0;
          *((_BYTE *)v12 + 8) = 0;
          v18 = *((_OWORD *)v12 + 2);
          v17 = *((_OWORD *)v12 + 3);
          v11[8] = v12[8];
          *((_OWORD *)v11 + 2) = v18;
          *((_OWORD *)v11 + 3) = v17;
          *v12 = v13;
          if (*((char *)v12 + 31) < 0)
            operator delete((void *)v12[1]);
          v12[1] = v14;
          v12[2] = *(_QWORD *)v48;
          *(uint64_t *)((char *)v12 + 23) = *(_QWORD *)&v48[7];
          *((_BYTE *)v12 + 31) = v15;
          *((_OWORD *)v12 + 2) = v45;
          *((_OWORD *)v12 + 3) = v46;
          v10 += 72;
          v12[8] = v47;
        }
        while (72 * v9 != v10);
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a2 + 8);
      }
      v19 = v7 - v8;
      if (v7 <= v8)
      {
        v32 = v8 - v7;
        if (v8 > v7)
        {
          v33 = *(_QWORD *)a2;
          if ((_DWORD)v9 != v8)
          {
            v34 = v33 + 72 * v8;
            v35 = *(_QWORD *)a1 + 72 * v7 + 8;
            v36 = v33 + 72 * v9 + 8;
            do
            {
              v37 = v36 - 8;
              *(_QWORD *)(v35 - 8) = *(_QWORD *)(v36 - 8);
              if (*(char *)(v36 + 23) < 0)
              {
                sub_22E3BB2B4((_BYTE *)v35, *(void **)v36, *(_QWORD *)(v36 + 8));
              }
              else
              {
                v38 = *(_OWORD *)v36;
                *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
                *(_OWORD *)v35 = v38;
              }
              v39 = *(_OWORD *)(v36 + 24);
              v40 = *(_OWORD *)(v36 + 40);
              *(_QWORD *)(v35 + 56) = *(_QWORD *)(v36 + 56);
              *(_OWORD *)(v35 + 24) = v39;
              *(_OWORD *)(v35 + 40) = v40;
              v35 += 72;
              v36 += 72;
            }
            while (v37 + 72 != v34);
            v7 = *(_DWORD *)(a1 + 8);
            v33 = *(_QWORD *)a2;
          }
          *(_DWORD *)(a1 + 8) = v32 + v7;
          v41 = *(unsigned int *)(a2 + 8);
          if ((_DWORD)v41 != (_DWORD)v9)
          {
            v42 = 9 * v41;
            v43 = v33 + 8 * v42 - 64;
            v44 = 72 * v9 - 8 * v42;
            do
            {
              if (*(char *)(v43 + 23) < 0)
                operator delete(*(void **)v43);
              v43 -= 72;
              v44 += 72;
            }
            while (v44);
          }
          *(_DWORD *)(a2 + 8) = v9;
        }
      }
      else
      {
        v20 = *(_QWORD *)a1;
        if ((_DWORD)v9 != v7)
        {
          v21 = v20 + 72 * v7;
          v22 = *(_QWORD *)a2 + 72 * v8 + 8;
          v23 = v20 + 72 * v9 + 8;
          do
          {
            v24 = v23 - 8;
            *(_QWORD *)(v22 - 8) = *(_QWORD *)(v23 - 8);
            if (*(char *)(v23 + 23) < 0)
            {
              sub_22E3BB2B4((_BYTE *)v22, *(void **)v23, *(_QWORD *)(v23 + 8));
            }
            else
            {
              v25 = *(_OWORD *)v23;
              *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
              *(_OWORD *)v22 = v25;
            }
            v26 = *(_OWORD *)(v23 + 24);
            v27 = *(_OWORD *)(v23 + 40);
            *(_QWORD *)(v22 + 56) = *(_QWORD *)(v23 + 56);
            *(_OWORD *)(v22 + 24) = v26;
            *(_OWORD *)(v22 + 40) = v27;
            v22 += 72;
            v23 += 72;
          }
          while (v24 + 72 != v21);
          v8 = *(_DWORD *)(a2 + 8);
          v20 = *(_QWORD *)a1;
        }
        *(_DWORD *)(a2 + 8) = v19 + v8;
        v28 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v28 != (_DWORD)v9)
        {
          v29 = 9 * v28;
          v30 = v20 + 8 * v29 - 64;
          v31 = 72 * v9 - 8 * v29;
          do
          {
            if (*(char *)(v30 + 23) < 0)
              operator delete(*(void **)v30);
            v30 -= 72;
            v31 += 72;
          }
          while (v31);
        }
        *(_DWORD *)(a1 + 8) = v9;
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
}

llvm::raw_ostream *sub_22F15A110(uint64_t a1)
{
  llvm::raw_ostream *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  llvm::raw_ostream *result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  unint64_t v24;
  size_t *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  llvm::raw_ostream *v35;
  const char *p_p;
  _BYTE *v37;
  uint64_t v38;
  void *__p;
  char v40;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = (_QWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 7uLL)
  {
    *v3 = 0x3A73656C75646F4DLL;
    *((_QWORD *)v2 + 4) += 8;
  }
  else
  {
    v2 = (llvm::raw_ostream *)llvm::raw_ostream::write(v2, "Modules:");
  }
  v4 = *(unsigned int *)(a1 + 1032);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t **)(a1 + 1024); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 1024);
  }
  v7 = *(_QWORD *)(a1 + 1024) + 8 * v4;
  if (i != (uint64_t *)v7)
  {
    v8 = *i;
    do
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = (uint64_t *)llvm::errs(v2);
      v2 = (llvm::raw_ostream *)sub_22F1D9648(v9, v10, 2, 0);
      do
      {
        v11 = i[1];
        ++i;
        v8 = v11;
        if (v11)
          v12 = v8 == -8;
        else
          v12 = 1;
      }
      while (v12);
    }
    while (i != (uint64_t *)v7);
  }
  result = (llvm::raw_ostream *)llvm::errs(v2);
  v14 = (_QWORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v14 > 7uLL)
  {
    *v14 = 0x3A73726564616548;
    *((_QWORD *)result + 4) += 8;
  }
  else
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "Headers:");
  }
  v15 = *(_QWORD *)(a1 + 1152);
  v16 = *(unsigned int *)(a1 + 1168);
  v17 = v15 + 32 * v16;
  if (*(_DWORD *)(a1 + 1160))
  {
    if ((_DWORD)v16)
    {
      v18 = 32 * v16;
      v19 = *(_QWORD *)(a1 + 1152);
      while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 32;
        v18 -= 32;
        if (!v18)
          goto LABEL_27;
      }
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 1152);
    }
  }
  else
  {
LABEL_27:
    v19 = v15 + 32 * v16;
  }
  v20 = v15 + 32 * v16;
  while (v19 != v20)
  {
    v21 = (llvm::raw_ostream *)llvm::errs(result);
    v22 = v21;
    v23 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 34;
      *(_WORD *)v23 = 8224;
      *((_QWORD *)v21 + 4) += 3;
    }
    else
    {
      v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(v21, "  \"");
    }
    v24 = *(_QWORD *)(*(_QWORD *)v19 + 88);
    do
    {
      v25 = (size_t *)v24;
      v26 = *(_QWORD *)(v24 + 8);
      if ((v26 & 2) == 0)
        break;
      v24 = v26 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v24);
    v29 = *v25;
    v27 = v25 + 4;
    v28 = v29;
    v30 = (_DWORD *)*((_QWORD *)v22 + 4);
    if (v29 <= *((_QWORD *)v22 + 3) - (_QWORD)v30)
    {
      if (v28)
      {
        memcpy(v30, v27, v28);
        v30 = (_DWORD *)(*((_QWORD *)v22 + 4) + v28);
        *((_QWORD *)v22 + 4) = v30;
      }
    }
    else
    {
      v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(v22, (const char *)v27);
      v30 = (_DWORD *)*((_QWORD *)v22 + 4);
    }
    if (*((_QWORD *)v22 + 3) - (_QWORD)v30 > 4uLL)
    {
      *((_BYTE *)v30 + 4) = 32;
      *v30 = 1043144738;
      *((_QWORD *)v22 + 4) += 5;
    }
    else
    {
      v30 = (_DWORD *)llvm::raw_ostream::write(v22, "\" -> ");
    }
    v31 = *(unsigned int *)(v19 + 16);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD **)(v19 + 8);
      v33 = 8 * v31;
      do
      {
        if (v32 != *(_QWORD **)(v19 + 8))
        {
          v30 = (_DWORD *)llvm::errs((llvm *)v30);
          v34 = (_BYTE *)*((_QWORD *)v30 + 4);
          if (*((_BYTE **)v30 + 3) == v34)
          {
            v30 = (_DWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v30, ",");
          }
          else
          {
            *v34 = 44;
            ++*((_QWORD *)v30 + 4);
          }
        }
        v35 = (llvm::raw_ostream *)llvm::errs((llvm *)v30);
        sub_22F1D8A24((uint64_t *)(*v32 & 0xFFFFFFFFFFFFFFF8), 0, &__p);
        if (v40 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        v30 = (_DWORD *)llvm::raw_ostream::write(v35, p_p);
        if (v40 < 0)
          operator delete(__p);
        ++v32;
        v33 -= 8;
      }
      while (v33);
    }
    result = (llvm::raw_ostream *)llvm::errs((llvm *)v30);
    v37 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v37)
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
    }
    else
    {
      *v37 = 10;
      ++*((_QWORD *)result + 4);
    }
    v38 = v19 + 32;
    v19 = v17;
    if (v38 != v17)
    {
      v19 = v38;
      while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 32;
        if (v19 == v17)
        {
          v19 = v17;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F15A4E0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v5 + 96 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      sub_22F4141D4(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v11;
    }
    else
    {
      sub_22F4141D4(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v5 + 96 * v6;
  *(_DWORD *)v7 = *(_DWORD *)v2;
  *(_QWORD *)(v7 + 16) = 0x200000000;
  *(_QWORD *)(v7 + 8) = v7 + 24;
  result = v7 + 8;
  if (*(_DWORD *)(v2 + 16))
  {
    v12 = v6;
    v13 = v5;
    result = sub_22F162838(result, (uint64_t *)(v2 + 8));
    v6 = v12;
    v5 = v13;
  }
  *(_BYTE *)(v5 + 96 * v6 + 88) = *(_BYTE *)(v2 + 88);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_22F15A5B8(uint64_t *a1, uint64_t a2, int a3)
{
  char **v6;
  char **v7;
  const std::string *v8;
  uint64_t *v9;
  uint64_t **v10;
  _BYTE *v11;
  __int128 v12;
  _QWORD *v13;
  _BYTE *v14;
  __int128 v15;
  unint64_t v16;
  char **v17;
  char **p_data;
  uint64_t v19;
  uint64_t v20;
  char ***v22;
  uint64_t *v23;
  std::string __p;

  v6 = *(char ***)(a2 + 2088);
  v7 = *(char ***)(a2 + 2096);
  *(_QWORD *)(a2 + 2104) = 0;
  *(_QWORD *)(a2 + 2088) = 0;
  *(_QWORD *)(a2 + 2096) = 0;
  v22 = (char ***)(a2 + 2088);
  sub_22E791220((char **)(a2 + 2088));
  if (v6 == v7)
  {
    v19 = *(_QWORD *)(a2 + 2088);
    v20 = *(_QWORD *)(a2 + 2096);
    if (v6)
LABEL_28:
      operator delete(v6);
  }
  else
  {
    v8 = (const std::string *)(v6 + 10);
    do
    {
      v9 = sub_22F1503B4(a1, (uint64_t)&v8[-4].__r_.__value_.__r.__words[2], (uint64_t *)a2, a3);
      if (v9)
      {
        memset(&__p, 0, sizeof(__p));
        v23 = v9;
        std::string::operator=(&__p, v8);
        v10 = *(uint64_t ***)(a2 + 2120);
        if ((unint64_t)v10 >= *(_QWORD *)(a2 + 2128))
        {
          v16 = sub_22E7910D0((unint64_t *)(a2 + 2112), (uint64_t)&v23);
        }
        else
        {
          *v10 = v23;
          v11 = v10 + 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_22E3BB2B4(v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v10[3] = (uint64_t *)__p.__r_.__value_.__r.__words[2];
            *(_OWORD *)v11 = v12;
          }
          v16 = (unint64_t)(v10 + 4);
        }
        *(_QWORD *)(a2 + 2120) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v13 = *(_QWORD **)(a2 + 2096);
        if ((unint64_t)v13 >= *(_QWORD *)(a2 + 2104))
        {
          v17 = sub_22F162638(v22, (uint64_t)&v8[-4].__r_.__value_.__r.__words[2]);
        }
        else
        {
          *v13 = v13 + 2;
          v13[1] = 0x200000000;
          if (LODWORD(v8[-3].__r_.__value_.__l.__data_))
            sub_22F162838((uint64_t)v13, (uint64_t *)&v8[-4].__r_.__value_.__r.__words[2]);
          v14 = v13 + 10;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_22E3BB2B4(v14, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
          }
          else
          {
            v15 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
            v13[12] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
            *(_OWORD *)v14 = v15;
          }
          v17 = (char **)(v13 + 13);
        }
        *(_QWORD *)(a2 + 2096) = v17;
      }
      p_data = &v8[1].__r_.__value_.__l.__data_;
      v8 = (const std::string *)((char *)v8 + 104);
    }
    while (p_data != v7);
    v19 = *(_QWORD *)(a2 + 2088);
    v20 = *(_QWORD *)(a2 + 2096);
    if (v6)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 13;
        sub_22E5762C8(v7);
      }
      while (v7 != v6);
      goto LABEL_28;
    }
  }
  return v19 != v20;
}

uint64_t sub_22F15A7BC(_BYTE **a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int AsUnsignedInteger;
  char v6;
  _BYTE *v7;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unsigned __int16 *v27;
  int v28;
  unsigned int v29;
  void *v30;
  int v31;
  int v34;
  int v35;
  BOOL v37;
  int v38;
  uint64_t v40;
  int v41;
  int v43;
  BOOL v44;
  BOOL v45;
  unsigned int v47;
  _QWORD v48[3];
  __int16 v49;
  _QWORD v50[3];
  __int16 v51;
  _QWORD *v52;
  _QWORD v53[3];
  __int16 v54;
  int v55;
  int v56;
  unsigned __int16 *v57;
  unsigned __int16 v58;
  __int16 v59;
  _QWORD v60[4];
  _QWORD v61[2];
  void *__src;
  __int128 v63;
  _BYTE v64[345];
  _BYTE *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[40];
  __int16 v70;
  void *v71;
  __int128 v72;
  _QWORD v73[107];

  v73[105] = *MEMORY[0x24BDAC8D0];
  v47 = *((_DWORD *)a1 + 43);
  while (1)
  {
    while (1)
    {
      a1[21] = (_BYTE *)3;
      *((_DWORD *)a1 + 44) = 0;
      a1[23] = 0;
      sub_22F14651C(*a1, (uint64_t)&v55);
      v2 = v55;
      *((_DWORD *)a1 + 43) = v55;
      if (v58 > 0x27u)
        break;
      switch(v58)
      {
        case 1u:
          goto LABEL_86;
        case 2u:
        case 3u:
        case 5u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x15u:
        case 0x16u:
          goto LABEL_52;
        case 4u:
          continue;
        case 6u:
          v26 = 0;
          v27 = v57;
          v28 = v56;
          a1[23] = v57;
          *((_DWORD *)a1 + 44) = v28;
          switch(v28)
          {
            case 3:
              if (*v27 ^ 0x7375 | *((unsigned __int8 *)v27 + 2) ^ 0x65)
                v26 = 0;
              else
                v26 = 0x100000012;
              break;
            case 4:
              if (*(_DWORD *)v27 != 1802398060)
                goto LABEL_140;
              v26 = 0x10000000DLL;
              break;
            case 6:
              v31 = *(_DWORD *)v27 ^ 0x6F707865 | v27[2] ^ 0x7472;
              if (v31)
                v26 = 0;
              else
                v26 = 0x100000009;
              if (v31)
              {
                if (*(_DWORD *)v27 == 1702131813 && v27[2] == 28274)
                {
                  v26 = 0x10000000BLL;
                }
                else if (*(_DWORD *)v27 == 1684104552 && v27[2] == 29285)
                {
                  v26 = 0x100000004;
                }
                else
                {
                  v34 = *(_DWORD *)v27;
                  v35 = v27[2];
                  if (v34 == 1969516397 && v35 == 25964)
                    v26 = 0x10000000ELL;
                }
              }
              break;
            case 7:
              v37 = *(_DWORD *)v27 == 1818458213 && *(_DWORD *)((char *)v27 + 3) == 1701082476;
              v38 = 1;
              if (!v37)
              {
                v26 = 0;
                goto LABEL_143;
              }
              v43 = 0;
              v26 = 0x100000007;
              goto LABEL_149;
            case 8:
              if (*(_QWORD *)v27 == 0x7463696C666E6F63)
                v26 = 0x100000002;
              else
                v26 = 0;
              v38 = 0;
              if (*(_QWORD *)v27 == 0x746963696C707865)
                v26 = 0x100000008;
              v43 = 1;
              goto LABEL_149;
            case 9:
              if (*(_QWORD *)v27 == 0x615F74726F707865 && *((_BYTE *)v27 + 8) == 115)
              {
                v26 = 0x10000000ALL;
              }
              else
              {
                v40 = *(_QWORD *)v27;
                v41 = *((unsigned __int8 *)v27 + 8);
                if (v40 == 0x726F77656D617266 && v41 == 107)
                  v26 = 0x10000000CLL;
                else
LABEL_140:
                  v26 = 0;
              }
              break;
            case 13:
              v38 = 0;
              v26 = 0x100000001;
              if (*(_QWORD *)v27 ^ 0x6D5F6769666E6F63 | *(_QWORD *)((char *)v27 + 5) ^ 0x736F7263616D5F67)
                v26 = 0;
LABEL_143:
              v43 = 0;
LABEL_149:
              if (HIDWORD(v26))
                v38 = 0;
              if (v38 == 1
                && (*(_DWORD *)v27 == 1986622064 ? (v44 = *(_DWORD *)((char *)v27 + 3) == 1702125942) : (v44 = 0), v44))
              {
                v26 = 0x100000010;
              }
              else
              {
                if (HIDWORD(v26))
                  v43 = 0;
                if (v43 == 1 && *(_QWORD *)v27 == 0x7365726975716572)
                {
                  v26 = 0x100000013;
                }
                else if (v38
                       && (*(_DWORD *)v27 == 1954047348 ? (v45 = *(_DWORD *)((char *)v27 + 3) == 1818326388) : (v45 = 0),
                           v45))
                {
                  v26 = 0x100000017;
                }
                else if (v43 && *(_QWORD *)v27 == 0x616C6C6572626D75)
                {
                  v26 = 0x100000011;
                }
              }
              break;
            default:
              break;
          }
          if ((v26 & 0x300000000) != 0)
            v25 = v26;
          else
            v25 = 5;
          goto LABEL_176;
        case 7u:
          v71 = v73;
          v72 = xmmword_22F44E330;
          v3 = v73;
          v4 = (v56 + 1);
          if (v56 != -1)
          {
            if (v4 < 0x21)
            {
              v24 = 0;
              v3 = v73;
            }
            else
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v24 = v72;
              v3 = v71;
            }
            if (v4 != v24)
            {
              bzero((char *)v3 + v24, v4 - v24);
              v3 = v71;
            }
            *(_QWORD *)&v72 = v4;
          }
          v52 = v3;
          sub_22F1414C0((uint64_t)&v55, (uint64_t *)&v52, (uint64_t *)a1[1], *((_QWORD **)a1[4] + 2), 0);
          v60[0] = 0;
          AsUnsignedInteger = llvm::getAsUnsignedInteger();
          v6 = AsUnsignedInteger;
          if (AsUnsignedInteger)
          {
            v7 = a1[3];
            *((_DWORD *)v7 + 78) = *((_DWORD *)a1 + 43);
            *((_DWORD *)v7 + 79) = 1094;
            if ((char)v7[311] < 0)
            {
              **((_BYTE **)v7 + 36) = 0;
              *((_QWORD *)v7 + 37) = 0;
            }
            else
            {
              v7[288] = 0;
              v7[311] = 0;
            }
            v50[0] = v7 + 320;
            v50[1] = 0;
            v50[2] = v7;
            v51 = 1;
            v7[320] = 0;
            *((_DWORD *)v7 + 166) = 0;
            v18 = *((unsigned int *)v7 + 194);
            if ((_DWORD)v18)
            {
              v19 = *((_QWORD *)v7 + 96);
              v20 = 56 * v18;
              do
              {
                if (*(char *)(v19 + v20 - 9) < 0)
                  operator delete(*(void **)(v19 + v20 - 32));
                v20 -= 56;
              }
              while (v20);
            }
            *((_DWORD *)v7 + 194) = 0;
            sub_22E3BB0B8((uint64_t)v50);
            *((_BYTE *)a1 + 65) = 1;
          }
          else
          {
            v12 = (_BYTE *)v60[0];
            *((_DWORD *)a1 + 42) = 22;
            a1[23] = v12;
          }
          if (v71 != v73)
            free(v71);
          if ((v6 & 1) != 0)
            continue;
          return v47;
        case 0xDu:
          if ((v59 & 0x20) != 0)
          {
            v13 = a1[3];
            *((_DWORD *)v13 + 78) = v2;
            *((_DWORD *)v13 + 79) = 32;
            if ((char)v13[311] < 0)
            {
              **((_BYTE **)v13 + 36) = 0;
              *((_QWORD *)v13 + 37) = 0;
            }
            else
            {
              v13[288] = 0;
              v13[311] = 0;
            }
            v53[0] = v13 + 320;
            v53[1] = 0;
            v53[2] = v13;
            v54 = 1;
            v13[320] = 0;
            *((_DWORD *)v13 + 166) = 0;
            v21 = *((unsigned int *)v13 + 194);
            if ((_DWORD)v21)
            {
              v22 = *((_QWORD *)v13 + 96);
              v23 = 56 * v21;
              do
              {
                if (*(char *)(v22 + v23 - 9) < 0)
                  operator delete(*(void **)(v22 + v23 - 32));
                v23 -= 56;
              }
              while (v23);
            }
            *((_DWORD *)v13 + 194) = 0;
            sub_22E3BB0B8((uint64_t)v53);
            *((_BYTE *)a1 + 65) = 1;
          }
          else
          {
            sub_22F1D4230((uint64_t)&v71);
            v11 = a1[2];
            v60[0] = a1[1];
            v60[1] = &v71;
            v60[3] = 0;
            v61[0] = 0;
            *(_QWORD *)((char *)v61 + 6) = 0;
            v60[2] = v11;
            __src = v64;
            v63 = xmmword_22F45DFC0;
            v65 = v64;
            v66 = v69;
            v67 = 0;
            v68 = 32;
            v70 = 0;
            sub_22F14D524((uint64_t)v60, (uint64_t)&v55, 1);
            if (!(_BYTE)v70)
            {
              v29 = (_DWORD)v65 - (_DWORD)__src;
              v30 = (void *)sub_22E3CD3D4((uint64_t)(a1 + 9), ((_DWORD)v65 - (_DWORD)__src + 1), 0);
              memcpy(v30, __src, v29);
              *((_BYTE *)v30 + v29) = 0;
              *((_DWORD *)a1 + 42) = 21;
              a1[23] = v30;
              *((_DWORD *)a1 + 44) = v29;
              if (v66 != v69)
                free(v66);
              if (__src != v64)
                free(__src);
              sub_22E54B4D4((uint64_t)&v71);
              return v47;
            }
            if (v66 != v69)
              free(v66);
            if (__src != v64)
              free(__src);
            sub_22E54B4D4((uint64_t)&v71);
          }
          break;
        case 0x13u:
          v25 = 26;
          goto LABEL_176;
        case 0x14u:
          v25 = 27;
          goto LABEL_176;
        case 0x17u:
          v25 = 24;
          goto LABEL_176;
        case 0x18u:
          v25 = 25;
          goto LABEL_176;
        case 0x19u:
          v25 = 15;
          goto LABEL_176;
        default:
          if (v58 != 30)
            goto LABEL_52;
          v25 = 20;
          goto LABEL_176;
      }
    }
    if (v58 == 66)
      break;
    if (v58 == 40)
    {
      v25 = 6;
      goto LABEL_176;
    }
    if (v58 == 65)
    {
      *((_DWORD *)a1 + 42) = 0;
      return v47;
    }
LABEL_52:
    v14 = a1[3];
    *((_DWORD *)v14 + 78) = *((_DWORD *)a1 + 43);
    *((_DWORD *)v14 + 79) = 1094;
    if ((char)v14[311] < 0)
    {
      **((_BYTE **)v14 + 36) = 0;
      *((_QWORD *)v14 + 37) = 0;
    }
    else
    {
      v14[288] = 0;
      v14[311] = 0;
    }
    v48[0] = v14 + 320;
    v48[1] = 0;
    v48[2] = v14;
    v49 = 1;
    v14[320] = 0;
    *((_DWORD *)v14 + 166) = 0;
    v15 = *((unsigned int *)v14 + 194);
    if ((_DWORD)v15)
    {
      v16 = *((_QWORD *)v14 + 96);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *((_DWORD *)v14 + 194) = 0;
    sub_22E3BB0B8((uint64_t)v48);
    *((_BYTE *)a1 + 65) = 1;
  }
  sub_22F14651C(*a1, (uint64_t)&v55);
  if ((v59 & 1) != 0 || v58 != 6 || v56 != 6)
    goto LABEL_52;
  if (*(_DWORD *)v57 != 1734439536 || v57[2] != 24941)
    goto LABEL_52;
  sub_22F14651C(*a1, (uint64_t)&v55);
  if ((v59 & 1) != 0 || v58 != 6 || v56 != 5)
    goto LABEL_52;
  if (*(_DWORD *)v57 != 1851878499 || *((_BYTE *)v57 + 4) != 103)
    goto LABEL_52;
  sub_22F14651C(*a1, (uint64_t)&v55);
  if ((v59 & 1) != 0 || v58 != 6 || v56 != 6)
    goto LABEL_52;
  if (*(_DWORD *)v57 != 1969516397 || v57[2] != 25964)
    goto LABEL_52;
  sub_22F14651C(*a1, (uint64_t)&v55);
  if ((v59 & 1) != 0 || v58 != 6 || v56 != 8 || *(_QWORD *)v57 != 0x73746E65746E6F63)
    goto LABEL_52;
LABEL_86:
  v25 = 3;
LABEL_176:
  *((_DWORD *)a1 + 42) = v25;
  return v47;
}

uint64_t sub_22F15B14C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  __int16 v18;
  __int128 __dst;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  int v23;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = 32 * v4;
    do
    {
      if (*(char *)(v5 + v6 - 9) < 0)
        operator delete(*(void **)(v5 + v6 - 32));
      v6 -= 32;
    }
    while (v6);
  }
  *(_DWORD *)(a2 + 8) = 0;
  while ((*(_DWORD *)(a1 + 168) | 0x10) == 0x15)
  {
    v7 = *(const void **)(a1 + 184);
    v8 = *(unsigned int *)(a1 + 176);
    if (v8 >= 0x17)
    {
      if ((v8 | 7) == 0x17)
        v10 = (v8 & 0xFFFFFFF8) + 8;
      else
        v10 = v8 | 7;
      p_dst = (__int128 *)operator new(v10 + 1);
      *((_QWORD *)&__dst + 1) = v8;
      v20 = v10 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = p_dst;
LABEL_15:
      memmove(p_dst, v7, v8);
      goto LABEL_16;
    }
    HIBYTE(v20) = *(_DWORD *)(a1 + 176);
    p_dst = &__dst;
    if ((_DWORD)v8)
      goto LABEL_15;
LABEL_16:
    *((_BYTE *)p_dst + v8) = 0;
    v11 = *(_DWORD *)(a1 + 172);
    *(_OWORD *)__p = __dst;
    v22 = v20;
    v23 = v11;
    sub_22F15B31C(a2, (__n128 *)__p);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    sub_22F15A7BC((_BYTE **)a1);
    if (*(_DWORD *)(a1 + 168) != 15)
      return 0;
    sub_22F15A7BC((_BYTE **)a1);
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v13 + 312) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(v13 + 316) = 1075;
  if (*(char *)(v13 + 311) < 0)
  {
    **(_BYTE **)(v13 + 288) = 0;
    *(_QWORD *)(v13 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 288) = 0;
    *(_BYTE *)(v13 + 311) = 0;
  }
  v17[0] = v13 + 320;
  v17[1] = 0;
  v17[2] = v13;
  v18 = 1;
  *(_BYTE *)(v13 + 320) = 0;
  *(_DWORD *)(v13 + 664) = 0;
  v14 = *(unsigned int *)(v13 + 776);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(v13 + 768);
    v16 = 56 * v14;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
  }
  *(_DWORD *)(v13 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v17);
  return 1;
}

__n128 sub_22F15B31C(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  char *v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 32 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = (char *)a2 - v5;
      sub_22F414240(a1);
      v5 = *(_QWORD *)a1;
      v2 = (__n128 *)&v10[*(_QWORD *)a1];
    }
    else
    {
      sub_22F414240(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (__n128 *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  result = *v2;
  v6[1].n128_u64[0] = v2[1].n128_u64[0];
  *v6 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v6[1].n128_u32[2] = v2[1].n128_u32[2];
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F15B3BC(uint64_t a1, int a2, void *__src, size_t __len, const void *a5, size_t a6, void **a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  void *v20;
  size_t v21;
  size_t v22;
  __int128 *p_dst;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 __p;
  unint64_t v32;
  char v33;
  unsigned __int8 *v34[3];
  __int16 v35;
  __int128 __dst;
  unint64_t v37;

  *(_DWORD *)(a1 + 312) = a2;
  *(_DWORD *)(a1 + 316) = 1253;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v34[0] = (unsigned __int8 *)(a1 + 320);
  v34[1] = 0;
  v34[2] = (unsigned __int8 *)a1;
  v35 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v15 = *(unsigned int *)(a1 + 776);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 768);
    v17 = 56 * v15;
    do
    {
      if (*(char *)(v16 + v17 - 9) < 0)
        operator delete(*(void **)(v16 + v17 - 32));
      v17 -= 56;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 776) = 0;
  sub_22E3B89A8(v34, __src, __len);
  v18 = *((_BYTE *)a7 + 23);
  v19 = v18 < 0;
  if (v18 >= 0)
    v20 = a7;
  else
    v20 = *a7;
  v21 = v18 & 0x7F;
  if (v19)
    v22 = (size_t)a7[1];
  else
    v22 = v21;
  sub_22E3B89A8(v34, v20, v22);
  v30 = 0;
  v29 = 0;
  v33 = 0;
  v27 = a8;
  v28 = 1;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a6 >= 0x17)
  {
    v24 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v24 = a6 | 7;
    v25 = v24 + 1;
    p_dst = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&__dst + 1) = a6;
    v37 = v25 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_22;
  }
  HIBYTE(v37) = a6;
  p_dst = &__dst;
  if (a6)
LABEL_22:
    memmove(p_dst, a5, a6);
  *((_BYTE *)p_dst + a6) = 0;
  __p = __dst;
  v32 = v37;
  sub_22E6D82D0((uint64_t *)v34, &v27);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
  return sub_22E3BB0B8((uint64_t)v34);
}

void sub_22F15B584(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  size_t v34;
  uint64_t v35;
  size_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char v74;
  uint64_t *v75;
  size_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  BOOL v83;
  _BYTE *v84;
  size_t v85;
  size_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  char v94;
  int v95;
  uint64_t *v96;
  size_t v97;
  size_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _DWORD *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *i;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  int v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  size_t v176;
  _BYTE *v177;
  const void *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  const void *v203;
  char v204;
  uint64_t v205;
  const void *v206;
  const void *v207;
  int v208;
  _BOOL4 v209;
  uint64_t v210;
  uint64_t v211;
  const void **v212;
  uint64_t *v213;
  char v214;
  _BYTE *v215;
  size_t v216;
  uint64_t v217;
  _BYTE *v218;
  unint64_t v219;
  char v220;
  BOOL v221;
  const void *v222;
  size_t v223;
  size_t v224;
  char *v225;
  char v227;
  BOOL v228;
  const void *v229;
  size_t v230;
  size_t v231;
  char *v232;
  __int16 *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  unsigned __int8 **v237;
  unsigned __int8 *v238;
  unint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  size_t v242;
  char v243;
  uint64_t v244;
  const void *v245;
  signed __int8 v246;
  int v247;
  const void *v248;
  unsigned __int8 *v249;
  const void **v250;
  char v251;
  uint64_t v252;
  char *v253;
  char v254;
  int v255;
  char *v256;
  char *v257;
  unsigned __int8 *v258;
  unsigned __int8 *v259;
  const void **v260;
  char *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  void *v269;
  size_t v270;
  uint64_t v271;
  char v272;
  BOOL v273;
  void *v274;
  size_t v275;
  size_t v276;
  const void *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _DWORD *v292;
  uint64_t v293;
  const void *v294;
  char *v295;
  int v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  const void *v303;
  size_t v304;
  void *v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  int v311;
  int v312;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  const void *v320;
  size_t v321;
  void *v322;
  uint64_t v323;
  const void *v324;
  void **v325;
  size_t v326;
  int v328;
  char v329;
  uint64_t v330;
  const void *v331;
  size_t v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int64x2_t *v348;
  const void *v349;
  size_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  const void *v355;
  size_t v356;
  _BYTE *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  const char *v376;
  void *v377;
  size_t v378;
  size_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  _BYTE *v393;
  __int128 v394;
  char **v395;
  char *v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  __int128 v400;
  _QWORD *v401;
  const void *v402;
  const void *v403;
  const void *v404;
  size_t v405;
  size_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char v414;
  void *v415;
  size_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  void *v420;
  char v421;
  void *v422;
  size_t v423;
  size_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char v429;
  void *v430;
  size_t v431;
  size_t v432;
  _BYTE *v433;
  const void *v434;
  uint64_t v435;
  uint64_t v436;
  void **v437;
  int64x2_t v438;
  char v439;
  char *v440;
  uint64_t v441;
  const void *v442;
  size_t v443;
  void *v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  __int128 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned __int8 *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  __int16 v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  int v511;
  _QWORD v512[3];
  __int16 v513;
  _QWORD v514[3];
  __int16 v515;
  _QWORD v516[3];
  __int16 v517;
  _QWORD v518[3];
  __int16 v519;
  _QWORD v520[3];
  __int16 v521;
  _QWORD v522[3];
  __int16 v523;
  _QWORD v524[3];
  __int16 v525;
  _QWORD v526[3];
  __int16 v527;
  _QWORD v528[3];
  __int16 v529;
  __int16 v530;
  void *v531;
  size_t v532;
  uint64_t v533;
  __int16 v534;
  __int16 v535;
  _QWORD v536[3];
  __int16 v537;
  _QWORD v538[3];
  __int16 v539;
  _QWORD v540[3];
  __int16 v541;
  void **__dst;
  size_t v543;
  uint64_t v544;
  __int16 v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  __int16 v549;
  char v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  __int16 v554;
  uint64_t *v555;
  uint64_t v556;
  uint64_t v557;
  __int16 v558;
  __int16 v559;
  void *__s2[3];
  __int16 v561;
  __int16 v562;
  _BYTE __src[32];
  _BYTE *v564;
  char v565;
  uint64_t v566;
  int v567;
  void **v568;
  _BYTE __s1[32];
  __int128 v570;
  uint64_t v571;
  __int128 v572;
  uint64_t v573;
  uint64_t v574;

  v574 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 168);
  if (v2 == 11)
  {
    sub_22F15A7BC((_BYTE **)a1);
    if (*(_DWORD *)(a1 + 168) == 14)
    {
      sub_22F15A7BC((_BYTE **)a1);
      *(_QWORD *)__src = &__src[16];
      *(_QWORD *)&__src[8] = 0x200000000;
      if (sub_22F15B14C(a1, (uint64_t)__src))
      {
        *(_BYTE *)(a1 + 65) = 1;
LABEL_103:
        v46 = (char **)__src;
LABEL_988:
        sub_22E5762C8(v46);
        return;
      }
      if (*(_DWORD *)(a1 + 168) != 21)
      {
        v28 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v28 + 312) = *(_DWORD *)(a1 + 172);
        *(_DWORD *)(v28 + 316) = 1073;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        v546 = v28 + 320;
        v547 = 0;
        v548 = v28;
        v549 = 1;
        *(_BYTE *)(v28 + 320) = 0;
        *(_DWORD *)(v28 + 664) = 0;
        v43 = *(unsigned int *)(v28 + 776);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v28 + 768);
          v45 = 56 * v43;
          do
          {
            if (*(char *)(v44 + v45 - 9) < 0)
              operator delete(*(void **)(v44 + v45 - 32));
            v45 -= 56;
          }
          while (v45);
        }
        *(_DWORD *)(v28 + 776) = 0;
        sub_22E3BB0B8((uint64_t)&v546);
        *(_BYTE *)(a1 + 65) = 1;
        goto LABEL_103;
      }
      v17 = *(const void **)(a1 + 184);
      v18 = *(unsigned int *)(a1 + 176);
      if (v18 >= 0x17)
      {
        if ((v18 | 7) == 0x17)
          v32 = (v18 & 0xFFFFFFF8) + 8;
        else
          v32 = v18 | 7;
        p_dst = (void **)operator new(v32 + 1);
        v544 = v32 - 0x7FFFFFFFFFFFFFFFLL;
        __dst = p_dst;
        v543 = v18;
      }
      else
      {
        HIBYTE(v544) = *(_DWORD *)(a1 + 176);
        p_dst = (void **)&__dst;
        if (!(_DWORD)v18)
        {
LABEL_69:
          *((_BYTE *)p_dst + v18) = 0;
          sub_22F15A7BC((_BYTE **)a1);
          if (v544 >= 0)
            v33 = (void **)&__dst;
          else
            v33 = __dst;
          if (v544 >= 0)
            v34 = HIBYTE(v544) & 0x7F;
          else
            v34 = v543;
          *(_QWORD *)__s1 = &__s1[24];
          *(_OWORD *)&__s1[8] = xmmword_22F44E310;
          v562 = 261;
          __s2[0] = v33;
          __s2[1] = (void *)v34;
          if (!llvm::sys::path::is_relative())
            goto LABEL_80;
          v35 = *(_QWORD *)(a1 + 56);
          v37 = *(const void **)v35;
          v36 = *(_QWORD *)(v35 + 8);
          v38 = *(_QWORD *)&__s1[8];
          if (*(_QWORD *)&__s1[16] < v36 + *(_QWORD *)&__s1[8])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v38 = *(_QWORD *)&__s1[8];
            if (!v36)
              goto LABEL_79;
          }
          else if (!v36)
          {
LABEL_79:
            *(_QWORD *)&__s1[8] = v38 + v36;
            v562 = 260;
            __s2[0] = &__dst;
            v559 = 257;
            v535 = 257;
            v530 = 257;
            llvm::sys::path::append();
            v33 = *(void ***)__s1;
            v34 = *(_QWORD *)&__s1[8];
LABEL_80:
            sub_22F1D07D8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), v33, v34, 0, 1, (uint64_t)__s2);
            if (((uint64_t)__s2[2] & 1) == 0)
              sub_22F412D98();
            if (*(_BYTE **)__s1 != &__s1[24])
              free(*(void **)__s1);
            if (SHIBYTE(v544) < 0)
              operator delete(__dst);
            goto LABEL_103;
          }
          memcpy((void *)(*(_QWORD *)__s1 + v38), v37, v36);
          v38 = *(_QWORD *)&__s1[8];
          goto LABEL_79;
        }
      }
      memmove(p_dst, v17, v18);
      goto LABEL_69;
    }
    v4 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v4 + 312) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(v4 + 316) = 1074;
    if (*(char *)(v4 + 311) < 0)
    {
      **(_BYTE **)(v4 + 288) = 0;
      *(_QWORD *)(v4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 288) = 0;
      *(_BYTE *)(v4 + 311) = 0;
    }
    v551 = v4 + 320;
    v552 = 0;
    v553 = v4;
    v554 = 1;
    *(_BYTE *)(v4 + 320) = 0;
    *(_DWORD *)(v4 + 664) = 0;
    v20 = *(unsigned int *)(v4 + 776);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(v4 + 768);
      v22 = 56 * v20;
      do
      {
        if (*(char *)(v21 + v22 - 9) < 0)
          operator delete(*(void **)(v21 + v22 - 32));
        v22 -= 56;
      }
      while (v22);
    }
    *(_DWORD *)(v4 + 776) = 0;
    v23 = &v551;
    goto LABEL_54;
  }
  v3 = v2 == 8;
  if (v2 == 8)
  {
    v5 = sub_22F15A7BC((_BYTE **)a1);
    v6 = *(_DWORD *)(a1 + 168);
  }
  else
  {
    v5 = 0;
    v6 = *(_DWORD *)(a1 + 168);
  }
  if (v6 == 12)
  {
    v7 = sub_22F15A7BC((_BYTE **)a1);
    v8 = *(_DWORD *)(a1 + 168);
  }
  else
  {
    v7 = 0;
    v8 = v6;
  }
  if (v8 != 14)
  {
    v16 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v16 + 312) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(v16 + 316) = 1074;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    v526[0] = v16 + 320;
    v526[1] = 0;
    v526[2] = v16;
    v527 = 1;
    *(_BYTE *)(v16 + 320) = 0;
    *(_DWORD *)(v16 + 664) = 0;
    v24 = *(unsigned int *)(v16 + 776);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v16 + 768);
      v26 = 56 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 9) < 0)
          operator delete(*(void **)(v25 + v26 - 32));
        v26 -= 56;
      }
      while (v26);
    }
    *(_DWORD *)(v16 + 776) = 0;
    v23 = v526;
LABEL_54:
    sub_22E3BB0B8((uint64_t)v23);
    sub_22F15A7BC((_BYTE **)a1);
LABEL_55:
    *(_BYTE *)(a1 + 65) = 1;
    return;
  }
  *(_DWORD *)(a1 + 48) = sub_22F15A7BC((_BYTE **)a1);
  if (*(_DWORD *)(a1 + 168) != 20)
  {
    v555 = &v557;
    v556 = 0x200000000;
    if (sub_22F15B14C(a1, (uint64_t)&v555))
    {
LABEL_39:
      *(_BYTE *)(a1 + 65) = 1;
LABEL_987:
      v46 = (char **)&v555;
      goto LABEL_988;
    }
    v29 = *(_QWORD *)(a1 + 192);
    v30 = v556;
    if (v29)
    {
      if (v556 < 2)
        goto LABEL_190;
      v31 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v31 + 312) = *((_DWORD *)v555 + 6);
      *(_DWORD *)(v31 + 316) = 1090;
      if (*(char *)(v31 + 311) < 0)
      {
        **(_BYTE **)(v31 + 288) = 0;
        *(_QWORD *)(v31 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v31 + 288) = 0;
        *(_BYTE *)(v31 + 311) = 0;
      }
      *(_QWORD *)__s1 = v31 + 320;
      *(_QWORD *)&__s1[8] = 0;
      *(_QWORD *)&__s1[16] = v31;
      *(_WORD *)&__s1[24] = 1;
      *(_BYTE *)(v31 + 320) = 0;
      *(_DWORD *)(v31 + 664) = 0;
      v53 = *(unsigned int *)(v31 + 776);
      if ((_DWORD)v53)
      {
        v54 = *(_QWORD *)(v31 + 768);
        v55 = 56 * v53;
        do
        {
          if (*(char *)(v54 + v55 - 9) < 0)
            operator delete(*(void **)(v54 + v55 - 32));
          v55 -= 56;
        }
        while (v55);
      }
      *(_DWORD *)(v31 + 776) = 0;
      sub_22E4D6448(v31 + 656, *((unsigned int *)v555 + 6) | ((unint64_t)LODWORD(v555[4 * v556 - 1]) << 32), 1);
      sub_22E3BB0B8((uint64_t)__s1);
      *(_BYTE *)(a1 + 65) = 1;
      goto LABEL_987;
    }
    if (v2 == 8 && (_DWORD)v556 == 1)
    {
      v47 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v47 + 312) = v5;
      *(_DWORD *)(v47 + 316) = 1079;
      if (*(char *)(v47 + 311) < 0)
      {
        **(_BYTE **)(v47 + 288) = 0;
        *(_QWORD *)(v47 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v47 + 288) = 0;
        *(_BYTE *)(v47 + 311) = 0;
      }
      v524[0] = v47 + 320;
      v524[1] = 0;
      v524[2] = v47;
      v525 = 1;
      *(_BYTE *)(v47 + 320) = 0;
      *(_DWORD *)(v47 + 664) = 0;
      v61 = *(unsigned int *)(v47 + 776);
      if ((_DWORD)v61)
      {
        v62 = *(_QWORD *)(v47 + 768);
        v63 = 56 * v61;
        do
        {
          if (*(char *)(v62 + v63 - 9) < 0)
            operator delete(*(void **)(v62 + v63 - 32));
          v63 -= 56;
        }
        while (v63);
      }
      *(_DWORD *)(v47 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v524);
      v5 = 0;
      v3 = 0;
      *(_BYTE *)(a1 + 65) = 1;
      v30 = v556;
      v29 = *(_QWORD *)(a1 + 192);
    }
    if (v30 >= 2)
    {
      v509 = v5;
      v506 = v29;
      v64 = 0;
      v65 = 0;
      *(_QWORD *)(a1 + 192) = 0;
      v66 = v30 - 1;
      while (1)
      {
        v67 = *(_QWORD *)(a1 + 192);
        if (v67)
        {
          v68 = sub_22F41FEF0(v67);
          if (!v68)
          {
LABEL_152:
            v69 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v69 + 312) = v555[4 * v64 + 3];
            *(_DWORD *)(v69 + 316) = 1087;
            if (*(char *)(v69 + 311) < 0)
            {
              **(_BYTE **)(v69 + 288) = 0;
              *(_QWORD *)(v69 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v69 + 288) = 0;
              *(_BYTE *)(v69 + 311) = 0;
            }
            *(_QWORD *)__s1 = v69 + 320;
            *(_QWORD *)&__s1[8] = 0;
            *(_QWORD *)&__s1[16] = v69;
            *(_WORD *)&__s1[24] = 1;
            *(_BYTE *)(v69 + 320) = 0;
            *(_DWORD *)(v69 + 664) = 0;
            v70 = *(unsigned int *)(v69 + 776);
            if ((_DWORD)v70)
            {
              v71 = *(_QWORD *)(v69 + 768);
              v72 = 56 * v70;
              do
              {
                if (*(char *)(v71 + v72 - 9) < 0)
                  operator delete(*(void **)(v71 + v72 - 32));
                v72 -= 56;
              }
              while (v72);
            }
            *(_DWORD *)(v69 + 776) = 0;
            v73 = &v555[4 * v64];
            v74 = *((_BYTE *)v73 + 23);
            if (v74 >= 0)
              v75 = &v555[4 * v64];
            else
              v75 = (uint64_t *)*v73;
            if (v74 >= 0)
              v76 = v74 & 0x7F;
            else
              v76 = v73[1];
            sub_22E3B89A8((unsigned __int8 **)__s1, v75, v76);
            v77 = *(_QWORD *)(a1 + 192);
            v78 = *(unsigned __int8 **)__s1;
            if (!*(_QWORD *)__s1)
            {
              v78 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__s1[8]);
              *(_QWORD *)__s1 = v78;
            }
            v78[*v78 + 1] = 2;
            v79 = *(_QWORD *)__s1;
            v80 = **(_BYTE **)__s1;
            **(_BYTE **)__s1 = v80 + 1;
            *(_QWORD *)(v79 + 8 * v80 + 16) = v77 != 0;
            v81 = *(uint64_t **)(a1 + 192);
            if (v81)
            {
              do
              {
                v82 = v81;
                v81 = (uint64_t *)v81[4];
              }
              while (v81);
              sub_22F1D8A24(v82, 0, __src);
              LOBYTE(v81) = __src[23];
            }
            else
            {
              __src[23] = 0;
              __src[0] = 0;
            }
            v83 = (char)v81 < 0;
            if ((char)v81 >= 0)
              v84 = __src;
            else
              v84 = *(_BYTE **)__src;
            v85 = v81 & 0x7F;
            if (v83)
              v86 = *(_QWORD *)&__src[8];
            else
              v86 = v85;
            sub_22E3B89A8((unsigned __int8 **)__s1, v84, v86);
            if ((__src[23] & 0x80000000) != 0)
              operator delete(*(void **)__src);
            sub_22E3BB0B8((uint64_t)__s1);
            *(_BYTE *)(a1 + 65) = 1;
            goto LABEL_181;
          }
        }
        else
        {
          v68 = sub_22F1502C8(*(uint64_t **)(a1 + 32));
          if (!v68)
            goto LABEL_152;
        }
        if (!v64)
          v65 = v68;
        *(_QWORD *)(a1 + 192) = v68;
LABEL_181:
        if (++v64 == v66)
        {
          if (v65)
          {
            v87 = *(_QWORD *)(a1 + 40);
            v88 = (unint64_t)sub_22F158DEC(*(uint64_t **)(a1 + 32), v65);
            v5 = v509;
            if (v88)
            {
              do
              {
                v89 = *(_QWORD *)(v88 + 8);
                v88 = v89 & 0xFFFFFFFFFFFFFFFCLL;
              }
              while ((v89 & 2) != 0 && v88);
            }
            if (v88 != v87)
              sub_22F41333C(*(_QWORD *)(a1 + 32), v65, *(const void **)(a1 + 40));
            v29 = v506;
          }
          else
          {
            v29 = v506;
            v5 = v509;
          }
          break;
        }
      }
    }
LABEL_190:
    v510 = v5;
    v90 = &v555[4 * v556];
    v93 = (void *)*(v90 - 4);
    v91 = v90 - 4;
    v92 = (uint64_t *)v93;
    v94 = *((_BYTE *)v91 + 23);
    v95 = v94;
    if (v94 >= 0)
      v96 = v91;
    else
      v96 = v92;
    v97 = v94 & 0x7F;
    if (v95 >= 0)
      v98 = v97;
    else
      v98 = v91[1];
    v99 = *((_DWORD *)v91 + 6);
    LOBYTE(v528[0]) = 0;
    if ((sub_22F15F004(a1, v528) & 1) != 0)
      goto LABEL_987;
    if (*(_DWORD *)(a1 + 168) == 24)
    {
      v508 = v7;
      v504 = sub_22F15A7BC((_BYTE **)a1);
      v100 = *(_QWORD *)(a1 + 192);
      if (v100)
        v101 = sub_22F41FEF0(v100);
      else
        v101 = sub_22F1502C8(*(uint64_t **)(a1 + 32));
      v102 = v101;
      v507 = v29;
      if (!v101)
      {
        v103 = sub_22F158808(*(_QWORD *)(a1 + 32), v96, v98, *(_QWORD *)(a1 + 192), v6 == 12, v3);
        goto LABEL_202;
      }
      v201 = *(_DWORD *)(v101 + 24);
      v202 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if ((*(_DWORD *)(v202 + 240) & 0xE0) != 0x20)
        goto LABEL_409;
      v203 = (const void *)(v202 + 496);
      v204 = *(_BYTE *)(v202 + 519);
      v206 = *(const void **)(v202 + 496);
      v205 = *(_QWORD *)(v202 + 504);
      if (v204 >= 0)
        v207 = v203;
      else
        v207 = v206;
      if (v204 >= 0)
        v205 = v204 & 0x7F;
      if (v205 == v98 && (!v98 || !memcmp(v207, v96, v98)))
      {
        v208 = sub_22E677168(*(_QWORD *)(a1 + 8), v99);
        v209 = v208 != sub_22E677168(*(_QWORD *)(a1 + 8), *(_DWORD *)(v102 + 24));
      }
      else
      {
LABEL_409:
        v209 = 0;
      }
      if (!v201)
        v209 = 1;
      if (*(_QWORD *)(a1 + 192) || !v209)
      {
        if (*(_QWORD *)(v102 + 32)
          || (v210 = *(_QWORD *)(a1 + 32),
              *(_QWORD *)__s1 = v102,
              *((_DWORD *)sub_22E7448C8((_DWORD *)(v210 + 1256), __s1) + 2) >= *(_DWORD *)(v210 + 1248)))
        {
          v488 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(v488 + 312) = v99;
          *(_DWORD *)(v488 + 316) = 1089;
          if (*(char *)(v488 + 311) < 0)
          {
            **(_BYTE **)(v488 + 288) = 0;
            *(_QWORD *)(v488 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v488 + 288) = 0;
            *(_BYTE *)(v488 + 311) = 0;
          }
          *(_QWORD *)__s1 = v488 + 320;
          *(_QWORD *)&__s1[8] = 0;
          *(_QWORD *)&__s1[16] = v488;
          *(_WORD *)&__s1[24] = 1;
          *(_BYTE *)(v488 + 320) = 0;
          *(_DWORD *)(v488 + 664) = 0;
          v490 = *(unsigned int *)(v488 + 776);
          if ((_DWORD)v490)
          {
            v491 = *(_QWORD *)(v488 + 768);
            v492 = 56 * v490;
            do
            {
              if (*(char *)(v491 + v492 - 9) < 0)
                operator delete(*(void **)(v491 + v492 - 32));
              v492 -= 56;
            }
            while (v492);
          }
          *(_DWORD *)(v488 + 776) = 0;
          sub_22E3B89A8((unsigned __int8 **)__s1, v96, v98);
          sub_22E3BB0B8((uint64_t)__s1);
          v493 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(v493 + 312) = *(_DWORD *)(v102 + 24);
          *(_DWORD *)(v493 + 316) = 1252;
          if (*(char *)(v493 + 311) < 0)
          {
            **(_BYTE **)(v493 + 288) = 0;
            *(_QWORD *)(v493 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v493 + 288) = 0;
            *(_BYTE *)(v493 + 311) = 0;
          }
          v518[0] = v493 + 320;
          v518[1] = 0;
          v518[2] = v493;
          v519 = 1;
          *(_BYTE *)(v493 + 320) = 0;
          *(_DWORD *)(v493 + 664) = 0;
          v494 = *(unsigned int *)(v493 + 776);
          if ((_DWORD)v494)
          {
            v495 = *(_QWORD *)(v493 + 768);
            v496 = 56 * v494;
            do
            {
              if (*(char *)(v495 + v496 - 9) < 0)
                operator delete(*(void **)(v495 + v496 - 32));
              v496 -= 56;
            }
            while (v496);
          }
          *(_DWORD *)(v493 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v518);
          sub_22F4135CC(a1, 25);
          if (*(_DWORD *)(a1 + 168) == 25)
            sub_22F15A7BC((_BYTE **)a1);
          goto LABEL_39;
        }
        v103 = sub_22F41301C(*(_QWORD *)(a1 + 32), v96, v98, v6 == 12, v102);
LABEL_202:
        *(_QWORD *)(a1 + 192) = v103;
        *((_DWORD *)v103 + 6) = v99;
        v104 = v528[0];
        if ((v528[0] & 1) != 0 || *(_BYTE *)(a1 + 64))
        {
          *((_WORD *)v103 + 672) |= 0x40u;
          v103 = *(char **)(a1 + 192);
        }
        if ((v104 & 2) != 0)
        {
          *((_WORD *)v103 + 672) |= 0x80u;
          v103 = *(char **)(a1 + 192);
        }
        if ((v104 & 0x10) != 0)
        {
          *((_WORD *)v103 + 672) |= 0x2000u;
          v103 = *(char **)(a1 + 192);
        }
        *((_QWORD *)v103 + 5) = *(_QWORD *)(a1 + 56);
        v105 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88);
        do
        {
          v106 = (unint64_t *)v105;
          v107 = *(_QWORD *)(v105 + 8);
          if ((v107 & 2) == 0)
            break;
          v105 = v107 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v105);
        v110 = *v106;
        v108 = v106 + 4;
        v109 = v110;
        if (v110 >= 0x18)
        {
          if (*(_QWORD *)((char *)v108 + v109 - 24) == 0x702E656C75646F6DLL
            && *(_QWORD *)((char *)v108 + v109 - 16) == 0x6D2E657461766972
            && *(_QWORD *)((char *)v108 + v109 - 8) == 0x70616D656C75646FLL)
          {
            goto LABEL_232;
          }
        }
        else if (v109 < 0x12)
        {
          goto LABEL_233;
        }
        v114 = (char *)v108 + v109;
        v115 = *(_QWORD *)(v114 - 18);
        v116 = *(_QWORD *)(v114 - 10);
        v117 = *((unsigned __int16 *)v114 - 1);
        if (v115 != 0x705F656C75646F6DLL || v116 != 0x6D2E657461766972 || v117 != 28769)
        {
LABEL_233:
          v120 = sub_22E49F3DC(*(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 344));
          if (v120)
            v121 = *v120 & 0x7FFFFFFF;
          else
            v121 = 0;
          v126 = *(_QWORD *)(a1 + 32);
          if ((*(_BYTE *)(**(_QWORD **)(v126 + 32) + 216) & 0x10) == 0)
            goto LABEL_577;
          v127 = *(_QWORD *)(a1 + 24);
          v128 = v121;
          v129 = *(_QWORD *)(v127 + 32);
          if (sub_22F1CF68C(v129, 0x52Bu, v121, v127) == 1
            || sub_22F1CF68C(v129, 0x52Au, v128, v127) == 1
            || (*(_WORD *)(*(_QWORD *)(a1 + 192) + 1344) & 0x4000) == 0)
          {
            goto LABEL_577;
          }
          v130 = *(_QWORD *)(v126 + 1024);
          v131 = *(unsigned int *)(v126 + 1032);
          if ((_DWORD)v131)
          {
            for (i = *(uint64_t **)(v126 + 1024); !*i || *i == -8; ++i)
              ;
          }
          else
          {
            i = *(uint64_t **)(v126 + 1024);
          }
          if (i == (uint64_t *)(v130 + 8 * v131))
          {
LABEL_577:
            v505 = MEMORY[0x24BED83D8] + 16;
            while (1)
            {
              switch(*(_DWORD *)(a1 + 168))
              {
                case 1:
                  v296 = sub_22F15A7BC((_BYTE **)a1);
                  if (*(_QWORD *)(*(_QWORD *)(a1 + 192) + 32))
                  {
                    v297 = *(_QWORD *)(a1 + 24);
                    *(_DWORD *)(v297 + 312) = v296;
                    *(_DWORD *)(v297 + 316) = 1057;
                    if (*(char *)(v297 + 311) < 0)
                    {
                      **(_BYTE **)(v297 + 288) = 0;
                      *(_QWORD *)(v297 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v297 + 288) = 0;
                      *(_BYTE *)(v297 + 311) = 0;
                    }
                    *(_QWORD *)__src = v297 + 320;
                    *(_QWORD *)&__src[8] = 0;
                    *(_QWORD *)&__src[16] = v297;
                    *(_WORD *)&__src[24] = 1;
                    *(_BYTE *)(v297 + 320) = 0;
                    *(_DWORD *)(v297 + 664) = 0;
                    v344 = *(unsigned int *)(v297 + 776);
                    if ((_DWORD)v344)
                    {
                      v345 = *(_QWORD *)(v297 + 768);
                      v346 = 56 * v344;
                      do
                      {
                        if (*(char *)(v345 + v346 - 9) < 0)
                          operator delete(*(void **)(v345 + v346 - 32));
                        v346 -= 56;
                      }
                      while (v346);
                    }
                    *(_DWORD *)(v297 + 776) = 0;
                    sub_22E3BB0B8((uint64_t)__src);
                  }
                  LOBYTE(v531) = 0;
                  if ((sub_22F15F004(a1, &v531) & 1) != 0)
                    continue;
                  if ((v531 & 4) != 0)
                  {
                    v347 = *(_QWORD *)(a1 + 192);
                    if (!*(_QWORD *)(v347 + 32))
                      *(_WORD *)(v347 + 1344) |= 0x1000u;
                  }
                  if (*(_DWORD *)(a1 + 168) != 5)
                    continue;
                  v348 = *(int64x2_t **)(a1 + 192);
                  if (v348[2].i64[0])
                    goto LABEL_900;
                  v349 = *(const void **)(a1 + 184);
                  if (!v349)
                  {
                    memset(__s2, 0, sizeof(__s2));
                    goto LABEL_798;
                  }
                  v350 = *(unsigned int *)(a1 + 176);
                  if (v350 >= 0x17)
                  {
                    if ((v350 | 7) == 0x17)
                      v381 = (v350 & 0xFFFFFFF8) + 8;
                    else
                      v381 = v350 | 7;
                    v351 = operator new(v381 + 1);
                    __s2[2] = (void *)(v381 - 0x7FFFFFFFFFFFFFFFLL);
                    __s2[0] = v351;
                    __s2[1] = (void *)v350;
                  }
                  else
                  {
                    HIBYTE(__s2[2]) = *(_DWORD *)(a1 + 176);
                    v351 = __s2;
                    if (!(_DWORD)v350)
                      goto LABEL_797;
                  }
                  memmove(v351, v349, v350);
LABEL_797:
                  *((_BYTE *)v351 + v350) = 0;
LABEL_798:
                  v382 = v348[129].u64[1];
                  v383 = v348[130].u64[0];
                  if (v382 < v383)
                    goto LABEL_896;
                  v384 = v348[129].i64[0];
                  v385 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v382 - v384) >> 3);
                  v386 = v385 + 1;
                  if (v385 + 1 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_1029;
                  v387 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v383 - v384) >> 3);
                  if (2 * v387 > v386)
                    v386 = 2 * v387;
                  if (v387 >= 0x555555555555555)
                    v388 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v388 = v386;
                  *(_QWORD *)&v570 = v348 + 130;
                  if (v388)
                  {
                    if (v388 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_1030;
                    v389 = (char *)operator new(24 * v388);
                  }
                  else
                  {
                    v389 = 0;
                  }
                  v396 = &v389[24 * v385];
                  *((void **)v396 + 2) = __s2[2];
                  *(_OWORD *)v396 = *(_OWORD *)__s2;
                  memset(__s2, 0, sizeof(__s2));
                  v397 = v348[129].u64[1];
                  v398 = v348[129].i64[0];
                  if (v397 == v398)
                    goto LABEL_897;
                  v399 = &v389[24 * v385];
                  do
                  {
                    v400 = *(_OWORD *)(v397 - 24);
                    *((_QWORD *)v399 - 1) = *(_QWORD *)(v397 - 8);
                    *(_OWORD *)(v399 - 24) = v400;
                    v399 -= 24;
                    *(_QWORD *)(v397 - 16) = 0;
                    *(_QWORD *)(v397 - 8) = 0;
                    *(_QWORD *)(v397 - 24) = 0;
                    v397 -= 24;
                  }
                  while (v397 != v398);
LABEL_895:
                  v438 = v348[129];
                  v439 = HIBYTE(__s2[2]);
LABEL_898:
                  v440 = v396 + 24;
                  v348[129].i64[0] = (uint64_t)v399;
                  v348[129].i64[1] = (uint64_t)(v396 + 24);
                  *(int64x2_t *)&__s1[8] = v438;
                  v441 = v348[130].i64[0];
                  v348[130].i64[0] = (uint64_t)&v389[24 * v388];
                  *(_QWORD *)&__s1[24] = v441;
                  *(_QWORD *)__s1 = v438.i64[0];
                  sub_22E3B8B94((uint64_t)__s1);
                  v348[129].i64[1] = (uint64_t)v440;
                  if (v439 < 0)
                    operator delete(__s2[0]);
LABEL_900:
                  sub_22F15A7BC((_BYTE **)a1);
                  if (*(_DWORD *)(a1 + 168))
                    continue;
                  sub_22F15A7BC((_BYTE **)a1);
                  if (*(_DWORD *)(a1 + 168) == 5)
                  {
                    v348 = *(int64x2_t **)(a1 + 192);
                    if (v348[2].i64[0])
                      goto LABEL_900;
                    v442 = *(const void **)(a1 + 184);
                    if (v442)
                    {
                      v443 = *(unsigned int *)(a1 + 176);
                      if (v443 >= 0x17)
                      {
                        if ((v443 | 7) == 0x17)
                          v445 = (v443 & 0xFFFFFFF8) + 8;
                        else
                          v445 = v443 | 7;
                        v444 = operator new(v445 + 1);
                        __s2[2] = (void *)(v445 - 0x7FFFFFFFFFFFFFFFLL);
                        __s2[0] = v444;
                        __s2[1] = (void *)v443;
                      }
                      else
                      {
                        HIBYTE(__s2[2]) = *(_DWORD *)(a1 + 176);
                        v444 = __s2;
                        if (!(_DWORD)v443)
                        {
LABEL_913:
                          *((_BYTE *)v444 + v443) = 0;
                          goto LABEL_914;
                        }
                      }
                      memmove(v444, v442, v443);
                      goto LABEL_913;
                    }
                    memset(__s2, 0, sizeof(__s2));
LABEL_914:
                    v382 = v348[129].u64[1];
                    v446 = v348[130].u64[0];
                    if (v382 >= v446)
                    {
                      v447 = v348[129].i64[0];
                      v448 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v382 - v447) >> 3);
                      v449 = v448 + 1;
                      if (v448 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_1029:
                        abort();
                      v450 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v446 - v447) >> 3);
                      if (2 * v450 > v449)
                        v449 = 2 * v450;
                      if (v450 >= 0x555555555555555)
                        v388 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v388 = v449;
                      *(_QWORD *)&v570 = v348 + 130;
                      if (v388)
                      {
                        if (v388 <= 0xAAAAAAAAAAAAAAALL)
                        {
                          v389 = (char *)operator new(24 * v388);
                          goto LABEL_925;
                        }
LABEL_1030:
                        sub_22E3B3F8C();
                      }
                      v389 = 0;
LABEL_925:
                      v396 = &v389[24 * v448];
                      *((void **)v396 + 2) = __s2[2];
                      *(_OWORD *)v396 = *(_OWORD *)__s2;
                      memset(__s2, 0, sizeof(__s2));
                      v397 = v348[129].u64[1];
                      v451 = v348[129].i64[0];
                      if (v397 != v451)
                      {
                        v399 = &v389[24 * v448];
                        do
                        {
                          v452 = *(_OWORD *)(v397 - 24);
                          *((_QWORD *)v399 - 1) = *(_QWORD *)(v397 - 8);
                          *(_OWORD *)(v399 - 24) = v452;
                          v399 -= 24;
                          *(_QWORD *)(v397 - 16) = 0;
                          *(_QWORD *)(v397 - 8) = 0;
                          *(_QWORD *)(v397 - 24) = 0;
                          v397 -= 24;
                        }
                        while (v397 != v451);
                        goto LABEL_895;
                      }
LABEL_897:
                      v439 = 0;
                      v438 = vdupq_n_s64(v397);
                      v399 = v396;
                      goto LABEL_898;
                    }
LABEL_896:
                    *(_OWORD *)v382 = *(_OWORD *)__s2;
                    *(void **)(v382 + 16) = __s2[2];
                    v348[129].i64[1] = v382 + 24;
                    goto LABEL_900;
                  }
                  v453 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v453 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v453 + 316) = 1061;
                  if (*(char *)(v453 + 311) < 0)
                  {
                    **(_BYTE **)(v453 + 288) = 0;
                    *(_QWORD *)(v453 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v453 + 288) = 0;
                    *(_BYTE *)(v453 + 311) = 0;
                  }
                  *(_QWORD *)__s1 = v453 + 320;
                  *(_QWORD *)&__s1[8] = 0;
                  *(_QWORD *)&__s1[16] = v453;
                  *(_WORD *)&__s1[24] = 1;
                  *(_BYTE *)(v453 + 320) = 0;
                  *(_DWORD *)(v453 + 664) = 0;
                  v454 = *(unsigned int *)(v453 + 776);
                  if ((_DWORD)v454)
                  {
                    v455 = *(_QWORD *)(v453 + 768);
                    v456 = 56 * v454;
                    do
                    {
                      if (*(char *)(v455 + v456 - 9) < 0)
                        operator delete(*(void **)(v455 + v456 - 32));
                      v456 -= 56;
                    }
                    while (v456);
                  }
                  *(_DWORD *)(v453 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)__s1);
                  continue;
                case 2:
                  v298 = sub_22F15A7BC((_BYTE **)a1);
                  *(_QWORD *)__s1 = &__s1[16];
                  *(_QWORD *)&__s1[8] = 0x200000000;
                  v573 = 0;
                  v572 = 0uLL;
                  if ((sub_22F15B14C(a1, (uint64_t)__s1) & 1) != 0)
                    goto LABEL_830;
                  if (*(_DWORD *)(a1 + 168))
                  {
                    v299 = *(_QWORD *)(a1 + 24);
                    *(_DWORD *)(v299 + 312) = *(_DWORD *)(a1 + 172);
                    *(_DWORD *)(v299 + 316) = 1062;
                    if (*(char *)(v299 + 311) < 0)
                    {
                      **(_BYTE **)(v299 + 288) = 0;
                      *(_QWORD *)(v299 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v299 + 288) = 0;
                      *(_BYTE *)(v299 + 311) = 0;
                    }
                    *(_QWORD *)__src = v299 + 320;
                    *(_QWORD *)&__src[8] = 0;
                    *(_QWORD *)&__src[16] = v299;
                    *(_WORD *)&__src[24] = 1;
                    *(_BYTE *)(v299 + 320) = 0;
                    *(_DWORD *)(v299 + 664) = 0;
                    v367 = *(unsigned int *)(v299 + 776);
                    if ((_DWORD)v367)
                    {
                      v368 = *(_QWORD *)(v299 + 768);
                      v369 = 56 * v367;
                      do
                      {
                        if (*(char *)(v368 + v369 - 9) < 0)
                          operator delete(*(void **)(v368 + v369 - 32));
                        v369 -= 56;
                      }
                      while (v369);
                    }
                    *(_DWORD *)(v299 + 776) = 0;
                    sub_22E4D6448(v299 + 656, v298 | ((unint64_t)v298 << 32), 1);
                    sub_22E3BB0B8((uint64_t)__src);
                    goto LABEL_830;
                  }
                  sub_22F15A7BC((_BYTE **)a1);
                  if (*(_DWORD *)(a1 + 168) == 21)
                  {
                    v355 = *(const void **)(a1 + 184);
                    if (v355)
                    {
                      v356 = *(unsigned int *)(a1 + 176);
                      if (v356 >= 0x17)
                      {
                        if ((v356 | 7) == 0x17)
                          v390 = (v356 & 0xFFFFFFF8) + 8;
                        else
                          v390 = v356 | 7;
                        v357 = operator new(v390 + 1);
                        *(_QWORD *)&__src[16] = v390 - 0x7FFFFFFFFFFFFFFFLL;
                        *(_QWORD *)__src = v357;
                        *(_QWORD *)&__src[8] = v356;
                      }
                      else
                      {
                        __src[23] = *(_DWORD *)(a1 + 176);
                        v357 = __src;
                        if (!(_DWORD)v356)
                        {
LABEL_813:
                          v357[v356] = 0;
                          goto LABEL_814;
                        }
                      }
                      memmove(v357, v355, v356);
                      goto LABEL_813;
                    }
                    memset(__src, 0, 24);
LABEL_814:
                    if (SHIBYTE(v573) < 0)
                      operator delete((void *)v572);
                    v572 = *(_OWORD *)__src;
                    v573 = *(_QWORD *)&__src[16];
                    sub_22F15A7BC((_BYTE **)a1);
                    v391 = *(_QWORD *)(a1 + 192);
                    v392 = *(_QWORD **)(v391 + 2096);
                    if ((unint64_t)v392 >= *(_QWORD *)(v391 + 2104))
                    {
                      v395 = sub_22F162638((char ***)(v391 + 2088), (uint64_t)__s1);
                    }
                    else
                    {
                      *v392 = v392 + 2;
                      v392[1] = 0x200000000;
                      if (*(_DWORD *)&__s1[8])
                        sub_22F162838((uint64_t)v392, (uint64_t *)__s1);
                      v393 = v392 + 10;
                      if (SHIBYTE(v573) < 0)
                      {
                        sub_22E3BB2B4(v393, (void *)v572, *((unint64_t *)&v572 + 1));
                      }
                      else
                      {
                        v394 = v572;
                        v392[12] = v573;
                        *(_OWORD *)v393 = v394;
                      }
                      v395 = (char **)(v392 + 13);
                    }
                    *(_QWORD *)(v391 + 2096) = v395;
                    goto LABEL_830;
                  }
                  v370 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v370 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v370 + 316) = 1063;
                  if (*(char *)(v370 + 311) < 0)
                  {
                    **(_BYTE **)(v370 + 288) = 0;
                    *(_QWORD *)(v370 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v370 + 288) = 0;
                    *(_BYTE *)(v370 + 311) = 0;
                  }
                  __s2[0] = (void *)(v370 + 320);
                  __s2[1] = 0;
                  __s2[2] = (void *)v370;
                  v561 = 1;
                  *(_BYTE *)(v370 + 320) = 0;
                  *(_DWORD *)(v370 + 664) = 0;
                  v371 = *(unsigned int *)(v370 + 776);
                  if ((_DWORD)v371)
                  {
                    v372 = *(_QWORD *)(v370 + 768);
                    v373 = 56 * v371;
                    do
                    {
                      if (*(char *)(v372 + v373 - 9) < 0)
                        operator delete(*(void **)(v372 + v373 - 32));
                      v373 -= 56;
                    }
                    while (v373);
                  }
                  *(_DWORD *)(v370 + 776) = 0;
                  v531 = 0;
                  v532 = 0;
                  v533 = 0;
                  *(_DWORD *)&__src[8] = 0;
                  v565 = 0;
                  v566 = 0;
                  v567 = 1;
                  v564 = 0;
                  *(_OWORD *)&__src[16] = 0uLL;
                  *(_QWORD *)__src = v505;
                  v568 = &v531;
                  llvm::raw_ostream::SetBufferAndMode();
                  if (*(_DWORD *)&__s1[8])
                  {
                    v374 = 0;
                    v375 = 32 * *(unsigned int *)&__s1[8];
                    do
                    {
                      if (v374)
                      {
                        if (*(_BYTE **)&__src[24] == v564)
                          llvm::raw_ostream::write((llvm::raw_ostream *)__src, ".");
                        else
                          *v564++ = 46;
                      }
                      if (*(char *)(*(_QWORD *)__s1 + v374 + 23) >= 0)
                        v376 = (const char *)(*(_QWORD *)__s1 + v374);
                      else
                        v376 = *(const char **)(*(_QWORD *)__s1 + v374);
                      llvm::raw_ostream::write((llvm::raw_ostream *)__src, v376);
                      v374 += 32;
                    }
                    while (v375 != v374);
                  }
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)__src);
                  if (v533 >= 0)
                    v377 = &v531;
                  else
                    v377 = v531;
                  if (v533 >= 0)
                    v378 = HIBYTE(v533) & 0x7F;
                  else
                    v378 = v532;
                  sub_22E3B89A8((unsigned __int8 **)__s2, v377, v378);
                  if (SHIBYTE(v533) < 0)
                    operator delete(v531);
                  sub_22E3BB0B8((uint64_t)__s2);
LABEL_830:
                  if (SHIBYTE(v573) < 0)
                    operator delete((void *)v572);
LABEL_832:
                  sub_22E5762C8((char **)__s1);
                  continue;
                case 3:
                  v462 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v462 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v462 + 316) = 1076;
                  if (*(char *)(v462 + 311) < 0)
                  {
                    **(_BYTE **)(v462 + 288) = 0;
                    *(_QWORD *)(v462 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v462 + 288) = 0;
                    *(_BYTE *)(v462 + 311) = 0;
                  }
                  v514[0] = v462 + 320;
                  v514[1] = 0;
                  v514[2] = v462;
                  v515 = 1;
                  *(_BYTE *)(v462 + 320) = 0;
                  *(_DWORD *)(v462 + 664) = 0;
                  v463 = *(unsigned int *)(v462 + 776);
                  if ((_DWORD)v463)
                  {
                    v464 = *(_QWORD *)(v462 + 768);
                    v465 = 56 * v463;
                    do
                    {
                      if (*(char *)(v464 + v465 - 9) < 0)
                        operator delete(*(void **)(v464 + v465 - 32));
                      v465 -= 56;
                    }
                    while (v465);
                  }
                  *(_DWORD *)(v462 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)v514);
                  v466 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v466 + 312) = v504;
                  *(_DWORD *)(v466 + 316) = 1250;
                  if (*(char *)(v466 + 311) < 0)
                  {
                    **(_BYTE **)(v466 + 288) = 0;
                    *(_QWORD *)(v466 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v466 + 288) = 0;
                    *(_BYTE *)(v466 + 311) = 0;
                  }
                  v512[0] = v466 + 320;
                  v512[1] = 0;
                  v512[2] = v466;
                  v513 = 1;
                  *(_BYTE *)(v466 + 320) = 0;
                  *(_DWORD *)(v466 + 664) = 0;
                  v467 = *(unsigned int *)(v466 + 776);
                  if ((_DWORD)v467)
                  {
                    v468 = *(_QWORD *)(v466 + 768);
                    v469 = 56 * v467;
                    do
                    {
                      if (*(char *)(v468 + v469 - 9) < 0)
                        operator delete(*(void **)(v468 + v469 - 32));
                      v469 -= 56;
                    }
                    while (v469);
                  }
                  *(_DWORD *)(v466 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)v512);
                  *(_BYTE *)(a1 + 65) = 1;
                  goto LABEL_966;
                case 4:
                  sub_22F15A7BC((_BYTE **)a1);
                  sub_22F15F524(a1, 4);
                  continue;
                case 7:
                  sub_22F15A7BC((_BYTE **)a1);
                  sub_22F15F524(a1, 7);
                  continue;
                case 8:
                case 0xB:
                case 0xC:
                case 0xE:
                  sub_22F15B584(a1);
                  continue;
                case 9:
                  v301 = sub_22F15A7BC((_BYTE **)a1);
                  *(_QWORD *)__src = &__src[16];
                  *(_QWORD *)&__src[8] = 0x200000000;
                  while (2)
                  {
                    v302 = *(_DWORD *)(a1 + 168);
                    if (v302 == 5)
                    {
                      v303 = *(const void **)(a1 + 184);
                      v304 = *(unsigned int *)(a1 + 176);
                      if (v304 >= 0x17)
                      {
                        if ((v304 | 7) == 0x17)
                          v306 = (v304 & 0xFFFFFFF8) + 8;
                        else
                          v306 = v304 | 7;
                        v305 = operator new(v306 + 1);
                        __s2[2] = (void *)(v306 - 0x7FFFFFFFFFFFFFFFLL);
                        __s2[0] = v305;
                        __s2[1] = (void *)v304;
                      }
                      else
                      {
                        HIBYTE(__s2[2]) = *(_DWORD *)(a1 + 176);
                        v305 = __s2;
                        if (!(_DWORD)v304)
                        {
LABEL_601:
                          *((_BYTE *)v305 + v304) = 0;
                          v307 = *(_DWORD *)(a1 + 172);
                          *(_OWORD *)__s1 = *(_OWORD *)__s2;
                          *(void **)&__s1[16] = __s2[2];
                          *(_DWORD *)&__s1[24] = v307;
                          sub_22F15B31C((uint64_t)__src, (__n128 *)__s1);
                          if ((__s1[23] & 0x80000000) != 0)
                            operator delete(*(void **)__s1);
                          sub_22F15A7BC((_BYTE **)a1);
                          if (*(_DWORD *)(a1 + 168) == 15)
                          {
                            sub_22F15A7BC((_BYTE **)a1);
                            continue;
                          }
                          v329 = 0;
                          goto LABEL_685;
                        }
                      }
                      memmove(v305, v303, v304);
                      goto LABEL_601;
                    }
                    break;
                  }
                  if (v302 == 20)
                  {
                    sub_22F15A7BC((_BYTE **)a1);
                    v329 = 1;
LABEL_685:
                    *(_DWORD *)__s1 = v301;
                    *(_QWORD *)&__s1[8] = &__s1[24];
                    *(_QWORD *)&__s1[16] = 0x200000000;
                    if (*(_DWORD *)&__src[8])
                      sub_22F162838((uint64_t)&__s1[8], (uint64_t *)__src);
                    BYTE8(v572) = v329;
                    sub_22F15A4E0(*(_QWORD *)(a1 + 192) + 1504, (unint64_t)__s1);
                    sub_22E5762C8((char **)&__s1[8]);
                    goto LABEL_751;
                  }
                  v337 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v337 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v337 + 316) = 1088;
                  if (*(char *)(v337 + 311) < 0)
                  {
                    **(_BYTE **)(v337 + 288) = 0;
                    *(_QWORD *)(v337 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v337 + 288) = 0;
                    *(_BYTE *)(v337 + 311) = 0;
                  }
                  *(_QWORD *)__s1 = v337 + 320;
                  *(_QWORD *)&__s1[8] = 0;
                  *(_QWORD *)&__s1[16] = v337;
                  *(_WORD *)&__s1[24] = 1;
                  *(_BYTE *)(v337 + 320) = 0;
                  *(_DWORD *)(v337 + 664) = 0;
                  v364 = *(unsigned int *)(v337 + 776);
                  if ((_DWORD)v364)
                  {
                    v365 = *(_QWORD *)(v337 + 768);
                    v366 = 56 * v364;
                    do
                    {
                      if (*(char *)(v365 + v366 - 9) < 0)
                        operator delete(*(void **)(v365 + v366 - 32));
                      v366 -= 56;
                    }
                    while (v366);
                  }
                  *(_DWORD *)(v337 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)__s1);
                  *(_BYTE *)(a1 + 65) = 1;
LABEL_751:
                  sub_22E5762C8((char **)__src);
                  continue;
                case 0xA:
                  sub_22F15A7BC((_BYTE **)a1);
                  if (*(_DWORD *)(a1 + 168) == 5)
                  {
                    v308 = *(_QWORD *)(a1 + 192);
                    if (*(_QWORD *)(v308 + 32))
                    {
                      v309 = *(_QWORD *)(a1 + 24);
                      *(_DWORD *)(v309 + 312) = *(_DWORD *)(a1 + 172);
                      *(_DWORD *)(v309 + 316) = 1091;
                      if (*(char *)(v309 + 311) < 0)
                      {
                        **(_BYTE **)(v309 + 288) = 0;
                        *(_QWORD *)(v309 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v309 + 288) = 0;
                        *(_BYTE *)(v309 + 311) = 0;
                      }
                      *(_QWORD *)__src = v309 + 320;
                      *(_QWORD *)&__src[8] = 0;
                      *(_QWORD *)&__src[16] = v309;
                      *(_WORD *)&__src[24] = 1;
                      *(_BYTE *)(v309 + 320) = 0;
                      *(_DWORD *)(v309 + 664) = 0;
                      v361 = *(unsigned int *)(v309 + 776);
                      if ((_DWORD)v361)
                      {
                        v362 = *(_QWORD *)(v309 + 768);
                        v363 = 56 * v361;
                        do
                        {
                          if (*(char *)(v362 + v363 - 9) < 0)
                            operator delete(*(void **)(v362 + v363 - 32));
                          v363 -= 56;
                        }
                        while (v363);
                      }
                      *(_DWORD *)(v309 + 776) = 0;
                      sub_22E3BB0B8((uint64_t)__src);
LABEL_743:
                      sub_22F15A7BC((_BYTE **)a1);
                      continue;
                    }
                    v379 = *(unsigned __int8 *)(v308 + 175);
                    if (*(char *)(v308 + 175) < 0)
                      v380 = *(_QWORD *)(v308 + 160);
                    else
                      v380 = *(unsigned __int8 *)(v308 + 175);
                    if (v380)
                    {
                      v403 = *(const void **)(v308 + 152);
                      v401 = (_QWORD *)(v308 + 152);
                      v402 = v403;
                      if ((v379 & 0x80u) == 0)
                        v404 = v401;
                      else
                        v404 = v402;
                      v405 = v401[1];
                      if ((v379 & 0x80u) == 0)
                        v406 = v379;
                      else
                        v406 = v405;
                      v407 = *(unsigned int *)(a1 + 176);
                      if (v406 == v407 && (!(_DWORD)v407 || !memcmp(v404, *(const void **)(a1 + 184), v406)))
                      {
                        v408 = *(_QWORD *)(a1 + 24);
                        *(_DWORD *)(v408 + 312) = *(_DWORD *)(a1 + 172);
                        *(_DWORD *)(v408 + 316) = 1324;
                        if (*(char *)(v408 + 311) < 0)
                        {
                          **(_BYTE **)(v408 + 288) = 0;
                          *(_QWORD *)(v408 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v408 + 288) = 0;
                          *(_BYTE *)(v408 + 311) = 0;
                        }
                        __s2[0] = (void *)(v408 + 320);
                        __s2[1] = 0;
                        __s2[2] = (void *)v408;
                        v561 = 1;
                        *(_BYTE *)(v408 + 320) = 0;
                        *(_DWORD *)(v408 + 664) = 0;
                        v425 = *(unsigned int *)(v408 + 776);
                        if ((_DWORD)v425)
                        {
                          v426 = *(_QWORD *)(v408 + 768);
                          v427 = 56 * v425;
                          do
                          {
                            if (*(char *)(v426 + v427 - 9) < 0)
                              operator delete(*(void **)(v426 + v427 - 32));
                            v427 -= 56;
                          }
                          while (v427);
                        }
                        *(_DWORD *)(v408 + 776) = 0;
                        v428 = *(_QWORD *)(a1 + 192);
                        v429 = *(_BYTE *)(v428 + 23);
                        if (v429 >= 0)
                          v422 = *(void **)(a1 + 192);
                        else
                          v422 = *(void **)v428;
                        if (v429 >= 0)
                          v424 = v429 & 0x7F;
                        else
                          v424 = *(_QWORD *)(v428 + 8);
                      }
                      else
                      {
                        v409 = *(_QWORD *)(a1 + 24);
                        *(_DWORD *)(v409 + 312) = *(_DWORD *)(a1 + 172);
                        *(_DWORD *)(v409 + 316) = 1058;
                        if (*(char *)(v409 + 311) < 0)
                        {
                          **(_BYTE **)(v409 + 288) = 0;
                          *(_QWORD *)(v409 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v409 + 288) = 0;
                          *(_BYTE *)(v409 + 311) = 0;
                        }
                        __s2[0] = (void *)(v409 + 320);
                        __s2[1] = 0;
                        __s2[2] = (void *)v409;
                        v561 = 1;
                        *(_BYTE *)(v409 + 320) = 0;
                        *(_DWORD *)(v409 + 664) = 0;
                        v410 = *(unsigned int *)(v409 + 776);
                        if ((_DWORD)v410)
                        {
                          v411 = *(_QWORD *)(v409 + 768);
                          v412 = 56 * v410;
                          do
                          {
                            if (*(char *)(v411 + v412 - 9) < 0)
                              operator delete(*(void **)(v411 + v412 - 32));
                            v412 -= 56;
                          }
                          while (v412);
                        }
                        *(_DWORD *)(v409 + 776) = 0;
                        v413 = *(_QWORD *)(a1 + 192);
                        v414 = *(_BYTE *)(v413 + 23);
                        if (v414 >= 0)
                          v415 = *(void **)(a1 + 192);
                        else
                          v415 = *(void **)v413;
                        if (v414 >= 0)
                          v416 = v414 & 0x7F;
                        else
                          v416 = *(_QWORD *)(v413 + 8);
                        sub_22E3B89A8((unsigned __int8 **)__s2, v415, v416);
                        v417 = *(_QWORD *)(a1 + 192);
                        v420 = *(void **)(v417 + 152);
                        v418 = v417 + 152;
                        v419 = v420;
                        v421 = *(_BYTE *)(v418 + 23);
                        if (v421 >= 0)
                          v422 = (void *)v418;
                        else
                          v422 = v419;
                        v423 = *(_QWORD *)(v418 + 8);
                        if (v421 >= 0)
                          v424 = v421 & 0x7F;
                        else
                          v424 = v423;
                      }
                      sub_22E3B89A8((unsigned __int8 **)__s2, v422, v424);
                      if (*(_DWORD *)(a1 + 168) == 22)
                      {
                        v430 = 0;
                        v431 = 0;
                      }
                      else
                      {
                        v430 = *(void **)(a1 + 184);
                        v431 = *(unsigned int *)(a1 + 176);
                      }
                      sub_22E3B89A8((unsigned __int8 **)__s2, v430, v431);
                      sub_22E3BB0B8((uint64_t)__s2);
                    }
                    if (*(_DWORD *)(a1 + 168) == 22)
                    {
                      v432 = 0;
                      HIBYTE(__s2[2]) = 0;
                      v433 = __s2;
LABEL_892:
                      v433[v432] = 0;
                      v436 = *(_QWORD *)(a1 + 192);
                      v437 = (void **)(v436 + 152);
                      if (*(char *)(v436 + 175) < 0)
                        operator delete(*v437);
                      *(_OWORD *)v437 = *(_OWORD *)__s2;
                      v437[2] = __s2[2];
                      sub_22F412324(*(uint64_t **)(a1 + 32), *(const void ***)(a1 + 192));
                      goto LABEL_743;
                    }
                    v434 = *(const void **)(a1 + 184);
                    v432 = *(unsigned int *)(a1 + 176);
                    if (v432 >= 0x17)
                    {
                      if ((v432 | 7) == 0x17)
                        v435 = (v432 & 0xFFFFFFF8) + 8;
                      else
                        v435 = v432 | 7;
                      v433 = operator new(v435 + 1);
                      __s2[2] = (void *)(v435 - 0x7FFFFFFFFFFFFFFFLL);
                      __s2[0] = v433;
                      __s2[1] = (void *)v432;
                    }
                    else
                    {
                      HIBYTE(__s2[2]) = *(_DWORD *)(a1 + 176);
                      v433 = __s2;
                      if (!(_DWORD)v432)
                      {
                        v432 = 0;
                        goto LABEL_892;
                      }
                    }
                    memmove(v433, v434, v432);
                    goto LABEL_892;
                  }
                  v330 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v330 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v330 + 316) = 1088;
                  if (*(char *)(v330 + 311) < 0)
                  {
                    **(_BYTE **)(v330 + 288) = 0;
                    *(_QWORD *)(v330 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v330 + 288) = 0;
                    *(_BYTE *)(v330 + 311) = 0;
                  }
                  *(_QWORD *)__s1 = v330 + 320;
                  *(_QWORD *)&__s1[8] = 0;
                  *(_QWORD *)&__s1[16] = v330;
                  *(_WORD *)&__s1[24] = 1;
                  *(_BYTE *)(v330 + 320) = 0;
                  *(_DWORD *)(v330 + 664) = 0;
                  v358 = *(unsigned int *)(v330 + 776);
                  if ((_DWORD)v358)
                  {
                    v359 = *(_QWORD *)(v330 + 768);
                    v360 = 56 * v358;
                    do
                    {
                      if (*(char *)(v359 + v360 - 9) < 0)
                        operator delete(*(void **)(v359 + v360 - 32));
                      v360 -= 56;
                    }
                    while (v360);
                  }
LABEL_730:
                  *(_DWORD *)(v330 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)__s1);
                  *(_BYTE *)(a1 + 65) = 1;
                  break;
                case 0xD:
                  v310 = sub_22F15A7BC((_BYTE **)a1);
                  v311 = *(_DWORD *)(a1 + 168);
                  if (v311 == 12)
                  {
                    sub_22F15A7BC((_BYTE **)a1);
                    v312 = *(_DWORD *)(a1 + 168);
                    v313 = 1;
                  }
                  else
                  {
                    v313 = 0;
                    v312 = *(_DWORD *)(a1 + 168);
                  }
                  if (v312 == 21)
                  {
                    v331 = *(const void **)(a1 + 184);
                    v332 = *(unsigned int *)(a1 + 176);
                    if (v332 >= 0x17)
                    {
                      if ((v332 | 7) == 0x17)
                        v341 = (v332 & 0xFFFFFFF8) + 8;
                      else
                        v341 = v332 | 7;
                      v333 = operator new(v341 + 1);
                      *(_QWORD *)&__src[16] = v341 - 0x7FFFFFFFFFFFFFFFLL;
                      *(_QWORD *)__src = v333;
                      *(_QWORD *)&__src[8] = v332;
                    }
                    else
                    {
                      __src[23] = *(_DWORD *)(a1 + 176);
                      v333 = __src;
                      if (!(_DWORD)v332)
                        goto LABEL_693;
                    }
                    memmove(v333, v331, v332);
LABEL_693:
                    v333[v332] = 0;
                    sub_22F15A7BC((_BYTE **)a1);
                    v342 = *(_QWORD *)(a1 + 192);
                    v343 = __src[23];
                    if ((__src[23] & 0x80000000) != 0)
                    {
                      sub_22E3BB2B4(__s1, *(void **)__src, *(unint64_t *)&__src[8]);
                    }
                    else
                    {
                      *(_OWORD *)__s1 = *(_OWORD *)__src;
                      *(_QWORD *)&__s1[16] = *(_QWORD *)&__src[16];
                    }
                    __s1[24] = v311 == 12;
                    sub_22E780FD4(v342 + 1976, (__n128 *)__s1);
                    if ((__s1[23] & 0x80000000) != 0)
                      operator delete(*(void **)__s1);
                    if (v343 < 0)
                      operator delete(*(void **)__src);
                    continue;
                  }
                  v457 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v457 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v457 + 316) = 1071;
                  if (*(char *)(v457 + 311) < 0)
                  {
                    **(_BYTE **)(v457 + 288) = 0;
                    *(_QWORD *)(v457 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v457 + 288) = 0;
                    *(_BYTE *)(v457 + 311) = 0;
                  }
                  v458 = (unsigned __int8 *)(v457 + 320);
                  *(_QWORD *)__s1 = v457 + 320;
                  *(_QWORD *)&__s1[8] = 0;
                  *(_QWORD *)&__s1[16] = v457;
                  *(_WORD *)&__s1[24] = 1;
                  *(_BYTE *)(v457 + 320) = 0;
                  *(_DWORD *)(v457 + 664) = 0;
                  v459 = *(unsigned int *)(v457 + 776);
                  if ((_DWORD)v459)
                  {
                    v460 = *(_QWORD *)(v457 + 768);
                    v461 = 56 * v459;
                    do
                    {
                      if (*(char *)(v460 + v461 - 9) < 0)
                        operator delete(*(void **)(v460 + v461 - 32));
                      v461 -= 56;
                    }
                    while (v461);
                    LODWORD(v459) = *v458;
                  }
                  *(_DWORD *)(v457 + 776) = 0;
                  v458[v459 + 1] = 2;
                  *(_BYTE *)(v457 + 320) = v459 + 1;
                  *(_QWORD *)&v458[8 * v459 + 16] = v313;
                  sub_22E4D6448(v457 + 656, v310 | ((unint64_t)v310 << 32), 1);
                  sub_22E3BB0B8((uint64_t)__s1);
                  *(_BYTE *)(a1 + 65) = 1;
                  continue;
                case 0x10:
                  sub_22F15A7BC((_BYTE **)a1);
                  sub_22F15F524(a1, 16);
                  continue;
                case 0x11:
                  v314 = sub_22F15A7BC((_BYTE **)a1);
                  if (*(_DWORD *)(a1 + 168) == 4)
                    sub_22F15F524(a1, 17);
                  else
                    sub_22F1607C4(a1, v314);
                  continue;
                case 0x12:
                  v315 = sub_22F15A7BC((_BYTE **)a1);
                  *(_QWORD *)__s1 = &__s1[16];
                  *(_QWORD *)&__s1[8] = 0x200000000;
                  sub_22F15B14C(a1, (uint64_t)__s1);
                  v316 = *(_QWORD *)(a1 + 192);
                  if (*(_QWORD *)(v316 + 32))
                  {
                    v317 = *(_QWORD *)(a1 + 24);
                    *(_DWORD *)(v317 + 312) = v315;
                    *(_DWORD *)(v317 + 316) = 1095;
                    if (*(char *)(v317 + 311) < 0)
                    {
                      **(_BYTE **)(v317 + 288) = 0;
                      *(_QWORD *)(v317 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v317 + 288) = 0;
                      *(_BYTE *)(v317 + 311) = 0;
                    }
                    *(_QWORD *)__src = v317 + 320;
                    *(_QWORD *)&__src[8] = 0;
                    *(_QWORD *)&__src[16] = v317;
                    *(_WORD *)&__src[24] = 1;
                    *(_BYTE *)(v317 + 320) = 0;
                    *(_DWORD *)(v317 + 664) = 0;
                    v338 = *(unsigned int *)(v317 + 776);
                    if ((_DWORD)v338)
                    {
                      v339 = *(_QWORD *)(v317 + 768);
                      v340 = 56 * v338;
                      do
                      {
                        if (*(char *)(v339 + v340 - 9) < 0)
                          operator delete(*(void **)(v339 + v340 - 32));
                        v340 -= 56;
                      }
                      while (v340);
                    }
                    *(_DWORD *)(v317 + 776) = 0;
                    sub_22E3BB0B8((uint64_t)__src);
                  }
                  else
                  {
                    sub_22F41356C(v316 + 1744, (unint64_t)__s1);
                  }
                  goto LABEL_832;
                case 0x13:
                  sub_22F15A7BC((_BYTE **)a1);
LABEL_618:
                  v318 = *(_DWORD *)(a1 + 168);
                  v319 = v318;
                  if (v318 == 6)
                  {
                    sub_22F15A7BC((_BYTE **)a1);
                    v319 = *(_DWORD *)(a1 + 168);
                  }
                  if (v319 == 5)
                  {
                    v320 = *(const void **)(a1 + 184);
                    v321 = *(unsigned int *)(a1 + 176);
                    if (v321 >= 0x17)
                    {
                      if ((v321 | 7) == 0x17)
                        v323 = (v321 & 0xFFFFFFF8) + 8;
                      else
                        v323 = v321 | 7;
                      v322 = operator new(v323 + 1);
                      __s2[2] = (void *)(v323 - 0x7FFFFFFFFFFFFFFFLL);
                      __s2[0] = v322;
                      __s2[1] = (void *)v321;
                    }
                    else
                    {
                      HIBYTE(__s2[2]) = *(_DWORD *)(a1 + 176);
                      v322 = __s2;
                      if (!(_DWORD)v321)
                      {
LABEL_629:
                        *((_BYTE *)v322 + v321) = 0;
                        sub_22F15A7BC((_BYTE **)a1);
                        v324 = *(const void **)(a1 + 192);
                        if (SHIBYTE(__s2[2]) >= 0)
                          v325 = __s2;
                        else
                          v325 = (void **)__s2[0];
                        if (SHIBYTE(__s2[2]) >= 0)
                          v326 = HIBYTE(__s2[2]) & 0x7F;
                        else
                          v326 = (size_t)__s2[1];
                        if (v326 == 9)
                        {
                          if (*v325 != (void *)0x756C7073756C7063 || *((_BYTE *)v325 + 8) != 115)
                            goto LABEL_647;
                          *(_OWORD *)__s1 = xmmword_24FAC7F48;
                          *(_OWORD *)&__s1[16] = *(_OWORD *)&off_24FAC7F58;
                          if (!sub_22F1D8D08((uint64_t)v324, (uint64_t)__s1, 2))
                            goto LABEL_647;
                        }
                        else
                        {
                          if (v326 == 8 && *v325 == (void *)0x646564756C637865)
                          {
                            *(_OWORD *)__s1 = xmmword_24FAC7EF8;
                            *(_OWORD *)&__s1[16] = *(_OWORD *)&off_24FAC7F08;
                            v570 = xmmword_24FAC7F18;
                            if (sub_22F1D8D08((uint64_t)v324, (uint64_t)__s1, 3)
                              || (*(_OWORD *)__src = xmmword_24FAC7F28,
                                  *(_OWORD *)&__src[16] = *(_OWORD *)&off_24FAC7F38,
                                  sub_22F1D8D08((uint64_t)v324, (uint64_t)__src, 2)))
                            {
                              sub_22E3BA850(a1 + 200, v324);
                              goto LABEL_648;
                            }
                          }
LABEL_647:
                          sub_22F1D9140((uint64_t)v324, v325, v326, v318 != 6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
                        }
LABEL_648:
                        v328 = *(_DWORD *)(a1 + 168);
                        if (!v328)
                          sub_22F15A7BC((_BYTE **)a1);
                        if ((SHIBYTE(__s2[2]) & 0x80000000) == 0)
                        {
                          if (v328)
                            continue;
                          goto LABEL_618;
                        }
                        operator delete(__s2[0]);
                        if (v328)
                          continue;
                        goto LABEL_618;
                      }
                    }
                    memmove(v322, v320, v321);
                    goto LABEL_629;
                  }
                  v330 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v330 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v330 + 316) = 1065;
                  if (*(char *)(v330 + 311) < 0)
                  {
                    **(_BYTE **)(v330 + 288) = 0;
                    *(_QWORD *)(v330 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v330 + 288) = 0;
                    *(_BYTE *)(v330 + 311) = 0;
                  }
                  *(_QWORD *)__s1 = v330 + 320;
                  *(_QWORD *)&__s1[8] = 0;
                  *(_QWORD *)&__s1[16] = v330;
                  *(_WORD *)&__s1[24] = 1;
                  *(_BYTE *)(v330 + 320) = 0;
                  *(_DWORD *)(v330 + 664) = 0;
                  v352 = *(unsigned int *)(v330 + 776);
                  if ((_DWORD)v352)
                  {
                    v353 = *(_QWORD *)(v330 + 768);
                    v354 = 56 * v352;
                    do
                    {
                      if (*(char *)(v353 + v354 - 9) < 0)
                        operator delete(*(void **)(v353 + v354 - 32));
                      v354 -= 56;
                    }
                    while (v354);
                  }
                  goto LABEL_730;
                case 0x17:
                  sub_22F15A7BC((_BYTE **)a1);
                  sub_22F15F524(a1, 23);
                  continue;
                case 0x19:
                  sub_22F15A7BC((_BYTE **)a1);
LABEL_966:
                  v470 = *(_QWORD *)(a1 + 192);
                  v471 = *(_WORD *)(v470 + 1344);
                  v472 = v507;
                  if ((v471 & 0x10) == 0)
                    goto LABEL_972;
                  v473 = *(_QWORD *)(v470 + 32);
                  if (!v473)
                    goto LABEL_970;
                  while ((*(_WORD *)(v473 + 1344) & 0x10) == 0)
                  {
                    v473 = *(_QWORD *)(v473 + 32);
                    if (!v473)
                    {
LABEL_970:
                      if (!*(_DWORD *)(v470 + 1984))
                      {
                        sub_22F159AC0((void **)v470, **(void ***)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
                        v470 = *(_QWORD *)(a1 + 192);
                        v471 = *(_WORD *)(v470 + 1344);
                      }
                      break;
                    }
                  }
LABEL_972:
                  if ((v471 & 5) != 0 || !*(_QWORD *)(v470 + 32))
                    goto LABEL_986;
                  do
                  {
                    v474 = v470;
                    v470 = *(_QWORD *)(v470 + 32);
                  }
                  while (v470);
                  sub_22F1D9260(v474, 0);
                  v475 = *(_QWORD *)(a1 + 192);
                  v476 = v475;
                  do
                  {
                    v477 = v476;
                    v476 = *(_QWORD *)(v476 + 32);
                  }
                  while (v476);
                  v478 = *(_QWORD *)(v475 + 1168);
                  v479 = *(unsigned int *)(v475 + 1176);
                  v480 = *(unsigned int *)(v477 + 1176);
                  if (v480 + v479 > (unint64_t)*(unsigned int *)(v477 + 1180))
                  {
                    sub_22F413854(v477 + 1168);
                    LODWORD(v480) = *(_DWORD *)(v477 + 1176);
                    if (!(_DWORD)v479)
                      goto LABEL_985;
                  }
                  else if (!(_DWORD)v479)
                  {
                    goto LABEL_985;
                  }
                  v481 = v478 + 72 * v479;
                  v482 = *(_QWORD *)(v477 + 1168) + 72 * v480 + 8;
                  v483 = (__int128 *)(v478 + 8);
                  do
                  {
                    v484 = (uint64_t)v483 - 8;
                    *(_QWORD *)(v482 - 8) = *((_QWORD *)v483 - 1);
                    if (*((char *)v483 + 23) < 0)
                    {
                      sub_22E3BB2B4((_BYTE *)v482, *(void **)v483, *((_QWORD *)v483 + 1));
                    }
                    else
                    {
                      v485 = *v483;
                      *(_QWORD *)(v482 + 16) = *((_QWORD *)v483 + 2);
                      *(_OWORD *)v482 = v485;
                    }
                    v486 = *(__int128 *)((char *)v483 + 24);
                    v487 = *(__int128 *)((char *)v483 + 40);
                    *(_QWORD *)(v482 + 56) = *((_QWORD *)v483 + 7);
                    *(_OWORD *)(v482 + 24) = v486;
                    *(_OWORD *)(v482 + 40) = v487;
                    v482 += 72;
                    v483 = (__int128 *)((char *)v483 + 72);
                  }
                  while (v484 + 72 != v481);
                  LODWORD(v480) = *(_DWORD *)(v477 + 1176);
LABEL_985:
                  *(_DWORD *)(v477 + 1176) = v480 + v479;
                  v472 = v507;
LABEL_986:
                  *(_QWORD *)(a1 + 192) = v472;
                  goto LABEL_987;
                default:
                  v300 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)(v300 + 312) = *(_DWORD *)(a1 + 172);
                  *(_DWORD *)(v300 + 316) = 1072;
                  if (*(char *)(v300 + 311) < 0)
                  {
                    **(_BYTE **)(v300 + 288) = 0;
                    *(_QWORD *)(v300 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v300 + 288) = 0;
                    *(_BYTE *)(v300 + 311) = 0;
                  }
                  v516[0] = v300 + 320;
                  v516[1] = 0;
                  v516[2] = v300;
                  v517 = 1;
                  *(_BYTE *)(v300 + 320) = 0;
                  *(_DWORD *)(v300 + 664) = 0;
                  v334 = *(unsigned int *)(v300 + 776);
                  if ((_DWORD)v334)
                  {
                    v335 = *(_QWORD *)(v300 + 768);
                    v336 = 56 * v334;
                    do
                    {
                      if (*(char *)(v335 + v336 - 9) < 0)
                        operator delete(*(void **)(v335 + v336 - 32));
                      v336 -= 56;
                    }
                    while (v336);
                  }
                  *(_DWORD *)(v300 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)v516);
                  sub_22F15A7BC((_BYTE **)a1);
                  continue;
              }
            }
          }
          v211 = *i;
          while (1)
          {
            v212 = *(const void ***)(v211 + 8);
            v213 = *(uint64_t **)(a1 + 192);
            if (v212[5] == (const void *)v213[5])
              break;
            do
            {
LABEL_540:
              v281 = i[1];
              ++i;
              v211 = v281;
              if (v281)
                v282 = v211 == -8;
              else
                v282 = 1;
            }
            while (v282);
            if (i == (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1024)
                                + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 1032)))
              goto LABEL_577;
          }
          sub_22F1D8A24(v213, 0, __src);
          v214 = __src[23];
          if (__src[23] >= 0)
            v215 = __src;
          else
            v215 = *(_BYTE **)__src;
          if (__src[23] >= 0)
            v216 = __src[23] & 0x7F;
          else
            v216 = *(_QWORD *)&__src[8];
          *(_QWORD *)__s1 = &__s1[24];
          *(_OWORD *)&__s1[8] = xmmword_22F44E310;
          if (v216 >= 0x81)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v217 = *(_QWORD *)&__s1[8];
            v218 = *(_BYTE **)__s1;
          }
          else
          {
            v217 = 0;
            if (!v216)
              goto LABEL_433;
            v218 = &__s1[24];
          }
          memcpy(&v218[v217], v215, v216);
          v217 = *(_QWORD *)&__s1[8];
          v214 = __src[23];
LABEL_433:
          v219 = v217 + v216;
          *(_QWORD *)&__s1[8] = v217 + v216;
          if (v214 < 0)
          {
            operator delete(*(void **)__src);
            v219 = *(_QWORD *)&__s1[8];
          }
          v220 = *((_BYTE *)v212 + 23);
          v221 = v220 < 0;
          if (v220 >= 0)
            v222 = v212;
          else
            v222 = *v212;
          v223 = v220 & 0x7F;
          if (v221)
            v224 = (size_t)v212[1];
          else
            v224 = v223;
          v225 = *(char **)__s1;
          if (v219 < v224 || v224 && memcmp(*(const void **)__s1, v222, v224))
          {
            if (v219 < 7)
              goto LABEL_538;
            if (*(_DWORD *)&v225[v219 - 7] != 1986622032 || *(_DWORD *)&v225[v219 - 4] != 1702125942)
              goto LABEL_538;
          }
          *(_QWORD *)__src = &__src[24];
          *(_OWORD *)&__src[8] = xmmword_22F44E310;
          v227 = *((_BYTE *)v212 + 23);
          v228 = v227 < 0;
          if (v227 >= 0)
            v229 = v212;
          else
            v229 = *v212;
          v230 = v227 & 0x7F;
          if (v228)
            v231 = (size_t)v212[1];
          else
            v231 = v230;
          __s2[0] = &v561;
          *(_OWORD *)&__s2[1] = xmmword_22F44E310;
          if (v231 >= 0x81)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v232 = (char *)__s2[1];
            v233 = (__int16 *)__s2[0];
          }
          else
          {
            v232 = 0;
            if (!v231)
            {
              v234 = 128;
LABEL_460:
              v235 = &v232[v231];
              __s2[1] = v235;
              if (v234 < (unint64_t)(v235 + 8))
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v235 = (char *)__s2[1];
              }
              *(_QWORD *)((char *)__s2[0] + (unint64_t)v235) = 0x657461766972505FLL;
              v236 = (char *)__s2[1] + 8;
              __s2[1] = (char *)__s2[1] + 8;
              v237 = *(unsigned __int8 ***)(a1 + 192);
              v238 = v237[4];
              if (v238)
              {
                v239 = *((unsigned __int8 *)v237 + 23);
                if ((v239 & 0x80u) == 0)
                  v240 = v239 & 0x7F;
                else
                  v240 = (unint64_t)v237[1];
                if (v240 != 7)
                  goto LABEL_533;
                v241 = *(unsigned __int8 **)(a1 + 192);
                if ((v239 & 0x80) != 0)
                {
                  v241 = *v237;
                  v239 = (unint64_t)v237[1];
                }
                v242 = v239 >= 7 ? 7 : v239;
                if (memcmp(v241, "Private", v242) || v239 != 7 || v212[4])
                  goto LABEL_533;
                v243 = *((_BYTE *)v212 + 23);
                v244 = v243 & 0x7F;
                if (v243 >= 0)
                  v245 = (const void *)(v243 & 0x7F);
                else
                  v245 = v212[1];
                v246 = v238[23];
                v247 = v246;
                v248 = (const void *)(v246 & 0x7F);
                if (v247 < 0)
                  v248 = (const void *)*((_QWORD *)v238 + 1);
                if (v245 != v248)
                  goto LABEL_533;
                if (v247 >= 0)
                  v249 = v238;
                else
                  v249 = *(unsigned __int8 **)v238;
                if ((*((_BYTE *)v212 + 23) & 0x80) != 0)
                {
                  if (memcmp(*v212, v249, (size_t)v212[1]))
                    goto LABEL_533;
                }
                else if ((v243 & 0x7F) != 0)
                {
                  v250 = v212;
                  while (*(unsigned __int8 *)v250 == *v249)
                  {
                    v250 = (const void **)((char *)v250 + 1);
                    ++v249;
                    if (!--v244)
                      goto LABEL_547;
                  }
                  goto LABEL_533;
                }
LABEL_547:
                v283 = *(_QWORD *)(a1 + 24);
                *(_DWORD *)(v283 + 312) = *((_DWORD *)v237 + 6);
                *(_DWORD *)(v283 + 316) = 1323;
                if (*(char *)(v283 + 311) < 0)
                {
                  **(_BYTE **)(v283 + 288) = 0;
                  *(_QWORD *)(v283 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v283 + 288) = 0;
                  *(_BYTE *)(v283 + 311) = 0;
                }
                v531 = (void *)(v283 + 320);
                v532 = 0;
                v533 = v283;
                v534 = 1;
                *(_BYTE *)(v283 + 320) = 0;
                *(_DWORD *)(v283 + 664) = 0;
                v284 = *(unsigned int *)(v283 + 776);
                if ((_DWORD)v284)
                {
                  v285 = *(_QWORD *)(v283 + 768);
                  v286 = 56 * v284;
                  do
                  {
                    if (*(char *)(v285 + v286 - 9) < 0)
                      operator delete(*(void **)(v285 + v286 - 32));
                    v286 -= 56;
                  }
                  while (v286);
                }
                *(_DWORD *)(v283 + 776) = 0;
                sub_22E3B89A8((unsigned __int8 **)&v531, *(void **)__s1, *(size_t *)&__s1[8]);
                sub_22E3BB0B8((uint64_t)&v531);
                v287 = *(_DWORD *)(a1 + 48);
                if (v508)
                  v287 = v508;
                if (v510)
                  v288 = v510;
                else
                  v288 = v287;
                if (v508 || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 32) + 1344) & 0x10) != 0)
                {
                  v290 = *(_QWORD *)&__src[8];
                  if (*(_QWORD *)&__src[16] < (unint64_t)(*(_QWORD *)&__src[8] + 10))
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v290 = *(_QWORD *)&__src[8];
                  }
                  v291 = *(_QWORD *)__src + v290;
                  *(_QWORD *)v291 = *(_QWORD *)"framework ";
                  *(_WORD *)(v291 + 8) = 8299;
                  v289 = *(_QWORD *)&__src[8] + 10;
                  *(_QWORD *)&__src[8] += 10;
                }
                else
                {
                  v289 = *(_QWORD *)&__src[8];
                }
                if (*(_QWORD *)&__src[16] < (unint64_t)(v289 + 7))
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v289 = *(_QWORD *)&__src[8];
                }
                v292 = (_DWORD *)(*(_QWORD *)__src + v289);
                *(_DWORD *)((char *)v292 + 3) = 543517813;
                *v292 = 1969516397;
                v293 = *(_QWORD *)&__src[8] + 7;
                *(_QWORD *)&__src[8] = v293;
                v294 = __s2[0];
                v295 = (char *)__s2[1];
                if (*(_QWORD *)&__src[16] < (unint64_t)__s2[1] + v293)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v293 = *(_QWORD *)&__src[8];
                  if (!v295)
                    goto LABEL_571;
                }
                else if (!__s2[1])
                {
LABEL_571:
                  v278 = &v295[v293];
                  *(_QWORD *)&__src[8] = &v295[v293];
                  v274 = *(void **)__s1;
                  v276 = *(_QWORD *)&__s1[8];
                  v277 = *(const void **)__src;
                  v279 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 24);
                  v280 = v288 | (v279 << 32);
LABEL_532:
                  sub_22F15B3BC(*(_QWORD *)(a1 + 24), v279, v274, v276, v277, (size_t)v278, (void **)v212, v280);
                  goto LABEL_533;
                }
                memcpy((void *)(*(_QWORD *)__src + v293), v294, (size_t)v295);
                v293 = *(_QWORD *)&__src[8];
                goto LABEL_571;
              }
              if (v212[4])
                goto LABEL_533;
              v251 = *((_BYTE *)v212 + 23);
              v252 = v251 & 0x7F;
              if (v251 >= 0)
                v253 = (char *)(v251 & 0x7F);
              else
                v253 = (char *)v212[1];
              v254 = *((_BYTE *)v237 + 23);
              v255 = v254;
              v256 = (char *)(v254 & 0x7F);
              if (v255 >= 0)
                v257 = v256;
              else
                v257 = (char *)v237[1];
              if (v255 >= 0)
                v258 = *(unsigned __int8 **)(a1 + 192);
              else
                v258 = *v237;
              if (v253 == v257)
              {
                if ((*((_BYTE *)v212 + 23) & 0x80) == 0)
                {
                  if ((v251 & 0x7F) != 0)
                  {
                    v259 = v258;
                    v260 = v212;
                    while (*(unsigned __int8 *)v260 == *v259)
                    {
                      v260 = (const void **)((char *)v260 + 1);
                      ++v259;
                      if (!--v252)
                        goto LABEL_533;
                    }
                    goto LABEL_508;
                  }
LABEL_533:
                  if (__s2[0] != &v561)
                    free(__s2[0]);
                  if (*(_BYTE **)__src != &__src[24])
                    free(*(void **)__src);
                  v225 = *(char **)__s1;
LABEL_538:
                  if (v225 != &__s1[24])
                    free(v225);
                  goto LABEL_540;
                }
                v261 = v236;
                v262 = memcmp(*v212, v258, (size_t)v212[1]);
                v236 = v261;
                if (!v262)
                  goto LABEL_533;
              }
LABEL_508:
              if (v257 == v236 && (!v236 || !memcmp(v258, __s2[0], (size_t)v236)))
                goto LABEL_533;
              v263 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)(v263 + 312) = *((_DWORD *)v237 + 6);
              *(_DWORD *)(v263 + 316) = 1322;
              if (*(char *)(v263 + 311) < 0)
              {
                **(_BYTE **)(v263 + 288) = 0;
                *(_QWORD *)(v263 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v263 + 288) = 0;
                *(_BYTE *)(v263 + 311) = 0;
              }
              v531 = (void *)(v263 + 320);
              v532 = 0;
              v533 = v263;
              v534 = 1;
              *(_BYTE *)(v263 + 320) = 0;
              *(_DWORD *)(v263 + 664) = 0;
              v264 = *(unsigned int *)(v263 + 776);
              if ((_DWORD)v264)
              {
                v265 = *(_QWORD *)(v263 + 768);
                v266 = 56 * v264;
                do
                {
                  if (*(char *)(v265 + v266 - 9) < 0)
                    operator delete(*(void **)(v265 + v266 - 32));
                  v266 -= 56;
                }
                while (v266);
              }
              *(_DWORD *)(v263 + 776) = 0;
              v267 = *(_QWORD *)(a1 + 192);
              v268 = *(_BYTE *)(v267 + 23);
              if (v268 >= 0)
                v269 = *(void **)(a1 + 192);
              else
                v269 = *(void **)v267;
              if (v268 >= 0)
                v270 = v268 & 0x7F;
              else
                v270 = *(_QWORD *)(v267 + 8);
              sub_22E3B89A8((unsigned __int8 **)&v531, v269, v270);
              sub_22E3BB0B8((uint64_t)&v531);
              v271 = *(_QWORD *)(a1 + 192);
              v272 = *(_BYTE *)(v271 + 23);
              v273 = v272 < 0;
              if (v272 >= 0)
                v274 = *(void **)(a1 + 192);
              else
                v274 = *(void **)v271;
              v275 = v272 & 0x7F;
              if (v273)
                v276 = *(_QWORD *)(v271 + 8);
              else
                v276 = v275;
              v277 = __s2[0];
              v278 = (char *)__s2[1];
              v279 = *(unsigned int *)(v271 + 24);
              v280 = v279 | (v279 << 32);
              goto LABEL_532;
            }
            v233 = &v561;
          }
          memcpy(&v232[(_QWORD)v233], v229, v231);
          v232 = (char *)__s2[1];
          v234 = (unint64_t)__s2[2];
          goto LABEL_460;
        }
LABEL_232:
        *((_WORD *)v103 + 672) |= 0x4000u;
        goto LABEL_233;
      }
      sub_22F4135CC(a1, 25);
      if (*(_DWORD *)(a1 + 168) == 25)
      {
        sub_22F15A7BC((_BYTE **)a1);
        goto LABEL_987;
      }
      v489 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v489 + 312) = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(v489 + 316) = 1076;
      if (*(char *)(v489 + 311) < 0)
      {
        **(_BYTE **)(v489 + 288) = 0;
        *(_QWORD *)(v489 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v489 + 288) = 0;
        *(_BYTE *)(v489 + 311) = 0;
      }
      v522[0] = v489 + 320;
      v522[1] = 0;
      v522[2] = v489;
      v523 = 1;
      *(_BYTE *)(v489 + 320) = 0;
      *(_DWORD *)(v489 + 664) = 0;
      v497 = *(unsigned int *)(v489 + 776);
      if ((_DWORD)v497)
      {
        v498 = *(_QWORD *)(v489 + 768);
        v499 = 56 * v497;
        do
        {
          if (*(char *)(v498 + v499 - 9) < 0)
            operator delete(*(void **)(v498 + v499 - 32));
          v499 -= 56;
        }
        while (v499);
      }
      *(_DWORD *)(v489 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v522);
      v500 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v500 + 312) = v504;
      *(_DWORD *)(v500 + 316) = 1250;
      if (*(char *)(v500 + 311) < 0)
      {
        **(_BYTE **)(v500 + 288) = 0;
        *(_QWORD *)(v500 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v500 + 288) = 0;
        *(_BYTE *)(v500 + 311) = 0;
      }
      v520[0] = v500 + 320;
      v520[1] = 0;
      v520[2] = v500;
      v521 = 1;
      *(_BYTE *)(v500 + 320) = 0;
      *(_DWORD *)(v500 + 664) = 0;
      v501 = *(unsigned int *)(v500 + 776);
      if ((_DWORD)v501)
      {
        v502 = *(_QWORD *)(v500 + 768);
        v503 = 56 * v501;
        do
        {
          if (*(char *)(v502 + v503 - 9) < 0)
            operator delete(*(void **)(v502 + v503 - 32));
          v503 -= 56;
        }
        while (v503);
      }
      *(_DWORD *)(v500 + 776) = 0;
      v125 = v520;
    }
    else
    {
      v111 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v111 + 312) = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(v111 + 316) = 1069;
      if (*(char *)(v111 + 311) < 0)
      {
        **(_BYTE **)(v111 + 288) = 0;
        *(_QWORD *)(v111 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v111 + 288) = 0;
        *(_BYTE *)(v111 + 311) = 0;
      }
      *(_QWORD *)__s1 = v111 + 320;
      *(_QWORD *)&__s1[8] = 0;
      *(_QWORD *)&__s1[16] = v111;
      *(_WORD *)&__s1[24] = 1;
      *(_BYTE *)(v111 + 320) = 0;
      *(_DWORD *)(v111 + 664) = 0;
      v122 = *(unsigned int *)(v111 + 776);
      if ((_DWORD)v122)
      {
        v123 = *(_QWORD *)(v111 + 768);
        v124 = 56 * v122;
        do
        {
          if (*(char *)(v123 + v124 - 9) < 0)
            operator delete(*(void **)(v123 + v124 - 32));
          v124 -= 56;
        }
        while (v124);
      }
      *(_DWORD *)(v111 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)__s1, v96, v98);
      v125 = __s1;
    }
    sub_22E3BB0B8((uint64_t)v125);
    *(_BYTE *)(a1 + 65) = 1;
    goto LABEL_987;
  }
  v9 = sub_22F15A7BC((_BYTE **)a1);
  v10 = *(_QWORD *)(a1 + 192);
  v11 = v6 != 12 && v10 == 0;
  v12 = !v11;
  if (v11)
  {
    v27 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v27 + 312) = v9;
    *(_DWORD *)(v27 + 316) = 1092;
    if (*(char *)(v27 + 311) < 0)
    {
      **(_BYTE **)(v27 + 288) = 0;
      *(_QWORD *)(v27 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v27 + 288) = 0;
      *(_BYTE *)(v27 + 311) = 0;
    }
    *(_QWORD *)__src = v27 + 320;
    *(_QWORD *)&__src[8] = 0;
    *(_QWORD *)&__src[16] = v27;
    *(_WORD *)&__src[24] = 1;
    *(_BYTE *)(v27 + 320) = 0;
    *(_DWORD *)(v27 + 664) = 0;
    v39 = *(unsigned int *)(v27 + 776);
    if ((_DWORD)v39)
    {
      v40 = *(_QWORD *)(v27 + 768);
      v41 = 56 * v39;
      do
      {
        if (*(char *)(v40 + v41 - 9) < 0)
          operator delete(*(void **)(v40 + v41 - 32));
        v41 -= 56;
      }
      while (v41);
    }
    *(_DWORD *)(v27 + 776) = 0;
    sub_22E3BB0B8((uint64_t)__src);
    if (*(_QWORD *)(a1 + 192))
      goto LABEL_271;
LABEL_93:
    if (v2 == 8)
    {
      v42 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v42 + 312) = v9;
      *(_DWORD *)(v42 + 316) = 1078;
      if (*(char *)(v42 + 311) < 0)
      {
        **(_BYTE **)(v42 + 288) = 0;
        *(_QWORD *)(v42 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v42 + 288) = 0;
        *(_BYTE *)(v42 + 311) = 0;
      }
      v551 = v42 + 320;
      v552 = 0;
      v553 = v42;
      v554 = 1;
      *(_BYTE *)(v42 + 320) = 0;
      *(_DWORD *)(v42 + 664) = 0;
      v49 = *(unsigned int *)(v42 + 776);
      if ((_DWORD)v49)
      {
        v50 = *(_QWORD *)(v42 + 768);
        v51 = 56 * v49;
        do
        {
          if (*(char *)(v50 + v51 - 9) < 0)
            operator delete(*(void **)(v50 + v51 - 32));
          v51 -= 56;
        }
        while (v51);
      }
      *(_DWORD *)(v42 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v551);
      v3 = 0;
      if ((v12 & 1) != 0)
        goto LABEL_285;
      goto LABEL_276;
    }
    v15 = v12 ^ 1;
    goto LABEL_275;
  }
  if (!v10)
    goto LABEL_93;
  v13 = *(_WORD *)(v10 + 1344);
  if ((v13 & 4) != 0)
  {
    sub_22F1D8DAC(v10, (uint64_t)__s1);
    v14 = v571;
    if (SHIBYTE(v570) < 0)
      operator delete(*(void **)&__s1[24]);
    if ((__s1[23] & 0x80000000) != 0)
      operator delete(*(void **)__s1);
    if (!v14)
    {
      v52 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v52 + 312) = v9;
      *(_DWORD *)(v52 + 316) = 1081;
      if (*(char *)(v52 + 311) < 0)
      {
        **(_BYTE **)(v52 + 288) = 0;
        *(_QWORD *)(v52 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v52 + 288) = 0;
        *(_BYTE *)(v52 + 311) = 0;
      }
      __s2[0] = (void *)(v52 + 320);
      __s2[1] = 0;
      __s2[2] = (void *)v52;
      v561 = 1;
      *(_BYTE *)(v52 + 320) = 0;
      *(_DWORD *)(v52 + 664) = 0;
      v134 = (_DWORD *)(v52 + 776);
      v139 = *(unsigned int *)(v52 + 776);
      if ((_DWORD)v139)
      {
        v140 = *(_QWORD *)(v52 + 768);
        v141 = 56 * v139;
        do
        {
          if (*(char *)(v140 + v141 - 9) < 0)
            operator delete(*(void **)(v140 + v141 - 32));
          v141 -= 56;
        }
        while (v141);
      }
      v138 = __s2;
      goto LABEL_270;
    }
    v13 = *(_WORD *)(*(_QWORD *)(a1 + 192) + 1344);
  }
  if ((v13 & 0x200) == 0)
  {
    v15 = 0;
    goto LABEL_272;
  }
  v48 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v48 + 312) = v9;
  *(_DWORD *)(v48 + 316) = 1082;
  if (*(char *)(v48 + 311) < 0)
  {
    **(_BYTE **)(v48 + 288) = 0;
    *(_QWORD *)(v48 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v48 + 288) = 0;
    *(_BYTE *)(v48 + 311) = 0;
  }
  v555 = (uint64_t *)(v48 + 320);
  v556 = 0;
  v557 = v48;
  v558 = 1;
  *(_BYTE *)(v48 + 320) = 0;
  *(_DWORD *)(v48 + 664) = 0;
  v56 = *(unsigned int *)(v48 + 776);
  if ((_DWORD)v56)
  {
    v57 = *(_QWORD *)(v48 + 768);
    v58 = 56 * v56;
    do
    {
      if (*(char *)(v57 + v58 - 9) < 0)
        operator delete(*(void **)(v57 + v58 - 32));
      v58 -= 56;
    }
    while (v58);
  }
  *(_DWORD *)(v48 + 776) = 0;
  sub_22E3BB0B8((uint64_t)&v555);
  v59 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 1352);
  if (v59)
  {
    v60 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v60 + 312) = v59;
    *(_DWORD *)(v60 + 316) = 1252;
    if (*(char *)(v60 + 311) < 0)
    {
      **(_BYTE **)(v60 + 288) = 0;
      *(_QWORD *)(v60 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v60 + 288) = 0;
      *(_BYTE *)(v60 + 311) = 0;
    }
    v531 = (void *)(v60 + 320);
    v532 = 0;
    v533 = v60;
    v534 = 1;
    *(_BYTE *)(v60 + 320) = 0;
    *(_DWORD *)(v60 + 664) = 0;
    v134 = (_DWORD *)(v60 + 776);
    v135 = *(unsigned int *)(v60 + 776);
    if ((_DWORD)v135)
    {
      v136 = *(_QWORD *)(v60 + 768);
      v137 = 56 * v135;
      do
      {
        if (*(char *)(v136 + v137 - 9) < 0)
          operator delete(*(void **)(v136 + v137 - 32));
        v137 -= 56;
      }
      while (v137);
    }
    v138 = &v531;
LABEL_270:
    *v134 = 0;
    sub_22E3BB0B8((uint64_t)v138);
  }
LABEL_271:
  v15 = 1;
LABEL_272:
  if (v6 == 12)
  {
    v142 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v142 + 312) = v9;
    *(_DWORD *)(v142 + 316) = 1080;
    if (*(char *)(v142 + 311) < 0)
    {
      **(_BYTE **)(v142 + 288) = 0;
      *(_QWORD *)(v142 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v142 + 288) = 0;
      *(_BYTE *)(v142 + 311) = 0;
    }
    v528[0] = v142 + 320;
    v528[1] = 0;
    v528[2] = v142;
    v529 = 1;
    *(_BYTE *)(v142 + 320) = 0;
    *(_DWORD *)(v142 + 664) = 0;
    v143 = *(unsigned int *)(v142 + 776);
    if ((_DWORD)v143)
    {
      v144 = *(_QWORD *)(v142 + 768);
      v145 = 56 * v143;
      do
      {
        if (*(char *)(v144 + v145 - 9) < 0)
          operator delete(*(void **)(v144 + v145 - 32));
        v145 -= 56;
      }
      while (v145);
    }
    *(_DWORD *)(v142 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v528);
    if ((v15 & 1) == 0)
      goto LABEL_285;
    goto LABEL_276;
  }
LABEL_275:
  if (!v15)
  {
LABEL_285:
    v550 = 0;
    if ((sub_22F15F004(a1, &v550) & 1) != 0)
      return;
    v146 = *(_QWORD *)(a1 + 192);
    if (v146)
    {
      *(_WORD *)(v146 + 1344) |= 0x200u;
      v147 = *(_QWORD *)(a1 + 192);
      *(_DWORD *)(v147 + 1352) = v9;
      if (v3)
        v148 = 1024;
      else
        v148 = 0;
      *(_WORD *)(v147 + 1344) = *(_WORD *)(v147 + 1344) & 0xFBFF | v148;
    }
    else
    {
      v198 = sub_22F4144F4((uint64_t *)(*(_QWORD *)(a1 + 32) + 1280), (_QWORD *)(a1 + 56));
      *((_BYTE *)v198 + 8) |= 1u;
      v199 = sub_22F4144F4((uint64_t *)(*(_QWORD *)(a1 + 32) + 1280), (_QWORD *)(a1 + 56));
      *((_BYTE *)v199 + 12) = v550;
      v200 = *(_QWORD *)(a1 + 40);
      sub_22F4144F4((uint64_t *)(*(_QWORD *)(a1 + 32) + 1280), (_QWORD *)(a1 + 56))[2] = v200;
    }
    if (*(_DWORD *)(a1 + 168) != 24)
    {
      v185 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v185 + 312) = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(v185 + 316) = 1070;
      if (*(char *)(v185 + 311) < 0)
      {
        **(_BYTE **)(v185 + 288) = 0;
        *(_QWORD *)(v185 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v185 + 288) = 0;
        *(_BYTE *)(v185 + 311) = 0;
      }
      v546 = v185 + 320;
      v547 = 0;
      v548 = v185;
      v549 = 1;
      *(_BYTE *)(v185 + 320) = 0;
      *(_DWORD *)(v185 + 664) = 0;
      v187 = *(unsigned int *)(v185 + 776);
      if ((_DWORD)v187)
      {
        v188 = *(_QWORD *)(v185 + 768);
        v189 = 56 * v187;
        do
        {
          if (*(char *)(v188 + v189 - 9) < 0)
            operator delete(*(void **)(v188 + v189 - 32));
          v189 -= 56;
        }
        while (v189);
      }
      *(_DWORD *)(v185 + 776) = 0;
      v190 = &v546;
LABEL_396:
      sub_22E3BB0B8((uint64_t)v190);
      goto LABEL_55;
    }
    v149 = sub_22F15A7BC((_BYTE **)a1);
    v150 = (_QWORD *)(a1 + 56);
    while (1)
    {
      while (1)
      {
        v151 = *(_DWORD *)(a1 + 168);
        if (v151 > 8)
        {
          if (v151 != 9)
          {
            if (v151 == 25)
            {
              sub_22F15A7BC((_BYTE **)a1);
              return;
            }
            goto LABEL_305;
          }
          if (*(_QWORD *)(a1 + 192))
          {
            sub_22F15A7BC((_BYTE **)a1);
            if (*(_DWORD *)(a1 + 168) == 20)
            {
              *(_WORD *)(*(_QWORD *)(a1 + 192) + 1344) |= 0x800u;
              goto LABEL_339;
            }
            v158 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v158 + 312) = *(_DWORD *)(a1 + 172);
            *(_DWORD *)(v158 + 316) = 1064;
            if (*(char *)(v158 + 311) < 0)
            {
              **(_BYTE **)(v158 + 288) = 0;
              *(_QWORD *)(v158 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v158 + 288) = 0;
              *(_BYTE *)(v158 + 311) = 0;
            }
            v540[0] = v158 + 320;
            v540[1] = 0;
            v540[2] = v158;
            v541 = 1;
            *(_BYTE *)(v158 + 320) = 0;
            *(_DWORD *)(v158 + 664) = 0;
            v172 = *(unsigned int *)(v158 + 776);
            if ((_DWORD)v172)
            {
              v173 = *(_QWORD *)(v158 + 768);
              v174 = 56 * v172;
              do
              {
                if (*(char *)(v173 + v174 - 9) < 0)
                  operator delete(*(void **)(v173 + v174 - 32));
                v174 -= 56;
              }
              while (v174);
            }
            *(_DWORD *)(v158 + 776) = 0;
            v168 = v540;
            goto LABEL_338;
          }
          v152 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(v152 + 312) = *(_DWORD *)(a1 + 172);
          *(_DWORD *)(v152 + 316) = 1068;
          if (*(char *)(v152 + 311) < 0)
          {
            **(_BYTE **)(v152 + 288) = 0;
            *(_QWORD *)(v152 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v152 + 288) = 0;
            *(_BYTE *)(v152 + 311) = 0;
          }
          v154 = (unsigned __int8 *)(v152 + 320);
          *(_QWORD *)__s1 = v152 + 320;
          *(_QWORD *)&__s1[8] = 0;
          *(_QWORD *)&__s1[16] = v152;
          *(_WORD *)&__s1[24] = 1;
          *(_BYTE *)(v152 + 320) = 0;
          *(_DWORD *)(v152 + 664) = 0;
          v162 = *(unsigned int *)(v152 + 776);
          if (!(_DWORD)v162)
            goto LABEL_336;
          v163 = *(_QWORD *)(v152 + 768);
          v164 = 56 * v162;
          do
          {
            if (*(char *)(v163 + v164 - 9) < 0)
              operator delete(*(void **)(v163 + v164 - 32));
            v164 -= 56;
          }
          while (v164);
LABEL_334:
          v154 = *(unsigned __int8 **)__s1;
          *(_DWORD *)(v152 + 776) = 0;
          v165 = *(_QWORD *)(a1 + 192);
          if (!v154)
          {
            v154 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__s1[8]);
            *(_QWORD *)__s1 = v154;
          }
          goto LABEL_337;
        }
        if (v151 != 7)
        {
          if (v151 == 3)
          {
            v186 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v186 + 312) = *(_DWORD *)(a1 + 172);
            *(_DWORD *)(v186 + 316) = 1076;
            if (*(char *)(v186 + 311) < 0)
            {
              **(_BYTE **)(v186 + 288) = 0;
              *(_QWORD *)(v186 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v186 + 288) = 0;
              *(_BYTE *)(v186 + 311) = 0;
            }
            v538[0] = v186 + 320;
            v538[1] = 0;
            v538[2] = v186;
            v539 = 1;
            *(_BYTE *)(v186 + 320) = 0;
            *(_DWORD *)(v186 + 664) = 0;
            v191 = *(unsigned int *)(v186 + 776);
            if ((_DWORD)v191)
            {
              v192 = *(_QWORD *)(v186 + 768);
              v193 = 56 * v191;
              do
              {
                if (*(char *)(v192 + v193 - 9) < 0)
                  operator delete(*(void **)(v192 + v193 - 32));
                v193 -= 56;
              }
              while (v193);
            }
            *(_DWORD *)(v186 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v538);
            v194 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v194 + 312) = v149;
            *(_DWORD *)(v194 + 316) = 1250;
            if (*(char *)(v194 + 311) < 0)
            {
              **(_BYTE **)(v194 + 288) = 0;
              *(_QWORD *)(v194 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v194 + 288) = 0;
              *(_BYTE *)(v194 + 311) = 0;
            }
            v536[0] = v194 + 320;
            v536[1] = 0;
            v536[2] = v194;
            v537 = 1;
            *(_BYTE *)(v194 + 320) = 0;
            *(_DWORD *)(v194 + 664) = 0;
            v195 = *(unsigned int *)(v194 + 776);
            if ((_DWORD)v195)
            {
              v196 = *(_QWORD *)(v194 + 768);
              v197 = 56 * v195;
              do
              {
                if (*(char *)(v196 + v197 - 9) < 0)
                  operator delete(*(void **)(v196 + v197 - 32));
                v197 -= 56;
              }
              while (v197);
            }
            *(_DWORD *)(v194 + 776) = 0;
            v190 = v536;
            goto LABEL_396;
          }
LABEL_305:
          v152 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(v152 + 312) = *(_DWORD *)(a1 + 172);
          *(_DWORD *)(v152 + 316) = 1068;
          if (*(char *)(v152 + 311) < 0)
          {
            **(_BYTE **)(v152 + 288) = 0;
            *(_QWORD *)(v152 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v152 + 288) = 0;
            *(_BYTE *)(v152 + 311) = 0;
          }
          v154 = (unsigned __int8 *)(v152 + 320);
          *(_QWORD *)__s1 = v152 + 320;
          *(_QWORD *)&__s1[8] = 0;
          *(_QWORD *)&__s1[16] = v152;
          *(_WORD *)&__s1[24] = 1;
          *(_BYTE *)(v152 + 320) = 0;
          *(_DWORD *)(v152 + 664) = 0;
          v155 = *(unsigned int *)(v152 + 776);
          if (!(_DWORD)v155)
            goto LABEL_336;
          v156 = *(_QWORD *)(v152 + 768);
          v157 = 56 * v155;
          do
          {
            if (*(char *)(v156 + v157 - 9) < 0)
              operator delete(*(void **)(v156 + v157 - 32));
            v157 -= 56;
          }
          while (v157);
          goto LABEL_334;
        }
        if (*(_QWORD *)(a1 + 192))
        {
          v152 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(v152 + 312) = *(_DWORD *)(a1 + 172);
          *(_DWORD *)(v152 + 316) = 1068;
          if (*(char *)(v152 + 311) < 0)
          {
            **(_BYTE **)(v152 + 288) = 0;
            *(_QWORD *)(v152 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v152 + 288) = 0;
            *(_BYTE *)(v152 + 311) = 0;
          }
          v154 = (unsigned __int8 *)(v152 + 320);
          *(_QWORD *)__s1 = v152 + 320;
          *(_QWORD *)&__s1[8] = 0;
          *(_QWORD *)&__s1[16] = v152;
          *(_WORD *)&__s1[24] = 1;
          *(_BYTE *)(v152 + 320) = 0;
          *(_DWORD *)(v152 + 664) = 0;
          v159 = *(unsigned int *)(v152 + 776);
          if ((_DWORD)v159)
          {
            v160 = *(_QWORD *)(v152 + 768);
            v161 = 56 * v159;
            do
            {
              if (*(char *)(v160 + v161 - 9) < 0)
                operator delete(*(void **)(v160 + v161 - 32));
              v161 -= 56;
            }
            while (v161);
            goto LABEL_334;
          }
LABEL_336:
          *(_DWORD *)(v152 + 776) = 0;
          v165 = *(_QWORD *)(a1 + 192);
LABEL_337:
          v154[*v154 + 1] = 2;
          v166 = *(_QWORD *)__s1;
          v167 = **(_BYTE **)__s1;
          **(_BYTE **)__s1 = v167 + 1;
          *(_QWORD *)(v166 + 8 * v167 + 16) = v165 != 0;
          v168 = __s1;
LABEL_338:
          sub_22E3BB0B8((uint64_t)v168);
          goto LABEL_339;
        }
        sub_22F15A7BC((_BYTE **)a1);
        if (*(_DWORD *)(a1 + 168) == 5)
          break;
        v153 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v153 + 312) = *(_DWORD *)(a1 + 172);
        *(_DWORD *)(v153 + 316) = 1084;
        if (*(char *)(v153 + 311) < 0)
        {
          **(_BYTE **)(v153 + 288) = 0;
          *(_QWORD *)(v153 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v153 + 288) = 0;
          *(_BYTE *)(v153 + 311) = 0;
        }
        __dst = (void **)(v153 + 320);
        v543 = 0;
        v544 = v153;
        v545 = 1;
        *(_BYTE *)(v153 + 320) = 0;
        *(_DWORD *)(v153 + 664) = 0;
        v169 = *(unsigned int *)(v153 + 776);
        if ((_DWORD)v169)
        {
          v170 = *(_QWORD *)(v153 + 768);
          v171 = 56 * v169;
          do
          {
            if (*(char *)(v170 + v171 - 9) < 0)
              operator delete(*(void **)(v170 + v171 - 32));
            v171 -= 56;
          }
          while (v171);
        }
        *(_DWORD *)(v153 + 776) = 0;
        sub_22E3BB0B8((uint64_t)&__dst);
      }
      v175 = sub_22F4144F4((uint64_t *)(*(_QWORD *)(a1 + 32) + 1280), v150);
      if (*(_DWORD *)(a1 + 168) == 22)
      {
        v176 = 0;
        __s1[23] = 0;
        v177 = __s1;
        goto LABEL_365;
      }
      v511 = v149;
      v178 = *(const void **)(a1 + 184);
      v176 = *(unsigned int *)(a1 + 176);
      if (v176 >= 0x17)
        break;
      __s1[23] = *(_DWORD *)(a1 + 176);
      v177 = __s1;
      if ((_DWORD)v176)
        goto LABEL_363;
      v176 = 0;
LABEL_364:
      v149 = v511;
LABEL_365:
      v177[v176] = 0;
      v182 = sub_22E3B9688((uint64_t)(v175 + 3), (unint64_t)__s1, 1);
      v183 = v175[3] + 24 * *((unsigned int *)v175 + 8);
      v184 = *(_OWORD *)v182;
      *(_QWORD *)(v183 + 16) = *(_QWORD *)(v182 + 16);
      *(_OWORD *)v183 = v184;
      *(_QWORD *)(v182 + 8) = 0;
      *(_QWORD *)(v182 + 16) = 0;
      *(_QWORD *)v182 = 0;
      ++*((_DWORD *)v175 + 8);
      if ((__s1[23] & 0x80000000) != 0)
        operator delete(*(void **)__s1);
LABEL_339:
      sub_22F15A7BC((_BYTE **)a1);
    }
    v179 = v150;
    if ((v176 | 7) == 0x17)
      v180 = (v176 & 0xFFFFFFF8) + 8;
    else
      v180 = v176 | 7;
    v177 = operator new(v180 + 1);
    v181 = v180 - 0x7FFFFFFFFFFFFFFFLL;
    v150 = v179;
    *(_QWORD *)&__s1[16] = v181;
    *(_QWORD *)__s1 = v177;
    *(_QWORD *)&__s1[8] = v176;
LABEL_363:
    memmove(v177, v178, v176);
    goto LABEL_364;
  }
LABEL_276:
  if (*(_DWORD *)(a1 + 168) == 24)
  {
    sub_22F15A7BC((_BYTE **)a1);
    sub_22F4135CC(a1, 25);
    if (*(_DWORD *)(a1 + 168) == 25)
      sub_22F15A7BC((_BYTE **)a1);
  }
  *(_BYTE *)(a1 + 65) = 1;
}

uint64_t sub_22F15F004(uint64_t a1, _BYTE *a2)
{
  char v4;
  int v5;
  __int128 v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  size_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[3];
  __int16 v50;
  _QWORD v51[3];
  __int16 v52;
  unsigned __int8 *v53[3];
  __int16 v54;
  _QWORD v55[3];
  __int16 v56;

  if (*(_DWORD *)(a1 + 168) == 26)
  {
    v4 = 0;
    do
    {
      v5 = sub_22F15A7BC((_BYTE **)a1);
      if (*(_DWORD *)(a1 + 168) == 5)
        goto LABEL_99;
      v28 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v28 + 312) = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(v28 + 316) = 1060;
      if (*(char *)(v28 + 311) < 0)
      {
        **(_BYTE **)(v28 + 288) = 0;
        *(_QWORD *)(v28 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v28 + 288) = 0;
        *(_BYTE *)(v28 + 311) = 0;
      }
      v55[0] = v28 + 320;
      v55[1] = 0;
      v55[2] = v28;
      v56 = 1;
      *(_BYTE *)(v28 + 320) = 0;
      *(_DWORD *)(v28 + 664) = 0;
      v29 = *(unsigned int *)(v28 + 776);
      if ((_DWORD)v29)
      {
        v30 = *(_QWORD *)(v28 + 768);
        v31 = 56 * v29;
        do
        {
          if (*(char *)(v30 + v31 - 9) < 0)
            operator delete(*(void **)(v30 + v31 - 32));
          v31 -= 56;
        }
        while (v31);
      }
      *(_DWORD *)(v28 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v55);
      sub_22F4135CC(a1, 27);
      v32 = *(_DWORD *)(a1 + 168);
      if (v32 == 27)
      {
        sub_22F15A7BC((_BYTE **)a1);
        v32 = *(_DWORD *)(a1 + 168);
      }
      v4 = 1;
      if (v32 != 22)
      {
LABEL_99:
        *((_QWORD *)&v6 + 1) = *(unsigned int *)(a1 + 176);
        *(_QWORD *)&v6 = *((_QWORD *)&v6 + 1) - 6;
        v7 = *(int **)(a1 + 184);
        switch((unint64_t)(v6 >> 1))
        {
          case 0uLL:
            v8 = *v7;
            v9 = *((unsigned __int16 *)v7 + 2);
            v10 = v8 == 1953724787 && v9 == 28005;
            if (!v10)
              goto LABEL_61;
            v11 = 0x100000001;
            break;
          case 1uLL:
            v10 = *(_QWORD *)v7 == 0x635F6E7265747865;
            v11 = 0x100000002;
            if (!v10)
              v11 = 0;
            break;
          case 2uLL:
            v12 = *(_QWORD *)v7;
            v13 = *((unsigned __int16 *)v7 + 4);
            if (v12 != 0x6974737561687865 || v13 != 25974)
              goto LABEL_61;
            v11 = 0x100000003;
            break;
          case 8uLL:
            v15 = *(_QWORD *)v7;
            v16 = *((_QWORD *)v7 + 1);
            v17 = *(_QWORD *)((char *)v7 + 14);
            if (v15 != 0x6365646E755F6F6ELL || v16 != 0x6E695F646572616CLL || v17 != 0x736564756C636E69)
              goto LABEL_61;
            v11 = 0x100000005;
            break;
          case 0xBuLL:
            v20 = *(_QWORD *)v7;
            v21 = *((_QWORD *)v7 + 1);
            v22 = *((_QWORD *)v7 + 2);
            v23 = v7[6];
            if (v20 != 0x6E695F7466697773
              || v21 != 0x6F706D695F726566
              || v22 != 0x656D5F73615F7472
              || v23 != 1919246957)
            {
              goto LABEL_61;
            }
            v11 = 0x100000004;
            break;
          default:
            goto LABEL_61;
        }
        if (v11 <= 0x100000000)
          LODWORD(v11) = 0;
        switch((int)v11)
        {
          case 0:
            goto LABEL_61;
          case 1:
            v27 = *a2 | 1;
            goto LABEL_51;
          case 2:
            v27 = *a2 | 2;
            goto LABEL_51;
          case 3:
            v27 = *a2 | 4;
            goto LABEL_51;
          case 4:
            v27 = *a2 | 8;
            goto LABEL_51;
          case 5:
            v27 = *a2 | 0x10;
LABEL_51:
            *a2 = v27;
            break;
          default:
            break;
        }
      }
      else
      {
LABEL_61:
        v33 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v33 + 312) = *(_DWORD *)(a1 + 172);
        *(_DWORD *)(v33 + 316) = 1326;
        if (*(char *)(v33 + 311) < 0)
        {
          **(_BYTE **)(v33 + 288) = 0;
          *(_QWORD *)(v33 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v33 + 288) = 0;
          *(_BYTE *)(v33 + 311) = 0;
        }
        v53[0] = (unsigned __int8 *)(v33 + 320);
        v53[1] = 0;
        v53[2] = (unsigned __int8 *)v33;
        v54 = 1;
        *(_BYTE *)(v33 + 320) = 0;
        *(_DWORD *)(v33 + 664) = 0;
        v34 = *(unsigned int *)(v33 + 776);
        if ((_DWORD)v34)
        {
          v35 = *(_QWORD *)(v33 + 768);
          v36 = 56 * v34;
          do
          {
            if (*(char *)(v35 + v36 - 9) < 0)
              operator delete(*(void **)(v35 + v36 - 32));
            v36 -= 56;
          }
          while (v36);
        }
        *(_DWORD *)(v33 + 776) = 0;
        if (*(_DWORD *)(a1 + 168) == 22)
        {
          v37 = 0;
          v38 = 0;
        }
        else
        {
          v37 = *(void **)(a1 + 184);
          v38 = *(unsigned int *)(a1 + 176);
        }
        sub_22E3B89A8(v53, v37, v38);
        sub_22E3BB0B8((uint64_t)v53);
      }
      sub_22F15A7BC((_BYTE **)a1);
      if (*(_DWORD *)(a1 + 168) != 27)
      {
        v40 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v40 + 312) = *(_DWORD *)(a1 + 172);
        *(_DWORD *)(v40 + 316) = 1077;
        if (*(char *)(v40 + 311) < 0)
        {
          **(_BYTE **)(v40 + 288) = 0;
          *(_QWORD *)(v40 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v40 + 288) = 0;
          *(_BYTE *)(v40 + 311) = 0;
        }
        v51[0] = v40 + 320;
        v51[1] = 0;
        v51[2] = v40;
        v52 = 1;
        *(_BYTE *)(v40 + 320) = 0;
        *(_DWORD *)(v40 + 664) = 0;
        v41 = *(unsigned int *)(v40 + 776);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)(v40 + 768);
          v43 = 56 * v41;
          do
          {
            if (*(char *)(v42 + v43 - 9) < 0)
              operator delete(*(void **)(v42 + v43 - 32));
            v43 -= 56;
          }
          while (v43);
        }
        *(_DWORD *)(v40 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v51);
        v44 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v44 + 312) = v5;
        *(_DWORD *)(v44 + 316) = 1251;
        if (*(char *)(v44 + 311) < 0)
        {
          **(_BYTE **)(v44 + 288) = 0;
          *(_QWORD *)(v44 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v44 + 288) = 0;
          *(_BYTE *)(v44 + 311) = 0;
        }
        v49[0] = v44 + 320;
        v49[1] = 0;
        v49[2] = v44;
        v50 = 1;
        *(_BYTE *)(v44 + 320) = 0;
        *(_DWORD *)(v44 + 664) = 0;
        v45 = *(unsigned int *)(v44 + 776);
        if ((_DWORD)v45)
        {
          v46 = *(_QWORD *)(v44 + 768);
          v47 = 56 * v45;
          do
          {
            if (*(char *)(v46 + v47 - 9) < 0)
              operator delete(*(void **)(v46 + v47 - 32));
            v47 -= 56;
          }
          while (v47);
        }
        *(_DWORD *)(v44 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v49);
        sub_22F4135CC(a1, 27);
        v39 = *(_DWORD *)(a1 + 168);
        v4 = 1;
        if (v39 != 27)
          continue;
      }
      sub_22F15A7BC((_BYTE **)a1);
      v39 = *(_DWORD *)(a1 + 168);
    }
    while (v39 == 26);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_22F15F524(uint64_t a1, int a2)
{
  int v2;
  int v4;
  unsigned int v5;
  unsigned int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  _QWORD *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  _QWORD *__dst;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  if (a2 == 7)
  {
    v4 = 4;
  }
  else if (a2 == 16)
  {
    if (*(_DWORD *)(a1 + 168) == 23)
    {
      sub_22F15A7BC((_BYTE **)a1);
      v2 = 23;
    }
    else
    {
      v2 = 16;
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = v4 | 2;
  if (v2 == 23)
    v6 = v4 | 2;
  else
    v6 = v4;
  v7 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 200), *(void **)(a1 + 192));
  v8 = *(_QWORD *)(a1 + 208);
  v9 = 216;
  if (v8 == *(_QWORD *)(a1 + 200))
    v9 = 220;
  if (v7 == (void **)(v8 + 8 * *(unsigned int *)(a1 + v9)))
    v10 = v6;
  else
    v10 = v5;
  if (v2 != 4)
  {
    if (*(_DWORD *)(a1 + 168) != 4)
    {
      v15 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v15 + 312) = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(v15 + 316) = 1066;
      if (*(char *)(v15 + 311) < 0)
      {
        **(_BYTE **)(v15 + 288) = 0;
        *(_QWORD *)(v15 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v15 + 288) = 0;
        *(_BYTE *)(v15 + 311) = 0;
      }
      v22 = v15 + 320;
      __dst = (_QWORD *)(v15 + 320);
      v30 = 0;
      v31 = v15;
      LOWORD(v32) = 1;
      *(_BYTE *)(v15 + 320) = 0;
      *(_DWORD *)(v15 + 664) = 0;
      v23 = *(unsigned int *)(v15 + 776);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v15 + 768);
        v25 = 56 * v23;
        do
        {
          if (*(char *)(v24 + v25 - 9) < 0)
            operator delete(*(void **)(v24 + v25 - 32));
          v25 -= 56;
        }
        while (v25);
      }
      v26 = "private";
      *(_DWORD *)(v15 + 776) = 0;
      v27 = "umbrella";
      if (v2 == 23)
        v27 = "textual";
      if (v2 != 16)
        v26 = v27;
      if (v2 == 7)
        v26 = "exclude";
      v28 = *(unsigned __int8 *)(v15 + 320);
      *(_BYTE *)(v22 + v28 + 1) = 1;
      *(_BYTE *)(v15 + 320) = v28 + 1;
      *(_QWORD *)(v22 + 8 * v28 + 16) = v26;
      return sub_22E3BB0B8((uint64_t)&__dst);
    }
    sub_22F15A7BC((_BYTE **)a1);
  }
  if (*(_DWORD *)(a1 + 168) == 21)
  {
    v11 = *(const void **)(a1 + 184);
    v12 = *(unsigned int *)(a1 + 176);
    if (v12 >= 0x17)
    {
      if ((v12 | 7) == 0x17)
        v16 = (v12 & 0xFFFFFFF8) + 8;
      else
        v16 = v12 | 7;
      p_dst = operator new(v16 + 1);
      v30 = v12;
      v31 = v16 - 0x7FFFFFFFFFFFFFFFLL;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = *(_DWORD *)(a1 + 176);
      p_dst = &__dst;
      if (!(_DWORD)v12)
      {
LABEL_33:
        *((_BYTE *)p_dst + v12) = 0;
        sub_22F15A7BC((_BYTE **)a1);
        __asm { BR              X10 }
      }
    }
    memmove(p_dst, v11, v12);
    goto LABEL_33;
  }
  v14 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v14 + 312) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(v14 + 316) = 1066;
  if (*(char *)(v14 + 311) < 0)
  {
    **(_BYTE **)(v14 + 288) = 0;
    *(_QWORD *)(v14 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v14 + 288) = 0;
    *(_BYTE *)(v14 + 311) = 0;
  }
  v17 = (unsigned __int8 *)(v14 + 320);
  __dst = (_QWORD *)(v14 + 320);
  v30 = 0;
  v31 = v14;
  LOWORD(v32) = 1;
  *(_BYTE *)(v14 + 320) = 0;
  *(_DWORD *)(v14 + 664) = 0;
  v18 = *(unsigned int *)(v14 + 776);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)(v14 + 768);
    v20 = 56 * v18;
    do
    {
      if (*(char *)(v19 + v20 - 9) < 0)
        operator delete(*(void **)(v19 + v20 - 32));
      v20 -= 56;
    }
    while (v20);
    LODWORD(v18) = *v17;
  }
  *(_DWORD *)(v14 + 776) = 0;
  v17[v18 + 1] = 1;
  *(_BYTE *)(v14 + 320) = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = "header";
  result = sub_22E3BB0B8((uint64_t)&__dst);
  *(_BYTE *)(a1 + 65) = 1;
  return result;
}

void sub_22F1607C4(uint64_t a1, int a2)
{
  const void *v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *p_p;
  size_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  const void *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  const void *v47;
  char v48;
  const void *v49;
  size_t v50;
  size_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unsigned int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  size_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84[2];
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  std::error_code v89;
  __int16 v90;
  char v91[8];
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int16 v94;
  int v95[2];
  void *v96[2];
  uint64_t v97;
  __int128 __dst;
  uint64_t v99;
  void *__p;
  size_t v101;
  char v102;
  char v103;
  void *v104;
  size_t v105;
  unint64_t v106;
  uint64_t v107;
  void *__base;
  __int128 __nel;
  __int16 v110;
  __int16 v111;
  uint64_t v112;
  char v113;
  __int16 v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 168) == 21)
  {
    v4 = *(const void **)(a1 + 184);
    v5 = *(unsigned int *)(a1 + 176);
    if (v5 >= 0x17)
    {
      if ((v5 | 7) == 0x17)
        v8 = (v5 & 0xFFFFFFF8) + 8;
      else
        v8 = v5 | 7;
      p_dst = (__int128 *)operator new(v8 + 1);
      *((_QWORD *)&__dst + 1) = v5;
      v99 = v8 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v99) = *(_DWORD *)(a1 + 176);
      p_dst = &__dst;
      if (!(_DWORD)v5)
      {
LABEL_12:
        *((_BYTE *)p_dst + v5) = 0;
        if (SHIBYTE(v99) < 0)
        {
          sub_22E3BB2B4(v96, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          *(_OWORD *)v96 = __dst;
          v97 = v99;
        }
        v13 = sub_22F15A7BC((_BYTE **)a1);
        v14 = v13;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 192) + 72) >= 8uLL)
        {
          v15 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(v15 + 312) = v13;
          *(_DWORD *)(v15 + 316) = 1093;
          if (*(char *)(v15 + 311) < 0)
          {
            **(_BYTE **)(v15 + 288) = 0;
            *(_QWORD *)(v15 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v15 + 288) = 0;
            *(_BYTE *)(v15 + 311) = 0;
          }
          __base = (void *)(v15 + 320);
          *(_QWORD *)&__nel = 0;
          *((_QWORD *)&__nel + 1) = v15;
          v110 = 1;
          *(_BYTE *)(v15 + 320) = 0;
          *(_DWORD *)(v15 + 664) = 0;
          v23 = *(unsigned int *)(v15 + 776);
          if ((_DWORD)v23)
          {
            v24 = *(_QWORD *)(v15 + 768);
            v25 = 56 * v23;
            do
            {
              if (*(char *)(v24 + v25 - 9) < 0)
                operator delete(*(void **)(v24 + v25 - 32));
              v25 -= 56;
            }
            while (v25);
          }
          *(_DWORD *)(v15 + 776) = 0;
          v26 = *(uint64_t **)(a1 + 192);
          goto LABEL_47;
        }
        *(_QWORD *)v95 = 0;
        v111 = 260;
        __base = &__dst;
        if (llvm::sys::path::is_absolute())
        {
          if (v99 >= 0)
            v16 = (char *)&__dst;
          else
            v16 = (char *)__dst;
          if (v99 >= 0)
            v17 = HIBYTE(v99) & 0x7F;
          else
            v17 = *((_QWORD *)&__dst + 1);
          sub_22F1D0728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), v16, v17, 1, (uint64_t)&__base);
          if ((BYTE8(__nel) & 1) != 0)
          {
            v18 = 0;
          }
          else
          {
            v18 = (void **)__base;
            *(_QWORD *)v95 = __base;
          }
LABEL_60:
          if (!v18)
          {
            v71 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v71 + 312) = v14;
            *(_DWORD *)(v71 + 316) = 1325;
            if (*(char *)(v71 + 311) < 0)
            {
              **(_BYTE **)(v71 + 288) = 0;
              *(_QWORD *)(v71 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v71 + 288) = 0;
              *(_BYTE *)(v71 + 311) = 0;
            }
            __base = (void *)(v71 + 320);
            *(_QWORD *)&__nel = 0;
            *((_QWORD *)&__nel + 1) = v71;
            v110 = 1;
            *(_BYTE *)(v71 + 320) = 0;
            *(_DWORD *)(v71 + 664) = 0;
            v72 = *(unsigned int *)(v71 + 776);
            if ((_DWORD)v72)
            {
              v73 = *(_QWORD *)(v71 + 768);
              v74 = 56 * v72;
              do
              {
                if (*(char *)(v73 + v74 - 9) < 0)
                  operator delete(*(void **)(v73 + v74 - 32));
                v74 -= 56;
              }
              while (v74);
            }
            *(_DWORD *)(v71 + 776) = 0;
            if (v99 >= 0)
              v75 = &__dst;
            else
              v75 = (__int128 *)__dst;
            if (v99 >= 0)
              v76 = HIBYTE(v99) & 0x7F;
            else
              v76 = *((_QWORD *)&__dst + 1);
            sub_22E3B89A8((unsigned __int8 **)&__base, v75, v76);
            sub_22E3BB0B8((uint64_t)&__base);
            goto LABEL_132;
          }
          v29 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 200), *(void **)(a1 + 192));
          v30 = *(_QWORD *)(a1 + 208);
          v31 = 216;
          if (v30 == *(_QWORD *)(a1 + 200))
            v31 = 220;
          if (v29 == (void **)(v30 + 8 * *(unsigned int *)(a1 + v31)))
          {
            v77 = (uint64_t *)sub_22F25E108((uint64_t *)(*(_QWORD *)(a1 + 32) + 1224), v95)[1];
            if (!v77)
            {
              v79 = *(_QWORD *)(a1 + 32);
              v80 = *(_QWORD *)(a1 + 192);
              v111 = 260;
              __base = v96;
              LOWORD(v105) = 260;
              __p = &__dst;
              sub_22F159CA8(v79, v80, *(uint64_t *)v95, (llvm::Twine *)&__base, (llvm::Twine *)&__p);
LABEL_132:
              if (SHIBYTE(v97) < 0)
                operator delete(v96[0]);
              if (SHIBYTE(v99) < 0)
                operator delete((void *)__dst);
              return;
            }
            v78 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(v78 + 312) = a2;
            *(_DWORD *)(v78 + 316) = 1093;
            if (*(char *)(v78 + 311) < 0)
            {
              **(_BYTE **)(v78 + 288) = 0;
              *(_QWORD *)(v78 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v78 + 288) = 0;
              *(_BYTE *)(v78 + 311) = 0;
            }
            __base = (void *)(v78 + 320);
            *(_QWORD *)&__nel = 0;
            *((_QWORD *)&__nel + 1) = v78;
            v110 = 1;
            *(_BYTE *)(v78 + 320) = 0;
            *(_DWORD *)(v78 + 664) = 0;
            v81 = *(unsigned int *)(v78 + 776);
            if ((_DWORD)v81)
            {
              v82 = *(_QWORD *)(v78 + 768);
              v83 = 56 * v81;
              do
              {
                if (*(char *)(v82 + v83 - 9) < 0)
                  operator delete(*(void **)(v82 + v83 - 32));
                v83 -= 56;
              }
              while (v83);
            }
            *(_DWORD *)(v78 + 776) = 0;
            v26 = v77;
LABEL_47:
            sub_22F1D8A24(v26, 0, &__p);
            if (v103 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            if (v103 >= 0)
              v28 = v103 & 0x7F;
            else
              v28 = v101;
            sub_22E3B89A8((unsigned __int8 **)&__base, p_p, v28);
            if (v103 < 0)
              operator delete(__p);
            sub_22E3BB0B8((uint64_t)&__base);
            *(_BYTE *)(a1 + 65) = 1;
            goto LABEL_132;
          }
          v89.__val_ = 0;
          v89.__cat_ = std::system_category();
          __base = (char *)&__nel + 8;
          *(_QWORD *)&__nel = 0x600000000;
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 8);
          v33 = *v18;
          v34 = (size_t)v18[1];
          LOWORD(v105) = 261;
          __p = v33;
          v101 = v34;
          MEMORY[0x23489E97C](v91, v32, &__p, &v89);
          v35 = v92;
          if (!v92 || v89.__val_)
          {
LABEL_93:
            v59 = v93;
            if (v93)
            {
              p_shared_owners = (unint64_t *)&v93->__shared_owners_;
              do
                v61 = __ldaxr(p_shared_owners);
              while (__stlxr(v61 - 1, p_shared_owners));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v62 = __nel;
            if (__nel >= 2)
            {
              qsort(__base, __nel, 0x38uLL, (int (__cdecl *)(const void *, const void *))sub_22F161100);
              v62 = __nel;
            }
            v63 = (char *)__base;
            if (v62)
            {
              v64 = (char *)__base + 56 * v62;
              do
              {
                v65 = *(_QWORD *)(a1 + 32);
                v66 = *(_QWORD *)(a1 + 192);
                v67 = *((_QWORD *)v63 + 2);
                *(_OWORD *)v84 = *(_OWORD *)v63;
                v85 = v67;
                *((_QWORD *)v63 + 1) = 0;
                *((_QWORD *)v63 + 2) = 0;
                *(_QWORD *)v63 = 0;
                v68 = *(_OWORD *)(v63 + 24);
                v87 = *((_QWORD *)v63 + 5);
                v86 = v68;
                *((_QWORD *)v63 + 4) = 0;
                *((_QWORD *)v63 + 5) = 0;
                *((_QWORD *)v63 + 3) = 0;
                v88 = *((_QWORD *)v63 + 6);
                sub_22F151620(v65, v66, (unint64_t)v84, 2u, 0);
                if (SHIBYTE(v87) < 0)
                  operator delete((void *)v86);
                if (SHIBYTE(v85) < 0)
                  operator delete(v84[0]);
                v63 += 56;
              }
              while (v63 != v64);
              v63 = (char *)__base;
              if ((_DWORD)__nel)
              {
                v69 = 56 * __nel;
                do
                {
                  v70 = (void **)&v63[v69];
                  if (v63[v69 - 9] < 0)
                    operator delete(*(v70 - 4));
                  if (*((char *)v70 - 33) < 0)
                    operator delete(*(v70 - 7));
                  v69 -= 56;
                }
                while (v69);
                v63 = (char *)__base;
              }
            }
            if (v63 != (char *)&__nel + 8)
              free(v63);
            goto LABEL_132;
          }
          while (1)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v35 + 8) - 16);
            v39 = *(_QWORD *)(v36 + 8);
            v37 = v36 + 8;
            v38 = v39;
            v40 = *(_BYTE *)(v37 + 23);
            v41 = (const void *)(v40 >= 0 ? v37 : v38);
            v42 = *(_QWORD *)(v37 + 8);
            v43 = v40 >= 0 ? v40 & 0x7F : v42;
            sub_22F1D07D8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), v41, v43, 0, 1, (uint64_t)&v112);
            if ((v113 & 1) == 0)
              break;
LABEL_91:
            llvm::vfs::recursive_directory_iterator::increment((llvm::vfs::recursive_directory_iterator *)v91, &v89);
            v35 = v92;
            if (!v92 || v89.__val_)
              goto LABEL_93;
          }
          v103 = 0;
          LOBYTE(__p) = 0;
          v44 = *(_QWORD *)(*(_QWORD *)(v92 + 8) - 16);
          v47 = *(const void **)(v44 + 8);
          v45 = v44 + 8;
          v46 = v47;
          v48 = *(_BYTE *)(v45 + 23);
          if (v48 >= 0)
            v49 = (const void *)v45;
          else
            v49 = v46;
          v50 = *(_QWORD *)(v45 + 8);
          if (v48 >= 0)
            v51 = v48 & 0x7F;
          else
            v51 = v50;
          if (v51 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v51 >= 0x17)
          {
            v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17)
              v53 = v51 | 7;
            v54 = v53 + 1;
            v52 = operator new(v53 + 1);
            v105 = v51;
            v106 = v54 | 0x8000000000000000;
            v104 = v52;
          }
          else
          {
            HIBYTE(v106) = v51;
            v52 = &v104;
            if (!v51)
              goto LABEL_87;
          }
          memmove(v52, v49, v51);
LABEL_87:
          *((_BYTE *)v52 + v51) = 0;
          v107 = v112;
          v55 = sub_22E730DA4((uint64_t)&__base, (unint64_t)&__p, 1);
          v56 = (char *)__base + 56 * __nel;
          v57 = *(_OWORD *)v55;
          *((_QWORD *)v56 + 2) = *(_QWORD *)(v55 + 16);
          *(_OWORD *)v56 = v57;
          *(_QWORD *)(v55 + 8) = 0;
          *(_QWORD *)(v55 + 16) = 0;
          *(_QWORD *)v55 = 0;
          v58 = *(_OWORD *)(v55 + 24);
          *((_QWORD *)v56 + 5) = *(_QWORD *)(v55 + 40);
          *(_OWORD *)(v56 + 24) = v58;
          *(_QWORD *)(v55 + 32) = 0;
          *(_QWORD *)(v55 + 40) = 0;
          *(_QWORD *)(v55 + 24) = 0;
          *((_QWORD *)v56 + 6) = *(_QWORD *)(v55 + 48);
          LODWORD(__nel) = __nel + 1;
          if (SHIBYTE(v106) < 0)
            operator delete(v104);
          if (v103 < 0)
            operator delete(__p);
          goto LABEL_91;
        }
        __base = &v110;
        v19 = *(_QWORD *)(a1 + 56);
        v21 = *(const void **)v19;
        v20 = *(_QWORD *)(v19 + 8);
        __nel = xmmword_22F44E310;
        if (v20 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v22 = __nel;
        }
        else
        {
          v22 = 0;
          if (!v20)
            goto LABEL_38;
        }
        memcpy((char *)__base + v22, v21, v20);
        v22 = __nel;
LABEL_38:
        *(_QWORD *)&__nel = v22 + v20;
        LOWORD(v105) = 260;
        __p = &__dst;
        v94 = 257;
        v114 = 257;
        v90 = 257;
        llvm::sys::path::append();
        sub_22F1D0728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (char *)__base, __nel, 1, (uint64_t)&__p);
        if ((v102 & 1) != 0)
        {
          v18 = 0;
        }
        else
        {
          v18 = (void **)__p;
          *(_QWORD *)v95 = __p;
        }
        if (__base != &v110)
          free(__base);
        goto LABEL_60;
      }
    }
    memmove(p_dst, v4, v5);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v7 + 312) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(v7 + 316) = 1066;
  if (*(char *)(v7 + 311) < 0)
  {
    **(_BYTE **)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + 288) = 0;
    *(_BYTE *)(v7 + 311) = 0;
  }
  v9 = (unsigned __int8 *)(v7 + 320);
  __base = (void *)(v7 + 320);
  *(_QWORD *)&__nel = 0;
  *((_QWORD *)&__nel + 1) = v7;
  v110 = 1;
  *(_BYTE *)(v7 + 320) = 0;
  *(_DWORD *)(v7 + 664) = 0;
  v10 = *(unsigned int *)(v7 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v7 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
    LODWORD(v10) = *v9;
  }
  *(_DWORD *)(v7 + 776) = 0;
  v9[v10 + 1] = 1;
  *(_BYTE *)(v7 + 320) = v10 + 1;
  *(_QWORD *)&v9[8 * v10 + 16] = "umbrella";
  sub_22E3BB0B8((uint64_t)&__base);
  *(_BYTE *)(a1 + 65) = 1;
}

uint64_t sub_22F161100(const void **a1, _BYTE *a2)
{
  char v2;
  size_t v3;
  const void **v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;
  unsigned int v10;

  v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1;
    a1 = (const void **)*a1;
    v3 = (size_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  v5 = v2;
  v6 = v2 & 0x7F;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = *((_QWORD *)a2 + 1);
  if (v5 < 0)
    a2 = *(_BYTE **)a2;
  if (v7 >= v3)
    v8 = v3;
  else
    v8 = v7;
  LODWORD(result) = memcmp(a1, a2, v8);
  if (v3 < v7)
    v10 = -1;
  else
    v10 = v7 < v3;
  if ((_DWORD)result)
    return result;
  else
    return v10;
}

uint64_t sub_22F161170(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  __int16 v10;

  while (1)
  {
    while (1)
    {
      do
        v2 = *(_DWORD *)(a1 + 168);
      while (v2 > 0x1B);
      v3 = 1 << v2;
      if ((v3 & 0xFFFA6F7) == 0)
        break;
      v4 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v4 + 312) = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(v4 + 316) = 1074;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      v9[0] = v4 + 320;
      v9[1] = 0;
      v9[2] = v4;
      v10 = 1;
      *(_BYTE *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 664) = 0;
      v5 = *(unsigned int *)(v4 + 776);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(v4 + 768);
        v7 = 56 * v5;
        do
        {
          if (*(char *)(v6 + v7 - 9) < 0)
            operator delete(*(void **)(v6 + v7 - 32));
          v7 -= 56;
        }
        while (v7);
      }
      *(_DWORD *)(v4 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v9);
      *(_BYTE *)(a1 + 65) = 1;
      sub_22F15A7BC((_BYTE **)a1);
    }
    if ((v3 & 0x5900) == 0)
      break;
    sub_22F15B584(a1);
  }
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t *sub_22F161284(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v13 = i[1];
        ++i;
        v7 = v13;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v8 = MEMORY[0x23489D23C](a3 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a3)
    memcpy((void *)(v8 + 16), a2, a3);
  *(_BYTE *)(v10 + a3) = 0;
  *(_QWORD *)v9 = a3;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F161378(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 24 * v7;
        do
        {
          if (v6[v8 - 1] < 0)
            operator delete(*(void **)&v6[v8 - 24]);
          v8 -= 24;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v9 = 0;
      return a1;
    }
    v9 = (_DWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= v11)
    {
      v13 = *(_QWORD *)a1;
      if (v11)
      {
        sub_22E80B390(v4, (__int128 *)((char *)v4 + 24 * v11), v13);
        v15 = v14;
        v13 = *(_QWORD *)a1;
        LODWORD(v12) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v15 = *(_QWORD *)a1;
      }
      for (i = v13 + 24 * v12; i != v15; i -= 24)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      *(_DWORD *)(a1 + 8) = v11;
      v17 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v17)
      {
        v18 = *(__int128 **)a2;
        v19 = 24 * v17;
        do
        {
          if (*((char *)v18 + v19 - 1) < 0)
            operator delete(*(void **)((char *)v18 + v19 - 24));
          v19 -= 24;
        }
        while (v19);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v11)
    {
      if ((_DWORD)v12)
      {
        v20 = *(_QWORD *)a1;
        v21 = 24 * v12;
        do
        {
          if (*(char *)(v20 + v21 - 1) < 0)
            operator delete(*(void **)(v20 + v21 - 24));
          v21 -= 24;
        }
        while (v21);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F243B14(a1);
    }
    else if ((_DWORD)v12)
    {
      sub_22E80B390(v4, (__int128 *)((char *)v4 + 24 * v12), *(_QWORD *)a1);
LABEL_39:
      v22 = *(__int128 **)a2;
      v23 = *(unsigned int *)(a2 + 8);
      if (v12 != v23)
      {
        v24 = *(_QWORD *)a1 + 24 * v12;
        v25 = (char *)v22 + 24 * v12;
        v26 = 24 * v23 - 24 * v12;
        do
        {
          v27 = *(_OWORD *)v25;
          *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v24 = v27;
          v24 += 24;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *(_QWORD *)v25 = 0;
          v25 += 24;
          v26 -= 24;
        }
        while (v26);
        v22 = *(__int128 **)a2;
      }
      *(_DWORD *)(a1 + 8) = v11;
      v28 = *v9;
      if ((_DWORD)v28)
      {
        v29 = 24 * v28;
        do
        {
          if (*((char *)v22 + v29 - 1) < 0)
            operator delete(*(void **)((char *)v22 + v29 - 24));
          v29 -= 24;
        }
        while (v29);
      }
      goto LABEL_12;
    }
    v12 = 0;
    goto LABEL_39;
  }
  return a1;
}

void sub_22F1615B0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 72 * v2;
    do
    {
      *(_QWORD *)a2 = *(_QWORD *)v3;
      v5 = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_OWORD *)(a2 + 8) = v5;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v6 = *(_OWORD *)(v3 + 32);
      v7 = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 32) = v6;
      *(_OWORD *)(a2 + 48) = v7;
      v3 += 72;
      a2 += 72;
    }
    while (v3 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 72 * v8;
      do
      {
        if (*(char *)(v9 + v10 - 41) < 0)
          operator delete(*(void **)(v9 + v10 - 64));
        v10 -= 72;
      }
      while (v10);
    }
  }
}

_QWORD *sub_22F16164C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E54D320((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F1616B8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

_QWORD *sub_22F1616B8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F161768((uint64_t)a1, v7);
  v9 = 0;
  sub_22E54D320((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22F161768(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F161828(a1, v4, &v4[4 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F161828(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_18:
      v4 += 4;
      if (v4 == a3)
        return;
    }
    v19 = 0;
    sub_22E54D320(a1, v4, &v19);
    v9 = v19;
    v10 = *v4;
    v11 = v19;
    *(_QWORD *)(v19 + 8) = v19 + 24;
    v12 = (void **)(v11 + 8);
    *(_QWORD *)v9 = v10;
    *(_QWORD *)(v9 + 16) = 0x100000000;
    v13 = *((_DWORD *)v4 + 4);
    v14 = (uint64_t *)v4[1];
    if (v4 == (uint64_t *)v9 || v13 == 0)
    {
LABEL_16:
      ++*(_DWORD *)(a1 + 8);
      if (v4 + 3 != v14)
        free(v14);
      goto LABEL_18;
    }
    if (v4 + 3 != v14)
    {
      *(_QWORD *)(v9 + 8) = v14;
      v17 = *((_DWORD *)v4 + 5);
      *(_DWORD *)(v9 + 16) = v13;
      *(_DWORD *)(v9 + 20) = v17;
      v4[1] = (uint64_t)(v4 + 3);
      *((_DWORD *)v4 + 5) = 0;
      goto LABEL_15;
    }
    if (v13 >= 2)
    {
      v18 = v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = v18;
      v16 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v16)
        goto LABEL_14;
    }
    else
    {
      v16 = *((unsigned int *)v4 + 4);
    }
    memcpy(*v12, (const void *)v4[1], 8 * v16);
LABEL_14:
    *(_DWORD *)(v9 + 16) = v13;
LABEL_15:
    *((_DWORD *)v4 + 4) = 0;
    v14 = (uint64_t *)v4[1];
    goto LABEL_16;
  }
}

uint64_t *sub_22F161990(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v13 = i[1];
        ++i;
        v7 = v13;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v8 = MEMORY[0x23489D23C](a3 + 17, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 16;
  if (a3)
    memcpy((void *)(v8 + 16), a2, a3);
  *(_BYTE *)(v10 + a3) = 0;
  *v9 = a3;
  v9[1] = 0;
  *i = (uint64_t)v9;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *sub_22F161A8C(uint64_t a1, int a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 88 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F413E78((char **)a1, (uint64_t)v4, (uint64_t)&v4[88 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(88 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F161B58(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0x7FFFFFFFFFFFFFFFLL;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (uint64_t *)v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0x7FFFFFFFFFFFFFFDLL)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & (37 * v13);
          v16 = (uint64_t *)(*(_QWORD *)a1 + 16 * v15);
          v17 = *v16;
          if (v13 != *v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != 0x7FFFFFFFFFFFFFFFLL)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == 0x7FFFFFFFFFFFFFFELL;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v21 & v14));
              v17 = *v16;
              if (v13 == *v16)
                goto LABEL_14;
            }
            if (v18)
              v16 = v18;
          }
LABEL_14:
          *v16 = v13;
          v16[1] = v12[1];
          v12[1] = 0;
          ++*(_DWORD *)(a1 + 8);
          sub_22F29CFE8(v12 + 1);
        }
        v12 += 2;
      }
      while (v12 != (uint64_t *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      do
      {
        *result = 0x7FFFFFFFFFFFFFFFLL;
        result += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  return result;
}

char **sub_22F161D18(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    do
    {
      if (v2[v4 - 41] < 0)
        operator delete(*(void **)&v2[v4 - 64]);
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_22F161D88(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F414088(a1, v4, (_QWORD *)v4 + 6 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = -4096;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F161E54(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v12 = *(char **)a1;
        if (v5)
        {
          v13 = &v4[96 * v5];
          v14 = (uint64_t)(v4 + 8);
          do
          {
            *(_DWORD *)v12 = *(_DWORD *)(v14 - 8);
            sub_22F1620B0((uint64_t)(v12 + 8), v14);
            v12[88] = *(_BYTE *)(v14 + 80);
            v12 += 96;
            v15 = v14 + 88;
            v14 += 96;
          }
          while ((char *)v15 != v13);
          v16 = v12;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v12 = *(char **)a1;
        }
        else
        {
          v16 = *(char **)a1;
        }
        v17 = &v12[96 * v6];
        if (v17 != v16)
        {
          do
          {
            v18 = v17 - 96;
            sub_22E5762C8((char **)v17 - 11);
            v17 = v18;
          }
          while (v18 != v16);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v19 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v19)
        {
          v20 = *(_QWORD *)a2 - 88;
          v21 = 96 * v19;
          do
          {
            sub_22E5762C8((char **)(v20 + v21));
            v21 -= 96;
          }
          while (v21);
        }
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v22 = *(_QWORD *)a1 - 88;
          v23 = 96 * v6;
          do
          {
            sub_22E5762C8((char **)(v22 + v23));
            v23 -= 96;
          }
          while (v23);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F4141D4(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[96 * v6];
        v8 = *(_QWORD *)a1 + 8;
        v9 = (uint64_t)(v4 + 8);
        do
        {
          *(_DWORD *)(v8 - 8) = *(_DWORD *)(v9 - 8);
          v10 = sub_22F1620B0(v8, v9);
          *(_BYTE *)(v10 + 80) = *(_BYTE *)(v9 + 80);
          v8 = v10 + 96;
          v11 = v9 + 88;
          v9 += 96;
        }
        while ((char *)v11 != v7);
        goto LABEL_26;
      }
      v6 = 0;
LABEL_26:
      v24 = *(char **)a2;
      v25 = *(unsigned int *)(a2 + 8);
      if (v6 != v25)
      {
        v26 = &v24[96 * v25];
        v27 = (96 * v6) | 8;
        v28 = *(_QWORD *)a1 + v27;
        v29 = (uint64_t)&v24[v27];
        do
        {
          v30 = v29 - 8;
          *(_DWORD *)(v28 - 8) = *(_DWORD *)(v29 - 8);
          *(_QWORD *)v28 = v28 + 16;
          *(_QWORD *)(v28 + 8) = 0x200000000;
          if (*(_DWORD *)(v29 + 8))
            v28 = sub_22F1620B0(v28, v29);
          *(_BYTE *)(v28 + 80) = *(_BYTE *)(v29 + 80);
          v28 += 96;
          v29 += 96;
        }
        while ((char *)(v30 + 96) != v26);
        v24 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v31 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v31)
      {
        v32 = v24 - 88;
        v33 = 96 * v31;
        do
        {
          sub_22E5762C8((char **)&v32[v33]);
          v33 -= 96;
        }
        while (v33);
      }
LABEL_35:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F414158((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_22F1620B0(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 32 * v7;
        do
        {
          if (v6[v8 - 9] < 0)
            operator delete(*(void **)&v6[v8 - 32]);
          v8 -= 32;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v9 = 0;
      return a1;
    }
    v9 = (_DWORD *)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 8);
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= v11)
    {
      v13 = *(_QWORD *)a1;
      if ((_DWORD)v11)
      {
        v14 = sub_22F1622D0(v4, &v4[2 * v11], v13);
        v13 = *(_QWORD *)a1;
        v12 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v14 = *(_QWORD *)a1;
      }
      for (i = v13 + 32 * v12; i != v14; i -= 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      *(_DWORD *)(a1 + 8) = v11;
      v16 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v16)
      {
        v17 = *(__int128 **)a2;
        v18 = 2 * v16;
        do
        {
          if (SBYTE7(v17[v18 - 1]) < 0)
            operator delete(*(void **)&v17[v18 - 2]);
          v18 -= 2;
        }
        while (v18 * 16);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v11)
    {
      if ((_DWORD)v12)
      {
        v19 = *(_QWORD *)a1;
        v20 = 32 * v12;
        do
        {
          if (*(char *)(v19 + v20 - 9) < 0)
            operator delete(*(void **)(v19 + v20 - 32));
          v20 -= 32;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F414240(a1);
    }
    else if ((_DWORD)v12)
    {
      sub_22F1622D0(v4, &v4[2 * v12], *(_QWORD *)a1);
LABEL_39:
      v21 = *(__int128 **)a2;
      v22 = *(unsigned int *)(a2 + 8);
      if (v12 != v22)
      {
        v23 = &v21[2 * v22];
        v24 = *(_QWORD *)a1 + 32 * v12;
        v25 = &v21[2 * v12];
        do
        {
          v26 = *v25;
          *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v24 = v26;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *(_QWORD *)v25 = 0;
          *(_DWORD *)(v24 + 24) = *((_DWORD *)v25 + 6);
          v25 += 2;
          v24 += 32;
        }
        while (v25 != v23);
        v21 = *(__int128 **)a2;
      }
      *(_DWORD *)(a1 + 8) = v11;
      v27 = *v9;
      if ((_DWORD)v27)
      {
        v28 = 2 * v27;
        do
        {
          if (SBYTE7(v21[v28 - 1]) < 0)
            operator delete(*(void **)&v21[v28 - 2]);
          v28 -= 2;
        }
        while (v28 * 16);
      }
      goto LABEL_12;
    }
    v12 = 0;
    goto LABEL_39;
  }
  return a1;
}

uint64_t sub_22F1622D0(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_DWORD *)(a3 + 24) = *((_DWORD *)v5 + 6);
      a3 += 32;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_22F162348(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[2 * v2];
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(a2 + 24) = *((_DWORD *)v3 + 6);
      v3 += 2;
      a2 += 32;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 2 * v6;
      do
      {
        if (SBYTE7(v7[v8 - 1]) < 0)
          operator delete(*(void **)&v7[v8 - 2]);
        v8 -= 2;
      }
      while (v8 * 16);
    }
  }
}

uint64_t sub_22F1623CC(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char **i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v10 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v11 = 80 * v5;
          do
          {
            sub_22F1620B0((uint64_t)v10, (uint64_t)v4);
            v4 += 80;
            v10 += 80;
            v11 -= 80;
          }
          while (v11);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v12 = *(char **)a1;
        }
        else
        {
          v12 = *(char **)a1;
        }
        for (i = (char **)&v12[80 * v6]; i != (char **)v10; i = sub_22E5762C8(i - 10))
          ;
        *(_DWORD *)(a1 + 8) = v5;
        v14 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v14)
        {
          v15 = 80 * v14;
          v16 = *(_QWORD *)a2 - 80;
          do
          {
            sub_22E5762C8((char **)(v16 + v15));
            v15 -= 80;
          }
          while (v15);
        }
        goto LABEL_36;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v17 = 80 * v6;
          v18 = *(_QWORD *)a1 - 80;
          do
          {
            sub_22E5762C8((char **)(v18 + v17));
            v17 -= 80;
          }
          while (v17);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F4143E4(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1;
        v8 = 80 * v6;
        do
        {
          v9 = sub_22F1620B0(v7, (uint64_t)v4);
          v4 += 80;
          v7 = v9 + 80;
          v8 -= 80;
        }
        while (v8);
        goto LABEL_27;
      }
      v6 = 0;
LABEL_27:
      v19 = *(char **)a2;
      v20 = *(unsigned int *)(a2 + 8);
      if (v6 != v20)
      {
        v21 = *(char **)a1;
        v22 = 80 * v6;
        v23 = 80 * v20;
        do
        {
          v24 = &v21[v22];
          *(_QWORD *)v24 = &v21[v22 + 16];
          *((_QWORD *)v24 + 1) = 0x200000000;
          if (*(_DWORD *)&v19[v22 + 8])
            sub_22F1620B0((uint64_t)v24, (uint64_t)&v19[v22]);
          v21 += 80;
          v23 -= 80;
          v19 += 80;
        }
        while (v22 != v23);
        v19 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v25 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v25)
      {
        v26 = 80 * v25;
        v27 = v19 - 80;
        do
        {
          sub_22E5762C8((char **)&v27[v26]);
          v26 -= 80;
        }
        while (v26);
      }
LABEL_36:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F414368((char **)a1, (char **)a2);
  }
  return a1;
}

unint64_t sub_22F1625D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 80 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F4143E4(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F4143E4(a1);
    }
  }
  return v2;
}

char **sub_22F162638(char ***a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  char **v8;
  _BYTE *v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  uint64_t v14;
  char **v15;
  char **v16;
  __int128 v17;
  char **v18;

  v2 = 0x4EC4EC4EC4EC4EC5 * (a1[1] - *a1);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * (a1[2] - *a1) > v3)
    v3 = 0x9D89D89D89D89D8ALL * (a1[2] - *a1);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (a1[2] - *a1)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x276276276276276)
      sub_22E3B3F8C();
    v7 = operator new(104 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char **)&v7[13 * v2];
  *v8 = (char *)(v8 + 2);
  v8[1] = (char *)0x200000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F162838((uint64_t)&v7[13 * v2], (uint64_t *)a2);
  v9 = &v7[13 * v2 + 10];
  if (*(char *)(a2 + 103) < 0)
  {
    sub_22E3BB2B4(v9, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 80);
    v7[13 * v2 + 12] = *(_QWORD *)(a2 + 96);
  }
  v10 = (char **)&v7[13 * v6];
  v11 = v8 + 13;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v8[v14];
      v8[v14 - 13] = (char *)&v8[v14 - 11];
      v16 = &v12[v14];
      v8[v14 - 12] = (char *)0x200000000;
      if (LODWORD(v12[v14 - 12]))
        sub_22F1620B0((uint64_t)&v8[v14 - 13], (uint64_t)(v16 - 13));
      v17 = *(_OWORD *)(v16 - 3);
      *(v15 - 1) = *(v16 - 1);
      *(_OWORD *)(v15 - 3) = v17;
      *(v16 - 2) = 0;
      *(v16 - 1) = 0;
      *(v16 - 3) = 0;
      v14 -= 13;
    }
    while (&v12[v14] != v13);
    v12 = *a1;
    v18 = a1[1];
    *a1 = &v8[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v18 != v12)
    {
      if (*((char *)v18 - 1) < 0)
        operator delete(*(v18 - 3));
      v18 -= 13;
      sub_22E5762C8(v18);
    }
  }
  if (v12)
    operator delete(v12);
  return v8 + 13;
}

uint64_t sub_22F162838(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *a2;
        v11 = *a2 + 32 * v4;
        v12 = *(_QWORD *)a1;
        do
        {
          v13 = v10 + v9;
          std::string::operator=((std::string *)(v12 + v9), (const std::string *)(v10 + v9));
          *(_DWORD *)(v12 + v9 + 24) = *(_DWORD *)(v10 + v9 + 24);
          v9 += 32;
        }
        while (v13 + 32 != v11);
        v5 = *(unsigned int *)(a1 + 8);
        v14 = *(_QWORD *)a1;
        v15 = v12 + v9;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = *(_QWORD *)a1;
      }
      for (i = v14 + 32 * v5; i != v15; i -= 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(_QWORD *)a1;
        v18 = 32 * v5;
        do
        {
          if (*(char *)(v17 + v18 - 9) < 0)
            operator delete(*(void **)(v17 + v18 - 32));
          v18 -= 32;
        }
        while (v18);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F414240(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 32 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        std::string::operator=((std::string *)v8, (const std::string *)v6);
        *(_DWORD *)(v8 + 24) = *(_DWORD *)(v6 + 24);
        v6 += 32;
        v8 += 32;
      }
      while (v6 != v7);
LABEL_25:
      v19 = *((unsigned int *)a2 + 2);
      if (v5 != v19)
      {
        v20 = *a2;
        v21 = *(_QWORD *)a1;
        v22 = 32 * v5;
        v23 = 32 * v19;
        do
        {
          v24 = v21 + v22;
          v25 = (__int128 *)(v20 + v22);
          if (*(char *)(v20 + v22 + 23) < 0)
          {
            sub_22E3BB2B4((_BYTE *)v24, *(void **)v25, *((_QWORD *)v25 + 1));
          }
          else
          {
            v26 = *v25;
            *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v24 = v26;
          }
          *(_DWORD *)(v21 + v22 + 24) = *(_DWORD *)(v20 + v22 + 24);
          v21 += 32;
          v23 -= 32;
          v20 += 32;
        }
        while (v22 != v23);
      }
LABEL_31:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_25;
  }
  return a1;
}

char *sub_22F1629F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;

  v2 = (_QWORD *)(a1 + 2816);
  v3 = *(_QWORD **)(a1 + 2832);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 2840))
  {
    v4 = sub_22F16344C((char **)(a1 + 2824), v2);
  }
  else
  {
    *v3 = *v2;
    v4 = (char *)(v3 + 1);
  }
  *(_QWORD *)(a1 + 2832) = v4;
  return sub_22F162A44((char *)a1);
}

char *sub_22F162A44(char *result)
{
  char *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *((_QWORD *)result + 127);
  if (v2 || *((_QWORD *)result + 130) || *((_QWORD *)result + 133) == *((_QWORD *)result + 134))
  {
    v3 = result + 1048;
    v4 = (uint64_t *)(result + 1056);
    v5 = (uint64_t *)(result + 1008);
    v6 = (uint64_t *)(result + 1040);
    v7 = (__int128 *)(result + 1024);
    v8 = *((_QWORD *)result + 134);
    if (v8 >= *((_QWORD *)result + 135))
    {
      result = sub_22F163244((void **)result + 133, v3, v4, v5, (uint64_t *)result + 127, v6, v7);
    }
    else
    {
      v9 = *v4;
      v10 = *v7;
      *(_DWORD *)v8 = *v3;
      *(_QWORD *)(v8 + 8) = v9;
      v11 = *v5;
      *v5 = 0;
      *(_QWORD *)(v8 + 16) = v11;
      *(_QWORD *)(v8 + 24) = v2;
      v12 = *v6;
      *v6 = 0;
      *(_QWORD *)(v8 + 32) = v12;
      *(_OWORD *)(v8 + 40) = v10;
      result = (char *)(v8 + 56);
    }
    *((_QWORD *)v1 + 134) = result;
    *((_QWORD *)v1 + 127) = 0;
    *((_DWORD *)v1 + 262) = 2;
  }
  return result;
}

uint64_t sub_22F162AFC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(result + 2832);
  *(_QWORD *)(result + 2816) = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(result + 2832) = v1 - 8;
  v2 = *(_QWORD *)(result + 1008);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 224))
      v3 = 3;
    else
      v3 = 0;
  }
  else if (*(_QWORD *)(result + 1040))
  {
    v3 = 1;
  }
  else
  {
    v3 = 2;
  }
  *(_DWORD *)(result + 1048) = v3;
  return result;
}

uint64_t sub_22F162B44(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;

  if (!*(_QWORD *)(result + 1016))
  {
    v2 = result;
    if (!*(_QWORD *)(result + 1040) && *(_QWORD *)(result + 1064) != *(_QWORD *)(result + 1072))
    {
      v4 = *(_QWORD *)(result + 2816);
      if (v4 >= *(unsigned int *)(result + 2784))
      {
        v8 = (uint64_t *)(result + 1016);
        v9 = (uint64_t *)(result + 1040);
        sub_22F1754E8(result);
        result = sub_22F18FB4C(v2, a2);
        if (*(_QWORD *)(v2 + 2824) == *(_QWORD *)(v2 + 2832))
        {
          if (*(_QWORD *)(v2 + 2816) < (unint64_t)*(unsigned int *)(v2 + 2784))
          {
            result = (uint64_t)sub_22F1631D0(v2 + 1064, (_DWORD *)(v2 + 1048), (uint64_t *)(v2 + 1056), (uint64_t *)(v2 + 1008), (uint64_t *)(v2 + 1016), (uint64_t *)(v2 + 1040), (__int128 *)(v2 + 1024));
            *(_QWORD *)(v2 + 1016) = 0;
            *(_DWORD *)(v2 + 1048) = 2;
          }
          else
          {
            *(_DWORD *)(v2 + 2784) = 0;
            *(_QWORD *)(v2 + 2816) = 0;
          }
        }
        else
        {
          v10 = v2 + 2776;
          v11 = (_DWORD *)(v2 + 1048);
          v12 = (uint64_t *)(v2 + 1056);
          v13 = (uint64_t *)(v2 + 1008);
          v14 = (__int128 *)(v2 + 1024);
          v15 = *(_QWORD *)(v2 + 1072);
          if (v15 >= *(_QWORD *)(v2 + 1080))
          {
            v21 = sub_22F163244((void **)(v2 + 1064), v11, v12, v13, (uint64_t *)(v2 + 1016), (uint64_t *)(v2 + 1040), v14);
            v10 = v2 + 2776;
          }
          else
          {
            v16 = *v12;
            v17 = *v8;
            v18 = *v14;
            *(_DWORD *)v15 = *v11;
            *(_QWORD *)(v15 + 8) = v16;
            v19 = *v13;
            *v13 = 0;
            *(_QWORD *)(v15 + 16) = v19;
            *(_QWORD *)(v15 + 24) = v17;
            v20 = *v9;
            *v9 = 0;
            *(_QWORD *)(v15 + 32) = v20;
            *(_OWORD *)(v15 + 40) = v18;
            v21 = (char *)(v15 + 56);
          }
          *(_QWORD *)(v2 + 1072) = v21;
          *(_QWORD *)(v2 + 1016) = 0;
          *(_DWORD *)(v2 + 1048) = 2;
          result = sub_22E4EF088(v10, a2, 1);
          v22 = *(_QWORD *)(v2 + 2776) + 24 * *(unsigned int *)(v2 + 2784);
          v23 = *(_OWORD *)result;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(result + 16);
          *(_OWORD *)v22 = v23;
          ++*(_DWORD *)(v2 + 2784);
          ++*(_QWORD *)(v2 + 2816);
        }
      }
      else
      {
        *(_QWORD *)(result + 2816) = v4 + 1;
        v5 = *(_QWORD *)(result + 2776) + 24 * v4;
        v6 = *(_OWORD *)v5;
        v7 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(a2 + 16) = v7;
        *(_OWORD *)a2 = v6;
        *(_WORD *)(a2 + 18) = WORD1(v7) | 0x800;
      }
    }
  }
  return result;
}

uint64_t sub_22F162D2C(unint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v11[3];

  if (!*(_QWORD *)(a1 + 1016) && !*(_QWORD *)(a1 + 1040) && *(_QWORD *)(a1 + 1064) != *(_QWORD *)(a1 + 1072))
    sub_22F1754E8(a1);
  v4 = *(_QWORD *)(a1 + 2816) + a2;
  v5 = *(unsigned int *)(a1 + 2784);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    do
    {
      memset(v11, 0, sizeof(v11));
      v7 = sub_22E4EF088(a1 + 2776, (unint64_t)v11, 1);
      v8 = *(_QWORD *)(a1 + 2776) + 24 * *(unsigned int *)(a1 + 2784);
      v9 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = v9;
      LODWORD(v8) = *(_DWORD *)(a1 + 2784) + 1;
      *(_DWORD *)(a1 + 2784) = v8;
      sub_22F18FB4C(a1, (unsigned int *)(*(_QWORD *)(a1 + 2776) + 24 * v8 - 24));
      --v6;
    }
    while (v6);
  }
  sub_22F162A44((char *)a1);
  return *(_QWORD *)(a1 + 2776) + 24 * *(unsigned int *)(a1 + 2784) - 24;
}

__n128 sub_22F162E18(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 2816);
  if (v2)
  {
    v5 = *(_QWORD *)(a1 + 2776);
    v6 = v5;
    v7 = 24 * v2;
    v8 = *(_QWORD *)(a1 + 2816);
    while (1)
    {
      v9 = (char *)(v5 + v7);
      if (*(_DWORD *)(v5 + v7 - 24) == *(_DWORD *)a2)
        break;
      v7 -= 24;
      if (!--v8)
        return result;
    }
    v10 = (__n128 *)(v9 - 24);
    if (v8 < v2)
    {
      v11 = *(unsigned int *)(a1 + 2784);
      v12 = 24 * v11 - 24 * v2;
      if (v2 != v11)
      {
        memmove(v9, (const void *)(v5 + 24 * v2), 24 * v11 - 24 * v2);
        v6 = *(_QWORD *)(a1 + 2776);
      }
      *(_DWORD *)(a1 + 2784) = -1431655765 * ((unint64_t)(v5 + v7 + 24 * (v12 / 24) - v6) >> 3);
    }
    result = *(__n128 *)a2;
    v10[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
    *v10 = result;
    *(_QWORD *)(a1 + 2816) = v8;
  }
  return result;
}

uint64_t sub_22F162F18(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = a1[352];
  if (!v2)
    return 0;
  v3 = v2 - 1;
  v4 = a1[347];
  v5 = *(unsigned __int16 *)(v4 + 24 * v3 + 16);
  if (v5 != *((unsigned __int16 *)a2 + 8))
    return 0;
  v6 = *a2;
  if ((v5 - 399) > 0x28 || (v7 = *(_DWORD *)(v4 + 24 * v3 + 4)) == 0)
    v7 = *(_DWORD *)(v4 + 24 * v3);
  if ((v7 & 0x7FFFFFFF) == (v6 & 0x7FFFFFFF))
    return ((v6 & 0x7FFFFFFFu) < *(_DWORD *)(a1[11] + 220)) ^ ((v7 & 0x7FFFFFFFu) >= *(_DWORD *)(a1[11] + 220));
  else
    return 0;
}

void *sub_22F162FA4(uint64_t a1, _BYTE *__src, uint64_t a3)
{
  void *result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  _BYTE *v10;

  result = sub_22F163038(a1 + 2776, *(_QWORD *)(a1 + 2776) + 24 * *(_QWORD *)(a1 + 2816) - 24, __src, &__src[24 * a3]);
  v6 = *(_QWORD *)(a1 + 2776);
  v7 = *(_QWORD *)(a1 + 2816);
  v8 = (char *)(v6 + 24 * v7 + 24 * a3);
  v9 = *(_DWORD *)(a1 + 2784);
  v10 = (_BYTE *)(v6 + 24 * v9);
  if (v10 != v8)
  {
    result = memmove(v8 - 24, v8, v10 - v8);
    v9 = *(_DWORD *)(a1 + 2784);
    v7 = *(_QWORD *)(a1 + 2816);
  }
  *(_DWORD *)(a1 + 2784) = v9 - 1;
  *(_QWORD *)(a1 + 2816) = a3 + v7 - 1;
  return result;
}

__int128 *sub_22F163038(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _BYTE *v11;
  __int128 *v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;

  v5 = __src;
  v6 = *(_QWORD *)a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *(_QWORD *)a1) >> 3);
  v8 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 24 * v8 == a2)
  {
    v14 = (_QWORD *)a1;
    sub_22F16351C(a1, __src, a4);
    return (__int128 *)(*v14 + 24 * v7);
  }
  else
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((a4 - __src) >> 3);
    if (v9 + v8 > *(unsigned int *)(a1 + 12))
    {
      v15 = a1;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((a4 - __src) >> 3);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = v16;
      a1 = v15;
      v6 = *(_QWORD *)v15;
      v8 = *(unsigned int *)(v15 + 8);
    }
    v10 = (__int128 *)(v6 + 24 * v7);
    v11 = (_BYTE *)(v6 + 24 * v8);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v10) >> 3) < v9)
    {
      v17 = v8 + v9;
      *(_DWORD *)(a1 + 8) = v17;
      if (v7 != v8)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v10) >> 3);
        memcpy((void *)(v6 + 24 * v17 - 8 * ((v11 - (_BYTE *)v10) >> 3)), v10, v11 - (_BYTE *)v10);
        v19 = v10;
        do
        {
          v20 = *(_OWORD *)v5;
          *((_QWORD *)v19 + 2) = v5[2];
          *v19 = v20;
          v19 = (__int128 *)((char *)v19 + 24);
          v5 += 3;
          --v18;
        }
        while (v18);
      }
      if (v5 != (_QWORD *)a4)
        memcpy(v11, v5, a4 - (_BYTE *)v5);
    }
    else
    {
      v12 = (__int128 *)&v11[-24 * v9];
      sub_22F1635B8(a1, v12, (__int128 *)v11);
      if (v12 != v10)
        memmove(&v11[-((char *)v12 - (char *)v10)], v10, (char *)v12 - (char *)v10);
      if (v5 != (_QWORD *)a4)
        memmove(v10, v5, a4 - (_BYTE *)v5);
    }
  }
  return v10;
}

char *sub_22F1631D0(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, __int128 *a7)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8 >= *(_QWORD *)(a1 + 16))
  {
    v14 = sub_22F163244((void **)a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    v9 = *a3;
    v10 = *a5;
    v11 = *a7;
    *(_DWORD *)v8 = *a2;
    *(_QWORD *)(v8 + 8) = v9;
    v12 = *a4;
    *a4 = 0;
    *(_QWORD *)(v8 + 16) = v12;
    *(_QWORD *)(v8 + 24) = v10;
    v13 = *a6;
    *a6 = 0;
    *(_QWORD *)(v8 + 32) = v13;
    *(_OWORD *)(v8 + 40) = v11;
    v14 = (char *)(v8 + 56);
  }
  *(_QWORD *)(a1 + 8) = v14;
  return v14 - 56;
}

char *sub_22F163244(void **a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, __int128 *a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v7 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v8)
    v8 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v8;
  if (v10 > 0x492492492492492)
    sub_22E3B3F8C();
  v17 = 56 * v10;
  v18 = (char *)operator new(56 * v10);
  v19 = *a3;
  v20 = &v18[56 * v7];
  v21 = &v18[v17];
  v22 = *a5;
  *(_DWORD *)v20 = *a2;
  v23 = *a4;
  *((_QWORD *)v20 + 1) = v19;
  *((_QWORD *)v20 + 2) = v23;
  v24 = *a7;
  *a4 = 0;
  v25 = *a6;
  *a6 = 0;
  *((_QWORD *)v20 + 3) = v22;
  *((_QWORD *)v20 + 4) = v25;
  *(_OWORD *)(v20 + 40) = v24;
  v26 = v20 + 56;
  v28 = (char *)*a1;
  v27 = (char *)a1[1];
  if (v27 == *a1)
  {
    *a1 = v20;
    a1[1] = v26;
    a1[2] = v21;
  }
  else
  {
    v29 = 0;
    do
    {
      v30 = &v20[v29];
      v31 = &v27[v29];
      *(_OWORD *)(v30 - 56) = *(_OWORD *)&v27[v29 - 56];
      v32 = *(_OWORD *)&v27[v29 - 40];
      *((_QWORD *)v31 - 5) = 0;
      *(_OWORD *)(v30 - 40) = v32;
      v33 = *(_QWORD *)&v27[v29 - 24];
      *((_QWORD *)v31 - 3) = 0;
      *((_QWORD *)v30 - 3) = v33;
      *((_OWORD *)v30 - 1) = *(_OWORD *)&v27[v29 - 16];
      v29 -= 56;
    }
    while (&v27[v29] != v28);
    v27 = (char *)*a1;
    v34 = (char *)a1[1];
    *a1 = &v20[v29];
    a1[1] = v26;
    a1[2] = v21;
    while (v34 != v27)
    {
      v35 = *((_QWORD *)v34 - 3);
      *((_QWORD *)v34 - 3) = 0;
      if (v35)
      {
        v37 = v27;
        sub_22F192684(v35);
        MEMORY[0x2348A0E9C](v35, 0x1060C40B318AEC2);
        v27 = v37;
      }
      v36 = *((_QWORD *)v34 - 5);
      *((_QWORD *)v34 - 5) = 0;
      if (v36)
      {
        v38 = v27;
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v27 = v38;
      }
      v34 -= 56;
    }
  }
  if (v27)
    operator delete(v27);
  return v26;
}

char *sub_22F16344C(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_22E3B3F8C();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  *(_QWORD *)v11 = *a2;
  v12 = v11 + 8;
  while (v3 != v2)
  {
    v13 = *((_QWORD *)v3 - 1);
    v3 -= 8;
    *((_QWORD *)v11 - 1) = v13;
    v11 -= 8;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t sub_22F16351C(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a3 - __src) >> 3);
  v8 = *(unsigned int *)(result + 8);
  if (v7 + v8 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 24 * v8), __src, v6);
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v8 + v7;
  return result;
}

uint64_t sub_22F1635B8(uint64_t result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
  v4 = *(unsigned int *)(result + 8);
  if (v3 + v4 > *(unsigned int *)(result + 12))
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    LODWORD(v3) = v9;
    a3 = v7;
    result = v10;
    LODWORD(v4) = *(_DWORD *)(v10 + 8);
  }
  if (a2 != a3)
  {
    v5 = *(_QWORD *)result + 24 * v4;
    do
    {
      v6 = *a2;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v6;
      v5 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

uint64_t sub_22F163664(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a5;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v8, a3, a4, v9);
}

uint64_t sub_22F1636D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  v10 = a5;
  v11 = a6;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v9, a3, a4, v10, v11);
}

uint64_t sub_22F163750(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v22;

  v22 = a6;
  v16 = a2;
  v17 = a8;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v16, a3, a4, a5, v22, a7, v17, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_22F16381C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_22F163884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 240))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22F1638D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 256))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_22F16392C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = a3;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 272))(*(_QWORD *)(a1 + 16), a2, v5);
}

uint64_t sub_22F163980(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 280))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 280))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_22F1639DC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a3;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 344))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 344))(*(_QWORD *)(a1 + 16), v4, v5);
}

uint64_t sub_22F163A34(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a3;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 352))(*(_QWORD *)(a1 + 16), v4, v5);
}

BOOL sub_22F163A8C(_QWORD *a1, unint64_t a2)
{
  _BOOL8 result;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;

  result = 0;
  v4 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    v5 = a2;
    if ((_DWORD)a2)
    {
      v6 = (int *)a1[7];
      v7 = a1[8] - (_QWORD)v6;
      if (!v7)
        return 0;
      v8 = (_QWORD *)a1[1];
      v9 = v7 >> 3;
      do
      {
        v10 = &v6[2 * (v9 >> 1)];
        v12 = *v10;
        v11 = v10 + 2;
        v13 = sub_22F1E3C34(v8, v12, v5);
        if (v13)
          v9 += ~(v9 >> 1);
        else
          v9 >>= 1;
        if (v13)
          v6 = v11;
      }
      while (v9);
      if (v6 == (int *)a1[8] || sub_22F1E3C34((_QWORD *)a1[1], v4, *v6))
      {
        return 0;
      }
      else
      {
        v14 = a1[8] - (_QWORD)v6;
        if (v14)
        {
          v15 = (_QWORD *)a1[1];
          v16 = v14 >> 3;
          v17 = v6;
          do
          {
            v18 = &v17[2 * (v16 >> 1)];
            v20 = *v18;
            v19 = v18 + 2;
            if (sub_22F1E3C34(v15, v4, v20))
            {
              v16 >>= 1;
            }
            else
            {
              v17 = v19;
              v16 += ~(v16 >> 1);
            }
          }
          while (v16);
          if (v17 == (int *)a1[8])
            LODWORD(v14) = 0;
          else
            LODWORD(v14) = v17[1];
        }
        return v6[1] != (_DWORD)v14;
      }
    }
  }
  return result;
}

uint64_t sub_22F163BBC(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[4];
  __int16 v8;

  v2 = *(unsigned __int16 *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v2 | 0x20;
  ((void (*)(void))sub_22F18FB4C)();
  v3 = *(_WORD *)(a1 + 536) & 0xFFDF | (32 * ((v2 >> 5) & 1));
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | (32 * ((v2 >> 5) & 1));
  v4 = v7[0];
  if (v8 == 2)
  {
    v5 = v7[0];
  }
  else
  {
    do
    {
      *(_WORD *)(a1 + 536) = v3 | 0x20;
      sub_22F18FB4C(a1, v7);
      v3 = *(_WORD *)(a1 + 536) & 0xFFDF | (32 * ((v3 >> 5) & 1));
      *(_WORD *)(a1 + 536) = v3;
    }
    while (v8 != 2);
    v5 = v7[0];
  }
  return v4 | (v5 << 32);
}

uint64_t sub_22F163C5C(unint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  const char *v42;
  uint64_t v43;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  char **v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  int *v53;
  int v54;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  __int16 v61;
  _QWORD v62[3];
  __int16 v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  char v68;

  v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 2)
  {
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v7 + 316) = 1153;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v64 = (_BYTE *)(v7 + 320);
    v65 = 0;
    v66 = v7;
    v67 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v9 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v7 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
    }
LABEL_25:
    *(_DWORD *)(v7 + 776) = 0;
    sub_22E3BB0B8((uint64_t)&v64);
    return 1;
  }
  if ((v6 - 7) < 6
    || ((v6 - 13) >= 6 ? (v8 = v6 == 1) : (v8 = 1), v8 || (v16 = *(_QWORD *)(a2 + 8)) == 0))
  {
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v7 + 316) = 1150;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v64 = (_BYTE *)(v7 + 320);
    v65 = 0;
    v66 = v7;
    v67 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v12 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v7 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
    }
    goto LABEL_25;
  }
  if ((*(_BYTE *)(v16 + 3) & 0x40) != 0)
  {
    v19 = *(_QWORD *)(a1 + 48);
    if ((**(_QWORD **)(a1 + 56) & 0x20) != 0)
      v20 = 1232;
    else
      v20 = 1162;
    *(_DWORD *)(v19 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v19 + 316) = v20;
    if (*(char *)(v19 + 311) < 0)
    {
      **(_BYTE **)(v19 + 288) = 0;
      *(_QWORD *)(v19 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v19 + 288) = 0;
      *(_BYTE *)(v19 + 311) = 0;
    }
    v64 = (_BYTE *)(v19 + 320);
    v65 = 0;
    v66 = v19;
    v67 = 1;
    *(_BYTE *)(v19 + 320) = 0;
    *(_DWORD *)(v19 + 664) = 0;
    v21 = *(unsigned int *)(v19 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v19 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
      LODWORD(v21) = *(unsigned __int8 *)(v19 + 320);
    }
    *(_DWORD *)(v19 + 776) = 0;
    *(_BYTE *)(v19 + v21 + 321) = 5;
    v24 = v64;
    v25 = *v64;
    v26 = v25 + 1;
    *v64 = v25 + 1;
    *(_QWORD *)&v24[8 * v25 + 16] = v16;
    v27 = *(unsigned __int16 *)(a2 + 16);
    v24[v26 + 1] = 4;
    v28 = v64;
    v29 = *v64;
    *v64 = v29 + 1;
    *(_QWORD *)&v28[8 * v29 + 16] = v27;
    sub_22E3BB0B8((uint64_t)&v64);
  }
  if (!a3)
    goto LABEL_51;
  if (sub_22F1D32AC(v16) == 9)
  {
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v7 + 316) = 1032;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v64 = (_BYTE *)(v7 + 320);
    v65 = 0;
    v66 = v7;
    v67 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v33 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v33)
    {
      v34 = *(_QWORD *)(v7 + 768);
      v35 = 56 * v33;
      do
      {
        if (*(char *)(v34 + v35 - 9) < 0)
          operator delete(*(void **)(v34 + v35 - 32));
        v35 -= 56;
      }
      while (v35);
    }
    goto LABEL_25;
  }
  if (a3 == 2)
  {
    v30 = sub_22E6D7128(a1, (llvm *)v16);
    if (v30 && (*((_WORD *)v30 + 18) & 0x10) != 0)
    {
      v31 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v31 + 312) = *(_DWORD *)a2;
      *(_DWORD *)(v31 + 316) = 1234;
      if (*(char *)(v31 + 311) < 0)
      {
        **(_BYTE **)(v31 + 288) = 0;
        *(_QWORD *)(v31 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v31 + 288) = 0;
        *(_BYTE *)(v31 + 311) = 0;
      }
      v62[0] = v31 + 320;
      v62[1] = 0;
      v62[2] = v31;
      v63 = 1;
      *(_BYTE *)(v31 + 320) = 0;
      *(_DWORD *)(v31 + 664) = 0;
      v36 = *(unsigned int *)(v31 + 776);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(v31 + 768);
        v38 = 56 * v36;
        do
        {
          if (*(char *)(v37 + v38 - 9) < 0)
            operator delete(*(void **)(v37 + v38 - 32));
          v38 -= 56;
        }
        while (v38);
      }
      *(_DWORD *)(v31 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v62);
    }
    v32 = 1;
  }
  else
  {
LABEL_51:
    v32 = 0;
  }
  v39 = *(_DWORD *)a2;
  if (a4)
    *a4 = 0;
  v40 = sub_22F1E361C(*(_QWORD **)(a1 + 88), v39);
  if (v40 != 3 && v40 != 0)
    return 0;
  v42 = sub_22F1E3690(*(_QWORD **)(a1 + 88), v39, 0);
  if (v43 == 10 && *(_QWORD *)v42 == 0x692D746C6975623CLL && *((_WORD *)v42 + 4) == 15982)
    return 0;
  if (a3 != 1)
  {
    if (v32 && sub_22F1D31A0(v16, *(_QWORD *)(a1 + 56)) > 2)
    {
LABEL_93:
      v52 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v52 + 312) = *(_DWORD *)a2;
      *(_DWORD *)(v52 + 316) = 1342;
      if (*(char *)(v52 + 311) < 0)
      {
        **(_BYTE **)(v52 + 288) = 0;
        *(_QWORD *)(v52 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v52 + 288) = 0;
        *(_BYTE *)(v52 + 311) = 0;
      }
      v60[0] = v52 + 320;
      v60[1] = 0;
      v60[2] = v52;
      v61 = 1;
      *(_BYTE *)(v52 + 320) = 0;
      *(_DWORD *)(v52 + 664) = 0;
      v57 = *(unsigned int *)(v52 + 776);
      if ((_DWORD)v57)
      {
        v58 = *(_QWORD *)(v52 + 768);
        v59 = 56 * v57;
        do
        {
          if (*(char *)(v58 + v59 - 9) < 0)
            operator delete(*(void **)(v58 + v59 - 32));
          v59 -= 56;
        }
        while (v59);
      }
      *(_DWORD *)(v52 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v60);
      return 0;
    }
    return 0;
  }
  v45 = *(_QWORD *)(a1 + 56);
  if (sub_22F1D31A0(v16, v45) >= 3)
  {
    v46 = *(unsigned int **)(v16 + 16);
    v47 = *v46;
    v64 = v46 + 4;
    v65 = v47;
    v48 = &off_24FAC80E0;
    v49 = 29;
    do
    {
      v50 = (uint64_t)&v48[2 * (v49 >> 1)];
      v51 = sub_22E78C8FC((uint64_t)&v68, v50, (uint64_t)&v64);
      if (v51)
        v49 += ~(v49 >> 1);
      else
        v49 >>= 1;
      if (v51)
        v48 = (char **)(v50 + 16);
    }
    while (v49);
    if (v48 != off_24FAC82B0 && !sub_22E78C8FC((uint64_t)&v68, (uint64_t)&v64, (uint64_t)v48))
      return 0;
    goto LABEL_93;
  }
  v53 = *(int **)(v16 + 16);
  v54 = *v53;
  if (sub_22F1D2F98((_DWORD *)v16, (uint64_t *)v45))
  {
LABEL_96:
    if (a4)
    {
LABEL_97:
      result = 0;
      *a4 = 1;
      return result;
    }
    return 0;
  }
  if ((*(_BYTE *)(v45 + 1) & 2) == 0)
    return 0;
  if (v54 != 5)
  {
    if (v54 != 8 || *((_QWORD *)v53 + 2) != 0x656469727265766FLL)
      return 0;
    goto LABEL_96;
  }
  result = 0;
  v56 = v53[4] != 1634625894 || *((_BYTE *)v53 + 20) != 108;
  if (a4 && !v56)
    goto LABEL_97;
  return result;
}

uint64_t sub_22F164274(unint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  __int16 v8;
  uint64_t result;
  uint64_t v10;
  __int16 v11;

  v8 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v8 | 0x20;
  sub_22F18FB4C(a1, a2);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8 & 0x20;
  if (*(_WORD *)(a2 + 16) == 3)
  {
    v10 = *(_QWORD *)(a1 + 744);
    if (v10)
      (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v10 + 32))(v10, a3 == 1);
    *(_BYTE *)(a1 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 6) = 1;
    v11 = *(_WORD *)(a1 + 536);
    *(_WORD *)(a1 + 536) = v11 | 0x20;
    sub_22F18FB4C(a1, a2);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v11 & 0x20;
  }
  result = sub_22F163C5C(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (*(_WORD *)(a2 + 16) != 2)
    {
      *(_WORD *)(a2 + 16) = 2;
      return sub_22F163BBC(a1);
    }
  }
  return result;
}

unint64_t sub_22F16437C(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  char v15;
  _BYTE v16[12];
  void *__p;
  uint64_t v18;
  _QWORD v19[2];
  _DWORD v20[4];
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    goto LABEL_3;
  sub_22F18FB4C(a1, v20);
  while (v21 == 4)
  {
LABEL_3:
    v5 = *(_WORD *)(a1 + 536);
    *(_WORD *)(a1 + 536) = v5 | 0x20;
    sub_22F18FB4C(a1, v20);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v5 & 0x20;
  }
  if (v21 == 2)
    return v20[0];
  v15 = 0;
  v14 = 0;
  *(_QWORD *)&v16[3] = 0;
  v16[11] = 0;
  v18 = 0;
  memset(v19, 0, 9);
  __p = 0;
  if ((**(_DWORD **)(a1 + 56) & 0x80000101) != 0)
  {
    v7 = v20[0];
    if (!*(_QWORD *)(a1 + 1040))
    {
      *(_QWORD *)((char *)&v22 + 3) = 0;
      BYTE11(v22) = 0;
      v14 = v20[0] | ((unint64_t)v20[0] << 32);
      v15 = 0;
      *(_QWORD *)v16 = v22;
      *(_DWORD *)&v16[8] = 0;
      __p = (void *)12079;
      *(_WORD *)((char *)v19 + 7) = 2;
    }
  }
  else
  {
    v7 = v20[0];
  }
  v8 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v8 + 312) = v7;
  *(_DWORD *)(v8 + 316) = 1223;
  if (*(char *)(v8 + 311) < 0)
  {
    **(_BYTE **)(v8 + 288) = 0;
    *(_QWORD *)(v8 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 311) = 0;
  }
  v9 = (unsigned __int8 *)(v8 + 320);
  v22 = (unint64_t)(v8 + 320);
  v23 = v8;
  v24 = 1;
  *(_BYTE *)(v8 + 320) = 0;
  *(_DWORD *)(v8 + 664) = 0;
  v10 = *(unsigned int *)(v8 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v8 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
    LODWORD(v10) = *v9;
  }
  *(_DWORD *)(v8 + 776) = 0;
  v9[v10 + 1] = 1;
  *(_BYTE *)(v8 + 320) = v10 + 1;
  *(_QWORD *)&v9[8 * v10 + 16] = a2;
  sub_22E6D82D0((uint64_t *)&v22, &v14);
  sub_22E3BB0B8((uint64_t)&v22);
  v6 = (unint64_t)sub_22F163BBC(a1) >> 32;
  if (SHIBYTE(v19[0]) < 0)
    operator delete(__p);
  return v6;
}

void sub_22F164590(unint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  __int16 v28;
  _BYTE *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  size_t v34;
  __int128 *p_p;
  int v36;
  unsigned __int16 *v37;
  int v38;
  int v40;
  int v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v52;
  int v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  llvm *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(void);
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  char v112;
  char v113;
  uint64_t v115;
  uint64_t v116[2];
  uint64_t v117;
  __int128 __p;
  uint64_t v119;
  __int16 v120;
  _QWORD v121[3];
  __int16 v122;
  unint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  unsigned int v126;
  unsigned int v127;
  _BYTE *v128;
  __int16 v129;
  __int16 v130;
  _BYTE __dst[20];
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 *)(a1 + 2856);
  *(_BYTE *)(a1 + 2856) = 1;
  ++*(_DWORD *)(a1 + 2236);
  v112 = a4;
  v113 = a5;
  if (*(_BYTE *)(a1 + 944))
  {
    *(_BYTE *)(a1 + 944) = 0;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 1016);
    v12 = a3;
    v13 = *(_DWORD *)(v11 + 72);
    if (v13 >= *(_DWORD *)(v11 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(v11 + 72);
    }
    v14 = 0x1000000000000;
    if (!a5)
      v14 = 0;
    v15 = 0x10000000000;
    if (!a4)
      v15 = 0;
    *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * v13) = v15 | v12 | v14;
    ++*(_DWORD *)(v11 + 72);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 1;
  v124 = 0;
  v125 = 0;
  v123 = a1;
  while (1)
  {
    v16 = *(_QWORD *)(a1 + 1008);
    if (*(_QWORD *)(v16 + 224))
      break;
    if (!v124)
    {
      v124 = *(_QWORD *)(*(_QWORD *)(v123 + 1008) + 184);
      v18 = sub_22E7448C8((_DWORD *)(v123 + 2864), &v124);
      v20 = *((_DWORD *)v18 + 2);
      v19 = v20;
      v125 = v18 + 1;
      if (v20)
      {
        v21 = *(_QWORD *)(v123 + 1008);
        v22 = *(_QWORD *)(v21 + 144);
        v23 = (v19 + *(_DWORD *)(v21 + 184) - v22);
        *(_WORD *)(v21 + 192) = 257;
        *(_QWORD *)(v21 + 184) = v22 + v23;
      }
    }
    do
    {
      while (1)
      {
        while (1)
        {
          sub_22F14651C(*(_QWORD *)(a1 + 1008), &v126);
          if (v129 != 3)
            break;
          *(_BYTE *)(a1 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + 6) = 1;
          v24 = *(_QWORD *)(a1 + 744);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
        }
        if (v129 == 66)
          break;
        if (v129 == 1)
        {
          if (*(_DWORD *)(a1 + 1000) == 1)
          {
            v110 = 0;
            *(_DWORD *)(a1 + 928) = a2;
            *(_DWORD *)(a1 + 932) = a3;
            *(_BYTE *)(a1 + 936) = v112;
            *(_BYTE *)(a1 + 937) = v113;
            *(_DWORD *)(a1 + 940) = a6;
            *(_BYTE *)(a1 + 944) = 1;
            goto LABEL_204;
          }
          goto LABEL_203;
        }
      }
    }
    while ((v130 & 1) == 0);
    v17 = *(_BYTE **)(a1 + 1016);
LABEL_25:
    v17[24] = 1;
    v25 = *(_QWORD *)(a1 + 1008);
    if (v25)
      *(_BYTE *)(v25 + 178) = 0;
    v26 = *(_QWORD *)(v25 + 184);
    v27 = v127;
    v28 = *(_WORD *)(a1 + 536);
    *(_WORD *)(a1 + 536) = v28 | 0x20;
    sub_22F18FB4C(a1, &v126);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v28 & 0x20;
    if (v129 != 6)
      goto LABEL_164;
    v29 = v128;
    v30 = v127;
    if ((*v128 - 97) <= 0x19u)
    {
      v31 = *v128;
      if (v31 != 101 && v31 != 105)
        goto LABEL_164;
    }
    if ((v130 & 8) != 0 || v127 >= 0x14)
    {
      v115 = a2;
      v32 = v8;
      sub_22F1413E0((uint64_t)&v126, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), 0, (uint64_t)&__p);
      v33 = SHIBYTE(v119);
      v34 = v119 >= 0 ? HIBYTE(v119) & 0x7F : *((_QWORD *)&__p + 1);
      if (v34 >= 0x14)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 24) = 0;
        v46 = *(_QWORD *)(a1 + 1008);
        if (v46)
        {
          if ((*(_QWORD *)(*(_QWORD *)(v46 + 168) + 8) & 0x4000000000000) != 0)
            v47 = 2;
          else
            v47 = *(_BYTE *)(*(_QWORD *)(v46 + 8) + 536) & 1;
          v29 = 0;
          v30 = 0;
          *(_BYTE *)(v46 + 178) = v47;
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
        v36 = 2;
        if (v33 < 0)
LABEL_41:
          operator delete((void *)__p);
      }
      else
      {
        if (v119 >= 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        v29 = __dst;
        memcpy(__dst, p_p, v34);
        v36 = 0;
        v30 = v34;
        if (v33 < 0)
          goto LABEL_41;
      }
      v8 = v32;
      a2 = v115;
      if (v34 > 0x13)
      {
LABEL_184:
        if (!v36 || v36 == 2)
          continue;
        if (v36 != 3)
          goto LABEL_208;
LABEL_203:
        v110 = 0;
        goto LABEL_204;
      }
    }
    if (v30 < 2 || *(_WORD *)v29 != 26217)
    {
      if (*v29 != 101)
        goto LABEL_164;
      if (v30)
        v37 = (unsigned __int16 *)(v29 + 1);
      else
        v37 = (unsigned __int16 *)v29;
      v38 = v26 - v27;
      switch(v30 - (v30 != 0))
      {
        case 3uLL:
          if (*v37 != 29548 || *((_BYTE *)v37 + 2) != 101)
          {
            v40 = *v37;
            v41 = *((unsigned __int8 *)v37 + 2);
            if (v40 != 26988 || v41 != 102)
              goto LABEL_164;
            v43 = *(_QWORD *)(*(_QWORD *)(a1 + 1016) + 64) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 72);
            v44 = *(unsigned __int8 *)(v43 - 4);
            if (!*(_BYTE *)(v43 - 4) && v124)
            {
              if (!*v125)
                *v125 = v38 - v124;
              v124 = 0;
              v125 = 0;
            }
            if (*(_BYTE *)(v43 - 2))
            {
              v45 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v45 + 312) = v126;
              *(_DWORD *)(v45 + 316) = 1264;
              if (*(char *)(v45 + 311) < 0)
              {
                **(_BYTE **)(v45 + 288) = 0;
                *(_QWORD *)(v45 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v45 + 288) = 0;
                *(_BYTE *)(v45 + 311) = 0;
              }
              v84 = (unsigned __int8 *)(v45 + 320);
              __p = (unint64_t)(v45 + 320);
              v119 = v45;
              v120 = 1;
              *(_BYTE *)(v45 + 320) = 0;
              *(_DWORD *)(v45 + 664) = 0;
              v85 = *(unsigned int *)(v45 + 776);
              if ((_DWORD)v85)
              {
                v86 = a2;
                v87 = v8;
                v88 = *(_QWORD *)(v45 + 768);
                v89 = 56 * v85;
                do
                {
                  if (*(char *)(v88 + v89 - 9) < 0)
                    operator delete(*(void **)(v88 + v89 - 32));
                  v89 -= 56;
                }
                while (v89);
                v84 = (unsigned __int8 *)__p;
                *(_DWORD *)(v45 + 776) = 0;
                v8 = v87;
                a2 = v86;
                if (!v84)
                {
                  v84 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&__p + 1));
                  *(_QWORD *)&__p = v84;
                }
              }
              else
              {
                *(_DWORD *)(v45 + 776) = 0;
              }
              v84[*v84 + 1] = 2;
              v90 = __p;
              v91 = *(unsigned __int8 *)__p;
              *(_BYTE *)__p = v91 + 1;
              *(_QWORD *)(v90 + 8 * v91 + 16) = 0;
              sub_22E3BB0B8((uint64_t)&__p);
              v44 = *(unsigned __int8 *)(v43 - 4);
            }
            if (v44 || *(_BYTE *)(v43 - 3))
            {
LABEL_163:
              sub_22F163BBC(a1);
              goto LABEL_164;
            }
            *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 0;
            v116[0] = 0;
            v94 = sub_22F16F408(a1, v116);
            *(_QWORD *)&__p = v94;
            DWORD2(__p) = v95;
            v96 = *(_QWORD *)(a1 + 1016);
            if (!v96)
            {
              v36 = 1;
              goto LABEL_184;
            }
            v97 = v94;
            *(_BYTE *)(v96 + 26) = 1;
            v98 = *(_QWORD *)(a1 + 1088);
            if (v98)
            {
              if ((v97 & 1) != 0)
                v99 = 2;
              else
                v99 = 1;
              (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v98 + 288))(v98, v126, *(_QWORD *)((char *)&__p + 4), v99, *(unsigned int *)(v43 - 8));
            }
            if ((v97 & 1) != 0)
            {
              *(_BYTE *)(v43 - 3) = 1;
              v36 = 3;
              goto LABEL_184;
            }
            goto LABEL_164;
          }
          v65 = *(_QWORD *)(*(_QWORD *)(a1 + 1016) + 64) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 72);
          v66 = *(unsigned __int8 *)(v65 - 4);
          if (!*(_BYTE *)(v65 - 4) && v124)
          {
            if (!*v125)
              *v125 = v38 - v124;
            v124 = 0;
            v125 = 0;
          }
          if (*(_BYTE *)(v65 - 2))
          {
            v67 = a2;
            v68 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v68 + 312) = v126;
            *(_DWORD *)(v68 + 316) = 1266;
            v69 = v8;
            if (*(char *)(v68 + 311) < 0)
            {
              **(_BYTE **)(v68 + 288) = 0;
              *(_QWORD *)(v68 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v68 + 288) = 0;
              *(_BYTE *)(v68 + 311) = 0;
            }
            v121[0] = v68 + 320;
            v121[1] = 0;
            v121[2] = v68;
            v122 = 1;
            *(_BYTE *)(v68 + 320) = 0;
            *(_DWORD *)(v68 + 664) = 0;
            v81 = *(unsigned int *)(v68 + 776);
            if ((_DWORD)v81)
            {
              v82 = *(_QWORD *)(v68 + 768);
              v83 = 56 * v81;
              do
              {
                if (*(char *)(v82 + v83 - 9) < 0)
                  operator delete(*(void **)(v82 + v83 - 32));
                v83 -= 56;
              }
              while (v83);
            }
            *(_DWORD *)(v68 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v121);
            v66 = *(unsigned __int8 *)(v65 - 4);
            v8 = v69;
            a2 = v67;
          }
          *(_BYTE *)(v65 - 2) = 1;
          if (v66 || *(_BYTE *)(v65 - 3))
            goto LABEL_163;
          *(_BYTE *)(v65 - 3) = 1;
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 0;
          v108 = sub_22F16437C(a1, (uint64_t)"else", 0);
          v110 = v108;
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 1;
          v109 = *(_QWORD *)(a1 + 1088);
          if (v109)
          {
            v107 = *(void (**)(void))(*(_QWORD *)v109 + 344);
LABEL_217:
            v107();
          }
          goto LABEL_204;
        case 4uLL:
          if (*(_DWORD *)v37 != 1718183022)
            goto LABEL_164;
          v56 = *(_QWORD *)(a1 + 1016);
          v57 = *(unsigned int *)(v56 + 72);
          if (!(_DWORD)v57)
            goto LABEL_163;
          v58 = *(_QWORD *)(*(_QWORD *)(v56 + 64) + 8 * v57 - 8);
          *(_DWORD *)(v56 + 72) = v57 - 1;
          if ((v58 & 0xFF00000000) != 0)
            goto LABEL_163;
          if (v124)
          {
            if (!*v125)
              *v125 = v38 - v124;
            v124 = 0;
            v125 = 0;
          }
          *(_BYTE *)(v56 + 26) = 0;
          v110 = sub_22F16437C(a1, (uint64_t)"endif", 0);
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 1;
          v106 = *(_QWORD *)(a1 + 1088);
          if (!v106)
            goto LABEL_204;
          v107 = *(void (**)(void))(*(_QWORD *)v106 + 352);
          goto LABEL_217;
        case 6uLL:
          v52 = *(_DWORD *)v37;
          v53 = v37[2];
          if (v52 != 1684433260 || v53 != 26213)
            goto LABEL_164;
          v55 = 1;
          goto LABEL_102;
        case 7uLL:
          v59 = *(_DWORD *)v37;
          v60 = *(_DWORD *)((char *)v37 + 3);
          if (v59 != 1852205420 || v60 != 1717920878)
            goto LABEL_164;
          v55 = 0;
LABEL_102:
          v62 = *(_QWORD *)(*(_QWORD *)(a1 + 1016) + 64) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 72);
          v63 = *(unsigned __int8 *)(v62 - 4);
          if (!*(_BYTE *)(v62 - 4) && v124)
          {
            if (!*v125)
              *v125 = v38 - v124;
            v124 = 0;
            v125 = 0;
          }
          if (*(_BYTE *)(v62 - 2))
          {
            v64 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v64 + 312) = v126;
            *(_DWORD *)(v64 + 316) = 1264;
            if (*(char *)(v64 + 311) < 0)
            {
              **(_BYTE **)(v64 + 288) = 0;
              *(_QWORD *)(v64 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v64 + 288) = 0;
              *(_BYTE *)(v64 + 311) = 0;
            }
            v70 = (unsigned __int8 *)(v64 + 320);
            __p = (unint64_t)(v64 + 320);
            v119 = v64;
            v120 = 1;
            *(_BYTE *)(v64 + 320) = 0;
            *(_DWORD *)(v64 + 664) = 0;
            v71 = *(unsigned int *)(v64 + 776);
            if ((_DWORD)v71)
            {
              v72 = a2;
              v73 = v8;
              v74 = *(_QWORD *)(v64 + 768);
              v75 = 56 * v71;
              do
              {
                if (*(char *)(v74 + v75 - 9) < 0)
                  operator delete(*(void **)(v74 + v75 - 32));
                v75 -= 56;
              }
              while (v75);
              v70 = (unsigned __int8 *)__p;
              *(_DWORD *)(v64 + 776) = 0;
              v8 = v73;
              a2 = v72;
              if (!v70)
              {
                v70 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&__p + 1));
                *(_QWORD *)&__p = v70;
              }
            }
            else
            {
              *(_DWORD *)(v64 + 776) = 0;
            }
            if (v55)
              v76 = 1;
            else
              v76 = 2;
            v70[*v70 + 1] = 2;
            v77 = __p;
            v78 = *(unsigned __int8 *)__p;
            *(_BYTE *)__p = v78 + 1;
            *(_QWORD *)(v77 + 8 * v78 + 16) = v76;
            sub_22E3BB0B8((uint64_t)&__p);
            v63 = *(unsigned __int8 *)(v62 - 4);
          }
          if (v63 || *(_BYTE *)(v62 - 3))
            goto LABEL_163;
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 0;
          sub_22F164274(a1, (uint64_t)&__p, 0, 0);
          *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 26) = 1;
          if ((unsigned __int16)v119 == 2)
            continue;
          sub_22F165190(a1, (uint64_t)&__p);
          if (v55)
            v79 = "elifdef";
          else
            v79 = "elifndef";
          sub_22F16437C(a1, (uint64_t)v79, 0);
          if ((unsigned __int16)v119 - 7 >= 6)
          {
            v80 = 0;
            if ((unsigned __int16)v119 - 13 >= 6 && (unsigned __int16)v119 != 1)
              v80 = (llvm *)*((_QWORD *)&__p + 1);
          }
          else
          {
            v80 = 0;
          }
          sub_22E6D719C(a1, v80, v116);
          if (v117)
          {
            v100 = (uint64_t *)(*(_QWORD *)(v116[1] + 8 * v117 - 8) + 16);
          }
          else
          {
            if ((v116[0] & 0xFFFFFFFFFFFFFFF8) == 0
              || (v102 = sub_22F14FEA4((uint64_t *)(v116[0] & 0xFFFFFFFFFFFFFFF8))) == 0)
            {
              v101 = 0;
LABEL_188:
              v103 = *(_QWORD **)(a1 + 1088);
              if (v103)
              {
                v104 = 328;
                if (v55)
                  v104 = 304;
                (*(void (**)(void))(*v103 + v104))();
              }
              if (((v55 ^ (v101 == 0)) & 1) == 0)
                goto LABEL_164;
              v110 = 0;
              *(_BYTE *)(v62 - 3) = 1;
LABEL_204:
              v17 = *(_BYTE **)(a1 + 1016);
              v17[26] = 0;
              v105 = *(_QWORD *)(a1 + 1088);
              if (!v105)
                goto LABEL_208;
              if (v110)
              {
LABEL_207:
                (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v105 + 272))(v105, a2 | ((unint64_t)v110 << 32), v126);
                goto LABEL_208;
              }
LABEL_206:
              v110 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v17 + 32))(v17);
              goto LABEL_207;
            }
            v100 = v102 + 2;
          }
          v101 = *v100;
          goto LABEL_188;
        default:
          goto LABEL_164;
      }
    }
    if (v30 >= 3)
    {
      if (v30 == 6)
      {
        if (*(_DWORD *)(v29 + 2) != 1717920878)
          goto LABEL_164;
      }
      else
      {
        if (v30 != 5)
          goto LABEL_164;
        if (*((_WORD *)v29 + 1) != 25956 || v29[4] != 102)
          goto LABEL_164;
      }
    }
    sub_22F163BBC(a1);
    v48 = *(_QWORD *)(a1 + 1016);
    v49 = v126;
    v50 = *(unsigned int *)(v48 + 72);
    if (v50 >= *(unsigned int *)(v48 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = *(unsigned int *)(v48 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(v48 + 64) + 8 * v50) = v49 | 0x100000000;
    ++*(_DWORD *)(v48 + 72);
LABEL_164:
    *(_BYTE *)(*(_QWORD *)(a1 + 1016) + 24) = 0;
    v92 = *(_QWORD *)(a1 + 1008);
    if (v92)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v92 + 168) + 8) & 0x4000000000000) != 0)
        v93 = 2;
      else
        v93 = *(_BYTE *)(*(_QWORD *)(v92 + 8) + 536) & 1;
      *(_BYTE *)(v92 + 178) = v93;
    }
  }
  sub_22F149680(v16, (uint64_t)&v126);
  v17 = *(_BYTE **)(a1 + 1016);
  if (v129 != 1)
    goto LABEL_25;
  v17[26] = 0;
  v105 = *(_QWORD *)(a1 + 1088);
  if (v105)
    goto LABEL_206;
LABEL_208:
  *(_BYTE *)(a1 + 2856) = v8;
}

uint64_t sub_22F165190(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 4) & 0x40) != 0)
  {
    v3 = a2;
    v5 = result;
    sub_22F19096C(result, a2);
    a2 = v3;
    result = v5;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 4) & 0x80) != 0)
  {
    v4 = a2;
    v6 = result;
    v2 = sub_22F1E3734(*(_QWORD **)(result + 88), *(_DWORD *)a2);
    result = v6;
    if ((v2 & 1) == 0)
      return sub_22F190CA0(v6, v4);
  }
  return result;
}

unint64_t sub_22F165200(_QWORD *a1, unsigned int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v2 = a2;
  v4 = a2;
  if ((sub_22F1E3734((_QWORD *)a1[11], a2) & 1) == 0)
  {
    v5 = a1[11];
    if (v2 < 0)
      v2 = sub_22F1E22F0((_QWORD *)a1[11], v4);
    v6 = v2 & 0x7FFFFFFF;
    v7 = *(_DWORD *)(v5 + 304);
    v8 = v7 + 1;
    if (v7 + 1 > 1)
    {
      if ((v7 & 0x80000000) != 0)
      {
        v12 = -2 - v7;
        v9 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * ((-2 - v7) >> 6)) >> (-2 - v7)) & 1) != 0
                      ? *(_QWORD *)(v5 + 200) + 24 * v12
                      : sub_22F1E1134(v5, v12, 0));
      }
      else
      {
        v9 = (_DWORD *)(*(_QWORD *)(v5 + 184) + 24 * v7);
      }
    }
    else
    {
      v9 = *(_DWORD **)(v5 + 184);
    }
    if ((*v9 & 0x7FFFFFFFu) > v6)
      goto LABEL_7;
    if (v7 == -2
      || (v8 != *(_DWORD *)(v5 + 192)
        ? ((v8 & 0x80000000) != 0
         ? ((v24 = -3 - v7,
             ((*(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * ((-3 - v7) >> 6)) >> (-3 - v7)) & 1) == 0)
          ? (v13 = (_DWORD *)sub_22F1E1134(v5, v24, 0))
          : (v13 = (_DWORD *)(*(_QWORD *)(v5 + 200) + 24 * v24)))
         : (v13 = (_DWORD *)(*(_QWORD *)(v5 + 184) + 24 * v8)),
           v11 = *v13 & 0x7FFFFFFF)
        : (v11 = *(_DWORD *)(v5 + 216)),
          v11 > v6))
    {
      v10 = *(_DWORD *)(v5 + 304);
    }
    else
    {
LABEL_7:
      v10 = sub_22F1E1EE8(v5, v6);
    }
    v14 = sub_22E6155EC((_QWORD *)a1[11], v10);
    if (v14)
      return sub_22F152624(a1[13] + 488, v14, 0, 0) & 0xFFFFFFFFFFFFFFF8;
  }
  v15 = a1[7];
  v16 = *(unsigned __int8 *)(v15 + 519);
  if (*(char *)(v15 + 519) < 0)
    v17 = *(_QWORD *)(v15 + 504);
  else
    v17 = *(unsigned __int8 *)(v15 + 519);
  if (!v17)
    return 0;
  v19 = v15 + 496;
  v21 = *(_QWORD *)(v15 + 496);
  v20 = *(_QWORD *)(v15 + 504);
  if ((v16 & 0x80u) == 0)
    v22 = v19;
  else
    v22 = v21;
  if ((v16 & 0x80u) == 0)
    v23 = v16;
  else
    v23 = v20;
  return sub_22F138980(a1[13], v22, v23, v4, 1, 0);
}

uint64_t sub_22F1653F8(_QWORD *a1, unsigned int a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v5 = sub_22F165200(a1, a2);
  if (!a3)
    return 0;
  v6 = v5;
  v7 = a1[11];
  while (1)
  {
    v8 = a3;
    if ((sub_22F1E3734((_QWORD *)v7, a3) & 1) != 0)
      return 0;
    if (a3 < 0)
      a3 = sub_22F1E22F0((_QWORD *)v7, a3);
    v9 = *(_DWORD *)(v7 + 304);
    v10 = v9 + 1;
    if (v9 + 1 > 1)
    {
      if ((v9 & 0x80000000) != 0)
      {
        v12 = -2 - v9;
        if (((*(_QWORD *)(*(_QWORD *)(v7 + 224) + 8 * ((-2 - v9) >> 6)) >> (-2 - v9)) & 1) != 0)
          v11 = (_DWORD *)(*(_QWORD *)(v7 + 200) + 24 * v12);
        else
          v11 = (_DWORD *)sub_22F1E1134(v7, v12, 0);
      }
      else
      {
        v11 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 24 * v9);
      }
    }
    else
    {
      v11 = *(_DWORD **)(v7 + 184);
    }
    v13 = a3 & 0x7FFFFFFF;
    if ((*v11 & 0x7FFFFFFFu) <= v13
      && (v9 == -2
       || (v10 != *(_DWORD *)(v7 + 192)
         ? ((v10 & 0x80000000) != 0
          ? ((v17 = -3 - v9,
              ((*(_QWORD *)(*(_QWORD *)(v7 + 224) + 8 * ((-3 - v9) >> 6)) >> (-3 - v9)) & 1) == 0)
           ? (v16 = (_DWORD *)sub_22F1E1134(v7, v17, 0))
           : (v16 = (_DWORD *)(*(_QWORD *)(v7 + 200) + 24 * v17)))
          : (v16 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 24 * v10)),
            v15 = *v16 & 0x7FFFFFFF)
         : (v15 = *(_DWORD *)(v7 + 216)),
           v15 > v13)))
    {
      v14 = *(_DWORD *)(v7 + 304);
    }
    else
    {
      v14 = sub_22F1E1EE8(v7, v13);
    }
    v18 = v14;
    v19 = sub_22E6155EC((_QWORD *)v7, v14);
    v20 = v19;
    if (!v19)
      return v20;
    v21 = (uint64_t *)a1[13];
    v22 = *(_QWORD *)(v19 + 88);
    do
    {
      v23 = (uint64_t *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      if ((v24 & 2) == 0)
        break;
      v22 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v22);
    v27 = *v23;
    v25 = (uint64_t)(v23 + 4);
    v26 = v27;
    v28 = sub_22F1E361C((_QWORD *)a1[11], v8);
    v29 = !v28 || v28 == 3;
    v30 = !v29;
    sub_22F13C32C(v21, v25, v26, 0, v30);
    v31 = (uint64_t *)sub_22F40F630((_QWORD *)a1[13], v20);
    if (v32)
      break;
LABEL_52:
    if ((sub_22F13C1A0((_QWORD *)a1[13], v20) & 1) != 0)
      return v20;
    v43 = sub_22E49F3DC((_QWORD *)v7, v18);
    if (v43)
    {
      a3 = v43[2];
      if (a3)
        continue;
    }
    return 0;
  }
  v33 = 0;
  v34 = &v31[v32];
  while (1)
  {
    v35 = *v31;
    if ((*v31 & 1) == 0)
      break;
    if (v6)
    {
      v39 = v6;
      do
      {
        v40 = v39;
        v39 = *(_QWORD *)(v39 + 32);
      }
      while (v39);
      v41 = v35 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v42 = v41;
        v41 = *(_QWORD *)(v41 + 32);
      }
      while (v41);
      if (v40 == v42)
        break;
    }
    v33 = 1;
LABEL_50:
    if (++v31 == v34)
    {
      if ((v33 & 1) != 0)
        return 0;
      goto LABEL_52;
    }
  }
  v36 = v35 & 7;
  v37 = v35 & 2;
  if (v36 == 4 || v37 != 0)
    goto LABEL_50;
  v44 = a1[7];
  if ((*(_BYTE *)(v44 + 1) & 0x40) != 0)
    return 0;
  v45 = *(_QWORD *)(v44 + 20);
  if ((v45 & 0x800000000000) != 0)
    return 0;
  if ((v45 & 0x400000000000) != 0)
    return 0;
  return v20;
}

unint64_t sub_22F16569C(uint64_t a1, unsigned int a2, void *a3, size_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, _QWORD *a11, unint64_t *a12, _BYTE *a13, _BYTE *a14, char a15)
{
  _QWORD *v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  _QWORD *v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  int v34;
  unint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned __int8 v88;
  uint64_t *v89;
  _QWORD v91[2];
  uint64_t v92[4];
  void *v93;
  uint64_t v94;
  _QWORD v95[34];

  v20 = a11;
  v22 = a9;
  v23 = a10;
  v95[32] = *MEMORY[0x24BDAC8D0];
  if (!a9)
    v22 = v91;
  v89 = v22;
  v24 = a2;
  v91[0] = 0;
  v91[1] = 0;
  v25 = (uint64_t *)sub_22F165200((_QWORD *)a1, a2);
  v84 = sub_22F1E3734(*(_QWORD **)(a1 + 88), v24);
  v26 = 0;
  v93 = v95;
  v94 = 0x1000000000;
  v86 = a6;
  if (a6)
  {
    v27 = v95;
    goto LABEL_39;
  }
  v27 = v95;
  if (a8)
    goto LABEL_39;
  v28 = *(_DWORD *)(sub_22F172F28((_QWORD *)a1) + 16);
  v29 = sub_22E6155EC(*(_QWORD **)(a1 + 88), v28);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)(v29 + 40);
    v32 = v94;
    v33 = v95;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v32 = v94;
    }
    LOBYTE(v34) = 0;
    v35 = (unint64_t *)((char *)v93 + 16 * v32);
    *v35 = v30;
    v35[1] = v31;
LABEL_19:
    LODWORD(v94) = v94 + 1;
    goto LABEL_20;
  }
  v36 = *(_QWORD *)(a1 + 88);
  v37 = *(_DWORD *)(v36 + 344);
  v33 = v95;
  if (v28 == v37)
  {
    v38 = *(_QWORD *)(a1 + 888);
    if (v38)
    {
      v39 = v94;
      if (v94 >= HIDWORD(v94))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v39 = v94;
      }
      v40 = (char *)v93 + 16 * v39;
      *v40 = 0;
      v40[1] = v38;
      LODWORD(v94) = v94 + 1;
      v34 = (*(unsigned __int16 *)(sub_22F18E3E4(a1) + 1344) >> 6) & 1;
      goto LABEL_20;
    }
  }
  v41 = sub_22E6155EC((_QWORD *)v36, v37);
  if (v41)
  {
    v42 = v41;
    sub_22F1D0728(*(_QWORD *)(a1 + 80), ".", 1uLL, 1, (uint64_t)v92);
    v43 = v92[0];
    v44 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v44 = v94;
    }
    LOBYTE(v34) = 0;
    v45 = (unint64_t *)((char *)v93 + 16 * v44);
    *v45 = v42;
    v45[1] = v43;
    goto LABEL_19;
  }
  LOBYTE(v34) = 0;
LABEL_20:
  v46 = v89;
  v88 = v34;
  if ((**(_BYTE **)(a1 + 56) & 0x10) == 0
    || a5
    || (v47 = *(_QWORD *)(a1 + 1072), v48 = *(_QWORD *)(a1 + 1064), v47 == v48))
  {
    *(_OWORD *)v89 = *(_OWORD *)(a1 + 1024);
    v20 = a11;
    v23 = a10;
    goto LABEL_49;
  }
  v83 = a4;
  do
  {
    v49 = *(_QWORD *)(v47 - 40);
    if (v49)
    {
      if (*(_BYTE *)(v49 + 177))
        goto LABEL_36;
      v50 = *(_QWORD *)(v47 - 32);
    }
    else
    {
      v50 = *(_QWORD *)(v47 - 32);
      if (!v50)
        goto LABEL_36;
    }
    v51 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v50 + 8) + 88), *(_DWORD *)(v50 + 16));
    if (v51)
    {
      v52 = *(_QWORD *)((*((_QWORD *)v51 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v52)
      {
        do
        {
          v53 = *(_QWORD *)(v52 + 8);
          v52 = v53 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v53 & 2) != 0 && v52);
        if (v52)
        {
          v54 = a12;
          v55 = v25;
          v56 = v24;
          v57 = v33;
          v58 = *(_QWORD *)(v52 + 40);
          v59 = v94;
          if (v94 >= (unint64_t)HIDWORD(v94))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v59 = v94;
          }
          v60 = (unint64_t *)((char *)v93 + 16 * v59);
          *v60 = v52;
          v60[1] = v58;
          LODWORD(v94) = v94 + 1;
          v33 = v57;
          v24 = v56;
          v25 = v55;
          a12 = v54;
          a5 = 0;
        }
      }
    }
LABEL_36:
    v47 -= 56;
  }
  while (v47 != v48);
  v27 = v33;
  a4 = v83;
  a8 = 0;
  v20 = a11;
  v23 = a10;
  v26 = v88;
LABEL_39:
  v88 = v26;
  v46 = v89;
  *(_OWORD *)v89 = *(_OWORD *)(a1 + 1024);
  if (a8)
  {
    v61 = 0;
    v62 = 0;
    *(_OWORD *)v92 = *(_OWORD *)(a1 + 1024);
    while (1)
    {
      v63 = sub_22F13A25C(*(_QWORD *)(a1 + 104), a3, a4, v24, a5, v61, v62, v92, (uint64_t *)v93, v94, v23, v20, (uint64_t)v25, a12, 0, 0, a15, 0);
      if (!v63)
        break;
      v64 = v92[1];
      v61 = v92[0];
      do
      {
        v65 = *(_QWORD *)(v63 + 8);
        v63 = v65 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v65 & 2) != 0 && v63);
      v62 = v92[1] + 1;
      if (v63 == a8)
      {
        v46 = v89;
        *(_OWORD *)v89 = *(_OWORD *)v92;
        v86 = v61;
        a7 = v64 + 1;
        goto LABEL_48;
      }
    }
    v46 = v89;
  }
LABEL_48:
  v33 = v27;
LABEL_49:
  v66 = sub_22F13A25C(*(_QWORD *)(a1 + 104), a3, a4, v24, a5, v86, a7, v46, (uint64_t *)v93, v94, v23, v20, (uint64_t)v25, a12, a13, a14, a15, v88);
  if (!v66)
  {
    v68 = *(_QWORD *)(a1 + 1008);
    if (v68)
    {
      if (!*(_BYTE *)(v68 + 177))
      {
        v69 = *(_QWORD *)(a1 + 1016);
        goto LABEL_57;
      }
    }
    else
    {
      v69 = *(_QWORD *)(a1 + 1016);
      if (v69)
      {
LABEL_57:
        v70 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v69 + 8) + 88), *(_DWORD *)(v69 + 16));
        if (v70)
        {
          v71 = *(_QWORD *)((*((_QWORD *)v70 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v71)
          {
            do
            {
              v72 = *(_QWORD *)(v71 + 8);
              v71 = v72 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v72 & 2) != 0 && v71);
            if (v71)
            {
              v66 = sub_22F13B804(*(_QWORD **)(a1 + 104), (char *)a3, a4, v71, v23, v20, (uint64_t)v25, a12);
              if (v66)
                goto LABEL_50;
            }
          }
        }
      }
    }
    v85 = v23;
    v73 = v20;
    v74 = *(_QWORD *)(a1 + 1072);
    v75 = *(_QWORD *)(a1 + 1064);
    while (1)
    {
      if (v74 == v75)
      {
        v67 = 0;
        goto LABEL_77;
      }
      v76 = *(_QWORD *)(v74 - 40);
      if (v76)
      {
        if (*(_BYTE *)(v76 + 177))
          goto LABEL_75;
        v77 = *(_QWORD *)(v74 - 32);
      }
      else
      {
        v77 = *(_QWORD *)(v74 - 32);
        if (!v77)
          goto LABEL_75;
      }
      v78 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v77 + 8) + 88), *(_DWORD *)(v77 + 16));
      if (v78)
      {
        v79 = *(_QWORD *)((*((_QWORD *)v78 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v79)
        {
          do
          {
            v80 = *(_QWORD *)(v79 + 8);
            v79 = v80 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v80 & 2) != 0 && v79);
          if (v79)
          {
            v81 = sub_22F13B804(*(_QWORD **)(a1 + 104), (char *)a3, a4, v79, v85, v73, (uint64_t)v25, a12);
            if (v81)
            {
              v67 = v81;
              if (!a12)
                goto LABEL_77;
              goto LABEL_51;
            }
          }
        }
      }
LABEL_75:
      v74 -= 56;
    }
  }
LABEL_50:
  v67 = v66;
  if (!a12)
    goto LABEL_77;
LABEL_51:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 3) & 0x40) == 0)
    sub_22F15213C(*(_QWORD *)(a1 + 104) + 488, v25, v84 ^ 1, v24, a3, a4, v67);
LABEL_77:
  if (v93 != v33)
    free(v93);
  return v67;
}

void sub_22F165CAC(unint64_t a1, int *a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  char v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  unsigned int v60;
  uint64_t v61;
  __int16 v62;
  unint64_t v63;
  char *v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int16 v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unsigned int *v131;
  const void *v132;
  size_t v133;
  unsigned int v134;
  _DWORD *v135;
  unint64_t v136;
  _WORD *v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  llvm *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  unsigned __int8 *v161;
  _QWORD *v162;
  uint64_t v163;
  llvm *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  _DWORD *v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  int v187;
  int v188;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v194;
  __int16 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _DWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  unsigned __int8 *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  llvm *v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  _DWORD *v226;
  int v227;
  unsigned int v228;
  _DWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  llvm *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  llvm *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int16 v275;
  uint64_t v276;
  unsigned int v277;
  int v278;
  BOOL v279;
  unsigned int v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  unint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  int *v298;
  unint64_t *v299;
  _QWORD v300[3];
  __int16 v301;
  _QWORD v302[3];
  __int16 v303;
  _QWORD v304[3];
  __int16 v305;
  _QWORD v306[3];
  __int16 v307;
  _QWORD v308[3];
  __int16 v309;
  _QWORD v310[3];
  __int16 v311;
  _QWORD v312[3];
  __int16 v313;
  char v314;
  __int128 v315;
  uint64_t v316;
  __int128 v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  __int16 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int16 v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  __int16 v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  __int16 v337;
  uint64_t v338;

  v338 = *MEMORY[0x24BDAC8D0];
  ++*(_DWORD *)(a1 + 2180);
  v314 = 0;
  sub_22F164274(a1, (uint64_t)&v315, 1, &v314);
  if ((unsigned __int16)v316 == 2)
    return;
  if ((**((_QWORD **)&v315 + 1) & 0x10006000000) == 0x10004000000)
    sub_22F190FD8(a1, (uint64_t)&v315, 0);
  v298 = a2;
  v6 = *(_QWORD *)(a1 + 1008);
  if (v6)
    *(_BYTE *)(v6 + 178) = (*(_BYTE *)(a1 + 536) & 2) != 0;
  v319 = v315;
  v320 = v316;
  v7 = v315;
  v297 = a1 + 128;
  v8 = sub_22E3CD3D4(a1 + 128, 48, 3);
  *(_DWORD *)v8 = v7;
  *(_QWORD *)(v8 + 4) = 0;
  *(_QWORD *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 12) = 0;
  *(_DWORD *)(v8 + 28) = 0;
  *(_WORD *)(v8 + 36) &= 0xF800u;
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(a1 + 2848);
  *(_QWORD *)(a1 + 2848) = v8;
  LOWORD(v7) = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v7 | 0x20;
  sub_22F18FB4C(a1, &v317);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v7 & 0x20;
  v9 = *(unint64_t **)(a1 + 320);
  v299 = *(unint64_t **)(a1 + 328);
  if ((unsigned __int16)v318 != 2)
  {
    if ((v318 & 0x20000) != 0)
    {
      WORD1(v318) &= ~2u;
    }
    else if ((unsigned __int16)v318 == 21)
    {
      *(_WORD *)(v8 + 36) |= 2u;
      v334 = &v336;
      v335 = 0x2000000000;
      LOWORD(v12) = *(_WORD *)(a1 + 536);
      while (1)
      {
        *(_WORD *)(a1 + 536) = v12 | 0x20;
        sub_22F18FB4C(a1, &v319);
        *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v12 & 0x20;
        if ((unsigned __int16)v320 == 2)
        {
          v22 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v22 + 312) = v319;
          *(_DWORD *)(v22 + 316) = 1154;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          v329 = (void *)(v22 + 320);
          v330 = 0;
          v331 = v22;
          v332 = 1;
          *(_BYTE *)(v22 + 320) = 0;
          *(_DWORD *)(v22 + 664) = 0;
          v121 = *(unsigned int *)(v22 + 776);
          if ((_DWORD)v121)
          {
            v122 = *(_QWORD *)(v22 + 768);
            v123 = 56 * v121;
            do
            {
              if (*(char *)(v122 + v123 - 9) < 0)
                operator delete(*(void **)(v122 + v123 - 32));
              v123 -= 56;
            }
            while (v123);
          }
          goto LABEL_58;
        }
        if ((unsigned __int16)v320 == 26)
          break;
        if ((unsigned __int16)v320 == 22)
        {
          if (!(_DWORD)v335)
            goto LABEL_569;
          v22 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v22 + 312) = v319;
          *(_DWORD *)(v22 + 316) = 1120;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          v329 = (void *)(v22 + 320);
          v330 = 0;
          v331 = v22;
          v332 = 1;
          *(_BYTE *)(v22 + 320) = 0;
          *(_DWORD *)(v22 + 664) = 0;
          v245 = *(unsigned int *)(v22 + 776);
          if ((_DWORD)v245)
          {
            v246 = *(_QWORD *)(v22 + 768);
            v247 = 56 * v245;
            do
            {
              if (*(char *)(v246 + v247 - 9) < 0)
                operator delete(*(void **)(v246 + v247 - 32));
              v247 -= 56;
            }
            while (v247);
          }
          goto LABEL_58;
        }
        if ((unsigned __int16)v320 - 7 < 6
          || (unsigned __int16)v320 <= 0x12u && ((1 << v320) & 0x7E002) != 0
          || (v13 = *((_QWORD *)&v319 + 1)) == 0)
        {
          v22 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v22 + 312) = v319;
          *(_DWORD *)(v22 + 316) = 1141;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          v329 = (void *)(v22 + 320);
          v330 = 0;
          v331 = v22;
          v332 = 1;
          *(_BYTE *)(v22 + 320) = 0;
          *(_DWORD *)(v22 + 664) = 0;
          v26 = *(unsigned int *)(v22 + 776);
          if ((_DWORD)v26)
          {
            v27 = *(_QWORD *)(v22 + 768);
            v28 = 56 * v26;
            do
            {
              if (*(char *)(v27 + v28 - 9) < 0)
                operator delete(*(void **)(v27 + v28 - 32));
              v28 -= 56;
            }
            while (v28);
          }
          goto LABEL_58;
        }
        v14 = v334;
        v15 = v335;
        v16 = (char *)v334;
        if ((_DWORD)v335)
        {
          v17 = 8 * v335;
          v16 = (char *)v334;
          while (*(_QWORD *)v16 != *((_QWORD *)&v319 + 1))
          {
            v16 += 8;
            v17 -= 8;
            if (!v17)
            {
              v16 = (char *)v334 + 8 * v335;
              break;
            }
          }
        }
        if (v335 != (v16 - (_BYTE *)v334) >> 3)
        {
          v42 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v42 + 312) = v319;
          *(_DWORD *)(v42 + 316) = 1110;
          if (*(char *)(v42 + 311) < 0)
          {
            **(_BYTE **)(v42 + 288) = 0;
            *(_QWORD *)(v42 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v42 + 288) = 0;
            *(_BYTE *)(v42 + 311) = 0;
          }
          v230 = v42 + 320;
          v329 = (void *)(v42 + 320);
          v330 = 0;
          v331 = v42;
          v332 = 1;
          *(_BYTE *)(v42 + 320) = 0;
          *(_DWORD *)(v42 + 664) = 0;
          v231 = *(unsigned int *)(v42 + 776);
          if ((_DWORD)v231)
          {
            v232 = *(_QWORD *)(v42 + 768);
            v233 = 56 * v231;
            do
            {
              if (*(char *)(v232 + v233 - 9) < 0)
                operator delete(*(void **)(v232 + v233 - 32));
              v233 -= 56;
            }
            while (v233);
            v230 = v42 + 320;
            LODWORD(v231) = *(unsigned __int8 *)(v42 + 320);
          }
          *(_DWORD *)(v42 + 776) = 0;
          *(_BYTE *)(v230 + v231 + 1) = 5;
          *(_BYTE *)(v42 + 320) = v231 + 1;
          *(_QWORD *)(v230 + 8 * v231 + 16) = v13;
LABEL_59:
          v29 = &v329;
LABEL_60:
          sub_22E3BB0B8((uint64_t)v29);
          v30 = 1;
          goto LABEL_61;
        }
        if (v335 >= HIDWORD(v335))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v334;
          v15 = v335;
        }
        v14[v15] = v13;
        LODWORD(v335) = v335 + 1;
        v18 = *(unsigned __int16 *)(a1 + 536);
        *(_WORD *)(a1 + 536) = v18 | 0x20;
        sub_22F18FB4C(a1, &v319);
        v12 = *(_WORD *)(a1 + 536) & 0xFFDF | (32 * ((v18 >> 5) & 1));
        *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | (32 * ((v18 >> 5) & 1));
        if ((unsigned __int16)v320 != 65)
        {
          if ((unsigned __int16)v320 == 22)
            goto LABEL_492;
          if ((unsigned __int16)v320 == 26)
          {
            v35 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v35 + 312) = v319;
            *(_DWORD *)(v35 + 316) = 1214;
            if (*(char *)(v35 + 311) < 0)
            {
              **(_BYTE **)(v35 + 288) = 0;
              *(_QWORD *)(v35 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v35 + 288) = 0;
              *(_BYTE *)(v35 + 311) = 0;
            }
            v329 = (void *)(v35 + 320);
            v330 = 0;
            v331 = v35;
            v332 = 1;
            *(_BYTE *)(v35 + 320) = 0;
            *(_DWORD *)(v35 + 664) = 0;
            v234 = *(unsigned int *)(v35 + 776);
            if ((_DWORD)v234)
            {
              v235 = *(_QWORD *)(v35 + 768);
              v236 = 56 * v234;
              do
              {
                if (*(char *)(v235 + v236 - 9) < 0)
                  operator delete(*(void **)(v235 + v236 - 32));
                v236 -= 56;
              }
              while (v236);
            }
            *(_DWORD *)(v35 + 776) = 0;
            sub_22E3BB0B8((uint64_t)&v329);
            v237 = *(_WORD *)(a1 + 536);
            *(_WORD *)(a1 + 536) = v237 | 0x20;
            sub_22F18FB4C(a1, &v319);
            *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v237 & 0x20;
            if ((unsigned __int16)v320 != 22)
            {
              v241 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v241 + 312) = v319;
              *(_DWORD *)(v241 + 316) = 1154;
              if (*(char *)(v241 + 311) < 0)
              {
                **(_BYTE **)(v241 + 288) = 0;
                *(_QWORD *)(v241 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v241 + 288) = 0;
                *(_BYTE *)(v241 + 311) = 0;
              }
              v325 = v241 + 320;
              v326 = 0;
              v327 = v241;
              v328 = 1;
              *(_BYTE *)(v241 + 320) = 0;
              *(_DWORD *)(v241 + 664) = 0;
              v268 = *(unsigned int *)(v241 + 776);
              if ((_DWORD)v268)
              {
                v269 = *(_QWORD *)(v241 + 768);
                v270 = 56 * v268;
                do
                {
                  if (*(char *)(v269 + v270 - 9) < 0)
                    operator delete(*(void **)(v269 + v270 - 32));
                  v270 -= 56;
                }
                while (v270);
              }
              *(_DWORD *)(v241 + 776) = 0;
              v29 = (void **)&v325;
              goto LABEL_60;
            }
            *(_WORD *)(v8 + 36) |= 8u;
LABEL_492:
            v238 = v335;
            if ((_DWORD)v335)
            {
              v239 = v334;
              *(_DWORD *)(v8 + 24) = v335;
              v240 = 8 * v238;
              goto LABEL_568;
            }
            goto LABEL_569;
          }
          v22 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v22 + 312) = v319;
          *(_DWORD *)(v22 + 316) = 1118;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          v329 = (void *)(v22 + 320);
          v330 = 0;
          v331 = v22;
          v332 = 1;
          *(_BYTE *)(v22 + 320) = 0;
          *(_DWORD *)(v22 + 664) = 0;
          v242 = *(unsigned int *)(v22 + 776);
          if ((_DWORD)v242)
          {
            v243 = *(_QWORD *)(v22 + 768);
            v244 = 56 * v242;
            do
            {
              if (*(char *)(v243 + v244 - 9) < 0)
                operator delete(*(void **)(v243 + v244 - 32));
              v244 -= 56;
            }
            while (v244);
          }
LABEL_58:
          *(_DWORD *)(v22 + 776) = 0;
          goto LABEL_59;
        }
      }
      v39 = *(_QWORD *)(a1 + 56);
      if ((*(_QWORD *)v39 & 1) == 0)
      {
        if ((*(_QWORD *)v39 & 0x200) != 0)
          v40 = 1311;
        else
          v40 = 1243;
        v41 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v41 + 312) = v319;
        *(_DWORD *)(v41 + 316) = v40;
        if (*(char *)(v41 + 311) < 0)
        {
          **(_BYTE **)(v41 + 288) = 0;
          *(_QWORD *)(v41 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 288) = 0;
          *(_BYTE *)(v41 + 311) = 0;
        }
        v329 = (void *)(v41 + 320);
        v330 = 0;
        v331 = v41;
        v332 = 1;
        *(_BYTE *)(v41 + 320) = 0;
        *(_DWORD *)(v41 + 664) = 0;
        v248 = *(unsigned int *)(v41 + 776);
        if ((_DWORD)v248)
        {
          v249 = *(_QWORD *)(v41 + 768);
          v250 = 56 * v248;
          do
          {
            if (*(char *)(v249 + v250 - 9) < 0)
              operator delete(*(void **)(v249 + v250 - 32));
            v250 -= 56;
          }
          while (v250);
        }
        *(_DWORD *)(v41 + 776) = 0;
        sub_22E3BB0B8((uint64_t)&v329);
        v39 = *(_QWORD *)(a1 + 56);
      }
      if ((*(_DWORD *)(v39 + 52) & 0x40000000) != 0 && (*(_BYTE *)(v39 + 60) & 1) == 0)
      {
        v251 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v251 + 312) = v319;
        *(_DWORD *)(v251 + 316) = 1231;
        if (*(char *)(v251 + 311) < 0)
        {
          **(_BYTE **)(v251 + 288) = 0;
          *(_QWORD *)(v251 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v251 + 288) = 0;
          *(_BYTE *)(v251 + 311) = 0;
        }
        v325 = v251 + 320;
        v326 = 0;
        v327 = v251;
        v328 = 1;
        *(_BYTE *)(v251 + 320) = 0;
        *(_DWORD *)(v251 + 664) = 0;
        v272 = *(unsigned int *)(v251 + 776);
        if ((_DWORD)v272)
        {
          v273 = *(_QWORD *)(v251 + 768);
          v274 = 56 * v272;
          do
          {
            if (*(char *)(v273 + v274 - 9) < 0)
              operator delete(*(void **)(v273 + v274 - 32));
            v274 -= 56;
          }
          while (v274);
        }
        *(_DWORD *)(v251 + 776) = 0;
        sub_22E3BB0B8((uint64_t)&v325);
      }
      v275 = *(_WORD *)(a1 + 536);
      *(_WORD *)(a1 + 536) = v275 | 0x20;
      sub_22F18FB4C(a1, &v319);
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v275 & 0x20;
      if ((unsigned __int16)v320 != 22)
      {
        v282 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v282 + 312) = v319;
        *(_DWORD *)(v282 + 316) = 1154;
        if (*(char *)(v282 + 311) < 0)
        {
          **(_BYTE **)(v282 + 288) = 0;
          *(_QWORD *)(v282 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v282 + 288) = 0;
          *(_BYTE *)(v282 + 311) = 0;
        }
        v321 = v282 + 320;
        v322 = 0;
        v323 = v282;
        v324 = 1;
        *(_BYTE *)(v282 + 320) = 0;
        *(_DWORD *)(v282 + 664) = 0;
        v283 = *(unsigned int *)(v282 + 776);
        if ((_DWORD)v283)
        {
          v284 = *(_QWORD *)(v282 + 768);
          v285 = 56 * v283;
          do
          {
            if (*(char *)(v284 + v285 - 9) < 0)
              operator delete(*(void **)(v284 + v285 - 32));
            v285 -= 56;
          }
          while (v285);
        }
        *(_DWORD *)(v282 + 776) = 0;
        v29 = (void **)&v321;
        goto LABEL_60;
      }
      v276 = *(_QWORD *)(a1 + 320);
      v277 = v335;
      if (v335 >= HIDWORD(v335))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v277 = v335;
      }
      *((_QWORD *)v334 + v277) = v276;
      v278 = v335;
      *(_WORD *)(v8 + 36) |= 4u;
      v279 = __CFADD__(v278, 1);
      v280 = v278 + 1;
      LODWORD(v335) = v280;
      if (!v279)
      {
        v239 = v334;
        *(_DWORD *)(v8 + 24) = v280;
        v240 = 8 * v280;
LABEL_568:
        v281 = (void *)sub_22E3CD3D4(v297, v240, 3);
        *(_QWORD *)(v8 + 8) = v281;
        memmove(v281, v239, v240);
      }
LABEL_569:
      v30 = 0;
LABEL_61:
      if (v334 != &v336)
        free(v334);
      if ((v30 & 1) != 0)
      {
        v8 = 0;
        v31 = v298;
        goto LABEL_270;
      }
      if ((*(_WORD *)(v8 + 36) & 4) != 0)
      {
        v32 = (*v9 >> 5) & 0x80000000;
        if ((*v9 & 0x81A000000) != 0)
          v32 = 0x80000000;
        *v9 = v32 | *v9 & 0xFFFFFFFF5FFFFFFFLL;
        v33 = (*v299 >> 5) & 0x80000000;
        if ((*v299 & 0x81A000000) != 0)
          v33 = 0x80000000;
        *v299 = v33 | *v299 & 0xFFFFFFFF5FFFFFFFLL;
      }
      v34 = *(_WORD *)(a1 + 536);
      *(_WORD *)(a1 + 536) = v34 | 0x20;
      sub_22F18FB4C(a1, &v317);
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v34 & 0x20;
    }
    else
    {
      if ((**(_WORD **)(a1 + 56) & 0x201) != 0)
      {
        v21 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v21 + 312) = v317;
        *(_DWORD *)(v21 + 316) = 1198;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v325 = v21 + 320;
        v326 = 0;
        v327 = v21;
        v328 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v23 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v23)
        {
          v24 = *(_QWORD *)(v21 + 768);
          v25 = 56 * v23;
          do
          {
            if (*(char *)(v24 + v25 - 9) < 0)
              operator delete(*(void **)(v24 + v25 - 32));
            v25 -= 56;
          }
          while (v25);
        }
      }
      else if ((unsigned __int16)v318 != 72 && (_WORD)v318)
      {
        v21 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v21 + 312) = v317;
        *(_DWORD *)(v21 + 316) = 1320;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v325 = v21 + 320;
        v326 = 0;
        v327 = v21;
        v328 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v43 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v21 + 768);
          v45 = 56 * v43;
          do
          {
            if (*(char *)(v44 + v45 - 9) < 0)
              operator delete(*(void **)(v44 + v45 - 32));
            v45 -= 56;
          }
          while (v45);
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v21 + 312) = v317;
        *(_DWORD *)(v21 + 316) = 1211;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v325 = v21 + 320;
        v326 = 0;
        v327 = v21;
        v328 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v36 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v36)
        {
          v37 = *(_QWORD *)(v21 + 768);
          v38 = 56 * v36;
          do
          {
            if (*(char *)(v37 + v38 - 9) < 0)
              operator delete(*(void **)(v37 + v38 - 32));
            v38 -= 56;
          }
          while (v38);
        }
      }
      *(_DWORD *)(v21 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v325);
    }
    goto LABEL_107;
  }
  if (a3)
  {
    v10 = *(_QWORD *)(a1 + 1016);
    if ((unsigned __int16)v316 - 7 >= 6)
    {
      v11 = 0;
      if ((unsigned __int16)v316 - 13 >= 6 && (unsigned __int16)v316 != 1)
        v11 = *((_QWORD *)&v315 + 1);
    }
    else
    {
      v11 = 0;
    }
    v20 = v315;
    *(_QWORD *)(v10 + 48) = v11;
    *(_DWORD *)(v10 + 60) = v20;
LABEL_107:
    v19 = (unsigned __int16)v318;
    if ((unsigned __int16)v318 != 2)
    {
      v319 = v317;
      v320 = v318;
    }
    goto LABEL_109;
  }
  v19 = 2;
LABEL_109:
  v334 = &v336;
  v335 = 0x1000000000;
  if ((*(_BYTE *)(v8 + 36) & 2) == 0)
  {
    if (v19 != 2)
    {
      do
      {
        v319 = v317;
        v320 = v318;
        v46 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v317, 1);
        v47 = (char *)v334 + 24 * v335;
        v48 = *(_OWORD *)v46;
        *((_QWORD *)v47 + 2) = *(_QWORD *)(v46 + 16);
        *(_OWORD *)v47 = v48;
        LODWORD(v335) = v335 + 1;
        v49 = *(_WORD *)(a1 + 536);
        *(_WORD *)(a1 + 536) = v49 | 0x20;
        sub_22F18FB4C(a1, &v317);
        *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v49 & 0x20;
      }
      while ((unsigned __int16)v318 != 2);
    }
    goto LABEL_191;
  }
  v329 = &v331;
  v330 = 0x800000000;
  v333 = *(_QWORD *)(a1 + 328);
  while (1)
  {
    while (1)
    {
      if (v19 == 2)
        goto LABEL_186;
      v319 = v317;
      v320 = v318;
      if ((v19 - 66) < 3)
        break;
      v52 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v317, 1);
      v53 = (char *)v334 + 24 * v335;
      v54 = *(_OWORD *)v52;
      *((_QWORD *)v53 + 2) = *(_QWORD *)(v52 + 16);
      *(_OWORD *)v53 = v54;
      v55 = v335 + 1;
      LODWORD(v335) = v335 + 1;
      if (!v333)
        goto LABEL_128;
      if ((unsigned __int16)v318 - 7 >= 6)
      {
        v56 = 0;
        if ((unsigned __int16)v318 - 13 >= 6 && (unsigned __int16)v318 != 1)
          v56 = *((_QWORD *)&v317 + 1);
      }
      else
      {
        v56 = 0;
      }
      if (v56 != v333)
      {
LABEL_128:
        v60 = v330;
        if ((_DWORD)v330)
        {
          if ((unsigned __int16)v318 == 21)
          {
            v69 = v317;
            if (v330 >= HIDWORD(v330))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = v330;
            }
            *((_DWORD *)v329 + v60) = v69;
            LODWORD(v330) = v330 + 1;
          }
          else if ((unsigned __int16)v318 == 22)
          {
            LODWORD(v330) = v330 - 1;
            if (v60 == 1 && *((_WORD *)v334 + 12 * v55 - 16) == 67)
            {
              v106 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v106 + 312) = v317;
              *(_DWORD *)(v106 + 316) = 1193;
              if (*(char *)(v106 + 311) < 0)
              {
                **(_BYTE **)(v106 + 288) = 0;
                *(_QWORD *)(v106 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v106 + 288) = 0;
                *(_BYTE *)(v106 + 311) = 0;
              }
              v31 = v298;
              v321 = v106 + 320;
              v322 = 0;
              v323 = v106;
              v324 = 1;
              *(_BYTE *)(v106 + 320) = 0;
              *(_DWORD *)(v106 + 664) = 0;
              v124 = *(unsigned int *)(v106 + 776);
              if ((_DWORD)v124)
              {
                v125 = *(_QWORD *)(v106 + 768);
                v126 = 56 * v124;
                do
                {
                  if (*(char *)(v125 + v126 - 9) < 0)
                    operator delete(*(void **)(v125 + v126 - 32));
                  v126 -= 56;
                }
                while (v126);
              }
              goto LABEL_264;
            }
          }
        }
        goto LABEL_181;
      }
      if ((_DWORD)v330)
      {
        v106 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v106 + 312) = v317;
        *(_DWORD *)(v106 + 316) = 1172;
        if (*(char *)(v106 + 311) < 0)
        {
          **(_BYTE **)(v106 + 288) = 0;
          *(_QWORD *)(v106 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v106 + 288) = 0;
          *(_BYTE *)(v106 + 311) = 0;
        }
        v31 = v298;
        v321 = v106 + 320;
        v322 = 0;
        v323 = v106;
        v324 = 1;
        *(_BYTE *)(v106 + 320) = 0;
        *(_DWORD *)(v106 + 664) = 0;
        v108 = *(unsigned int *)(v106 + 776);
        if ((_DWORD)v108)
        {
          v109 = *(_QWORD *)(v106 + 768);
          v110 = 56 * v108;
          do
          {
            if (*(char *)(v109 + v110 - 9) < 0)
              operator delete(*(void **)(v109 + v110 - 32));
            v110 -= 56;
          }
          while (v110);
        }
        goto LABEL_264;
      }
      v62 = *(_WORD *)(a1 + 536);
      *(_WORD *)(a1 + 536) = v62 | 0x20;
      sub_22F18FB4C(a1, &v317);
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v62 & 0x20;
      if ((unsigned __int16)v318 != 21)
      {
        v106 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v106 + 312) = v317;
        *(_DWORD *)(v106 + 316) = 1152;
        if (*(char *)(v106 + 311) < 0)
        {
          **(_BYTE **)(v106 + 288) = 0;
          *(_QWORD *)(v106 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v106 + 288) = 0;
          *(_BYTE *)(v106 + 311) = 0;
        }
        v31 = v298;
        v321 = v106 + 320;
        v322 = 0;
        v323 = v106;
        v324 = 1;
        *(_BYTE *)(v106 + 320) = 0;
        *(_DWORD *)(v106 + 664) = 0;
        v111 = *(unsigned int *)(v106 + 776);
        if ((_DWORD)v111)
        {
          v112 = *(_QWORD *)(v106 + 768);
          v113 = 56 * v111;
          do
          {
            if (*(char *)(v112 + v113 - 9) < 0)
              operator delete(*(void **)(v112 + v113 - 32));
            v113 -= 56;
          }
          while (v113);
        }
LABEL_264:
        *(_DWORD *)(v106 + 776) = 0;
        goto LABEL_265;
      }
      v63 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v317, 1);
      v64 = (char *)v334 + 24 * v335;
      v65 = *(_OWORD *)v63;
      *((_QWORD *)v64 + 2) = *(_QWORD *)(v63 + 16);
      *(_OWORD *)v64 = v65;
      LODWORD(v335) = v335 + 1;
      v66 = v317;
      v67 = v330;
      if (v330 >= (unint64_t)HIDWORD(v330))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v67 = v330;
      }
      *((_DWORD *)v329 + v67) = v66;
      LODWORD(v330) = v330 + 1;
      v68 = *(_WORD *)(a1 + 536);
      *(_WORD *)(a1 + 536) = v68 | 0x20;
      sub_22F18FB4C(a1, &v317);
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v68 & 0x20;
      v19 = (unsigned __int16)v318;
      if ((unsigned __int16)v318 == 67)
      {
        v106 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v106 + 312) = v317;
        *(_DWORD *)(v106 + 316) = 1194;
        if (*(char *)(v106 + 311) < 0)
        {
          **(_BYTE **)(v106 + 288) = 0;
          *(_QWORD *)(v106 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v106 + 288) = 0;
          *(_BYTE *)(v106 + 311) = 0;
        }
        v31 = v298;
        v321 = v106 + 320;
        v322 = 0;
        v323 = v106;
        v324 = 1;
        *(_BYTE *)(v106 + 320) = 0;
        *(_DWORD *)(v106 + 664) = 0;
        v114 = *(unsigned int *)(v106 + 776);
        if ((_DWORD)v114)
        {
          v115 = *(_QWORD *)(v106 + 768);
          v116 = 56 * v114;
          do
          {
            if (*(char *)(v115 + v116 - 9) < 0)
              operator delete(*(void **)(v115 + v116 - 32));
            v116 -= 56;
          }
          while (v116);
        }
        goto LABEL_264;
      }
    }
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) & 0x4000000000000) != 0)
    {
      LOWORD(v318) = 0;
      v57 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v317, 1);
      v58 = (char *)v334 + 24 * v335;
      v59 = *(_OWORD *)v57;
      *((_QWORD *)v58 + 2) = *(_QWORD *)(v57 + 16);
      *(_OWORD *)v58 = v59;
      LODWORD(v335) = v335 + 1;
LABEL_181:
      v85 = *(_WORD *)(a1 + 536);
      *(_WORD *)(a1 + 536) = v85 | 0x20;
      sub_22F18FB4C(a1, &v317);
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v85 & 0x20;
      goto LABEL_182;
    }
    v50 = *(_WORD *)(a1 + 536);
    *(_WORD *)(a1 + 536) = v50 | 0x20;
    sub_22F18FB4C(a1, &v317);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v50 & 0x20;
    if (v19 == 67)
      break;
    if (!v333)
      goto LABEL_174;
    if ((unsigned __int16)(v318 - 7) >= 6u)
    {
      v61 = 0;
      if ((unsigned __int16)v318 - 13 >= 6 && (unsigned __int16)v318 != 1)
        v61 = *((_QWORD *)&v317 + 1);
    }
    else
    {
      v61 = 0;
    }
    if (v61 != v333)
    {
LABEL_174:
      if ((unsigned __int16)(v318 - 7) < 6u)
        goto LABEL_152;
      if ((unsigned __int16)v318 - 13 < 6)
        goto LABEL_152;
      if ((unsigned __int16)v318 == 1)
        goto LABEL_152;
      v73 = *((_QWORD *)&v317 + 1);
      if (!*((_QWORD *)&v317 + 1))
        goto LABEL_152;
      if ((unsigned __int16)v318 <= 0xEu && ((1 << v318) & 0x6002) != 0)
        v73 = 0;
      v74 = *(unsigned int *)(v8 + 24);
      if (!(_DWORD)v74)
        goto LABEL_152;
      v75 = *(_QWORD **)(v8 + 8);
      v76 = 8 * v74;
      v77 = 0x7FFFFFFF8;
      while (*v75 != v73)
      {
        ++v75;
        v77 -= 8;
        v76 -= 8;
        if (!v76)
          goto LABEL_152;
      }
      if (!v77)
      {
LABEL_152:
        if ((unsigned __int16)v318 == 2 || (**(_QWORD **)(a1 + 56) & 0x40000000) == 0)
        {
          v107 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v107 + 312) = v317;
          *(_DWORD *)(v107 + 316) = 1165;
          if (*(char *)(v107 + 311) < 0)
          {
            **(_BYTE **)(v107 + 288) = 0;
            *(_QWORD *)(v107 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v107 + 288) = 0;
            *(_BYTE *)(v107 + 311) = 0;
          }
          v31 = v298;
          v117 = (unsigned __int8 *)(v107 + 320);
          v321 = v107 + 320;
          v322 = 0;
          v323 = v107;
          v324 = 1;
          *(_BYTE *)(v107 + 320) = 0;
          *(_DWORD *)(v107 + 664) = 0;
          v118 = *(unsigned int *)(v107 + 776);
          if ((_DWORD)v118)
          {
            v119 = *(_QWORD *)(v107 + 768);
            v120 = 56 * v118;
            do
            {
              if (*(char *)(v119 + v120 - 9) < 0)
                operator delete(*(void **)(v119 + v120 - 32));
              v120 -= 56;
            }
            while (v120);
            LODWORD(v118) = *v117;
          }
          *(_DWORD *)(v107 + 776) = 0;
          v105 = (unsigned __int16)v320 == 68;
          v117[v118 + 1] = 2;
          *(_BYTE *)(v107 + 320) = v118 + 1;
          v104 = &v117[8 * v118];
LABEL_211:
          *((_QWORD *)v104 + 2) = v105;
LABEL_265:
          sub_22E3BB0B8((uint64_t)&v321);
          if (v329 != &v331)
            free(v329);
          v8 = 0;
          goto LABEL_268;
        }
        LOWORD(v320) = 0;
        goto LABEL_159;
      }
    }
    v78 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v319, 1);
    v79 = (char *)v334 + 24 * v335;
    v80 = *(_OWORD *)v78;
    *((_QWORD *)v79 + 2) = *(_QWORD *)(v78 + 16);
    *(_OWORD *)v79 = v80;
    LODWORD(v335) = v335 + 1;
    if (!v333)
      goto LABEL_180;
    if ((unsigned __int16)v318 - 7 >= 6)
    {
      v81 = 0;
      if ((unsigned __int16)v318 - 13 >= 6 && (unsigned __int16)v318 != 1)
        v81 = *((_QWORD *)&v317 + 1);
    }
    else
    {
      v81 = 0;
    }
    if (v81 != v333)
    {
LABEL_180:
      v82 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v317, 1);
      v83 = (char *)v334 + 24 * v335;
      v84 = *(_OWORD *)v82;
      *((_QWORD *)v83 + 2) = *(_QWORD *)(v82 + 16);
      *(_OWORD *)v83 = v84;
      LODWORD(v335) = v335 + 1;
      v320 = v318;
      v319 = v317;
      goto LABEL_181;
    }
LABEL_182:
    v19 = (unsigned __int16)v318;
  }
  if ((unsigned __int16)v318 != 2)
  {
    if ((_DWORD)v335)
    {
      if ((unsigned __int16)v318 - 7 >= 6)
      {
        v51 = 0;
        if ((unsigned __int16)v318 - 13 >= 6 && (unsigned __int16)v318 != 1)
          v51 = *((_QWORD *)&v317 + 1);
      }
      else
      {
        v51 = 0;
      }
      if (v51 == *(_QWORD *)(a1 + 320) && *((_WORD *)v334 + 12 * v335 - 4) == 65)
        *(_WORD *)(v8 + 36) |= 0x20u;
    }
LABEL_159:
    v70 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v319, 1);
    v71 = (char *)v334 + 24 * v335;
    v72 = *(_OWORD *)v70;
    *((_QWORD *)v71 + 2) = *(_QWORD *)(v70 + 16);
    *(_OWORD *)v71 = v72;
    LODWORD(v335) = v335 + 1;
    goto LABEL_182;
  }
  v86 = sub_22E4EF088((uint64_t)&v334, (unint64_t)&v319, 1);
  v87 = (char *)v334 + 24 * v335;
  v88 = *(_OWORD *)v86;
  *((_QWORD *)v87 + 2) = *(_QWORD *)(v86 + 16);
  *(_OWORD *)v87 = v88;
  LODWORD(v335) = v335 + 1;
LABEL_186:
  if ((_DWORD)v330)
  {
    v89 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v89 + 312) = v317;
    *(_DWORD *)(v89 + 316) = 1117;
    if (*(char *)(v89 + 311) < 0)
    {
      **(_BYTE **)(v89 + 288) = 0;
      *(_QWORD *)(v89 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v89 + 288) = 0;
      *(_BYTE *)(v89 + 311) = 0;
    }
    v31 = v298;
    v321 = v89 + 320;
    v322 = 0;
    v323 = v89;
    v324 = 1;
    *(_BYTE *)(v89 + 320) = 0;
    *(_DWORD *)(v89 + 664) = 0;
    v94 = *(unsigned int *)(v89 + 776);
    if ((_DWORD)v94)
    {
      v95 = *(_QWORD *)(v89 + 768);
      v96 = 56 * v94;
      do
      {
        if (*(char *)(v95 + v96 - 9) < 0)
          operator delete(*(void **)(v95 + v96 - 32));
        v96 -= 56;
      }
      while (v96);
      LODWORD(v94) = *(unsigned __int8 *)(v89 + 320);
    }
    *(_DWORD *)(v89 + 776) = 0;
    v97 = (unsigned __int16)v320;
    *(_BYTE *)(v89 + 321 + v94) = 4;
    *(_QWORD *)(v89 + 336 + 8 * v94) = v97;
    v98 = (v94 + 1);
    *(_BYTE *)(v89 + 321 + v98) = 4;
    *(_BYTE *)(v89 + 320) = v94 + 2;
    *(_QWORD *)(v89 + 336 + 8 * v98) = 22;
    sub_22E3BB0B8((uint64_t)&v321);
    v99 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v99 + 312) = *((_DWORD *)v329 + v330 - 1);
    *(_DWORD *)(v99 + 316) = 104;
    if (*(char *)(v99 + 311) < 0)
    {
      **(_BYTE **)(v99 + 288) = 0;
      *(_QWORD *)(v99 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v99 + 288) = 0;
      *(_BYTE *)(v99 + 311) = 0;
    }
    v100 = (unsigned __int8 *)(v99 + 320);
    v321 = v99 + 320;
    v322 = 0;
    v323 = v99;
    v324 = 1;
    *(_BYTE *)(v99 + 320) = 0;
    *(_DWORD *)(v99 + 664) = 0;
    v101 = *(unsigned int *)(v99 + 776);
    if ((_DWORD)v101)
    {
      v102 = *(_QWORD *)(v99 + 768);
      v103 = 56 * v101;
      do
      {
        if (*(char *)(v102 + v103 - 9) < 0)
          operator delete(*(void **)(v102 + v103 - 32));
        v103 -= 56;
      }
      while (v103);
      LODWORD(v101) = *v100;
    }
    *(_DWORD *)(v99 + 776) = 0;
    v100[v101 + 1] = 4;
    *(_BYTE *)(v99 + 320) = v101 + 1;
    v104 = &v100[8 * v101];
    v105 = 21;
    goto LABEL_211;
  }
  if (v329 != &v331)
    free(v329);
LABEL_191:
  *(_DWORD *)(v8 + 4) = v319;
  v90 = v335;
  if ((_DWORD)v335)
  {
    v91 = v334;
    *(_DWORD *)(v8 + 28) = v335;
    v92 = 24 * v90;
    v93 = (void *)sub_22E3CD3D4(v297, 24 * v90, 3);
    memmove(v93, v91, v92);
    *(_QWORD *)(v8 + 16) = v93;
  }
  v31 = v298;
LABEL_268:
  if (v334 != &v336)
    free(v334);
LABEL_270:
  *v9 |= 0xA0000000uLL;
  *v299 |= 0xA0000000uLL;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1008) + 24))
    sub_22F163BBC(a1);
  if (!v8)
    return;
  if (!v314)
    goto LABEL_296;
  v127 = *(_DWORD *)(v8 + 28);
  if (v127 == 1)
  {
    v128 = *(_QWORD *)(v8 + 16);
    v129 = *(unsigned __int16 *)(v128 + 16);
    if ((unsigned __int16)v316 == v129)
      goto LABEL_296;
    if ((v129 - 7) < 6)
      goto LABEL_287;
    if ((v129 - 13) < 6)
      goto LABEL_287;
    if (v129 == 1)
      goto LABEL_287;
    v130 = *(_QWORD *)(v128 + 8);
    if (!v130)
      goto LABEL_287;
    v131 = *(unsigned int **)(*((_QWORD *)&v315 + 1) + 16);
    v134 = *v131;
    v132 = v131 + 4;
    v133 = v134;
    if (!sub_22F1D2F98((_DWORD *)v130, *(uint64_t **)(a1 + 56)))
      goto LABEL_287;
    v135 = *(_DWORD **)(v130 + 16);
    v137 = v135 + 4;
    v136 = *v135;
    v138 = v136 - 2;
    if (v136 >= 2)
    {
      if (*v137 != 24415)
        goto LABEL_554;
      v271 = (char *)v135 + 18;
      if (v138 >= 2)
      {
        v287 = *(unsigned __int16 *)((char *)v137 + v136 - 2);
        v288 = v136 - 4;
        if (v138 < v288)
          v288 = v138;
        if (v287 == 24415)
          v138 = v288;
      }
    }
    else
    {
      if (!*v135)
      {
LABEL_287:
        v140 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v140 + 312) = v315;
        *(_DWORD *)(v140 + 316) = 1341;
        if (*(char *)(v140 + 311) < 0)
        {
          **(_BYTE **)(v140 + 288) = 0;
          *(_QWORD *)(v140 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v140 + 288) = 0;
          *(_BYTE *)(v140 + 311) = 0;
        }
        v312[0] = v140 + 320;
        v312[1] = 0;
        v312[2] = v140;
        v313 = 1;
        *(_BYTE *)(v140 + 320) = 0;
        *(_DWORD *)(v140 + 664) = 0;
        v141 = *(unsigned int *)(v140 + 776);
        if ((_DWORD)v141)
        {
          v142 = *(_QWORD *)(v140 + 768);
          v143 = 56 * v141;
          do
          {
            if (*(char *)(v142 + v143 - 9) < 0)
              operator delete(*(void **)(v142 + v143 - 32));
            v143 -= 56;
          }
          while (v143);
        }
        *(_DWORD *)(v140 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v312);
        goto LABEL_296;
      }
LABEL_554:
      if (*(_BYTE *)v137 != 95)
        goto LABEL_287;
      v271 = (char *)v135 + 17;
      v138 = v136 - 1;
    }
    if (v138 != v133 || v133 && memcmp(v271, v132, v133))
      goto LABEL_287;
  }
  else
  {
    v139 = (unsigned __int16)v316 - 80;
    if (v139 > 0x17 || ((1 << v139) & 0x801081) == 0 || v127)
      goto LABEL_287;
  }
LABEL_296:
  v144 = *(_DWORD *)(v8 + 28);
  if (v144)
  {
    v145 = *(_QWORD *)(v8 + 16);
    if (*(_WORD *)(v145 + 16) == 67)
    {
      v146 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v146 + 312) = *(_DWORD *)v145;
      *(_DWORD *)(v146 + 316) = 1099;
      if (*(char *)(v146 + 311) < 0)
      {
        **(_BYTE **)(v146 + 288) = 0;
        *(_QWORD *)(v146 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v146 + 288) = 0;
        *(_BYTE *)(v146 + 311) = 0;
      }
      v310[0] = v146 + 320;
      v310[1] = 0;
      v310[2] = v146;
      v311 = 1;
      *(_BYTE *)(v146 + 320) = 0;
      *(_DWORD *)(v146 + 664) = 0;
      v153 = *(unsigned int *)(v146 + 776);
      if ((_DWORD)v153)
      {
        v154 = *(_QWORD *)(v146 + 768);
        v155 = 56 * v153;
        do
        {
          if (*(char *)(v154 + v155 - 9) < 0)
            operator delete(*(void **)(v154 + v155 - 32));
          v155 -= 56;
        }
        while (v155);
      }
      *(_DWORD *)(v146 + 776) = 0;
      v156 = v310;
      goto LABEL_352;
    }
    v147 = v144 - 1;
    if (*(_WORD *)(v145 + 24 * v147 + 16) == 67)
    {
      v148 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v148 + 312) = *(_DWORD *)(v145 + 24 * v147);
      *(_DWORD *)(v148 + 316) = 1098;
      if (*(char *)(v148 + 311) < 0)
      {
        **(_BYTE **)(v148 + 288) = 0;
        *(_QWORD *)(v148 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v148 + 288) = 0;
        *(_BYTE *)(v148 + 311) = 0;
      }
      v308[0] = v148 + 320;
      v308[1] = 0;
      v308[2] = v148;
      v309 = 1;
      *(_BYTE *)(v148 + 320) = 0;
      *(_DWORD *)(v148 + 664) = 0;
      v172 = *(unsigned int *)(v148 + 776);
      if ((_DWORD)v172)
      {
        v173 = *(_QWORD *)(v148 + 768);
        v174 = 56 * v172;
        do
        {
          if (*(char *)(v173 + v174 - 9) < 0)
            operator delete(*(void **)(v173 + v174 - 32));
          v174 -= 56;
        }
        while (v174);
      }
      *(_DWORD *)(v148 + 776) = 0;
      v156 = v308;
      goto LABEL_352;
    }
  }
  v149 = (unsigned __int16)v316;
  if (!*(_BYTE *)(a1 + 2273))
  {
LABEL_336:
    if ((v149 - 7) >= 6)
    {
      v164 = 0;
      if ((v149 - 13) >= 6 && v149 != 1)
        v164 = (llvm *)*((_QWORD *)&v315 + 1);
    }
    else
    {
      v164 = 0;
    }
    v165 = sub_22E6D7128(a1, v164);
    if (!v165)
      goto LABEL_455;
    v166 = (uint64_t)v165;
    if ((*(_BYTE *)(*((_QWORD *)&v315 + 1) + 5) & 1) != 0)
      sub_22F190FD8(a1, (uint64_t)&v315, 0);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 1) & 0x40) != 0)
    {
      v167 = *(_QWORD *)(a1 + 88);
      v168 = *(_DWORD *)v166 & 0x7FFFFFFF;
      v169 = *(_DWORD *)(v167 + 304);
      v170 = v169 + 1;
      if (v169 + 1 > 1)
      {
        if ((v169 & 0x80000000) != 0)
        {
          if (((*(_QWORD *)(*(_QWORD *)(v167 + 224) + 8 * ((-2 - v169) >> 6)) >> (-2 - v169)) & 1) != 0)
          {
            v171 = (_DWORD *)(*(_QWORD *)(v167 + 200) + 24 * (-2 - v169));
          }
          else
          {
            v289 = *(_QWORD *)(a1 + 88);
            v290 = *(_DWORD *)v166 & 0x7FFFFFFF;
            v291 = sub_22F1E1134(v167, -2 - v169, 0);
            v168 = v290;
            v171 = (_DWORD *)v291;
            v167 = v289;
          }
        }
        else
        {
          v171 = (_DWORD *)(*(_QWORD *)(v167 + 184) + 24 * v169);
        }
      }
      else
      {
        v171 = *(_DWORD **)(v167 + 184);
      }
      if ((*v171 & 0x7FFFFFFFu) > v168)
        goto LABEL_362;
      if (v169 == -2)
        goto LABEL_372;
      if (v170 == *(_DWORD *)(v167 + 192))
      {
        v176 = *(_DWORD *)(v167 + 216);
      }
      else
      {
        if ((v170 & 0x80000000) != 0)
        {
          v179 = -3 - v169;
          if (((*(_QWORD *)(*(_QWORD *)(v167 + 224) + 8 * ((-3 - v169) >> 6)) >> (-3 - v169)) & 1) != 0)
          {
            v178 = (_DWORD *)(*(_QWORD *)(v167 + 200) + 24 * v179);
          }
          else
          {
            v293 = v167;
            v294 = v168;
            v295 = sub_22F1E1134(v167, v179, 0);
            v168 = v294;
            v178 = (_DWORD *)v295;
            v167 = v293;
          }
        }
        else
        {
          v178 = (_DWORD *)(*(_QWORD *)(v167 + 184) + 24 * v170);
        }
        v176 = *v178 & 0x7FFFFFFF;
      }
      if (v176 > v168)
LABEL_372:
        v175 = *(_DWORD *)(v167 + 304);
      else
LABEL_362:
        v175 = sub_22F1E1EE8(v167, v168);
      if (v175 == *(_DWORD *)(a1 + 2264))
      {
        v180 = *(_QWORD *)(*((_QWORD *)&v315 + 1) + 16);
        v181 = *(_DWORD *)v180;
        if (*(int *)v180 <= 14)
        {
          if (v181 != 6)
          {
            if (v181 == 8 && *(_QWORD *)(v180 + 16) == 0x676E6F7274735F5FLL)
              goto LABEL_390;
            goto LABEL_401;
          }
          v187 = *(_DWORD *)(v180 + 16);
          v188 = *(unsigned __int16 *)(v180 + 20);
          if (v187 != 1702322015 || v188 != 27489)
            goto LABEL_401;
LABEL_390:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 128) + 24) & 0x10) == 0
            || (v190 = sub_22F1E361C(*(_QWORD **)(a1 + 88), *v31), v190 == 3)
            || !v190)
          {
            if ((sub_22F14F4DC(v8, v166, a1, (**(_QWORD **)(a1 + 56) >> 5) & 1) & 1) == 0)
            {
              v191 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v191 + 312) = *(_DWORD *)v8;
              *(_DWORD *)(v191 + 316) = 1343;
              if (*(char *)(v191 + 311) < 0)
              {
                **(_BYTE **)(v191 + 288) = 0;
                *(_QWORD *)(v191 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v191 + 288) = 0;
                *(_BYTE *)(v191 + 311) = 0;
              }
              v306[0] = v191 + 320;
              v306[1] = 0;
              v306[2] = v191;
              v307 = 1;
              *(_BYTE *)(v191 + 320) = 0;
              *(_DWORD *)(v191 + 664) = 0;
              v252 = *(unsigned int *)(v191 + 776);
              if ((_DWORD)v252)
              {
                v253 = *(_QWORD *)(v191 + 768);
                v254 = 56 * v252;
                do
                {
                  if (*(char *)(v253 + v254 - 9) < 0)
                    operator delete(*(void **)(v253 + v254 - 32));
                  v254 -= 56;
                }
                while (v254);
              }
              *(_DWORD *)(v191 + 776) = 0;
              v156 = v306;
LABEL_352:
              sub_22E3BB0B8((uint64_t)v156);
            }
          }
          return;
        }
        if (v181 == 15)
        {
          v192 = *(_QWORD *)(v180 + 16);
          v184 = *(_QWORD *)(v180 + 23);
          v185 = v192 == 0x65726F7475615F5FLL;
          v186 = 0x676E697361656C65;
        }
        else
        {
          if (v181 != 19)
            goto LABEL_401;
          v182 = *(_QWORD *)(v180 + 16);
          v183 = *(_QWORD *)(v180 + 24);
          v184 = *(_QWORD *)(v180 + 27);
          v185 = v182 == 0x656661736E755F5FLL && v183 == 0x69617465726E755FLL;
          v186 = 0x64656E6961746572;
        }
        if (v185 && v184 == v186)
          goto LABEL_390;
      }
    }
LABEL_401:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 128) + 24) & 0x10) == 0
      || (v194 = sub_22F1E361C(*(_QWORD **)(a1 + 88), *v31), v194 == 3)
      || !v194)
    {
      v195 = *(_WORD *)(v166 + 36);
      if ((v195 & 0x280) == 0x200)
      {
        v196 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v196 + 312) = *(_DWORD *)v166;
        *(_DWORD *)(v196 + 316) = 1273;
        if (*(char *)(v196 + 311) < 0)
        {
          **(_BYTE **)(v196 + 288) = 0;
          *(_QWORD *)(v196 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v196 + 288) = 0;
          *(_BYTE *)(v196 + 311) = 0;
        }
        v304[0] = v196 + 320;
        v304[1] = 0;
        v304[2] = v196;
        v305 = 1;
        *(_BYTE *)(v196 + 320) = 0;
        *(_DWORD *)(v196 + 664) = 0;
        v197 = *(unsigned int *)(v196 + 776);
        if ((_DWORD)v197)
        {
          v198 = *(_QWORD *)(v196 + 768);
          v199 = 56 * v197;
          do
          {
            if (*(char *)(v198 + v199 - 9) < 0)
              operator delete(*(void **)(v198 + v199 - 32));
            v199 -= 56;
          }
          while (v199);
        }
        *(_DWORD *)(v196 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v304);
        v195 = *(_WORD *)(v166 + 36);
      }
      if ((v195 & 0x10) != 0)
      {
        v201 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v201 + 312) = v315;
        *(_DWORD *)(v201 + 316) = 1233;
        if (*(char *)(v201 + 311) < 0)
        {
          **(_BYTE **)(v201 + 288) = 0;
          *(_QWORD *)(v201 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v201 + 288) = 0;
          *(_BYTE *)(v201 + 311) = 0;
        }
        v302[0] = v201 + 320;
        v302[1] = 0;
        v302[2] = v201;
        v303 = 1;
        *(_BYTE *)(v201 + 320) = 0;
        *(_DWORD *)(v201 + 664) = 0;
        v202 = (_DWORD *)(v201 + 776);
        v203 = *(unsigned int *)(v201 + 776);
        if ((_DWORD)v203)
        {
          v204 = *(_QWORD *)(v201 + 768);
          v205 = 56 * v203;
          do
          {
            if (*(char *)(v204 + v205 - 9) < 0)
              operator delete(*(void **)(v204 + v205 - 32));
            v205 -= 56;
          }
          while (v205);
        }
        v206 = v302;
        goto LABEL_452;
      }
      if ((v195 & 0x100) == 0 && (sub_22F14F4DC(v8, v166, a1, (**(_QWORD **)(a1 + 56) >> 5) & 1) & 1) == 0)
      {
        v200 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v200 + 312) = *(_DWORD *)v8;
        *(_DWORD *)(v200 + 316) = 1230;
        if (*(char *)(v200 + 311) < 0)
        {
          **(_BYTE **)(v200 + 288) = 0;
          *(_QWORD *)(v200 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v200 + 288) = 0;
          *(_BYTE *)(v200 + 311) = 0;
        }
        v334 = (void *)(v200 + 320);
        v335 = 0;
        v336 = v200;
        v337 = 1;
        *(_BYTE *)(v200 + 320) = 0;
        *(_DWORD *)(v200 + 664) = 0;
        v207 = *(unsigned int *)(v200 + 776);
        if ((_DWORD)v207)
        {
          v208 = *(_QWORD *)(v200 + 768);
          v209 = 56 * v207;
          do
          {
            if (*(char *)(v208 + v209 - 9) < 0)
              operator delete(*(void **)(v208 + v209 - 32));
            v209 -= 56;
          }
          while (v209);
        }
        *(_DWORD *)(v200 + 776) = 0;
        if ((unsigned __int16)v316 - 7 < 6
          || ((unsigned __int16)v316 - 13 >= 6 ? (v210 = (unsigned __int16)v316 == 1) : (v210 = 1), v210))
        {
          v286 = 0;
        }
        else
        {
          v286 = *((_QWORD *)&v315 + 1);
        }
        v211 = (unsigned __int8 *)v334;
        if (!v334)
        {
          v211 = (unsigned __int8 *)sub_22E3B8AAC(v335);
          v334 = v211;
        }
        v211[*v211 + 1] = 5;
        v212 = v334;
        v213 = *(unsigned __int8 *)v334;
        *(_BYTE *)v334 = v213 + 1;
        v212[v213 + 2] = v286;
        sub_22E3BB0B8((uint64_t)&v334);
        v214 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v214 + 312) = *(_DWORD *)v166;
        *(_DWORD *)(v214 + 316) = 109;
        if (*(char *)(v214 + 311) < 0)
        {
          **(_BYTE **)(v214 + 288) = 0;
          *(_QWORD *)(v214 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v214 + 288) = 0;
          *(_BYTE *)(v214 + 311) = 0;
        }
        v300[0] = v214 + 320;
        v300[1] = 0;
        v300[2] = v214;
        v301 = 1;
        *(_BYTE *)(v214 + 320) = 0;
        *(_DWORD *)(v214 + 664) = 0;
        v202 = (_DWORD *)(v214 + 776);
        v215 = *(unsigned int *)(v214 + 776);
        if ((_DWORD)v215)
        {
          v216 = *(_QWORD *)(v214 + 768);
          v217 = 56 * v215;
          do
          {
            if (*(char *)(v216 + v217 - 9) < 0)
              operator delete(*(void **)(v216 + v217 - 32));
            v217 -= 56;
          }
          while (v217);
        }
        v206 = v300;
LABEL_452:
        *v202 = 0;
        sub_22E3BB0B8((uint64_t)v206);
      }
    }
    if ((*(_WORD *)(v166 + 36) & 0x200) != 0)
    {
      LODWORD(v334) = *(_DWORD *)v166;
      sub_22F16F250((_DWORD *)(a1 + 1984), (int *)&v334);
    }
LABEL_455:
    if ((unsigned __int16)v316 - 7 >= 6)
    {
      v218 = 0;
      if ((unsigned __int16)v316 - 13 >= 6 && (unsigned __int16)v316 != 1)
        v218 = (llvm *)*((_QWORD *)&v315 + 1);
    }
    else
    {
      v218 = 0;
    }
    v219 = *(_DWORD *)v8;
    v220 = sub_22E3CD3D4(v297, 24, 3);
    *(_QWORD *)v220 = 0;
    *(_DWORD *)(v220 + 8) = v219;
    *(_BYTE *)(v220 + 12) = *(_BYTE *)(v220 + 12) & 0xF0 | 8;
    *(_QWORD *)(v220 + 16) = v8;
    sub_22F175FD4(a1, v218, (uint64_t *)v220);
    if (sub_22F1E3734(*(_QWORD **)(a1 + 88), *(_DWORD *)v8))
    {
      v221 = *(_DWORD *)v8;
      if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32), 0x4F9u, *(_DWORD *)v8, *(_QWORD *)(a1 + 48)) != 1&& (*(_WORD *)(a1 + 536) & 0x40) == 0)
      {
        v222 = *(_QWORD *)(a1 + 88);
        v223 = v221 & 0x7FFFFFFF;
        v224 = *(_DWORD *)(v222 + 304);
        v225 = v224 + 1;
        if (v224 + 1 > 1)
        {
          if ((v224 & 0x80000000) != 0)
          {
            if (((*(_QWORD *)(*(_QWORD *)(v222 + 224) + 8 * ((-2 - v224) >> 6)) >> (-2 - v224)) & 1) != 0)
            {
              v226 = (_DWORD *)(*(_QWORD *)(v222 + 200) + 24 * (-2 - v224));
            }
            else
            {
              v292 = v223;
              v226 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 88), -2 - v224, 0);
              v223 = v292;
            }
          }
          else
          {
            v226 = (_DWORD *)(*(_QWORD *)(v222 + 184) + 24 * v224);
          }
        }
        else
        {
          v226 = *(_DWORD **)(v222 + 184);
        }
        if ((*v226 & 0x7FFFFFFFu) > v223)
          goto LABEL_470;
        if (v224 == -2
          || (v225 != *(_DWORD *)(v222 + 192)
            ? ((v225 & 0x80000000) != 0
             ? ((v255 = -3 - v224,
                 ((*(_QWORD *)(*(_QWORD *)(v222 + 224) + 8 * ((-3 - v224) >> 6)) >> (-3 - v224)) & 1) == 0)
              ? (_DWORD *)(v296 = v223, v229 = (_DWORD *)sub_22F1E1134(v222, v255, 0), v223 = v296)
              : (v229 = (_DWORD *)(*(_QWORD *)(v222 + 200) + 24 * v255)))
             : (v229 = (_DWORD *)(*(_QWORD *)(v222 + 184) + 24 * v225)),
               v228 = *v229 & 0x7FFFFFFF)
            : (v228 = *(_DWORD *)(v222 + 216)),
              v228 > v223))
        {
          v227 = *(_DWORD *)(v222 + 304);
        }
        else
        {
LABEL_470:
          v227 = sub_22F1E1EE8(v222, v223);
        }
        if (v227 != *(_DWORD *)(a1 + 2264))
        {
          *(_WORD *)(v8 + 36) |= 0x200u;
          LODWORD(v329) = *(_DWORD *)v8;
          sub_22F415580((uint64_t)&v334, a1 + 1984, (int *)&v329);
        }
      }
    }
    v256 = *(_QWORD *)(a1 + 1088);
    if (v256)
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v256 + 240))(v256, &v315, v220);
    if ((**(_QWORD **)(a1 + 56) & 0x110) == 0x10)
    {
      v257 = *(_QWORD *)(*((_QWORD *)&v315 + 1) + 16);
      if (*(_DWORD *)v257 == 6)
      {
        v258 = *(_DWORD *)(v257 + 16);
        v259 = *(unsigned __int16 *)(v257 + 20);
        if (v258 == 1702064993 && v259 == 29810)
        {
          v261 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "static_assert", 0xDuLL);
          if (!sub_22F2EE534(a1, v261))
          {
            v262 = sub_22E3CD3D4(v297, 48, 3);
            *(_OWORD *)v262 = 0u;
            *(_OWORD *)(v262 + 16) = 0u;
            *(_WORD *)(v262 + 36) &= 0xF800u;
            *(_QWORD *)(v262 + 40) = *(_QWORD *)(a1 + 2848);
            *(_QWORD *)(a1 + 2848) = v262;
            v263 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "_Static_assert", 0xEuLL);
            *(_DWORD *)(v262 + 28) = 1;
            v264 = sub_22E3CD3D4(v297, 24, 3);
            *(_QWORD *)v264 = 0;
            *(_QWORD *)(v264 + 8) = v263;
            *(_DWORD *)(v264 + 16) = 120;
            *(_QWORD *)(v262 + 16) = v264;
            v265 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "static_assert", 0xDuLL);
            v266 = *(_DWORD *)v262;
            v267 = sub_22E3CD3D4(v297, 24, 3);
            *(_QWORD *)v267 = 0;
            *(_DWORD *)(v267 + 8) = v266;
            *(_BYTE *)(v267 + 12) = *(_BYTE *)(v267 + 12) & 0xF0 | 8;
            *(_QWORD *)(v267 + 16) = v262;
            sub_22F175FD4(a1, v265, (uint64_t *)v267);
          }
        }
      }
    }
    return;
  }
  if ((unsigned __int16)v316 - 7 >= 6)
  {
    v150 = 0;
    if ((unsigned __int16)v316 - 13 >= 6 && (unsigned __int16)v316 != 1)
      v150 = (llvm *)*((_QWORD *)&v315 + 1);
  }
  else
  {
    v150 = 0;
  }
  v151 = sub_22E6D7128(a1, v150);
  if (!v151 || (sub_22F14F4DC(v8, (uint64_t)v151, a1, (**(_QWORD **)(a1 + 56) >> 5) & 1) & 1) == 0)
  {
    v152 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v152 + 312) = *(_DWORD *)v8;
    *(_DWORD *)(v152 + 316) = 1340;
    if (*(char *)(v152 + 311) < 0)
    {
      **(_BYTE **)(v152 + 288) = 0;
      *(_QWORD *)(v152 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v152 + 288) = 0;
      *(_BYTE *)(v152 + 311) = 0;
    }
    v334 = (void *)(v152 + 320);
    v335 = 0;
    v336 = v152;
    v337 = 1;
    *(_BYTE *)(v152 + 320) = 0;
    *(_DWORD *)(v152 + 664) = 0;
    v157 = *(unsigned int *)(v152 + 776);
    if ((_DWORD)v157)
    {
      v158 = *(_QWORD *)(v152 + 768);
      v159 = 56 * v157;
      do
      {
        if (*(char *)(v158 + v159 - 9) < 0)
          operator delete(*(void **)(v158 + v159 - 32));
        v159 -= 56;
      }
      while (v159);
    }
    *(_DWORD *)(v152 + 776) = 0;
    if ((unsigned __int16)v316 - 7 < 6
      || ((unsigned __int16)v316 - 13 >= 6 ? (v160 = (unsigned __int16)v316 == 1) : (v160 = 1), v160))
    {
      v177 = 0;
    }
    else
    {
      v177 = *((_QWORD *)&v315 + 1);
    }
    v161 = (unsigned __int8 *)v334;
    if (!v334)
    {
      v161 = (unsigned __int8 *)sub_22E3B8AAC(v335);
      v334 = v161;
    }
    v161[*v161 + 1] = 5;
    v162 = v334;
    v163 = *(unsigned __int8 *)v334;
    *(_BYTE *)v334 = v163 + 1;
    v162[v163 + 2] = v177;
    sub_22E3BB0B8((uint64_t)&v334);
  }
  if ((**(_BYTE **)(a1 + 56) & 0x20) != 0)
  {
    v149 = (unsigned __int16)v316;
    goto LABEL_336;
  }
}

uint64_t sub_22F16833C(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  __n128 *v32;
  _QWORD v33[3];
  __int16 v34;
  int v35[4];
  __int16 v36;

  result = sub_22F18FE0C(a1, (uint64_t)v35, 1);
  if ((result & 1) == 0)
  {
    if (v36 == 15)
    {
      v13 = *(_QWORD *)(a1 + 1096);
      if (!v13)
      {
        v21 = sub_22F16437C(a1, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 16, 1);
        result = sub_22F16BDD4(a1, a2, (unsigned int *)a3, (uint64_t)v35, v21, a4, a5, a6);
        if ((_DWORD)result == 4)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 112) + 9) = 1;
          *(_WORD *)(a3 + 16) = 1;
          *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 184) = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 152);
          return result;
        }
        v23 = v22;
        if ((_DWORD)result == 2)
        {
          v24 = operator new[]();
          v25 = (_BYTE *)v24;
          v26 = 436;
        }
        else
        {
          if ((_DWORD)result != 1)
            return result;
          v24 = operator new[]();
          v25 = (_BYTE *)v24;
          v26 = 437;
        }
        *(_DWORD *)v24 = a2;
        *(_DWORD *)(v24 + 4) = v21;
        *(_QWORD *)(v24 + 8) = v23;
        *(_QWORD *)(v24 + 16) = v26;
        return (uint64_t)sub_22F1735E4(a1, v25, 1, 1, 1, 0);
      }
      sub_22F163BBC(a1);
      LODWORD(v14) = v35[0];
      if (v35[0] < 0)
        v14 = sub_22F1E2828(*(_QWORD **)(a1 + 88), v35[0]) >> 32;
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1008) + 32))(*(_QWORD *)(a1 + 1008));
      result = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, a1, v14, v15);
      if ((result & 0xFF00000000) != 0)
      {
        v16 = result;
        v17 = sub_22E6155EC(*(_QWORD **)(a1 + 88), result);
        v18 = *(unsigned __int16 *)(a3 + 16);
        if ((v18 - 7) >= 6)
        {
          v19 = 0;
          if ((v18 - 13) >= 6 && v18 != 1)
            v19 = *(_QWORD *)(a3 + 8);
        }
        else
        {
          v19 = 0;
        }
        v30 = sub_22F1D32AC(v19);
        if (v17)
          v31 = v30 == 17;
        else
          v31 = 0;
        if (v31)
        {
          v32 = sub_22F13B0E4(*(_QWORD **)(a1 + 104), v17);
          v32->n128_u16[0] |= 1u;
        }
        return sub_22F172FA4(a1, v16, 0, 0, v35[0], 1);
      }
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v20 + 312) = v35[0];
      *(_DWORD *)(v20 + 316) = 1124;
      if (*(char *)(v20 + 311) < 0)
      {
        **(_BYTE **)(v20 + 288) = 0;
        *(_QWORD *)(v20 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v20 + 288) = 0;
        *(_BYTE *)(v20 + 311) = 0;
      }
      v33[0] = v20 + 320;
      v33[1] = 0;
      v33[2] = v20;
      v34 = 1;
      *(_BYTE *)(v20 + 320) = 0;
      *(_DWORD *)(v20 + 664) = 0;
      v27 = *(unsigned int *)(v20 + 776);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v20 + 768);
        v29 = 56 * v27;
        do
        {
          if (*(char *)(v28 + v29 - 9) < 0)
            operator delete(*(void **)(v28 + v29 - 32));
          v29 -= 56;
        }
        while (v29);
      }
      *(_DWORD *)(v20 + 776) = 0;
      result = sub_22E3BB0B8((uint64_t)v33);
      if (v36 != 2)
        return sub_22F163BBC(a1);
    }
  }
  return result;
}

void sub_22F168624(unint64_t a1, unsigned int *a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int *v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  size_t v85;
  void **v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  int v101;
  char v102;
  llvm *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  const char *v130;
  uint64_t v131;
  int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int v154;
  int v155;
  _BOOL4 v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(void);
  uint64_t v162;
  unsigned int v163;
  int v164;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  uint64_t *v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  int v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  int v183;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  _DWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  llvm *v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  char v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  size_t v258;
  void **v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  _QWORD v280[3];
  __int16 v281;
  _QWORD v282[3];
  __int16 v283;
  _QWORD v284[3];
  __int16 v285;
  __int128 v286;
  uint64_t v287;
  _DWORD v288[4];
  __int16 v289;
  __int16 v290;
  unsigned int v291;
  _QWORD v292[3];
  __int16 v293;
  unsigned int v294[5];
  int v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int16 v300;
  int v301[4];
  __int16 v302;
  __int16 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int16 v307;
  uint64_t v308;
  llvm *v309;
  uint64_t v310;
  __int16 v311;
  __int128 v312;
  uint64_t v313;
  __int16 v314;
  void *v315;
  _BYTE v316[512];
  int v317;
  void *v318;
  _BYTE v319[40];
  char v320;
  char v321;
  uint64_t v322;

  v322 = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE **)(a1 + 1016);
  v4[24] = 1;
  v5 = *(_QWORD *)(a1 + 1008);
  if (v5)
    *(_BYTE *)(v5 + 178) = 0;
  v6 = v4[33];
  v4[33] = 0;
  ++*(_DWORD *)(a1 + 2176);
  v7 = v4[32];
  v286 = *(_OWORD *)a2;
  v287 = *((_QWORD *)a2 + 2);
  v8 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v8 | 0x20;
  sub_22F18FB4C(a1, a2);
  v9 = *(_WORD *)(a1 + 536);
  v10 = v9 & 0xFFDF | v8 & 0x20;
  *(_WORD *)(a1 + 536) = v10;
  if ((v9 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) != 0)
      *(_WORD *)(a1 + 536) = v10 & 0xFFDF;
    if (*(_BYTE *)(a1 + 2273) || *(_BYTE *)(a1 + 2272))
    {
      v16 = *((unsigned __int16 *)a2 + 8);
      if ((v16 - 7) >= 6 && (v16 - 13) >= 6 && v16 != 1)
      {
        v19 = *((_QWORD *)a2 + 1);
        if (v19)
        {
          v20 = v286;
          if (sub_22F1D32AC(*((_QWORD *)a2 + 1)) == 12)
          {
            v21 = a1;
            v22 = (int *)a2;
            v23 = 0;
LABEL_32:
            sub_22F165CAC(v21, v22, v23);
            goto LABEL_22;
          }
          if (*(_BYTE *)(a1 + 2273) && sub_22F1D32AC(v19) == 10)
          {
            v37 = a1;
            v38 = v20;
LABEL_63:
            v39 = (uint64_t)a2;
            v40 = 0;
            v41 = 0;
            v42 = 0;
LABEL_64:
            sub_22F16833C(v37, v38, v39, v40, v41, v42);
            goto LABEL_22;
          }
          if (*(_BYTE *)(a1 + 2272))
          {
            if (sub_22F1D32AC(v19) == 16)
            {
              sub_22F18FB4C(a1, a2);
              v43 = *((unsigned __int16 *)a2 + 8);
              if ((v43 - 7) >= 6 && (v43 - 13) >= 6 && v43 != 1)
              {
                v44 = *((_QWORD *)a2 + 1);
                if (v44)
                {
                  v45 = *(_DWORD **)(v44 + 16);
                  if (*v45 == 7)
                  {
                    v46 = v45[4];
                    v47 = *(_DWORD *)((char *)v45 + 19);
                    if (v46 == 1936876648 && v47 == 1886352499)
                    {
                      sub_22F183EE8(a1, (unint64_t)a2);
                      goto LABEL_22;
                    }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_21;
    }
    v17 = *((unsigned __int16 *)a2 + 8);
    if (v17 == 2)
      goto LABEL_22;
    if (v17 != 7)
    {
      if (v17 == 3)
      {
        *(_BYTE *)(a1 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 6) = 1;
        v18 = *(_QWORD *)(a1 + 744);
        if (v18)
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v18 + 16))(v18, *(_DWORD *)(*(_QWORD *)(a1 + 1016) + 72) != 0);
        goto LABEL_22;
      }
      if ((v17 - 7) >= 6 && (v17 - 13) >= 6 && v17 != 1)
      {
        v64 = *((_QWORD *)a2 + 1);
        if (v64)
        {
          switch(sub_22F1D32AC(*((_QWORD *)a2 + 1)))
          {
            case 1u:
              ++*(_DWORD *)(a1 + 2192);
              v308 = 0;
              v104 = sub_22F16F408(a1, &v308);
              *(_QWORD *)&v312 = v104;
              DWORD2(v312) = v105;
              v106 = *(_QWORD *)(a1 + 1016);
              if (!v106)
                goto LABEL_22;
              v107 = v104;
              if (*(_DWORD *)(v106 + 72))
                goto LABEL_190;
              if (v7 || (v255 = v308) == 0 || (v104 & 1) == 0)
              {
                *(_WORD *)(v106 + 32) = 1;
                *(_QWORD *)(v106 + 40) = 0;
                *(_QWORD *)(v106 + 48) = 0;
                goto LABEL_190;
              }
              if (*(_QWORD *)(v106 + 40))
              {
                *(_WORD *)(v106 + 32) = 1;
LABEL_572:
                *(_QWORD *)(v106 + 40) = 0;
                *(_QWORD *)(v106 + 48) = 0;
                goto LABEL_190;
              }
              v277 = *a2;
              v278 = *(unsigned __int8 *)(v106 + 34);
              *(_BYTE *)(v106 + 32) = 1;
              if (v278)
              {
                *(_BYTE *)(v106 + 33) = 0;
                goto LABEL_572;
              }
              *(_BYTE *)(v106 + 33) = 1;
              *(_QWORD *)(v106 + 40) = v255;
              *(_DWORD *)(v106 + 56) = v277;
LABEL_190:
              v108 = *(_QWORD *)(a1 + 1088);
              if (v108)
              {
                if ((v107 & 1) != 0)
                  v109 = 2;
                else
                  v109 = 1;
                (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v108 + 280))(v108, *a2, *(_QWORD *)((char *)&v312 + 4), v109);
              }
              v110 = *(_QWORD *)(a1 + 32);
              if (*(_BYTE *)(v110 + 249))
              {
                v111 = sub_22F1E3734(*(_QWORD **)(a1 + 88), *a2);
                v110 = *(_QWORD *)(a1 + 32);
              }
              else
              {
                v111 = 0;
              }
              if (*(_BYTE *)(v110 + 194) && (v107 & 0x100) != 0)
                goto LABEL_295;
              v112 = *a2;
              if (((v107 | v111) & 1) == 0)
              {
                v152 = v286;
                v153 = a1;
                v154 = v112;
                v155 = 0;
                v156 = 0;
                v157 = 0;
LABEL_346:
                sub_22F164590(v153, v152, v154, v155, v156, v157);
                goto LABEL_22;
              }
              v113 = *(_QWORD *)(a1 + 1016);
              v114 = *(_DWORD *)(v113 + 72);
              if (v114 >= *(_DWORD *)(v113 + 76))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v114 = *(_DWORD *)(v113 + 72);
              }
              *(_QWORD *)(*(_QWORD *)(v113 + 64) + 8 * v114) = v112 | 0x10000000000;
              goto LABEL_298;
            case 2u:
              v99 = a1;
              v100 = a2;
              v101 = 0;
              v102 = 1;
              goto LABEL_203;
            case 3u:
              v102 = v7 != 0;
              v99 = a1;
              v100 = a2;
              v101 = 1;
LABEL_203:
              sub_22F16A96C(v99, v100, (unsigned int *)&v286, v101, v102);
              goto LABEL_22;
            case 4u:
            case 5u:
            case 6u:
              v65 = sub_22F1D32AC(v64);
              v66 = v65;
              if (v65 == 5)
                v67 = 1;
              else
                v67 = 2;
              if (v65 == 4)
                v68 = 0;
              else
                v68 = v67;
              ++*(_DWORD *)(a1 + 2196);
              v69 = sub_22F163BBC(a1);
              v70 = *(_QWORD *)(a1 + 1016);
              v71 = *(unsigned int *)(v70 + 72);
              if (!(_DWORD)v71)
              {
                v92 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v92 + 312) = *a2;
                *(_DWORD *)(v92 + 316) = 1265;
                if (*(char *)(v92 + 311) < 0)
                {
                  **(_BYTE **)(v92 + 288) = 0;
                  *(_QWORD *)(v92 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v92 + 288) = 0;
                  *(_BYTE *)(v92 + 311) = 0;
                }
                v141 = (unsigned __int8 *)(v92 + 320);
                v312 = (unint64_t)(v92 + 320);
                v313 = v92;
                v314 = 1;
                *(_BYTE *)(v92 + 320) = 0;
                *(_DWORD *)(v92 + 664) = 0;
                v142 = *(unsigned int *)(v92 + 776);
                if ((_DWORD)v142)
                {
                  v143 = *(_QWORD *)(v92 + 768);
                  v144 = 56 * v142;
                  do
                  {
                    if (*(char *)(v143 + v144 - 9) < 0)
                      operator delete(*(void **)(v143 + v144 - 32));
                    v144 -= 56;
                  }
                  while (v144);
                  LODWORD(v142) = *v141;
                }
                *(_DWORD *)(v92 + 776) = 0;
                v141[v142 + 1] = 2;
                *(_BYTE *)(v92 + 320) = v142 + 1;
                *(_QWORD *)&v141[8 * v142 + 16] = v68;
                goto LABEL_361;
              }
              v279 = v69;
              v72 = *(_QWORD *)(*(_QWORD *)(v70 + 64) + 8 * v71 - 8);
              v73 = v71 - 1;
              *(_DWORD *)(v70 + 72) = v73;
              if (!v73)
              {
                *(_WORD *)(v70 + 32) = 1;
                *(_QWORD *)(v70 + 40) = 0;
                *(_QWORD *)(v70 + 48) = 0;
              }
              if (BYTE6(v72))
              {
                v74 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v74 + 312) = *a2;
                *(_DWORD *)(v74 + 316) = 1264;
                if (*(char *)(v74 + 311) < 0)
                {
                  **(_BYTE **)(v74 + 288) = 0;
                  *(_QWORD *)(v74 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v74 + 288) = 0;
                  *(_BYTE *)(v74 + 311) = 0;
                }
                v135 = (unsigned __int8 *)(v74 + 320);
                v312 = (unint64_t)(v74 + 320);
                v313 = v74;
                v314 = 1;
                *(_BYTE *)(v74 + 320) = 0;
                *(_DWORD *)(v74 + 664) = 0;
                v136 = v74;
                v137 = *(unsigned int *)(v74 + 776);
                if ((_DWORD)v137)
                {
                  v138 = *(_QWORD *)(v136 + 768);
                  v139 = 56 * v137;
                  do
                  {
                    if (*(char *)(v138 + v139 - 9) < 0)
                      operator delete(*(void **)(v138 + v139 - 32));
                    v139 -= 56;
                  }
                  while (v139);
                  LODWORD(v137) = *v135;
                }
                *(_DWORD *)(v136 + 776) = 0;
                v135[v137 + 1] = 2;
                *(_BYTE *)(v136 + 320) = v137 + 1;
                *(_QWORD *)&v135[8 * v137 + 16] = v68;
                sub_22E3BB0B8((uint64_t)&v312);
              }
              v140 = *(_QWORD *)(a1 + 1088);
              if (!v140)
                goto LABEL_285;
              if (v66 == 6)
              {
                v161 = *(void (**)(void))(*(_QWORD *)v140 + 336);
              }
              else
              {
                if (v66 != 5)
                {
                  if (v66 == 4)
                    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v140 + 288))(v140, *a2, v279, 0, v72);
LABEL_285:
                  v162 = *(_QWORD *)(a1 + 32);
                  if (*(_BYTE *)(v162 + 249))
                  {
                    v163 = sub_22F1E3734(*(_QWORD **)(a1 + 88), *a2);
                    v162 = *(_QWORD *)(a1 + 32);
                  }
                  else
                  {
                    v163 = 0;
                  }
                  v164 = *(unsigned __int8 *)(v162 + 194);
                  if (((v72 & 0xFF0000000000) != 0 || v164 == 0) && v163 == 0)
                  {
                    v152 = v286;
                    v156 = BYTE6(v72) != 0;
                    v157 = *a2;
                    v154 = v72;
                    v153 = a1;
                    v155 = 1;
                    goto LABEL_346;
                  }
LABEL_295:
                  v113 = *(_QWORD *)(a1 + 1016);
                  v167 = *a2;
                  v168 = *(_DWORD *)(v113 + 72);
                  if (v168 >= *(_DWORD *)(v113 + 76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v168 = *(_DWORD *)(v113 + 72);
                  }
                  *(_QWORD *)(*(_QWORD *)(v113 + 64) + 8 * v168) = v167;
LABEL_298:
                  ++*(_DWORD *)(v113 + 72);
                  goto LABEL_22;
                }
                v161 = *(void (**)(void))(*(_QWORD *)v140 + 312);
              }
              v161();
              goto LABEL_285;
            case 7u:
              ++*(_DWORD *)(a1 + 2196);
              sub_22F16437C(a1, (uint64_t)"else", 0);
              v115 = *(_QWORD *)(a1 + 1016);
              v116 = *(unsigned int *)(v115 + 72);
              if (!(_DWORD)v116)
              {
                v145 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v145 + 312) = *a2;
                *(_DWORD *)(v145 + 316) = 1267;
                if (*(char *)(v145 + 311) < 0)
                {
                  **(_BYTE **)(v145 + 288) = 0;
                  *(_QWORD *)(v145 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v145 + 288) = 0;
                  *(_BYTE *)(v145 + 311) = 0;
                }
                v312 = (unint64_t)(v145 + 320);
                v313 = v145;
                v314 = 1;
                *(_BYTE *)(v145 + 320) = 0;
                *(_DWORD *)(v145 + 664) = 0;
                v188 = *(unsigned int *)(v145 + 776);
                if ((_DWORD)v188)
                {
                  v189 = *(_QWORD *)(v145 + 768);
                  v190 = 56 * v188;
                  do
                  {
                    if (*(char *)(v189 + v190 - 9) < 0)
                      operator delete(*(void **)(v189 + v190 - 32));
                    v190 -= 56;
                  }
                  while (v190);
                }
                goto LABEL_360;
              }
              v117 = *(_QWORD *)(*(_QWORD *)(v115 + 64) + 8 * v116 - 8);
              v118 = v116 - 1;
              *(_DWORD *)(v115 + 72) = v118;
              if (!v118)
              {
                *(_WORD *)(v115 + 32) = 1;
                *(_QWORD *)(v115 + 40) = 0;
                *(_QWORD *)(v115 + 48) = 0;
              }
              if ((v117 & 0xFF000000000000) != 0)
              {
                v119 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v119 + 312) = *a2;
                *(_DWORD *)(v119 + 316) = 1266;
                if (*(char *)(v119 + 311) < 0)
                {
                  **(_BYTE **)(v119 + 288) = 0;
                  *(_QWORD *)(v119 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v119 + 288) = 0;
                  *(_BYTE *)(v119 + 311) = 0;
                }
                v308 = v119 + 320;
                v309 = 0;
                v310 = v119;
                v311 = 1;
                *(_BYTE *)(v119 + 320) = 0;
                *(_DWORD *)(v119 + 664) = 0;
                v177 = *(unsigned int *)(v119 + 776);
                if ((_DWORD)v177)
                {
                  v178 = *(_QWORD *)(v119 + 768);
                  v179 = 56 * v177;
                  do
                  {
                    if (*(char *)(v178 + v179 - 9) < 0)
                      operator delete(*(void **)(v178 + v179 - 32));
                    v179 -= 56;
                  }
                  while (v179);
                }
                *(_DWORD *)(v119 + 776) = 0;
                sub_22E3BB0B8((uint64_t)&v308);
              }
              v180 = *(_QWORD *)(a1 + 1088);
              if (v180)
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v180 + 344))(v180, *a2, v117);
              v181 = *(_QWORD *)(a1 + 32);
              if (*(_BYTE *)(v181 + 249))
              {
                v182 = sub_22F1E3734(*(_QWORD **)(a1 + 88), *a2);
                v181 = *(_QWORD *)(a1 + 32);
              }
              else
              {
                v182 = 0;
              }
              v183 = *(unsigned __int8 *)(v181 + 194);
              if (((v117 & 0xFF0000000000) != 0 || v183 == 0) && v182 == 0)
              {
                v152 = v286;
                v157 = *a2;
                v154 = v117;
                v153 = a1;
                v155 = 1;
                v156 = 1;
                goto LABEL_346;
              }
              v186 = *(_QWORD *)(a1 + 1016);
              v187 = *(_DWORD *)(v186 + 72);
              if (v187 >= *(_DWORD *)(v186 + 76))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v187 = *(_DWORD *)(v186 + 72);
              }
              *(_QWORD *)(*(_QWORD *)(v186 + 64) + 8 * v187) = v117 | 0x1000000000000;
              ++*(_DWORD *)(v186 + 72);
              goto LABEL_22;
            case 8u:
              ++*(_DWORD *)(a1 + 2200);
              sub_22F16437C(a1, (uint64_t)"endif", 0);
              v120 = *(_QWORD *)(a1 + 1016);
              v121 = *(unsigned int *)(v120 + 72);
              if ((_DWORD)v121)
              {
                v122 = *(unsigned int *)(*(_QWORD *)(v120 + 64) + 8 * v121 - 8);
                v123 = v121 - 1;
                *(_DWORD *)(v120 + 72) = v123;
                if (!v123)
                {
                  if (*(_QWORD *)(v120 + 40))
                  {
                    *(_WORD *)(v120 + 32) = 0;
                  }
                  else
                  {
                    *(_WORD *)(v120 + 32) = 1;
                    *(_QWORD *)(v120 + 40) = 0;
                    *(_QWORD *)(v120 + 48) = 0;
                  }
                }
                v204 = *(_QWORD *)(a1 + 1088);
                if (v204)
                  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v204 + 352))(v204, *a2, v122);
                goto LABEL_22;
              }
              v145 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v145 + 312) = *a2;
              *(_DWORD *)(v145 + 316) = 1113;
              if (*(char *)(v145 + 311) < 0)
              {
                **(_BYTE **)(v145 + 288) = 0;
                *(_QWORD *)(v145 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v145 + 288) = 0;
                *(_BYTE *)(v145 + 311) = 0;
              }
              v312 = (unint64_t)(v145 + 320);
              v313 = v145;
              v314 = 1;
              *(_BYTE *)(v145 + 320) = 0;
              *(_DWORD *)(v145 + 664) = 0;
              v191 = *(unsigned int *)(v145 + 776);
              if ((_DWORD)v191)
              {
                v192 = *(_QWORD *)(v145 + 768);
                v193 = 56 * v191;
                do
                {
                  if (*(char *)(v192 + v193 - 9) < 0)
                    operator delete(*(void **)(v192 + v193 - 32));
                  v193 -= 56;
                }
                while (v193);
              }
LABEL_360:
              *(_DWORD *)(v145 + 776) = 0;
              goto LABEL_361;
            case 0xAu:
              v38 = v286;
              v37 = a1;
              goto LABEL_63;
            case 0xBu:
              v129 = v286;
              v130 = sub_22F1E3690(*(_QWORD **)(a1 + 88), *a2, 0);
              if (v131 == 10 && *(_QWORD *)v130 == 0x692D746C6975623CLL && *((_WORD *)v130 + 4) == 15982)
              {
                sub_22F16833C(a1, v129, (uint64_t)a2, 0, 0, 0);
                do
                  sub_22F18FB4C(a1, &v308);
                while ((unsigned __int16)v310 != 67);
                goto LABEL_22;
              }
              v133 = *a2;
              v76 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v76 + 312) = v133;
              *(_DWORD *)(v76 + 316) = 1269;
              if (*(char *)(v76 + 311) < 0)
              {
                **(_BYTE **)(v76 + 288) = 0;
                *(_QWORD *)(v76 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v76 + 288) = 0;
                *(_BYTE *)(v76 + 311) = 0;
              }
              v312 = (unint64_t)(v76 + 320);
              v313 = v76;
              v314 = 1;
              *(_BYTE *)(v76 + 320) = 0;
              *(_DWORD *)(v76 + 664) = 0;
              v158 = *(unsigned int *)(v76 + 776);
              if ((_DWORD)v158)
              {
                v159 = *(_QWORD *)(v76 + 768);
                v160 = 56 * v158;
                do
                {
                  if (*(char *)(v159 + v160 - 9) < 0)
                    operator delete(*(void **)(v159 + v160 - 32));
                  v160 -= 56;
                }
                while (v160);
              }
              goto LABEL_145;
            case 0xCu:
              v23 = v6 != 0;
              v21 = a1;
              v22 = (int *)a2;
              goto LABEL_32;
            case 0xDu:
              ++*(_DWORD *)(a1 + 2184);
              sub_22F164274(a1, (uint64_t)&v308, 2, 0);
              if ((unsigned __int16)v310 == 2)
                goto LABEL_22;
              sub_22F16437C(a1, (uint64_t)"undef", 0);
              if ((unsigned __int16)v310 - 7 >= 6)
              {
                v103 = 0;
                if ((unsigned __int16)v310 - 13 >= 6 && (unsigned __int16)v310 != 1)
                  v103 = v309;
              }
              else
              {
                v103 = 0;
              }
              sub_22E6D719C(a1, v103, &v304);
              if ((*((_BYTE *)v103 + 5) & 1) != 0)
                sub_22F190FD8(a1, (uint64_t)&v308, 1);
              if (v306)
              {
                v171 = (uint64_t *)(*(_QWORD *)(v305 + 8 * v306 - 8) + 16);
              }
              else
              {
                if ((v304 & 0xFFFFFFFFFFFFFFF8) == 0
                  || (v176 = sub_22F14FEA4((uint64_t *)(v304 & 0xFFFFFFFFFFFFFFF8))) == 0)
                {
                  v172 = 0;
                  goto LABEL_471;
                }
                v171 = v176 + 2;
              }
              v172 = *v171;
              if (*v171)
              {
                v173 = *(_WORD *)(v172 + 36);
                if ((v173 & 0x280) == 0x200)
                {
                  v174 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)(v174 + 312) = *(_DWORD *)v172;
                  *(_DWORD *)(v174 + 316) = 1273;
                  if (*(char *)(v174 + 311) < 0)
                  {
                    **(_BYTE **)(v174 + 288) = 0;
                    *(_QWORD *)(v174 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v174 + 288) = 0;
                    *(_BYTE *)(v174 + 311) = 0;
                  }
                  v312 = (unint64_t)(v174 + 320);
                  v313 = v174;
                  v314 = 1;
                  *(_BYTE *)(v174 + 320) = 0;
                  *(_DWORD *)(v174 + 664) = 0;
                  v235 = *(unsigned int *)(v174 + 776);
                  if ((_DWORD)v235)
                  {
                    v236 = *(_QWORD *)(v174 + 768);
                    v237 = 56 * v235;
                    do
                    {
                      if (*(char *)(v236 + v237 - 9) < 0)
                        operator delete(*(void **)(v236 + v237 - 32));
                      v237 -= 56;
                    }
                    while (v237);
                  }
                  *(_DWORD *)(v174 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)&v312);
                  v173 = *(_WORD *)(v172 + 36);
                }
                if ((v173 & 0x200) != 0)
                {
                  LODWORD(v297) = *(_DWORD *)v172;
                  sub_22F16F250((_DWORD *)(a1 + 1984), (int *)&v297);
                }
                v238 = v308;
                v172 = sub_22E3CD3D4(a1 + 128, 16, 3);
                *(_QWORD *)v172 = 0;
                *(_DWORD *)(v172 + 8) = v238;
                *(_BYTE *)(v172 + 12) = *(_BYTE *)(v172 + 12) & 0xF0 | 9;
              }
LABEL_471:
              v239 = *(_QWORD *)(a1 + 1088);
              if (v239)
                (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v239 + 248))(v239, &v308, &v304, v172);
              if (!v172)
                goto LABEL_22;
              v240 = a1;
              v241 = v103;
              v242 = (uint64_t *)v172;
              goto LABEL_475;
            case 0xEu:
              sub_22F18FB4C(a1, v292);
              v294[0] = 0;
              if ((sub_22F16B0C0((uint64_t)v292, v294, 1145, a1, 0) & 1) != 0)
                goto LABEL_22;
              v97 = v294[0];
              if (!v294[0])
              {
                v98 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v98 + 312) = v292[0];
                *(_DWORD *)(v98 + 316) = 1229;
                if (*(char *)(v98 + 311) < 0)
                {
                  **(_BYTE **)(v98 + 288) = 0;
                  *(_QWORD *)(v98 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v98 + 288) = 0;
                  *(_BYTE *)(v98 + 311) = 0;
                }
                v308 = v98 + 320;
                v309 = 0;
                v310 = v98;
                v311 = 1;
                *(_BYTE *)(v98 + 320) = 0;
                *(_DWORD *)(v98 + 664) = 0;
                v205 = *(unsigned int *)(v98 + 776);
                if ((_DWORD)v205)
                {
                  v206 = *(_QWORD *)(v98 + 768);
                  v207 = 56 * v205;
                  do
                  {
                    if (*(char *)(v206 + v207 - 9) < 0)
                      operator delete(*(void **)(v206 + v207 - 32));
                    v207 -= 56;
                  }
                  while (v207);
                }
                *(_DWORD *)(v98 + 776) = 0;
                sub_22E3BB0B8((uint64_t)&v308);
              }
              v208 = **(_QWORD **)(a1 + 56);
              if ((v208 & 0x201) != 0)
                v209 = 0x80000000;
              else
                v209 = 0x8000;
              if (v97 >= v209)
              {
                v211 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v211 + 312) = v292[0];
                *(_DWORD *)(v211 + 316) = 1228;
                if (*(char *)(v211 + 311) < 0)
                {
                  **(_BYTE **)(v211 + 288) = 0;
                  *(_QWORD *)(v211 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v211 + 288) = 0;
                  *(_BYTE *)(v211 + 311) = 0;
                }
                v212 = (unsigned __int8 *)(v211 + 320);
                v312 = (unint64_t)(v211 + 320);
                v313 = v211;
                v314 = 1;
                *(_BYTE *)(v211 + 320) = 0;
                *(_DWORD *)(v211 + 664) = 0;
                v213 = *(unsigned int *)(v211 + 776);
                if ((_DWORD)v213)
                {
                  v214 = *(_QWORD *)(v211 + 768);
                  v215 = 56 * v213;
                  do
                  {
                    if (*(char *)(v214 + v215 - 9) < 0)
                      operator delete(*(void **)(v214 + v215 - 32));
                    v215 -= 56;
                  }
                  while (v215);
                  v212 = (unsigned __int8 *)v312;
                  *(_DWORD *)(v211 + 776) = 0;
                  if (!v212)
                  {
                    v212 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v312 + 1));
                    *(_QWORD *)&v312 = v212;
                  }
                }
                else
                {
                  *(_DWORD *)(v211 + 776) = 0;
                }
                v212[*v212 + 1] = 3;
                v216 = v312;
                v217 = *(unsigned __int8 *)v312;
                *(_BYTE *)v312 = v217 + 1;
                *(_QWORD *)(v216 + 8 * v217 + 16) = v209;
                v218 = (uint64_t *)&v312;
                goto LABEL_439;
              }
              if (v97 >= 0x8000 && (v208 & 0x200) != 0)
              {
                v210 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v210 + 312) = v292[0];
                *(_DWORD *)(v210 + 316) = 1308;
                if (*(char *)(v210 + 311) < 0)
                {
                  **(_BYTE **)(v210 + 288) = 0;
                  *(_QWORD *)(v210 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v210 + 288) = 0;
                  *(_BYTE *)(v210 + 311) = 0;
                }
                v304 = v210 + 320;
                v305 = 0;
                v306 = v210;
                v307 = 1;
                *(_BYTE *)(v210 + 320) = 0;
                *(_DWORD *)(v210 + 664) = 0;
                v224 = *(unsigned int *)(v210 + 776);
                if ((_DWORD)v224)
                {
                  v225 = *(_QWORD *)(v210 + 768);
                  v226 = 56 * v224;
                  do
                  {
                    if (*(char *)(v225 + v226 - 9) < 0)
                      operator delete(*(void **)(v225 + v226 - 32));
                    v226 -= 56;
                  }
                  while (v226);
                }
                *(_DWORD *)(v210 + 776) = 0;
                v218 = &v304;
LABEL_439:
                sub_22E3BB0B8((uint64_t)v218);
              }
              sub_22F18FB4C(a1, v301);
              if (v302 == 2)
              {
                v228 = -1;
LABEL_448:
                v229 = sub_22F1E361C(*(_QWORD **)(a1 + 88), v292[0]);
                sub_22F1E0B64(*(_QWORD **)(a1 + 88), v292[0], v97, v228, 0, 0, v229);
                v230 = *(_QWORD *)(a1 + 1088);
                if (v230)
                {
                  v231 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1016) + 32))(*(_QWORD *)(a1 + 1016));
                  (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v230 + 16))(v230, v231, 3, v229, 0);
                }
                goto LABEL_22;
              }
              if (v302 == 13)
              {
                if ((v303 & 0x20) == 0)
                {
                  sub_22F14E1D0((uint64_t)&v312, (uint64_t)v301, 1, (_QWORD *)a1);
                  if (!v320)
                  {
                    if (!v321)
                    {
                      v257 = v315;
                      v258 = (v317 - (_DWORD)v315);
                      v259 = (void **)sub_22F1E0AA0(*(_QWORD *)(a1 + 88));
                      v228 = sub_22F1E07D8(v259, v257, v258);
                      v260 = 1;
                      sub_22F16437C(a1, (uint64_t)"line", 1);
                      goto LABEL_533;
                    }
                    v227 = *(_QWORD *)(a1 + 48);
                    *(_DWORD *)(v227 + 312) = v301[0];
                    *(_DWORD *)(v227 + 316) = 1146;
                    if (*(char *)(v227 + 311) < 0)
                    {
                      **(_BYTE **)(v227 + 288) = 0;
                      *(_QWORD *)(v227 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v227 + 288) = 0;
                      *(_BYTE *)(v227 + 311) = 0;
                    }
                    v297 = v227 + 320;
                    v298 = 0;
                    v299 = v227;
                    v300 = 1;
                    *(_BYTE *)(v227 + 320) = 0;
                    *(_DWORD *)(v227 + 664) = 0;
                    v265 = *(unsigned int *)(v227 + 776);
                    if ((_DWORD)v265)
                    {
                      v266 = *(_QWORD *)(v227 + 768);
                      v267 = 56 * v265;
                      do
                      {
                        if (*(char *)(v266 + v267 - 9) < 0)
                          operator delete(*(void **)(v266 + v267 - 32));
                        v267 -= 56;
                      }
                      while (v267);
                    }
                    *(_DWORD *)(v227 + 776) = 0;
                    sub_22E3BB0B8((uint64_t)&v297);
                  }
                  sub_22F163BBC(a1);
                  v260 = 0;
                  v228 = -1;
LABEL_533:
                  if (v318 != v319)
                    free(v318);
                  if (v315 != v316)
                    free(v315);
                  if (!v260)
                    goto LABEL_22;
                  goto LABEL_448;
                }
                v76 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v76 + 312) = v301[0];
                *(_DWORD *)(v76 + 316) = 32;
                if (*(char *)(v76 + 311) < 0)
                {
                  **(_BYTE **)(v76 + 288) = 0;
                  *(_QWORD *)(v76 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v76 + 288) = 0;
                  *(_BYTE *)(v76 + 311) = 0;
                }
                v312 = (unint64_t)(v76 + 320);
                v313 = v76;
                v314 = 1;
                *(_BYTE *)(v76 + 320) = 0;
                *(_DWORD *)(v76 + 664) = 0;
                v246 = *(unsigned int *)(v76 + 776);
                if ((_DWORD)v246)
                {
                  v247 = *(_QWORD *)(v76 + 768);
                  v248 = 56 * v246;
                  do
                  {
                    if (*(char *)(v247 + v248 - 9) < 0)
                      operator delete(*(void **)(v247 + v248 - 32));
                    v248 -= 56;
                  }
                  while (v248);
                }
              }
              else
              {
                v76 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v76 + 312) = v301[0];
                *(_DWORD *)(v76 + 316) = 1144;
                if (*(char *)(v76 + 311) < 0)
                {
                  **(_BYTE **)(v76 + 288) = 0;
                  *(_QWORD *)(v76 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v76 + 288) = 0;
                  *(_BYTE *)(v76 + 311) = 0;
                }
                v312 = (unint64_t)(v76 + 320);
                v313 = v76;
                v314 = 1;
                *(_BYTE *)(v76 + 320) = 0;
                *(_DWORD *)(v76 + 664) = 0;
                v232 = *(unsigned int *)(v76 + 776);
                if ((_DWORD)v232)
                {
                  v233 = *(_QWORD *)(v76 + 768);
                  v234 = 56 * v232;
                  do
                  {
                    if (*(char *)(v233 + v234 - 9) < 0)
                      operator delete(*(void **)(v233 + v234 - 32));
                    v234 -= 56;
                  }
                  while (v234);
                }
              }
              break;
            case 0xFu:
              v93 = a1;
              v94 = a2;
              v95 = 0;
              goto LABEL_273;
            case 0x10u:
              sub_22F416608(a1, (unint64_t)v286 << 32);
              goto LABEL_22;
            case 0x11u:
              v124 = v286;
              v125 = **(_QWORD **)(a1 + 56);
              if ((v125 & 0x4000) != 0)
                goto LABEL_381;
              if ((v125 & 0x10) != 0)
              {
                v175 = *a2;
                v76 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v76 + 312) = v175;
                *(_DWORD *)(v76 + 316) = 1134;
                if (*(char *)(v76 + 311) < 0)
                {
                  **(_BYTE **)(v76 + 288) = 0;
                  *(_QWORD *)(v76 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v76 + 288) = 0;
                  *(_BYTE *)(v76 + 311) = 0;
                }
                v312 = (unint64_t)(v76 + 320);
                v313 = v76;
                v314 = 1;
                *(_BYTE *)(v76 + 320) = 0;
                *(_DWORD *)(v76 + 664) = 0;
                v201 = *(unsigned int *)(v76 + 776);
                if ((_DWORD)v201)
                {
                  v202 = *(_QWORD *)(v76 + 768);
                  v203 = 56 * v201;
                  do
                  {
                    if (*(char *)(v202 + v203 - 9) < 0)
                      operator delete(*(void **)(v202 + v203 - 32));
                    v203 -= 56;
                  }
                  while (v203);
                }
                goto LABEL_145;
              }
              v126 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v126 + 312) = *a2;
              *(_DWORD *)(v126 + 316) = 1225;
              if (*(char *)(v126 + 311) < 0)
              {
                **(_BYTE **)(v126 + 288) = 0;
                *(_QWORD *)(v126 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v126 + 288) = 0;
                *(_BYTE *)(v126 + 311) = 0;
              }
              v308 = v126 + 320;
              v309 = 0;
              v310 = v126;
              v311 = 1;
              *(_BYTE *)(v126 + 320) = 0;
              *(_DWORD *)(v126 + 664) = 0;
              v198 = *(unsigned int *)(v126 + 776);
              if ((_DWORD)v198)
              {
                v199 = *(_QWORD *)(v126 + 768);
                v200 = 56 * v198;
                do
                {
                  if (*(char *)(v199 + v200 - 9) < 0)
                    operator delete(*(void **)(v199 + v200 - 32));
                  v200 -= 56;
                }
                while (v200);
              }
              *(_DWORD *)(v126 + 776) = 0;
              sub_22E3BB0B8((uint64_t)&v308);
LABEL_381:
              v37 = a1;
              v38 = v124;
              goto LABEL_63;
            case 0x12u:
              v127 = v286;
              v128 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v128 + 312) = *a2;
              *(_DWORD *)(v128 + 316) = 1226;
              if (*(char *)(v128 + 311) < 0)
              {
                **(_BYTE **)(v128 + 288) = 0;
                *(_QWORD *)(v128 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v128 + 288) = 0;
                *(_BYTE *)(v128 + 311) = 0;
              }
              v312 = (unint64_t)(v128 + 320);
              v313 = v128;
              v314 = 1;
              *(_BYTE *)(v128 + 320) = 0;
              *(_DWORD *)(v128 + 664) = 0;
              v146 = *(unsigned int *)(v128 + 776);
              if ((_DWORD)v146)
              {
                v147 = *(_QWORD *)(v128 + 768);
                v148 = 56 * v146;
                do
                {
                  if (*(char *)(v147 + v148 - 9) < 0)
                    operator delete(*(void **)(v147 + v148 - 32));
                  v148 -= 56;
                }
                while (v148);
              }
              *(_DWORD *)(v128 + 776) = 0;
              sub_22E3BB0B8((uint64_t)&v312);
              sub_22F16BBCC((_QWORD *)a1, a2, &v308);
              v40 = v308;
              v41 = (uint64_t)v309;
              v42 = v310;
              v37 = a1;
              v38 = v127;
              v39 = (uint64_t)a2;
              goto LABEL_64;
            case 0x13u:
              v134 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v134 + 312) = *a2;
              *(_DWORD *)(v134 + 316) = 1235;
              if (*(char *)(v134 + 311) < 0)
              {
                **(_BYTE **)(v134 + 288) = 0;
                *(_QWORD *)(v134 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v134 + 288) = 0;
                *(_BYTE *)(v134 + 311) = 0;
              }
              v282[0] = v134 + 320;
              v282[1] = 0;
              v282[2] = v134;
              v283 = 1;
              *(_BYTE *)(v134 + 320) = 0;
              *(_DWORD *)(v134 + 664) = 0;
              v149 = *(unsigned int *)(v134 + 776);
              if ((_DWORD)v149)
              {
                v150 = *(_QWORD *)(v134 + 768);
                v151 = 56 * v149;
                do
                {
                  if (*(char *)(v150 + v151 - 9) < 0)
                    operator delete(*(void **)(v150 + v151 - 32));
                  v151 -= 56;
                }
                while (v151);
              }
              *(_DWORD *)(v134 + 776) = 0;
              sub_22E3BB0B8((uint64_t)v282);
              v93 = a1;
              v94 = a2;
              v95 = 1;
LABEL_273:
              sub_22F16AC2C(v93, v94, v95);
              goto LABEL_22;
            case 0x14u:
            case 0x15u:
              sub_22F16AE20(a1, a2);
              goto LABEL_22;
            case 0x18u:
              if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200200000000000) == 0)
                goto LABEL_54;
              sub_22F164274(a1, (uint64_t)&v308, 2, 0);
              if ((unsigned __int16)v310 == 2)
                goto LABEL_22;
              sub_22F16437C(a1, (uint64_t)"__public_macro", 0);
              if ((unsigned __int16)v310 - 7 >= 6)
              {
                v96 = 0;
                if ((unsigned __int16)v310 - 13 >= 6 && (unsigned __int16)v310 != 1)
                  v96 = (uint64_t)v309;
              }
              else
              {
                v96 = 0;
              }
              if (sub_22F415358(a1, v96))
              {
                v254 = v308;
                v252 = sub_22E3CD3D4(a1 + 128, 16, 3);
                v242 = (uint64_t *)v252;
                *(_QWORD *)v252 = 0;
                *(_DWORD *)(v252 + 8) = v254;
                v253 = *(_BYTE *)(v252 + 12) & 0xF0 | 0xA;
                goto LABEL_505;
              }
              v256 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v256 + 312) = v308;
              *(_DWORD *)(v256 + 316) = 1173;
              if (*(char *)(v256 + 311) < 0)
              {
                **(_BYTE **)(v256 + 288) = 0;
                *(_QWORD *)(v256 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v256 + 288) = 0;
                *(_BYTE *)(v256 + 311) = 0;
              }
              v268 = (unsigned __int8 *)(v256 + 320);
              v312 = (unint64_t)(v256 + 320);
              v313 = v256;
              v314 = 1;
              *(_BYTE *)(v256 + 320) = 0;
              *(_DWORD *)(v256 + 664) = 0;
              v269 = *(unsigned int *)(v256 + 776);
              if (!(_DWORD)v269)
                goto LABEL_553;
              v272 = *(_QWORD *)(v256 + 768);
              v273 = 56 * v269;
              do
              {
                if (*(char *)(v272 + v273 - 9) < 0)
                  operator delete(*(void **)(v272 + v273 - 32));
                v273 -= 56;
              }
              while (v273);
              goto LABEL_552;
            case 0x19u:
              if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200200000000000) == 0)
                goto LABEL_54;
              sub_22F164274(a1, (uint64_t)&v308, 2, 0);
              if ((unsigned __int16)v310 == 2)
                goto LABEL_22;
              sub_22F16437C(a1, (uint64_t)"__private_macro", 0);
              if ((unsigned __int16)v310 - 7 >= 6)
              {
                v96 = 0;
                if ((unsigned __int16)v310 - 13 >= 6 && (unsigned __int16)v310 != 1)
                  v96 = (uint64_t)v309;
              }
              else
              {
                v96 = 0;
              }
              if (sub_22F415358(a1, v96))
              {
                v251 = v308;
                v252 = sub_22E3CD3D4(a1 + 128, 16, 3);
                v242 = (uint64_t *)v252;
                *(_QWORD *)v252 = 0;
                *(_DWORD *)(v252 + 8) = v251;
                v253 = *(_BYTE *)(v252 + 12) & 0xF0 | 2;
LABEL_505:
                *(_BYTE *)(v252 + 12) = v253;
                v240 = a1;
                v241 = (llvm *)v96;
LABEL_475:
                sub_22F175FD4(v240, v241, v242);
              }
              else
              {
                v256 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v256 + 312) = v308;
                *(_DWORD *)(v256 + 316) = 1173;
                if (*(char *)(v256 + 311) < 0)
                {
                  **(_BYTE **)(v256 + 288) = 0;
                  *(_QWORD *)(v256 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v256 + 288) = 0;
                  *(_BYTE *)(v256 + 311) = 0;
                }
                v268 = (unsigned __int8 *)(v256 + 320);
                v312 = (unint64_t)(v256 + 320);
                v313 = v256;
                v314 = 1;
                *(_BYTE *)(v256 + 320) = 0;
                *(_DWORD *)(v256 + 664) = 0;
                v269 = *(unsigned int *)(v256 + 776);
                if ((_DWORD)v269)
                {
                  v270 = *(_QWORD *)(v256 + 768);
                  v271 = 56 * v269;
                  do
                  {
                    if (*(char *)(v270 + v271 - 9) < 0)
                      operator delete(*(void **)(v270 + v271 - 32));
                    v271 -= 56;
                  }
                  while (v271);
LABEL_552:
                  LODWORD(v269) = *v268;
                }
LABEL_553:
                *(_DWORD *)(v256 + 776) = 0;
                v268[v269 + 1] = 5;
                *(_BYTE *)(v256 + 320) = v269 + 1;
                *(_QWORD *)&v268[8 * v269 + 16] = v96;
LABEL_361:
                sub_22E3BB0B8((uint64_t)&v312);
              }
              goto LABEL_22;
            default:
              goto LABEL_54;
          }
          goto LABEL_145;
        }
      }
LABEL_54:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 3) & 0x40) != 0)
      {
        v36 = operator new[]();
        *(_OWORD *)v36 = v286;
        *(_QWORD *)(v36 + 16) = v287;
        *(_OWORD *)(v36 + 24) = *(_OWORD *)a2;
        *(_QWORD *)(v36 + 40) = *((_QWORD *)a2 + 2);
        if (*((_WORD *)a2 + 8) == 67)
          *(_WORD *)(v36 + 40) = 0;
        sub_22F1735E4(a1, (_BYTE *)v36, 2, 0, 1, 0);
        goto LABEL_22;
      }
      v35 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v35 + 312) = *a2;
      *(_DWORD *)(v35 + 316) = 1139;
      if (*(char *)(v35 + 311) < 0)
      {
        **(_BYTE **)(v35 + 288) = 0;
        *(_QWORD *)(v35 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v35 + 288) = 0;
        *(_BYTE *)(v35 + 311) = 0;
      }
      v280[0] = v35 + 320;
      v280[1] = 0;
      v280[2] = v35;
      v281 = 1;
      *(_BYTE *)(v35 + 320) = 0;
      *(_DWORD *)(v35 + 664) = 0;
      v49 = *(unsigned int *)(v35 + 776);
      if ((_DWORD)v49)
      {
        v50 = *(_QWORD *)(v35 + 768);
        v51 = 56 * v49;
        do
        {
          if (*(char *)(v50 + v51 - 9) < 0)
            operator delete(*(void **)(v50 + v51 - 32));
          v51 -= 56;
        }
        while (v51);
      }
      *(_DWORD *)(v35 + 776) = 0;
      v52 = (__int128 *)v280;
      goto LABEL_85;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 3) & 0x40) != 0)
      goto LABEL_54;
    v291 = 0;
    if ((sub_22F16B0C0((uint64_t)a2, &v291, 1149, a1, 1u) & 1) != 0)
      goto LABEL_22;
    sub_22F18FB4C(a1, v288);
    if (v289 != 13)
    {
      if (v289 == 2)
      {
        v27 = (uint64_t)sub_22F1E361C(*(_QWORD **)(a1 + 88), *a2);
        v28 = 0;
        v29 = 0;
        v30 = -1;
LABEL_44:
        sub_22F1E0B64(*(_QWORD **)(a1 + 88), *a2, v291, v30, v28, v29, v27);
        v31 = *(_QWORD *)(a1 + 1088);
        if (v31)
        {
          if (v29)
            v32 = 1;
          else
            v32 = 3;
          if (v28)
            v33 = 0;
          else
            v33 = v32;
          v34 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1016) + 32))(*(_QWORD *)(a1 + 1016));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, v34, v33, v27, 0);
        }
        goto LABEL_22;
      }
      v76 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v76 + 312) = v288[0];
      *(_DWORD *)(v76 + 316) = 1146;
      if (*(char *)(v76 + 311) < 0)
      {
        **(_BYTE **)(v76 + 288) = 0;
        *(_QWORD *)(v76 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v76 + 288) = 0;
        *(_BYTE *)(v76 + 311) = 0;
      }
      v312 = (unint64_t)(v76 + 320);
      v313 = v76;
      v314 = 1;
      *(_BYTE *)(v76 + 320) = 0;
      *(_DWORD *)(v76 + 664) = 0;
      v77 = *(unsigned int *)(v76 + 776);
      if ((_DWORD)v77)
      {
        v78 = *(_QWORD *)(v76 + 768);
        v79 = 56 * v77;
        do
        {
          if (*(char *)(v78 + v79 - 9) < 0)
            operator delete(*(void **)(v78 + v79 - 32));
          v79 -= 56;
        }
        while (v79);
      }
LABEL_145:
      *(_DWORD *)(v76 + 776) = 0;
      v52 = &v312;
LABEL_85:
      sub_22E3BB0B8((uint64_t)v52);
LABEL_21:
      sub_22F163BBC(a1);
LABEL_22:
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v10 & 0x20;
      return;
    }
    if ((v290 & 0x20) != 0)
    {
      v76 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v76 + 312) = v288[0];
      *(_DWORD *)(v76 + 316) = 32;
      if (*(char *)(v76 + 311) < 0)
      {
        **(_BYTE **)(v76 + 288) = 0;
        *(_QWORD *)(v76 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v76 + 288) = 0;
        *(_BYTE *)(v76 + 311) = 0;
      }
      v312 = (unint64_t)(v76 + 320);
      v313 = v76;
      v314 = 1;
      *(_BYTE *)(v76 + 320) = 0;
      *(_DWORD *)(v76 + 664) = 0;
      v81 = *(unsigned int *)(v76 + 776);
      if ((_DWORD)v81)
      {
        v82 = *(_QWORD *)(v76 + 768);
        v83 = 56 * v81;
        do
        {
          if (*(char *)(v82 + v83 - 9) < 0)
            operator delete(*(void **)(v82 + v83 - 32));
          v83 -= 56;
        }
        while (v83);
      }
      goto LABEL_145;
    }
    sub_22F14E1D0((uint64_t)&v312, (uint64_t)v288, 1, (_QWORD *)a1);
    if (v320)
      goto LABEL_158;
    if (v321)
    {
      v75 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v75 + 312) = v288[0];
      *(_DWORD *)(v75 + 316) = 1146;
      if (*(char *)(v75 + 311) < 0)
      {
        **(_BYTE **)(v75 + 288) = 0;
        *(_QWORD *)(v75 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v75 + 288) = 0;
        *(_BYTE *)(v75 + 311) = 0;
      }
      v308 = v75 + 320;
      v309 = 0;
      v310 = v75;
      v311 = 1;
      *(_BYTE *)(v75 + 320) = 0;
      *(_DWORD *)(v75 + 664) = 0;
      v88 = *(unsigned int *)(v75 + 776);
      if ((_DWORD)v88)
      {
        v89 = *(_QWORD *)(v75 + 768);
        v90 = 56 * v88;
        do
        {
          if (*(char *)(v89 + v90 - 9) < 0)
            operator delete(*(void **)(v89 + v90 - 32));
          v90 -= 56;
        }
        while (v90);
      }
      *(_DWORD *)(v75 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v308);
LABEL_158:
      sub_22F163BBC(a1);
      v28 = 0;
      v29 = 0;
      v27 = 0;
LABEL_159:
      v87 = 0;
      v30 = -1;
      goto LABEL_160;
    }
    sub_22F18FB4C(a1, v301);
    if (v302 == 2)
    {
      v28 = 0;
LABEL_148:
      v29 = 0;
      v27 = 0;
      goto LABEL_149;
    }
    v296 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    if ((sub_22F16B0C0((uint64_t)v301, &v296, 1147, a1, 0) & 1) != 0)
      goto LABEL_159;
    v91 = v296;
    if (v296 != 2)
    {
      if (v296 != 1)
      {
        v28 = 0;
        v29 = 0;
        goto LABEL_364;
      }
      sub_22F18FB4C(a1, v301);
      if (v302 == 2)
      {
        v28 = 1;
        goto LABEL_148;
      }
      v194 = sub_22F16B0C0((uint64_t)v301, &v296, 1147, a1, 0);
      v195 = 0;
      v29 = 0;
      v27 = 0;
      v28 = 1;
      if ((v194 & 1) != 0)
        goto LABEL_159;
LABEL_363:
      v91 = v296;
      v29 = v195;
LABEL_364:
      if (v91 == 3)
      {
        sub_22F18FB4C(a1, v301);
        if (v302 == 2)
        {
          v27 = 1;
          if (!v29)
            goto LABEL_149;
          goto LABEL_367;
        }
        if ((sub_22F16B0C0((uint64_t)v301, &v296, 1147, a1, 0) & 1) != 0)
        {
          v27 = 1;
          goto LABEL_159;
        }
        if (v296 == 4)
        {
          sub_22F18FB4C(a1, v301);
          if (v302 == 2)
          {
            v27 = 2;
            if (!v29)
              goto LABEL_149;
            goto LABEL_367;
          }
          v261 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v261 + 312) = v301[0];
          *(_DWORD *)(v261 + 316) = 1147;
          if (*(char *)(v261 + 311) < 0)
          {
            **(_BYTE **)(v261 + 288) = 0;
            *(_QWORD *)(v261 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v261 + 288) = 0;
            *(_BYTE *)(v261 + 311) = 0;
          }
          v292[0] = v261 + 320;
          v292[1] = 0;
          v292[2] = v261;
          v293 = 1;
          *(_BYTE *)(v261 + 320) = 0;
          *(_DWORD *)(v261 + 664) = 0;
          v219 = (_DWORD *)(v261 + 776);
          v274 = *(unsigned int *)(v261 + 776);
          if ((_DWORD)v274)
          {
            v275 = *(_QWORD *)(v261 + 768);
            v276 = 56 * v274;
            do
            {
              if (*(char *)(v275 + v276 - 9) < 0)
                operator delete(*(void **)(v275 + v276 - 32));
              v276 -= 56;
            }
            while (v276);
          }
          v27 = 2;
          v223 = v292;
        }
        else
        {
          v250 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v250 + 312) = v301[0];
          *(_DWORD *)(v250 + 316) = 1147;
          if (*(char *)(v250 + 311) < 0)
          {
            **(_BYTE **)(v250 + 288) = 0;
            *(_QWORD *)(v250 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v250 + 288) = 0;
            *(_BYTE *)(v250 + 311) = 0;
          }
          v297 = v250 + 320;
          v298 = 0;
          v299 = v250;
          v27 = 1;
          v300 = 1;
          *(_BYTE *)(v250 + 320) = 0;
          *(_DWORD *)(v250 + 664) = 0;
          v219 = (_DWORD *)(v250 + 776);
          v262 = *(unsigned int *)(v250 + 776);
          if ((_DWORD)v262)
          {
            v263 = *(_QWORD *)(v250 + 768);
            v264 = 56 * v262;
            do
            {
              if (*(char *)(v263 + v264 - 9) < 0)
                operator delete(*(void **)(v263 + v264 - 32));
              v264 -= 56;
            }
            while (v264);
            v27 = 1;
          }
          v223 = &v297;
        }
      }
      else
      {
        v196 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v196 + 312) = v301[0];
        *(_DWORD *)(v196 + 316) = 1147;
        if (*(char *)(v196 + 311) < 0)
        {
          **(_BYTE **)(v196 + 288) = 0;
          *(_QWORD *)(v196 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v196 + 288) = 0;
          *(_BYTE *)(v196 + 311) = 0;
        }
        v304 = v196 + 320;
        v305 = 0;
        v306 = v196;
        v307 = 1;
        *(_BYTE *)(v196 + 320) = 0;
        *(_DWORD *)(v196 + 664) = 0;
        v219 = (_DWORD *)(v196 + 776);
        v220 = *(unsigned int *)(v196 + 776);
        if ((_DWORD)v220)
        {
          v221 = *(_QWORD *)(v196 + 768);
          v222 = 56 * v220;
          do
          {
            if (*(char *)(v221 + v222 - 9) < 0)
              operator delete(*(void **)(v221 + v222 - 32));
            v222 -= 56;
          }
          while (v222);
        }
        v27 = 0;
        v223 = &v304;
      }
      *v219 = 0;
      sub_22E3BB0B8((uint64_t)v223);
      sub_22F163BBC(a1);
      goto LABEL_159;
    }
    v169 = *(_QWORD *)(a1 + 88);
    v170 = sub_22E74B2B0(v169, v301[0]);
    sub_22F1E2F68(v169, v301[0], 1, (uint64_t)v294);
    if (*(_QWORD *)v294)
    {
      if (v295 && sub_22E74B2B0(v169, v295) == v170)
      {
        sub_22F18FB4C(a1, v301);
        if (v302 == 2)
        {
          v28 = 0;
          v27 = 0;
LABEL_367:
          v29 = 1;
          if (v317 == (_DWORD)v315)
          {
            v30 = -1;
            goto LABEL_150;
          }
LABEL_149:
          v84 = v315;
          v85 = (v317 - (_DWORD)v315);
          v86 = (void **)sub_22F1E0AA0(*(_QWORD *)(a1 + 88));
          v30 = sub_22F1E07D8(v86, v84, v85);
LABEL_150:
          v87 = 1;
          goto LABEL_160;
        }
        v249 = sub_22F16B0C0((uint64_t)v301, &v296, 1147, a1, 0);
        v28 = 0;
        v27 = 0;
        v195 = 1;
        v29 = 1;
        if ((v249 & 1) != 0)
          goto LABEL_159;
        goto LABEL_363;
      }
      v197 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v197 + 312) = v301[0];
      *(_DWORD *)(v197 + 316) = 1148;
      if (*(char *)(v197 + 311) < 0)
      {
        **(_BYTE **)(v197 + 288) = 0;
        *(_QWORD *)(v197 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v197 + 288) = 0;
        *(_BYTE *)(v197 + 311) = 0;
      }
      v308 = v197 + 320;
      v309 = 0;
      v310 = v197;
      v311 = 1;
      *(_BYTE *)(v197 + 320) = 0;
      *(_DWORD *)(v197 + 664) = 0;
      v243 = *(unsigned int *)(v197 + 776);
      if ((_DWORD)v243)
      {
        v244 = *(_QWORD *)(v197 + 768);
        v245 = 56 * v243;
        do
        {
          if (*(char *)(v244 + v245 - 9) < 0)
            operator delete(*(void **)(v244 + v245 - 32));
          v245 -= 56;
        }
        while (v245);
      }
      *(_DWORD *)(v197 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v308);
      sub_22F163BBC(a1);
    }
    v28 = 0;
    v27 = 0;
    v87 = 0;
    v30 = -1;
    v29 = 1;
LABEL_160:
    if (v318 != v319)
      free(v318);
    if (v315 != v316)
      free(v315);
    if (!v87)
      goto LABEL_22;
    goto LABEL_44;
  }
  v11 = *((unsigned __int16 *)a2 + 8);
  if ((v11 - 7) < 6
    || (v11 - 13) < 6
    || v11 == 1
    || (v24 = *((_QWORD *)a2 + 1)) == 0
    || (v25 = sub_22F1D32AC(*((_QWORD *)a2 + 1)), v25 > 0x12)
    || ((1 << v25) & 0x70C00) == 0)
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v12 + 312) = *a2;
    *(_DWORD *)(v12 + 316) = 1204;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v284[0] = v12 + 320;
    v284[1] = 0;
    v284[2] = v12;
    v285 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v13 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v12 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
    *(_DWORD *)(v12 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v284);
    v10 = *(_WORD *)(a1 + 536);
    goto LABEL_15;
  }
  v26 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v26 + 312) = *a2;
  *(_DWORD *)(v26 + 316) = 1039;
  if (*(char *)(v26 + 311) < 0)
  {
    **(_BYTE **)(v26 + 288) = 0;
    *(_QWORD *)(v26 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v26 + 288) = 0;
    *(_BYTE *)(v26 + 311) = 0;
  }
  v312 = (unint64_t)(v26 + 320);
  v313 = v26;
  v314 = 1;
  *(_BYTE *)(v26 + 320) = 0;
  *(_DWORD *)(v26 + 664) = 0;
  v53 = *(unsigned int *)(v26 + 776);
  if ((_DWORD)v53)
  {
    v54 = *(_QWORD *)(v26 + 768);
    v55 = 56 * v53;
    do
    {
      if (*(char *)(v54 + v55 - 9) < 0)
        operator delete(*(void **)(v54 + v55 - 32));
      v55 -= 56;
    }
    while (v55);
  }
  *(_DWORD *)(v26 + 776) = 0;
  sub_22E3B89A8((unsigned __int8 **)&v312, (void *)(*(_QWORD *)(v24 + 16) + 16), **(unsigned int **)(v24 + 16));
  sub_22E3BB0B8((uint64_t)&v312);
  v56 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v56 + 312) = **(_DWORD **)(a1 + 504);
  *(_DWORD *)(v56 + 316) = 1247;
  if (*(char *)(v56 + 311) < 0)
  {
    **(_BYTE **)(v56 + 288) = 0;
    *(_QWORD *)(v56 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v56 + 288) = 0;
    *(_BYTE *)(v56 + 311) = 0;
  }
  v312 = (unint64_t)(v56 + 320);
  v313 = v56;
  v314 = 1;
  *(_BYTE *)(v56 + 320) = 0;
  *(_DWORD *)(v56 + 664) = 0;
  v57 = *(unsigned int *)(v56 + 776);
  if ((_DWORD)v57)
  {
    v58 = *(_QWORD *)(v56 + 768);
    v59 = 56 * v57;
    do
    {
      if (*(char *)(v58 + v59 - 9) < 0)
        operator delete(*(void **)(v58 + v59 - 32));
      v59 -= 56;
    }
    while (v59);
  }
  *(_DWORD *)(v56 + 776) = 0;
  v60 = *(_QWORD *)(a1 + 504);
  v61 = *(unsigned __int16 *)(v60 + 16);
  if ((v61 - 7) < 6 || ((v61 - 13) >= 6 ? (v62 = v61 == 1) : (v62 = 1), v62))
    v80 = 0;
  else
    v80 = *(_QWORD *)(v60 + 8);
  v63 = *(unsigned __int8 *)(v56 + 320);
  *(_BYTE *)(v56 + 320 + v63 + 1) = 5;
  *(_BYTE *)(v56 + 320) = v63 + 1;
  *(_QWORD *)(v56 + 320 + 8 * v63 + 16) = v80;
  sub_22E3BB0B8((uint64_t)&v312);
  sub_22F163BBC(a1);
}

void sub_22F16A96C(unint64_t a1, unsigned int *a2, unsigned int *a3, int a4, char a5)
{
  uint64_t v9;
  const char *v10;
  llvm *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27[2];
  uint64_t v28;
  int v29;
  llvm *v30;
  unsigned __int16 v31;

  ++*(_DWORD *)(a1 + 2192);
  v9 = *a2;
  sub_22F164274(a1, (uint64_t)&v29, 0, 0);
  if (v31 == 2)
    goto LABEL_44;
  sub_22F165190(a1, (uint64_t)&v29);
  if (a4)
    v10 = "ifndef";
  else
    v10 = "ifdef";
  sub_22F16437C(a1, (uint64_t)v10, 0);
  if (v31 - 7 >= 6)
  {
    v11 = 0;
    if (v31 - 13 >= 6 && v31 != 1)
      v11 = v30;
  }
  else
  {
    v11 = 0;
  }
  sub_22E6D719C(a1, v11, v27);
  if (v28)
  {
    v12 = (uint64_t *)(*(_QWORD *)(v27[1] + 8 * v28 - 8) + 16);
LABEL_10:
    v13 = *v12;
    goto LABEL_15;
  }
  if ((v27[0] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = sub_22F14FEA4((uint64_t *)(v27[0] & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      v12 = v14 + 2;
      goto LABEL_10;
    }
  }
  v13 = 0;
LABEL_15:
  v15 = *(_QWORD *)(a1 + 1016);
  if (*(_DWORD *)(v15 + 72))
  {
    if (v13)
    {
LABEL_17:
      sub_22F17AC70(a1, v13);
      v16 = 1;
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  if ((a5 & 1) != 0 || v13)
  {
    *(_WORD *)(v15 + 32) = 1;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    if (v13)
      goto LABEL_17;
LABEL_23:
    v16 = 0;
    goto LABEL_29;
  }
  if (*(_QWORD *)(v15 + 40))
  {
    v16 = 0;
    *(_WORD *)(v15 + 32) = 1;
LABEL_28:
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    goto LABEL_29;
  }
  v17 = v29;
  v18 = *(unsigned __int8 *)(v15 + 34);
  *(_BYTE *)(v15 + 32) = 1;
  v16 = 0;
  if (v18)
  {
    *(_BYTE *)(v15 + 33) = 0;
    goto LABEL_28;
  }
  *(_BYTE *)(v15 + 33) = 1;
  *(_QWORD *)(v15 + 40) = v11;
  *(_DWORD *)(v15 + 56) = v17;
LABEL_29:
  v19 = *(_QWORD **)(a1 + 1088);
  if (v19)
  {
    v20 = 296;
    if (a4)
      v20 = 320;
    (*(void (**)(void))(*v19 + v20))();
  }
  v21 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v21 + 249))
  {
    v22 = sub_22F1E3734(*(_QWORD **)(a1 + 88), v9);
    v21 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v22 = 0;
  }
  if (*(_BYTE *)(v21 + 194))
    v23 = v16;
  else
    v23 = 1;
  if ((v23 & 1) == 0)
  {
    v24 = *(_QWORD *)(a1 + 1016);
    v26 = *(_DWORD *)(v24 + 72);
    if (v26 >= *(_DWORD *)(v24 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(v24 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(v24 + 64) + 8 * v26) = v9;
    goto LABEL_48;
  }
  if ((v16 ^ a4 | v22) != 1)
  {
LABEL_44:
    sub_22F164590(a1, *a3, v9, 0, 0, 0);
    return;
  }
  v24 = *(_QWORD *)(a1 + 1016);
  v25 = *(_DWORD *)(v24 + 72);
  if (v25 >= *(_DWORD *)(v24 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v24 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(v24 + 64) + 8 * v25) = v9 | 0x10000000000;
LABEL_48:
  ++*(_DWORD *)(v24 + 72);
}

void sub_22F16AC2C(uint64_t a1, _DWORD *a2, int a3)
{
  unint64_t first_not_of;
  unint64_t v7;
  unsigned __int8 *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  __int128 v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x24BDAC8D0];
  v21 = v23;
  v22 = xmmword_22F44E310;
  sub_22F146378(*(_QWORD *)(a1 + 1008), &v21);
  v17 = (unsigned __int8 *)v21;
  v18 = v22;
  first_not_of = llvm::StringRef::find_first_not_of((llvm::StringRef *)&v17);
  if (first_not_of >= v18)
    v7 = v18;
  else
    v7 = first_not_of;
  v8 = &v17[v7];
  v9 = v18 - v7;
  if (a3)
  {
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v10 + 312) = *a2;
    *(_DWORD *)(v10 + 316) = 1268;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v17 = (unsigned __int8 *)(v10 + 320);
    v18 = 0;
    v19 = v10;
    v20 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v11 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v10 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v10 + 312) = *a2;
    *(_DWORD *)(v10 + 316) = 1131;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v17 = (unsigned __int8 *)(v10 + 320);
    v18 = 0;
    v19 = v10;
    v20 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v14 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v10 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
    }
  }
  *(_DWORD *)(v10 + 776) = 0;
  sub_22E3B89A8(&v17, v8, v9);
  sub_22E3BB0B8((uint64_t)&v17);
  if (v21 != v23)
    free(v21);
}

void sub_22F16AE20(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  unsigned __int8 v20;
  _QWORD v21[3];
  __int16 v22;
  _QWORD v23[3];
  __int16 v24;
  _DWORD v25[4];
  unsigned __int16 v26;
  __int16 v27;
  _QWORD v28[3];
  __int16 v29;

  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 312) = *a2;
  *(_DWORD *)(v4 + 316) = 1224;
  if (*(char *)(v4 + 311) < 0)
  {
    **(_BYTE **)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 288) = 0;
    *(_BYTE *)(v4 + 311) = 0;
  }
  v28[0] = v4 + 320;
  v28[1] = 0;
  v28[2] = v4;
  v29 = 1;
  *(_BYTE *)(v4 + 320) = 0;
  *(_DWORD *)(v4 + 664) = 0;
  v5 = *(unsigned int *)(v4 + 776);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 768);
    v7 = 56 * v5;
    do
    {
      if (*(char *)(v6 + v7 - 9) < 0)
        operator delete(*(void **)(v6 + v7 - 32));
      v7 -= 56;
    }
    while (v7);
  }
  *(_DWORD *)(v4 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v28);
  sub_22F18FB4C(a1, v25);
  if (v26 - 13 < 2)
  {
    if ((v27 & 0x20) == 0)
    {
      sub_22F16437C(a1, (uint64_t)"ident", 0);
      if (*(_QWORD *)(a1 + 1088))
      {
        v20 = 0;
        sub_22F1413E0((uint64_t)v25, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), &v20, (uint64_t)__p);
        if (!v20)
        {
          if (v19 >= 0)
            v8 = __p;
          else
            v8 = (void **)__p[0];
          if (v19 >= 0)
            v9 = (void *)(v19 & 0x7F);
          else
            v9 = __p[1];
          (*(void (**)(_QWORD, _QWORD, void **, void *))(**(_QWORD **)(a1 + 1088) + 80))(*(_QWORD *)(a1 + 1088), *a2, v8, v9);
        }
        if (v19 < 0)
          operator delete(__p[0]);
      }
      return;
    }
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v11 + 312) = v25[0];
    *(_DWORD *)(v11 + 316) = 32;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v21[0] = v11 + 320;
    v21[1] = 0;
    v21[2] = v11;
    v22 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v15 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(v11 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *(_DWORD *)(v11 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v21);
LABEL_41:
    sub_22F163BBC(a1);
    return;
  }
  v10 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v10 + 312) = v25[0];
  *(_DWORD *)(v10 + 316) = 1151;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  v23[0] = v10 + 320;
  v23[1] = 0;
  v23[2] = v10;
  v24 = 1;
  *(_BYTE *)(v10 + 320) = 0;
  *(_DWORD *)(v10 + 664) = 0;
  v12 = *(unsigned int *)(v10 + 776);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(v10 + 768);
    v14 = 56 * v12;
    do
    {
      if (*(char *)(v13 + v14 - 9) < 0)
        operator delete(*(void **)(v13 + v14 - 32));
      v14 -= 56;
    }
    while (v14);
  }
  *(_DWORD *)(v10 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v23);
  if (v26 != 2)
    goto LABEL_41;
}

uint64_t sub_22F16B0C0(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  unsigned __int8 v49;
  _BYTE *v50;
  _QWORD v51[3];
  __int16 v52;
  void *v53;
  __int128 v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a1 + 16) != 7)
  {
    v14 = *(_QWORD *)(a4 + 48);
    *(_DWORD *)(v14 + 312) = *(_DWORD *)a1;
    *(_DWORD *)(v14 + 316) = a3;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v51[0] = v14 + 320;
    v51[1] = 0;
    v51[2] = v14;
    v52 = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v22 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v14 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
    }
    *(_DWORD *)(v14 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v51);
    if (*(_WORD *)(a1 + 16) != 2)
      sub_22F163BBC(a4);
    return 1;
  }
  v53 = v55;
  v54 = xmmword_22F44E300;
  v10 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v10)
  {
    if (v10 < 0x41)
    {
      v42 = 0;
      v11 = v55;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v11 = v53;
      v42 = v54;
    }
    if (v10 != v42)
    {
      bzero((char *)v11 + v42, v10 - v42);
      v11 = v53;
    }
    *(_QWORD *)&v54 = v10;
  }
  else
  {
    v11 = v55;
  }
  v50 = v11;
  v49 = 0;
  v12 = sub_22F1414C0(a1, (uint64_t *)&v50, *(uint64_t **)(a4 + 88), *(_QWORD **)(a4 + 56), &v49);
  if (v49)
  {
LABEL_5:
    v13 = 1;
    goto LABEL_51;
  }
  *a2 = 0;
  if (!v12)
    goto LABEL_50;
  v15 = 0;
  v16 = 0;
  v17 = v50;
  do
  {
    v18 = (char)v17[v15];
    if (v18 == 39)
      goto LABEL_14;
    if ((word_22F4ADB24[v17[v15]] & 8) == 0)
    {
      v25 = *(_DWORD *)a1;
      v26 = sub_22F1418F4(v25, v15, *(uint64_t **)(a4 + 88), *(_QWORD **)(a4 + 56)) + v25;
      v27 = *(_QWORD *)(a4 + 48);
      *(_DWORD *)(v27 + 312) = v26;
      *(_DWORD *)(v27 + 316) = 1143;
      if (*(char *)(v27 + 311) < 0)
      {
        **(_BYTE **)(v27 + 288) = 0;
        *(_QWORD *)(v27 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v27 + 288) = 0;
        *(_BYTE *)(v27 + 311) = 0;
      }
      v29 = (unsigned __int8 *)(v27 + 320);
      v45 = v27 + 320;
      v46 = 0;
      v47 = v27;
      v48 = 1;
      *(_BYTE *)(v27 + 320) = 0;
      *(_DWORD *)(v27 + 664) = 0;
      v30 = *(unsigned int *)(v27 + 776);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v27 + 768);
        v32 = 56 * v30;
        do
        {
          if (*(char *)(v31 + v32 - 9) < 0)
            operator delete(*(void **)(v31 + v32 - 32));
          v32 -= 56;
        }
        while (v32);
        LODWORD(v30) = *v29;
      }
      *(_DWORD *)(v27 + 776) = 0;
      v29[v30 + 1] = 2;
      *(_BYTE *)(v27 + 320) = v30 + 1;
      *(_QWORD *)&v29[8 * v30 + 16] = a5;
      v33 = &v45;
      goto LABEL_61;
    }
    v19 = v18 + 10 * v16 - 48;
    if (v19 < v16)
    {
      v28 = *(_QWORD *)(a4 + 48);
      *(_DWORD *)(v28 + 312) = *(_DWORD *)a1;
      *(_DWORD *)(v28 + 316) = a3;
      if (*(char *)(v28 + 311) < 0)
      {
        **(_BYTE **)(v28 + 288) = 0;
        *(_QWORD *)(v28 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v28 + 288) = 0;
        *(_BYTE *)(v28 + 311) = 0;
      }
      v43[0] = v28 + 320;
      v43[1] = 0;
      v43[2] = v28;
      v44 = 1;
      *(_BYTE *)(v28 + 320) = 0;
      *(_DWORD *)(v28 + 664) = 0;
      v39 = *(unsigned int *)(v28 + 776);
      if ((_DWORD)v39)
      {
        v40 = *(_QWORD *)(v28 + 768);
        v41 = 56 * v39;
        do
        {
          if (*(char *)(v40 + v41 - 9) < 0)
            operator delete(*(void **)(v40 + v41 - 32));
          v41 -= 56;
        }
        while (v41);
      }
      *(_DWORD *)(v28 + 776) = 0;
      v33 = v43;
LABEL_61:
      sub_22E3BB0B8((uint64_t)v33);
      sub_22F163BBC(a4);
      goto LABEL_5;
    }
    *a2 = v19;
    v16 = v19;
LABEL_14:
    ++v15;
  }
  while (v12 != v15);
  if (*v17 == 48 && v16 != 0)
  {
    v21 = *(_QWORD *)(a4 + 48);
    *(_DWORD *)(v21 + 312) = *(_DWORD *)a1;
    *(_DWORD *)(v21 + 316) = 1339;
    if (*(char *)(v21 + 311) < 0)
    {
      **(_BYTE **)(v21 + 288) = 0;
      *(_QWORD *)(v21 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v21 + 288) = 0;
      *(_BYTE *)(v21 + 311) = 0;
    }
    v34 = (unsigned __int8 *)(v21 + 320);
    v45 = v21 + 320;
    v46 = 0;
    v47 = v21;
    v48 = 1;
    *(_BYTE *)(v21 + 320) = 0;
    *(_DWORD *)(v21 + 664) = 0;
    v35 = *(unsigned int *)(v21 + 776);
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD *)(v21 + 768);
      v37 = 56 * v35;
      do
      {
        if (*(char *)(v36 + v37 - 9) < 0)
          operator delete(*(void **)(v36 + v37 - 32));
        v37 -= 56;
      }
      while (v37);
      LODWORD(v35) = *v34;
    }
    *(_DWORD *)(v21 + 776) = 0;
    v34[v35 + 1] = 2;
    *(_BYTE *)(v21 + 320) = v35 + 1;
    *(_QWORD *)&v34[8 * v35 + 16] = a5;
    sub_22E3BB0B8((uint64_t)&v45);
  }
LABEL_50:
  v13 = 0;
LABEL_51:
  if (v53 != v55)
    free(v53);
  return v13;
}

BOOL sub_22F16B514(uint64_t a1, int a2, unsigned __int8 **a3)
{
  uint64_t v5;
  int v6;
  _BOOL8 result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  __int16 v29;
  _QWORD v30[3];
  __int16 v31;
  _QWORD v32[3];
  __int16 v33;
  _QWORD v34[3];
  __int16 v35;

  v5 = (uint64_t)*a3;
  v6 = **a3;
  result = v6 == 60;
  if (v6 == 60)
  {
    v8 = (unint64_t)a3[1];
    if (*(_BYTE *)(v8 + v5 - 1) != 62)
    {
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v9 + 312) = a2;
      *(_DWORD *)(v9 + 316) = 1124;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
      v34[0] = v9 + 320;
      v34[1] = 0;
      v34[2] = v9;
      v35 = 1;
      *(_BYTE *)(v9 + 320) = 0;
      *(_DWORD *)(v9 + 664) = 0;
      v15 = *(unsigned int *)(v9 + 776);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v9 + 768);
        v17 = 56 * v15;
        do
        {
          if (*(char *)(v16 + v17 - 9) < 0)
            operator delete(*(void **)(v16 + v17 - 32));
          v17 -= 56;
        }
        while (v17);
      }
      *(_DWORD *)(v9 + 776) = 0;
      v18 = v34;
LABEL_45:
      sub_22E3BB0B8((uint64_t)v18);
      *a3 = 0;
      a3[1] = 0;
      return 1;
    }
  }
  else
  {
    if (v6 != 34)
    {
      v11 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v11 + 312) = a2;
      *(_DWORD *)(v11 + 316) = 1124;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v30[0] = v11 + 320;
      v30[1] = 0;
      v30[2] = v11;
      v31 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v19 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD *)(v11 + 768);
        v21 = 56 * v19;
        do
        {
          if (*(char *)(v20 + v21 - 9) < 0)
            operator delete(*(void **)(v20 + v21 - 32));
          v21 -= 56;
        }
        while (v21);
      }
      *(_DWORD *)(v11 + 776) = 0;
      v18 = v30;
      goto LABEL_45;
    }
    v8 = (unint64_t)a3[1];
    if (*(_BYTE *)(v8 + v5 - 1) != 34)
    {
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v14 + 312) = a2;
      *(_DWORD *)(v14 + 316) = 1124;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      v32[0] = v14 + 320;
      v32[1] = 0;
      v32[2] = v14;
      v33 = 1;
      *(_BYTE *)(v14 + 320) = 0;
      *(_DWORD *)(v14 + 664) = 0;
      v25 = *(unsigned int *)(v14 + 776);
      if ((_DWORD)v25)
      {
        v26 = *(_QWORD *)(v14 + 768);
        v27 = 56 * v25;
        do
        {
          if (*(char *)(v26 + v27 - 9) < 0)
            operator delete(*(void **)(v26 + v27 - 32));
          v27 -= 56;
        }
        while (v27);
      }
      *(_DWORD *)(v14 + 776) = 0;
      v18 = v32;
      goto LABEL_45;
    }
  }
  if (v8 <= 2)
  {
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v10 + 312) = a2;
    *(_DWORD *)(v10 + 316) = 1111;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v28[0] = v10 + 320;
    v28[1] = 0;
    v28[2] = v10;
    v29 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v22 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v10 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v18 = v28;
    goto LABEL_45;
  }
  v12 = (unsigned __int8 *)(v5 + 1);
  v13 = (unsigned __int8 *)(v8 - 1);
  if (v8 - 1 >= v8 - 2)
    v13 = (unsigned __int8 *)(v8 - 2);
  *a3 = v12;
  a3[1] = v13;
  return result;
}

uint64_t sub_22F16B7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  char v15;
  int v16;
  void **v17;
  size_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  void *v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  size_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::string *v41;
  size_t size;
  void *v43[2];
  char v44;
  _QWORD v45[3];
  __int16 v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  void *__p[2];
  __int128 v53;
  __int16 v54;
  char v55;
  char v56;
  char v57;
  char v58;
  std::string v59;
  unsigned __int8 v60;

  memset(&v59, 0, sizeof(v59));
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  *(_OWORD *)__p = 0u;
  v53 = 0u;
  v54 = 0;
  v51 = 0;
  v6 = sub_22F1D89A8(a4, a1, a2, &v59, (uint64_t)__p, &v51);
  if ((v6 & 1) == 0)
  {
    if (HIDWORD(__p[0]))
    {
      *(_DWORD *)(a3 + 312) = HIDWORD(__p[0]);
      *(_DWORD *)(a3 + 316) = 40;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v8 = (unsigned __int8 *)(a3 + 320);
      v47 = (unsigned __int8 *)(a3 + 320);
      v48 = 0;
      v49 = a3;
      v50 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v9 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(a3 + 768);
        v11 = 56 * v9;
        do
        {
          if (*(char *)(v10 + v11 - 9) < 0)
            operator delete(*(void **)(v10 + v11 - 32));
          v11 -= 56;
        }
        while (v11);
        LODWORD(v9) = *v8;
      }
      *(_DWORD *)(a3 + 776) = 0;
      v12 = v54;
      v14 = (void **)__p[1];
      v13 = v53;
      v15 = HIBYTE(v53);
      v16 = SHIBYTE(v53);
      v8[v9 + 1] = 2;
      *(_BYTE *)(a3 + 320) = v9 + 1;
      *(_QWORD *)&v8[8 * v9 + 16] = v12;
      if (v16 >= 0)
        v17 = &__p[1];
      else
        v17 = v14;
      if (v16 >= 0)
        v18 = v15 & 0x7F;
      else
        v18 = v13;
      sub_22E3B89A8(&v47, v17, v18);
    }
    else
    {
      v7 = v51;
      if (v51)
      {
        *(_DWORD *)(a3 + 312) = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a3 + 316) = 45;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v47 = (unsigned __int8 *)(a3 + 320);
        v48 = 0;
        v49 = a3;
        v50 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v20 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v20)
        {
          v21 = *(_QWORD *)(a3 + 768);
          v22 = 56 * v20;
          do
          {
            if (*(char *)(v21 + v22 - 9) < 0)
              operator delete(*(void **)(v21 + v22 - 32));
            v22 -= 56;
          }
          while (v22);
        }
        *(_DWORD *)(a3 + 776) = 0;
        v23 = *(_BYTE *)(a4 + 23);
        v24 = v23 < 0;
        if (v23 >= 0)
          v25 = (void *)a4;
        else
          v25 = *(void **)a4;
        v26 = v23 & 0x7F;
        if (v24)
          v27 = *(_QWORD *)(a4 + 8);
        else
          v27 = v26;
        sub_22E3B89A8(&v47, v25, v27);
        sub_22E3BB0B8((uint64_t)&v47);
        *(_DWORD *)(a3 + 312) = *(_DWORD *)(v7 + 24);
        *(_DWORD *)(a3 + 316) = 109;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v45[0] = a3 + 320;
        v45[1] = 0;
        v45[2] = a3;
        v46 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v28 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v28)
        {
          v29 = *(_QWORD *)(a3 + 768);
          v30 = 56 * v28;
          do
          {
            if (*(char *)(v29 + v30 - 9) < 0)
              operator delete(*(void **)(v29 + v30 - 32));
            v30 -= 56;
          }
          while (v30);
        }
        *(_DWORD *)(a3 + 776) = 0;
        v19 = (unsigned __int8 **)v45;
        goto LABEL_46;
      }
      *(_DWORD *)(a3 + 312) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a3 + 316) = 46;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v47 = (unsigned __int8 *)(a3 + 320);
      v48 = 0;
      v49 = a3;
      v50 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v32 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(a3 + 768);
        v34 = 56 * v32;
        do
        {
          if (*(char *)(v33 + v34 - 9) < 0)
            operator delete(*(void **)(v33 + v34 - 32));
          v34 -= 56;
        }
        while (v34);
      }
      *(_DWORD *)(a3 + 776) = 0;
      sub_22F1D8A24((uint64_t *)a4, 0, v43);
      if (v44 >= 0)
        v35 = v43;
      else
        v35 = (void **)v43[0];
      if (v44 >= 0)
        v36 = v44 & 0x7F;
      else
        v36 = (size_t)v43[1];
      sub_22E3B89A8(&v47, v35, v36);
      v37 = v60;
      v38 = v47;
      if (!v47)
      {
        v38 = (unsigned __int8 *)sub_22E3B8AAC(v48);
        v47 = v38;
      }
      v38[*v38 + 1] = 2;
      v39 = v47;
      v40 = *v47;
      *v47 = v40 + 1;
      *(_QWORD *)&v39[8 * v40 + 16] = v37;
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v59;
      else
        v41 = (std::string *)v59.__r_.__value_.__r.__words[0];
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v59.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v59.__r_.__value_.__l.__size_;
      sub_22E3B89A8(&v47, v41, size);
      if (v44 < 0)
        operator delete(v43[0]);
    }
    v19 = &v47;
LABEL_46:
    sub_22E3BB0B8((uint64_t)v19);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  return v6 ^ 1u;
}

_QWORD *sub_22F16BBCC@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  __int16 v19;
  _QWORD v20[3];
  __int16 v21;

  if (result[137])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v5 = result;
  v6 = result[128];
  v7 = result[129];
  result = (_QWORD *)sub_22F4157AC(result);
  if (!(_DWORD)result)
  {
    if (!v5[132])
    {
      if (v6)
      {
        v8 = 0;
        ++v7;
      }
      else
      {
        v14 = v5[6];
        *(_DWORD *)(v14 + 312) = *a2;
        *(_DWORD *)(v14 + 316) = 1270;
        if (*(char *)(v14 + 311) < 0)
        {
          **(_BYTE **)(v14 + 288) = 0;
          *(_QWORD *)(v14 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v14 + 288) = 0;
          *(_BYTE *)(v14 + 311) = 0;
        }
        v18[0] = v14 + 320;
        v18[1] = 0;
        v18[2] = v14;
        v19 = 1;
        *(_BYTE *)(v14 + 320) = 0;
        *(_DWORD *)(v14 + 664) = 0;
        v15 = *(unsigned int *)(v14 + 776);
        if ((_DWORD)v15)
        {
          v16 = *(_QWORD *)(v14 + 768);
          v17 = 56 * v15;
          do
          {
            if (*(char *)(v16 + v17 - 9) < 0)
              operator delete(*(void **)(v16 + v17 - 32));
            v17 -= 56;
          }
          while (v17);
        }
        *(_DWORD *)(v14 + 776) = 0;
        result = (_QWORD *)sub_22E3BB0B8((uint64_t)v18);
        v8 = 0;
        v6 = 0;
      }
      goto LABEL_26;
    }
    result = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v5[127] + 8) + 88), *(_DWORD *)(v5[127] + 16));
    if (result)
    {
      v8 = *(_QWORD *)((result[2] & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v8)
      {
        v6 = 0;
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          v8 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          v7 = 0;
        }
        while ((v9 & 2) != 0 && v8);
        goto LABEL_26;
      }
      goto LABEL_25;
    }
LABEL_24:
    v8 = 0;
LABEL_25:
    v6 = 0;
    v7 = 0;
    goto LABEL_26;
  }
  if (!*(_BYTE *)(v5[7] + 704))
  {
    v10 = v5[6];
    *(_DWORD *)(v10 + 312) = *a2;
    *(_DWORD *)(v10 + 316) = 1271;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v20[0] = v10 + 320;
    v20[1] = 0;
    v20[2] = v10;
    v21 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v11 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v10 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
    *(_DWORD *)(v10 + 776) = 0;
    result = (_QWORD *)sub_22E3BB0B8((uint64_t)v20);
    goto LABEL_24;
  }
  v8 = 0;
LABEL_26:
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v8;
  return result;
}

uint64_t sub_22F16BDD4(unint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  size_t v15;
  int v16;
  int v17;
  size_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  size_t v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t *v57;
  void **v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  void **v72;
  unint64_t v73;
  uint64_t v74;
  size_t v75;
  char *v76;
  void *v77;
  size_t v78;
  char *v79;
  size_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  size_t v83;
  uint64_t *v84;
  void **v85;
  unint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char *v101;
  size_t v102;
  char v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  _BOOL4 v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  size_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  const void **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  size_t *v143;
  uint64_t v144;
  void *v145;
  size_t v146;
  size_t v147;
  _QWORD *v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  std::string::size_type v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __int128 *v166;
  uint64_t v167;
  uint64_t v168;
  std::string *v169;
  std::string::size_type v170;
  std::string *v171;
  __int128 *v172;
  size_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  BOOL v179;
  const void *v180;
  size_t v181;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  unsigned int v187;
  char v188;
  char **v189;
  uint64_t v190;
  char v191;
  size_t v192;
  char *v193;
  char is_separator;
  uint64_t v195;
  size_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  llvm::sys::path *v204;
  char v205;
  _BYTE *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  std::string *v211;
  std::string::size_type v212;
  const std::string::value_type *v213;
  uint64_t v214;
  uint64_t v215;
  std::string *v216;
  std::string::size_type v217;
  std::string *v218;
  _BYTE *v219;
  size_t v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v228;
  unint64_t v229;
  _BOOL4 v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const void *v236;
  size_t v237;
  __int128 *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned int v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void **v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unsigned int *v265;
  size_t v266;
  const void *v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  char *v273;
  size_t v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void **v287;
  size_t v288;
  __int128 *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _BYTE *v305;
  size_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  size_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  BOOL v419;
  unint64_t v420;
  uint64_t v421;
  unsigned int v422;
  unint64_t v423;
  uint64_t v424;
  unsigned __int8 *v425;
  char *v426;
  unint64_t __n;
  char *v428;
  std::string::size_type v429;
  unsigned int v430;
  unsigned __int8 *v431;
  unsigned int v432;
  unsigned int v433;
  size_t v434;
  char v435;
  unsigned int v436;
  const char *v437;
  int *v438;
  unsigned int v439;
  int v440;
  void *v441;
  _BOOL4 v442;
  char v443;
  unsigned int v445;
  unint64_t v446;
  _QWORD v447[3];
  __int16 v448;
  _QWORD v449[3];
  __int16 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  _QWORD v457[3];
  __int16 v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __int16 v463;
  _QWORD v464[3];
  __int16 v465;
  _QWORD v466[3];
  __int16 v467;
  void *__src;
  size_t __len;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  std::string v473;
  __int16 v474;
  void *v475[2];
  char v476;
  unsigned __int8 *v477[3];
  __int16 v478;
  __int128 v479;
  unint64_t v480;
  _BYTE v481[48];
  char v482;
  _BYTE __dst[24];
  __int128 __p;
  uint64_t v485;
  char v486;
  void *v487;
  __int128 v488;
  _BYTE v489[128];
  void *v490;
  __int128 v491;
  _BYTE v492[777];
  void *v493;
  __int128 v494;
  _WORD v495[512];
  void *v496;
  __int128 v497;
  _BYTE v498[128];
  __int128 v499;
  __int128 v500;
  __int128 v501;
  _BYTE v502[48];
  char v503;
  uint64_t v504;

  v12 = (int *)a4;
  v504 = *MEMORY[0x24BDAC8D0];
  v496 = v498;
  v497 = xmmword_22F44E310;
  v441 = (void *)sub_22F18E170(a1, a4, (uint64_t *)&v496, 0);
  __src = v441;
  v434 = v15;
  __len = v15;
  if (*((unsigned __int16 *)v12 + 8) - 399 > 0x28)
  {
    v16 = *v12;
    v17 = v12[1] + *v12;
  }
  else
  {
    v16 = *v12;
    v17 = v12[1];
    if (!v17)
      v17 = *v12;
  }
  v433 = v17;
  v445 = v16;
  v442 = sub_22F16B514(a1, v16, (unsigned __int8 **)&__src);
  v18 = __len;
  if (!__len)
  {
    v21 = 0;
    goto LABEL_270;
  }
  v430 = a5;
  v19 = *a3;
  if (a2)
    v19 = a2;
  v432 = v19;
  v439 = a2;
  if (*(_DWORD *)(a1 + 848))
  {
    v20 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v20 + 312) = v19;
    *(_DWORD *)(v20 + 316) = 1135;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    v22 = (unsigned __int8 *)(v20 + 320);
    v493 = (void *)(v20 + 320);
    *(_QWORD *)&v494 = 0;
    *((_QWORD *)&v494 + 1) = v20;
    v495[0] = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v23 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v20 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
      v22 = (unsigned __int8 *)v493;
      *(_DWORD *)(v20 + 776) = 0;
      if (!v22)
      {
        v22 = (unsigned __int8 *)sub_22E3B8AAC(v494);
        v493 = v22;
      }
    }
    else
    {
      *(_DWORD *)(v20 + 776) = 0;
    }
    v22[*v22 + 1] = 2;
    v26 = v493;
    v27 = *(unsigned __int8 *)v493;
    *(_BYTE *)v493 = v27 + 1;
    v26[v27 + 2] = v439 == 0;
    sub_22E3BB0B8((uint64_t)&v493);
    v28 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v28 + 312) = *(_DWORD *)(a1 + 848);
    *(_DWORD *)(v28 + 316) = 107;
    if (*(char *)(v28 + 311) < 0)
    {
      **(_BYTE **)(v28 + 288) = 0;
      *(_QWORD *)(v28 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v28 + 288) = 0;
      *(_BYTE *)(v28 + 311) = 0;
    }
    v466[0] = v28 + 320;
    v466[1] = 0;
    v466[2] = v28;
    v467 = 1;
    *(_BYTE *)(v28 + 320) = 0;
    *(_DWORD *)(v28 + 664) = 0;
    v29 = *(unsigned int *)(v28 + 776);
    if ((_DWORD)v29)
    {
      v30 = *(_QWORD *)(v28 + 768);
      v31 = 56 * v29;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
    }
    *(_DWORD *)(v28 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v466);
    *(_QWORD *)(a1 + 840) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (*(_DWORD *)(a1 + 856))
  {
    v32 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v32 + 312) = v432;
    *(_DWORD *)(v32 + 316) = 1136;
    if (*(char *)(v32 + 311) < 0)
    {
      **(_BYTE **)(v32 + 288) = 0;
      *(_QWORD *)(v32 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v32 + 288) = 0;
      *(_BYTE *)(v32 + 311) = 0;
    }
    v33 = (unsigned __int8 *)(v32 + 320);
    v493 = (void *)(v32 + 320);
    *(_QWORD *)&v494 = 0;
    *((_QWORD *)&v494 + 1) = v32;
    v495[0] = 1;
    *(_BYTE *)(v32 + 320) = 0;
    *(_DWORD *)(v32 + 664) = 0;
    v34 = *(unsigned int *)(v32 + 776);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(v32 + 768);
      v36 = 56 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 9) < 0)
          operator delete(*(void **)(v35 + v36 - 32));
        v36 -= 56;
      }
      while (v36);
      v33 = (unsigned __int8 *)v493;
      *(_DWORD *)(v32 + 776) = 0;
      if (!v33)
      {
        v33 = (unsigned __int8 *)sub_22E3B8AAC(v494);
        v493 = v33;
      }
    }
    else
    {
      *(_DWORD *)(v32 + 776) = 0;
    }
    v33[*v33 + 1] = 2;
    v37 = v493;
    v38 = *(unsigned __int8 *)v493;
    *(_BYTE *)v493 = v38 + 1;
    v37[v38 + 2] = v439 == 0;
    sub_22E3BB0B8((uint64_t)&v493);
    v39 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v39 + 312) = *(_DWORD *)(a1 + 856);
    *(_DWORD *)(v39 + 316) = 107;
    if (*(char *)(v39 + 311) < 0)
    {
      **(_BYTE **)(v39 + 288) = 0;
      *(_QWORD *)(v39 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v39 + 288) = 0;
      *(_BYTE *)(v39 + 311) = 0;
    }
    v464[0] = v39 + 320;
    v464[1] = 0;
    v464[2] = v39;
    v465 = 1;
    *(_BYTE *)(v39 + 320) = 0;
    *(_DWORD *)(v39 + 664) = 0;
    v40 = *(unsigned int *)(v39 + 776);
    if ((_DWORD)v40)
    {
      v41 = *(_QWORD *)(v39 + 768);
      v42 = 56 * v40;
      do
      {
        if (*(char *)(v41 + v42 - 9) < 0)
          operator delete(*(void **)(v41 + v42 - 32));
        v42 -= 56;
      }
      while (v42);
    }
    *(_DWORD *)(v39 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v464);
    *(_DWORD *)(a1 + 856) = 0;
  }
  v43 = *(_QWORD *)(a1 + 104);
  v438 = v12;
  if (*(_QWORD *)(v43 + 456))
  {
    v77 = (void *)sub_22F415410(v43);
    if (v78)
    {
      __src = v77;
      __len = v78;
      v18 = v78;
    }
  }
  v463 = 0;
  v461 = 0;
  v462 = 0;
  v493 = v495;
  v494 = xmmword_22F455C90;
  v490 = v492;
  v491 = xmmword_22F455C90;
  v460 = 0;
  v436 = *v12;
  v44 = (unsigned __int8 *)__src;
  v487 = v489;
  v488 = xmmword_22F44E310;
  if ((**(_BYTE **)(a1 + 56) & 0x20) != 0)
  {
    if (__src)
    {
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_673;
      if (v18 >= 0x17)
      {
        v49 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v49 = v18 | 7;
        v50 = v49 + 1;
        v45 = operator new(v49 + 1);
        *(_QWORD *)&__dst[16] = v50 | 0x8000000000000000;
        *(_QWORD *)__dst = v45;
        *(_QWORD *)&__dst[8] = v18;
      }
      else
      {
        __dst[23] = v18;
        v45 = __dst;
      }
      memmove(v45, v44, v18);
      v45[v18] = 0;
      LOBYTE(v44) = __dst[23];
      v47 = *(_BYTE **)__dst;
      v46 = *(_QWORD *)&__dst[8];
      v48 = *((_QWORD *)&v488 + 1);
    }
    else
    {
      v46 = 0;
      v47 = 0;
      memset(__dst, 0, sizeof(__dst));
      v48 = 128;
    }
    if ((char)v44 >= 0)
      v51 = __dst;
    else
      v51 = v47;
    if ((char)v44 >= 0)
      v52 = v44 & 0x7F;
    else
      v52 = v46;
    *(_QWORD *)&v488 = 0;
    if (v48 < v52)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v53 = v488;
    }
    else
    {
      v53 = 0;
      v54 = 0;
      if (!v52)
      {
LABEL_72:
        *(_QWORD *)&v488 = v54 + v52;
        if ((v44 & 0x80) != 0)
          operator delete(v47);
        llvm::sys::path::native();
        v44 = (unsigned __int8 *)v487;
        v18 = v488;
        goto LABEL_75;
      }
    }
    memcpy((char *)v487 + v53, v51, v52);
    v54 = v488;
    goto LABEL_72;
  }
LABEL_75:
  v446 = v445 | ((unint64_t)v433 << 32);
  v55 = *(_QWORD *)(a1 + 1088);
  v56 = v55 == 0;
  if (v55)
    v57 = (uint64_t *)&v493;
  else
    v57 = 0;
  if (v56)
    v58 = 0;
  else
    v58 = &v490;
  v59 = sub_22F16569C(a1, v436, v44, v18, v442, a6, a7, a8, &v461, v57, v58, &v460, (_BYTE *)&v463 + 1, &v463, 0);
  v431 = v44;
  if (v59)
  {
    v60 = v59;
    v61 = v434;
    goto LABEL_83;
  }
  if ((*(_WORD *)(a1 + 536) & 4) == 0)
  {
    if (v442)
    {
      v71 = (uint64_t *)&v493;
      if (!*(_QWORD *)(a1 + 1088))
        v71 = 0;
      v72 = &v490;
      if (!*(_QWORD *)(a1 + 1088))
        v72 = 0;
      v73 = sub_22F16569C(a1, v436, v44, v18, 0, a6, a7, a8, &v461, v71, v72, &v460, (_BYTE *)&v463 + 1, 0, 0);
      if (v73)
      {
        v60 = v73;
        v74 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v74 + 312) = *v12;
        *(_DWORD *)(v74 + 316) = 1129;
        if (*(char *)(v74 + 311) < 0)
        {
          **(_BYTE **)(v74 + 288) = 0;
          *(_QWORD *)(v74 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v74 + 288) = 0;
          *(_BYTE *)(v74 + 311) = 0;
        }
        v61 = v434;
        *(_QWORD *)v481 = v74 + 320;
        *(_QWORD *)&v481[8] = 0;
        *(_QWORD *)&v481[16] = v74;
        *(_WORD *)&v481[24] = 1;
        *(_BYTE *)(v74 + 320) = 0;
        *(_DWORD *)(v74 + 664) = 0;
        v151 = *(unsigned int *)(v74 + 776);
        if ((_DWORD)v151)
        {
          v152 = *(_QWORD *)(v74 + 768);
          v153 = 56 * v151;
          do
          {
            if (*(char *)(v152 + v153 - 9) < 0)
              operator delete(*(void **)(v152 + v153 - 32));
            v153 -= 56;
          }
          while (v153);
        }
        *(_DWORD *)(v74 + 776) = 0;
        v154 = __src;
        v155 = __len;
        sub_22E3B89A8((unsigned __int8 **)v481, __src, __len);
        v156 = *(unsigned __int8 **)v481;
        if (!*(_QWORD *)v481)
        {
          v156 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v481[8]);
          *(_QWORD *)v481 = v156;
        }
        v156[*v156 + 1] = 2;
        v157 = *(_QWORD *)v481;
        v158 = **(_BYTE **)v481;
        **(_BYTE **)v481 = v158 + 1;
        *(_QWORD *)(v157 + 8 * v158 + 16) = v439 == 0;
        if (!v154)
        {
          memset(&v473, 0, sizeof(v473));
          goto LABEL_311;
        }
        if (v155 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_673;
        if (v155 >= 0x17)
        {
          v167 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v155 | 7) != 0x17)
            v167 = v155 | 7;
          v168 = v167 + 1;
          v159 = operator new(v167 + 1);
          v473.__r_.__value_.__r.__words[2] = v168 | 0x8000000000000000;
          v473.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
          v473.__r_.__value_.__l.__size_ = v155;
        }
        else
        {
          *((_BYTE *)&v473.__r_.__value_.__s + 23) = v155;
          v159 = &v473;
          if (!v155)
            goto LABEL_310;
        }
        memmove(v159, v154, v155);
LABEL_310:
        *((_BYTE *)v159 + v155) = 0;
LABEL_311:
        v169 = std::string::insert(&v473, 0, "\"");
        v170 = v169->__r_.__value_.__r.__words[2];
        v470 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
        *(_QWORD *)&v471 = v170;
        v169->__r_.__value_.__l.__size_ = 0;
        v169->__r_.__value_.__r.__words[2] = 0;
        v169->__r_.__value_.__r.__words[0] = 0;
        v171 = std::string::append((std::string *)&v470, "\"");
        *(_QWORD *)&v500 = *((_QWORD *)&v171->__r_.__value_.__l + 2);
        v499 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
        v171->__r_.__value_.__l.__size_ = 0;
        v171->__r_.__value_.__r.__words[2] = 0;
        v171->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v500) & 0x80u) == 0)
          v172 = &v499;
        else
          v172 = (__int128 *)v499;
        if ((SBYTE7(v500) & 0x80u) == 0)
          v173 = BYTE7(v500) & 0x7F;
        else
          v173 = *((_QWORD *)&v499 + 1);
        *(_QWORD *)&__dst[12] = 0;
        __dst[20] = 0;
        v486 = 0;
        *(_QWORD *)__dst = v446;
        __dst[8] = 0;
        if (v173 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_673;
        if (v173 >= 0x17)
        {
          v175 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v173 | 7) != 0x17)
            v175 = v173 | 7;
          v176 = v175 + 1;
          v174 = operator new(v175 + 1);
          *(_QWORD *)&v502[8] = v173;
          *(_QWORD *)&v502[16] = v176 | 0x8000000000000000;
          *(_QWORD *)v502 = v174;
        }
        else
        {
          v502[23] = v173;
          v174 = v502;
          if (!v173)
            goto LABEL_325;
        }
        memmove(v174, v172, v173);
LABEL_325:
        v174[v173] = 0;
        __p = *(_OWORD *)v502;
        v485 = *(_QWORD *)&v502[16];
        sub_22E6D82D0((uint64_t *)v481, __dst);
        if (SHIBYTE(v485) < 0)
          operator delete((void *)__p);
        if (SBYTE7(v500) < 0)
          operator delete((void *)v499);
        if (SBYTE7(v471) < 0)
          operator delete((void *)v470);
        if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v473.__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)v481);
        goto LABEL_83;
      }
    }
    __n = __len;
    v428 = (char *)__src;
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 140) & 0x100000000000000) != 0)
    {
      if (__len)
      {
        v75 = 0;
        v76 = (char *)__src;
        while ((word_22F4ADB24[*((unsigned __int8 *)__src + v75)] & 0x68) == 0)
        {
          if (__len == ++v75)
          {
            v75 = -1;
            break;
          }
        }
      }
      else
      {
        v75 = -1;
        v76 = (char *)__src;
      }
      if (__len < v75)
        v75 = __len;
      v79 = &v76[v75];
      v80 = __len - v75;
      if (__len != v75)
      {
        do
        {
          if ((word_22F4ADB24[v79[v80 - 1]] & 0x68) != 0)
            break;
          if (v80 >= v80 - 1)
            --v80;
        }
        while (v80);
      }
      if (v18)
      {
        v81 = 0;
        while ((word_22F4ADB24[v44[v81]] & 0x68) == 0)
        {
          if (v18 == ++v81)
            goto LABEL_122;
        }
      }
      else
      {
LABEL_122:
        v81 = -1;
      }
      if (v18 < v81)
        v81 = v18;
      v82 = &v44[v81];
      v83 = v18 - v81;
      v426 = v79;
      if (v18 != v81)
      {
        do
        {
          if ((word_22F4ADB24[v82[v83 - 1]] & 0x68) != 0)
            break;
          if (v83 >= v83 - 1)
            --v83;
        }
        while (v83);
      }
      v84 = (uint64_t *)&v493;
      if (!*(_QWORD *)(a1 + 1088))
        v84 = 0;
      v85 = &v490;
      if (!*(_QWORD *)(a1 + 1088))
        v85 = 0;
      v425 = v82;
      v86 = sub_22F16569C(a1, v436, v82, v83, v442, a6, a7, a8, &v461, v84, v85, &v460, (_BYTE *)&v463 + 1, 0, 0);
      if (v86)
      {
        v60 = v86;
        if (v442)
        {
          if (!v428)
          {
            v470 = 0uLL;
            *(_QWORD *)&v471 = 0;
LABEL_407:
            v211 = std::string::insert((std::string *)&v470, 0, "<");
            v212 = v211->__r_.__value_.__r.__words[2];
            v499 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
            *(_QWORD *)&v500 = v212;
            v211->__r_.__value_.__l.__size_ = 0;
            v211->__r_.__value_.__r.__words[2] = 0;
            v211->__r_.__value_.__r.__words[0] = 0;
            v213 = ">";
            goto LABEL_414;
          }
          if (v80 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_673;
          if (v80 >= 0x17)
          {
            v209 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v80 | 7) != 0x17)
              v209 = v80 | 7;
            v210 = v209 + 1;
            v87 = (__int128 *)operator new(v209 + 1);
            *(_QWORD *)&v471 = v210 | 0x8000000000000000;
            *(_QWORD *)&v470 = v87;
            *((_QWORD *)&v470 + 1) = v80;
          }
          else
          {
            BYTE7(v471) = v80;
            v87 = &v470;
            if (!v80)
              goto LABEL_406;
          }
          memmove(v87, v426, v80);
LABEL_406:
          *((_BYTE *)v87 + v80) = 0;
          goto LABEL_407;
        }
        if (!v428)
        {
          v470 = 0uLL;
          *(_QWORD *)&v471 = 0;
LABEL_413:
          v216 = std::string::insert((std::string *)&v470, 0, "\"");
          v217 = v216->__r_.__value_.__r.__words[2];
          v499 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
          *(_QWORD *)&v500 = v217;
          v216->__r_.__value_.__l.__size_ = 0;
          v216->__r_.__value_.__r.__words[2] = 0;
          v216->__r_.__value_.__r.__words[0] = 0;
          v213 = "\"";
LABEL_414:
          v218 = std::string::append((std::string *)&v499, v213);
          *(std::string *)v502 = *v218;
          v218->__r_.__value_.__l.__size_ = 0;
          v218->__r_.__value_.__r.__words[2] = 0;
          v218->__r_.__value_.__r.__words[0] = 0;
          if (v502[23] >= 0)
            v219 = v502;
          else
            v219 = *(_BYTE **)v502;
          if (v502[23] >= 0)
            v220 = v502[23] & 0x7F;
          else
            v220 = *(_QWORD *)&v502[8];
          *(_QWORD *)&__dst[12] = 0;
          __dst[20] = 0;
          v486 = 0;
          *(_QWORD *)__dst = v446;
          __dst[8] = 0;
          if (v220 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_673;
          if (v220 >= 0x17)
          {
            v222 = (v220 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v220 | 7) != 0x17)
              v222 = v220 | 7;
            v223 = v222 + 1;
            v221 = operator new(v222 + 1);
            *(_QWORD *)&v481[16] = v223 | 0x8000000000000000;
            *(_QWORD *)v481 = v221;
            *(_QWORD *)&v481[8] = v220;
            v61 = v434;
          }
          else
          {
            v481[23] = v220;
            v221 = v481;
            v61 = v434;
            if (!v220)
              goto LABEL_428;
          }
          memmove(v221, v219, v220);
LABEL_428:
          v221[v220] = 0;
          __p = *(_OWORD *)v481;
          v485 = *(_QWORD *)&v481[16];
          if ((v502[23] & 0x80000000) != 0)
            operator delete(*(void **)v502);
          if (SBYTE7(v500) < 0)
            operator delete((void *)v499);
          if (SBYTE7(v471) < 0)
            operator delete((void *)v470);
          v224 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v224 + 312) = *v12;
          *(_DWORD *)(v224 + 316) = 1130;
          if (*(char *)(v224 + 311) < 0)
          {
            **(_BYTE **)(v224 + 288) = 0;
            *(_QWORD *)(v224 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v224 + 288) = 0;
            *(_BYTE *)(v224 + 311) = 0;
          }
          *(_QWORD *)v481 = v224 + 320;
          *(_QWORD *)&v481[8] = 0;
          *(_QWORD *)&v481[16] = v224;
          *(_WORD *)&v481[24] = 1;
          *(_BYTE *)(v224 + 320) = 0;
          *(_DWORD *)(v224 + 664) = 0;
          v225 = *(unsigned int *)(v224 + 776);
          if ((_DWORD)v225)
          {
            v226 = *(_QWORD *)(v224 + 768);
            v227 = 56 * v225;
            do
            {
              if (*(char *)(v226 + v227 - 9) < 0)
                operator delete(*(void **)(v226 + v227 - 32));
              v227 -= 56;
            }
            while (v227);
          }
          *(_DWORD *)(v224 + 776) = 0;
          sub_22E3B89A8((unsigned __int8 **)v481, v428, __n);
          sub_22E3B89A8((unsigned __int8 **)v481, v426, v80);
          sub_22E6D82D0((uint64_t *)v481, __dst);
          sub_22E3BB0B8((uint64_t)v481);
          __src = v426;
          __len = v80;
          if (SHIBYTE(v485) < 0)
            operator delete((void *)__p);
          v431 = v425;
          v18 = v83;
LABEL_83:
          v459 = v60;
          v62 = *(_DWORD **)(a1 + 1008);
          do
          {
            v63 = *(_QWORD *)(v60 + 8);
            v60 = v63 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v63 & 2) != 0 && v60);
          v64 = llvm::StringMapImpl::LookupBucketFor();
          v65 = *((_QWORD *)v62 + 14);
          v66 = *(_QWORD *)(v65 + 8 * v64);
          if (v66)
          {
            if (v66 != -8)
            {
LABEL_90:
              v12 = v438;
              goto LABEL_153;
            }
            --v62[32];
          }
          v67 = v64;
          v68 = MEMORY[0x23489D23C](v61 + 25, 8);
          v69 = v68;
          v70 = v68 + 24;
          if (v61)
            memcpy((void *)(v68 + 24), v441, v61);
          *(_BYTE *)(v70 + v61) = 0;
          *(_QWORD *)v69 = v61;
          *(_QWORD *)(v69 + 8) = v60;
          *(_DWORD *)(v69 + 16) = v436;
          *(_QWORD *)(v65 + 8 * v67) = v69;
          ++v62[31];
          llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v62 + 28));
          goto LABEL_90;
        }
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_673;
        if (v80 >= 0x17)
        {
          v214 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v214 = v80 | 7;
          v215 = v214 + 1;
          v166 = (__int128 *)operator new(v214 + 1);
          *(_QWORD *)&v471 = v215 | 0x8000000000000000;
          *(_QWORD *)&v470 = v166;
          *((_QWORD *)&v470 + 1) = v80;
        }
        else
        {
          BYTE7(v471) = v80;
          v166 = &v470;
          if (!v80)
            goto LABEL_412;
        }
        memmove(v166, v426, v80);
LABEL_412:
        *((_BYTE *)v166 + v80) = 0;
        goto LABEL_413;
      }
    }
    v88 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v88 + 312) = *v12;
    *(_DWORD *)(v88 + 316) = 1128;
    if (*(char *)(v88 + 311) < 0)
    {
      **(_BYTE **)(v88 + 288) = 0;
      *(_QWORD *)(v88 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v88 + 288) = 0;
      *(_BYTE *)(v88 + 311) = 0;
    }
    *(_QWORD *)__dst = v88 + 320;
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = v88;
    LOWORD(__p) = 1;
    *(_BYTE *)(v88 + 320) = 0;
    *(_DWORD *)(v88 + 664) = 0;
    v89 = *(unsigned int *)(v88 + 776);
    if ((_DWORD)v89)
    {
      v90 = *(_QWORD *)(v88 + 768);
      v91 = 56 * v89;
      do
      {
        if (*(char *)(v90 + v91 - 9) < 0)
          operator delete(*(void **)(v90 + v91 - 32));
        v91 -= 56;
      }
      while (v91);
    }
    *(_DWORD *)(v88 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)__dst, v428, __n);
    v92 = *(_QWORD *)__dst;
    if (!*(_QWORD *)__dst)
    {
      v92 = sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
      *(_QWORD *)__dst = v92;
    }
    sub_22E4D6448(v92 + 336, v446, 0);
    sub_22E3BB0B8((uint64_t)__dst);
    if ((_BYTE)v463)
    {
      if (__n && (v228 = memchr(v428, 47, __n)) != 0)
        v229 = v228 - v428;
      else
        v229 = -1;
      if (__n >= v229)
        v312 = v229;
      else
        v312 = __n;
      v313 = *sub_22F4101CC((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 104) + 336), v428, v312);
      v314 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v314 + 312) = *v12;
      *(_DWORD *)(v314 + 316) = 1256;
      if (*(char *)(v314 + 311) < 0)
      {
        **(_BYTE **)(v314 + 288) = 0;
        *(_QWORD *)(v314 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v314 + 288) = 0;
        *(_BYTE *)(v314 + 311) = 0;
      }
      *(_QWORD *)__dst = v314 + 320;
      *(_QWORD *)&__dst[8] = 0;
      *(_QWORD *)&__dst[16] = v314;
      LOWORD(__p) = 1;
      *(_BYTE *)(v314 + 320) = 0;
      *(_DWORD *)(v314 + 664) = 0;
      v315 = *(unsigned int *)(v314 + 776);
      if ((_DWORD)v315)
      {
        v316 = *(_QWORD *)(v314 + 768);
        v317 = 56 * v315;
        do
        {
          if (*(char *)(v316 + v317 - 9) < 0)
            operator delete(*(void **)(v316 + v317 - 32));
          v317 -= 56;
        }
        while (v317);
      }
      *(_DWORD *)(v314 + 776) = 0;
      if (__n >= v229 + 1)
        v318 = v229 + 1;
      else
        v318 = __n;
      sub_22E3B89A8((unsigned __int8 **)__dst, &v428[v318], __n - v318);
      sub_22E3B89A8((unsigned __int8 **)__dst, v428, v312);
      sub_22E3B89A8((unsigned __int8 **)__dst, (void *)(*(_QWORD *)(v313 + 8) + 32), **(_QWORD **)(v313 + 8));
      sub_22E3BB0B8((uint64_t)__dst);
    }
  }
  v459 = 0;
LABEL_153:
  v93 = v439;
  if (*(_DWORD *)(a1 + 740) == 1)
  {
    v94 = *(_QWORD *)(a1 + 32);
    goto LABEL_156;
  }
  v94 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v94 + 103) < 0)
  {
    if (!*(_QWORD *)(v94 + 88))
      goto LABEL_156;
  }
  else if (!*(_BYTE *)(v94 + 103))
  {
    goto LABEL_156;
  }
  v422 = *(_DWORD *)(a1 + 2268);
  if (v422)
  {
    v12 = v438;
    v93 = v439;
    if (*(_BYTE *)(a1 + 2273))
    {
      v423 = v459;
      if (v459)
      {
        do
        {
          v424 = *(_QWORD *)(v423 + 8);
          v423 = v424 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v424 & 2) != 0 && v423);
        v21 = 0;
        if (sub_22E6155EC(*(_QWORD **)(a1 + 88), v422) == v423)
          *(_BYTE *)(a1 + 2273) = 0;
      }
      else
      {
        v21 = 0;
      }
      goto LABEL_264;
    }
  }
  else
  {
    v12 = v438;
    v93 = v439;
  }
LABEL_156:
  if (*(_BYTE *)(v94 + 194))
  {
LABEL_157:
    v95 = 3;
    goto LABEL_181;
  }
  v96 = v459;
  if (*(_BYTE *)(a1 + 904) && v459)
  {
    do
    {
      v97 = *(_QWORD *)(v96 + 8);
      v96 = v97 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v97 & 2) != 0 && v96);
    *(_QWORD *)__dst = v97 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)v481 = 0;
    if ((sub_22E67A334(a1 + 1592, __dst, v481) & 1) != 0)
      goto LABEL_157;
    v96 = v459;
  }
  if (!v96)
    goto LABEL_180;
  if (v460 < 8)
    goto LABEL_180;
  v98 = *(_QWORD *)(a1 + 56);
  if ((*(_QWORD *)(v98 + 20) & 0x200000000000) == 0)
    goto LABEL_180;
  v99 = v460 & 0xFFFFFFFFFFFFFFF8;
  v100 = *(_BYTE *)(v98 + 519);
  v101 = v100 >= 0 ? (char *)(v98 + 496) : *(char **)(v98 + 496);
  v102 = v100 >= 0 ? v100 & 0x7F : *(_QWORD *)(v98 + 504);
  v103 = *(_BYTE *)(v98 + 495);
  v104 = v103 >= 0 ? (void *)(v98 + 472) : *(void **)(v98 + 472);
  v105 = v103 >= 0 ? v103 & 0x7F : *(_QWORD *)(v98 + 480);
  if (sub_22F16F138((char **)(v460 & 0xFFFFFFFFFFFFFFF8), v101, v102, v104, v105))
  {
LABEL_180:
    v95 = 0;
    goto LABEL_181;
  }
  if (sub_22F16B7D0(v98, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), v99))
  {
    v160 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v160 + 312) = *v12;
    *(_DWORD *)(v160 + 316) = 1245;
    if (*(char *)(v160 + 311) < 0)
    {
      **(_BYTE **)(v160 + 288) = 0;
      *(_QWORD *)(v160 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v160 + 288) = 0;
      *(_BYTE *)(v160 + 311) = 0;
    }
    *(_QWORD *)__dst = v160 + 320;
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = v160;
    LOWORD(__p) = 1;
    *(_BYTE *)(v160 + 320) = 0;
    *(_DWORD *)(v160 + 664) = 0;
    v253 = *(unsigned int *)(v160 + 776);
    if ((_DWORD)v253)
    {
      v254 = *(_QWORD *)(v160 + 768);
      v255 = 56 * v253;
      do
      {
        if (*(char *)(v254 + v255 - 9) < 0)
          operator delete(*(void **)(v254 + v255 - 32));
        v255 -= 56;
      }
      while (v255);
    }
    *(_DWORD *)(v160 + 776) = 0;
    v256 = v460 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v257 = (void **)v256;
      v256 = *(_QWORD *)(v256 + 32);
    }
    while (v256);
    v258 = *((_BYTE *)v257 + 23);
    if (v258 >= 0)
      v145 = v257;
    else
      v145 = *v257;
    if (v258 >= 0)
      v146 = v258 & 0x7F;
    else
      v146 = (size_t)v257[1];
    goto LABEL_261;
  }
  *(_QWORD *)v502 = &v502[16];
  *(_QWORD *)&v502[8] = 0x200000000;
  v177 = v460 & 0xFFFFFFFFFFFFFFF8;
  if ((v460 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    do
    {
      v178 = *(_BYTE *)(v177 + 23);
      v179 = v178 < 0;
      if (v178 >= 0)
        v180 = (const void *)v177;
      else
        v180 = *(const void **)v177;
      v181 = v178 & 0x7F;
      if (v179)
        v182 = *(_QWORD *)(v177 + 8);
      else
        v182 = v181;
      v183 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), v180, v182);
      v184 = *v12;
      v185 = *(unsigned int *)&v502[8];
      if (*(unsigned int *)&v502[8] >= (unint64_t)*(unsigned int *)&v502[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v185 = *(unsigned int *)&v502[8];
      }
      v186 = (uint64_t *)(*(_QWORD *)v502 + 16 * v185);
      *v186 = v183;
      v186[1] = v184;
      v187 = ++*(_DWORD *)&v502[8];
      v177 = *(_QWORD *)(v177 + 32);
    }
    while (v177);
    v206 = *(_BYTE **)v502;
    if (v187)
    {
      v207 = *(_QWORD *)v502 + 16 * v187 - 16;
      if (*(_QWORD *)v502 < v207)
      {
        do
        {
          v208 = *(_QWORD *)v206;
          *(_QWORD *)v206 = *(_QWORD *)v207;
          *(_QWORD *)v207 = v208;
          LODWORD(v208) = *((_DWORD *)v206 + 2);
          *((_DWORD *)v206 + 2) = *(_DWORD *)(v207 + 8);
          *(_DWORD *)(v207 + 8) = v208;
          v206 += 16;
          v207 -= 16;
        }
        while ((unint64_t)v206 < v207);
        v206 = *(_BYTE **)v502;
        v187 = *(_DWORD *)&v502[8];
      }
    }
  }
  else
  {
    v187 = 0;
    v206 = &v502[16];
  }
  if (v439)
  {
    v259 = *(_QWORD *)(a1 + 56);
    if ((*(_BYTE *)(v259 + 1) & 0x40) != 0)
    {
      v437 = "@import";
      v260 = 7;
    }
    else
    {
      if ((*(_QWORD *)(v259 + 20) & 0xC00000000000) == 0)
        goto LABEL_593;
      v437 = "import";
      v260 = 6;
    }
    v429 = v260;
    *(_QWORD *)__dst = &__p;
    *(_OWORD *)&__dst[8] = xmmword_22F44E310;
    if (v187)
    {
      v261 = 0;
      v262 = 0;
      v263 = 16 * v187;
      while (1)
      {
        v264 = *(_QWORD *)&__dst[16];
        if (v261)
        {
          if ((unint64_t)(v262 + 1) > *(_QWORD *)&__dst[16])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v262 = *(_QWORD *)&__dst[8];
          }
          *(_BYTE *)(*(_QWORD *)__dst + v262) = 46;
          v264 = *(_QWORD *)&__dst[16];
          v262 = ++*(_QWORD *)&__dst[8];
        }
        v265 = *(unsigned int **)(*(_QWORD *)&v206[v261] + 16);
        v268 = *v265;
        v267 = v265 + 4;
        v266 = v268;
        if (v264 < (unint64_t)v268 + v262)
          break;
        if (v266)
          goto LABEL_540;
LABEL_541:
        v262 += v266;
        *(_QWORD *)&__dst[8] = v262;
        v261 += 16;
        if (v263 == v261)
          goto LABEL_545;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v262 = *(_QWORD *)&__dst[8];
      if (!v266)
        goto LABEL_541;
LABEL_540:
      memcpy((void *)(*(_QWORD *)__dst + v262), v267, v266);
      v262 = *(_QWORD *)&__dst[8];
      goto LABEL_541;
    }
LABEL_545:
    v269 = *((unsigned __int16 *)a3 + 8);
    if ((v269 - 7) >= 6)
    {
      v270 = 0;
      if ((v269 - 13) >= 6 && v269 != 1)
        v270 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v270 = 0;
    }
    v281 = qword_22F4ACCA0[(int)sub_22F1D32AC(v270) - 10];
    v282 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v282 + 312) = v432;
    *(_DWORD *)(v282 + 316) = 1285;
    if (*(char *)(v282 + 311) < 0)
    {
      **(_BYTE **)(v282 + 288) = 0;
      *(_QWORD *)(v282 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v282 + 288) = 0;
      *(_BYTE *)(v282 + 311) = 0;
    }
    v12 = v438;
    v283 = (unsigned __int8 *)(v282 + 320);
    v477[0] = (unsigned __int8 *)(v282 + 320);
    v477[1] = 0;
    v477[2] = (unsigned __int8 *)v282;
    v478 = 1;
    *(_BYTE *)(v282 + 320) = 0;
    *(_DWORD *)(v282 + 664) = 0;
    v284 = *(unsigned int *)(v282 + 776);
    if ((_DWORD)v284)
    {
      v285 = *(_QWORD *)(v282 + 768);
      v286 = 56 * v284;
      do
      {
        if (*(char *)(v285 + v286 - 9) < 0)
          operator delete(*(void **)(v285 + v286 - 32));
        v286 -= 56;
      }
      while (v286);
      LODWORD(v284) = *v283;
      v12 = v438;
    }
    *(_DWORD *)(v282 + 776) = 0;
    v283[v284 + 1] = 2;
    *(_BYTE *)(v282 + 320) = v284 + 1;
    *(_QWORD *)&v283[8 * v284 + 16] = v281;
    sub_22E3B89A8(v477, *(void **)__dst, *(size_t *)&__dst[8]);
    v474 = 773;
    v473.__r_.__value_.__r.__words[0] = (std::string::size_type)v437;
    v473.__r_.__value_.__l.__size_ = v429;
    v473.__r_.__value_.__r.__words[2] = (std::string::size_type)" ";
    *(_QWORD *)&v470 = &v473;
    v471 = *(_OWORD *)__dst;
    LOWORD(v472) = 1282;
    *(_QWORD *)&v499 = &v470;
    *(_QWORD *)&v500 = ";";
    LOWORD(v501) = 770;
    llvm::Twine::str((llvm::Twine *)&v499);
    if (v476 >= 0)
      v287 = v475;
    else
      v287 = (void **)v475[0];
    if (v476 >= 0)
      v288 = v476 & 0x7F;
    else
      v288 = (size_t)v475[1];
    *(_QWORD *)&v481[12] = 0;
    v481[20] = 0;
    v482 = 0;
    *(_DWORD *)&v481[4] = v433;
    *(_DWORD *)v481 = v439;
    v481[8] = 0;
    if (v288 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_673;
    if (v288 >= 0x17)
    {
      v290 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v288 | 7) != 0x17)
        v290 = v288 | 7;
      v291 = v290 + 1;
      v289 = (__int128 *)operator new(v290 + 1);
      v480 = v291 | 0x8000000000000000;
      *(_QWORD *)&v479 = v289;
      *((_QWORD *)&v479 + 1) = v288;
    }
    else
    {
      HIBYTE(v480) = v288;
      v289 = &v479;
      if (!v288)
        goto LABEL_586;
    }
    memmove(v289, v287, v288);
LABEL_586:
    *((_BYTE *)v289 + v288) = 0;
    *(_OWORD *)&v481[24] = v479;
    *(_QWORD *)&v481[40] = v480;
    sub_22E6D82D0((uint64_t *)v477, v481);
    if ((v481[47] & 0x80000000) != 0)
      operator delete(*(void **)&v481[24]);
    if (v476 < 0)
      operator delete(v475[0]);
    sub_22E3BB0B8((uint64_t)v477);
    if (*(__int128 **)__dst != &__p)
      free(*(void **)__dst);
    v206 = *(_BYTE **)v502;
    v187 = *(_DWORD *)&v502[8];
  }
LABEL_593:
  v95 = 1;
  v292 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 16))(*(_QWORD *)(a1 + 112), *a3, v206, v187, 0, 1);
  v293 = v292 & 6;
  if (v292 < 8 || v293 != 0)
  {
    v93 = v439;
    if (v293 == 4)
    {
      v95 = 0;
      v301 = 1;
      goto LABEL_669;
    }
    if (v293 != 2)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 9))
      {
        a3[4] = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v295 = *(_QWORD *)(a1 + 1008);
        v296 = *(_QWORD *)(v295 + 152);
        v297 = *(_DWORD *)(v295 + 184);
        a3[1] = v296 - v297;
        v298 = v297 - *(_DWORD *)(v295 + 144);
        v299 = *(_DWORD *)(v295 + 160);
        if (v299 < 0)
          v300 = sub_22F142B40(*(_QWORD *)(v295 + 8), v299, v298, (int)v296 - v297);
        else
          v300 = v299 + v298;
        v95 = 0;
        v301 = 0;
        *a3 = v300;
        *((_WORD *)a3 + 8) = 1;
        *(_QWORD *)(v295 + 184) = v296;
        *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 184) = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 152);
      }
      else
      {
        v95 = 0;
        v301 = 0;
      }
      goto LABEL_668;
    }
    v420 = v292 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v421 = v420;
      v420 = *(_QWORD *)(v420 + 32);
    }
    while (v420);
    sub_22F2A7A64(a1, v421);
    v95 = 0;
    v460 = 0;
  }
  v301 = 1;
LABEL_668:
  v93 = v439;
LABEL_669:
  if (*(_BYTE **)v502 != &v502[16])
    free(*(void **)v502);
  if (!v301)
    goto LABEL_263;
LABEL_181:
  v106 = (unint64_t)sub_22F1E361C(*(_QWORD **)(a1 + 88), *v12);
  v107 = v459;
  if (v459)
  {
    do
    {
      v108 = *(_QWORD *)(v107 + 8);
      v107 = v108 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v108 & 2) != 0 && v107);
    v109 = (sub_22F13B0E4(*(_QWORD **)(a1 + 104), v107)->n128_u16[0] >> 2) & 7;
    if ((int)v106 <= v109)
      v106 = v109;
    else
      v106 = v106;
  }
  if (v93)
  {
    v110 = *((unsigned __int16 *)a3 + 8);
    if ((v110 - 7) < 6 || ((v110 - 13) >= 6 ? (v111 = v110 == 1) : (v111 = 1), v111))
      v150 = 0;
    else
      v150 = *((_QWORD *)a3 + 1);
    v112 = sub_22F1D32AC(v150) == 17;
  }
  else
  {
    v112 = 1;
  }
  v473.__r_.__value_.__s.__data_[0] = 0;
  if (!v95)
  {
    v113 = v459;
    if (!v459)
    {
LABEL_199:
      v95 = 0;
      goto LABEL_200;
    }
    do
    {
      v161 = *(_QWORD *)(v113 + 8);
      v113 = v161 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v161 & 2) != 0 && v113);
    if ((sub_22F40F3C4(*(_QWORD **)(a1 + 104), a1, v113, v112, (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200000000000) != 0, v460 & 0xFFFFFFFFFFFFFFF8, &v473) & 1) != 0)
    {
      v162 = v459;
      if (*(_DWORD *)(a1 + 1000) == 1)
      {
        do
        {
          v163 = *(_QWORD *)(v162 + 8);
          v162 = v163 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v163 & 2) != 0 && v162);
        v164 = sub_22E6155EC(*(_QWORD **)(a1 + 88), *(_DWORD *)(*(_QWORD *)(a1 + 88) + 344));
        if (v164)
        {
          if (*(_DWORD *)(v164 + 64) == *(_DWORD *)(v162 + 64))
          {
            v165 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v165 + 312) = *v12;
            *(_DWORD *)(v165 + 316) = 1138;
            if (*(char *)(v165 + 311) < 0)
            {
              **(_BYTE **)(v165 + 288) = 0;
              *(_QWORD *)(v165 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v165 + 288) = 0;
              *(_BYTE *)(v165 + 311) = 0;
            }
            v457[0] = v165 + 320;
            v457[1] = 0;
            v457[2] = v165;
            v458 = 1;
            *(_BYTE *)(v165 + 320) = 0;
            *(_DWORD *)(v165 + 664) = 0;
            v319 = *(unsigned int *)(v165 + 776);
            if ((_DWORD)v319)
            {
              v320 = *(_QWORD *)(v165 + 768);
              v321 = 56 * v319;
              do
              {
                if (*(char *)(v320 + v321 - 9) < 0)
                  operator delete(*(void **)(v320 + v321 - 32));
                v321 -= 56;
              }
              while (v321);
            }
            *(_DWORD *)(v165 + 776) = 0;
            v148 = v457;
            goto LABEL_262;
          }
        }
      }
      goto LABEL_199;
    }
    if (v460 < 8)
    {
      v95 = 2;
    }
    else if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x1000000000000) != 0)
    {
      v95 = 2;
    }
    else
    {
      v95 = 1;
    }
  }
LABEL_200:
  v114 = *(_QWORD *)(a1 + 1088);
  v115 = v459;
  if (v114 && v93)
  {
    v116 = v460 & 0xFFFFFFFFFFFFFFF8;
    if (v95 != 1)
      v116 = 0;
    (*(void (**)(uint64_t, _QWORD, unsigned int *, unsigned __int8 *, size_t, _BOOL4, unint64_t, _QWORD, unint64_t, void *, _QWORD, void *, _QWORD, unint64_t, _DWORD))(*(_QWORD *)v114 + 40))(v114, v93, a3, v431, v18, v442, v446, 0, v459, v493, v494, v490, v491, v116, v106);
    v115 = v459;
    if (v95 == 2 && v459)
    {
      (*(void (**)(_QWORD, unint64_t *, int *, unint64_t))(**(_QWORD **)(a1 + 1088) + 32))(*(_QWORD *)(a1 + 1088), &v459, v12, v106);
      v115 = v459;
    }
  }
  if (!v115)
    goto LABEL_263;
  if (!v93 && v460 <= 7)
  {
    v117 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v117 + 312) = *v12;
    *(_DWORD *)(v117 + 316) = 1044;
    if (*(char *)(v117 + 311) < 0)
    {
      **(_BYTE **)(v117 + 288) = 0;
      *(_QWORD *)(v117 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v117 + 288) = 0;
      *(_BYTE *)(v117 + 311) = 0;
    }
    *(_QWORD *)__dst = v117 + 320;
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = v117;
    LOWORD(__p) = 1;
    *(_BYTE *)(v117 + 320) = 0;
    *(_DWORD *)(v117 + 664) = 0;
    v139 = *(unsigned int *)(v117 + 776);
    if ((_DWORD)v139)
    {
      v140 = *(_QWORD *)(v117 + 768);
      v141 = 56 * v139;
      do
      {
        if (*(char *)(v140 + v141 - 9) < 0)
          operator delete(*(void **)(v140 + v141 - 32));
        v141 -= 56;
      }
      while (v141);
    }
    *(_DWORD *)(v117 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)__dst, v441, v434);
    v142 = v459;
    do
    {
      v143 = (size_t *)v142;
      v144 = *(_QWORD *)(v142 + 8);
      if ((v144 & 2) == 0)
        break;
      v142 = v144 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v142);
    v147 = *v143;
    v145 = v143 + 4;
    v146 = v147;
LABEL_261:
    sub_22E3B89A8((unsigned __int8 **)__dst, v145, v146);
    v148 = __dst;
LABEL_262:
    sub_22E3BB0B8((uint64_t)v148);
    goto LABEL_263;
  }
  if (!HIBYTE(v463))
  {
    v118 = v115;
    do
    {
      v119 = *(_QWORD *)(v118 + 8);
      v118 = v119 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v119 & 2) != 0 && v118);
    v120 = *(_BYTE *)(v118 + 23);
    v121 = v120;
    v122 = *(_QWORD *)(v118 + 8);
    v123 = v120 & 0x7F;
    if (v121 >= 0)
      v122 = v123;
    if (v122)
    {
      v440 = v106;
      v124 = (char *)__src;
      v125 = __len;
      do
      {
        v126 = *(_QWORD *)(v115 + 8);
        v115 = v126 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v126 & 2) != 0 && v115);
      llvm::sys::path::begin();
      llvm::sys::path::end();
      *(_QWORD *)__dst = &__dst[16];
      *(_QWORD *)&__dst[8] = 0x1000000000;
      v470 = v451;
      v471 = v452;
      v472 = v453;
      v499 = v454;
      v500 = v455;
      *(_OWORD *)v481 = v454;
      *(_OWORD *)&v481[16] = v455;
      v501 = v456;
      *(_OWORD *)&v481[32] = v456;
      *(_OWORD *)v502 = v451;
      *(_OWORD *)&v502[16] = v452;
      *(_OWORD *)&v502[32] = v453;
      v127 = 0;
      if ((llvm::sys::path::const_iterator::operator==() & 1) == 0)
      {
        do
        {
          ++v127;
          llvm::sys::path::const_iterator::operator++();
        }
        while (!llvm::sys::path::const_iterator::operator==());
      }
      v128 = *(unsigned int *)&__dst[8];
      if (v127 + (unint64_t)*(unsigned int *)&__dst[8] > *(unsigned int *)&__dst[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v128 = *(unsigned int *)&__dst[8];
      }
      *(_OWORD *)v481 = v499;
      *(_OWORD *)&v481[16] = v500;
      *(_OWORD *)&v481[32] = v501;
      *(_OWORD *)v502 = v470;
      *(_OWORD *)&v502[16] = v471;
      *(_OWORD *)&v502[32] = v472;
      v129 = *(_QWORD *)__dst;
      if ((llvm::sys::path::const_iterator::operator==() & 1) == 0)
      {
        v130 = (_OWORD *)(v129 + 16 * v128);
        do
        {
          *v130++ = *(_OWORD *)&v481[16];
          llvm::sys::path::const_iterator::operator++();
        }
        while (!llvm::sys::path::const_iterator::operator==());
      }
      *(_DWORD *)&__dst[8] += v127;
      llvm::sys::path::rbegin();
      llvm::sys::path::rend();
      if (*(_DWORD *)&__dst[8])
      {
        v131 = 0;
        v435 = 0;
        v132 = *(_QWORD *)__dst;
        v133 = 16 * *(unsigned int *)&__dst[8];
        while (1)
        {
          v134 = (const void **)(v132 + v133 - 16);
          v135 = *(_QWORD *)(v132 + v133 - 8);
          if (v135 == 2)
          {
            if (*(_WORD *)*v134 != 11822)
              goto LABEL_236;
            ++v131;
          }
          else if (v135 != 1 || *(_BYTE *)*v134 != 46)
          {
LABEL_236:
            if (v131)
            {
              --v131;
            }
            else if ((llvm::sys::path::reverse_iterator::operator==() & 1) != 0)
            {
              v131 = 0;
            }
            else
            {
              v136 = *(_QWORD *)(v132 + v133 - 8);
              if (v136 != *(_QWORD *)&v481[24])
                break;
              if (v136 && memcmp(*v134, *(const void **)&v481[16], *(_QWORD *)(v132 + v133 - 8)))
              {
                if (llvm::StringRef::compare_insensitive())
                  break;
                *(_OWORD *)v134 = *(_OWORD *)&v481[16];
                v435 = 1;
              }
              llvm::sys::path::reverse_iterator::operator++();
              v131 = 0;
            }
          }
          v133 -= 16;
          if (!v133)
          {
            if ((v435 & 1) == 0)
              break;
            *(_QWORD *)v481 = &v481[24];
            *(_OWORD *)&v481[8] = xmmword_22F44E310;
            if (v18 + 2 < 0x81)
            {
              v137 = 0;
              v138 = 128;
            }
            else
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v137 = *(_QWORD *)&v481[8];
              v138 = *(_QWORD *)&v481[16];
            }
            if (v442)
              v188 = 60;
            else
              v188 = 34;
            if (v137 + 1 > v138)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v137 = *(_QWORD *)&v481[8];
            }
            *(_BYTE *)(*(_QWORD *)v481 + v137) = v188;
            ++*(_QWORD *)&v481[8];
            if (*(_DWORD *)&__dst[8])
            {
              v189 = *(char ***)__dst;
              v190 = *(_QWORD *)__dst + 16 * *(unsigned int *)&__dst[8];
              if (v442)
                v191 = 62;
              else
                v191 = 34;
              v443 = v191;
              while (1)
              {
                v193 = *v189;
                v192 = (size_t)v189[1];
                if (v192 != 1)
                  break;
                is_separator = llvm::sys::path::is_separator((llvm::sys::path *)*v193);
                v195 = *(_QWORD *)&v481[8];
                if ((is_separator & 1) == 0)
                  goto LABEL_365;
                if (!*(_QWORD *)&v481[8])
                  goto LABEL_374;
LABEL_372:
                v189 += 2;
                if (v189 == (char **)v190)
                  goto LABEL_381;
              }
              v195 = *(_QWORD *)&v481[8];
LABEL_365:
              if (*(_QWORD *)&v481[16] < v195 + v192)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v195 = *(_QWORD *)&v481[8];
                if (v192)
                {
LABEL_367:
                  memcpy((void *)(*(_QWORD *)v481 + v195), v193, v192);
                  v195 = *(_QWORD *)&v481[8];
                }
              }
              else if (v192)
              {
                goto LABEL_367;
              }
              v196 = v195 + v192;
              *(_QWORD *)&v481[8] = v196;
              if (v196 > v125)
              {
                if (v196 + 1 > *(_QWORD *)&v481[16])
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v196 = *(_QWORD *)&v481[8];
                }
                *(_BYTE *)(*(_QWORD *)v481 + v196) = v443;
                ++*(_QWORD *)&v481[8];
                goto LABEL_372;
              }
              do
              {
LABEL_374:
                v197 = *(_QWORD *)&v481[8];
                v198 = v124[*(_QWORD *)&v481[8] - 1];
                if ((unint64_t)(*(_QWORD *)&v481[8] + 1) > *(_QWORD *)&v481[16])
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v197 = *(_QWORD *)&v481[8];
                }
                *(_BYTE *)(*(_QWORD *)v481 + v197) = v198;
                v199 = (*(_QWORD *)&v481[8])++;
              }
              while (*(_QWORD *)&v481[8] <= v125
                   && (llvm::sys::path::is_separator((llvm::sys::path *)v124[v199]) & 1) != 0);
              goto LABEL_372;
            }
LABEL_381:
            v200 = v438;
            if (!v440)
              goto LABEL_453;
            llvm::sys::path::begin();
            if (*(_QWORD *)&v502[24] == 5 && !llvm::StringRef::compare_insensitive())
              goto LABEL_453;
            if (v18 > 0x12)
              goto LABEL_454;
            *(_QWORD *)&v499 = v431;
            *((_QWORD *)&v499 + 1) = v18;
            *(_QWORD *)v502 = &v502[24];
            *(_OWORD *)&v502[8] = xmmword_22F44E330;
            sub_22EB87B90(v502, (uint64_t)&v499, 1);
            v203 = *(_QWORD *)&v502[8];
            v202 = *(char **)v502;
            if (*(_QWORD *)&v502[8])
            {
              while (1)
              {
                v204 = (llvm::sys::path *)*v202;
                if ((v204 & 0x80000000) != 0)
                {
                  v230 = 0;
                  goto LABEL_450;
                }
                if (((_DWORD)v204 - 65) <= 0x19)
                  break;
                if (llvm::sys::path::is_separator(v204))
                {
                  v205 = 47;
                  goto LABEL_391;
                }
LABEL_392:
                ++v202;
                if (!--v203)
                {
                  v499 = *(_OWORD *)v502;
                  LOWORD(v500) = 0;
                  if (*(_QWORD *)&v502[8] == 8 && **(_QWORD **)v502 == 0x682E747265737361)
                    LOWORD(v500) = 257;
                  goto LABEL_657;
                }
              }
              v205 = *v202 + 32;
LABEL_391:
              *v202 = v205;
              goto LABEL_392;
            }
            v499 = *(unint64_t *)v502;
            LOWORD(v500) = 0;
LABEL_657:
            v322 = sub_22E72DCE4((uint64_t)&v499, "complex.h", 9, "ctype.h", 7, "errno.h", 7, v201, "fenv.h", 6, 1);
            v323 = sub_22F2ABF14(v322, "float.h", 7, 1);
            v325 = sub_22E72DCE4(v323, "inttypes.h", 10, "iso646.h", 8, "limits.h", 8, v324, "locale.h", 8, 1);
            v326 = sub_22F2ABF14(v325, "math.h", 6, 1);
            v328 = sub_22E72DCE4(v326, "setjmp.h", 8, "signal.h", 8, "stdalign.h", 10, v327, "stdarg.h", 8, 1);
            v329 = sub_22F2ABF14(v328, "stdatomic.h", 11, 1);
            v331 = sub_22E72DCE4(v329, "stdBOOL.h", 9, "stddef.h", 8, "stdint.h", 8, v330, "stdio.h", 7, 1);
            v332 = sub_22F2ABF14(v331, "stdlib.h", 8, 1);
            v334 = sub_22E72DCE4(v332, "stdnoreturn.h", 13, "string.h", 8, "tgmath.h", 8, v333, "threads.h", 9, 1);
            v336 = sub_22E72DCE4(v334, "time.h", 6, "uchar.h", 7, "wchar.h", 7, v335, "wctype.h", 8, 1);
            v337 = sub_22F2ABF14(v336, "cassert", 7, 1);
            v339 = sub_22E72DCE4(v337, "ccomplex", 8, "cctype", 6, "cerrno", 6, v338, "cfenv", 5, 1);
            v340 = sub_22F2ABF14(v339, "cfloat", 6, 1);
            v342 = sub_22E72DCE4(v340, "cinttypes", 9, "ciso646", 7, "climits", 7, v341, "clocale", 7, 1);
            v343 = sub_22F2ABF14(v342, "cmath", 5, 1);
            v345 = sub_22E72DCE4(v343, "csetjmp", 7, "csignal", 7, "cstdalign", 9, v344, "cstdarg", 7, 1);
            v346 = sub_22F2ABF14(v345, "cstdBOOL", 8, 1);
            v348 = sub_22E72DCE4(v346, "cstddef", 7, "cstdint", 7, "cstdio", 6, v347, "cstdlib", 7, 1);
            v349 = sub_22F2ABF14(v348, "cstring", 7, 1);
            v351 = sub_22E72DCE4(v349, "ctgmath", 7, "ctime", 5, "cuchar", 6, v350, "cwchar", 6, 1);
            v352 = sub_22F2ABF14(v351, "cwctype", 7, 1);
            v353 = sub_22F2ABF14(v352, "algorithm", 9, 1);
            v355 = sub_22E72DCE4(v353, "fstream", 7, "list", 4, "regex", 5, v354, "thread", 6, 1);
            v356 = sub_22F2ABF14(v355, "array", 5, 1);
            v358 = sub_22E72DCE4(v356, "functional", 10, "locale", 6, "scoped_allocator", 16, v357, "tuple", 5, 1);
            v359 = sub_22F2ABF14(v358, "atomic", 6, 1);
            v361 = sub_22E72DCE4(v359, "future", 6, "map", 3, "set", 3, v360, "type_traits", 11, 1);
            v362 = sub_22F2ABF14(v361, "bitset", 6, 1);
            v364 = sub_22E72DCE4(v362, "initializer_list", 16, "memory", 6, "shared_mutex", 12, v363, "typeindex", 9, 1);
            v365 = sub_22F2ABF14(v364, "chrono", 6, 1);
            v367 = sub_22E72DCE4(v365, "iomanip", 7, "mutex", 5, "sstream", 7, v366, "typeinfo", 8, 1);
            v368 = sub_22F2ABF14(v367, "codecvt", 7, 1);
            v370 = sub_22E72DCE4(v368, "ios", 3, "new", 3, "stack", 5, v369, "unordered_map", 13, 1);
            v371 = sub_22F2ABF14(v370, "complex", 7, 1);
            v373 = sub_22E72DCE4(v371, "iosfwd", 6, "numeric", 7, "stdexcept", 9, v372, "unordered_set", 13, 1);
            v374 = sub_22F2ABF14(v373, "condition_variable", 18, 1);
            v376 = sub_22E72DCE4(v374, "iostream", 8, "ostream", 7, "streambuf", 9, v375, "utility", 7, 1);
            v377 = sub_22F2ABF14(v376, "deque", 5, 1);
            v379 = sub_22E72DCE4(v377, "istream", 7, "queue", 5, "string", 6, v378, "valarray", 8, 1);
            v380 = sub_22F2ABF14(v379, "exception", 9, 1);
            v382 = sub_22E72DCE4(v380, "iterator", 8, "random", 6, "strstream", 9, v381, "vector", 6, 1);
            v384 = sub_22E72DCE4(v382, "forward_list", 12, "limits", 6, "ratio", 5, v383, "system_error", 12, 1);
            v385 = sub_22F2ABF14(v384, "aio.h", 5, 1);
            v387 = sub_22E72DCE4(v385, "arpa/inet.h", 11, "cpio.h", 6, "dirent.h", 8, v386, "dlfcn.h", 7, 1);
            v388 = sub_22F2ABF14(v387, "fcntl.h", 7, 1);
            v390 = sub_22E72DCE4(v388, "fmtmsg.h", 8, "fnmatch.h", 9, "ftw.h", 5, v389, "glob.h", 6, 1);
            v391 = sub_22F2ABF14(v390, "grp.h", 5, 1);
            v393 = sub_22E72DCE4(v391, "iconv.h", 7, "langinfo.h", 10, "libgen.h", 8, v392, "monetary.h", 10, 1);
            v394 = sub_22F2ABF14(v393, "mqueue.h", 8, 1);
            v396 = sub_22E72DCE4(v394, "ndbm.h", 6, "net/if.h", 8, "netdb.h", 7, v395, "netinet/in.h", 12, 1);
            v397 = sub_22F2ABF14(v396, "netinet/tcp.h", 13, 1);
            v399 = sub_22E72DCE4(v397, "nl_types.h", 10, "poll.h", 6, "pthread.h", 9, v398, "pwd.h", 5, 1);
            v400 = sub_22F2ABF14(v399, "regex.h", 7, 1);
            v402 = sub_22E72DCE4(v400, "sched.h", 7, "search.h", 8, "semaphore.h", 11, v401, "spawn.h", 7, 1);
            v403 = sub_22F2ABF14(v402, "strings.h", 9, 1);
            v405 = sub_22E72DCE4(v403, "stropts.h", 9, "sys/ipc.h", 9, "sys/mman.h", 10, v404, "sys/msg.h", 9, 1);
            v406 = sub_22F2ABF14(v405, "sys/resource.h", 14, 1);
            v408 = sub_22E72DCE4(v406, "sys/select.h", 12, "sys/sem.h", 9, "sys/shm.h", 9, v407, "sys/socket.h", 12, 1);
            v409 = sub_22F2ABF14(v408, "sys/stat.h", 10, 1);
            v411 = sub_22E72DCE4(v409, "sys/statvfs.h", 13, "sys/time.h", 10, "sys/times.h", 11, v410, "sys/types.h", 11, 1);
            v412 = sub_22F2ABF14(v411, "sys/uio.h", 9, 1);
            v414 = sub_22E72DCE4(v412, "sys/un.h", 8, "sys/utsname.h", 13, "sys/wait.h", 10, v413, "syslog.h", 8, 1);
            v416 = sub_22E72DCE4(v414, "tar.h", 5, "termios.h", 9, "trace.h", 7, v415, "ulimit.h", 8, 1);
            v418 = sub_22E72DCE4(v416, "unistd.h", 8, "utime.h", 7, "utmpx.h", 7, v417, "wordexp.h", 9, 1);
            v419 = !*(_BYTE *)(v418 + 17) || *(_BYTE *)(v418 + 16) == 0;
            v230 = !v419;
            v200 = v438;
LABEL_450:
            if (*(_BYTE **)v502 != &v502[24])
              free(*(void **)v502);
            if (!v230)
LABEL_454:
              v231 = 1275;
            else
LABEL_453:
              v231 = 1274;
            v232 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v232 + 312) = *v200;
            *(_DWORD *)(v232 + 316) = v231;
            if (*(char *)(v232 + 311) < 0)
            {
              **(_BYTE **)(v232 + 288) = 0;
              *(_QWORD *)(v232 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v232 + 288) = 0;
              *(_BYTE *)(v232 + 311) = 0;
            }
            v499 = (unint64_t)(v232 + 320);
            *(_QWORD *)&v500 = v232;
            WORD4(v500) = 1;
            *(_BYTE *)(v232 + 320) = 0;
            *(_DWORD *)(v232 + 664) = 0;
            v233 = *(unsigned int *)(v232 + 776);
            if ((_DWORD)v233)
            {
              v234 = *(_QWORD *)(v232 + 768);
              v235 = 56 * v233;
              do
              {
                if (*(char *)(v234 + v235 - 9) < 0)
                  operator delete(*(void **)(v234 + v235 - 32));
                v235 -= 56;
              }
              while (v235);
            }
            *(_DWORD *)(v232 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&v499, *(void **)v481, *(size_t *)&v481[8]);
            v236 = *(const void **)v481;
            v237 = *(_QWORD *)&v481[8];
            *(_QWORD *)&v502[12] = 0;
            v502[20] = 0;
            memset(&v502[24], 0, 24);
            v503 = 0;
            *(_QWORD *)v502 = v446;
            v502[8] = 0;
            if (*(_QWORD *)&v481[8] <= 0x7FFFFFFFFFFFFFF7uLL)
            {
              if (*(_QWORD *)&v481[8] >= 0x17uLL)
              {
                v239 = (*(_QWORD *)&v481[8] & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((*(_QWORD *)&v481[8] | 7) != 0x17)
                  v239 = *(_QWORD *)&v481[8] | 7;
                v240 = v239 + 1;
                v238 = (__int128 *)operator new(v239 + 1);
                *(_QWORD *)&v471 = v240 | 0x8000000000000000;
                *(_QWORD *)&v470 = v238;
                *((_QWORD *)&v470 + 1) = v237;
              }
              else
              {
                BYTE7(v471) = v481[8];
                v238 = &v470;
                if (!*(_QWORD *)&v481[8])
                {
LABEL_471:
                  *((_BYTE *)v238 + v237) = 0;
                  *(_OWORD *)&v502[24] = v470;
                  *(_QWORD *)&v502[40] = v471;
                  sub_22E6D82D0((uint64_t *)&v499, v502);
                  if ((v502[47] & 0x80000000) != 0)
                    operator delete(*(void **)&v502[24]);
                  sub_22E3BB0B8((uint64_t)&v499);
                  if (*(_BYTE **)v481 != &v481[24])
                    free(*(void **)v481);
                  break;
                }
              }
              memmove(v238, v236, v237);
              goto LABEL_471;
            }
LABEL_673:
            abort();
          }
        }
      }
      if (*(_BYTE **)__dst != &__dst[16])
        free(*(void **)__dst);
      v12 = v438;
      LODWORD(v106) = v440;
    }
  }
  if (v95 == 1)
  {
    sub_22F190280(a1, v460 & 0xFFFFFFFFFFFFFFF8, v430);
    v241 = *((unsigned __int16 *)a3 + 8);
    if ((v241 - 7) >= 6)
    {
      v242 = 0;
      if ((v241 - 13) >= 6 && v241 != 1)
        v242 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v242 = 0;
    }
    v21 = 2 * (sub_22F1D32AC(v242) != 11);
    goto LABEL_264;
  }
  if (v95 != 3)
  {
    if (v95 == 2)
    {
      if ((v460 & 0xFFFFFFFFFFFFFFF8) != 0)
        v21 = 3;
      else
        v21 = 0;
      goto LABEL_264;
    }
    if (*(_QWORD *)(a1 + 1072) - *(_QWORD *)(a1 + 1064) == 11144)
    {
      v243 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v243 + 312) = *v12;
      *(_DWORD *)(v243 + 316) = 1137;
      if (*(char *)(v243 + 311) < 0)
      {
        **(_BYTE **)(v243 + 288) = 0;
        *(_QWORD *)(v243 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v243 + 288) = 0;
        *(_BYTE *)(v243 + 311) = 0;
      }
      v449[0] = v243 + 320;
      v449[1] = 0;
      v449[2] = v243;
      v450 = 1;
      *(_BYTE *)(v243 + 320) = 0;
      *(_DWORD *)(v243 + 664) = 0;
      v250 = *(unsigned int *)(v243 + 776);
      if ((_DWORD)v250)
      {
        v251 = *(_QWORD *)(v243 + 768);
        v252 = 56 * v250;
        do
        {
          if (*(char *)(v251 + v252 - 9) < 0)
            operator delete(*(void **)(v251 + v252 - 32));
          v252 -= 56;
        }
        while (v252);
      }
      *(_DWORD *)(v243 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v449);
      v21 = 0;
      *(_BYTE *)(a1 + 904) = 1;
      goto LABEL_264;
    }
    v244 = *v12;
    if ((v244 & 0x80000000) != 0)
      v244 = sub_22F1E2828(*(_QWORD **)(a1 + 88), v244) >> 32;
    v245 = sub_22F1E170C(*(_QWORD *)(a1 + 88), v459, v244, v106, 0, 0);
    if (!v245)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 112) + 9) = 1;
      v21 = 4;
      goto LABEL_264;
    }
    if ((sub_22F172FA4(a1, v245, v461, v462, *v12, v473.__r_.__value_.__s.__data_[0]) & 1) == 0)
    {
      v246 = v460 & 0xFFFFFFFFFFFFFFF8;
      if ((v460 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        v21 = 0;
        goto LABEL_264;
      }
      v247 = v460 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v248 = v247;
        v247 = *(_QWORD *)(v247 + 32);
      }
      while (v247);
      if (!*(_QWORD *)(v248 + 1336))
      {
        v271 = *(_QWORD *)(a1 + 56);
        if ((*(_QWORD *)(v271 + 20) & 0x1000000000000) == 0)
          goto LABEL_561;
        v272 = *(_BYTE *)(v271 + 519);
        v273 = v272 >= 0 ? (char *)(v271 + 496) : *(char **)(v271 + 496);
        v274 = v272 >= 0 ? v272 & 0x7F : *(_QWORD *)(v271 + 504);
        v275 = v271 + 472;
        v276 = *(_BYTE *)(v271 + 495);
        v278 = *(_QWORD *)(v271 + 472);
        v277 = *(_QWORD *)(v271 + 480);
        v279 = (void *)(v276 >= 0 ? v275 : v278);
        v280 = v276 >= 0 ? v276 & 0x7F : v277;
        if (!sub_22F16F138((char **)(v460 & 0xFFFFFFFFFFFFFFF8), v273, v274, v279, v280))
        {
LABEL_561:
          *(_QWORD *)(a1 + 1056) = v246;
          sub_22F1758E4(a1, (uint64_t *)v246, v430, 0);
          v21 = 1;
          goto LABEL_264;
        }
        goto LABEL_263;
      }
      v249 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v249 + 312) = *(_DWORD *)(v246 + 24);
      *(_DWORD *)(v249 + 316) = 37;
      if (*(char *)(v249 + 311) < 0)
      {
        **(_BYTE **)(v249 + 288) = 0;
        *(_QWORD *)(v249 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v249 + 288) = 0;
        *(_BYTE *)(v249 + 311) = 0;
      }
      *(_QWORD *)__dst = v249 + 320;
      *(_QWORD *)&__dst[8] = 0;
      *(_QWORD *)&__dst[16] = v249;
      LOWORD(__p) = 1;
      *(_BYTE *)(v249 + 320) = 0;
      *(_DWORD *)(v249 + 664) = 0;
      v302 = *(unsigned int *)(v249 + 776);
      if ((_DWORD)v302)
      {
        v303 = *(_QWORD *)(v249 + 768);
        v304 = 56 * v302;
        do
        {
          if (*(char *)(v303 + v304 - 9) < 0)
            operator delete(*(void **)(v303 + v304 - 32));
          v304 -= 56;
        }
        while (v304);
      }
      *(_DWORD *)(v249 + 776) = 0;
      sub_22F1D8A24((uint64_t *)v246, 0, v481);
      if (v481[23] >= 0)
        v305 = v481;
      else
        v305 = *(_BYTE **)v481;
      if (v481[23] >= 0)
        v306 = v481[23] & 0x7F;
      else
        v306 = *(_QWORD *)&v481[8];
      sub_22E3B89A8((unsigned __int8 **)__dst, v305, v306);
      if ((v481[23] & 0x80000000) != 0)
        operator delete(*(void **)v481);
      sub_22E3BB0B8((uint64_t)__dst);
      do
      {
        v307 = v246;
        v246 = *(_QWORD *)(v246 + 32);
      }
      while (v246);
      v308 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v308 + 312) = *(_DWORD *)(*(_QWORD *)(v307 + 1336) + 24);
      *(_DWORD *)(v308 + 316) = 109;
      if (*(char *)(v308 + 311) < 0)
      {
        **(_BYTE **)(v308 + 288) = 0;
        *(_QWORD *)(v308 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v308 + 288) = 0;
        *(_BYTE *)(v308 + 311) = 0;
      }
      v447[0] = v308 + 320;
      v447[1] = 0;
      v447[2] = v308;
      v448 = 1;
      *(_BYTE *)(v308 + 320) = 0;
      *(_DWORD *)(v308 + 664) = 0;
      v309 = *(unsigned int *)(v308 + 776);
      if ((_DWORD)v309)
      {
        v310 = *(_QWORD *)(v308 + 768);
        v311 = 56 * v309;
        do
        {
          if (*(char *)(v310 + v311 - 9) < 0)
            operator delete(*(void **)(v310 + v311 - 32));
          v311 -= 56;
        }
        while (v311);
      }
      *(_DWORD *)(v308 + 776) = 0;
      v148 = v447;
      goto LABEL_262;
    }
  }
LABEL_263:
  v21 = 0;
LABEL_264:
  if (v487 != v489)
    free(v487);
  if (v490 != v492)
    free(v490);
  if (v493 != v495)
    free(v493);
LABEL_270:
  if (v496 != v498)
    free(v496);
  return v21;
}

BOOL sub_22F16F138(char **a1, char *__s2, size_t __n, void *a4, uint64_t a5)
{
  char **v7;
  char **v8;
  char v9;
  int v10;
  unint64_t v11;
  char **v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;

  v7 = a1;
  do
  {
    v8 = v7;
    v7 = (char **)v7[4];
  }
  while (v7);
  v9 = *((_BYTE *)v8 + 23);
  v10 = v9;
  v11 = v9 & 0x7F;
  do
  {
    v12 = a1;
    a1 = (char **)a1[4];
  }
  while (a1);
  if (v10 >= 0)
    v13 = (char *)v8;
  else
    v13 = *v8;
  if (v10 >= 0)
    v14 = v11;
  else
    v14 = (unint64_t)v8[1];
  if (((_WORD)v12[168] & 0x10) != 0
    && __n == a5
    && (!__n || !memcmp(__s2, a4, __n) && (__n < 8 || *(_QWORD *)&__s2[__n - 8] != 0x657461766972505FLL))
    && v14 >= 8)
  {
    v15 = v14 - 8;
    if (v14 < v14 - 8)
      v15 = v14;
    if (*(_QWORD *)&v13[v14 - 8] == 0x657461766972505FLL)
      v14 = v15;
  }
  if (v14 != __n)
    return 0;
  if (__n)
    return memcmp(v13, __s2, __n) == 0;
  return 1;
}

uint64_t sub_22F16F250(_DWORD *a1, int *a2)
{
  uint64_t result;
  int v4;
  _DWORD *v5;

  v5 = 0;
  result = sub_22F41549C((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -2;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_22F16F2A0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 136; i += 4)
    {
      v10 = *(_DWORD *)(a1 + i);
      if (v10 <= 0xFFFFFFFD)
        *v8++ = v10;
    }
    if (a2 > 0x20)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](4 * a2, 4);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F4156F8(a1, v14, v8);
  }
  else
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](4 * a2, 4);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F4156F8(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(4 * v7));
  }
}

uint64_t sub_22F16F408(unint64_t a1, _QWORD *a2)
{
  char v4;
  __int16 v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  __int16 v15;
  int v16;
  uint64_t v17;
  _BYTE v18[8];
  _QWORD v19[2];
  uint64_t v20;
  unsigned int v21;
  char v22;
  unsigned int v23[4];
  __int16 v24;
  _QWORD v25[2];

  v4 = *(_BYTE *)(a1 + 538);
  *(_BYTE *)(a1 + 538) = 1;
  v5 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v5 & 0xFFDF;
  do
    sub_22F18FB4C(a1, v23);
  while (v24 == 4);
  v6 = sub_22F1E724C(*(_QWORD **)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 64) + *(_QWORD *)(**(_QWORD **)(a1 + 64) - 24) + 116));
  v19[0] = 0;
  v21 = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v20);
  else
    v20 = 0;
  v22 = 1;
  v18[0] = 0;
  v7 = v23[0];
  if ((v23[0] & 0x80000000) != 0)
    v7 = sub_22F1E22F0(*(_QWORD **)(a1 + 88), v23[0]);
  v8 = v5 & 0x20;
  if (sub_22F16F6E8((uint64_t)v19, v23, (uint64_t)&v16, 1, a1))
  {
    if (v24 != 2)
      sub_22F163BBC(a1);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8;
    LOBYTE(v25[0]) = 0;
    BYTE1(v25[0]) = v18[0];
    HIDWORD(v25[0]) = v7;
  }
  else if (v24 == 2)
  {
    if (v16 == 1)
      *a2 = v17;
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8;
    LOBYTE(v25[0]) = sub_22E508590((uint64_t)&v20, 0);
    BYTE1(v25[0]) = v18[0];
    *(_QWORD *)((char *)v25 + 4) = v19[0];
  }
  else
  {
    if (sub_22F1713EC((uint64_t)v19, 4u, (uint64_t)v23, 1u, v18, a1))
    {
      if (v24 != 2)
        sub_22F163BBC(a1);
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8;
      LOBYTE(v25[0]) = 0;
    }
    else
    {
      if (v24 != 2)
      {
        v9 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v9 + 312) = v23[0];
        *(_DWORD *)(v9 + 316) = 1119;
        if (*(char *)(v9 + 311) < 0)
        {
          **(_BYTE **)(v9 + 288) = 0;
          *(_QWORD *)(v9 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v9 + 288) = 0;
          *(_BYTE *)(v9 + 311) = 0;
        }
        v14[0] = v9 + 320;
        v14[1] = 0;
        v14[2] = v9;
        v15 = 1;
        *(_BYTE *)(v9 + 320) = 0;
        *(_DWORD *)(v9 + 664) = 0;
        v10 = *(unsigned int *)(v9 + 776);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD *)(v9 + 768);
          v12 = 56 * v10;
          do
          {
            if (*(char *)(v11 + v12 - 9) < 0)
              operator delete(*(void **)(v11 + v12 - 32));
            v12 -= 56;
          }
          while (v12);
        }
        *(_DWORD *)(v9 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v14);
        sub_22F163BBC(a1);
      }
      *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8;
      LOBYTE(v25[0]) = sub_22E508590((uint64_t)&v20, 0);
    }
    BYTE1(v25[0]) = v18[0];
    *(_QWORD *)((char *)v25 + 4) = v19[0];
  }
  if (v21 >= 0x41 && v20)
    MEMORY[0x2348A0E84](v20, 0x1000C8000313F17);
  *(_BYTE *)(a1 + 538) = v4;
  return v25[0];
}

uint64_t sub_22F16F6E8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void ***v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _BOOL8 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  void **v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  BOOL v65;
  char v66;
  std::string::size_type v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  uint64_t v80;
  _BOOL8 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  std::string::value_type v89;
  _QWORD *v90;
  unsigned int v91;
  int v92;
  std::string::value_type v93;
  int v94;
  void *v95;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  const void *v110;
  size_t v111;
  unsigned int v112;
  char v113;
  BOOL v114;
  const void *v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::string::size_type v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  std::string::size_type v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  BOOL v154;
  const std::string::value_type *v155;
  uint64_t v156;
  std::string::size_type v157;
  unint64_t i;
  char v159;
  BOOL v160;
  const std::string::value_type *v161;
  std::string::size_type v162;
  std::string::size_type v163;
  std::string *v164;
  size_t size;
  void **v166;
  void **v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  std::string::size_type v192;
  char v193;
  int v194;
  _BYTE *v195;
  unsigned int v196;
  char v197;
  _QWORD *v198;
  uint64_t v199;
  unsigned __int8 *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  _DWORD *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  llvm *v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _DWORD *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  int v235;
  BOOL v236;
  uint64_t v237;
  uint64_t v238;
  _DWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  std::string::value_type v249;
  unsigned __int8 v250;
  _QWORD v251[3];
  __int16 v252;
  _QWORD v253[3];
  __int16 v254;
  _QWORD v255[3];
  __int16 v256;
  _QWORD v257[3];
  __int16 v258;
  _QWORD v259[3];
  __int16 v260;
  std::string v261;
  __int16 v262;
  _QWORD v263[3];
  __int16 v264;
  _QWORD v265[3];
  __int16 v266;
  _QWORD v267[3];
  __int16 v268;
  void **v269;
  uint64_t v270;
  void *v271;
  __int16 v272;
  _DWORD v273[7];
  unsigned __int8 v274;
  unsigned __int8 v275;
  char v276;
  char v277;
  void *v278;
  uint64_t v279;
  unsigned __int16 v280;
  unint64_t v281;
  __int128 v282;
  _QWORD v283[11];

  v283[8] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a3 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *((unsigned __int16 *)a2 + 8);
  if (v10 == 3)
  {
    v11 = *(_QWORD *)(a5 + 744);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    *(_BYTE *)(a5 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(a5 + 48) + 6) = 1;
    do
    {
      sub_22F18FB4C(a5, a2);
      v10 = *((unsigned __int16 *)a2 + 8);
    }
    while (v10 == 4);
  }
  switch(v10)
  {
    case 1:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_7;
    case 2:
    case 22:
      v21 = *(_QWORD *)(a5 + 48);
      *(_DWORD *)(v21 + 312) = *a2;
      *(_DWORD *)(v21 + 316) = 1123;
      if (*(char *)(v21 + 311) < 0)
      {
        **(_BYTE **)(v21 + 288) = 0;
        *(_QWORD *)(v21 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v21 + 288) = 0;
        *(_BYTE *)(v21 + 311) = 0;
      }
      v265[0] = v21 + 320;
      v265[1] = 0;
      v265[2] = v21;
      v266 = 1;
      *(_BYTE *)(v21 + 320) = 0;
      *(_DWORD *)(v21 + 664) = 0;
      v61 = *(unsigned int *)(v21 + 776);
      if ((_DWORD)v61)
      {
        v62 = *(_QWORD *)(v21 + 768);
        v63 = 56 * v61;
        do
        {
          if (*(char *)(v62 + v63 - 9) < 0)
            operator delete(*(void **)(v62 + v63 - 32));
          v63 -= 56;
        }
        while (v63);
      }
      *(_DWORD *)(v21 + 776) = 0;
      v17 = (void ***)v265;
      goto LABEL_108;
    case 3:
    case 4:
    case 5:
    case 6:
    case 19:
    case 20:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
      goto LABEL_28;
    case 7:
      v281 = (unint64_t)v283;
      v282 = xmmword_22F44E300;
      LOBYTE(v247) = 0;
      v36 = (unsigned __int8 *)sub_22F18E170(a5, (uint64_t)a2, (uint64_t *)&v281, (unsigned __int8 *)&v247);
      if ((_BYTE)v247)
      {
        v30 = 1;
        goto LABEL_407;
      }
      sub_22F1497C4((uint64_t)&v269, v36, v37, *a2, *(uint64_t **)(a5 + 88), *(_QWORD *)(a5 + 56), *(_QWORD *)(a5 + 64), *(_QWORD *)(a5 + 48));
      v64 = v280;
      if ((v280 & 1) != 0)
        goto LABEL_237;
      if (v275 | v274)
        v65 = v277 == 0;
      else
        v65 = 0;
      v66 = !v65;
      if ((v280 & 0x100) == 0 && (v66 & 1) != 0)
      {
        if (v276)
        {
          v67 = *(_QWORD *)(a5 + 48);
          *(_DWORD *)(v67 + 312) = *a2;
          *(_DWORD *)(v67 + 316) = 1142;
          if (*(char *)(v67 + 311) < 0)
          {
            **(_BYTE **)(v67 + 288) = 0;
            *(_QWORD *)(v67 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v67 + 288) = 0;
            *(_BYTE *)(v67 + 311) = 0;
          }
          v134 = (unsigned __int8 *)(v67 + 320);
          *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v67 + 320;
          v261.__r_.__value_.__r.__words[2] = v67;
          v262 = 1;
          *(_BYTE *)(v67 + 320) = 0;
          *(_DWORD *)(v67 + 664) = 0;
          v135 = *(unsigned int *)(v67 + 776);
          if ((_DWORD)v135)
          {
            v136 = *(_QWORD *)(v67 + 768);
            v137 = 56 * v135;
            do
            {
              if (*(char *)(v136 + v137 - 9) < 0)
                operator delete(*(void **)(v136 + v137 - 32));
              v137 -= 56;
            }
            while (v137);
            v134 = (unsigned __int8 *)v261.__r_.__value_.__r.__words[0];
            *(_DWORD *)(v67 + 776) = 0;
            if (!v134)
            {
              v134 = (unsigned __int8 *)sub_22E3B8AAC(v261.__r_.__value_.__l.__size_);
              v261.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
            }
          }
          else
          {
            *(_DWORD *)(v67 + 776) = 0;
          }
          v134[*v134 + 1] = 2;
          v138 = v261.__r_.__value_.__r.__words[0];
          v139 = *v261.__r_.__value_.__l.__data_;
          *v261.__r_.__value_.__l.__data_ = v139 + 1;
          *(_QWORD *)(v138 + 8 * v139 + 16) = 1;
          sub_22E3BB0B8((uint64_t)&v261);
          v64 = v280;
        }
        v140 = **(_QWORD **)(a5 + 56);
        if ((v140 & 1) == 0 && (v64 & 8) != 0)
        {
          if ((v140 & 0x100) != 0)
          {
            if ((v140 & 0x200) != 0)
              v142 = 128;
            else
              v142 = 88;
            v143 = *(_QWORD *)(a5 + 48);
            *(_DWORD *)(v143 + 312) = *a2;
            *(_DWORD *)(v143 + 316) = v142;
            if (*(char *)(v143 + 311) < 0)
            {
              **(_BYTE **)(v143 + 288) = 0;
              *(_QWORD *)(v143 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v143 + 288) = 0;
              *(_BYTE *)(v143 + 311) = 0;
            }
            v259[0] = v143 + 320;
            v259[1] = 0;
            v259[2] = v143;
            v260 = 1;
            *(_BYTE *)(v143 + 320) = 0;
            *(_DWORD *)(v143 + 664) = 0;
            v171 = (_DWORD *)(v143 + 776);
            v176 = *(unsigned int *)(v143 + 776);
            if ((_DWORD)v176)
            {
              v177 = *(_QWORD *)(v143 + 768);
              v178 = 56 * v176;
              do
              {
                if (*(char *)(v177 + v178 - 9) < 0)
                  operator delete(*(void **)(v177 + v178 - 32));
                v178 -= 56;
              }
              while (v178);
            }
            v175 = v259;
          }
          else
          {
            v141 = *(_QWORD *)(a5 + 48);
            *(_DWORD *)(v141 + 312) = *a2;
            *(_DWORD *)(v141 + 316) = 85;
            if (*(char *)(v141 + 311) < 0)
            {
              **(_BYTE **)(v141 + 288) = 0;
              *(_QWORD *)(v141 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v141 + 288) = 0;
              *(_BYTE *)(v141 + 311) = 0;
            }
            v257[0] = v141 + 320;
            v257[1] = 0;
            v257[2] = v141;
            v258 = 1;
            *(_BYTE *)(v141 + 320) = 0;
            *(_DWORD *)(v141 + 664) = 0;
            v171 = (_DWORD *)(v141 + 776);
            v172 = *(unsigned int *)(v141 + 776);
            if ((_DWORD)v172)
            {
              v173 = *(_QWORD *)(v141 + 768);
              v174 = 56 * v172;
              do
              {
                if (*(char *)(v173 + v174 - 9) < 0)
                  operator delete(*(void **)(v173 + v174 - 32));
                v174 -= 56;
              }
              while (v174);
            }
            v175 = v257;
          }
          *v171 = 0;
          sub_22E3BB0B8((uint64_t)v175);
          v64 = v280;
        }
        if ((v64 & 0x10) != 0)
        {
          v179 = *(_QWORD *)(a5 + 48);
          v180 = **(_QWORD **)(a5 + 56);
          if ((v180 & 0x2000) != 0)
            v181 = 127;
          else
            v181 = 89;
          if ((v180 & 0x100) != 0)
            v182 = v181;
          else
            v182 = 10;
          *(_DWORD *)(v179 + 312) = *a2;
          *(_DWORD *)(v179 + 316) = v182;
          if (*(char *)(v179 + 311) < 0)
          {
            **(_BYTE **)(v179 + 288) = 0;
            *(_QWORD *)(v179 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v179 + 288) = 0;
            *(_BYTE *)(v179 + 311) = 0;
          }
          v255[0] = v179 + 320;
          v255[1] = 0;
          v255[2] = v179;
          v256 = 1;
          *(_BYTE *)(v179 + 320) = 0;
          *(_DWORD *)(v179 + 664) = 0;
          v183 = *(unsigned int *)(v179 + 776);
          if ((_DWORD)v183)
          {
            v184 = *(_QWORD *)(v179 + 768);
            v185 = 56 * v183;
            do
            {
              if (*(char *)(v184 + v185 - 9) < 0)
                operator delete(*(void **)(v184 + v185 - 32));
              v185 -= 56;
            }
            while (v185);
          }
          *(_DWORD *)(v179 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v255);
          v64 = v280;
        }
        if ((v64 & 0x2000) != 0)
        {
          v186 = *(_QWORD *)(a5 + 48);
          if ((**(_QWORD **)(a5 + 56) & 8) != 0)
            v187 = 123;
          else
            v187 = 84;
          *(_DWORD *)(v186 + 312) = *a2;
          *(_DWORD *)(v186 + 316) = v187;
          if (*(char *)(v186 + 311) < 0)
          {
            **(_BYTE **)(v186 + 288) = 0;
            *(_QWORD *)(v186 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v186 + 288) = 0;
            *(_BYTE *)(v186 + 311) = 0;
          }
          v253[0] = v186 + 320;
          v253[1] = 0;
          v253[2] = v186;
          v254 = 1;
          *(_BYTE *)(v186 + 320) = 0;
          *(_DWORD *)(v186 + 664) = 0;
          v188 = *(unsigned int *)(v186 + 776);
          if ((_DWORD)v188)
          {
            v189 = *(_QWORD *)(v186 + 768);
            v190 = 56 * v188;
            do
            {
              if (*(char *)(v189 + v190 - 9) < 0)
                operator delete(*(void **)(v189 + v190 - 32));
              v190 -= 56;
            }
            while (v190);
          }
          *(_DWORD *)(v186 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v253);
        }
        sub_22F14AEF4((uint64_t)&v269);
        if (v191)
        {
          if ((_DWORD)a4)
          {
            v192 = *(_QWORD *)(a5 + 48);
            *(_DWORD *)(v192 + 312) = *a2;
            *(_DWORD *)(v192 + 316) = 26;
            if (*(char *)(v192 + 311) < 0)
            {
              **(_BYTE **)(v192 + 288) = 0;
              *(_QWORD *)(v192 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v192 + 288) = 0;
              *(_BYTE *)(v192 + 311) = 0;
            }
            v200 = (unsigned __int8 *)(v192 + 320);
            *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v192 + 320;
            v261.__r_.__value_.__r.__words[2] = v192;
            v262 = 1;
            *(_BYTE *)(v192 + 320) = 0;
            *(_DWORD *)(v192 + 664) = 0;
            v201 = *(unsigned int *)(v192 + 776);
            if ((_DWORD)v201)
            {
              v202 = *(_QWORD *)(v192 + 768);
              v203 = 56 * v201;
              do
              {
                if (*(char *)(v202 + v203 - 9) < 0)
                  operator delete(*(void **)(v202 + v203 - 32));
                v203 -= 56;
              }
              while (v203);
              LODWORD(v201) = *v200;
            }
            *(_DWORD *)(v192 + 776) = 0;
            v200[v201 + 1] = 2;
            *(_BYTE *)(v192 + 320) = v201 + 1;
            *(_QWORD *)&v200[8 * v201 + 16] = 1;
            sub_22E3BB0B8((uint64_t)&v261);
          }
          v195 = (_BYTE *)(a1 + 28);
        }
        else
        {
          v193 = v280;
          v194 = (v280 >> 1) & 1;
          *(_BYTE *)(a1 + 28) = (v280 & 2) != 0;
          v195 = (_BYTE *)(a1 + 28);
          if ((v193 & 2) != 0 || v194)
            goto LABEL_402;
          v196 = *(_DWORD *)(a1 + 24);
          v197 = v196 - 1;
          v198 = (_QWORD *)(v196 >= 0x41 ? *(_QWORD *)(a1 + 16) + 8 * ((v196 - 1) >> 6) : a1 + 16);
          if (((*v198 >> v197) & 1) == 0)
            goto LABEL_402;
          if ((_DWORD)a4 && v273[6] == 10)
          {
            v199 = *(_QWORD *)(a5 + 48);
            *(_DWORD *)(v199 + 312) = *a2;
            *(_DWORD *)(v199 + 316) = 91;
            if (*(char *)(v199 + 311) < 0)
            {
              **(_BYTE **)(v199 + 288) = 0;
              *(_QWORD *)(v199 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v199 + 288) = 0;
              *(_BYTE *)(v199 + 311) = 0;
            }
            v251[0] = v199 + 320;
            v251[1] = 0;
            v251[2] = v199;
            v252 = 1;
            *(_BYTE *)(v199 + 320) = 0;
            *(_DWORD *)(v199 + 664) = 0;
            v227 = *(unsigned int *)(v199 + 776);
            if ((_DWORD)v227)
            {
              v228 = *(_QWORD *)(v199 + 768);
              v229 = 56 * v227;
              do
              {
                if (*(char *)(v228 + v229 - 9) < 0)
                  operator delete(*(void **)(v228 + v229 - 32));
                v229 -= 56;
              }
              while (v229);
            }
            *(_DWORD *)(v199 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v251);
          }
        }
        *v195 = 1;
LABEL_402:
        v204 = *a2;
        *(_DWORD *)a1 = *a2;
        *(_DWORD *)(a1 + 4) = v204;
        do
          sub_22F18FB4C(a5, a2);
        while (*((_WORD *)a2 + 8) == 4);
        v30 = 0;
        goto LABEL_405;
      }
      v74 = *(_QWORD *)(a5 + 48);
      *(_DWORD *)(v74 + 312) = *a2;
      *(_DWORD *)(v74 + 316) = 1133;
      if (*(char *)(v74 + 311) < 0)
      {
        **(_BYTE **)(v74 + 288) = 0;
        *(_QWORD *)(v74 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v74 + 288) = 0;
        *(_BYTE *)(v74 + 311) = 0;
      }
      v263[0] = v74 + 320;
      v263[1] = 0;
      v263[2] = v74;
      v264 = 1;
      *(_BYTE *)(v74 + 320) = 0;
      *(_DWORD *)(v74 + 664) = 0;
      v118 = *(unsigned int *)(v74 + 776);
      if ((_DWORD)v118)
      {
        v119 = *(_QWORD *)(v74 + 768);
        v120 = 56 * v118;
        do
        {
          if (*(char *)(v119 + v120 - 9) < 0)
            operator delete(*(void **)(v119 + v120 - 32));
          v120 -= 56;
        }
        while (v120);
      }
      *(_DWORD *)(v74 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v263);
LABEL_237:
      v30 = 1;
LABEL_405:
      if (v278 != &v279)
        free(v278);
LABEL_407:
      v95 = (void *)v281;
      if ((_QWORD *)v281 == v283)
        return v30;
      goto LABEL_203;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      if ((*((_WORD *)a2 + 9) & 0x20) != 0)
      {
        v13 = *(_QWORD *)(a5 + 48);
        *(_DWORD *)(v13 + 312) = *a2;
        *(_DWORD *)(v13 + 316) = 1142;
        if (*(char *)(v13 + 311) < 0)
        {
          **(_BYTE **)(v13 + 288) = 0;
          *(_QWORD *)(v13 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v13 + 288) = 0;
          *(_BYTE *)(v13 + 311) = 0;
        }
        v269 = (void **)(v13 + 320);
        v270 = 0;
        v271 = (void *)v13;
        v272 = 1;
        *(_BYTE *)(v13 + 320) = 0;
        *(_DWORD *)(v13 + 664) = 0;
        v49 = *(unsigned int *)(v13 + 776);
        if ((_DWORD)v49)
        {
          v50 = *(_QWORD *)(v13 + 768);
          v51 = 56 * v49;
          do
          {
            if (*(char *)(v50 + v51 - 9) < 0)
              operator delete(*(void **)(v50 + v51 - 32));
            v51 -= 56;
          }
          while (v51);
          LODWORD(v49) = *(unsigned __int8 *)(v13 + 320);
        }
        *(_DWORD *)(v13 + 776) = 0;
        *(_BYTE *)(v13 + v49 + 321) = 2;
        v52 = v269;
        v53 = *(unsigned __int8 *)v269;
        *(_BYTE *)v269 = v53 + 1;
        v52[v53 + 2] = 0;
        sub_22E3BB0B8((uint64_t)&v269);
      }
      v281 = (unint64_t)v283;
      v282 = xmmword_22F44E330;
      v250 = 0;
      v54 = sub_22F18E170(a5, (uint64_t)a2, (uint64_t *)&v281, &v250);
      if (v250)
      {
        v30 = 1;
        goto LABEL_202;
      }
      sub_22F14B96C((uint64_t)&v269, v54, v54 + v55, *a2, (_QWORD *)a5, *((unsigned __int16 *)a2 + 8));
      v30 = BYTE3(v270) != 0;
      if (BYTE3(v270))
        goto LABEL_200;
      v56 = *(_QWORD **)(a5 + 64);
      if (BYTE2(v270))
      {
        LODWORD(v57) = *((unsigned __int8 *)v56 + *(_QWORD *)(*v56 - 24) + 4);
      }
      else
      {
        switch((unsigned __int16)v270)
        {
          case 9u:
            v68 = *(_DWORD *)((char *)v56 + *(_QWORD *)(*v56 - 24) + 128);
            break;
          case 0xBu:
            v68 = *(_DWORD *)((char *)v56 + *(_QWORD *)(*v56 - 24) + 136);
            break;
          case 0xCu:
            v68 = *(_DWORD *)((char *)v56 + *(_QWORD *)(*v56 - 24) + 140);
            break;
          default:
            LODWORD(v57) = 8;
            LODWORD(v261.__r_.__value_.__r.__words[1]) = 8;
            goto LABEL_173;
        }
        LODWORD(v57) = sub_22F1E724C(*(_QWORD **)(a5 + 64), v68);
      }
      LODWORD(v261.__r_.__value_.__r.__words[1]) = v57;
      if (v57 <= 0x40)
      {
LABEL_173:
        v261.__r_.__value_.__s.__data_[12] = 1;
        v86 = (unint64_t)v269;
        goto LABEL_174;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&v261);
      v57 = LODWORD(v261.__r_.__value_.__r.__words[1]);
      v261.__r_.__value_.__s.__data_[12] = 1;
      v86 = (unint64_t)v269;
      if (LODWORD(v261.__r_.__value_.__r.__words[1]) > 0x40)
      {
        *(_QWORD *)v261.__r_.__value_.__l.__data_ = v269;
        bzero((void *)(v261.__r_.__value_.__r.__words[0] + 8), (((unint64_t)(v57 + 63) >> 3) - 8) & 0xFFFFFFF8);
        goto LABEL_177;
      }
LABEL_174:
      if ((_DWORD)v57)
        v87 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
      else
        v87 = 0;
      v261.__r_.__value_.__r.__words[0] = v87 & v86;
LABEL_177:
      if ((unsigned __int16)v270 - 11 >= 2)
      {
        if ((unsigned __int16)v270 == 9)
          v88 = (*((_BYTE *)v56 + *(_QWORD *)(*v56 - 24) + 128) & 1) == 0;
        else
          v88 = (*(_DWORD *)(*(_QWORD *)(a5 + 56) + 52) & 0x800000) == 0;
        v89 = v88;
        v261.__r_.__value_.__s.__data_[12] = v89;
      }
      v90 = (_QWORD *)(a1 + 16);
      v91 = *(_DWORD *)(a1 + 24);
      v92 = v261.__r_.__value_.__r.__words[1];
      if (v91 <= LODWORD(v261.__r_.__value_.__r.__words[1]))
      {
        if (v91 > 0x40 || LODWORD(v261.__r_.__value_.__r.__words[1]) > 0x40)
        {
          llvm::APInt::assignSlowCase((llvm::APInt *)(a1 + 16), (const llvm::APInt *)&v261);
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v261.__r_.__value_.__r.__words[0];
          *(_DWORD *)(a1 + 24) = v92;
        }
        v93 = v261.__r_.__value_.__s.__data_[12];
      }
      else
      {
        sub_22E46361C((llvm::APInt *)&v261, (uint64_t)&v247);
        if (*(_DWORD *)(a1 + 24) >= 0x41u && *v90)
          MEMORY[0x2348A0E84](*v90, 0x1000C8000313F17);
        *(_QWORD *)(a1 + 16) = v247;
        *(_DWORD *)(a1 + 24) = v248;
        v93 = v249;
      }
      *(_BYTE *)(a1 + 28) = v93;
      v94 = *a2;
      *(_DWORD *)a1 = *a2;
      *(_DWORD *)(a1 + 4) = v94;
      do
        sub_22F18FB4C(a5, a2);
      while (*((_WORD *)a2 + 8) == 4);
      if (LODWORD(v261.__r_.__value_.__r.__words[1]) >= 0x41 && v261.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v261.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
LABEL_200:
      if (v271 != v273)
        free(v271);
LABEL_202:
      v95 = (void *)v281;
      if ((_QWORD *)v281 != v283)
LABEL_203:
        free(v95);
      return v30;
    case 21:
      v47 = *a2;
      do
        sub_22F18FB4C(a5, a2);
      while (*((_WORD *)a2 + 8) == 4);
      if ((sub_22F16F6E8(a1, a2, a3, a4, a5) & 1) != 0)
        return 1;
      if (*((_WORD *)a2 + 8) == 22)
        goto LABEL_78;
      v30 = 1;
      if ((sub_22F1713EC(a1, 1u, (uint64_t)a2, a4, (_BYTE *)(a3 + 16), a5) & 1) != 0)
        return v30;
      if (*((_WORD *)a2 + 8) == 22)
      {
        *(_DWORD *)a3 = 2;
LABEL_78:
        v48 = *a2;
        *(_DWORD *)a1 = v47;
        *(_DWORD *)(a1 + 4) = v48;
        *(_QWORD *)(a1 + 8) = 0;
        do
        {
          sub_22F18FB4C(a5, a2);
          v30 = 0;
        }
        while (*((_WORD *)a2 + 8) == 4);
        return v30;
      }
      v97 = *a2;
      v98 = *(_QWORD *)(a5 + 48);
      *(_DWORD *)(v98 + 312) = v97;
      *(_DWORD *)(v98 + 316) = 1122;
      if (*(char *)(v98 + 311) < 0)
      {
        **(_BYTE **)(v98 + 288) = 0;
        *(_QWORD *)(v98 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v98 + 288) = 0;
        *(_BYTE *)(v98 + 311) = 0;
      }
      v269 = (void **)(v98 + 320);
      v270 = 0;
      v271 = (void *)v98;
      v272 = 1;
      *(_BYTE *)(v98 + 320) = 0;
      *(_DWORD *)(v98 + 664) = 0;
      v126 = *(unsigned int *)(v98 + 776);
      if ((_DWORD)v126)
      {
        v127 = *(_QWORD *)(v98 + 768);
        v128 = 56 * v126;
        do
        {
          if (*(char *)(v127 + v128 - 9) < 0)
            operator delete(*(void **)(v127 + v128 - 32));
          v128 -= 56;
        }
        while (v128);
      }
      *(_DWORD *)(v98 + 776) = 0;
      sub_22E4D6448(v98 + 656, *(_QWORD *)a1, 1);
      sub_22E3BB0B8((uint64_t)&v269);
      v129 = *(_QWORD *)(a5 + 48);
      *(_DWORD *)(v129 + 312) = v47;
      *(_DWORD *)(v129 + 316) = 104;
      if (*(char *)(v129 + 311) < 0)
      {
        **(_BYTE **)(v129 + 288) = 0;
        *(_QWORD *)(v129 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v129 + 288) = 0;
        *(_BYTE *)(v129 + 311) = 0;
      }
      v130 = (unsigned __int8 *)(v129 + 320);
      v269 = (void **)(v129 + 320);
      v270 = 0;
      v271 = (void *)v129;
      v272 = 1;
      *(_BYTE *)(v129 + 320) = 0;
      *(_DWORD *)(v129 + 664) = 0;
      v131 = *(unsigned int *)(v129 + 776);
      if ((_DWORD)v131)
      {
        v132 = *(_QWORD *)(v129 + 768);
        v133 = 56 * v131;
        do
        {
          if (*(char *)(v132 + v133 - 9) < 0)
            operator delete(*(void **)(v132 + v133 - 32));
          v133 -= 56;
        }
        while (v133);
        goto LABEL_440;
      }
      goto LABEL_441;
    case 32:
      v35 = *a2;
      do
        sub_22F18FB4C(a5, a2);
      while (*((_WORD *)a2 + 8) == 4);
      if ((sub_22F16F6E8(a1, a2, a3, a4, a5) & 1) != 0)
        return 1;
      v30 = 0;
      *(_DWORD *)a1 = v35;
      *(_QWORD *)(a1 + 8) = 0;
      return v30;
    case 35:
      v38 = *a2;
      do
        sub_22F18FB4C(a5, a2);
      while (*((_WORD *)a2 + 8) == 4);
      if ((sub_22F16F6E8(a1, a2, a3, a4, a5) & 1) != 0)
        return 1;
      *(_DWORD *)a1 = v38;
      *(_QWORD *)(a1 + 8) = 0;
      v39 = (_QWORD *)(a1 + 16);
      sub_22F311024((llvm::APInt *)(a1 + 16), (uint64_t)&v269);
      if (*(_DWORD *)(a1 + 24) >= 0x41u && *v39)
        MEMORY[0x2348A0E84](*v39, 0x1000C8000313F17);
      v40 = v269;
      *(_QWORD *)(a1 + 16) = v269;
      v41 = v270;
      *(_DWORD *)(a1 + 24) = v270;
      v42 = BYTE4(v270);
      *(_BYTE *)(a1 + 28) = BYTE4(v270);
      if (v42)
        goto LABEL_456;
      v43 = v41 - 1;
      if (v41 > 0x40)
      {
        if ((((unint64_t)v40[v43 >> 6] >> v43) & 1) == 0)
          goto LABEL_456;
        v44 = llvm::APInt::countTrailingZerosSlowCase((llvm::APInt *)(a1 + 16)) == v43;
      }
      else
      {
        v44 = v40 == (void **)(1 << v43);
      }
      v45 = v44;
      if (v45 && (_DWORD)a4)
      {
        v46 = *(_QWORD *)(a5 + 48);
        *(_DWORD *)(v46 + 312) = v38;
        *(_DWORD *)(v46 + 316) = 1337;
        if (*(char *)(v46 + 311) < 0)
        {
          **(_BYTE **)(v46 + 288) = 0;
          *(_QWORD *)(v46 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v46 + 288) = 0;
          *(_BYTE *)(v46 + 311) = 0;
        }
        v269 = (void **)(v46 + 320);
        v270 = 0;
        v271 = (void *)v46;
        v272 = 1;
        *(_BYTE *)(v46 + 320) = 0;
        *(_DWORD *)(v46 + 664) = 0;
        v224 = *(unsigned int *)(v46 + 776);
        if ((_DWORD)v224)
        {
          v225 = *(_QWORD *)(v46 + 768);
          v226 = 56 * v224;
          do
          {
            if (*(char *)(v225 + v226 - 9) < 0)
              operator delete(*(void **)(v225 + v226 - 32));
            v226 -= 56;
          }
          while (v226);
        }
        *(_DWORD *)(v46 + 776) = 0;
        sub_22E4D6448(v46 + 656, *(_QWORD *)a1, 1);
        sub_22E3BB0B8((uint64_t)&v269);
      }
LABEL_456:
      v30 = 0;
LABEL_457:
      v69 = 2;
      goto LABEL_458;
    case 39:
      v28 = *a2;
      do
        sub_22F18FB4C(a5, a2);
      while (*((_WORD *)a2 + 8) == 4);
      if ((sub_22F16F6E8(a1, a2, a3, a4, a5) & 1) != 0)
        return 1;
      *(_DWORD *)a1 = v28;
      *(_QWORD *)(a1 + 8) = 0;
      v29 = (_QWORD *)(a1 + 16);
      sub_22F3103B8((llvm::APInt *)(a1 + 16), (uint64_t)&v269);
      if (*(_DWORD *)(a1 + 24) >= 0x41u && *v29)
        MEMORY[0x2348A0E84](*v29, 0x1000C8000313F17);
      v30 = 0;
      *(_QWORD *)(a1 + 16) = v269;
      *(_DWORD *)(a1 + 24) = v270;
      *(_BYTE *)(a1 + 28) = BYTE4(v270);
      goto LABEL_457;
    case 40:
      v31 = *a2;
      do
        sub_22F18FB4C(a5, a2);
      while (*((_WORD *)a2 + 8) == 4);
      if ((sub_22F16F6E8(a1, a2, a3, a4, a5) & 1) != 0)
        return 1;
      *(_DWORD *)a1 = v31;
      v32 = a1 + 16;
      v33 = *(unsigned int *)(a1 + 24);
      if (v33 > 0x40)
      {
        **(_QWORD **)v32 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 16)) == (_DWORD)v33;
        bzero((void *)(*(_QWORD *)v32 + 8), (((unint64_t)(v33 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
        if (!(_DWORD)v33)
          LOBYTE(v34) = 0;
        *(_QWORD *)v32 = v34 & (*(_QWORD *)v32 == 0);
      }
      *(_BYTE *)(a1 + 28) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      if (*(_DWORD *)a3 == 1)
      {
        v30 = 0;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        v30 = 0;
        if (!*(_DWORD *)a3)
        {
          v30 = 0;
          v69 = 1;
LABEL_458:
          *(_DWORD *)a3 = v69;
        }
      }
      return v30;
    default:
      if (v10 == 136 || v10 == 150)
      {
        v18 = v10 == 150;
        v19 = *(unsigned int *)(a1 + 24);
        if (v19 > 0x40)
        {
          **(_QWORD **)(a1 + 16) = v18;
          bzero((void *)(*(_QWORD *)(a1 + 16) + 8), (((unint64_t)(v19 + 63) >> 3) - 8) & 0xFFFFFFF8);
        }
        else
        {
          if ((_DWORD)v19)
            v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          else
            v20 = 0;
          *(_QWORD *)(a1 + 16) = v20 & v18;
        }
        *(_BYTE *)(a1 + 28) = 0;
        v58 = *((unsigned __int16 *)a2 + 8);
        if ((v58 - 7) >= 6)
        {
          v59 = 0;
          if ((v58 - 13) >= 6 && v58 != 1)
            v59 = *((_QWORD *)a2 + 1);
        }
        else
        {
          v59 = 0;
        }
        *(_QWORD *)(a1 + 8) = v59;
        v60 = *a2;
        *(_DWORD *)a1 = *a2;
        *(_DWORD *)(a1 + 4) = v60;
        do
          sub_22F18FB4C(a5, a2);
        while (*((_WORD *)a2 + 8) == 4);
        return 0;
      }
LABEL_28:
      v22 = *((_QWORD *)a2 + 1);
      if (!v22)
        goto LABEL_7;
      v23 = *(_DWORD **)(v22 + 16);
      if (*v23 == 7)
      {
        v24 = v23[4];
        v25 = *(_DWORD *)((char *)v23 + 19);
        if (v24 == 1768318308 && v25 == 1684369001)
        {
          v70 = *a2;
          *(_DWORD *)a1 = v70;
          v71 = *(unsigned __int16 *)(a5 + 536);
          do
          {
            *(_WORD *)(a5 + 536) = v71 | 0x20;
            sub_22F18FB4C(a5, a2);
            v71 = *(_WORD *)(a5 + 536) & 0xFFDF | (32 * ((v71 >> 5) & 1));
            *(_WORD *)(a5 + 536) = v71;
            v72 = *((unsigned __int16 *)a2 + 8);
          }
          while (v72 == 4);
          if (v72 == 21)
          {
            v73 = *a2;
            do
            {
              *(_WORD *)(a5 + 536) = v71 | 0x20;
              sub_22F18FB4C(a5, a2);
              v71 = *(_WORD *)(a5 + 536) & 0xFFDF | (32 * ((v71 >> 5) & 1));
              *(_WORD *)(a5 + 536) = v71;
              v72 = *((unsigned __int16 *)a2 + 8);
            }
            while (v72 == 4);
          }
          else
          {
            v73 = 0;
          }
          if (v72 == 3)
          {
            v75 = *(_QWORD *)(a5 + 744);
            if (v75)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
            *(_BYTE *)(a5 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(a5 + 48) + 6) = 1;
            v76 = *(unsigned __int16 *)(a5 + 536);
            do
            {
              *(_WORD *)(a5 + 536) = v76 | 0x20;
              sub_22F18FB4C(a5, a2);
              v76 = *(_WORD *)(a5 + 536) & 0xFFDF | (32 * ((v76 >> 5) & 1));
              *(_WORD *)(a5 + 536) = v76;
            }
            while (*((_WORD *)a2 + 8) == 4);
          }
          if ((sub_22F163C5C(a5, (uint64_t)a2, 0, 0) & 1) != 0)
            return 1;
          v77 = *((unsigned __int16 *)a2 + 8);
          if ((v77 - 7) < 6 || ((v77 - 13) >= 6 ? (v78 = v77 == 1) : (v78 = 1), v78))
            v220 = 0;
          else
            v220 = (llvm *)*((_QWORD *)a2 + 1);
          sub_22E6D719C(a5, v220, (uint64_t *)&v281);
          v79 = v281;
          v80 = *((_QWORD *)&v282 + 1);
          v82 = v281 > 7 || *((_QWORD *)&v282 + 1) != 0;
          v83 = a1 + 16;
          v84 = *(unsigned int *)(a1 + 24);
          if (v84 > 0x40)
          {
            **(_QWORD **)v83 = v82;
            bzero((void *)(*(_QWORD *)v83 + 8), (((unint64_t)(v84 + 63) >> 3) - 8) & 0xFFFFFFF8);
            v80 = *((_QWORD *)&v282 + 1);
          }
          else
          {
            if ((_DWORD)v84)
              v85 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
            else
              v85 = 0;
            *(_QWORD *)v83 = v85 & v82;
          }
          *(_BYTE *)(a1 + 28) = 0;
          v122 = v79 < 8 && v80 == 0;
          *(_BYTE *)(a3 + 16) = v122;
          sub_22F165190(a5, (uint64_t)a2);
          if (!sub_22E508590(a1 + 16, 0) || !(_DWORD)a4)
          {
LABEL_411:
            v261 = *(std::string *)a2;
            *(_DWORD *)(a1 + 4) = *a2;
            if (v73)
            {
              v205 = *(unsigned __int16 *)(a5 + 536);
              do
              {
                *(_WORD *)(a5 + 536) = v205 | 0x20;
                sub_22F18FB4C(a5, a2);
                v205 = *(_WORD *)(a5 + 536) & 0xFFDF | (32 * ((v205 >> 5) & 1));
                *(_WORD *)(a5 + 536) = v205;
                v206 = *((unsigned __int16 *)a2 + 8);
              }
              while (v206 == 4);
              if (v206 != 22)
              {
                v212 = *a2;
                v213 = *(_QWORD *)(a5 + 48);
                *(_DWORD *)(v213 + 312) = v212;
                *(_DWORD *)(v213 + 316) = 1117;
                if (*(char *)(v213 + 311) < 0)
                {
                  **(_BYTE **)(v213 + 288) = 0;
                  *(_QWORD *)(v213 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v213 + 288) = 0;
                  *(_BYTE *)(v213 + 311) = 0;
                }
                v269 = (void **)(v213 + 320);
                v270 = 0;
                v271 = (void *)v213;
                v272 = 1;
                *(_BYTE *)(v213 + 320) = 0;
                *(_DWORD *)(v213 + 664) = 0;
                v214 = *(unsigned int *)(v213 + 776);
                if ((_DWORD)v214)
                {
                  v215 = *(_QWORD *)(v213 + 768);
                  v216 = 56 * v214;
                  do
                  {
                    if (*(char *)(v215 + v216 - 9) < 0)
                      operator delete(*(void **)(v215 + v216 - 32));
                    v216 -= 56;
                  }
                  while (v216);
                  LODWORD(v214) = *(unsigned __int8 *)(v213 + 320);
                }
                *(_DWORD *)(v213 + 776) = 0;
                *(_BYTE *)(v213 + 321 + v214) = 1;
                *(_QWORD *)(v213 + 336 + 8 * v214) = "'defined'";
                v217 = (v214 + 1);
                *(_BYTE *)(v213 + 321 + v217) = 4;
                *(_BYTE *)(v213 + 320) = v214 + 2;
                *(_QWORD *)(v213 + 336 + 8 * v217) = 22;
                sub_22E3BB0B8((uint64_t)&v269);
                v129 = *(_QWORD *)(a5 + 48);
                *(_DWORD *)(v129 + 312) = v73;
                *(_DWORD *)(v129 + 316) = 104;
                if (*(char *)(v129 + 311) < 0)
                {
                  **(_BYTE **)(v129 + 288) = 0;
                  *(_QWORD *)(v129 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v129 + 288) = 0;
                  *(_BYTE *)(v129 + 311) = 0;
                }
                v130 = (unsigned __int8 *)(v129 + 320);
                v269 = (void **)(v129 + 320);
                v270 = 0;
                v271 = (void *)v129;
                v272 = 1;
                *(_BYTE *)(v129 + 320) = 0;
                *(_DWORD *)(v129 + 664) = 0;
                v131 = *(unsigned int *)(v129 + 776);
                if ((_DWORD)v131)
                {
                  v218 = *(_QWORD *)(v129 + 768);
                  v219 = 56 * v131;
                  do
                  {
                    if (*(char *)(v218 + v219 - 9) < 0)
                      operator delete(*(void **)(v218 + v219 - 32));
                    v219 -= 56;
                  }
                  while (v219);
LABEL_440:
                  LODWORD(v131) = *v130;
                }
LABEL_441:
                *(_DWORD *)(v129 + 776) = 0;
                v130[v131 + 1] = 4;
                *(_BYTE *)(v129 + 320) = v131 + 1;
                *(_QWORD *)&v130[8 * v131 + 16] = 21;
                v17 = &v269;
                goto LABEL_108;
              }
              do
                sub_22F18FB4C(a5, a2);
              while (*((_WORD *)a2 + 8) == 4);
              *(_DWORD *)(a1 + 4) = *a2;
            }
            else
            {
              do
                sub_22F18FB4C(a5, a2);
              while (*((_WORD *)a2 + 8) == 4);
            }
            if ((v70 & 0x80000000) != 0)
            {
              v207 = *(_QWORD *)(a5 + 88);
              v208 = v70 & 0x7FFFFFFF;
              v209 = *(_DWORD *)(v207 + 304);
              v210 = v209 + 1;
              if (v209 + 1 > 1)
              {
                if ((v209 & 0x80000000) != 0)
                {
                  v221 = -2 - v209;
                  if (((*(_QWORD *)(*(_QWORD *)(v207 + 224) + 8 * ((-2 - v209) >> 6)) >> (-2 - v209)) & 1) != 0)
                    v211 = (_DWORD *)(*(_QWORD *)(v207 + 200) + 24 * v221);
                  else
                    v211 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a5 + 88), v221, 0);
                }
                else
                {
                  v211 = (_DWORD *)(*(_QWORD *)(v207 + 184) + 24 * v209);
                }
              }
              else
              {
                v211 = *(_DWORD **)(v207 + 184);
              }
              if ((*v211 & 0x7FFFFFFFu) <= v208
                && (v209 == -2
                 || (v210 != *(_DWORD *)(v207 + 192)
                   ? ((v210 & 0x80000000) != 0
                    ? ((v231 = -3 - v209,
                        ((*(_QWORD *)(*(_QWORD *)(v207 + 224) + 8 * ((-3 - v209) >> 6)) >> (-3 - v209)) & 1) == 0)
                     ? (v230 = (_DWORD *)sub_22F1E1134(v207, v231, 0))
                     : (v230 = (_DWORD *)(*(_QWORD *)(v207 + 200) + 24 * v231)))
                    : (v230 = (_DWORD *)(*(_QWORD *)(v207 + 184) + 24 * v210)),
                      v223 = *v230 & 0x7FFFFFFF)
                   : (v223 = *(_DWORD *)(v207 + 216)),
                     v223 > v208)))
              {
                v222 = *(_DWORD *)(v207 + 304);
              }
              else
              {
                v222 = sub_22F1E1EE8(v207, v70 & 0x7FFFFFFF);
              }
              if (v222 + 1 > 1)
              {
                if ((v222 & 0x80000000) != 0)
                {
                  v233 = -2 - v222;
                  if (((*(_QWORD *)(*(_QWORD *)(v207 + 224) + 8 * ((-2 - v222) >> 6)) >> (-2 - v222)) & 1) != 0)
                    v232 = *(_QWORD *)(v207 + 200) + 24 * v233;
                  else
                    v232 = sub_22F1E1134(v207, v233, 0);
                }
                else
                {
                  v232 = *(_QWORD *)(v207 + 184) + 24 * v222;
                }
              }
              else
              {
                v232 = *(_QWORD *)(v207 + 184);
              }
              v234 = *(_DWORD *)(v232 + 12);
              if (!v234 || ((v235 = *(_DWORD *)(v232 + 16)) != 0 ? (v236 = v235 == v234) : (v236 = 1), v236))
              {
                v237 = *(_QWORD *)(a5 + 48);
                *(_DWORD *)(v237 + 312) = v70;
                *(_DWORD *)(v237 + 316) = 1313;
                if (*(char *)(v237 + 311) < 0)
                {
                  **(_BYTE **)(v237 + 288) = 0;
                  *(_QWORD *)(v237 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v237 + 288) = 0;
                  *(_BYTE *)(v237 + 311) = 0;
                }
                v269 = (void **)(v237 + 320);
                v270 = 0;
                v271 = (void *)v237;
                v272 = 1;
                *(_BYTE *)(v237 + 320) = 0;
                *(_DWORD *)(v237 + 664) = 0;
                v239 = (_DWORD *)(v237 + 776);
                v240 = *(unsigned int *)(v237 + 776);
                if ((_DWORD)v240)
                {
                  v241 = *(_QWORD *)(v237 + 768);
                  v242 = 56 * v240;
                  do
                  {
                    if (*(char *)(v241 + v242 - 9) < 0)
                      operator delete(*(void **)(v241 + v242 - 32));
                    v242 -= 56;
                  }
                  while (v242);
                }
              }
              else
              {
                v238 = *(_QWORD *)(a5 + 48);
                *(_DWORD *)(v238 + 312) = v70;
                *(_DWORD *)(v238 + 316) = 1312;
                if (*(char *)(v238 + 311) < 0)
                {
                  **(_BYTE **)(v238 + 288) = 0;
                  *(_QWORD *)(v238 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v238 + 288) = 0;
                  *(_BYTE *)(v238 + 311) = 0;
                }
                v269 = (void **)(v238 + 320);
                v270 = 0;
                v271 = (void *)v238;
                v272 = 1;
                *(_BYTE *)(v238 + 320) = 0;
                *(_DWORD *)(v238 + 664) = 0;
                v239 = (_DWORD *)(v238 + 776);
                v243 = *(unsigned int *)(v238 + 776);
                if ((_DWORD)v243)
                {
                  v244 = *(_QWORD *)(v238 + 768);
                  v245 = 56 * v243;
                  do
                  {
                    if (*(char *)(v244 + v245 - 9) < 0)
                      operator delete(*(void **)(v244 + v245 - 32));
                    v245 -= 56;
                  }
                  while (v245);
                }
              }
              *v239 = 0;
              sub_22E3BB0B8((uint64_t)&v269);
            }
            v246 = *(_QWORD *)(a5 + 1088);
            if (v246)
              (*(void (**)(uint64_t, std::string *, unint64_t *, unint64_t))(*(_QWORD *)v246 + 256))(v246, &v261, &v281, v70 | ((unint64_t)*a2 << 32));
            v30 = 0;
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = v220;
            return v30;
          }
          if (*((_QWORD *)&v282 + 1))
          {
            v123 = (uint64_t *)(*(_QWORD *)(v282 + 8 * *((_QWORD *)&v282 + 1) - 8) + 16);
          }
          else
          {
            if ((v281 & 0xFFFFFFFFFFFFFFF8) == 0
              || (v144 = sub_22F14FEA4((uint64_t *)(v281 & 0xFFFFFFFFFFFFFFF8))) == 0)
            {
              v124 = 0;
              goto LABEL_410;
            }
            v123 = v144 + 2;
          }
          v124 = *v123;
LABEL_410:
          sub_22F17AC70(a5, v124);
          goto LABEL_411;
        }
      }
      if ((*(_BYTE *)(v22 + 3) & 0x40) != 0)
      {
LABEL_7:
        v12 = *(_QWORD *)(a5 + 48);
        *(_DWORD *)(v12 + 312) = *a2;
        *(_DWORD *)(v12 + 316) = 1127;
        if (*(char *)(v12 + 311) < 0)
        {
          **(_BYTE **)(v12 + 288) = 0;
          *(_QWORD *)(v12 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v12 + 288) = 0;
          *(_BYTE *)(v12 + 311) = 0;
        }
        v267[0] = v12 + 320;
        v267[1] = 0;
        v267[2] = v12;
        v268 = 1;
        *(_BYTE *)(v12 + 320) = 0;
        *(_DWORD *)(v12 + 664) = 0;
        v14 = *(unsigned int *)(v12 + 776);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v12 + 768);
          v16 = 56 * v14;
          do
          {
            if (*(char *)(v15 + v16 - 9) < 0)
              operator delete(*(void **)(v15 + v16 - 32));
            v16 -= 56;
          }
          while (v16);
        }
        *(_DWORD *)(v12 + 776) = 0;
        v17 = (void ***)v267;
LABEL_108:
        sub_22E3BB0B8((uint64_t)v17);
        return 1;
      }
      if ((_DWORD)a4)
      {
        v27 = *(_QWORD *)(a5 + 48);
        *(_DWORD *)(v27 + 312) = *a2;
        *(_DWORD *)(v27 + 316) = 1344;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v269 = (void **)(v27 + 320);
        v270 = 0;
        v271 = (void *)v27;
        v272 = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v99 = *(unsigned int *)(v27 + 776);
        if ((_DWORD)v99)
        {
          v100 = *(_QWORD *)(v27 + 768);
          v101 = 56 * v99;
          do
          {
            if (*(char *)(v100 + v101 - 9) < 0)
              operator delete(*(void **)(v100 + v101 - 32));
            v101 -= 56;
          }
          while (v101);
          v102 = *(unsigned __int8 *)(v27 + 320);
        }
        else
        {
          v102 = 0;
        }
        *(_DWORD *)(v27 + 776) = 0;
        *(_BYTE *)(v27 + v102 + 321) = 5;
        v103 = v269;
        v104 = *(unsigned __int8 *)v269;
        *(_BYTE *)v269 = v104 + 1;
        v103[v104 + 2] = (void *)v22;
        sub_22E3BB0B8((uint64_t)&v269);
        v105 = *(_QWORD *)(a5 + 48);
        if (sub_22F1CF68C(*(_QWORD *)(v105 + 32), 0x540u, *a2, v105) == 1)
        {
          v106 = *(_QWORD *)(v105 + 40);
          v282 = 0uLL;
          v281 = 0;
          sub_22E618148(&v281, *(_QWORD *)(v106 + 120), *(_QWORD *)(v106 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 128) - *(_QWORD *)(v106 + 120)) >> 3));
          v107 = v281;
          v108 = v282;
          if (v281 != (_QWORD)v282)
          {
            v109 = *(unsigned int **)(v22 + 16);
            v112 = *v109;
            v110 = v109 + 4;
            v111 = v112;
            while (1)
            {
              v113 = *(_BYTE *)(v107 + 23);
              v114 = v113 < 0;
              v115 = v113 >= 0 ? (const void *)v107 : *(const void **)v107;
              v116 = v113 & 0x7F;
              v117 = v114 ? *(_QWORD *)(v107 + 8) : v116;
              if (v111 >= v117 && (!v117 || !memcmp(v110, v115, v117)))
                break;
              v107 += 24;
              if (v107 == v108)
                goto LABEL_327;
            }
            v125 = *(_QWORD *)(a5 + 48);
            *(_DWORD *)(v125 + 312) = *a2;
            *(_DWORD *)(v125 + 316) = 1345;
            if (*(char *)(v125 + 311) < 0)
            {
              **(_BYTE **)(v125 + 288) = 0;
              *(_QWORD *)(v125 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v125 + 288) = 0;
              *(_BYTE *)(v125 + 311) = 0;
            }
            v269 = (void **)(v125 + 320);
            v270 = 0;
            v271 = (void *)v125;
            v272 = 1;
            *(_BYTE *)(v125 + 320) = 0;
            *(_DWORD *)(v125 + 664) = 0;
            v145 = *(unsigned int *)(v125 + 776);
            if ((_DWORD)v145)
            {
              v146 = *(_QWORD *)(v125 + 768);
              v147 = 56 * v145;
              do
              {
                if (*(char *)(v146 + v147 - 9) < 0)
                  operator delete(*(void **)(v146 + v147 - 32));
                v147 -= 56;
              }
              while (v147);
            }
            *(_DWORD *)(v125 + 776) = 0;
            v148 = v281;
            v149 = v282;
            memset(&v261, 0, sizeof(v261));
            if (v281 != (_QWORD)v282)
            {
              v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v282 - v281) >> 3) - 1;
              v151 = v281;
              do
              {
                if (*(char *)(v151 + 23) < 0)
                  v152 = *(_QWORD *)(v151 + 8);
                else
                  v152 = *(unsigned __int8 *)(v151 + 23);
                v150 += v152;
                v151 += 24;
              }
              while (v151 != (_QWORD)v282);
              std::string::reserve(&v261, v150);
              v153 = *(_BYTE *)(v148 + 23);
              v154 = v153 < 0;
              v155 = v153 >= 0 ? (const std::string::value_type *)v148 : *(const std::string::value_type **)v148;
              v156 = v153 & 0x7F;
              v157 = v154 ? *(_QWORD *)(v148 + 8) : v156;
              std::string::append(&v261, v155, v157);
              for (i = v148 + 24; i != v149; i += 24)
              {
                std::string::append(&v261, ",", 1uLL);
                v159 = *(_BYTE *)(i + 23);
                v160 = v159 < 0;
                if (v159 >= 0)
                  v161 = (const std::string::value_type *)i;
                else
                  v161 = *(const std::string::value_type **)i;
                v162 = v159 & 0x7F;
                if (v160)
                  v163 = *(_QWORD *)(i + 8);
                else
                  v163 = v162;
                std::string::append(&v261, v161, v163);
              }
            }
            if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v164 = &v261;
            else
              v164 = (std::string *)v261.__r_.__value_.__r.__words[0];
            if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = *((_BYTE *)&v261.__r_.__value_.__s + 23) & 0x7F;
            else
              size = v261.__r_.__value_.__l.__size_;
            sub_22E616D98((uint64_t)&v269, v164, size);
            v166 = v269;
            if (!v269)
            {
              v166 = (void **)sub_22E3B8AAC(v270);
              v269 = v166;
            }
            *((_BYTE *)v166 + *(unsigned __int8 *)v166 + 1) = 5;
            v167 = v269;
            v168 = *(unsigned __int8 *)v269;
            *(_BYTE *)v269 = v168 + 1;
            v167[v168 + 2] = (void *)v22;
            if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v261.__r_.__value_.__l.__data_);
            sub_22E3BB0B8((uint64_t)&v269);
          }
LABEL_327:
          v269 = (void **)&v281;
          sub_22E3B3CC8(&v269);
        }
      }
      v169 = *(unsigned int *)(a1 + 24);
      if (v169 > 0x40)
      {
        **(_QWORD **)(a1 + 16) = 0;
        bzero((void *)(*(_QWORD *)(a1 + 16) + 8), (((unint64_t)(v169 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_BYTE *)(a1 + 28) = 0;
      *(_QWORD *)(a1 + 8) = v22;
      v170 = *a2;
      *(_DWORD *)a1 = *a2;
      *(_DWORD *)(a1 + 4) = v170;
      *(_BYTE *)(a3 + 16) = 1;
      do
      {
        sub_22F18FB4C(a5, a2);
        v30 = 0;
      }
      while (*((_WORD *)a2 + 8) == 4);
      return v30;
  }
}

uint64_t sub_22F1713EC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6)
{
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL8 v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::string::size_type v35;
  const void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  std::string *v41;
  std::string::size_type v42;
  size_t v43;
  const void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  _BYTE *v53;
  size_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  std::string::size_type v67;
  const void *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  std::string *v73;
  std::string::size_type v74;
  size_t v75;
  const void *v76;
  void *p_p;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  _BYTE *v85;
  size_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 v91;
  void *__src;
  void *__srca;
  void *__srcb;
  void *__srcc;
  int v98;
  llvm::APInt *v99;
  void *__p;
  std::string::size_type v101;
  int64_t v102;
  std::string v103;
  std::string v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  char v112[16];
  char v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int8 v117;
  _BYTE v118[24];
  int v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v11 = *(_WORD *)(a3 + 16);
  v12 = sub_22F172CF8(v11);
  if (v12 == -1)
  {
    sub_22F172DA0(*(_QWORD *)(a6 + 48), (uint64_t *)a1, *(_DWORD *)a3, v11);
    return 1;
  }
  v13 = v12;
  v99 = (llvm::APInt *)(a1 + 16);
  v14 = v12 >= a2;
  if (v12 >= a2)
  {
    v15 = *(unsigned __int16 *)(a3 + 16);
    if (v15 != 60)
    {
      if (v15 == 58)
      {
        if (sub_22E508590((uint64_t)v99, 0))
          goto LABEL_7;
        goto LABEL_9;
      }
      if (v15 != 28)
        goto LABEL_9;
    }
    if (sub_22E42E5EC((uint64_t)v99, 0))
    {
LABEL_7:
      v16 = 0;
LABEL_10:
      v98 = *(_DWORD *)a3;
      do
        sub_22F18FB4C(a6, a3);
      while (*(_WORD *)(a3 + 16) == 4);
      v17 = *(_DWORD *)(a1 + 24);
      v114 = 0;
      v116 = v17;
      if (v17 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v115);
      else
        v115 = 0;
      v117 = 1;
      v113 = 0;
      if ((sub_22F16F6E8(&v114, a3, v112, v16, a6) & 1) == 0)
      {
        *a5 = v113;
        v18 = *(_WORD *)(a3 + 16);
        v19 = sub_22F172CF8(v18);
        if (v19 != -1)
        {
          if (v15 == 60)
            v20 = 3;
          else
            v20 = v13 + 1;
          if (v19 >= v20)
          {
            if ((sub_22F1713EC(&v114) & 1) != 0)
              goto LABEL_38;
            sub_22F172CF8(*(unsigned __int16 *)(a3 + 16));
          }
          v110 = *(_DWORD *)(a1 + 24);
          if (v110 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v109);
          else
            v109 = 0;
          v111 = 1;
          if ((v15 - 28) <= 0x25 && ((1 << (v15 - 28)) & 0x2141080001) != 0)
          {
LABEL_28:
            v104.__r_.__value_.__s.__data_[0] = 0;
            __asm { BR              X10 }
          }
          v21 = *(unsigned __int8 *)(a1 + 28);
          v22 = v117;
          v111 = (v21 | v117) != 0;
          if (!a4 || !(v21 | v117))
          {
LABEL_156:
            v91 = v111;
            *(_BYTE *)(a1 + 28) = v111;
            v117 = v91;
            goto LABEL_28;
          }
          if (v21)
            goto LABEL_96;
          v23 = *(_DWORD *)(a1 + 24);
          v24 = v23 - 1;
          v25 = (v23 - 1) >> 6;
          v26 = v23 >= 0x41;
          v27 = (_QWORD *)(a1 + 16);
          if (v26)
            v27 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v25);
          if (((*v27 >> v24) & 1) == 0)
          {
LABEL_96:
            if (v22)
              goto LABEL_156;
            v59 = &v115;
            if (v116 >= 0x41)
              v59 = (uint64_t *)(v115 + 8 * ((v116 - 1) >> 6));
            if ((((unint64_t)*v59 >> (v116 - 1)) & 1) == 0)
              goto LABEL_156;
            v60 = *(_QWORD *)(a6 + 48);
            *(_DWORD *)(v60 + 312) = v98;
            *(_DWORD *)(v60 + 316) = 1334;
            if (*(char *)(v60 + 311) < 0)
            {
              **(_BYTE **)(v60 + 288) = 0;
              *(_QWORD *)(v60 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v60 + 288) = 0;
              *(_BYTE *)(v60 + 311) = 0;
            }
            v61 = (unsigned __int8 *)(v60 + 320);
            v105 = (unsigned __int8 *)(v60 + 320);
            v106 = 0;
            v107 = v60;
            v108 = 1;
            *(_BYTE *)(v60 + 320) = 0;
            *(_DWORD *)(v60 + 664) = 0;
            v62 = *(unsigned int *)(v60 + 776);
            if ((_DWORD)v62)
            {
              v63 = *(_QWORD *)(v60 + 768);
              v64 = 56 * v62;
              do
              {
                if (*(char *)(v63 + v64 - 9) < 0)
                  operator delete(*(void **)(v63 + v64 - 32));
                v64 -= 56;
              }
              while (v64);
              v61 = v105;
              *(_DWORD *)(v60 + 776) = 0;
              if (!v61)
              {
                v61 = (unsigned __int8 *)sub_22E3B8AAC(v106);
                v105 = v61;
              }
            }
            else
            {
              *(_DWORD *)(v60 + 776) = 0;
            }
            v61[*v61 + 1] = 2;
            v65 = v105;
            v66 = *v105;
            *v105 = v66 + 1;
            *(_QWORD *)&v65[8 * v66 + 16] = 1;
            *(_QWORD *)v118 = &v119;
            *(_OWORD *)&v118[8] = xmmword_22F455490;
            llvm::APInt::toString();
            v67 = *(_QWORD *)&v118[8];
            if (*(_QWORD *)&v118[8] > 0x7FFFFFFFFFFFFFF7uLL)
              goto LABEL_161;
            v68 = *(const void **)v118;
            if (*(_QWORD *)&v118[8] >= 0x17uLL)
            {
              v70 = (*(_QWORD *)&v118[8] & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((*(_QWORD *)&v118[8] | 7) != 0x17)
                v70 = *(_QWORD *)&v118[8] | 7;
              v71 = v70 + 1;
              __srcb = *(void **)v118;
              v69 = operator new(v70 + 1);
              v68 = __srcb;
              v103.__r_.__value_.__l.__size_ = v67;
              v103.__r_.__value_.__r.__words[2] = v71 | 0x8000000000000000;
              v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
            }
            else
            {
              *((_BYTE *)&v103.__r_.__value_.__s + 23) = v118[8];
              v69 = &v103;
              if (!*(_QWORD *)&v118[8])
              {
LABEL_119:
                v69[v67] = 0;
                if (*(int **)v118 != &v119)
                  free(*(void **)v118);
                v73 = std::string::append(&v103, " to ");
                v74 = v73->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                v104.__r_.__value_.__r.__words[2] = v74;
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                *(_QWORD *)v118 = &v119;
                *(_OWORD *)&v118[8] = xmmword_22F455490;
                llvm::APInt::toString();
                v75 = *(_QWORD *)&v118[8];
                if (*(_QWORD *)&v118[8] <= 0x7FFFFFFFFFFFFFF7uLL)
                {
                  v76 = *(const void **)v118;
                  if (*(_QWORD *)&v118[8] >= 0x17uLL)
                  {
                    v78 = (*(_QWORD *)&v118[8] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((*(_QWORD *)&v118[8] | 7) != 0x17)
                      v78 = *(_QWORD *)&v118[8] | 7;
                    v79 = v78 + 1;
                    __srcc = *(void **)v118;
                    p_p = operator new(v78 + 1);
                    v76 = __srcc;
                    v101 = v75;
                    v102 = v79 | 0x8000000000000000;
                    __p = p_p;
                  }
                  else
                  {
                    HIBYTE(v102) = v118[8];
                    p_p = &__p;
                    if (!*(_QWORD *)&v118[8])
                      goto LABEL_129;
                  }
                  v80 = p_p;
                  memmove(p_p, v76, v75);
                  p_p = v80;
LABEL_129:
                  *((_BYTE *)p_p + v75) = 0;
                  if (*(int **)v118 != &v119)
                    free(*(void **)v118);
                  if (v102 >= 0)
                    v81 = (const std::string::value_type *)&__p;
                  else
                    v81 = (const std::string::value_type *)__p;
                  if (v102 >= 0)
                    v82 = HIBYTE(v102) & 0x7F;
                  else
                    v82 = v101;
                  v83 = std::string::append(&v104, v81, v82);
                  v84 = v83->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v118 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v118[16] = v84;
                  v83->__r_.__value_.__l.__size_ = 0;
                  v83->__r_.__value_.__r.__words[2] = 0;
                  v83->__r_.__value_.__r.__words[0] = 0;
                  if (v118[23] >= 0)
                    v85 = v118;
                  else
                    v85 = *(_BYTE **)v118;
                  if (v118[23] >= 0)
                    v86 = v118[23] & 0x7F;
                  else
                    v86 = *(_QWORD *)&v118[8];
                  sub_22E3B89A8(&v105, v85, v86);
                  v87 = *(_QWORD *)a1;
                  v88 = v105;
                  if (!v105)
                  {
                    v88 = (unsigned __int8 *)sub_22E3B8AAC(v106);
                    v105 = v88;
                  }
                  sub_22E4D6448((uint64_t)(v88 + 336), v87, 1);
                  v89 = v114;
                  v90 = v105;
                  if (!v105)
                  {
                    v90 = (unsigned __int8 *)sub_22E3B8AAC(v106);
                    v105 = v90;
                  }
                  sub_22E4D6448((uint64_t)(v90 + 336), v89, 1);
                  if ((v118[23] & 0x80000000) != 0)
                    operator delete(*(void **)v118);
                  if (SHIBYTE(v102) < 0)
                    operator delete(__p);
                  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v104.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v103.__r_.__value_.__l.__data_);
                  sub_22E3BB0B8((uint64_t)&v105);
                  goto LABEL_156;
                }
LABEL_161:
                abort();
              }
            }
            v72 = v69;
            memmove(v69, v68, v67);
            v69 = v72;
            goto LABEL_119;
          }
          v28 = *(_QWORD *)(a6 + 48);
          *(_DWORD *)(v28 + 312) = v98;
          *(_DWORD *)(v28 + 316) = 1334;
          if (*(char *)(v28 + 311) < 0)
          {
            **(_BYTE **)(v28 + 288) = 0;
            *(_QWORD *)(v28 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v28 + 288) = 0;
            *(_BYTE *)(v28 + 311) = 0;
          }
          v29 = (unsigned __int8 *)(v28 + 320);
          v105 = (unsigned __int8 *)(v28 + 320);
          v106 = 0;
          v107 = v28;
          v108 = 1;
          *(_BYTE *)(v28 + 320) = 0;
          *(_DWORD *)(v28 + 664) = 0;
          v30 = *(unsigned int *)(v28 + 776);
          if ((_DWORD)v30)
          {
            v31 = *(_QWORD *)(v28 + 768);
            v32 = 56 * v30;
            do
            {
              if (*(char *)(v31 + v32 - 9) < 0)
                operator delete(*(void **)(v31 + v32 - 32));
              v32 -= 56;
            }
            while (v32);
            v29 = v105;
            *(_DWORD *)(v28 + 776) = 0;
            if (!v29)
            {
              v29 = (unsigned __int8 *)sub_22E3B8AAC(v106);
              v105 = v29;
            }
          }
          else
          {
            *(_DWORD *)(v28 + 776) = 0;
          }
          v29[*v29 + 1] = 2;
          v33 = v105;
          v34 = *v105;
          *v105 = v34 + 1;
          *(_QWORD *)&v33[8 * v34 + 16] = 0;
          *(_QWORD *)v118 = &v119;
          *(_OWORD *)&v118[8] = xmmword_22F455490;
          llvm::APInt::toString();
          v35 = *(_QWORD *)&v118[8];
          if (*(_QWORD *)&v118[8] > 0x7FFFFFFFFFFFFFF7uLL)
            goto LABEL_161;
          v36 = *(const void **)v118;
          if (*(_QWORD *)&v118[8] >= 0x17uLL)
          {
            v38 = (*(_QWORD *)&v118[8] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*(_QWORD *)&v118[8] | 7) != 0x17)
              v38 = *(_QWORD *)&v118[8] | 7;
            v39 = v38 + 1;
            __src = *(void **)v118;
            v37 = operator new(v38 + 1);
            v36 = __src;
            v103.__r_.__value_.__l.__size_ = v35;
            v103.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
            v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          }
          else
          {
            *((_BYTE *)&v103.__r_.__value_.__s + 23) = v118[8];
            v37 = &v103;
            if (!*(_QWORD *)&v118[8])
            {
LABEL_59:
              v37[v35] = 0;
              if (*(int **)v118 != &v119)
                free(*(void **)v118);
              v41 = std::string::append(&v103, " to ");
              v42 = v41->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              v104.__r_.__value_.__r.__words[2] = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v118 = &v119;
              *(_OWORD *)&v118[8] = xmmword_22F455490;
              llvm::APInt::toString();
              v43 = *(_QWORD *)&v118[8];
              if (*(_QWORD *)&v118[8] > 0x7FFFFFFFFFFFFFF7uLL)
                goto LABEL_161;
              v44 = *(const void **)v118;
              if (*(_QWORD *)&v118[8] >= 0x17uLL)
              {
                v46 = (*(_QWORD *)&v118[8] & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((*(_QWORD *)&v118[8] | 7) != 0x17)
                  v46 = *(_QWORD *)&v118[8] | 7;
                v47 = v46 + 1;
                __srca = *(void **)v118;
                v45 = operator new(v46 + 1);
                v44 = __srca;
                v101 = v43;
                v102 = v47 | 0x8000000000000000;
                __p = v45;
              }
              else
              {
                HIBYTE(v102) = v118[8];
                v45 = &__p;
                if (!*(_QWORD *)&v118[8])
                  goto LABEL_69;
              }
              v48 = v45;
              memmove(v45, v44, v43);
              v45 = v48;
LABEL_69:
              *((_BYTE *)v45 + v43) = 0;
              if (*(int **)v118 != &v119)
                free(*(void **)v118);
              if (v102 >= 0)
                v49 = (const std::string::value_type *)&__p;
              else
                v49 = (const std::string::value_type *)__p;
              if (v102 >= 0)
                v50 = HIBYTE(v102) & 0x7F;
              else
                v50 = v101;
              v51 = std::string::append(&v104, v49, v50);
              v52 = v51->__r_.__value_.__r.__words[2];
              *(_OWORD *)v118 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
              *(_QWORD *)&v118[16] = v52;
              v51->__r_.__value_.__l.__size_ = 0;
              v51->__r_.__value_.__r.__words[2] = 0;
              v51->__r_.__value_.__r.__words[0] = 0;
              if (v118[23] >= 0)
                v53 = v118;
              else
                v53 = *(_BYTE **)v118;
              if (v118[23] >= 0)
                v54 = v118[23] & 0x7F;
              else
                v54 = *(_QWORD *)&v118[8];
              sub_22E3B89A8(&v105, v53, v54);
              v55 = *(_QWORD *)a1;
              v56 = v105;
              if (!v105)
              {
                v56 = (unsigned __int8 *)sub_22E3B8AAC(v106);
                v105 = v56;
              }
              sub_22E4D6448((uint64_t)(v56 + 336), v55, 1);
              v57 = v114;
              v58 = v105;
              if (!v105)
              {
                v58 = (unsigned __int8 *)sub_22E3B8AAC(v106);
                v105 = v58;
              }
              sub_22E4D6448((uint64_t)(v58 + 336), v57, 1);
              if ((v118[23] & 0x80000000) != 0)
                operator delete(*(void **)v118);
              if (SHIBYTE(v102) < 0)
                operator delete(__p);
              if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v104.__r_.__value_.__l.__data_);
              if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v103.__r_.__value_.__l.__data_);
              sub_22E3BB0B8((uint64_t)&v105);
              v22 = v117;
              goto LABEL_96;
            }
          }
          v40 = v37;
          memmove(v37, v36, v35);
          v37 = v40;
          goto LABEL_59;
        }
        sub_22F172DA0(*(_QWORD *)(a6 + 48), &v114, *(_DWORD *)a3, v18);
      }
LABEL_38:
      if (v116 >= 0x41 && v115)
        MEMORY[0x2348A0E84](v115, 0x1000C8000313F17);
      return v14;
    }
LABEL_9:
    v16 = a4;
    goto LABEL_10;
  }
  return v14;
}

uint64_t sub_22F172CF8(int a1)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  switch(a1)
  {
    case 22:
      result = 0;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 29:
    case 31:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 43:
    case 45:
    case 49:
    case 50:
    case 54:
    case 56:
    case 59:
    case 62:
    case 63:
      return result;
    case 27:
      result = 9;
      break;
    case 28:
      result = 6;
      break;
    case 30:
    case 42:
    case 44:
      result = 14;
      break;
    case 32:
    case 35:
      result = 13;
      break;
    case 41:
    case 64:
      result = 10;
      break;
    case 46:
    case 48:
    case 51:
    case 53:
      result = 11;
      break;
    case 47:
    case 52:
      result = 12;
      break;
    case 55:
      result = 8;
      break;
    case 57:
      result = 7;
      break;
    case 58:
      result = 5;
      break;
    case 60:
      result = 4;
      break;
    case 61:
      result = 2;
      break;
    case 65:
      result = 3;
      break;
    default:
      if (a1 == 2)
        result = 0;
      else
        result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_22F172DA0(uint64_t a1, uint64_t *a2, int a3, __int16 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  if (a4 == 21 && a2[1])
  {
    *(_DWORD *)(a1 + 312) = *a2;
    *(_DWORD *)(a1 + 316) = 1126;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v9 = (unsigned __int8 *)(a1 + 320);
    v15 = a1 + 320;
    v16 = 0;
    v17 = a1;
    v18 = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v10 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
      LODWORD(v10) = *v9;
    }
    *(_DWORD *)(a1 + 776) = 0;
    v13 = a2[1];
    v9[v10 + 1] = 5;
    *(_BYTE *)(a1 + 320) = v10 + 1;
    *(_QWORD *)&v9[8 * v10 + 16] = v13;
  }
  else
  {
    *(_DWORD *)(a1 + 312) = a3;
    *(_DWORD *)(a1 + 316) = 1125;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    v15 = a1 + 320;
    v16 = 0;
    v17 = a1;
    v18 = 1;
    *(_BYTE *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 664) = 0;
    v6 = *(unsigned int *)(a1 + 776);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 768);
      v8 = 56 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 9) < 0)
          operator delete(*(void **)(v7 + v8 - 32));
        v8 -= 56;
      }
      while (v8);
    }
    *(_DWORD *)(a1 + 776) = 0;
    sub_22E4D6448(a1 + 656, *a2, 1);
  }
  return sub_22E3BB0B8((uint64_t)&v15);
}

uint64_t sub_22F172F28(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[126];
  if (v2)
  {
    if (!*(_BYTE *)(v2 + 177))
    {
      v3 = a1 + 127;
      return *v3;
    }
  }
  else
  {
    result = a1[127];
    if (result)
      return result;
  }
  v5 = a1[134];
  v6 = a1[133];
  if (v5 == v6)
    return 0;
  while (1)
  {
    v7 = *(_QWORD *)(v5 - 40);
    if (v7)
      break;
    result = *(_QWORD *)(v5 - 32);
    if (result)
      return result;
LABEL_9:
    result = 0;
    v5 -= 56;
    if (v5 == v6)
      return result;
  }
  if (*(_BYTE *)(v7 + 177))
    goto LABEL_9;
  v3 = (_QWORD *)(v5 - 32);
  return *v3;
}

uint64_t sub_22F172FA4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  unint64_t v12;
  int v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  const char *v24;
  size_t v25;
  void *p_p;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p;
  size_t v44;
  int64_t v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  _BYTE v49[32];
  unsigned __int8 v50;

  ++*(_DWORD *)(a1 + 2204);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 1072) - *(_QWORD *)(a1 + 1064)) >> 3);
  if (v12 > *(unsigned int *)(a1 + 2208))
    *(_DWORD *)(a1 + 2208) = v12;
  sub_22E490D40(*(_QWORD **)(a1 + 88), a2, a5, v49);
  v13 = v50;
  if (!v50)
  {
    v16 = sub_22E49F3DC(*(_QWORD **)(a1 + 88), a2);
    if (v16)
      v17 = *v16 & 0x7FFFFFFF;
    else
      v17 = 0;
    v18 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v18 + 312) = a5;
    *(_DWORD *)(v18 + 316) = 1116;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    v46 = (unint64_t)(v18 + 320);
    v47 = v18;
    v48 = 1;
    *(_BYTE *)(v18 + 320) = 0;
    *(_DWORD *)(v18 + 664) = 0;
    v19 = *(unsigned int *)(v18 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v18 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
    }
    *(_DWORD *)(v18 + 776) = 0;
    v22 = sub_22F1E3690(*(_QWORD **)(a1 + 88), v17, 0);
    if (v23 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v24 = v22;
    v25 = v23;
    if (v23 >= 0x17)
    {
      v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v27 = v23 | 7;
      v28 = v27 + 1;
      p_p = operator new(v27 + 1);
      v44 = v25;
      v45 = v28 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v45) = v23;
      p_p = &__p;
      if (!v23)
        goto LABEL_27;
    }
    memmove(p_p, v24, v25);
LABEL_27:
    *((_BYTE *)p_p + v25) = 0;
    if (v45 >= 0)
      v29 = &__p;
    else
      v29 = __p;
    if (v45 >= 0)
      v30 = HIBYTE(v45) & 0x7F;
    else
      v30 = v44;
    sub_22E3B89A8((unsigned __int8 **)&v46, v29, v30);
    v31 = (unsigned __int8 *)v46;
    if (!(_QWORD)v46)
    {
      v31 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v46 + 1));
      *(_QWORD *)&v46 = v31;
    }
    v31[*v31 + 1] = 1;
    v32 = v46;
    v33 = *(unsigned __int8 *)v46;
    *(_BYTE *)v46 = v33 + 1;
    *(_QWORD *)(v32 + 8 * v33 + 16) = "";
    if (SHIBYTE(v45) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)&v46);
    return v13 == 0;
  }
  if (*(_QWORD *)(a1 + 752) && sub_22E6155EC(*(_QWORD **)(a1 + 88), a2) == *(_QWORD *)(a1 + 752))
  {
    v14 = sub_22E49F3DC(*(_QWORD **)(a1 + 88), a2);
    if (v14)
      v15 = *v14 & 0x7FFFFFFF;
    else
      v15 = 0;
    *(_DWORD *)(a1 + 768) = v15;
    *(_DWORD *)(a1 + 764) = *(_DWORD *)(a1 + 760) + v15;
  }
  v34 = operator new();
  sub_22F140CA8(v34, a2, (uint64_t)v49, a1, a6);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296))
    goto LABEL_47;
  if (*(_DWORD *)(a1 + 2264) == a2)
    goto LABEL_47;
  v35 = sub_22E49F3DC(*(_QWORD **)(a1 + 88), a2);
  if (!v35 || !*(_QWORD *)((*((_QWORD *)v35 + 2) & 0xFFFFFFFFFFFFFFF8) + 8))
    goto LABEL_47;
  v36 = *(_QWORD *)(a1 + 32);
  __p = *(void **)((*((_QWORD *)v35 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
  v37 = *(_QWORD *)(v36 + 296);
  if (v37)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v37 + 48))(&v46, v37, &__p);
    if ((_BYTE)v47)
      *(_OWORD *)(v34 + 216) = v46;
LABEL_47:
    sub_22F17330C(a1, v34, a3, a4);
    return v13 == 0;
  }
  sub_22E4A06C4();
  return sub_22F17330C(v39, v40, v41, v42);
}

uint64_t sub_22F17330C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  v8 = *(unsigned int **)(a1 + 1016);
  if (v8 || *(_QWORD *)(a1 + 1040))
  {
    sub_22F1631D0(a1 + 1064, (_DWORD *)(a1 + 1048), (uint64_t *)(a1 + 1056), (uint64_t *)(a1 + 1008), (uint64_t *)(a1 + 1016), (uint64_t *)(a1 + 1040), (__int128 *)(a1 + 1024));
    *(_QWORD *)(a1 + 1016) = 0;
  }
  result = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = a2;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_QWORD *)(a1 + 1016) = a2;
  *(_QWORD *)(a1 + 1024) = a3;
  *(_QWORD *)(a1 + 1032) = a4;
  *(_QWORD *)(a1 + 1056) = 0;
  if (*(_DWORD *)(a1 + 1048) != 4)
  {
    if (*(_QWORD *)(a2 + 224))
      v10 = 3;
    else
      v10 = 0;
    *(_DWORD *)(a1 + 1048) = v10;
  }
  if (*(_QWORD *)(a1 + 1088))
  {
    v11 = *(_QWORD *)(a1 + 1008);
    if (!*(_BYTE *)(v11 + 177))
    {
      v12 = sub_22F1E361C(*(_QWORD **)(a1 + 88), *(_DWORD *)(v11 + 160));
      if (v8)
      {
        v13 = v8[4];
        v8 = (unsigned int *)(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 32))(v8);
      }
      else
      {
        v13 = 0;
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 1088) + 16))(*(_QWORD *)(a1 + 1088), *(unsigned int *)(*(_QWORD *)(a1 + 1008) + 160), 0, v12, v13);
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *, uint64_t, unsigned int *))(**(_QWORD **)(a1 + 1088)
                                                                                                  + 24))(*(_QWORD *)(a1 + 1088), *(unsigned int *)(*(_QWORD *)(a1 + 1008) + 16), 0, v12, v13, v8);
    }
  }
  return result;
}

char *sub_22F17346C(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  uint64_t v19;

  v2 = *(_DWORD *)(a1 + 2276);
  if (v2)
  {
    v3 = v2 - 1;
    *(_DWORD *)(a1 + 2276) = v3;
    v4 = a1 + 8 * v3;
    v5 = *(_QWORD *)(v4 + 2280);
    *(_QWORD *)(v4 + 2280) = 0;
  }
  else
  {
    v5 = operator new();
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    *(_BYTE *)(v5 + 64) &= ~8u;
  }
  sub_22F19173C();
  v6 = (_DWORD *)(a1 + 1048);
  v7 = (uint64_t *)(a1 + 1056);
  v8 = (uint64_t *)(a1 + 1008);
  v9 = (uint64_t *)(a1 + 1016);
  v10 = (uint64_t *)(a1 + 1040);
  v11 = (__int128 *)(a1 + 1024);
  v12 = *(_QWORD *)(a1 + 1072);
  if (v12 >= *(_QWORD *)(a1 + 1080))
  {
    result = sub_22F163244((void **)(a1 + 1064), (_DWORD *)(a1 + 1048), v7, v8, (uint64_t *)(a1 + 1016), v10, v11);
  }
  else
  {
    v13 = *v7;
    v14 = *v9;
    v15 = *v11;
    *(_DWORD *)v12 = *v6;
    *(_QWORD *)(v12 + 8) = v13;
    v16 = *v8;
    *v8 = 0;
    *(_QWORD *)(v12 + 16) = v16;
    *(_QWORD *)(v12 + 24) = v14;
    v17 = *v10;
    *v10 = 0;
    *(_QWORD *)(v12 + 32) = v17;
    *(_OWORD *)(v12 + 40) = v15;
    result = (char *)(v12 + 56);
  }
  *(_QWORD *)(a1 + 1072) = result;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *v9 = 0;
  v19 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = v5;
  if (v19)
  {
    sub_22F192684(v19);
    result = (char *)MEMORY[0x2348A0E9C](v19, 0x1060C40B318AEC2);
  }
  if (*v6 != 4)
    *v6 = 1;
  return result;
}

char *sub_22F1735E4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  char *result;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a1 + 1048) == 2)
  {
    v12 = *(_QWORD *)(a1 + 2816);
    if (v12 >= *(unsigned int *)(a1 + 2784))
    {
      if (!*(_QWORD *)(a1 + 1016) && !*(_QWORD *)(a1 + 1040) && *(_QWORD *)(a1 + 1064) != *(_QWORD *)(a1 + 1072))
        sub_22F1754E8(a1);
      sub_22F1735E4(a1, a2, a3, a4, a5, a6);
      return sub_22F162A44((char *)a1);
    }
    else
    {
      result = (char *)sub_22F163038(a1 + 2776, *(_QWORD *)(a1 + 2776) + 24 * v12, a2, &a2[24 * a3]);
      if (a2)
      {
        if ((_DWORD)a5)
          JUMPOUT(0x2348A0E84);
      }
    }
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 2276);
    if (v14)
    {
      v15 = v14 - 1;
      *(_DWORD *)(a1 + 2276) = v15;
      v16 = a1 + 8 * v15;
      v17 = *(_QWORD *)(v16 + 2280);
      *(_QWORD *)(v16 + 2280) = 0;
      v18 = v17;
    }
    else
    {
      v18 = operator new();
      v17 = v18;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = a1;
      *(_QWORD *)(v18 + 40) = 0;
      *(_DWORD *)(v18 + 48) = 0;
      *(_DWORD *)(v18 + 56) = 0;
      *(_BYTE *)(v18 + 64) &= ~8u;
    }
    sub_22F192724(v18, (uint64_t)a2, a3, a4, a5, a6);
    v19 = (_DWORD *)(a1 + 1048);
    v20 = (uint64_t *)(a1 + 1056);
    v21 = (uint64_t *)(a1 + 1008);
    v22 = (uint64_t *)(a1 + 1016);
    v23 = (uint64_t *)(a1 + 1040);
    v24 = (__int128 *)(a1 + 1024);
    v25 = *(_QWORD *)(a1 + 1072);
    if (v25 >= *(_QWORD *)(a1 + 1080))
    {
      result = sub_22F163244((void **)(a1 + 1064), (_DWORD *)(a1 + 1048), v20, v21, (uint64_t *)(a1 + 1016), v23, v24);
    }
    else
    {
      v26 = *v20;
      v27 = *v22;
      v28 = *v24;
      *(_DWORD *)v25 = *v19;
      *(_QWORD *)(v25 + 8) = v26;
      v29 = *v21;
      *v21 = 0;
      *(_QWORD *)(v25 + 16) = v29;
      *(_QWORD *)(v25 + 24) = v27;
      v30 = *v23;
      *v23 = 0;
      *(_QWORD *)(v25 + 32) = v30;
      *(_OWORD *)(v25 + 40) = v28;
      result = (char *)(v25 + 56);
    }
    *(_QWORD *)(a1 + 1072) = result;
    *(_QWORD *)(a1 + 1024) = 0;
    *(_QWORD *)(a1 + 1032) = 0;
    *v22 = 0;
    v31 = *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1040) = v17;
    if (v31)
    {
      sub_22F192684(v31);
      result = (char *)MEMORY[0x2348A0E9C](v31, 0x1060C40B318AEC2);
    }
    if (*v19 != 4)
      *v19 = 1;
  }
  return result;
}

uint64_t sub_22F173830(unint64_t a1, uint64_t a2, int a3, char a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *i;
  llvm *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int **v21;
  BOOL v22;
  unsigned int *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  size_t v29;
  __n128 *v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  unint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  __int128 *p_p;
  size_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  int v108;
  _DWORD *v109;
  uint64_t v110;
  _BOOL4 v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  char v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  std::string *v134;
  std::string::size_type v135;
  const char *v136;
  unsigned int v137;
  _QWORD *v138;
  unsigned int v139;
  _DWORD *v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  const void *v155;
  const void *v156;
  char v157;
  const void *v158;
  size_t v159;
  size_t v160;
  uint64_t v161;
  _QWORD *v162;
  std::string::size_type v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char **v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  size_t *v174;
  uint64_t v175;
  const void *v176;
  size_t v177;
  size_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  size_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  std::string::size_type v188;
  std::string::size_type v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void **v193;
  size_t v194;
  std::__shared_weak_count *v195;
  unint64_t *p_shared_owners;
  unint64_t v197;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int *v219;
  unsigned int *v220;
  unsigned int *v221;
  unsigned int *v222;
  unint64_t v223;
  uint64_t v224;
  unsigned int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int *v256;
  std::string::size_type v257;
  const void *v258;
  unsigned int v259;
  void *p_dst;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  char v275;
  void *v276;
  size_t v277;
  size_t v278;
  unsigned __int8 *v279;
  _QWORD *v280;
  uint64_t v281;
  std::string::size_type v282;
  uint64_t *v283;
  uint64_t v284;
  unsigned int v286;
  unsigned int v287;
  char *v288;
  uint64_t v290;
  _QWORD v291[3];
  __int16 v292;
  _QWORD v293[3];
  __int16 v294;
  _QWORD v295[3];
  __int16 v296;
  _QWORD v297[3];
  __int16 v298;
  char v299[8];
  uint64_t v300;
  std::__shared_weak_count *v301;
  std::error_code v302;
  __int128 __p;
  uint64_t v304;
  void *v305;
  char v306;
  uint64_t v307;
  __int16 v308;
  __int16 v309;
  void *v310[2];
  char v311;
  __int16 v312;
  std::string v313;
  __int16 v314;
  __int16 v315;
  std::string __dst;
  void *__src;
  __int128 __len;
  std::string v319;
  uint64_t v320;
  _QWORD *v321;
  char v322;
  uint64_t v323;
  char v324;
  uint64_t v325;

  v325 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 1008) && *(_QWORD *)(a1 + 1056))
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (*(_QWORD *)(a1 + 1064) != *(_QWORD *)(a1 + 1072))
      goto LABEL_7;
  }
  v7 = *(unsigned int *)(a1 + 1240);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 1232) + 32 * v7;
    if (*(_BYTE *)(v8 - 20))
    {
      v207 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v207 + 312) = *(_DWORD *)(v8 - 24);
      *(_DWORD *)(v207 + 316) = 1157;
      if (*(char *)(v207 + 311) < 0)
      {
        **(_BYTE **)(v207 + 288) = 0;
        *(_QWORD *)(v207 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v207 + 288) = 0;
        *(_BYTE *)(v207 + 311) = 0;
      }
      v297[0] = v207 + 320;
      v297[1] = 0;
      v297[2] = v207;
      v298 = 1;
      *(_BYTE *)(v207 + 320) = 0;
      *(_DWORD *)(v207 + 664) = 0;
      v208 = *(unsigned int *)(v207 + 776);
      if ((_DWORD)v208)
      {
        v209 = *(_QWORD *)(v207 + 768);
        v210 = 56 * v208;
        do
        {
          if (*(char *)(v209 + v210 - 9) < 0)
            operator delete(*(void **)(v209 + v210 - 32));
          v210 -= 56;
        }
        while (v210);
      }
      *(_DWORD *)(v207 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v297);
      v211 = sub_22F1750EC(a1, 1);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      v212 = *(uint64_t **)(a1 + 1008);
      v213 = sub_22F415870(v212[18], v212[19]);
      v212[23] = v213;
      v214 = *(_QWORD *)(a1 + 1008);
      v215 = *(_DWORD *)(v214 + 184);
      *(_DWORD *)(a2 + 4) = v213 - v215;
      v216 = v215 - *(_DWORD *)(v214 + 144);
      v217 = *(_DWORD *)(v214 + 160);
      if (v217 < 0)
        v218 = sub_22F142B40(*(_QWORD *)(v214 + 8), v217, v216, (int)v213 - v215);
      else
        v218 = v217 + v216;
      *(_DWORD *)a2 = v218;
      *(_WORD *)(a2 + 16) = 438;
      *(_QWORD *)(v214 + 184) = v213;
      *(_DWORD *)(a2 + 4) = v218;
      v74 = 1;
      *(_QWORD *)(a2 + 8) = v211;
      return v74;
    }
  }
LABEL_7:
  v287 = v6;
  v9 = *(_QWORD *)(a1 + 1016);
  if (v9)
  {
    if (!*(_BYTE *)(v9 + 32))
    {
      v16 = *(llvm **)(v9 + 40);
      if (v16)
      {
        v17 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v9 + 8) + 88), *(_DWORD *)(v9 + 16));
        if (v17)
        {
          v18 = *(_QWORD *)((*((_QWORD *)v17 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v18)
          {
            do
            {
              v19 = *(_QWORD *)(v18 + 8);
              v18 = v19 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v19 & 2) != 0 && v18);
            if (v18)
            {
              sub_22F13B0E4(*(_QWORD **)(a1 + 104), v18)->n128_u64[1] = (unint64_t)v16;
              v20 = sub_22E6D7128(a1, v16);
              if (v20)
                *((_WORD *)v20 + 18) |= 0x400u;
              v21 = *(unsigned int ***)(*(_QWORD *)(a1 + 1016) + 48);
              if (v21)
              {
                v22 = sub_22F2EE534(a1, v16);
                if (v21 != (unsigned int **)v16 && !v22 && *(_BYTE *)(*(_QWORD *)(a1 + 1008) + 196))
                {
                  v23 = (unsigned int *)*((_QWORD *)v16 + 2);
                  v24 = *v23;
                  v313.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 4);
                  v313.__r_.__value_.__l.__size_ = v24;
                  v25 = v24 <= *v21[2] ? *v21[2] : v24;
                  if (v25 >> 1 >= llvm::StringRef::edit_distance())
                  {
                    v26 = *(_QWORD *)(a1 + 48);
                    *(_DWORD *)(v26 + 312) = *(_DWORD *)(*(_QWORD *)(a1 + 1016) + 56);
                    *(_DWORD *)(v26 + 316) = 1319;
                    if (*(char *)(v26 + 311) < 0)
                    {
                      **(_BYTE **)(v26 + 288) = 0;
                      *(_QWORD *)(v26 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v26 + 288) = 0;
                      *(_BYTE *)(v26 + 311) = 0;
                    }
                    v232 = (void *)(v26 + 320);
                    __src = (void *)(v26 + 320);
                    *(_QWORD *)&__len = 0;
                    *((_QWORD *)&__len + 1) = v26;
                    LOWORD(v319.__r_.__value_.__l.__data_) = 1;
                    *(_BYTE *)(v26 + 320) = 0;
                    *(_DWORD *)(v26 + 664) = 0;
                    v233 = *(unsigned int *)(v26 + 776);
                    if ((_DWORD)v233)
                    {
                      v234 = *(_QWORD *)(v26 + 768);
                      v235 = 56 * v233;
                      do
                      {
                        if (*(char *)(v234 + v235 - 9) < 0)
                          operator delete(*(void **)(v234 + v235 - 32));
                        v235 -= 56;
                      }
                      while (v235);
                      v232 = __src;
                      *(_DWORD *)(v26 + 776) = 0;
                      v236 = *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 56);
                      v237 = v236 | (v236 << 32);
                      if (!v232)
                      {
                        v232 = (void *)sub_22E3B8AAC(__len);
                        __src = v232;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v26 + 776) = 0;
                      v238 = *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 56);
                      v237 = v238 | (v238 << 32);
                    }
                    sub_22E4D6448((uint64_t)v232 + 336, v237, 1);
                    v239 = (unsigned __int8 *)__src;
                    if (!__src)
                    {
                      v239 = (unsigned __int8 *)sub_22E3B8AAC(__len);
                      __src = v239;
                    }
                    v239[*v239 + 1] = 5;
                    v240 = __src;
                    v241 = *(unsigned __int8 *)__src;
                    *(_BYTE *)__src = v241 + 1;
                    v240[v241 + 2] = v16;
                    sub_22E3BB0B8((uint64_t)&__src);
                    v242 = *(_QWORD *)(a1 + 48);
                    *(_DWORD *)(v242 + 312) = *(_DWORD *)(*(_QWORD *)(a1 + 1016) + 60);
                    *(_DWORD *)(v242 + 316) = 1244;
                    if (*(char *)(v242 + 311) < 0)
                    {
                      **(_BYTE **)(v242 + 288) = 0;
                      *(_QWORD *)(v242 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v242 + 288) = 0;
                      *(_BYTE *)(v242 + 311) = 0;
                    }
                    v243 = v242 + 320;
                    __p = (unint64_t)(v242 + 320);
                    v304 = v242;
                    LOWORD(v305) = 1;
                    *(_BYTE *)(v242 + 320) = 0;
                    *(_DWORD *)(v242 + 664) = 0;
                    v244 = *(unsigned int *)(v242 + 776);
                    if ((_DWORD)v244)
                    {
                      v245 = *(_QWORD *)(v242 + 768);
                      v246 = 56 * v244;
                      do
                      {
                        if (*(char *)(v245 + v246 - 9) < 0)
                          operator delete(*(void **)(v245 + v246 - 32));
                        v246 -= 56;
                      }
                      while (v246);
                      v243 = __p;
                      *(_DWORD *)(v242 + 776) = 0;
                      v247 = *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 60);
                      v248 = v247 | (v247 << 32);
                      if (!v243)
                      {
                        v243 = sub_22E3B8AAC(*((uint64_t *)&__p + 1));
                        *(_QWORD *)&__p = v243;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v242 + 776) = 0;
                      v249 = *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 60);
                      v248 = v249 | (v249 << 32);
                    }
                    sub_22E4D6448(v243 + 336, v248, 1);
                    v250 = (unsigned __int8 *)__p;
                    if (!(_QWORD)__p)
                    {
                      v250 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&__p + 1));
                      *(_QWORD *)&__p = v250;
                    }
                    v250[*v250 + 1] = 5;
                    v251 = __p;
                    v252 = *(unsigned __int8 *)__p;
                    *(_BYTE *)__p = v252 + 1;
                    *(_QWORD *)(v251 + 8 * v252 + 16) = v21;
                    *(_BYTE *)(v251 + (v252 + 1) + 1) = 5;
                    v253 = __p;
                    v254 = *(unsigned __int8 *)__p;
                    *(_BYTE *)__p = v254 + 1;
                    *(_QWORD *)(v253 + 8 * v254 + 16) = v16;
                    v255 = *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 60);
                    v256 = (unsigned int *)*((_QWORD *)v16 + 2);
                    v259 = *v256;
                    v258 = v256 + 4;
                    v257 = v259;
                    *(_QWORD *)((char *)&__len + 4) = 0;
                    BYTE12(__len) = 0;
                    memset(&v319, 0, sizeof(v319));
                    LOBYTE(v320) = 0;
                    __src = (void *)(v255 | (v255 << 32));
                    LOBYTE(__len) = 1;
                    if (v259 >= 0x17uLL)
                    {
                      if ((v257 | 7) == 0x17)
                        v261 = (v257 & 0xFFFFFFF8) + 8;
                      else
                        v261 = v257 | 7;
                      p_dst = operator new(v261 + 1);
                      __dst.__r_.__value_.__l.__size_ = v257;
                      __dst.__r_.__value_.__r.__words[2] = v261 - 0x7FFFFFFFFFFFFFFFLL;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v257;
                      p_dst = &__dst;
                      if (!v257)
                        goto LABEL_352;
                    }
                    memmove(p_dst, v258, v257);
LABEL_352:
                    *((_BYTE *)p_dst + v257) = 0;
                    v319 = __dst;
                    sub_22E6D82D0((uint64_t *)&__p, &__src);
                    if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v319.__r_.__value_.__l.__data_);
                    sub_22E3BB0B8((uint64_t)&__p);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (a3)
  {
    if (*(_QWORD *)(a1 + 1008))
    {
      v10 = sub_22F1E361C(*(_QWORD **)(a1 + 88), a3);
      if (v10 == 3 || !v10)
      {
        v11 = *(_QWORD *)(a1 + 1008);
        v12 = *(uint64_t **)(v11 + 112);
        v13 = *(unsigned int *)(v11 + 120);
        if ((_DWORD)v13)
        {
          for (i = v12; !*i || *i == -8; ++i)
            ;
        }
        else
        {
          i = v12;
        }
        v27 = &v12[v13];
        if (i != v27)
        {
          v28 = *i;
          v283 = &v12[v13];
          while (1)
          {
            v29 = *(_QWORD *)v28;
            v30 = sub_22F13B0E4(*(_QWORD **)(a1 + 104), *(_QWORD *)(v28 + 8));
            v31 = v30[12].n128_u32[0];
            if ((_DWORD)v31)
              break;
            do
            {
LABEL_95:
              v71 = i[1];
              ++i;
              v28 = v71;
              if (v71)
                v72 = v28 == -8;
              else
                v72 = 1;
            }
            while (v72);
            if (i == v27)
              goto LABEL_100;
          }
          v32 = (void *)(v28 + 24);
          v33 = v30[11].n128_u64[1];
          if ((_DWORD)v31 == 2)
          {
            v36 = *(_DWORD *)(v28 + 16);
            v37 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v37 + 312) = v36;
            *(_DWORD *)(v37 + 316) = 1175;
            if (*(char *)(v37 + 311) < 0)
            {
              **(_BYTE **)(v37 + 288) = 0;
              *(_QWORD *)(v37 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v37 + 288) = 0;
              *(_BYTE *)(v37 + 311) = 0;
            }
            __src = (void *)(v37 + 320);
            *(_QWORD *)&__len = 0;
            *((_QWORD *)&__len + 1) = v37;
            LOWORD(v319.__r_.__value_.__l.__data_) = 1;
            *(_BYTE *)(v37 + 320) = 0;
            *(_DWORD *)(v37 + 664) = 0;
            v40 = *(unsigned int *)(v37 + 776);
            if ((_DWORD)v40)
            {
              v41 = *(_QWORD *)(v37 + 768);
              v42 = 56 * v40;
              do
              {
                if (*(char *)(v41 + v42 - 9) < 0)
                  operator delete(*(void **)(v41 + v42 - 32));
                v42 -= 56;
              }
              while (v42);
            }
            *(_DWORD *)(v37 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&__src, v32, v29);
            v43 = (unsigned __int8 *)__src;
            if (!__src)
            {
              v43 = (unsigned __int8 *)sub_22E3B8AAC(__len);
              __src = v43;
            }
            v43[*v43 + 1] = 2;
            v44 = __src;
            v45 = *(unsigned __int8 *)__src;
            *(_BYTE *)__src = v45 + 1;
            v44[v45 + 2] = 1;
            sub_22E3B89A8((unsigned __int8 **)&__src, *(void **)v33, *(_QWORD *)(v33 + 8));
            v46 = *(void **)(v33 + 56);
            v47 = *(_QWORD *)(v33 + 64);
          }
          else
          {
            if ((_DWORD)v31 != 1)
            {
              v38 = *(_DWORD *)(v28 + 16);
              v39 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v39 + 312) = v38;
              *(_DWORD *)(v39 + 316) = 1175;
              if (*(char *)(v39 + 311) < 0)
              {
                **(_BYTE **)(v39 + 288) = 0;
                *(_QWORD *)(v39 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v39 + 288) = 0;
                *(_BYTE *)(v39 + 311) = 0;
              }
              __src = (void *)(v39 + 320);
              *(_QWORD *)&__len = 0;
              *((_QWORD *)&__len + 1) = v39;
              LOWORD(v319.__r_.__value_.__l.__data_) = 1;
              *(_BYTE *)(v39 + 320) = 0;
              *(_DWORD *)(v39 + 664) = 0;
              v54 = *(unsigned int *)(v39 + 776);
              if ((_DWORD)v54)
              {
                v55 = *(_QWORD *)(v39 + 768);
                v56 = 56 * v54;
                do
                {
                  if (*(char *)(v55 + v56 - 9) < 0)
                    operator delete(*(void **)(v55 + v56 - 32));
                  v56 -= 56;
                }
                while (v56);
              }
              *(_DWORD *)(v39 + 776) = 0;
              sub_22E3B89A8((unsigned __int8 **)&__src, v32, v29);
              v57 = (unsigned __int8 *)__src;
              if (!__src)
              {
                v57 = (unsigned __int8 *)sub_22E3B8AAC(__len);
                __src = v57;
              }
              v57[*v57 + 1] = 2;
              v58 = __src;
              v59 = *(unsigned __int8 *)__src;
              *(_BYTE *)__src = v59 + 1;
              v58[v59 + 2] = 2;
              memset(&v313, 0, sizeof(v313));
              v27 = v283;
              v60 = 0;
              v61 = 4 * v31 - 4;
              do
              {
                v61 += *(_QWORD *)(v33 + v60 + 8);
                v60 += 56;
              }
              while (56 * v31 != v60);
              std::string::reserve(&v313, v61);
              std::string::append(&v313, *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
              v62 = v33 + 56;
              do
              {
                std::string::append(&v313, "', '", 4uLL);
                v63 = *(const std::string::value_type **)v62;
                v64 = *(_QWORD *)(v62 + 8);
                v62 += 56;
                std::string::append(&v313, v63, v64);
              }
              while (v62 != v33 + 56 * v31);
              v65 = std::string::insert(&v313, 0, "{'");
              v66 = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              v67 = std::string::append(&__dst, "'}");
              v68 = v67->__r_.__value_.__r.__words[2];
              __p = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
              v304 = v68;
              v67->__r_.__value_.__l.__size_ = 0;
              v67->__r_.__value_.__r.__words[2] = 0;
              v67->__r_.__value_.__r.__words[0] = 0;
              if (v304 >= 0)
                p_p = &__p;
              else
                p_p = (__int128 *)__p;
              if (v304 >= 0)
                v70 = HIBYTE(v304) & 0x7F;
              else
                v70 = *((_QWORD *)&__p + 1);
              sub_22E3B89A8((unsigned __int8 **)&__src, p_p, v70);
              if (SHIBYTE(v304) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v313.__r_.__value_.__l.__data_);
              goto LABEL_94;
            }
            v34 = *(_DWORD *)(v28 + 16);
            v35 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v35 + 312) = v34;
            *(_DWORD *)(v35 + 316) = 1175;
            if (*(char *)(v35 + 311) < 0)
            {
              **(_BYTE **)(v35 + 288) = 0;
              *(_QWORD *)(v35 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v35 + 288) = 0;
              *(_BYTE *)(v35 + 311) = 0;
            }
            __src = (void *)(v35 + 320);
            *(_QWORD *)&__len = 0;
            *((_QWORD *)&__len + 1) = v35;
            LOWORD(v319.__r_.__value_.__l.__data_) = 1;
            *(_BYTE *)(v35 + 320) = 0;
            *(_DWORD *)(v35 + 664) = 0;
            v48 = *(unsigned int *)(v35 + 776);
            if ((_DWORD)v48)
            {
              v49 = *(_QWORD *)(v35 + 768);
              v50 = 56 * v48;
              do
              {
                if (*(char *)(v49 + v50 - 9) < 0)
                  operator delete(*(void **)(v49 + v50 - 32));
                v50 -= 56;
              }
              while (v50);
            }
            *(_DWORD *)(v35 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&__src, v32, v29);
            v51 = (unsigned __int8 *)__src;
            if (!__src)
            {
              v51 = (unsigned __int8 *)sub_22E3B8AAC(__len);
              __src = v51;
            }
            v51[*v51 + 1] = 2;
            v52 = __src;
            v53 = *(unsigned __int8 *)__src;
            *(_BYTE *)__src = v53 + 1;
            v52[v53 + 2] = 0;
            v46 = *(void **)v33;
            v47 = *(_QWORD *)(v33 + 8);
          }
          sub_22E3B89A8((unsigned __int8 **)&__src, v46, v47);
LABEL_94:
          sub_22E3BB0B8((uint64_t)&__src);
          goto LABEL_95;
        }
      }
    }
  }
LABEL_100:
  v73 = *(_DWORD *)(a1 + 848);
  v75 = a4;
  v74 = v287;
  if (v73)
  {
    if ((a4 & 1) == 0)
    {
      v76 = *(_QWORD *)(a1 + 1008);
      if (!v76 || !*(_BYTE *)(v76 + 177))
      {
        v77 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v77 + 312) = v73;
        *(_DWORD *)(v77 + 316) = 1114;
        if (*(char *)(v77 + 311) < 0)
        {
          **(_BYTE **)(v77 + 288) = 0;
          *(_QWORD *)(v77 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v77 + 288) = 0;
          *(_BYTE *)(v77 + 311) = 0;
        }
        v295[0] = v77 + 320;
        v295[1] = 0;
        v295[2] = v77;
        v296 = 1;
        *(_BYTE *)(v77 + 320) = 0;
        *(_DWORD *)(v77 + 664) = 0;
        v78 = *(unsigned int *)(v77 + 776);
        if ((_DWORD)v78)
        {
          v79 = *(_QWORD *)(v77 + 768);
          v80 = 56 * v78;
          do
          {
            if (*(char *)(v79 + v80 - 9) < 0)
              operator delete(*(void **)(v79 + v80 - 32));
            v80 -= 56;
          }
          while (v80);
        }
        *(_DWORD *)(v77 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v295);
        *(_QWORD *)(a1 + 840) = 0;
        *(_DWORD *)(a1 + 848) = 0;
      }
    }
  }
  v81 = *(_DWORD *)(a1 + 856);
  if (v81)
  {
    if ((a4 & 1) == 0)
    {
      v82 = *(_QWORD *)(a1 + 1008);
      if (!v82 || !*(_BYTE *)(v82 + 177))
      {
        if (*(_DWORD *)(a1 + 1000) == 1 && sub_22F4157AC((_QWORD *)a1))
        {
          *(_DWORD *)(a1 + 860) = v81;
        }
        else
        {
          v83 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v83 + 312) = v81;
          *(_DWORD *)(v83 + 316) = 1115;
          if (*(char *)(v83 + 311) < 0)
          {
            **(_BYTE **)(v83 + 288) = 0;
            *(_QWORD *)(v83 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v83 + 288) = 0;
            *(_BYTE *)(v83 + 311) = 0;
          }
          v293[0] = v83 + 320;
          v293[1] = 0;
          v293[2] = v83;
          v294 = 1;
          *(_BYTE *)(v83 + 320) = 0;
          *(_DWORD *)(v83 + 664) = 0;
          v84 = *(unsigned int *)(v83 + 776);
          if ((_DWORD)v84)
          {
            v85 = *(_QWORD *)(v83 + 768);
            v86 = 56 * v84;
            do
            {
              if (*(char *)(v85 + v86 - 9) < 0)
                operator delete(*(void **)(v85 + v86 - 32));
              v86 -= 56;
            }
            while (v86);
          }
          *(_DWORD *)(v83 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v293);
        }
        *(_DWORD *)(a1 + 856) = 0;
      }
    }
  }
  v87 = *(_QWORD *)(a1 + 1064);
  v88 = *(_QWORD *)(a1 + 1072);
  if (v87 == v88)
  {
LABEL_177:
    v126 = sub_22F415870(*(_QWORD *)(*(_QWORD *)(a1 + 1008) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 152));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 184) = v126;
    v127 = *(_QWORD *)(a1 + 1008);
    v128 = *(_DWORD *)(v127 + 184);
    *(_DWORD *)(a2 + 4) = v126 - v128;
    v129 = v128 - *(_DWORD *)(v127 + 144);
    v130 = *(_DWORD *)(v127 + 160);
    if (v130 < 0)
      v131 = sub_22F142B40(*(_QWORD *)(v127 + 8), v130, v129, (int)v126 - v128);
    else
      v131 = v130 + v129;
    *(_DWORD *)a2 = v131;
    *(_WORD *)(a2 + 16) = 1;
    *(_QWORD *)(v127 + 184) = v126;
    if (*(_QWORD *)(a1 + 752) && *(_DWORD *)(*(_QWORD *)(a1 + 1008) + 160) == *(_DWORD *)(a1 + 768))
      *(_DWORD *)a2 = v131 - 1;
    if (*(_DWORD *)(a1 + 740) == 1)
    {
      v265 = *(_QWORD *)(a1 + 32);
      v266 = *(char *)(v265 + 103) < 0 ? *(_QWORD *)(v265 + 88) : *(unsigned __int8 *)(v265 + 103);
      if (v266 && v87 == v88 && *(_DWORD *)(a1 + 2268))
      {
        v267 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v267 + 312) = *(_DWORD *)(*(_QWORD *)(a1 + 1008) + 160);
        *(_DWORD *)(v267 + 316) = 1167;
        if (*(char *)(v267 + 311) < 0)
        {
          **(_BYTE **)(v267 + 288) = 0;
          *(_QWORD *)(v267 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v267 + 288) = 0;
          *(_BYTE *)(v267 + 311) = 0;
        }
        __src = (void *)(v267 + 320);
        *(_QWORD *)&__len = 0;
        *((_QWORD *)&__len + 1) = v267;
        LOWORD(v319.__r_.__value_.__l.__data_) = 1;
        *(_BYTE *)(v267 + 320) = 0;
        *(_DWORD *)(v267 + 664) = 0;
        v268 = *(unsigned int *)(v267 + 776);
        if ((_DWORD)v268)
        {
          v269 = *(_QWORD *)(v267 + 768);
          v270 = 56 * v268;
          do
          {
            if (*(char *)(v269 + v270 - 9) < 0)
              operator delete(*(void **)(v269 + v270 - 32));
            v270 -= 56;
          }
          while (v270);
        }
        *(_DWORD *)(v267 + 776) = 0;
        v271 = *(_QWORD *)(a1 + 32);
        v274 = *(void **)(v271 + 80);
        v272 = v271 + 80;
        v273 = v274;
        v275 = *(_BYTE *)(v272 + 23);
        if (v275 >= 0)
          v276 = (void *)v272;
        else
          v276 = v273;
        v277 = *(_QWORD *)(v272 + 8);
        if (v275 >= 0)
          v278 = v275 & 0x7F;
        else
          v278 = v277;
        sub_22E3B89A8((unsigned __int8 **)&__src, v276, v278);
        v279 = (unsigned __int8 *)__src;
        if (!__src)
        {
          v279 = (unsigned __int8 *)sub_22E3B8AAC(__len);
          __src = v279;
        }
        v279[*v279 + 1] = 2;
        v280 = __src;
        v281 = *(unsigned __int8 *)__src;
        *(_BYTE *)__src = v281 + 1;
        v280[v281 + 2] = 0;
        sub_22E3BB0B8((uint64_t)&__src);
      }
    }
    if (!*(_BYTE *)(a1 + 736))
    {
      v132 = *(_QWORD *)(a1 + 1008);
      *(_QWORD *)(a1 + 1008) = 0;
      if (!v132 || ((*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132), !*(_BYTE *)(a1 + 736)))
        *(_QWORD *)(a1 + 1016) = 0;
    }
    if (!*(_DWORD *)(a1 + 740))
    {
      v219 = sub_22F415AD4((_DWORD *)(a1 + 1984));
      v220 = v219;
      v222 = v221;
      if ((*(_BYTE *)(a1 + 1984) & 1) != 0)
      {
        v223 = a1 + 1992;
        v224 = 32;
      }
      else
      {
        v223 = *(_QWORD *)(a1 + 1992);
        v224 = *(unsigned int *)(a1 + 2000);
      }
      v225 = (unsigned int *)(v223 + 4 * v224);
      if (v225 != v219)
      {
        do
        {
          v226 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v226 + 312) = *v220;
          *(_DWORD *)(v226 + 316) = 1273;
          if (*(char *)(v226 + 311) < 0)
          {
            **(_BYTE **)(v226 + 288) = 0;
            *(_QWORD *)(v226 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v226 + 288) = 0;
            *(_BYTE *)(v226 + 311) = 0;
          }
          v291[0] = v226 + 320;
          v291[1] = 0;
          v291[2] = v226;
          v292 = 1;
          *(_BYTE *)(v226 + 320) = 0;
          *(_DWORD *)(v226 + 664) = 0;
          v227 = *(unsigned int *)(v226 + 776);
          if ((_DWORD)v227)
          {
            v228 = *(_QWORD *)(v226 + 768);
            v229 = 56 * v227;
            do
            {
              if (*(char *)(v228 + v229 - 9) < 0)
                operator delete(*(void **)(v228 + v229 - 32));
              v229 -= 56;
            }
            while (v229);
          }
          *(_DWORD *)(v226 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v291);
          v230 = v220 + 1;
          while (v230 != v222)
          {
            v231 = *v230++;
            if (v231 <= 0xFFFFFFFD)
            {
              v220 = v230 - 1;
              goto LABEL_318;
            }
          }
          v220 = v222;
LABEL_318:
          ;
        }
        while (v220 != v225);
      }
    }
    v133 = sub_22F18E3E4(a1);
    if (!v133)
      return 1;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
    __dst.__r_.__value_.__l.__size_ = 0x400000000;
    sub_22F175574(v133, (uint64_t)&__dst);
    v134 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (LODWORD(__dst.__r_.__value_.__r.__words[1]))
    {
      v135 = __dst.__r_.__value_.__r.__words[0] + 8 * LODWORD(__dst.__r_.__value_.__r.__words[1]);
      v136 = ".h";
      v282 = v135;
      do
      {
        v288 = (char *)v134->__r_.__value_.__r.__words[0];
        sub_22E72D044(v134->__r_.__value_.__l.__data_, (uint64_t)&__p);
        v137 = sub_22F1E1A48(*(_QWORD *)(a1 + 88), v307);
        v138 = *(_QWORD **)(a1 + 88);
        v139 = v137;
        v140 = sub_22E49F3DC(v138, v137);
        if (v140)
        {
          v141 = *v140 & 0x7FFFFFFF;
          v142 = v141 + sub_22F1E37C0((uint64_t)v138, v139);
        }
        else
        {
          v142 = 0;
        }
        if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32), 0x561u, v142, *(_QWORD *)(a1 + 48)) != 1)
        {
          v143 = *(_QWORD *)(a1 + 104);
          sub_22F1D8DAC((uint64_t)v288, (uint64_t)&__src);
          v290 = v320;
          if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v319.__r_.__value_.__l.__data_);
          v286 = v142;
          if (SHIBYTE(__len) < 0)
            operator delete(__src);
          v144 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          v302.__val_ = 0;
          v302.__cat_ = std::system_category();
          v145 = *(void **)v290;
          v146 = *(_QWORD *)(v290 + 8);
          LOWORD(v319.__r_.__value_.__r.__words[1]) = 261;
          __src = v145;
          *(_QWORD *)&__len = v146;
          MEMORY[0x23489E97C](v299, v144, &__src, &v302);
          if (v300 && !v302.__val_)
          {
            v147 = v143 + 488;
            v284 = v147;
            while (2)
            {
              __src = (void *)llvm::sys::path::extension();
              *(_QWORD *)&__len = v148;
              WORD4(__len) = 0;
              v150 = sub_22E72DCE4((uint64_t)&__src, v136, 2, ".H", 2, ".hh", 3, v149, ".hpp", 4, 1);
              if (*(_BYTE *)(v150 + 17))
                v151 = *(_BYTE *)(v150 + 16) == 0;
              else
                v151 = 1;
              if (v151)
                goto LABEL_260;
              v152 = v136;
              v153 = *(_QWORD *)(*(_QWORD *)(v300 + 8) - 16);
              v156 = *(const void **)(v153 + 8);
              v154 = v153 + 8;
              v155 = v156;
              v157 = *(_BYTE *)(v154 + 23);
              if (v157 >= 0)
                v158 = (const void *)v154;
              else
                v158 = v155;
              v159 = *(_QWORD *)(v154 + 8);
              if (v157 >= 0)
                v160 = v157 & 0x7F;
              else
                v160 = v159;
              sub_22F1D07D8(*(_QWORD *)(a1 + 80), v158, v160, 0, 1, (uint64_t)&v321);
              if ((v322 & 1) != 0)
                goto LABEL_259;
              v161 = *(_QWORD *)(a1 + 88);
              v162 = v321;
              __src = v321;
              v313.__r_.__value_.__r.__words[0] = 0;
              if (sub_22F25AFD8((uint64_t *)(v161 + 120), &__src, &v313))
              {
                v163 = v313.__r_.__value_.__r.__words[0];
                v164 = *(_QWORD *)(v161 + 120);
                v165 = *(unsigned int *)(v161 + 136);
              }
              else
              {
                v164 = *(_QWORD *)(v161 + 120);
                v165 = *(unsigned int *)(v161 + 136);
                v163 = v164 + 16 * v165;
              }
              if (v163 != v164 + 16 * v165 || (sub_22F158954(v147, v162, 0) & 1) != 0)
                goto LABEL_259;
              __src = &v319;
              v166 = *(_QWORD *)(a1 + 80);
              __len = xmmword_22F44E310;
              v167 = (char **)v162[5];
              v168 = (unint64_t)v167[1];
              if (v168)
              {
                v169 = *v167;
                v170 = (unint64_t)v167[1];
                v171 = *v167;
                while (1)
                {
                  sub_22F1D0728(v166, v171, v170, 1, (uint64_t)&v323);
                  if ((v324 & 1) == 0 && v323 == v290)
                    break;
                  v171 = (char *)llvm::sys::path::parent_path();
                  v170 = v172;
                  if (!v172)
                    goto LABEL_223;
                }
                v181 = 0;
                if (v168 >= v170)
                  v182 = v170;
                else
                  v182 = v168;
                v183 = &v169[v182];
                *(_QWORD *)&__len = 0;
                v184 = v168 - v182;
                if (*((_QWORD *)&__len + 1) < v168 - v182)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v181 = __len;
                }
                if (v168 > v170)
                {
                  memcpy((char *)__src + v181, v183, v184);
                  v181 = __len;
                }
                *(_QWORD *)&__len = v181 + v184;
                v185 = v162[11];
                do
                {
                  v186 = *(_QWORD *)(v185 + 8);
                  if ((v186 & 2) == 0)
                    break;
                  v185 = v186 & 0xFFFFFFFFFFFFFFFCLL;
                }
                while (v185);
                v187 = llvm::sys::path::filename();
                v315 = 261;
                v313.__r_.__value_.__r.__words[0] = v187;
                v313.__r_.__value_.__l.__size_ = v188;
                v312 = 257;
                v309 = 257;
                v308 = 257;
                llvm::sys::path::append();
LABEL_241:
                v189 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v189 + 312) = v286;
                *(_DWORD *)(v189 + 316) = 1377;
                if (*(char *)(v189 + 311) < 0)
                {
                  **(_BYTE **)(v189 + 288) = 0;
                  *(_QWORD *)(v189 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v189 + 288) = 0;
                  *(_BYTE *)(v189 + 311) = 0;
                }
                *(_OWORD *)&v313.__r_.__value_.__l.__data_ = v189 + 320;
                v313.__r_.__value_.__r.__words[2] = v189;
                v314 = 1;
                *(_BYTE *)(v189 + 320) = 0;
                *(_DWORD *)(v189 + 664) = 0;
                v190 = *(unsigned int *)(v189 + 776);
                if ((_DWORD)v190)
                {
                  v191 = *(_QWORD *)(v189 + 768);
                  v192 = 56 * v190;
                  do
                  {
                    if (*(char *)(v191 + v192 - 9) < 0)
                      operator delete(*(void **)(v191 + v192 - 32));
                    v192 -= 56;
                  }
                  while (v192);
                }
                *(_DWORD *)(v189 + 776) = 0;
                sub_22F1D8A24((uint64_t *)v288, 0, v310);
                if (v311 >= 0)
                  v193 = v310;
                else
                  v193 = (void **)v310[0];
                if (v311 >= 0)
                  v194 = v311 & 0x7F;
                else
                  v194 = (size_t)v310[1];
                sub_22E3B89A8((unsigned __int8 **)&v313, v193, v194);
                sub_22E3B89A8((unsigned __int8 **)&v313, __src, __len);
                if (v311 < 0)
                  operator delete(v310[0]);
                sub_22E3BB0B8((uint64_t)&v313);
                v135 = v282;
                v147 = v284;
                if (__src != &v319)
                  free(__src);
LABEL_259:
                v136 = v152;
LABEL_260:
                llvm::vfs::recursive_directory_iterator::increment((llvm::vfs::recursive_directory_iterator *)v299, &v302);
                if (!v300 || v302.__val_)
                  goto LABEL_264;
                continue;
              }
              break;
            }
LABEL_223:
            v173 = v162[11];
            do
            {
              v174 = (size_t *)v173;
              v175 = *(_QWORD *)(v173 + 8);
              if ((v175 & 2) == 0)
                break;
              v173 = v175 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while (v173);
            v178 = *v174;
            v176 = v174 + 4;
            v177 = v178;
            *(_QWORD *)&__len = 0;
            if (*((_QWORD *)&__len + 1) < v178)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v179 = __len;
LABEL_228:
              memcpy((char *)__src + v179, v176, v177);
              v180 = __len;
            }
            else
            {
              v179 = 0;
              v180 = 0;
              if (v177)
                goto LABEL_228;
            }
            *(_QWORD *)&__len = v180 + v177;
            goto LABEL_241;
          }
LABEL_264:
          v195 = v301;
          if (v301)
          {
            p_shared_owners = (unint64_t *)&v301->__shared_owners_;
            do
              v197 = __ldaxr(p_shared_owners);
            while (__stlxr(v197 - 1, p_shared_owners));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
        }
        if (v306 < 0)
          operator delete(v305);
        if (SHIBYTE(v304) < 0)
          operator delete((void *)__p);
        v134 = (std::string *)((char *)v134 + 8);
      }
      while (v134 != (std::string *)v135);
      v134 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (v134 != (std::string *)&__dst.__r_.__value_.__r.__words[2])
      free(v134);
    return 1;
  }
  if (*(_QWORD *)(a1 + 752))
  {
    v89 = *(_QWORD *)(a1 + 1016);
    if (v89)
    {
      v90 = sub_22E49F3DC(*(_QWORD **)(a1 + 88), *(_DWORD *)(v89 + 16));
      v91 = v90 ? *v90 & 0x7FFFFFFF : 0;
      if (v91 == *(_DWORD *)(a1 + 768))
      {
        *(_DWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v92 = *(_QWORD *)(a1 + 1008);
        v93 = *(_QWORD *)(v92 + 152);
        v94 = *(_DWORD *)(v92 + 184);
        *(_DWORD *)(a2 + 4) = v93 - v94;
        v95 = v94 - *(_DWORD *)(v92 + 144);
        v96 = *(_DWORD *)(v92 + 160);
        if (v96 < 0)
          v97 = sub_22F142B40(*(_QWORD *)(v92 + 8), v96, v95, (int)v93 - v94);
        else
          v97 = v96 + v95;
        *(_DWORD *)a2 = v97;
        *(_WORD *)(a2 + 16) = 1;
        *(_QWORD *)(v92 + 184) = v93;
        v98 = *(_QWORD *)(a1 + 1008);
        *(_QWORD *)(a1 + 1008) = 0;
        if (v98)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
          v99 = *(_QWORD *)(a1 + 1008);
          *(_QWORD *)(a1 + 1016) = 0;
          if (v99)
          {
            if (*(_QWORD *)(v99 + 224))
              v100 = 3;
            else
              v100 = 0;
LABEL_280:
            *(_DWORD *)(a1 + 1048) = v100;
            return 1;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 1016) = 0;
        }
        if (*(_QWORD *)(a1 + 1040))
        {
          v74 = 1;
          *(_DWORD *)(a1 + 1048) = 1;
          return v74;
        }
        v100 = 2;
        goto LABEL_280;
      }
    }
  }
  if ((a4 & 1) != 0)
    goto LABEL_154;
  v101 = *(_QWORD *)(a1 + 1016);
  if (!v101)
    goto LABEL_154;
  v102 = sub_22E49F3DC(*(_QWORD **)(a1 + 88), *(_DWORD *)(v101 + 16));
  if (v102 && v102[2])
  {
    v103 = *(_QWORD *)(a1 + 1016);
    v104 = *(_DWORD *)(v103 + 16);
  }
  else
  {
    v104 = *(_DWORD *)(a1 + 2264);
    if (!v104)
      goto LABEL_151;
    v103 = *(_QWORD *)(a1 + 1016);
    v105 = *(_DWORD *)(v103 + 16);
    if (v105 != v104)
    {
LABEL_153:
      v111 = v104 == v105;
      goto LABEL_155;
    }
  }
  v106 = *(_QWORD *)(a1 + 88);
  v107 = *(_DWORD *)(v106 + 192);
  v108 = *(_DWORD *)(v103 + 20);
  v109 = sub_22E49F3DC((_QWORD *)v106, v104);
  if (v109)
    v109[3] = v109[3] & 0x80000000 | (v107 - v108 + 1) & 0x7FFFFFFF;
LABEL_151:
  v110 = *(_QWORD *)(a1 + 1016);
  if (v110)
  {
    v105 = *(_DWORD *)(v110 + 16);
    v104 = *(_DWORD *)(a1 + 2264);
    goto LABEL_153;
  }
LABEL_154:
  v105 = 0;
  v111 = 0;
LABEL_155:
  if (v287)
  {
    v199 = sub_22F1750EC(a1, 0);
    v200 = sub_22F415870(*(_QWORD *)(*(_QWORD *)(a1 + 1008) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 152));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 184) = v200;
    v201 = *(_QWORD *)(a1 + 1008);
    v202 = *(_DWORD *)(v201 + 184);
    *(_DWORD *)(a2 + 4) = v200 - v202;
    v203 = v202 - *(_DWORD *)(v201 + 144);
    v204 = *(_DWORD *)(v201 + 160);
    if (v204 < 0)
      v205 = sub_22F142B40(*(_QWORD *)(v201 + 8), v204, v203, (int)v200 - v202);
    else
      v205 = v204 + v203;
    *(_DWORD *)a2 = v205;
    *(_WORD *)(a2 + 16) = 438;
    *(_QWORD *)(v201 + 184) = v200;
    *(_DWORD *)(a2 + 4) = v205;
    *(_QWORD *)(a2 + 8) = v199;
    v75 = a4;
    v74 = v287;
  }
  v112 = *(_QWORD *)(a1 + 1016);
  if (v112 && *(_DWORD *)(a1 + 740) == 1)
  {
    v262 = *(_QWORD *)(a1 + 32);
    if (*(char *)(v262 + 103) < 0)
      v263 = *(_QWORD *)(v262 + 88);
    else
      v263 = *(unsigned __int8 *)(v262 + 103);
    if (v263 && *(_DWORD *)(a1 + 2268))
    {
      v264 = sub_22E6155EC(*(_QWORD **)(a1 + 88), *(_DWORD *)(v112 + 16));
      v113 = sub_22E6155EC(*(_QWORD **)(a1 + 88), *(_DWORD *)(a1 + 2268)) == v264;
    }
    else
    {
      v113 = 0;
    }
    v75 = a4;
    v74 = v287;
  }
  else
  {
    v113 = 0;
  }
  sub_22F1754E8(a1);
  v114 = *(_QWORD *)(a1 + 1040);
  if (v114)
  {
    v115 = *(_BYTE *)(v114 + 64) & 0xFE | *(_BYTE *)(a2 + 18) & 1;
    *(_BYTE *)(v114 + 64) = v115;
    *(_BYTE *)(v114 + 64) = *(_BYTE *)(a2 + 18) & 2 | v115 & 0xFD;
  }
  else
  {
    v116 = *(_BYTE **)(a1 + 1008);
    if (v116)
    {
      v117 = *(_BYTE *)(a2 + 18);
      v116[192] = v117 & 1;
      v116[194] = (v117 & 2) != 0;
      v116[195] = (v117 & 0x10) != 0;
    }
  }
  if (*(_QWORD *)(a1 + 1088))
  {
    if ((v75 & 1) == 0)
    {
      v118 = *(_QWORD *)(a1 + 1016);
      if (v118)
      {
        v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 32))(v118);
        v120 = v119;
        v121 = sub_22F1E361C(*(_QWORD **)(a1 + 88), v119);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _DWORD *, _QWORD))(**(_QWORD **)(a1 + 1088) + 16))(*(_QWORD *)(a1 + 1088), v120, 1, v121, v105);
        v122 = v121;
        v75 = a4;
        v74 = v287;
        (*(void (**)(_QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 1088) + 24))(*(_QWORD *)(a1 + 1088), *(unsigned int *)(*(_QWORD *)(a1 + 1016) + 16), 1, v122, v105, v120);
      }
    }
  }
  v123 = *(_QWORD *)(a1 + 1096);
  if (v123 && v105)
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v123 + 48))(v123, a1, v105);
  if (v111)
  {
    sub_22F4184D4(a1);
    v206 = *(_DWORD *)(a1 + 860);
    if (v206)
      *(_DWORD *)(a1 + 856) = v206;
  }
  if ((v75 & 1) == 0)
  {
    v124 = *(_QWORD *)(a1 + 1016);
    v125 = !v113;
    if (!v124)
      v125 = 1;
    if ((v125 & 1) == 0 && ((sub_22F4157AC((_QWORD *)a1) & 1) != 0 || *(_DWORD *)(v124 + 16) == *(_DWORD *)(a1 + 2264)))
      goto LABEL_177;
  }
  return v74;
}

unint64_t sub_22F1750EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  char v11;
  const void *v12;
  size_t v13;
  const void *v14;
  char v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  unsigned int v21;
  const void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[64];
  const void *v51;
  uint64_t v52;

  v2 = *(unsigned int *)(a1 + 1240);
  if (!(_DWORD)v2)
    return 0;
  v5 = *(_QWORD *)(a1 + 1232) + 32 * v2;
  if (*(unsigned __int8 *)(v5 - 20) != (_DWORD)a2)
    return 0;
  v6 = *(_QWORD *)(v5 - 32);
  v7 = *(unsigned int *)(v5 - 24);
  v8 = *(_QWORD *)(a1 + 56);
  if ((*(_QWORD *)(v8 + 20) & 0x200000000000000) == 0)
  {
    if ((*(_BYTE *)(v8 + 240) & 0xE0) == 0)
      goto LABEL_21;
    v9 = *(_QWORD *)(v5 - 32);
    do
    {
      v10 = (const void **)v9;
      v9 = *(_QWORD *)(v9 + 32);
    }
    while (v9);
    v11 = *((_BYTE *)v10 + 23);
    if (v11 >= 0)
      v12 = v10;
    else
      v12 = *v10;
    if (v11 >= 0)
      v13 = v11 & 0x7F;
    else
      v13 = (size_t)v10[1];
    v14 = (const void *)(v8 + 496);
    v15 = *(_BYTE *)(v8 + 519);
    v17 = *(const void **)(v8 + 496);
    v16 = *(_QWORD *)(v8 + 504);
    if (v15 >= 0)
      v18 = v14;
    else
      v18 = v17;
    if (v15 >= 0)
      v16 = v15 & 0x7F;
    if (v13 != v16 || v13 && memcmp(v12, v18, v13))
    {
LABEL_21:
      *(_DWORD *)(a1 + 1240) = v2 - 1;
      v19 = *(_QWORD *)(a1 + 1088);
      if (v19)
        (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 56))(v19, v6, v7, a2);
      sub_22F190280(a1, v6, v7);
      return v6;
    }
  }
  v46 = v50;
  v47 = v50;
  v48 = 8;
  v49 = 0;
  v21 = *(_DWORD *)(v5 - 8);
  if (*(_DWORD *)(a1 + 1696) == v21)
    goto LABEL_83;
  v45 = v7;
  do
  {
    v22 = *(const void **)(*(_QWORD *)(a1 + 1688) + 8 * v21);
    sub_22E3BA850((uint64_t)&v46, v22);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 1584);
      v51 = v22;
      v52 = 0;
      v25 = (sub_22E3B9914(v24, &v51, &v52) & 1) != 0 ? v52 : *(_QWORD *)v24 + 16 * *(unsigned int *)(v24 + 16);
      v26 = *(_QWORD *)(a1 + 1584);
      if (v25 != *(_QWORD *)v26 + 16 * *(unsigned int *)(v26 + 16))
      {
        v27 = (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200000000000000) != 0 ? a1 + 1528 : *(_QWORD *)(v5 - 16);
        v28 = !v27 || v27 == v26;
        if (v28
          || ((v51 = v22, v52 = 0, !sub_22E3B9914(v27, &v51, &v52))
            ? (v30 = *(unsigned int *)(v27 + 16), v29 = *(_QWORD *)v27 + 16 * v30)
            : (v29 = v52, v30 = *(unsigned int *)(v27 + 16)),
              v29 == *(_QWORD *)v27 + 16 * v30))
        {
          v32 = 0;
        }
        else
        {
          v31 = *(_QWORD *)(v29 + 8);
          v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
          if ((v31 & 4) != 0 && v32)
            v32 = (_QWORD *)*v32;
        }
        v33 = (_QWORD *)(v25 + 8);
        v34 = (*(_QWORD *)(v25 + 8) & 4) == 0;
        v35 = (unint64_t *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v35)
          v34 = 1;
        v36 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v34)
          v36 = *v35;
        if ((_QWORD *)v36 != v32)
        {
          v37 = 0;
          while (1)
          {
            v38 = *(_BYTE *)(v36 + 12);
            if (!v36 || (v38 & 3) != 2)
              break;
            if ((((v38 & 8) == 0) & ~v37) == 0)
            {
              v36 = *(_QWORD *)v36;
              v37 = 1;
              if ((_QWORD *)v36 != v32)
                continue;
            }
            goto LABEL_76;
          }
          if (!v36 || (v38 & 3) != 0)
          {
            LOBYTE(v52) = 0;
          }
          else
          {
            v39 = *(_QWORD *)(v36 + 16);
            LOBYTE(v52) = 0;
            if (v39)
            {
              if (v34 || (v40 = v35[3], v40 < 8))
              {
                v41 = 0;
                v42 = 0;
LABEL_74:
                sub_22F17633C(a1, v6, (uint64_t)v22, v39, v41, v42, (char *)&v52);
                goto LABEL_75;
              }
LABEL_71:
              if ((v40 & 4) != 0)
              {
                v41 = *(uint64_t **)(v40 & 0xFFFFFFFFFFFFFFF8);
                v42 = *(unsigned int *)((v40 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                v41 = (uint64_t *)(v35 + 3);
                v42 = 1;
              }
              goto LABEL_74;
            }
          }
          if (v34 || (v40 = v35[3], v40 < 8) || (v40 & 4) != 0 && !*(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 8))
          {
LABEL_75:
            if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200000000000000) == 0)
            {
              if ((*v33 & 4) != 0 && (v43 = (_QWORD *)(*v33 & 0xFFFFFFFFFFFFFFF8)) != 0)
                *v43 = 0;
              else
                *v33 = 0;
              sub_22F4158B8((uint64_t *)(v25 + 8), a1, 0, 0);
            }
            goto LABEL_76;
          }
          v39 = 0;
          goto LABEL_71;
        }
      }
    }
LABEL_76:
    ++v21;
  }
  while (*(_DWORD *)(a1 + 1696) != v21);
  v21 = *(_DWORD *)(v5 - 8);
  v7 = v45;
LABEL_83:
  sub_22F415C6C(a1 + 1688, v21);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200000000000000) != 0)
    *(_QWORD *)(a1 + 1584) = *(_QWORD *)(v5 - 16);
  --*(_DWORD *)(a1 + 1240);
  v44 = *(_QWORD *)(a1 + 1088);
  if (v44)
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 56))(v44, v6, v7, a2);
  sub_22F190280(a1, v6, v7);
  if (v47 != v46)
    free(v47);
  return v6;
}

uint64_t sub_22F1754E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 1040);
  if (v1)
  {
    v3 = *(unsigned int *)(a1 + 2276);
    if ((_DWORD)v3 == 8)
    {
      v6 = a1;
      *(_QWORD *)(a1 + 1040) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 2276) = v3 + 1;
      v4 = a1 + 8 * v3;
      *(_QWORD *)(a1 + 1040) = 0;
      v5 = *(_QWORD *)(v4 + 2280);
      *(_QWORD *)(v4 + 2280) = v1;
      if (!v5)
        return sub_22F1756F8(a1);
      v6 = a1;
      v1 = v5;
    }
    sub_22F192684(v1);
    MEMORY[0x2348A0E9C](v1, 0x1060C40B318AEC2);
    a1 = v6;
  }
  return sub_22F1756F8(a1);
}

void sub_22F175574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  sub_22E72D044((char *)a1, (uint64_t)&v9);
  v4 = v13;
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = a1;
    ++*(_DWORD *)(a2 + 8);
  }
  v7 = *(uint64_t **)(a1 + 200);
  v6 = *(uint64_t **)(a1 + 208);
  while (v7 != v6)
  {
    v8 = *v7++;
    sub_22F175574(v8, a2);
  }
}

uint64_t sub_22F17562C(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 2752);
  if (*(_QWORD *)(a1 + 2744) != v4 && *(_QWORD *)(v4 - 16) == *(_QWORD *)(a1 + 1040))
  {
    sub_22F17C0FC(a1 + 2344, *(_QWORD *)(v4 - 8));
    *(_QWORD *)(a1 + 2752) -= 16;
  }
  v5 = *(unsigned int *)(a1 + 2276);
  if ((_DWORD)v5 == 8)
  {
    v8 = *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1040) = 0;
    if (!v8)
      return sub_22F173830(a1, a2, 0, 1);
LABEL_8:
    sub_22F192684(v8);
    MEMORY[0x2348A0E9C](v8, 0x1060C40B318AEC2);
    return sub_22F173830(a1, a2, 0, 1);
  }
  *(_DWORD *)(a1 + 2276) = v5 + 1;
  v6 = a1 + 8 * v5;
  v7 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = 0;
  v8 = *(_QWORD *)(v6 + 2280);
  *(_QWORD *)(v6 + 2280) = v7;
  if (v8)
    goto LABEL_8;
  return sub_22F173830(a1, a2, 0, 1);
}

uint64_t sub_22F1756F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 1072);
  v3 = *(_QWORD *)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  v4 = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(v5 - 32);
  v6 = *(_QWORD *)(v5 - 24);
  *(_QWORD *)(v5 - 24) = 0;
  v7 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = v6;
  if (v7)
  {
    sub_22F192684(v7);
    MEMORY[0x2348A0E9C](v7, 0x1060C40B318AEC2);
  }
  v8 = *(_QWORD *)(a1 + 1072);
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(v8 - 16);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(v8 - 48);
  v9 = v8 - 56;
  *(_DWORD *)(a1 + 1048) = *(_DWORD *)(v8 - 56);
  v10 = *(_QWORD *)(v8 - 24);
  *(_QWORD *)(v8 - 24) = 0;
  if (v10)
  {
    v14 = v8 - 56;
    v15 = v8;
    v12 = v10;
    sub_22F192684(v10);
    v13 = v12;
    v9 = v14;
    MEMORY[0x2348A0E9C](v13, 0x1060C40B318AEC2);
    v8 = v15;
  }
  result = *(_QWORD *)(v8 - 40);
  *(_QWORD *)(v8 - 40) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_QWORD *)(a1 + 1072) = v9;
  return result;
}

uint64_t sub_22F175808(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  int v8;

  v4 = *(_QWORD *)(a1 + 1072);
  while (v4 != *(_QWORD *)(a1 + 1064))
  {
    v5 = *(_QWORD *)(v4 - 32);
    v4 -= 56;
    if (v5)
    {
      *(_BYTE *)(v5 + 26) = 1;
      v6 = *(_BYTE *)(v5 + 24) != 0;
      *(_BYTE *)(v5 + 24) = 1;
      goto LABEL_6;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_6:
  result = sub_22F17562C(a1, a2);
  if ((result & 1) == 0)
    result = sub_22F18FB4C(a1, a2);
  v8 = *(unsigned __int16 *)(a2 + 16);
  if ((v8 - 1) >= 2)
  {
    do
    {
      result = sub_22F18FB4C(a1, a2);
      v8 = *(unsigned __int16 *)(a2 + 16);
    }
    while ((v8 - 1) > 1);
  }
  if (v8 == 2)
  {
    *(_BYTE *)(v5 + 26) = 0;
    if (!v6)
    {
      *(_BYTE *)(v5 + 24) = 0;
      return sub_22F18FB4C(a1, a2);
    }
  }
  return result;
}

uint64_t sub_22F1758E4(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t **v18;
  char v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59[4];

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200000000000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 1584);
    v9 = *(_DWORD *)(a1 + 1696);
    v51 = a2;
    LODWORD(v52) = a3;
    BYTE4(v52) = a4;
    v53 = v8;
    v54 = v9;
    v10 = (_OWORD *)sub_22E5C425C(a1 + 1232, (unint64_t)&v51);
    v11 = (_OWORD *)(*(_QWORD *)(a1 + 1232) + 32 * *(unsigned int *)(a1 + 1240));
    v12 = v10[1];
    *v11 = *v10;
    v11[1] = v12;
    ++*(_DWORD *)(a1 + 1240);
    result = *(_QWORD *)(a1 + 1088);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)result + 48))(result, a2, a3, a4);
    return result;
  }
  v14 = (uint64_t *)(*(_QWORD *)(a1 + 104) + 488);
  sub_22F41337C(v14, (uint64_t)a2, 0);
  sub_22F412548(v14, a2, 0);
  sub_22F15A5B8(v14, (uint64_t)a2, 0);
  v48 = 0u;
  v51 = a2;
  v52 = 0;
  v46 = 0;
  v53 = 0;
  v47 = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v49 = 0uLL;
  v58 = 0;
  v50 = 1;
  v15 = *(uint64_t **)(a1 + 1512);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v16 = v15;
        v17 = v15[4];
        if (v17 <= (unint64_t)a2)
          break;
        v15 = (uint64_t *)*v16;
        v18 = (uint64_t **)v16;
        if (!*v16)
          goto LABEL_55;
      }
      if (v17 >= (unint64_t)a2)
        break;
      v15 = (uint64_t *)v16[1];
      if (!v15)
      {
        v18 = (uint64_t **)(v16 + 1);
        goto LABEL_55;
      }
    }
    v19 = 1;
  }
  else
  {
    v18 = (uint64_t **)(a1 + 1512);
    v16 = (uint64_t *)(a1 + 1512);
LABEL_55:
    sub_22F415B48((uint64_t)v59, a1 + 1504, (uint64_t)&v51);
    v44 = (uint64_t *)v59[0];
    *(_QWORD *)v59[0] = 0;
    v44[1] = 0;
    v44[2] = (uint64_t)v16;
    *v18 = v44;
    v45 = **(_QWORD **)(a1 + 1504);
    if (v45)
    {
      *(_QWORD *)(a1 + 1504) = v45;
      v44 = *v18;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 1512), v44);
    v19 = 0;
    ++*(_QWORD *)(a1 + 1520);
    v16 = (uint64_t *)v59[0];
  }
  sub_22F175D04((uint64_t)&v52);
  sub_22F175D04((uint64_t)&v46);
  v20 = v16 + 5;
  if ((v19 & 1) == 0)
  {
    v21 = *(_QWORD *)(a1 + 1528);
    v22 = *(unsigned int *)(a1 + 1544);
    v23 = (uint64_t *)(v21 + 16 * v22);
    if (*(_DWORD *)(a1 + 1536))
    {
      if ((_DWORD)v22)
      {
        v24 = 16 * v22;
        v25 = *(uint64_t **)(a1 + 1528);
        while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v25 += 2;
          v24 -= 16;
          if (!v24)
            goto LABEL_19;
        }
      }
      else
      {
        v25 = *(uint64_t **)(a1 + 1528);
      }
    }
    else
    {
LABEL_19:
      v25 = (uint64_t *)(v21 + 16 * v22);
    }
    v26 = (uint64_t *)(v21 + 16 * v22);
    while (v25 != v26)
    {
      v27 = v25[1];
      v28 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 4) != 0 && v28)
      {
        v29 = *v28;
        v32 = v28[3];
        v30 = v28 + 3;
        v31 = v32;
        if (v29)
        {
          v59[0] = v29 & 0xFFFFFFFFFFFFFFFBLL;
          if (v31 >= 8)
          {
            v33 = v31 & 4;
            goto LABEL_41;
          }
          v30 = 0;
          v35 = 0;
LABEL_44:
          sub_22F4158B8(v59, a1, v30, v35);
          v46 = *v25;
          v47 = v59[0];
          v59[0] = 0;
          sub_22F415BD8(v20, &v46, &v47, (uint64_t)&v51);
          if ((v47 & 4) != 0)
          {
            v37 = v47 & 0xFFFFFFFFFFFFFFF8;
            if ((v47 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              sub_22E8BB820((_QWORD *)(v37 + 24));
              sub_22E8BB820((_QWORD *)(v37 + 8));
            }
          }
          if ((v59[0] & 4) != 0)
          {
            v38 = v59[0] & 0xFFFFFFFFFFFFFFF8;
            if ((v59[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              sub_22E8BB820((_QWORD *)(v38 + 24));
              sub_22E8BB820((_QWORD *)(v38 + 8));
            }
          }
          goto LABEL_30;
        }
        if (v31 >= 8 && ((v31 & 4) == 0 || *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 8)))
        {
          v33 = v31 & 4;
          v59[0] = 0;
LABEL_41:
          if (v33)
          {
            v36 = v31 & 0xFFFFFFFFFFFFFFF8;
            v30 = *(uint64_t **)v36;
            v35 = *(unsigned int *)(v36 + 8);
          }
          else
          {
            v35 = 1;
          }
          goto LABEL_44;
        }
      }
      else if (v28)
      {
        v35 = 0;
        v59[0] = v27 & 0xFFFFFFFFFFFFFFF8;
        v30 = 0;
        goto LABEL_44;
      }
LABEL_30:
      v34 = v25 + 2;
      v25 = v23;
      if (v34 != v23)
      {
        v25 = v34;
        while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v25 += 2;
          if (v25 == v23)
          {
            v25 = v23;
            break;
          }
        }
      }
    }
  }
  v39 = *(_QWORD *)(a1 + 1584);
  v40 = *(_DWORD *)(a1 + 1696);
  v51 = a2;
  LODWORD(v52) = a3;
  BYTE4(v52) = a4;
  v53 = v39;
  v54 = v40;
  v41 = (_OWORD *)sub_22E5C425C(a1 + 1232, (unint64_t)&v51);
  v42 = (_OWORD *)(*(_QWORD *)(a1 + 1232) + 32 * *(unsigned int *)(a1 + 1240));
  v43 = v41[1];
  *v42 = *v41;
  v42[1] = v43;
  ++*(_DWORD *)(a1 + 1240);
  result = *(_QWORD *)(a1 + 1088);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)result + 48))(result, a2, a3, a4);
  *(_QWORD *)(a1 + 1584) = v20;
  if ((v19 & 1) == 0)
    return sub_22F190280(a1, (unint64_t)a2, a3);
  return result;
}

uint64_t sub_22F175D04(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_22F175D50((_QWORD *)a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

_QWORD *sub_22F175D50(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *v3;
        if ((*v3 & 4) != 0)
        {
          v5 = v4 & 0xFFFFFFFFFFFFFFF8;
          if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            sub_22E8BB820((_QWORD *)(v5 + 24));
            result = sub_22E8BB820((_QWORD *)(v5 + 8));
          }
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_22F175DC8(uint64_t *result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t **v14;
  unint64_t v15;

  if (a3 == a4)
    return result;
  v6 = result;
  v7 = *result;
  if ((*result & 4) == 0)
  {
    v8 = (a2 - (uint64_t)result) >> 3;
    if (v7 >= 8)
    {
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      v10 = operator new();
      *(_QWORD *)v10 = v10 + 16;
      *(_QWORD *)(v10 + 8) = 0x400000000;
      *v6 = v10 | 4;
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      v12 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v12 >= *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v15 = v10 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
        v12 = *(_DWORD *)(v15 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v9;
      ++*(_DWORD *)(v11 + 8);
      v7 = *v6;
      goto LABEL_12;
    }
LABEL_8:
    if (a3 + 1 == a4)
    {
      *result = *a3 & 0xFFFFFFFFFFFFFFFBLL;
      return result;
    }
    v13 = operator new();
    *(_QWORD *)v13 = v13 + 16;
    *(_QWORD *)(v13 + 8) = 0x400000000;
    v7 = v13 | 4;
    *v6 = v13 | 4;
    goto LABEL_12;
  }
  v8 = (a2 - *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8)) >> 3;
  if (v7 <= 7)
    goto LABEL_8;
LABEL_12:
  v14 = (uint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v6 = *v14;
  return (uint64_t *)sub_22F415978((uint64_t)v14, (uint64_t)&v6[v8], a3, a4);
}

unint64_t sub_22F175F40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(a2 + 3) & 4) == 0)
    return 0;
  v3 = *(_QWORD *)(a1 + 1584);
  v7 = a2;
  v8 = 0;
  v4 = (sub_22E3B9914(v3, &v7, &v8) & 1) != 0 ? v8 : *(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 16);
  if (v4 == **(_QWORD **)(a1 + 1584) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 1584) + 16))
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  result = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
  {
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

uint64_t sub_22F175FD4(uint64_t a1, llvm *a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  llvm *v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  llvm *v39;
  llvm *v40;
  uint64_t v41;

  v39 = a2;
  v5 = sub_22E6D72B8(*(_DWORD **)(a1 + 1584), &v39);
  v7 = v5[1];
  v6 = v5 + 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0 && v8)
  {
    v31 = (_QWORD *)*v8;
    *v8 = a3;
    v8 = v31;
  }
  else
  {
    *v6 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *a3 = (uint64_t)v8;
  v9 = sub_22E6D7534(v6, a1, v39);
  if (!v9)
    goto LABEL_23;
  v10 = v9;
  v12 = (unint64_t *)(v9 + 24);
  v11 = *(_QWORD *)(v9 + 24);
  if ((v11 & 4) != 0)
    v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    v13 = (uint64_t)&v12[v11 > 7];
  v15 = (unint64_t *)(v9 + 8);
  v14 = *(_QWORD *)(v9 + 8);
  if ((v14 & 4) != 0)
  {
    v17 = *(uint64_t **)(v14 & 0xFFFFFFFFFFFFFFF8);
    v16 = &v17[*(unsigned int *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v16 = (uint64_t *)&v15[v14 > 7];
    v17 = (uint64_t *)(v9 + 8);
  }
  if (v17 != v16)
  {
    if ((v11 & 4) != 0)
    {
      v18 = (v13 - *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8)) >> 3;
      if (v11 > 7)
        goto LABEL_34;
    }
    else
    {
      v18 = (v13 - (uint64_t)v12) >> 3;
      if (v11 >= 8)
      {
        v19 = v11 & 0xFFFFFFFFFFFFFFF8;
        v20 = operator new();
        *(_QWORD *)v20 = v20 + 16;
        *(_QWORD *)(v20 + 8) = 0x400000000;
        *v12 = v20 | 4;
        v21 = v20 & 0xFFFFFFFFFFFFFFF8;
        v22 = *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v22 >= *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 12))
        {
          v38 = v20 & 0xFFFFFFFFFFFFFFF8;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = v38;
          v22 = *(_DWORD *)(v38 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v19;
        ++*(_DWORD *)(v21 + 8);
        v11 = *v12;
        goto LABEL_34;
      }
    }
    if (v17 + 1 == v16)
    {
      *v12 = *v17 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_20;
    }
    v26 = operator new();
    *(_QWORD *)v26 = v26 + 16;
    *(_QWORD *)(v26 + 8) = 0x400000000;
    v11 = v26 | 4;
    *v12 = v26 | 4;
LABEL_34:
    v27 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 4) != 0)
      v12 = *(unint64_t **)v27;
    sub_22F263224(v27, (uint64_t)&v12[v18], v17, v16);
    v14 = *v15;
  }
LABEL_20:
  if ((v14 & 4) != 0)
  {
    if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
      *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
  }
  else
  {
    *v15 = 0;
  }
  *(_BYTE *)(v10 + 20) = 0;
LABEL_23:
  if (*(_DWORD *)(a1 + 1240))
  {
    v28 = *(_QWORD *)(a1 + 56);
    if ((*(_QWORD *)(v28 + 20) & 0x200000000000000) != 0 || (*(_BYTE *)(v28 + 240) & 0xE0) != 0)
    {
      v29 = v39;
      v30 = *(_DWORD *)(a1 + 1696);
      if (v30 >= *(_DWORD *)(a1 + 1700))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = *(_DWORD *)(a1 + 1696);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 1688) + 8 * v30) = v29;
      ++*(_DWORD *)(a1 + 1696);
    }
  }
  v23 = v39;
  if ((*(_QWORD *)v39 & 0x2000000) == 0)
  {
    *(_QWORD *)v39 |= 0x86000000uLL;
    v23 = v39;
  }
  result = (uint64_t)sub_22F14FEA4(a3);
  if (!result || v25)
  {
    v40 = v23;
    v41 = 0;
    result = sub_22E3B9914(a1 + 1960, &v40, &v41);
    v23 = v39;
    if (!(_DWORD)result || v41 == *(_QWORD *)(a1 + 1960) + 16 * *(unsigned int *)(a1 + 1976))
    {
      v32 = *(_QWORD *)v39;
      if ((*(_QWORD *)v39 & 0x2000000) != 0)
      {
        v33 = -2181038081;
        if ((v32 & 0x10000000000) == 0)
          v33 = 0xFFFFFF3F7DFFFFFFLL;
        v34 = v33 & v32;
        v35 = (v32 >> 5) & 0x80000000;
        v36 = (v32 & 0x838000000) == 0;
        v37 = 0x80000000;
        if (v36)
          v37 = v35;
        *(_QWORD *)v39 = v34 | v37;
        v23 = v39;
      }
    }
  }
  if ((*(_QWORD *)v23 & 0x100000000) != 0)
    *(_QWORD *)v23 |= 0x200000000uLL;
  return result;
}

uint64_t sub_22F17633C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char *a7)
{
  uint64_t NodeOrInsertPos;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  _BOOL4 v28;
  unint64_t v29;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[18];

  v34[16] = *MEMORY[0x24BDAC8D0];
  v31 = (_QWORD *)a3;
  v32 = v34;
  v34[0] = a2;
  v34[1] = a3;
  v33 = 0x2000000004;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v15 = NodeOrInsertPos;
    v16 = 0;
  }
  else
  {
    v15 = sub_22F150244(a1, a2, a3, a4, a5, a6);
    llvm::FoldingSetBase::InsertNode();
    if (a6)
    {
      v17 = 0;
      v18 = 8 * a6;
      do
      {
        v19 = *a5++;
        v20 = *(_DWORD *)(v19 + 32);
        v17 |= v20 == 0;
        *(_DWORD *)(v19 + 32) = v20 + 1;
        v18 -= 8;
      }
      while (v18);
      v21 = sub_22F17BEB0((_DWORD *)(a1 + 1960), &v31) + 1;
      if ((v17 & 1) != 0)
      {
        v22 = *v21;
        if ((*v21 & 4) != 0)
        {
          v24 = *(unint64_t **)(v22 & 0xFFFFFFFFFFFFFFF8);
          v23 = &v24[*(unsigned int *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8)];
        }
        else
        {
          v23 = &v21[v22 > 7];
          v24 = v21;
        }
        if (v24 != v23)
        {
          v25 = v24;
          while (1)
          {
            v26 = *v25++;
            if (*(_DWORD *)(v26 + 32))
              break;
            v24 = v25;
            if (v25 == v23)
            {
              v24 = v23;
              goto LABEL_21;
            }
          }
          if (v25 != v23)
          {
            v27 = v24 + 1;
            do
            {
              if (!*(_DWORD *)(*v27 + 32))
                *v24++ = *v27;
              ++v27;
            }
            while (v27 != v23);
          }
        }
LABEL_21:
        if ((v22 & 4) != 0)
        {
          v29 = v22 & 0xFFFFFFFFFFFFFFF8;
          if (v29)
            *(_DWORD *)(v29 + 8) = ((unint64_t)v24 - *(_QWORD *)v29) >> 3;
        }
        else
        {
          v28 = v22 > 7;
          if (v21 == v24 && v24 != &v21[v28])
            *v21 = 0;
        }
      }
    }
    else
    {
      v21 = sub_22F17BEB0((_DWORD *)(a1 + 1960), &v31) + 1;
    }
    sub_22F1765A8((uint64_t)v21, v15);
    if ((*v31 & 0x2000000) == 0)
      *v31 |= 0x86000000uLL;
    v16 = 1;
  }
  *a7 = v16;
  if (v32 != v34)
    free(v32);
  return v15;
}

uint64_t sub_22F1765A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    v8 = (uint64_t *)result;
    if ((v2 & 4) == 0)
    {
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v8 = result | 4;
      v4 = result & 0xFFFFFFFFFFFFFFF8;
      v5 = *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v5 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(v4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v3;
      ++*(_DWORD *)(v4 + 8);
      v2 = *v8;
    }
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v7 >= *(_DWORD *)(v6 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a2;
    ++*(_DWORD *)(v6 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

uint64_t sub_22F1766B0(uint64_t a1, llvm *a2, uint64_t **a3)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  llvm *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int *v57;
  unsigned int v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  llvm *v62[2];
  unsigned int v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[18];

  v66[16] = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)a3 + 4) = *(_DWORD *)(*(_QWORD *)(a1 + 1584) + 48);
  v62[0] = a2;
  v64 = 0;
  result = sub_22E3B9914(a1 + 1960, v62, &v64);
  if (!(_DWORD)result)
    return result;
  v6 = v64;
  if (v64 == (void *)(*(_QWORD *)(a1 + 1960) + 16 * *(unsigned int *)(a1 + 1976)))
    return result;
  v8 = (unint64_t *)(a3 + 1);
  v7 = a3[1];
  if ((v7 & 4) != 0)
  {
    v9 = (unint64_t)v7 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
      *(_DWORD *)(v9 + 8) = 0;
  }
  else
  {
    *v8 = 0;
  }
  v11 = (void **)(a3 + 3);
  v10 = (unint64_t)a3[3];
  v62[0] = 0;
  v62[1] = 0;
  v63 = 0;
  if ((v10 & 4) != 0)
  {
    v13 = v10 & 0xFFFFFFFFFFFFFFF8;
    v11 = *(void ***)v13;
    v12 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
  }
  else
  {
    v12 = (uint64_t)&v11[v10 > 7];
  }
  for (; v11 != (void **)v12; *((_DWORD *)sub_22F29449C((uint64_t)v62, (uint64_t *)&v64) + 2) = -1)
  {
    v14 = *v11++;
    v64 = v14;
  }
  v64 = v66;
  v65 = 0x1000000000;
  v17 = v6[1];
  v16 = v6 + 1;
  v15 = v17;
  if ((v17 & 4) != 0)
  {
    v19 = v15 & 0xFFFFFFFFFFFFFFF8;
    v16 = *(uint64_t **)v19;
    v18 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
  }
  else
  {
    v18 = (uint64_t)&v16[v15 > 7];
  }
  if (v16 == (uint64_t *)v18)
    goto LABEL_42;
  v20 = 0;
  v21 = v62[0];
  v22 = v63;
  v23 = v63 - 1;
  do
  {
    v24 = *v16;
    if (v22)
    {
      v25 = ((v24 >> 4) ^ (v24 >> 9)) & v23;
      v26 = *((_QWORD *)v21 + 2 * v25);
      if (v24 == v26)
      {
LABEL_19:
        if (*((_DWORD *)v21 + 4 * v25 + 2))
          goto LABEL_23;
      }
      else
      {
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v25 + v27++;
          v25 = v28 & v23;
          v26 = *((_QWORD *)v21 + 2 * v25);
          if (v24 == v26)
            goto LABEL_19;
        }
      }
    }
    if (v20 >= HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = v65;
    }
    *((_QWORD *)v64 + v20) = v24;
    v20 = v65 + 1;
    LODWORD(v65) = v65 + 1;
LABEL_23:
    ++v16;
  }
  while (v16 != (uint64_t *)v18);
  if (v20)
  {
    do
    {
      v29 = *((_QWORD *)v64 + v20 - 1);
      LODWORD(v65) = v20 - 1;
      v30 = *(unsigned int *)(*(_QWORD *)(v29 + 24) + 432);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 24);
      if (v30 < (*(_QWORD *)(*(_QWORD *)(a1 + 1584) + 32) - v31) >> 2 && *(_DWORD *)(v31 + 4 * v30))
      {
        if (*(_QWORD *)(v29 + 16))
          sub_22F1765A8((uint64_t)(a3 + 1), v29);
      }
      else
      {
        v32 = *(unsigned int *)(v29 + 36);
        if ((_DWORD)v32)
        {
          v33 = (uint64_t *)(v29 + 40);
          v34 = 8 * v32;
          do
          {
            v61 = *v33;
            v35 = v61;
            v36 = sub_22F29449C((uint64_t)v62, &v61);
            v37 = *((_DWORD *)v36 + 2) + 1;
            *((_DWORD *)v36 + 2) = v37;
            if (v37 == *(_DWORD *)(v35 + 32))
            {
              v38 = v65;
              if (v65 >= (unint64_t)HIDWORD(v65))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v38 = v65;
              }
              *((_QWORD *)v64 + v38) = v35;
              LODWORD(v65) = v65 + 1;
            }
            ++v33;
            v34 -= 8;
          }
          while (v34);
        }
      }
      v20 = v65;
    }
    while ((_DWORD)v65);
  }
LABEL_42:
  v39 = *v8;
  if ((*v8 & 4) != 0)
  {
    v42 = v39 & 0xFFFFFFFFFFFFFFF8;
    v41 = *(_QWORD *)v42;
    v40 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
  }
  else
  {
    v40 = (uint64_t)&v8[v39 > 7];
    v41 = (unint64_t)(a3 + 1);
  }
  v43 = (_QWORD *)(v40 - 8);
  v44 = v41 == v40 || v41 >= (unint64_t)v43;
  if (!v44)
  {
    v45 = v41 + 8;
    do
    {
      v46 = *(_QWORD *)(v45 - 8);
      *(_QWORD *)(v45 - 8) = *v43;
      *v43-- = v46;
      v44 = v45 >= (unint64_t)v43;
      v45 += 8;
    }
    while (!v44);
  }
  v47 = *a3;
  if (!*a3)
    goto LABEL_63;
  while ((*((_BYTE *)v47 + 12) & 3) == 2)
  {
    v47 = (uint64_t *)*v47;
    if (!v47)
      goto LABEL_63;
  }
  if ((*((_BYTE *)v47 + 12) & 3) != 0)
  {
LABEL_63:
    v48 = 0;
    v51 = 1;
  }
  else
  {
    v48 = v47[2];
    v49 = sub_22F1E361C(*(_QWORD **)(a1 + 88), *((_DWORD *)v47 + 2));
    if (v49)
      v50 = v49 == 3;
    else
      v50 = 1;
    v51 = !v50;
  }
  v52 = *v8;
  if ((*v8 & 4) != 0)
  {
    v54 = v52 & 0xFFFFFFFFFFFFFFF8;
    v8 = *(unint64_t **)v54;
    v53 = *(_QWORD *)v54 + 8 * *(unsigned int *)(v54 + 8);
  }
  else
  {
    v53 = (uint64_t)&v8[v52 > 7];
  }
  if (v8 == (unint64_t *)v53)
  {
    LOBYTE(v55) = 0;
  }
  else
  {
    v55 = 0;
    do
    {
      v56 = *v8;
      v57 = *(int **)(*v8 + 16);
      if (v48 && v57 != (int *)v48)
        v55 |= sub_22F14F4DC(v48, *(_QWORD *)(*v8 + 16), a1, 1) ^ 1;
      if ((*(_WORD *)(*(_QWORD *)(v56 + 24) + 1344) & 0x40) != 0)
      {
        v60 = 1;
      }
      else
      {
        v58 = sub_22F1E361C(*(_QWORD **)(a1 + 88), *v57);
        if (v58)
          v59 = v58 == 3;
        else
          v59 = 1;
        v60 = !v59;
      }
      v51 &= v60;
      ++v8;
      v48 = (uint64_t)v57;
    }
    while (v8 != (unint64_t *)v53);
  }
  *((_BYTE *)a3 + 20) = v55 & (v51 ^ 1);
  if (v64 != v66)
    free(v64);
  return llvm::deallocate_buffer(v62[0], (void *)(16 * v63));
}

uint64_t sub_22F176B54(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  void *v18;
  const char *v19;
  llvm *v20;
  llvm *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void ***v44;
  uint64_t v45;
  void *v46;
  llvm *v47;
  unsigned int v48;
  llvm *v49;
  uint64_t v50;
  llvm::raw_ostream *v51;
  void *v52;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  const char *p_p;
  llvm *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int *v61;
  const char *v62;
  int v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  llvm::raw_ostream *v74;
  llvm::raw_ostream *v75;
  _BYTE *v76;
  const char *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  _WORD *v82;
  llvm *v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::raw_ostream *v90;
  llvm::raw_ostream *v91;
  _BYTE *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  llvm *v97[2];
  unsigned int v98;
  llvm *v99;
  uint64_t v100;
  unsigned int v101;
  void *__p;
  char v103;
  char v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[7];
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  __p = a2;
  v105 = 0;
  v4 = 0;
  if (sub_22E3B9914(a1 + 1960, &__p, &v105))
  {
    v5 = 0;
    if (v105 != (void *)(*(_QWORD *)(a1 + 1960) + 16 * *(unsigned int *)(a1 + 1976)))
    {
      v6 = *((_QWORD *)v105 + 1);
      if (v6 >= 8)
      {
        if ((v6 & 4) != 0)
        {
          v4 = *(_BYTE **)(v6 & 0xFFFFFFFFFFFFFFF8);
          v5 = *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v5 = 1;
          v4 = (char *)v105 + 8;
        }
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 1584);
  __p = a2;
  v105 = 0;
  v8 = sub_22E3B9914(v7, &__p, &v105);
  if ((v8 & 1) != 0)
    v9 = (unint64_t *)v105;
  else
    v9 = (unint64_t *)(*(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 16));
  v95 = a1;
  v10 = **(_QWORD **)(a1 + 1584) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 1584) + 16);
  v11 = v9 + 1;
  if (v9 == (unint64_t *)v10)
    v12 = 0;
  else
    v12 = (uint64_t *)(v9 + 1);
  v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v8);
  v14 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 0xA)
  {
    *(_DWORD *)(v14 + 7) = 543519841;
    *(_QWORD *)v14 = *(_QWORD *)"MacroState ";
    *((_QWORD *)v13 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v13, "MacroState ");
  }
  v15 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v16 = v15;
  v17 = (_BYTE *)*((_QWORD *)v15 + 4);
  v94 = v5;
  if (*((_BYTE **)v15 + 3) == v17)
  {
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, " ");
    v18 = (void *)*((_QWORD *)v16 + 4);
  }
  else
  {
    *v17 = 32;
    v18 = (void *)(*((_QWORD *)v15 + 4) + 1);
    *((_QWORD *)v15 + 4) = v18;
  }
  v19 = (const char *)(a2[2] + 16);
  v20 = (llvm *)strlen(v19);
  v21 = v20;
  if ((unint64_t)v20 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
  {
    if (v20)
    {
      v20 = (llvm *)memcpy(v18, v19, (size_t)v20);
      *((_QWORD *)v16 + 4) += v21;
    }
  }
  else
  {
    v20 = (llvm *)llvm::raw_ostream::write(v16, v19);
  }
  if (v9 == (unint64_t *)v10)
  {
    v37 = (llvm::raw_ostream *)llvm::errs(v20);
    v38 = (_BYTE *)*((_QWORD *)v37 + 4);
    v28 = v94;
    if (*((_BYTE **)v37 + 3) == v38)
    {
      llvm::raw_ostream::write(v37, "\n");
    }
    else
    {
      *v38 = 10;
      ++*((_QWORD *)v37 + 4);
    }
    v99 = 0;
    v100 = 0;
    v101 = 0;
    goto LABEL_59;
  }
  v22 = sub_22E6D7534(v9 + 1, v95, (llvm *)a2);
  if (v22 && *(_BYTE *)(v22 + 20))
  {
    v22 = llvm::errs((llvm *)v22);
    v23 = *(_QWORD *)(v22 + 32);
    if ((unint64_t)(*(_QWORD *)(v22 + 24) - v23) > 9)
    {
      *(_WORD *)(v23 + 8) = 29557;
      *(_QWORD *)v23 = *(_QWORD *)" ambiguous";
      *(_QWORD *)(v22 + 32) += 10;
    }
    else
    {
      v22 = llvm::raw_ostream::write((llvm::raw_ostream *)v22, " ambiguous");
    }
  }
  if ((*v11 & 4) != 0)
  {
    v24 = *v11 & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 24);
      if (v25 >= 8 && ((v25 & 4) == 0 || *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 8)))
      {
        v22 = llvm::errs((llvm *)v22);
        v39 = *(_QWORD *)(v22 + 32);
        if ((unint64_t)(*(_QWORD *)(v22 + 24) - v39) > 9)
        {
          *(_WORD *)(v39 + 8) = 29541;
          *(_QWORD *)v39 = *(_QWORD *)" overrides";
          *(_QWORD *)(v22 + 32) += 10;
        }
        else
        {
          v22 = llvm::raw_ostream::write((llvm::raw_ostream *)v22, " overrides");
        }
        if ((*v11 & 4) != 0)
        {
          v40 = *v11 & 0xFFFFFFFFFFFFFFF8;
          if (v40)
          {
            v42 = (uint64_t *)(v40 + 24);
            v41 = *(_QWORD *)(v40 + 24);
            if (v41 >= 8)
            {
              if ((v41 & 4) != 0)
              {
                v87 = v41 & 0xFFFFFFFFFFFFFFF8;
                v88 = *(unsigned int *)(v87 + 8);
                if (!(_DWORD)v88)
                  goto LABEL_29;
                v42 = *(uint64_t **)v87;
                v43 = *(_QWORD *)v87 + 8 * v88;
              }
              else
              {
                v43 = v40 + 32;
              }
              do
              {
                v89 = *v42;
                v90 = (llvm::raw_ostream *)llvm::errs((llvm *)v22);
                v91 = v90;
                v92 = (_BYTE *)*((_QWORD *)v90 + 4);
                if (*((_BYTE **)v90 + 3) == v92)
                {
                  v91 = (llvm::raw_ostream *)llvm::raw_ostream::write(v90, " ");
                }
                else
                {
                  *v92 = 32;
                  ++*((_QWORD *)v90 + 4);
                }
                sub_22F1D8A24(*(uint64_t **)(v89 + 24), 0, &v105);
                if (v108 >= 0)
                  v93 = (const char *)&v105;
                else
                  v93 = (const char *)v105;
                v22 = llvm::raw_ostream::write(v91, v93);
                if (v108 < 0)
                  operator delete(v105);
                ++v42;
              }
              while (v42 != (uint64_t *)v43);
            }
          }
        }
      }
    }
  }
LABEL_29:
  v26 = (llvm::raw_ostream *)llvm::errs((llvm *)v22);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    v26 = (llvm::raw_ostream *)llvm::raw_ostream::write(v26, "\n");
  }
  else
  {
    *v27 = 10;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = v94;
  v29 = *v12;
  v30 = (_QWORD *)(*v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v29 & 4) != 0 && v30)
    v30 = (_QWORD *)*v30;
  for (; v30; v30 = (_QWORD *)*v30)
  {
    v31 = (llvm::raw_ostream *)llvm::errs(v26);
    v32 = (_BYTE *)*((_QWORD *)v31 + 4);
    if (*((_BYTE **)v31 + 3) == v32)
    {
      llvm::raw_ostream::write(v31, " ");
    }
    else
    {
      *v32 = 32;
      ++*((_QWORD *)v31 + 4);
    }
    v26 = (llvm::raw_ostream *)sub_22F14FF24((uint64_t)v30);
  }
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v33 = sub_22E6D7534(v11, v95, (llvm *)a2);
  if (v33)
  {
    v35 = (void **)(v33 + 8);
    v34 = *(_QWORD *)(v33 + 8);
    if (v34 >= 8)
    {
      if ((v34 & 4) != 0)
      {
        v44 = (void ***)(v34 & 0xFFFFFFFFFFFFFFF8);
        v45 = *(unsigned int *)((v34 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)v45)
          goto LABEL_59;
        v35 = *v44;
        v36 = (uint64_t)&(*v44)[v45];
      }
      else
      {
        v36 = v33 + 16;
      }
      do
      {
        v46 = *v35++;
        __p = v46;
        sub_22F25884C((uint64_t)&v105, (uint64_t)&v99, (uint64_t *)&__p);
      }
      while (v35 != (void **)v36);
    }
  }
LABEL_59:
  v97[0] = 0;
  v97[1] = 0;
  v98 = 0;
  v105 = v107;
  v106 = 0x1000000000;
  v47 = (llvm *)sub_22E5B5498((uint64_t)&v105, v4, &v4[8 * v28]);
  v48 = v106;
  if ((_DWORD)v106)
  {
    v49 = v99;
    do
    {
      v50 = *((_QWORD *)v105 + v48 - 1);
      LODWORD(v106) = v48 - 1;
      v51 = (llvm::raw_ostream *)llvm::errs(v47);
      v52 = (void *)*((_QWORD *)v51 + 4);
      if (*((_QWORD *)v51 + 3) - (_QWORD)v52 > 0xCuLL)
      {
        qmemcpy(v52, " ModuleMacro ", 13);
        *((_QWORD *)v51 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v51, " ModuleMacro ");
      }
      v53 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v54 = v53;
      v55 = (_BYTE *)*((_QWORD *)v53 + 4);
      if (*((_BYTE **)v53 + 3) == v55)
      {
        v54 = (llvm::raw_ostream *)llvm::raw_ostream::write(v53, " ");
      }
      else
      {
        *v55 = 32;
        ++*((_QWORD *)v53 + 4);
      }
      sub_22F1D8A24(*(uint64_t **)(v50 + 24), 0, &__p);
      if (v104 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      v57 = (llvm *)llvm::raw_ostream::write(v54, p_p);
      if (v104 < 0)
        operator delete(__p);
      if (!*(_QWORD *)(v50 + 16))
      {
        v57 = (llvm *)llvm::errs(v57);
        v58 = *((_QWORD *)v57 + 4);
        if ((unint64_t)(*((_QWORD *)v57 + 3) - v58) > 5)
        {
          *(_WORD *)(v58 + 4) = 26213;
          *(_DWORD *)v58 = 1684960544;
          *((_QWORD *)v57 + 4) += 6;
        }
        else
        {
          v57 = (llvm *)llvm::raw_ostream::write(v57, " undef");
        }
      }
      if (v101)
      {
        v59 = (v101 - 1) & ((v50 >> 4) ^ (v50 >> 9));
        v60 = *((_QWORD *)v49 + v59);
        if (v50 == v60)
        {
LABEL_75:
          v57 = (llvm *)llvm::errs(v57);
          v61 = (int *)*((_QWORD *)v57 + 4);
          if (*((_QWORD *)v57 + 3) - (_QWORD)v61 <= 6uLL)
          {
            v62 = " active";
LABEL_92:
            v57 = (llvm *)llvm::raw_ostream::write(v57, v62);
            goto LABEL_93;
          }
          *(int *)((char *)v61 + 3) = 1702259060;
          v63 = 1952669984;
          goto LABEL_126;
        }
        v64 = 1;
        while (v60 != -4096)
        {
          v65 = v59 + v64++;
          v59 = v65 & (v101 - 1);
          v60 = *((_QWORD *)v49 + v59);
          if (v50 == v60)
            goto LABEL_75;
        }
      }
      v66 = *(unsigned int *)(*(_QWORD *)(v50 + 24) + 432);
      v67 = *(_QWORD *)(*(_QWORD *)(v95 + 1584) + 24);
      if (v66 >= (*(_QWORD *)(*(_QWORD *)(v95 + 1584) + 32) - v67) >> 2 || !*(_DWORD *)(v67 + 4 * v66))
      {
        v57 = (llvm *)llvm::errs(v57);
        v61 = (int *)*((_QWORD *)v57 + 4);
        if (*((_QWORD *)v57 + 3) - (_QWORD)v61 <= 6uLL)
        {
          v62 = " hidden";
          goto LABEL_92;
        }
        *(int *)((char *)v61 + 3) = 1852138596;
        v63 = 1684629536;
LABEL_126:
        *v61 = v63;
        v85 = *((_QWORD *)v57 + 4) + 7;
        goto LABEL_127;
      }
      if (!*(_QWORD *)(v50 + 16))
        goto LABEL_93;
      v57 = (llvm *)llvm::errs(v57);
      v68 = *((_QWORD *)v57 + 4);
      if ((unint64_t)(*((_QWORD *)v57 + 3) - v68) <= 0xA)
      {
        v62 = " overridden";
        goto LABEL_92;
      }
      *(_DWORD *)(v68 + 7) = 1852138596;
      *(_QWORD *)v68 = *(_QWORD *)" overridden";
      v85 = *((_QWORD *)v57 + 4) + 11;
LABEL_127:
      *((_QWORD *)v57 + 4) = v85;
LABEL_93:
      if (*(_DWORD *)(v50 + 36))
      {
        v57 = (llvm *)llvm::errs(v57);
        v69 = *((_QWORD *)v57 + 4);
        if ((unint64_t)(*((_QWORD *)v57 + 3) - v69) > 9)
        {
          *(_WORD *)(v69 + 8) = 29541;
          *(_QWORD *)v69 = *(_QWORD *)" overrides";
          *((_QWORD *)v57 + 4) += 10;
        }
        else
        {
          v57 = (llvm *)llvm::raw_ostream::write(v57, " overrides");
        }
        v70 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v70)
        {
          v71 = (uint64_t *)(v50 + 40);
          v72 = 8 * v70;
          do
          {
            v73 = *v71;
            v96 = *v71;
            v74 = (llvm::raw_ostream *)llvm::errs(v57);
            v75 = v74;
            v76 = (_BYTE *)*((_QWORD *)v74 + 4);
            if (*((_BYTE **)v74 + 3) == v76)
            {
              v75 = (llvm::raw_ostream *)llvm::raw_ostream::write(v74, " ");
            }
            else
            {
              *v76 = 32;
              ++*((_QWORD *)v74 + 4);
            }
            sub_22F1D8A24(*(uint64_t **)(v73 + 24), 0, &__p);
            if (v104 >= 0)
              v77 = (const char *)&__p;
            else
              v77 = (const char *)__p;
            llvm::raw_ostream::write(v75, v77);
            if (v104 < 0)
              operator delete(__p);
            v57 = (llvm *)sub_22F25884C((uint64_t)&__p, (uint64_t)v97, &v96);
            if (v103)
            {
              v78 = v106;
              if (v106 >= (unint64_t)HIDWORD(v106))
              {
                v57 = (llvm *)llvm::SmallVectorBase<unsigned int>::grow_pod();
                v78 = v106;
              }
              *((_QWORD *)v105 + v78) = v73;
              LODWORD(v106) = v106 + 1;
            }
            ++v71;
            v72 -= 8;
          }
          while (v72);
        }
      }
      v47 = (llvm *)llvm::errs(v57);
      v79 = (_BYTE *)*((_QWORD *)v47 + 4);
      if (*((_BYTE **)v47 + 3) == v79)
      {
        v47 = (llvm *)llvm::raw_ostream::write(v47, "\n");
      }
      else
      {
        *v79 = 10;
        ++*((_QWORD *)v47 + 4);
      }
      v80 = *(_QWORD *)(v50 + 16);
      if (v80)
      {
        v81 = (llvm::raw_ostream *)llvm::errs(v47);
        v82 = (_WORD *)*((_QWORD *)v81 + 4);
        if (*((_QWORD *)v81 + 3) - (_QWORD)v82 > 1uLL)
        {
          *v82 = 8224;
          *((_QWORD *)v81 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v81, "  ");
        }
        v83 = (llvm *)sub_22F14F840(v80);
        v47 = (llvm *)llvm::errs(v83);
        v84 = (_BYTE *)*((_QWORD *)v47 + 4);
        if (*((_BYTE **)v47 + 3) == v84)
        {
          v47 = (llvm *)llvm::raw_ostream::write(v47, "\n");
        }
        else
        {
          *v84 = 10;
          ++*((_QWORD *)v47 + 4);
        }
      }
      v48 = v106;
    }
    while ((_DWORD)v106);
  }
  if (v105 != v107)
    free(v105);
  llvm::deallocate_buffer(v97[0], (void *)(8 * v98));
  return llvm::deallocate_buffer(v99, (void *)(8 * v101));
}

llvm *sub_22F1775D4(uint64_t a1, char *__s)
{
  size_t v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  v5 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), __s, v4);
  v6 = sub_22E3CD3D4(a1 + 128, 48, 3);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_WORD *)(v6 + 36) &= 0xF800u;
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a1 + 2848);
  *(_QWORD *)(a1 + 2848) = v6;
  *(_WORD *)(v6 + 36) |= 0x10u;
  v7 = sub_22E3CD3D4(a1 + 128, 24, 3);
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(v7 + 12) & 0xF0 | 8;
  *(_QWORD *)(v7 + 16) = v6;
  sub_22F175FD4(a1, v5, (uint64_t *)v7);
  return v5;
}

BOOL sub_22F1776A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[126];
  if (v2)
  {
    v5 = sub_22F1468BC(v2);
    if (v5 != 2)
      return v5 == 1;
  }
  else
  {
    v3 = a1[130];
    v4 = *(_DWORD *)(v3 + 36);
    if (v4 != *(_DWORD *)(v3 + 32))
    {
LABEL_3:
      v5 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 24) + 24 * v4 + 16) == 21;
      return v5 == 1;
    }
  }
  if (!a1[127])
  {
    v7 = a1[134];
    v8 = a1[133];
    while (v7 != v8)
    {
      v9 = *(_QWORD *)(v7 - 40);
      if (v9)
      {
        v5 = sub_22F1468BC(v9);
        if (v5 != 2)
          return v5 == 1;
      }
      else
      {
        v3 = *(_QWORD *)(v7 - 24);
        v4 = *(_DWORD *)(v3 + 36);
        if (v4 != *(_DWORD *)(v3 + 32))
          goto LABEL_3;
      }
      result = 0;
      v10 = *(_QWORD *)(v7 - 32);
      v7 -= 56;
      if (v10)
        return result;
    }
    v5 = 2;
    return v5 == 1;
  }
  return 0;
}

uint64_t sub_22F17776C(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int16 v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  __int16 v19;
  int v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  BOOL v29;
  __int16 v30;
  __int16 v31;
  llvm *v32;
  llvm *v33;
  uint64_t *v34;
  __int16 v35;
  char v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  BOOL v82;
  unsigned __int8 *v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned __int16 *v88;
  int v89;
  BOOL v90;
  const char *v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  char v95;
  int v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  int v102;
  unsigned int *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  _BYTE *v117;
  int v118;
  int v119;
  unint64_t v120;
  char *v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  int v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  __int128 v143;
  char v144;
  BOOL v145;
  _BOOL4 v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int16 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  _BYTE *v194;
  unint64_t v195;
  unint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  BOOL v205;
  unsigned __int8 *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  _QWORD *v215;
  BOOL v216;
  unsigned __int8 *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _DWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  BOOL v240;
  uint64_t v241;
  int v242;
  uint64_t result;
  int v244;
  BOOL v245;
  uint64_t v246;
  int v247;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  char v252;
  __int128 *v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  llvm *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  llvm *v263;
  llvm *v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  llvm **v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t *v277;
  uint64_t v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  __int128 v295;
  int v296;
  int v297;
  uint64_t v298;
  size_t v299;
  size_t v300;
  uint64_t v301;
  size_t v302;
  const void *v303;
  size_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 *v307;
  size_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  tm *v324;
  char *v325;
  _BYTE *v326;
  llvm::raw_ostream *v327;
  size_t v328;
  size_t v329;
  _BYTE *v330;
  _BYTE *v331;
  llvm::raw_ostream *v332;
  llvm::raw_ostream *v333;
  _BYTE *v334;
  BOOL v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  uint64_t v344;
  unint64_t v345;
  int v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  const void *v350;
  char v351;
  size_t v352;
  const void *v353;
  const void *v354;
  size_t v355;
  _WORD *v356;
  uint64_t v357;
  int v358;
  unsigned int v359;
  int v360;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  _BYTE *v378;
  uint64_t v379;
  __int16 v380;
  __int16 v381;
  __int16 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned __int8 *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned __int8 *v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unsigned __int8 *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  int v416;
  _QWORD *v417;
  uint64_t v418;
  int v419;
  int v420;
  char v421;
  uint64_t v422;
  int v423[2];
  unsigned int *v424;
  _QWORD v425[3];
  __int16 v426;
  uint64_t v427[3];
  __int16 v428;
  _QWORD v429[3];
  __int16 v430;
  _QWORD v431[3];
  __int16 v432;
  __int128 v433;
  uint64_t v434;
  void *v435;
  __int128 v436;
  void *__p;
  unint64_t v438;
  uint64_t v439;
  char v440;
  uint64_t v441;
  void *v442;
  __int128 v443;
  _WORD v444[64];
  void *v445;
  uint64_t v446;
  _BYTE v447[32];
  __int128 __s;
  uint64_t v449;
  __int16 v450;
  _BYTE v451[24];
  __int128 v452;
  uint64_t v453;
  void *v454;
  _DWORD v455[130];
  void *v456;
  _BYTE v457[944];
  uint64_t v458;

  v4 = (unsigned int *)a2;
  v458 = *MEMORY[0x24BDAC8D0];
  sub_22F165190(a1, a2);
  v6 = a3[2];
  if (v6)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a3[1] + 8 * v6 - 8) + 16);
LABEL_3:
    v8 = *v7;
    goto LABEL_8;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = sub_22F14FEA4((uint64_t *)(*a3 & 0xFFFFFFFFFFFFFFF8));
    if (v9)
    {
      v7 = v9 + 2;
      goto LABEL_3;
    }
  }
  v8 = 0;
LABEL_8:
  v10 = *(_QWORD *)(a1 + 1016);
  if (v10)
    *(_BYTE *)(v10 + 34) = 1;
  v11 = *(_WORD *)(v8 + 36);
  v424 = v4;
  if ((v11 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(a1 + 1088);
    if (v13)
      (*(void (**)(uint64_t, unsigned int *, _QWORD *, unint64_t, _QWORD))(*(_QWORD *)v13 + 232))(v13, v4, a3, *v4 | ((unint64_t)*v4 << 32), 0);
    v14 = *((unsigned __int16 *)v4 + 8);
    if ((v14 - 7) >= 6)
    {
      v15 = 0;
      if ((v14 - 13) >= 6 && v14 != 1)
        v15 = *((_QWORD *)v4 + 1);
    }
    else
    {
      v15 = 0;
    }
    if (v15 == *(_QWORD *)(a1 + 296))
    {
      sub_22F182B04(a1, v4);
      return 1;
    }
    if (v15 == *(_QWORD *)(a1 + 304))
    {
      sub_22F183330(a1, v4);
      return 1;
    }
    ++*(_DWORD *)(a1 + 2220);
    v442 = v444;
    v443 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)&v435, (uint64_t)&v442);
    *((_QWORD *)v4 + 1) = 0;
    v60 = *((_WORD *)v4 + 9);
    *((_WORD *)v4 + 9) = v60 & 0xFFF7;
    if (v15 == *(_QWORD *)(a1 + 224))
    {
      v125 = *v4;
      v126 = sub_22F1418F4(*v4, 0, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56));
      v127 = sub_22F1E2828(*(_QWORD **)(a1 + 88), v126 + v125);
      sub_22F1E2F68(*(_QWORD *)(a1 + 88), SHIDWORD(v127), 1, (uint64_t)v451);
      goto LABEL_262;
    }
    if (v15 != *(_QWORD *)(a1 + 232) && v15 != *(_QWORD *)(a1 + 264) && v15 != *(_QWORD *)(a1 + 272))
    {
      if (v15 == *(_QWORD *)(a1 + 240))
      {
        v281 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v281 + 312) = *v4;
        *(_DWORD *)(v281 + 316) = 1335;
        if (*(char *)(v281 + 311) < 0)
        {
          **(_BYTE **)(v281 + 288) = 0;
          *(_QWORD *)(v281 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v281 + 288) = 0;
          *(_BYTE *)(v281 + 311) = 0;
        }
        *(_QWORD *)v451 = v281 + 320;
        *(_QWORD *)&v451[8] = 0;
        *(_QWORD *)&v451[16] = v281;
        LOWORD(v452) = 1;
        *(_BYTE *)(v281 + 320) = 0;
        *(_DWORD *)(v281 + 664) = 0;
        v287 = *(unsigned int *)(v281 + 776);
        if ((_DWORD)v287)
        {
          v288 = *(_QWORD *)(v281 + 768);
          v289 = 56 * v287;
          do
          {
            if (*(char *)(v288 + v289 - 9) < 0)
              operator delete(*(void **)(v288 + v289 - 32));
            v289 -= 56;
          }
          while (v289);
        }
        *(_DWORD *)(v281 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v451);
        sub_22F17B3C4(a1, *v4);
        if (!*(_DWORD *)(a1 + 512))
          sub_22F17B520((_DWORD *)(a1 + 512), (_DWORD *)(a1 + 516), a1);
        *((_WORD *)v4 + 8) = 13;
        v4[1] = 13;
        v290 = *(_QWORD *)(a1 + 88);
        v291 = *v4;
        v292 = *(unsigned int *)(a1 + 512) | (unint64_t)(v291 << 32);
        LODWORD(__s) = *(_DWORD *)(v290 + 216) | 0x80000000;
        *((_QWORD *)&__s + 1) = v292;
        v449 = v291 | 0x100000000;
        v293 = sub_22E4EF088(v290 + 184, (unint64_t)&__s, 1);
        v294 = *(_QWORD *)(v290 + 184) + 24 * *(unsigned int *)(v290 + 192);
        v295 = *(_OWORD *)v293;
        *(_QWORD *)(v294 + 16) = *(_QWORD *)(v293 + 16);
        *(_OWORD *)v294 = v295;
        ++*(_DWORD *)(v290 + 192);
        v296 = *(_DWORD *)(v290 + 216);
        v297 = v296 + 14;
      }
      else
      {
        if (v15 != *(_QWORD *)(a1 + 248))
        {
          if (v15 == *(_QWORD *)(a1 + 256))
          {
            sub_22F1E2F68(*(_QWORD *)(a1 + 88), *v4, 1, (uint64_t)v451);
            if (*(_QWORD *)v451)
            {
              sub_22F1E2F68(*(_QWORD *)(a1 + 88), *(int *)&v451[20], 1, (uint64_t)&__s);
              *(_OWORD *)v451 = __s;
              *(_QWORD *)&v451[16] = v449;
              if ((_QWORD)__s)
              {
                v286 = 0;
                do
                {
                  sub_22F1E2F68(*(_QWORD *)(a1 + 88), *(int *)&v451[20], 1, (uint64_t)&__s);
                  *(_OWORD *)v451 = __s;
                  *(_QWORD *)&v451[16] = v449;
                  ++v286;
                }
                while ((_QWORD)__s);
              }
            }
          }
          else
          {
            if (v15 == *(_QWORD *)(a1 + 280))
            {
              v298 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v298 + 312) = *v4;
              *(_DWORD *)(v298 + 316) = 1335;
              if (*(char *)(v298 + 311) < 0)
              {
                **(_BYTE **)(v298 + 288) = 0;
                *(_QWORD *)(v298 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v298 + 288) = 0;
                *(_BYTE *)(v298 + 311) = 0;
              }
              *(_QWORD *)v451 = v298 + 320;
              *(_QWORD *)&v451[8] = 0;
              *(_QWORD *)&v451[16] = v298;
              LOWORD(v452) = 1;
              *(_BYTE *)(v298 + 320) = 0;
              *(_DWORD *)(v298 + 664) = 0;
              v319 = *(unsigned int *)(v298 + 776);
              if ((_DWORD)v319)
              {
                v320 = *(_QWORD *)(v298 + 768);
                v321 = 56 * v319;
                do
                {
                  if (*(char *)(v320 + v321 - 9) < 0)
                    operator delete(*(void **)(v320 + v321 - 32));
                  v321 -= 56;
                }
                while (v321);
              }
              *(_DWORD *)(v298 + 776) = 0;
              sub_22E3BB0B8((uint64_t)v451);
              sub_22F17B3C4(a1, *v4);
              v322 = sub_22F172F28((_QWORD *)a1);
              if (v322 && (v323 = sub_22E6155EC(*(_QWORD **)(a1 + 88), *(_DWORD *)(v322 + 16))) != 0)
              {
                *(_QWORD *)&__s = *(_QWORD *)(v323 + 32);
                v324 = localtime((const time_t *)&__s);
                v325 = asctime(v324);
              }
              else
              {
                v325 = "??? ??? ?? ??:??:?? ????\n";
              }
              v326 = (_BYTE *)v438;
              if (v438 >= (unint64_t)__p)
              {
                v327 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v435);
              }
              else
              {
                ++v438;
                *v326 = 34;
                v327 = (llvm::raw_ostream *)&v435;
              }
              if (v325)
                v328 = strlen(v325);
              else
                v328 = 0;
              if (v328 >= v328 - 1)
                v329 = v328 - 1;
              else
                v329 = v328;
              v330 = (_BYTE *)*((_QWORD *)v327 + 4);
              if (v329 <= *((_QWORD *)v327 + 3) - (_QWORD)v330)
              {
                if (v329)
                {
                  memcpy(v330, v325, v329);
                  v330 = (_BYTE *)(*((_QWORD *)v327 + 4) + v329);
                  *((_QWORD *)v327 + 4) = v330;
                }
              }
              else
              {
                v327 = (llvm::raw_ostream *)llvm::raw_ostream::write(v327, v325);
                v330 = (_BYTE *)*((_QWORD *)v327 + 4);
              }
              if ((unint64_t)v330 >= *((_QWORD *)v327 + 3))
              {
                llvm::raw_ostream::write(v327);
              }
              else
              {
                *((_QWORD *)v327 + 4) = v330 + 1;
                *v330 = 34;
              }
              v128 = 13;
              goto LABEL_263;
            }
            if (v15 == *(_QWORD *)(a1 + 496))
            {
              llvm::raw_ostream::operator<<();
              *((_WORD *)v4 + 8) = 7;
              if (*(_DWORD *)(a1 + 524))
              {
                v318 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v318 + 312) = *v4;
                *(_DWORD *)(v318 + 316) = 1048;
                if (*(char *)(v318 + 311) < 0)
                {
                  **(_BYTE **)(v318 + 288) = 0;
                  *(_QWORD *)(v318 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v318 + 288) = 0;
                  *(_BYTE *)(v318 + 311) = 0;
                }
                *(_QWORD *)v451 = v318 + 320;
                *(_QWORD *)&v451[8] = 0;
                *(_QWORD *)&v451[16] = v318;
                LOWORD(v452) = 1;
                *(_BYTE *)(v318 + 320) = 0;
                *(_DWORD *)(v318 + 664) = 0;
                v336 = *(unsigned int *)(v318 + 776);
                if ((_DWORD)v336)
                {
                  v337 = *(_QWORD *)(v318 + 768);
                  v338 = 56 * v336;
                  do
                  {
                    if (*(char *)(v337 + v338 - 9) < 0)
                      operator delete(*(void **)(v337 + v338 - 32));
                    v338 -= 56;
                  }
                  while (v338);
                }
                *(_DWORD *)(v318 + 776) = 0;
                sub_22E3BB0B8((uint64_t)v451);
                v339 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v339 + 312) = *(_DWORD *)(a1 + 524);
                *(_DWORD *)(v339 + 316) = 107;
                if (*(char *)(v339 + 311) < 0)
                {
                  **(_BYTE **)(v339 + 288) = 0;
                  *(_QWORD *)(v339 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v339 + 288) = 0;
                  *(_BYTE *)(v339 + 311) = 0;
                }
                __s = (unint64_t)(v339 + 320);
                v449 = v339;
                v450 = 1;
                *(_BYTE *)(v339 + 320) = 0;
                *(_DWORD *)(v339 + 664) = 0;
                v340 = *(unsigned int *)(v339 + 776);
                if ((_DWORD)v340)
                {
                  v341 = *(_QWORD *)(v339 + 768);
                  v342 = 56 * v340;
                  do
                  {
                    if (*(char *)(v341 + v342 - 9) < 0)
                      operator delete(*(void **)(v341 + v342 - 32));
                    v342 -= 56;
                  }
                  while (v342);
                }
                *(_DWORD *)(v339 + 776) = 0;
                sub_22E3BB0B8((uint64_t)&__s);
              }
              goto LABEL_264;
            }
            if (v15 != *(_QWORD *)(a1 + 288))
            {
              if (v15 == *(_QWORD *)(a1 + 336))
              {
                *(_QWORD *)v451 = a1;
                v62 = sub_22F17C19C;
                goto LABEL_677;
              }
              if (v15 == *(_QWORD *)(a1 + 344))
              {
                *(_QWORD *)v451 = a1;
                v62 = sub_22F180B90;
                goto LABEL_677;
              }
              if (v15 == *(_QWORD *)(a1 + 352))
              {
                *(_QWORD *)v451 = a1;
                v62 = sub_22F1816BC;
                goto LABEL_677;
              }
              if (v15 == *(_QWORD *)(a1 + 392))
              {
                v62 = sub_22F181E70;
                goto LABEL_677;
              }
              if (v15 == *(_QWORD *)(a1 + 360))
              {
                *(_QWORD *)v451 = a1;
                v62 = sub_22F181E80;
              }
              else if (v15 == *(_QWORD *)(a1 + 432))
              {
                *(_QWORD *)v451 = a1;
                v62 = sub_22F181ED0;
              }
              else
              {
                v61 = *(_QWORD *)(a1 + 416);
                if (v15 != v61 && v15 != *(_QWORD *)(a1 + 424))
                {
                  if (v15 == *(_QWORD *)(a1 + 368))
                  {
                    sub_22F4161DC(a1, v4, v15);
                  }
                  else
                  {
                    if (v15 != *(_QWORD *)(a1 + 376))
                    {
                      if (v15 == *(_QWORD *)(a1 + 384))
                      {
                        *(_QWORD *)v451 = a1;
                        v62 = sub_22F182024;
                        goto LABEL_677;
                      }
                      if (v15 == *(_QWORD *)(a1 + 400))
                      {
                        *(_QWORD *)v451 = a1;
                        v62 = sub_22F18223C;
                        goto LABEL_677;
                      }
                      if (v15 == *(_QWORD *)(a1 + 408))
                      {
                        v347 = *(_QWORD *)(a1 + 56);
                        if (*(char *)(v347 + 519) >= 0)
                          v348 = (const char *)(v347 + 496);
                        else
                          v348 = *(const char **)(v347 + 496);
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v435, v348);
                        v349 = *(_QWORD *)(a1 + 56);
                        v350 = (const void *)(v349 + 496);
                        v351 = *(_BYTE *)(v349 + 519);
                        v353 = *(const void **)(v349 + 496);
                        v352 = *(_QWORD *)(v349 + 504);
                        if (v351 >= 0)
                          v354 = v350;
                        else
                          v354 = v353;
                        if (v351 >= 0)
                          v355 = v351 & 0x7F;
                        else
                          v355 = v352;
                        v356 = (_WORD *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), v354, v355);
                        *((_QWORD *)v4 + 1) = v356;
                        v128 = *v356 & 0x1FF;
                        goto LABEL_263;
                      }
                      if (v15 != *(_QWORD *)(a1 + 312))
                      {
                        if (v15 == *(_QWORD *)(a1 + 440))
                        {
                          *(_QWORD *)v451 = a1;
                          v62 = sub_22F1822D4;
                        }
                        else if (v15 == *(_QWORD *)(a1 + 448))
                        {
                          *(_QWORD *)v451 = a1;
                          v62 = sub_22F182418;
                        }
                        else if (v15 == *(_QWORD *)(a1 + 456))
                        {
                          *(_QWORD *)v451 = a1;
                          v62 = sub_22F1824AC;
                        }
                        else
                        {
                          if (v15 != *(_QWORD *)(a1 + 464))
                          {
                            if (v15 != *(_QWORD *)(a1 + 472))
                            {
                              if (v15 == *(_QWORD *)(a1 + 480))
                              {
                                *(_QWORD *)v451 = a1;
                                v62 = sub_22F182754;
                              }
                              else
                              {
                                *(_QWORD *)v451 = a1;
                                v62 = sub_22F1827AC;
                              }
                              goto LABEL_677;
                            }
                            v379 = *v4;
                            v380 = *(_WORD *)(a1 + 536);
                            *(_WORD *)(a1 + 536) = v380 | 0x20;
                            sub_22F18FB4C(a1, v4);
                            v381 = v380 & 0x20;
                            v382 = *(_WORD *)(a1 + 536);
                            *(_WORD *)(a1 + 536) = v382 & 0xFFDF | v381;
                            if (*((_WORD *)v4 + 8) != 21)
                            {
                              v395 = sub_22F141A3C(v379, 0, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
                              v396 = *(_QWORD *)(a1 + 48);
                              *(_DWORD *)(v396 + 312) = v395;
                              *(_DWORD *)(v396 + 316) = 1117;
                              if (*(char *)(v396 + 311) < 0)
                              {
                                **(_BYTE **)(v396 + 288) = 0;
                                *(_QWORD *)(v396 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v396 + 288) = 0;
                                *(_BYTE *)(v396 + 311) = 0;
                              }
                              *(_QWORD *)v451 = v396 + 320;
                              *(_QWORD *)&v451[8] = 0;
                              *(_QWORD *)&v451[16] = v396;
                              LOWORD(v452) = 1;
                              *(_BYTE *)(v396 + 320) = 0;
                              *(_DWORD *)(v396 + 664) = 0;
                              v399 = *(unsigned int *)(v396 + 776);
                              if ((_DWORD)v399)
                              {
                                v400 = *(_QWORD *)(v396 + 768);
                                v401 = 56 * v399;
                                do
                                {
                                  if (*(char *)(v400 + v401 - 9) < 0)
                                    operator delete(*(void **)(v400 + v401 - 32));
                                  v401 -= 56;
                                }
                                while (v401);
                                LODWORD(v399) = *(unsigned __int8 *)(v396 + 320);
                              }
                              *(_DWORD *)(v396 + 776) = 0;
                              *(_BYTE *)(v396 + 321 + v399) = 5;
                              *(_QWORD *)(v396 + 336 + 8 * v399) = v15;
                              v402 = (v399 + 1);
                              *(_BYTE *)(v396 + 321 + v402) = 4;
                              *(_BYTE *)(v396 + 320) = v399 + 2;
                              *(_QWORD *)(v396 + 336 + 8 * v402) = 21;
                              goto LABEL_797;
                            }
                            v383 = *v4;
                            *(_WORD *)(a1 + 536) = v382 | 0x20;
                            sub_22F18FB4C(a1, v4);
                            *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v381;
                            if (*((_WORD *)v4 + 8) == 22)
                            {
LABEL_718:
                              llvm::raw_ostream::operator<<();
                              v128 = 7;
                              goto LABEL_263;
                            }
                            v397 = sub_22F141A3C(v383, 0, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
                            v398 = *(_QWORD *)(a1 + 48);
                            *(_DWORD *)(v398 + 312) = v397;
                            *(_DWORD *)(v398 + 316) = 1117;
                            if (*(char *)(v398 + 311) < 0)
                            {
                              **(_BYTE **)(v398 + 288) = 0;
                              *(_QWORD *)(v398 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v398 + 288) = 0;
                              *(_BYTE *)(v398 + 311) = 0;
                            }
                            *(_QWORD *)v451 = v398 + 320;
                            *(_QWORD *)&v451[8] = 0;
                            *(_QWORD *)&v451[16] = v398;
                            LOWORD(v452) = 1;
                            *(_BYTE *)(v398 + 320) = 0;
                            *(_DWORD *)(v398 + 664) = 0;
                            v403 = *(unsigned int *)(v398 + 776);
                            if ((_DWORD)v403)
                            {
                              v404 = *(_QWORD *)(v398 + 768);
                              v405 = 56 * v403;
                              do
                              {
                                if (*(char *)(v404 + v405 - 9) < 0)
                                  operator delete(*(void **)(v404 + v405 - 32));
                                v405 -= 56;
                              }
                              while (v405);
                              LODWORD(v403) = *(unsigned __int8 *)(v398 + 320);
                            }
                            *(_DWORD *)(v398 + 776) = 0;
                            v406 = *((unsigned __int16 *)v4 + 8);
                            *(_BYTE *)(v398 + 321 + v403) = 4;
                            *(_QWORD *)(v398 + 336 + 8 * v403) = v406;
                            v407 = (v403 + 1);
                            *(_BYTE *)(v398 + 321 + v407) = 4;
                            *(_BYTE *)(v398 + 320) = v403 + 2;
                            *(_QWORD *)(v398 + 336 + 8 * v407) = 22;
                            sub_22E3BB0B8((uint64_t)v451);
                            v408 = *(_QWORD *)(a1 + 48);
                            *(_DWORD *)(v408 + 312) = v383;
                            *(_DWORD *)(v408 + 316) = 104;
                            if (*(char *)(v408 + 311) < 0)
                            {
                              **(_BYTE **)(v408 + 288) = 0;
                              *(_QWORD *)(v408 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v408 + 288) = 0;
                              *(_BYTE *)(v408 + 311) = 0;
                            }
                            v409 = (unsigned __int8 *)(v408 + 320);
                            *(_QWORD *)v451 = v408 + 320;
                            *(_QWORD *)&v451[8] = 0;
                            *(_QWORD *)&v451[16] = v408;
                            LOWORD(v452) = 1;
                            *(_BYTE *)(v408 + 320) = 0;
                            *(_DWORD *)(v408 + 664) = 0;
                            v410 = *(unsigned int *)(v408 + 776);
                            if ((_DWORD)v410)
                            {
                              v411 = *(_QWORD *)(v408 + 768);
                              v412 = 56 * v410;
                              do
                              {
                                if (*(char *)(v411 + v412 - 9) < 0)
                                  operator delete(*(void **)(v411 + v412 - 32));
                                v412 -= 56;
                              }
                              while (v412);
                              LODWORD(v410) = *v409;
                            }
                            *(_DWORD *)(v408 + 776) = 0;
                            v409[v410 + 1] = 4;
                            *(_BYTE *)(v408 + 320) = v410 + 1;
                            v394 = &v409[8 * v410];
LABEL_782:
                            *((_QWORD *)v394 + 2) = 21;
LABEL_797:
                            sub_22E3BB0B8((uint64_t)v451);
                            goto LABEL_268;
                          }
                          *(_QWORD *)v451 = a1;
                          v62 = sub_22F1825D4;
                        }
LABEL_677:
                        v343 = v4;
                        v344 = v15;
                        v345 = a1;
                        v346 = 0;
LABEL_678:
                        sub_22F17B6CC((llvm::raw_ostream *)&v435, v343, v344, v345, v346, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v62, (uint64_t)v451);
                        goto LABEL_264;
                      }
                      v357 = *v4;
                      do
                      {
                        sub_22F18FB4C(a1, v4);
                        v358 = *((unsigned __int16 *)v4 + 8);
                      }
                      while (v358 == 4);
                      if (v358 != 21)
                      {
                        v364 = sub_22F141A3C(v357, 0, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
                        v365 = *(_QWORD *)(a1 + 48);
                        *(_DWORD *)(v365 + 312) = v364;
                        *(_DWORD *)(v365 + 316) = 1117;
                        if (*(char *)(v365 + 311) < 0)
                        {
                          **(_BYTE **)(v365 + 288) = 0;
                          *(_QWORD *)(v365 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v365 + 288) = 0;
                          *(_BYTE *)(v365 + 311) = 0;
                        }
                        *(_QWORD *)v451 = v365 + 320;
                        *(_QWORD *)&v451[8] = 0;
                        *(_QWORD *)&v451[16] = v365;
                        LOWORD(v452) = 1;
                        *(_BYTE *)(v365 + 320) = 0;
                        *(_DWORD *)(v365 + 664) = 0;
                        v366 = *(unsigned int *)(v365 + 776);
                        if ((_DWORD)v366)
                        {
                          v367 = *(_QWORD *)(v365 + 768);
                          v368 = 56 * v366;
                          do
                          {
                            if (*(char *)(v367 + v368 - 9) < 0)
                              operator delete(*(void **)(v367 + v368 - 32));
                            v368 -= 56;
                          }
                          while (v368);
                          LODWORD(v366) = *(unsigned __int8 *)(v365 + 320);
                        }
                        *(_DWORD *)(v365 + 776) = 0;
                        *(_BYTE *)(v365 + 321 + v366) = 5;
                        *(_QWORD *)(v365 + 336 + 8 * v366) = v15;
                        v369 = (v366 + 1);
                        *(_BYTE *)(v365 + 321 + v369) = 4;
                        *(_BYTE *)(v365 + 320) = v366 + 2;
                        *(_QWORD *)(v365 + 336 + 8 * v369) = 21;
                        sub_22E3BB0B8((uint64_t)v451);
                        v370 = *((unsigned __int16 *)v4 + 8);
                        if (v370 - 399 >= 0x29
                          && v370 - 7 >= 6
                          && v370 != 1
                          && v370 != 15
                          && ((v370 < 0x13) & (0x76000u >> v370)) == 0
                          && *((_QWORD *)v4 + 1))
                        {
                          *((_WORD *)v4 + 8) = 5;
                        }
                        goto LABEL_268;
                      }
                      v359 = *v4;
                      do
                      {
                        sub_22F18FB4C(a1, v4);
                        v360 = *((unsigned __int16 *)v4 + 8);
                      }
                      while (v360 == 4);
                      if ((v360 - 399) >= 0x29
                        && (v360 - 7) >= 6
                        && (v360 - 14) >= 5
                        && v360 != 1)
                      {
                        if (v360 == 13)
                        {
                          if ((*((_WORD *)v4 + 9) & 0x20) == 0)
                          {
                            sub_22F14E1D0((uint64_t)v451, (uint64_t)v4, 1, (_QWORD *)a1);
                            if (v457[40])
                            {
                              if (v456 != v457)
                                free(v456);
                              if (v454 != v455)
                                free(v454);
                              goto LABEL_268;
                            }
                            *((_QWORD *)v4 + 1) = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), v454, (v455[128] - (_DWORD)v454));
                            *((_WORD *)v4 + 8) = 5;
                            if (v456 != v457)
                              free(v456);
                            if (v454 != v455)
                              free(v454);
                            goto LABEL_748;
                          }
                        }
                        else if (*((_QWORD *)v4 + 1))
                        {
                          *((_WORD *)v4 + 8) = 5;
                          do
LABEL_748:
                            sub_22F18FB4C(a1, (unsigned int *)&__s);
                          while ((unsigned __int16)v449 == 4);
                          if ((unsigned __int16)v449 == 22)
                          {
LABEL_268:
                            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v435);
                            if (v442 != v444)
                              free(v442);
                            return 1;
                          }
                          v376 = sub_22F141A3C(*v4, 0, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
                          v377 = *(_QWORD *)(a1 + 48);
                          *(_DWORD *)(v377 + 312) = v376;
                          *(_DWORD *)(v377 + 316) = 1117;
                          if (*(char *)(v377 + 311) < 0)
                          {
                            **(_BYTE **)(v377 + 288) = 0;
                            *(_QWORD *)(v377 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v377 + 288) = 0;
                            *(_BYTE *)(v377 + 311) = 0;
                          }
                          *(_QWORD *)v451 = v377 + 320;
                          *(_QWORD *)&v451[8] = 0;
                          *(_QWORD *)&v451[16] = v377;
                          LOWORD(v452) = 1;
                          *(_BYTE *)(v377 + 320) = 0;
                          *(_DWORD *)(v377 + 664) = 0;
                          v384 = *(unsigned int *)(v377 + 776);
                          if ((_DWORD)v384)
                          {
                            v385 = *(_QWORD *)(v377 + 768);
                            v386 = 56 * v384;
                            do
                            {
                              if (*(char *)(v385 + v386 - 9) < 0)
                                operator delete(*(void **)(v385 + v386 - 32));
                              v386 -= 56;
                            }
                            while (v386);
                            LODWORD(v384) = *(unsigned __int8 *)(v377 + 320);
                          }
                          *(_DWORD *)(v377 + 776) = 0;
                          v387 = *((unsigned __int16 *)v4 + 8);
                          *(_BYTE *)(v377 + 321 + v384) = 4;
                          *(_QWORD *)(v377 + 336 + 8 * v384) = v387;
                          v388 = (v384 + 1);
                          *(_BYTE *)(v377 + 321 + v388) = 4;
                          *(_BYTE *)(v377 + 320) = v384 + 2;
                          *(_QWORD *)(v377 + 336 + 8 * v388) = 22;
                          sub_22E3BB0B8((uint64_t)v451);
                          v389 = *(_QWORD *)(a1 + 48);
                          *(_DWORD *)(v389 + 312) = v359;
                          *(_DWORD *)(v389 + 316) = 104;
                          if (*(char *)(v389 + 311) < 0)
                          {
                            **(_BYTE **)(v389 + 288) = 0;
                            *(_QWORD *)(v389 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v389 + 288) = 0;
                            *(_BYTE *)(v389 + 311) = 0;
                          }
                          v390 = (unsigned __int8 *)(v389 + 320);
                          *(_QWORD *)v451 = v389 + 320;
                          *(_QWORD *)&v451[8] = 0;
                          *(_QWORD *)&v451[16] = v389;
                          LOWORD(v452) = 1;
                          *(_BYTE *)(v389 + 320) = 0;
                          *(_DWORD *)(v389 + 664) = 0;
                          v391 = *(unsigned int *)(v389 + 776);
                          if ((_DWORD)v391)
                          {
                            v392 = *(_QWORD *)(v389 + 768);
                            v393 = 56 * v391;
                            do
                            {
                              if (*(char *)(v392 + v393 - 9) < 0)
                                operator delete(*(void **)(v392 + v393 - 32));
                              v393 -= 56;
                            }
                            while (v393);
                            LODWORD(v391) = *v390;
                          }
                          *(_DWORD *)(v389 + 776) = 0;
                          v390[v391 + 1] = 4;
                          *(_BYTE *)(v389 + 320) = v391 + 1;
                          v394 = &v390[8 * v391];
                          goto LABEL_782;
                        }
                      }
                      v363 = *(_QWORD *)(a1 + 48);
                      *(_DWORD *)(v363 + 312) = *v4;
                      *(_DWORD *)(v363 + 316) = 1132;
                      if (*(char *)(v363 + 311) < 0)
                      {
                        **(_BYTE **)(v363 + 288) = 0;
                        *(_QWORD *)(v363 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v363 + 288) = 0;
                        *(_BYTE *)(v363 + 311) = 0;
                      }
                      *(_QWORD *)v451 = v363 + 320;
                      *(_QWORD *)&v451[8] = 0;
                      *(_QWORD *)&v451[16] = v363;
                      LOWORD(v452) = 1;
                      *(_BYTE *)(v363 + 320) = 0;
                      *(_DWORD *)(v363 + 664) = 0;
                      v371 = *(unsigned int *)(v363 + 776);
                      if ((_DWORD)v371)
                      {
                        v372 = *(_QWORD *)(v363 + 768);
                        v373 = 56 * v371;
                        do
                        {
                          if (*(char *)(v372 + v373 - 9) < 0)
                            operator delete(*(void **)(v372 + v373 - 32));
                          v373 -= 56;
                        }
                        while (v373);
                        *(_DWORD *)(v363 + 776) = 0;
                        LODWORD(v371) = *(unsigned __int8 *)(v363 + 320);
                      }
                      else
                      {
                        *(_DWORD *)(v363 + 776) = 0;
                      }
                      v374 = *((unsigned __int16 *)v4 + 8);
                      *(_BYTE *)(v363 + 320 + v371 + 1) = 4;
                      *(_BYTE *)(v363 + 320) = v371 + 1;
                      *(_QWORD *)(v363 + 320 + 8 * v371 + 16) = v374;
                      sub_22E3BB0B8((uint64_t)v451);
                      v375 = *((unsigned __int16 *)v4 + 8);
                      if ((v375 - 1) < 2 || (v375 - 399) < 0x29)
                        goto LABEL_268;
                      goto LABEL_748;
                    }
                    sub_22F416250((_QWORD *)a1, v4, v15);
                  }
                  if (*((_WORD *)v4 + 8) != 22)
                    goto LABEL_268;
                  goto LABEL_718;
                }
                LOBYTE(__s) = v15 == v61;
                *(_QWORD *)v451 = a1;
                *(_QWORD *)&v451[8] = &__s;
                v62 = sub_22F181F34;
              }
              v343 = v4;
              v344 = v15;
              v345 = a1;
              v346 = 1;
              goto LABEL_678;
            }
            ++*(_DWORD *)(a1 + 532);
          }
LABEL_262:
          llvm::raw_ostream::operator<<();
          v128 = 7;
LABEL_263:
          *((_WORD *)v4 + 8) = v128;
LABEL_264:
          sub_22F18E27C(a1, *(const void **)v441, *(_QWORD *)(v441 + 8), (uint64_t)v4, *v4, *v4);
          v129 = *((_WORD *)v4 + 9) & 0xFFFE | v60 & 1;
          *((_WORD *)v4 + 9) = v129;
          if ((v60 & 2) != 0)
            v130 = v129 | 2;
          else
            v130 = v129 & 0xFFFD;
          *((_WORD *)v4 + 9) = v130;
          goto LABEL_268;
        }
        v285 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v285 + 312) = *v4;
        *(_DWORD *)(v285 + 316) = 1335;
        if (*(char *)(v285 + 311) < 0)
        {
          **(_BYTE **)(v285 + 288) = 0;
          *(_QWORD *)(v285 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v285 + 288) = 0;
          *(_BYTE *)(v285 + 311) = 0;
        }
        *(_QWORD *)v451 = v285 + 320;
        *(_QWORD *)&v451[8] = 0;
        *(_QWORD *)&v451[16] = v285;
        LOWORD(v452) = 1;
        *(_BYTE *)(v285 + 320) = 0;
        *(_DWORD *)(v285 + 664) = 0;
        v309 = *(unsigned int *)(v285 + 776);
        if ((_DWORD)v309)
        {
          v310 = *(_QWORD *)(v285 + 768);
          v311 = 56 * v309;
          do
          {
            if (*(char *)(v310 + v311 - 9) < 0)
              operator delete(*(void **)(v310 + v311 - 32));
            v311 -= 56;
          }
          while (v311);
        }
        *(_DWORD *)(v285 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v451);
        sub_22F17B3C4(a1, *v4);
        if (!*(_DWORD *)(a1 + 516))
          sub_22F17B520((_DWORD *)(a1 + 512), (_DWORD *)(a1 + 516), a1);
        *((_WORD *)v4 + 8) = 13;
        v4[1] = 10;
        v290 = *(_QWORD *)(a1 + 88);
        v312 = *v4;
        v313 = *(unsigned int *)(a1 + 516) | (unint64_t)(v312 << 32);
        LODWORD(__s) = *(_DWORD *)(v290 + 216) | 0x80000000;
        *((_QWORD *)&__s + 1) = v313;
        v449 = v312 | 0x100000000;
        v314 = sub_22E4EF088(v290 + 184, (unint64_t)&__s, 1);
        v315 = *(_QWORD *)(v290 + 184) + 24 * *(unsigned int *)(v290 + 192);
        v316 = *(_OWORD *)v314;
        *(_QWORD *)(v315 + 16) = *(_QWORD *)(v314 + 16);
        *(_OWORD *)v315 = v316;
        ++*(_DWORD *)(v290 + 192);
        v296 = *(_DWORD *)(v290 + 216);
        v297 = v296 + 11;
      }
      *(_DWORD *)(v290 + 216) = v297;
      *v4 = v296 | 0x80000000;
      goto LABEL_268;
    }
    sub_22F1E2F68(*(_QWORD *)(a1 + 88), *v4, 1, (uint64_t)&__s);
    v91 = (const char *)__s;
    if (v15 == *(_QWORD *)(a1 + 264) && (_QWORD)__s)
    {
      LODWORD(v92) = HIDWORD(v449);
      if (!HIDWORD(v449))
      {
        *(_QWORD *)v451 = &v452;
        *(_OWORD *)&v451[8] = xmmword_22F44E320;
        goto LABEL_592;
      }
      do
      {
        sub_22F1E2F68(*(_QWORD *)(a1 + 88), v92, 1, (uint64_t)v451);
        v449 = *(_QWORD *)&v451[16];
        __s = *(_OWORD *)v451;
        v91 = *(const char **)v451;
        v92 = HIDWORD(*(_QWORD *)&v451[16]);
        if (*(_QWORD *)v451)
          v93 = v92 == 0;
        else
          v93 = 1;
      }
      while (!v93);
    }
    *(_QWORD *)v451 = &v452;
    *(_OWORD *)&v451[8] = xmmword_22F44E320;
    if (!v91)
      goto LABEL_222;
LABEL_592:
    v299 = strlen(v91);
    v300 = v299;
    if (v15 == *(_QWORD *)(a1 + 272))
    {
      v301 = llvm::sys::path::filename();
      if (v302)
      {
        v303 = (const void *)v301;
        v304 = v302;
        v317 = *(_QWORD *)&v451[8];
        if (*(_QWORD *)&v451[16] < *(_QWORD *)&v451[8] + v302)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v317 = *(_QWORD *)&v451[8];
        }
      }
      else
      {
        v303 = (const void *)__s;
        if ((_QWORD)__s)
          v304 = strlen((const char *)__s);
        else
          v304 = 0;
        v317 = *(_QWORD *)&v451[8];
        if (*(_QWORD *)&v451[16] < *(_QWORD *)&v451[8] + v304)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v317 = *(_QWORD *)&v451[8];
          if (!v304)
            goto LABEL_648;
        }
        else if (!v304)
        {
LABEL_648:
          v308 = v317 + v304;
          goto LABEL_649;
        }
      }
      memcpy((void *)(*(_QWORD *)v451 + v317), v303, v304);
      v317 = *(_QWORD *)&v451[8];
      goto LABEL_648;
    }
    if (v299 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v305 = *(_QWORD *)&v451[8];
      v307 = *(__int128 **)v451;
    }
    else
    {
      v305 = 0;
      v306 = 0;
      v307 = &v452;
      if (!v299)
      {
LABEL_599:
        v308 = v306 + v300;
LABEL_649:
        *(_QWORD *)&v451[8] = v308;
        sub_22F1D46F8(*(_QWORD *)(a1 + 56));
        sub_22F41090C((uint64_t)v451);
        v331 = (_BYTE *)v438;
        if (v438 >= (unint64_t)__p)
        {
          v332 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v435);
        }
        else
        {
          ++v438;
          *v331 = 34;
          v332 = (llvm::raw_ostream *)&v435;
        }
        v333 = (llvm::raw_ostream *)llvm::raw_ostream::write(v332, *(const char **)v451);
        v334 = (_BYTE *)*((_QWORD *)v333 + 4);
        if ((unint64_t)v334 >= *((_QWORD *)v333 + 3))
        {
          llvm::raw_ostream::write(v333);
        }
        else
        {
          *((_QWORD *)v333 + 4) = v334 + 1;
          *v334 = 34;
        }
LABEL_222:
        *((_WORD *)v4 + 8) = 13;
        if (*(__int128 **)v451 != &v452)
          free(*(void **)v451);
        goto LABEL_264;
      }
    }
    memcpy((char *)v307 + v305, v91, v300);
    v306 = *(_QWORD *)&v451[8];
    goto LABEL_599;
  }
  v417 = a3;
  v418 = *v4;
  *(_QWORD *)v423 = v8;
  if ((v11 & 2) == 0)
  {
    v12 = 0;
    ++*(_DWORD *)(a1 + 2212);
    goto LABEL_405;
  }
  v16 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v16 | 8;
  *(_QWORD *)(a1 + 504) = v4;
  v17 = v8;
  v18 = *(_DWORD *)(v8 + 24);
  v19 = *(_WORD *)(v17 + 36);
  *(_WORD *)(a1 + 536) = v16 | 0x28;
  sub_22F18FB4C(a1, (unsigned int *)&v433);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v16 & 0x20;
  *(_QWORD *)v451 = &v451[16];
  *(_QWORD *)&v451[8] = 0x4000000000;
  v20 = (unsigned __int16)v434;
  if ((unsigned __int16)v434 == 22)
  {
    LOBYTE(v416) = 0;
    v21 = 0;
    LODWORD(v22) = 0;
    v23 = *(_DWORD *)(v17 + 24);
    a3 = v417;
LABEL_302:
    if (v22 >= v23)
    {
      if (v22 <= v23)
      {
        v144 = 0;
LABEL_399:
        v8 = *(_QWORD *)v423;
        goto LABEL_400;
      }
      v8 = *(_QWORD *)v423;
      if ((*(_WORD *)(*(_QWORD *)v423 + 36) & 0xC) != 0)
        v21 = 1;
      if ((v21 & 1) != 0)
      {
        v144 = 0;
LABEL_400:
        v12 = sub_22F14E828(v8, *(void **)v451, *(unsigned int *)&v451[8], v144, a1);
        goto LABEL_401;
      }
      v147 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v147 + 312) = *v4;
      *(_DWORD *)(v147 + 316) = 1182;
      if (*(char *)(v147 + 311) < 0)
      {
        **(_BYTE **)(v147 + 288) = 0;
        *(_QWORD *)(v147 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v147 + 288) = 0;
        *(_BYTE *)(v147 + 311) = 0;
      }
      v442 = (void *)(v147 + 320);
      *(_QWORD *)&v443 = 0;
      *((_QWORD *)&v443 + 1) = v147;
      v444[0] = 1;
      *(_BYTE *)(v147 + 320) = 0;
      *(_DWORD *)(v147 + 664) = 0;
      v151 = *(unsigned int *)(v147 + 776);
      if ((_DWORD)v151)
      {
        v152 = *(_QWORD *)(v147 + 768);
        v153 = 56 * v151;
        do
        {
          if (*(char *)(v152 + v153 - 9) < 0)
            operator delete(*(void **)(v152 + v153 - 32));
          v153 -= 56;
        }
        while (v153);
      }
      *(_DWORD *)(v147 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v442);
      v154 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v154 + 312) = **(_DWORD **)v423;
      *(_DWORD *)(v154 + 316) = 1248;
      if (*(char *)(v154 + 311) < 0)
      {
        **(_BYTE **)(v154 + 288) = 0;
        *(_QWORD *)(v154 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v154 + 288) = 0;
        *(_BYTE *)(v154 + 311) = 0;
      }
      v435 = (void *)(v154 + 320);
      *(_QWORD *)&v436 = 0;
      *((_QWORD *)&v436 + 1) = v154;
      LOWORD(__p) = 1;
      *(_BYTE *)(v154 + 320) = 0;
      *(_DWORD *)(v154 + 664) = 0;
      v155 = *(unsigned int *)(v154 + 776);
      if ((_DWORD)v155)
      {
        v156 = *(_QWORD *)(v154 + 768);
        v157 = 56 * v155;
        do
        {
          if (*(char *)(v156 + v157 - 9) < 0)
            operator delete(*(void **)(v156 + v157 - 32));
          v157 -= 56;
        }
        while (v157);
      }
    }
    else
    {
      if (v23 == 1)
      {
        v144 = (*(_WORD *)(*(_QWORD *)v423 + 36) & 0xC) != 0;
        goto LABEL_396;
      }
      if ((v416 & 1) != 0 || (*(_WORD *)(*(_QWORD *)v423 + 36) & 0xC) != 0)
      {
        v145 = v23 == 2 && (_DWORD)v22 == 0;
        v146 = v145;
        if ((_DWORD)v22 + 1 == v23 || v146)
        {
          if ((*(_WORD *)(*(_QWORD *)v423 + 36) & 0x20) != 0)
          {
            v144 = 1;
          }
          else
          {
            v148 = *(_QWORD *)(a1 + 48);
            if ((**(_QWORD **)(a1 + 56) & 0x1000) != 0)
              v149 = 1298;
            else
              v149 = 1210;
            *(_DWORD *)(v148 + 312) = v433;
            *(_DWORD *)(v148 + 316) = v149;
            if (*(char *)(v148 + 311) < 0)
            {
              **(_BYTE **)(v148 + 288) = 0;
              *(_QWORD *)(v148 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v148 + 288) = 0;
              *(_BYTE *)(v148 + 311) = 0;
            }
            v442 = (void *)(v148 + 320);
            *(_QWORD *)&v443 = 0;
            *((_QWORD *)&v443 + 1) = v148;
            v444[0] = 1;
            *(_BYTE *)(v148 + 320) = 0;
            *(_DWORD *)(v148 + 664) = 0;
            v168 = *(unsigned int *)(v148 + 776);
            if ((_DWORD)v168)
            {
              v169 = *(_QWORD *)(v148 + 768);
              v170 = 56 * v168;
              do
              {
                if (*(char *)(v169 + v170 - 9) < 0)
                  operator delete(*(void **)(v169 + v170 - 32));
                v170 -= 56;
              }
              while (v170);
            }
            *(_DWORD *)(v148 + 776) = 0;
            sub_22E3BB0B8((uint64_t)&v442);
            v171 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v171 + 312) = **(_DWORD **)v423;
            *(_DWORD *)(v171 + 316) = 1248;
            if (*(char *)(v171 + 311) < 0)
            {
              **(_BYTE **)(v171 + 288) = 0;
              *(_QWORD *)(v171 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v171 + 288) = 0;
              *(_BYTE *)(v171 + 311) = 0;
            }
            v435 = (void *)(v171 + 320);
            *(_QWORD *)&v436 = 0;
            *((_QWORD *)&v436 + 1) = v171;
            LOWORD(__p) = 1;
            *(_BYTE *)(v171 + 320) = 0;
            *(_DWORD *)(v171 + 664) = 0;
            v172 = *(unsigned int *)(v171 + 776);
            if ((_DWORD)v172)
            {
              v173 = *(_QWORD *)(v171 + 768);
              v174 = 56 * v172;
              do
              {
                if (*(char *)(v173 + v174 - 9) < 0)
                  operator delete(*(void **)(v173 + v174 - 32));
                v174 -= 56;
              }
              while (v174);
            }
            *(_DWORD *)(v171 + 776) = 0;
            v175 = *((unsigned __int16 *)v4 + 8);
            if ((v175 - 7) >= 6)
            {
              v177 = (v175 - 13) < 6 || v175 == 1;
              a3 = v417;
              if (v177)
                v176 = 0;
              else
                v176 = *((_QWORD *)v4 + 1);
            }
            else
            {
              v176 = 0;
              a3 = v417;
            }
            v178 = *(unsigned __int8 *)(v171 + 320);
            *(_BYTE *)(v171 + 320 + v178 + 1) = 5;
            *(_BYTE *)(v171 + 320) = v178 + 1;
            *(_QWORD *)(v171 + 320 + 8 * v178 + 16) = v176;
            sub_22E3BB0B8((uint64_t)&v435);
            v144 = 1;
          }
LABEL_396:
          *((_QWORD *)&v433 + 1) = 0;
          LODWORD(v434) = 1;
          DWORD1(v433) = 0;
          v179 = sub_22E4EF088((uint64_t)v451, (unint64_t)&v433, 1);
          v180 = *(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8];
          v181 = *(_OWORD *)v179;
          *(_QWORD *)(v180 + 16) = *(_QWORD *)(v179 + 16);
          *(_OWORD *)v180 = v181;
          ++*(_DWORD *)&v451[8];
          if (v23 == 2)
          {
            v8 = *(_QWORD *)v423;
            if (!(_DWORD)v22)
            {
              v182 = sub_22E4EF088((uint64_t)v451, (unint64_t)&v433, 1);
              v183 = *(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8];
              v184 = *(_OWORD *)v182;
              *(_QWORD *)(v183 + 16) = *(_QWORD *)(v182 + 16);
              *(_OWORD *)v183 = v184;
              ++*(_DWORD *)&v451[8];
            }
            goto LABEL_400;
          }
          goto LABEL_399;
        }
      }
      if ((v21 & 1) != 0)
      {
        v144 = 0;
        goto LABEL_396;
      }
      v150 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v150 + 312) = v433;
      *(_DWORD *)(v150 + 316) = 1181;
      if (*(char *)(v150 + 311) < 0)
      {
        **(_BYTE **)(v150 + 288) = 0;
        *(_QWORD *)(v150 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v150 + 288) = 0;
        *(_BYTE *)(v150 + 311) = 0;
      }
      v8 = *(_QWORD *)v423;
      v442 = (void *)(v150 + 320);
      *(_QWORD *)&v443 = 0;
      *((_QWORD *)&v443 + 1) = v150;
      v444[0] = 1;
      *(_BYTE *)(v150 + 320) = 0;
      *(_DWORD *)(v150 + 664) = 0;
      v158 = *(unsigned int *)(v150 + 776);
      if ((_DWORD)v158)
      {
        v159 = *(_QWORD *)(v150 + 768);
        v160 = 56 * v158;
        do
        {
          if (*(char *)(v159 + v160 - 9) < 0)
            operator delete(*(void **)(v159 + v160 - 32));
          v160 -= 56;
        }
        while (v160);
      }
      *(_DWORD *)(v150 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v442);
      v154 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v154 + 312) = **(_DWORD **)v423;
      *(_DWORD *)(v154 + 316) = 1248;
      if (*(char *)(v154 + 311) < 0)
      {
        **(_BYTE **)(v154 + 288) = 0;
        *(_QWORD *)(v154 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v154 + 288) = 0;
        *(_BYTE *)(v154 + 311) = 0;
      }
      v435 = (void *)(v154 + 320);
      *(_QWORD *)&v436 = 0;
      *((_QWORD *)&v436 + 1) = v154;
      LOWORD(__p) = 1;
      *(_BYTE *)(v154 + 320) = 0;
      *(_DWORD *)(v154 + 664) = 0;
      v161 = *(unsigned int *)(v154 + 776);
      if ((_DWORD)v161)
      {
        v162 = *(_QWORD *)(v154 + 768);
        v163 = 56 * v161;
        do
        {
          if (*(char *)(v162 + v163 - 9) < 0)
            operator delete(*(void **)(v162 + v163 - 32));
          v163 -= 56;
        }
        while (v163);
      }
    }
    *(_DWORD *)(v154 + 776) = 0;
    v164 = *((unsigned __int16 *)v4 + 8);
    if ((v164 - 7) >= 6)
    {
      v166 = (v164 - 13) < 6 || v164 == 1;
      a3 = v417;
      if (v166)
        v165 = 0;
      else
        v165 = *((_QWORD *)v4 + 1);
    }
    else
    {
      v165 = 0;
      a3 = v417;
    }
    v167 = *(unsigned __int8 *)(v154 + 320);
    *(_BYTE *)(v154 + 320 + v167 + 1) = 5;
    *(_BYTE *)(v154 + 320) = v167 + 1;
    *(_QWORD *)(v154 + 320 + 8 * v167 + 16) = v165;
    sub_22E3BB0B8((uint64_t)&v435);
    v12 = 0;
    goto LABEL_401;
  }
  v24 = 0;
  v25 = 0;
  v416 = 0;
  v22 = 0;
  v420 = 0;
  v419 = v19 & 0xC;
  while (1)
  {
    if ((v25 & 1) != 0 && (v20 - 1) <= 1)
    {
      v4 = v424;
      v23 = *(_DWORD *)(*(_QWORD *)v423 + 24);
      a3 = v417;
LABEL_297:
      *(_QWORD *)&v443 = 0;
      DWORD2(v443) = 1;
      v442 = (void *)v433;
      v140 = v23 - v22;
      if (v23 > v22)
      {
        do
        {
          v141 = sub_22E4EF088((uint64_t)v451, (unint64_t)&v442, 1);
          v142 = *(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8];
          v143 = *(_OWORD *)v141;
          *(_QWORD *)(v142 + 16) = *(_QWORD *)(v141 + 16);
          *(_OWORD *)v142 = v143;
          ++*(_DWORD *)&v451[8];
          --v140;
        }
        while (v140);
        LODWORD(v22) = v23;
      }
      v21 = 1;
      goto LABEL_302;
    }
    v26 = 0;
    v27 = v433;
    v28 = !v419 || v18 >= 2;
    v29 = !v28;
LABEL_33:
    v30 = *(_WORD *)(a1 + 536);
    while (1)
    {
      *(_WORD *)(a1 + 536) = v30 | 0x20;
      sub_22F18FB4C(a1, (unsigned int *)&v433);
      v31 = *(_WORD *)(a1 + 536);
      v30 = v31 & 0xFFDF | v30 & 0x20;
      *(_WORD *)(a1 + 536) = v30;
      if ((unsigned __int16)v434 != 4)
        break;
      if ((v31 & 2) != 0)
      {
        v32 = (llvm *)*((_QWORD *)&v433 + 1);
        if (*((_QWORD *)&v433 + 1))
          goto LABEL_37;
        goto LABEL_67;
      }
    }
    if ((unsigned __int16)v434 <= 0x14u)
      break;
    if ((unsigned __int16)v434 == 21)
    {
      ++v26;
      goto LABEL_67;
    }
    if ((unsigned __int16)v434 != 22)
    {
      if ((unsigned __int16)v434 != 65)
        goto LABEL_52;
      if ((v434 & 0x800000) != 0)
      {
        v35 = WORD1(v434) & 0xFF7F;
        goto LABEL_66;
      }
      if (v26)
        v36 = 1;
      else
        v36 = v29;
      if ((v36 & 1) != 0)
        goto LABEL_67;
      v57 = *(_DWORD *)&v451[8];
      goto LABEL_80;
    }
    if (v26)
    {
      --v26;
      goto LABEL_67;
    }
    v418 = v433;
    v57 = *(_DWORD *)&v451[8];
    if (!*(_DWORD *)&v451[8])
    {
      v45 = 22;
LABEL_79:
      if (v45 == 22)
        goto LABEL_107;
      goto LABEL_80;
    }
    v416 |= (unsigned __int16)(*(_WORD *)(*(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8] - 6) & 0x200) >> 9;
LABEL_80:
    v46 = v419 == 0;
    if (v18)
      v46 = 0;
    if (v46 && !v420)
    {
      v420 = v27;
      if (v57 != v24)
        v420 = *(_DWORD *)(*(_QWORD *)v451 + 24 * v24);
    }
    if (v57 == v24)
    {
      v47 = **(_QWORD **)(a1 + 56);
      if ((v47 & 1) == 0)
      {
        if ((v47 & 0x200) != 0)
          v48 = 1303;
        else
          v48 = 1206;
        v49 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v49 + 312) = v433;
        *(_DWORD *)(v49 + 316) = v48;
        v50 = v25;
        if (*(char *)(v49 + 311) < 0)
        {
          **(_BYTE **)(v49 + 288) = 0;
          *(_QWORD *)(v49 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v49 + 288) = 0;
          *(_BYTE *)(v49 + 311) = 0;
        }
        v431[0] = v49 + 320;
        v431[1] = 0;
        v431[2] = v49;
        v432 = 1;
        *(_BYTE *)(v49 + 320) = 0;
        *(_DWORD *)(v49 + 664) = 0;
        v51 = *(unsigned int *)(v49 + 776);
        if ((_DWORD)v51)
        {
          v52 = *(_QWORD *)(v49 + 768);
          v53 = 56 * v51;
          do
          {
            if (*(char *)(v52 + v53 - 9) < 0)
              operator delete(*(void **)(v52 + v53 - 32));
            v53 -= 56;
          }
          while (v53);
        }
        *(_DWORD *)(v49 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v431);
        v25 = v50;
      }
    }
    *(_QWORD *)&v443 = 0;
    DWORD2(v443) = 1;
    v442 = (void *)v433;
    v54 = sub_22E4EF088((uint64_t)v451, (unint64_t)&v442, 1);
    v55 = *(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8];
    v56 = *(_OWORD *)v54;
    *(_QWORD *)(v55 + 16) = *(_QWORD *)(v54 + 16);
    *(_OWORD *)v55 = v56;
    v24 = ++*(_DWORD *)&v451[8];
    v22 = (v22 + 1);
    v18 -= (v18 != 0) & ~(_DWORD)v25;
    v20 = (unsigned __int16)v434;
    if ((unsigned __int16)v434 == 22)
    {
LABEL_107:
      v23 = *(_DWORD *)(*(_QWORD *)v423 + 24);
      if (v419)
      {
        v4 = v424;
        a3 = v417;
      }
      else
      {
        v4 = v424;
        a3 = v417;
        if (v22 > v23 && (v25 & 1) == 0)
        {
          v58 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v58 + 312) = v420;
          *(_DWORD *)(v58 + 316) = 1182;
          if (*(char *)(v58 + 311) < 0)
          {
            **(_BYTE **)(v58 + 288) = 0;
            *(_QWORD *)(v58 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v58 + 288) = 0;
            *(_BYTE *)(v58 + 311) = 0;
          }
          v429[0] = v58 + 320;
          v429[1] = 0;
          v429[2] = v58;
          v430 = 1;
          *(_BYTE *)(v58 + 320) = 0;
          *(_DWORD *)(v58 + 664) = 0;
          v74 = *(unsigned int *)(v58 + 776);
          if ((_DWORD)v74)
          {
            v75 = *(_QWORD *)(v58 + 768);
            v76 = 56 * v74;
            do
            {
              if (*(char *)(v75 + v76 - 9) < 0)
                operator delete(*(void **)(v75 + v76 - 32));
              v76 -= 56;
            }
            while (v76);
          }
          *(_DWORD *)(v58 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v429);
          v77 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v77 + 312) = **(_DWORD **)v423;
          *(_DWORD *)(v77 + 316) = 1248;
          if (*(char *)(v77 + 311) < 0)
          {
            **(_BYTE **)(v77 + 288) = 0;
            *(_QWORD *)(v77 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v77 + 288) = 0;
            *(_BYTE *)(v77 + 311) = 0;
          }
          v442 = (void *)(v77 + 320);
          *(_QWORD *)&v443 = 0;
          *((_QWORD *)&v443 + 1) = v77;
          v444[0] = 1;
          *(_BYTE *)(v77 + 320) = 0;
          *(_DWORD *)(v77 + 664) = 0;
          v78 = *(unsigned int *)(v77 + 776);
          if ((_DWORD)v78)
          {
            v79 = *(_QWORD *)(v77 + 768);
            v80 = 56 * v78;
            do
            {
              if (*(char *)(v79 + v80 - 9) < 0)
                operator delete(*(void **)(v79 + v80 - 32));
              v80 -= 56;
            }
            while (v80);
          }
          *(_DWORD *)(v77 + 776) = 0;
          v81 = *((unsigned __int16 *)v424 + 8);
          if ((v81 - 7) < 6 || ((v81 - 13) >= 6 ? (v82 = v81 == 1) : (v82 = 1), v82))
            v273 = 0;
          else
            v273 = *((_QWORD *)v424 + 1);
          v83 = (unsigned __int8 *)v442;
          if (!v442)
          {
            v83 = (unsigned __int8 *)sub_22E3B8AAC(v443);
            v442 = v83;
          }
          v421 = v25;
          v83[*v83 + 1] = 5;
          v84 = v442;
          v85 = *(unsigned __int8 *)v442;
          *(_BYTE *)v442 = v85 + 1;
          v84[v85 + 2] = v273;
          sub_22E3BB0B8((uint64_t)&v442);
          v442 = (char *)&v443 + 8;
          *(_QWORD *)&v443 = 0x400000000;
          *(_QWORD *)&__s = &v449;
          *((_QWORD *)&__s + 1) = 0x400000000;
          v445 = v447;
          v446 = 0x400000000;
          v435 = (char *)&v436 + 8;
          *(_QWORD *)&v436 = 0x800000000;
          if (*(_DWORD *)&v451[8])
          {
            v86 = 0;
            v87 = 24 * *(unsigned int *)&v451[8];
            v88 = (unsigned __int16 *)(*(_QWORD *)v451 + 16);
            while (1)
            {
              v89 = *v88;
              v88 += 12;
              switch(v89)
              {
                case 21:
                  if (v86 >= DWORD1(v436))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v86 = v436;
                  }
                  *((_DWORD *)v435 + v86) = 1;
                  goto LABEL_204;
                case 22:
                  if (!v86 || !*((_DWORD *)v435 + v86 - 1))
                    goto LABEL_224;
                  goto LABEL_207;
                case 23:
                  if (v86 >= DWORD1(v436))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v86 = v436;
                  }
                  *((_DWORD *)v435 + v86) = 0;
LABEL_204:
                  v86 = v436 + 1;
                  goto LABEL_208;
                case 24:
                  if (!v86 || *((_DWORD *)v435 + v86 - 1) == 1)
                  {
LABEL_224:
                    v90 = 0;
                    goto LABEL_225;
                  }
LABEL_207:
                  --v86;
LABEL_208:
                  LODWORD(v436) = v86;
LABEL_209:
                  v87 -= 24;
                  if (!v87)
                    goto LABEL_212;
                  break;
                default:
                  goto LABEL_209;
              }
            }
          }
          v86 = 0;
LABEL_212:
          v90 = v86 == 0;
LABEL_225:
          a3 = v417;
          if (v435 != (char *)&v436 + 8)
            free(v435);
          if (v90)
          {
            if (*(_DWORD *)&v451[8])
            {
              v94 = 0;
              v95 = 0;
              v96 = 0;
              v97 = *(unsigned int **)v451;
              v98 = *(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8];
              v99 = *(_QWORD *)v451 + 24;
              v100 = 24 * *(unsigned int *)&v451[8];
              v101 = (unsigned int *)v98;
              do
              {
                v102 = *(unsigned __int16 *)(v99 - 8);
                if (v102 == 1)
                {
                  if (v94)
                  {
                    *(_WORD *)(v99 - 8) = 65;
                    v95 = 1;
                    *(_DWORD *)(v99 - 20) = 1;
                  }
                  else
                  {
                    if ((v95 & 1) != 0)
                    {
                      v415 = v96;
                      if (*((_WORD *)v97 + 8) == 23)
                      {
                        v413 = *v97;
                        v105 = sub_22F141A3C(*v101, 0, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
                        v106 = v446;
                        if (v446 >= (unint64_t)HIDWORD(v446))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v106 = v446;
                        }
                        *((_QWORD *)v445 + v106) = v413 | (v105 << 32);
                        LODWORD(v446) = v446 + 1;
                        v101 = (unsigned int *)v98;
                      }
                      v435 = 0;
                      *(_QWORD *)&v436 = 0;
                      DWORD2(v436) = 21;
                      LODWORD(v435) = *v97;
                      v107 = sub_22E4EF088((uint64_t)&v442, (unint64_t)&v435, 1);
                      v108 = (char *)v442 + 24 * v443;
                      v109 = *(_OWORD *)v107;
                      *((_QWORD *)v108 + 2) = *(_QWORD *)(v107 + 16);
                      *(_OWORD *)v108 = v109;
                      LODWORD(v443) = v443 + 1;
                      sub_22F4162EC((unsigned int *)&v442, (uint64_t)v442 + 24 * v443, v97, (_BYTE *)(v99 - 24));
                      v110 = sub_22F141A3C(*(unsigned int *)(v99 - 48), 0, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
                      *(_QWORD *)&v436 = 0;
                      DWORD2(v436) = 22;
                      v414 = v110;
                      v435 = (void *)v110;
                      v111 = sub_22E4EF088((uint64_t)&v442, (unint64_t)&v435, 1);
                      v112 = (char *)v442 + 24 * v443;
                      v113 = *(_OWORD *)v111;
                      *((_QWORD *)v112 + 2) = *(_QWORD *)(v111 + 16);
                      *(_OWORD *)v112 = v113;
                      LODWORD(v443) = v443 + 1;
                      v114 = *v97;
                      v115 = DWORD2(__s);
                      if (DWORD2(__s) >= (unint64_t)HIDWORD(__s))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v115 = DWORD2(__s);
                      }
                      v116 = v415;
                      *(_QWORD *)(__s + 8 * v115) = v114 | (v414 << 32);
                      ++DWORD2(__s);
                    }
                    else
                    {
                      v117 = v97;
                      v118 = v96;
                      sub_22F4162EC((unsigned int *)&v442, (uint64_t)v442 + 24 * v443, v117, (_BYTE *)(v99 - 24));
                      v116 = v118;
                    }
                    v119 = v116 + 1;
                    v120 = sub_22E4EF088((uint64_t)&v442, v99 - 24, 1);
                    v96 = v119;
                    v95 = 0;
                    v94 = 0;
                    v121 = (char *)v442 + 24 * v443;
                    v122 = *(_OWORD *)v120;
                    *((_QWORD *)v121 + 2) = *(_QWORD *)(v120 + 16);
                    *(_OWORD *)v121 = v122;
                    LODWORD(v443) = v443 + 1;
                    v97 = (unsigned int *)v99;
                  }
                }
                else
                {
                  if (((v101 == (unsigned int *)v98) & v95) != 0)
                    v103 = (unsigned int *)(v99 - 24);
                  else
                    v103 = v101;
                  v104 = v94 - 1;
                  if (v94 == 1)
                    v104 = 0;
                  else
                    v103 = v101;
                  if (v102 == 23)
                    ++v94;
                  if (v102 == 24)
                  {
                    v101 = v103;
                    v94 = v104;
                  }
                }
                v99 += 24;
                v100 -= 24;
              }
              while (v100);
            }
            else
            {
              v96 = 0;
            }
            v123 = v446;
            if (DWORD2(__s))
            {
              v4 = v424;
              a3 = v417;
              LOBYTE(v25) = v421;
              if (!(_DWORD)v446)
              {
                if (v96 == v23)
                {
                  v131 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)(v131 + 312) = *v424;
                  *(_DWORD *)(v131 + 316) = 1259;
                  if (*(char *)(v131 + 311) < 0)
                  {
                    **(_BYTE **)(v131 + 288) = 0;
                    *(_QWORD *)(v131 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v131 + 288) = 0;
                    *(_BYTE *)(v131 + 311) = 0;
                  }
                  v427[0] = v131 + 320;
                  v427[1] = 0;
                  v427[2] = v131;
                  v428 = 1;
                  *(_BYTE *)(v131 + 320) = 0;
                  *(_DWORD *)(v131 + 664) = 0;
                  v274 = *(unsigned int *)(v131 + 776);
                  if ((_DWORD)v274)
                  {
                    v275 = *(_QWORD *)(v131 + 768);
                    v276 = 56 * v274;
                    do
                    {
                      if (*(char *)(v275 + v276 - 9) < 0)
                        operator delete(*(void **)(v275 + v276 - 32));
                      v276 -= 56;
                    }
                    while (v276);
                  }
                  *(_DWORD *)(v131 + 776) = 0;
                  if (DWORD2(__s))
                  {
                    v277 = (unint64_t *)__s;
                    v278 = 8 * DWORD2(__s);
                    do
                    {
                      v279 = *v277;
                      v280 = (void *)(*v277 | ((unint64_t)*v277 << 32));
                      BYTE12(v436) = 0;
                      *(_QWORD *)((char *)&v436 + 4) = 0;
                      v438 = 0;
                      v439 = 0x100000000000000;
                      __p = (void *)40;
                      v435 = v280;
                      LOBYTE(v436) = 0;
                      v440 = 0;
                      sub_22E6D82D0(v427, &v435);
                      if (SHIBYTE(v439) < 0)
                        operator delete(__p);
                      BYTE12(v436) = 0;
                      *(_QWORD *)((char *)&v436 + 4) = 0;
                      v438 = 0;
                      v439 = 0x100000000000000;
                      __p = (void *)41;
                      v435 = (void *)(v279 & 0xFFFFFFFF00000000 | HIDWORD(v279));
                      LOBYTE(v436) = 0;
                      v440 = 0;
                      sub_22E6D82D0(v427, &v435);
                      if (SHIBYTE(v439) < 0)
                        operator delete(__p);
                      ++v277;
                      v278 -= 8;
                    }
                    while (v278);
                  }
                  sub_22E861244((uint64_t)v451, (uint64_t)&v442);
                  sub_22E3BB0B8((uint64_t)v427);
                  v139 = 1;
                  LODWORD(v22) = v23;
                  v4 = v424;
                  a3 = v417;
                  LOBYTE(v25) = v421;
LABEL_289:
                  if (v445 != v447)
                    free(v445);
                  if ((uint64_t *)__s != &v449)
                    free((void *)__s);
                  if (v442 != (char *)&v443 + 8)
                    free(v442);
                  if (!v139)
                  {
                    v12 = 0;
                    v8 = *(_QWORD *)v423;
                    goto LABEL_401;
                  }
                  goto LABEL_296;
                }
LABEL_288:
                v139 = 0;
                goto LABEL_289;
              }
            }
            else
            {
              v4 = v424;
              a3 = v417;
              LOBYTE(v25) = v421;
            }
          }
          else
          {
            v123 = v446;
          }
          if (v123)
          {
            v124 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v124 + 312) = *v4;
            *(_DWORD *)(v124 + 316) = 1246;
            if (*(char *)(v124 + 311) < 0)
            {
              **(_BYTE **)(v124 + 288) = 0;
              *(_QWORD *)(v124 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v124 + 288) = 0;
              *(_BYTE *)(v124 + 311) = 0;
            }
            v435 = (void *)(v124 + 320);
            *(_QWORD *)&v436 = 0;
            *((_QWORD *)&v436 + 1) = v124;
            LOWORD(__p) = 1;
            *(_BYTE *)(v124 + 320) = 0;
            *(_DWORD *)(v124 + 664) = 0;
            v132 = *(unsigned int *)(v124 + 776);
            if ((_DWORD)v132)
            {
              v133 = *(_QWORD *)(v124 + 768);
              v134 = 56 * v132;
              do
              {
                if (*(char *)(v133 + v134 - 9) < 0)
                  operator delete(*(void **)(v133 + v134 - 32));
                v134 -= 56;
              }
              while (v134);
            }
            *(_DWORD *)(v124 + 776) = 0;
            a3 = v417;
            if ((_DWORD)v446)
            {
              v135 = (uint64_t *)v445;
              v136 = 8 * v446;
              do
              {
                v137 = *v135;
                v138 = v435;
                if (!v435)
                {
                  v138 = (void *)sub_22E3B8AAC(v436);
                  v435 = v138;
                }
                sub_22E4D6448((uint64_t)v138 + 336, v137, 1);
                ++v135;
                v136 -= 8;
              }
              while (v136);
            }
            sub_22E3BB0B8((uint64_t)&v435);
          }
          goto LABEL_288;
        }
      }
LABEL_296:
      if ((v25 & 1) == 0)
      {
        v21 = 0;
        goto LABEL_302;
      }
      goto LABEL_297;
    }
  }
  if ((unsigned __int16)v434 - 1 >= 2)
  {
LABEL_52:
    v37 = (unsigned __int16)v434 - 399 >= 0x29 && (unsigned __int16)v434 - 7 >= 6;
    if (!v37 || (unsigned __int16)v434 - 13 < 6 || (unsigned __int16)v434 == 1)
      goto LABEL_67;
    v32 = (llvm *)*((_QWORD *)&v433 + 1);
    if (!*((_QWORD *)&v433 + 1))
    {
      if ((unsigned __int16)v434 == 3)
      {
        v41 = *(_QWORD *)(a1 + 744);
        if (v41)
        {
          v42 = *((unsigned __int16 *)v424 + 8);
          if ((v42 - 7) >= 6)
          {
            v43 = 0;
            if ((v42 - 13) >= 6 && v42 != 1)
              v43 = *((_QWORD *)v424 + 1);
          }
          else
          {
            v43 = 0;
          }
          (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v41 + 48))(v41, v43, *(int **)v423, v22);
        }
        v25 = 1;
      }
      goto LABEL_67;
    }
    v33 = 0;
    if ((unsigned __int16)v434 - 13 >= 6)
LABEL_37:
      v33 = v32;
    v34 = sub_22E6D7128(a1, v33);
    if (!v34 || (*((_WORD *)v34 + 18) & 0x40) == 0)
    {
LABEL_67:
      v38 = sub_22E4EF088((uint64_t)v451, (unint64_t)&v433, 1);
      v39 = *(_QWORD *)v451 + 24 * *(unsigned int *)&v451[8];
      v40 = *(_OWORD *)v38;
      *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
      *(_OWORD *)v39 = v40;
      ++*(_DWORD *)&v451[8];
      goto LABEL_33;
    }
    v35 = WORD1(v434) | 4;
LABEL_66:
    WORD1(v434) = v35;
    goto LABEL_67;
  }
  if ((v25 & 1) != 0)
  {
    v44 = operator new[]();
    *(_OWORD *)v44 = v433;
    *(_QWORD *)(v44 + 16) = v434;
    v25 = 1;
    sub_22F1735E4(a1, (_BYTE *)v44, 1, 1, 1, 0);
    v45 = (unsigned __int16)v434;
    v57 = *(_DWORD *)&v451[8];
    if (!*(_DWORD *)&v451[8])
      goto LABEL_79;
    goto LABEL_80;
  }
  v59 = *(_QWORD *)(a1 + 48);
  v4 = v424;
  *(_DWORD *)(v59 + 312) = *v424;
  *(_DWORD *)(v59 + 316) = 1189;
  if (*(char *)(v59 + 311) < 0)
  {
    **(_BYTE **)(v59 + 288) = 0;
    *(_QWORD *)(v59 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v59 + 288) = 0;
    *(_BYTE *)(v59 + 311) = 0;
  }
  v8 = *(_QWORD *)v423;
  v442 = (void *)(v59 + 320);
  *(_QWORD *)&v443 = 0;
  *((_QWORD *)&v443 + 1) = v59;
  v444[0] = 1;
  *(_BYTE *)(v59 + 320) = 0;
  *(_DWORD *)(v59 + 664) = 0;
  v63 = *(unsigned int *)(v59 + 776);
  if ((_DWORD)v63)
  {
    v64 = *(_QWORD *)(v59 + 768);
    v65 = 56 * v63;
    do
    {
      if (*(char *)(v64 + v65 - 9) < 0)
        operator delete(*(void **)(v64 + v65 - 32));
      v65 -= 56;
    }
    while (v65);
  }
  *(_DWORD *)(v59 + 776) = 0;
  sub_22E3BB0B8((uint64_t)&v442);
  v66 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v66 + 312) = **(_DWORD **)v423;
  *(_DWORD *)(v66 + 316) = 1248;
  if (*(char *)(v66 + 311) < 0)
  {
    **(_BYTE **)(v66 + 288) = 0;
    *(_QWORD *)(v66 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v66 + 288) = 0;
    *(_BYTE *)(v66 + 311) = 0;
  }
  v435 = (void *)(v66 + 320);
  *(_QWORD *)&v436 = 0;
  *((_QWORD *)&v436 + 1) = v66;
  LOWORD(__p) = 1;
  *(_BYTE *)(v66 + 320) = 0;
  *(_DWORD *)(v66 + 664) = 0;
  v67 = *(unsigned int *)(v66 + 776);
  if ((_DWORD)v67)
  {
    v68 = *(_QWORD *)(v66 + 768);
    v69 = 56 * v67;
    do
    {
      if (*(char *)(v68 + v69 - 9) < 0)
        operator delete(*(void **)(v68 + v69 - 32));
      v69 -= 56;
    }
    while (v69);
  }
  *(_DWORD *)(v66 + 776) = 0;
  v70 = *((unsigned __int16 *)v424 + 8);
  if ((v70 - 7) >= 6)
  {
    v72 = (v70 - 13) < 6 || v70 == 1;
    a3 = v417;
    if (v72)
      v71 = 0;
    else
      v71 = *((_QWORD *)v424 + 1);
  }
  else
  {
    v71 = 0;
    a3 = v417;
  }
  v73 = *(unsigned __int8 *)(v66 + 320);
  *(_BYTE *)(v66 + 320 + v73 + 1) = 5;
  *(_BYTE *)(v66 + 320) = v73 + 1;
  *(_QWORD *)(v66 + 320 + 8 * v73 + 16) = v71;
  sub_22E3BB0B8((uint64_t)&v435);
  v12 = 0;
  *(_OWORD *)v424 = v433;
  *((_QWORD *)v424 + 2) = v434;
LABEL_401:
  if (*(_BYTE **)v451 != &v451[16])
    free(*(void **)v451);
  *(_WORD *)(a1 + 536) &= ~8u;
  *(_QWORD *)(a1 + 504) = 0;
  if (!v12)
    return 1;
  ++*(_DWORD *)(a1 + 2216);
LABEL_405:
  v185 = *(_WORD *)(v8 + 36);
  if ((v185 & 0x280) == 0x200)
  {
    *(_DWORD *)v451 = *(_DWORD *)v8;
    sub_22F16F250((_DWORD *)(a1 + 1984), (int *)v451);
    v185 = *(_WORD *)(v8 + 36);
  }
  *(_WORD *)(v8 + 36) = v185 | 0x80;
  v186 = *v4;
  v187 = *(_QWORD *)(a1 + 1088);
  if (v187)
  {
    if ((*(_WORD *)(a1 + 536) & 8) != 0)
    {
      *(_OWORD *)v451 = *(_OWORD *)v4;
      v191 = *((_QWORD *)v4 + 2);
      v452 = *(_OWORD *)a3;
      v192 = a3[2];
      *(_QWORD *)&v451[16] = v191;
      v453 = v192;
      v454 = (void *)(v186 | (v418 << 32));
      v193 = *(_DWORD *)(a1 + 1112);
      v194 = v451;
      v195 = *(_QWORD *)(a1 + 1104);
      if (v193 >= *(_DWORD *)(a1 + 1116))
      {
        v335 = v195 + 56 * v193 > (unint64_t)v451;
        if (v195 <= (unint64_t)v451 && v335)
        {
          v378 = &v451[-v195];
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v195 = *(_QWORD *)(a1 + 1104);
          v194 = &v378[v195];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v195 = *(_QWORD *)(a1 + 1104);
          v194 = v451;
        }
      }
      v196 = v195 + 56 * *(unsigned int *)(a1 + 1112);
      v197 = *(_OWORD *)v194;
      v198 = *((_OWORD *)v194 + 1);
      v199 = *((_OWORD *)v194 + 2);
      *(_QWORD *)(v196 + 48) = *((_QWORD *)v194 + 6);
      *(_OWORD *)(v196 + 16) = v198;
      *(_OWORD *)(v196 + 32) = v199;
      *(_OWORD *)v196 = v197;
      ++*(_DWORD *)(a1 + 1112);
    }
    else
    {
      (*(void (**)(uint64_t, unsigned int *, _QWORD *, uint64_t, unsigned int *))(*(_QWORD *)v187 + 232))(v187, v4, a3, v186 | (v418 << 32), v12);
      v188 = *(unsigned int *)(a1 + 1112);
      if ((_DWORD)v188)
      {
        v189 = 56 * v188;
        v190 = *(_QWORD *)(a1 + 1104) + 24;
        do
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1088) + 232))(*(_QWORD *)(a1 + 1088), v190 - 24, v190, *(_QWORD *)(v190 + 24), 0);
          v190 += 56;
          v189 -= 56;
        }
        while (v189);
        *(_DWORD *)(a1 + 1112) = 0;
      }
    }
  }
  v422 = v186;
  if ((*(_BYTE *)a3 & 4) != 0)
  {
    v200 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v200 + 312) = *v4;
    *(_DWORD *)(v200 + 316) = 1333;
    if (*(char *)(v200 + 311) < 0)
    {
      **(_BYTE **)(v200 + 288) = 0;
      *(_QWORD *)(v200 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v200 + 288) = 0;
      *(_BYTE *)(v200 + 311) = 0;
    }
    *(_QWORD *)v451 = v200 + 320;
    *(_QWORD *)&v451[8] = 0;
    *(_QWORD *)&v451[16] = v200;
    LOWORD(v452) = 1;
    *(_BYTE *)(v200 + 320) = 0;
    *(_DWORD *)(v200 + 664) = 0;
    v201 = *(unsigned int *)(v200 + 776);
    if ((_DWORD)v201)
    {
      v202 = *(_QWORD *)(v200 + 768);
      v203 = 56 * v201;
      do
      {
        if (*(char *)(v202 + v203 - 9) < 0)
          operator delete(*(void **)(v202 + v203 - 32));
        v203 -= 56;
      }
      while (v203);
    }
    *(_DWORD *)(v200 + 776) = 0;
    v204 = *((unsigned __int16 *)v4 + 8);
    if ((v204 - 7) < 6 || ((v204 - 13) >= 6 ? (v205 = v204 == 1) : (v205 = 1), v205))
      v262 = 0;
    else
      v262 = *((_QWORD *)v4 + 1);
    v206 = *(unsigned __int8 **)v451;
    if (!*(_QWORD *)v451)
    {
      v206 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v451[8]);
      *(_QWORD *)v451 = v206;
    }
    v206[*v206 + 1] = 5;
    v207 = *(_QWORD *)v451;
    v208 = **(_BYTE **)v451;
    **(_BYTE **)v451 = v208 + 1;
    *(_QWORD *)(v207 + 8 * v208 + 16) = v262;
    sub_22E3BB0B8((uint64_t)v451);
    v209 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v209 + 312) = *(_DWORD *)v8;
    *(_DWORD *)(v209 + 316) = 1254;
    if (*(char *)(v209 + 311) < 0)
    {
      **(_BYTE **)(v209 + 288) = 0;
      *(_QWORD *)(v209 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v209 + 288) = 0;
      *(_BYTE *)(v209 + 311) = 0;
    }
    *(_QWORD *)v451 = v209 + 320;
    *(_QWORD *)&v451[8] = 0;
    *(_QWORD *)&v451[16] = v209;
    LOWORD(v452) = 1;
    *(_BYTE *)(v209 + 320) = 0;
    *(_DWORD *)(v209 + 664) = 0;
    v210 = *(unsigned int *)(v209 + 776);
    if ((_DWORD)v210)
    {
      v211 = *(_QWORD *)(v209 + 768);
      v212 = 56 * v210;
      do
      {
        if (*(char *)(v211 + v212 - 9) < 0)
          operator delete(*(void **)(v211 + v212 - 32));
        v212 -= 56;
      }
      while (v212);
    }
    *(_DWORD *)(v209 + 776) = 0;
    v213 = *((unsigned __int16 *)v4 + 8);
    if ((v213 - 7) >= 6)
    {
      v216 = (v213 - 13) < 6 || v213 == 1;
      v215 = v417;
      if (v216)
        v214 = 0;
      else
        v214 = *((_QWORD *)v4 + 1);
    }
    else
    {
      v214 = 0;
      v215 = v417;
    }
    v217 = *(unsigned __int8 **)v451;
    if (!*(_QWORD *)v451)
    {
      v217 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v451[8]);
      *(_QWORD *)v451 = v217;
    }
    v217[*v217 + 1] = 5;
    v218 = *(_QWORD *)v451;
    v219 = **(_BYTE **)v451;
    **(_BYTE **)v451 = v219 + 1;
    *(_QWORD *)(v218 + 8 * v219 + 16) = v214;
    sub_22E3BB0B8((uint64_t)v451);
    if ((*v215 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v220 = sub_22F14FEA4((uint64_t *)(*v215 & 0xFFFFFFFFFFFFFFF8));
      v221 = v220 ? (_DWORD *)v220[2] : 0;
      if ((_DWORD *)v8 != v221)
      {
        v222 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v222 + 312) = *v221;
        *(_DWORD *)(v222 + 316) = 1255;
        if (*(char *)(v222 + 311) < 0)
        {
          **(_BYTE **)(v222 + 288) = 0;
          *(_QWORD *)(v222 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v222 + 288) = 0;
          *(_BYTE *)(v222 + 311) = 0;
        }
        *(_QWORD *)v451 = v222 + 320;
        *(_QWORD *)&v451[8] = 0;
        *(_QWORD *)&v451[16] = v222;
        LOWORD(v452) = 1;
        *(_BYTE *)(v222 + 320) = 0;
        *(_DWORD *)(v222 + 664) = 0;
        v223 = *(unsigned int *)(v222 + 776);
        if ((_DWORD)v223)
        {
          v224 = *(_QWORD *)(v222 + 768);
          v225 = 56 * v223;
          do
          {
            if (*(char *)(v224 + v225 - 9) < 0)
              operator delete(*(void **)(v224 + v225 - 32));
            v225 -= 56;
          }
          while (v225);
        }
        *(_DWORD *)(v222 + 776) = 0;
        v226 = *((unsigned __int16 *)v4 + 8);
        if ((v226 - 7) >= 6)
        {
          v228 = (v226 - 13) < 6 || v226 == 1;
          v215 = v417;
          if (v228)
            v227 = 0;
          else
            v227 = *((_QWORD *)v4 + 1);
        }
        else
        {
          v227 = 0;
          v215 = v417;
        }
        v229 = *(unsigned __int8 *)(v222 + 320);
        *(_BYTE *)(v222 + 320 + v229 + 1) = 5;
        *(_BYTE *)(v222 + 320) = v229 + 1;
        *(_QWORD *)(v222 + 320 + 8 * v229 + 16) = v227;
        sub_22E3BB0B8((uint64_t)v451);
      }
    }
    v230 = v215[2];
    if (v230)
    {
      v231 = v215[1];
      v232 = v231 + 8 * v230;
      do
      {
        v233 = *(_DWORD **)(*(_QWORD *)v231 + 16);
        if ((_DWORD *)v8 != v233)
        {
          v234 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(v234 + 312) = *v233;
          *(_DWORD *)(v234 + 316) = 1255;
          if (*(char *)(v234 + 311) < 0)
          {
            **(_BYTE **)(v234 + 288) = 0;
            *(_QWORD *)(v234 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v234 + 288) = 0;
            *(_BYTE *)(v234 + 311) = 0;
          }
          *(_QWORD *)v451 = v234 + 320;
          *(_QWORD *)&v451[8] = 0;
          *(_QWORD *)&v451[16] = v234;
          LOWORD(v452) = 1;
          *(_BYTE *)(v234 + 320) = 0;
          *(_DWORD *)(v234 + 664) = 0;
          v235 = *(unsigned int *)(v234 + 776);
          if ((_DWORD)v235)
          {
            v236 = *(_QWORD *)(v234 + 768);
            v237 = 56 * v235;
            do
            {
              if (*(char *)(v236 + v237 - 9) < 0)
                operator delete(*(void **)(v236 + v237 - 32));
              v237 -= 56;
            }
            while (v237);
          }
          *(_DWORD *)(v234 + 776) = 0;
          v4 = v424;
          v238 = *((unsigned __int16 *)v424 + 8);
          if ((v238 - 7) >= 6)
          {
            v240 = (v238 - 13) < 6 || v238 == 1;
            v8 = *(_QWORD *)v423;
            if (v240)
              v239 = 0;
            else
              v239 = *((_QWORD *)v424 + 1);
          }
          else
          {
            v239 = 0;
            v8 = *(_QWORD *)v423;
          }
          v241 = *(unsigned __int8 *)(v234 + 320);
          *(_BYTE *)(v234 + 320 + v241 + 1) = 5;
          *(_BYTE *)(v234 + 320) = v241 + 1;
          *(_QWORD *)(v234 + 320 + 8 * v241 + 16) = v239;
          sub_22E3BB0B8((uint64_t)v451);
        }
        v231 += 8;
      }
      while (v231 != v232);
    }
  }
  v242 = *(_DWORD *)(v8 + 28);
  if (v242 == 1)
  {
    v244 = *((unsigned __int16 *)v4 + 8);
    if ((v244 - 7) < 6 || ((v244 - 13) >= 6 ? (v245 = v244 == 1) : (v245 = 1), v245))
      v263 = 0;
    else
      v263 = (llvm *)*((_QWORD *)v4 + 1);
    v246 = *(_QWORD *)(v8 + 16);
    v247 = *(unsigned __int16 *)(v246 + 16);
    if ((v247 - 7) >= 6 && (v247 - 13) >= 6 && v247 != 1)
    {
      v264 = *(llvm **)(v246 + 8);
      if (v264)
      {
        if ((*((_BYTE *)v264 + 4) & 8) != 0)
          (*(void (**)(_QWORD, llvm *))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120), v264);
        v265 = sub_22E6D7128(a1, v264);
        if (v265)
        {
          if (v264 != v263 && (*((_WORD *)v265 + 18) & 0x40) == 0)
            goto LABEL_496;
        }
        if ((*(_WORD *)(v8 + 36) & 2) != 0)
        {
          v266 = *(_QWORD *)(v8 + 8);
          v267 = *(unsigned int *)(v8 + 24);
          if ((_DWORD)v267)
          {
            v268 = 8 * v267;
            v269 = *(llvm ***)(v8 + 8);
            while (*v269 != v264)
            {
              ++v269;
              v268 -= 8;
              if (!v268)
              {
                v269 = (llvm **)(v266 + 8 * v267);
                break;
              }
            }
          }
          else
          {
            v269 = *(llvm ***)(v8 + 8);
          }
          if (v267 != ((uint64_t)v269 - v266) >> 3)
          {
LABEL_496:
            sub_22F17346C(a1);
            return 0;
          }
        }
      }
    }
    if (v12)
    {
      v249 = *((_QWORD *)v12 + 1);
      v250 = -1431655765 * ((unint64_t)(*((_QWORD *)v12 + 2) - v249) >> 3);
      if ((_DWORD)v250)
      {
        v251 = (_QWORD *)(v249 + 8);
        do
        {
          *v251 = *(v251 - 1);
          v251 += 3;
          --v250;
        }
        while (v250);
      }
      *((_QWORD *)v12 + 4) = *(_QWORD *)(a1 + 2144);
      *(_QWORD *)(a1 + 2144) = v12;
    }
    v252 = *((_WORD *)v4 + 9);
    v253 = *(__int128 **)(v8 + 16);
    v254 = *v253;
    v255 = *((_QWORD *)v253 + 2);
    *((_QWORD *)v4 + 2) = v255;
    *(_OWORD *)v4 = v254;
    *((_WORD *)v4 + 9) = WORD1(v255) & 0xFFFC | v252 & 3;
    v256 = *(_QWORD *)(a1 + 88);
    v257 = v4[1];
    *(_QWORD *)v451 = *v4 | (unint64_t)(v422 << 32);
    *(_QWORD *)&v451[8] = v418 | 0x100000000;
    *v4 = sub_22F1E1CA0(v256, (uint64_t *)v451, v257, 0, 0);
    v258 = *((unsigned __int16 *)v4 + 8);
    if ((v258 - 7) >= 6 && (v258 - 13) >= 6 && v258 != 1)
    {
      v259 = (llvm *)*((_QWORD *)v4 + 1);
      if (v259)
      {
        v260 = sub_22E6D7128(a1, v259);
        if (v260)
        {
          if ((*((_WORD *)v260 + 18) & 0x40) != 0 || v260 == (uint64_t *)v8)
          {
            *((_WORD *)v4 + 9) |= 4u;
            if (v260 != (uint64_t *)v8 || (*(_WORD *)(v8 + 36) & 2) != 0)
            {
              v261 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v261 + 312) = *v4;
              *(_DWORD *)(v261 + 316) = 1263;
              if (*(char *)(v261 + 311) < 0)
              {
                **(_BYTE **)(v261 + 288) = 0;
                *(_QWORD *)(v261 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v261 + 288) = 0;
                *(_BYTE *)(v261 + 311) = 0;
              }
              v425[0] = v261 + 320;
              v425[1] = 0;
              v425[2] = v261;
              v426 = 1;
              *(_BYTE *)(v261 + 320) = 0;
              *(_DWORD *)(v261 + 664) = 0;
              v282 = *(unsigned int *)(v261 + 776);
              if ((_DWORD)v282)
              {
                v283 = *(_QWORD *)(v261 + 768);
                v284 = 56 * v282;
                do
                {
                  if (*(char *)(v283 + v284 - 9) < 0)
                    operator delete(*(void **)(v283 + v284 - 32));
                  v284 -= 56;
                }
                while (v284);
              }
              *(_DWORD *)(v261 + 776) = 0;
              sub_22E3BB0B8((uint64_t)v425);
            }
          }
        }
      }
    }
    ++*(_DWORD *)(a1 + 2224);
    return 1;
  }
  if (v242)
    goto LABEL_496;
  if (v12)
  {
    v270 = *((_QWORD *)v12 + 1);
    v271 = -1431655765 * ((unint64_t)(*((_QWORD *)v12 + 2) - v270) >> 3);
    if ((_DWORD)v271)
    {
      v272 = (_QWORD *)(v270 + 8);
      do
      {
        *v272 = *(v272 - 1);
        v272 += 3;
        --v271;
      }
      while (v271);
    }
    *((_QWORD *)v12 + 4) = *(_QWORD *)(a1 + 2144);
    *(_QWORD *)(a1 + 2144) = v12;
  }
  *((_WORD *)v4 + 9) |= 0x10u;
  sub_22F415818(a1, (uint64_t)v4);
  result = 0;
  ++*(_DWORD *)(a1 + 2224);
  return result;
}

uint64_t sub_22F17AC70(uint64_t result, uint64_t a2)
{
  __int16 v3;
  int v4;

  v3 = *(_WORD *)(a2 + 36);
  if ((v3 & 0x280) == 0x200)
  {
    v4 = *(_DWORD *)a2;
    result = sub_22F16F250((_DWORD *)(result + 1984), &v4);
    v3 = *(_WORD *)(a2 + 36);
  }
  *(_WORD *)(a2 + 36) = v3 | 0x80;
  return result;
}

uint64_t sub_22F17ACC8(uint64_t a1, uint64_t a2, _BYTE *__src, unint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!a4)
    return 0;
  v7 = (uint64_t *)(a1 + 2344);
  v8 = *(unsigned int *)(a1 + 2352);
  v9 = *(unsigned int *)(a1 + 2356) - v8;
  sub_22F16351C(a1 + 2344, __src, &__src[24 * a4]);
  if (a4 > v9)
  {
    v10 = *(_QWORD **)(a1 + 2744);
    v13 = *(_QWORD **)(a1 + 2752);
    if (v10 != v13)
    {
      v14 = *v7;
      do
      {
        v15 = *v10;
        v16 = v10[1];
        v10 += 2;
        *(_QWORD *)(v15 + 24) = v14 + 24 * v16;
      }
      while (v10 != v13);
      v10 = v13;
    }
  }
  else
  {
    v10 = *(_QWORD **)(a1 + 2752);
  }
  *(_QWORD *)&v17 = a2;
  *((_QWORD *)&v17 + 1) = v8;
  if ((unint64_t)v10 >= *(_QWORD *)(a1 + 2760))
  {
    v11 = sub_22E4D6CC4((void **)(a1 + 2744), &v17);
  }
  else
  {
    *(_OWORD *)v10 = v17;
    v11 = v10 + 2;
  }
  *(_QWORD *)(a1 + 2752) = v11;
  return *(_QWORD *)(a1 + 2344) + 24 * v8;
}

uint64_t sub_22F17ADB4(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  uint64_t v10;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  unsigned __int8 *v70;
  size_t v71;
  unsigned __int8 v72;
  _QWORD v73[3];
  __int16 v74;
  void *v75;
  __int128 v76;
  _WORD v77[64];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  if (*(_BYTE *)(a3 + 538))
  {
    do
    {
      if ((sub_22F18FE0C(a3, (uint64_t)a1, 1) & 1) != 0)
        return 0;
      v15 = *((unsigned __int16 *)a1 + 8);
    }
    while (v15 == 4);
    if (v15 == 21)
    {
      v16 = *a1;
      if ((sub_22F18FE0C(a3, (uint64_t)a1, 1) & 1) != 0)
        return 0;
      if (*((_WORD *)a1 + 8) != 15)
      {
        v17 = *(_QWORD *)(a3 + 48);
        *(_DWORD *)(v17 + 312) = *a1;
        *(_DWORD *)(v17 + 316) = 1124;
        if (*(char *)(v17 + 311) < 0)
        {
          **(_BYTE **)(v17 + 288) = 0;
          *(_QWORD *)(v17 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v17 + 288) = 0;
          *(_BYTE *)(v17 + 311) = 0;
        }
        v73[0] = v17 + 320;
        v73[1] = 0;
        v73[2] = v17;
        v74 = 1;
        *(_BYTE *)(v17 + 320) = 0;
        *(_DWORD *)(v17 + 664) = 0;
        v42 = *(unsigned int *)(v17 + 776);
        if ((_DWORD)v42)
        {
          v43 = *(_QWORD *)(v17 + 768);
          v44 = 56 * v42;
          do
          {
            if (*(char *)(v43 + v44 - 9) < 0)
              operator delete(*(void **)(v43 + v44 - 32));
            v44 -= 56;
          }
          while (v44);
        }
        *(_DWORD *)(v17 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v73);
        return 0;
      }
LABEL_29:
      v75 = v77;
      v76 = xmmword_22F44E310;
      v72 = 0;
      v25 = 0;
      v70 = (unsigned __int8 *)sub_22F18E170(a3, (uint64_t)a1, (uint64_t *)&v75, &v72);
      v71 = v36;
      if (v72)
        goto LABEL_76;
      v37 = *a1;
      do
      {
        sub_22F18FB4C(a3, a1);
        v38 = *((unsigned __int16 *)a1 + 8);
      }
      while (v38 == 4);
      if (v38 == 22)
      {
        if ((a7 & 0xFF00) != 0)
        {
          v39 = a7 == 0;
LABEL_73:
          v25 = !v39;
LABEL_76:
          if (v75 != v77)
            free(v75);
          return v25;
        }
        v45 = sub_22F16B514(a3, *a1, &v70);
        if (v71)
        {
          v46 = v45;
          v47 = sub_22F16569C(a3, v37, v70, v71, v45, a4, a5, a6, 0, 0, 0, 0, 0, 0, 0);
          v48 = v47;
          v49 = *(_QWORD *)(a3 + 1088);
          if (v49)
          {
            if (v47)
            {
              v50 = v47;
              do
              {
                v51 = *(_QWORD *)(v50 + 8);
                v50 = v51 & 0xFFFFFFFFFFFFFFFCLL;
              }
              while ((v51 & 2) != 0 && v50);
              v52 = (sub_22F13B0E4(*(_QWORD **)(a3 + 104), v50)->n128_u16[0] >> 2) & 7;
            }
            else
            {
              v52 = 0;
            }
            (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, size_t, _BOOL8, unint64_t, uint64_t))(*(_QWORD *)v49 + 264))(v49, v37, v70, v71, v46, v48, v52);
          }
          v39 = v48 == 0;
          goto LABEL_73;
        }
      }
      else
      {
        v40 = sub_22F141A3C(v37, 0, *(_QWORD **)(a3 + 88), *(_DWORD **)(a3 + 56));
        v41 = *(_QWORD *)(a3 + 48);
        *(_DWORD *)(v41 + 312) = v40;
        *(_DWORD *)(v41 + 316) = 1117;
        if (*(char *)(v41 + 311) < 0)
        {
          **(_BYTE **)(v41 + 288) = 0;
          *(_QWORD *)(v41 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 288) = 0;
          *(_BYTE *)(v41 + 311) = 0;
        }
        v66 = v41 + 320;
        v67 = 0;
        v68 = v41;
        v69 = 1;
        *(_BYTE *)(v41 + 320) = 0;
        *(_DWORD *)(v41 + 664) = 0;
        v53 = *(unsigned int *)(v41 + 776);
        if ((_DWORD)v53)
        {
          v54 = v16;
          v55 = *(_QWORD *)(v41 + 768);
          v56 = 56 * v53;
          do
          {
            if (*(char *)(v55 + v56 - 9) < 0)
              operator delete(*(void **)(v55 + v56 - 32));
            v56 -= 56;
          }
          while (v56);
          LODWORD(v53) = *(unsigned __int8 *)(v41 + 320);
          v16 = v54;
        }
        *(_DWORD *)(v41 + 776) = 0;
        *(_BYTE *)(v41 + 321 + v53) = 5;
        *(_QWORD *)(v41 + 336 + 8 * v53) = a2;
        v57 = (v53 + 1);
        *(_BYTE *)(v41 + 321 + v57) = 4;
        *(_BYTE *)(v41 + 320) = v53 + 2;
        *(_QWORD *)(v41 + 336 + 8 * v57) = 22;
        sub_22E3BB0B8((uint64_t)&v66);
        v58 = *(_QWORD *)(a3 + 48);
        *(_DWORD *)(v58 + 312) = v16;
        *(_DWORD *)(v58 + 316) = 104;
        if (*(char *)(v58 + 311) < 0)
        {
          **(_BYTE **)(v58 + 288) = 0;
          *(_QWORD *)(v58 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v58 + 288) = 0;
          *(_BYTE *)(v58 + 311) = 0;
        }
        v59 = (unsigned __int8 *)(v58 + 320);
        v66 = v58 + 320;
        v67 = 0;
        v68 = v58;
        v69 = 1;
        *(_BYTE *)(v58 + 320) = 0;
        *(_DWORD *)(v58 + 664) = 0;
        v60 = *(unsigned int *)(v58 + 776);
        if ((_DWORD)v60)
        {
          v61 = *(_QWORD *)(v58 + 768);
          v62 = 56 * v60;
          do
          {
            if (*(char *)(v61 + v62 - 9) < 0)
              operator delete(*(void **)(v61 + v62 - 32));
            v62 -= 56;
          }
          while (v62);
          LODWORD(v60) = *v59;
        }
        *(_DWORD *)(v58 + 776) = 0;
        v59[v60 + 1] = 4;
        *(_BYTE *)(v58 + 320) = v60 + 1;
        *(_QWORD *)&v59[8 * v60 + 16] = 21;
        sub_22E3BB0B8((uint64_t)&v66);
      }
      v25 = 0;
      goto LABEL_76;
    }
    v19 = sub_22F141A3C(v10, 0, *(_QWORD **)(a3 + 88), *(_DWORD **)(a3 + 56));
    v16 = v19;
    v20 = *(_QWORD *)(a3 + 48);
    *(_DWORD *)(v20 + 312) = v19;
    *(_DWORD *)(v20 + 316) = 1117;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    v75 = (void *)(v20 + 320);
    *(_QWORD *)&v76 = 0;
    *((_QWORD *)&v76 + 1) = v20;
    v77[0] = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v26 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v26)
    {
      v64 = a7;
      v65 = a4;
      v27 = a5;
      v28 = a6;
      v29 = v19;
      v30 = *(_QWORD *)(v20 + 768);
      v31 = 56 * v26;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
      LODWORD(v26) = *(unsigned __int8 *)(v20 + 320);
      v16 = v29;
      a6 = v28;
      a5 = v27;
      a7 = v64;
      a4 = v65;
    }
    *(_DWORD *)(v20 + 776) = 0;
    *(_BYTE *)(v20 + v26 + 321) = 5;
    v32 = v75;
    v33 = *(unsigned __int8 *)v75;
    *(_BYTE *)v75 = v33 + 1;
    v32[v33 + 2] = a2;
    *((_BYTE *)v32 + (v33 + 1) + 1) = 4;
    v34 = v75;
    v35 = *(unsigned __int8 *)v75;
    *(_BYTE *)v75 = v35 + 1;
    v34[v35 + 2] = 21;
    sub_22E3BB0B8((uint64_t)&v75);
    v25 = 0;
    if (*((_WORD *)a1 + 8) == 15)
      goto LABEL_29;
  }
  else
  {
    v18 = *(_QWORD *)(a3 + 48);
    *(_DWORD *)(v18 + 312) = v10;
    *(_DWORD *)(v18 + 316) = 1106;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    v21 = (unsigned __int8 *)(v18 + 320);
    v75 = (void *)(v18 + 320);
    *(_QWORD *)&v76 = 0;
    *((_QWORD *)&v76 + 1) = v18;
    v77[0] = 1;
    *(_BYTE *)(v18 + 320) = 0;
    *(_DWORD *)(v18 + 664) = 0;
    v22 = *(unsigned int *)(v18 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v18 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
      LODWORD(v22) = *v21;
    }
    *(_DWORD *)(v18 + 776) = 0;
    v21[v22 + 1] = 5;
    *(_BYTE *)(v18 + 320) = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = a2;
    sub_22E3BB0B8((uint64_t)&v75);
    v25 = 0;
    *((_QWORD *)a1 + 1) = a2;
  }
  return v25;
}

uint64_t sub_22F17B3C4(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  __int16 v14;
  _QWORD v15[3];
  __int16 v16;

  *(_BYTE *)(result + 540) = 1;
  v2 = *(_DWORD *)(*(_QWORD *)(result + 32) + 308);
  if (v2 == 2)
  {
    v4 = *(_QWORD *)(result + 48);
    *(_DWORD *)(v4 + 312) = a2;
    *(_DWORD *)(v4 + 316) = 1112;
    if (*(char *)(v4 + 311) < 0)
    {
      **(_BYTE **)(v4 + 288) = 0;
      *(_QWORD *)(v4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 288) = 0;
      *(_BYTE *)(v4 + 311) = 0;
    }
    v13[0] = v4 + 320;
    v13[1] = 0;
    v13[2] = v4;
    v14 = 1;
    *(_BYTE *)(v4 + 320) = 0;
    *(_DWORD *)(v4 + 664) = 0;
    v5 = (_DWORD *)(v4 + 776);
    v10 = *(unsigned int *)(v4 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v4 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
    }
    v9 = v13;
  }
  else
  {
    if (v2 != 1)
      return result;
    v3 = *(_QWORD *)(result + 48);
    *(_DWORD *)(v3 + 312) = a2;
    *(_DWORD *)(v3 + 316) = 1336;
    if (*(char *)(v3 + 311) < 0)
    {
      **(_BYTE **)(v3 + 288) = 0;
      *(_QWORD *)(v3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 288) = 0;
      *(_BYTE *)(v3 + 311) = 0;
    }
    v15[0] = v3 + 320;
    v15[1] = 0;
    v15[2] = v3;
    v16 = 1;
    *(_BYTE *)(v3 + 320) = 0;
    *(_DWORD *)(v3 + 664) = 0;
    v5 = (_DWORD *)(v3 + 776);
    v6 = *(unsigned int *)(v3 + 776);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v3 + 768);
      v8 = 56 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 9) < 0)
          operator delete(*(void **)(v7 + v8 - 32));
        v8 -= 56;
      }
      while (v8);
    }
    v9 = v15;
  }
  *v5 = 0;
  return sub_22E3BB0B8((uint64_t)v9);
}

void sub_22F17B520(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  tm *v6;
  int tm_mday;
  char *v8;
  int v9;
  const void *v10;
  unsigned int v11;
  int tm_sec;
  const void *v13;
  unsigned int v14;
  void *v15;
  const char *v16;
  int32x2_t v17;
  int v18;
  int v19;
  _BYTE v20[64];
  uint64_t v21;
  time_t v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v22 = time(0);
  v6 = localtime(&v22);
  v23 = v25;
  v24 = xmmword_22F44E330;
  sub_22F242C48((uint64_t)v20, (uint64_t)&v23);
  tm_mday = v6->tm_mday;
  v8 = off_24FAC82B0[v6->tm_mon];
  v9 = v6->tm_year + 1900;
  v15 = &unk_24FAC8320;
  v16 = "\"%s %2d %4d\"";
  v17 = (int32x2_t)v8;
  v18 = tm_mday;
  v19 = v9;
  llvm::raw_ostream::operator<<();
  v10 = *(const void **)v21;
  v11 = *(_DWORD *)(v21 + 8);
  v15 = 0;
  *a1 = sub_22F19144C(*(_DWORD **)(a3 + 96), v10, v11, &v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v20);
  if (v23 != v25)
    free(v23);
  v23 = v25;
  v24 = xmmword_22F44E330;
  sub_22F242C48((uint64_t)v20, (uint64_t)&v23);
  v15 = &unk_24FAC8340;
  tm_sec = v6->tm_sec;
  v16 = "\"%02d:%02d:%02d\"";
  v17 = vrev64_s32(*(int32x2_t *)&v6->tm_min);
  v18 = tm_sec;
  llvm::raw_ostream::operator<<();
  v13 = *(const void **)v21;
  v14 = *(_DWORD *)(v21 + 8);
  v15 = 0;
  *a2 = sub_22F19144C(*(_DWORD **)(a3 + 96), v13, v14, &v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v20);
  if (v23 != v25)
    free(v23);
}

uint64_t sub_22F17B6CC(llvm::raw_ostream *a1, unsigned int *a2, uint64_t a3, unint64_t a4, int a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD), uint64_t a7)
{
  uint64_t v7;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::raw_ostream *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t (*v74)(_QWORD, _QWORD, _QWORD);
  _QWORD v77[3];
  __int16 v78;
  _QWORD v79[3];
  __int16 v80;
  _QWORD v81[3];
  __int16 v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;

  v13 = *(_WORD *)(a4 + 536);
  *(_WORD *)(a4 + 536) = v13 | 0x20;
  sub_22F18FB4C(a4, a2);
  *(_WORD *)(a4 + 536) = *(_WORD *)(a4 + 536) & 0xFFDF | v13 & 0x20;
  if (*((_WORD *)a2 + 8) == 21)
  {
    v70 = a1;
    v71 = a3;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v72 = *a2;
    v73 = 1;
    v19 = a7;
    v74 = a6;
LABEL_3:
    v20 = v18;
LABEL_4:
    v21 = v15;
LABEL_5:
    v15 = v21;
    if (a5)
    {
      sub_22F18FB4C(a4, a2);
    }
    else
    {
      v22 = *(_WORD *)(a4 + 536);
      *(_WORD *)(a4 + 536) = v22 | 0x20;
      sub_22F18FB4C(a4, a2);
      v23 = v22 & 0x20;
      a6 = v74;
      *(_WORD *)(a4 + 536) = *(_WORD *)(a4 + 536) & 0xFFDF | v23;
    }
    LODWORD(v21) = *((unsigned __int16 *)a2 + 8);
    while (1)
    {
      if ((int)v21 > 21)
      {
        if ((_DWORD)v21 == 22)
        {
          if (--v73)
            goto LABEL_4;
          if (v17)
          {
            result = llvm::raw_ostream::operator<<();
            if (v16 >= 2)
            {
              v65 = (_BYTE *)*((_QWORD *)v70 + 4);
              if ((unint64_t)v65 >= *((_QWORD *)v70 + 3))
              {
                result = llvm::raw_ostream::write(v70);
              }
              else
              {
                *((_QWORD *)v70 + 4) = v65 + 1;
                *v65 = 76;
              }
            }
          }
          else
          {
            result = llvm::raw_ostream::operator<<();
            if ((v20 & 1) == 0)
            {
              v66 = *(_QWORD *)(a4 + 48);
              *(_DWORD *)(v66 + 312) = *a2;
              *(_DWORD *)(v66 + 316) = 1181;
              if (*(char *)(v66 + 311) < 0)
              {
                **(_BYTE **)(v66 + 288) = 0;
                *(_QWORD *)(v66 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v66 + 288) = 0;
                *(_BYTE *)(v66 + 311) = 0;
              }
              v77[0] = v66 + 320;
              v77[1] = 0;
              v77[2] = v66;
              v78 = 1;
              *(_BYTE *)(v66 + 320) = 0;
              *(_DWORD *)(v66 + 664) = 0;
              v67 = *(unsigned int *)(v66 + 776);
              if ((_DWORD)v67)
              {
                v68 = *(_QWORD *)(v66 + 768);
                v69 = 56 * v67;
                do
                {
                  if (*(char *)(v68 + v69 - 9) < 0)
                    operator delete(*(void **)(v68 + v69 - 32));
                  v69 -= 56;
                }
                while (v69);
              }
              *(_DWORD *)(v66 + 776) = 0;
              result = sub_22E3BB0B8((uint64_t)v77);
            }
          }
LABEL_88:
          *((_WORD *)a2 + 8) = 7;
          return result;
        }
        if ((_DWORD)v21 == 65)
        {
          v18 = 1;
          if ((v20 & 1) == 0)
          {
            v25 = *(_QWORD *)(a4 + 48);
            *(_DWORD *)(v25 + 312) = *a2;
            *(_DWORD *)(v25 + 316) = 1182;
            if (*(char *)(v25 + 311) < 0)
            {
              **(_BYTE **)(v25 + 288) = 0;
              *(_QWORD *)(v25 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v25 + 288) = 0;
              *(_BYTE *)(v25 + 311) = 0;
            }
            v79[0] = v25 + 320;
            v79[1] = 0;
            v79[2] = v25;
            v80 = 1;
            *(_BYTE *)(v25 + 320) = 0;
            *(_DWORD *)(v25 + 664) = 0;
            v44 = *(unsigned int *)(v25 + 776);
            if ((_DWORD)v44)
            {
              v45 = *(_QWORD *)(v25 + 768);
              v46 = 56 * v44;
              do
              {
                if (*(char *)(v45 + v46 - 9) < 0)
                  operator delete(*(void **)(v45 + v46 - 32));
                v46 -= 56;
              }
              while (v46);
            }
            *(_DWORD *)(v25 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v79);
            v18 = 1;
            a6 = v74;
            v19 = a7;
          }
          goto LABEL_3;
        }
      }
      else
      {
        if ((v21 - 1) < 2)
        {
          v55 = *a2;
          v56 = *(_QWORD *)(a4 + 48);
          *(_DWORD *)(v56 + 312) = v55;
          *(_DWORD *)(v56 + 316) = 1189;
          if (*(char *)(v56 + 311) < 0)
          {
            **(_BYTE **)(v56 + 288) = 0;
            *(_QWORD *)(v56 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v56 + 288) = 0;
            *(_BYTE *)(v56 + 311) = 0;
          }
          v81[0] = v56 + 320;
          v81[1] = 0;
          v81[2] = v56;
          v82 = 1;
          *(_BYTE *)(v56 + 320) = 0;
          *(_DWORD *)(v56 + 664) = 0;
          v62 = *(unsigned int *)(v56 + 776);
          if ((_DWORD)v62)
          {
            v63 = *(_QWORD *)(v56 + 768);
            v64 = 56 * v62;
            do
            {
              if (*(char *)(v63 + v64 - 9) < 0)
                operator delete(*(void **)(v63 + v64 - 32));
              v64 -= 56;
            }
            while (v64);
          }
          *(_DWORD *)(v56 + 776) = 0;
          return sub_22E3BB0B8((uint64_t)v81);
        }
        if ((_DWORD)v21 == 21)
        {
          ++v73;
          if (v17)
          {
LABEL_21:
            v18 = 1;
            if ((v20 & 1) == 0)
            {
              v24 = *(_QWORD *)(a4 + 48);
              *(_DWORD *)(v24 + 312) = *a2;
              *(_DWORD *)(v24 + 316) = 1117;
              if (*(char *)(v24 + 311) < 0)
              {
                **(_BYTE **)(v24 + 288) = 0;
                *(_QWORD *)(v24 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v24 + 288) = 0;
                *(_BYTE *)(v24 + 311) = 0;
              }
              v83 = (unsigned __int8 *)(v24 + 320);
              v84 = 0;
              v85 = v24;
              v86 = 1;
              *(_BYTE *)(v24 + 320) = 0;
              *(_DWORD *)(v24 + 664) = 0;
              v26 = *(unsigned int *)(v24 + 776);
              if ((_DWORD)v26)
              {
                v27 = *(_QWORD *)(v24 + 768);
                v28 = 56 * v26;
                do
                {
                  if (*(char *)(v27 + v28 - 9) < 0)
                    operator delete(*(void **)(v27 + v28 - 32));
                  v28 -= 56;
                }
                while (v28);
              }
              *(_DWORD *)(v24 + 776) = 0;
              if ((v15 - 7) < 6 || (v15 - 13) < 6 || (_DWORD)v15 == 1 || !v7)
              {
                v29 = v83;
                if (!v83)
                {
                  v29 = (unsigned __int8 *)sub_22E3B8AAC(v84);
                  v83 = v29;
                }
                v30 = v15;
                v29[*v29 + 1] = 4;
                v31 = v83;
                v32 = *v83;
                v33 = v32 + 1;
                *v83 = v32 + 1;
              }
              else
              {
                v47 = v83;
                if (!v83)
                {
                  v47 = (unsigned __int8 *)sub_22E3B8AAC(v84);
                  v83 = v47;
                }
                v47[*v47 + 1] = 5;
                v31 = v83;
                v32 = *v83;
                v33 = v32 + 1;
                *v83 = v32 + 1;
                v30 = v7;
              }
              a6 = v74;
              v19 = a7;
              *(_QWORD *)&v31[8 * v32 + 16] = v30;
              v31[v33 + 1] = 4;
              v34 = v83;
              v35 = *v83;
              *v83 = v35 + 1;
              *(_QWORD *)&v34[8 * v35 + 16] = 22;
              sub_22E4D6448((uint64_t)(v34 + 336), 0x100000001 * v14, 1);
              sub_22E3BB0B8((uint64_t)&v83);
              v36 = *(_QWORD *)(a4 + 48);
              *(_DWORD *)(v36 + 312) = v72;
              *(_DWORD *)(v36 + 316) = 104;
              if (*(char *)(v36 + 311) < 0)
              {
                **(_BYTE **)(v36 + 288) = 0;
                *(_QWORD *)(v36 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v36 + 288) = 0;
                *(_BYTE *)(v36 + 311) = 0;
              }
              v37 = (unsigned __int8 *)(v36 + 320);
              v83 = (unsigned __int8 *)(v36 + 320);
              v84 = 0;
              v85 = v36;
              v86 = 1;
              *(_BYTE *)(v36 + 320) = 0;
              *(_DWORD *)(v36 + 664) = 0;
              v38 = *(unsigned int *)(v36 + 776);
              if ((_DWORD)v38)
              {
                v39 = *(_QWORD *)(v36 + 768);
                v40 = 56 * v38;
                do
                {
                  if (*(char *)(v39 + v40 - 9) < 0)
                    operator delete(*(void **)(v39 + v40 - 32));
                  v40 -= 56;
                }
                while (v40);
                v37 = v83;
                *(_DWORD *)(v36 + 776) = 0;
                a6 = v74;
                v19 = a7;
                if (!v37)
                {
                  v37 = (unsigned __int8 *)sub_22E3B8AAC(v84);
                  v83 = v37;
                }
              }
              else
              {
                *(_DWORD *)(v36 + 776) = 0;
              }
              v37[*v37 + 1] = 4;
              v41 = v83;
              v42 = *v83;
              *v83 = v42 + 1;
              *(_QWORD *)&v41[8 * v42 + 16] = 21;
              sub_22E3BB0B8((uint64_t)&v83);
              v18 = 1;
            }
            goto LABEL_3;
          }
          v18 = 1;
          if ((v20 & 1) == 0)
          {
            v43 = *(_QWORD *)(a4 + 48);
            *(_DWORD *)(v43 + 312) = *a2;
            *(_DWORD *)(v43 + 316) = 1161;
            if (*(char *)(v43 + 311) < 0)
            {
              **(_BYTE **)(v43 + 288) = 0;
              *(_QWORD *)(v43 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v43 + 288) = 0;
              *(_BYTE *)(v43 + 311) = 0;
            }
            v48 = (unsigned __int8 *)(v43 + 320);
            v83 = (unsigned __int8 *)(v43 + 320);
            v84 = 0;
            v85 = v43;
            v86 = 1;
            *(_BYTE *)(v43 + 320) = 0;
            *(_DWORD *)(v43 + 664) = 0;
            v49 = *(unsigned int *)(v43 + 776);
            if ((_DWORD)v49)
            {
              v50 = *(_QWORD *)(v43 + 768);
              v51 = 56 * v49;
              do
              {
                if (*(char *)(v50 + v51 - 9) < 0)
                  operator delete(*(void **)(v50 + v51 - 32));
                v51 -= 56;
              }
              while (v51);
              v48 = v83;
              *(_DWORD *)(v43 + 776) = 0;
              a6 = v74;
              if (!v48)
              {
                v48 = (unsigned __int8 *)sub_22E3B8AAC(v84);
                v83 = v48;
              }
            }
            else
            {
              *(_DWORD *)(v43 + 776) = 0;
            }
            v48[*v48 + 1] = 5;
            v52 = v83;
            v53 = *v83;
            *v83 = v53 + 1;
            *(_QWORD *)&v52[8 * v53 + 16] = v71;
            sub_22E3BB0B8((uint64_t)&v83);
            v17 = 0;
            v18 = 1;
          }
          goto LABEL_3;
        }
      }
      if (v17)
        goto LABEL_21;
      LOBYTE(v83) = 0;
      v16 = a6(v19, a2, &v83);
      v14 = *a2;
      v7 = *((_QWORD *)a2 + 1);
      v21 = *((unsigned __int16 *)a2 + 8);
      v17 = 1;
      v15 = v21;
      if (!(_BYTE)v83)
        goto LABEL_5;
    }
  }
  v54 = *(_QWORD *)(a4 + 48);
  *(_DWORD *)(v54 + 312) = *a2;
  *(_DWORD *)(v54 + 316) = 1117;
  if (*(char *)(v54 + 311) < 0)
  {
    **(_BYTE **)(v54 + 288) = 0;
    *(_QWORD *)(v54 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v54 + 288) = 0;
    *(_BYTE *)(v54 + 311) = 0;
  }
  v83 = (unsigned __int8 *)(v54 + 320);
  v84 = 0;
  v85 = v54;
  v86 = 1;
  *(_BYTE *)(v54 + 320) = 0;
  *(_DWORD *)(v54 + 664) = 0;
  v57 = *(unsigned int *)(v54 + 776);
  if ((_DWORD)v57)
  {
    v58 = *(_QWORD *)(v54 + 768);
    v59 = 56 * v57;
    do
    {
      if (*(char *)(v58 + v59 - 9) < 0)
        operator delete(*(void **)(v58 + v59 - 32));
      v59 -= 56;
    }
    while (v59);
    LODWORD(v57) = *(unsigned __int8 *)(v54 + 320);
  }
  *(_DWORD *)(v54 + 776) = 0;
  *(_BYTE *)(v54 + 321 + v57) = 5;
  *(_QWORD *)(v54 + 336 + 8 * v57) = a3;
  v60 = (v57 + 1);
  *(_BYTE *)(v54 + 321 + v60) = 4;
  *(_BYTE *)(v54 + 320) = v57 + 2;
  *(_QWORD *)(v54 + 336 + 8 * v60) = 21;
  result = sub_22E3BB0B8((uint64_t)&v83);
  if (*((unsigned __int16 *)a2 + 8) - 1 >= 2)
  {
    result = llvm::raw_ostream::operator<<();
    goto LABEL_88;
  }
  return result;
}

_QWORD *sub_22F17BEB0(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *result;
  int v6;
  unsigned int v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22E3B9914((uint64_t)a1, a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - a1[3] <= v7 >> 3)
  {
LABEL_9:
    sub_22F17BF7C((uint64_t)a1, v7);
    v8 = 0;
    sub_22E3B9914((uint64_t)a1, a2, &v8);
    result = v8;
  }
  ++a1[2];
  if (*result != -4096)
    --a1[3];
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_22F17BF7C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F17C03C((_QWORD *)a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F17C03C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = (uint64_t)result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_22E3B9914(v4, v8 - 1, &v11);
        v9 = v11;
        *v11 = *(v8 - 1);
        v9[1] = *v8;
        *v8 = 0;
        ++*(_DWORD *)(v4 + 8);
        result = sub_22E8BB820(v8);
      }
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t sub_22F17C0FC(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      v3 = result;
      v4 = a2;
      if (*(unsigned int *)(result + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(v3 + 8);
      }
      result = v3;
      LODWORD(a2) = v4;
      if (v4 != v2)
      {
        bzero((void *)(*(_QWORD *)v3 + 24 * v2), 24 * ((24 * (v4 - v2) - 24) / 0x18) + 24);
        result = v3;
        LODWORD(a2) = v4;
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_22F17C19C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
    return sub_22F17C2CC(v2, (char *)(*(_QWORD *)(result + 16) + 16), **(unsigned int **)(result + 16));
  return result;
}

uint64_t sub_22F17C1E0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  __int16 v13;

  v4 = *(unsigned __int16 *)(a1 + 16);
  v5 = (v4 - 399) >= 0x29 && (v4 - 7) >= 6;
  if (!v5 || ((v4 - 13) >= 6 ? (v6 = v4 == 1) : (v6 = 1), v6 || (v10 = *(_QWORD *)(a1 + 8)) == 0))
  {
    *(_DWORD *)(a2 + 312) = *(_DWORD *)a1;
    *(_DWORD *)(a2 + 316) = a3;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    v12[0] = a2 + 320;
    v12[1] = 0;
    v12[2] = a2;
    v13 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v7 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a2 + 768);
      v9 = 56 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
    }
    *(_DWORD *)(a2 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v12);
    return 0;
  }
  return v10;
}

BOOL sub_22F17C2CC(uint64_t a1, char *__s1, unint64_t a3)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  char v38;
  BOOL v39;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v56;
  unsigned int v57;
  char v58;
  unint64_t v60;
  BOOL v61;
  char v63;
  BOOL v64;
  char v66;
  BOOL v67;
  BOOL v68;
  char v70;
  BOOL v71;
  BOOL v72;
  char v74;
  BOOL v75;
  BOOL v76;
  int v78;
  BOOL v79;
  BOOL v80;
  char v82;
  char v83;
  int v84;
  char v85;
  char v86;
  char v88;
  BOOL v89;
  BOOL v91;
  BOOL v92;
  BOOL v94;
  BOOL v95;
  uint64_t *v97;
  char v98;
  BOOL v99;
  BOOL v103;
  BOOL v104;
  int v105;
  int v106;
  char v107;
  unsigned int v109;
  uint64_t v110;
  char v111;
  int v112;
  int v113;
  char v114;
  char v116;
  uint64_t v118;
  char v119;
  int v120;
  char v121;
  char v123;
  BOOL v124;
  char v126;
  int v128;
  char v129;
  int v131;
  char v132;
  BOOL v133;
  char v135;
  BOOL v136;
  BOOL v137;
  char v139;
  BOOL v140;
  BOOL v141;
  char v143;
  unsigned int v144;
  char v147;
  BOOL v148;
  char v150;
  BOOL v152;
  char v154;
  BOOL v155;
  BOOL v156;
  char v157;
  BOOL v158;
  char v160;
  BOOL v161;
  char v163;
  BOOL v164;
  char v166;
  BOOL v167;
  BOOL v168;
  int v170;
  char v171;
  char v172;
  BOOL v173;
  char v175;
  BOOL v176;
  char v178;
  char v180;
  BOOL v181;
  BOOL v182;
  uint64_t v184;
  char v185;
  int v187;
  BOOL v188;
  char v190;
  BOOL v191;
  _BOOL4 v193;
  _BOOL4 v194;
  BOOL v195;
  BOOL v197;
  char v199;
  char v202;
  BOOL v203;
  char v205;
  unsigned int v207;
  uint64_t v208;
  int v209;
  int v211;
  BOOL v212;
  BOOL v213;
  char v215;
  BOOL v216;
  int v218;
  BOOL v219;
  BOOL v220;
  _BOOL4 v221;
  _BOOL4 v224;
  char v227;
  BOOL v228;
  BOOL v229;
  int v231;
  char v233;
  BOOL v234;
  BOOL v235;
  int v236;
  char v237;
  _BOOL4 v238;
  BOOL v239;
  BOOL v240;
  int v241;
  BOOL v242;
  BOOL v243;
  int v245;
  BOOL v246;
  BOOL v247;
  _BOOL4 v249;
  BOOL v250;
  char v252;
  BOOL v253;
  int v255;
  int v256;
  BOOL v257;
  BOOL v258;
  char v260;
  BOOL v261;
  BOOL v263;
  BOOL v264;
  BOOL v266;
  BOOL v269;
  BOOL v270;
  BOOL v272;
  BOOL v273;
  char v277;
  BOOL v278;
  BOOL v282;
  unsigned int v283;
  int v284;
  int v286;
  BOOL v287;
  _BOOL4 v289;
  BOOL v290;
  BOOL v292;
  _BOOL4 v293;
  BOOL v294;
  int v296;
  BOOL v297;
  BOOL v298;
  int v299;
  BOOL v300;
  BOOL v301;
  BOOL v302;
  BOOL v304;
  _BOOL4 v306;
  BOOL v307;
  BOOL v308;
  BOOL v310;
  BOOL v312;
  BOOL v314;
  _BOOL4 v316;
  BOOL v317;
  char v319;
  BOOL v320;
  BOOL v321;
  BOOL v322;
  BOOL v323;
  BOOL v324;
  int v325;
  BOOL v326;
  unsigned __int8 *v329;
  unint64_t v332;
  uint64_t v335;
  char v336;
  BOOL v337;
  int v339;
  char v340;
  int v341;
  BOOL v342;
  BOOL v344;
  BOOL v346;
  BOOL v350;
  BOOL v352;
  BOOL v354;
  BOOL v356;
  char v358;
  _BOOL4 v360;
  _BOOL4 v362;
  BOOL v364;
  BOOL v366;
  _BOOL4 v367;
  BOOL v370;
  char v372;
  char v374;
  char v376;
  BOOL v379;
  BOOL v380;
  BOOL v381;
  BOOL v382;
  BOOL v383;
  BOOL v384;
  BOOL v385;
  unint64_t v387;
  BOOL v389;
  BOOL v391;
  char v392;
  BOOL v393;
  BOOL v394;
  uint64_t v396;
  BOOL v402;
  int v403;
  char v408;
  int v410;
  int v415;
  unint64_t v416;
  uint64_t v417;
  int v418;
  int v421;
  uint64_t v422;
  uint64_t v423;
  char v424;
  BOOL v425;
  int v426;
  char v429;
  char v431;
  BOOL v432;
  uint64_t v437;
  BOOL v438;
  char v440;
  uint64_t v443;
  BOOL v444;
  BOOL v445;
  unint64_t v450;
  unint64_t v451;
  int v452;
  unint64_t v453;
  unint64_t v454;
  int v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  int v459;
  uint64_t v460;
  _BOOL4 v461;
  int v462;
  char v463;
  BOOL v464;
  BOOL v465;
  uint64_t v469;
  BOOL v470;
  char v472;
  char v473;
  int v474;
  BOOL v475;
  char v476;
  _QWORD *v477;
  unint64_t v478;
  BOOL v480;
  BOOL v482;
  _QWORD *v489;
  unint64_t *v490;
  uint64_t v491;
  unsigned __int8 *v492;
  unint64_t v493;
  int v494;
  unint64_t v495;
  int v496;
  char v497;
  _BOOL4 v498;
  uint64_t *v499;
  _QWORD *v500;
  uint64_t v501;
  uint64_t v502;
  _BOOL4 v503;
  char v504;
  int v505;
  char v506;
  uint64_t v507;
  int v508;
  _BOOL4 v509;
  int v510;
  int v511;
  int v512;
  int v513;
  _BOOL4 v515;
  _BOOL4 v516;
  _BOOL4 v517;
  int v518;
  uint64_t *v519;
  uint64_t v520;

  v3 = __s1;
  v519 = *(uint64_t **)(a1 + 56);
  v520 = a3;
  v515 = a3 > 1;
  if (a3 <= 1)
  {
    v15 = 0;
    v493 = v519[26];
    v499 = v519 + 26;
    goto LABEL_60;
  }
  v4 = a1;
  if (*(_WORD *)__s1 == 24415)
  {
    v5 = a3 - 4;
    if (a3 >= 4 && *(_WORD *)&__s1[a3 - 2] == 24415)
    {
      v3 = __s1 + 2;
      if (a3 - 2 < v5)
        v5 = a3 - 2;
      v520 = v5;
    }
  }
  v499 = v519 + 26;
  v493 = v519[26];
  if (v520 == 26)
  {
    if (*(_QWORD *)v3 == 0x74616C7563657073
      && *((_QWORD *)v3 + 1) == 0x64616F6C5F657669
      && *((_QWORD *)v3 + 2) == 0x696E65647261685FLL
      && *((_WORD *)v3 + 12) == 26478)
    {
      v15 = ((unint64_t)v519[26] >> 37) & 1 | 0x100;
    }
    else
    {
      v11 = *(_QWORD *)v3 == 0x7475626972747461
         && *((_QWORD *)v3 + 1) == 0x6E6F635F736E5F65
         && *((_QWORD *)v3 + 2) == 0x65735F73656D7573
         && *((_WORD *)v3 + 12) == 26220;
      v15 = 257;
      if (!v11)
      {
        if (*(_QWORD *)v3 ^ 0x7475626972747461 | *((_QWORD *)v3 + 1) ^ 0x695F636A626F5F65 | *((_QWORD *)v3 + 2) ^ 0x73756E755F726176 | *((unsigned __int16 *)v3 + 12) ^ 0x6465)
          v15 = 0;
        else
          v15 = 257;
      }
      if (v15 <= 0xFF)
      {
        v12 = *((_WORD *)v3 + 12) == 29540 && *((_QWORD *)v3 + 2) == 0x6C6569665F6E6F5FLL;
        v13 = v12 && *((_QWORD *)v3 + 1) == 0x646573756E755F65;
        if (v13 && *(_QWORD *)v3 == 0x7475626972747461)
          v15 = 257;
      }
    }
    v520 = 26;
LABEL_60:
    if (a3 >= 2 && v15 <= 0xFF)
    {
      v25 = *((_WORD *)v3 + 12) == 25450 && *((_QWORD *)v3 + 2) == 0x626F5F66695F6573;
      v26 = v25 && *((_QWORD *)v3 + 1) == 0x6F6E676169645F65;
      if (v26 && *(_QWORD *)v3 == 0x7475626972747461)
        v15 = 257;
    }
    v490 = (unint64_t *)(v519 + 32);
    v492 = (unsigned __int8 *)(v519 + 33);
    v500 = (uint64_t *)((char *)v519 + 20);
    if (a3 >= 2 && v15 <= 0xFF)
    {
      if (*((_WORD *)v3 + 12) == 29541
        && *((_QWORD *)v3 + 2) == 0x7475626972747461
        && *((_QWORD *)v3 + 1) == 0x5F7974656661735FLL
        && *(_QWORD *)v3 == 0x6461657268745F63)
      {
        v15 = 257;
      }
      v515 = 1;
    }
    LOBYTE(v495) = *(unint64_t *)((char *)v519 + 20) >> 34;
    v31 = 0;
    v32 = 0;
    v498 = 0;
    v33 = 0;
    v501 = 0;
    v502 = 0;
    v504 = 0;
    v34 = 0;
    v496 = 0;
    v506 = 0;
    v510 = 0;
    v507 = 0;
    v23 = 0;
    v17 = 0;
    v494 = 0;
    v518 = 0;
    v497 = 0;
    v508 = 0;
    v491 = 0;
    v503 = 0;
    v35 = v519[1];
    v489 = v519 + 1;
    v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
LABEL_88:
    v37 = v15 < 0x100;
    goto LABEL_89;
  }
  v16 = v519[32];
  v490 = (unint64_t *)(v519 + 32);
  v492 = (unsigned __int8 *)(v519 + 33);
  switch(v520)
  {
    case 14:
      if (*(_QWORD *)v3 == 0x6E61735F6B61656CLL && *(_QWORD *)(v3 + 6) == 0x72657A6974696E61)
      {
        v494 = 0;
        LODWORD(v507) = 0;
        v17 = 0;
        v23 = 0;
        v510 = 0;
        v19 = 0;
        v20 = 0;
        v15 = (v16 >> 14) & 1 | 0x100;
      }
      else
      {
        v494 = 0;
        LODWORD(v507) = 0;
        v17 = 0;
        v23 = 0;
        v510 = 0;
        v19 = 0;
        v20 = 0;
        if (*(_QWORD *)v3 ^ 0x6E5F656D75737361 | *(_QWORD *)(v3 + 6) ^ 0x6C6C756E6E6F6E5FLL)
          v15 = 0;
        else
          v15 = 257;
      }
      v18 = 1;
      v24 = 14;
      break;
    case 17:
      v494 = 0;
      LODWORD(v507) = 0;
      v17 = 0;
      v18 = 0;
      v510 = 0;
      v19 = 0;
      v20 = 0;
      if (v3[16] == 114 && *((_QWORD *)v3 + 1) == 0x657A6974696E6173 && *(_QWORD *)v3 == 0x5F73736572646461)
        v15 = ((v519[32] & 9) != 0) | 0x100;
      else
        v15 = 0;
      v23 = 1;
      v24 = 17;
      break;
    case 19:
      v103 = *(_QWORD *)v3 == 0x7365726464617768
          && *((_QWORD *)v3 + 1) == 0x6974696E61735F73
          && *(_QWORD *)(v3 + 11) == 0x72657A6974696E61;
      v494 = 0;
      LODWORD(v507) = 0;
      v23 = 0;
      v18 = 0;
      v510 = 0;
      v19 = 0;
      v20 = 0;
      if (v103)
        v15 = ((v519[32] & 0x30) != 0) | 0x100;
      else
        v15 = 0;
      v17 = 1;
      v24 = 19;
      break;
    case 11:
      v494 = 0;
      v17 = 0;
      v23 = 0;
      v18 = 0;
      v510 = 0;
      v19 = 0;
      v20 = 0;
      if (*(_QWORD *)(v3 + 3) == 0x706165685F676174 && *(_QWORD *)v3 == 0x685F6761746D656DLL)
        v15 = (v16 >> 7) & 1 | 0x100;
      else
        v15 = 0;
      LODWORD(v507) = 1;
      v24 = 11;
      break;
    case 12:
      v104 = *(_QWORD *)v3 == 0x735F6761746D656DLL && *((_DWORD *)v3 + 2) == 1801675124;
      v494 = 0;
      LODWORD(v507) = 0;
      v17 = 0;
      v23 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if (v104)
        v15 = (v16 >> 6) & 1 | 0x100;
      else
        v15 = 0;
      v510 = 1;
      v24 = 12;
      break;
    default:
      v350 = v520 == 15;
      if (v520 == 15)
      {
        if (*(_QWORD *)v3 != 0x736E695F79617278 || *(_QWORD *)(v3 + 7) != 0x746E656D75727473)
        {
          v494 = 0;
          LODWORD(v507) = 0;
          v17 = 0;
          v23 = 0;
          v18 = 0;
          v510 = 0;
          v20 = 0;
          v15 = 0;
          v19 = 1;
          v24 = 15;
          break;
        }
        v421 = 0;
        v494 = 0;
        v422 = ((unint64_t)v519[24] >> 41) & 1;
        v423 = 15;
LABEL_1434:
        v520 = v423;
        v496 = v421;
        v506 = v350;
        v31 = 0;
        v32 = 0;
        v37 = 0;
        v498 = 0;
        v33 = 0;
        v501 = 0;
        v502 = 0;
        v504 = 0;
        v34 = 0;
        v510 = 0;
        v515 = 0;
        v23 = 0;
        v17 = 0;
        v507 = 0;
        v518 = 0;
        v497 = 0;
        v508 = 0;
        v491 = 0;
        v503 = 0;
        v15 = v422 | 0x100;
        LOBYTE(v495) = *(unint64_t *)((char *)v519 + 20) >> 34;
        v500 = (uint64_t *)((char *)v519 + 20);
        v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
        v35 = v519[1];
        v489 = v519 + 1;
        goto LABEL_89;
      }
      if (v520 == 28)
      {
        if (*(_QWORD *)v3 == 0x656E696665646E75
          && *((_QWORD *)v3 + 1) == 0x6976616865625F64
          && *((_QWORD *)v3 + 2) == 0x74696E61735F726FLL
          && *((_DWORD *)v3 + 6) == 1919253097)
        {
          v421 = 0;
          LODWORD(v422) = (v16 & 0x1EFC3DF8000) != 0;
          v494 = 1;
          v423 = 28;
          goto LABEL_1434;
        }
        v402 = *(_QWORD *)v3 == 0x7475626972747461
            && *((_QWORD *)v3 + 1) == 0x616C696176615F65
            && *((_QWORD *)v3 + 2) == 0x735F7974696C6962
            && *((_DWORD *)v3 + 6) == 1952868727;
        v403 = !v402;
        if (v402)
        {
          v15 = 257;
        }
        else
        {
          v15 = 0;
          if (*(_QWORD *)v3 == 0x7475626972747461
            && *((_QWORD *)v3 + 1) == 0x64656B6361705F65
            && *((_QWORD *)v3 + 2) == 0x5F726F746365765FLL
            && *((_DWORD *)v3 + 6) == 1701869940)
          {
            LODWORD(v507) = 0;
            v17 = 0;
            v23 = 0;
            v18 = 0;
            v510 = 0;
            v19 = 0;
            v20 = 0;
            v15 = 257;
LABEL_1480:
            v494 = 1;
            v24 = 28;
            break;
          }
        }
        if (v403)
        {
          LODWORD(v507) = 0;
          v17 = 0;
          v23 = 0;
          v18 = 0;
          v510 = 0;
          v19 = 0;
          v20 = 0;
          if (*((_DWORD *)v3 + 6) == 2037148013
            && *((_QWORD *)v3 + 2) == 0x61665F646F687465
            && *((_QWORD *)v3 + 1) == 0x6D5F636A626F5F65
            && *(_QWORD *)v3 == 0x7475626972747461)
          {
            v15 = 257;
          }
        }
        else
        {
          LODWORD(v507) = 0;
          v17 = 0;
          v23 = 0;
          v18 = 0;
          v510 = 0;
          v19 = 0;
          v20 = 0;
        }
        goto LABEL_1480;
      }
      switch(v520)
      {
        case 18:
          if (*(_QWORD *)v3 != 0x6567617265766F63
            || *((_QWORD *)v3 + 1) != 0x7A6974696E61735FLL
            || *((_WORD *)v3 + 8) != 29285)
          {
            v494 = 0;
            LODWORD(v507) = 0;
            v17 = 0;
            v23 = 0;
            v18 = 0;
            v510 = 0;
            v19 = 0;
            v15 = 0;
            v20 = 1;
            v24 = 18;
            goto LABEL_1377;
          }
          v494 = 0;
          LODWORD(v422) = *((unsigned __int8 *)v519 + 272);
          v421 = 1;
          v423 = 18;
          goto LABEL_1434;
        case 22:
          v437 = *(_QWORD *)v3 ^ 0x7475626972747461 | *((_QWORD *)v3 + 1) ^ 0x616C696176615F65 | *(_QWORD *)(v3 + 14) ^ 0x7974696C6962616CLL;
          if (v437)
            v15 = 0;
          else
            v15 = 257;
          if (v437)
          {
            v438 = *(_QWORD *)(v3 + 14) == 0x656C626164616F6CLL && *((_QWORD *)v3 + 1) == 0x6F6C7265766F5F65;
            if (v438 && *(_QWORD *)v3 == 0x7475626972747461)
              v15 = 257;
          }
          v440 = *(unint64_t *)((char *)v519 + 20) >> 34;
          v35 = v519[1];
          v489 = v519 + 1;
          v500 = (uint64_t *)((char *)v519 + 20);
          v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
          if (v15 > 0xFF)
          {
            v497 = 0;
            LODWORD(v501) = 0;
            v34 = 0;
          }
          else
          {
            v497 = 0;
            LODWORD(v501) = 0;
            v34 = 0;
            if (*(_QWORD *)(v3 + 14) == 0x656D616E5F746669
              && *((_QWORD *)v3 + 1) == 0x666977735F64657ALL
              && *(_QWORD *)v3 == 0x696C6172656E6567)
            {
              v15 = 257;
            }
          }
          v518 = 1;
          v460 = 22;
          goto LABEL_1578;
        case 27:
          v443 = *(_QWORD *)v3 ^ 0x7475626972747461 | *((_QWORD *)v3 + 1) ^ 0x7A796C616E615F65 | *((_QWORD *)v3 + 2) ^ 0x7465726F6E5F7265 | *(_QWORD *)(v3 + 19) ^ 0x6E72757465726F6ELL;
          if (v443)
            v15 = 0;
          else
            v15 = 257;
          if (v443)
          {
            v444 = *(_QWORD *)(v3 + 19) == 0x736F76745F797469 && *((_QWORD *)v3 + 2) == 0x745F7974696C6962;
            v445 = v444 && *((_QWORD *)v3 + 1) == 0x616C696176615F65;
            if (v445 && *(_QWORD *)v3 == 0x7475626972747461)
              v15 = 257;
          }
          v440 = *(unint64_t *)((char *)v519 + 20) >> 34;
          v35 = v519[1];
          v489 = v519 + 1;
          v500 = (uint64_t *)((char *)v519 + 20);
          v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
          if (v15 > 0xFF)
          {
            v497 = 0;
            v518 = 0;
            v34 = 0;
          }
          else
          {
            v497 = 0;
            v518 = 0;
            v34 = 0;
            if (*(_QWORD *)(v3 + 19) == 0x746C757365725F65
              && *((_QWORD *)v3 + 2) == 0x7365725F656C6261
              && *((_QWORD *)v3 + 1) == 0x6C6C756E5F797469
              && *(_QWORD *)v3 == 0x6C6962616C6C756ELL)
            {
              v15 = 257;
            }
          }
          LODWORD(v501) = 1;
          v460 = 27;
LABEL_1578:
          v520 = v460;
          goto LABEL_1583;
        case 30:
          v450 = 0x6174747269627574;
          v451 = bswap64(*(_QWORD *)v3);
          if (v451 != 0x6174747269627574)
            goto LABEL_1585;
          v450 = 0x655F617661696C61;
          v451 = bswap64(*((_QWORD *)v3 + 1));
          if (v451 != 0x655F617661696C61)
            goto LABEL_1585;
          v451 = bswap64(*((_QWORD *)v3 + 2));
          v450 = 0x62696C6974795F77;
          if (v451 == 0x62696C6974795F77)
          {
            v450 = 0x5F77617463686F73;
            v451 = bswap64(*(_QWORD *)(v3 + 22));
            if (v451 == 0x5F77617463686F73)
            {
              v452 = 0;
              HIDWORD(v501) = 0;
              v508 = 0;
              v504 = 1;
              goto LABEL_1561;
            }
          }
          v4 = a1;
LABEL_1585:
          HIDWORD(v501) = 0;
          v508 = 0;
          if (v451 < v450)
            v452 = -1;
          else
            v452 = 1;
          v504 = 1;
          goto LABEL_1599;
        case 31:
          v457 = 0x6174747269627574;
          v458 = bswap64(*(_QWORD *)v3);
          if (v458 != 0x6174747269627574)
            goto LABEL_1596;
          v457 = 0x655F617661696C61;
          v458 = bswap64(*((_QWORD *)v3 + 1));
          if (v458 != 0x655F617661696C61)
            goto LABEL_1596;
          v457 = 0x62696C6974795F62;
          v458 = bswap64(*((_QWORD *)v3 + 2));
          if (v458 == 0x62696C6974795F62)
          {
            v457 = 0x6272696467656F73;
            v458 = bswap64(*(_QWORD *)(v3 + 23));
            if (v458 == 0x6272696467656F73)
            {
              v452 = 0;
              v504 = 0;
              HIDWORD(v501) = 0;
              v508 = 0;
              goto LABEL_1561;
            }
          }
          v4 = a1;
LABEL_1596:
          v504 = 0;
          HIDWORD(v501) = 0;
          v508 = 0;
          if (v458 < v457)
            v452 = -1;
          else
            v452 = 1;
          goto LABEL_1599;
        case 32:
          v453 = 0x6174747269627574;
          v454 = bswap64(*(_QWORD *)v3);
          if (v454 != 0x6174747269627574)
            goto LABEL_1590;
          v453 = 0x655F617661696C61;
          v454 = bswap64(*((_QWORD *)v3 + 1));
          if (v454 != 0x655F617661696C61)
            goto LABEL_1590;
          v454 = bswap64(*((_QWORD *)v3 + 2));
          v453 = 0x62696C6974795F64;
          if (v454 == 0x62696C6974795F64
            && (v453 = 0x72697665726B6974, v454 = bswap64(*((_QWORD *)v3 + 3)), v454 == 0x72697665726B6974))
          {
            v452 = 0;
            v504 = 0;
            HIDWORD(v501) = 0;
            v508 = 1;
LABEL_1561:
            v4 = a1;
          }
          else
          {
            v4 = a1;
LABEL_1590:
            v504 = 0;
            HIDWORD(v501) = 0;
            if (v454 < v453)
              v452 = -1;
            else
              v452 = 1;
            v508 = 1;
          }
LABEL_1599:
          BYTE4(v502) = 0;
          v461 = v452 != 0;
          if (v452)
            v15 = 0;
          else
            v15 = 257;
          goto LABEL_1602;
        case 33:
          v520 = 33;
          v504 = 0;
          BYTE4(v501) = 0;
          v508 = 0;
          BYTE4(v502) = 0;
          if (!memcmp(v3, "attribute_cf_returns_not_retained", 0x21uLL))
            v15 = 257;
          else
            v15 = 0;
          v455 = 1;
          goto LABEL_1605;
        case 34:
          v452 = memcmp(v3, "attribute_availability_with_strict", 0x22uLL);
          v504 = 0;
          v508 = 0;
          HIDWORD(v501) = 1;
          goto LABEL_1599;
        case 35:
          v459 = memcmp(v3, "attribute_availability_with_message", 0x23uLL);
          if (v459)
            v15 = 0;
          else
            v15 = 257;
          if (v459)
          {
            v497 = 0;
            if (!memcmp(v3, "attribute_availability_in_templates", 0x23uLL))
              v15 = 257;
          }
          else
          {
            v497 = 0;
          }
          v34 = 1;
          goto LABEL_1582;
        case 36:
          v34 = 0;
          if (!memcmp(v3, "attribute_availability_app_extension", 0x24uLL))
            v15 = 257;
          else
            v15 = 0;
          v497 = 1;
          goto LABEL_1582;
        case 39:
          v452 = memcmp(v3, "attribute_availability_with_replacement", 0x27uLL);
          v504 = 0;
          HIDWORD(v501) = 0;
          v508 = 0;
          goto LABEL_1599;
        case 47:
          v497 = 0;
          v34 = 0;
          if (!memcmp(v3, "attribute_availability_with_version_underscores", 0x2FuLL))
            v15 = 257;
          else
            v15 = 0;
LABEL_1582:
          v518 = 0;
          LODWORD(v501) = 0;
          v440 = *(unint64_t *)((char *)v519 + 20) >> 34;
          v35 = v519[1];
          v489 = v519 + 1;
          v500 = (uint64_t *)((char *)v519 + 20);
          v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
LABEL_1583:
          LOBYTE(v495) = v440;
          v31 = 0;
          v32 = 0;
          v498 = 0;
          v33 = 0;
          v502 = 0;
          BYTE4(v501) = 0;
          v504 = 0;
          v496 = 0;
          v506 = 0;
          v510 = 0;
          v515 = 0;
          v23 = 0;
          v17 = 0;
          v507 = 0;
          v494 = 0;
          v508 = 0;
          v491 = 0;
          v503 = 0;
          goto LABEL_88;
        default:
          BYTE4(v502) = v520 == 29;
          if (v520 == 29)
          {
            v455 = 0;
            v504 = 0;
            v508 = 0;
            BYTE4(v501) = 0;
            LODWORD(v502) = 0;
            v517 = 0;
            if (*(_QWORD *)v3 ^ 0x7475626972747461 | *((_QWORD *)v3 + 1) ^ 0x7465725F66635F65 | *((_QWORD *)v3 + 2) ^ 0x7465725F736E7275 | *(_QWORD *)(v3 + 21) ^ 0x64656E6961746572)
              v15 = 0;
            else
              v15 = 257;
            BYTE4(v502) = 1;
            v456 = 29;
          }
          else
          {
            v508 = 0;
            HIDWORD(v501) = 0;
            v504 = 0;
            v15 = 0;
            v461 = 1;
LABEL_1602:
            v455 = 0;
            if (HIDWORD(v501) && v461)
            {
              v462 = memcmp(v3, "attribute_cf_returns_on_parameters", 0x22uLL);
              v455 = 0;
              goto LABEL_1608;
            }
LABEL_1605:
            if (v455 && v15 <= 0xFF)
            {
              v462 = memcmp(v3, "attribute_deprecated_with_message", 0x21uLL);
LABEL_1608:
              LODWORD(v502) = 0;
              v517 = 0;
              if (!v462)
                v15 = 257;
              goto LABEL_1610;
            }
            v517 = v520 == 37;
            if (v520 == 37 && v15 <= 0xFF)
            {
              v520 = 37;
              LODWORD(v502) = 0;
              if (!memcmp(v3, "attribute_deprecated_with_replacement", 0x25uLL))
                v15 = 257;
              v517 = 1;
LABEL_1610:
              if (v455 && v15 <= 0xFF && !memcmp(v3, "attribute_ns_returns_not_retained", 0x21uLL))
                v15 = 257;
              v463 = BYTE4(v502) ^ 1;
              if (v15 > 0xFF)
                v463 = 1;
              if ((v463 & 1) == 0)
              {
                v464 = *(_QWORD *)(v3 + 21) == 0x64656E6961746572 && *((_QWORD *)v3 + 2) == 0x7465725F736E7275;
                v465 = v464 && *((_QWORD *)v3 + 1) == 0x7465725F736E5F65;
                if (v465 && *(_QWORD *)v3 == 0x7475626972747461)
                  v15 = 257;
              }
              v498 = v520 == 21;
              if (v520 == 21 && v15 <= 0xFF)
              {
                if (*(_QWORD *)(v3 + 13) == 0x64656D75736E6F63
                  && *((_QWORD *)v3 + 1) == 0x6E6F635F736E5F65
                  && *(_QWORD *)v3 == 0x7475626972747461)
                {
                  v15 = 257;
                }
                v469 = 21;
              }
              else
              {
                v469 = v520;
              }
              if (v520 == 21 && v15 <= 0xFF)
              {
                v470 = *(_QWORD *)(v3 + 13) == 0x64656D75736E6F63 && *((_QWORD *)v3 + 1) == 0x6E6F635F66635F65;
                if (v470 && *(_QWORD *)v3 == 0x7475626972747461)
                  v15 = 257;
              }
              if (v15 > 0xFF)
                v472 = 1;
              else
                v472 = BYTE4(v501) ^ 1;
              if ((v472 & 1) == 0 && !memcmp(v3, "attribute_unavailable_with_message", 0x22uLL))
                v15 = 257;
              if (v15 > 0xFF)
                v473 = 1;
              else
                v473 = BYTE4(v501) ^ 1;
              BYTE4(v491) = v455;
              if ((v473 & 1) != 0)
              {
                v478 = *(uint64_t *)((char *)v519 + 20);
                v500 = (uint64_t *)((char *)v519 + 20);
                v476 = v478 >> 34;
                v475 = v469 == 6;
                if (v469 == 6 && v15 <= 0xFF)
                {
                  if (*(_DWORD *)v3 == 1668246626 && *((_WORD *)v3 + 2) == 29547)
                  {
                    LOBYTE(v495) = v478 >> 34;
                    v496 = 0;
                    v506 = 0;
                    v510 = 0;
                    v507 = 0;
                    v23 = 0;
                    v17 = 0;
                    v494 = 0;
                    v35 = v519[1];
                    v415 = (v478 >> 41) & 0x807FFFFF | (*((unsigned __int8 *)v519 + 28) << 23);
                    v489 = v519 + 1;
                    v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
                    LOBYTE(v491) = 1;
                    v520 = 6;
                    goto LABEL_1413;
                  }
                  v503 = 0;
                  v477 = v519 + 1;
                  v35 = v519[1];
                  v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
                  v475 = 1;
                  v469 = 6;
LABEL_1684:
                  LOBYTE(v491) = v475;
                  if (v520 == 21 && v15 <= 0xFF)
                  {
                    v482 = *(_QWORD *)(v3 + 13) == 0x7379617272615F6ELL && *((_QWORD *)v3 + 1) == 0x615F6E6F5F797469;
                    if (v482 && *(_QWORD *)v3 == 0x6C6962616C6C756ELL)
                      v15 = 257;
                  }
                  v31 = 0;
                  v37 = v15 < 0x100;
                  v32 = v469 == 16;
                  v489 = v477;
                  LOBYTE(v495) = v476;
                  if (v469 == 16 && v15 <= 0xFF)
                  {
                    if (*(_QWORD *)v3 == 0x735F79726F6D656DLL && *((_QWORD *)v3 + 1) == 0x72657A6974696E61)
                    {
                      LODWORD(v501) = 0;
                      v496 = 0;
                      v506 = 0;
                      v510 = 0;
                      v515 = 0;
                      v23 = 0;
                      v17 = 0;
                      v507 = 0;
                      v494 = 0;
                      v518 = 0;
                      v497 = 0;
                      LODWORD(v56) = (v16 & 0x600) != 0;
                    }
                    else
                    {
                      if (*(_QWORD *)v3 != 0x735F646165726874 || *((_QWORD *)v3 + 1) != 0x72657A6974696E61)
                      {
                        v34 = 0;
                        LODWORD(v501) = 0;
                        v496 = 0;
                        v506 = 0;
                        v510 = 0;
                        v515 = 0;
                        v23 = 0;
                        v17 = 0;
                        v507 = 0;
                        v494 = 0;
                        v518 = 0;
                        v497 = 0;
                        v31 = 1;
                        v520 = 16;
                        v32 = 1;
                        v37 = 1;
LABEL_1706:
                        v33 = v517;
                        goto LABEL_89;
                      }
                      LODWORD(v501) = 0;
                      v496 = 0;
                      v506 = 0;
                      v510 = 0;
                      v515 = 0;
                      v23 = 0;
                      v17 = 0;
                      v507 = 0;
                      v494 = 0;
                      v518 = 0;
                      v497 = 0;
                      LODWORD(v56) = (v16 >> 13) & 1;
                    }
                    v505 = 1;
                    v520 = 16;
                    goto LABEL_125;
                  }
                  v34 = 0;
                  LODWORD(v501) = 0;
                  v496 = 0;
                  v506 = 0;
                  v510 = 0;
                  v515 = 0;
                  v520 = v469;
                  v23 = 0;
                  v17 = 0;
                  v507 = 0;
                  v494 = 0;
                  v518 = 0;
                  v497 = 0;
                  goto LABEL_1706;
                }
              }
              else
              {
                v474 = memcmp(v3, "attribute_symbol_metadata_footnote", 0x22uLL);
                v475 = 0;
                if (!v474)
                  v15 = 257;
                v500 = (uint64_t *)((char *)v519 + 20);
                v476 = *(unint64_t *)((char *)v519 + 20) >> 34;
                BYTE4(v501) = 1;
              }
              v477 = v519 + 1;
              v35 = v519[1];
              v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
              v503 = v469 == 8;
              if (v469 == 8 && v15 <= 0xFF)
              {
                if (*(_QWORD *)v3 == 0x697474725F787863)
                {
                  LOBYTE(v495) = v476;
                  LOBYTE(v491) = v475;
                  v489 = v519 + 1;
                  v506 = 0;
                  v510 = 0;
                  v17 = 0;
                  v494 = 0;
                  v507 = 0;
                  v23 = 0;
                  v496 = 0;
                  v418 = (v35 & 0x18000000000000) == 0x18000000000000;
                  v53 = *((_WORD *)v519 + 8);
                  v54 = ((v35 & 0x8000000000000000) != 0) | (2 * v53);
                  v47 = (v36 >> 1) & 0x7FFFFF;
                  v48 = (v36 >> 3) & 0x1FFFFF;
                  v50 = (v36 >> 4) & 0xFFFFF;
                  v51 = (v36 >> 5) & 0x7FFFF;
                  v417 = (v36 >> 22) & 3;
                  v503 = 1;
                  v520 = 8;
                  goto LABEL_1414;
                }
                v503 = 1;
                v469 = 8;
              }
              else if (v520 == 21 && v15 <= 0xFF)
              {
                v480 = *(_QWORD *)(v3 + 13) == 0x7365747562697274 && *((_QWORD *)v3 + 1) == 0x69727474615F726FLL;
                if (v480 && *(_QWORD *)v3 == 0x746172656D756E65)
                  v15 = 257;
              }
              goto LABEL_1684;
            }
            LODWORD(v502) = v520 == 25;
            if (v520 != 25 || v15 > 0xFF)
              goto LABEL_1610;
            if (v3[24] == 101
              && *((_QWORD *)v3 + 2) == 0x7079745F726F7463
              && *((_QWORD *)v3 + 1) == 0x65765F7478655F65
              && *(_QWORD *)v3 == 0x7475626972747461)
            {
              v15 = 257;
            }
            LODWORD(v502) = 1;
            v456 = 25;
          }
          v520 = v456;
          goto LABEL_1610;
      }
  }
LABEL_1377:
  v520 = v24;
  v35 = v519[1];
  v500 = (uint64_t *)((char *)v519 + 20);
  v36 = *((unsigned __int16 *)v519 + 8) | ((unint64_t)*((unsigned __int8 *)v519 + 18) << 16);
  v506 = v19;
  v489 = v519 + 1;
  LOBYTE(v495) = *(unint64_t *)((char *)v519 + 20) >> 34;
  if (v18 && v15 <= 0xFF && *(_QWORD *)v3 == 0x656378655F787863 && *(_QWORD *)(v3 + 6) == 0x736E6F6974706563)
  {
    v496 = v20;
    v498 = 0;
    v502 = 0;
    BYTE4(v501) = 0;
    v504 = 0;
    v491 = 0;
    HIDWORD(v507) = 1;
    v508 = 0;
    LOBYTE(v415) = v35 >> 46;
LABEL_1413:
    v503 = 0;
    v416 = v35 >> 63;
    v47 = (v36 >> 1) & 0x7FFFFF;
    v53 = v36;
    v48 = (v36 >> 3) & 0x1FFFFF;
    v50 = (v36 >> 4) & 0xFFFFF;
    v51 = (v36 >> 5) & 0x7FFFF;
    v417 = (v36 >> 22) & 3;
    v418 = v415 & 1;
    v54 = v416 | (2 * v36);
LABEL_1414:
    v497 = 0;
    v518 = 0;
    v515 = 0;
    LODWORD(v501) = 0;
    v505 = 0;
    v516 = 0;
    v15 = v418 | 0x100;
    v57 = *((_DWORD *)v519 + 60);
    v58 = v57 >> 4;
    LOBYTE(v52) = v417;
    goto LABEL_128;
  }
  v408 = v507 ^ 1;
  if (v15 > 0xFF)
    v408 = 1;
  if ((v408 & 1) == 0)
  {
    if (*(_QWORD *)(v3 + 3) == 0x7974696C6962616CLL && *(_QWORD *)v3 == 0x6C6962616C6C756ELL)
      v15 = 257;
    LODWORD(v507) = 1;
  }
  v37 = v15 < 0x100;
  if (v15 < 0x100)
    v410 = v20;
  else
    v410 = 0;
  HIDWORD(v507) = v18;
  if (v410 != 1)
  {
    v496 = v20;
    v31 = 0;
    v32 = 0;
    v498 = 0;
    v33 = 0;
    v501 = 0;
    v502 = 0;
    v504 = 0;
    v34 = 0;
    v515 = 0;
    v518 = 0;
    v497 = 0;
    v508 = 0;
    v491 = 0;
    v503 = 0;
LABEL_89:
    v38 = (v35 >> 62) & 3 | (4 * v36);
    goto LABEL_90;
  }
  if (*(_QWORD *)v3 == 0x776F6C6661746164
    && *((_QWORD *)v3 + 1) == 0x7A6974696E61735FLL
    && *((_WORD *)v3 + 8) == 29285)
  {
    v504 = 0;
    v505 = 0;
    v498 = 0;
    v501 = 0;
    v502 = 0;
    v515 = 0;
    v518 = 0;
    v497 = 0;
    v508 = 0;
    v491 = 0;
    v503 = 0;
    v56 = (v16 >> 43) & 1;
LABEL_1417:
    v496 = 1;
    goto LABEL_126;
  }
  v38 = (v35 >> 62) & 3 | (4 * *((_WORD *)v519 + 8));
  if (*(_QWORD *)v3 == 0x5F68747561727470
    && *((_QWORD *)v3 + 1) == 0x69736E6972746E69
    && *((_WORD *)v3 + 8) == 29539)
  {
    v504 = 0;
    v505 = 0;
    v498 = 0;
    v501 = 0;
    v502 = 0;
    v515 = 0;
    v518 = 0;
    v497 = 0;
    v508 = 0;
    v491 = 0;
    v503 = 0;
    LODWORD(v56) = (v35 & 0x4000000000000000) != 0;
    goto LABEL_1417;
  }
  v31 = 0;
  v32 = 0;
  v498 = 0;
  v33 = 0;
  v501 = 0;
  v502 = 0;
  v504 = 0;
  v34 = 0;
  v515 = 0;
  v518 = 0;
  v508 = 0;
  v491 = 0;
  v503 = 0;
  v37 = 1;
  v496 = 1;
  v497 = 0;
LABEL_90:
  v505 = v32;
  if (v37 && v23)
  {
    v39 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x656966696C617571;
    if (v39 && v3[16] == 114)
    {
      LODWORD(v56) = v38 & 1;
      v23 = 1;
      goto LABEL_125;
    }
  }
  if (v37 && v33)
  {
    v41 = v35;
    v42 = v17;
    v43 = memcmp(v3, "ptrauth_qualifier_authentication_mode", 0x25uLL);
    v17 = v42;
    v35 = v41;
    if (!v43)
      goto LABEL_114;
  }
  if ((v37 & v34) == 1)
  {
    v44 = v17;
    v45 = memcmp(v3, "ptrauth_restricted_intptr_qualifier", 0x23uLL);
    v17 = v44;
    if (!v45)
    {
LABEL_114:
      LODWORD(v56) = v38 & 1;
LABEL_125:
      v4 = a1;
LABEL_126:
      v60 = v35 >> 63;
      v53 = v36;
      v47 = (v36 >> 1) & 0x7FFFFF;
      v48 = (v36 >> 3) & 0x1FFFFF;
      v50 = (v36 >> 4) & 0xFFFFF;
      v15 = v56 | 0x100;
      v516 = v520 == 13;
      v51 = (v36 >> 5) & 0x7FFFF;
      v52 = (v36 >> 22) & 3;
      v54 = v60 | (2 * v36);
LABEL_127:
      v57 = *((_DWORD *)v519 + 60);
      v58 = v57 >> 4;
      goto LABEL_128;
    }
  }
  v46 = v35 >> 63;
  v47 = (v36 >> 1) & 0x7FFFFF;
  v516 = v520 == 13;
  v48 = (v36 >> 3) & 0x1FFFFF;
  v49 = v520 == 13 && v37;
  v50 = (v36 >> 4) & 0xFFFFF;
  v51 = (v36 >> 5) & 0x7FFFF;
  v52 = (v36 >> 22) & 3;
  v53 = v36;
  v54 = v46 | (2 * v36);
  if (v49)
  {
    if (*(_QWORD *)v3 == 0x5F68747561727470 && *(_QWORD *)(v3 + 5) == 0x736C6C61635F6874)
      v15 = v46 & 1 | 0x100;
    v516 = 1;
    v520 = 13;
    v4 = a1;
    goto LABEL_127;
  }
  v57 = *((_DWORD *)v519 + 60);
  v58 = v57 >> 4;
  if (v31)
  {
    if (*(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x6173695F636A626FLL)
      v15 = (v57 >> 4) & 1 | 0x100;
    v505 = 1;
  }
  v4 = a1;
LABEL_128:
  v512 = v17;
  v513 = v23;
  if (v520 == 23 && v15 <= 0xFF)
  {
    v61 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x6173695F636A626FLL;
    if (v61 && *(_QWORD *)(v3 + 15) == 0x7370697274735F61)
    {
      v84 = ((v57 >> 3) & 3) - 1 < 2;
LABEL_300:
      v85 = v506;
      goto LABEL_301;
    }
  }
  v63 = v518 ^ 1;
  if (v15 > 0xFF)
    v63 = 1;
  if ((v63 & 1) == 0)
  {
    v64 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x6173695F636A626FLL;
    if (v64 && *(_QWORD *)(v3 + 14) == 0x736E6769735F6173)
    {
      v84 = v58 & 1;
      goto LABEL_300;
    }
  }
  v66 = v504 ^ 1;
  if (v15 > 0xFF)
    v66 = 1;
  if ((v66 & 1) == 0)
  {
    v67 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x6173695F636A626FLL;
    v68 = v67 && *((_QWORD *)v3 + 2) == 0x746E65687475615FLL;
    if (v68 && *(_QWORD *)(v3 + 22) == 0x736574616369746ELL)
    {
      v84 = (v57 & 0x18) == 24;
      goto LABEL_300;
    }
  }
  v70 = !v515;
  if (v15 > 0xFF)
    v70 = 1;
  if ((v70 & 1) == 0)
  {
    v71 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x746E695F636A626FLL;
    v72 = v71 && *((_QWORD *)v3 + 2) == 0x735F656361667265;
    if (v72 && *((_WORD *)v3 + 12) == 27749)
    {
      v84 = v51 & 1;
      goto LABEL_300;
    }
  }
  v74 = v501 ^ 1;
  if (v15 > 0xFF)
    v74 = 1;
  if ((v74 & 1) == 0)
  {
    v75 = *(_QWORD *)(v3 + 19) == 0x7373616C635F656CLL && *((_QWORD *)v3 + 2) == 0x6C635F656C62616ELL;
    v76 = v75 && *((_QWORD *)v3 + 1) == 0x6769735F636A626FLL;
    if (v76 && *(_QWORD *)v3 == 0x5F68747561727470)
      v15 = 257;
  }
  if (v15 < 0x100)
    v78 = v508;
  else
    v78 = 0;
  if (v78 == 1)
  {
    v79 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x74656D5F636A626FLL;
    v80 = v79 && *((_QWORD *)v3 + 2) == 0x7473696C5F646F68;
    if (v80 && *((_QWORD *)v3 + 3) == 0x7265746E696F705FLL)
    {
      v84 = v54 & 1;
      goto LABEL_299;
    }
  }
  if (v520 == 45 && v15 <= 0xFF)
  {
    v82 = v52;
    v83 = v54;
    if (!memcmp(v3, "ptrauth_vtable_pointer_address_discrimination", 0x2DuLL))
    {
      v84 = v48 & 1;
LABEL_299:
      v4 = a1;
      goto LABEL_300;
    }
  }
  else
  {
    v82 = v52;
    v83 = v54;
    if (v520 == 42 && v15 <= 0xFF && !memcmp(v3, "ptrauth_vtable_pointer_type_discrimination", 0x2AuLL))
    {
      v84 = v50 & 1;
      goto LABEL_299;
    }
  }
  v85 = v506;
  v86 = v506 ^ 1;
  if (v15 > 0xFF)
    v86 = 1;
  if ((v86 & 1) == 0 && *(_QWORD *)v3 == 0x5F68747561727470 && *(_QWORD *)(v3 + 7) == 0x736E72757465725FLL)
  {
    v84 = v53 & 1;
    goto LABEL_297;
  }
  v88 = v518 ^ 1;
  if (v15 > 0xFF)
    v88 = 1;
  if ((v88 & 1) == 0)
  {
    v89 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x7463657269646E69;
    if (v89 && *(_QWORD *)(v3 + 14) == 0x736F746F675F7463)
    {
      v84 = v47 & 1;
      goto LABEL_297;
    }
  }
  if (v520 == 51 && v15 <= 0xFF)
  {
    if (!memcmp(v3, "ptrauth_member_function_pointer_type_discrimination", 0x33uLL))
    {
      v84 = v83 & 1;
LABEL_297:
      v4 = a1;
LABEL_301:
      v15 = v84 | 0x100;
      v94 = v520 == 24;
LABEL_302:
      v97 = (uint64_t *)((char *)v519 + 140);
      goto LABEL_303;
    }
  }
  else if (v520 == 44 && v15 <= 0xFF && !memcmp(v3, "ptrauth_function_pointer_type_discrimination", 0x2CuLL))
  {
    v495 = v493 >> 33;
LABEL_1140:
    v94 = v520 == 24;
    v82 = v495;
    goto LABEL_1141;
  }
  if (v78)
  {
    v91 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x625F64656E676973;
    v92 = v91 && *((_QWORD *)v3 + 2) == 0x7365645F6B636F6CLL;
    if (v92 && *((_QWORD *)v3 + 3) == 0x73726F7470697263)
      goto LABEL_1140;
  }
  v94 = v520 == 24;
  if (v520 == 24 && v15 <= 0xFF)
  {
    v95 = *(_QWORD *)v3 == 0x5F68747561727470 && *((_QWORD *)v3 + 1) == 0x6173695F636A626FLL;
    if (v95 && *((_QWORD *)v3 + 2) == 0x676E696B73616D5FLL)
    {
      v94 = 1;
LABEL_1141:
      v4 = a1;
      v15 = v82 & 1 | 0x100;
      goto LABEL_302;
    }
  }
  v97 = (uint64_t *)((char *)v519 + 140);
  v98 = v507 ^ 1;
  if (v15 > 0xFF)
    v98 = 1;
  v4 = a1;
  if ((v98 & 1) == 0
    && (*(_QWORD *)v3 == 0x68635F6B63617473 ? (v99 = *(_QWORD *)(v3 + 3) == 0x6B636568635F6B63) : (v99 = 0), v99))
  {
    v15 = ((*((unsigned __int16 *)v519 + 74) | (*((unsigned __int8 *)v519 + 150) << 16)) >> 19) & 1 | 0x100;
  }
  else if (v520 == 5 && v15 <= 0xFF && *(_DWORD *)v3 == 1685414771 && v3[4] == 111)
  {
    v15 = (*v492 >> 2) & 1 | 0x100;
  }
LABEL_303:
  v105 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 64) + 728))(*(_QWORD *)(v4 + 64), 15);
  v106 = v510;
  v107 = v510 ^ 1;
  if (v15 > 0xFF)
    v107 = 1;
  if ((v107 & 1) == 0 && *(_QWORD *)v3 == 0x7973617466697773 && *((_DWORD *)v3 + 2) == 1667457902)
  {
    v128 = v105 == 0;
    v110 = *v97;
    v112 = v513;
    v113 = v512;
    goto LABEL_363;
  }
  v109 = *((unsigned __int16 *)v97 + 4) | (*((unsigned __int8 *)v97 + 10) << 16);
  v110 = *v97;
  v111 = !v503;
  if (v15 > 0xFF)
    v111 = 1;
  v112 = v513;
  v113 = v512;
  if ((v111 & 1) == 0 && (*(_QWORD *)v3 == 0x7272615F636A626FLL || *(_QWORD *)v3 == 0x6372615F636A626FLL))
  {
    v128 = (v109 >> 1) & 1;
LABEL_363:
    v15 = v128 | 0x100;
    v118 = *v519;
    goto LABEL_364;
  }
  v114 = v85 ^ 1;
  if (v15 > 0xFF)
    v114 = 1;
  if ((v114 & 1) == 0 && *(_QWORD *)(v3 + 7) == 0x73646C6569665F63 && *(_QWORD *)v3 == 0x6372615F636A626FLL)
    v15 = 257;
  v116 = !v516;
  if (v15 > 0xFF)
    v116 = 1;
  if ((v116 & 1) == 0 && *(_QWORD *)v3 == 0x6372615F636A626FLL && *(_QWORD *)(v3 + 5) == 0x6B6165775F637261)
  {
    v128 = (v109 >> 3) & 1;
    goto LABEL_363;
  }
  v118 = *v519;
  v119 = BYTE4(v501) ^ 1;
  if (v15 > 0xFF)
    v119 = 1;
  if ((v119 & 1) == 0)
  {
    v120 = memcmp(v3, "objc_default_synthesize_properties", 0x22uLL);
    v106 = v510;
    v113 = v512;
    v112 = v513;
    if (!v120)
      goto LABEL_359;
  }
  v121 = v85 ^ 1;
  if (v15 > 0xFF)
    v121 = 1;
  if ((v121 & 1) == 0 && *(_QWORD *)v3 == 0x7869665F636A626FLL && *(_QWORD *)(v3 + 7) == 0x6D756E655F646578)
    goto LABEL_359;
  v123 = v112 ^ 1;
  if (v15 > 0xFF)
    v123 = 1;
  if ((v123 & 1) == 0)
  {
    v124 = *(_QWORD *)v3 == 0x736E695F636A626FLL && *((_QWORD *)v3 + 1) == 0x70797465636E6174;
    if (v124 && v3[16] == 101)
      goto LABEL_359;
  }
  v126 = v507 ^ 1;
  if (v15 > 0xFF)
    v126 = 1;
  if ((v126 & 1) == 0 && *(_QWORD *)v3 == 0x6E696B5F636A626FLL && *(_QWORD *)(v3 + 3) == 0x666F646E696B5F63)
LABEL_359:
    v15 = (v118 >> 14) & 1 | 0x100;
LABEL_364:
  v129 = v106 ^ 1;
  if (v15 > 0xFF)
    v129 = 1;
  if ((v129 & 1) == 0 && *(_QWORD *)v3 == 0x646F6D5F636A626FLL && *((_DWORD *)v3 + 2) == 1936026741)
    v15 = (*v500 >> 45) & 1 & (v118 >> 14) | 0x100;
  v131 = *((_DWORD *)v519 + 100);
  v132 = v113 ^ 1;
  if (v15 > 0xFF)
    v132 = 1;
  if ((v132 & 1) == 0)
  {
    v133 = *(_QWORD *)v3 == 0x6E6F6E5F636A626FLL && *((_QWORD *)v3 + 1) == 0x5F656C6967617266;
    if (v133 && *(_QWORD *)(v3 + 11) == 0x6962615F656C6967)
    {
      v144 = (0xDDu >> v131) & 1;
      goto LABEL_451;
    }
  }
  v135 = BYTE4(v502) ^ 1;
  if (v15 > 0xFF)
    v135 = 1;
  if ((v135 & 1) == 0)
  {
    v136 = *(_QWORD *)(v3 + 21) == 0x63696D6F74615F74 && *((_QWORD *)v3 + 2) == 0x615F746963696C70;
    v137 = v136 && *((_QWORD *)v3 + 1) == 0x78655F7974726570;
    if (v137 && *(_QWORD *)v3 == 0x6F72705F636A626FLL)
      v15 = 257;
  }
  v139 = v508 ^ 1;
  if (v15 > 0xFF)
    v139 = 1;
  if ((v139 & 1) == 0)
  {
    v140 = *((_QWORD *)v3 + 3) == 0x676E696C676E616DLL && *((_QWORD *)v3 + 2) == 0x5F72656966696C61;
    v141 = v140 && *((_QWORD *)v3 + 1) == 0x75715F6C6F636F74;
    if (v141 && *(_QWORD *)v3 == 0x6F72705F636A626FLL)
      v15 = 257;
  }
  v143 = v85 ^ 1;
  if (v15 > 0xFF)
    v143 = 1;
  if ((v143 & 1) != 0)
    goto LABEL_423;
  v144 = v131 != 1;
  if (*(_QWORD *)v3 == 0x6165775F636A626FLL && *(_QWORD *)(v3 + 7) == 0x7373616C635F6B61)
  {
LABEL_451:
    v15 = v144 | 0x100;
    v152 = v520 == 9;
    goto LABEL_452;
  }
  if (*(_QWORD *)(v3 + 7) == 0x73646C6F685F7069 && *(_QWORD *)v3 == 0x69687372656E776FLL)
    v15 = 257;
LABEL_423:
  v147 = v112 ^ 1;
  if (v15 > 0xFF)
    v147 = 1;
  if ((v147 & 1) == 0)
  {
    v148 = v3[16] == 115 && *((_QWORD *)v3 + 1) == 0x6E72757465725F70;
    if (v148 && *(_QWORD *)v3 == 0x69687372656E776FLL)
      v15 = 257;
  }
  v150 = v85 ^ 1;
  if (v15 > 0xFF)
    v150 = 1;
  if ((v150 & 1) == 0 && *(_QWORD *)(v3 + 7) == 0x73656B61745F7069 && *(_QWORD *)v3 == 0x69687372656E776FLL)
    v15 = 257;
  v152 = v520 == 9;
  if (v520 == 9 && v15 <= 0xFF)
  {
    if (v3[8] == 108 && *(_QWORD *)v3 == 0x6F6F625F636A626FLL)
      v15 = 257;
    v152 = 1;
  }
LABEL_452:
  v154 = v112 ^ 1;
  if (v15 > 0xFF)
    v154 = 1;
  if ((v154 & 1) == 0
    && (*(_QWORD *)v3 == 0x6275735F636A626FLL ? (v155 = *((_QWORD *)v3 + 1) == 0x6E69747069726373) : (v155 = 0),
        v155 ? (v156 = v3[16] == 103) : (v156 = 0),
        v156))
  {
    v15 = (0xDDu >> v131) & 1 | 0x100;
  }
  else
  {
    v157 = v113 ^ 1;
    if (v15 > 0xFF)
      v157 = 1;
    if ((v157 & 1) == 0)
    {
      v158 = *(_QWORD *)v3 == 0x7272615F636A626FLL && *((_QWORD *)v3 + 1) == 0x726574696C5F7961;
      if (v158 && *(_QWORD *)(v3 + 11) == 0x736C61726574696CLL)
        goto LABEL_506;
    }
    v160 = !v94;
    if (v15 > 0xFF)
      v160 = 1;
    if ((v160 & 1) == 0)
    {
      v161 = *(_QWORD *)v3 == 0x6369645F636A626FLL && *((_QWORD *)v3 + 1) == 0x5F7972616E6F6974;
      if (v161 && *((_QWORD *)v3 + 2) == 0x736C61726574696CLL)
        goto LABEL_506;
    }
    v163 = v518 ^ 1;
    if (v15 > 0xFF)
      v163 = 1;
    if ((v163 & 1) == 0)
    {
      v164 = *(_QWORD *)v3 == 0x786F625F636A626FLL && *((_QWORD *)v3 + 1) == 0x65727078655F6465;
      if (v164 && *(_QWORD *)(v3 + 14) == 0x736E6F6973736572)
        goto LABEL_506;
    }
    v166 = v504 ^ 1;
    if (v15 > 0xFF)
      v166 = 1;
    if ((v166 & 1) == 0)
    {
      v167 = *(_QWORD *)v3 == 0x786F625F636A626FLL && *((_QWORD *)v3 + 1) == 0x6C6176736E5F6465;
      v168 = v167 && *((_QWORD *)v3 + 2) == 0x65727078655F6575;
      if (v168 && *(_QWORD *)(v3 + 22) == 0x736E6F6973736572)
LABEL_506:
        v15 = (v118 >> 14) & 1 | 0x100;
    }
  }
  v170 = 0;
  if ((v118 & 0x4000) != 0 && (v110 & 0x40000000000) != 0)
  {
    v242 = v152;
    v170 = sub_22F2ABF98((_DWORD *)v519 + 100);
    v152 = v242;
    v106 = v510;
    v113 = v512;
    v112 = v513;
  }
  v171 = v518 ^ 1;
  if (v15 > 0xFF)
    v171 = 1;
  v172 = BYTE4(v507);
  if ((v171 & 1) == 0)
  {
    v173 = *(_QWORD *)v3 == 0x6E6F635F636A626FLL && *((_QWORD *)v3 + 1) == 0x696C5F746E617473;
    if (v173 && *(_QWORD *)(v3 + 14) == 0x736C61726574696CLL)
    {
      v184 = *v519;
      goto LABEL_635;
    }
  }
  v175 = v113 ^ 1;
  if (v15 > 0xFF)
    v175 = 1;
  if ((v175 & 1) == 0)
  {
    v176 = *(_QWORD *)(v3 + 11) == 0x646574696475615FLL && *((_QWORD *)v3 + 1) == 0x696475615F65646FLL;
    if (v176 && *(_QWORD *)v3 == 0x635F66635F637261)
      v15 = 257;
  }
  v178 = BYTE4(v507) ^ 1;
  if (v15 > 0xFF)
    v178 = 1;
  if ((v178 & 1) == 0 && *(_QWORD *)(v3 + 6) == 0x64695F6567646972 && *(_QWORD *)v3 == 0x6972625F636A626FLL)
    v15 = 257;
  v180 = !v515;
  if (v15 > 0xFF)
    v180 = 1;
  if ((v180 & 1) == 0)
  {
    v181 = *((_WORD *)v3 + 12) == 29542 && *((_QWORD *)v3 + 2) == 0x6564657079745F6ELL;
    v182 = v181 && *((_QWORD *)v3 + 1) == 0x6F5F64695F656764;
    if (v182 && *(_QWORD *)v3 == 0x6972625F636A626FLL)
      v15 = 257;
  }
  v184 = *v519;
  v185 = !v516;
  if (v15 > 0xFF)
    v185 = 1;
  if ((v185 & 1) == 0 && *(_QWORD *)v3 == 0x6E65675F636A626FLL && *(_QWORD *)(v3 + 5) == 0x73636972656E6567)
    goto LABEL_633;
  v187 = v15 < 0x100 ? v518 : 0;
  if (v187 == 1)
  {
    v188 = *(_QWORD *)v3 == 0x6E65675F636A626FLL && *((_QWORD *)v3 + 1) == 0x61765F7363697265;
    if (v188 && *(_QWORD *)(v3 + 14) == 0x65636E6169726176)
      goto LABEL_633;
  }
  v190 = v113 ^ 1;
  if (v15 > 0xFF)
    v190 = 1;
  if ((v190 & 1) == 0)
  {
    v191 = *(_QWORD *)v3 == 0x616C635F636A626FLL && *((_QWORD *)v3 + 1) == 0x65706F72705F7373;
    if (v191 && *(_QWORD *)(v3 + 11) == 0x79747265706F7270)
    {
LABEL_633:
      v170 = (v184 >> 14) & 1;
LABEL_635:
      v15 = v170 | 0x100;
      v193 = v520 == 20;
      goto LABEL_636;
    }
  }
  v193 = v520 == 20;
  v194 = v15 < 0x100 && v520 == 20;
  if (v194)
  {
    v195 = *(_QWORD *)v3 == 0x735F635F636A626FLL && *((_QWORD *)v3 + 1) == 0x73615F6369746174;
    if (v195 && *((_DWORD *)v3 + 4) == 1953654131)
      goto LABEL_739;
  }
  if (v187)
  {
    v197 = *(_QWORD *)v3 == 0x7878635F636A626FLL && *((_QWORD *)v3 + 1) == 0x5F6369746174735FLL;
    if (v197 && *(_QWORD *)(v3 + 14) == 0x7472657373615F63)
    {
      v15 = (v184 >> 9) & 1 | 0x100;
      goto LABEL_636;
    }
  }
  v199 = !v152;
  if (v15 > 0xFF)
    v199 = 1;
  if ((v199 & 1) == 0)
  {
    if (*(_QWORD *)v3 == 0x616E67696C615F63 && v3[8] == 115)
      goto LABEL_632;
    if (*(_QWORD *)v3 == 0x6F6E67696C615F63 && v3[8] == 102)
      goto LABEL_632;
  }
  v202 = !v503;
  if (v15 > 0xFF)
    v202 = 1;
  if ((v202 & 1) == 0 && *(_QWORD *)v3 == 0x63696D6F74615F63)
  {
LABEL_632:
    v15 = (v184 >> 1) & 1 | 0x100;
    goto LABEL_636;
  }
  if (v194)
  {
    v203 = *(_QWORD *)v3 == 0x6972656E65675F63 && *((_QWORD *)v3 + 1) == 0x7463656C65735F63;
    if (v203 && *((_DWORD *)v3 + 4) == 1936617321)
    {
LABEL_739:
      v15 = (v184 >> 1) & 1 | 0x100;
      v193 = 1;
      goto LABEL_636;
    }
  }
  v205 = v506 ^ 1;
  if (v15 > 0xFF)
    v205 = 1;
  if ((v205 & 1) == 0 && *(_QWORD *)v3 == 0x6369746174735F63 && *(_QWORD *)(v3 + 7) == 0x7472657373615F63)
    goto LABEL_632;
LABEL_636:
  v207 = (v184 & 2) != 0 && *(_BYTE *)(*(_QWORD *)(v4 + 64) + 81) != 0;
  v208 = 0x6C61636F6C5F6461;
  if (v15 < 0x100)
    v209 = HIDWORD(v507);
  else
    v209 = 0;
  if (v209 == 1 && *(_QWORD *)v3 == 0x6461657268745F63 && *(_QWORD *)(v3 + 6) == 0x6C61636F6C5F6461)
    goto LABEL_738;
  if (v15 < 0x100)
    v211 = v502;
  else
    v211 = 0;
  if (v211 == 1)
  {
    v212 = *(_QWORD *)v3 == 0x656363615F787863 && *((_QWORD *)v3 + 1) == 0x72746E6F635F7373;
    v213 = v212 && *((_QWORD *)v3 + 2) == 0x616E6966735F6C6FLL;
    if (v213 && v3[24] == 101)
      goto LABEL_736;
  }
  v215 = v113 ^ 1;
  if (v15 > 0xFF)
    v215 = 1;
  if ((v215 & 1) == 0)
  {
    v216 = *(_QWORD *)v3 == 0x61696C615F787863 && *((_QWORD *)v3 + 1) == 0x616C706D65745F73;
    if (v216 && *(_QWORD *)(v3 + 11) == 0x736574616C706D65)
    {
LABEL_736:
      v207 = (v184 >> 9) & 1;
LABEL_738:
      v15 = v207 | 0x100;
      v221 = v520 == 10;
LABEL_893:
      v256 = v505;
      goto LABEL_894;
    }
  }
  if (v15 < 0x100)
    v218 = v507;
  else
    v218 = 0;
  if (v218 == 1)
  {
    v219 = *(_QWORD *)v3 == 0x67696C615F787863 && *(_QWORD *)(v3 + 3) == 0x73616E67696C615FLL;
    if (v219
      || (*(_QWORD *)v3 == 0x67696C615F787863 ? (v220 = *(_QWORD *)(v3 + 3) == 0x666F6E67696C615FLL) : (v220 = 0), v220))
    {
      v207 = (v184 >> 9) & 1;
      v4 = a1;
      goto LABEL_738;
    }
  }
  v221 = v520 == 10;
  if (v520 == 10 && v15 <= 0xFF && *(_QWORD *)v3 == 0x6D6F74615F787863 && *((_WORD *)v3 + 4) == 25449)
  {
    v15 = (v184 >> 9) & 1 | 0x100;
    v221 = 1;
LABEL_743:
    v4 = a1;
    goto LABEL_893;
  }
  if (v209)
  {
    if (*(_QWORD *)v3 == 0x727474615F787863 && *(_QWORD *)(v3 + 6) == 0x7365747562697274)
    {
      v15 = (v184 >> 9) & 1 | 0x100;
      goto LABEL_743;
    }
  }
  v224 = v15 < 0x100 && v516;
  if (v224)
  {
    if (*(_QWORD *)v3 == 0x6F7475615F787863 && *(_QWORD *)(v3 + 5) == 0x657079745F6F7475)
      goto LABEL_892;
    if (*(_QWORD *)v3 == 0x736E6F635F787863 && *(_QWORD *)(v3 + 5) == 0x7270786574736E6FLL)
      goto LABEL_892;
  }
  v227 = BYTE4(v502) ^ 1;
  if (v15 > 0xFF)
    v227 = 1;
  if ((v227 & 1) == 0)
  {
    v228 = *(_QWORD *)v3 == 0x736E6F635F787863 && *((_QWORD *)v3 + 1) == 0x74735F7270786574;
    v229 = v228 && *((_QWORD *)v3 + 2) == 0x6975625F676E6972;
    if (v229 && *(_QWORD *)(v3 + 21) == 0x736E69746C697562)
      goto LABEL_892;
  }
  v231 = v15 < 0x100 ? v106 : 0;
  if (v231 == 1 && *(_QWORD *)v3 == 0x6C6365645F787863 && *((_DWORD *)v3 + 2) == 1701869940)
    goto LABEL_892;
  v509 = v224;
  v511 = v231;
  v233 = v497 ^ 1;
  if (v15 > 0xFF)
    v233 = 1;
  if ((v233 & 1) == 0)
  {
    v234 = v94;
    v235 = v152;
    v236 = memcmp(v3, "cxx_decltype_incomplete_return_types", 0x24uLL);
    v208 = 0x6C61636F6C5F6461;
    v152 = v235;
    v94 = v234;
    v221 = v520 == 10;
    v113 = v512;
    v112 = v513;
    if (!v236)
      goto LABEL_892;
  }
  v237 = BYTE4(v501) ^ 1;
  if (v15 > 0xFF)
    v237 = 1;
  if ((v237 & 1) != 0)
  {
    if (v520 == 23 && v15 <= 0xFF)
    {
      v243 = *(_QWORD *)v3 == 0x616665645F787863 && *((_QWORD *)v3 + 1) == 0x75665F6465746C75;
      if (v243 && *(_QWORD *)(v3 + 15) == 0x736E6F6974636E75)
        goto LABEL_892;
    }
  }
  else
  {
    v238 = v221;
    v239 = v94;
    v240 = v152;
    v241 = memcmp(v3, "cxx_default_function_template_args", 0x22uLL);
    v208 = 0x6C61636F6C5F6461;
    v152 = v240;
    v94 = v239;
    v221 = v238;
    v113 = v512;
    v112 = v513;
    if (!v241)
    {
LABEL_892:
      v15 = (v184 >> 9) & 1 | 0x100;
      v4 = a1;
      v172 = BYTE4(v507);
      goto LABEL_893;
    }
  }
  if (v15 < 0x100)
    v245 = v501;
  else
    v245 = 0;
  if (v245 == 1)
  {
    v246 = *(_QWORD *)v3 == 0x656C65645F787863 && *((_QWORD *)v3 + 1) == 0x635F676E69746167;
    v247 = v246 && *((_QWORD *)v3 + 2) == 0x7463757274736E6FLL;
    if (v247 && *(_QWORD *)(v3 + 19) == 0x73726F7463757274)
      goto LABEL_892;
  }
  v249 = v498;
  if (v15 >= 0x100)
    v249 = 0;
  if (v249)
  {
    v250 = *(_QWORD *)v3 == 0x656C65645F787863 && *((_QWORD *)v3 + 1) == 0x636E75665F646574;
    if (v250 && *(_QWORD *)(v3 + 13) == 0x736E6F6974636E75)
      goto LABEL_892;
  }
  v252 = !v94;
  if (v15 > 0xFF)
    v252 = 1;
  if ((v252 & 1) == 0)
  {
    v253 = *(_QWORD *)v3 == 0x6C7078655F787863 && *((_QWORD *)v3 + 1) == 0x6E6F635F74696369;
    if (v253 && *((_QWORD *)v3 + 2) == 0x736E6F6973726576)
      goto LABEL_892;
  }
  v255 = v494;
  if (v15 >= 0x100)
    v255 = 0;
  v256 = v505;
  if (v255 == 1)
  {
    v257 = *(_QWORD *)v3 == 0x656E65675F787863 && *((_QWORD *)v3 + 1) == 0x5F64657A696C6172;
    v258 = v257 && *((_QWORD *)v3 + 2) == 0x696C616974696E69;
    if (v258 && *((_DWORD *)v3 + 6) == 1936876922)
      goto LABEL_1113;
  }
  v260 = v496 ^ 1;
  if (v15 > 0xFF)
    v260 = 1;
  if ((v260 & 1) == 0)
  {
    v261 = *(_QWORD *)v3 == 0x6C706D695F787863 && *((_QWORD *)v3 + 1) == 0x766F6D5F74696369;
    if (v261 && *((_WORD *)v3 + 8) == 29541)
      goto LABEL_1113;
  }
  if (v245)
  {
    v263 = *(_QWORD *)v3 == 0x65686E695F787863 && *((_QWORD *)v3 + 1) == 0x635F676E69746972;
    v264 = v263 && *((_QWORD *)v3 + 2) == 0x7463757274736E6FLL;
    if (v264 && *(_QWORD *)(v3 + 19) == 0x73726F7463757274)
      goto LABEL_1113;
  }
  if (v249)
  {
    v266 = *(_QWORD *)v3 == 0x696C6E695F787863 && *((_QWORD *)v3 + 1) == 0x73656D616E5F656ELL;
    if (v266 && *(_QWORD *)(v3 + 13) == 0x736563617073656DLL)
      goto LABEL_1113;
  }
  if (v218)
  {
    if (*(_QWORD *)v3 == 0x626D616C5F787863 && *(_QWORD *)(v3 + 3) == 0x736164626D616C5FLL)
      goto LABEL_1113;
  }
  if (v255)
  {
    v269 = *(_QWORD *)v3 == 0x61636F6C5F787863 && *((_QWORD *)v3 + 1) == 0x745F657079745F6CLL;
    v270 = v269 && *((_QWORD *)v3 + 2) == 0x5F6574616C706D65;
    if (v270 && *((_DWORD *)v3 + 6) == 1936159329)
      goto LABEL_1113;
  }
  if (v211)
  {
    v272 = *(_QWORD *)v3 == 0x736E6F6E5F787863 && *((_QWORD *)v3 + 1) == 0x656D5F6369746174;
    v273 = v272 && *((_QWORD *)v3 + 2) == 0x696E695F7265626DLL;
    if (v273 && v3[24] == 116)
      goto LABEL_1113;
  }
  if (v511)
  {
    if (*(_QWORD *)v3 == 0x78656F6E5F787863 && *((_DWORD *)v3 + 2) == 1953523043)
      goto LABEL_1113;
  }
  if (v218)
  {
    if (*(_QWORD *)v3 == 0x6C6C756E5F787863 && *(_QWORD *)(v3 + 3) == 0x7274706C6C756E5FLL)
      goto LABEL_1113;
  }
  v277 = !v193;
  if (v15 > 0xFF)
    v277 = 1;
  if ((v277 & 1) == 0)
  {
    v278 = *(_QWORD *)v3 == 0x7265766F5F787863 && *((_QWORD *)v3 + 1) == 0x6E6F635F65646972;
    if (v278 && *((_DWORD *)v3 + 4) == 1819243124)
    {
LABEL_1113:
      v15 = (v184 >> 9) & 1 | 0x100;
      v4 = a1;
LABEL_1114:
      v172 = BYTE4(v507);
      goto LABEL_894;
    }
  }
  v4 = a1;
  if (v509 && *(_QWORD *)v3 == 0x676E61725F787863 && *(_QWORD *)(v3 + 5) == 0x726F665F65676E61)
  {
    v15 = (v184 >> 9) & 1 | 0x100;
    goto LABEL_1114;
  }
  if (v520 != 23 || v15 > 0xFF)
  {
    v424 = BYTE4(v491) ^ 1;
    if (v15 > 0xFF)
      v424 = 1;
    if ((v424 & 1) != 0)
    {
      v172 = BYTE4(v507);
      if (!v249)
        goto LABEL_1445;
      if (*(_QWORD *)v3 != 0x6C6176725F787863
        || *((_QWORD *)v3 + 1) != 0x72656665725F6575
        || *(_QWORD *)(v3 + 13) != 0x7365636E65726566)
      {
        goto LABEL_1452;
      }
    }
    else
    {
      v425 = v152;
      v426 = memcmp(v3, "cxx_reference_qualified_functions", 0x21uLL);
      v208 = 0x6C61636F6C5F6461;
      v152 = v425;
      v113 = v512;
      v112 = v513;
      v172 = BYTE4(v507);
      if (v426)
        goto LABEL_1452;
    }
LABEL_1463:
    v15 = (v184 >> 9) & 1 | 0x100;
    goto LABEL_894;
  }
  v282 = *(_QWORD *)v3 == 0x5F7761725F787863
      && *((_QWORD *)v3 + 1) == 0x6C5F676E69727473
      && *(_QWORD *)(v3 + 15) == 0x736C61726574696CLL;
  v172 = BYTE4(v507);
  if (v282)
    goto LABEL_1463;
LABEL_1445:
  v429 = v505 ^ 1;
  if (v15 > 0xFF)
    v429 = 1;
  if ((v429 & 1) == 0 && *(_QWORD *)v3 == 0x6F7274735F787863 && *((_QWORD *)v3 + 1) == 0x736D756E655F676ELL)
    goto LABEL_1463;
LABEL_1452:
  v431 = v112 ^ 1;
  if (v15 > 0xFF)
    v431 = 1;
  if ((v431 & 1) == 0)
  {
    v432 = *(_QWORD *)v3 == 0x746174735F787863 && *((_QWORD *)v3 + 1) == 0x72657373615F6369;
    if (v432 && v3[16] == 116)
      goto LABEL_1463;
  }
LABEL_894:
  v283 = (v184 & 0x200) != 0 && *(_BYTE *)(*(_QWORD *)(v4 + 64) + 81) != 0;
  if (v15 < 0x100)
    v284 = v256;
  else
    v284 = 0;
  if (v284 == 1 && *(_QWORD *)v3 == 0x657268745F787863 && *((_QWORD *)v3 + 1) == 0x6C61636F6C5F6461)
    goto LABEL_1065;
  if (v15 < 0x100)
    v286 = v113;
  else
    v286 = 0;
  if (v286 == 1)
  {
    v287 = *(_QWORD *)v3 == 0x696172745F787863 && *((_QWORD *)v3 + 1) == 0x7465725F676E696CLL;
    if (v287 && *(_QWORD *)(v3 + 11) == 0x6E72757465725F67)
      goto LABEL_1063;
  }
  v289 = v15 < 0x100 && v193;
  if (v289)
  {
    v290 = *(_QWORD *)v3 == 0x63696E755F787863 && *((_QWORD *)v3 + 1) == 0x6574696C5F65646FLL;
    if (v290 && *((_DWORD *)v3 + 4) == 1936482674)
      goto LABEL_1063;
  }
  v292 = v520 != 23 || v15 >= 0x100;
  v293 = !v292;
  if (v293)
  {
    v294 = *(_QWORD *)v3 == 0x65726E755F787863 && *((_QWORD *)v3 + 1) == 0x6465746369727473;
    if (v294 && *(_QWORD *)(v3 + 15) == 0x736E6F696E755F64)
      goto LABEL_1063;
  }
  v296 = v15 < 0x100 ? v112 : 0;
  if (v296 == 1
    && (*(_QWORD *)v3 == 0x726573755F787863 ? (v297 = *((_QWORD *)v3 + 1) == 0x6C61726574696C5FLL) : (v297 = 0),
        v297 ? (v298 = v3[16] == 115) : (v298 = 0),
        v298)
    || (v15 < 0x100 ? (v299 = v518) : (v299 = 0),
        v299 == 1
     && (*(_QWORD *)v3 == 0x697261765F787863 ? (v300 = *((_QWORD *)v3 + 1) == 0x6D65745F63696461) : (v300 = 0),
         v300 ? (v301 = *(_QWORD *)(v3 + 14) == 0x736574616C706D65) : (v301 = 0),
         v301)))
  {
LABEL_1063:
    v283 = (v184 >> 9) & 1;
LABEL_1065:
    v15 = v283 | 0x100;
LABEL_1066:
    v329 = *(unsigned __int8 **)(v4 + 64);
    goto LABEL_1067;
  }
  if (v286)
  {
    v302 = *(_QWORD *)v3 == 0x726767615F787863 && *((_QWORD *)v3 + 1) == 0x736E5F6574616765;
    if (v302 && *(_QWORD *)(v3 + 11) == 0x696D64736E5F6574)
      goto LABEL_1064;
    v304 = *(_QWORD *)v3 == 0x616E69625F787863 && *((_QWORD *)v3 + 1) == 0x726574696C5F7972;
    if (v304 && *(_QWORD *)(v3 + 11) == 0x736C61726574696CLL)
      goto LABEL_1064;
  }
  v306 = v515;
  if (v15 >= 0x100)
    v306 = 0;
  if (v306)
  {
    v307 = *(_QWORD *)v3 == 0x746E6F635F787863 && *((_QWORD *)v3 + 1) == 0x635F6C6175747865;
    v308 = v307 && *((_QWORD *)v3 + 2) == 0x6F69737265766E6FLL;
    if (v308 && *((_WORD *)v3 + 12) == 29550)
      goto LABEL_1064;
  }
  if (v296)
  {
    v310 = *(_QWORD *)v3 == 0x6C6365645F787863 && *((_QWORD *)v3 + 1) == 0x7475615F65707974;
    if (v310 && v3[16] == 111)
      goto LABEL_1064;
  }
  if (v286)
  {
    v312 = *(_QWORD *)v3 == 0x656E65675F787863 && *((_QWORD *)v3 + 1) == 0x626D616C5F636972;
    if (v312 && *(_QWORD *)(v3 + 11) == 0x736164626D616C5FLL)
      goto LABEL_1064;
  }
  if (v296)
  {
    v314 = *(_QWORD *)v3 == 0x74696E695F787863 && *((_QWORD *)v3 + 1) == 0x657275747061635FLL;
    if (v314 && v3[16] == 115)
      goto LABEL_1064;
  }
  v316 = v498;
  if (v15 >= 0x100)
    v316 = 0;
  if (v316)
  {
    v317 = *(_QWORD *)v3 == 0x616C65725F787863 && *((_QWORD *)v3 + 1) == 0x736E6F635F646578;
    if (v317 && *(_QWORD *)(v3 + 13) == 0x7270786574736E6FLL)
      goto LABEL_1064;
  }
  v319 = v502 ^ 1;
  if (v15 > 0xFF)
    v319 = 1;
  if ((v319 & 1) == 0
    && (*(_QWORD *)v3 == 0x757465725F787863 ? (v320 = *((_QWORD *)v3 + 1) == 0x5F657079745F6E72) : (v320 = 0),
        v320 ? (v321 = *((_QWORD *)v3 + 2) == 0x6F69746375646564) : (v321 = 0),
        v321 ? (v322 = v3[24] == 110) : (v322 = 0),
        v322)
    || v299
    && (*(_QWORD *)v3 == 0x697261765F787863 ? (v323 = *((_QWORD *)v3 + 1) == 0x6D65745F656C6261) : (v323 = 0),
        v323 ? (v324 = *(_QWORD *)(v3 + 14) == 0x736574616C706D65) : (v324 = 0),
        v324))
  {
LABEL_1064:
    v283 = (v184 >> 10) & 1;
    goto LABEL_1065;
  }
  v325 = v496;
  if (v15 >= 0x100)
    v325 = 0;
  if (v325 == 1)
  {
    v326 = *(_QWORD *)v3 == 0x68746F6E5F736168 && *((_QWORD *)v3 + 1) == 0x697373615F776F72;
    if (v326 && *((_WORD *)v3 + 8) == 28263)
      goto LABEL_1137;
  }
  if (v284)
  {
    if (*(_QWORD *)v3 == 0x68746F6E5F736168 && *((_QWORD *)v3 + 1) == 0x79706F635F776F72)
      goto LABEL_1137;
  }
  else if (v293)
  {
    v344 = *(_QWORD *)v3 == 0x68746F6E5F736168 && *((_QWORD *)v3 + 1) == 0x736E6F635F776F72;
    if (v344 && *(_QWORD *)(v3 + 15) == 0x726F746375727473)
      goto LABEL_1137;
  }
  if (v325)
  {
    v346 = *(_QWORD *)v3 == 0x766972745F736168 && *((_QWORD *)v3 + 1) == 0x697373615F6C6169;
    if (v346 && *((_WORD *)v3 + 8) == 28263)
    {
LABEL_1137:
      v283 = (v184 >> 8) & 1;
      goto LABEL_1065;
    }
  }
  if (v284)
  {
    if (*(_QWORD *)v3 != 0x766972745F736168 || *((_QWORD *)v3 + 1) != 0x79706F635F6C6169)
      goto LABEL_1166;
    goto LABEL_1137;
  }
  if (v293)
  {
    v352 = *(_QWORD *)v3 == 0x766972745F736168 && *((_QWORD *)v3 + 1) == 0x736E6F635F6C6169;
    if (v352 && *(_QWORD *)(v3 + 15) == 0x726F746375727473)
      goto LABEL_1337;
  }
LABEL_1166:
  if (v299)
  {
    v208 = *(_QWORD *)(v3 + 14);
    v354 = *(_QWORD *)v3 == 0x766972745F736168 && *((_QWORD *)v3 + 1) == 0x747365645F6C6169;
    if (v354 && v208 == 0x726F746375727473)
      goto LABEL_1337;
    v208 = 0x747269765F736168;
    v356 = *(_QWORD *)v3 == 0x747269765F736168 && *((_QWORD *)v3 + 1) == 0x747365645F6C6175;
    if (v356 && *(_QWORD *)(v3 + 14) == 0x726F746375727473)
      goto LABEL_1337;
  }
  v358 = v507 ^ 1;
  if (v15 > 0xFF)
    v358 = 1;
  if ((v358 & 1) == 0 && *(_QWORD *)v3 == 0x72747362615F7369 && *(_QWORD *)(v3 + 3) == 0x7463617274736261)
    goto LABEL_1337;
  v360 = v15 < 0x100 && v221;
  if (v360 && *(_QWORD *)v3 == 0x5F657361625F7369 && *((_WORD *)v3 + 4) == 26223)
    goto LABEL_1337;
  v362 = v503;
  if (v15 >= 0x100)
    v362 = 0;
  if (v362 && *(_QWORD *)v3 == 0x7373616C635F7369)
    goto LABEL_1337;
  if (v284)
  {
    if (*(_QWORD *)v3 == 0x74736E6F635F7369 && *((_QWORD *)v3 + 1) == 0x656C626974637572)
      goto LABEL_1337;
  }
  if (v296)
  {
    v364 = *(_QWORD *)v3 == 0x65766E6F635F7369 && *((_QWORD *)v3 + 1) == 0x745F656C62697472;
    if (v364 && v3[16] == 111)
      goto LABEL_1337;
  }
  if (v362 && *(_QWORD *)v3 == 0x7974706D655F7369)
    goto LABEL_1337;
  v366 = v520 != 7 || v15 >= 0x100;
  v367 = !v366;
  if (v367 && *(_DWORD *)v3 == 1700754281 && *(_DWORD *)(v3 + 3) == 1836412517)
    goto LABEL_1337;
  if (v362 && *(_QWORD *)v3 == 0x6C616E69665F7369)
    goto LABEL_1337;
  if (v360 && *(_QWORD *)v3 == 0x726574696C5F7369 && *((_WORD *)v3 + 4) == 27745)
    goto LABEL_1337;
  if (v325)
  {
    v370 = *(_QWORD *)v3 == 0x646E6174735F7369 && *((_QWORD *)v3 + 1) == 0x6F79616C5F647261;
    if (v370 && *((_WORD *)v3 + 8) == 29813)
      goto LABEL_1337;
  }
  v372 = v491 ^ 1;
  if (v15 > 0xFF)
    v372 = 1;
  if ((v372 & 1) == 0 && *(_DWORD *)v3 == 1885303657 && *((_WORD *)v3 + 2) == 25711)
    goto LABEL_1337;
  v374 = v172 ^ 1;
  if (v15 > 0xFF)
    v374 = 1;
  if ((v374 & 1) == 0 && *(_QWORD *)v3 == 0x6D796C6F705F7369 && *(_QWORD *)(v3 + 6) == 0x63696870726F6D79)
    goto LABEL_1337;
  v376 = !v152;
  if (v15 > 0xFF)
    v376 = 1;
  if ((v376 & 1) == 0 && *(_QWORD *)v3 == 0x656C6165735F7369 && v3[8] == 100)
  {
    LODWORD(v396) = (v184 & 0x120) == 288;
    goto LABEL_1338;
  }
  if (v360 && *(_QWORD *)v3 == 0x69766972745F7369 && *((_WORD *)v3 + 4) == 27745)
    goto LABEL_1337;
  if (v293
    && (*(_QWORD *)v3 == 0x69766972745F7369 ? (v379 = *((_QWORD *)v3 + 1) == 0x7373615F796C6C61) : (v379 = 0),
        v379 ? (v380 = *(_QWORD *)(v3 + 15) == 0x656C62616E676973) : (v380 = 0),
        v380)
    || v306
    && (*(_QWORD *)v3 == 0x69766972745F7369 ? (v381 = *((_QWORD *)v3 + 1) == 0x6E6F635F796C6C61) : (v381 = 0),
        v381 ? (v382 = *((_QWORD *)v3 + 2) == 0x6269746375727473) : (v382 = 0),
        v382 ? (v383 = *((unsigned __int16 *)v3 + 12) == 25964) : (v383 = 0),
        v383)
    || v316
    && (*(_QWORD *)v3 == 0x69766972745F7369 ? (v384 = *((_QWORD *)v3 + 1) == 0x706F635F796C6C61) : (v384 = 0),
        v384 ? (v385 = *(_QWORD *)(v3 + 13) == 0x656C626179706F63) : (v385 = 0),
        v385)
    || v362 && *(_QWORD *)v3 == 0x6E6F696E755F7369)
  {
LABEL_1337:
    LODWORD(v396) = (v184 >> 8) & 1;
LABEL_1338:
    v15 = v396 | 0x100;
    goto LABEL_1066;
  }
  if (v367 && *(_DWORD *)v3 == 1969516397 && *(_DWORD *)(v3 + 3) == 1936026741)
  {
    v396 = (*v500 >> 45) & 1;
    goto LABEL_1338;
  }
  v387 = *v490;
  if (v360 && *(_QWORD *)v3 == 0x6174735F65666173 && *((_WORD *)v3 + 4) == 27491)
  {
    v396 = (v387 >> 52) & 1;
    goto LABEL_1338;
  }
  if (v296)
  {
    v389 = *(_QWORD *)v3 == 0x635F776F64616873 && *((_QWORD *)v3 + 1) == 0x636174735F6C6C61;
    if (v389 && v3[16] == 107)
    {
      v396 = (v387 >> 53) & 1;
      goto LABEL_1338;
    }
  }
  v329 = *(unsigned __int8 **)(v4 + 64);
  if (v520 == 3 && v15 <= 0xFF && (*(_WORD *)v3 == 27764 ? (v391 = v3[2] == 115) : (v391 = 0), v391))
  {
    v15 = v329[81] | 0x100;
  }
  else
  {
    v392 = v506 ^ 1;
    if (v15 > 0xFF)
      v392 = 1;
    if ((v392 & 1) == 0
      && (*(_QWORD *)v3 == 0x69796C7265646E75 ? (v393 = *(_QWORD *)(v3 + 7) == 0x657079745F676E69) : (v393 = 0), v393))
    {
      v15 = (v184 >> 8) & 1 | 0x100;
    }
    else if (v289)
    {
      v394 = *(_QWORD *)v3 == 0x656D697265707865 && *((_QWORD *)v3 + 1) == 0x62696C5F6C61746ELL;
      if (v394 && *((_DWORD *)v3 + 4) == 2037539186)
        v15 = ((*v489 & 0x2000000000000000) != 0) | 0x100;
    }
  }
LABEL_1067:
  if (v520 == 23 && v15 <= 0xFF)
  {
    if (*(_QWORD *)v3 == 0x5F6962615F787863
      && *((_QWORD *)v3 + 1) == 0x65766974616C6572
      && *(_QWORD *)(v3 + 15) == 0x656C626174765F65)
    {
      v15 = (v184 >> 8) & ((*((_BYTE *)v499 + 4) & 0x40) >> 6) | 0x100;
      goto LABEL_1100;
    }
    v332 = v519[29];
    if (*(_QWORD *)v3 == 0x656D5F6465707974
      && *((_QWORD *)v3 + 1) == 0x65706F5F79726F6DLL
      && *(_QWORD *)(v3 + 15) == 0x736E6F6974617265)
    {
      v335 = HIDWORD(v332) & 1;
LABEL_1098:
      v15 = v335 | 0x100;
      goto LABEL_1100;
    }
  }
  else
  {
    v332 = v519[29];
  }
  v336 = !v193;
  if (v15 > 0xFF)
    v336 = 1;
  if ((v336 & 1) == 0)
  {
    v337 = *(_QWORD *)v3 == 0x78635F6465707974 && *((_QWORD *)v3 + 1) == 0x65645F77656E5F78;
    if (v337 && *((_DWORD *)v3 + 4) == 1702126956)
    {
      v335 = (v332 >> 33) & 1;
      goto LABEL_1098;
    }
  }
LABEL_1100:
  v339 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v329 + 728))(v329, 30, v208);
  v340 = !v516;
  v341 = v15 >> 8;
  if (v15 > 0xFF)
    v340 = 1;
  if ((v340 & 1) == 0 && *(_QWORD *)v3 == 0x735F7473696C6176 && *(_QWORD *)(v3 + 5) == 0x6363657A69735F74)
  {
    LOBYTE(v15) = v339 == 0;
    v341 = 1;
  }
  if ((_BYTE)v15)
    v342 = v341 == 0;
  else
    v342 = 1;
  return !v342;
}

uint64_t sub_22F180B90(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  char v11;
  int v13;
  char v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v18;
  char v19;
  BOOL v24;
  BOOL v26;
  char v28;
  BOOL v29;
  char v31;
  BOOL v32;
  unint64_t v33;
  BOOL v43;
  BOOL v44;
  unsigned int v46;
  char v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  char v53;
  BOOL v54;
  BOOL v55;
  char v57;
  _BOOL4 v67;
  BOOL v70;

  v2 = *(_QWORD **)a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*(_QWORD *)a1 + 48), 1043);
  if (!result)
    return result;
  v4 = *(char **)(result + 16);
  v5 = (unsigned int *)(v4 + 16);
  v6 = *(unsigned int *)v4;
  if (sub_22F17C2CC((uint64_t)v2, v4 + 16, v6))
    return 1;
  if (*(int *)(*(_QWORD *)(v2[6] + 128) + 28) > 3)
    return 0;
  v7 = (uint64_t *)v2[7];
  if (v6 >= 2)
  {
    if (*(_WORD *)v5 == 24415 && *(_WORD *)((char *)v5 + v6 - 2) == 24415 && v6 >= 4)
    {
      v5 = (unsigned int *)(v4 + 18);
      if (v6 - 2 >= v6 - 4)
        v6 -= 4;
      else
        v6 -= 2;
    }
    switch(v6)
    {
      case 8uLL:
        if (*(_QWORD *)v5 == 0x63696D6F74615F63)
          LODWORD(v2) = 257;
        else
          LODWORD(v2) = 0;
        v6 = 8;
        goto LABEL_8;
      case 9uLL:
        v44 = *(_QWORD *)v5 == 0x616E67696C615F63 && *((_BYTE *)v5 + 8) == 115;
        LODWORD(v2) = 257;
        if (!v44)
        {
          if (*(_QWORD *)v5 ^ 0x6F6E67696C615F63 | *((unsigned __int8 *)v5 + 8) ^ 0x66)
            LODWORD(v2) = 0;
          else
            LODWORD(v2) = 257;
        }
        v6 = 9;
        goto LABEL_8;
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
        goto LABEL_133;
      case 0xEuLL:
        if (*(_QWORD *)v5 != 0x6461657268745F63 || *(_QWORD *)((char *)v5 + 6) != 0x6C61636F6C5F6461)
        {
          v46 = (*(_QWORD *)v5 ^ 0x657869665F787863 | *(_QWORD *)((char *)v5 + 6) ^ 0x6D756E655F646578) == 0;
          LOBYTE(v2) = (*(_QWORD *)v5 ^ 0x657869665F787863 | *(_QWORD *)((char *)v5 + 6) ^ 0x6D756E655F646578) == 0;
          goto LABEL_270;
        }
        LOBYTE(v2) = *(_BYTE *)(v2[8] + 81);
        goto LABEL_269;
      case 0xFuLL:
        if (*(_QWORD *)v5 ^ 0x6369746174735F63 | *(_QWORD *)((char *)v5 + 7) ^ 0x7472657373615F63)
          LODWORD(v2) = 0;
        else
          LODWORD(v2) = 257;
        v6 = 15;
        goto LABEL_8;
      default:
        if (v6 != 20)
        {
LABEL_133:
          LODWORD(v2) = 0;
          v8 = *v7;
          switch(v6)
          {
            case 0x15uLL:
              if (*(_QWORD *)v5 == 0x656C65645F787863
                && *((_QWORD *)v5 + 1) == 0x636E75665F646574
                && *(_QWORD *)((char *)v5 + 13) == 0x736E6F6974636E75)
              {
                goto LABEL_268;
              }
              v43 = *(_QWORD *)v5 == 0x696C6E695F787863
                 && *((_QWORD *)v5 + 1) == 0x73656D616E5F656ELL
                 && *(_QWORD *)((char *)v5 + 13) == 0x736563617073656DLL;
              v13 = 1;
              if (v43)
                goto LABEL_231;
              v14 = 0;
              v11 = 0;
              LODWORD(v2) = 0;
              goto LABEL_258;
            case 0x16uLL:
            case 0x17uLL:
            case 0x1AuLL:
            case 0x1BuLL:
              goto LABEL_9;
            case 0x18uLL:
              LOBYTE(v2) = 0;
              v46 = 0;
              if (*(_QWORD *)v5 != 0x6C7078655F787863
                || *((_QWORD *)v5 + 1) != 0x6E6F635F74696369
                || *((_QWORD *)v5 + 2) != 0x736E6F6973726576)
              {
                goto LABEL_270;
              }
              v13 = 0;
LABEL_231:
              v14 = 0;
              v11 = 0;
              LODWORD(v2) = (v8 >> 8) & 1 | 0x100;
              goto LABEL_258;
            case 0x19uLL:
              if (*(_QWORD *)v5 == 0x736E6F6E5F787863
                && *((_QWORD *)v5 + 1) == 0x656D5F6369746174
                && *((_QWORD *)v5 + 2) == 0x696E695F7265626DLL
                && *((_BYTE *)v5 + 24) == 116)
              {
                v10 = 0;
                LODWORD(v2) = (v8 >> 8) & 1 | 0x100;
                v11 = 1;
                v6 = 25;
                goto LABEL_36;
              }
              v14 = 0;
              v13 = 0;
              LODWORD(v2) = 0;
              v11 = 1;
LABEL_258:
              v10 = 0;
              v15 = v2 < 0x100;
              if (!v13 || v2 > 0xFF)
                goto LABEL_37;
              if (*(_QWORD *)v5 != 0x6C6176725F787863
                || *((_QWORD *)v5 + 1) != 0x72656665725F6575
                || *(_QWORD *)((char *)v5 + 13) != 0x7365636E65726566)
              {
                v10 = 0;
                v15 = 1;
                goto LABEL_37;
              }
              break;
            case 0x1CuLL:
              v67 = *(_QWORD *)v5 != 0x61636F6C5F787863
                 || *((_QWORD *)v5 + 1) != 0x745F657079745F6CLL
                 || *((_QWORD *)v5 + 2) != 0x5F6574616C706D65
                 || v5[6] != 1936159329;
              v14 = 1;
              v13 = 0;
              v11 = 0;
              if (v67)
                LODWORD(v2) = 0;
              else
                LODWORD(v2) = (v8 >> 8) & 1 | 0x100;
              goto LABEL_258;
            default:
              if (v6 != 10)
                goto LABEL_9;
              if (*(_QWORD *)v5 != 0x6D6F74615F787863 || *((_WORD *)v5 + 4) != 25449)
                goto LABEL_220;
              goto LABEL_268;
          }
          goto LABEL_268;
        }
        if (*(_QWORD *)v5 == 0x735F635F636A626FLL && *((_QWORD *)v5 + 1) == 0x73615F6369746174 && v5[4] == 1953654131)
        {
          LODWORD(v2) = 257;
          v6 = 20;
          goto LABEL_8;
        }
        if (*(_QWORD *)v5 == 0x6972656E65675F63 && *((_QWORD *)v5 + 1) == 0x7463656C65735F63 && v5[4] == 1936617321)
        {
          LOBYTE(v2) = 1;
          goto LABEL_269;
        }
        if (*(_QWORD *)v5 == 0x7265766F5F787863 && *((_QWORD *)v5 + 1) == 0x6E6F635F65646972 && v5[4] == 1819243124)
        {
          v10 = 0;
          v11 = 0;
          v8 = *v7;
          LODWORD(v2) = (*v7 >> 8) & 1 | 0x100;
          v6 = 20;
          goto LABEL_36;
        }
LABEL_220:
        LOBYTE(v2) = 0;
        v46 = 0;
        break;
    }
    goto LABEL_270;
  }
  LODWORD(v2) = 0;
LABEL_8:
  v8 = *v7;
LABEL_9:
  if (v2 <= 0xFF && v6 == 13)
  {
    v9 = *(_QWORD *)v5 == 0x676E61725F787863 && *(_QWORD *)((char *)v5 + 5) == 0x726F665F65676E61;
    v10 = 0;
    v11 = 0;
    if (v9)
      LODWORD(v2) = (v8 >> 8) & 1 | 0x100;
    v6 = 13;
  }
  else
  {
    v11 = 0;
    v10 = v6 == 33;
    if (v2 <= 0xFF && v6 == 33)
    {
      if (!memcmp(v5, "cxx_reference_qualified_functions", 0x21uLL))
        goto LABEL_268;
      v11 = 0;
      v10 = 1;
    }
  }
LABEL_36:
  LOBYTE(v13) = 0;
  v14 = 0;
  v15 = v2 < 0x100;
LABEL_37:
  v16 = v6 == 22;
  if (v6 == 22 && v15)
  {
    if (*(_QWORD *)v5 != 0x697261765F787863
      || *((_QWORD *)v5 + 1) != 0x6D65745F63696461
      || *(_QWORD *)((char *)v5 + 14) != 0x736574616C706D65)
    {
      v16 = 1;
      goto LABEL_73;
    }
LABEL_268:
    LODWORD(v2) = (v8 >> 8) & 1;
    goto LABEL_269;
  }
  v18 = !v15;
  if (v6 == 19)
    v19 = v18;
  else
    v19 = 1;
  if ((v19 & 1) != 0)
  {
    if (v6 != 17)
      v18 = 1;
    if ((v18 & 1) == 0)
    {
      v24 = *(_QWORD *)v5 == 0x74696E695F787863 && *((_QWORD *)v5 + 1) == 0x657275747061635FLL;
      if (v24 && *((_BYTE *)v5 + 16) == 115)
      {
        LODWORD(v2) = (v8 >> 9) & 1 | 0x100;
        goto LABEL_167;
      }
    }
  }
  else if (*(_QWORD *)((char *)v5 + 11) == 0x736C61726574696CLL
         && *((_QWORD *)v5 + 1) == 0x726574696C5F7972
         && *(_QWORD *)v5 == 0x616E69625F787863)
  {
    LODWORD(v2) = 257;
  }
LABEL_73:
  if (v16 && v2 <= 0xFF)
  {
    v26 = *(_QWORD *)v5 == 0x697261765F787863 && *((_QWORD *)v5 + 1) == 0x6D65745F656C6261;
    if (v26 && *(_QWORD *)((char *)v5 + 14) == 0x736574616C706D65)
    {
      LODWORD(v2) = (v8 >> 8) & 1 | 0x100;
LABEL_167:
      v32 = v6 == 36;
      goto LABEL_168;
    }
  }
  v28 = v13 ^ 1;
  if (v2 > 0xFF)
    v28 = 1;
  if ((v28 & 1) == 0)
  {
    v29 = *(_QWORD *)((char *)v5 + 13) == 0x64656B72616D6E75 && *((_QWORD *)v5 + 1) == 0x6D6E755F656C6261;
    if (v29 && *(_QWORD *)v5 == 0x64616F6C7265766FLL)
      LODWORD(v2) = 257;
  }
  v31 = !v10;
  if (v2 > 0xFF)
    v31 = 1;
  if ((v31 & 1) == 0 && !memcmp(v5, "pragma_clang_attribute_namespaces", 0x21uLL))
    LODWORD(v2) = 257;
  if (v6 == 43 && v2 <= 0xFF)
  {
    if (!memcmp(v5, "pragma_clang_attribute_external_declaration", 0x2BuLL))
      LODWORD(v2) = 257;
    goto LABEL_167;
  }
  v32 = v6 == 36;
  if (v6 == 36 && v2 <= 0xFF)
  {
    if (!memcmp(v5, "statement_attributes_with_gnu_syntax", 0x24uLL))
      LODWORD(v2) = 257;
    LOWORD(v33) = ((unint64_t)v7[1] >> 57) | (*((_WORD *)v7 + 8) << 7);
    v32 = 1;
LABEL_174:
    v48 = v11 ^ 1;
    if (v2 > 0xFF)
      v48 = 1;
    if ((v48 & 1) != 0
      || (*(_QWORD *)v5 == 0x5F6D73615F756E67 ? (v49 = *((_QWORD *)v5 + 1) == 0x7469775F6F746F67) : (v49 = 0),
          v49 ? (v50 = *((_QWORD *)v5 + 2) == 0x74757074756F5F68) : (v50 = 0),
          v50 ? (v51 = *((_BYTE *)v5 + 24) == 115) : (v51 = 0),
          !v51))
    {
      if (v6 != 12
        || v2 > 0xFF
        || (*(_QWORD *)v5 == 0x745F78697274616DLL ? (v52 = v5[2] == 1936027769) : (v52 = 0), !v52))
      {
        v53 = v14 ^ 1;
        if (v2 > 0xFF)
          v53 = 1;
        if ((v53 & 1) == 0)
        {
          v54 = v5[6] == 1852795251 && *((_QWORD *)v5 + 2) == 0x697669645F72616CLL;
          v55 = v54 && *((_QWORD *)v5 + 1) == 0x6163735F73657079;
          if (v55 && *(_QWORD *)v5 == 0x745F78697274616DLL)
            LODWORD(v2) = 257;
        }
        v57 = !v32;
        v46 = v2 >> 8;
        if (v2 > 0xFF)
          v57 = 1;
        if ((v57 & 1) == 0 && !memcmp(v5, "cxx_attributes_on_using_declarations", 0x24uLL))
        {
          LOBYTE(v2) = (v8 & 0x200) != 0;
          v46 = 1;
        }
        goto LABEL_270;
      }
      v33 = (unint64_t)v7[25] >> 35;
    }
    goto LABEL_213;
  }
LABEL_168:
  LOWORD(v33) = ((unint64_t)v7[1] >> 57) | (*((_WORD *)v7 + 8) << 7);
  if (v6 != 7 || v2 > 0xFF)
    goto LABEL_174;
  if (*v5 != 1601531495 || *(unsigned int *)((char *)v5 + 3) != 1836278111)
    goto LABEL_174;
LABEL_213:
  LOBYTE(v2) = v33 & 1;
LABEL_269:
  v46 = 1;
LABEL_270:
  if ((_BYTE)v2)
    v70 = v46 == 0;
  else
    v70 = 1;
  return !v70;
}

uint64_t sub_22F1816BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  unint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v14;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v23;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unint64_t *v47;
  size_t v48;
  _BOOL4 v49;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (!result)
    return result;
  v4 = *(_QWORD *)result;
  if (((*(_QWORD *)result >> 11) & 0x3FFF) >= 7)
  {
    if ((v4 & 0x1FFFC00) == 0x9D000)
      return 201802;
    else
      return 1;
  }
  v5 = *(int **)(result + 16);
  if ((v4 & 0x4000001FFLL) == 5)
  {
    v8 = *v5;
    v7 = (unint64_t *)(v5 + 4);
    v6 = v8;
    v9 = **(_QWORD **)(v2 + 56);
    if (v8 == 18)
    {
      if (*v7 == 0x695F656B616D5F5FLL && v7[1] == 0x735F72656765746ELL && *((_WORD *)v7 + 8) == 29029)
      {
        v19 = (v9 >> 8) & 1;
      }
      else
      {
        if (*v7 != 0x7261745F73695F5FLL || v7[1] != 0x646E65765F746567 || *((_WORD *)v7 + 8) != 29295)
        {
          v14 = *v7 == 0x69746C6975625F5FLL && v7[1] == 0x4954434E55465F6ELL;
          if (!v14 || *((_WORD *)v7 + 8) != 20047)
          {
            v16 = 0x5F5F6275696C7469;
            v17 = bswap64(*v7);
            if (v17 == 0x5F5F6275696C7469)
            {
              v16 = 0x6E5F6269745F6361;
              v17 = bswap64(v7[1]);
              if (v17 == 0x6E5F6269745F6361)
              {
                v17 = bswap32(*((unsigned __int16 *)v7 + 8)) >> 16;
                v16 = 29556;
                if ((_DWORD)v17 == 29556)
                {
                  v18 = 0;
                  v19 = 0;
LABEL_122:
                  if (!v18)
                    v19 = 257;
                  v26 = v19 >> 8;
                  goto LABEL_125;
                }
              }
            }
            v19 = 0;
LABEL_110:
            if (v17 < v16)
              v18 = -1;
            else
              v18 = 1;
            goto LABEL_122;
          }
        }
LABEL_82:
        LOBYTE(v19) = 1;
      }
      v26 = 1;
LABEL_125:
      v37 = v19 == 0;
      return !v37 && v26 != 0;
    }
    v19 = 0;
    switch((int)v6)
    {
      case 14:
        if (*v7 == 0x7261745F73695F5FLL && *(unint64_t *)((char *)v7 + 6) == 0x736F5F7465677261)
          goto LABEL_82;
        if (*v7 == 0x69746C6975625F5FLL && *(unint64_t *)((char *)v7 + 6) == 0x454E494C5F6E6974)
          goto LABEL_82;
        v33 = *v7 ^ 0x69746C6975625F5FLL;
        v34 = *(unint64_t *)((char *)v7 + 6) ^ 0x454C49465F6E6974;
        goto LABEL_76;
      case 15:
      case 17:
      case 18:
      case 21:
        goto LABEL_100;
      case 16:
        if (*v7 == 0x7261745F73695F5FLL && v7[1] == 0x686372615F746567)
          goto LABEL_82;
        v26 = (*v7 ^ 0x69746C6975625F5FLL | v7[1] ^ 0x4E4D554C4F435F6ELL) == 0;
        LOBYTE(v19) = (*v7 ^ 0x69746C6975625F5FLL | v7[1] ^ 0x4E4D554C4F435F6ELL) == 0;
        goto LABEL_125;
      case 19:
        if (*(unint64_t *)((char *)v7 + 11) == 0x746E656D656C655FLL
          && v7[1] == 0x6D656C655F6B6361
          && *v7 == 0x705F657079745F5FLL)
        {
          v19 = (v9 >> 8) & 1 | 0x100;
        }
        else
        {
          v19 = 0;
        }
        goto LABEL_100;
      case 20:
        v42 = *v7 ^ 0x61745F7361685F5FLL;
        v43 = v7[1] ^ 0x7261765F74656772;
        v44 = *((unsigned int *)v7 + 4);
        v45 = 1953390953;
        goto LABEL_96;
      case 22:
        v42 = *v7 ^ 0x7261745F73695F5FLL;
        v43 = v7[1] ^ 0x697261765F746567;
        v44 = *(unint64_t *)((char *)v7 + 14);
        v45 = 0x736F5F746E616972;
        goto LABEL_96;
      case 23:
        v42 = *v7 ^ 0x7261745F73695F5FLL;
        v43 = v7[1] ^ 0x69766E655F746567;
        v44 = *(unint64_t *)((char *)v7 + 15);
        v45 = 0x746E656D6E6F7269;
LABEL_96:
        v38 = v42 | v43 | v44 ^ v45;
        goto LABEL_97;
      default:
        if ((_DWORD)v6 != 31)
          goto LABEL_100;
        v33 = *v7 ^ 0x7261745F73695F5FLL | v7[1] ^ 0x697261765F746567;
        v34 = v7[2] ^ 0x69766E655F746E61 | *(unint64_t *)((char *)v7 + 23) ^ 0x746E656D6E6F7269;
LABEL_76:
        v38 = v33 | v34;
LABEL_97:
        if (v38)
          v19 = 0;
        else
          v19 = 257;
LABEL_100:
        if (v6 == 37 && v19 <= 0xFF)
        {
          v46 = "__builtin_unsafe_forge_bidi_indexable";
          v47 = v7;
          v48 = 37;
        }
        else
        {
          if (v6 == 29 && v19 <= 0xFF)
          {
            v16 = 0x5F5F6275696C7469;
            v17 = bswap64(*v7);
            if (v17 == 0x5F5F6275696C7469)
            {
              v16 = 0x6E5F756E73616665;
              v17 = bswap64(v7[1]);
              if (v17 == 0x6E5F756E73616665)
              {
                v16 = 0x5F666F7267655F73;
                v17 = bswap64(v7[2]);
                if (v17 == 0x5F666F7267655F73)
                {
                  v16 = 0x655F73696E676C65;
                  v17 = bswap64(*(unint64_t *)((char *)v7 + 21));
                  if (v17 == 0x655F73696E676C65)
                  {
                    v18 = 0;
                    goto LABEL_122;
                  }
                }
              }
            }
            goto LABEL_110;
          }
          v49 = v6 == 33;
          if (v6 == 33 && v19 <= 0xFF)
          {
            if (!memcmp(v7, "__builtin_get_pointer_lower_bound", 0x21uLL))
              v19 = 257;
            v49 = 1;
          }
          v26 = v19 >> 8;
          if (!v49 || v19 > 0xFF)
            goto LABEL_125;
          v46 = "__builtin_get_pointer_upper_bound";
          v47 = v7;
          v48 = 33;
        }
        v18 = memcmp(v47, v46, v48);
        goto LABEL_122;
    }
  }
  v20 = *(_QWORD *)v5;
  v21 = *(_QWORD *)v5 & 0xFFFFFFFELL;
  if (v21 >= 0xA && *((_QWORD *)v5 + 2) == 0x69746C6975625F5FLL && *((_WORD *)v5 + 12) == 24430)
    return 1;
  v23 = *(_QWORD *)v5;
  if (v23 >= 5uLL && v5[4] == 1936285535 && *((_BYTE *)v5 + 20) == 95)
    return 1;
  if (v21 >= 6 && v5[4] == 1634230111 && *((_WORD *)v5 + 10) == 24435)
    return 1;
  v26 = 0;
  if ((int)v20 > 16)
  {
    if ((_DWORD)v20 == 17)
    {
      v36 = *((_QWORD *)v5 + 2) ^ 0x6C7265646E755F5FLL | *((_QWORD *)v5 + 3) ^ 0x7079745F676E6979 | *((unsigned __int8 *)v5 + 32) ^ 0x65;
      goto LABEL_72;
    }
    v27 = 0;
    if (v23 == 30)
    {
      v28 = *((_QWORD *)v5 + 2) ^ 0x6572656665725F5FLL | *((_QWORD *)v5 + 3) ^ 0x646E69625F65636ELL;
      v35 = *((_QWORD *)v5 + 4) ^ 0x6D65745F6F745F73 | *(_QWORD *)((char *)v5 + 38) ^ 0x797261726F706D65;
LABEL_70:
      v36 = v28 | v35;
LABEL_72:
      v27 = v36 == 0;
      v26 = v27;
    }
  }
  else
  {
    if ((_DWORD)v20 == 12)
    {
      v28 = *((_QWORD *)v5 + 2) ^ 0x5F79617272615F5FLL;
      v29 = v5[6];
      v30 = 1802396018;
      goto LABEL_69;
    }
    v27 = 0;
    if (v23 == 14)
    {
      v28 = *((_QWORD *)v5 + 2) ^ 0x5F79617272615F5FLL;
      v29 = *(_QWORD *)((char *)v5 + 22);
      v30 = 0x746E657478655F79;
LABEL_69:
      v35 = v29 ^ v30;
      goto LABEL_70;
    }
  }
  v37 = !v27;
  return !v37 && v26 != 0;
}

BOOL sub_22F181E70(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 16) == 5;
}

uint64_t sub_22F181E80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
    return sub_22F195174(0, 0, result, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 56));
  return result;
}

uint64_t sub_22F181ED0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 56);
    return (*(_BYTE *)(v4 + 3) & 0x10) != 0
        && sub_22F195174(1, 0, result, *(_QWORD *)(v2 + 64), v4) != 0;
  }
  return result;
}

uint64_t sub_22F181F34(unint64_t *a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *a1;
  v7 = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_WORD *)(v6 + 536);
  *(_WORD *)(v6 + 536) = v9 | 0x20;
  sub_22F18FB4C(v6, (unsigned int *)a2);
  *(_WORD *)(v6 + 536) = *(_WORD *)(v6 + 536) & 0xFFDF | v9 & 0x20;
  if (*(_WORD *)(a2 + 16) == 71)
  {
    sub_22F18FB4C(v6, (unsigned int *)a2);
    v10 = sub_22F17C1E0(a2, *(_QWORD *)(v6 + 48), 1043);
    if (!v10)
      return 0;
  }
  else
  {
    *a3 = 1;
    v10 = v8;
    v8 = 0;
  }
  if (*(_BYTE *)a1[1])
    v12 = 3;
  else
    v12 = 4;
  return sub_22F195174(v12, v8, v10, *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 56));
}

uint64_t sub_22F182024(uint64_t *a1, unint64_t a2, BOOL *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *p_str;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v18;
  std::string __str;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  memset(&__str, 0, sizeof(__str));
  v4 = *(_DWORD *)a2;
  *a3 = *(unsigned __int16 *)(a2 + 16) == 13;
  v5 = 0;
  if (sub_22F190300(v3, a2, (uint64_t)&__str, (uint64_t)"'__has_warning'", 0))
  {
    size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size >= 3
      && ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (p_str = &__str)
        : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
          p_str->__r_.__value_.__s.__data_[0] == 45
       && ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? (v8 = &__str)
         : (v8 = (std::string *)__str.__r_.__value_.__r.__words[0]),
           v8->__r_.__value_.__s.__data_[1] == 87)))
    {
      v21 = &v23;
      v22 = 0xA00000000;
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32);
      std::string::basic_string(&v18, &__str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v18;
      else
        v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = *((_BYTE *)&v18.__r_.__value_.__s + 23) & 0x7F;
      else
        v11 = v18.__r_.__value_.__l.__size_;
      v12 = sub_22F1CFA08(v9, 0, v10, v11, (uint64_t)&v21);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v5 = v12 ^ 1u;
      if (v21 != &v23)
        free(v21);
    }
    else
    {
      v13 = *(_QWORD *)(v3 + 48);
      *(_DWORD *)(v13 + 312) = v4;
      *(_DWORD *)(v13 + 316) = 1318;
      if (*(char *)(v13 + 311) < 0)
      {
        **(_BYTE **)(v13 + 288) = 0;
        *(_QWORD *)(v13 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v13 + 288) = 0;
        *(_BYTE *)(v13 + 311) = 0;
      }
      v21 = (void *)(v13 + 320);
      v22 = 0;
      v23 = v13;
      v24 = 1;
      *(_BYTE *)(v13 + 320) = 0;
      *(_DWORD *)(v13 + 664) = 0;
      v14 = *(unsigned int *)(v13 + 776);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(v13 + 768);
        v16 = 56 * v14;
        do
        {
          if (*(char *)(v15 + v16 - 9) < 0)
            operator delete(*(void **)(v15 + v16 - 32));
          v16 -= 56;
        }
        while (v16);
      }
      *(_DWORD *)(v13 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v21);
      v5 = 0;
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v5;
}

BOOL sub_22F18223C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  const void *v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;

  v2 = *a1;
  v3 = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1041);
  v4 = *(_QWORD *)(v2 + 56);
  if ((*(_BYTE *)(v4 + 240) & 0xE0) == 0 || v3 == 0)
    return 0;
  v6 = *(unsigned int **)(v3 + 16);
  v9 = *v6;
  v7 = v6 + 4;
  v8 = v9;
  v10 = v4 + 496;
  v11 = *(_BYTE *)(v4 + 519);
  v13 = *(_QWORD *)(v4 + 496);
  v12 = *(_QWORD *)(v4 + 504);
  v14 = (const void *)(v11 >= 0 ? v10 : v13);
  if (v11 >= 0)
    v12 = v11 & 0x7F;
  if (v8 != v12)
    return 0;
  if (v8)
    return memcmp(v7, v14, v8) == 0;
  return 1;
}

BOOL sub_22F1822D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  int v9;
  int v10;
  _BOOL8 v13;
  _QWORD v15[4];
  __int16 v16;
  std::string v17;
  int v18;
  int v19;
  __int128 v20;
  std::string::size_type v21;

  v2 = *a1;
  v3 = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned int **)(v3 + 16);
  v6 = *v5;
  v15[0] = v5 + 4;
  v15[1] = v6;
  llvm::StringRef::lower((llvm::StringRef *)v15);
  v7 = std::string::append(&v17, "--");
  v8 = v7->__r_.__value_.__r.__words[2];
  v20 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v16 = 260;
  v15[0] = &v20;
  MEMORY[0x23489F1BC](&v17, v15);
  v9 = *(_DWORD *)(v4 + 56);
  if ((v9 - 39) >= 2)
  {
    v10 = *(_DWORD *)(v4 + 60);
LABEL_19:
    v13 = (!v19 || v19 == v10) && v18 == v9;
    goto LABEL_23;
  }
  v10 = *(_DWORD *)(v4 + 60);
  if (v19 && v19 != v10)
    goto LABEL_19;
  if ((v9 != 39 || v18 != 1) && (v9 != 40 || v18 != 2))
    goto LABEL_19;
  v13 = 1;
LABEL_23:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  return v13;
}

uint64_t sub_22F182418(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
  {
    v4 = result;
    llvm::Triple::getVendorName((llvm::Triple *)(*(_QWORD *)(v2 + 64) + 32));
    v6 = v5;
    if (!v5)
      v6 = 7;
    return v6 == **(_DWORD **)(v4 + 16) && llvm::StringRef::compare_insensitive() == 0;
  }
  return result;
}

uint64_t sub_22F1824AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
    return sub_22F1824F4(*(_QWORD *)(v2 + 64) + 32, *(unsigned int **)(result + 16));
  return result;
}

uint64_t sub_22F1824F4(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  __int16 v12;
  void *v13[2];
  void **v14;
  __int16 v15;
  int v16;
  _QWORD v17[2];
  void *v18;
  char v19;

  v3 = *a2;
  v17[0] = a2 + 4;
  v17[1] = v3;
  llvm::StringRef::lower((llvm::StringRef *)v17);
  v13[0] = "unknown-unknown-";
  v14 = __p;
  v15 = 1027;
  llvm::Twine::str((llvm::Twine *)v13);
  if (v11 < 0)
    operator delete(__p[0]);
  v12 = 260;
  __p[0] = &v18;
  MEMORY[0x23489F1BC](v13, __p);
  v4 = *(_DWORD *)(a1 + 36);
  v5 = v4 == v16;
  v6 = v4 >= 0x22;
  v7 = (0x3F0000888uLL >> v4) & 1;
  if (v6)
    LODWORD(v7) = 0;
  if (v16 == 3)
    v8 = v7;
  else
    v8 = v5;
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v19 < 0)
    operator delete(v18);
  return v8;
}

uint64_t sub_22F1825D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
    return sub_22F18261C(*(_QWORD *)(v2 + 64) + 32, *(unsigned int **)(result + 16));
  return result;
}

BOOL sub_22F18261C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  int v4;
  _BOOL8 v5;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  size_t v10;
  void *__p[2];
  char v12;
  __int16 v13;
  void *v14[2];
  void **v15;
  __int16 v16;
  int v17;
  _QWORD v18[2];
  void **v19;
  unint64_t v20;
  unsigned __int8 v21;

  v3 = *a2;
  v18[0] = a2 + 4;
  v18[1] = v3;
  llvm::StringRef::lower((llvm::StringRef *)v18);
  v14[0] = "---";
  v15 = __p;
  v16 = 1027;
  llvm::Twine::str((llvm::Twine *)v14);
  if (v12 < 0)
    operator delete(__p[0]);
  v13 = 260;
  __p[0] = &v19;
  MEMORY[0x23489F1BC](v14, __p);
  v4 = v17;
  if (v17)
    goto LABEL_4;
  if ((v21 & 0x80u) == 0)
    v7 = v21 & 0x7F;
  else
    v7 = v20;
  if (v7 == 10)
  {
    if ((v21 & 0x80u) == 0)
      v8 = v21;
    else
      v8 = v20;
    if ((v21 & 0x80u) == 0)
      v9 = (void **)&v19;
    else
      v9 = v19;
    if (v8 >= 0xA)
      v10 = 10;
    else
      v10 = v8;
    v5 = 0;
    if (!memcmp(v9, "---unknown", v10) && v8 == 10)
LABEL_4:
      v5 = *(_DWORD *)(a1 + 40) == v4;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if ((char)v21 < 0)
    operator delete(v19);
  return v5;
}

uint64_t sub_22F182754(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 64);
    if (*(_BYTE *)(v4 + 352))
      return sub_22F1824F4(v4 + 304, *(unsigned int **)(result + 16));
    else
      return 0;
  }
  return result;
}

uint64_t sub_22F1827AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  result = sub_22F17C1E0(a2, *(_QWORD *)(*a1 + 48), 1043);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 64);
    return *(_BYTE *)(v4 + 352) && sub_22F18261C(v4 + 304, *(unsigned int **)(result + 16));
  }
  return result;
}

uint64_t sub_22F182804(uint64_t a1, uint64_t a2)
{
  llvm::StringMapImpl *v3;
  char v4;
  int v5;
  const void *v6;
  size_t v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v3 = (llvm::StringMapImpl *)(a1 + 32);
  v4 = *(_BYTE *)(a2 + 31);
  v5 = v4;
  if (v4 >= 0)
    v6 = (const void *)(a2 + 8);
  else
    v6 = *(const void **)(a2 + 8);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(a2 + 16);
  v9 = sub_22F161990(v3, v6, v8);
  v10 = *v9;
  result = *(_QWORD *)(*v9 + 8);
  *(_QWORD *)(v10 + 8) = a2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F182870(uint64_t a1)
{
  uint64_t v2;
  int Key;
  uint64_t v4;
  llvm **v5;

  v2 = a1 + 32;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    v4 = *(unsigned int *)(a1 + 40);
  else
    v4 = Key;
  v5 = (llvm **)(*(_QWORD *)(a1 + 32) + 8 * v4);
  *((_QWORD *)*v5 + 1) = 0;
  return sub_22F1828E4(v2, v5);
}

uint64_t sub_22F1828E4(uint64_t a1, llvm **a2)
{
  llvm *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a2;
  llvm::StringMapImpl::RemoveKey();
  v4 = *(_QWORD *)v2;
  v3 = *((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (v3)
  {
    v6 = v4;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v6;
  }
  return llvm::deallocate_buffer(v2, (void *)(v4 + 17));
}

uint64_t sub_22F182940(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  __int16 v8;
  int Key;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  __int16 v17;

  v8 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v8 | 0x20;
  sub_22F18FB4C(a2, a4);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v8 & 0x20;
  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 40)
    || (Key = llvm::StringMapImpl::FindKey(), Key != -1) && Key != (unint64_t)*(unsigned int *)(a1 + 40))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * Key) + 8);
    if (v10)
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unsigned int *))(*(_QWORD *)v10 + 16))(v10, a2, a3, a4);
  }
  v12 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v12 + 312) = *a4;
  *(_DWORD *)(v12 + 316) = 1359;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  v16[0] = v12 + 320;
  v16[1] = 0;
  v16[2] = v12;
  v17 = 1;
  *(_BYTE *)(v12 + 320) = 0;
  *(_DWORD *)(v12 + 664) = 0;
  v13 = *(unsigned int *)(v12 + 776);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v12 + 768);
    v15 = 56 * v13;
    do
    {
      if (*(char *)(v14 + v15 - 9) < 0)
        operator delete(*(void **)(v14 + v15 - 32));
      v15 -= 56;
    }
    while (v15);
  }
  *(_DWORD *)(v12 + 776) = 0;
  return sub_22E3BB0B8((uint64_t)v16);
}

void sub_22F182B04(unint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  std::string *v31;
  std::string *p_p;
  int v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type size;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  unsigned int v45;
  uint64_t i;
  std::string *v47;
  unint64_t v48;
  std::string *v50;
  int v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD v61[3];
  __int16 v62;
  std::string __p;
  unsigned __int8 v64;
  _QWORD v65[3];
  __int16 v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[3];
  __int16 v70;
  _QWORD v71[3];
  __int16 v72;
  _QWORD v73[3];
  __int16 v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[11];

  v80[10] = *MEMORY[0x24BDAC8D0];
  v76 = a1;
  v77 = *(_BYTE *)(a1 + 539);
  v78 = v80;
  v79 = 0x300000000;
  v80[9] = a2;
  v4 = *a2;
  sub_22F1831F0((uint64_t)&v76);
  if (*((_WORD *)a2 + 8) != 21)
  {
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v6 + 312) = v4;
    *(_DWORD *)(v6 + 316) = 1025;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v73[0] = v6 + 320;
    v73[1] = 0;
    v73[2] = v6;
    v74 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v8 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(v6 + 768);
      v10 = 56 * v8;
      do
      {
        if (*(char *)(v9 + v10 - 9) < 0)
          operator delete(*(void **)(v9 + v10 - 32));
        v10 -= 56;
      }
      while (v10);
    }
    *(_DWORD *)(v6 + 776) = 0;
    v11 = v73;
    goto LABEL_19;
  }
  sub_22F1831F0((uint64_t)&v76);
  v5 = *((unsigned __int16 *)a2 + 8);
  if (v5 > 0x12 || ((1 << v5) & 0x76000) == 0)
  {
    v13 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v13 + 312) = v4;
    *(_DWORD *)(v13 + 316) = 1025;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v71[0] = v13 + 320;
    v71[1] = 0;
    v71[2] = v13;
    v72 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v22 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v13 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
    }
    *(_DWORD *)(v13 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v71);
    v25 = *((unsigned __int16 *)a2 + 8);
    if (v25 == 1 || v25 == 22)
      goto LABEL_127;
    while (1)
    {
      sub_22F18FB4C(a1, a2);
      v25 = *((unsigned __int16 *)a2 + 8);
LABEL_127:
      if (v25 == 22)
        goto LABEL_131;
      if (v25 == 1 || (*((_WORD *)a2 + 9) & 1) != 0)
        goto LABEL_123;
    }
  }
  if ((*((_WORD *)a2 + 9) & 0x20) == 0)
  {
    v67 = *(_OWORD *)a2;
    v68 = *((_QWORD *)a2 + 2);
    sub_22F1831F0((uint64_t)&v76);
    if (*((_WORD *)a2 + 8) == 22)
    {
      if (*(_BYTE *)(a1 + 539))
      {
        sub_22F183258((uint64_t)&v76);
        goto LABEL_123;
      }
      v17 = *a2;
      v64 = 0;
      sub_22F1413E0((uint64_t)&v67, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), &v64, (uint64_t)&__p);
      if (v64)
      {
        v18 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v18 + 312) = v4;
        *(_DWORD *)(v18 + 316) = 1025;
        if (*(char *)(v18 + 311) < 0)
        {
          **(_BYTE **)(v18 + 288) = 0;
          *(_QWORD *)(v18 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v18 + 288) = 0;
          *(_BYTE *)(v18 + 311) = 0;
        }
        v61[0] = v18 + 320;
        v61[1] = 0;
        v61[2] = v18;
        v62 = 1;
        *(_BYTE *)(v18 + 320) = 0;
        *(_DWORD *)(v18 + 664) = 0;
        v27 = *(unsigned int *)(v18 + 776);
        if ((_DWORD)v27)
        {
          v28 = *(_QWORD *)(v18 + 768);
          v29 = 56 * v27;
          do
          {
            if (*(char *)(v28 + v29 - 9) < 0)
              operator delete(*(void **)(v28 + v29 - 32));
            v29 -= 56;
          }
          while (v29);
        }
        *(_DWORD *)(v18 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v61);
LABEL_60:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_123;
      }
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v33 = p_p->__r_.__value_.__s.__data_[0];
      v34 = 1;
      if (v33 != 76 && v33 != 85)
      {
        if (v33 != 117)
        {
LABEL_74:
          v35 = &__p;
          if (v30 < 0)
            v35 = v31;
          if (v35->__r_.__value_.__s.__data_[0] == 82)
          {
            LODWORD(v36) = -1;
            do
            {
              v37 = (v36 + 3);
              v36 = (v36 + 1);
            }
            while (v35->__r_.__value_.__s.__data_[v37] != 40);
            std::string::erase(&__p, 0, v37);
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            v39 = size + ~v36;
            v40 = -1;
          }
          else
          {
            v41 = __p.__r_.__value_.__l.__size_;
            v42 = v30 & 0x7F;
            if (v30 >= 0)
              v43 = v30 & 0x7F;
            else
              v43 = __p.__r_.__value_.__l.__size_;
            v44 = v43 - 1;
            if (v44 == 1)
            {
              v39 = 1;
            }
            else
            {
              v45 = 1;
              for (i = 1; i != v44; ++i)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v47 = &__p;
                else
                  v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v48 = i + 1;
                if (v47->__r_.__value_.__s.__data_[i] == 92 && v48 < v44)
                {
                  v51 = v47->__r_.__value_.__s.__data_[v48];
                  if (v51 == 92 || v51 == 34)
                    ++i;
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v50 = &__p;
                else
                  v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v39 = v45 + 1;
                v50->__r_.__value_.__s.__data_[v45++] = v50->__r_.__value_.__s.__data_[i];
              }
              v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              v41 = __p.__r_.__value_.__l.__size_;
              v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v42 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            }
            if (v30 < 0)
            {
              v52 = v41;
            }
            else
            {
              v31 = &__p;
              v52 = v42;
            }
            v40 = (std::string::size_type)v31 + v52 + ~((unint64_t)v31 + v39);
          }
          std::string::erase(&__p, v39, v40);
          v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &__p;
          v53->__r_.__value_.__s.__data_[0] = 32;
          v54 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v55 = &__p;
          }
          else
          {
            v54 = __p.__r_.__value_.__l.__size_;
            v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v55->__r_.__value_.__s.__data_[v54 - 1] = 10;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &__p;
          else
            v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v57 = __p.__r_.__value_.__r.__words[1];
          v75 = 0;
          v58 = sub_22F19144C(*(_DWORD **)(a1 + 96), v56, v57, &v75);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x7F;
          else
            v59 = __p.__r_.__value_.__r.__words[1];
          v60 = sub_22F140E44(v58, v4, v17, v59, a1);
          sub_22F17330C(a1, v60, 0, 0);
          sub_22F416608(a1, (v4 << 32) | 1);
          sub_22F18FB4C(a1, a2);
          goto LABEL_60;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &__p;
        if (v31->__r_.__value_.__s.__data_[1] == 56)
          v34 = 2;
        else
          v34 = 1;
      }
      std::string::erase(&__p, 0, v34);
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_74;
    }
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v12 + 312) = v4;
    *(_DWORD *)(v12 + 316) = 1025;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v65[0] = v12 + 320;
    v65[1] = 0;
    v65[2] = v12;
    v66 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v19 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v12 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
    }
    *(_DWORD *)(v12 + 776) = 0;
    v11 = v65;
LABEL_19:
    sub_22E3BB0B8((uint64_t)v11);
    goto LABEL_123;
  }
  v7 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v7 + 312) = *a2;
  *(_DWORD *)(v7 + 316) = 32;
  if (*(char *)(v7 + 311) < 0)
  {
    **(_BYTE **)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + 288) = 0;
    *(_BYTE *)(v7 + 311) = 0;
  }
  v69[0] = v7 + 320;
  v69[1] = 0;
  v69[2] = v7;
  v70 = 1;
  *(_BYTE *)(v7 + 320) = 0;
  *(_DWORD *)(v7 + 664) = 0;
  v14 = *(unsigned int *)(v7 + 776);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(v7 + 768);
    v16 = 56 * v14;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
  }
  *(_DWORD *)(v7 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v69);
  sub_22F18FB4C(a1, a2);
  if (*((_WORD *)a2 + 8) == 22)
LABEL_131:
    sub_22F18FB4C(a1, a2);
LABEL_123:
  if (v78 != v80)
    free(v78);
}

uint64_t sub_22F1831F0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = sub_22E4EF088(a1 + 16, *(_QWORD *)(a1 + 104), 1);
    v3 = *(_QWORD *)(a1 + 16) + 24 * *(unsigned int *)(a1 + 24);
    v4 = *(_OWORD *)v2;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
    *(_OWORD *)v3 = v4;
    ++*(_DWORD *)(a1 + 24);
  }
  return sub_22F18FB4C(*(_QWORD *)a1, *(unsigned int **)(a1 + 104));
}

__n128 sub_22F183258(uint64_t a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v2 = 24 * *(unsigned int *)(a1 + 24);
  v3 = (char *)operator new[]();
  bzero(v3, v2);
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 == 1)
  {
    v5 = 0;
  }
  else
  {
    memmove(v3, (const void *)(*(_QWORD *)(a1 + 16) + 24), 24 * v4 - 24);
    v5 = v4 - 1;
  }
  v6 = *(_QWORD *)(a1 + 104);
  v7 = &v3[24 * v5];
  v8 = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v6;
  *((_QWORD *)v7 + 2) = v8;
  sub_22F1735E4(*(_QWORD *)a1, v3, v4, 1, 1, 1);
  v9 = *(__n128 **)(a1 + 16);
  v10 = *(__n128 **)(a1 + 104);
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  return result;
}

void sub_22F183330(unint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD v23[3];
  __int16 v24;
  _QWORD v25[3];
  __int16 v26;
  void *__src;
  uint64_t v28;
  _BYTE v29[768];
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[11];

  v34[10] = *MEMORY[0x24BDAC8D0];
  v30 = a1;
  v31 = *(_BYTE *)(a1 + 539);
  v32 = v34;
  v33 = 0x300000000;
  v34[9] = a2;
  v4 = *a2;
  sub_22F1831F0((uint64_t)&v30);
  if (*((_WORD *)a2 + 8) != 21)
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v12 + 312) = v4;
    *(_DWORD *)(v12 + 316) = 1025;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v25[0] = v12 + 320;
    v25[1] = 0;
    v25[2] = v12;
    v26 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v13 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v12 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
    *(_DWORD *)(v12 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v25);
    goto LABEL_31;
  }
  __src = v29;
  v28 = 0x2000000000;
  sub_22F1831F0((uint64_t)&v30);
  if (*((_WORD *)a2 + 8) == 1)
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v11 + 312) = v4;
    *(_DWORD *)(v11 + 316) = 1190;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v23[0] = v11 + 320;
    v23[1] = 0;
    v23[2] = v11;
    v24 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v16 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(v11 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
    }
    *(_DWORD *)(v11 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v23);
    goto LABEL_29;
  }
  v5 = 0;
  while (1)
  {
    v6 = sub_22E4EF088((uint64_t)&__src, (unint64_t)a2, 1);
    v7 = (char *)__src + 24 * v28;
    v8 = *(_OWORD *)v6;
    *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v7 = v8;
    v9 = v28 + 1;
    LODWORD(v28) = v28 + 1;
    v10 = *((unsigned __int16 *)a2 + 8);
    if (v10 != 22)
    {
      if (v10 == 21)
        ++v5;
      goto LABEL_10;
    }
    if (!v5)
      break;
    --v5;
LABEL_10:
    sub_22F1831F0((uint64_t)&v30);
    if (*((_WORD *)a2 + 8) == 1)
      goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 539))
  {
    sub_22F183258((uint64_t)&v30);
  }
  else
  {
    v19 = __src;
    *((_WORD *)__src + 9) |= 2u;
    v19[12 * v9 - 4] = 2;
    v20 = (_BYTE *)operator new[]();
    v21 = v20;
    v22 = v28;
    if ((_DWORD)v28)
      memmove(v20, __src, 24 * v28);
    sub_22F1735E4(a1, v21, v22, 1, 1, 0);
    sub_22F416608(a1, (v4 << 32) | 2);
    sub_22F18FB4C(a1, a2);
  }
LABEL_29:
  if (__src != v29)
    free(__src);
LABEL_31:
  if (v32 != v34)
    free(v32);
}

void sub_22F183658(uint64_t a1, uint64_t a2, unint64_t *a3, char a4)
{
  size_t v8;
  char v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20[3];
  __int16 v21;
  unsigned __int8 *v22;
  size_t v23;
  unsigned __int8 v24;
  _QWORD v25[3];
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x24BDAC8D0];
  if (sub_22F18FE0C(a2, (uint64_t)&v27, 0))
  {
LABEL_19:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  if ((unsigned __int16)v28 != 15)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v27;
    *(_DWORD *)(v10 + 316) = 1124;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v25[0] = v10 + 320;
    v25[1] = 0;
    v25[2] = v10;
    v26 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v13 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v10 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
    *(_DWORD *)(v10 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v25);
    goto LABEL_19;
  }
  v29 = v31;
  v30 = xmmword_22F44E310;
  v24 = 0;
  v22 = (unsigned __int8 *)sub_22F18E170(a2, (uint64_t)&v27, (uint64_t *)&v29, &v24);
  v23 = v8;
  if (v24 || (v11 = sub_22F16B514(a2, v27, &v22), !v23))
  {
LABEL_4:
    v9 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  v12 = sub_22F16569C(a2, v27, v22, v23, v11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  *a3 = v12;
  if (!v12)
  {
    if ((a4 & 1) == 0)
    {
      v16 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v16 + 312) = v27;
      *(_DWORD *)(v16 + 316) = 1128;
      if (*(char *)(v16 + 311) < 0)
      {
        **(_BYTE **)(v16 + 288) = 0;
        *(_QWORD *)(v16 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v16 + 288) = 0;
        *(_BYTE *)(v16 + 311) = 0;
      }
      v20[0] = (unsigned __int8 *)(v16 + 320);
      v20[1] = 0;
      v20[2] = (unsigned __int8 *)v16;
      v21 = 1;
      *(_BYTE *)(v16 + 320) = 0;
      *(_DWORD *)(v16 + 664) = 0;
      v17 = *(unsigned int *)(v16 + 776);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v16 + 768);
        v19 = 56 * v17;
        do
        {
          if (*(char *)(v18 + v19 - 9) < 0)
            operator delete(*(void **)(v18 + v19 - 32));
          v19 -= 56;
        }
        while (v19);
      }
      *(_DWORD *)(v16 + 776) = 0;
      sub_22E3B89A8(v20, v22, v23);
      sub_22E3BB0B8((uint64_t)v20);
    }
    goto LABEL_4;
  }
  *(_OWORD *)a1 = v27;
  *(_QWORD *)(a1 + 16) = v28;
  v9 = 1;
LABEL_5:
  *(_BYTE *)(a1 + 24) = v9;
  if (v29 != v31)
    free(v29);
}

_WORD *sub_22F1838DC(unint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *p_p;
  size_t v17;
  unsigned __int8 **v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  size_t v28;
  void *v29[2];
  char v30;
  _QWORD v31[3];
  __int16 v32;
  void *__p;
  size_t v34;
  char v35;
  unsigned __int8 *v36;
  void *v37;
  uint64_t v38;
  __int16 v39;
  __int128 v40;
  uint64_t v41;

  v40 = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a2 + 16);
  sub_22F18FB4C(a1, (unsigned int *)a2);
  if (*(_WORD *)(a2 + 16) != 21)
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v8 + 312) = v40;
    *(_DWORD *)(v8 + 316) = 1178;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v36 = (unsigned __int8 *)(v8 + 320);
    v37 = 0;
    v38 = v8;
    v39 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v9 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v8 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
    }
    goto LABEL_29;
  }
  sub_22F18FB4C(a1, (unsigned int *)a2);
  if (*(_WORD *)(a2 + 16) != 13)
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v8 + 312) = v40;
    *(_DWORD *)(v8 + 316) = 1178;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v36 = (unsigned __int8 *)(v8 + 320);
    v37 = 0;
    v38 = v8;
    v39 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v13 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v8 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
LABEL_29:
    *(_DWORD *)(v8 + 776) = 0;
    sub_22F1413E0((uint64_t)&v40, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), 0, (uint64_t)&__p);
    if (v35 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v35 >= 0)
      v17 = v35 & 0x7F;
    else
      v17 = v34;
    sub_22E3B89A8(&v36, p_p, v17);
    if (v35 < 0)
      operator delete(__p);
    v18 = &v36;
    goto LABEL_38;
  }
  if ((*(_WORD *)(a2 + 18) & 0x20) != 0)
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v12 + 316) = 32;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v31[0] = v12 + 320;
    v31[1] = 0;
    v31[2] = v12;
    v32 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v21 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v12 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(v12 + 776) = 0;
    v18 = (unsigned __int8 **)v31;
LABEL_38:
    sub_22E3BB0B8((uint64_t)v18);
    return 0;
  }
  sub_22F1413E0(a2, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), 0, (uint64_t)&__p);
  sub_22F18FB4C(a1, (unsigned int *)a2);
  if (*(_WORD *)(a2 + 16) == 22)
  {
    v36 = 0;
    v37 = 0;
    v4 = v35 & 0x7F;
    if (v35 < 0)
      v4 = v34;
    v5 = v4 - 2;
    LODWORD(v38) = 6;
    v6 = (char *)__p;
    if (v35 >= 0)
      v6 = (char *)&__p;
    HIDWORD(v36) = v5;
    v29[0] = 0;
    LODWORD(v36) = sub_22F19144C(*(_DWORD **)(a1 + 96), v6 + 1, v5, v29);
    v37 = v29[0];
    v7 = sub_22F18F0FC(a1, (uint64_t)&v36);
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v20 + 312) = v40;
    *(_DWORD *)(v20 + 316) = 1178;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    v36 = (unsigned __int8 *)(v20 + 320);
    v37 = 0;
    v38 = v20;
    v39 = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v24 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v20 + 768);
      v26 = 56 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 9) < 0)
          operator delete(*(void **)(v25 + v26 - 32));
        v26 -= 56;
      }
      while (v26);
    }
    *(_DWORD *)(v20 + 776) = 0;
    sub_22F1413E0((uint64_t)&v40, *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 56), 0, (uint64_t)v29);
    if (v30 >= 0)
      v27 = v29;
    else
      v27 = (void **)v29[0];
    if (v30 >= 0)
      v28 = v30 & 0x7F;
    else
      v28 = (size_t)v29[1];
    sub_22E3B89A8(&v36, v27, v28);
    if (v30 < 0)
      operator delete(v29[0]);
    sub_22E3BB0B8((uint64_t)&v36);
    v7 = 0;
  }
  if (v35 < 0)
    operator delete(__p);
  return v7;
}

BOOL sub_22F183CD0(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __int16 v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD v24[3];
  __int16 v25;
  void *v26;
  _DWORD v27[130];
  void *v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v8 | 0x20;
  sub_22F18FB4C(a1, (unsigned int *)a2);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8 & 0x20;
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v9 - 13;
  if (v9 != 13)
  {
    v15 = (v9 - 399) >= 0x29 && (v9 - 7) >= 6;
    if (v15)
    {
      v16 = v10 < 6 || v9 == 1;
      if (!v16 && *(_QWORD *)(a2 + 8))
      {
        if (v9 == 1)
          v22 = 0;
        else
          v22 = *(_QWORD *)(a2 + 8);
        v15 = v10 >= 6;
        v23 = *(_DWORD *)a2;
        if (!v15)
          v22 = 0;
        *(_QWORD *)a3 = v22;
        *(_DWORD *)(a3 + 8) = v23;
        return 0;
      }
    }
    goto LABEL_21;
  }
  if ((*(_WORD *)(a2 + 18) & 0x20) != 0)
  {
LABEL_21:
    v17 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v17 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v17 + 316) = 1121;
    if (*(char *)(v17 + 311) < 0)
    {
      **(_BYTE **)(v17 + 288) = 0;
      *(_QWORD *)(v17 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v17 + 288) = 0;
      *(_BYTE *)(v17 + 311) = 0;
    }
    v18 = (unsigned __int8 *)(v17 + 320);
    v24[0] = v17 + 320;
    v24[1] = 0;
    v24[2] = v17;
    v25 = 1;
    *(_BYTE *)(v17 + 320) = 0;
    *(_DWORD *)(v17 + 664) = 0;
    v19 = *(unsigned int *)(v17 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v17 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
      LODWORD(v19) = *v18;
    }
    *(_DWORD *)(v17 + 776) = 0;
    v18[v19 + 1] = 2;
    *(_BYTE *)(v17 + 320) = v19 + 1;
    *(_QWORD *)&v18[8 * v19 + 16] = a4;
    sub_22E3BB0B8((uint64_t)v24);
    return 1;
  }
  sub_22F14E1D0((uint64_t)v24, a2, 1, (_QWORD *)a1);
  v11 = v30;
  if (!v30)
  {
    v12 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), v26, (v27[128] - (_DWORD)v26));
    v13 = *(_DWORD *)a2;
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
  }
  if (v28 != &v29)
    free(v28);
  if (v26 != v27)
    free(v26);
  return v11 != 0;
}

void sub_22F183EE8(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  void *__p[2];
  uint64_t v32;
  _QWORD v33[3];
  __int16 v34;

  sub_22F18FB4C(a1, a2);
  v4 = *(unsigned __int16 *)(a2 + 16);
  if (v4 == 21)
  {
    v5 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v5 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v5 + 316) = 1338;
    if (*(char *)(v5 + 311) < 0)
    {
      **(_BYTE **)(v5 + 288) = 0;
      *(_QWORD *)(v5 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 288) = 0;
      *(_BYTE *)(v5 + 311) = 0;
    }
    v33[0] = v5 + 320;
    v33[1] = 0;
    v33[2] = v5;
    v34 = 1;
    *(_BYTE *)(v5 + 320) = 0;
    *(_DWORD *)(v5 + 664) = 0;
    v6 = *(unsigned int *)(v5 + 776);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v5 + 768);
      v8 = 56 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 9) < 0)
          operator delete(*(void **)(v7 + v8 - 32));
        v8 -= 56;
      }
      while (v8);
    }
    *(_DWORD *)(v5 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v33);
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    v9 = *(_WORD *)(a1 + 536);
    *(_WORD *)(a1 + 536) = v9 | 0x20;
    sub_22F18FB4C(a1, a2);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v9 & 0x20;
    v10 = 0;
    if (sub_22F190300(a1, a2, (uint64_t)__p, (uint64_t)"pragma hdrstop", 0))
    {
      if (*(_WORD *)(a2 + 16) == 22)
      {
        sub_22F18FB4C(a1, a2);
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v11 + 312) = *(_DWORD *)a2;
        *(_DWORD *)(v11 + 316) = 15;
        if (*(char *)(v11 + 311) < 0)
        {
          **(_BYTE **)(v11 + 288) = 0;
          *(_QWORD *)(v11 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v11 + 288) = 0;
          *(_BYTE *)(v11 + 311) = 0;
        }
        v12 = (unsigned __int8 *)(v11 + 320);
        v27 = v11 + 320;
        v28 = 0;
        v29 = v11;
        v30 = 1;
        *(_BYTE *)(v11 + 320) = 0;
        *(_DWORD *)(v11 + 664) = 0;
        v13 = *(unsigned int *)(v11 + 776);
        if ((_DWORD)v13)
        {
          v14 = *(_QWORD *)(v11 + 768);
          v15 = 56 * v13;
          do
          {
            if (*(char *)(v14 + v15 - 9) < 0)
              operator delete(*(void **)(v14 + v15 - 32));
            v15 -= 56;
          }
          while (v15);
          LODWORD(v13) = *v12;
        }
        *(_DWORD *)(v11 + 776) = 0;
        v12[v13 + 1] = 4;
        *(_BYTE *)(v11 + 320) = v13 + 1;
        *(_QWORD *)&v12[8 * v13 + 16] = 22;
        sub_22E3BB0B8((uint64_t)&v27);
        v10 = 0;
      }
    }
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__p[0]);
      if (!v10)
        return;
    }
    else if (!v10)
    {
      return;
    }
    v4 = *(unsigned __int16 *)(a2 + 16);
  }
  if (v4 != 2)
  {
    v16 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v16 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v16 + 316) = 1223;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    v17 = (unsigned __int8 *)(v16 + 320);
    v27 = v16 + 320;
    v28 = 0;
    v29 = v16;
    v30 = 1;
    *(_BYTE *)(v16 + 320) = 0;
    *(_DWORD *)(v16 + 664) = 0;
    v18 = *(unsigned int *)(v16 + 776);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(v16 + 768);
      v20 = 56 * v18;
      do
      {
        if (*(char *)(v19 + v20 - 9) < 0)
          operator delete(*(void **)(v19 + v20 - 32));
        v20 -= 56;
      }
      while (v20);
      LODWORD(v18) = *v17;
    }
    *(_DWORD *)(v16 + 776) = 0;
    v17[v18 + 1] = 1;
    *(_BYTE *)(v16 + 320) = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = "pragma hdrstop";
    sub_22E3BB0B8((uint64_t)&v27);
  }
  if (*(_DWORD *)(a1 + 740) != 1)
    goto LABEL_52;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 74) && sub_22F1E3734(*(_QWORD **)(a1 + 88), *(_DWORD *)a2))
  {
    *(_DWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v21 = *(_QWORD *)(a1 + 1008);
    v22 = *(_QWORD *)(v21 + 152);
    v23 = *(_DWORD *)(v21 + 184);
    *(_DWORD *)(a2 + 4) = v22 - v23;
    v24 = v23 - *(_DWORD *)(v21 + 144);
    v25 = *(_DWORD *)(v21 + 160);
    if (v25 < 0)
      v26 = sub_22F142B40(*(_QWORD *)(v21 + 8), v25, v24, (int)v22 - v23);
    else
      v26 = v25 + v24;
    *(_DWORD *)a2 = v26;
    *(_WORD *)(a2 + 16) = 1;
    *(_QWORD *)(v21 + 184) = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 184) = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 152);
  }
  if (*(_DWORD *)(a1 + 740) != 1)
  {
LABEL_52:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 74))
      *(_BYTE *)(a1 + 2272) = 0;
  }
}

uint64_t sub_22F184264(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  _QWORD *v5;
  int Key;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD **)(a1 + 688);
  if (a3)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1
      || Key == (unint64_t)*((unsigned int *)v5 + 10)
      || (v10 = *(_QWORD *)(*(_QWORD *)(v5[4] + 8 * Key) + 8)) == 0)
    {
      v12 = operator new();
      *(_QWORD *)v12 = off_24FAC8378;
      v13 = (void *)(v12 + 8);
      if (a3 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v5 = (_QWORD *)v12;
      if (a3 >= 0x17)
      {
        v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v14 = a3 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        v5[2] = a3;
        v5[3] = v15 | 0x8000000000000000;
        v5[1] = v13;
      }
      else
      {
        *(_BYTE *)(v12 + 31) = a3;
      }
      memmove(v13, a2, a3);
      *((_BYTE *)v13 + a3) = 0;
      *v5 = off_24FAC8888;
      v5[5] = 0;
      v5[6] = 0x1000000000;
      v5[4] = 0;
      sub_22F182804(*(_QWORD *)(a1 + 688), (uint64_t)v5);
    }
    else
    {
      v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  return sub_22F182804((uint64_t)v5, a4);
}

uint64_t sub_22F1843AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int Key;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 688);
  if (a3)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v6 = *(unsigned int *)(v4 + 40);
    else
      v6 = Key;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6) + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  sub_22F182870(v4);
  result = *(_QWORD *)(a1 + 688);
  if (v4 != result && !*(_DWORD *)(v4 + 44))
  {
    sub_22F182870(result);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t sub_22F184458(unint64_t a1, int *a2)
{
  __int16 v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  __int16 v32;
  _QWORD v33[3];
  __int16 v34;
  _QWORD v35[3];
  __int16 v36;
  unsigned int v37;
  uint64_t v38;
  __int16 v39;

  v4 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v4 | 0x20;
  sub_22F18FB4C(a1, &v37);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v4 & 0x20;
  if (v39 != 5)
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v8 + 312) = v37;
    *(_DWORD *)(v8 + 316) = 1217;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v35[0] = v8 + 320;
    v35[1] = 0;
    v35[2] = v8;
    v9 = 1;
    v36 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v10 = (_DWORD *)(v8 + 776);
    v11 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v8 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
      v9 = 1;
    }
    v14 = v35;
    goto LABEL_37;
  }
  v5 = *(int **)(v38 + 16);
  v6 = *v5;
  if (*v5 == 7)
  {
    v15 = v5[4];
    v16 = *(int *)((char *)v5 + 19);
    if (v15 == 1095124292 && v16 == 1414288705)
    {
      v7 = 2;
      goto LABEL_40;
    }
LABEL_27:
    v21 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v21 + 312) = v37;
    *(_DWORD *)(v21 + 316) = 1217;
    if (*(char *)(v21 + 311) < 0)
    {
      **(_BYTE **)(v21 + 288) = 0;
      *(_QWORD *)(v21 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v21 + 288) = 0;
      *(_BYTE *)(v21 + 311) = 0;
    }
    v33[0] = v21 + 320;
    v33[1] = 0;
    v33[2] = v21;
    v9 = 1;
    v34 = 1;
    *(_BYTE *)(v21 + 320) = 0;
    *(_DWORD *)(v21 + 664) = 0;
    v10 = (_DWORD *)(v21 + 776);
    v22 = *(unsigned int *)(v21 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v21 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
      v9 = 1;
    }
    v14 = v33;
    goto LABEL_37;
  }
  if (v6 == 3)
  {
    v18 = *((unsigned __int16 *)v5 + 8);
    v19 = *((unsigned __int8 *)v5 + 18);
    if (v18 == 17999 && v19 == 70)
    {
      v7 = 1;
      goto LABEL_40;
    }
    goto LABEL_27;
  }
  if (v6 != 2 || *((_WORD *)v5 + 8) != 20047)
    goto LABEL_27;
  v7 = 0;
LABEL_40:
  *a2 = v7;
  v26 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v26 | 0x20;
  sub_22F18FB4C(a1, &v37);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v26 & 0x20;
  if (v39 == 2)
    return 0;
  v27 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v27 + 312) = v37;
  *(_DWORD *)(v27 + 316) = 1236;
  if (*(char *)(v27 + 311) < 0)
  {
    **(_BYTE **)(v27 + 288) = 0;
    *(_QWORD *)(v27 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v27 + 288) = 0;
    *(_BYTE *)(v27 + 311) = 0;
  }
  v31[0] = v27 + 320;
  v31[1] = 0;
  v31[2] = v27;
  v32 = 1;
  *(_BYTE *)(v27 + 320) = 0;
  *(_DWORD *)(v27 + 664) = 0;
  v10 = (_DWORD *)(v27 + 776);
  v28 = *(unsigned int *)(v27 + 776);
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD *)(v27 + 768);
    v30 = 56 * v28;
    do
    {
      if (*(char *)(v29 + v30 - 9) < 0)
        operator delete(*(void **)(v29 + v30 - 32));
      v30 -= 56;
    }
    while (v30);
  }
  v9 = 0;
  v14 = v31;
LABEL_37:
  *v10 = 0;
  sub_22E3BB0B8((uint64_t)v14);
  return v9;
}

uint64_t sub_22F184740(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8888;
  sub_22F18BE38(a1 + 32);
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18478C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8888;
  sub_22F18BE38(a1 + 32);
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22F1847EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  _QWORD *v8;
  char **v10;
  void **v11;

  if (*(_QWORD *)(a1 + 144))
    return ((unint64_t)sub_22F4174E8(a1 + 128, (char **)a2, a2) << 32) | 1;
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_11;
  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = 56 * v4;
  v8 = (_QWORD *)(*(_QWORD *)a1 + 8);
  while (*v8 != v6 || memcmp((const void *)*(v8 - 1), v5, v6))
  {
    v8 += 7;
    v7 -= 56;
    if (!v7)
      goto LABEL_10;
  }
  if (v7)
    return 1;
LABEL_10:
  if (v4 >= 2)
  {
    do
    {
      v10 = (char **)(*(_QWORD *)a1 + 56 * v4 - 56);
      sub_22F4174E8(a1 + 128, v10, (uint64_t)v10);
      LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v4;
      v11 = (void **)(*(_QWORD *)a1 + 56 * v4);
      if (*v11 != v11 + 3)
      {
        free(*v11);
        LODWORD(v4) = *(_DWORD *)(a1 + 8);
      }
    }
    while ((_DWORD)v4);
    sub_22F4174E8(a1 + 128, (char **)a2, a2);
  }
  else
  {
LABEL_11:
    sub_22F417488(a1, a2);
  }
  return 0x100000001;
}

unint64_t sub_22F18491C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F2BB580(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F2BB580(a1);
    }
  }
  return v2;
}

uint64_t sub_22F184984(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F1849C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

__n128 *sub_22F184A0C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  __n128 *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  __int16 v18;

  sub_22F16437C(a2, (uint64_t)"pragma once", 0);
  v6 = *a4;
  if (!sub_22F4157AC((_QWORD *)a2)
    || *(_DWORD *)(a2 + 740) == 1
    || *(_BYTE *)(*(_QWORD *)(a2 + 56) + 704))
  {
    v7 = *(_QWORD **)(a2 + 104);
    v8 = sub_22F172F28((_QWORD *)a2);
    v9 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v8 + 8) + 88), *(_DWORD *)(v8 + 16));
    if (v9)
    {
      v10 = *(_QWORD *)((*((_QWORD *)v9 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v10)
      {
        do
        {
          v11 = *(_QWORD *)(v10 + 8);
          v10 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v11 & 2) != 0 && v10);
      }
    }
    else
    {
      v10 = 0;
    }
    result = sub_22F13B0E4(v7, v10);
    result->n128_u16[0] |= 2u;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v13 + 312) = v6;
    *(_DWORD *)(v13 + 316) = 1278;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v17[0] = v13 + 320;
    v17[1] = 0;
    v17[2] = v13;
    v18 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v14 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v13 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
    }
    *(_DWORD *)(v13 + 776) = 0;
    return (__n128 *)sub_22E3BB0B8((uint64_t)v17);
  }
  return result;
}

uint64_t sub_22F184B64(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F184BA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F184BEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  sub_22F4166A8(a2, a4);
}

uint64_t sub_22F184BF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F184C34(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

llvm *sub_22F184C80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22F416818(a2, a4);
}

uint64_t sub_22F184C8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F184CC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F184D14(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v5;
  llvm *v6;
  llvm *v7;
  int v8;
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20[3];
  __int16 v21;

  v5 = *a4;
  v6 = (llvm *)sub_22F1838DC(a2, (uint64_t)a4);
  if (v6)
  {
    v7 = v6;
    v20[0] = 0;
    v8 = sub_22F258E38(*(_QWORD *)(a2 + 2152), *(_DWORD *)(a2 + 2168), (uint64_t)v6, v20);
    v9 = v20[0];
    if (v8)
      v10 = v20[0] == (unsigned __int8 *)(*(_QWORD *)(a2 + 2152) + 32 * *(unsigned int *)(a2 + 2168));
    else
      v10 = 1;
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v5;
      *(_DWORD *)(v11 + 316) = 1365;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v20[0] = (unsigned __int8 *)(v11 + 320);
      v20[1] = 0;
      v20[2] = (unsigned __int8 *)v11;
      v21 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v17 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v11 + 768);
        v19 = 56 * v17;
        do
        {
          if (*(char *)(v18 + v19 - 9) < 0)
            operator delete(*(void **)(v18 + v19 - 32));
          v19 -= 56;
        }
        while (v19);
      }
      *(_DWORD *)(v11 + 776) = 0;
      sub_22E3B89A8(v20, (void *)(*((_QWORD *)v7 + 2) + 16), **((unsigned int **)v7 + 2));
      sub_22E3BB0B8((uint64_t)v20);
    }
    else
    {
      v12 = sub_22E6D7128(a2, v7);
      if (v12)
      {
        if ((*((_WORD *)v12 + 18) & 0x200) != 0)
        {
          LODWORD(v20[0]) = *(_DWORD *)v12;
          sub_22F16F250((_DWORD *)(a2 + 1984), (int *)v20);
        }
        v13 = sub_22E3CD3D4(a2 + 128, 16, 3);
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = v5;
        *(_BYTE *)(v13 + 12) = *(_BYTE *)(v13 + 12) & 0xF0 | 9;
        sub_22F175FD4(a2, v7, (uint64_t *)v13);
      }
      v14 = *((_QWORD *)v9 + 2);
      v15 = *(_QWORD *)(v14 - 8);
      if (v15)
      {
        v16 = sub_22E3CD3D4(a2 + 128, 24, 3);
        *(_QWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = v5;
        *(_BYTE *)(v16 + 12) = *(_BYTE *)(v16 + 12) & 0xF0 | 8;
        *(_QWORD *)(v16 + 16) = v15;
        sub_22F175FD4(a2, v7, (uint64_t *)v16);
        v14 = *((_QWORD *)v9 + 2);
      }
      *((_QWORD *)v9 + 2) = v14 - 8;
      if (*((_QWORD *)v9 + 1) == v14 - 8)
      {
        operator delete((void *)(v14 - 8));
        *(_QWORD *)v9 = -8192;
        *(int32x2_t *)(a2 + 2160) = vadd_s32(*(int32x2_t *)(a2 + 2160), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
  }
}

uint64_t sub_22F184F20(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F184F5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F184FA8(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *p_p;
  size_t v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  size_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;

  v7 = *a4;
  sub_22F18FB4C(a2, a4);
  v8 = *((unsigned __int16 *)a4 + 8);
  if (v8 == 13)
  {
    v9 = 0;
LABEL_5:
    __p = 0;
    v35 = 0;
    v36 = 0;
    if (!sub_22F190300(a2, (unint64_t)a4, (uint64_t)&__p, (uint64_t)off_24FAC88A8[*(int *)(a1 + 32)], 1))goto LABEL_64;
    if (v9)
    {
      if (*((_WORD *)a4 + 8) != 22)
      {
        v13 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v13 + 312) = *a4;
        *(_DWORD *)(v13 + 316) = 1177;
        if (*(char *)(v13 + 311) < 0)
        {
          **(_BYTE **)(v13 + 288) = 0;
          *(_QWORD *)(v13 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v13 + 288) = 0;
          *(_BYTE *)(v13 + 311) = 0;
        }
        v27 = (unsigned __int8 *)(v13 + 320);
        v37 = (unsigned __int8 *)(v13 + 320);
        v38 = 0;
        v39 = v13;
        v40 = 1;
        *(_BYTE *)(v13 + 320) = 0;
        *(_DWORD *)(v13 + 664) = 0;
        v28 = *(unsigned int *)(v13 + 776);
        if (!(_DWORD)v28)
          goto LABEL_63;
        v31 = *(_QWORD *)(v13 + 768);
        v32 = 56 * v28;
        do
        {
          if (*(char *)(v31 + v32 - 9) < 0)
            operator delete(*(void **)(v31 + v32 - 32));
          v32 -= 56;
        }
        while (v32);
LABEL_62:
        LODWORD(v28) = *v27;
LABEL_63:
        *(_DWORD *)(v13 + 776) = 0;
        v33 = *(int *)(a1 + 32);
        v27[v28 + 1] = 2;
        *(_BYTE *)(v13 + 320) = v28 + 1;
        *(_QWORD *)&v27[8 * v28 + 16] = v33;
        sub_22E3BB0B8((uint64_t)&v37);
LABEL_64:
        if (SHIBYTE(v36) < 0)
          operator delete(__p);
        return;
      }
      sub_22F18FB4C(a2, a4);
    }
    if (*((_WORD *)a4 + 8) == 2)
    {
      if (*(_DWORD *)(a1 + 32) == 2)
        v10 = 1176;
      else
        v10 = 1364;
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v7;
      *(_DWORD *)(v11 + 316) = v10;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v37 = (unsigned __int8 *)(v11 + 320);
      v38 = 0;
      v39 = v11;
      v40 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v19 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD *)(v11 + 768);
        v21 = 56 * v19;
        do
        {
          if (*(char *)(v20 + v21 - 9) < 0)
            operator delete(*(void **)(v20 + v21 - 32));
          v21 -= 56;
        }
        while (v21);
      }
      *(_DWORD *)(v11 + 776) = 0;
      if (v36 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v36 >= 0)
        v23 = HIBYTE(v36) & 0x7F;
      else
        v23 = v35;
      sub_22E3B89A8(&v37, p_p, v23);
      sub_22E3BB0B8((uint64_t)&v37);
      v24 = *(_QWORD *)(a2 + 1088);
      if (v24)
      {
        if (v36 >= 0)
          v25 = &__p;
        else
          v25 = __p;
        if (v36 >= 0)
          v26 = HIBYTE(v36) & 0x7F;
        else
          v26 = v35;
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, void *, size_t))(*(_QWORD *)v24 + 128))(v24, v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 32), v25, v26);
      }
      goto LABEL_64;
    }
    v13 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v13 + 312) = *a4;
    *(_DWORD *)(v13 + 316) = 1177;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v27 = (unsigned __int8 *)(v13 + 320);
    v37 = (unsigned __int8 *)(v13 + 320);
    v38 = 0;
    v39 = v13;
    v40 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v28 = *(unsigned int *)(v13 + 776);
    if (!(_DWORD)v28)
      goto LABEL_63;
    v29 = *(_QWORD *)(v13 + 768);
    v30 = 56 * v28;
    do
    {
      if (*(char *)(v29 + v30 - 9) < 0)
        operator delete(*(void **)(v29 + v30 - 32));
      v30 -= 56;
    }
    while (v30);
    goto LABEL_62;
  }
  if (v8 == 21)
  {
    sub_22F18FB4C(a2, a4);
    v9 = 1;
    goto LABEL_5;
  }
  v12 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v12 + 312) = v7;
  *(_DWORD *)(v12 + 316) = 1177;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  v14 = (unsigned __int8 *)(v12 + 320);
  v37 = (unsigned __int8 *)(v12 + 320);
  v38 = 0;
  v39 = v12;
  v40 = 1;
  *(_BYTE *)(v12 + 320) = 0;
  *(_DWORD *)(v12 + 664) = 0;
  v15 = *(unsigned int *)(v12 + 776);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(v12 + 768);
    v17 = 56 * v15;
    do
    {
      if (*(char *)(v16 + v17 - 9) < 0)
        operator delete(*(void **)(v16 + v17 - 32));
      v17 -= 56;
    }
    while (v17);
    LODWORD(v15) = *v14;
  }
  *(_DWORD *)(v12 + 776) = 0;
  v18 = *(int *)(a1 + 32);
  v14[v15 + 1] = 2;
  *(_BYTE *)(v12 + 320) = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = v18;
  sub_22E3BB0B8((uint64_t)&v37);
}

uint64_t sub_22F18536C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F1853A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F1853F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  __int16 v19;
  _QWORD v20[3];
  __int16 v21;
  unsigned int v22[4];
  __int16 v23;

  while (1)
  {
    v3 = *(_QWORD *)(a2 + 1016);
    if (v3)
      *(_BYTE *)(v3 + 26) = 1;
    v4 = *(_WORD *)(a2 + 536);
    *(_WORD *)(a2 + 536) = v4 | 0x20;
    result = sub_22F18FB4C(a2, v22);
    *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v4 & 0x20;
    v6 = *(_QWORD *)(a2 + 1016);
    if (v6)
      *(_BYTE *)(v6 + 26) = 0;
    if (v23 != 6)
      break;
    v7 = (uint64_t *)sub_22F18F0FC(a2, (uint64_t)v22);
    if ((*((_BYTE *)v7 + 3) & 0x20) == 0)
    {
      v8 = v7;
      if (sub_22F2EE534(a2, (llvm *)v7))
      {
        v9 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v9 + 312) = v22[0];
        *(_DWORD *)(v9 + 316) = 1277;
        if (*(char *)(v9 + 311) < 0)
        {
          **(_BYTE **)(v9 + 288) = 0;
          *(_QWORD *)(v9 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v9 + 288) = 0;
          *(_BYTE *)(v9 + 311) = 0;
        }
        v18[0] = v9 + 320;
        v18[1] = 0;
        v18[2] = v9;
        v19 = 1;
        *(_BYTE *)(v9 + 320) = 0;
        *(_DWORD *)(v9 + 664) = 0;
        v10 = *(unsigned int *)(v9 + 776);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD *)(v9 + 768);
          v12 = 56 * v10;
          do
          {
            if (*(char *)(v11 + v12 - 9) < 0)
              operator delete(*(void **)(v11 + v12 - 32));
            v12 -= 56;
          }
          while (v12);
        }
        *(_DWORD *)(v9 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v18);
      }
      v13 = *v8;
      *v8 |= 0xA0000000uLL;
      if ((v13 & 0x100000000) != 0)
        *v8 = v13 | 0x2A0000000;
    }
  }
  if (v23 != 2)
  {
    v14 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v14 + 312) = v22[0];
    *(_DWORD *)(v14 + 316) = 1140;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v20[0] = v14 + 320;
    v20[1] = 0;
    v20[2] = v14;
    v21 = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v15 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(v14 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *(_DWORD *)(v14 + 776) = 0;
    return sub_22E3BB0B8((uint64_t)v20);
  }
  return result;
}

uint64_t sub_22F1855F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F185634(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22F185680(uint64_t a1, _QWORD *a2, uint64_t a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 *v15;
  char *v16;
  size_t v17;
  void **v18;
  unsigned int v19;
  uint64_t v20;
  char *__s;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  if (sub_22F4157AC(a2))
  {
    v6 = a2[6];
    *(_DWORD *)(v6 + 312) = *a4;
    *(_DWORD *)(v6 + 316) = 1279;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    __s = (char *)(v6 + 320);
    v23 = 0;
    v24 = v6;
    v25 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v12 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v6 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
    }
    *(_DWORD *)(v6 + 776) = 0;
    sub_22E3BB0B8((uint64_t)&__s);
  }
  else
  {
    v7 = sub_22F172F28(a2);
    v8 = (_QWORD *)a2[13];
    v9 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v7 + 8) + 88), *(_DWORD *)(v7 + 16));
    if (v9)
    {
      v10 = *(_QWORD *)((*((_QWORD *)v9 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v10)
      {
        do
        {
          v11 = *(_QWORD *)(v10 + 8);
          v10 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v11 & 2) != 0 && v10);
      }
    }
    else
    {
      v10 = 0;
    }
    v15 = sub_22F13B0E4(v8, v10);
    v15->n128_u16[0] = v15->n128_u16[0] & 0xFFE3 | 4;
    sub_22F1E2F68(a2[11], *a4, 1, (uint64_t)&__s);
    v16 = __s;
    if (__s)
    {
      v17 = strlen(__s);
      v18 = (void **)sub_22F1E0AA0(a2[11]);
      v19 = sub_22F1E07D8(v18, v16, v17);
      v20 = a2[136];
      if (v20)
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, *a4, 2, 1, 0);
      sub_22F1E0B64((_QWORD *)a2[11], *a4, HIDWORD(v23) + 1, v19, 0, 0, 1u);
    }
  }
  return sub_22F16437C((uint64_t)a2, (uint64_t)"pragma", 0);
}

uint64_t sub_22F185854(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F185890(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F1858DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  char v14;
  std::string *v15;
  std::string::size_type v16;
  void **v17;
  std::string::size_type v18;
  int v19;
  std::string::size_type v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  size_t v27;
  void *__p[2];
  uint64_t v29;
  __int16 v30;
  std::string v31;
  std::string v32;
  _DWORD v33[6];
  char v34;
  unint64_t v35;

  v35 = 0;
  sub_22F183658((uint64_t)v33, a2, &v35, (*(_WORD *)(a2 + 536) & 4) != 0);
  if (v34)
  {
    v6 = sub_22F172F28((_QWORD *)a2);
    v7 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v6 + 8) + 88), *(_DWORD *)(v6 + 16));
    if (v7)
    {
      v8 = *(_QWORD *)((*((_QWORD *)v7 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          v8 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v9 & 2) != 0 && v8);
        if (v8)
        {
          v10 = *(_QWORD *)(v8 + 32);
          v11 = v35;
          do
          {
            v12 = *(_QWORD *)(v11 + 8);
            v11 = v12 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v12 & 2) != 0 && v11);
          if (v10 < *(_QWORD *)(v11 + 32))
          {
            memset(&v32, 0, sizeof(v32));
            sub_22F18FB4C(a2, (unsigned int *)a4);
            if (*(_WORD *)(a4 + 16) == 2)
            {
              size = 0;
              v14 = 0;
            }
            else
            {
              do
              {
                sub_22F1413E0(a4, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), 0, (uint64_t)&v31);
                v15 = std::string::append(&v31, " ");
                v16 = v15->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
                v29 = v16;
                v15->__r_.__value_.__l.__size_ = 0;
                v15->__r_.__value_.__r.__words[2] = 0;
                v15->__r_.__value_.__r.__words[0] = 0;
                if (v29 >= 0)
                  v17 = __p;
                else
                  v17 = (void **)__p[0];
                if (v29 >= 0)
                  v18 = HIBYTE(v29) & 0x7F;
                else
                  v18 = (std::string::size_type)__p[1];
                std::string::append(&v32, (const std::string::value_type *)v17, v18);
                if (SHIBYTE(v29) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v31.__r_.__value_.__l.__data_);
                sub_22F18FB4C(a2, (unsigned int *)a4);
              }
              while (*(_WORD *)(a4 + 16) != 2);
              v14 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
              size = v32.__r_.__value_.__l.__size_;
            }
            v19 = v14;
            v20 = v14 & 0x7F;
            if (v19 >= 0)
              size = v20;
            if (size)
            {
              v21 = v32.__r_.__value_.__r.__words[0];
              if (v19 >= 0)
                v21 = (std::string::size_type)&v32;
              std::string::erase(&v32, ~v21 + v21 + size, 1uLL);
            }
            v22 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v22 + 312) = v33[0];
            *(_DWORD *)(v22 + 316) = 1276;
            if (*(char *)(v22 + 311) < 0)
            {
              **(_BYTE **)(v22 + 288) = 0;
              *(_QWORD *)(v22 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v22 + 288) = 0;
              *(_BYTE *)(v22 + 311) = 0;
            }
            __p[0] = (void *)(v22 + 320);
            __p[1] = 0;
            v29 = v22;
            v30 = 1;
            *(_BYTE *)(v22 + 320) = 0;
            *(_DWORD *)(v22 + 664) = 0;
            v23 = *(unsigned int *)(v22 + 776);
            if ((_DWORD)v23)
            {
              v24 = *(_QWORD *)(v22 + 768);
              v25 = 56 * v23;
              do
              {
                if (*(char *)(v24 + v25 - 9) < 0)
                  operator delete(*(void **)(v24 + v25 - 32));
                v25 -= 56;
              }
              while (v25);
            }
            *(_DWORD *)(v22 + 776) = 0;
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = &v32;
            else
              v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = *((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x7F;
            else
              v27 = v32.__r_.__value_.__l.__size_;
            sub_22E3B89A8((unsigned __int8 **)__p, v26, v27);
            sub_22E3BB0B8((uint64_t)__p);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
}

uint64_t sub_22F185B6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F185BA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F185BF4(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int8 *p_p;
  void **v29;
  int v30;
  _BOOL8 v31;
  char *v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  size_t v58;
  const char *v59;
  size_t v60;
  void *v61;
  unint64_t v62;
  unsigned __int8 *v63[3];
  __int16 v64;
  _QWORD v65[3];
  __int16 v66;
  _QWORD v67[3];
  __int16 v68;
  void *__p;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  __int16 v73;
  _QWORD v74[3];
  __int16 v75;
  _QWORD v76[3];
  __int16 v77;
  unsigned int v78;
  uint64_t v79;
  __int16 v80;

  v6 = *a4;
  v7 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v7 | 0x20;
  sub_22F18FB4C(a2, &v78);
  v8 = v7 & 0x20;
  v9 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v9 & 0xFFDF | v8;
  if (v80 != 5)
  {
    v16 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v16 + 312) = v78;
    *(_DWORD *)(v16 + 316) = 1351;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    v76[0] = v16 + 320;
    v76[1] = 0;
    v76[2] = v16;
    v77 = 1;
    *(_BYTE *)(v16 + 320) = 0;
    *(_DWORD *)(v16 + 664) = 0;
    v17 = *(unsigned int *)(v16 + 776);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v16 + 768);
      v19 = 56 * v17;
      do
      {
        if (*(char *)(v18 + v19 - 9) < 0)
          operator delete(*(void **)(v18 + v19 - 32));
        v19 -= 56;
      }
      while (v19);
    }
    *(_DWORD *)(v16 + 776) = 0;
    v20 = v76;
    goto LABEL_78;
  }
  v10 = *(_QWORD *)(a2 + 1088);
  v11 = *(_QWORD *)(v79 + 16);
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 == 4)
  {
    if (*(_DWORD *)(v11 + 16) != 1752397168)
      goto LABEL_23;
    sub_22F41A4A0(*(_QWORD *)(a2 + 48));
    if (v10)
    {
      v52 = *(const char **)(a1 + 32);
      if (v52)
        v53 = strlen(v52);
      else
        v53 = 0;
      (*(void (**)(uint64_t, uint64_t, const char *, size_t))(*(_QWORD *)v10 + 136))(v10, v6, v52, v53);
    }
  }
  else
  {
    if (*(_QWORD *)v11 != 3)
    {
      v21 = v11 + 16;
      if (v12 == 7)
      {
        if (*(_DWORD *)v21 == 1869506409 && *(_DWORD *)(v21 + 3) == 1684370031)
        {
          v23 = 0x100000001;
        }
        else if (*(_DWORD *)v21 ^ 0x6E726177 | *(_DWORD *)(v21 + 3) ^ 0x676E696E)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0x100000003;
        }
        goto LABEL_44;
      }
LABEL_32:
      if (v12 != 5)
      {
LABEL_69:
        v36 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v36 + 312) = v78;
        *(_DWORD *)(v36 + 316) = 1351;
        if (*(char *)(v36 + 311) < 0)
        {
          **(_BYTE **)(v36 + 288) = 0;
          *(_QWORD *)(v36 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v36 + 288) = 0;
          *(_BYTE *)(v36 + 311) = 0;
        }
        v72[0] = v36 + 320;
        v72[1] = 0;
        v72[2] = v36;
        v73 = 1;
        *(_BYTE *)(v36 + 320) = 0;
        *(_DWORD *)(v36 + 664) = 0;
        v37 = *(unsigned int *)(v36 + 776);
        if ((_DWORD)v37)
        {
          v38 = *(_QWORD *)(v36 + 768);
          v39 = 56 * v37;
          do
          {
            if (*(char *)(v38 + v39 - 9) < 0)
              operator delete(*(void **)(v38 + v39 - 32));
            v39 -= 56;
          }
          while (v39);
        }
        *(_DWORD *)(v36 + 776) = 0;
        v20 = v72;
LABEL_78:
        sub_22E3BB0B8((uint64_t)v20);
        return;
      }
      if (*(_DWORD *)v21 == 1869771365 && *(_BYTE *)(v21 + 4) == 114)
      {
        v23 = 0x100000004;
      }
      else if (*(_DWORD *)v21 ^ 0x61746166 | *(unsigned __int8 *)(v21 + 4) ^ 0x6C)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0x100000005;
      }
LABEL_44:
      if (HIDWORD(v23) && (_DWORD)v23)
      {
        *(_WORD *)(a2 + 536) = v9 | 0x20;
        sub_22F18FB4C(a2, &v78);
        *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v8;
        v26 = v78;
        __p = 0;
        v70 = 0;
        v71 = 0;
        if (!sub_22F190300(a2, (unint64_t)&v78, (uint64_t)&__p, (uint64_t)"pragma diagnostic", 0))
          goto LABEL_106;
        if (v80 != 2)
        {
          v40 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v40 + 312) = v78;
          *(_DWORD *)(v40 + 316) = 1353;
          if (*(char *)(v40 + 311) < 0)
          {
            **(_BYTE **)(v40 + 288) = 0;
            *(_QWORD *)(v40 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v40 + 288) = 0;
            *(_BYTE *)(v40 + 311) = 0;
          }
          v67[0] = v40 + 320;
          v67[1] = 0;
          v67[2] = v40;
          v68 = 1;
          *(_BYTE *)(v40 + 320) = 0;
          *(_DWORD *)(v40 + 664) = 0;
          v42 = *(unsigned int *)(v40 + 776);
          if ((_DWORD)v42)
          {
            v43 = *(_QWORD *)(v40 + 768);
            v44 = 56 * v42;
            do
            {
              if (*(char *)(v43 + v44 - 9) < 0)
                operator delete(*(void **)(v43 + v44 - 32));
              v44 -= 56;
            }
            while (v44);
          }
          *(_DWORD *)(v40 + 776) = 0;
          v45 = (unsigned __int8 **)v67;
          goto LABEL_105;
        }
        v27 = HIBYTE(v71) & 0x7F;
        if (v71 < 0)
          v27 = v70;
        if (v27 >= 3)
        {
          p_p = (unsigned __int8 *)&__p;
          v29 = v71 >= 0 ? &__p : (void **)__p;
          if (*(_BYTE *)v29 == 45)
          {
            if (v71 < 0)
              p_p = (unsigned __int8 *)__p;
            v30 = p_p[1];
            if (v30 == 82 || v30 == 87)
            {
              v31 = v30 != 87;
              v32 = (char *)&__p;
              if (v71 < 0)
                v32 = (char *)__p;
              v33 = v32 + 2;
              if (v27 == 12
                && (*v33 == 0x6968747972657665 ? (v34 = *((unsigned __int16 *)v32 + 5) == 26478) : (v34 = 0), v34))
              {
                sub_22F41A638(*(_QWORD *)(a2 + 48), (char *)v31, v23, v6, 1);
              }
              else if (sub_22F1CCCF4(*(_QWORD *)(a2 + 48), v31, v33, v27 - 2, v23, v6))
              {
                v35 = *(_QWORD *)(a2 + 48);
                *(_DWORD *)(v35 + 312) = v26;
                *(_DWORD *)(v35 + 316) = 1354;
                if (*(char *)(v35 + 311) < 0)
                {
                  **(_BYTE **)(v35 + 288) = 0;
                  *(_QWORD *)(v35 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v35 + 288) = 0;
                  *(_BYTE *)(v35 + 311) = 0;
                }
                v63[0] = (unsigned __int8 *)(v35 + 320);
                v63[1] = 0;
                v63[2] = (unsigned __int8 *)v35;
                v64 = 1;
                *(_BYTE *)(v35 + 320) = 0;
                *(_DWORD *)(v35 + 664) = 0;
                v54 = *(unsigned int *)(v35 + 776);
                if ((_DWORD)v54)
                {
                  v55 = *(_QWORD *)(v35 + 768);
                  v56 = 56 * v54;
                  do
                  {
                    if (*(char *)(v55 + v56 - 9) < 0)
                      operator delete(*(void **)(v55 + v56 - 32));
                    v56 -= 56;
                  }
                  while (v56);
                }
                *(_DWORD *)(v35 + 776) = 0;
                if (v71 >= 0)
                  v57 = &__p;
                else
                  v57 = __p;
                if (v71 >= 0)
                  v58 = HIBYTE(v71) & 0x7F;
                else
                  v58 = v70;
                sub_22E3B89A8(v63, v57, v58);
                v45 = v63;
LABEL_105:
                sub_22E3BB0B8((uint64_t)v45);
LABEL_106:
                if (SHIBYTE(v71) < 0)
                  operator delete(__p);
                return;
              }
              if (v10)
              {
                v59 = *(const char **)(a1 + 32);
                if (v59)
                  v60 = strlen(v59);
                else
                  v60 = 0;
                if (v71 >= 0)
                  v61 = &__p;
                else
                  v61 = __p;
                if (v71 >= 0)
                  v62 = HIBYTE(v71) & 0x7F;
                else
                  v62 = v70;
                (*(void (**)(uint64_t, uint64_t, const char *, size_t, unint64_t, void *, unint64_t))(*(_QWORD *)v10 + 152))(v10, v6, v59, v60, v23, v61, v62);
              }
              goto LABEL_106;
            }
          }
        }
        v41 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v41 + 312) = v26;
        *(_DWORD *)(v41 + 316) = 1352;
        if (*(char *)(v41 + 311) < 0)
        {
          **(_BYTE **)(v41 + 288) = 0;
          *(_QWORD *)(v41 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 288) = 0;
          *(_BYTE *)(v41 + 311) = 0;
        }
        v65[0] = v41 + 320;
        v65[1] = 0;
        v65[2] = v41;
        v66 = 1;
        *(_BYTE *)(v41 + 320) = 0;
        *(_DWORD *)(v41 + 664) = 0;
        v49 = *(unsigned int *)(v41 + 776);
        if ((_DWORD)v49)
        {
          v50 = *(_QWORD *)(v41 + 768);
          v51 = 56 * v49;
          do
          {
            if (*(char *)(v50 + v51 - 9) < 0)
              operator delete(*(void **)(v50 + v51 - 32));
            v51 -= 56;
          }
          while (v51);
        }
        *(_DWORD *)(v41 + 776) = 0;
        v45 = (unsigned __int8 **)v65;
        goto LABEL_105;
      }
      goto LABEL_69;
    }
    if (*(_WORD *)(v11 + 16) != 28528 || *(_BYTE *)(v11 + 18) != 112)
    {
LABEL_23:
      v21 = v11 + 16;
      goto LABEL_32;
    }
    if (!sub_22F1CBE18(*(uint64_t **)(a2 + 48), v6))
    {
      v25 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v25 + 312) = v78;
      *(_DWORD *)(v25 + 316) = 1350;
      if (*(char *)(v25 + 311) < 0)
      {
        **(_BYTE **)(v25 + 288) = 0;
        *(_QWORD *)(v25 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v25 + 288) = 0;
        *(_BYTE *)(v25 + 311) = 0;
      }
      v74[0] = v25 + 320;
      v74[1] = 0;
      v74[2] = v25;
      v75 = 1;
      *(_BYTE *)(v25 + 320) = 0;
      *(_DWORD *)(v25 + 664) = 0;
      v46 = *(unsigned int *)(v25 + 776);
      if ((_DWORD)v46)
      {
        v47 = *(_QWORD *)(v25 + 768);
        v48 = 56 * v46;
        do
        {
          if (*(char *)(v47 + v48 - 9) < 0)
            operator delete(*(void **)(v47 + v48 - 32));
          v48 -= 56;
        }
        while (v48);
      }
      *(_DWORD *)(v25 + 776) = 0;
      v20 = v74;
      goto LABEL_78;
    }
    if (v10)
    {
      v14 = *(const char **)(a1 + 32);
      if (v14)
        v15 = strlen(v14);
      else
        v15 = 0;
      (*(void (**)(uint64_t, uint64_t, const char *, size_t))(*(_QWORD *)v10 + 144))(v10, v6, v14, v15);
    }
  }
}

uint64_t sub_22F186334(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F186370(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F1863BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  const char *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  unint64_t v33;
  void *v34;
  __int128 v35;
  _WORD v36[64];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F172F28((_QWORD *)a2);
  v7 = sub_22F1E361C(*(_QWORD **)(a2 + 88), *(_DWORD *)a4);
  if (v7 == 3 || v7 == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v9 + 316) = 1174;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v34 = (void *)(v9 + 320);
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = v9;
    v36[0] = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v9 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
    *(_DWORD *)(v9 + 776) = 0;
    goto LABEL_39;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 21)
  {
    v14 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v14 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v14 + 316) = 15;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v15 = (unsigned __int8 *)(v14 + 320);
    v34 = (void *)(v14 + 320);
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = v14;
    v36[0] = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v16 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(v14 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
      LODWORD(v16) = *v15;
    }
    *(_DWORD *)(v14 + 776) = 0;
    v15[v16 + 1] = 1;
    *(_BYTE *)(v14 + 320) = v16 + 1;
    v19 = &v15[8 * v16];
    v20 = "(";
    goto LABEL_38;
  }
  sub_22F183658((uint64_t)v32, a2, &v33, (*(_WORD *)(a2 + 536) & 4) != 0);
  if (!v32[24])
    return;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 22)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v10 + 316) = 15;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v21 = (unsigned __int8 *)(v10 + 320);
    v34 = (void *)(v10 + 320);
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = v10;
    v36[0] = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v22 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v10 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
      LODWORD(v22) = *v21;
    }
    *(_DWORD *)(v10 + 776) = 0;
    v21[v22 + 1] = 1;
    *(_BYTE *)(v10 + 320) = v22 + 1;
    v19 = &v21[8 * v22];
    v20 = ")";
LABEL_38:
    *((_QWORD *)v19 + 2) = v20;
LABEL_39:
    sub_22E3BB0B8((uint64_t)&v34);
    return;
  }
  v34 = v36;
  v35 = xmmword_22F44E310;
  v25 = (_BYTE *)sub_22F18E170(a2, (uint64_t)v32, (uint64_t *)&v34, 0);
  v27 = v26;
  v28 = *(_QWORD **)(a2 + 104);
  v29 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v6 + 8) + 88), *(_DWORD *)(v6 + 16));
  v30 = 0;
  if (v29)
  {
    v30 = *(_QWORD *)((*((_QWORD *)v29 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v30)
    {
      do
      {
        v31 = *(_QWORD *)(v30 + 8);
        v30 = v31 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v31 & 2) != 0 && v30);
    }
  }
  sub_22F416758(v28, v30, v25, v27);
  if (v34 != v36)
    free(v34);
}

uint64_t sub_22F186708(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F186744(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F186790(uint64_t a1, unint64_t a2)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v17;
  int v18;
  int v20;
  int v21;
  llvm *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v29;
  uint64_t v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  llvm *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int *v68;
  int v69;
  int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::raw_ostream *v85;
  llvm::raw_ostream *v86;
  uint64_t v87;
  void **v88;
  llvm::raw_ostream *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  uint64_t v93;
  llvm::raw_ostream *v94;
  llvm *v95;
  _BYTE *v96;
  int v97;
  int v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  __int16 v108;
  _QWORD v109[3];
  __int16 v110;
  unsigned int v111;
  uint64_t v112;
  __int16 v113;
  void *__p[2];
  _OWORD v115[2];
  void *v116[2];
  _OWORD v117[4];
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  void *v123;
  _BYTE v124[56];
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v3 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v3 | 0x20;
  sub_22F18FB4C(a2, &v111);
  v4 = v3 & 0x20;
  v5 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v5 & 0xFFDF | v4;
  if (v113 == 5)
  {
    v6 = v112;
    v7 = *(_QWORD *)(v112 + 16);
    switch(*(_DWORD *)v7)
    {
      case 4:
        if (*(_DWORD *)(v7 + 16) != 1886221668)
          goto LABEL_82;
        *(_WORD *)(a2 + 536) = v5 | 0x20;
        sub_22F18FB4C(a2, (unsigned int *)&v105);
        *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v4;
        if ((unsigned __int16)v107 - 7 >= 6
          && (unsigned __int16)v107 - 13 >= 6
          && (unsigned __int16)v107 != 1
          && v106)
        {
          LODWORD(v115[0]) = 413;
          __p[0] = (void *)__PAIR64__(v105, v111);
          __p[1] = v106;
          sub_22F163BBC(a2);
          goto LABEL_100;
        }
        v8 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v8 + 312) = v105;
        *(_DWORD *)(v8 + 316) = 1346;
        if (*(char *)(v8 + 311) < 0)
        {
          **(_BYTE **)(v8 + 288) = 0;
          *(_QWORD *)(v8 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 311) = 0;
        }
        __p[0] = (void *)(v8 + 320);
        __p[1] = 0;
        *(_QWORD *)&v115[0] = v8;
        WORD4(v115[0]) = 1;
        *(_BYTE *)(v8 + 320) = 0;
        *(_DWORD *)(v8 + 664) = 0;
        v54 = *(unsigned int *)(v8 + 776);
        if ((_DWORD)v54)
        {
          v55 = *(_QWORD *)(v8 + 768);
          v56 = 56 * v54;
          do
          {
            if (*(char *)(v55 + v56 - 9) < 0)
              operator delete(*(void **)(v55 + v56 - 32));
            v56 -= 56;
          }
          while (v56);
        }
        goto LABEL_90;
      case 5:
        if (*(_DWORD *)(v7 + 16) == 1935766115 && *(_BYTE *)(v7 + 20) == 104)
        {
          v118 = 0;
          memset(v117, 0, sizeof(v117));
          *(_OWORD *)v116 = 0u;
          *(_OWORD *)__p = 0u;
          memset(v115, 0, sizeof(v115));
          v120 = 0;
          v121 = 0;
          v119 = 0;
          llvm::Timer::init();
          llvm::Timer::startTimer((llvm::Timer *)__p);
          if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 305))
          {
            llvm::Timer::stopTimer((llvm::Timer *)__p);
            MEMORY[0x23489EEC8](__p);
            goto LABEL_93;
          }
          __break(1u);
          return;
        }
        v14 = *(_DWORD *)(v7 + 16);
        v15 = *(unsigned __int8 *)(v7 + 20);
        if (v14 != 1919115629 || v15 != 111)
          goto LABEL_82;
        *(_WORD *)(a2 + 536) = v5 | 0x20;
        sub_22F18FB4C(a2, (unsigned int *)&v105);
        *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v4;
        if ((unsigned __int16)v107 - 7 >= 6
          && (unsigned __int16)v107 - 13 >= 6
          && (unsigned __int16)v107 != 1
          && v106)
        {
          sub_22F176B54(a2, v106);
          goto LABEL_93;
        }
        v8 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v8 + 312) = v105;
        *(_DWORD *)(v8 + 316) = 1346;
        if (*(char *)(v8 + 311) < 0)
        {
          **(_BYTE **)(v8 + 288) = 0;
          *(_QWORD *)(v8 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 311) = 0;
        }
        __p[0] = (void *)(v8 + 320);
        __p[1] = 0;
        *(_QWORD *)&v115[0] = v8;
        WORD4(v115[0]) = 1;
        *(_BYTE *)(v8 + 320) = 0;
        *(_DWORD *)(v8 + 664) = 0;
        v60 = *(unsigned int *)(v8 + 776);
        if ((_DWORD)v60)
        {
          v61 = *(_QWORD *)(v8 + 768);
          v62 = 56 * v60;
          do
          {
            if (*(char *)(v61 + v62 - 9) < 0)
              operator delete(*(void **)(v61 + v62 - 32));
            v62 -= 56;
          }
          while (v62);
        }
        goto LABEL_90;
      case 6:
        v17 = *(_DWORD *)(v7 + 16);
        v18 = *(unsigned __int16 *)(v7 + 20);
        if (v17 != 1702064993 || v18 != 29810)
          goto LABEL_82;
        goto LABEL_93;
      case 7:
        v20 = *(_DWORD *)(v7 + 16);
        v21 = *(_DWORD *)(v7 + 19);
        if (v20 != 1969516397 || v21 != 1936026741)
          goto LABEL_82;
        v104 = a2;
        *(_WORD *)(a2 + 536) = v5 | 0x20;
        v23 = (llvm *)sub_22F18FB4C(a2, (unsigned int *)&v105);
        *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v4;
        if ((unsigned __int16)v107 - 7 < 6
          || (unsigned __int16)v107 - 13 < 6
          || (unsigned __int16)v107 == 1
          || (v67 = v106) == 0)
        {
          v8 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v8 + 312) = v105;
          *(_DWORD *)(v8 + 316) = 1346;
          if (*(char *)(v8 + 311) < 0)
          {
            **(_BYTE **)(v8 + 288) = 0;
            *(_QWORD *)(v8 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v8 + 288) = 0;
            *(_BYTE *)(v8 + 311) = 0;
          }
          __p[0] = (void *)(v8 + 320);
          __p[1] = 0;
          *(_QWORD *)&v115[0] = v8;
          WORD4(v115[0]) = 1;
          *(_BYTE *)(v8 + 320) = 0;
          *(_DWORD *)(v8 + 664) = 0;
          v57 = *(unsigned int *)(v8 + 776);
          if ((_DWORD)v57)
          {
            v58 = *(_QWORD *)(v8 + 768);
            v59 = 56 * v57;
            do
            {
              if (*(char *)(v58 + v59 - 9) < 0)
                operator delete(*(void **)(v58 + v59 - 32));
              v59 -= 56;
            }
            while (v59);
          }
LABEL_90:
          *(_DWORD *)(v8 + 776) = 0;
          v44 = *(unsigned int **)(v6 + 16);
          goto LABEL_91;
        }
        v68 = (int *)v106[2];
        v69 = *v68;
        if (*v68 != 8)
        {
          if (v69 == 7)
          {
            v97 = v68[4];
            v98 = *(int *)((char *)v68 + 19);
            if (v97 != 1769171318 || v98 != 1701601897)
              goto LABEL_222;
            v73 = 1;
          }
          else
          {
            if (v69 != 3)
              goto LABEL_222;
            v70 = *((unsigned __int16 *)v68 + 8);
            v71 = *((unsigned __int8 *)v68 + 18);
            if (v70 != 27745 || v71 != 108)
              goto LABEL_222;
            v73 = 0;
          }
          sub_22F187738((llvm *)&v104, v73);
          goto LABEL_93;
        }
        if (*((_QWORD *)v68 + 2) != 0x676E69646C697562)
        {
LABEL_222:
          v100 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v100 + 312) = v111;
          *(_DWORD *)(v100 + 316) = 1347;
          if (*(char *)(v100 + 311) < 0)
          {
            **(_BYTE **)(v100 + 288) = 0;
            *(_QWORD *)(v100 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v100 + 288) = 0;
            *(_BYTE *)(v100 + 311) = 0;
          }
          __p[0] = (void *)(v100 + 320);
          __p[1] = 0;
          *(_QWORD *)&v115[0] = v100;
          WORD4(v115[0]) = 1;
          *(_BYTE *)(v100 + 320) = 0;
          *(_DWORD *)(v100 + 664) = 0;
          v101 = *(unsigned int *)(v100 + 776);
          if ((_DWORD)v101)
          {
            v102 = *(_QWORD *)(v100 + 768);
            v103 = 56 * v101;
            do
            {
              if (*(char *)(v102 + v103 - 9) < 0)
                operator delete(*(void **)(v102 + v103 - 32));
              v103 -= 56;
            }
            while (v103);
          }
          *(_DWORD *)(v100 + 776) = 0;
          v44 = (unsigned int *)v67[2];
LABEL_91:
          sub_22E3B89A8((unsigned __int8 **)__p, v44 + 4, *v44);
LABEL_92:
          sub_22E3BB0B8((uint64_t)__p);
          goto LABEL_93;
        }
        v82 = *(unsigned int *)(a2 + 1240);
        if ((_DWORD)v82)
        {
          v83 = 32 * v82;
          v84 = *(_QWORD *)(a2 + 1232) + 8;
          do
          {
            v85 = (llvm::raw_ostream *)llvm::errs(v23);
            v86 = v85;
            v87 = *((_QWORD *)v85 + 4);
            if ((unint64_t)(*((_QWORD *)v85 + 3) - v87) > 2)
            {
              *(_BYTE *)(v87 + 2) = 32;
              *(_WORD *)v87 = 28265;
              *((_QWORD *)v85 + 4) += 3;
            }
            else
            {
              v86 = (llvm::raw_ostream *)llvm::raw_ostream::write(v85, "in ");
            }
            sub_22F1D8A24(*(uint64_t **)(v84 - 8), 0, __p);
            if ((SBYTE7(v115[0]) & 0x80u) == 0)
              v88 = __p;
            else
              v88 = (void **)__p[0];
            v23 = (llvm *)llvm::raw_ostream::write(v86, (const char *)v88);
            if (SBYTE7(v115[0]) < 0)
              operator delete(__p[0]);
            if (*(_DWORD *)v84)
            {
              v89 = (llvm::raw_ostream *)llvm::errs(v23);
              v90 = *((_QWORD *)v89 + 4);
              if ((unint64_t)(*((_QWORD *)v89 + 3) - v90) > 9)
              {
                *(_WORD *)(v90 + 8) = 8292;
                *(_QWORD *)v90 = *(_QWORD *)" imported ";
                *((_QWORD *)v89 + 4) += 10;
              }
              else
              {
                v89 = (llvm::raw_ostream *)llvm::raw_ostream::write(v89, " imported ");
              }
              if (*(_BYTE *)(v84 + 4))
              {
                v89 = (llvm::raw_ostream *)llvm::errs(v89);
                v91 = *((_QWORD *)v89 + 4);
                if ((unint64_t)(*((_QWORD *)v89 + 3) - v91) > 0xA)
                {
                  *(_DWORD *)(v91 + 7) = 543255911;
                  *(_QWORD *)v91 = *(_QWORD *)"via pragma ";
                  *((_QWORD *)v89 + 4) += 11;
                }
                else
                {
                  v89 = (llvm::raw_ostream *)llvm::raw_ostream::write(v89, "via pragma ");
                }
              }
              v92 = (llvm::raw_ostream *)llvm::errs(v89);
              v93 = *((_QWORD *)v92 + 4);
              if ((unint64_t)(*((_QWORD *)v92 + 3) - v93) > 2)
              {
                *(_BYTE *)(v93 + 2) = 32;
                *(_WORD *)v93 = 29793;
                *((_QWORD *)v92 + 4) += 3;
              }
              else
              {
                v92 = (llvm::raw_ostream *)llvm::raw_ostream::write(v92, "at ");
              }
              v94 = (llvm::raw_ostream *)llvm::errs(v92);
              v95 = sub_22F422CEC((int *)v84, v94, *(_QWORD **)(a2 + 88));
              v23 = (llvm *)llvm::errs(v95);
              v96 = (_BYTE *)*((_QWORD *)v23 + 4);
              if (*((_BYTE **)v23 + 3) == v96)
              {
                v23 = (llvm *)llvm::raw_ostream::write(v23, "\n");
              }
              else
              {
                *v96 = 10;
                ++*((_QWORD *)v23 + 4);
              }
            }
            v84 += 32;
            v83 -= 32;
          }
          while (v83);
        }
        goto LABEL_93;
      case 8:
        if (*(_QWORD *)(v7 + 16) != 0x6465727574706163)
          goto LABEL_82;
        *(_WORD *)(a2 + 536) = v5 | 0x20;
        sub_22F18FB4C(a2, (unsigned int *)&v105);
        *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v4;
        if ((unsigned __int16)v107 != 2)
          goto LABEL_103;
        v24 = v105;
        v25 = sub_22E3CD3D4(a2 + 128, 24, 3);
        *(_DWORD *)(v25 + 16) = 0;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *(_WORD *)(v25 + 16) = 412;
        *(_DWORD *)v25 = v24;
        sub_22F1735E4(a2, (_BYTE *)v25, 1, 1, 0, 0);
        goto LABEL_93;
      case 0xA:
        v26 = *(_QWORD *)(v7 + 16);
        v27 = *(unsigned __int16 *)(v7 + 24);
        if (v26 != 0x6D5F656C75646F6DLL || v27 != 28769)
          goto LABEL_82;
        __p[0] = v115;
        __p[1] = (void *)0x800000000;
        if (sub_22F187620(a2, (uint64_t)&v111, (uint64_t)__p))
          goto LABEL_54;
        if (!LODWORD(__p[1]))
        {
          v47 = 0;
LABEL_148:
          sub_22F420160(v47);
          v29 = 1;
          goto LABEL_149;
        }
        v47 = 0;
        v48 = (uint64_t *)(*(_QWORD *)(a2 + 104) + 488);
        v49 = (char *)__p[0];
        v50 = (char *)__p[0] + 16 * LODWORD(__p[1]);
        while (1)
        {
          v51 = *(_QWORD *)v49;
          v52 = *((_DWORD *)v49 + 2);
          v53 = sub_22F4123D8(v48, *(_QWORD *)(*(_QWORD *)v49 + 16) + 16, **(unsigned int **)(*(_QWORD *)v49 + 16), (uint64_t)v47);
          if (!v53)
            break;
          v47 = (llvm *)v53;
          v49 += 16;
          if (v49 == v50)
            goto LABEL_148;
        }
        v77 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v77 + 312) = v52;
        *(_DWORD *)(v77 + 316) = 1348;
        if (*(char *)(v77 + 311) < 0)
        {
          **(_BYTE **)(v77 + 288) = 0;
          *(_QWORD *)(v77 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v77 + 288) = 0;
          *(_BYTE *)(v77 + 311) = 0;
        }
        v78 = (unsigned __int8 *)(v77 + 320);
        v105 = v77 + 320;
        v106 = 0;
        v107 = v77;
        v108 = 1;
        *(_BYTE *)(v77 + 320) = 0;
        *(_DWORD *)(v77 + 664) = 0;
        v79 = *(unsigned int *)(v77 + 776);
        if ((_DWORD)v79)
        {
          v80 = *(_QWORD *)(v77 + 768);
          v81 = 56 * v79;
          do
          {
            if (*(char *)(v80 + v81 - 9) < 0)
              operator delete(*(void **)(v80 + v81 - 32));
            v81 -= 56;
          }
          while (v81);
          LODWORD(v79) = *v78;
        }
        *(_DWORD *)(v77 + 776) = 0;
        v78[v79 + 1] = 5;
        *(_BYTE *)(v77 + 320) = v79 + 1;
        *(_QWORD *)&v78[8 * v79 + 16] = v51;
        sub_22E3BB0B8((uint64_t)&v105);
LABEL_54:
        v29 = 0;
LABEL_149:
        if (__p[0] != v115)
          free(__p[0]);
        if ((v29 & 1) == 0)
          return;
        goto LABEL_93;
      case 0xC:
        if (*(_QWORD *)(v7 + 16) == 0x635F726573726170 && *(_DWORD *)(v7 + 24) == 1752392050)
        {
          if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 305))
          {
            __p[1] = 0;
            LODWORD(v115[0]) = 411;
            LODWORD(__p[0]) = v111;
            HIDWORD(__p[0]) = v111;
LABEL_100:
            sub_22E80F2F4(a2, (unint64_t)__p, 0);
          }
        }
        else
        {
          v31 = *(_QWORD *)(v7 + 16);
          v32 = *(_DWORD *)(v7 + 24);
          if (v31 != 0x70616D5F67616964 || v32 != 1735289200)
            goto LABEL_82;
          *(_WORD *)(a2 + 536) = v5 | 0x20;
          sub_22F18FB4C(a2, (unsigned int *)&v105);
          *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v4;
          if ((unsigned __int16)v107 != 13)
          {
            if ((unsigned __int16)v107 == 2)
            {
              sub_22F41A470(*(_QWORD *)(a2 + 48));
              goto LABEL_93;
            }
            goto LABEL_137;
          }
          if ((v107 & 0x200000) != 0)
          {
LABEL_137:
            v8 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v8 + 312) = v105;
            *(_DWORD *)(v8 + 316) = 1346;
            if (*(char *)(v8 + 311) < 0)
            {
              **(_BYTE **)(v8 + 288) = 0;
              *(_QWORD *)(v8 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v8 + 288) = 0;
              *(_BYTE *)(v8 + 311) = 0;
            }
            __p[0] = (void *)(v8 + 320);
            __p[1] = 0;
            *(_QWORD *)&v115[0] = v8;
            WORD4(v115[0]) = 1;
            *(_BYTE *)(v8 + 320) = 0;
            *(_DWORD *)(v8 + 664) = 0;
            v74 = *(unsigned int *)(v8 + 776);
            if ((_DWORD)v74)
            {
              v75 = *(_QWORD *)(v8 + 768);
              v76 = 56 * v74;
              do
              {
                if (*(char *)(v75 + v76 - 9) < 0)
                  operator delete(*(void **)(v75 + v76 - 32));
                v76 -= 56;
              }
              while (v76);
            }
            goto LABEL_90;
          }
          sub_22F14E1D0((uint64_t)__p, (uint64_t)&v105, 1, (_QWORD *)a2);
          if (v124[40])
          {
            if (v123 != v124)
              free(v123);
            if (v116[0] != (char *)v117 + 8)
              free(v116[0]);
            return;
          }
          sub_22F41A488(*(_QWORD *)(a2 + 48), v116[0], (v122 - LODWORD(v116[0])));
          if (v123 != v124)
            free(v123);
          if (v116[0] != (char *)v117 + 8)
            free(v116[0]);
        }
LABEL_93:
        v45 = *(_QWORD *)(a2 + 1088);
        if (v45)
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v45 + 120))(v45, v111, *(_QWORD *)(v6 + 16) + 16, **(unsigned int **)(v6 + 16));
        return;
      case 0xE:
        v34 = *(_QWORD *)(v7 + 16);
        v35 = *(_QWORD *)(v7 + 22);
        if (v34 != 0x776F6C667265766FLL || v35 != 0x6B636174735F776FLL)
          goto LABEL_82;
        if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 305))
        {
          __p[0] = sub_22F187714;
          sub_22F187714();
        }
        goto LABEL_93;
      case 0x10:
        if (*(_QWORD *)(v7 + 16) == 0x7461665F6D766C6CLL && *(_QWORD *)(v7 + 24) == 0x726F7272655F6C61)
        {
          if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 305))
            goto LABEL_93;
          llvm::report_fatal_error((llvm *)"#pragma clang __debug llvm_fatal_error", (const char *)1);
LABEL_103:
          v46 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v46 + 312) = v105;
          *(_DWORD *)(v46 + 316) = 1223;
          if (*(char *)(v46 + 311) < 0)
          {
            **(_BYTE **)(v46 + 288) = 0;
            *(_QWORD *)(v46 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v46 + 288) = 0;
            *(_BYTE *)(v46 + 311) = 0;
          }
          v63 = (unsigned __int8 *)(v46 + 320);
          __p[0] = (void *)(v46 + 320);
          __p[1] = 0;
          *(_QWORD *)&v115[0] = v46;
          WORD4(v115[0]) = 1;
          *(_BYTE *)(v46 + 320) = 0;
          *(_DWORD *)(v46 + 664) = 0;
          v64 = *(unsigned int *)(v46 + 776);
          if ((_DWORD)v64)
          {
            v65 = *(_QWORD *)(v46 + 768);
            v66 = 56 * v64;
            do
            {
              if (*(char *)(v65 + v66 - 9) < 0)
                operator delete(*(void **)(v65 + v66 - 32));
              v66 -= 56;
            }
            while (v66);
            LODWORD(v64) = *v63;
          }
          *(_DWORD *)(v46 + 776) = 0;
          v63[v64 + 1] = 1;
          *(_BYTE *)(v46 + 320) = v64 + 1;
          *(_QWORD *)&v63[8 * v64 + 16] = "pragma clang __debug captured";
          goto LABEL_92;
        }
        v38 = *(_QWORD *)(v7 + 16);
        v39 = *(_QWORD *)(v7 + 24);
        if (v38 == 0x726E755F6D766C6CLL && v39 == 0x656C626168636165)
          goto LABEL_93;
LABEL_82:
        v8 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v8 + 312) = v111;
        *(_DWORD *)(v8 + 316) = 1347;
        if (*(char *)(v8 + 311) < 0)
        {
          **(_BYTE **)(v8 + 288) = 0;
          *(_QWORD *)(v8 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 311) = 0;
        }
        __p[0] = (void *)(v8 + 320);
        __p[1] = 0;
        *(_QWORD *)&v115[0] = v8;
        WORD4(v115[0]) = 1;
        *(_BYTE *)(v8 + 320) = 0;
        *(_DWORD *)(v8 + 664) = 0;
        v41 = *(unsigned int *)(v8 + 776);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)(v8 + 768);
          v43 = 56 * v41;
          do
          {
            if (*(char *)(v42 + v43 - 9) < 0)
              operator delete(*(void **)(v42 + v43 - 32));
            v43 -= 56;
          }
          while (v43);
        }
        goto LABEL_90;
      default:
        goto LABEL_82;
    }
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v9 + 312) = v111;
  *(_DWORD *)(v9 + 316) = 1351;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v109[0] = v9 + 320;
  v109[1] = 0;
  v109[2] = v9;
  v110 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v109);
}

BOOL sub_22F187620(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  __int128 v7;
  unint64_t v8;
  __int16 v9;
  __int128 v11;
  __int128 v12;

  do
  {
    *(_QWORD *)&v12 = 0;
    DWORD2(v12) = 0;
    v6 = sub_22F183CD0(a1, a2, (uint64_t)&v12, *(_DWORD *)(a3 + 8) == 0);
    if (v6)
      break;
    v7 = v12;
    v8 = *(unsigned int *)(a3 + 8);
    if (v8 >= *(unsigned int *)(a3 + 12))
    {
      v11 = v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = v11;
      v8 = *(unsigned int *)(a3 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a3 + 16 * v8) = v7;
    ++*(_DWORD *)(a3 + 8);
    v9 = *(_WORD *)(a1 + 536);
    *(_WORD *)(a1 + 536) = v9 | 0x20;
    sub_22F18FB4C(a1, (unsigned int *)a2);
    *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v9 & 0x20;
  }
  while (*(_WORD *)(a2 + 16) == 25);
  return v6;
}

void sub_22F187714()
{
  while (1)
    ;
}

llvm *sub_22F187738(llvm *result, uint64_t a2)
{
  llvm *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 104);
  v5 = *(uint64_t **)(v4 + 1512);
  v6 = *(unsigned int *)(v4 + 1520);
  if ((_DWORD)v6)
  {
    for (i = v5; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = v5;
  }
  v9 = &v5[v6];
  if (i != v9)
  {
    v10 = *i;
    do
    {
      result = sub_22F1877CC(v3, *(_QWORD *)(v10 + 8), a2);
      do
      {
        v11 = i[1];
        ++i;
        v10 = v11;
        if (v11)
          v12 = v10 == -8;
        else
          v12 = 1;
      }
      while (v12);
    }
    while (i != v9);
  }
  return result;
}

llvm *sub_22F1877CC(llvm *result, uint64_t a2, uint64_t a3)
{
  llvm *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *p_p;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void *__p;
  char v22;
  int v23;

  v5 = result;
  v6 = *(unsigned int *)(a2 + 432);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 1584) + 24);
  if (v6 >= (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 1584) + 32) - v7) >> 2)
    v8 = 0;
  else
    v8 = *(_DWORD *)(v7 + 4 * v6);
  v23 = v8;
  if (!(_DWORD)a3 || v8)
  {
    v9 = (llvm::raw_ostream *)llvm::errs(result);
    sub_22F1D8A24((uint64_t *)a2, 0, &__p);
    if (v22 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, p_p);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (*((_BYTE **)v11 + 3) == v12)
    {
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, " ");
    }
    else
    {
      *v12 = 32;
      ++*((_QWORD *)v11 + 4);
    }
    if (v22 < 0)
      operator delete(__p);
    if (v8)
    {
      llvm::errs(v11);
      v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v19 = *((_QWORD *)v18 + 4);
      if ((unint64_t)(*((_QWORD *)v18 + 3) - v19) > 8)
      {
        *(_BYTE *)(v19 + 8) = 32;
        *(_QWORD *)v19 = *(_QWORD *)" visible ";
        *((_QWORD *)v18 + 4) += 9;
      }
      else
      {
        v18 = (llvm::raw_ostream *)llvm::raw_ostream::write(v18, " visible ");
      }
      v20 = (llvm::raw_ostream *)llvm::errs(v18);
      v11 = sub_22F422CEC(&v23, v20, *(_QWORD **)(*(_QWORD *)v5 + 88));
    }
    result = (llvm *)llvm::errs(v11);
    v13 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v13)
    {
      result = (llvm *)llvm::raw_ostream::write(result, "\n");
    }
    else
    {
      *v13 = 10;
      ++*((_QWORD *)result + 4);
    }
  }
  v15 = *(uint64_t **)(a2 + 200);
  v14 = *(uint64_t **)(a2 + 208);
  if (v15 != v14)
  {
    if (v8)
      v16 = a3;
    else
      v16 = 0;
    do
    {
      v17 = *v15;
      if (!v16 || (*(_WORD *)(v17 + 1344) & 0x20) != 0)
        result = (llvm *)sub_22F1877CC(v5, v17, a3);
      ++v15;
    }
    while (v15 != v14);
  }
  return result;
}

uint64_t sub_22F1879A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F1879E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F187A30(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  __int16 v49;
  _QWORD v50[3];
  __int16 v51;
  _QWORD v52[3];
  __int16 v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  _QWORD v58[3];
  __int16 v59;
  unsigned int v60;
  uint64_t v61;
  unsigned __int16 v62;

  v6 = *a4;
  v7 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v7 | 0x20;
  sub_22F18FB4C(a2, &v60);
  v8 = v7 & 0x20;
  v9 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v9 & 0xFFDF | v8;
  if (v62 - 7 < 6)
    goto LABEL_7;
  v10 = v62 - 13 < 6 || v62 == 1;
  if (v10 || !v61)
    goto LABEL_7;
  v17 = *(_QWORD *)(v61 + 16);
  if (*(_DWORD *)v17 == 3)
  {
    v22 = *(unsigned __int16 *)(v17 + 16);
    v23 = *(unsigned __int8 *)(v17 + 18);
    if (v22 != 28261 || v23 != 100)
      goto LABEL_7;
    v21 = 0;
  }
  else
  {
    if (*(_DWORD *)v17 != 5
      || ((v18 = *(_DWORD *)(v17 + 16), v19 = *(unsigned __int8 *)(v17 + 20), v18 == 1768383842)
        ? (v20 = v19 == 110)
        : (v20 = 0),
          !v20))
    {
LABEL_7:
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v60;
      *(_DWORD *)(v11 + 316) = 1102;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v58[0] = v11 + 320;
      v58[1] = 0;
      v58[2] = v11;
      v59 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v12 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v11 + 768);
        v14 = 56 * v12;
        do
        {
          if (*(char *)(v13 + v14 - 9) < 0)
            operator delete(*(void **)(v13 + v14 - 32));
          v14 -= 56;
        }
        while (v14);
      }
      *(_DWORD *)(v11 + 776) = 0;
      v15 = v58;
      return sub_22E3BB0B8((uint64_t)v15);
    }
    v21 = 1;
  }
  *(_WORD *)(a2 + 536) = v9 | 0x20;
  result = sub_22F18FB4C(a2, &v60);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v8;
  if (v62 != 2)
  {
    v25 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v25 + 312) = v60;
    *(_DWORD *)(v25 + 316) = 1223;
    if (*(char *)(v25 + 311) < 0)
    {
      **(_BYTE **)(v25 + 288) = 0;
      *(_QWORD *)(v25 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 288) = 0;
      *(_BYTE *)(v25 + 311) = 0;
    }
    v26 = (unsigned __int8 *)(v25 + 320);
    v54 = (unsigned __int8 *)(v25 + 320);
    v55 = 0;
    v56 = v25;
    v57 = 1;
    *(_BYTE *)(v25 + 320) = 0;
    *(_DWORD *)(v25 + 664) = 0;
    v27 = *(unsigned int *)(v25 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v25 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
      v26 = v54;
      *(_DWORD *)(v25 + 776) = 0;
      if (!v26)
      {
        v26 = (unsigned __int8 *)sub_22E3B8AAC(v55);
        v54 = v26;
      }
    }
    else
    {
      *(_DWORD *)(v25 + 776) = 0;
    }
    v26[*v26 + 1] = 1;
    v30 = v54;
    v31 = *v54;
    *v54 = v31 + 1;
    *(_QWORD *)&v30[8 * v31 + 16] = "pragma";
    result = sub_22E3BB0B8((uint64_t)&v54);
  }
  v32 = *(_DWORD *)(a2 + 848);
  if (v21)
  {
    if (v32)
    {
      v33 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v33 + 312) = v6;
      *(_DWORD *)(v33 + 316) = 1108;
      if (*(char *)(v33 + 311) < 0)
      {
        **(_BYTE **)(v33 + 288) = 0;
        *(_QWORD *)(v33 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v33 + 288) = 0;
        *(_BYTE *)(v33 + 311) = 0;
      }
      v52[0] = v33 + 320;
      v52[1] = 0;
      v52[2] = v33;
      v53 = 1;
      *(_BYTE *)(v33 + 320) = 0;
      *(_DWORD *)(v33 + 664) = 0;
      v35 = *(unsigned int *)(v33 + 776);
      if ((_DWORD)v35)
      {
        v36 = *(_QWORD *)(v33 + 768);
        v37 = 56 * v35;
        do
        {
          if (*(char *)(v36 + v37 - 9) < 0)
            operator delete(*(void **)(v36 + v37 - 32));
          v37 -= 56;
        }
        while (v37);
      }
      *(_DWORD *)(v33 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v52);
      v38 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v38 + 312) = v32;
      *(_DWORD *)(v38 + 316) = 107;
      if (*(char *)(v38 + 311) < 0)
      {
        **(_BYTE **)(v38 + 288) = 0;
        *(_QWORD *)(v38 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v38 + 288) = 0;
        *(_BYTE *)(v38 + 311) = 0;
      }
      v50[0] = v38 + 320;
      v50[1] = 0;
      v50[2] = v38;
      v51 = 1;
      *(_BYTE *)(v38 + 320) = 0;
      *(_DWORD *)(v38 + 664) = 0;
      v39 = *(unsigned int *)(v38 + 776);
      if ((_DWORD)v39)
      {
        v40 = *(_QWORD *)(v38 + 768);
        v41 = 56 * v39;
        do
        {
          if (*(char *)(v40 + v41 - 9) < 0)
            operator delete(*(void **)(v40 + v41 - 32));
          v41 -= 56;
        }
        while (v41);
      }
      *(_DWORD *)(v38 + 776) = 0;
      result = sub_22E3BB0B8((uint64_t)v50);
    }
  }
  else
  {
    if (!v32)
    {
      v34 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v34 + 312) = v6;
      *(_DWORD *)(v34 + 316) = 1168;
      if (*(char *)(v34 + 311) < 0)
      {
        **(_BYTE **)(v34 + 288) = 0;
        *(_QWORD *)(v34 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v34 + 288) = 0;
        *(_BYTE *)(v34 + 311) = 0;
      }
      v48[0] = v34 + 320;
      v48[1] = 0;
      v48[2] = v34;
      v49 = 1;
      *(_BYTE *)(v34 + 320) = 0;
      *(_DWORD *)(v34 + 664) = 0;
      v44 = *(unsigned int *)(v34 + 776);
      if ((_DWORD)v44)
      {
        v45 = *(_QWORD *)(v34 + 768);
        v46 = 56 * v44;
        do
        {
          if (*(char *)(v45 + v46 - 9) < 0)
            operator delete(*(void **)(v45 + v46 - 32));
          v46 -= 56;
        }
        while (v46);
      }
      *(_DWORD *)(v34 + 776) = 0;
      v15 = v48;
      return sub_22E3BB0B8((uint64_t)v15);
    }
    v6 = 0;
  }
  v42 = *((unsigned __int16 *)a4 + 8);
  if ((v42 - 7) < 6 || ((v42 - 13) >= 6 ? (v43 = v42 == 1) : (v43 = 1), v43))
    v47 = 0;
  else
    v47 = *((_QWORD *)a4 + 1);
  *(_QWORD *)(a2 + 840) = v47;
  *(_DWORD *)(a2 + 848) = v6;
  return result;
}

uint64_t sub_22F187EA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F187EE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F187F2C(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  __int16 v48;
  _QWORD v49[3];
  __int16 v50;
  _QWORD v51[3];
  __int16 v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  _QWORD v57[3];
  __int16 v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int16 v61;

  v5 = *a4;
  v6 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v6 | 0x20;
  sub_22F18FB4C(a2, &v59);
  v7 = v6 & 0x20;
  v8 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v8 & 0xFFDF | v7;
  if (v61 - 7 < 6)
    goto LABEL_7;
  v9 = v61 - 13 < 6 || v61 == 1;
  if (v9 || !v60)
    goto LABEL_7;
  v16 = *(_QWORD *)(v60 + 16);
  if (*(_DWORD *)v16 == 3)
  {
    v21 = *(unsigned __int16 *)(v16 + 16);
    v22 = *(unsigned __int8 *)(v16 + 18);
    if (v21 != 28261 || v22 != 100)
      goto LABEL_7;
    v20 = 0;
  }
  else
  {
    if (*(_DWORD *)v16 != 5
      || ((v17 = *(_DWORD *)(v16 + 16), v18 = *(unsigned __int8 *)(v16 + 20), v17 == 1768383842)
        ? (v19 = v18 == 110)
        : (v19 = 0),
          !v19))
    {
LABEL_7:
      v10 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v10 + 312) = v59;
      *(_DWORD *)(v10 + 316) = 1103;
      if (*(char *)(v10 + 311) < 0)
      {
        **(_BYTE **)(v10 + 288) = 0;
        *(_QWORD *)(v10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v10 + 288) = 0;
        *(_BYTE *)(v10 + 311) = 0;
      }
      v57[0] = v10 + 320;
      v57[1] = 0;
      v57[2] = v10;
      v58 = 1;
      *(_BYTE *)(v10 + 320) = 0;
      *(_DWORD *)(v10 + 664) = 0;
      v11 = *(unsigned int *)(v10 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v10 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
      }
      *(_DWORD *)(v10 + 776) = 0;
      v14 = v57;
      return sub_22E3BB0B8((uint64_t)v14);
    }
    v20 = 1;
  }
  *(_WORD *)(a2 + 536) = v8 | 0x20;
  result = sub_22F18FB4C(a2, &v59);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v7;
  if (v61 != 2)
  {
    v24 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v24 + 312) = v59;
    *(_DWORD *)(v24 + 316) = 1223;
    if (*(char *)(v24 + 311) < 0)
    {
      **(_BYTE **)(v24 + 288) = 0;
      *(_QWORD *)(v24 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v24 + 288) = 0;
      *(_BYTE *)(v24 + 311) = 0;
    }
    v25 = (unsigned __int8 *)(v24 + 320);
    v53 = (unsigned __int8 *)(v24 + 320);
    v54 = 0;
    v55 = v24;
    v56 = 1;
    *(_BYTE *)(v24 + 320) = 0;
    *(_DWORD *)(v24 + 664) = 0;
    v26 = *(unsigned int *)(v24 + 776);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(v24 + 768);
      v28 = 56 * v26;
      do
      {
        if (*(char *)(v27 + v28 - 9) < 0)
          operator delete(*(void **)(v27 + v28 - 32));
        v28 -= 56;
      }
      while (v28);
      v25 = v53;
      *(_DWORD *)(v24 + 776) = 0;
      if (!v25)
      {
        v25 = (unsigned __int8 *)sub_22E3B8AAC(v54);
        v53 = v25;
      }
    }
    else
    {
      *(_DWORD *)(v24 + 776) = 0;
    }
    v25[*v25 + 1] = 1;
    v29 = v53;
    v30 = *v53;
    *v53 = v30 + 1;
    *(_QWORD *)&v29[8 * v30 + 16] = "pragma";
    result = sub_22E3BB0B8((uint64_t)&v53);
  }
  v31 = *(_DWORD *)(a2 + 856);
  v32 = *(_QWORD **)(a2 + 1088);
  if (v20)
  {
    if (v31)
    {
      v33 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v33 + 312) = v5;
      *(_DWORD *)(v33 + 316) = 1109;
      if (*(char *)(v33 + 311) < 0)
      {
        **(_BYTE **)(v33 + 288) = 0;
        *(_QWORD *)(v33 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v33 + 288) = 0;
        *(_BYTE *)(v33 + 311) = 0;
      }
      v51[0] = v33 + 320;
      v51[1] = 0;
      v51[2] = v33;
      v52 = 1;
      *(_BYTE *)(v33 + 320) = 0;
      *(_DWORD *)(v33 + 664) = 0;
      v37 = *(unsigned int *)(v33 + 776);
      if ((_DWORD)v37)
      {
        v38 = *(_QWORD *)(v33 + 768);
        v39 = 56 * v37;
        do
        {
          if (*(char *)(v38 + v39 - 9) < 0)
            operator delete(*(void **)(v38 + v39 - 32));
          v39 -= 56;
        }
        while (v39);
      }
      *(_DWORD *)(v33 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v51);
      v40 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v40 + 312) = v31;
      *(_DWORD *)(v40 + 316) = 107;
      if (*(char *)(v40 + 311) < 0)
      {
        **(_BYTE **)(v40 + 288) = 0;
        *(_QWORD *)(v40 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v40 + 288) = 0;
        *(_BYTE *)(v40 + 311) = 0;
      }
      v49[0] = v40 + 320;
      v49[1] = 0;
      v49[2] = v40;
      v50 = 1;
      *(_BYTE *)(v40 + 320) = 0;
      *(_DWORD *)(v40 + 664) = 0;
      v41 = *(unsigned int *)(v40 + 776);
      if ((_DWORD)v41)
      {
        v42 = *(_QWORD *)(v40 + 768);
        v43 = 56 * v41;
        do
        {
          if (*(char *)(v42 + v43 - 9) < 0)
            operator delete(*(void **)(v42 + v43 - 32));
          v43 -= 56;
        }
        while (v43);
      }
      *(_DWORD *)(v40 + 776) = 0;
      result = sub_22E3BB0B8((uint64_t)v49);
    }
    if (!v32)
      goto LABEL_72;
    v35 = 26;
    v34 = v5;
    goto LABEL_71;
  }
  if (!v31)
  {
    v36 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v36 + 312) = v5;
    *(_DWORD *)(v36 + 316) = 1169;
    if (*(char *)(v36 + 311) < 0)
    {
      **(_BYTE **)(v36 + 288) = 0;
      *(_QWORD *)(v36 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v36 + 288) = 0;
      *(_BYTE *)(v36 + 311) = 0;
    }
    v47[0] = v36 + 320;
    v47[1] = 0;
    v47[2] = v36;
    v48 = 1;
    *(_BYTE *)(v36 + 320) = 0;
    *(_DWORD *)(v36 + 664) = 0;
    v44 = *(unsigned int *)(v36 + 776);
    if ((_DWORD)v44)
    {
      v45 = *(_QWORD *)(v36 + 768);
      v46 = 56 * v44;
      do
      {
        if (*(char *)(v45 + v46 - 9) < 0)
          operator delete(*(void **)(v45 + v46 - 32));
        v46 -= 56;
      }
      while (v46);
    }
    *(_DWORD *)(v36 + 776) = 0;
    v14 = v47;
    return sub_22E3BB0B8((uint64_t)v14);
  }
  LODWORD(v5) = 0;
  if (v32)
  {
    v34 = 0;
    v35 = 27;
LABEL_71:
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v32 + 8 * v35))(v32, v34);
  }
LABEL_72:
  *(_DWORD *)(a2 + 856) = v5;
  return result;
}

uint64_t sub_22F188398(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F1883D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F188420(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  __int128 v16;
  _QWORD v17[3];
  _QWORD v18[2];
  _BYTE v19[15];
  void *v20;
  _BYTE v21[15];
  char v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v16 = 0uLL;
  v6 = (_QWORD *)sub_22F188624(a2, (unint64_t)a4, (uint64_t)"#pragma clang deprecated", (uint64_t)&__p);
  if (v6)
  {
    v7 = v6;
    if ((*v6 & 0x4000000000) == 0)
      *v6 |= 0x4080000000uLL;
    v8 = __p;
    v18[0] = v16;
    *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)((char *)&v16 + 7);
    v9 = HIBYTE(v16);
    v16 = 0uLL;
    __p = 0;
    v10 = *a4;
    v17[0] = v6;
    *(_QWORD *)v19 = 0;
    if (!sub_22F4175A8((uint64_t *)(a2 + 2120), v17, v19)
      || (v11 = *(_QWORD *)v19, *(_QWORD *)v19 == *(_QWORD *)(a2 + 2120) + 96 * *(unsigned int *)(a2 + 2136)))
    {
      v20 = v8;
      *(_QWORD *)v21 = v18[0];
      *(_QWORD *)&v21[7] = *(_QWORD *)((char *)v18 + 7);
      *(_QWORD *)v19 = v7;
      *(_DWORD *)&v19[8] = v10;
      v22 = v9;
      v23 = 1;
      v24 = 0;
      v27 = 0;
      v28 = 0;
      sub_22F41764C((uint64_t)v17, a2 + 2120, v19, (uint64_t)&v19[8]);
      if (v27)
      {
        if (v26 < 0)
          operator delete(v25);
        v27 = 0;
      }
      if (v23 && v22 < 0)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v19 = v18[0];
      *(_QWORD *)&v19[7] = *(_QWORD *)((char *)v18 + 7);
      v12 = *(unsigned __int8 *)(v11 + 40);
      *(_DWORD *)(v11 + 8) = v10;
      if (v12)
      {
        if (*(char *)(v11 + 39) < 0)
          operator delete(*(void **)(v11 + 16));
        v13 = *(_QWORD *)v19;
        *(_QWORD *)(v11 + 16) = v8;
        *(_QWORD *)(v11 + 24) = v13;
        *(_QWORD *)(v11 + 31) = *(_QWORD *)&v19[7];
        *(_BYTE *)(v11 + 39) = v9;
      }
      else
      {
        v14 = *(_QWORD *)v19;
        *(_QWORD *)(v11 + 16) = v8;
        *(_QWORD *)(v11 + 24) = v14;
        *(_QWORD *)(v11 + 31) = *(_QWORD *)&v19[7];
        *(_BYTE *)(v11 + 39) = v9;
        *(_BYTE *)(v11 + 40) = 1;
      }
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
}

uint64_t sub_22F188624(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;

  sub_22F18FB4C(a1, (unsigned int *)a2);
  if (*(_WORD *)(a2 + 16) != 21)
  {
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v11 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v11 + 316) = 15;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v11 + 320);
    v34 = v11 + 320;
    v35 = 0;
    v36 = v11;
    v37 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v14 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v11 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
      LODWORD(v14) = *v13;
    }
    *(_DWORD *)(v11 + 776) = 0;
    v13[v14 + 1] = 1;
    *(_BYTE *)(v11 + 320) = v14 + 1;
    v17 = &v13[8 * v14];
    v18 = "(";
    goto LABEL_32;
  }
  v8 = *(_WORD *)(a1 + 536);
  *(_WORD *)(a1 + 536) = v8 | 0x20;
  sub_22F18FB4C(a1, (unsigned int *)a2);
  *(_WORD *)(a1 + 536) = *(_WORD *)(a1 + 536) & 0xFFDF | v8 & 0x20;
  if (*(_WORD *)(a2 + 16) != 5)
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v12 + 316) = 15;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v21 = (unsigned __int8 *)(v12 + 320);
    v34 = v12 + 320;
    v35 = 0;
    v36 = v12;
    v37 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v22 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v12 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
      LODWORD(v22) = *v21;
    }
    *(_DWORD *)(v12 + 776) = 0;
    v21[v22 + 1] = 4;
    *(_BYTE *)(v12 + 320) = v22 + 1;
    v17 = &v21[8 * v22];
    v18 = (const char *)5;
    goto LABEL_32;
  }
  v9 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(v9 + 3) & 2) == 0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v10 + 316) = 1173;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v26 = (unsigned __int8 *)(v10 + 320);
    v34 = v10 + 320;
    v35 = 0;
    v36 = v10;
    v37 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v27 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v10 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
      LODWORD(v27) = *v26;
    }
    *(_DWORD *)(v10 + 776) = 0;
    v26[v27 + 1] = 5;
    *(_BYTE *)(v10 + 320) = v27 + 1;
    *(_QWORD *)&v26[8 * v27 + 16] = v9;
    goto LABEL_33;
  }
  sub_22F18FB4C(a1, (unsigned int *)a2);
  v19 = *(unsigned __int16 *)(a2 + 16);
  if (v19 == 65)
  {
    sub_22F18FB4C(a1, (unsigned int *)a2);
    if (!sub_22F190300(a1, a2, a4, a3, 1))
      return 0;
    v19 = *(unsigned __int16 *)(a2 + 16);
  }
  if (v19 != 22)
  {
    v20 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v20 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v20 + 316) = 15;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    v30 = (unsigned __int8 *)(v20 + 320);
    v34 = v20 + 320;
    v35 = 0;
    v36 = v20;
    v37 = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v31 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD *)(v20 + 768);
      v33 = 56 * v31;
      do
      {
        if (*(char *)(v32 + v33 - 9) < 0)
          operator delete(*(void **)(v32 + v33 - 32));
        v33 -= 56;
      }
      while (v33);
      LODWORD(v31) = *v30;
    }
    *(_DWORD *)(v20 + 776) = 0;
    v30[v31 + 1] = 1;
    *(_BYTE *)(v20 + 320) = v31 + 1;
    v17 = &v30[8 * v31];
    v18 = ")";
LABEL_32:
    *((_QWORD *)v17 + 2) = v18;
LABEL_33:
    sub_22E3BB0B8((uint64_t)&v34);
    return 0;
  }
  return v9;
}

_QWORD *sub_22F1889B4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 96 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F41779C(a1, v4, (_QWORD *)v4 + 12 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(96 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 96 * v10;
      do
      {
        *result = -4096;
        result += 12;
        v11 -= 96;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F188A80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    *(_BYTE *)(a1 + 72) = 0;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t sub_22F188AD8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F188B14(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F188B60(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  __int128 v16;
  _QWORD v17[3];
  _QWORD v18[2];
  _BYTE v19[15];
  void *v20;
  char v21;
  char v22;
  int v23;
  void *v24;
  _BYTE v25[15];
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v16 = 0uLL;
  v6 = (_QWORD *)sub_22F188624(a2, (unint64_t)a4, (uint64_t)"#pragma clang restrict_expansion", (uint64_t)&__p);
  if (v6)
  {
    v7 = v6;
    if ((*v6 & 0x8000000000) == 0)
      *v6 |= 0x8080000000uLL;
    v8 = __p;
    v18[0] = v16;
    *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)((char *)&v16 + 7);
    v9 = HIBYTE(v16);
    v16 = 0uLL;
    __p = 0;
    v10 = *a4;
    v17[0] = v6;
    *(_QWORD *)v19 = 0;
    if (!sub_22F4175A8((uint64_t *)(a2 + 2120), v17, v19)
      || (v11 = *(_QWORD *)v19, *(_QWORD *)v19 == *(_QWORD *)(a2 + 2120) + 96 * *(unsigned int *)(a2 + 2136)))
    {
      v24 = v8;
      *(_QWORD *)v25 = v18[0];
      *(_QWORD *)&v25[7] = *(_QWORD *)((char *)v18 + 7);
      *(_QWORD *)v19 = v7;
      v19[8] = 0;
      v22 = 0;
      v23 = v10;
      v26 = v9;
      v27 = 1;
      v28 = 0;
      sub_22F41764C((uint64_t)v17, a2 + 2120, v19, (uint64_t)&v19[8]);
      if (v27)
      {
        if (v26 < 0)
          operator delete(v24);
        v27 = 0;
      }
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v19 = v18[0];
      *(_QWORD *)&v19[7] = *(_QWORD *)((char *)v18 + 7);
      v12 = *(unsigned __int8 *)(v11 + 80);
      *(_DWORD *)(v11 + 48) = v10;
      if (v12)
      {
        if (*(char *)(v11 + 79) < 0)
          operator delete(*(void **)(v11 + 56));
        v13 = *(_QWORD *)v19;
        *(_QWORD *)(v11 + 56) = v8;
        *(_QWORD *)(v11 + 64) = v13;
        *(_QWORD *)(v11 + 71) = *(_QWORD *)&v19[7];
        *(_BYTE *)(v11 + 79) = v9;
      }
      else
      {
        v14 = *(_QWORD *)v19;
        *(_QWORD *)(v11 + 56) = v8;
        *(_QWORD *)(v11 + 64) = v14;
        *(_QWORD *)(v11 + 71) = *(_QWORD *)&v19[7];
        *(_BYTE *)(v11 + 79) = v9;
        *(_BYTE *)(v11 + 80) = 1;
      }
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
}

uint64_t sub_22F188D64(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F188DA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F188DEC(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  void *__p;
  char v42;
  char v43;
  uint64_t v44;

  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) != 21)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *a4;
    *(_DWORD *)(v9 + 316) = 15;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v11 = (unsigned __int8 *)(v9 + 320);
    v34 = v9 + 320;
    v35 = 0;
    v36 = (void *)v9;
    v37 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v12 = *(unsigned int *)(v9 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v9 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
      LODWORD(v12) = *v11;
    }
    *(_DWORD *)(v9 + 776) = 0;
    v11[v12 + 1] = 1;
    *(_BYTE *)(v9 + 320) = v12 + 1;
    v15 = &v11[8 * v12];
    v16 = "(";
    goto LABEL_45;
  }
  v6 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v6 | 0x20;
  sub_22F18FB4C(a2, a4);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v6 & 0x20;
  if (*((_WORD *)a4 + 8) != 5)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = *a4;
    *(_DWORD *)(v10 + 316) = 15;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v18 = (unsigned __int8 *)(v10 + 320);
    v34 = v10 + 320;
    v35 = 0;
    v36 = (void *)v10;
    v37 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v19 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v10 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
      LODWORD(v19) = *v18;
    }
    *(_DWORD *)(v10 + 776) = 0;
    v18[v19 + 1] = 4;
    *(_BYTE *)(v10 + 320) = v19 + 1;
    v15 = &v18[8 * v19];
    v16 = (const char *)5;
    goto LABEL_45;
  }
  v7 = *((_QWORD *)a4 + 1);
  if ((*(_BYTE *)(v7 + 3) & 2) == 0)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v8 + 312) = *a4;
    *(_DWORD *)(v8 + 316) = 1173;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v22 = (unsigned __int8 *)(v8 + 320);
    v34 = v8 + 320;
    v35 = 0;
    v36 = (void *)v8;
    v37 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v23 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v8 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
      LODWORD(v23) = *v22;
    }
    *(_DWORD *)(v8 + 776) = 0;
    v22[v23 + 1] = 5;
    *(_BYTE *)(v8 + 320) = v23 + 1;
    *(_QWORD *)&v22[8 * v23 + 16] = v7;
    goto LABEL_46;
  }
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) != 22)
  {
    v17 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v17 + 312) = *a4;
    *(_DWORD *)(v17 + 316) = 15;
    if (*(char *)(v17 + 311) < 0)
    {
      **(_BYTE **)(v17 + 288) = 0;
      *(_QWORD *)(v17 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v17 + 288) = 0;
      *(_BYTE *)(v17 + 311) = 0;
    }
    v26 = (unsigned __int8 *)(v17 + 320);
    v34 = v17 + 320;
    v35 = 0;
    v36 = (void *)v17;
    v37 = 1;
    *(_BYTE *)(v17 + 320) = 0;
    *(_DWORD *)(v17 + 664) = 0;
    v27 = *(unsigned int *)(v17 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v17 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
      LODWORD(v27) = *v26;
    }
    *(_DWORD *)(v17 + 776) = 0;
    v26[v27 + 1] = 1;
    *(_BYTE *)(v17 + 320) = v27 + 1;
    v15 = &v26[8 * v27];
    v16 = ")";
LABEL_45:
    *((_QWORD *)v15 + 2) = v16;
LABEL_46:
    sub_22E3BB0B8((uint64_t)&v34);
    return;
  }
  *(_QWORD *)v7 |= 0x10000000000uLL;
  v30 = *a4;
  v33[0] = v7;
  v34 = 0;
  if (!sub_22F4175A8((uint64_t *)(a2 + 2120), v33, &v34)
    || (v31 = v34, v34 == *(_QWORD *)(a2 + 2120) + 96 * *(unsigned int *)(a2 + 2136)))
  {
    v34 = v7;
    LOBYTE(v35) = 0;
    v39 = 0;
    v40 = 0;
    v43 = 0;
    v44 = v30 | 0x100000000;
    sub_22F41764C((uint64_t)v33, a2 + 2120, &v34, (uint64_t)&v35);
    if (v43)
    {
      if (v42 < 0)
        operator delete(__p);
      v43 = 0;
    }
    if (v39 && v38 < 0)
      operator delete(v36);
  }
  else
  {
    v32 = *(unsigned __int8 *)(v34 + 92);
    *(_DWORD *)(v34 + 88) = v30;
    if (!v32)
      *(_BYTE *)(v31 + 92) = 1;
  }
}

uint64_t sub_22F189210(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18924C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F189298(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  __int16 v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v16 = v18;
  v17 = 0x800000000;
  if (!sub_22F187620(a2, (uint64_t)a4, (uint64_t)&v16))
  {
    if (*((_WORD *)a4 + 8) != 2)
    {
      v7 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v7 + 312) = *a4;
      *(_DWORD *)(v7 + 316) = 1223;
      if (*(char *)(v7 + 311) < 0)
      {
        **(_BYTE **)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v7 + 288) = 0;
        *(_BYTE *)(v7 + 311) = 0;
      }
      v8 = (unsigned __int8 *)(v7 + 320);
      v14[0] = v7 + 320;
      v14[1] = 0;
      v14[2] = v7;
      v15 = 1;
      *(_BYTE *)(v7 + 320) = 0;
      *(_DWORD *)(v7 + 664) = 0;
      v9 = *(unsigned int *)(v7 + 776);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v7 + 768);
        v11 = 56 * v9;
        do
        {
          if (*(char *)(v10 + v11 - 9) < 0)
            operator delete(*(void **)(v10 + v11 - 32));
          v11 -= 56;
        }
        while (v11);
        LODWORD(v9) = *v8;
      }
      *(_DWORD *)(v7 + 776) = 0;
      v8[v9 + 1] = 1;
      *(_BYTE *)(v7 + 320) = v9 + 1;
      *(_QWORD *)&v8[8 * v9 + 16] = "pragma";
      sub_22E3BB0B8((uint64_t)v14);
    }
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, void *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 112) + 16))(*(_QWORD *)(a2 + 112), v6, v16, v17, 0, 0) & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      sub_22F190280(a2, v12, v6);
      sub_22F415398(a2, v6 | ((unint64_t)*((unsigned int *)v16 + 4 * v17 - 2) << 32), 436, v12);
      v13 = *(_QWORD *)(a2 + 1088);
      if (v13)
        (*(void (**)(uint64_t, uint64_t, void *, _QWORD, unint64_t))(*(_QWORD *)v13 + 64))(v13, v6, v16, v17, v12);
    }
  }
  if (v16 != v18)
    free(v16);
}

uint64_t sub_22F189490(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F1894CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F189518(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  size_t v17;
  void *v18;
  void *v19;
  size_t v20;
  _DWORD *v21;
  int *v22;
  const void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  void *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  size_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[17];

  v71[16] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v69 = v71;
  v70 = 0x800000000;
  if (sub_22F187620(a2, (uint64_t)a4, (uint64_t)&v69))
    goto LABEL_40;
  if (*((_WORD *)a4 + 8) != 2)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 312) = *a4;
    *(_DWORD *)(v7 + 316) = 1223;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v8 = (unsigned __int8 *)(v7 + 320);
    v65 = (unsigned __int8 *)(v7 + 320);
    v66 = 0;
    v67 = v7;
    v68 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v9 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v7 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
      v8 = v65;
      *(_DWORD *)(v7 + 776) = 0;
      if (!v8)
      {
        v8 = (unsigned __int8 *)sub_22E3B8AAC(v66);
        v65 = v8;
      }
    }
    else
    {
      *(_DWORD *)(v7 + 776) = 0;
    }
    v8[*v8 + 1] = 1;
    v12 = v65;
    v13 = *v65;
    *v65 = v13 + 1;
    *(_QWORD *)&v12[8 * v13 + 16] = "pragma";
    sub_22E3BB0B8((uint64_t)&v65);
  }
  v14 = *(_QWORD *)(a2 + 56);
  v15 = (void *)(v14 + 496);
  v16 = *(_BYTE *)(v14 + 519);
  v18 = *(void **)(v14 + 496);
  v17 = *(_QWORD *)(v14 + 504);
  if (v16 >= 0)
    v19 = v15;
  else
    v19 = v18;
  if (v16 >= 0)
    v20 = v16 & 0x7F;
  else
    v20 = v17;
  v21 = v69;
  v22 = *(int **)(*(_QWORD *)v69 + 16);
  v24 = *v22;
  v23 = v22 + 4;
  if (v24 != v20 || v20 && memcmp(v23, v19, v20))
  {
    v25 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v25 + 312) = v21[2];
    *(_DWORD *)(v25 + 316) = 1158;
    if (*(char *)(v25 + 311) < 0)
    {
      **(_BYTE **)(v25 + 288) = 0;
      *(_QWORD *)(v25 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 288) = 0;
      *(_BYTE *)(v25 + 311) = 0;
    }
    v65 = (unsigned __int8 *)(v25 + 320);
    v66 = 0;
    v67 = v25;
    v68 = 1;
    *(_BYTE *)(v25 + 320) = 0;
    *(_DWORD *)(v25 + 664) = 0;
    v29 = *(unsigned int *)(v25 + 776);
    if ((_DWORD)v29)
    {
      v30 = *(_QWORD *)(v25 + 768);
      v31 = 56 * v29;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
      LODWORD(v29) = *(unsigned __int8 *)(v25 + 320);
    }
    *(_DWORD *)(v25 + 776) = 0;
    v32 = *(_QWORD *)v69;
    v33 = v25 + 321;
    *(_BYTE *)(v25 + 321 + v29) = 5;
    v34 = v25 + 336;
    *(_QWORD *)(v25 + 336 + 8 * v29) = v32;
    v35 = v70 > 1;
    v36 = (v29 + 1);
    *(_BYTE *)(v33 + v36) = 2;
    v37 = v29 + 2;
    *(_QWORD *)(v34 + 8 * v36) = v35;
    *(_BYTE *)(v33 + v37) = 2;
    *(_BYTE *)(v25 + 320) = v29 + 3;
    *(_QWORD *)(v34 + 8 * v37) = v20 == 0;
LABEL_37:
    v38 = v19;
    v39 = v20;
LABEL_38:
    sub_22E3B89A8(&v65, v38, v39);
LABEL_39:
    sub_22E3BB0B8((uint64_t)&v65);
    goto LABEL_40;
  }
  v26 = sub_22F138980(*(uint64_t **)(a2 + 104), (const void **)v19, v20, v21[2], 1, 0);
  if (!v26)
  {
    v40 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v40 + 312) = *((_DWORD *)v69 + 2);
    *(_DWORD *)(v40 + 316) = 1155;
    if (*(char *)(v40 + 311) < 0)
    {
      **(_BYTE **)(v40 + 288) = 0;
      *(_QWORD *)(v40 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v40 + 288) = 0;
      *(_BYTE *)(v40 + 311) = 0;
    }
    v65 = (unsigned __int8 *)(v40 + 320);
    v66 = 0;
    v67 = v40;
    v68 = 1;
    *(_BYTE *)(v40 + 320) = 0;
    *(_DWORD *)(v40 + 664) = 0;
    v50 = *(unsigned int *)(v40 + 776);
    if ((_DWORD)v50)
    {
      v51 = *(_QWORD *)(v40 + 768);
      v52 = 56 * v50;
      do
      {
        if (*(char *)(v51 + v52 - 9) < 0)
          operator delete(*(void **)(v51 + v52 - 32));
        v52 -= 56;
      }
      while (v52);
    }
    *(_DWORD *)(v40 + 776) = 0;
    goto LABEL_37;
  }
  v27 = (uint64_t *)v26;
  if ((_DWORD)v70 != 1)
  {
    v41 = 1;
    while (1)
    {
      v42 = *(unsigned int **)(*((_QWORD *)v69 + 2 * v41) + 16);
      v43 = sub_22F41FF48((uint64_t)v27, v42 + 4, *v42);
      if (!v43)
        break;
      v28 = (uint64_t *)v43;
      v41 = (v41 + 1);
      v27 = (uint64_t *)v43;
      if ((_DWORD)v41 == (_DWORD)v70)
        goto LABEL_48;
    }
    v53 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v53 + 312) = *((_DWORD *)v69 + 4 * v41 + 2);
    *(_DWORD *)(v53 + 316) = 1156;
    if (*(char *)(v53 + 311) < 0)
    {
      **(_BYTE **)(v53 + 288) = 0;
      *(_QWORD *)(v53 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v53 + 288) = 0;
      *(_BYTE *)(v53 + 311) = 0;
    }
    v65 = (unsigned __int8 *)(v53 + 320);
    v66 = 0;
    v67 = v53;
    v68 = 1;
    *(_BYTE *)(v53 + 320) = 0;
    *(_DWORD *)(v53 + 664) = 0;
    v54 = *(unsigned int *)(v53 + 776);
    if ((_DWORD)v54)
    {
      v55 = *(_QWORD *)(v53 + 768);
      v56 = 56 * v54;
      do
      {
        if (*(char *)(v55 + v56 - 9) < 0)
          operator delete(*(void **)(v55 + v56 - 32));
        v56 -= 56;
      }
      while (v56);
    }
    *(_DWORD *)(v53 + 776) = 0;
    sub_22F1D8A24(v27, 0, __p);
    if (v64 >= 0)
      v57 = __p;
    else
      v57 = (void **)__p[0];
    if (v64 >= 0)
      v58 = v64 & 0x7F;
    else
      v58 = (size_t)__p[1];
    sub_22E3B89A8(&v65, v57, v58);
    v59 = *((_QWORD *)v69 + 2 * v41);
    v60 = v65;
    if (!v65)
    {
      v60 = (unsigned __int8 *)sub_22E3B8AAC(v66);
      v65 = v60;
    }
    v60[*v60 + 1] = 5;
    v61 = v65;
    v62 = *v65;
    *v65 = v62 + 1;
    *(_QWORD *)&v61[8 * v62 + 16] = v59;
    if (v64 < 0)
      operator delete(__p[0]);
    goto LABEL_39;
  }
  v28 = (uint64_t *)v26;
LABEL_48:
  if (sub_22F16B7D0(*(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 48), (uint64_t)v28))
  {
    v44 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v44 + 312) = v6;
    *(_DWORD *)(v44 + 316) = 1258;
    if (*(char *)(v44 + 311) < 0)
    {
      **(_BYTE **)(v44 + 288) = 0;
      *(_QWORD *)(v44 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v44 + 288) = 0;
      *(_BYTE *)(v44 + 311) = 0;
    }
    v65 = (unsigned __int8 *)(v44 + 320);
    v66 = 0;
    v67 = v44;
    v68 = 1;
    *(_BYTE *)(v44 + 320) = 0;
    *(_DWORD *)(v44 + 664) = 0;
    v45 = *(unsigned int *)(v44 + 776);
    if ((_DWORD)v45)
    {
      v46 = *(_QWORD *)(v44 + 768);
      v47 = 56 * v45;
      do
      {
        if (*(char *)(v46 + v47 - 9) < 0)
          operator delete(*(void **)(v46 + v47 - 32));
        v47 -= 56;
      }
      while (v47);
    }
    *(_DWORD *)(v44 + 776) = 0;
    do
    {
      v48 = v28;
      v28 = (uint64_t *)v28[4];
    }
    while (v28);
    v49 = *((_BYTE *)v48 + 23);
    if (v49 >= 0)
      v38 = v48;
    else
      v38 = (void *)*v48;
    if (v49 >= 0)
      v39 = v49 & 0x7F;
    else
      v39 = v48[1];
    goto LABEL_38;
  }
  sub_22F1758E4(a2, v28, v6, 1);
  sub_22F415398(a2, v6 | ((unint64_t)*((unsigned int *)v69 + 4 * v70 - 2) << 32), 437, (uint64_t)v28);
LABEL_40:
  if (v69 != v71)
    free(v69);
}

uint64_t sub_22F189B10(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F189B4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22F189B98(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  __int16 v20;
  _QWORD v21[3];
  __int16 v22;

  v6 = *a4;
  v7 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v7 | 0x20;
  sub_22F18FB4C(a2, a4);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v7 & 0x20;
  if (*((_WORD *)a4 + 8) != 2)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v8 + 312) = *a4;
    *(_DWORD *)(v8 + 316) = 1223;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v9 = (unsigned __int8 *)(v8 + 320);
    v21[0] = v8 + 320;
    v21[1] = 0;
    v21[2] = v8;
    v22 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v10 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v8 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
      LODWORD(v10) = *v9;
    }
    *(_DWORD *)(v8 + 776) = 0;
    v9[v10 + 1] = 1;
    *(_BYTE *)(v8 + 320) = v10 + 1;
    *(_QWORD *)&v9[8 * v10 + 16] = "pragma";
    sub_22E3BB0B8((uint64_t)v21);
  }
  v13 = sub_22F1750EC(a2, 1);
  if (v13)
    return sub_22F415398(a2, v6 | (v6 << 32), 438, v13);
  v14 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v14 + 312) = v6;
  *(_DWORD *)(v14 + 316) = 1160;
  if (*(char *)(v14 + 311) < 0)
  {
    **(_BYTE **)(v14 + 288) = 0;
    *(_QWORD *)(v14 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v14 + 288) = 0;
    *(_BYTE *)(v14 + 311) = 0;
  }
  v19[0] = v14 + 320;
  v19[1] = 0;
  v19[2] = v14;
  v20 = 1;
  *(_BYTE *)(v14 + 320) = 0;
  *(_DWORD *)(v14 + 664) = 0;
  v15 = *(unsigned int *)(v14 + 776);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(v14 + 768);
    v17 = 56 * v15;
    do
    {
      if (*(char *)(v16 + v17 - 9) < 0)
        operator delete(*(void **)(v16 + v17 - 32));
      v17 -= 56;
    }
    while (v17);
  }
  *(_DWORD *)(v14 + 776) = 0;
  return (char *)sub_22E3BB0B8((uint64_t)v19);
}

uint64_t sub_22F189D74(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F189DB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F189DFC(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  int *v25;
  int v26;
  int v27;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  unsigned int v37;
  int *v38;
  int v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  v6 = *a4;
  v50 = 0;
  result = sub_22F183CD0(a2, (uint64_t)a4, (uint64_t)&v50, 1u);
  if ((result & 1) == 0)
  {
    v8 = v50;
    v9 = *(_WORD *)(a2 + 536);
    *(_WORD *)(a2 + 536) = v9 | 0x20;
    sub_22F18FB4C(a2, a4);
    *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v9 & 0x20;
    if (*((_WORD *)a4 + 8) != 2)
    {
      v10 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v10 + 312) = *a4;
      *(_DWORD *)(v10 + 316) = 1223;
      if (*(char *)(v10 + 311) < 0)
      {
        **(_BYTE **)(v10 + 288) = 0;
        *(_QWORD *)(v10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v10 + 288) = 0;
        *(_BYTE *)(v10 + 311) = 0;
      }
      v46 = (_BYTE *)(v10 + 320);
      v47 = 0;
      v48 = v10;
      v49 = 1;
      *(_BYTE *)(v10 + 320) = 0;
      *(_DWORD *)(v10 + 664) = 0;
      v11 = *(unsigned int *)(v10 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v10 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
        v14 = *(unsigned __int8 *)(v10 + 320);
      }
      else
      {
        v14 = 0;
      }
      *(_DWORD *)(v10 + 776) = 0;
      *(_BYTE *)(v10 + v14 + 321) = 1;
      v15 = v46;
      v16 = *v46;
      *v46 = v16 + 1;
      *(_QWORD *)&v15[8 * v16 + 16] = "pragma";
      sub_22E3BB0B8((uint64_t)&v46);
      sub_22F163BBC(a2);
    }
    v17 = *(_QWORD *)(a2 + 1008);
    *(_BYTE *)(v17 + 26) = 1;
    v18 = *(_QWORD *)(v17 + 184);
    v19 = 1;
    do
    {
      while (1)
      {
        v20 = *(_QWORD *)(a2 + 1008);
        v21 = *(_QWORD *)(v20 + 184);
        sub_22F14651C((_BYTE *)v20, (uint64_t)a4);
        v22 = *((unsigned __int16 *)a4 + 8);
        if (v22 != 66)
          break;
        if ((*((_WORD *)a4 + 9) & 1) != 0)
        {
          v23 = *(_BYTE **)(a2 + 1008);
          v23[24] = 1;
          sub_22F14651C(v23, (uint64_t)a4);
          if (*((_WORD *)a4 + 8) == 6 && a4[1] == 6)
          {
            v25 = (int *)*((_QWORD *)a4 + 1);
            v26 = *v25;
            v27 = *((unsigned __int16 *)v25 + 2);
            if (v26 == 1734439536 && v27 == 24941)
            {
              sub_22F14651C(*(_BYTE **)(a2 + 1008), (uint64_t)a4);
              if (*((_WORD *)a4 + 8) == 6 && a4[1] == 5)
              {
                v29 = (int *)*((_QWORD *)a4 + 1);
                v30 = *v29;
                v31 = *((unsigned __int8 *)v29 + 4);
                if (v30 == 1851878499 && v31 == 103)
                {
                  sub_22F14651C(*(_BYTE **)(a2 + 1008), (uint64_t)a4);
                  if (*((_WORD *)a4 + 8) == 6 && a4[1] == 6)
                  {
                    v33 = (int *)*((_QWORD *)a4 + 1);
                    v34 = *v33;
                    v35 = *((unsigned __int16 *)v33 + 2);
                    if (v34 == 1969516397 && v35 == 25964)
                    {
                      sub_22F14651C(*(_BYTE **)(a2 + 1008), (uint64_t)a4);
                      if (*((_WORD *)a4 + 8) == 6)
                      {
                        v37 = a4[1];
                        if (v37 == 8)
                        {
                          if (**((_QWORD **)a4 + 1) == 0x646C697562646E65)
                          {
                            sub_22F14651C(*(_BYTE **)(a2 + 1008), (uint64_t)a4);
                            if (!--v19)
                              goto LABEL_64;
                          }
                        }
                        else if (v37 == 5)
                        {
                          v38 = (int *)*((_QWORD *)a4 + 1);
                          v39 = *v38;
                          v40 = *((unsigned __int8 *)v38 + 4);
                          if (v39 == 1818850658 && v40 == 100)
                          {
                            sub_22F14651C(*(_BYTE **)(a2 + 1008), (uint64_t)a4);
                            ++v19;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    while (v22 != 1);
    v42 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v42 + 312) = v6;
    *(_DWORD *)(v42 + 316) = 1159;
    if (*(char *)(v42 + 311) < 0)
    {
      **(_BYTE **)(v42 + 288) = 0;
      *(_QWORD *)(v42 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v42 + 288) = 0;
      *(_BYTE *)(v42 + 311) = 0;
    }
    v46 = (_BYTE *)(v42 + 320);
    v47 = 0;
    v48 = v42;
    v49 = 1;
    *(_BYTE *)(v42 + 320) = 0;
    *(_DWORD *)(v42 + 664) = 0;
    v43 = *(unsigned int *)(v42 + 776);
    if ((_DWORD)v43)
    {
      v44 = *(_QWORD *)(v42 + 768);
      v45 = 56 * v43;
      do
      {
        if (*(char *)(v44 + v45 - 9) < 0)
          operator delete(*(void **)(v44 + v45 - 32));
        v45 -= 56;
      }
      while (v45);
    }
    *(_DWORD *)(v42 + 776) = 0;
    sub_22E3BB0B8((uint64_t)&v46);
LABEL_64:
    *(_BYTE *)(*(_QWORD *)(a2 + 1008) + 26) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 112) + 24))(*(_QWORD *)(a2 + 112), v6, *(_QWORD *)(v8 + 16) + 16, **(unsigned int **)(v8 + 16), v18, v21 - v18);
  }
  return result;
}

uint64_t sub_22F18A1D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18A210(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F18A25C(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  __int16 v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v14 = v16;
  v15 = 0x800000000;
  if (!sub_22F187620(a2, (uint64_t)a4, (uint64_t)&v14))
  {
    if (*((_WORD *)a4 + 8) != 2)
    {
      v7 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v7 + 312) = *a4;
      *(_DWORD *)(v7 + 316) = 1223;
      if (*(char *)(v7 + 311) < 0)
      {
        **(_BYTE **)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v7 + 288) = 0;
        *(_BYTE *)(v7 + 311) = 0;
      }
      v8 = (unsigned __int8 *)(v7 + 320);
      v12[0] = v7 + 320;
      v12[1] = 0;
      v12[2] = v7;
      v13 = 1;
      *(_BYTE *)(v7 + 320) = 0;
      *(_DWORD *)(v7 + 664) = 0;
      v9 = *(unsigned int *)(v7 + 776);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v7 + 768);
        v11 = 56 * v9;
        do
        {
          if (*(char *)(v10 + v11 - 9) < 0)
            operator delete(*(void **)(v10 + v11 - 32));
          v11 -= 56;
        }
        while (v11);
        LODWORD(v9) = *v8;
      }
      *(_DWORD *)(v7 + 776) = 0;
      v8[v9 + 1] = 1;
      *(_BYTE *)(v7 + 320) = v9 + 1;
      *(_QWORD *)&v8[8 * v9 + 16] = "pragma";
      sub_22E3BB0B8((uint64_t)v12);
    }
    (*(void (**)(_QWORD, uint64_t, void *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 112) + 16))(*(_QWORD *)(a2 + 112), v6, v14, v15, 0, 0);
  }
  if (v14 != v16)
    free(v14);
}

uint64_t sub_22F18A3F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18A42C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F18A47C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22F18A4B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F18A504(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v19;
  int v20;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  const char *v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _QWORD v91[3];
  __int16 v92;
  unint64_t v93;
  _QWORD v94[3];
  __int16 v95;
  _QWORD v96[3];
  __int16 v97;
  _QWORD v98[3];
  __int16 v99;
  _QWORD v100[3];
  __int16 v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v7 = *(_QWORD *)(a2 + 1088);
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) != 21)
  {
    v45 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v45 + 312) = *a4;
    *(_DWORD *)(v45 + 316) = 1367;
    if (*(char *)(v45 + 311) < 0)
    {
      **(_BYTE **)(v45 + 288) = 0;
      *(_QWORD *)(v45 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v45 + 288) = 0;
      *(_BYTE *)(v45 + 311) = 0;
    }
    v47 = (unsigned __int8 *)(v45 + 320);
    v102 = (uint64_t *)(v45 + 320);
    v103 = 0;
    v104 = v45;
    v105 = 1;
    *(_BYTE *)(v45 + 320) = 0;
    *(_DWORD *)(v45 + 664) = 0;
    v48 = *(unsigned int *)(v45 + 776);
    if ((_DWORD)v48)
    {
      v49 = *(_QWORD *)(v45 + 768);
      v50 = 56 * v48;
      do
      {
        if (*(char *)(v49 + v50 - 9) < 0)
          operator delete(*(void **)(v49 + v50 - 32));
        v50 -= 56;
      }
      while (v50);
      LODWORD(v48) = *v47;
    }
    *(_DWORD *)(v45 + 776) = 0;
    v47[v48 + 1] = 1;
    *(_BYTE *)(v45 + 320) = v48 + 1;
    v51 = &v47[8 * v48];
    v52 = "(";
    goto LABEL_111;
  }
  sub_22F18FB4C(a2, a4);
  v8 = *((unsigned __int16 *)a4 + 8);
  if ((v8 - 7) >= 6 && (v8 - 13) >= 6 && v8 != 1)
  {
    v62 = *((_QWORD *)a4 + 1);
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 16);
      if (*(_DWORD *)v63 == 3)
      {
        v75 = *(unsigned __int16 *)(v63 + 16);
        v76 = *(unsigned __int8 *)(v63 + 18);
        if (v75 == 28528 && v76 == 112)
        {
          sub_22F18FB4C(a2, a4);
          if (sub_22F1CBE18(*(uint64_t **)(a2 + 48), v6))
          {
            if (v7)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 184))(v7, v6);
          }
          else
          {
            v82 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v82 + 312) = *a4;
            *(_DWORD *)(v82 + 316) = 1350;
            if (*(char *)(v82 + 311) < 0)
            {
              **(_BYTE **)(v82 + 288) = 0;
              *(_QWORD *)(v82 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v82 + 288) = 0;
              *(_BYTE *)(v82 + 311) = 0;
            }
            v98[0] = v82 + 320;
            v98[1] = 0;
            v98[2] = v82;
            v99 = 1;
            *(_BYTE *)(v82 + 320) = 0;
            *(_DWORD *)(v82 + 664) = 0;
            v86 = *(unsigned int *)(v82 + 776);
            if ((_DWORD)v86)
            {
              v87 = *(_QWORD *)(v82 + 768);
              v88 = 56 * v86;
              do
              {
                if (*(char *)(v87 + v88 - 9) < 0)
                  operator delete(*(void **)(v87 + v88 - 32));
                v88 -= 56;
              }
              while (v88);
            }
            *(_DWORD *)(v82 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v98);
          }
LABEL_95:
          if (*((_WORD *)a4 + 8) == 22)
          {
            sub_22F18FB4C(a2, a4);
            if (*((_WORD *)a4 + 8) == 2)
              return;
            v44 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v44 + 312) = *a4;
            *(_DWORD *)(v44 + 316) = 1223;
            if (*(char *)(v44 + 311) < 0)
            {
              **(_BYTE **)(v44 + 288) = 0;
              *(_QWORD *)(v44 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v44 + 288) = 0;
              *(_BYTE *)(v44 + 311) = 0;
            }
            v78 = (unsigned __int8 *)(v44 + 320);
            v102 = (uint64_t *)(v44 + 320);
            v103 = 0;
            v104 = v44;
            v105 = 1;
            *(_BYTE *)(v44 + 320) = 0;
            *(_DWORD *)(v44 + 664) = 0;
            v79 = *(unsigned int *)(v44 + 776);
            if ((_DWORD)v79)
            {
              v80 = *(_QWORD *)(v44 + 768);
              v81 = 56 * v79;
              do
              {
                if (*(char *)(v80 + v81 - 9) < 0)
                  operator delete(*(void **)(v80 + v81 - 32));
                v81 -= 56;
              }
              while (v81);
              LODWORD(v79) = *v78;
            }
            *(_DWORD *)(v44 + 776) = 0;
            v78[v79 + 1] = 1;
            *(_BYTE *)(v44 + 320) = v79 + 1;
            v51 = &v78[8 * v79];
            v52 = "pragma warning";
          }
          else
          {
            v66 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v66 + 312) = *a4;
            *(_DWORD *)(v66 + 316) = 1367;
            if (*(char *)(v66 + 311) < 0)
            {
              **(_BYTE **)(v66 + 288) = 0;
              *(_QWORD *)(v66 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v66 + 288) = 0;
              *(_BYTE *)(v66 + 311) = 0;
            }
            v71 = (unsigned __int8 *)(v66 + 320);
            v102 = (uint64_t *)(v66 + 320);
            v103 = 0;
            v104 = v66;
            v105 = 1;
            *(_BYTE *)(v66 + 320) = 0;
            *(_DWORD *)(v66 + 664) = 0;
            v72 = *(unsigned int *)(v66 + 776);
            if ((_DWORD)v72)
            {
              v73 = *(_QWORD *)(v66 + 768);
              v74 = 56 * v72;
              do
              {
                if (*(char *)(v73 + v74 - 9) < 0)
                  operator delete(*(void **)(v73 + v74 - 32));
                v74 -= 56;
              }
              while (v74);
              LODWORD(v72) = *v71;
            }
            *(_DWORD *)(v66 + 776) = 0;
            v71[v72 + 1] = 1;
            *(_BYTE *)(v66 + 320) = v72 + 1;
            v51 = &v71[8 * v72];
            v52 = ")";
          }
          goto LABEL_111;
        }
      }
      else if (*(_DWORD *)v63 == 4 && *(_DWORD *)(v63 + 16) == 1752397168)
      {
        sub_22F18FB4C(a2, a4);
        if (*((_WORD *)a4 + 8) == 65)
        {
          sub_22F18FB4C(a2, a4);
          v102 = 0;
          if (*((_WORD *)a4 + 8) != 7
            || !sub_22F190750(a2, (int *)a4, &v102)
            || (v64 = v102, v102 >= 5))
          {
            v65 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v65 + 312) = *a4;
            *(_DWORD *)(v65 + 316) = 1369;
            if (*(char *)(v65 + 311) < 0)
            {
              **(_BYTE **)(v65 + 288) = 0;
              *(_QWORD *)(v65 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v65 + 288) = 0;
              *(_BYTE *)(v65 + 311) = 0;
            }
            v100[0] = v65 + 320;
            v100[1] = 0;
            v100[2] = v65;
            v101 = 1;
            *(_BYTE *)(v65 + 320) = 0;
            *(_DWORD *)(v65 + 664) = 0;
            v83 = *(unsigned int *)(v65 + 776);
            if ((_DWORD)v83)
            {
              v84 = *(_QWORD *)(v65 + 768);
              v85 = 56 * v83;
              do
              {
                if (*(char *)(v84 + v85 - 9) < 0)
                  operator delete(*(void **)(v84 + v85 - 32));
                v85 -= 56;
              }
              while (v85);
            }
            *(_DWORD *)(v65 + 776) = 0;
            v53 = (uint64_t **)v100;
            goto LABEL_130;
          }
        }
        else
        {
          v64 = 0xFFFFFFFFLL;
        }
        sub_22F41A4A0(*(_QWORD *)(a2 + 48));
        if (v7)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 176))(v7, v6, v64);
        goto LABEL_95;
      }
    }
  }
  v89 = v7;
  v10 = &v104;
  do
  {
    v11 = *((unsigned __int16 *)a4 + 8);
    if (v11 - 7 >= 6)
    {
      v12 = v11 > 0x12;
      v13 = (1 << v11) & 0x7E002;
      v14 = v12 || v13 == 0;
      if (!v14 || (v15 = *((_QWORD *)a4 + 1)) == 0)
      {
LABEL_101:
        v46 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v46 + 312) = *a4;
        *(_DWORD *)(v46 + 316) = 1370;
        if (*(char *)(v46 + 311) < 0)
        {
          **(_BYTE **)(v46 + 288) = 0;
          *(_QWORD *)(v46 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v46 + 288) = 0;
          *(_BYTE *)(v46 + 311) = 0;
        }
        v96[0] = v46 + 320;
        v96[1] = 0;
        v96[2] = v46;
        v97 = 1;
        *(_BYTE *)(v46 + 320) = 0;
        *(_DWORD *)(v46 + 664) = 0;
        v54 = *(unsigned int *)(v46 + 776);
        if ((_DWORD)v54)
        {
          v55 = *(_QWORD *)(v46 + 768);
          v56 = 56 * v54;
          do
          {
            if (*(char *)(v55 + v56 - 9) < 0)
              operator delete(*(void **)(v55 + v56 - 32));
            v56 -= 56;
          }
          while (v56);
        }
        *(_DWORD *)(v46 + 776) = 0;
        v53 = (uint64_t **)v96;
        goto LABEL_130;
      }
      v16 = *(unsigned int **)(v15 + 16);
      v17 = *v16;
      if (v17 == 7)
      {
        if (v16[4] == 1634100580 && *(unsigned int *)((char *)v16 + 19) == 1953264993)
        {
          v90 = 0;
LABEL_46:
          sub_22F18FB4C(a2, a4);
          goto LABEL_47;
        }
        v19 = v16[4];
        v20 = *(unsigned int *)((char *)v16 + 19);
        if (v19 != 1634953572 || v20 != 1701601889)
          goto LABEL_119;
        v22 = 1;
      }
      else
      {
        switch((_DWORD)v17)
        {
          case 4:
            if (v16[4] != 1701015151)
              goto LABEL_119;
            v22 = 3;
            break;
          case 8:
            if (*((_QWORD *)v16 + 2) != 0x7373657270707573)
              goto LABEL_119;
            v22 = 4;
            break;
          case 5:
            v23 = v16[4];
            v24 = *((unsigned __int8 *)v16 + 20);
            if (v23 != 1869771365 || v24 != 114)
              goto LABEL_119;
            v22 = 2;
            break;
          default:
            goto LABEL_119;
        }
      }
      v90 = v22;
      goto LABEL_46;
    }
    if (v11 != 7)
      goto LABEL_101;
    v102 = 0;
    if (!sub_22F190750(a2, (int *)a4, &v102) || (unint64_t)v102 - 1 >= 4)
    {
LABEL_119:
      v57 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v57 + 312) = *a4;
      *(_DWORD *)(v57 + 316) = 1370;
      if (*(char *)(v57 + 311) < 0)
      {
        **(_BYTE **)(v57 + 288) = 0;
        *(_QWORD *)(v57 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v57 + 288) = 0;
        *(_BYTE *)(v57 + 311) = 0;
      }
      v94[0] = v57 + 320;
      v94[1] = 0;
      v94[2] = v57;
      v95 = 1;
      *(_BYTE *)(v57 + 320) = 0;
      *(_DWORD *)(v57 + 664) = 0;
      v59 = *(unsigned int *)(v57 + 776);
      if ((_DWORD)v59)
      {
        v60 = *(_QWORD *)(v57 + 768);
        v61 = 56 * v59;
        do
        {
          if (*(char *)(v60 + v61 - 9) < 0)
            operator delete(*(void **)(v60 + v61 - 32));
          v61 -= 56;
        }
        while (v61);
      }
      *(_DWORD *)(v57 + 776) = 0;
      v53 = (uint64_t **)v94;
      goto LABEL_130;
    }
    v90 = (_DWORD)v102 + 4;
LABEL_47:
    if (*((_WORD *)a4 + 8) != 61)
    {
      v58 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v58 + 312) = *a4;
      *(_DWORD *)(v58 + 316) = 1367;
      if (*(char *)(v58 + 311) < 0)
      {
        **(_BYTE **)(v58 + 288) = 0;
        *(_QWORD *)(v58 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v58 + 288) = 0;
        *(_BYTE *)(v58 + 311) = 0;
      }
      v67 = (unsigned __int8 *)(v58 + 320);
      v102 = (uint64_t *)(v58 + 320);
      v103 = 0;
      v104 = v58;
      v105 = 1;
      *(_BYTE *)(v58 + 320) = 0;
      *(_DWORD *)(v58 + 664) = 0;
      v68 = *(unsigned int *)(v58 + 776);
      if ((_DWORD)v68)
      {
        v69 = *(_QWORD *)(v58 + 768);
        v70 = 56 * v68;
        do
        {
          if (*(char *)(v69 + v70 - 9) < 0)
            operator delete(*(void **)(v69 + v70 - 32));
          v70 -= 56;
        }
        while (v70);
        LODWORD(v68) = *v67;
      }
      *(_DWORD *)(v58 + 776) = 0;
      v67[v68 + 1] = 1;
      *(_BYTE *)(v58 + 320) = v68 + 1;
      v51 = &v67[8 * v68];
      v52 = ":";
LABEL_111:
      *((_QWORD *)v51 + 2) = v52;
      v53 = &v102;
LABEL_130:
      sub_22E3BB0B8((uint64_t)v53);
      return;
    }
    v26 = v10;
    v102 = v10;
    v103 = 0x400000000;
    sub_22F18FB4C(a2, a4);
    while (1)
    {
      if (*((_WORD *)a4 + 8) != 7)
      {
        if (v90 != 1 || !(_DWORD)v103)
        {
LABEL_85:
          if (v89)
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)v89 + 168))(v89, v6, v90, v102, v103);
          v10 = v26;
          if (*((_WORD *)a4 + 8) == 62)
          {
            sub_22F18FB4C(a2, a4);
            v43 = 0;
          }
          else
          {
            v43 = 3;
          }
          goto LABEL_91;
        }
        v35 = v102;
        v36 = 4 * v103;
        while (1)
        {
          v37 = *(_DWORD *)v35;
          if (*(int *)v35 <= 4099)
          {
            if (v37 == 4005)
            {
              v38 = 256;
              v39 = 215;
              goto LABEL_83;
            }
            if (v37 == 4018)
            {
              v38 = 768;
              v39 = 5;
              goto LABEL_83;
            }
          }
          else
          {
            switch(v37)
            {
              case 4100:
                v38 = 768;
                v39 = 167;
                goto LABEL_83;
              case 4910:
                v38 = 0;
                v39 = 254;
                goto LABEL_83;
              case 4996:
                v38 = 0;
                v39 = 227;
LABEL_83:
                v40 = *(_QWORD *)(a2 + 48);
                v41 = sub_22F41A9D4(v38 | v39);
                sub_22F1CCCF4(v40, 0, v41, v42, v90 == 1, v6);
                break;
            }
          }
          v35 = (uint64_t *)((char *)v35 + 4);
          v36 -= 4;
          if (!v36)
            goto LABEL_85;
        }
      }
      v93 = 0;
      v27 = sub_22F190750(a2, (int *)a4, (uint64_t **)&v93) ^ 1;
      v28 = v93;
      if (!v93)
        v27 = 1;
      v29 = (v93 & 0xFFFFFFFF80000000) != 0 ? 1 : v27;
      if (v29 == 1)
        break;
      v31 = v103;
      if (v103 >= (unint64_t)HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = v103;
      }
      *((_DWORD *)v102 + v31) = v28;
      LODWORD(v103) = v103 + 1;
      if ((v29 & 1) != 0)
        goto LABEL_89;
    }
    v30 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v30 + 312) = *a4;
    *(_DWORD *)(v30 + 316) = 1368;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    v91[0] = v30 + 320;
    v91[1] = 0;
    v91[2] = v30;
    v92 = 1;
    *(_BYTE *)(v30 + 320) = 0;
    *(_DWORD *)(v30 + 664) = 0;
    v32 = *(unsigned int *)(v30 + 776);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)(v30 + 768);
      v34 = 56 * v32;
      do
      {
        if (*(char *)(v33 + v34 - 9) < 0)
          operator delete(*(void **)(v33 + v34 - 32));
        v34 -= 56;
      }
      while (v34);
    }
    *(_DWORD *)(v30 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v91);
LABEL_89:
    v43 = 1;
    v10 = v26;
LABEL_91:
    if (v102 != v10)
      free(v102);
  }
  while (!v43);
  if (v43 == 3)
    goto LABEL_95;
}

